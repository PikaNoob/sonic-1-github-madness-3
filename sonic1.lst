00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            		include "MapMacros.asm"
00000000 =00000001                  SonicMappingsVer = 1
00000000 =00000001                  SonicDplcVer = 1
00000000                            
00000000                            ; macro to declare a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTable macro
00000000                            ;@current_mappings_table = *
00000000                            ;	endm
00000000                            
00000000 =00000005                  MappingSize		= 5
00000000 =00000001                  MappingHeaderSize	= 1
00000000                            
00000000                            ; macro to declare an entry in a mappings table (taken from Sonic 2 Hg disassembly)
00000000                            ;mappingsTableEntry macro ptr
00000000                            ;	dc.ATTRIBUTE ptr-.current_mappings_table
00000000                            ;	endm
00000000                            
00000000                            ;spriteHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicMappingsVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	elseif SonicMappingsVer=4
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / MappingSize)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / MappingSize)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            spritePiece macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(((tile)>>1)|((tile)&$8000))
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            spritePiece2P macro xpos,ypos,width,height,tile,xflip,yflip,pal,pri,tile2,xflip2,yflip2,pal2,pri2
00000000                            	if SonicMappingsVer=1
00000000                            	dc.b	ypos
00000000                            	dc.b	(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.b	((((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile))>>8
00000000                            	dc.b	tile&$FF
00000000                            	dc.b	xpos
00000000                            	elseif SonicMappingsVer=2
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	(((pri2&1)<<15)|((pal2&3)<<13)|((yflip2&1)<<12)|((xflip2&1)<<11))+(tile2)
00000000                            	dc.w	xpos
00000000                            	else
00000000                            	dc.w	((ypos&$FF)<<8)|(((width-1)&3)<<2)|((height-1)&3)
00000000                            	dc.w	(((pri&1)<<15)|((pal&3)<<13)|((yflip&1)<<12)|((xflip&1)<<11))+(tile)
00000000                            	dc.w	xpos
00000000                            	endif
00000000                            	endm
00000000                            
00000000                            ;dplcHeader macro {INTLABEL}
00000000                            ;__LABEL__ label *
00000000                            ;	if SonicDplcVer=1
00000000                            ;	dc.b ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	elseif SonicDplcVer=3
00000000                            ;	dc.w (((__LABEL___End - __LABEL___Begin) / 2)-1)
00000000                            ;	else
00000000                            ;	dc.w ((__LABEL___End - __LABEL___Begin) / 2)
00000000                            ;	endif
00000000                            ;__LABEL___Begin label *
00000000                            ;	endm
00000000                            
00000000                            dplcEntry macro tiles,offset
00000000                            	if SonicDplcVer=3
00000000                            	dc.w	((offset&$FFF)<<4)|((tiles-1)&$F)
00000000                            	elseif SonicDplcVer=4
00000000                            	dc.w	(((tiles-1)&$F)<<12)|((offset&$FFF)<<4)
00000000                            	else
00000000                            	dc.w	(((tiles-1)&$F)<<12)|(offset&$FFF)
00000000                            	endif
00000000                            	endm
00000000                            	endm
00000000                            
00000000                            ;level select constants (to not give the foward reference warning this was moved here)
00000000 =60860003                  lsscrpos = $60860003 ; level select screen position
00000000 =00240000                  lsoff = $240000 ; second row jump
00000000 =64C20003                  lsstpos = lsscrpos+$43C0000 ; sound test
00000000 =6C820003                  lsnppos = $6C820003	; now playing
00000000 =6D020003                  lsctrlpos = $6D020003 ; control help
00000000                            lsrow1size: equ (LMTSecondRow-LevelMenuText)/16
00000000                            lsrow2size: equ (LMTEnd-LMTSecondRow)/16
00000000                            lsselectable: equ ((LMTSelectableEnd-LevelMenuText)/16)-1 ; last selectable item
00000000                            ; level select item constants
00000000                            lssndtest: equ lsrow1size+8
00000000                            lswifi: equ lsrow1size+9
00000000                            
00000000 =FFFFFFC4                  vBlankRoutine equ $FFFFFFC4 ; VBlank Routine Jump Instruction (6 bytes)
00000000 =FFFFFFC4                  vBlankJump equ vBlankRoutine
00000000 =FFFFFFC6                  vBlankAdress equ vBlankRoutine+2
00000000                            ; options menu
00000000                            optamm: equ ((OMTEnd-OptionMenuText)/16)-1
00000000                            
00000000                            ; NOTES FOR ANYONE MAKING CHARACTERS
00000000 =FFFFFFE8                  v_character = $FFFFFFE8
00000000                            ; pointers for:
00000000                            ; PLAYER MAPPINGS -> Player_Maps
00000000                            ; PLAYER ANIM SCRIPTS -> Player_Anim
00000000                            ; PLAYER ART -> Player_Art
00000000                            ; PLAYER DPLC -> Player_DPLC
00000000                            ; PLAYER PALETTE -> Player_Palette
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 50FF FE00 0000 0000 0000+  Vectors:	dc.l 'P'<<24|$FFFE00,		'O'<<24|EntryPoint,	'Y'<<24|BusError,	'S'<<24|AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l 'U'<<24|IllegalInstr,	'F'<<24|ZeroDivide,	'O'<<24|ChkInstr,	'K'<<24|TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|PrivilegeViol,	'F'<<24|Trace,		'U'<<24|Line1010Emu,	'I'<<24|Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l 'L'<<24|ErrorExcept,	' '<<24|ErrorExcept,	'R'<<24|ErrorExcept,	'N'<<24|ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|ErrorExcept,	' '<<24|'H'<<24|ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l 'B'<<24|ErrorExcept,	'O'<<24|ErrorExcept,	'I'<<24|ErrorExcept,	'L'<<24|ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l 'H'<<24|ErrorExcept,	'I'<<24|ErrorTrap,	'M'<<24|ErrorTrap,	' '<<24|ErrorTrap
00000070 0000 0000 0000 0000 FFFF+  		dc.l ' '<<24|PalToCRAM,		PalToCRAM,		' '<<24|vBlankRoutine,	vBlankRoutine
00000080 5768 6174 2069 7320 6120+  		dc.b 'What is a hex editor? A miserable little detector of secrets!   But enough talk,fuck off you!'
000000DD 2020 2020 2020 2020 2020+  		dcb.b $100-*,' '
00000100 2053 4547 4141 4141 4141+  Console:	dc.b ' SEGAAAAAAAAAAAA' ; NOTE: " SEGA" is valid for the TMSS, but not for some other stuff, namely the game genie
00000110 4141 4141 4141 4141 4141+  Date:		dc.b 'AAAAAAAAAAAAAAAA'
00000120 4966 2079 6F75 2063 616E+  Title_Local:	dc.b 'If you can see this, your emulator is homoerotic' ; Domestic name
00000150                            		dcb.b $150-*,' '
00000150 686F 7720 746F 2064 6973+  Title_Int:	dc.b 'how to disassemble vhs tapes on a slab of wood'
0000017E 2020                       		dcb.b $180-*,' '
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'	; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A4A 4A4A 4A4A 4A4A 4A4A+  		dcb.b $1A0-*,'J'	; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 6964 6B20 6920 7370 656E+  Notes:		dc.b 'idk i spent all my  mental budget on the other stuff'
000001F0                            		dcb.b $1F0-*,' '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            	even
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 007C 0700                  		ori	#$700,sr
0000030A                            
0000030A 0839 0006 00A1 000D        		btst	#6,($A1000D).l
00000312 6700                       		beq.s	CheckSumCheck
00000314 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
0000031C 6700 0000                  		beq.w	GameInit	; if yes, branch
00000320                            
00000320                            CheckSumCheck:
00000320                            ;		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000320                            ;		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000320                            ;		move.l	(a1),d0
00000320                            ;		moveq	#0,d1
00000320                            ;
00000320                            ;loc_32C:
00000320                            ;		add.w	(a0)+,d1
00000320                            ;		cmp.l	a0,d0
00000320                            ;		bcc.s	loc_32C
00000320                            ;		movea.l	#Checksum,a1	; read the checksum
00000320                            ;		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
00000320                            ;		bne.w	CheckSumError	; if they don't match, branch
00000320 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000324 7E00                       		moveq	#0,d7
00000326 3C3C 007F                  		move.w	#$7F,d6
0000032A                            
0000032A                            loc_348:
0000032A 2CC7                       		move.l	d7,(a6)+
0000032C 51CE FFFC                  		dbf	d6,loc_348
00000330 1039 00A1 0001             		move.b	($A10001).l,d0
00000336 0200 00C0                  		andi.b	#$C0,d0
0000033A 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000033E                            GameInit:
0000033E 4DF9 00FF 0000             		lea	($FF0000).l,a6
00000344 7E00                       		moveq	#0,d7
00000346 3C3C 3F7F                  		move.w	#$3F7F,d6
0000034A                            
0000034A                            GameClrRAM:
0000034A 2CC7                       		move.l	d7,(a6)+
0000034C 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000350                            
00000350 31FC 4EF9 FFC4             		move.w	#$4EF9,(vBlankJump).w			; JMP opcode
00000356 21FC 0000 0000 FFC6        		move.l	#loc_B10,(vBlankAdress).w		; Set the V-INT pointer to the standard V-INT routine
0000035E                            
0000035E 6100 0000                  		bsr.w	VDPSetupGame
00000362 6100 0000                  		bsr.w	SoundDriverLoad
00000366 6100 0000                  		bsr.w	JoypadInit
0000036A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000370                            
00000370 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w	; has checksum routine already run?
00000378 6700 0000                  		beq.w	@nosplashscreens	; if yes, branch
0000037C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w	; set flag so checksum won't be run again
00000384 1039 00A1 0001             		move.b	($A10001).l,d0
0000038A 0240 000F                  		and.w	#$F,d0
0000038E 6700                       		beq.s	@notmss
00000390 4EB9 0000 0000             		jsr	GM_AntiTMSS
00000396                            @notmss:
00000396                            @nosplashscreens:
00000396                            	;	move.b	#$20,($FFFFF600).w ; set Game Mode to Minecraft
00000396 4EB9 0000 0000                             jsr     MegaPCM_LoadDriver
0000039C 41F9 0000 0000                             lea     SampleTable, a0
000003A2 4EB9 0000 0000                             jsr     MegaPCM_LoadSampleTable
000003A8                            MainGameLoop:
000003A8 707E                       		moveq	#$7E,d0
000003AA C038 F600                  		and.b	($FFFFF600).w,d0 ; load	Game Mode
000003AE 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
000003B2 60F4                       		bra.s	MainGameLoop
000003B4                            ; ===========================================================================
000003B4                            ; ---------------------------------------------------------------------------
000003B4                            ; Main game mode array
000003B4                            ; ---------------------------------------------------------------------------
000003B4                            
000003B4                            GameModeArray:
000003B4 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
000003B8                            ; ===========================================================================
000003B8 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
000003BC                            ; ===========================================================================
000003BC 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003C0                            ; ===========================================================================
000003C0 6000 0000                  		bra.w	Level	; Normal Level ($0C)
000003C4                            ; ===========================================================================
000003C4 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003C8                            ; ===========================================================================
000003C8 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003CC                            ; ===========================================================================
000003CC 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003D0                            ; ===========================================================================
000003D0 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003D4                            ; ===========================================================================
000003D4 6000 0000                  		bra.w	jmpto_Minecraft	; Minecraft ($20)
000003D8                            ; ===========================================================================
000003D8 6000 0000                  		bra.w	jmpto_BeeBush   ; BeeBush ($24)	
000003DC                            ; ===========================================================================
000003DC                            ; uuuuuuuuuuuuuuuuuuuuuuuuuuuuu
000003DC                            
000003DC                            jmpto_Minecraft:
000003DC 4EF9 0000 0000             		jmp     Minecraft
000003E2                            
000003E2                            jmpto_BeeBush:
000003E2 4EF9 0000 0000             		jmp     GM_BEEBUSH
000003E8                            
000003E8                            
000003E8                            CheckSumError:
000003E8 6100 0000                  		bsr.w	VDPSetupGame
000003EC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003F6 7E3F                       		moveq	#$3F,d7
000003F8                            
000003F8                            CheckSum_Red:
000003F8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
00000400 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
00000404                            
00000404                            CheckSum_Loop:
00000404 60FE                       		bra.s	CheckSum_Loop
00000406                            ; ===========================================================================
00000406                            
00000406                            BusError:
00000406 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
0000040C 6000                       		bra.s	loc_43A
0000040E                            ; ===========================================================================
0000040E                            
0000040E                            AddressError:
0000040E 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
00000414 6000                       		bra.s	loc_43A
00000416                            ; ===========================================================================
00000416                            
00000416                            IllegalInstr:
00000416 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
0000041C 54AF 0002                  		addq.l	#2,2(sp)
00000420 6000                       		bra.s	loc_462
00000422                            ; ===========================================================================
00000422                            
00000422                            ZeroDivide:
00000422 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
00000428 6000                       		bra.s	loc_462
0000042A                            ; ===========================================================================
0000042A                            
0000042A                            ChkInstr:
0000042A 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            TrapvInstr:
00000432 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            PrivilegeViol:
0000043A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000440 6000                       		bra.s	loc_462
00000442                            ; ===========================================================================
00000442                            
00000442                            Trace:
00000442 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000448 6000                       		bra.s	loc_462
0000044A                            ; ===========================================================================
0000044A                            
0000044A                            Line1010Emu:
0000044A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000450 54AF 0002                  		addq.l	#2,2(sp)
00000454 6000                       		bra.s	loc_462
00000456                            ; ===========================================================================
00000456                            
00000456                            Line1111Emu:
00000456 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000045C 54AF 0002                  		addq.l	#2,2(sp)
00000460 6000                       		bra.s	loc_462
00000462                            ; ===========================================================================
00000462                            
00000462                            ErrorExcept:
00000462 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000468 6000                       		bra.s	loc_462
0000046A                            ; ===========================================================================
0000046A                            
0000046A                            loc_43A:
0000046A 46FC 2700                  		move	#$2700,sr
0000046E 544F                       		addq.w	#2,sp
00000470 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000474 544F                       		addq.w	#2,sp
00000476 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000047C 6100 0000                  		bsr.w	ShowErrorMsg
00000480 202F 0002                  		move.l	2(sp),d0
00000484 6100 0000                  		bsr.w	sub_5BA
00000488 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000048C 6100 0000                  		bsr.w	sub_5BA
00000490 6000                       		bra.s	loc_478
00000492                            ; ===========================================================================
00000492                            
00000492                            loc_462:
00000492 46FC 2700                  		move	#$2700,sr
00000496 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000049C 6100 0000                  		bsr.w	ShowErrorMsg
000004A0 202F 0002                  		move.l	2(sp),d0
000004A4 6100 0000                  		bsr.w	sub_5BA
000004A8                            
000004A8                            loc_478:
000004A8 6100 0000                  		bsr.w	ErrorWaitForC
000004AC 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
000004B2 46FC 2300                  		move	#$2300,sr
000004B6 4E73                       		rte	
000004B8                            
000004B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000004B8                            
000004B8                            
000004B8                            ShowErrorMsg:				; XREF: loc_43A; loc_462
000004B8 4DF9 00C0 0000             		lea	($C00000).l,a6
000004BE 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
000004C8 41F9 0000 0000             		lea	(Art_ErrText).l,a0
000004CE 323C 027F                  		move.w	#$27F,d1
000004D2                            
000004D2                            Error_LoadGfx:
000004D2 3C98                       		move.w	(a0)+,(a6)
000004D4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004D8 7000                       		moveq	#0,d0		; clear	d0
000004DA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004DE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004E2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004E6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004F0 7212                       		moveq	#$12,d1		; number of characters
000004F2                            
000004F2                            Error_LoopChars:
000004F2 7000                       		moveq	#0,d0
000004F4 1018                       		move.b	(a0)+,d0
000004F6 0640 0790                  		addi.w	#$790,d0
000004FA 3C80                       		move.w	d0,(a6)
000004FC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
00000500 4E75                       		rts	
00000502                            ; End of function ShowErrorMsg
00000502                            
00000502                            ; ===========================================================================
00000502 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
00000506 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
0000050A 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
0000050E 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
00000512 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
00000516 0000                       		dc.w asc_5A6-ErrorText
00000518 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
0000052B 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000053E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000551 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000564 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000577 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000058A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000059D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
000005B0 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
000005C3 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005D6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005EA 00                         		even
000005EA                            
000005EA                            ; ||||||||||||||| S U B	R O U T	I N ET |||||||||||||||||||||||||||||||||||||||
000005EA                            
000005EA                            
000005EA                            sub_5BA:				; XREF: loc_43A; loc_462
000005EA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005EE 7407                       		moveq	#7,d2
000005F0                            
000005F0                            loc_5C0:
000005F0 E998                       		rol.l	#4,d0
000005F2 6100                       		bsr.s	sub_5CA
000005F4 51CA FFFA                  		dbf	d2,loc_5C0
000005F8 4E75                       		rts	
000005FA                            ; End of function sub_5BA
000005FA                            
000005FA                            
000005FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005FA                            
000005FA                            
000005FA                            sub_5CA:				; XREF: sub_5BA
000005FA 3200                       		move.w	d0,d1
000005FC 0241 000F                  		andi.w	#$F,d1
00000600 0C41 000A                  		cmpi.w	#$A,d1
00000604 6500                       		bcs.s	loc_5D8
00000606 5E41                       		addq.w	#7,d1
00000608                            
00000608                            loc_5D8:
00000608 0641 07C0                  		addi.w	#$7C0,d1
0000060C 3C81                       		move.w	d1,(a6)
0000060E 4E75                       		rts	
00000610                            ; End of function sub_5CA
00000610                            
00000610                            
00000610                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000610                            
00000610                            
00000610                            ErrorWaitForC:				; XREF: loc_478
00000610 6100 0000                  		bsr.w	ReadJoypads
00000614 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
0000061A 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
0000061E 4E75                       		rts	
00000620                            ; End of function ErrorWaitForC
00000620                            
00000620                            ; ===========================================================================
00000620                            Art_ErrText:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000D60                            Art_ErrText_end:		even
00000D60                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
000014A0                            Art_Text_end:		even
000014A0                            
000014A0                            ; ===========================================================================
000014A0                            ;VBlank
000014A0                            loc_B10:				; XREF: Vectors
000014A0 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000014A4 4A38 F62A                  		tst.b	($FFFFF62A).w
000014A8 6700                       		beq.s	loc_B88
000014AA 3039 00C0 0004             		move.w	($C00004).l,d0
000014B0 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000014BA 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000014C2                            ;		btst	#6,($FFFFFFF8).w
000014C2                            ;		beq.s	loc_B42
000014C2                            ;		move.w	#$700,d0
000014C2                            ;
000014C2                            ;loc_B3E:
000014C2                            ;		dbf	d0,loc_B3E
000014C2                            
000014C2                            ;loc_B42:
000014C2 1038 F62A                  		move.b	($FFFFF62A).w,d0
000014C6 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
000014CC 31FC 0001 F644             		move.w	#1,($FFFFF644).w
000014D2 0240 003E                  		andi.w	#$3E,d0
000014D6 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
000014DA 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
000014DE                            
000014DE                            loc_B5E:				; XREF: loc_B88
000014DE 4EB9 0000 0000             		jsr	sub_71B4C
000014E4                            
000014E4                            loc_B64:				; XREF: loc_D50
000014E4 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
000014E8 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000014EC 4E73                       		rte	
000014EE                            ; ===========================================================================
000014EE                            ; THIS SUCKS
000014EE =0000001A                  VBLNO_BEEBUSH        EQU         13*2
000014EE =0000001C                  VBLNO_BEEBUSHSCR     EQU         14*2
000014EE                            
000014EE 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
000014F2 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
000014F6 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
000014FA 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
000014FE 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00001502 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00001506 0000                       		dc.w loc_E72-off_B6E
00001508 0000                       		dc.w jmpto_VBLANK_BEEBUSH-off_B6E
0000150A 0000                       		dc.w jmpto_VBLANK_BEEBUSHSCR-off_B6E
0000150C                            
0000150C                            ; ===========================================================================
0000150C                            
0000150C                            loc_B88:				; XREF: loc_B10; off_B6E
0000150C 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00001512 6700                       		beq.s	loc_B9A
00001514 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000151A 6600 FFC2                  		bne.w	loc_B5E
0000151E                            
0000151E                            loc_B9A:
0000151E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00001524 6600 FFB8                  		bne.w	loc_B5E		; if not, branch
00001528 3039 00C0 0004             		move.w	($C00004).l,d0
0000152E                            ;		btst	#6,($FFFFFFF8).w
0000152E                            ;		beq.s	loc_BBA
0000152E                            ;		move.w	#$700,d0
0000152E                            ;
0000152E                            ;loc_BB6:
0000152E                            ;		dbf	d0,loc_BB6
0000152E                            ;
0000152E                            ;loc_BBA:
0000152E 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00001534 4A38 F64E                  		tst.b	($FFFFF64E).w
00001538 6600                       		bne.s	loc_BFE
0000153A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001540 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001546 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000154C 3ABC 977F                  		move.w	#$977F,(a5)
00001550 3ABC C000                  		move.w	#$C000,(a5)
00001554 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
0000155A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000155E 6000                       		bra.s	loc_C22
00001560                            ; ===========================================================================
00001560                            
00001560                            loc_BFE:				; XREF: loc_BC8
00001560 4BF9 00C0 0004             		lea	($C00004).l,a5
00001566 2ABC 9400 9340             		move.l	#$94009340,(a5)
0000156C 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001572 3ABC 977F                  		move.w	#$977F,(a5)
00001576 3ABC C000                  		move.w	#$C000,(a5)
0000157A 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001580 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001584                            
00001584                            loc_C22:				; XREF: loc_BC8
00001584 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00001588 6000 FF54                  		bra.w	loc_B5E
0000158C                            ; ===========================================================================
0000158C                            
0000158C                            loc_C32:				; XREF: off_B6E
0000158C 6100 0000                  		bsr.w	sub_106E
00001590                            
00001590                            loc_C36:				; XREF: off_B6E
00001590 4A78 F614                  		tst.w	($FFFFF614).w
00001594 6700 0000                  		beq.w	locret_C42
00001598 5378 F614                  		subq.w	#1,($FFFFF614).w
0000159C                            
0000159C                            locret_C42:
0000159C 4E75                       		rts	
0000159E                            ; ===========================================================================
0000159E                            
0000159E                            loc_C44:				; XREF: off_B6E
0000159E 6100 0000                  		bsr.w	sub_106E
000015A2 6100 0000                  		bsr.w	sub_6886
000015A6 6100 0000                  		bsr.w	sub_1642
000015AA 4A78 F614                  		tst.w	($FFFFF614).w
000015AE 6700 0000                  		beq.w	locret_C5C
000015B2 5378 F614                  		subq.w	#1,($FFFFF614).w
000015B6                            
000015B6                            locret_C5C:
000015B6 4E75                       		rts	
000015B8                            
000015B8                            ; ---------------------------------------------------------------------------
000015B8                            ; SOOOO GROSS!!!
000015B8                            ; ---------------------------------------------------------------------------
000015B8                            jmpto_VBLANK_BEEBUSH:
000015B8 4EF9 0000 0000             	jmp VBLANK_BEEBUSH
000015BE                            
000015BE                            jmpto_VBLANK_BEEBUSHSCR:
000015BE 4EF9 0000 0000             	jmp VBLANK_BEEBUSHSCR
000015C4                            
000015C4                            ; ---------------------------------------------------------------------------
000015C4                            
000015C4                            ; ===========================================================================
000015C4                            
000015C4                            loc_C5E:				; XREF: off_B6E
000015C4 6100 0000                  		bsr.w	sub_106E
000015C8 4E75                       		rts	
000015CA                            ; ===========================================================================
000015CA                            
000015CA                            loc_C64:				; XREF: off_B6E
000015CA 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
000015D0 6700 0000                  		beq.w	loc_DA6		; if yes, branch
000015D4                            
000015D4                            loc_C6E:				; XREF: off_B6E
000015D4 6100 0000                  		bsr.w	ReadJoypads
000015D8 4A38 F64E                  		tst.b	($FFFFF64E).w
000015DC 6600                       		bne.s	loc_CB0
000015DE 4BF9 00C0 0004             		lea	($C00004).l,a5
000015E4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000015EA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000015F0 3ABC 977F                  		move.w	#$977F,(a5)
000015F4 3ABC C000                  		move.w	#$C000,(a5)
000015F8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000015FE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001602 6000                       		bra.s	loc_CD4
00001604                            ; ===========================================================================
00001604                            
00001604                            loc_CB0:				; XREF: loc_C76
00001604 4BF9 00C0 0004             		lea	($C00004).l,a5
0000160A 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001610 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00001616 3ABC 977F                  		move.w	#$977F,(a5)
0000161A 3ABC C000                  		move.w	#$C000,(a5)
0000161E 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001624 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001628                            
00001628                            loc_CD4:				; XREF: loc_C76
00001628 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
0000162C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001632 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001638 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000163E 3ABC 977F                  		move.w	#$977F,(a5)
00001642 3ABC 7C00                  		move.w	#$7C00,(a5)
00001646 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000164C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001650 4BF9 00C0 0004             		lea	($C00004).l,a5
00001656 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000165C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001662 3ABC 977F                  		move.w	#$977F,(a5)
00001666 3ABC 7800                  		move.w	#$7800,(a5)
0000166A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001670 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001674 4A38 F767                  		tst.b	($FFFFF767).w
00001678 6700                       		beq.s	loc_D50
0000167A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001680 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001686 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000168C 3ABC 977F                  		move.w	#$977F,(a5)
00001690 3ABC 7000                  		move.w	#$7000,(a5)
00001694 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000169A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000169E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
000016A4                            
000016A4                            loc_D50:
000016A4 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
000016AA 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
000016B0 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
000016B6 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
000016BC 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
000016C2 6400                       		bcc.s	Demo_Time
000016C4 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
000016CA 588F                       		addq.l	#4,sp
000016CC 6000 FE16                  		bra.w	loc_B64
000016D0                            
000016D0                            ; ---------------------------------------------------------------------------
000016D0                            ; Subroutine to	run a demo for an amount of time
000016D0                            ; ---------------------------------------------------------------------------
000016D0                            
000016D0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016D0                            
000016D0                            
000016D0                            Demo_Time:				; XREF: loc_D50; PalToCRAM
000016D0 6100 0000                  		bsr.w	LoadTilesAsYouMove
000016D4 4EB9 0000 0000             		jsr	AniArt_Load
000016DA 4EB9 0000 0000             		jsr	HudUpdate
000016E0 6100 0000                  		bsr.w	sub_165E
000016E4 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000016E8 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
000016EC 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
000016F0                            
000016F0                            Demo_TimeEnd:
000016F0 4E75                       		rts	
000016F2                            ; End of function Demo_Time
000016F2                            
000016F2                            ; ===========================================================================
000016F2                            
000016F2                            loc_DA6:				; XREF: off_B6E
000016F2 6100 0000                  		bsr.w	ReadJoypads
000016F6 4BF9 00C0 0004             		lea	($C00004).l,a5
000016FC 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001702 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001708 3ABC 977F                  		move.w	#$977F,(a5)
0000170C 3ABC C000                  		move.w	#$C000,(a5)
00001710 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001716 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000171A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001720 2ABC 9401 9340             		move.l	#$94019340,(a5)
00001726 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
0000172C 3ABC 977F                  		move.w	#$977F,(a5)
00001730 3ABC 7800                  		move.w	#$7800,(a5)
00001734 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000173A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000173E 4BF9 00C0 0004             		lea	($C00004).l,a5
00001744 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
0000174A 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001750 3ABC 977F                  		move.w	#$977F,(a5)
00001754 3ABC 7C00                  		move.w	#$7C00,(a5)
00001758 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000175E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001762 6100 0000                  		bsr.w	PalCycle_SS
00001766 4A38 F767                  		tst.b	($FFFFF767).w
0000176A 6700                       		beq.s	loc_E64
0000176C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001772 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001778 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000177E 3ABC 977F                  		move.w	#$977F,(a5)
00001782 3ABC 7000                  		move.w	#$7000,(a5)
00001786 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000178C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001790 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001796                            
00001796                            loc_E64:
00001796 4A78 F614                  		tst.w	($FFFFF614).w
0000179A 6700 0000                  		beq.w	locret_E70
0000179E 5378 F614                  		subq.w	#1,($FFFFF614).w
000017A2                            
000017A2                            locret_E70:
000017A2 4E75                       		rts	
000017A4                            ; ===========================================================================
000017A4                            
000017A4                            loc_E72:				; XREF: off_B6E
000017A4 6100 0000                  		bsr.w	ReadJoypads
000017A8 4A38 F64E                  		tst.b	($FFFFF64E).w
000017AC 6600                       		bne.s	loc_EB4
000017AE 4BF9 00C0 0004             		lea	($C00004).l,a5
000017B4 2ABC 9400 9340             		move.l	#$94009340,(a5)
000017BA 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000017C0 3ABC 977F                  		move.w	#$977F,(a5)
000017C4 3ABC C000                  		move.w	#$C000,(a5)
000017C8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000017CE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000017D2 6000                       		bra.s	loc_ED8
000017D4                            ; ===========================================================================
000017D4                            
000017D4                            loc_EB4:				; XREF: loc_E7A
000017D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000017DA 2ABC 9400 9340             		move.l	#$94009340,(a5)
000017E0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000017E6 3ABC 977F                  		move.w	#$977F,(a5)
000017EA 3ABC C000                  		move.w	#$C000,(a5)
000017EE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000017F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000017F8                            
000017F8                            loc_ED8:				; XREF: loc_E7A
000017F8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000017FC 4BF9 00C0 0004             		lea	($C00004).l,a5
00001802 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001808 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000180E                            
0000180E                            loc_EEE:
0000180E 3ABC 977F                  		move.w	#$977F,(a5)
00001812 3ABC 7C00                  		move.w	#$7C00,(a5)
00001816 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000181C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001820 4BF9 00C0 0004             		lea	($C00004).l,a5
00001826 2ABC 9401 9340             		move.l	#$94019340,(a5)
0000182C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00001832 3ABC 977F                  		move.w	#$977F,(a5)
00001836 3ABC 7800                  		move.w	#$7800,(a5)
0000183A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001840 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001844 4A38 F767                  		tst.b	($FFFFF767).w
00001848 6700                       		beq.s	loc_F54
0000184A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001850 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001856 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
0000185C 3ABC 977F                  		move.w	#$977F,(a5)
00001860 3ABC 7000                  		move.w	#$7000,(a5)
00001864 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000186A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000186E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001874                            
00001874                            loc_F54:
00001874 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
0000187A 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00001880 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00001886 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
0000188C 6100 0000                  		bsr.w	LoadTilesAsYouMove
00001890 4EB9 0000 0000             		jsr	AniArt_Load
00001896 4EB9 0000 0000             		jsr	HudUpdate
0000189C 6100 0000                  		bsr.w	sub_1642
000018A0 4E75                       		rts	
000018A2                            ; ===========================================================================
000018A2                            
000018A2                            loc_F8A:				; XREF: off_B6E
000018A2 6100 0000                  		bsr.w	sub_106E
000018A6 5238 F628                  		addq.b	#1,($FFFFF628).w
000018AA 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
000018B0 4E75                       		rts	
000018B2                            ; ===========================================================================
000018B2                            
000018B2                            loc_F9A:				; XREF: off_B6E
000018B2 6100 0000                  		bsr.w	sub_106E
000018B6 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
000018BA 6000 0000                  		bra.w	sub_1642
000018BE                            ; ===========================================================================
000018BE                            
000018BE                            loc_FA6:				; XREF: off_B6E
000018BE 6100 0000                  		bsr.w	ReadJoypads
000018C2 4BF9 00C0 0004             		lea	($C00004).l,a5
000018C8 2ABC 9400 9340             		move.l	#$94009340,(a5)
000018CE 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
000018D4 3ABC 977F                  		move.w	#$977F,(a5)
000018D8 3ABC C000                  		move.w	#$C000,(a5)
000018DC 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000018E2 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000018E6 4BF9 00C0 0004             		lea	($C00004).l,a5
000018EC 2ABC 9401 9340             		move.l	#$94019340,(a5)
000018F2 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000018F8 3ABC 977F                  		move.w	#$977F,(a5)
000018FC 3ABC 7800                  		move.w	#$7800,(a5)
00001900 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001906 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000190A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001910 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001916 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000191C 3ABC 977F                  		move.w	#$977F,(a5)
00001920 3ABC 7C00                  		move.w	#$7C00,(a5)
00001924 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
0000192A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000192E 4A38 F767                  		tst.b	($FFFFF767).w
00001932 6700                       		beq.s	loc_1060
00001934 4BF9 00C0 0004             		lea	($C00004).l,a5
0000193A 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001940 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001946 3ABC 977F                  		move.w	#$977F,(a5)
0000194A 3ABC 7000                  		move.w	#$7000,(a5)
0000194E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001954 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001958 11FC 0000 F767             		move.b	#0,($FFFFF767).w
0000195E                            
0000195E                            loc_1060:
0000195E 4A78 F614                  		tst.w	($FFFFF614).w
00001962 6700 0000                  		beq.w	locret_106C
00001966 5378 F614                  		subq.w	#1,($FFFFF614).w
0000196A                            
0000196A                            locret_106C:
0000196A 4E75                       		rts	
0000196C                            
0000196C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000196C                            
0000196C                            
0000196C                            sub_106E:				; XREF: loc_C32; et al
0000196C 6100 0000                  		bsr.w	ReadJoypads
00001970 4A38 F64E                  		tst.b	($FFFFF64E).w
00001974 6600                       		bne.s	loc_10B0
00001976 4BF9 00C0 0004             		lea	($C00004).l,a5
0000197C 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001982 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00001988 3ABC 977F                  		move.w	#$977F,(a5)
0000198C 3ABC C000                  		move.w	#$C000,(a5)
00001990 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00001996 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000199A 6000                       		bra.s	loc_10D4
0000199C                            ; ===========================================================================
0000199C                            
0000199C                            loc_10B0:				; XREF: sub_106E
0000199C 4BF9 00C0 0004             		lea	($C00004).l,a5
000019A2 2ABC 9400 9340             		move.l	#$94009340,(a5)
000019A8 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000019AE 3ABC 977F                  		move.w	#$977F,(a5)
000019B2 3ABC C000                  		move.w	#$C000,(a5)
000019B6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000019BC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019C0                            
000019C0                            loc_10D4:				; XREF: sub_106E
000019C0 4BF9 00C0 0004             		lea	($C00004).l,a5
000019C6 2ABC 9401 9340             		move.l	#$94019340,(a5)
000019CC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000019D2 3ABC 977F                  		move.w	#$977F,(a5)
000019D6 3ABC 7800                  		move.w	#$7800,(a5)
000019DA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000019E0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000019E4 4BF9 00C0 0004             		lea	($C00004).l,a5
000019EA 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
000019F0 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
000019F6 3ABC 977F                  		move.w	#$977F,(a5)
000019FA 3ABC 7C00                  		move.w	#$7C00,(a5)
000019FE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001A04 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001A08 4E75                       		rts	
00001A0A                            ; End of function sub_106E
00001A0A                            
00001A0A                            ; ---------------------------------------------------------------------------
00001A0A                            ; Subroutine to	move pallets from the RAM to CRAM
00001A0A                            ; ---------------------------------------------------------------------------
00001A0A                            
00001A0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A0A                            
00001A0A                            
00001A0A                            PalToCRAM:
00001A0A 46FC 2700                  		move	#$2700,sr
00001A0E 4A78 F644                  		tst.w	($FFFFF644).w
00001A12 6700                       		beq.s	locret_119C
00001A14 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001A1A 48E7 00C0                  		movem.l	a0-a1,-(sp)
00001A1E 43F9 00C0 0000             		lea	($C00000).l,a1
00001A24 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001A28 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
00001A30 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
00001A32 2298                       		move.l	(a0)+,(a1)
00001A34 2298                       		move.l	(a0)+,(a1)
00001A36 2298                       		move.l	(a0)+,(a1)
00001A38 2298                       		move.l	(a0)+,(a1)
00001A3A 2298                       		move.l	(a0)+,(a1)
00001A3C 2298                       		move.l	(a0)+,(a1)
00001A3E 2298                       		move.l	(a0)+,(a1)
00001A40 2298                       		move.l	(a0)+,(a1)
00001A42 2298                       		move.l	(a0)+,(a1)
00001A44 2298                       		move.l	(a0)+,(a1)
00001A46 2298                       		move.l	(a0)+,(a1)
00001A48 2298                       		move.l	(a0)+,(a1)
00001A4A 2298                       		move.l	(a0)+,(a1)
00001A4C 2298                       		move.l	(a0)+,(a1)
00001A4E 2298                       		move.l	(a0)+,(a1)
00001A50 2298                       		move.l	(a0)+,(a1)
00001A52 2298                       		move.l	(a0)+,(a1)
00001A54 2298                       		move.l	(a0)+,(a1)
00001A56 2298                       		move.l	(a0)+,(a1)
00001A58 2298                       		move.l	(a0)+,(a1)
00001A5A 2298                       		move.l	(a0)+,(a1)
00001A5C 2298                       		move.l	(a0)+,(a1)
00001A5E 2298                       		move.l	(a0)+,(a1)
00001A60 2298                       		move.l	(a0)+,(a1)
00001A62 2298                       		move.l	(a0)+,(a1)
00001A64 2298                       		move.l	(a0)+,(a1)
00001A66 2298                       		move.l	(a0)+,(a1)
00001A68 2298                       		move.l	(a0)+,(a1)
00001A6A 2298                       		move.l	(a0)+,(a1)
00001A6C 2298                       		move.l	(a0)+,(a1)
00001A6E 2298                       		move.l	(a0)+,(a1)
00001A70 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001A76 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001A7A 4A38 F64F                  		tst.b	($FFFFF64F).w
00001A7E 6600                       		bne.s	loc_119E
00001A80                            
00001A80                            locret_119C:
00001A80 4E73                       		rte	
00001A82                            ; ===========================================================================
00001A82                            
00001A82                            loc_119E:				; XREF: PalToCRAM
00001A82 4238 F64F                  		clr.b	($FFFFF64F).w
00001A86 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00001A8A 6100 FC44                  		bsr.w	Demo_Time
00001A8E 4EB9 0000 0000             		jsr	sub_71B4C
00001A94 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00001A98 4E73                       		rte	
00001A9A                            ; End of function PalToCRAM
00001A9A                            
00001A9A                            ; ---------------------------------------------------------------------------
00001A9A                            ; Subroutine to	initialise joypads
00001A9A                            ; ---------------------------------------------------------------------------
00001A9A                            
00001A9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A9A                            
00001A9A                            
00001A9A                            JoypadInit:				; XREF: GameClrRAM
00001A9A 7040                       		moveq	#$40,d0
00001A9C 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
00001AA2 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
00001AA8 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
00001AAE 4E75                       		rts	
00001AB0                            ; End of function JoypadInit
00001AB0                            
00001AB0                            ; ---------------------------------------------------------------------------
00001AB0                            ; Subroutine to	read joypad input, and send it to the RAM
00001AB0                            ; ---------------------------------------------------------------------------
00001AB0                            
00001AB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AB0                            
00001AB0                            
00001AB0                            ReadJoypads:
00001AB0 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
00001AB4 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
00001ABA 6100                       		bsr.s	Joypad_Read	; do the first joypad
00001ABC 5449                       		addq.w	#2,a1		; do the second	joypad
00001ABE                            
00001ABE                            Joypad_Read:
00001ABE 12BC 0000                  		move.b	#0,(a1)
00001AC2 4E71                       		nop	
00001AC4 4E71                       		nop	
00001AC6 1011                       		move.b	(a1),d0
00001AC8 E508                       		lsl.b	#2,d0
00001ACA 0200 00C0                  		andi.b	#$C0,d0
00001ACE 12BC 0040                  		move.b	#$40,(a1)
00001AD2 4E71                       		nop	
00001AD4 4E71                       		nop	
00001AD6 1211                       		move.b	(a1),d1
00001AD8 0201 003F                  		andi.b	#$3F,d1
00001ADC 8001                       		or.b	d1,d0
00001ADE 4600                       		not.b	d0
00001AE0 1210                       		move.b	(a0),d1
00001AE2 B101                       		eor.b	d0,d1
00001AE4 10C0                       		move.b	d0,(a0)+
00001AE6 C200                       		and.b	d0,d1
00001AE8 10C1                       		move.b	d1,(a0)+
00001AEA 4E75                       		rts	
00001AEC                            ; End of function ReadJoypads
00001AEC                            
00001AEC                            
00001AEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AEC                            
00001AEC                            
00001AEC                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001AEC 41F9 00C0 0004             		lea	($C00004).l,a0
00001AF2 43F9 00C0 0000             		lea	($C00000).l,a1
00001AF8 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001AFE 7E12                       		moveq	#$12,d7
00001B00                            
00001B00                            VDP_Loop:
00001B00 309A                       		move.w	(a2)+,(a0)
00001B02 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
00001B06                            
00001B06 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001B0C 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; Is this a PAL console?
00001B12 6700                       		beq.s	.UseV28			; If not, skip
00001B14 08C0 0003                  		bset	#3,d0			; set v30 and pretend nothing happened
00001B18                            .UseV28:
00001B18 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001B1C 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00001B22 7000                       		moveq	#0,d0
00001B24 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001B2E 3E3C 003F                  		move.w	#$3F,d7
00001B32                            
00001B32                            VDP_ClrCRAM:
00001B32 3280                       		move.w	d0,(a1)
00001B34 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001B38                            
00001B38 42B8 F616                  		clr.l	($FFFFF616).w
00001B3C 42B8 F61A                  		clr.l	($FFFFF61A).w
00001B40 2F01                       		move.l	d1,-(sp)
00001B42 4BF9 00C0 0004             		lea	($C00004).l,a5
00001B48 3ABC 8F01                  		move.w	#$8F01,(a5)
00001B4C 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
00001B52 3ABC 9780                  		move.w	#$9780,(a5)
00001B56 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001B5C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
00001B64                            
00001B64                            loc_128E:
00001B64 3215                       		move.w	(a5),d1
00001B66 0801 0001                  		btst	#1,d1
00001B6A 66F8                       		bne.s	loc_128E
00001B6C                            
00001B6C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001B70 221F                       		move.l	(sp)+,d1
00001B72 4E75                       		rts	
00001B74                            ; End of function VDPSetupGame
00001B74                            
00001B74                            ; ===========================================================================
00001B74 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
00001B7C 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
00001B84 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
00001B8C 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
00001B94 9001 9100 9200             		dc.w $9001, $9100, $9200
00001B9A                            
00001B9A                            ; ---------------------------------------------------------------------------
00001B9A                            ; Subroutine to	clear the screen
00001B9A                            ; ---------------------------------------------------------------------------
00001B9A                            
00001B9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001B9A                            
00001B9A                            InitScreen:
00001B9A                            ClearScreen:
00001B9A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001BA0 3ABC 8F01                  		move.w	#$8F01,(a5)
00001BA4 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001BAA 3ABC 9780                  		move.w	#$9780,(a5)
00001BAE 2ABC 4000 0083             		move.l	#$40000083,(a5)
00001BB4 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001BBC                            
00001BBC                            loc_12E6:
00001BBC 3215                       		move.w	(a5),d1
00001BBE 0801 0001                  		btst	#1,d1
00001BC2 66F8                       		bne.s	loc_12E6
00001BC4                            
00001BC4 3ABC 8F02                  		move.w	#$8F02,(a5)
00001BC8 4BF9 00C0 0004             		lea	($C00004).l,a5
00001BCE 3ABC 8F01                  		move.w	#$8F01,(a5)
00001BD2 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001BD8 3ABC 9780                  		move.w	#$9780,(a5)
00001BDC 2ABC 6000 0083             		move.l	#$60000083,(a5)
00001BE2 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001BEA                            
00001BEA                            loc_1314:
00001BEA 3215                       		move.w	(a5),d1
00001BEC 0801 0001                  		btst	#1,d1
00001BF0 66F8                       		bne.s	loc_1314
00001BF2                            
00001BF2 3ABC 8F02                  		move.w	#$8F02,(a5)
00001BF6 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001BFE 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001C06 43F8 F800                  		lea	($FFFFF800).w,a1
00001C0A 7000                       		moveq	#0,d0
00001C0C 323C 009F                  		move.w	#$9F,d1
00001C10                            
00001C10                            loc_133A:
00001C10 22C0                       		move.l	d0,(a1)+
00001C12 51C9 FFFC                  		dbf	d1,loc_133A
00001C16                            
00001C16 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001C1A 7000                       		moveq	#0,d0
00001C1C 323C 00FF                  		move.w	#$FF,d1
00001C20                            
00001C20                            loc_134A:
00001C20 22C0                       		move.l	d0,(a1)+
00001C22 51C9 FFFC                  		dbf	d1,loc_134A
00001C26 4E75                       		rts	
00001C28                            ; End of function ClearScreen
00001C28                            
00001C28                            ; ---------------------------------------------------------------------------
00001C28                            ; Subroutine to	load the sound driver
00001C28                            ; ---------------------------------------------------------------------------
00001C28                            
00001C28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C28                            
00001C28                            
00001C28                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001C28 4E75                       		rts
00001C2A                            
00001C2A                            ; work around this if you need to, other stops are redundant anyway
00001C2A                            
00001C2A 4E71                       		nop	
00001C2C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001C34 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001C3C 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
00001C42 43F9 00A0 0000             		lea	($A00000).l,a1
00001C48 6100 0000                  		bsr.w	KosDec		; decompress
00001C4C 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
00001C54 4E71                       		nop	
00001C56 4E71                       		nop	
00001C58 4E71                       		nop	
00001C5A 4E71                       		nop	
00001C5C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001C64 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001C6C 4E75                       		rts	
00001C6E                            ; End of function SoundDriverLoad
00001C6E                            
00001C6E                            ; ---------------------------------------------------------------------------
00001C6E                            ; Subroutine to	play a sound or	music track
00001C6E                            ; ---------------------------------------------------------------------------
00001C6E                            
00001C6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C6E                            
00001C6E                            
00001C6E                            PlaySound:
00001C6E 11C0 F00A                  		move.b	d0,($FFFFF00A).w
00001C72 4E75                       		rts	
00001C74                            ; End of function PlaySound
00001C74                            
00001C74                            ; ---------------------------------------------------------------------------
00001C74                            ; Subroutine to	play a special sound/music (E0-E4)
00001C74                            ;
00001C74                            ; E0 - Fade out
00001C74                            ; E1 - Sega
00001C74                            ; E2 - Speed up
00001C74                            ; E3 - Normal speed
00001C74                            ; E4 - Stop
00001C74                            ; ---------------------------------------------------------------------------
00001C74                            
00001C74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C74                            
00001C74                            
00001C74                            PlaySound_Special:
00001C74 11C0 F00B                  		move.b	d0,($FFFFF00B).w
00001C78 4E75                       		rts	
00001C7A                            ; End of function PlaySound_Special
00001C7A                            
00001C7A                            ; ===========================================================================
00001C7A                            ; ---------------------------------------------------------------------------
00001C7A                            ; Unused sound/music subroutine
00001C7A                            ; ---------------------------------------------------------------------------
00001C7A                            
00001C7A                            PlaySound_Unk:
00001C7A 11C0 F00C                  		move.b	d0,($FFFFF00C).w
00001C7E 4E75                       		rts	
00001C80                            
00001C80                            ; ---------------------------------------------------------------------------
00001C80                            ; Subroutine to	pause the game
00001C80                            ; ---------------------------------------------------------------------------
00001C80                            
00001C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001C80                            
00001C80                            
00001C80                            PauseGame:				; XREF: Level_MainLoop; et al
00001C80 4E71                       		nop	
00001C82 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
00001C86 6700                       		beq.s	Unpause		; if not, branch
00001C88 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
00001C8C 6600                       		bne.s	loc_13BE	; if yes, branch
00001C8E 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001C94 6700                       		beq.s	Pause_DoNothing	; if not, branch
00001C96                            
00001C96                            loc_13BE:
00001C96 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
00001C9C 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
00001CA2                            
00001CA2                            loc_13CA:
00001CA2 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
00001CA8 6100 0000                  		bsr.w	DelayProgram
00001CAC 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
00001CB0 6700                       		beq.s	Pause_ChkStart	; if not, branch
00001CB2 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
00001CB8 6700                       		beq.s	Pause_ChkBC	; if not, branch
00001CBA 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
00001CC0 4E71                       		nop	
00001CC2 6000                       		bra.s	loc_1404
00001CC4                            ; ===========================================================================
00001CC4                            
00001CC4                            Pause_ChkBC:				; XREF: PauseGame
00001CC4 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
00001CCA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001CCC 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
00001CD2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
00001CD4                            
00001CD4                            Pause_ChkStart:				; XREF: PauseGame
00001CD4 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001CDA 67C6                       		beq.s	loc_13CA	; if not, branch
00001CDC                            
00001CDC                            loc_1404:				; XREF: PauseGame
00001CDC 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001CE2                            
00001CE2                            Unpause:				; XREF: PauseGame
00001CE2 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001CE8                            
00001CE8                            Pause_DoNothing:			; XREF: PauseGame
00001CE8 4E75                       		rts	
00001CEA                            ; ===========================================================================
00001CEA                            
00001CEA                            Pause_SlowMo:				; XREF: PauseGame
00001CEA 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001CF0 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
00001CF6 4E75                       		rts	
00001CF8                            ; End of function PauseGame
00001CF8                            
00001CF8                            ; ---------------------------------------------------------------------------
00001CF8                            ; Subroutine to	display	patterns via the VDP
00001CF8                            ; ---------------------------------------------------------------------------
00001CF8                            
00001CF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001CF8                            
00001CF8                            DrawTileMap:
00001CF8                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001CF8 4DF9 00C0 0000             		lea	($C00000).l,a6
00001CFE 283C 0080 0000             		move.l	#$800000,d4
00001D04                            
00001D04                            loc_142C:
00001D04 2D40 0004                  		move.l	d0,4(a6)
00001D08 3601                       		move.w	d1,d3
00001D0A                            
00001D0A                            loc_1432:
00001D0A 3C99                       		move.w	(a1)+,(a6)
00001D0C 51CB FFFC                  		dbf	d3,loc_1432
00001D10 D084                       		add.l	d4,d0
00001D12 51CA FFF0                  		dbf	d2,loc_142C
00001D16 4E75                       		rts	
00001D18                            ; End of function ShowVDPGraphics
00001D18                            
00001D18                            ; ---------------------------------------------------------------------------
00001D18                            ; Nemesis decompression	algorithm
00001D18                            ; ---------------------------------------------------------------------------
00001D18                            
00001D18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D18                            
00001D18                            
00001D18                            NemDec:
00001D18 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001D1C 47F9 0000 0000             		lea	(loc_1502).l,a3
00001D22 49F9 00C0 0000             		lea	($C00000).l,a4
00001D28 6000                       		bra.s	loc_145C
00001D2A                            ; ===========================================================================
00001D2A 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001D2E 47F9 0000 0000             		lea	(loc_1518).l,a3
00001D34                            
00001D34                            loc_145C:				; XREF: NemDec
00001D34 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001D38 3418                       		move.w	(a0)+,d2
00001D3A E34A                       		lsl.w	#1,d2
00001D3C 6400                       		bcc.s	loc_146A
00001D3E D6FC 000A                  		adda.w	#$A,a3
00001D42                            
00001D42                            loc_146A:
00001D42 E54A                       		lsl.w	#2,d2
00001D44 3A42                       		movea.w	d2,a5
00001D46 7608                       		moveq	#8,d3
00001D48 7400                       		moveq	#0,d2
00001D4A 7800                       		moveq	#0,d4
00001D4C 6100 0000                  		bsr.w	NemDec4
00001D50 1A18                       		move.b	(a0)+,d5
00001D52 E145                       		asl.w	#8,d5
00001D54 1A18                       		move.b	(a0)+,d5
00001D56 3C3C 0010                  		move.w	#$10,d6
00001D5A 6100                       		bsr.s	NemDec2
00001D5C 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001D60 4E75                       		rts	
00001D62                            ; End of function NemDec
00001D62                            
00001D62                            
00001D62                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001D62                            
00001D62                            
00001D62                            NemDec2:				; XREF: NemDec
00001D62 3E06                       		move.w	d6,d7
00001D64 5147                       		subq.w	#8,d7
00001D66 3205                       		move.w	d5,d1
00001D68 EE69                       		lsr.w	d7,d1
00001D6A 0C01 00FC                  		cmpi.b	#-4,d1
00001D6E 6400                       		bcc.s	loc_14D6
00001D70 0241 00FF                  		andi.w	#$FF,d1
00001D74 D241                       		add.w	d1,d1
00001D76 1031 1000                  		move.b	(a1,d1.w),d0
00001D7A 4880                       		ext.w	d0
00001D7C 9C40                       		sub.w	d0,d6
00001D7E 0C46 0009                  		cmpi.w	#9,d6
00001D82 6400                       		bcc.s	loc_14B2
00001D84 5046                       		addq.w	#8,d6
00001D86 E145                       		asl.w	#8,d5
00001D88 1A18                       		move.b	(a0)+,d5
00001D8A                            
00001D8A                            loc_14B2:
00001D8A 1231 1001                  		move.b	1(a1,d1.w),d1
00001D8E 3001                       		move.w	d1,d0
00001D90 0241 000F                  		andi.w	#$F,d1
00001D94 0240 00F0                  		andi.w	#$F0,d0
00001D98                            
00001D98                            loc_14C0:				; XREF: NemDec3
00001D98 E848                       		lsr.w	#4,d0
00001D9A                            
00001D9A                            loc_14C2:				; XREF: NemDec3
00001D9A E98C                       		lsl.l	#4,d4
00001D9C 8801                       		or.b	d1,d4
00001D9E 5343                       		subq.w	#1,d3
00001DA0 6600                       		bne.s	loc_14D0
00001DA2 4ED3                       		jmp	(a3)
00001DA4                            ; End of function NemDec2
00001DA4                            
00001DA4                            
00001DA4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DA4                            
00001DA4                            
00001DA4                            NemDec3:				; XREF: loc_1502
00001DA4 7800                       		moveq	#0,d4
00001DA6 7608                       		moveq	#8,d3
00001DA8                            
00001DA8                            loc_14D0:				; XREF: NemDec2
00001DA8 51C8 FFF0                  		dbf	d0,loc_14C2
00001DAC 60B4                       		bra.s	NemDec2
00001DAE                            ; ===========================================================================
00001DAE                            
00001DAE                            loc_14D6:				; XREF: NemDec2
00001DAE 5D46                       		subq.w	#6,d6
00001DB0 0C46 0009                  		cmpi.w	#9,d6
00001DB4 6400                       		bcc.s	loc_14E4
00001DB6 5046                       		addq.w	#8,d6
00001DB8 E145                       		asl.w	#8,d5
00001DBA 1A18                       		move.b	(a0)+,d5
00001DBC                            
00001DBC                            loc_14E4:				; XREF: NemDec3
00001DBC 5F46                       		subq.w	#7,d6
00001DBE 3205                       		move.w	d5,d1
00001DC0 EC69                       		lsr.w	d6,d1
00001DC2 3001                       		move.w	d1,d0
00001DC4 0241 000F                  		andi.w	#$F,d1
00001DC8 0240 0070                  		andi.w	#$70,d0
00001DCC 0C46 0009                  		cmpi.w	#9,d6
00001DD0 64C6                       		bcc.s	loc_14C0
00001DD2 5046                       		addq.w	#8,d6
00001DD4 E145                       		asl.w	#8,d5
00001DD6 1A18                       		move.b	(a0)+,d5
00001DD8 60BE                       		bra.s	loc_14C0
00001DDA                            ; End of function NemDec3
00001DDA                            
00001DDA                            ; ===========================================================================
00001DDA                            
00001DDA                            loc_1502:				; XREF: NemDec
00001DDA 2884                       		move.l	d4,(a4)
00001DDC 534D                       		subq.w	#1,a5
00001DDE 380D                       		move.w	a5,d4
00001DE0 66C2                       		bne.s	NemDec3
00001DE2 4E75                       		rts	
00001DE4                            ; ===========================================================================
00001DE4 B982                       		eor.l	d4,d2
00001DE6 2882                       		move.l	d2,(a4)
00001DE8 534D                       		subq.w	#1,a5
00001DEA 380D                       		move.w	a5,d4
00001DEC 66B6                       		bne.s	NemDec3
00001DEE 4E75                       		rts	
00001DF0                            ; ===========================================================================
00001DF0                            
00001DF0                            loc_1518:				; XREF: NemDec
00001DF0 28C4                       		move.l	d4,(a4)+
00001DF2 534D                       		subq.w	#1,a5
00001DF4 380D                       		move.w	a5,d4
00001DF6 66AC                       		bne.s	NemDec3
00001DF8 4E75                       		rts	
00001DFA                            ; ===========================================================================
00001DFA B982                       		eor.l	d4,d2
00001DFC 28C2                       		move.l	d2,(a4)+
00001DFE 534D                       		subq.w	#1,a5
00001E00 380D                       		move.w	a5,d4
00001E02 66A0                       		bne.s	NemDec3
00001E04 4E75                       		rts	
00001E06                            
00001E06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E06                            
00001E06                            
00001E06                            NemDec4:				; XREF: NemDec
00001E06 1018                       		move.b	(a0)+,d0
00001E08                            
00001E08                            loc_1530:
00001E08 0C00 00FF                  		cmpi.b	#-1,d0
00001E0C 6600                       		bne.s	loc_1538
00001E0E 4E75                       		rts	
00001E10                            ; ===========================================================================
00001E10                            
00001E10                            loc_1538:				; XREF: NemDec4
00001E10 3E00                       		move.w	d0,d7
00001E12                            
00001E12                            loc_153A:
00001E12 1018                       		move.b	(a0)+,d0
00001E14 0C00 0080                  		cmpi.b	#$80,d0
00001E18 64EE                       		bcc.s	loc_1530
00001E1A 1200                       		move.b	d0,d1
00001E1C 0247 000F                  		andi.w	#$F,d7
00001E20 0241 0070                  		andi.w	#$70,d1
00001E24 8E41                       		or.w	d1,d7
00001E26 0240 000F                  		andi.w	#$F,d0
00001E2A 1200                       		move.b	d0,d1
00001E2C E149                       		lsl.w	#8,d1
00001E2E 8E41                       		or.w	d1,d7
00001E30 7208                       		moveq	#8,d1
00001E32 9240                       		sub.w	d0,d1
00001E34 6600                       		bne.s	loc_1568
00001E36 1018                       		move.b	(a0)+,d0
00001E38 D040                       		add.w	d0,d0
00001E3A 3387 0000                  		move.w	d7,(a1,d0.w)
00001E3E 60D2                       		bra.s	loc_153A
00001E40                            ; ===========================================================================
00001E40                            
00001E40                            loc_1568:				; XREF: NemDec4
00001E40 1018                       		move.b	(a0)+,d0
00001E42 E368                       		lsl.w	d1,d0
00001E44 D040                       		add.w	d0,d0
00001E46 7A01                       		moveq	#1,d5
00001E48 E36D                       		lsl.w	d1,d5
00001E4A 5345                       		subq.w	#1,d5
00001E4C                            
00001E4C                            loc_1574:
00001E4C 3387 0000                  		move.w	d7,(a1,d0.w)
00001E50 5440                       		addq.w	#2,d0
00001E52 51CD FFF8                  		dbf	d5,loc_1574
00001E56 60BA                       		bra.s	loc_153A
00001E58                            ; End of function NemDec4
00001E58                            
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            ; Subroutine to	load pattern load cues
00001E58                            ; ---------------------------------------------------------------------------
00001E58                            
00001E58                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E58                            
00001E58                            LoadArtList: 
00001E58                            LoadPLC:
00001E58 48E7 0060                  		movem.l	a1-a2,-(sp)
00001E5C 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001E62 D040                       		add.w	d0,d0
00001E64 3031 0000                  		move.w	(a1,d0.w),d0
00001E68 43F1 0000                  		lea	(a1,d0.w),a1
00001E6C 45F8 F680                  		lea	($FFFFF680).w,a2
00001E70                            
00001E70                            loc_1598:
00001E70 4A92                       		tst.l	(a2)
00001E72 6700                       		beq.s	loc_15A0
00001E74 5C4A                       		addq.w	#6,a2
00001E76 60F8                       		bra.s	loc_1598
00001E78                            ; ===========================================================================
00001E78                            
00001E78                            loc_15A0:				; XREF: LoadPLC
00001E78 3019                       		move.w	(a1)+,d0
00001E7A 6B00                       		bmi.s	loc_15AC
00001E7C                            
00001E7C                            loc_15A4:
00001E7C 24D9                       		move.l	(a1)+,(a2)+
00001E7E 34D9                       		move.w	(a1)+,(a2)+
00001E80 51C8 FFFA                  		dbf	d0,loc_15A4
00001E84                            
00001E84                            loc_15AC:
00001E84 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001E88 4E75                       		rts	
00001E8A                            ; End of function LoadPLC
00001E8A                            
00001E8A                            
00001E8A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E8A                            
00001E8A                            InitArtList: 
00001E8A                            LoadPLC2:
00001E8A 48E7 0060                  		movem.l	a1-a2,-(sp)
00001E8E 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
00001E94 D040                       		add.w	d0,d0
00001E96 3031 0000                  		move.w	(a1,d0.w),d0
00001E9A 43F1 0000                  		lea	(a1,d0.w),a1
00001E9E 6100                       		bsr.s	ClearPLC
00001EA0 45F8 F680                  		lea	($FFFFF680).w,a2
00001EA4 3019                       		move.w	(a1)+,d0
00001EA6 6B00                       		bmi.s	loc_15D8
00001EA8                            
00001EA8                            loc_15D0:
00001EA8 24D9                       		move.l	(a1)+,(a2)+
00001EAA 34D9                       		move.w	(a1)+,(a2)+
00001EAC 51C8 FFFA                  		dbf	d0,loc_15D0
00001EB0                            
00001EB0                            loc_15D8:
00001EB0 4CDF 0600                  		movem.l	(sp)+,a1-a2
00001EB4 4E75                       		rts	
00001EB6                            ; End of function LoadPLC2
00001EB6                            
00001EB6                            ; ---------------------------------------------------------------------------
00001EB6                            ; Subroutine to	clear the pattern load cues
00001EB6                            ; ---------------------------------------------------------------------------
00001EB6                            
00001EB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EB6                            
00001EB6                            ClearArtListQueue:
00001EB6                            ClearPLC:				; XREF: LoadPLC2
00001EB6 45F8 F680                  		lea	($FFFFF680).w,a2
00001EBA 701F                       		moveq	#$1F,d0
00001EBC                            
00001EBC                            ClearPLC_Loop:
00001EBC 429A                       		clr.l	(a2)+
00001EBE 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
00001EC2 4E75                       		rts	
00001EC4                            ; End of function ClearPLC
00001EC4                            
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4                            ; Subroutine to	use graphics listed in a pattern load cue
00001EC4                            ; ---------------------------------------------------------------------------
00001EC4                            
00001EC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EC4                            
00001EC4                            ProcessArtLoading: 
00001EC4                            RunPLC_RAM:				; XREF: Pal_FadeTo
00001EC4 4AB8 F680                  		tst.l	($FFFFF680).w
00001EC8 6700                       		beq.s	locret_1640
00001ECA 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001ECE 6600                       		bne.s	locret_1640
00001ED0 2078 F680                  		movea.l	($FFFFF680).w,a0
00001ED4 47F9 0000 1DDA             		lea	(loc_1502).l,a3
00001EDA 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001EDE 3418                       		move.w	(a0)+,d2
00001EE0 6A00                       		bpl.s	loc_160E
00001EE2 D6FC 000A                  		adda.w	#$A,a3
00001EE6                            
00001EE6                            loc_160E:
00001EE6 0242 7FFF                  		andi.w	#$7FFF,d2
00001EEA 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001EEE 6100 FF16                  		bsr.w	NemDec4
00001EF2 1A18                       		move.b	(a0)+,d5
00001EF4 E145                       		asl.w	#8,d5
00001EF6 1A18                       		move.b	(a0)+,d5
00001EF8 7C10                       		moveq	#$10,d6
00001EFA 7000                       		moveq	#0,d0
00001EFC 21C8 F680                  		move.l	a0,($FFFFF680).w
00001F00 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001F04 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001F08 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001F0C 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001F10 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001F14 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001F18                            
00001F18                            locret_1640:
00001F18 4E75                       		rts	
00001F1A                            ; End of function RunPLC_RAM
00001F1A                            
00001F1A                            
00001F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F1A                            
00001F1A                            
00001F1A                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001F1A 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001F1E 6700 0000                  		beq.w	locret_16DA
00001F22 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001F28 7000                       		moveq	#0,d0
00001F2A 3038 F684                  		move.w	($FFFFF684).w,d0
00001F2E 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
00001F34 6000                       		bra.s	loc_1676
00001F36                            ; End of function sub_1642
00001F36                            
00001F36                            
00001F36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F36                            
00001F36                            
00001F36                            sub_165E:				; XREF: Demo_Time
00001F36 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001F3A 6700                       		beq.s	locret_16DA
00001F3C 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
00001F42 7000                       		moveq	#0,d0
00001F44 3038 F684                  		move.w	($FFFFF684).w,d0
00001F48 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001F4E                            
00001F4E                            loc_1676:				; XREF: sub_1642
00001F4E 49F9 00C0 0004             		lea	($C00004).l,a4
00001F54 E588                       		lsl.l	#2,d0
00001F56 E448                       		lsr.w	#2,d0
00001F58 0040 4000                  		ori.w	#$4000,d0
00001F5C 4840                       		swap	d0
00001F5E 2880                       		move.l	d0,(a4)
00001F60 594C                       		subq.w	#4,a4
00001F62 2078 F680                  		movea.l	($FFFFF680).w,a0
00001F66 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001F6A 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001F6E 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
00001F72 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
00001F76 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
00001F7A 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
00001F7E 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001F82                            
00001F82                            loc_16AA:				; XREF: sub_165E
00001F82 3A7C 0008                  		movea.w	#8,a5
00001F86 6100 FE1C                  		bsr.w	NemDec3
00001F8A 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
00001F8E 6700                       		beq.s	loc_16DC
00001F90 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
00001F94 66EC                       		bne.s	loc_16AA
00001F96 21C8 F680                  		move.l	a0,($FFFFF680).w
00001F9A 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
00001F9E 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001FA2 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
00001FA6 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
00001FAA 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
00001FAE 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001FB2                            
00001FB2                            locret_16DA:				; XREF: sub_1642
00001FB2 4E75                       		rts	
00001FB4                            ; ===========================================================================
00001FB4                            
00001FB4                            loc_16DC:				; XREF: sub_165E
00001FB4 41F8 F680                  		lea	($FFFFF680).w,a0
00001FB8 7015                       		moveq	#$15,d0
00001FBA                            
00001FBA                            loc_16E2:				; XREF: sub_165E
00001FBA 20E8 0006                  		move.l	6(a0),(a0)+
00001FBE 51C8 FFFA                  		dbf	d0,loc_16E2
00001FC2 4E75                       		rts	
00001FC4                            ; End of function sub_165E
00001FC4                            
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            ; Subroutine to	execute	the pattern load cue
00001FC4                            ; ---------------------------------------------------------------------------
00001FC4                            
00001FC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FC4                            
00001FC4                            
00001FC4                            RunPLC_ROM:
00001FC4 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
00001FCA D040                       		add.w	d0,d0
00001FCC 3031 0000                  		move.w	(a1,d0.w),d0
00001FD0 43F1 0000                  		lea	(a1,d0.w),a1
00001FD4 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
00001FD6                            
00001FD6                            RunPLC_Loop:
00001FD6 2059                       		movea.l	(a1)+,a0	; get art pointer
00001FD8 7000                       		moveq	#0,d0
00001FDA 3019                       		move.w	(a1)+,d0	; get VRAM address
00001FDC E588                       		lsl.l	#2,d0		; divide address by $20
00001FDE E448                       		lsr.w	#2,d0
00001FE0 0040 4000                  		ori.w	#$4000,d0
00001FE4 4840                       		swap	d0
00001FE6 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001FEC 6100 FD2A                  		bsr.w	NemDec		; decompress
00001FF0 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
00001FF4 4E75                       		rts	
00001FF6                            ; End of function RunPLC_ROM
00001FF6                            
00001FF6                            ; ---------------------------------------------------------------------------
00001FF6                            ; Enigma decompression algorithm
00001FF6                            ; ---------------------------------------------------------------------------
00001FF6                            
00001FF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FF6                            
00001FF6                            
00001FF6                            EniDec:
00001FF6 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001FFA 3640                       		movea.w	d0,a3
00001FFC 1018                       		move.b	(a0)+,d0
00001FFE 4880                       		ext.w	d0
00002000 3A40                       		movea.w	d0,a5
00002002 1818                       		move.b	(a0)+,d4
00002004 E70C                       		lsl.b	#3,d4
00002006 3458                       		movea.w	(a0)+,a2
00002008 D4CB                       		adda.w	a3,a2
0000200A 3858                       		movea.w	(a0)+,a4
0000200C D8CB                       		adda.w	a3,a4
0000200E 1A18                       		move.b	(a0)+,d5
00002010 E145                       		asl.w	#8,d5
00002012 1A18                       		move.b	(a0)+,d5
00002014 7C10                       		moveq	#$10,d6
00002016                            
00002016                            loc_173E:				; XREF: loc_1768
00002016 7007                       		moveq	#7,d0
00002018 3E06                       		move.w	d6,d7
0000201A 9E40                       		sub.w	d0,d7
0000201C 3205                       		move.w	d5,d1
0000201E EE69                       		lsr.w	d7,d1
00002020 0241 007F                  		andi.w	#$7F,d1
00002024 3401                       		move.w	d1,d2
00002026 0C41 0040                  		cmpi.w	#$40,d1
0000202A 6400                       		bcc.s	loc_1758
0000202C 7006                       		moveq	#6,d0
0000202E E24A                       		lsr.w	#1,d2
00002030                            
00002030                            loc_1758:
00002030 6100 0000                  		bsr.w	sub_188C
00002034 0242 000F                  		andi.w	#$F,d2
00002038 E849                       		lsr.w	#4,d1
0000203A D241                       		add.w	d1,d1
0000203C 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00002040                            ; End of function EniDec
00002040                            
00002040                            ; ===========================================================================
00002040                            
00002040                            loc_1768:				; XREF: loc_17B4
00002040 32CA                       		move.w	a2,(a1)+
00002042 524A                       		addq.w	#1,a2
00002044 51CA FFFA                  		dbf	d2,loc_1768
00002048 60CC                       		bra.s	loc_173E
0000204A                            ; ===========================================================================
0000204A                            
0000204A                            loc_1772:				; XREF: loc_17B4
0000204A 32CC                       		move.w	a4,(a1)+
0000204C 51CA FFFC                  		dbf	d2,loc_1772
00002050 60C4                       		bra.s	loc_173E
00002052                            ; ===========================================================================
00002052                            
00002052                            loc_177A:				; XREF: loc_17B4
00002052 6100 0000                  		bsr.w	loc_17DC
00002056                            
00002056                            loc_177E:
00002056 32C1                       		move.w	d1,(a1)+
00002058 51CA FFFC                  		dbf	d2,loc_177E
0000205C 60B8                       		bra.s	loc_173E
0000205E                            ; ===========================================================================
0000205E                            
0000205E                            loc_1786:				; XREF: loc_17B4
0000205E 6100 0000                  		bsr.w	loc_17DC
00002062                            
00002062                            loc_178A:
00002062 32C1                       		move.w	d1,(a1)+
00002064 5241                       		addq.w	#1,d1
00002066 51CA FFFA                  		dbf	d2,loc_178A
0000206A 60AA                       		bra.s	loc_173E
0000206C                            ; ===========================================================================
0000206C                            
0000206C                            loc_1794:				; XREF: loc_17B4
0000206C 6100 0000                  		bsr.w	loc_17DC
00002070                            
00002070                            loc_1798:
00002070 32C1                       		move.w	d1,(a1)+
00002072 5341                       		subq.w	#1,d1
00002074 51CA FFFA                  		dbf	d2,loc_1798
00002078 609C                       		bra.s	loc_173E
0000207A                            ; ===========================================================================
0000207A                            
0000207A                            loc_17A2:				; XREF: loc_17B4
0000207A 0C42 000F                  		cmpi.w	#$F,d2
0000207E 6700                       		beq.s	loc_17C4
00002080                            
00002080                            loc_17A8:
00002080 6100 0000                  		bsr.w	loc_17DC
00002084 32C1                       		move.w	d1,(a1)+
00002086 51CA FFF8                  		dbf	d2,loc_17A8
0000208A 608A                       		bra.s	loc_173E
0000208C                            ; ===========================================================================
0000208C                            
0000208C                            loc_17B4:				; XREF: EniDec
0000208C 60B2                       		bra.s	loc_1768
0000208E                            ; ===========================================================================
0000208E 60B0                       		bra.s	loc_1768
00002090                            ; ===========================================================================
00002090 60B8                       		bra.s	loc_1772
00002092                            ; ===========================================================================
00002092 60B6                       		bra.s	loc_1772
00002094                            ; ===========================================================================
00002094 60BC                       		bra.s	loc_177A
00002096                            ; ===========================================================================
00002096 60C6                       		bra.s	loc_1786
00002098                            ; ===========================================================================
00002098 60D2                       		bra.s	loc_1794
0000209A                            ; ===========================================================================
0000209A 60DE                       		bra.s	loc_17A2
0000209C                            ; ===========================================================================
0000209C                            
0000209C                            loc_17C4:				; XREF: loc_17A2
0000209C 5348                       		subq.w	#1,a0
0000209E 0C46 0010                  		cmpi.w	#$10,d6
000020A2 6600                       		bne.s	loc_17CE
000020A4 5348                       		subq.w	#1,a0
000020A6                            
000020A6                            loc_17CE:
000020A6 3008                       		move.w	a0,d0
000020A8 E248                       		lsr.w	#1,d0
000020AA 6400                       		bcc.s	loc_17D6
000020AC 5248                       		addq.w	#1,a0
000020AE                            
000020AE                            loc_17D6:
000020AE 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000020B2 4E75                       		rts	
000020B4                            ; ===========================================================================
000020B4                            
000020B4                            loc_17DC:				; XREF: loc_17A2
000020B4 360B                       		move.w	a3,d3
000020B6 1204                       		move.b	d4,d1
000020B8 D201                       		add.b	d1,d1
000020BA 6400                       		bcc.s	loc_17EE
000020BC 5346                       		subq.w	#1,d6
000020BE 0D05                       		btst	d6,d5
000020C0 6700                       		beq.s	loc_17EE
000020C2 0043 8000                  		ori.w	#-$8000,d3
000020C6                            
000020C6                            loc_17EE:
000020C6 D201                       		add.b	d1,d1
000020C8 6400                       		bcc.s	loc_17FC
000020CA 5346                       		subq.w	#1,d6
000020CC 0D05                       		btst	d6,d5
000020CE 6700                       		beq.s	loc_17FC
000020D0 0643 4000                  		addi.w	#$4000,d3
000020D4                            
000020D4                            loc_17FC:
000020D4 D201                       		add.b	d1,d1
000020D6 6400                       		bcc.s	loc_180A
000020D8 5346                       		subq.w	#1,d6
000020DA 0D05                       		btst	d6,d5
000020DC 6700                       		beq.s	loc_180A
000020DE 0643 2000                  		addi.w	#$2000,d3
000020E2                            
000020E2                            loc_180A:
000020E2 D201                       		add.b	d1,d1
000020E4 6400                       		bcc.s	loc_1818
000020E6 5346                       		subq.w	#1,d6
000020E8 0D05                       		btst	d6,d5
000020EA 6700                       		beq.s	loc_1818
000020EC 0043 1000                  		ori.w	#$1000,d3
000020F0                            
000020F0                            loc_1818:
000020F0 D201                       		add.b	d1,d1
000020F2 6400                       		bcc.s	loc_1826
000020F4 5346                       		subq.w	#1,d6
000020F6 0D05                       		btst	d6,d5
000020F8 6700                       		beq.s	loc_1826
000020FA 0043 0800                  		ori.w	#$800,d3
000020FE                            
000020FE                            loc_1826:
000020FE 3205                       		move.w	d5,d1
00002100 3E06                       		move.w	d6,d7
00002102 9E4D                       		sub.w	a5,d7
00002104 6400                       		bcc.s	loc_1856
00002106 3C07                       		move.w	d7,d6
00002108 0646 0010                  		addi.w	#$10,d6
0000210C 4447                       		neg.w	d7
0000210E EF69                       		lsl.w	d7,d1
00002110 1A10                       		move.b	(a0),d5
00002112 EF3D                       		rol.b	d7,d5
00002114 DE47                       		add.w	d7,d7
00002116 CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
0000211A D245                       		add.w	d5,d1
0000211C                            
0000211C                            loc_1844:				; XREF: loc_1868
0000211C 300D                       		move.w	a5,d0
0000211E D040                       		add.w	d0,d0
00002120 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00002124 D243                       		add.w	d3,d1
00002126 1A18                       		move.b	(a0)+,d5
00002128 E14D                       		lsl.w	#8,d5
0000212A 1A18                       		move.b	(a0)+,d5
0000212C 4E75                       		rts	
0000212E                            ; ===========================================================================
0000212E                            
0000212E                            loc_1856:				; XREF: loc_1826
0000212E 6700                       		beq.s	loc_1868
00002130 EE69                       		lsr.w	d7,d1
00002132 300D                       		move.w	a5,d0
00002134 D040                       		add.w	d0,d0
00002136 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000213A D243                       		add.w	d3,d1
0000213C 300D                       		move.w	a5,d0
0000213E 6000                       		bra.s	sub_188C
00002140                            ; ===========================================================================
00002140                            
00002140                            loc_1868:				; XREF: loc_1856
00002140 7C10                       		moveq	#$10,d6
00002142                            
00002142                            loc_186A:
00002142 60D8                       		bra.s	loc_1844
00002144                            ; ===========================================================================
00002144 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
0000215A 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
00002164                            
00002164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002164                            
00002164                            
00002164                            sub_188C:				; XREF: EniDec
00002164 9C40                       		sub.w	d0,d6
00002166 0C46 0009                  		cmpi.w	#9,d6
0000216A 6400                       		bcc.s	locret_189A
0000216C 5046                       		addq.w	#8,d6
0000216E E145                       		asl.w	#8,d5
00002170 1A18                       		move.b	(a0)+,d5
00002172                            
00002172                            locret_189A:
00002172 4E75                       		rts	
00002174                            ; End of function sub_188C
00002174                            
00002174                            ; ---------------------------------------------------------------------------
00002174                            ; Kosinski decompression algorithm
00002174                            ; ---------------------------------------------------------------------------
00002174                            
00002174                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002174                            
00002174                            
00002174                            KosDec:
00002174                            
00002174 =FFFFFFFE                  var_2		= -2
00002174 =FFFFFFFF                  var_1		= -1
00002174                            
00002174 558F                       		subq.l	#2,sp
00002176 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000217A 1E98                       		move.b	(a0)+,(sp)
0000217C 3A17                       		move.w	(sp),d5
0000217E 780F                       		moveq	#$F,d4
00002180                            
00002180                            loc_18A8:
00002180 E24D                       		lsr.w	#1,d5
00002182 40C6                       		move	sr,d6
00002184 51CC 0000                  		dbf	d4,loc_18BA
00002188 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
0000218C 1E98                       		move.b	(a0)+,(sp)
0000218E 3A17                       		move.w	(sp),d5
00002190 780F                       		moveq	#$F,d4
00002192                            
00002192                            loc_18BA:
00002192 44C6                       		move	d6,ccr
00002194 6400                       		bcc.s	loc_18C2
00002196 12D8                       		move.b	(a0)+,(a1)+
00002198 60E6                       		bra.s	loc_18A8
0000219A                            ; ===========================================================================
0000219A                            
0000219A                            loc_18C2:				; XREF: KosDec
0000219A 7600                       		moveq	#0,d3
0000219C E24D                       		lsr.w	#1,d5
0000219E 40C6                       		move	sr,d6
000021A0 51CC 0000                  		dbf	d4,loc_18D6
000021A4 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021A8 1E98                       		move.b	(a0)+,(sp)
000021AA 3A17                       		move.w	(sp),d5
000021AC 780F                       		moveq	#$F,d4
000021AE                            
000021AE                            loc_18D6:
000021AE 44C6                       		move	d6,ccr
000021B0 6500                       		bcs.s	loc_1906
000021B2 E24D                       		lsr.w	#1,d5
000021B4 51CC 0000                  		dbf	d4,loc_18EA
000021B8 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021BC 1E98                       		move.b	(a0)+,(sp)
000021BE 3A17                       		move.w	(sp),d5
000021C0 780F                       		moveq	#$F,d4
000021C2                            
000021C2                            loc_18EA:
000021C2 E353                       		roxl.w	#1,d3
000021C4 E24D                       		lsr.w	#1,d5
000021C6 51CC 0000                  		dbf	d4,loc_18FC
000021CA 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000021CE 1E98                       		move.b	(a0)+,(sp)
000021D0 3A17                       		move.w	(sp),d5
000021D2 780F                       		moveq	#$F,d4
000021D4                            
000021D4                            loc_18FC:
000021D4 E353                       		roxl.w	#1,d3
000021D6 5243                       		addq.w	#1,d3
000021D8 74FF                       		moveq	#-1,d2
000021DA 1418                       		move.b	(a0)+,d2
000021DC 6000                       		bra.s	loc_191C
000021DE                            ; ===========================================================================
000021DE                            
000021DE                            loc_1906:				; XREF: loc_18C2
000021DE 1018                       		move.b	(a0)+,d0
000021E0 1218                       		move.b	(a0)+,d1
000021E2 74FF                       		moveq	#-1,d2
000021E4 1401                       		move.b	d1,d2
000021E6 EB4A                       		lsl.w	#5,d2
000021E8 1400                       		move.b	d0,d2
000021EA 0241 0007                  		andi.w	#7,d1
000021EE 6700                       		beq.s	loc_1928
000021F0 1601                       		move.b	d1,d3
000021F2 5243                       		addq.w	#1,d3
000021F4                            
000021F4                            loc_191C:
000021F4 1031 2000                  		move.b	(a1,d2.w),d0
000021F8 12C0                       		move.b	d0,(a1)+
000021FA 51CB FFF8                  		dbf	d3,loc_191C
000021FE 6080                       		bra.s	loc_18A8
00002200                            ; ===========================================================================
00002200                            
00002200                            loc_1928:				; XREF: loc_1906
00002200 1218                       		move.b	(a0)+,d1
00002202 6700                       		beq.s	loc_1938
00002204 0C01 0001                  		cmpi.b	#1,d1
00002208 6700 FF76                  		beq.w	loc_18A8
0000220C 1601                       		move.b	d1,d3
0000220E 60E4                       		bra.s	loc_191C
00002210                            ; ===========================================================================
00002210                            
00002210                            loc_1938:				; XREF: loc_1928
00002210 548F                       		addq.l	#2,sp
00002212 4E75                       		rts	
00002214                            ; End of function KosDec
00002214                            
00002214                            ; ---------------------------------------------------------------------------
00002214                            ; Pallet cycling routine loading subroutine
00002214                            ; ---------------------------------------------------------------------------
00002214                            
00002214                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002214                            
00002214                            
00002214                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
00002214 7400                       		moveq	#0,d2
00002216 7000                       		moveq	#0,d0
00002218 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag set?
0000221C 6600                       		bne.s	PalCycle_Stop	; GMZ: If yes, branch
0000221E 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00002222 D040                       		add.w	d0,d0		; multiply by 2
00002224 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
00002228 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000222C                            
0000222C                            PalCycle_Stop:
0000222C 4E75                       		rts
0000222E                            ; End of function PalCycle_Load
0000222E                            
0000222E                            ; ===========================================================================
0000222E                            ; ---------------------------------------------------------------------------
0000222E                            ; Pallet cycling routines
0000222E                            ; ---------------------------------------------------------------------------
0000222E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00002230 0000                       		dc.w PalCycle_LZ-PalCycle
00002232 0000                       		dc.w PalCycle_MZ-PalCycle
00002234 0000                       		dc.w PalCycle_SLZ-PalCycle
00002236 0000                       		dc.w PalCycle_SYZ-PalCycle
00002238 0000                       		dc.w PalCycle_SBZ-PalCycle
0000223A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000223C 0000                       		dc.w PalCycle_GHZ-PalCycle
0000223E                            
0000223E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000223E                            
0000223E                            
0000223E                            PalCycle_Title:				; XREF: TitleScreen
0000223E 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00002244 6000                       		bra.s	loc_196A
00002246                            ; ===========================================================================
00002246                            
00002246                            PalCycle_GHZ:				; XREF: PalCycle
00002246 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000224C                            
0000224C                            loc_196A:				; XREF: PalCycle_Title
0000224C 5378 F634                  		subq.w	#1,($FFFFF634).w
00002250 6A00                       		bpl.s	locret_1990
00002252 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00002258 3038 F632                  		move.w	($FFFFF632).w,d0
0000225C 5278 F632                  		addq.w	#1,($FFFFF632).w
00002260 0240 0003                  		andi.w	#3,d0
00002264 E748                       		lsl.w	#3,d0
00002266 43F8 FB50                  		lea	($FFFFFB50).w,a1
0000226A 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000226E 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00002272                            
00002272                            locret_1990:
00002272 4E75                       		rts	
00002274                            ; End of function PalCycle_Title
00002274                            
00002274                            
00002274                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002274                            
00002274                            
00002274                            PalCycle_LZ:				; XREF: PalCycle
00002274 5378 F634                  		subq.w	#1,($FFFFF634).w
00002278 6A00                       		bpl.s	loc_19D8
0000227A 31FC 0002 F634             		move.w	#2,($FFFFF634).w
00002280 3038 F632                  		move.w	($FFFFF632).w,d0
00002284 5278 F632                  		addq.w	#1,($FFFFF632).w
00002288 0240 0003                  		andi.w	#3,d0
0000228C E748                       		lsl.w	#3,d0
0000228E 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
00002294 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
0000229A 6600                       		bne.s	loc_19C0
0000229C 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000022A2                            
000022A2                            loc_19C0:
000022A2 43F8 FB56                  		lea	($FFFFFB56).w,a1
000022A6 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000022AA 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000022AE 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000022B2 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000022B6 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000022BA                            
000022BA                            loc_19D8:
000022BA 3038 FE04                  		move.w	($FFFFFE04).w,d0
000022BE 0240 0007                  		andi.w	#7,d0
000022C2 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000022C6 6700                       		beq.s	locret_1A3A
000022C8 7201                       		moveq	#1,d1
000022CA 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000022CE 6700                       		beq.s	loc_19F0
000022D0 4441                       		neg.w	d1
000022D2                            
000022D2                            loc_19F0:
000022D2 3038 F650                  		move.w	($FFFFF650).w,d0
000022D6 0240 0003                  		andi.w	#3,d0
000022DA D041                       		add.w	d1,d0
000022DC 0C40 0003                  		cmpi.w	#3,d0
000022E0 6500                       		bcs.s	loc_1A0A
000022E2 3200                       		move.w	d0,d1
000022E4 7000                       		moveq	#0,d0
000022E6 4A41                       		tst.w	d1
000022E8 6A00                       		bpl.s	loc_1A0A
000022EA 7002                       		moveq	#2,d0
000022EC                            
000022EC                            loc_1A0A:
000022EC 31C0 F650                  		move.w	d0,($FFFFF650).w
000022F0 D040                       		add.w	d0,d0
000022F2 3200                       		move.w	d0,d1
000022F4 D040                       		add.w	d0,d0
000022F6 D041                       		add.w	d1,d0
000022F8 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
000022FE 43F8 FB76                  		lea	($FFFFFB76).w,a1
00002302 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002306 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000230A 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00002310 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00002314 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002318 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000231C                            
0000231C                            locret_1A3A:
0000231C 4E75                       		rts	
0000231E                            ; End of function PalCycle_LZ
0000231E                            
0000231E                            ; ===========================================================================
0000231E 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00002326                            ; ===========================================================================
00002326                            
00002326                            PalCycle_MZ:				; XREF: PalCycle
00002326 4E75                       		rts	
00002328                            
00002328                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002328                            
00002328                            
00002328                            PalCycle_SLZ:				; XREF: PalCycle
00002328 4E75                       		rts	
0000232A                            ; End of function PalCycle_SLZ
0000232A                            
0000232A                            
0000232A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000232A                            
0000232A                            
0000232A                            PalCycle_SYZ:				; XREF: PalCycle
0000232A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000232E 6A00                       		bpl.s	locret_1AC6
00002330 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00002336 3038 F632                  		move.w	($FFFFF632).w,d0
0000233A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000233E 0240 0003                  		andi.w	#3,d0
00002342 E548                       		lsl.w	#2,d0
00002344 3200                       		move.w	d0,d1
00002346 D040                       		add.w	d0,d0
00002348 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
0000234E 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00002352 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002356 22B0 0004                  		move.l	4(a0,d0.w),(a1)
0000235A 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00002360 43F8 FB76                  		lea	($FFFFFB76).w,a1
00002364 32B0 1000                  		move.w	(a0,d1.w),(a1)
00002368 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
0000236E                            
0000236E                            locret_1AC6:
0000236E 4E75                       		rts	
00002370                            ; End of function PalCycle_SYZ
00002370                            
00002370                            
00002370                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002370                            
00002370                            
00002370                            PalCycle_SBZ:				; XREF: PalCycle
00002370 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00002376 4A38 FE11                  		tst.b	($FFFFFE11).w
0000237A 6700                       		beq.s	loc_1ADA
0000237C 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00002382                            
00002382                            loc_1ADA:
00002382 43F8 F650                  		lea	($FFFFF650).w,a1
00002386 321A                       		move.w	(a2)+,d1
00002388                            
00002388                            loc_1AE0:
00002388 5311                       		subq.b	#1,(a1)
0000238A 6B00                       		bmi.s	loc_1AEA
0000238C 5489                       		addq.l	#2,a1
0000238E 5C8A                       		addq.l	#6,a2
00002390 6000                       		bra.s	loc_1B06
00002392                            ; ===========================================================================
00002392                            
00002392                            loc_1AEA:				; XREF: PalCycle_SBZ
00002392 12DA                       		move.b	(a2)+,(a1)+
00002394 1011                       		move.b	(a1),d0
00002396 5200                       		addq.b	#1,d0
00002398 B01A                       		cmp.b	(a2)+,d0
0000239A 6500                       		bcs.s	loc_1AF6
0000239C 7000                       		moveq	#0,d0
0000239E                            
0000239E                            loc_1AF6:
0000239E 12C0                       		move.b	d0,(a1)+
000023A0 0240 000F                  		andi.w	#$F,d0
000023A4 D040                       		add.w	d0,d0
000023A6 305A                       		movea.w	(a2)+,a0
000023A8 365A                       		movea.w	(a2)+,a3
000023AA 36B0 0000                  		move.w	(a0,d0.w),(a3)
000023AE                            
000023AE                            loc_1B06:				; XREF: PalCycle_SBZ
000023AE 51C9 FFD8                  		dbf	d1,loc_1AE0
000023B2 5378 F634                  		subq.w	#1,($FFFFF634).w
000023B6 6A00                       		bpl.s	locret_1B64
000023B8 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
000023BE 31FC 0001 F634             		move.w	#1,($FFFFF634).w
000023C4 4A38 FE11                  		tst.b	($FFFFFE11).w
000023C8 6700                       		beq.s	loc_1B2E
000023CA 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
000023D0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000023D6                            
000023D6                            loc_1B2E:
000023D6 72FF                       		moveq	#-1,d1
000023D8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000023DC 6700                       		beq.s	loc_1B38
000023DE 4441                       		neg.w	d1
000023E0                            
000023E0                            loc_1B38:
000023E0 3038 F632                  		move.w	($FFFFF632).w,d0
000023E4 0240 0003                  		andi.w	#3,d0
000023E8 D041                       		add.w	d1,d0
000023EA 0C40 0003                  		cmpi.w	#3,d0
000023EE 6500                       		bcs.s	loc_1B52
000023F0 3200                       		move.w	d0,d1
000023F2 7000                       		moveq	#0,d0
000023F4 4A41                       		tst.w	d1
000023F6 6A00                       		bpl.s	loc_1B52
000023F8 7002                       		moveq	#2,d0
000023FA                            
000023FA                            loc_1B52:
000023FA 31C0 F632                  		move.w	d0,($FFFFF632).w
000023FE D040                       		add.w	d0,d0
00002400 43F8 FB58                  		lea	($FFFFFB58).w,a1
00002404 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00002408 32B0 0004                  		move.w	4(a0,d0.w),(a1)
0000240C                            
0000240C                            locret_1B64:
0000240C 4E75                       		rts	
0000240E                            ; End of function PalCycle_SBZ
0000240E                            
0000240E                            ; ===========================================================================
0000240E                            Pal_TitleCyc:	incbin	pallet\c_title.bin
0000242E                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
0000244E                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
0000246E                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00002480                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00002492                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
000024FA                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
0000251E                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
0000253E                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
0000254E                            
0000254E                            Pal_SBZCycList:
0000254E                            	include "_inc\SBZ pallet script 1.asm"
0000254E                            ; ---------------------------------------------------------------------------
0000254E                            ; Scrap Brain Zone 1 pallet cycling script
0000254E                            ; ---------------------------------------------------------------------------
0000254E 0008                       	dc.w 8			; number of entries - 1
00002550 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00002552 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00002554 FB50                       	dc.w $FB50		; RAM address
00002556 0D08                       	dc.b $D, 8
00002558 0000                       	dc.w Pal_SBZCyc2
0000255A FB52                       	dc.w $FB52
0000255C 0E08                       	dc.b $E, 8
0000255E 0000                       	dc.w Pal_SBZCyc3
00002560 FB6E                       	dc.w $FB6E
00002562 0B08                       	dc.b $B, 8
00002564 0000                       	dc.w Pal_SBZCyc5
00002566 FB70                       	dc.w $FB70
00002568 0708                       	dc.b 7,	8
0000256A 0000                       	dc.w Pal_SBZCyc6
0000256C FB72                       	dc.w $FB72
0000256E 1C10                       	dc.b $1C, $10
00002570 0000                       	dc.w Pal_SBZCyc7
00002572 FB7E                       	dc.w $FB7E
00002574 0303                       	dc.b 3,	3
00002576 0000                       	dc.w Pal_SBZCyc8
00002578 FB78                       	dc.w $FB78
0000257A 0303                       	dc.b 3,	3
0000257C 0000                       	dc.w Pal_SBZCyc8+2
0000257E FB7A                       	dc.w $FB7A
00002580 0303                       	dc.b 3,	3
00002582 0000                       	dc.w Pal_SBZCyc8+4
00002584 FB7C                       	dc.w $FB7C
00002586                            	even
00002586                            	even
00002586                            
00002586                            Pal_SBZCycList2:
00002586                            	include "_inc\SBZ pallet script 2.asm"
00002586                            ; ---------------------------------------------------------------------------
00002586                            ; Scrap Brain Zone 2 pallet cycling script
00002586                            ; ---------------------------------------------------------------------------
00002586 0006                       	dc.w 6
00002588 0708                       	dc.b 7,	8
0000258A 0000                       	dc.w Pal_SBZCyc1
0000258C FB50                       	dc.w $FB50
0000258E 0D08                       	dc.b $D, 8
00002590 0000                       	dc.w Pal_SBZCyc2
00002592 FB52                       	dc.w $FB52
00002594 0908                       	dc.b 9,	8
00002596 0000                       	dc.w Pal_SBZCyc9
00002598 FB70                       	dc.w $FB70
0000259A 0708                       	dc.b 7,	8
0000259C 0000                       	dc.w Pal_SBZCyc6
0000259E FB72                       	dc.w $FB72
000025A0 0303                       	dc.b 3,	3
000025A2 0000                       	dc.w Pal_SBZCyc8
000025A4 FB78                       	dc.w $FB78
000025A6 0303                       	dc.b 3,	3
000025A8 0000                       	dc.w Pal_SBZCyc8+2
000025AA FB7A                       	dc.w $FB7A
000025AC 0303                       	dc.b 3,	3
000025AE 0000                       	dc.w Pal_SBZCyc8+4
000025B0 FB7C                       	dc.w $FB7C
000025B2                            	even
000025B2                            	even
000025B2                            
000025B2                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
000025C2                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
000025D2                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
000025E2                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
000025EE                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
000025FE                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
0000260E                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
0000262E                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00002638                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00002648                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00002654                            ; ---------------------------------------------------------------------------
00002654                            ; Subroutine to	fade out and fade in
00002654                            ; ---------------------------------------------------------------------------
00002654                            
00002654                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002654                            
00002654                            
00002654                            Pal_FadeTo:
00002654 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000265A                            
0000265A                            Pal_FadeTo2:
0000265A 7000                       		moveq	#0,d0
0000265C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002660 1038 F626                  		move.b	($FFFFF626).w,d0
00002664 D0C0                       		adda.w	d0,a0
00002666 7200                       		moveq	#0,d1
00002668 1038 F627                  		move.b	($FFFFF627).w,d0
0000266C                            
0000266C                            Pal_ToBlack:
0000266C 30C1                       		move.w	d1,(a0)+
0000266E 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00002672                            
00002672 383C 0015                  		move.w	#$15,d4
00002676 1A3C 0009                  		move.b	#9,d5
0000267A                            
0000267A                            loc_1DCE:
0000267A 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002680 6100 0000                  		bsr.w	DelayProgram
00002684 6100                       		bsr.s	Pal_FadeIn
00002686 6100 F83C                  		bsr.w	RunPLC_RAM
0000268A 51CC FFEE                  		dbf	d4,loc_1DCE
0000268E 4E75                       		rts	
00002690                            ; End of function Pal_FadeTo
00002690                            
00002690                            ; ---------------------------------------------------------------------------
00002690                            ; Pallet fade-in subroutine
00002690                            ; ---------------------------------------------------------------------------
00002690                            
00002690                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002690                            
00002690                            
00002690                            Pal_FadeIn:				; XREF: Pal_FadeTo
00002690 7000                       		moveq	#0,d0
00002692 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002696 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000269A 1038 F626                  		move.b	($FFFFF626).w,d0
0000269E D0C0                       		adda.w	d0,a0
000026A0 D2C0                       		adda.w	d0,a1
000026A2 1038 F627                  		move.b	($FFFFF627).w,d0
000026A6                            
000026A6                            loc_1DFA:
000026A6 6100                       		bsr.s	Pal_AddColor
000026A8 51C8 FFFC                  		dbf	d0,loc_1DFA
000026AC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000026B2 6600                       		bne.s	locret_1E24
000026B4 7000                       		moveq	#0,d0
000026B6 41F8 FA80                  		lea	($FFFFFA80).w,a0
000026BA 43F8 FA00                  		lea	($FFFFFA00).w,a1
000026BE 1038 F626                  		move.b	($FFFFF626).w,d0
000026C2 D0C0                       		adda.w	d0,a0
000026C4 D2C0                       		adda.w	d0,a1
000026C6 1038 F627                  		move.b	($FFFFF627).w,d0
000026CA                            
000026CA                            loc_1E1E:
000026CA 6100                       		bsr.s	Pal_AddColor
000026CC 51C8 FFFC                  		dbf	d0,loc_1E1E
000026D0                            
000026D0                            locret_1E24:
000026D0 4E75                       		rts	
000026D2                            ; End of function Pal_FadeIn
000026D2                            
000026D2                            
000026D2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000026D2                            
000026D2                            
000026D2                            Pal_AddColor:				; XREF: Pal_FadeIn
000026D2 3419                       		move.w	(a1)+,d2
000026D4 3610                       		move.w	(a0),d3
000026D6 B642                       		cmp.w	d2,d3
000026D8 6700                       		beq.s	loc_1E4E
000026DA 3203                       		move.w	d3,d1
000026DC 0641 0200                  		addi.w	#$200,d1	; increase blue	value
000026E0 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
000026E2 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
000026E4 30C1                       		move.w	d1,(a0)+	; update pallet
000026E6 4E75                       		rts	
000026E8                            ; ===========================================================================
000026E8                            
000026E8                            Pal_AddGreen:				; XREF: Pal_AddColor
000026E8 3203                       		move.w	d3,d1
000026EA 0641 0020                  		addi.w	#$20,d1		; increase green value
000026EE B242                       		cmp.w	d2,d1
000026F0 6200                       		bhi.s	Pal_AddRed
000026F2 30C1                       		move.w	d1,(a0)+	; update pallet
000026F4 4E75                       		rts	
000026F6                            ; ===========================================================================
000026F6                            
000026F6                            Pal_AddRed:				; XREF: Pal_AddGreen
000026F6 5458                       		addq.w	#2,(a0)+	; increase red value
000026F8 4E75                       		rts	
000026FA                            ; ===========================================================================
000026FA                            
000026FA                            loc_1E4E:				; XREF: Pal_AddColor
000026FA 5448                       		addq.w	#2,a0
000026FC 4E75                       		rts	
000026FE                            ; End of function Pal_AddColor
000026FE                            
000026FE                            
000026FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000026FE                            
000026FE                            PalFadeOut:
000026FE                            Pal_FadeFrom:
000026FE 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002704 383C 0015                  		move.w	#$15,d4
00002708                            loc_1E5C:
00002708 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
0000270E 6100 0000                  		bsr.w	DelayProgram
00002712 6100                       		bsr.s	Pal_FadeOut
00002714 6100 F7AE                  		bsr.w	RunPLC_RAM
00002718 51CC FFEE                  		dbf	d4,loc_1E5C
0000271C 4E75                       		rts	
0000271E                            ; End of function Pal_FadeFrom
0000271E                            
0000271E                            ; ---------------------------------------------------------------------------
0000271E                            ; Pallet fade-out subroutine
0000271E                            ; ---------------------------------------------------------------------------
0000271E                            
0000271E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000271E                            
0000271E                            
0000271E                            Pal_FadeOut:				; XREF: Pal_FadeFrom
0000271E 7000                       		moveq	#0,d0
00002720 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002724 1038 F626                  		move.b	($FFFFF626).w,d0
00002728 D0C0                       		adda.w	d0,a0
0000272A 1038 F627                  		move.b	($FFFFF627).w,d0
0000272E                            
0000272E                            loc_1E82:
0000272E 6100                       		bsr.s	Pal_DecColor
00002730 51C8 FFFC                  		dbf	d0,loc_1E82
00002734                            
00002734 7000                       		moveq	#0,d0
00002736 41F8 FA80                  		lea	($FFFFFA80).w,a0
0000273A 1038 F626                  		move.b	($FFFFF626).w,d0
0000273E D0C0                       		adda.w	d0,a0
00002740 1038 F627                  		move.b	($FFFFF627).w,d0
00002744                            
00002744                            loc_1E98:
00002744 6100                       		bsr.s	Pal_DecColor
00002746 51C8 FFFC                  		dbf	d0,loc_1E98
0000274A 4E75                       		rts	
0000274C                            ; End of function Pal_FadeOut
0000274C                            
0000274C                            
0000274C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000274C                            
0000274C                            
0000274C                            Pal_DecColor:				; XREF: Pal_FadeOut
0000274C 3410                       		move.w	(a0),d2
0000274E 6700                       		beq.s	loc_1ECC
00002750 3202                       		move.w	d2,d1
00002752 0241 000E                  		andi.w	#$E,d1
00002756 6700                       		beq.s	Pal_DecGreen
00002758 5558                       		subq.w	#2,(a0)+	; decrease red value
0000275A 4E75                       		rts	
0000275C                            ; ===========================================================================
0000275C                            
0000275C                            Pal_DecGreen:				; XREF: Pal_DecColor
0000275C 3202                       		move.w	d2,d1
0000275E 0241 00E0                  		andi.w	#$E0,d1
00002762 6700                       		beq.s	Pal_DecBlue
00002764 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00002768 4E75                       		rts	
0000276A                            ; ===========================================================================
0000276A                            
0000276A                            Pal_DecBlue:				; XREF: Pal_DecGreen
0000276A 3202                       		move.w	d2,d1
0000276C 0241 0E00                  		andi.w	#$E00,d1
00002770 6700                       		beq.s	loc_1ECC
00002772 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00002776 4E75                       		rts	
00002778                            ; ===========================================================================
00002778                            
00002778                            loc_1ECC:				; XREF: Pal_DecColor
00002778 5448                       		addq.w	#2,a0
0000277A 4E75                       		rts	
0000277C                            ; End of function Pal_DecColor
0000277C                            
0000277C                            ; ---------------------------------------------------------------------------
0000277C                            ; Subroutine to	fill the pallet	with white (special stage)
0000277C                            ; ---------------------------------------------------------------------------
0000277C                            
0000277C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000277C                            
0000277C                            
0000277C                            Pal_MakeWhite:				; XREF: SpecialStage
0000277C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00002782 7000                       		moveq	#0,d0
00002784 41F8 FB00                  		lea	($FFFFFB00).w,a0
00002788 1038 F626                  		move.b	($FFFFF626).w,d0
0000278C D0C0                       		adda.w	d0,a0
0000278E 323C 0EEE                  		move.w	#$EEE,d1
00002792 1038 F627                  		move.b	($FFFFF627).w,d0
00002796                            
00002796                            PalWhite_Loop:
00002796 30C1                       		move.w	d1,(a0)+
00002798 51C8 FFFC                  		dbf	d0,PalWhite_Loop
0000279C 383C 0015                  		move.w	#$15,d4
000027A0                            
000027A0                            loc_1EF4:
000027A0 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
000027A6 6100 0000                  		bsr.w	DelayProgram
000027AA 6100                       		bsr.s	Pal_WhiteToBlack
000027AC 6100 F716                  		bsr.w	RunPLC_RAM
000027B0 51CC FFEE                  		dbf	d4,loc_1EF4
000027B4 4E75                       		rts	
000027B6                            ; End of function Pal_MakeWhite
000027B6                            
000027B6                            
000027B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027B6                            
000027B6                            
000027B6                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
000027B6 7000                       		moveq	#0,d0
000027B8 41F8 FB00                  		lea	($FFFFFB00).w,a0
000027BC 43F8 FB80                  		lea	($FFFFFB80).w,a1
000027C0 1038 F626                  		move.b	($FFFFF626).w,d0
000027C4 D0C0                       		adda.w	d0,a0
000027C6 D2C0                       		adda.w	d0,a1
000027C8 1038 F627                  		move.b	($FFFFF627).w,d0
000027CC                            
000027CC                            loc_1F20:
000027CC 6100                       		bsr.s	Pal_DecColor2
000027CE 51C8 FFFC                  		dbf	d0,loc_1F20
000027D2                            
000027D2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000027D8 6600                       		bne.s	locret_1F4A
000027DA 7000                       		moveq	#0,d0
000027DC 41F8 FA80                  		lea	($FFFFFA80).w,a0
000027E0 43F8 FA00                  		lea	($FFFFFA00).w,a1
000027E4 1038 F626                  		move.b	($FFFFF626).w,d0
000027E8 D0C0                       		adda.w	d0,a0
000027EA D2C0                       		adda.w	d0,a1
000027EC 1038 F627                  		move.b	($FFFFF627).w,d0
000027F0                            
000027F0                            loc_1F44:
000027F0 6100                       		bsr.s	Pal_DecColor2
000027F2 51C8 FFFC                  		dbf	d0,loc_1F44
000027F6                            
000027F6                            locret_1F4A:
000027F6 4E75                       		rts	
000027F8                            ; End of function Pal_WhiteToBlack
000027F8                            
000027F8                            
000027F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000027F8                            
000027F8                            
000027F8                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
000027F8 3419                       		move.w	(a1)+,d2
000027FA 3610                       		move.w	(a0),d3
000027FC B642                       		cmp.w	d2,d3
000027FE 6700                       		beq.s	loc_1F78
00002800 3203                       		move.w	d3,d1
00002802 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00002806 6500                       		bcs.s	loc_1F64
00002808 B242                       		cmp.w	d2,d1
0000280A 6500                       		bcs.s	loc_1F64
0000280C 30C1                       		move.w	d1,(a0)+
0000280E 4E75                       		rts	
00002810                            ; ===========================================================================
00002810                            
00002810                            loc_1F64:				; XREF: Pal_DecColor2
00002810 3203                       		move.w	d3,d1
00002812 0441 0020                  		subi.w	#$20,d1		; decrease green value
00002816 6500                       		bcs.s	loc_1F74
00002818 B242                       		cmp.w	d2,d1
0000281A 6500                       		bcs.s	loc_1F74
0000281C 30C1                       		move.w	d1,(a0)+
0000281E 4E75                       		rts	
00002820                            ; ===========================================================================
00002820                            
00002820                            loc_1F74:				; XREF: loc_1F64
00002820 5558                       		subq.w	#2,(a0)+	; decrease red value
00002822 4E75                       		rts	
00002824                            ; ===========================================================================
00002824                            
00002824                            loc_1F78:				; XREF: Pal_DecColor2
00002824 5448                       		addq.w	#2,a0
00002826 4E75                       		rts	
00002828                            ; End of function Pal_DecColor2
00002828                            
00002828                            ; ---------------------------------------------------------------------------
00002828                            ; Subroutine to	make a white flash when	you enter a special stage
00002828                            ; ---------------------------------------------------------------------------
00002828                            
00002828                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002828                            
00002828                            
00002828                            Pal_MakeFlash:				; XREF: SpecialStage
00002828 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000282E 383C 0015                  		move.w	#$15,d4
00002832                            
00002832                            loc_1F86:
00002832 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00002838 6100 0000                  		bsr.w	DelayProgram
0000283C 6100                       		bsr.s	Pal_ToWhite
0000283E 6100 F684                  		bsr.w	RunPLC_RAM
00002842 51CC FFEE                  		dbf	d4,loc_1F86
00002846 4E75                       		rts	
00002848                            ; End of function Pal_MakeFlash
00002848                            
00002848                            
00002848                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002848                            
00002848                            
00002848                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00002848 7000                       		moveq	#0,d0
0000284A 41F8 FB00                  		lea	($FFFFFB00).w,a0
0000284E 1038 F626                  		move.b	($FFFFF626).w,d0
00002852 D0C0                       		adda.w	d0,a0
00002854 1038 F627                  		move.b	($FFFFF627).w,d0
00002858                            
00002858                            loc_1FAC:
00002858 6100                       		bsr.s	Pal_AddColor2
0000285A 51C8 FFFC                  		dbf	d0,loc_1FAC
0000285E 7000                       		moveq	#0,d0
00002860 41F8 FA80                  		lea	($FFFFFA80).w,a0
00002864 1038 F626                  		move.b	($FFFFF626).w,d0
00002868 D0C0                       		adda.w	d0,a0
0000286A 1038 F627                  		move.b	($FFFFF627).w,d0
0000286E                            
0000286E                            loc_1FC2:
0000286E 6100                       		bsr.s	Pal_AddColor2
00002870 51C8 FFFC                  		dbf	d0,loc_1FC2
00002874 4E75                       		rts	
00002876                            ; End of function Pal_ToWhite
00002876                            
00002876                            
00002876                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002876                            
00002876                            
00002876                            Pal_AddColor2:				; XREF: Pal_ToWhite
00002876 3410                       		move.w	(a0),d2
00002878 0C42 0EEE                  		cmpi.w	#$EEE,d2
0000287C 6700                       		beq.s	loc_2006
0000287E 3202                       		move.w	d2,d1
00002880 0241 000E                  		andi.w	#$E,d1
00002884 0C41 000E                  		cmpi.w	#$E,d1
00002888 6700                       		beq.s	loc_1FE2
0000288A 5458                       		addq.w	#2,(a0)+	; increase red value
0000288C 4E75                       		rts	
0000288E                            ; ===========================================================================
0000288E                            
0000288E                            loc_1FE2:				; XREF: Pal_AddColor2
0000288E 3202                       		move.w	d2,d1
00002890 0241 00E0                  		andi.w	#$E0,d1
00002894 0C41 00E0                  		cmpi.w	#$E0,d1
00002898 6700                       		beq.s	loc_1FF4
0000289A 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
0000289E 4E75                       		rts	
000028A0                            ; ===========================================================================
000028A0                            
000028A0                            loc_1FF4:				; XREF: loc_1FE2
000028A0 3202                       		move.w	d2,d1
000028A2 0241 0E00                  		andi.w	#$E00,d1
000028A6 0C41 0E00                  		cmpi.w	#$E00,d1
000028AA 6700                       		beq.s	loc_2006
000028AC 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
000028B0 4E75                       		rts	
000028B2                            ; ===========================================================================
000028B2                            
000028B2                            loc_2006:				; XREF: Pal_AddColor2
000028B2 5448                       		addq.w	#2,a0
000028B4 4E75                       		rts	
000028B6                            ; End of function Pal_AddColor2
000028B6                            
000028B6                            ; ---------------------------------------------------------------------------
000028B6                            ; Pallet cycling routine - Sega	logo
000028B6                            ; ---------------------------------------------------------------------------
000028B6                            
000028B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000028B6                            
000028B6                            
000028B6                            PalCycle_Sega:				; XREF: SegaScreen
000028B6 4A38 F635                  		tst.b	($FFFFF635).w
000028BA 6600                       		bne.s	loc_206A
000028BC 43F8 FB20                  		lea	($FFFFFB20).w,a1
000028C0 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
000028C6 7205                       		moveq	#5,d1
000028C8 3038 F632                  		move.w	($FFFFF632).w,d0
000028CC                            
000028CC                            loc_2020:
000028CC 6A00                       		bpl.s	loc_202A
000028CE 5448                       		addq.w	#2,a0
000028D0 5341                       		subq.w	#1,d1
000028D2 5440                       		addq.w	#2,d0
000028D4 60F6                       		bra.s	loc_2020
000028D6                            ; ===========================================================================
000028D6                            
000028D6                            loc_202A:				; XREF: PalCycle_Sega
000028D6 3400                       		move.w	d0,d2
000028D8 0242 001E                  		andi.w	#$1E,d2
000028DC 6600                       		bne.s	loc_2034
000028DE 5440                       		addq.w	#2,d0
000028E0                            
000028E0                            loc_2034:
000028E0 0C40 0060                  		cmpi.w	#$60,d0
000028E4 6400                       		bcc.s	loc_203E
000028E6 3398 0000                  		move.w	(a0)+,(a1,d0.w)
000028EA                            
000028EA                            loc_203E:
000028EA 5440                       		addq.w	#2,d0
000028EC 51C9 FFE8                  		dbf	d1,loc_202A
000028F0 3038 F632                  		move.w	($FFFFF632).w,d0
000028F4 5440                       		addq.w	#2,d0
000028F6 3400                       		move.w	d0,d2
000028F8 0242 001E                  		andi.w	#$1E,d2
000028FC 6600                       		bne.s	loc_2054
000028FE 5440                       		addq.w	#2,d0
00002900                            
00002900                            loc_2054:
00002900 0C40 0064                  		cmpi.w	#$64,d0
00002904 6D00                       		blt.s	loc_2062
00002906 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
0000290C 70F4                       		moveq	#-$C,d0
0000290E                            
0000290E                            loc_2062:
0000290E 31C0 F632                  		move.w	d0,($FFFFF632).w
00002912 7001                       		moveq	#1,d0
00002914 4E75                       		rts	
00002916                            ; ===========================================================================
00002916                            
00002916                            loc_206A:				; XREF: loc_202A
00002916 5338 F634                  		subq.b	#1,($FFFFF634).w
0000291A 6A00                       		bpl.s	loc_20BC
0000291C 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002922 3038 F632                  		move.w	($FFFFF632).w,d0
00002926 0640 000C                  		addi.w	#$C,d0
0000292A 0C40 0030                  		cmpi.w	#$30,d0
0000292E 6500                       		bcs.s	loc_2088
00002930 7000                       		moveq	#0,d0
00002932 4E75                       		rts	
00002934                            ; ===========================================================================
00002934                            
00002934                            loc_2088:				; XREF: loc_206A
00002934 31C0 F632                  		move.w	d0,($FFFFF632).w
00002938 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
0000293E 41F0 0000                  		lea	(a0,d0.w),a0
00002942 43F8 FB04                  		lea	($FFFFFB04).w,a1
00002946 22D8                       		move.l	(a0)+,(a1)+
00002948 22D8                       		move.l	(a0)+,(a1)+
0000294A 3298                       		move.w	(a0)+,(a1)
0000294C 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002950 7000                       		moveq	#0,d0
00002952 722C                       		moveq	#$2C,d1
00002954                            
00002954                            loc_20A8:
00002954 3400                       		move.w	d0,d2
00002956 0242 001E                  		andi.w	#$1E,d2
0000295A 6600                       		bne.s	loc_20B2
0000295C 5440                       		addq.w	#2,d0
0000295E                            
0000295E                            loc_20B2:
0000295E 3390 0000                  		move.w	(a0),(a1,d0.w)
00002962 5440                       		addq.w	#2,d0
00002964 51C9 FFEE                  		dbf	d1,loc_20A8
00002968                            
00002968                            loc_20BC:
00002968 7001                       		moveq	#1,d0
0000296A 4E75                       		rts	
0000296C                            ; End of function PalCycle_Sega
0000296C                            
0000296C                            ; ===========================================================================
0000296C                            
0000296C                            Pal_Sega1:	incbin	pallet\sega1.bin
00002978                            Pal_Sega2:	incbin	pallet\sega2.bin
000029A8                            
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            ; Subroutines to load pallets
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            
000029A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A8                            
000029A8                            
000029A8                            PalLoad1:
000029A8 43F9 0000 0000             		lea	(PalPointers).l,a1
000029AE E748                       		lsl.w	#3,d0
000029B0 D2C0                       		adda.w	d0,a1
000029B2 2459                       		movea.l	(a1)+,a2
000029B4 3659                       		movea.w	(a1)+,a3
000029B6 D6FC 0080                  		adda.w	#$80,a3
000029BA 3E19                       		move.w	(a1)+,d7
000029BC                            
000029BC                            loc_2110:
000029BC 26DA                       		move.l	(a2)+,(a3)+
000029BE 51CF FFFC                  		dbf	d7,loc_2110
000029C2 4E75                       		rts	
000029C4                            ; End of function PalLoad1
000029C4                            
000029C4                            
000029C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029C4                            
000029C4                            
000029C4                            PalLoad2:
000029C4 43F9 0000 0000             		lea	(PalPointers).l,a1
000029CA E748                       		lsl.w	#3,d0
000029CC D2C0                       		adda.w	d0,a1
000029CE 2459                       		movea.l	(a1)+,a2
000029D0 3659                       		movea.w	(a1)+,a3
000029D2 3E19                       		move.w	(a1)+,d7
000029D4                            
000029D4                            loc_2128:
000029D4 26DA                       		move.l	(a2)+,(a3)+
000029D6 51CF FFFC                  		dbf	d7,loc_2128
000029DA 4E75                       		rts	
000029DC                            ; End of function PalLoad2
000029DC                            
000029DC                            ; ---------------------------------------------------------------------------
000029DC                            ; Underwater pallet loading subroutine
000029DC                            ; ---------------------------------------------------------------------------
000029DC                            
000029DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029DC                            
000029DC                            
000029DC                            PalLoad3_Water:
000029DC 43F9 0000 0000             		lea	(PalPointers).l,a1
000029E2 E748                       		lsl.w	#3,d0
000029E4 D2C0                       		adda.w	d0,a1
000029E6 2459                       		movea.l	(a1)+,a2
000029E8 3659                       		movea.w	(a1)+,a3
000029EA 96FC 0080                  		suba.w	#$80,a3
000029EE 3E19                       		move.w	(a1)+,d7
000029F0                            
000029F0                            loc_2144:
000029F0 26DA                       		move.l	(a2)+,(a3)+
000029F2 51CF FFFC                  		dbf	d7,loc_2144
000029F6 4E75                       		rts	
000029F8                            ; End of function PalLoad3_Water
000029F8                            
000029F8                            
000029F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029F8                            
000029F8                            
000029F8                            PalLoad4_Water:
000029F8 43F9 0000 0000             		lea	(PalPointers).l,a1
000029FE E748                       		lsl.w	#3,d0
00002A00 D2C0                       		adda.w	d0,a1
00002A02 2459                       		movea.l	(a1)+,a2
00002A04 3659                       		movea.w	(a1)+,a3
00002A06 96FC 0100                  		suba.w	#$100,a3
00002A0A 3E19                       		move.w	(a1)+,d7
00002A0C                            
00002A0C                            loc_2160:
00002A0C 26DA                       		move.l	(a2)+,(a3)+
00002A0E 51CF FFFC                  		dbf	d7,loc_2160
00002A12 4E75                       		rts	
00002A14                            ; End of function PalLoad4_Water
00002A14                            
00002A14                            ; ===========================================================================
00002A14                            ; ---------------------------------------------------------------------------
00002A14                            ; Pallet pointers
00002A14                            ; ---------------------------------------------------------------------------
00002A14                            PalPointers:
00002A14                            	include "_inc\Pallet pointers.asm"
00002A14                            ; ---------------------------------------------------------------------------
00002A14                            ; Pallet pointers
00002A14                            ; ---------------------------------------------------------------------------
00002A14 0000 0000                  	dc.l Pal_SegaBG		; pallet address
00002A18 FB00                       	dc.w $FB00		; RAM address
00002A1A 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002A1C 0000 0000                  	dc.l Pal_Title
00002A20 FB00                       	dc.w $FB00
00002A22 001F                       	dc.w $1F
00002A24 0000 0000                  	dc.l Pal_LevelSel
00002A28 FB00                       	dc.w $FB00
00002A2A 001F                       	dc.w $1F
00002A2C 0000 0000                  	dc.l Pal_Sonic
00002A30 FB00                       	dc.w $FB00
00002A32 0007                       	dc.w 7
00002A34 0000 0000                  	dc.l Pal_GHZ
00002A38 FB20                       	dc.w $FB20
00002A3A 0017                       	dc.w $17
00002A3C 0000 0000                  	dc.l Pal_LZ
00002A40 FB20                       	dc.w $FB20
00002A42 0017                       	dc.w $17
00002A44 0000 0000                  	dc.l Pal_MZ
00002A48 FB20                       	dc.w $FB20
00002A4A 0017                       	dc.w $17
00002A4C 0000 0000                  	dc.l Pal_SLZ
00002A50 FB20                       	dc.w $FB20
00002A52 0017                       	dc.w $17
00002A54 0000 0000                  	dc.l Pal_SYZ
00002A58 FB20                       	dc.w $FB20
00002A5A 0017                       	dc.w $17
00002A5C 0000 0000                  	dc.l Pal_SBZ1
00002A60 FB20                       	dc.w $FB20
00002A62 0017                       	dc.w $17
00002A64 0000 0000                  	dc.l Pal_Special
00002A68 FB00                       	dc.w $FB00
00002A6A 001F                       	dc.w $1F
00002A6C 0000 0000                  	dc.l Pal_LZWater
00002A70 FB00                       	dc.w $FB00
00002A72 001F                       	dc.w $1F
00002A74 0000 0000                  	dc.l Pal_SBZ3
00002A78 FB20                       	dc.w $FB20
00002A7A 0017                       	dc.w $17
00002A7C 0000 0000                  	dc.l Pal_SBZ3Water
00002A80 FB00                       	dc.w $FB00
00002A82 001F                       	dc.w $1F
00002A84 0000 0000                  	dc.l Pal_SBZ2
00002A88 FB20                       	dc.w $FB20
00002A8A 0017                       	dc.w $17
00002A8C 0000 0000                  	dc.l Pal_LZSonWater
00002A90 FB00                       	dc.w $FB00
00002A92 0007                       	dc.w 7
00002A94 0000 0000                  	dc.l Pal_SBZ3SonWat
00002A98 FB00                       	dc.w $FB00
00002A9A 0007                       	dc.w 7
00002A9C 0000 0000                  	dc.l Pal_SpeResult
00002AA0 FB00                       	dc.w $FB00
00002AA2 001F                       	dc.w $1F
00002AA4 0000 0000                  	dc.l Pal_SpeContinue
00002AA8 FB00                       	dc.w $FB00
00002AAA 000F                       	dc.w $F
00002AAC 0000 0000                  	dc.l Pal_Ending
00002AB0 FB00                       	dc.w $FB00
00002AB2 001F                       	dc.w $1F
00002AB4 0000 0000                  	dc.l Pal_Idiot
00002AB8 FB20                       	dc.w $FB20
00002ABA 0007                       	dc.w 7
00002ABC 0000 0000                  	dc.l Pal_BHZ
00002AC0 FB20                       	dc.w $FB20
00002AC2 0017                       	dc.w $17
00002AC4 0000 0000                  	dc.l Pal_Gronic
00002AC8 FB00                       	dc.w $FB00
00002ACA 0007                       	dc.w 7
00002ACC 0000 0000                  	dc.l Pal_LZGroWater
00002AD0 FB00                       	dc.w $FB00
00002AD2 0007                       	dc.w 7
00002AD4 0000 0000                  	dc.l Pal_SBZ3GroWat
00002AD8 FB00                       	dc.w $FB00
00002ADA 0007                       	dc.w 7
00002ADC 0000 0000                  	dc.l Pal_Anakama
00002AE0 FB00                       	dc.w $FB00
00002AE2 0007                       	dc.w 7
00002AE2 0007                       	dc.w 7
00002AE4                            
00002AE4                            ; ---------------------------------------------------------------------------
00002AE4                            ; Pallet data
00002AE4                            ; ---------------------------------------------------------------------------
00002AE4                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002B64                            Pal_Title:	incbin	pallet\title.bin
00002BE4                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002C64                            Pal_Sonic:	incbin	pallet\sonic.bin
00002C84                            Pal_GHZ:	incbin	pallet\ghz.bin
00002CE4                            Pal_LZ:		incbin	pallet\lz.bin
00002D44                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
00002DC4                            Pal_MZ:		incbin	pallet\mz.bin
00002E24                            Pal_SLZ:	incbin	pallet\slz.bin
00002E84                            Pal_SYZ:	incbin	pallet\syz.bin
00002EE4                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002F44                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
00002FA4                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00003024                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
00003084                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00003104                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00003124                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00003144                            Pal_BHZ:	incbin	pallet\bhz.bin
000031A4                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
00003224                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00003264                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000032E4                            Pal_Idiot:	incbin	pallet\idiot.bin	; idiot pallet
00003304                            Pal_Gronic:	incbin	pallet\gronic.bin	; gronic char
00003324                            Pal_LZGroWater:	incbin	pallet\groniclzuw.bin	; Gronic (underwater in SBZ act 3) pallet
00003344                            Pal_SBZ3GroWat:	incbin	pallet\gronicsbz3uw.bin	; Gronic (underwater in SBZ act 3) pallet
00003364                            Pal_Anakama:incbin	pallet\anakama.bin	; anakama char
000033E4                            
000033E4                            ; ---------------------------------------------------------------------------
000033E4                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000033E4                            ; ---------------------------------------------------------------------------
000033E4                            
000033E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033E4                            
000033E4                            VSync:
000033E4                            DelayProgram:				; XREF: PauseGame
000033E4 46FC 2300                  		move	#$2300,sr
000033E8                            
000033E8                            loc_29AC:
000033E8 4A38 F62A                  		tst.b	($FFFFF62A).w
000033EC 66FA                       		bne.s	loc_29AC
000033EE 4E75                       		rts	
000033F0                            ; End of function DelayProgram
000033F0                            
000033F0                            ; ---------------------------------------------------------------------------
000033F0                            ; Subroutine to	generate a pseudo-random number	in d0
000033F0                            ; ---------------------------------------------------------------------------
000033F0                            
000033F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000033F0                            
000033F0                            CalcRandom: 
000033F0                            RandomNumber:
000033F0 2238 F636                  		move.l	($FFFFF636).w,d1
000033F4 6600                       		bne.s	loc_29C0
000033F6 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000033FC                            
000033FC                            loc_29C0:
000033FC 2001                       		move.l	d1,d0
000033FE E581                       		asl.l	#2,d1
00003400 D280                       		add.l	d0,d1
00003402 E781                       		asl.l	#3,d1
00003404 D280                       		add.l	d0,d1
00003406 3001                       		move.w	d1,d0
00003408 4841                       		swap	d1
0000340A D041                       		add.w	d1,d0
0000340C 3200                       		move.w	d0,d1
0000340E 4841                       		swap	d1
00003410 21C1 F636                  		move.l	d1,($FFFFF636).w
00003414 4E75                       		rts	
00003416                            ; End of function RandomNumber
00003416                            
00003416                            
00003416                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003416                            
00003416                            CalcSinCos:
00003416                            CalcSine:				; XREF: SS_BGAnimate; et al
00003416 0240 00FF                  		andi.w	#$FF,d0
0000341A D040                       		add.w	d0,d0
0000341C 0640 0080                  		addi.w	#$80,d0
00003420 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
00003424 0440 0080                  		subi.w	#$80,d0
00003428 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
0000342C 4E75                       		rts	
0000342E                            ; End of function CalcSine
0000342E                            
0000342E                            ; ===========================================================================
0000342E                            
0000342E                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
000036AE                            
000036AE                            ; ===========================================================================
000036AE 48E7 6000                  		movem.l	d1-d2,-(sp)
000036B2 3200                       		move.w	d0,d1
000036B4 4841                       		swap	d1
000036B6 7000                       		moveq	#0,d0
000036B8 3200                       		move.w	d0,d1
000036BA 7407                       		moveq	#7,d2
000036BC                            
000036BC                            loc_2C80:
000036BC E599                       		rol.l	#2,d1
000036BE D040                       		add.w	d0,d0
000036C0 5240                       		addq.w	#1,d0
000036C2 9240                       		sub.w	d0,d1
000036C4 6400                       		bcc.s	loc_2C9A
000036C6 D240                       		add.w	d0,d1
000036C8 5340                       		subq.w	#1,d0
000036CA 51CA FFF0                  		dbf	d2,loc_2C80
000036CE E248                       		lsr.w	#1,d0
000036D0 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036D4 4E75                       		rts	
000036D6                            ; ===========================================================================
000036D6                            
000036D6                            loc_2C9A:
000036D6 5240                       		addq.w	#1,d0
000036D8 51CA FFE2                  		dbf	d2,loc_2C80
000036DC E248                       		lsr.w	#1,d0
000036DE 4CDF 0006                  		movem.l	(sp)+,d1-d2
000036E2 4E75                       		rts	
000036E4                            
000036E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000036E4                            
000036E4                            
000036E4                            CalcAngle:
000036E4 48E7 1800                  		movem.l	d3-d4,-(sp)
000036E8 7600                       		moveq	#0,d3
000036EA 7800                       		moveq	#0,d4
000036EC 3601                       		move.w	d1,d3
000036EE 3802                       		move.w	d2,d4
000036F0 8843                       		or.w	d3,d4
000036F2 6700                       		beq.s	loc_2D04
000036F4 3802                       		move.w	d2,d4
000036F6 4A43                       		tst.w	d3
000036F8 6A00 0000                  		bpl.w	loc_2CC2
000036FC 4443                       		neg.w	d3
000036FE                            
000036FE                            loc_2CC2:
000036FE 4A44                       		tst.w	d4
00003700 6A00 0000                  		bpl.w	loc_2CCA
00003704 4444                       		neg.w	d4
00003706                            
00003706                            loc_2CCA:
00003706 B843                       		cmp.w	d3,d4
00003708 6400 0000                  		bcc.w	loc_2CDC
0000370C E18C                       		lsl.l	#8,d4
0000370E 88C3                       		divu.w	d3,d4
00003710 7000                       		moveq	#0,d0
00003712 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00003716 6000                       		bra.s	loc_2CE6
00003718                            ; ===========================================================================
00003718                            
00003718                            loc_2CDC:				; XREF: CalcAngle
00003718 E18B                       		lsl.l	#8,d3
0000371A 86C4                       		divu.w	d4,d3
0000371C 7040                       		moveq	#$40,d0
0000371E 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00003722                            
00003722                            loc_2CE6:
00003722 4A41                       		tst.w	d1
00003724 6A00 0000                  		bpl.w	loc_2CF2
00003728 4440                       		neg.w	d0
0000372A 0640 0080                  		addi.w	#$80,d0
0000372E                            
0000372E                            loc_2CF2:
0000372E 4A42                       		tst.w	d2
00003730 6A00 0000                  		bpl.w	loc_2CFE
00003734 4440                       		neg.w	d0
00003736 0640 0100                  		addi.w	#$100,d0
0000373A                            
0000373A                            loc_2CFE:
0000373A 4CDF 0018                  		movem.l	(sp)+,d3-d4
0000373E 4E75                       		rts	
00003740                            ; ===========================================================================
00003740                            
00003740                            loc_2D04:				; XREF: CalcAngle
00003740 303C 0040                  		move.w	#$40,d0
00003744 4CDF 0018                  		movem.l	(sp)+,d3-d4
00003748 4E75                       		rts	
0000374A                            ; End of function CalcAngle
0000374A                            
0000374A                            ; ===========================================================================
0000374A                            
0000374A                            Angle_Data:	incbin	misc\angles.bin
0000384C                            
0000384C                            ; ===========================================================================
0000384C                            
0000384C                            ; ---------------------------------------------------------------------------
0000384C                            ; Sega screen
0000384C                            ; ---------------------------------------------------------------------------
0000384C                            
0000384C                            SegaScreen:				; XREF: GameModeArray
0000384C 103C 00E4                  		move.b	#$E4,d0
00003850 6100 E422                  		bsr.w	PlaySound_Special ; stop music
00003854 6100 E660                  		bsr.w	ClearPLC
00003858 6100 EEA4                  		bsr.w	Pal_FadeFrom
0000385C 4DF9 00C0 0004             		lea	($C00004).l,a6
00003862 3CBC 8004                  		move.w	#$8004,(a6)
00003866 3CBC 8230                  		move.w	#$8230,(a6)
0000386A 3CBC 8407                  		move.w	#$8407,(a6)
0000386E 3CBC 8700                  		move.w	#$8700,(a6)
00003872 3CBC 8B00                  		move.w	#$8B00,(a6)
00003876 3CBC 8C81                  		move.w	#$8C81,(a6)
0000387A 4238 F64E                  		clr.b	($FFFFF64E).w
0000387E 46FC 2700                  		move	#$2700,sr
00003882 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003886 0200 00BF                  		andi.b	#$BF,d0
0000388A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003890 6100 E308                  		bsr.w	ClearScreen
00003894 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
0000389E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
000038A4 6100 E472                  		bsr.w	NemDec
000038A8 43F9 00FF 0000             		lea	($FF0000).l,a1
000038AE 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
000038B4 303C 0000                  		move.w	#0,d0
000038B8 6100 E73C                  		bsr.w	EniDec
000038BC 43F9 00FF 0000             		lea	($FF0000).l,a1
000038C2 203C 6510 0003             		move.l	#$65100003,d0
000038C8 7217                       		moveq	#$17,d1
000038CA 7407                       		moveq	#7,d2
000038CC 6100 E42A                  		bsr.w	ShowVDPGraphics
000038D0 43F9 00FF 0180             		lea	($FF0180).l,a1
000038D6 203C 4000 0003             		move.l	#$40000003,d0
000038DC 7227                       		moveq	#$27,d1
000038DE 741B                       		moveq	#$1B,d2
000038E0 6100 E416                  		bsr.w	ShowVDPGraphics
000038E4 7000                       		moveq	#0,d0
000038E6 6100 F0DC                  		bsr.w	PalLoad2	; load Sega logo pallet
000038EA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
000038F0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
000038F6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
000038FC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00003902 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003906 0000 0040                  		ori.b	#$40,d0
0000390A 33C0 00C0 0004             		move.w	d0,($C00004).l
00003910                            
00003910                            Sega_WaitPallet:
00003910 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00003916 6100 FACC                  		bsr.w	DelayProgram
0000391A 6100 EF9A                  		bsr.w	PalCycle_Sega
0000391E 66F0                       		bne.s	Sega_WaitPallet
00003920                            
00003920 103C 00E1                  		move.b	#$E1,d0
00003924 6100 E34E                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00003928 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
0000392E 6100 FAB4                  		bsr.w	DelayProgram
00003932 31FC 01C2 F614                             move.w  #$1E+7*60,($FFFFF614).w         ; was $1E
00003938                            
00003938                            Sega_WaitEnd:
00003938 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
0000393E 6100 FAA4                  		bsr.w	DelayProgram
00003942 4A78 F614                  		tst.w	($FFFFF614).w
00003946 6700                       		beq.s	Sega_GotoTitle
00003948 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
0000394E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00003950                            
00003950                            Sega_GotoTitle:
00003950 11FC 0024 F600             		move.b	#$24,($FFFFF600).w ; go to title screen
00003956 4E75                       		rts	
00003958                            ; ===========================================================================
00003958                            
00003958                            ; ---------------------------------------------------------------------------
00003958                            ; Title	screen
00003958                            ; ---------------------------------------------------------------------------
00003958                            
00003958                            TitleScreen:				; XREF: GameModeArray
00003958 103C 00E4                  		move.b	#$E4,d0
0000395C 6100 E316                  		bsr.w	PlaySound_Special ; stop music
00003960 6100 ED9C                  		bsr.w	Pal_FadeFrom
00003964 6100 E550                  		bsr.w	ClearPLC
00003968 46FC 2700                  		move	#$2700,sr
0000396C 6100 E2BA                  		bsr.w	SoundDriverLoad
00003970 4DF9 00C0 0004             		lea	($C00004).l,a6
00003976 3CBC 8004                  		move.w	#$8004,(a6)
0000397A 3CBC 8230                  		move.w	#$8230,(a6)
0000397E 3CBC 8407                  		move.w	#$8407,(a6)
00003982 3CBC 9001                  		move.w	#$9001,(a6)
00003986 3CBC 9200                  		move.w	#$9200,(a6)
0000398A 3CBC 8B03                  		move.w	#$8B03,(a6)
0000398E 3CBC 8720                  		move.w	#$8720,(a6)
00003992 4238 F64E                  		clr.b	($FFFFF64E).w
00003996 6100 E202                  		bsr.w	ClearScreen
0000399A 43F8 D000                  		lea	($FFFFD000).w,a1
0000399E 7000                       		moveq	#0,d0
000039A0 323C 07FF                  		move.w	#$7FF,d1
000039A4                            
000039A4                            Title_ClrObjRam:
000039A4 22C0                       		move.l	d0,(a1)+
000039A6 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
000039AA                            
000039AA                            ; gomer
000039AA 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000039B4 41F9 0000 0000             		lea	(Nem_Gomer).l,a0 ; load Gomer patterns
000039BA 6100 E35C                  		bsr.w	NemDec
000039BE 7003                       		moveq	#3,d0		; load Sonic's pallet
000039C0 6100 EFE6                  		bsr.w	PalLoad1
000039C4                            
000039C4 43F9 00FF 0000             		lea	($FF0000).l,a1
000039CA 41F9 0000 0000             		lea	(Eni_Gomer).l,a0 ; load mappings for	Gomer credits
000039D0 303C 0000                  		move.w	#0,d0
000039D4 6100 E620                  		bsr.w	EniDec
000039D8                            ; help how the fuck can i do this IT SHOWS NOTHING
000039D8 6100 EC7A                  		bsr.w	Pal_FadeTo
000039DC 43F9 00FF 0000             		lea	($FF0000).l,a1
000039E2 203C 4000 0003             		move.l	#$40000003,d0
000039E8 7227                       		moveq	#$27,d1
000039EA 741B                       		moveq	#$1B,d2
000039EC 6100 E30A                  		bsr.w	ShowVDPGraphics
000039F0                            
000039F0                            
000039F0 43F9 00FF 0000             		lea	($FF0000).l,a1
000039F6 203C 6000 0003             		move.l	#$60000003,d0
000039FC 7227                       		moveq	#$27,d1
000039FE 741B                       		moveq	#$1B,d2
00003A00                            
00003A00 6100 ECFC                  		bsr.w	Pal_FadeFrom
00003A04                            
00003A04                            
00003A04 6100 E194                  		bsr.w	ClearScreen
00003A08 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003A12 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00003A18 6100 E2FE                  		bsr.w	NemDec
00003A1C 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00003A26 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00003A2C 6100 E2EA                  		bsr.w	NemDec
00003A30 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A36 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00003A3C 303C 0000                  		move.w	#0,d0
00003A40 6100 E5B4                  		bsr.w	EniDec
00003A44 43F9 00FF 0000             		lea	($FF0000).l,a1
00003A4A 203C 4000 0003             		move.l	#$40000003,d0
00003A50 7227                       		moveq	#$27,d1
00003A52 741B                       		moveq	#$1B,d2
00003A54 6100 E2A2                  		bsr.w	ShowVDPGraphics
00003A58 6100 ECA4                  		bsr.w	Pal_FadeFrom
00003A5C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00003A60 7000                       		moveq	#0,d0
00003A62 323C 001F                  		move.w	#$1F,d1
00003A66                            
00003A66                            
00003A66                            Title_ClrPallet:
00003A66 22C0                       		move.l	d0,(a1)+
00003A68 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00003A6C                            
00003A6C 7003                       		moveq	#3,d0		; load Sonic's pallet
00003A6E 6100 EF38                  		bsr.w	PalLoad1
00003A72 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00003A78 4EB9 0000 0000             		jsr	ObjectsLoad
00003A7E 4EB9 0000 0000             		jsr	BuildSprites
00003A84 6100 EBCE                  		bsr.w	Pal_FadeTo
00003A88 46FC 2700                  		move	#$2700,sr
00003A8C 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00003A96 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00003A9C 6100 E27A                  		bsr.w	NemDec
00003AA0 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003AAA 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
00003AB0 6100 E266                  		bsr.w	NemDec
00003AB4 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
00003ABE 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003AC4 6100 E252                  		bsr.w	NemDec
00003AC8 4DF9 00C0 0000             		lea	($C00000).l,a6
00003ACE 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003AD6 4BF9 0000 0D60             		lea	(Art_Text).l,a5
00003ADC 323C 1147                  		move.w	#(Art_Text_end-Art_Text/4)-1,d1
00003AE0                            
00003AE0                            Title_LoadText:
00003AE0 2C9D                       		move.l	(a5)+,(a6)
00003AE2 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003AE6                            
00003AE6 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
00003AEC 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003AF2 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003AF8 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
00003AFE 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003B04 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003B0A 6100 0000                  		bsr.w	LevelSizeLoad
00003B0E 6100 0000                  		bsr.w	DeformBgLayer
00003B12                            
00003B12 43F8 B000                  		lea	($FFFFB000).w,a1
00003B16 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
00003B1C 303C 0000                  		move.w	#0,d0
00003B20 6100 E4D4                  		bsr.w	EniDec
00003B24 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003B2A 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B30 6100 E642                  		bsr.w	KosDec
00003B34 6100 0000                  		bsr.w	LevelLayoutLoad
00003B38                            
00003B38 46FC 2700                  		move	#$2700,sr
00003B3C 6100 E05C                  		bsr.w	ClearScreen
00003B40 4BF9 00C0 0004             		lea	($C00004).l,a5
00003B46 4DF9 00C0 0000             		lea	($C00000).l,a6
00003B4C 47F8 F708                  		lea	($FFFFF708).w,a3
00003B50 49F8 A440                  		lea	($FFFFA440).w,a4
00003B54 343C 6000                  		move.w	#$6000,d2
00003B58 6100 0000                  		bsr.w	LoadTilesFromStart2
00003B5C 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B62 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
00003B68 303C 0000                  		move.w	#0,d0
00003B6C 6100 E488                  		bsr.w	EniDec
00003B70 43F9 00FF 0000             		lea	($FF0000).l,a1
00003B76 203C 4206 0003             		move.l	#$42060003,d0
00003B7C 7221                       		moveq	#$21,d1
00003B7E 7415                       		moveq	#$15,d2
00003B80 6100 E176                  		bsr.w	ShowVDPGraphics
00003B84 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00003B8E 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
00003B94 6100 E182                  		bsr.w	NemDec
00003B98 7001                       		moveq	#1,d0		; load title screen pallet
00003B9A 6100 EE0C                  		bsr.w	PalLoad1
00003B9E 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003BA2 6100 E0D0                  		bsr.w	PlaySound_Special
00003BA6 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
00003BAC 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003BB2 43F8 D080                  		lea	($FFFFD080).w,a1
00003BB6 7000                       		moveq	#0,d0
00003BB8 323C 000F                  		move.w	#$F,d1
00003BBC                            
00003BBC                            Title_ClrObjRam2:
00003BBC 22C0                       		move.l	d0,(a1)+
00003BBE 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003BC2                            
00003BC2 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
00003BC8 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003BCE 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003BD4 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00003BDA 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003BE0 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003BE6 4EB9 0000 0000             		jsr	ObjectsLoad
00003BEC 6100 0000                  		bsr.w	DeformBgLayer
00003BF0 4EB9 0000 0000             		jsr	BuildSprites
00003BF6 7000                       		moveq	#0,d0
00003BF8 6100 E290                  		bsr.w	LoadPLC2
00003BFC 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003C02 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
00003C08 3038 F60C                  		move.w	($FFFFF60C).w,d0
00003C0C 0000 0040                  		ori.b	#$40,d0
00003C10 33C0 00C0 0004             		move.w	d0,($C00004).l
00003C16 6100 EA3C                  		bsr.w	Pal_FadeTo
00003C1A                            
00003C1A                            loc_317C:
00003C1A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003C20 6100 F7C2                  		bsr.w	DelayProgram
00003C24 4EB9 0000 0000             		jsr	ObjectsLoad
00003C2A 6100 0000                  		bsr.w	DeformBgLayer
00003C2E 4EB9 0000 0000             		jsr	BuildSprites
00003C34 6100 E608                  		bsr.w	PalCycle_Title
00003C38 6100 E28A                  		bsr.w	RunPLC_RAM
00003C3C 3038 D008                  		move.w	($FFFFD008).w,d0
00003C40 5440                       		addq.w	#2,d0
00003C42 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
00003C46 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
00003C4A 6500                       		bcs.s	Title_ChkRegion	; if not, branch
00003C4C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003C52 4E75                       		rts	
00003C54                            ; ===========================================================================
00003C54                            
00003C54                            Title_ChkRegion:
00003C54 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
00003C58 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
00003C5A 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
00003C60 6000                       		bra.s	Title_EnterCheat
00003C62                            ; ===========================================================================
00003C62                            
00003C62                            Title_RegionJ:				; XREF: Title_ChkRegion
00003C62 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
00003C68                            
00003C68                            Title_EnterCheat:			; XREF: Title_ChkRegion
00003C68 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
00003C6C D0C0                       		adda.w	d0,a0
00003C6E 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
00003C72 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
00003C76 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
00003C78 6600                       		bne.s	loc_3210	; if not, branch
00003C7A 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
00003C7E 4A00                       		tst.b	d0
00003C80 6600                       		bne.s	Title_CountC
00003C82 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
00003C86 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
00003C8A E249                       		lsr.w	#1,d1
00003C8C 0241 0003                  		andi.w	#3,d1
00003C90 6700                       		beq.s	Title_PlayRing
00003C92 4A38 FFF8                  		tst.b	($FFFFFFF8).w
00003C96 6A00                       		bpl.s	Title_PlayRing
00003C98 7201                       		moveq	#1,d1
00003C9A 1181 1001                  		move.b	d1,1(a0,d1.w)
00003C9E                            
00003C9E                            Title_PlayRing:
00003C9E 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003CA4 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003CA8 6100 DFCA                  		bsr.w	PlaySound_Special
00003CAC 6000                       		bra.s	Title_CountC
00003CAE                            ; ===========================================================================
00003CAE                            
00003CAE                            loc_3210:				; XREF: Title_EnterCheat
00003CAE 4A00                       		tst.b	d0
00003CB0 6700                       		beq.s	Title_CountC
00003CB2 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
00003CB8 6700                       		beq.s	Title_CountC
00003CBA 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003CC0                            
00003CC0                            Title_CountC:
00003CC0 1038 F605                  		move.b	($FFFFF605).w,d0
00003CC4 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
00003CC8 6700                       		beq.s	loc_3230	; if not, branch
00003CCA 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003CCE                            
00003CCE                            loc_3230:
00003CCE 4A78 F614                  		tst.w	($FFFFF614).w
00003CD2 6700 0000                  		beq.w	Demo
00003CD6                            		; (temporary until we have an actual options screen)
00003CD6 0838 0005 F605             		btst	#5,	($FFFFF605).w ; check if c pressed
00003CDC 6700                       		beq.s	@notc
00003CDE                            
00003CDE 5238 FFE8                  		add.b	#1,(v_character).w ; sonic/gronic 
00003CE2 0C38 0003 FFE8             		cmpi.b	#3,(v_character).w
00003CE8 6D00                       		blt.s	@notoverflow
00003CEA 11FC 0000 FFE8             		move.b	#0,(v_character).w
00003CF0                            	@notoverflow:
00003CF0 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
00003CF4 6100 DF7E                  		bsr.w	PlaySound_Special
00003CF8                            	@notc:
00003CF8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
00003CFE 6700 FF1A                  		beq.w	loc_317C	; if not, branch
00003D02                            
00003D02                            Title_ChkLevSel:
00003D02 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003D08 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003D0C                            		
00003D0C                            		
00003D0C 7002                       		moveq	#2,d0
00003D0E 6100 ECB4                  		bsr.w	PalLoad2	; load level select pallet
00003D12 43F8 CC00                  		lea	($FFFFCC00).w,a1
00003D16 7000                       		moveq	#0,d0
00003D18 323C 00DF                  		move.w	#$DF,d1
00003D1C                            
00003D1C                            Title_ClrScroll:
00003D1C 22C0                       		move.l	d0,(a1)+
00003D1E 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
00003D22                            
00003D22 21C0 F616                  		move.l	d0,($FFFFF616).w
00003D26 46FC 2700                  		move	#$2700,sr
00003D2A 4DF9 00C0 0000             		lea	($C00000).l,a6
00003D30 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003D3A 323C 03FF                  		move.w	#$3FF,d1
00003D3E                            
00003D3E                            Title_ClrVram:
00003D3E 2C80                       		move.l	d0,(a6)
00003D40 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
00003D44                            
00003D44 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003D48 6700 0000                  		beq.w	GotoOptions	; if not, play level
00003D4C                            
00003D4C 6100 0000                  		bsr.w	LevSelTextLoad
00003D50                            		
00003D50                            		; sound test fix
00003D50 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003D54 31FC 0014 FF82             		move.w	#$14,($FFFFFF82).w
00003D5A                            		
00003D5A 363C C65F                  		move.w	#$C680-$21,d3 ; selected
00003D5E 0C46 0014                  		cmpi.w	#$14,d6
00003D62 6700                       		beq.s	@issndtst
00003D64 363C E65F                  		move.w	#$E680-$21,d3 ; not selected
00003D68                            	@issndtst:
00003D68 6100 0000                  		bsr.w	LevSelSndTest	; refresh text
00003D6C 31C6 FF82                  		move.w	d6,($FFFFFF82).w
00003D70                            		
00003D70 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00003D74 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00003D7C                            		
00003D7C 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
00003D82 6700                       		beq.s	@issndtst2
00003D84                            		
00003D84 43F9 0000 0000             		lea	(Controls_Normal).l,a1 ; control help
00003D8A 6100 0000                  		bsr.w	CStringSlop
00003D8E 6000                       		bra.s	LevelSelect
00003D90                            	@issndtst2:
00003D90 43F9 0000 0000             		lea	(Controls_SND).l,a1
00003D96 6100 0000                  		bsr.w	CStringSlop
00003D9A                            		
00003D9A                            ; ---------------------------------------------------------------------------
00003D9A                            ; Level	Select
00003D9A                            ; ---------------------------------------------------------------------------
00003D9A                            LevelSelect:
00003D9A 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DA0 6100 F642                  		bsr.w	DelayProgram
00003DA4 6100 0000                  		bsr.w	LevSelControls
00003DA8 6100 E11A                  		bsr.w	RunPLC_RAM
00003DAC 4AB8 F680                  		tst.l	($FFFFF680).w
00003DB0 66E8                       		bne.s	LevelSelect
00003DB2 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00003DB8 67E0                       		beq.s	LevelSelect	; if not, branch
00003DBA 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003DBE 0C40 0000                  		cmpi.w	#lswifi,d0		; have you selected item $15 (free wifi)?
00003DC2 6600                       		bne.s	@dont	; if not, dont blow this place up
00003DC4                            			
00003DC4 11FC 00E5 F00B             		move.b	#$E5,($FFFFF00B).w ; YOU ARE AN IDIOT BOOM
00003DCA 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003DD0 6100 F612                  		bsr.w	DelayProgram
00003DD4                            	@dont:
00003DD4 0C40 0000                  		cmpi.w	#lssndtest,d0		; have you selected item $14 (sound test)?
00003DD8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
00003DDA                            		
00003DDA 0238 00A0 F605             		andi.b	#$A0,($FFFFF605).w ; is C or Start pressed?
00003DE0 67B8                       		beq.s	LevelSelect	; if not, branch
00003DE2                            		
00003DE2 0838 0007 F605             		btst	#7,($FFFFF605).w ; was it start?
00003DE8 6600                       		bne.s	LevSel_SEGA ; then go to sega screen
00003DEA                            		
00003DEA 1038 FF84                  		move.b	($FFFFFF84).w,d0
00003DEE 11C0 F00B                  		move.b	d0,($FFFFF00B).w ; PlaySound_Special but faster
00003DF2                            		
00003DF2 4EB9 0000 0000             		jsr		ShowNow_Playing
00003DF8 60A0                       		bra.s	LevelSelect
00003DFA                            ; ===========================================================================
00003DFA                            
00003DFA                            LevSel_SEGA:				; XREF: LevelSelect
00003DFA 11FC 0000 F600             		move.b	#$0,($FFFFF600).w ; set screen	mode to	$0 SEGA
00003E00 4E75                       		rts	
00003E02                            ; ===========================================================================
00003E02                            
00003E02                            LevSel_Ending:				; XREF: LevelSelect
00003E02 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
00003E08 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
00003E0E 4E75                       		rts	
00003E10                            ; ===========================================================================
00003E10                            
00003E10                            LevSel_Credits:				; XREF: LevelSelect
00003E10 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
00003E16 103C 0091                  		move.b	#$91,d0
00003E1A 6100 DE58                  		bsr.w	PlaySound_Special ; play credits music
00003E1E 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003E24 4E75                       		rts	
00003E26                            ; ===========================================================================
00003E26                            
00003E26                            LevSel_Level_SS:			; XREF: LevelSelect
00003E26 D040                       		add.w	d0,d0
00003E28 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003E2C 6B00 FF6C                  		bmi.w	LevelSelect
00003E30 0C40 FFFF                  		cmpi.w	#$FFFF,d0	; check	if level is 0700 (Special Stage)
00003E34 6600                       		bne.s	LevSel_Level	; if not, branch
00003E36 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003E3C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003E40 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003E46 7000                       		moveq	#0,d0
00003E48 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E4C 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E50 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E54 4E75                       		rts	
00003E56                            ; ===========================================================================
00003E56                            
00003E56                            LevSel_Level:				; XREF: LevSel_Level_SS
00003E56 0240 3FFF                  		andi.w	#$3FFF,d0
00003E5A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003E5E                            
00003E5E                            PlayLevel:				; XREF: ROM:00003246j ...
00003E5E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003E64 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003E6A 7000                       		moveq	#0,d0
00003E6C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003E70 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003E74 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003E78 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003E7C 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003E80 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003E84 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
00003E88 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003E8C 103C 00E0                  		move.b	#$E0,d0
00003E90 6100 DDE2                  		bsr.w	PlaySound_Special ; fade out music
00003E94 4E75                       		rts	
00003E96                            ; ===========================================================================
00003E96                            ; ---------------------------------------------------------------------------
00003E96                            ; Level	select - level pointers
00003E96                            ; ---------------------------------------------------------------------------
00003E96                            LSelectPointers:
00003E96 0000                       		dc.w $0000 ; crz
00003E98 0001                       		dc.w $0001
00003E9A 0002                       		dc.w $0002
00003E9C 0100                       		dc.w $0100 ; ilfez
00003E9E 0101                       		dc.w $0101
00003EA0 0102                       		dc.w $0102
00003EA2 0200                       		dc.w $0200 ; mz
00003EA4 0201                       		dc.w $0201
00003EA6 0202                       		dc.w $0202
00003EA8 0300                       		dc.w $0300 ; dgrotz
00003EAA 0301                       		dc.w $0301 
00003EAC 0302                       		dc.w $0302 
00003EAE 0700                       		dc.w $0700 ; the other mz...
00003EB0 0701                       		dc.w $0701 
00003EB2 0702                       		dc.w $0702 
00003EB4 0400                       		dc.w $0400 ; tpfbz
00003EB6 0401                       		dc.w $0401
00003EB8 0402                       		dc.w $0402
00003EBA 0500                       		dc.w $0500 ; zzzzz
00003EBC 0501                       		dc.w $0501 
00003EBE 0103                       		dc.w $0103 
00003EC0 0502                       		dc.w $0502 ; fz
00003EC2 FFFF                       		dc.w $FFFF ; special
00003EC4 8000                       		dc.w $8000 ; sound test
00003EC6                            		even
00003EC6                            ; --------------------------------------
00003EC6                            ; ---------------------------------------------------------------------------
00003EC6                            ; Level	select codes
00003EC6                            ; ---------------------------------------------------------------------------
00003EC6                            LevelSelectCode_J:
00003EC6                            		incbin	misc\ls_jcode.bin
00003ECC                            		even
00003ECC                            
00003ECC                            LevelSelectCode_US:
00003ECC                            		incbin	misc\ls_ucode.bin
00003ED2                            		even
00003ED2                            ; ===========================================================================
00003ED2                            
00003ED2                            ; ---------------------------------------------------------------------------
00003ED2                            ; Demo mode
00003ED2                            ; ---------------------------------------------------------------------------
00003ED2                            
00003ED2                            Demo:					; XREF: TitleScreen
00003ED2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00003ED8                            
00003ED8                            loc_33B6:				; XREF: loc_33E4
00003ED8 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003EDE 6100 F504                  		bsr.w	DelayProgram
00003EE2 6100 0000                  		bsr.w	DeformBgLayer
00003EE6 6100 E32C                  		bsr.w	PalCycle_Load
00003EEA 6100 DFD8                  		bsr.w	RunPLC_RAM
00003EEE 3038 D008                  		move.w	($FFFFD008).w,d0
00003EF2 5440                       		addq.w	#2,d0
00003EF4 31C0 D008                  		move.w	d0,($FFFFD008).w
00003EF8 0C40 1C00                  		cmpi.w	#$1C00,d0
00003EFC 6500                       		bcs.s	loc_33E4
00003EFE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
00003F04 4E75                       		rts	
00003F06                            ; ===========================================================================
00003F06                            
00003F06                            loc_33E4:				; XREF: Demo
00003F06 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00003F0C 6600 FDF4                  		bne.w	Title_ChkLevSel	; if yes, branch
00003F10 4A78 F614                  		tst.w	($FFFFF614).w
00003F14 6600 FFC2                  		bne.w	loc_33B6
00003F18 103C 00E0                  		move.b	#$E0,d0
00003F1C 6100 DD56                  		bsr.w	PlaySound_Special ; fade out music
00003F20 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003F24 0240 0007                  		andi.w	#7,d0
00003F28 D040                       		add.w	d0,d0
00003F2A 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
00003F2E 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003F32 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003F36 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
00003F3C 6500                       		bcs.s	loc_3422	; if yes, branch
00003F3E 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003F44                            
00003F44                            loc_3422:
00003F44 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003F4A 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
00003F50 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003F54 6600                       		bne.s	Demo_Level	; if not, branch
00003F56 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003F5C 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
00003F60 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003F64                            
00003F64                            Demo_Level:
00003F64 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00003F6A 7000                       		moveq	#0,d0
00003F6C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003F70 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003F74 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003F78 4E75                       		rts	
00003F7A                            ; ===========================================================================
00003F7A                            ; ---------------------------------------------------------------------------
00003F7A                            ; Levels used in demos
00003F7A                            ; ---------------------------------------------------------------------------
00003F7A                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003F82                            		even
00003F82                            
00003F82                            ; ---------------------------------------------------------------------------
00003F82                            ; Subroutine to	change what you're selecting in the level select
00003F82                            ; ---------------------------------------------------------------------------
00003F82                            
00003F82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F82                            
00003F82                            
00003F82                            LevSelControls:				; XREF: LevelSelect
00003F82 1238 F605                  		move.b	($FFFFF605).w,d1
00003F86 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003F8A 6600                       		bne.s	LevSel_UpDown	; if yes, branch
00003F8C 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00003F90 6A00 0000                  		bpl.w	LevSel_SndTest	; if time remains, branch
00003F94                            
00003F94                            LevSel_UpDown:
00003F94 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003F9A 1238 F604                  		move.b	($FFFFF604).w,d1
00003F9E 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
00003FA2 6700 0000                  		beq.w	LevSel_SndTest	; if not, branch
00003FA6 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00003FAA 0801 0000                  		btst	#0,d1		; is up	pressed?
00003FAE 6700                       		beq.s	LevSel_Down	; if not, branch
00003FB0 5346                       		subq.w	#1,d6		; move up 1 selection
00003FB2 6400                       		bcc.s	LevSel_Down
00003FB4 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00003FB6                            
00003FB6                            LevSel_Down:
00003FB6 0801 0001                  		btst	#1,d1		; is down pressed?
00003FBA 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003FBC 5246                       		addq.w	#1,d6		; move down 1 selection
00003FBE 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003FC2 6500                       		bcs.s	LevSel_Refresh
00003FC4 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00003FC6 6000                       		bra.s	LevSel_Refresh
00003FC8                            		
00003FC8                            LevSel_LR:
00003FC8 0801 0002                  		btst	#2,d1		; is left pressed?
00003FCC 6700                       		beq.s	LevSel_Right	; if not, branch
00003FCE 0446 0000                  		sub.w	#lsrow2size,d6
00003FD2 64E2                       		bcc.s	LevSel_Down
00003FD4 0646 0000                  		add.w	#lsrow2size,d6	; don't jump
00003FD8                            LevSel_Right:
00003FD8 0801 0003                  		btst	#3,d1		; is right pressed?
00003FDC 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003FDE 0646 0000                  		add.w	#lsrow1size,d6
00003FE2 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00003FE6 6500                       		bcs.s	LevSel_Refresh
00003FE8 0446 0000                  		sub.w	#lsrow1size,d6	; don't jump
00003FEC                            ; ===========================================================================
00003FEC                            LevSel_Refresh:
00003FEC                            		
00003FEC 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00003FF0 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
00003FF4                            		
00003FF4 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
00003FFA 6600                       		bne.s	@exitsndtest
00003FFC                            		
00003FFC 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00004000 43F9 0000 0000             		lea	(Controls_Normal).l,a1
00004006 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
0000400E 6100 0000                  		bsr.w	CStringSlop
00004012                            	@exitsndtest:
00004012                            	
00004012 363C C65F                  		move.w	#$C680-$21,d3
00004016 31C6 FF82                  		move.w	d6,($FFFFFF82).w ; set new selection
0000401A 6100 0000                  		bsr.w	LevSelHighlightCode	; refresh text
0000401E                            		
0000401E 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w 
00004024 6600                       		bne.s	@entersndtest
00004026                            		
00004026 363C C65F                  		move.w	#$C680-$21,d3
0000402A 43F9 0000 0000             		lea	(Controls_SND).l,a1
00004030 2D7C 6D02 0003 0004        		move.l	#lsctrlpos,4(a6)
00004038 6100 0000                  		bsr.w	CStringSlop
0000403C                            	@entersndtest:
0000403C 4E75                       		rts	
0000403E                            		
0000403E                            LevSel_SndTest:				; XREF: LevSelControls
0000403E 1238 F605                  		move.b	($FFFFF605).w,d1
00004042 0201 005C                  		andi.b	#$5C,d1		; is left/right/a/b	pressed?
00004046 6700                       		beq.s	LevSel_NoMove	; if not, branch
00004048 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w ; is item $14 selected?
0000404E 6600 FF78                  		bne.w	LevSel_LR	; if not, branch
00004052                            		
00004052 1038 FF84                  		move.b	($FFFFFF84).w,d0
00004056 0801 0002                  		btst	#2,d1		; is left pressed?
0000405A 6700                       		beq.s	SndTest_Right	; if not, branch
0000405C 5300                       		subq.b	#1,d0		; subtract 1 from sound	test
0000405E                            		; no need the fact it's a byte does the trick
0000405E                            
0000405E                            SndTest_Right:
0000405E 0801 0003                  		btst	#3,d1		; is right pressed?
00004062 6700                       		beq.s	SndTest_A	; if not, branch
00004064 5200                       		addq.b	#1,d0		; add 1	to sound test
00004066                            		; same here
00004066                            		
00004066                            SndTest_A:
00004066 0801 0006                  		btst	#6,d1		; is A pressed?
0000406A 6700                       		beq.s	SndTest_B	; if not, branch
0000406C 5100                       		subq.b	#8,d0		; subtract $10 to sound test
0000406E 5100                       		subq.b	#8,d0
00004070                            		
00004070                            SndTest_B:
00004070 0801 0004                  		btst	#4,d1		; is B pressed?
00004074 6700                       		beq.s	SndTest_Refresh	; if not, branch
00004076 5000                       		addq.b	#8,d0		; add $10 to sound test
00004078 5000                       		addq.b	#8,d0
0000407A                            
0000407A                            SndTest_Refresh:
0000407A 363C C65F                  		move.w	#$C680-$21,d3
0000407E 11C0 FF84                  		move.b	d0,($FFFFFF84).w ; set sound test number
00004082 6000 0000                  		bra.w	LevSelSndTest	; refresh text
00004086                            
00004086                            LevSel_NoMove:
00004086 4E75                       		rts	
00004088                            ; End of function LevSelControls
00004088                            
00004088                            ; ---------------------------------------------------------------------------
00004088                            ; Subroutine to load level select text
00004088                            ; ---------------------------------------------------------------------------
00004088                            
00004088                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004088                            
00004088                            LevSelTextLoad_loop:
00004088 2D44 0004                  		move.l	d4,4(a6)
0000408C 6100 0000                  		bsr.w	LevSel_ChgLine
00004090 0684 0080 0000             		addi.l	#$800000,d4
00004096 51C9 FFF0                  		dbf.w	d1,LevSelTextLoad_loop
0000409A 4E75                       		rts
0000409C                            LevSelTextLoad:				; XREF: TitleScreen
0000409C 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000040A2 4DF9 00C0 0000             		lea	($C00000).l,a6
000040A8 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
000040AC 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
000040B2                            		
000040B2 323C 0000                  		move.w	#lsrow1size-1,d1		; number of lines of text (first row)
000040B6 61D0                       		bsr.s	LevSelTextLoad_loop
000040B8                            		
000040B8                            		
000040B8 283C 60AA 0003             		move.l	#lsscrpos+lsoff,d4
000040BE 323C 0000                  		move.w	#lsrow2size-1,d1		; number of lines of text (second row)
000040C2 61C4                       		bsr.s	LevSelTextLoad_loop
000040C4 363C C65F                  		move.w	#$C680-$21,d3
000040C8                            		
000040C8                            LevSelHighlightCode:
000040C8 4DF9 00C0 0000             		lea	($C00000).l,a6
000040CE 7000                       		moveq	#0,d0
000040D0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000040D4 3200                       		move.w	d0,d1
000040D6 283C 6086 0003             		move.l	#lsscrpos,d4
000040DC                            		
000040DC 0C40 0000                  		cmpi.w	#lsrow1size,d0
000040E0 6D00                       		blt.s	@notsecond
000040E2                            		
000040E2 0440 0000                  		sub.w	#lsrow1size,d0
000040E6 0684 0024 0000             		addi.l	#lsoff,d4
000040EC                            	@notsecond:
000040EC EF48                       		lsl.w	#7,d0
000040EE 4840                       		swap	d0
000040F0 D880                       		add.l	d0,d4
000040F2 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000040F8 E749                       		lsl.w	#3,d1
000040FA D241                       		add.w	d1,d1
000040FC D2C1                       		adda.w	d1,a1
000040FE 2D44 0004                  		move.l	d4,4(a6)
00004102 6100 0000                  		bsr.w	LevSel_ChgLine
00004106 0C78 0000 FF82             		cmpi.w	#lssndtest,($FFFFFF82).w
0000410C 6700                       		beq.s	LevSelSndTest
0000410E 4E75                       		rts
00004110                            
00004110                            LevSelSndTest:
00004110 0643 0030                  		add.w	#$30,d3
00004114 23FC 64C2 0003 00C0 0004   		move.l	#lsstpos,($C00004).l ; screen	position (sound	test)
0000411E 1038 FF84                  		move.b	($FFFFFF84).w,d0
00004122 1400                       		move.b	d0,d2
00004124 E808                       		lsr.b	#4,d0
00004126 6100 0000                  		bsr.w	LevSel_ChgSnd
0000412A 1002                       		move.b	d2,d0
0000412C 6100 0000                  		bsr.w	LevSel_ChgSnd
00004130 4E75                       		rts	
00004132                            ; End of function LevSelTextLoad
00004132                            
00004132                            
00004132                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004132                            
00004132                            
00004132                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00004132 0240 000F                  		andi.w	#$F,d0
00004136 0C00 000A                  		cmpi.b	#$A,d0
0000413A 6500                       		bcs.s	loc_3580
0000413C 5E00                       		addi.b	#7,d0
0000413E                            
0000413E                            loc_3580:
0000413E D043                       		add.w	d3,d0
00004140 3C80                       		move.w	d0,(a6)
00004142 4E75                       		rts	
00004144                            ; End of function LevSel_ChgSnd
00004144                            
00004144                            
00004144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004144                            
00004144                            
00004144                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00004144 740F                       		moveq	#$10-1,d2		; number of characters per line
00004146                            
00004146                            @loop:
00004146 7000                       		moveq	#0,d0
00004148 1019                       		move.b	(a1)+,d0
0000414A 0C00 0020                  		cmpi.b	#$20,d0
0000414E 6E00                       		bgt.s	@draw
00004150 3CBC 0000                  		move.w	#0,(a6)
00004154 51CA FFF0                  		dbf	d2,@loop
00004158 4E75                       		rts	
0000415A                            ; ===========================================================================
0000415A                            
0000415A                            @draw:				; XREF: LevSel_ChgLine
0000415A D043                       		add.w	d3,d0
0000415C 3C80                       		move.w	d0,(a6)
0000415E 51CA FFE6                  		dbf	d2,@loop
00004162 4E75                       		rts	
00004164                            ; End of function LevSel_ChgLine
00004164                            		
00004164                            CStringSlop_draw:
00004164 D043                       		add.w	d3,d0
00004166 3C80                       		move.w	d0,(a6)
00004168                            CStringSlop:				; XREF: LevSelTextLoad
00004168 7000                       		moveq	#0,d0
0000416A 1019                       		move.b	(a1)+,d0
0000416C 0C00 0020                  		cmpi.b	#$20,d0
00004170 6EF2                       		bgt.s	CStringSlop_draw
00004172                            		
00004172 0C00 0001                  		cmpi.b	#1,d0
00004176 6700                       		beq.s	@InsertSpaces
00004178 6500                       		blo.s	@end
0000417A                            		
0000417A 3CBC 0000                  		move.w	#0,(a6)
0000417E 60E8                       		bra.s	CStringSlop
00004180                            	@end:
00004180 4E75                       		rts
00004182                            	@InsertSpaces:
00004182 7000                       		moveq	#0,d0
00004184 1019                       		move.b	(a1)+,d0
00004186                            		
00004186                            	@insert:
00004186 3CBC 0000                  		move.w	#0,(a6)
0000418A 51C8 FFFA                  		dbf.w	d0,@insert
0000418E 60D8                       		bra.s	CStringSlop
00004190                            ; End of function LevSel_ChgLine
00004190                            
00004190                            ; ===========================================================================
00004190                            ; ---------------------------------------------------------------------------
00004190                            ; Level	select menu text ( this stupid level select code was brought to you by the meltdown guy )
00004190                            ; ---------------------------------------------------------------------------
00004190                            LevelMenuText:	
00004190 4352 554E 4348 5920 524F+  		dc.b    "CRUNCHY ROLL   1"
000041A0 2020 2020 2020 2020 2020+          dc.b    "               2"
000041B0 2020 2020 2020 2020 2020+          dc.b    "               3"
000041C0 4920 4C49 4B45 2046 494C+          dc.b    "I LIKE FILE    1"
000041D0 2045 5850 4C4F 5245 5220+          dc.b    " EXPLORER      2"
000041E0 2020 2020 2020 2020 2020+          dc.b    "               3"
000041F0 4D41 5242 4C20 2020 2020+          dc.b    "MARBL          1"
00004200 2020 2020 2020 2020 2020+          dc.b    "               2"
00004210 2020 2020 2020 2020 2020+          dc.b    "               3"
00004220 444F 4E54 4745 5452 4944+          dc.b    "DONTGETRIDOTHIS1"
00004230 2020 2020 2020 2020 2020+          dc.b    "               2"
00004240 2020 2020 2020 2020 2020+          dc.b    "               3"
00004250 4D41 4B4F 544F 2020 2020+          dc.b    "MAKOTO         1"
00004260 2020 2020 2020 2020 2020+          dc.b    "               2"
00004270 2020 2020 2020 2020 2020+          dc.b    "               3"
00004280                            LMTSecondRow:
00004280 5448 4520 5049 4720 4652+          dc.b    "THE PIG FROM   1"
00004290 2042 4152 4E59 4152 4420+          dc.b    " BARNYARD      2"
000042A0 2020 2020 2020 2020 2020+          dc.b    "               3"
000042B0 5A20 5A20 5A20 5A20 2020+          dc.b    "Z Z Z Z        1"
000042C0 2020 2020 2020 2020 2020+          dc.b    "               2"
000042D0 2020 2020 2020 2020 2020+          dc.b    "               3"
000042E0 4649 4E41 4C20 5A4F 4E45+          dc.b    "FINAL ZONE      "
000042F0 5350 4543 4941 4C20 5354+          dc.b    "SPECIAL STAGE   "
00004300 534F 554E 4420 5445 5354+          dc.b    "SOUND TEST $    "
00004310 4652 4545 2057 4946 4920+  		dc.b	"FREE WIFI       "
00004320 4F50 5449 4F4E 5320 4C41+  		dc.b	"OPTIONS LATER   "
00004330                            LMTSelectableEnd:
00004330 4341 4E54 2054 4F55 4348+  		dc.b	"CANT TOUCH ME XD"
00004340                            LMTEnd:
00004340                            
00004340                            Now_Playing:
00004340 3E3E 3E4E 4F57 2050 4C41+  		dc.b	">>>NOW PLAYING ",0
00004350                            		even
00004350                            NP_Track:
00004350 5452 4143 4B20 2400        		dc.b	"TRACK $",0
00004358                            		even
00004358                            NP_SFX:
00004358 534F 554E 4420 2400        		dc.b	"SOUND $",0
00004360                            		even
00004360                            
00004360                            ShowNow_Playing:
00004360 1C00                       		move.b	d0,d6
00004362 363C C65F                  		move.w	#$C680-$21,d3	; VRAM setting
00004366 43FA FFD8                  		lea	Now_Playing(pc),a1
0000436A 4DF9 00C0 0000             		lea		($C00000).l,a6
00004370 2D7C 6C82 0003 0004        		move.l	#lsnppos,4(a6)
00004378 6100 FDEE                  		bsr.w	CStringSlop
0000437C                            		
0000437C 43FA FFD2                  		lea	NP_Track(pc),a1
00004380 0C06 00A0                  		cmpi.b	#$A0,d6
00004384 6D00                       		blt.s	@track
00004386                            		
00004386 43FA FFD0                  		lea	NP_SFX(pc),a1
0000438A                            	@track:
0000438A 6100 FDDC                  		bsr.w	CStringSlop
0000438E                            		
0000438E 0643 0030                  		add.w	#$30,d3
00004392 1006                       		move.b	d6,d0
00004394 1400                       		move.b	d0,d2
00004396 E808                       		lsr.b	#4,d0
00004398 6100 FD98                  		bsr.w	LevSel_ChgSnd
0000439C 1002                       		move.b	d2,d0
0000439E 6100 FD92                  		bsr.w	LevSel_ChgSnd
000043A2 4E75                       		rts	
000043A4                            
000043A4                            ; 1 is insert spaces btw
000043A4                            Controls_Normal:
000043A4 414E 593A 2050 4C41 5901+  		dc.b	"ANY: PLAY",1,27,0
000043B0                            		even		
000043B0                            Controls_SND:
000043B0 413A 202D 3130 2020 423A+  		dc.b	"A: -10  B: +10  C: PLAY  START: QUIT",0
000043D6 00                         		even
000043D6                            		
000043D6                            OptionMenuText:	
000043D6 504C 4159 2054 4845 2047+  		dc.b    "PLAY THE GAME!!!"
000043E6 4348 4152 4143 5445 5220+          dc.b    "CHARACTER       "
000043F6                            OMTEnd:
000043F6                            		
000043F6                            ; ---------------------------------------------------------------------------
000043F6                            ; Level	Select
000043F6                            ; ---------------------------------------------------------------------------
000043F6                            GotoOptions:
000043F6 43F9 0000 43D6             		lea	(OptionMenuText).l,a1
000043FC 4DF9 00C0 0000             		lea	($C00000).l,a6
00004402 363C E65F                  		move.w	#$E680-$21,d3	; VRAM setting
00004406 283C 6086 0003             		move.l	#lsscrpos,d4	; screen position (text)
0000440C                            		
0000440C 323C 0000                  		move.w	#optamm-1,d1		; number of lines of text (first row)
00004410 6100 FC76                  		bsr.w	LevSelTextLoad_loop
00004414                            
00004414                            OptionsMenu:
00004414 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000441A 6100 EFC8                  		bsr.w	DelayProgram
0000441E 6100 0000                  		bsr.w	OptControls
00004422 6100 DAA0                  		bsr.w	RunPLC_RAM
00004426 4AB8 F680                  		tst.l	($FFFFF680).w
0000442A 66E8                       		bne.s	OptionsMenu
0000442C 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
00004432 67E0                       		beq.s	OptionsMenu	; if not, branch
00004434 4E71                       		nop
00004436 60DC                       		bra.s	OptionsMenu
00004438                            		
00004438                            OptReturn:
00004438 4E75                       		rts
0000443A                            OptControls:				; XREF: LevelSelect
0000443A 1238 F605                  		move.b	($FFFFF605).w,d1
0000443E 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00004442 6600                       		bne.s	Opt_UpDown	; if yes, branch
00004444 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
00004448 6AEE                       		bpl.s	OptReturn	; if time remains, branch
0000444A                            Opt_UpDown:
0000444A 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00004450 1238 F604                  		move.b	($FFFFF604).w,d1
00004454 3C38 FF82                  		move.w	($FFFFFF82).w,d6
00004458 0801 0000                  		btst	#0,d1		; is up	pressed?
0000445C 6700                       		beq.s	Opt_Down	; if not, branch
0000445E 5346                       		subq.w	#1,d6		; move up 1 selection
00004460 6400                       		bcc.s	Opt_Down
00004462 7C00                       		moveq	#lsselectable,d6		; if selection moves below 0, jump to last selection
00004464                            
00004464                            Opt_Down:
00004464 0801 0001                  		btst	#1,d1		; is down pressed?
00004468 6700                       		beq.s	Opt_Refresh	; if not, branch
0000446A 5246                       		addq.w	#1,d6		; move down 1 selection
0000446C 0C46 0000                  		cmpi.w	#lsselectable+1,d6
00004470 6500                       		bcs.s	Opt_Refresh
00004472 7C00                       		moveq	#0,d6		; if selection moves above last selectable,	jump to	selection 0
00004474                            Opt_Refresh:
00004474                            		
00004474                            ; ---------------------------------------------------------------------------
00004474                            ; Music	playlist
00004474                            ; ---------------------------------------------------------------------------
00004474                            MusicList1:	incbin	misc\muslist1.bin
0000447C                            		even
0000447C                            MusicList2:	incbin	misc\muslist2.bin
00004484                            		even
00004484                            MusicList3:	incbin	misc\muslist3.bin
0000448C                            		even
0000448C                            MusicList4:	incbin	misc\muslist4.bin
00004494                            		even
00004494                            ; ===========================================================================
00004494                            
00004494                            ; ---------------------------------------------------------------------------
00004494                            ; Level
00004494                            ; ---------------------------------------------------------------------------
00004494                            
00004494                            Level:					; XREF: GameModeArray
00004494 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
0000449A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000449E 6B00                       		bmi.s	loc_37B6
000044A0 103C 00E0                  		move.b	#$E0,d0
000044A4 6100 D7CE                  		bsr.w	PlaySound_Special ; fade out music
000044A8                            
000044A8                            loc_37B6:
000044A8 6100 DA0C                  		bsr.w	ClearPLC
000044AC 6100 E250                  		bsr.w	Pal_FadeFrom
000044B0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000044B4 6B00                       		bmi.s	Level_ClrRam
000044B6 46FC 2700                  		move	#$2700,sr
000044BA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000044C4 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000044CA 6100 D84C                  		bsr.w	NemDec
000044CE 46FC 2300                  		move	#$2300,sr
000044D2 7000                       		moveq	#0,d0
000044D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000044D8 E948                       		lsl.w	#4,d0
000044DA 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000044E0 45F2 0000                  		lea	(a2,d0.w),a2
000044E4 7000                       		moveq	#0,d0
000044E6 1012                       		move.b	(a2),d0
000044E8 6700                       		beq.s	loc_37FC
000044EA 6100 D96C                  		bsr.w	LoadPLC		; load level patterns
000044EE                            
000044EE                            loc_37FC:
000044EE 7001                       		moveq	#1,d0
000044F0 6100 D966                  		bsr.w	LoadPLC		; load standard	patterns
000044F4                            
000044F4                            Level_ClrRam:
000044F4 43F8 D000                  		lea	($FFFFD000).w,a1
000044F8 7000                       		moveq	#0,d0
000044FA 323C 07FF                  		move.w	#$7FF,d1
000044FE                            
000044FE                            Level_ClrObjRam:
000044FE 22C0                       		move.l	d0,(a1)+
00004500 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00004504                            
00004504 43F8 F628                  		lea	($FFFFF628).w,a1
00004508 7000                       		moveq	#0,d0
0000450A 323C 0015                  		move.w	#$15,d1
0000450E                            
0000450E                            Level_ClrVars:
0000450E 22C0                       		move.l	d0,(a1)+
00004510 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00004514                            
00004514 43F8 F700                  		lea	($FFFFF700).w,a1
00004518 7000                       		moveq	#0,d0
0000451A 323C 003F                  		move.w	#$3F,d1
0000451E                            
0000451E                            Level_ClrVars2:
0000451E 22C0                       		move.l	d0,(a1)+
00004520 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00004524                            
00004524 43F8 FE60                  		lea	($FFFFFE60).w,a1
00004528 7000                       		moveq	#0,d0
0000452A 323C 0047                  		move.w	#$47,d1
0000452E                            
0000452E                            Level_ClrVars3:
0000452E 22C0                       		move.l	d0,(a1)+
00004530 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00004534                            
00004534 46FC 2700                  		move	#$2700,sr
00004538 6100 D660                  		bsr.w	ClearScreen
0000453C 4DF9 00C0 0004             		lea	($C00004).l,a6
00004542 3CBC 8B03                  		move.w	#$8B03,(a6)
00004546 3CBC 8230                  		move.w	#$8230,(a6)
0000454A 3CBC 8407                  		move.w	#$8407,(a6)
0000454E 3CBC 857C                  		move.w	#$857C,(a6)
00004552 3CBC 9001                  		move.w	#$9001,(a6)
00004556 3CBC 8004                  		move.w	#$8004,(a6)
0000455A 3CBC 8720                  		move.w	#$8720,(a6)
0000455E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00004564 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00004568 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000456E 6600                       		bne.s	Level_LoadPal	; if not, branch
00004570 3CBC 8014                  		move.w	#$8014,(a6)
00004574 7000                       		moveq	#0,d0
00004576 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000457A D040                       		add.w	d0,d0
0000457C 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
00004582 3031 0000                  		move.w	(a1,d0.w),d0
00004586 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
0000458A 31C0 F648                  		move.w	d0,($FFFFF648).w
0000458E 31C0 F64A                  		move.w	d0,($FFFFF64A).w
00004592 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
00004596 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
0000459A 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000045A0 6000 0000                  		bra.w	Level_LoadPal
000045A4                            Player_Palette:
000045A4                            		; normal, lz, sbz, blank
000045A4 0003 000F 0010 0000        		dc.w	3,$F,$10,0 ; Sonic 
000045AC                            		
000045AC 0016 0017 0018 0000        		dc.w	22,23,24,0 ; Pal_Gronic 
000045B4 0019 0017 0018 0000        		dc.w	25,23,24,0 ; Pal_Anakama 
000045BC 0003 000F 0010 0000                dc.w	3,$F,$10,0 ; LimitedSonic 
000045C4                            
000045C4                            		; add more player palettes
000045C4                            Level_LoadPal:
000045C4 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000045CA 46FC 2300                  		move	#$2300,sr
000045CE                            
000045CE 7200                       		moveq	#0,d1
000045D0 1238 FFE8                  		move.b	(v_character),d1
000045D4 D241                       		add.w	d1,d1
000045D6 D241                       		add.w	d1,d1
000045D8 D241                       		add.w	d1,d1
000045DA 303B 10C8                  		move.w	Player_Palette(pc,d1.w),d0	; load palette
000045DE                            		
000045DE 6100 E3E4                  		bsr.w	PalLoad2	; load Sonic's pallet line
000045E2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000045E8 6600                       		bne.s	Level_GetBgm	; if not, branch
000045EA 303B 10BA                  		move.w	Player_Palette+2(pc,d1.w),d0	; load palette
000045EE 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000045F4 6600                       		bne.s	Level_WaterPal	; if not, branch
000045F6 303B 10B0                  		move.w	Player_Palette+4(pc,d1.w),d0	; load palette
000045FA                            
000045FA                            Level_WaterPal:
000045FA 6100 E3E0                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000045FE 4A38 FE30                  		tst.b	($FFFFFE30).w
00004602 6700                       		beq.s	Level_GetBgm
00004604 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0000460A                            
0000460A                            ; NineKode begins here - How to play different songs on different acts
0000460A                             
0000460A                            Level_GetBgm:
0000460A 4A78 FFF0                  		tst.w	($FFFFFFF0).w
0000460E 6B00 0000                  		bmi.w	loc_3946	; change from bmi.s to bmi.w or you'll get an error
00004612 7000                       		moveq	#0,d0
00004614 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004618                             
00004618 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
0000461E 6600                       		bne.s	Level_GetBgm2	; if not, branch
00004620 43F9 0000 4474             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00004626 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004628                             
00004628                            Level_GetBgm2:
00004628 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
0000462E 6600                       		bne.s	Level_GetBgm3	; if not, branch
00004630 43F9 0000 447C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00004636 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004638                             
00004638                            Level_GetBgm3:
00004638 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
0000463E 6600                       		bne.s	Level_GetBgm4	; if not, branch
00004640 43F9 0000 4484             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00004646 6000                       		bra.s	Level_PlayBgm	; go to PlayBgm
00004648                             
00004648                            Level_GetBgm4:
00004648 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
0000464E 6600                       		bne.s	Level_PlayBgm	; if not, branch
00004650 43F9 0000 448C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00004656                             
00004656                            Level_PlayBgm:
00004656 1031 0000                  		move.b	(a1,d0.w),d0	; get d0-th entry from the playlist
0000465A 6100 D612                  		bsr.w	PlaySound	; play music
0000465E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00004664                             
00004664                            ; NineKode ends here
00004664                            
00004664                            Level_TtlCard:
00004664 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000466A 6100 ED78                  		bsr.w	DelayProgram
0000466E 4EB9 0000 0000             		jsr	ObjectsLoad
00004674 4EB9 0000 0000             		jsr	BuildSprites
0000467A 6100 D848                  		bsr.w	RunPLC_RAM
0000467E 3038 D108                  		move.w	($FFFFD108).w,d0
00004682 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00004686 66DC                       		bne.s	Level_TtlCard	; if not, branch
00004688 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000468C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000468E 4EB9 0000 0000             		jsr	Hud_Base
00004694                            
00004694                            loc_3946:
00004694 7003                       		moveq	#3,d0
00004696 6100 E310                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000469A 6100 0000                  		bsr.w	LevelSizeLoad
0000469E 6100 0000                  		bsr.w	DeformBgLayer
000046A2 08F8 0002 F754             		bset	#2,($FFFFF754).w
000046A8 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
000046AC 6100 0000                  		bsr.w	LoadTilesFromStart
000046B0 4EB9 0000 0000             		jsr	FloorLog_Unk
000046B6 6100 0000                  		bsr.w	ColIndexLoad
000046BA 6100 0000                  		bsr.w	LZWaterEffects
000046BE 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000046C4 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000046C8 6B00                       		bmi.s	Level_ChkDebug
000046CA 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000046D0                            
000046D0                            Level_ChkDebug:
000046D0 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000046D4 6700                       		beq.s	Level_ChkWater	; if not, branch
000046D6 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
000046DC 6700                       		beq.s	Level_ChkWater	; if not, branch
000046DE 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000046E4                            
000046E4                            Level_ChkWater:
000046E4 31FC 0000 F602             		move.w	#0,($FFFFF602).w
000046EA 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000046F0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000046F6 6600                       		bne.s	Level_LoadObj	; if not, branch
000046F8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000046FE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
00004704 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
0000470A 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
00004710                            
00004710                            Level_LoadObj:
00004710 4EB9 0000 0000             		jsr	ObjPosLoad
00004716 4EB9 0000 0000             		jsr	ObjectsLoad
0000471C 4EB9 0000 0000             		jsr	BuildSprites
00004722 7000                       		moveq	#0,d0
00004724 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
00004728 6600                       		bne.s	loc_39E8	; if yes, branch
0000472A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000472E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004732 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
00004736                            
00004736                            loc_39E8:
00004736 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
0000473A 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
0000473E 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
00004742 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
00004746                            		; move.b	d0,($FFFFFE2F).w
00004746 0238 0001 FE2F             		andi.b	#%00000001,($FFFFFE2F).w	; GMZ: Clear every flag in FE2F aside from reversed controls
0000474C 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00004750 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00004754 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00004758 11C0 FFF9                  		move.b	d0,($FFFFFFF9).w	; GMZ: Clear truth nuke flag
0000475C 6100 0000                  		bsr.w	OscillateNumInit
00004760 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004766 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
0000476C 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00004772 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00004778 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
0000477E 7000                       		moveq	#0,d0
00004780 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004784 E548                       		lsl.w	#2,d0
00004786 2271 0000                  		movea.l	(a1,d0.w),a1
0000478A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000478E 6A00                       		bpl.s	Level_Demo	; if yes, branch
00004790 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00004796 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000479A 5340                       		subq.w	#1,d0
0000479C E548                       		lsl.w	#2,d0
0000479E 2271 0000                  		movea.l	(a1,d0.w),a1
000047A2                            
000047A2                            Level_Demo:
000047A2 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
000047A8 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
000047AC 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000047B2 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000047B6 6A00                       		bpl.s	Level_ChkWaterPal
000047B8 31FC 021C F614             		move.w	#540,($FFFFF614).w
000047BE 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
000047C4 6600                       		bne.s	Level_ChkWaterPal
000047C6 31FC 01FE F614             		move.w	#510,($FFFFF614).w
000047CC                            
000047CC                            Level_ChkWaterPal:
000047CC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
000047D2 6600                       		bne.s	Level_Delay	; if not, branch
000047D4 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
000047D6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
000047DC 6600                       		bne.s	Level_WaterPal2	; if not, branch
000047DE 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
000047E0                            
000047E0                            Level_WaterPal2:
000047E0 6100 E216                  		bsr.w	PalLoad4_Water
000047E4                            
000047E4                            Level_Delay:
000047E4 323C 0003                  		move.w	#3,d1
000047E8                            
000047E8                            Level_DelayLoop:
000047E8 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000047EE 6100 EBF4                  		bsr.w	DelayProgram
000047F2 51C9 FFF4                  		dbf	d1,Level_DelayLoop
000047F6                            
000047F6 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
000047FC 6100 DE5C                  		bsr.w	Pal_FadeTo2
00004800 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004804 6B00                       		bmi.s	Level_ClrCardArt
00004806 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
0000480A 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
0000480E 5838 D124                  		addq.b	#4,($FFFFD124).w
00004812 5838 D164                  		addq.b	#4,($FFFFD164).w
00004816 6000                       		bra.s	Level_StartGame
00004818                            ; ===========================================================================
00004818                            
00004818                            Level_ClrCardArt:
00004818 7002                       		moveq	#2,d0
0000481A 4EB9 0000 1E58             		jsr	(LoadPLC).l	; load explosion patterns
00004820 7000                       		moveq	#0,d0
00004822 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004826 0640 0015                  		addi.w	#$15,d0
0000482A 4EB9 0000 1E58             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00004830                            
00004830                            Level_StartGame:
00004830 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00004836                            
00004836                            ; ---------------------------------------------------------------------------
00004836                            ; Main level loop (when	all title card and loading sequences are finished)
00004836                            ; ---------------------------------------------------------------------------
00004836                            
00004836                            Level_MainLoop:
00004836 6100 D448                  		bsr.w	PauseGame
0000483A 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00004840 6100 EBA2                  		bsr.w	DelayProgram
00004844 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00004848 6100 0000                  		bsr.w	MoveSonicInDemo
0000484C 6100 0000                  		bsr.w	LZWaterEffects
00004850 4EB9 0000 0000             		jsr	ObjectsLoad
00004856 4A78 FE08                  		tst.w	($FFFFFE08).w
0000485A 6600                       		bne.s	loc_3B10
0000485C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004862 6400                       		bcc.s	loc_3B14
00004864                            
00004864                            loc_3B10:
00004864 6100 0000                  		bsr.w	DeformBgLayer
00004868                            
00004868                            loc_3B14:
00004868 4EB9 0000 0000             		jsr	BuildSprites
0000486E 4EB9 0000 0000             		jsr	ObjPosLoad
00004874 6100 D99E                  		bsr.w	PalCycle_Load
00004878 6100 D64A                  		bsr.w	RunPLC_RAM
0000487C 6100 0000                  		bsr.w	OscillateNumDo
00004880 6100 0000                  		bsr.w	ChangeRingFrame
00004884 6100 0000                  		bsr.w	SignpostArtLoad
00004888 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
0000488E 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00004890 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00004894 6600 FBFE                  		bne.w	Level		; if yes, branch
00004898 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
0000489E 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
000048A2 4E75                       		rts	
000048A4                            ; ===========================================================================
000048A4                            
000048A4                            Level_ChkDemo:				; XREF: Level_MainLoop
000048A4 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000048A8 6600                       		bne.s	Level_EndDemo	; if yes, branch
000048AA 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
000048AE 6700                       		beq.s	Level_EndDemo	; if not, branch
000048B0 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
000048B6 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
000048BA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000048C0 4E75                       		rts	
000048C2                            ; ===========================================================================
000048C2                            
000048C2                            Level_EndDemo:				; XREF: Level_ChkDemo
000048C2 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
000048C8 6600                       		bne.s	loc_3B88	; if not, branch
000048CA 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000048D0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000048D4 6A00                       		bpl.s	loc_3B88	; if yes, branch
000048D6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
000048DC                            
000048DC                            loc_3B88:
000048DC 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
000048E2 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000048E8 4278 F794                  		clr.w	($FFFFF794).w
000048EC                            
000048EC                            loc_3B98:
000048EC 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
000048F2 6100 EAF0                  		bsr.w	DelayProgram
000048F6 6100 0000                  		bsr.w	MoveSonicInDemo
000048FA 4EB9 0000 0000             		jsr	ObjectsLoad
00004900 4EB9 0000 0000             		jsr	BuildSprites
00004906 4EB9 0000 0000             		jsr	ObjPosLoad
0000490C 5378 F794                  		subq.w	#1,($FFFFF794).w
00004910 6A00                       		bpl.s	loc_3BC8
00004912 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00004918 6100 DE04                  		bsr.w	Pal_FadeOut
0000491C                            
0000491C                            loc_3BC8:
0000491C 4A78 F614                  		tst.w	($FFFFF614).w
00004920 66CA                       		bne.s	loc_3B98
00004922 4E75                       		rts	
00004924                            ; ===========================================================================
00004924                            ; ---------------------------------------------------------------------------
00004924                            ; Subroutine to	do special water effects in Labyrinth Zone
00004924                            ; ---------------------------------------------------------------------------
00004924                            
00004924                            LZWaterEffects:				; XREF: Level
00004924 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000492A 6600                       		bne.s	locret_3C28	; if not, branch
0000492C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004932 6400                       		bcc.s	LZMoveWater
00004934 6100 0000                  		bsr.w	LZWindTunnels
00004938 6100 0000                  		bsr.w	LZWaterSlides
0000493C 6100 0000                  		bsr.w	LZDynamicWater
00004940                            
00004940                            LZMoveWater:
00004940 4238 F64E                  		clr.b	($FFFFF64E).w
00004944 7000                       		moveq	#0,d0
00004946 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000494A E248                       		lsr.w	#1,d0
0000494C D078 F648                  		add.w	($FFFFF648).w,d0
00004950 31C0 F646                  		move.w	d0,($FFFFF646).w
00004954 3038 F646                  		move.w	($FFFFF646).w,d0
00004958 9078 F704                  		sub.w	($FFFFF704).w,d0
0000495C 6400                       		bcc.s	loc_3C1A
0000495E 4A40                       		tst.w	d0
00004960 6A00                       		bpl.s	loc_3C1A
00004962 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00004968 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
0000496E                            
0000496E                            loc_3C1A:
0000496E 0C40 00DF                  		cmpi.w	#$DF,d0
00004972 6500                       		bcs.s	loc_3C24
00004974 303C 00DF                  		move.w	#$DF,d0
00004978                            
00004978                            loc_3C24:
00004978 11C0 F625                  		move.b	d0,($FFFFF625).w
0000497C                            
0000497C                            locret_3C28:
0000497C 4E75                       		rts	
0000497E                            ; ===========================================================================
0000497E                            ; ---------------------------------------------------------------------------
0000497E                            ; Labyrinth default water heights
0000497E                            ; ---------------------------------------------------------------------------
0000497E                            WaterHeight:	incbin	misc\lz_heigh.bin
00004986                            		even
00004986                            ; ===========================================================================
00004986                            
00004986                            ; ---------------------------------------------------------------------------
00004986                            ; Labyrinth dynamic water routines
00004986                            ; ---------------------------------------------------------------------------
00004986                            
00004986                            LZDynamicWater:				; XREF: LZWaterEffects
00004986 7000                       		moveq	#0,d0
00004988 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000498C D040                       		add.w	d0,d0
0000498E 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00004992 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00004996 7200                       		moveq	#0,d1
00004998 1238 F64C                  		move.b	($FFFFF64C).w,d1
0000499C 3038 F64A                  		move.w	($FFFFF64A).w,d0
000049A0 9078 F648                  		sub.w	($FFFFF648).w,d0
000049A4 6700                       		beq.s	locret_3C5A
000049A6 6400                       		bcc.s	loc_3C56
000049A8 4441                       		neg.w	d1
000049AA                            
000049AA                            loc_3C56:
000049AA D378 F648                  		add.w	d1,($FFFFF648).w
000049AE                            
000049AE                            locret_3C5A:
000049AE 4E75                       		rts	
000049B0                            ; ===========================================================================
000049B0 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
000049B2 0000                       		dc.w DynWater_LZ2-DynWater_Index
000049B4 0000                       		dc.w DynWater_LZ3-DynWater_Index
000049B6 0000                       		dc.w DynWater_SBZ3-DynWater_Index
000049B8                            ; ===========================================================================
000049B8                            
000049B8                            DynWater_LZ1:				; XREF: DynWater_Index
000049B8 3038 F700                  		move.w	($FFFFF700).w,d0
000049BC 1438 F64D                  		move.b	($FFFFF64D).w,d2
000049C0 6600                       		bne.s	loc_3CD0
000049C2 323C 00B8                  		move.w	#$B8,d1
000049C6 0C40 0600                  		cmpi.w	#$600,d0
000049CA 6500                       		bcs.s	loc_3CB4
000049CC 323C 0108                  		move.w	#$108,d1
000049D0 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
000049D6 6500                       		bcs.s	loc_3CBA
000049D8 0C40 0C00                  		cmpi.w	#$C00,d0
000049DC 6500                       		bcs.s	loc_3CB4
000049DE 323C 0318                  		move.w	#$318,d1
000049E2 0C40 1080                  		cmpi.w	#$1080,d0
000049E6 6500                       		bcs.s	loc_3CB4
000049E8 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
000049EE 323C 05C8                  		move.w	#$5C8,d1
000049F2 0C40 1380                  		cmpi.w	#$1380,d0
000049F6 6500                       		bcs.s	loc_3CB4
000049F8 323C 03A8                  		move.w	#$3A8,d1
000049FC B278 F648                  		cmp.w	($FFFFF648).w,d1
00004A00 6600                       		bne.s	loc_3CB4
00004A02 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00004A08                            
00004A08                            loc_3CB4:
00004A08 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A0C 4E75                       		rts	
00004A0E                            ; ===========================================================================
00004A0E                            
00004A0E                            loc_3CBA:				; XREF: DynWater_LZ1
00004A0E 0C40 0C80                  		cmpi.w	#$C80,d0
00004A12 65F4                       		bcs.s	loc_3CB4
00004A14 323C 00E8                  		move.w	#$E8,d1
00004A18 0C40 1500                  		cmpi.w	#$1500,d0
00004A1C 65EA                       		bcs.s	loc_3CB4
00004A1E 323C 0108                  		move.w	#$108,d1
00004A22 60E4                       		bra.s	loc_3CB4
00004A24                            ; ===========================================================================
00004A24                            
00004A24                            loc_3CD0:				; XREF: DynWater_LZ1
00004A24 5302                       		subq.b	#1,d2
00004A26 6600                       		bne.s	locret_3CF4
00004A28 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00004A2E 6400                       		bcc.s	locret_3CF4
00004A30 323C 03A8                  		move.w	#$3A8,d1
00004A34 0C40 1300                  		cmpi.w	#$1300,d0
00004A38 6500                       		bcs.s	loc_3CF0
00004A3A 323C 0108                  		move.w	#$108,d1
00004A3E 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004A44                            
00004A44                            loc_3CF0:
00004A44 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A48                            
00004A48                            locret_3CF4:
00004A48 4E75                       		rts	
00004A4A                            ; ===========================================================================
00004A4A                            
00004A4A                            DynWater_LZ2:				; XREF: DynWater_Index
00004A4A 3038 F700                  		move.w	($FFFFF700).w,d0
00004A4E 323C 0328                  		move.w	#$328,d1
00004A52 0C40 0500                  		cmpi.w	#$500,d0
00004A56 6500                       		bcs.s	loc_3D12
00004A58 323C 03C8                  		move.w	#$3C8,d1
00004A5C 0C40 0B00                  		cmpi.w	#$B00,d0
00004A60 6500                       		bcs.s	loc_3D12
00004A62 323C 0428                  		move.w	#$428,d1
00004A66                            
00004A66                            loc_3D12:
00004A66 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A6A 4E75                       		rts	
00004A6C                            ; ===========================================================================
00004A6C                            
00004A6C                            DynWater_LZ3:				; XREF: DynWater_Index
00004A6C 3038 F700                  		move.w	($FFFFF700).w,d0
00004A70 1438 F64D                  		move.b	($FFFFF64D).w,d2
00004A74 6600                       		bne.s	loc_3D5E
00004A76 323C 0500                  		move.w	#$500,d1
00004A7A 0C40 0600                  		cmpi.w	#$600,d0
00004A7E 6500                       		bcs.s	loc_3D54
00004A80 0C40 1B00                  		cmpi.w	#$1B00,d0
00004A84 6500                       		bcs.s	loc_3D54
00004A86 323C 0850                  		move.w	#$850,d1
00004A8A                            
00004A8A                            loc_3D54:
00004A8A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004A8E 31C1 F648                  		move.w	d1,($FFFFF648).w
00004A92 4E75                       		rts	
00004A94                            ; ===========================================================================
00004A94                            
00004A94                            loc_3D5E:				; XREF: DynWater_LZ3
00004A94 5302                       		subq.b	#1,d2
00004A96 6600                       		bne.s	loc_3DA8
00004A98 323C 04C8                  		move.w	#$4C8,d1
00004A9C 0C40 0770                  		cmpi.w	#$770,d0
00004AA0 6500                       		bcs.s	loc_3DA2
00004AA2 323C 0308                  		move.w	#$308,d1
00004AA6 0C40 1400                  		cmpi.w	#$1400,d0
00004AAA 6500                       		bcs.s	loc_3DA2
00004AAC 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00004AB2 6700                       		beq.s	loc_3D8E
00004AB4 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00004ABA 6400                       		bcc.s	loc_3D8E
00004ABC 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00004AC2 6400                       		bcc.s	loc_3DA2
00004AC4                            
00004AC4                            loc_3D8E:
00004AC4 323C 0508                  		move.w	#$508,d1
00004AC8 31C1 F648                  		move.w	d1,($FFFFF648).w
00004ACC 0C40 1770                  		cmpi.w	#$1770,d0
00004AD0 6500                       		bcs.s	loc_3DA2
00004AD2 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00004AD8                            
00004AD8                            loc_3DA2:
00004AD8 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004ADC 4E75                       		rts	
00004ADE                            ; ===========================================================================
00004ADE                            
00004ADE                            loc_3DA8:
00004ADE 5302                       		subq.b	#1,d2
00004AE0 6600                       		bne.s	loc_3DD2
00004AE2 323C 0508                  		move.w	#$508,d1
00004AE6 0C40 1860                  		cmpi.w	#$1860,d0
00004AEA 6500                       		bcs.s	loc_3DCC
00004AEC 323C 0188                  		move.w	#$188,d1
00004AF0 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004AF4 6400                       		bcc.s	loc_3DC6
00004AF6 B278 F648                  		cmp.w	($FFFFF648).w,d1
00004AFA 6600                       		bne.s	loc_3DCC
00004AFC                            
00004AFC                            loc_3DC6:
00004AFC 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00004B02                            
00004B02                            loc_3DCC:
00004B02 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B06 4E75                       		rts	
00004B08                            ; ===========================================================================
00004B08                            
00004B08                            loc_3DD2:
00004B08 5302                       		subq.b	#1,d2
00004B0A 6600                       		bne.s	loc_3E0E
00004B0C 323C 0188                  		move.w	#$188,d1
00004B10 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00004B14 6500                       		bcs.s	loc_3E04
00004B16 323C 0900                  		move.w	#$900,d1
00004B1A 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00004B1E 6500                       		bcs.s	loc_3E04
00004B20 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00004B26 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00004B2C 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00004B32 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00004B38 4E75                       		rts	
00004B3A                            ; ===========================================================================
00004B3A                            
00004B3A                            loc_3E04:
00004B3A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B3E 31C1 F648                  		move.w	d1,($FFFFF648).w
00004B42 4E75                       		rts	
00004B44                            ; ===========================================================================
00004B44                            
00004B44                            loc_3E0E:
00004B44 0C40 1E00                  		cmpi.w	#$1E00,d0
00004B48 6500                       		bcs.s	locret_3E1A
00004B4A 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00004B50                            
00004B50                            locret_3E1A:
00004B50 4E75                       		rts	
00004B52                            ; ===========================================================================
00004B52                            
00004B52                            DynWater_SBZ3:				; XREF: DynWater_Index
00004B52 323C 0228                  		move.w	#$228,d1
00004B56 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00004B5C 6500                       		bcs.s	loc_3E2C
00004B5E 323C 04C8                  		move.w	#$4C8,d1
00004B62                            
00004B62                            loc_3E2C:
00004B62 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00004B66 4E75                       		rts
00004B68                            
00004B68                            ; ---------------------------------------------------------------------------
00004B68                            ; Labyrinth Zone "wind tunnels"	subroutine
00004B68                            ; ---------------------------------------------------------------------------
00004B68                            
00004B68                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004B68                            
00004B68                            
00004B68                            LZWindTunnels:				; XREF: LZWaterEffects
00004B68 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004B6C 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00004B70 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00004B76 7000                       		moveq	#0,d0
00004B78 1038 FE11                  		move.b	($FFFFFE11).w,d0
00004B7C E748                       		lsl.w	#3,d0
00004B7E D4C0                       		adda.w	d0,a2
00004B80 7200                       		moveq	#0,d1
00004B82 4A38 FE11                  		tst.b	($FFFFFE11).w
00004B86 6600                       		bne.s	loc_3E56
00004B88 7201                       		moveq	#1,d1
00004B8A 514A                       		subq.w	#8,a2
00004B8C                            
00004B8C                            loc_3E56:
00004B8C 43F8 D000                  		lea	($FFFFD000).w,a1
00004B90                            
00004B90                            LZWind_Loop:
00004B90 3029 0008                  		move.w	8(a1),d0
00004B94 B052                       		cmp.w	(a2),d0
00004B96 6500 0000                  		bcs.w	loc_3EF4
00004B9A B06A 0004                  		cmp.w	4(a2),d0
00004B9E 6400 0000                  		bcc.w	loc_3EF4
00004BA2 3429 000C                  		move.w	$C(a1),d2
00004BA6 B46A 0002                  		cmp.w	2(a2),d2
00004BAA 6500                       		bcs.s	loc_3EF4
00004BAC B46A 0006                  		cmp.w	6(a2),d2
00004BB0 6400                       		bcc.s	loc_3EF4
00004BB2 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004BB6 0200 003F                  		andi.b	#$3F,d0
00004BBA 6600                       		bne.s	loc_3E90
00004BBC 303C 00D0                  		move.w	#$D0,d0
00004BC0 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play rushing water sound
00004BC6                            
00004BC6                            loc_3E90:
00004BC6 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00004BCA 6600 0000                  		bne.w	locret_3F0A
00004BCE 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00004BD4 6400                       		bcc.s	loc_3F06
00004BD6 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00004BDC 0440 0080                  		subi.w	#$80,d0
00004BE0 B052                       		cmp.w	(a2),d0
00004BE2 6400                       		bcc.s	LZWind_Move
00004BE4 7002                       		moveq	#2,d0
00004BE6 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00004BEC 6600                       		bne.s	loc_3EBA
00004BEE 4440                       		neg.w	d0
00004BF0                            
00004BF0                            loc_3EBA:
00004BF0 D169 000C                  		add.w	d0,$C(a1)
00004BF4                            
00004BF4                            LZWind_Move:
00004BF4 5869 0008                  		addq.w	#4,8(a1)
00004BF8 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00004BFE 337C 0000 0012             		move.w	#0,$12(a1)
00004C04 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00004C0A 08E9 0001 0022             		bset	#1,$22(a1)
00004C10 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00004C16 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00004C18 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00004C1C                            
00004C1C                            LZWind_MoveDown:
00004C1C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00004C22 6700                       		beq.s	locret_3EF2	; if not, branch
00004C24 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00004C28                            
00004C28                            locret_3EF2:
00004C28 4E75                       		rts	
00004C2A                            ; ===========================================================================
00004C2A                            
00004C2A                            loc_3EF4:				; XREF: LZWindTunnels
00004C2A 504A                       		addq.w	#8,a2
00004C2C 51C9 FF62                  		dbf	d1,LZWind_Loop
00004C30 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00004C34 6700                       		beq.s	locret_3F0A
00004C36 137C 0000 001C             		move.b	#0,$1C(a1)
00004C3C                            
00004C3C                            loc_3F06:
00004C3C 4238 F7C7                  		clr.b	($FFFFF7C7).w
00004C40                            
00004C40                            locret_3F0A:
00004C40 4E75                       		rts	
00004C42                            ; End of function LZWindTunnels
00004C42                            
00004C42                            ; ===========================================================================
00004C42 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00004C4A 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00004C5C 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00004C6A                            					; XREF: LZWindTunnels
00004C6A                            		even
00004C6A                            
00004C6A                            ; ---------------------------------------------------------------------------
00004C6A                            ; Labyrinth Zone water slide subroutine
00004C6A                            ; ---------------------------------------------------------------------------
00004C6A                            
00004C6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004C6A                            
00004C6A                            
00004C6A                            LZWaterSlides:				; XREF: LZWaterEffects
00004C6A 43F8 D000                  		lea	($FFFFD000).w,a1
00004C6E 0829 0001 0022             		btst	#1,$22(a1)
00004C74 6600                       		bne.s	loc_3F6A
00004C76 3029 000C                  		move.w	$C(a1),d0
00004C7A E248                       		lsr.w	#1,d0
00004C7C 0240 0380                  		andi.w	#$380,d0
00004C80 1229 0008                  		move.b	8(a1),d1
00004C84 0241 007F                  		andi.w	#$7F,d1
00004C88 D041                       		add.w	d1,d0
00004C8A 45F8 A400                  		lea	($FFFFA400).w,a2
00004C8E 1032 0000                  		move.b	(a2,d0.w),d0
00004C92 45FA 0000                  		lea	byte_3FCF(pc),a2
00004C96 7206                       		moveq	#6,d1
00004C98                            
00004C98                            loc_3F62:
00004C98 B022                       		cmp.b	-(a2),d0
00004C9A 57C9 FFFC                  		dbeq	d1,loc_3F62
00004C9E 6700                       		beq.s	LZSlide_Move
00004CA0                            
00004CA0                            loc_3F6A:
00004CA0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00004CA4 6700                       		beq.s	locret_3F7A
00004CA6 337C 0005 003E             		move.w	#5,$3E(a1)
00004CAC 4238 F7CA                  		clr.b	($FFFFF7CA).w
00004CB0                            
00004CB0                            locret_3F7A:
00004CB0 4E75                       		rts	
00004CB2                            ; ===========================================================================
00004CB2                            
00004CB2                            LZSlide_Move:				; XREF: LZWaterSlides
00004CB2 0C41 0003                  		cmpi.w	#3,d1
00004CB6 6400                       		bcc.s	loc_3F84
00004CB8 4E71                       		nop	
00004CBA                            
00004CBA                            loc_3F84:
00004CBA 08A9 0000 0022             		bclr	#0,$22(a1)
00004CC0 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00004CC4 1340 0014                  		move.b	d0,$14(a1)
00004CC8 6A00                       		bpl.s	loc_3F9A
00004CCA 08E9 0000 0022             		bset	#0,$22(a1)
00004CD0                            
00004CD0                            loc_3F9A:
00004CD0 4229 0015                  		clr.b	$15(a1)
00004CD4 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00004CDA 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00004CE0 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004CE4 0200 001F                  		andi.b	#$1F,d0
00004CE8 6600                       		bne.s	locret_3FBE
00004CEA 303C 00D0                  		move.w	#$D0,d0
00004CEE 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play water sound
00004CF4                            
00004CF4                            locret_3FBE:
00004CF4 4E75                       		rts	
00004CF6                            ; End of function LZWaterSlides
00004CF6                            
00004CF6                            ; ===========================================================================
00004CF6 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00004D05 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00004D06                            		even
00004D06                            
00004D06                            ; ---------------------------------------------------------------------------
00004D06                            ; Subroutine to	move Sonic in demo mode
00004D06                            ; ---------------------------------------------------------------------------
00004D06                            
00004D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004D06                            
00004D06                            
00004D06                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00004D06 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004D0A 6600                       		bne.s	MoveDemo_On	; if yes, branch
00004D0C 4E75                       		rts	
00004D0E                            ; ===========================================================================
00004D0E                            
00004D0E                            ; This is an unused subroutine for recording a demo
00004D0E                            
00004D0E                            MoveDemo_Record:
00004D0E 43F9 0008 0000             		lea	($80000).l,a1
00004D14 3038 F790                  		move.w	($FFFFF790).w,d0
00004D18 D2C0                       		adda.w	d0,a1
00004D1A 1038 F604                  		move.b	($FFFFF604).w,d0
00004D1E B011                       		cmp.b	(a1),d0
00004D20 6600                       		bne.s	loc_3FFA
00004D22 5229 0001                  		addq.b	#1,1(a1)
00004D26 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00004D2C 6700                       		beq.s	loc_3FFA
00004D2E 4E75                       		rts	
00004D30                            ; ===========================================================================
00004D30                            
00004D30                            loc_3FFA:				; XREF: MoveDemo_Record
00004D30 1340 0002                  		move.b	d0,2(a1)
00004D34 137C 0000 0003             		move.b	#0,3(a1)
00004D3A 5478 F790                  		addq.w	#2,($FFFFF790).w
00004D3E 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
00004D44 4E75                       		rts	
00004D46                            ; ===========================================================================
00004D46                            
00004D46                            MoveDemo_On:				; XREF: MoveSonicInDemo
00004D46 4A38 F604                  		tst.b	($FFFFF604).w
00004D4A 6A00                       		bpl.s	loc_4022
00004D4C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004D50 6B00                       		bmi.s	loc_4022
00004D52 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004D58                            
00004D58                            loc_4022:
00004D58 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004D5E 7000                       		moveq	#0,d0
00004D60 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004D64 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004D6A 6600                       		bne.s	loc_4038
00004D6C 7006                       		moveq	#6,d0
00004D6E                            
00004D6E                            loc_4038:
00004D6E E548                       		lsl.w	#2,d0
00004D70 2271 0000                  		movea.l	(a1,d0.w),a1
00004D74 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004D78 6A00                       		bpl.s	loc_4056
00004D7A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004D80 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00004D84 5340                       		subq.w	#1,d0
00004D86 E548                       		lsl.w	#2,d0
00004D88 2271 0000                  		movea.l	(a1,d0.w),a1
00004D8C                            
00004D8C                            loc_4056:
00004D8C 3038 F790                  		move.w	($FFFFF790).w,d0
00004D90 D2C0                       		adda.w	d0,a1
00004D92 1011                       		move.b	(a1),d0
00004D94 41F8 F604                  		lea	($FFFFF604).w,a0
00004D98 1200                       		move.b	d0,d1
00004D9A 1410                       		move.b	(a0),d2
00004D9C B500                       		eor.b	d2,d0
00004D9E 10C1                       		move.b	d1,(a0)+
00004DA0 C001                       		and.b	d1,d0
00004DA2 10C0                       		move.b	d0,(a0)+
00004DA4 5338 F792                  		subq.b	#1,($FFFFF792).w
00004DA8 6400                       		bcc.s	locret_407E
00004DAA 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004DB0 5478 F790                  		addq.w	#2,($FFFFF790).w
00004DB4                            
00004DB4                            locret_407E:
00004DB4 4E75                       		rts	
00004DB6                            ; End of function MoveSonicInDemo
00004DB6                            
00004DB6                            ; ===========================================================================
00004DB6                            ; ---------------------------------------------------------------------------
00004DB6                            ; Demo sequence	pointers
00004DB6                            ; ---------------------------------------------------------------------------
00004DB6                            Demo_Index:
00004DB6                            	include "_inc\Demo pointers for intro.asm"
00004DB6                            ; ---------------------------------------------------------------------------
00004DB6                            ; Demo sequence	pointers
00004DB6                            ; ---------------------------------------------------------------------------
00004DB6 0000 0000                  	dc.l Demo_GHZ
00004DBA 0000 0000                  	dc.l Demo_GHZ
00004DBE 0000 0000                  	dc.l Demo_MZ
00004DC2 0000 0000                  	dc.l Demo_MZ
00004DC6 0000 0000                  	dc.l Demo_SYZ
00004DCA 0000 0000                  	dc.l Demo_SYZ
00004DCE 0000 0000                  	dc.l Demo_SS
00004DD2 0000 0000                  	dc.l Demo_SS
00004DD2 0000 0000                  	dc.l Demo_SS
00004DD6                            
00004DD6                            Demo_EndIndex:
00004DD6                            	include "_inc\Demo pointers for ending.asm"
00004DD6                            ; ---------------------------------------------------------------------------
00004DD6                            ; Demo (ending) sequence pointers
00004DD6                            ; ---------------------------------------------------------------------------
00004DD6 0000 0000                  	dc.l Demo_EndGHZ1
00004DDA 0000 0000                  	dc.l Demo_EndMZ
00004DDE 0000 0000                  	dc.l Demo_EndSYZ
00004DE2 0000 0000                  	dc.l Demo_EndLZ
00004DE6 0000 0000                  	dc.l Demo_EndSLZ
00004DEA 0000 0000                  	dc.l Demo_EndSBZ1
00004DEE 0000 0000                  	dc.l Demo_EndSBZ2
00004DF2 0000 0000                  	dc.l Demo_EndGHZ2
00004DF2 0000 0000                  	dc.l Demo_EndGHZ2
00004DF6                            
00004DF6 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
00004E06 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
00004E16 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
00004E26                            		even
00004E26                            
00004E26                            ; ---------------------------------------------------------------------------
00004E26                            ; Collision index loading subroutine
00004E26                            ; ---------------------------------------------------------------------------
00004E26                            
00004E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E26                            
00004E26                            
00004E26                            ColIndexLoad:				; XREF: Level
00004E26 7000                       		moveq	#0,d0
00004E28 1038 FE10                  		move.b	($FFFFFE10).w,d0
00004E2C E548                       		lsl.w	#2,d0
00004E2E 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
00004E34 4E75                       		rts	
00004E36                            ; End of function ColIndexLoad
00004E36                            
00004E36                            ; ===========================================================================
00004E36                            ; ---------------------------------------------------------------------------
00004E36                            ; Collision index pointers
00004E36                            ; ---------------------------------------------------------------------------
00004E36                            ColPointers:
00004E36                            	include "_inc\Collision index pointers.asm"
00004E36                            ; ---------------------------------------------------------------------------
00004E36                            ; Collision index pointers
00004E36                            ; ---------------------------------------------------------------------------
00004E36 0000 0000                  	dc.l Col_GHZ
00004E3A 0000 0000                  	dc.l Col_LZ
00004E3E 0000 0000                  	dc.l Col_MZ
00004E42 0000 0000                  	dc.l Col_SLZ
00004E46 0000 0000                  	dc.l Col_SYZ
00004E4A 0000 0000                  	dc.l Col_SBZ
00004E4E 0000 0000                  	dc.l Col_GHZ ; this is the ending just so it does not fuck up
00004E52 0000 0000                  	dc.l Col_BHZ
00004E52 0000 0000                  	dc.l Col_BHZ
00004E56                            
00004E56                            ; ---------------------------------------------------------------------------
00004E56                            ; Oscillating number subroutine
00004E56                            ; ---------------------------------------------------------------------------
00004E56                            
00004E56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004E56                            
00004E56                            
00004E56                            OscillateNumInit:			; XREF: Level
00004E56 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004E5A 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004E60 7220                       		moveq	#$20,d1
00004E62                            
00004E62                            Osc_Loop:
00004E62 32DA                       		move.w	(a2)+,(a1)+
00004E64 51C9 FFFC                  		dbf	d1,Osc_Loop
00004E68 4E75                       		rts	
00004E6A                            ; End of function OscillateNumInit
00004E6A                            
00004E6A                            ; ===========================================================================
00004E6A 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
00004E6E 0000 0080                  		dc.w 0,	$80
00004E72 0000 0080                  		dc.w 0,	$80
00004E76 0000 0080                  		dc.w 0,	$80
00004E7A 0000 0080                  		dc.w 0,	$80
00004E7E 0000 0080                  		dc.w 0,	$80
00004E82 0000 0080                  		dc.w 0,	$80
00004E86 0000 0080                  		dc.w 0,	$80
00004E8A 0000 0080                  		dc.w 0,	$80
00004E8E 0000 50F0                  		dc.w 0,	$50F0
00004E92 011E 2080                  		dc.w $11E, $2080
00004E96 00B4 3080                  		dc.w $B4, $3080
00004E9A 010E 5080                  		dc.w $10E, $5080
00004E9E 01C2 7080                  		dc.w $1C2, $7080
00004EA2 0276 0080                  		dc.w $276, $80
00004EA6 0000 0080                  		dc.w 0,	$80
00004EAA 0000                       		dc.w 0
00004EAC                            		even
00004EAC                            
00004EAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004EAC                            
00004EAC                            
00004EAC                            OscillateNumDo:				; XREF: Level
00004EAC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004EB2 6400                       		bcc.s	locret_41C4
00004EB4 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004EB8 45F9 0000 0000             		lea	(Osc_Data2).l,a2
00004EBE 3619                       		move.w	(a1)+,d3
00004EC0 720F                       		moveq	#$F,d1
00004EC2                            
00004EC2                            loc_4184:
00004EC2 341A                       		move.w	(a2)+,d2
00004EC4 381A                       		move.w	(a2)+,d4
00004EC6 0303                       		btst	d1,d3
00004EC8 6600                       		bne.s	loc_41A4
00004ECA 3029 0002                  		move.w	2(a1),d0
00004ECE D042                       		add.w	d2,d0
00004ED0 3340 0002                  		move.w	d0,2(a1)
00004ED4 D151                       		add.w	d0,0(a1)
00004ED6 B811                       		cmp.b	0(a1),d4
00004ED8 6200                       		bhi.s	loc_41BA
00004EDA 03C3                       		bset	d1,d3
00004EDC 6000                       		bra.s	loc_41BA
00004EDE                            ; ===========================================================================
00004EDE                            
00004EDE                            loc_41A4:				; XREF: OscillateNumDo
00004EDE 3029 0002                  		move.w	2(a1),d0
00004EE2 9042                       		sub.w	d2,d0
00004EE4 3340 0002                  		move.w	d0,2(a1)
00004EE8 D151                       		add.w	d0,0(a1)
00004EEA B811                       		cmp.b	0(a1),d4
00004EEC 6300                       		bls.s	loc_41BA
00004EEE 0383                       		bclr	d1,d3
00004EF0                            
00004EF0                            loc_41BA:
00004EF0 5849                       		addq.w	#4,a1
00004EF2 51C9 FFCE                  		dbf	d1,loc_4184
00004EF6 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
00004EFA                            
00004EFA                            locret_41C4:
00004EFA 4E75                       		rts	
00004EFC                            ; End of function OscillateNumDo
00004EFC                            
00004EFC                            ; ===========================================================================
00004EFC 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
00004F00 0002 0018                  		dc.w 2,	$18
00004F04 0002 0020                  		dc.w 2,	$20
00004F08 0002 0030                  		dc.w 2,	$30
00004F0C 0004 0020                  		dc.w 4,	$20
00004F10 0008 0008                  		dc.w 8,	8
00004F14 0008 0040                  		dc.w 8,	$40
00004F18 0004 0040                  		dc.w 4,	$40
00004F1C 0002 0050                  		dc.w 2,	$50
00004F20 0002 0050                  		dc.w 2,	$50
00004F24 0002 0020                  		dc.w 2,	$20
00004F28 0003 0030                  		dc.w 3,	$30
00004F2C 0005 0050                  		dc.w 5,	$50
00004F30 0007 0070                  		dc.w 7,	$70
00004F34 0002 0010                  		dc.w 2,	$10
00004F38 0002 0010                  		dc.w 2,	$10
00004F3C                            		even
00004F3C                            
00004F3C                            ; ---------------------------------------------------------------------------
00004F3C                            ; Subroutine to	change object animation	variables (rings, giant	rings)
00004F3C                            ; ---------------------------------------------------------------------------
00004F3C                            
00004F3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004F3C                            
00004F3C                            
00004F3C                            ChangeRingFrame:			; XREF: Level
00004F3C 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004F40 6A00                       		bpl.s	loc_421C
00004F42 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004F48 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
00004F4C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004F52                            
00004F52                            loc_421C:
00004F52 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004F56 6A00                       		bpl.s	loc_4232
00004F58 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
00004F5E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004F62 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004F68                            
00004F68                            loc_4232:
00004F68 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
00004F6C 6A00                       		bpl.s	loc_4250
00004F6E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004F74 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004F78 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
00004F7E 6500                       		bcs.s	loc_4250
00004F80 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004F86                            
00004F86                            loc_4250:
00004F86 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00004F8A 6700                       		beq.s	locret_4272
00004F8C 7000                       		moveq	#0,d0
00004F8E 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004F92 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004F96 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
00004F9A EF58                       		rol.w	#7,d0
00004F9C 0240 0003                  		andi.w	#3,d0
00004FA0 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004FA4 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004FA8                            
00004FA8                            locret_4272:
00004FA8 4E75                       		rts	
00004FAA                            ; End of function ChangeRingFrame
00004FAA                            
00004FAA                            ; ---------------------------------------------------------------------------
00004FAA                            ; End-of-act signpost pattern loading subroutine
00004FAA                            ; ---------------------------------------------------------------------------
00004FAA                            
00004FAA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004FAA                            
00004FAA                            
00004FAA                            SignpostArtLoad:			; XREF: Level
00004FAA 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00004FAE 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004FB2 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004FB8 6700                       		beq.s	Signpost_Exit	; if yes, branch
00004FBA 3038 F700                  		move.w	($FFFFF700).w,d0
00004FBE 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004FC2 0441 0100                  		subi.w	#$100,d1
00004FC6 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004FC8 6D00                       		blt.s	Signpost_Exit	; if not, branch
00004FCA 4A38 FE1E                  		tst.b	($FFFFFE1E).w
00004FCE 6700                       		beq.s	Signpost_Exit
00004FD0 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004FD4 6700                       		beq.s	Signpost_Exit
00004FD6 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
00004FDA 7012                       		moveq	#$12,d0
00004FDC 6000 CEAC                  		bra.w	LoadPLC2	; load signpost	patterns
00004FE0                            ; ===========================================================================
00004FE0                            
00004FE0                            Signpost_Exit:
00004FE0 4E75                       		rts	
00004FE2                            ; End of function SignpostArtLoad
00004FE2                            
00004FE2                            ; ===========================================================================
00004FE2                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00005062                            Demo_MZ:	incbin	demodata\i_mz.bin
00005192                            Demo_SYZ:	incbin	demodata\i_syz.bin
00005212                            Demo_SS:	incbin	demodata\i_ss.bin
00005312                            ; ===========================================================================
00005312                            
00005312                            ; ---------------------------------------------------------------------------
00005312                            ; Special Stage
00005312                            ; ---------------------------------------------------------------------------
00005312                            
00005312                            SpecialStage:				; XREF: GameModeArray
00005312 303C 00CA                  		move.w	#$CA,d0
00005316 6100 C95C                  		bsr.w	PlaySound_Special ; play special stage entry sound
0000531A 6100 D50C                  		bsr.w	Pal_MakeFlash
0000531E 46FC 2700                  		move	#$2700,sr
00005322 4DF9 00C0 0004             		lea	($C00004).l,a6
00005328 3CBC 8B03                  		move.w	#$8B03,(a6)
0000532C 3CBC 8004                  		move.w	#$8004,(a6)
00005330 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
00005336 3CBC 9011                  		move.w	#$9011,(a6)
0000533A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000533E 0200 00BF                  		andi.b	#$BF,d0
00005342 33C0 00C0 0004             		move.w	d0,($C00004).l
00005348 6100 C850                  		bsr.w	ClearScreen
0000534C 46FC 2300                  		move	#$2300,sr
00005350 4BF9 00C0 0004             		lea	($C00004).l,a5
00005356 3ABC 8F01                  		move.w	#$8F01,(a5)
0000535A 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00005360 3ABC 9780                  		move.w	#$9780,(a5)
00005364 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000536A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00005372                            
00005372                            loc_463C:
00005372 3215                       		move.w	(a5),d1
00005374 0801 0001                  		btst	#1,d1
00005378 66F8                       		bne.s	loc_463C
0000537A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000537E 6100 0000                  		bsr.w	SS_BGLoad
00005382 7014                       		moveq	#$14,d0
00005384 6100 CC3E                  		bsr.w	RunPLC_ROM	; load special stage patterns
00005388 43F8 D000                  		lea	($FFFFD000).w,a1
0000538C 7000                       		moveq	#0,d0
0000538E 323C 07FF                  		move.w	#$7FF,d1
00005392                            
00005392                            SS_ClrObjRam:
00005392 22C0                       		move.l	d0,(a1)+
00005394 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00005398                            
00005398 43F8 F700                  		lea	($FFFFF700).w,a1
0000539C 7000                       		moveq	#0,d0
0000539E 323C 003F                  		move.w	#$3F,d1
000053A2                            
000053A2                            SS_ClrRam:
000053A2 22C0                       		move.l	d0,(a1)+
000053A4 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
000053A8                            
000053A8 43F8 FE60                  		lea	($FFFFFE60).w,a1
000053AC 7000                       		moveq	#0,d0
000053AE 323C 0027                  		move.w	#$27,d1
000053B2                            
000053B2                            SS_ClrRam2:
000053B2 22C0                       		move.l	d0,(a1)+
000053B4 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
000053B8                            
000053B8 43F8 AA00                  		lea	($FFFFAA00).w,a1
000053BC 7000                       		moveq	#0,d0
000053BE 323C 007F                  		move.w	#$7F,d1
000053C2                            
000053C2                            SS_ClrNemRam:
000053C2 22C0                       		move.l	d0,(a1)+
000053C4 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
000053C8                            
000053C8 4238 F64E                  		clr.b	($FFFFF64E).w
000053CC 4278 FE02                  		clr.w	($FFFFFE02).w
000053D0 700A                       		moveq	#$A,d0
000053D2 6100 D5D4                  		bsr.w	PalLoad1	; load special stage pallet
000053D6 4EB9 0000 0000             		jsr	SS_Load
000053DC 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000053E4 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000053EC 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000053F2 6100 0000                  		bsr.w	PalCycle_SS
000053F6 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000053FA 4278 F784                  		clr.w	($FFFFF784).w	; set stage angle to "upright"
000053FE 31FC 0002 F786             		move.w	#2,($FFFFF786).w ; set stage rotation speed
00005404 303C 0089                  		move.w	#$89,d0
00005408 6100 C864                  		bsr.w	PlaySound	; play special stage BG	music
0000540C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00005412 43F9 0000 4DB6             		lea	(Demo_Index).l,a1
00005418 7006                       		moveq	#6,d0
0000541A E548                       		lsl.w	#2,d0
0000541C 2271 0000                  		movea.l	(a1,d0.w),a1
00005420 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
00005426 5338 F792                  		subq.b	#1,($FFFFF792).w
0000542A 4278 FE20                  		clr.w	($FFFFFE20).w
0000542E 4238 FE1B                  		clr.b	($FFFFFE1B).w
00005432 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
00005438 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
0000543E                            ;		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
0000543E                            ;		beq.s	SS_NoDebug	; if not, branch
0000543E                            ;		btst	#6,($FFFFF604).w ; is A	button pressed?
0000543E                            ;		beq.s	SS_NoDebug	; if not, branch
0000543E                            ;		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000543E                            
0000543E                            SS_NoDebug:
0000543E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005442 0000 0040                  		ori.b	#$40,d0
00005446 33C0 00C0 0004             		move.w	d0,($C00004).l
0000544C 6100 D32E                  		bsr.w	Pal_MakeWhite
00005450                            
00005450                            ; ---------------------------------------------------------------------------
00005450                            ; Main Special Stage loop
00005450                            ; ---------------------------------------------------------------------------
00005450                            
00005450                            SS_MainLoop:
00005450 6100 C82E                  		bsr.w	PauseGame
00005454 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000545A 6100 DF88                  		bsr.w	DelayProgram
0000545E 4A78 F784                          tst.w   ($FFFFF784).w
00005462 6700                               beq.s   SS_NotReversed
00005464 5378 F784                          subi.w  #1,($FFFFF784).w
00005468                            
00005468                            SS_NotReversed:
00005468 6100 F89C                  		bsr.w	MoveSonicInDemo
0000546C 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00005472 4EB9 0000 0000             		jsr	ObjectsLoad
00005478 4EB9 0000 0000             		jsr	BuildSprites
0000547E 4EB9 0000 0000             		jsr	SS_ShowLayout
00005484 6100 0000                  		bsr.w	SS_BGAnimate
00005488 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000548C 6700                       		beq.s	SS_ChkEnd	; if not, branch
0000548E 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00005492 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
00005496                            
00005496                            SS_ChkEnd:
00005496 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
0000549C 6700 FFB2                  		beq.w	SS_MainLoop	; if yes, branch
000054A0                            
000054A0 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000054A4 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
000054A8 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
000054AE 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
000054B4 6500                       		bcs.s	SS_End		; if not, branch
000054B6 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
000054BA                            
000054BA                            SS_End:
000054BA 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
000054C0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000054C6 4278 F794                  		clr.w	($FFFFF794).w
000054CA                            
000054CA                            SS_EndLoop:
000054CA 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
000054D0 6100 DF12                  		bsr.w	DelayProgram
000054D4 6100 F830                  		bsr.w	MoveSonicInDemo
000054D8 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000054DE 4EB9 0000 0000             		jsr	ObjectsLoad
000054E4 4EB9 0000 0000             		jsr	BuildSprites
000054EA 4EB9 0000 0000             		jsr	SS_ShowLayout
000054F0 6100 0000                  		bsr.w	SS_BGAnimate
000054F4 5378 F794                  		subq.w	#1,($FFFFF794).w
000054F8 6A00                       		bpl.s	loc_47D4
000054FA 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005500 6100 D346                  		bsr.w	Pal_ToWhite
00005504                            
00005504                            loc_47D4:
00005504 4A78 F614                  		tst.w	($FFFFF614).w
00005508 66C0                       		bne.s	SS_EndLoop
0000550A                            
0000550A 46FC 2700                  		move	#$2700,sr
0000550E 4DF9 00C0 0004             		lea	($C00004).l,a6
00005514 3CBC 8230                  		move.w	#$8230,(a6)
00005518 3CBC 8407                  		move.w	#$8407,(a6)
0000551C 3CBC 9001                  		move.w	#$9001,(a6)
00005520 6100 C678                  		bsr.w	ClearScreen
00005524 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
0000552E 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005534 6100 C7E2                  		bsr.w	NemDec
00005538 4EB9 0000 0000             		jsr	Hud_Base
0000553E 46FC 2300                  		move	#$2300,sr
00005542 7011                       		moveq	#$11,d0
00005544 6100 D47E                  		bsr.w	PalLoad2	; load results screen pallet
00005548 7000                       		moveq	#0,d0
0000554A 6100 C93E                  		bsr.w	LoadPLC2
0000554E 701B                       		moveq	#$1B,d0
00005550 6100 C906                  		bsr.w	LoadPLC		; load results screen patterns
00005554 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
0000555A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00005560 3038 FE20                  		move.w	($FFFFFE20).w,d0
00005564 C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
00005568 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
0000556C 303C 008E                  		move.w	#$8E,d0
00005570 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play end-of-level music
00005576 43F8 D000                  		lea	($FFFFD000).w,a1
0000557A 7000                       		moveq	#0,d0
0000557C 323C 07FF                  		move.w	#$7FF,d1
00005580                            
00005580                            SS_EndClrObjRam:
00005580 22C0                       		move.l	d0,(a1)+
00005582 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
00005586                            
00005586 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
0000558C                            
0000558C                            SS_NormalExit:
0000558C 6100 C6F2                  		bsr.w	PauseGame
00005590 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
00005596 6100 DE4C                  		bsr.w	DelayProgram
0000559A 4EB9 0000 0000             		jsr	ObjectsLoad
000055A0 4EB9 0000 0000             		jsr	BuildSprites
000055A6 6100 C91C                  		bsr.w	RunPLC_RAM
000055AA 4A78 FE02                  		tst.w	($FFFFFE02).w
000055AE 67DC                       		beq.s	SS_NormalExit
000055B0 4AB8 F680                  		tst.l	($FFFFF680).w
000055B4 66D6                       		bne.s	SS_NormalExit
000055B6 303C 00CA                  		move.w	#$CA,d0
000055BA 6100 C6B8                  		bsr.w	PlaySound_Special ; play special stage exit sound
000055BE 6100 D268                  		bsr.w	Pal_MakeFlash
000055C2 4E75                       		rts	
000055C4                            ; ===========================================================================
000055C4                            
000055C4                            SS_ToSegaScreen:
000055C4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
000055CA 4E75                       		rts
000055CC                            
000055CC                            ; ---------------------------------------------------------------------------
000055CC                            ; Special stage	background loading subroutine
000055CC                            ; ---------------------------------------------------------------------------
000055CC                            
000055CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000055CC                            
000055CC                            
000055CC                            SS_BGLoad:				; XREF: SpecialStage
000055CC 43F9 00FF 0000             		lea	($FF0000).l,a1
000055D2 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
000055D8 303C 4051                  		move.w	#$4051,d0
000055DC 6100 CA18                  		bsr.w	EniDec
000055E0 263C 5000 0001             		move.l	#$50000001,d3
000055E6 45F9 00FF 0080             		lea	($FF0080).l,a2
000055EC 7E06                       		moveq	#6,d7
000055EE                            
000055EE                            loc_48BE:
000055EE 2003                       		move.l	d3,d0
000055F0 7C03                       		moveq	#3,d6
000055F2 7800                       		moveq	#0,d4
000055F4 0C47 0003                  		cmpi.w	#3,d7
000055F8 6400                       		bcc.s	loc_48CC
000055FA 7801                       		moveq	#1,d4
000055FC                            
000055FC                            loc_48CC:
000055FC 7A07                       		moveq	#7,d5
000055FE                            
000055FE                            loc_48CE:
000055FE 224A                       		movea.l	a2,a1
00005600 0A04 0001                  		eori.b	#1,d4
00005604 6600                       		bne.s	loc_48E2
00005606 0C47 0006                  		cmpi.w	#6,d7
0000560A 6600                       		bne.s	loc_48F2
0000560C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005612                            
00005612                            loc_48E2:
00005612 48E7 F800                  		movem.l	d0-d4,-(sp)
00005616 7207                       		moveq	#7,d1
00005618 7407                       		moveq	#7,d2
0000561A 6100 C6DC                  		bsr.w	ShowVDPGraphics
0000561E 4CDF 001F                  		movem.l	(sp)+,d0-d4
00005622                            
00005622                            loc_48F2:
00005622 0680 0010 0000             		addi.l	#$100000,d0
00005628 51CD FFD4                  		dbf	d5,loc_48CE
0000562C 0680 0380 0000             		addi.l	#$3800000,d0
00005632 0A04 0001                  		eori.b	#1,d4
00005636 51CE FFC4                  		dbf	d6,loc_48CC
0000563A 0683 1000 0000             		addi.l	#$10000000,d3
00005640 6A00                       		bpl.s	loc_491C
00005642 4843                       		swap	d3
00005644 0683 0000 C000             		addi.l	#$C000,d3
0000564A 4843                       		swap	d3
0000564C                            
0000564C                            loc_491C:
0000564C D4FC 0080                  		adda.w	#$80,a2
00005650 51CF FF9C                  		dbf	d7,loc_48BE
00005654 43F9 00FF 0000             		lea	($FF0000).l,a1
0000565A 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00005660 303C 4000                  		move.w	#$4000,d0
00005664 6100 C990                  		bsr.w	EniDec
00005668 43F9 00FF 0000             		lea	($FF0000).l,a1
0000566E 203C 4000 0003             		move.l	#$40000003,d0
00005674 723F                       		moveq	#$3F,d1
00005676 741F                       		moveq	#$1F,d2
00005678 6100 C67E                  		bsr.w	ShowVDPGraphics
0000567C 43F9 00FF 0000             		lea	($FF0000).l,a1
00005682 203C 5000 0003             		move.l	#$50000003,d0
00005688 723F                       		moveq	#$3F,d1
0000568A 743F                       		moveq	#$3F,d2
0000568C 6100 C66A                  		bsr.w	ShowVDPGraphics
00005690 4E75                       		rts	
00005692                            ; End of function SS_BGLoad
00005692                            
00005692                            ; ---------------------------------------------------------------------------
00005692                            ; Pallet cycling routine - special stage
00005692                            ; ---------------------------------------------------------------------------
00005692                            
00005692                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005692                            
00005692                            
00005692                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00005692 4A78 F63A                  		tst.w	($FFFFF63A).w
00005696 6600                       		bne.s	locret_49E6
00005698 5378 F79C                  		subq.w	#1,($FFFFF79C).w
0000569C 6A00                       		bpl.s	locret_49E6
0000569E 4DF9 00C0 0004             		lea	($C00004).l,a6
000056A4 3038 F79A                  		move.w	($FFFFF79A).w,d0
000056A8 5278 F79A                  		addq.w	#1,($FFFFF79A).w
000056AC 0240 001F                  		andi.w	#$1F,d0
000056B0 E548                       		lsl.w	#2,d0
000056B2 41F9 0000 0000             		lea	(byte_4A3C).l,a0
000056B8 D0C0                       		adda.w	d0,a0
000056BA 1018                       		move.b	(a0)+,d0
000056BC 6A00                       		bpl.s	loc_4992
000056BE 303C 01FF                  		move.w	#$1FF,d0
000056C2                            
000056C2                            loc_4992:
000056C2 31C0 F79C                  		move.w	d0,($FFFFF79C).w
000056C6 7000                       		moveq	#0,d0
000056C8 1018                       		move.b	(a0)+,d0
000056CA 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
000056CE 43F9 0000 0000             		lea	(byte_4ABC).l,a1
000056D4 43F1 0000                  		lea	(a1,d0.w),a1
000056D8 303C 8200                  		move.w	#-$7E00,d0
000056DC 1019                       		move.b	(a1)+,d0
000056DE 3C80                       		move.w	d0,(a6)
000056E0 11D1 F616                  		move.b	(a1),($FFFFF616).w
000056E4 303C 8400                  		move.w	#-$7C00,d0
000056E8 1018                       		move.b	(a0)+,d0
000056EA 3C80                       		move.w	d0,(a6)
000056EC 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000056F6 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000056FE 7000                       		moveq	#0,d0
00005700 1018                       		move.b	(a0)+,d0
00005702 6B00                       		bmi.s	loc_49E8
00005704 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
0000570A D2C0                       		adda.w	d0,a1
0000570C 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
00005710 24D9                       		move.l	(a1)+,(a2)+
00005712 24D9                       		move.l	(a1)+,(a2)+
00005714 24D9                       		move.l	(a1)+,(a2)+
00005716                            
00005716                            locret_49E6:
00005716 4E75                       		rts	
00005718                            ; ===========================================================================
00005718                            
00005718                            loc_49E8:				; XREF: PalCycle_SS
00005718 3238 F79E                  		move.w	($FFFFF79E).w,d1
0000571C 0C40 008A                  		cmpi.w	#$8A,d0
00005720 6500                       		bcs.s	loc_49F4
00005722 5241                       		addq.w	#1,d1
00005724                            
00005724                            loc_49F4:
00005724 C2FC 002A                  		mulu.w	#$2A,d1
00005728 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
0000572E D2C1                       		adda.w	d1,a1
00005730 0240 007F                  		andi.w	#$7F,d0
00005734 0880 0000                  		bclr	#0,d0
00005738 6700                       		beq.s	loc_4A18
0000573A 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
0000573E 24D1                       		move.l	(a1),(a2)+
00005740 24E9 0004                  		move.l	4(a1),(a2)+
00005744 24E9 0008                  		move.l	8(a1),(a2)+
00005748                            
00005748                            loc_4A18:
00005748 D2FC 000C                  		adda.w	#$C,a1
0000574C 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00005750 0C40 000A                  		cmpi.w	#$A,d0
00005754 6500                       		bcs.s	loc_4A2E
00005756 0440 000A                  		subi.w	#$A,d0
0000575A 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
0000575E                            
0000575E                            loc_4A2E:
0000575E 3200                       		move.w	d0,d1
00005760 D040                       		add.w	d0,d0
00005762 D041                       		add.w	d1,d0
00005764 D2C0                       		adda.w	d0,a1
00005766 24D9                       		move.l	(a1)+,(a2)+
00005768 34D9                       		move.w	(a1)+,(a2)+
0000576A 4E75                       		rts	
0000576C                            ; End of function PalCycle_SS
0000576C                            
0000576C                            ; ===========================================================================
0000576C 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
0000577C                            					; XREF: PalCycle_SS
0000577C 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
0000578C 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
0000579C FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
000057AC 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
000057BC 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
000057CC 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
000057DC FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
000057EC                            		even
000057EC 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
000057FA                            					; XREF: PalCycle_SS
000057FA                            		even
000057FA                            
000057FA                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00005842                            		even
00005842                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00005914                            		even
00005914                            
00005914                            ; ---------------------------------------------------------------------------
00005914                            ; Subroutine to	make the special stage background animated
00005914                            ; ---------------------------------------------------------------------------
00005914                            
00005914                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005914                            
00005914                            
00005914                            SS_BGAnimate:				; XREF: SpecialStage
00005914 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00005918 6600                       		bne.s	loc_4BF6
0000591A 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00005920 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005926                            
00005926                            loc_4BF6:
00005926 0C40 0008                  		cmpi.w	#8,d0
0000592A 6400                       		bcc.s	loc_4C4E
0000592C 0C40 0006                  		cmpi.w	#6,d0
00005930 6600                       		bne.s	loc_4C10
00005932 5278 F718                  		addq.w	#1,($FFFFF718).w
00005936 5278 F70C                  		addq.w	#1,($FFFFF70C).w
0000593A 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00005940                            
00005940                            loc_4C10:
00005940 7000                       		moveq	#0,d0
00005942 3038 F708                  		move.w	($FFFFF708).w,d0
00005946 4440                       		neg.w	d0
00005948 4840                       		swap	d0
0000594A 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00005950 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005954 7609                       		moveq	#9,d3
00005956                            
00005956                            loc_4C26:
00005956 302B 0002                  		move.w	2(a3),d0
0000595A 6100 DABA                  		bsr.w	CalcSine
0000595E 7400                       		moveq	#0,d2
00005960 1419                       		move.b	(a1)+,d2
00005962 C1C2                       		muls.w	d2,d0
00005964 E080                       		asr.l	#8,d0
00005966 36C0                       		move.w	d0,(a3)+
00005968 1419                       		move.b	(a1)+,d2
0000596A 4882                       		ext.w	d2
0000596C D55B                       		add.w	d2,(a3)+
0000596E 51CB FFE6                  		dbf	d3,loc_4C26
00005972 47F8 AA00                  		lea	($FFFFAA00).w,a3
00005976 45F9 0000 0000             		lea	(byte_4CB8).l,a2
0000597C 6000                       		bra.s	loc_4C7E
0000597E                            ; ===========================================================================
0000597E                            
0000597E                            loc_4C4E:				; XREF: SS_BGAnimate
0000597E 0C40 000C                  		cmpi.w	#$C,d0
00005982 6600                       		bne.s	loc_4C74
00005984 5378 F718                  		subq.w	#1,($FFFFF718).w
00005988 47F8 AB00                  		lea	($FFFFAB00).w,a3
0000598C 243C 0001 8000             		move.l	#$18000,d2
00005992 7206                       		moveq	#6,d1
00005994                            
00005994                            loc_4C64:
00005994 2013                       		move.l	(a3),d0
00005996 9082                       		sub.l	d2,d0
00005998 26C0                       		move.l	d0,(a3)+
0000599A 0482 0000 2000             		subi.l	#$2000,d2
000059A0 51C9 FFF2                  		dbf	d1,loc_4C64
000059A4                            
000059A4                            loc_4C74:
000059A4 47F8 AB00                  		lea	($FFFFAB00).w,a3
000059A8 45F9 0000 0000             		lea	(byte_4CC4).l,a2
000059AE                            
000059AE                            loc_4C7E:
000059AE 43F8 CC00                  		lea	($FFFFCC00).w,a1
000059B2 3038 F718                  		move.w	($FFFFF718).w,d0
000059B6 4440                       		neg.w	d0
000059B8 4840                       		swap	d0
000059BA 7600                       		moveq	#0,d3
000059BC 161A                       		move.b	(a2)+,d3
000059BE 3438 F70C                  		move.w	($FFFFF70C).w,d2
000059C2 4442                       		neg.w	d2
000059C4 0242 00FF                  		andi.w	#$FF,d2
000059C8 E54A                       		lsl.w	#2,d2
000059CA                            
000059CA                            loc_4C9A:
000059CA 301B                       		move.w	(a3)+,d0
000059CC 544B                       		addq.w	#2,a3
000059CE 7200                       		moveq	#0,d1
000059D0 121A                       		move.b	(a2)+,d1
000059D2 5341                       		subq.w	#1,d1
000059D4                            
000059D4                            loc_4CA4:
000059D4 2380 2000                  		move.l	d0,(a1,d2.w)
000059D8 5842                       		addq.w	#4,d2
000059DA 0242 03FC                  		andi.w	#$3FC,d2
000059DE 51C9 FFF4                  		dbf	d1,loc_4CA4
000059E2 51CB FFE6                  		dbf	d3,loc_4C9A
000059E6 4E75                       		rts	
000059E8                            ; End of function SS_BGAnimate
000059E8                            
000059E8                            ; ===========================================================================
000059E8 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
000059F4                            		even
000059F4 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
000059FC                            		even
000059FC 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00005A10                            		even
00005A10                            					; XREF: SS_BGAnimate
00005A10                            ; ===========================================================================
00005A10                            
00005A10                            ; ---------------------------------------------------------------------------
00005A10                            ; Continue screen
00005A10                            ; ---------------------------------------------------------------------------
00005A10                            
00005A10                            ContinueScreen:				; XREF: GameModeArray
00005A10 6100 CCEC                  		bsr.w	Pal_FadeFrom
00005A14 46FC 2700                  		move	#$2700,sr
00005A18 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005A1C 0200 00BF                  		andi.b	#$BF,d0
00005A20 33C0 00C0 0004             		move.w	d0,($C00004).l
00005A26 4DF9 00C0 0004             		lea	($C00004).l,a6
00005A2C 3CBC 8004                  		move.w	#$8004,(a6)
00005A30 3CBC 8700                  		move.w	#$8700,(a6)
00005A34 6100 C164                  		bsr.w	ClearScreen
00005A38 43F8 D000                  		lea	($FFFFD000).w,a1
00005A3C 7000                       		moveq	#0,d0
00005A3E 323C 07FF                  		move.w	#$7FF,d1
00005A42                            
00005A42                            Cont_ClrObjRam:
00005A42 22C0                       		move.l	d0,(a1)+
00005A44 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00005A48                            
00005A48 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00005A52 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00005A58 6100 C2BE                  		bsr.w	NemDec
00005A5C 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00005A66 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00005A6C 6100 C2AA                  		bsr.w	NemDec
00005A70 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00005A7A 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00005A80 6100 C296                  		bsr.w	NemDec
00005A84 720A                       		moveq	#10,d1
00005A86 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00005A8C 7012                       		moveq	#$12,d0
00005A8E 6100 CF18                  		bsr.w	PalLoad1	; load continue	screen pallet
00005A92 103C 0090                  		move.b	#$90,d0
00005A96 6100 C1D6                  		bsr.w	PlaySound	; play continue	music
00005A9A 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00005AA0 42B8 F700                  		clr.l	($FFFFF700).w
00005AA4 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00005AAC 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00005AB2 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00005AB8 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00005ABE 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00005AC4 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00005ACA 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00005AD0 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00005AD6 4EB9 0000 0000             		jsr	ObjectsLoad
00005ADC 4EB9 0000 0000             		jsr	BuildSprites
00005AE2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005AE6 0000 0040                  		ori.b	#$40,d0
00005AEA 33C0 00C0 0004             		move.w	d0,($C00004).l
00005AF0 6100 CB62                  		bsr.w	Pal_FadeTo
00005AF4                            
00005AF4                            ; ---------------------------------------------------------------------------
00005AF4                            ; Continue screen main loop
00005AF4                            ; ---------------------------------------------------------------------------
00005AF4                            
00005AF4                            Cont_MainLoop:
00005AF4 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00005AFA 6100 D8E8                  		bsr.w	DelayProgram
00005AFE 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B04 6400                       		bcc.s	loc_4DF2
00005B06 46FC 2700                  		move	#$2700,sr
00005B0A 3238 F614                  		move.w	($FFFFF614).w,d1
00005B0E 82FC 003C                  		divu.w	#$3C,d1
00005B12 0281 0000 000F             		andi.l	#$F,d1
00005B18 4EB9 0000 0000             		jsr	ContScrCounter
00005B1E 46FC 2300                  		move	#$2300,sr
00005B22                            
00005B22                            loc_4DF2:
00005B22 4EB9 0000 0000             		jsr	ObjectsLoad
00005B28 4EB9 0000 0000             		jsr	BuildSprites
00005B2E 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00005B34 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00005B36 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005B3C 64B6                       		bcc.s	Cont_MainLoop
00005B3E 4A78 F614                  		tst.w	($FFFFF614).w
00005B42 6600 FFB0                  		bne.w	Cont_MainLoop
00005B46 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00005B4C 4E75                       		rts	
00005B4E                            ; ===========================================================================
00005B4E                            
00005B4E                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00005B4E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00005B54 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
00005B5A 7000                       		moveq	#0,d0
00005B5C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00005B60 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00005B64 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00005B68 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00005B6C 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00005B70 4E75                       		rts	
00005B72                            ; ===========================================================================
00005B72                            
00005B72                            ; ---------------------------------------------------------------------------
00005B72                            ; Object 80 - Continue screen elements
00005B72                            ; ---------------------------------------------------------------------------
00005B72                            
00005B72                            Obj80:					; XREF: Obj_Index
00005B72 7000                       		moveq	#0,d0
00005B74 1028 0024                  		move.b	$24(a0),d0
00005B78 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00005B7C 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00005B80                            ; ===========================================================================
00005B80 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00005B82 0000                       		dc.w Obj80_Display-Obj80_Index
00005B84 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00005B86 0000                       		dc.w Obj80_ChkType-Obj80_Index
00005B88                            ; ===========================================================================
00005B88                            
00005B88                            Obj80_Main:				; XREF: Obj80_Index
00005B88 5428 0024                  		addq.b	#2,$24(a0)
00005B8C 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005B94 317C 8500 0002             		move.w	#$8500,2(a0)
00005B9A 117C 0000 0001             		move.b	#0,1(a0)
00005BA0 117C 003C 0019             		move.b	#$3C,$19(a0)
00005BA6 317C 0120 0008             		move.w	#$120,8(a0)
00005BAC 317C 00C0 000A             		move.w	#$C0,$A(a0)
00005BB2 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00005BB8                            
00005BB8                            Obj80_Display:				; XREF: Obj80_Index
00005BB8 4EF9 0000 0000             		jmp	DisplaySprite
00005BBE                            ; ===========================================================================
00005BBE                            Obj80_MiniSonicPos:
00005BBE 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00005BD0 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00005BDC                            ; ===========================================================================
00005BDC                            
00005BDC                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00005BDC 2248                       		movea.l	a0,a1
00005BDE 45F9 0000 5BBE             		lea	(Obj80_MiniSonicPos).l,a2
00005BE4 7200                       		moveq	#0,d1
00005BE6 1238 FE18                  		move.b	($FFFFFE18).w,d1
00005BEA 5501                       		subq.b	#2,d1
00005BEC 6400                       		bcc.s	loc_4EC4
00005BEE 4EF9 0000 0000             		jmp	DeleteObject
00005BF4                            ; ===========================================================================
00005BF4                            
00005BF4                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00005BF4 7601                       		moveq	#1,d3
00005BF6 0C01 000E                  		cmpi.b	#$E,d1
00005BFA 6500                       		bcs.s	loc_4ED0
00005BFC 7600                       		moveq	#0,d3
00005BFE 720E                       		moveq	#$E,d1
00005C00                            
00005C00                            loc_4ED0:
00005C00 1401                       		move.b	d1,d2
00005C02 0202 0001                  		andi.b	#1,d2
00005C06                            
00005C06                            Obj80_MiniSonLoop:
00005C06 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00005C0A 335A 0008                  		move.w	(a2)+,8(a1)
00005C0E 4A02                       		tst.b	d2
00005C10 6700                       		beq.s	loc_4EEA
00005C12 0469 000A 0008             		subi.w	#$A,8(a1)
00005C18                            
00005C18                            loc_4EEA:
00005C18 337C 00D0 000A             		move.w	#$D0,$A(a1)
00005C1E 137C 0006 001A             		move.b	#6,$1A(a1)
00005C24 137C 0006 0024             		move.b	#6,$24(a1)
00005C2A 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00005C32 337C 8551 0002             		move.w	#$8551,2(a1)
00005C38 137C 0000 0001             		move.b	#0,1(a1)
00005C3E 43E9 0040                  		lea	$40(a1),a1
00005C42 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00005C46 43E9 FFC0                  		lea	-$40(a1),a1
00005C4A 1343 0028                  		move.b	d3,$28(a1)
00005C4E                            
00005C4E                            Obj80_ChkType:				; XREF: Obj80_Index
00005C4E 4A28 0028                  		tst.b	$28(a0)
00005C52 6700                       		beq.s	loc_4F40
00005C54 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00005C5A 6500                       		bcs.s	loc_4F40
00005C5C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005C60 0200 0001                  		andi.b	#1,d0
00005C64 6600                       		bne.s	loc_4F40
00005C66 4A78 D010                  		tst.w	($FFFFD010).w
00005C6A 6600                       		bne.s	Obj80_Delete
00005C6C 4E75                       		rts	
00005C6E                            ; ===========================================================================
00005C6E                            
00005C6E                            loc_4F40:				; XREF: Obj80_ChkType
00005C6E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00005C72 0200 000F                  		andi.b	#$F,d0
00005C76 6600                       		bne.s	Obj80_Display2
00005C78 0868 0000 001A             		bchg	#0,$1A(a0)
00005C7E                            
00005C7E                            Obj80_Display2:
00005C7E 4EF9 0000 0000             		jmp	DisplaySprite
00005C84                            ; ===========================================================================
00005C84                            
00005C84                            Obj80_Delete:				; XREF: Obj80_ChkType
00005C84 4EF9 0000 0000             		jmp	DeleteObject
00005C8A                            ; ===========================================================================
00005C8A                            
00005C8A                            ; ---------------------------------------------------------------------------
00005C8A                            ; Object 81 - Sonic on the continue screen
00005C8A                            ; ---------------------------------------------------------------------------
00005C8A                            
00005C8A                            Obj81:					; XREF: Obj_Index
00005C8A 7000                       		moveq	#0,d0
00005C8C 1028 0024                  		move.b	$24(a0),d0
00005C90 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00005C94 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00005C98 4EF9 0000 0000             		jmp	DisplaySprite
00005C9E                            ; ===========================================================================
00005C9E 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00005CA0 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00005CA2 0000                       		dc.w Obj81_Animate-Obj81_Index
00005CA4 0000                       		dc.w Obj81_Run-Obj81_Index
00005CA6                            ; ===========================================================================
00005CA6                            
00005CA6                            Obj81_Main:				; XREF: Obj81_Index
00005CA6 5428 0024                  		addq.b	#2,$24(a0)
00005CAA 317C 00A0 0008             		move.w	#$A0,8(a0)
00005CB0 317C 00C0 000C             		move.w	#$C0,$C(a0)
00005CB6 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005CBE 317C 0780 0002             		move.w	#$780,2(a0)
00005CC4 117C 0004 0001             		move.b	#4,1(a0)
00005CCA 117C 0002 0018             		move.b	#2,$18(a0)
00005CD0 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00005CD6 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00005CDC                            
00005CDC                            Obj81_ChkLand:				; XREF: Obj81_Index
00005CDC 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00005CE2 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00005CE4 5428 0024                  		addq.b	#2,$24(a0)
00005CE8 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00005CEC 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00005CF4 317C 8500 0002             		move.w	#$8500,2(a0)
00005CFA 117C 0000 001C             		move.b	#0,$1C(a0)
00005D00 6000                       		bra.s	Obj81_Animate
00005D02                            ; ===========================================================================
00005D02                            
00005D02                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00005D02 4EB9 0000 0000             		jsr	SpeedToPos
00005D08 4EB9 0000 0000             		jsr	Sonic_Animate
00005D0E 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005D14                            ; ===========================================================================
00005D14                            
00005D14                            Obj81_Animate:				; XREF: Obj81_Index
00005D14 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00005D18 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00005D1A 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00005D20 4EF9 0000 0000             		jmp	AnimateSprite
00005D26                            ; ===========================================================================
00005D26                            
00005D26                            Obj81_GetUp:				; XREF: Obj81_Animate
00005D26 5428 0024                  		addq.b	#2,$24(a0)
00005D2A 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00005D32 317C 0780 0002             		move.w	#$780,2(a0)
00005D38 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005D3E 4268 0014                  		clr.w	$14(a0)
00005D42 5168 000C                  		subq.w	#8,$C(a0)
00005D46 103C 00E0                  		move.b	#$E0,d0
00005D4A 6100 BF28                  		bsr.w	PlaySound_Special ; fade out music
00005D4E                            
00005D4E                            Obj81_Run:				; XREF: Obj81_Index
00005D4E 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
00005D54 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
00005D56 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005D5C 6000                       		bra.s	Obj81_ShowRun
00005D5E                            ; ===========================================================================
00005D5E                            
00005D5E                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005D5E 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
00005D64                            
00005D64                            Obj81_ShowRun:				; XREF: Obj81_Run
00005D64 4EB9 0000 0000             		jsr	SpeedToPos
00005D6A 4EB9 0000 0000             		jsr	Sonic_Animate
00005D70 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00005D76                            ; ===========================================================================
00005D76                            Ani_obj81:
00005D76                            	include "_anim\obj81.asm"
00005D76                            ; ---------------------------------------------------------------------------
00005D76                            ; Animation script - Sonic on the continue screen
00005D76                            ; ---------------------------------------------------------------------------
00005D76 0000                       		dc.w byte_504A-Ani_obj81
00005D78 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
00005D84 00                         		even
00005D84 00                         		even
00005D84                            
00005D84                            ; ---------------------------------------------------------------------------
00005D84                            ; Sprite mappings - Continue screen
00005D84                            ; ---------------------------------------------------------------------------
00005D84                            Map_obj80:
00005D84                            	include "_maps\obj80.asm"
00005D84                            ; ---------------------------------------------------------------------------
00005D84                            ; Sprite mappings - Continue screen
00005D84                            ; ---------------------------------------------------------------------------
00005D84 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
00005D88 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005D8C 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005D90 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
00005D94 0B                         byte_5066:	dc.b $B
00005D95 F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005D9A F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005D9F F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
00005DA4 F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
00005DA9 F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005DAE F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005DB3 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
00005DB8 F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005DBD 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005DC2 3805 2021 08               		dc.b $38, 5, $20, $21, 8
00005DC7 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005DCC 03                         byte_509E:	dc.b 3
00005DCD 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005DD2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005DD7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005DDC 03                         byte_50AE:	dc.b 3
00005DDD 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
00005DE2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005DE7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005DEC 03                         byte_50BE:	dc.b 3
00005DED 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
00005DF2 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
00005DF7 F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
00005DFC 02                         byte_50CE:	dc.b 2
00005DFD 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
00005E02 6009 2800 00               		dc.b $60, 9, $28, 0, 0
00005E07 01                         byte_50D9:	dc.b 1
00005E08 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
00005E0D 01                         byte_50DF:	dc.b 1
00005E0E 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
00005E14 00                         		even
00005E14 00                         		even
00005E14                            
00005E14                            ; ===========================================================================
00005E14                            ; ---------------------------------------------------------------------------
00005E14                            ; Ending sequence in Green Hill	Zone
00005E14                            ; ---------------------------------------------------------------------------
00005E14                            
00005E14                            EndingSequence:				; XREF: GameModeArray
00005E14 103C 00E4                  		move.b	#$E4,d0
00005E18 6100 BE5A                  		bsr.w	PlaySound_Special ; stop music
00005E1C 6100 C8E0                  		bsr.w	Pal_FadeFrom
00005E20 43F8 D000                  		lea	($FFFFD000).w,a1
00005E24 7000                       		moveq	#0,d0
00005E26 323C 07FF                  		move.w	#$7FF,d1
00005E2A                            
00005E2A                            End_ClrObjRam:
00005E2A 22C0                       		move.l	d0,(a1)+
00005E2C 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
00005E30                            
00005E30 43F8 F628                  		lea	($FFFFF628).w,a1
00005E34 7000                       		moveq	#0,d0
00005E36 323C 0015                  		move.w	#$15,d1
00005E3A                            
00005E3A                            End_ClrRam:
00005E3A 22C0                       		move.l	d0,(a1)+
00005E3C 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005E40                            
00005E40 43F8 F700                  		lea	($FFFFF700).w,a1
00005E44 7000                       		moveq	#0,d0
00005E46 323C 003F                  		move.w	#$3F,d1
00005E4A                            
00005E4A                            End_ClrRam2:
00005E4A 22C0                       		move.l	d0,(a1)+
00005E4C 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005E50                            
00005E50 43F8 FE60                  		lea	($FFFFFE60).w,a1
00005E54 7000                       		moveq	#0,d0
00005E56 323C 0047                  		move.w	#$47,d1
00005E5A                            
00005E5A                            End_ClrRam3:
00005E5A 22C0                       		move.l	d0,(a1)+
00005E5C 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005E60                            
00005E60 46FC 2700                  		move	#$2700,sr
00005E64 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005E68 0200 00BF                  		andi.b	#$BF,d0
00005E6C 33C0 00C0 0004             		move.w	d0,($C00004).l
00005E72 6100 BD26                  		bsr.w	ClearScreen
00005E76 4DF9 00C0 0004             		lea	($C00004).l,a6
00005E7C 3CBC 8B03                  		move.w	#$8B03,(a6)
00005E80 3CBC 8230                  		move.w	#$8230,(a6)
00005E84 3CBC 8407                  		move.w	#$8407,(a6)
00005E88 3CBC 857C                  		move.w	#$857C,(a6)
00005E8C 3CBC 9001                  		move.w	#$9001,(a6)
00005E90 3CBC 8004                  		move.w	#$8004,(a6)
00005E94 3CBC 8720                  		move.w	#$8720,(a6)
00005E98 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005E9E 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005EA2 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00005EA8 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005EAE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005EB4 6700                       		beq.s	End_LoadData	; if yes, branch
00005EB6 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005EBC                            
00005EBC                            End_LoadData:
00005EBC 701C                       		moveq	#$1C,d0
00005EBE 6100 C104                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005EC2 4EB9 0000 0000             		jsr	Hud_Base
00005EC8 6100 0000                  		bsr.w	LevelSizeLoad
00005ECC 6100 0000                  		bsr.w	DeformBgLayer
00005ED0 08F8 0002 F754             		bset	#2,($FFFFF754).w
00005ED6 6100 0000                  		bsr.w	MainLoadBlockLoad
00005EDA 6100 0000                  		bsr.w	LoadTilesFromStart
00005EDE 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
00005EE6 46FC 2300                  		move	#$2300,sr
00005EEA 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
00005EF0 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
00005EF4 6100 C27E                  		bsr.w	KosDec
00005EF8 7003                       		moveq	#3,d0
00005EFA 6100 CAAC                  		bsr.w	PalLoad1	; load Sonic's pallet
00005EFE 303C 008B                  		move.w	#$8B,d0
00005F02 6100 BD6A                  		bsr.w	PlaySound	; play ending sequence music
00005F06 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
00005F0C 6700                       		beq.s	End_LoadSonic	; if not, branch
00005F0E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00005F14                            
00005F14                            End_LoadSonic:
00005F14 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00005F1A 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
00005F20 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
00005F26 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
00005F2C 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
00005F32 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00005F38 4EB9 0000 0000             		jsr	ObjPosLoad
00005F3E 4EB9 0000 0000             		jsr	ObjectsLoad
00005F44 4EB9 0000 0000             		jsr	BuildSprites
00005F4A 7000                       		moveq	#0,d0
00005F4C 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005F50 21C0 FE22                  		move.l	d0,($FFFFFE22).w
00005F54 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
00005F58 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005F5C 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005F60 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
00005F64 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
00005F68 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005F6C 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005F70 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00005F74 6100 EEE0                  		bsr.w	OscillateNumInit
00005F78 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005F7E 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
00005F84 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005F8A 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005F90 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005F96 6100 D44C                  		bsr.w	DelayProgram
00005F9A 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005F9E 0000 0040                  		ori.b	#$40,d0
00005FA2 33C0 00C0 0004             		move.w	d0,($C00004).l
00005FA8 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005FAE 6100 C6A4                  		bsr.w	Pal_FadeTo
00005FB2                            
00005FB2                            ; ---------------------------------------------------------------------------
00005FB2                            ; Main ending sequence loop
00005FB2                            ; ---------------------------------------------------------------------------
00005FB2                            
00005FB2                            End_MainLoop:
00005FB2 6100 BCCC                  		bsr.w	PauseGame
00005FB6 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005FBC 6100 D426                  		bsr.w	DelayProgram
00005FC0 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00005FC4 6100 0000                  		bsr.w	End_MoveSonic
00005FC8 4EB9 0000 0000             		jsr	ObjectsLoad
00005FCE 6100 0000                  		bsr.w	DeformBgLayer
00005FD2 4EB9 0000 0000             		jsr	BuildSprites
00005FD8 4EB9 0000 0000             		jsr	ObjPosLoad
00005FDE 6100 C234                  		bsr.w	PalCycle_Load
00005FE2 6100 EEC8                  		bsr.w	OscillateNumDo
00005FE6 6100 EF54                  		bsr.w	ChangeRingFrame
00005FEA 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
00005FF0 6700                       		beq.s	loc_52DA	; if yes, branch
00005FF2 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
00005FF8 103C 0091                  		move.b	#$91,d0
00005FFC 6100 BC76                  		bsr.w	PlaySound_Special ; play credits music
00006000 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
00006006 4E75                       		rts	
00006008                            ; ===========================================================================
00006008                            
00006008                            loc_52DA:
00006008 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
0000600C 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
00006010                            
00006010 4278 FE02                  		clr.w	($FFFFFE02).w
00006014 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000601A 4278 F794                  		clr.w	($FFFFF794).w
0000601E                            
0000601E                            End_AllEmlds:				; XREF: loc_5334
0000601E 6100 BC60                  		bsr.w	PauseGame
00006022 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00006028 6100 D3BA                  		bsr.w	DelayProgram
0000602C 5278 FE04                  		addq.w	#1,($FFFFFE04).w
00006030 6100 0000                  		bsr.w	End_MoveSonic
00006034 4EB9 0000 0000             		jsr	ObjectsLoad
0000603A 6100 0000                  		bsr.w	DeformBgLayer
0000603E 4EB9 0000 0000             		jsr	BuildSprites
00006044 4EB9 0000 0000             		jsr	ObjPosLoad
0000604A 6100 EE60                  		bsr.w	OscillateNumDo
0000604E 6100 EEEC                  		bsr.w	ChangeRingFrame
00006052 5378 F794                  		subq.w	#1,($FFFFF794).w
00006056 6A00                       		bpl.s	loc_5334
00006058 31FC 0002 F794             		move.w	#2,($FFFFF794).w
0000605E 6100 C7E8                  		bsr.w	Pal_ToWhite
00006062                            
00006062                            loc_5334:
00006062 4A78 FE02                  		tst.w	($FFFFFE02).w
00006066 6700 FFB6                  		beq.w	End_AllEmlds
0000606A 4278 FE02                  		clr.w	($FFFFFE02).w
0000606E 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
00006074 4BF9 00C0 0004             		lea	($C00004).l,a5
0000607A 4DF9 00C0 0000             		lea	($C00000).l,a6
00006080 47F8 F700                  		lea	($FFFFF700).w,a3
00006084 49F8 A400                  		lea	($FFFFA400).w,a4
00006088 343C 4000                  		move.w	#$4000,d2
0000608C 6100 0000                  		bsr.w	LoadTilesFromStart2
00006090 7013                       		moveq	#$13,d0
00006092 6100 C914                  		bsr.w	PalLoad1	; load ending pallet
00006096 6100 C6E4                  		bsr.w	Pal_MakeWhite
0000609A 6000 FF16                  		bra.w	End_MainLoop
0000609E                            
0000609E                            ; ---------------------------------------------------------------------------
0000609E                            ; Subroutine controlling Sonic on the ending sequence
0000609E                            ; ---------------------------------------------------------------------------
0000609E                            
0000609E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000609E                            
0000609E                            
0000609E                            End_MoveSonic:				; XREF: End_MainLoop
0000609E 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
000060A2 6600                       		bne.s	End_MoveSonic2
000060A4 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
000060AA 6400                       		bcc.s	End_MoveSonExit	; if not, branch
000060AC 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000060B0 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
000060B6 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
000060BC 4E75                       		rts	
000060BE                            ; ===========================================================================
000060BE                            
000060BE                            End_MoveSonic2:				; XREF: End_MoveSonic
000060BE 5500                       		subq.b	#2,d0
000060C0 6600                       		bne.s	End_MoveSonic3
000060C2 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
000060C8 6500                       		bcs.s	End_MoveSonExit	; if not, branch
000060CA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000060CE 7000                       		moveq	#0,d0
000060D0 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
000060D4 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
000060D8 31C0 D014                  		move.w	d0,($FFFFD014).w
000060DC 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000060E2 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000060E8 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000060EE 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000060F4 4E75                       		rts	
000060F6                            ; ===========================================================================
000060F6                            
000060F6                            End_MoveSonic3:				; XREF: End_MoveSonic
000060F6 5500                       		subq.b	#2,d0
000060F8 6600                       		bne.s	End_MoveSonExit
000060FA 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000060FE 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
00006104 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
0000610A 4278 D024                  		clr.w	($FFFFD024).w
0000610E                            
0000610E                            End_MoveSonExit:
0000610E 4E75                       		rts	
00006110                            ; End of function End_MoveSonic
00006110                            
00006110                            ; ===========================================================================
00006110                            ; ---------------------------------------------------------------------------
00006110                            ; Object 87 - Sonic on ending sequence
00006110                            ; ---------------------------------------------------------------------------
00006110                            
00006110                            Obj87:					; XREF: Obj_Index
00006110 7000                       		moveq	#0,d0
00006112 1028 0025                  		move.b	$25(a0),d0
00006116 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
0000611A 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
0000611E 4EF9 0000 0000             		jmp	DisplaySprite
00006124                            ; ===========================================================================
00006124 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
00006128 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
0000612C 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
00006130 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
00006134 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
00006138                            ; ===========================================================================
00006138                            
00006138                            Obj87_Main:				; XREF: Obj87_Index
00006138 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000613E 6700                       		beq.s	Obj87_Main2	; if yes, branch
00006140 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
00006146 317C 00D8 0030             		move.w	#$D8,$30(a0)
0000614C 4E75                       		rts	
0000614E                            ; ===========================================================================
0000614E                            
0000614E                            Obj87_Main2:				; XREF: Obj87_Main
0000614E 5428 0025                  		addq.b	#2,$25(a0)
00006152 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
0000615A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00006160 117C 0004 0001             		move.b	#4,1(a0)
00006166 4228 0022                  		clr.b	$22(a0)
0000616A 117C 0002 0018             		move.b	#2,$18(a0)
00006170 117C 0000 001A             		move.b	#0,$1A(a0)
00006176 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
0000617C                            
0000617C                            Obj87_MakeEmlds:			; XREF: Obj87_Index
0000617C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00006180 6600                       		bne.s	Obj87_Wait
00006182 5428 0025                  		addq.b	#2,$25(a0)
00006186 317C 0001 001C             		move.w	#1,$1C(a0)
0000618C 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00006192                            
00006192                            Obj87_Wait:
00006192 4E75                       		rts	
00006194                            ; ===========================================================================
00006194                            
00006194                            Obj87_LookUp:				; XREF: Obj87_Index
00006194 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
0000619C 6600                       		bne.s	locret_5480
0000619E 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
000061A4 317C 005A 0030             		move.w	#$5A,$30(a0)
000061AA 5428 0025                  		addq.b	#2,$25(a0)
000061AE                            
000061AE                            locret_5480:
000061AE 4E75                       		rts	
000061B0                            ; ===========================================================================
000061B0                            
000061B0                            Obj87_ClrObjRam:			; XREF: Obj87_Index
000061B0 5368 0030                  		subq.w	#1,$30(a0)
000061B4 6600                       		bne.s	Obj87_Wait2
000061B6 43F8 D400                  		lea	($FFFFD400).w,a1
000061BA 323C 00FF                  		move.w	#$FF,d1
000061BE                            
000061BE                            Obj87_ClrLoop:
000061BE 4299                       		clr.l	(a1)+
000061C0 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
000061C4 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
000061CA 5428 0025                  		addq.b	#2,$25(a0)
000061CE 117C 0001 001C             		move.b	#1,$1C(a0)
000061D4 317C 003C 0030             		move.w	#$3C,$30(a0)
000061DA                            
000061DA                            Obj87_Wait2:
000061DA 4E75                       		rts	
000061DC                            ; ===========================================================================
000061DC                            
000061DC                            Obj87_MakeLogo:				; XREF: Obj87_Index
000061DC 5368 0030                  		subq.w	#1,$30(a0)
000061E0 6600                       		bne.s	Obj87_Wait3
000061E2 5428 0025                  		addq.b	#2,$25(a0)
000061E6 317C 00B4 0030             		move.w	#$B4,$30(a0)
000061EC 117C 0002 001C             		move.b	#2,$1C(a0)
000061F2 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000061F8                            
000061F8                            Obj87_Wait3:
000061F8 4E75                       		rts	
000061FA                            ; ===========================================================================
000061FA                            
000061FA                            Obj87_Animate:				; XREF: Obj87_Index
000061FA 43F9 0000 0000             		lea	(Ani_obj87).l,a1
00006200 4EF9 0000 0000             		jmp	AnimateSprite
00006206                            ; ===========================================================================
00006206                            
00006206                            Obj87_Leap:				; XREF: Obj87_Index
00006206 5368 0030                  		subq.w	#1,$30(a0)
0000620A 6600                       		bne.s	Obj87_Wait4
0000620C 5428 0025                  		addq.b	#2,$25(a0)
00006210 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00006218 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000621E 117C 0004 0001             		move.b	#4,1(a0)
00006224 4228 0022                  		clr.b	$22(a0)
00006228 117C 0002 0018             		move.b	#2,$18(a0)
0000622E 117C 0005 001A             		move.b	#5,$1A(a0)
00006234 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
0000623A 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00006240 60B8                       		bra.s	Obj87_Animate
00006242                            ; ===========================================================================
00006242                            
00006242                            Obj87_Wait4:				; XREF: Obj87_Leap
00006242 4E75                       		rts	
00006244                            ; ===========================================================================
00006244                            Ani_obj87:
00006244                            	include "_anim\obj87.asm"
00006244                            ; ---------------------------------------------------------------------------
00006244                            ; Animation script - Sonic on the ending sequence
00006244                            ; ---------------------------------------------------------------------------
00006244 0000                       		dc.w byte_551C-Ani_obj87
00006246 0000                       		dc.w byte_552A-Ani_obj87
00006248 0000                       		dc.w byte_5534-Ani_obj87
0000624A 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
00006258 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00006262 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
0000626A                            		even
0000626A                            		even
0000626A                            
0000626A                            ; ===========================================================================
0000626A                            ; ---------------------------------------------------------------------------
0000626A                            ; Object 88 - chaos emeralds on	the ending sequence
0000626A                            ; ---------------------------------------------------------------------------
0000626A                            
0000626A                            Obj88:					; XREF: Obj_Index
0000626A 7000                       		moveq	#0,d0
0000626C 1028 0024                  		move.b	$24(a0),d0
00006270 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
00006274 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
00006278 4EF9 0000 0000             		jmp	DisplaySprite
0000627E                            ; ===========================================================================
0000627E 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00006280 0000                       		dc.w Obj88_Move-Obj88_Index
00006282                            ; ===========================================================================
00006282                            
00006282                            Obj88_Main:				; XREF: Obj88_Index
00006282 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
00006288 6700                       		beq.s	Obj88_Main2
0000628A 588F                       		addq.l	#4,sp
0000628C 4E75                       		rts	
0000628E                            ; ===========================================================================
0000628E                            
0000628E                            Obj88_Main2:				; XREF: Obj88_Main
0000628E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
00006294 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
0000629A 2248                       		movea.l	a0,a1
0000629C 7600                       		moveq	#0,d3
0000629E 7401                       		moveq	#1,d2
000062A0 7205                       		moveq	#5,d1
000062A2                            
000062A2                            Obj88_MainLoop:
000062A2 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
000062A6 5429 0024                  		addq.b	#2,$24(a1)
000062AA 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
000062B2 337C 03C5 0002             		move.w	#$3C5,2(a1)
000062B8 137C 0004 0001             		move.b	#4,1(a1)
000062BE 137C 0001 0018             		move.b	#1,$18(a1)
000062C4 3368 0008 0038             		move.w	8(a0),$38(a1)
000062CA 3368 000C 003A             		move.w	$C(a0),$3A(a1)
000062D0 1342 001C                  		move.b	d2,$1C(a1)
000062D4 1342 001A                  		move.b	d2,$1A(a1)
000062D8 5202                       		addq.b	#1,d2
000062DA 1343 0026                  		move.b	d3,$26(a1)
000062DE 0603 002A                  		addi.b	#$2A,d3
000062E2 43E9 0040                  		lea	$40(a1),a1
000062E6 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000062EA                            
000062EA                            Obj88_Move:				; XREF: Obj88_Index
000062EA 3028 003E                  		move.w	$3E(a0),d0
000062EE D168 0026                  		add.w	d0,$26(a0)
000062F2 1028 0026                  		move.b	$26(a0),d0
000062F6 4EB9 0000 3416             		jsr	(CalcSine).l
000062FC 7800                       		moveq	#0,d4
000062FE 1828 003C                  		move.b	$3C(a0),d4
00006302 C3C4                       		muls.w	d4,d1
00006304 E081                       		asr.l	#8,d1
00006306 C1C4                       		muls.w	d4,d0
00006308 E080                       		asr.l	#8,d0
0000630A D268 0038                  		add.w	$38(a0),d1
0000630E D068 003A                  		add.w	$3A(a0),d0
00006312 3141 0008                  		move.w	d1,8(a0)
00006316 3140 000C                  		move.w	d0,$C(a0)
0000631A 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
00006320 6700                       		beq.s	loc_55FA
00006322 0668 0020 003C             		addi.w	#$20,$3C(a0)
00006328                            
00006328                            loc_55FA:
00006328 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
0000632E 6700                       		beq.s	loc_5608
00006330 0668 0020 003E             		addi.w	#$20,$3E(a0)
00006336                            
00006336                            loc_5608:
00006336 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
0000633C 6700                       		beq.s	locret_5614
0000633E 5368 003A                  		subq.w	#1,$3A(a0)
00006342                            
00006342                            locret_5614:
00006342 4E75                       		rts	
00006344                            ; ===========================================================================
00006344                            ; ---------------------------------------------------------------------------
00006344                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
00006344                            ; ---------------------------------------------------------------------------
00006344                            
00006344                            Obj89:					; XREF: Obj_Index
00006344 7000                       		moveq	#0,d0
00006346 1028 0024                  		move.b	$24(a0),d0
0000634A 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
0000634E 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00006352                            ; ===========================================================================
00006352 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
00006354 0000                       		dc.w Obj89_Move-Obj89_Index
00006356 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
00006358                            ; ===========================================================================
00006358                            
00006358                            Obj89_Main:				; XREF: Obj89_Index
00006358 5428 0024                  		addq.b	#2,$24(a0)
0000635C 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00006362 317C 00D8 000A             		move.w	#$D8,$A(a0)
00006368 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00006370 317C 05C5 0002             		move.w	#$5C5,2(a0)
00006376 117C 0000 0001             		move.b	#0,1(a0)
0000637C 117C 0000 0018             		move.b	#0,$18(a0)
00006382                            
00006382                            Obj89_Move:				; XREF: Obj89_Index
00006382 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
00006388 6700                       		beq.s	Obj89_Delay	; if yes, branch
0000638A 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00006390 4EB9 0000 0000             		jsr	DisplaySprite
00006396                            ; ===========================================================================
00006396                            
00006396                            Obj89_Delay:				; XREF: Obj89_Move
00006396 5428 0024                  		addq.b	#2,$24(a0)
0000639A 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
000063A0                            
000063A0                            Obj89_GotoCredits:			; XREF: Obj89_Index
000063A0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
000063A4 6A00                       		bpl.s	Obj89_Display
000063A6 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
000063AC                            
000063AC                            Obj89_Display:
000063AC 4EB9 0000 0000             		jsr	DisplaySprite
000063B2                            ; ===========================================================================
000063B2                            ; ---------------------------------------------------------------------------
000063B2                            ; Sprite mappings - Sonic on the ending	sequence
000063B2                            ; ---------------------------------------------------------------------------
000063B2                            Map_obj87:
000063B2                            	include "_maps\obj87.asm"
000063B2                            ; ---------------------------------------------------------------------------
000063B2                            ; Sprite mappings - Sonic on the ending	sequence
000063B2                            ; ---------------------------------------------------------------------------
000063B2 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
000063B6 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
000063BA 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
000063BE 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
000063C2 02                         byte_5690:	dc.b 2
000063C3 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
000063C8 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000063CD 03                         byte_569B:	dc.b 3
000063CE FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
000063D3 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
000063D8 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
000063DD 02                         byte_56AB:	dc.b 2
000063DE EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000063E3 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000063E8 02                         byte_56B6:	dc.b 2
000063E9 EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000063EE FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000063F3 02                         byte_56C1:	dc.b 2
000063F4 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000063F9 FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000063FE 03                         byte_56CC:	dc.b 3
000063FF EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
00006404 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
00006409 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
0000640E 07                         byte_56DC:	dc.b 7
0000640F B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
00006414 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
00006419 BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
0000641E CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
00006423 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
00006428 E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
0000642D EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
00006432 18                         byte_5700:	dc.b $18
00006433 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
00006438 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
0000643D 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00006442 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00006447 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000644C 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00006451 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00006456 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000645B B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00006460 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00006465 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000646A C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
0000646F C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00006474 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
00006479 B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
0000647E D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00006483 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
00006488 D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000648D E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00006492 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00006497 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000649C E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
000064A1 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
000064A6 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
000064AC 00                         		even
000064AC 00                         		even
000064AC                            
000064AC                            ; ---------------------------------------------------------------------------
000064AC                            ; Sprite mappings - chaos emeralds on the ending sequence
000064AC                            ; ---------------------------------------------------------------------------
000064AC                            Map_obj88:
000064AC                            	include "_maps\obj88.asm"
000064AC                            ; ---------------------------------------------------------------------------
000064AC                            ; Sprite mappings - chaos emeralds on the ending sequence
000064AC                            ; ---------------------------------------------------------------------------
000064AC 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
000064B0 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
000064B4 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
000064B8 0000                       		dc.w byte_57AC-Map_obj88
000064BA 01                         byte_5788:	dc.b 1
000064BB F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000064C0 01                         byte_578E:	dc.b 1
000064C1 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
000064C6 01                         byte_5794:	dc.b 1
000064C7 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
000064CC 01                         byte_579A:	dc.b 1
000064CD F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
000064D2 01                         byte_57A0:	dc.b 1
000064D3 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
000064D8 01                         byte_57A6:	dc.b 1
000064D9 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000064DE 01                         byte_57AC:	dc.b 1
000064DF F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000064E4                            		even
000064E4                            		even
000064E4                            
000064E4                            ; ---------------------------------------------------------------------------
000064E4                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000064E4                            ; ---------------------------------------------------------------------------
000064E4                            Map_obj89:
000064E4                            	include "_maps\obj89.asm"
000064E4                            ; ---------------------------------------------------------------------------
000064E4                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000064E4                            ; ---------------------------------------------------------------------------
000064E4 0000                       		dc.w byte_57B4-Map_obj89
000064E6 03                         byte_57B4:	dc.b 3
000064E7 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000064EC F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000064F1 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000064F6                            		even
000064F6                            		even
000064F6                            
000064F6                            ; ===========================================================================
000064F6                            ; ---------------------------------------------------------------------------
000064F6                            ; Credits ending sequence
000064F6                            ; ---------------------------------------------------------------------------
000064F6                            
000064F6                            Credits:				; XREF: GameModeArray
000064F6 6100 B9BE                  		bsr.w	ClearPLC
000064FA 6100 C202                  		bsr.w	Pal_FadeFrom
000064FE 4DF9 00C0 0004             		lea	($C00004).l,a6
00006504 3CBC 8004                  		move.w	#$8004,(a6)
00006508 3CBC 8230                  		move.w	#$8230,(a6)
0000650C 3CBC 8407                  		move.w	#$8407,(a6)
00006510 3CBC 9001                  		move.w	#$9001,(a6)
00006514 3CBC 9200                  		move.w	#$9200,(a6)
00006518 3CBC 8B03                  		move.w	#$8B03,(a6)
0000651C 3CBC 8720                  		move.w	#$8720,(a6)
00006520 4238 F64E                  		clr.b	($FFFFF64E).w
00006524 6100 B674                  		bsr.w	ClearScreen
00006528 43F8 D000                  		lea	($FFFFD000).w,a1
0000652C 7000                       		moveq	#0,d0
0000652E 323C 07FF                  		move.w	#$7FF,d1
00006532                            
00006532                            Cred_ClrObjRam:
00006532 22C0                       		move.l	d0,(a1)+
00006534 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
00006538                            
00006538 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00006542 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
00006548 6100 B7CE                  		bsr.w	NemDec
0000654C 43F8 FB80                  		lea	($FFFFFB80).w,a1
00006550 7000                       		moveq	#0,d0
00006552 323C 001F                  		move.w	#$1F,d1
00006556                            
00006556                            Cred_ClrPallet:
00006556 22C0                       		move.l	d0,(a1)+
00006558 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000655C                            
0000655C 7003                       		moveq	#3,d0
0000655E 6100 C448                  		bsr.w	PalLoad1	; load Sonic's pallet
00006562 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
00006568 4EB9 0000 0000             		jsr	ObjectsLoad
0000656E 4EB9 0000 0000             		jsr	BuildSprites
00006574 6100 0000                  		bsr.w	EndingDemoLoad
00006578 7000                       		moveq	#0,d0
0000657A 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000657E E948                       		lsl.w	#4,d0
00006580 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00006586 45F2 0000                  		lea	(a2,d0.w),a2
0000658A 7000                       		moveq	#0,d0
0000658C 1012                       		move.b	(a2),d0
0000658E 6700                       		beq.s	loc_5862
00006590 6100 B8C6                  		bsr.w	LoadPLC		; load level patterns
00006594                            
00006594                            loc_5862:
00006594 7001                       		moveq	#1,d0
00006596 6100 B8C0                  		bsr.w	LoadPLC		; load standard	level patterns
0000659A 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
000065A0 6100 C0B2                  		bsr.w	Pal_FadeTo
000065A4                            
000065A4                            Cred_WaitLoop:
000065A4 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000065AA 6100 CE38                  		bsr.w	DelayProgram
000065AE 6100 B914                  		bsr.w	RunPLC_RAM
000065B2 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
000065B6 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
000065B8 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
000065BC 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
000065BE 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
000065C4 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
000065C8 4E75                       		rts	
000065CA                            
000065CA                            ; ---------------------------------------------------------------------------
000065CA                            ; Ending sequence demo loading subroutine
000065CA                            ; ---------------------------------------------------------------------------
000065CA                            
000065CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065CA                            
000065CA                            
000065CA                            EndingDemoLoad:				; XREF: Credits
000065CA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000065CE 0240 000F                  		andi.w	#$F,d0
000065D2 D040                       		add.w	d0,d0
000065D4 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
000065D8 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
000065DC 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000065E0 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000065E6 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000065E8 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000065EE 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000065F4 11FC 0027 FE12             		move.b	#39,($FFFFFE12).w ; set lives to	3
000065FA 7000                       		moveq	#0,d0
000065FC 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00006600 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00006604 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00006608 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
0000660C 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
00006612 6600                       		bne.s	EndDemo_Exit	; if not, branch
00006614 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
0000661A 45F8 FE30                  		lea	($FFFFFE30).w,a2
0000661E 303C 0008                  		move.w	#8,d0
00006622                            
00006622                            EndDemo_LampLoad:
00006622 24D9                       		move.l	(a1)+,(a2)+
00006624 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
00006628                            
00006628                            EndDemo_Exit:
00006628 4E75                       		rts	
0000662A                            ; End of function EndingDemoLoad
0000662A                            
0000662A                            ; ===========================================================================
0000662A                            ; ---------------------------------------------------------------------------
0000662A                            ; Levels used in the end sequence demos
0000662A                            ; ---------------------------------------------------------------------------
0000662A                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
0000663A                            
0000663A                            ; ---------------------------------------------------------------------------
0000663A                            ; Lamppost variables in the end sequence demo (Star Light Zone)
0000663A                            ; ---------------------------------------------------------------------------
0000663A                            EndDemo_LampVar:
0000663A 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
0000663C 0A00 062C 000D             		dc.w $A00, $62C, $D
00006642 0000 0000                  		dc.l 0
00006646 0000                       		dc.b 0,	0
00006648 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000665C 0101                       		dc.b 1,	1
0000665E                            ; ===========================================================================
0000665E                            ; ---------------------------------------------------------------------------
0000665E                            ; "TRY AGAIN" and "END"	screens
0000665E                            ; ---------------------------------------------------------------------------
0000665E                            
0000665E                            TryAgainEnd:				; XREF: Credits
0000665E 6100 B856                  		bsr.w	ClearPLC
00006662 6100 C09A                  		bsr.w	Pal_FadeFrom
00006666 4DF9 00C0 0004             		lea	($C00004).l,a6
0000666C 3CBC 8004                  		move.w	#$8004,(a6)
00006670 3CBC 8230                  		move.w	#$8230,(a6)
00006674 3CBC 8407                  		move.w	#$8407,(a6)
00006678 3CBC 9001                  		move.w	#$9001,(a6)
0000667C 3CBC 9200                  		move.w	#$9200,(a6)
00006680 3CBC 8B03                  		move.w	#$8B03,(a6)
00006684 3CBC 8720                  		move.w	#$8720,(a6)
00006688 4238 F64E                  		clr.b	($FFFFF64E).w
0000668C 6100 B50C                  		bsr.w	ClearScreen
00006690 43F8 D000                  		lea	($FFFFD000).w,a1
00006694 7000                       		moveq	#0,d0
00006696 323C 07FF                  		move.w	#$7FF,d1
0000669A                            
0000669A                            TryAg_ClrObjRam:
0000669A 22C0                       		move.l	d0,(a1)+
0000669C 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
000066A0                            
000066A0 701D                       		moveq	#$1D,d0
000066A2 6100 B920                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
000066A6 43F8 FB80                  		lea	($FFFFFB80).w,a1
000066AA 7000                       		moveq	#0,d0
000066AC 323C 001F                  		move.w	#$1F,d1
000066B0                            
000066B0                            TryAg_ClrPallet:
000066B0 22C0                       		move.l	d0,(a1)+
000066B2 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
000066B6                            
000066B6 7013                       		moveq	#$13,d0
000066B8 6100 C2EE                  		bsr.w	PalLoad1	; load ending pallet
000066BC 4278 FBC0                  		clr.w	($FFFFFBC0).w
000066C0 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
000066C6 4EB9 0000 0000             		jsr	ObjectsLoad
000066CC 4EB9 0000 0000             		jsr	BuildSprites
000066D2 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
000066D8 6100 BF7A                  		bsr.w	Pal_FadeTo
000066DC                            
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            ; "TRY AGAIN" and "END"	screen main loop
000066DC                            ; ---------------------------------------------------------------------------
000066DC                            TryAg_MainLoop:
000066DC 6100 B5A2                  		bsr.w	PauseGame
000066E0 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000066E6 6100 CCFC                  		bsr.w	DelayProgram
000066EA 4EB9 0000 0000             		jsr	ObjectsLoad
000066F0 4EB9 0000 0000             		jsr	BuildSprites
000066F6 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000066FC 6600                       		bne.s	TryAg_Exit	; if yes, branch
000066FE 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
00006702 6700                       		beq.s	TryAg_Exit	; if yes, branch
00006704 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
0000670A 67D0                       		beq.s	TryAg_MainLoop
0000670C                            
0000670C                            TryAg_Exit:
0000670C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00006712 4E75                       		rts	
00006714                            
00006714                            ; ===========================================================================
00006714                            ; ---------------------------------------------------------------------------
00006714                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
00006714                            ; ---------------------------------------------------------------------------
00006714                            
00006714                            Obj8B:					; XREF: Obj_Index
00006714 7000                       		moveq	#0,d0
00006716 1028 0024                  		move.b	$24(a0),d0
0000671A 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
0000671E 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
00006722 4EF9 0000 0000             		jmp	DisplaySprite
00006728                            ; ===========================================================================
00006728 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
0000672A 0000                       		dc.w Obj8B_Animate-Obj8B_Index
0000672C 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
0000672E 0000                       		dc.w loc_5A8E-Obj8B_Index
00006730                            ; ===========================================================================
00006730                            
00006730                            Obj8B_Main:				; XREF: Obj8B_Index
00006730 5428 0024                  		addq.b	#2,$24(a0)
00006734 317C 0120 0008             		move.w	#$120,8(a0)
0000673A 317C 00F4 000A             		move.w	#$F4,$A(a0)
00006740 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00006748 317C 03E1 0002             		move.w	#$3E1,2(a0)
0000674E 117C 0000 0001             		move.b	#0,1(a0)
00006754 117C 0002 0018             		move.b	#2,$18(a0)
0000675A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00006760 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00006766 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00006768 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
0000676E 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00006774 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
0000677A 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00006780                            
00006780                            Obj8B_Animate:				; XREF: Obj8B_Index
00006780 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00006786 4EF9 0000 0000             		jmp	AnimateSprite
0000678C                            ; ===========================================================================
0000678C                            
0000678C                            Obj8B_Juggle:				; XREF: Obj8B_Index
0000678C 5428 0024                  		addq.b	#2,$24(a0)
00006790 7002                       		moveq	#2,d0
00006792 0828 0000 001C             		btst	#0,$1C(a0)
00006798 6700                       		beq.s	loc_5A6A
0000679A 4440                       		neg.w	d0
0000679C                            
0000679C                            loc_5A6A:
0000679C 43F8 D800                  		lea	($FFFFD800).w,a1
000067A0 7205                       		moveq	#5,d1
000067A2                            
000067A2                            loc_5A70:
000067A2 1340 003E                  		move.b	d0,$3E(a1)
000067A6 3400                       		move.w	d0,d2
000067A8 E742                       		asl.w	#3,d2
000067AA D529 0026                  		add.b	d2,$26(a1)
000067AE 43E9 0040                  		lea	$40(a1),a1
000067B2 51C9 FFEE                  		dbf	d1,loc_5A70
000067B6 5228 001A                  		addq.b	#1,$1A(a0)
000067BA 317C 0070 0030             		move.w	#112,$30(a0)
000067C0                            
000067C0                            loc_5A8E:				; XREF: Obj8B_Index
000067C0 5368 0030                  		subq.w	#1,$30(a0)
000067C4 6A00                       		bpl.s	locret_5AA0
000067C6 0868 0000 001C             		bchg	#0,$1C(a0)
000067CC 117C 0002 0024             		move.b	#2,$24(a0)
000067D2                            
000067D2                            locret_5AA0:
000067D2 4E75                       		rts	
000067D4                            ; ===========================================================================
000067D4                            Ani_obj8B:
000067D4                            	include "_anim\obj8B.asm"
000067D4                            ; ---------------------------------------------------------------------------
000067D4                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
000067D4                            ; ---------------------------------------------------------------------------
000067D4 0000                       		dc.w byte_5AA8-Ani_obj8B
000067D6 0000                       		dc.w byte_5AAC-Ani_obj8B
000067D8 0000                       		dc.w byte_5AB0-Ani_obj8B
000067DA 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
000067DE 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
000067E2 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
000067F4                            		even
000067F4                            		even
000067F4                            
000067F4                            ; ===========================================================================
000067F4                            ; ---------------------------------------------------------------------------
000067F4                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
000067F4                            ; ---------------------------------------------------------------------------
000067F4                            
000067F4                            Obj8C:					; XREF: Obj_Index
000067F4 7000                       		moveq	#0,d0
000067F6 1028 0024                  		move.b	$24(a0),d0
000067FA 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
000067FE 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00006802 4EF9 0000 0000             		jmp	DisplaySprite
00006808                            ; ===========================================================================
00006808 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
0000680A 0000                       		dc.w Obj8C_Move-Obj8C_Index
0000680C                            ; ===========================================================================
0000680C                            
0000680C                            Obj8C_Main:				; XREF: Obj8C_Index
0000680C 2248                       		movea.l	a0,a1
0000680E 7400                       		moveq	#0,d2
00006810 7600                       		moveq	#0,d3
00006812 7205                       		moveq	#5,d1
00006814 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00006818                            
00006818                            Obj8C_MakeEms:				; XREF: loc_5B42
00006818 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
0000681C 5429 0024                  		addq.b	#2,$24(a1)
00006820 237C 0000 64AC 0004        		move.l	#Map_obj88,4(a1)
00006828 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000682E 137C 0000 0001             		move.b	#0,1(a1)
00006834 137C 0001 0018             		move.b	#1,$18(a1)
0000683A 337C 0104 0008             		move.w	#$104,8(a1)
00006840 337C 0120 0038             		move.w	#$120,$38(a1)
00006846 337C 00EC 000A             		move.w	#$EC,$A(a1)
0000684C 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00006852 137C 001C 003C             		move.b	#$1C,$3C(a1)
00006858 47F8 FE58                  		lea	($FFFFFE58).w,a3
0000685C                            
0000685C                            Obj8C_ChkEms:
0000685C 7000                       		moveq	#0,d0
0000685E 1038 FE57                  		move.b	($FFFFFE57).w,d0
00006862 5340                       		subq.w	#1,d0
00006864 6500                       		bcs.s	loc_5B42
00006866                            
00006866                            Obj8C_ChkEmLoop:
00006866 B433 0000                  		cmp.b	(a3,d0.w),d2
0000686A 6600                       		bne.s	loc_5B3E
0000686C 5202                       		addq.b	#1,d2
0000686E 60EC                       		bra.s	Obj8C_ChkEms
00006870                            ; ===========================================================================
00006870                            
00006870                            loc_5B3E:
00006870 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00006874                            
00006874                            loc_5B42:
00006874 1342 001A                  		move.b	d2,$1A(a1)
00006878 5229 001A                  		addq.b	#1,$1A(a1)
0000687C 5202                       		addq.b	#1,d2
0000687E 137C 0080 0026             		move.b	#$80,$26(a1)
00006884 1343 001E                  		move.b	d3,$1E(a1)
00006888 1343 001F                  		move.b	d3,$1F(a1)
0000688C 0643 000A                  		addi.w	#$A,d3
00006890 43E9 0040                  		lea	$40(a1),a1
00006894 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00006898                            
00006898                            Obj8C_Move:				; XREF: Obj8C_Index
00006898 4A68 003E                  		tst.w	$3E(a0)
0000689C 6700                       		beq.s	locret_5BBA
0000689E 4A28 001E                  		tst.b	$1E(a0)
000068A2 6700                       		beq.s	loc_5B78
000068A4 5328 001E                  		subq.b	#1,$1E(a0)
000068A8 6600                       		bne.s	loc_5B80
000068AA                            
000068AA                            loc_5B78:
000068AA 3028 003E                  		move.w	$3E(a0),d0
000068AE D168 0026                  		add.w	d0,$26(a0)
000068B2                            
000068B2                            loc_5B80:
000068B2 1028 0026                  		move.b	$26(a0),d0
000068B6 6700                       		beq.s	loc_5B8C
000068B8 0C00 0080                  		cmpi.b	#$80,d0
000068BC 6600                       		bne.s	loc_5B96
000068BE                            
000068BE                            loc_5B8C:
000068BE 4268 003E                  		clr.w	$3E(a0)
000068C2 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000068C8                            
000068C8                            loc_5B96:
000068C8 4EB9 0000 3416             		jsr	(CalcSine).l
000068CE 7800                       		moveq	#0,d4
000068D0 1828 003C                  		move.b	$3C(a0),d4
000068D4 C3C4                       		muls.w	d4,d1
000068D6 E081                       		asr.l	#8,d1
000068D8 C1C4                       		muls.w	d4,d0
000068DA E080                       		asr.l	#8,d0
000068DC D268 0038                  		add.w	$38(a0),d1
000068E0 D068 003A                  		add.w	$3A(a0),d0
000068E4 3141 0008                  		move.w	d1,8(a0)
000068E8 3140 000A                  		move.w	d0,$A(a0)
000068EC                            
000068EC                            locret_5BBA:
000068EC 4E75                       		rts	
000068EE                            ; ===========================================================================
000068EE                            ; ---------------------------------------------------------------------------
000068EE                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
000068EE                            ; ---------------------------------------------------------------------------
000068EE                            Map_obj8B:
000068EE                            	include "_maps\obj8B.asm"
000068EE                            ; ---------------------------------------------------------------------------
000068EE                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
000068EE                            ; ---------------------------------------------------------------------------
000068EE 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
000068F2 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
000068F6 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
000068FA 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
000068FE 08                         byte_5BCC:	dc.b 8
000068FF E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00006904 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00006909 E904 0008 00               		dc.b $E9, 4, 0,	8, 0
0000690E F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00006913 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00006918 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000691D 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006922 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006927 08                         byte_5BF5:	dc.b 8
00006928 E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
0000692D F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00006932 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00006937 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
0000693C 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006941 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006946 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000694B 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006950 08                         byte_5C1E:	dc.b 8
00006951 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00006956 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
0000695B E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00006960 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00006965 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
0000696A 0106 0823 00               		dc.b 1,	6, 8, $23, 0
0000696F 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00006974 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00006979 08                         byte_5C47:	dc.b 8
0000697A E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
0000697F F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00006984 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00006989 F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
0000698E 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00006993 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00006998 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
0000699D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
000069A2 0C                         byte_5C70:	dc.b $C
000069A3 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
000069A8 F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
000069AD 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
000069B2 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
000069B7 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
000069BC F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
000069C1 0504 0835 00               		dc.b 5,	4, 8, $35, 0
000069C6 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
000069CB 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
000069D0 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
000069D5 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
000069DA 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
000069DF 0A                         byte_5CAD:	dc.b $A
000069E0 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
000069E5 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
000069EA F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
000069EF D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
000069F4 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
000069F9 F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
000069FE 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006A03 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006A08 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00006A0D 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00006A12 0A                         byte_5CE0:	dc.b $A
00006A13 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00006A18 E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00006A1D EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00006A22 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00006A27 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00006A2C EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00006A31 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00006A36 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00006A3B 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00006A40 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00006A45 0C                         byte_5D13:	dc.b $C
00006A46 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00006A4B FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00006A50 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00006A55 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00006A5A F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00006A5F FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00006A64 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00006A69 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00006A6E 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00006A73 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00006A78 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00006A7D 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00006A82                            		even
00006A82                            		even
00006A82                            
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            ; Ending sequence demos
00006A82                            ; ---------------------------------------------------------------------------
00006A82                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00006AB0                            		even
00006AB0                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00006AF0                            		even
00006AF0                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00006B20                            		even
00006B20                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00006B50                            		even
00006B50                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00006B70                            		even
00006B70                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00006B90                            		even
00006B90                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00006BC0                            		even
00006BC0                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00006BF0                            		even
00006BF0                            
00006BF0                            ; ---------------------------------------------------------------------------
00006BF0                            ; Subroutine to	load level boundaries and start	locations
00006BF0                            ; ---------------------------------------------------------------------------
00006BF0                            
00006BF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BF0                            
00006BF0                            
00006BF0                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00006BF0 7000                       		moveq	#0,d0
00006BF2 11C0 F740                  		move.b	d0,($FFFFF740).w
00006BF6 11C0 F741                  		move.b	d0,($FFFFF741).w
00006BFA 11C0 F746                  		move.b	d0,($FFFFF746).w
00006BFE 11C0 F748                  		move.b	d0,($FFFFF748).w
00006C02 11C0 F742                  		move.b	d0,($FFFFF742).w
00006C06 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006C0A ED08                       		lsl.b	#6,d0
00006C0C E848                       		lsr.w	#4,d0
00006C0E 3200                       		move.w	d0,d1
00006C10 D040                       		add.w	d0,d0
00006C12 D041                       		add.w	d1,d0
00006C14 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00006C18 3018                       		move.w	(a0)+,d0
00006C1A 31C0 F730                  		move.w	d0,($FFFFF730).w
00006C1E 2018                       		move.l	(a0)+,d0
00006C20 21C0 F728                  		move.l	d0,($FFFFF728).w
00006C24 21C0 F720                  		move.l	d0,($FFFFF720).w
00006C28 2018                       		move.l	(a0)+,d0
00006C2A 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00006C2E 21C0 F724                  		move.l	d0,($FFFFF724).w
00006C32 3038 F728                  		move.w	($FFFFF728).w,d0
00006C36 0640 0240                  		addi.w	#$240,d0
00006C3A 31C0 F732                  		move.w	d0,($FFFFF732).w
00006C3E 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00006C44 3018                       		move.w	(a0)+,d0
00006C46 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00006C4A 6000 0000                  		bra.w	LevSz_ChkLamp
00006C4E                            ; ===========================================================================
00006C4E                            ; ---------------------------------------------------------------------------
00006C4E                            ; Level size array and ending start location array
00006C4E                            ; ---------------------------------------------------------------------------
00006C4E                            LevelSizeArray:        ; GHZ
00006C4E 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006C5A 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006C66 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006C72 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006C7E                                    ; LZ
00006C7E 0004 0000 19BF 0000 0530+          dc.w $0004, $0000, $19BF, $0000, $0530, $0060 ; Act 1
00006C8A 0004 0000 10AF 0000 0720+          dc.w $0004, $0000, $10AF, $0000, $0720, $0060 ; Act 2
00006C96 0004 0000 1D00 FF00 0800+          dc.w $0004, $0000, $1D00, $FF00, $0800, $0060 ; Act 3
00006CA2 0004 0000 20BF 0000 0720+          dc.w $0004, $0000, $20BF, $0000, $0720, $0060 ; Act 4 (Scrap Brain Act 3)
00006CAE                                    ; MZ
00006CAE 0004 0000 17BF 0000 01D0+          dc.w $0004, $0000, $17BF, $0000, $01D0, $0060 ; Act 1
00006CBA 0004 0000 17BF 0000 0520+          dc.w $0004, $0000, $17BF, $0000, $0520, $0060 ; Act 2
00006CC6 0004 0000 1800 0000 0720+          dc.w $0004, $0000, $1800, $0000, $0720, $0060 ; Act 3
00006CD2 0004 0000 16BF 0000 0720+          dc.w $0004, $0000, $16BF, $0000, $0720, $0060 ; Act 4 (Unused)
00006CDE                                    ; SLZ
00006CDE 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 1
00006CEA 0004 0000 1FBF 0000 0640+          dc.w $0004, $0000, $1FBF, $0000, $0640, $0060 ; Act 2
00006CF6 0004 0000 2000 0000 06C0+          dc.w $0004, $0000, $2000, $0000, $06C0, $0060 ; Act 3
00006D02 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006D0E                                    ; SYZ
00006D0E 0004 0000 22C0 0000 0420+          dc.w $0004, $0000, $22C0, $0000, $0420, $0060 ; Act 1
00006D1A 0004 0000 28C0 0000 0520+          dc.w $0004, $0000, $28C0, $0000, $0520, $0060 ; Act 2
00006D26 0004 0000 2C00 0000 0620+          dc.w $0004, $0000, $2C00, $0000, $0620, $0060 ; Act 3
00006D32 0004 0000 2EC0 0000 0620+          dc.w $0004, $0000, $2EC0, $0000, $0620, $0060 ; Act 4 (Unused)
00006D3E                                    ; SBZ
00006D3E 0004 0000 21C0 0000 0720+          dc.w $0004, $0000, $21C0, $0000, $0720, $0060 ; Act 1
00006D4A 0004 0000 1E40 FF00 0800+          dc.w $0004, $0000, $1E40, $FF00, $0800, $0060 ; Act 2
00006D56 0004 2080 2460 0510 0510+          dc.w $0004, $2080, $2460, $0510, $0510, $0060 ; Act 3 (Final Zone)
00006D62 0004 0000 3EC0 0000 0720+          dc.w $0004, $0000, $3EC0, $0000, $0720, $0060 ; Act 4 (Unused)
00006D6E                                    ; Ending
00006D6E 0004 0000 0500 0110 0110+          dc.w $0004, $0000, $0500, $0110, $0110, $0060 ; Act 1 (Good Ending)
00006D7A 0004 0000 0DC0 0110 0110+          dc.w $0004, $0000, $0DC0, $0110, $0110, $0060 ; Act 2 (Bad Ending)
00006D86 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 3 (Unused)
00006D92 0004 0000 2FFF 0000 0320+          dc.w $0004, $0000, $2FFF, $0000, $0320, $0060 ; Act 4 (Unused)
00006D9E                                    ; BHZ
00006D9E 0004 0000 24BF 0000 0300+          dc.w $0004, $0000, $24BF, $0000, $0300, $0060 ; Act 1
00006DAA 0004 0000 1EBF 0000 0300+          dc.w $0004, $0000, $1EBF, $0000, $0300, $0060 ; Act 2
00006DB6 0004 0000 2960 0000 0300+          dc.w $0004, $0000, $2960, $0000, $0300, $0060 ; Act 3
00006DC2 0004 0000 2ABF 0000 0300+          dc.w $0004, $0000, $2ABF, $0000, $0300, $0060 ; Act 4 (Unused)
00006DCE                                    even
00006DCE                            
00006DCE                            ; ===========================================================================
00006DCE                            
00006DCE                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006DCE 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006DD2 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006DD4 4EB9 0000 0000             		jsr	Obj79_LoadInfo
00006DDA 3238 D008                  		move.w	($FFFFD008).w,d1
00006DDE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006DE2 6000 0000                  		bra.w	loc_60D0
00006DE6                            ; ===========================================================================
00006DE6                            
00006DE6                            
00006DE6                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006DE6 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006DEA ED08                       		lsl.b	#6,d0
00006DEC E848                       		lsr.w	#4,d0
00006DEE 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
00006DF2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00006DF6 6A00 0000                  		bpl.w	LevSz_SonicPos	; if not, branch
00006DFA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00006DFE 5340                       		subq.w	#1,d0
00006E00 E548                       		lsl.w	#2,d0
00006E02 43FB 0000                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
00006E06 6000 0000                  		bra.w	LevSz_SonicPos
00006E0A                            
00006E0A                            EndingStLocArray:
00006E0A                            		incbin	misc\sloc_end.bin
00006E2A                            		even
00006E2A                            		
00006E2A                            ; ===========================================================================
00006E2A                            ; ---------------------------------------------------------------------------
00006E2A                            ; Sonic	start location array
00006E2A                            ; ---------------------------------------------------------------------------
00006E2A                            StartLocArray:	incbin	misc\sloc_lev.bin
00006EAA                            		even
00006EAA                            
00006EAA                            LevSz_SonicPos:
00006EAA 7200                       		moveq	#0,d1
00006EAC 3219                       		move.w	(a1)+,d1
00006EAE 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
00006EB2 7000                       		moveq	#0,d0
00006EB4 3011                       		move.w	(a1),d0
00006EB6 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
00006EBA                            
00006EBA                            loc_60D0:				; XREF: LevSz_ChkLamp
00006EBA 0441 00A0                  		subi.w	#$A0,d1
00006EBE 6400                       		bcc.s	loc_60D8
00006EC0 7200                       		moveq	#0,d1
00006EC2                            
00006EC2                            loc_60D8:
00006EC2 3438 F72A                  		move.w	($FFFFF72A).w,d2
00006EC6 B242                       		cmp.w	d2,d1
00006EC8 6500                       		bcs.s	loc_60E2
00006ECA 3202                       		move.w	d2,d1
00006ECC                            
00006ECC                            loc_60E2:
00006ECC 31C1 F700                  		move.w	d1,($FFFFF700).w
00006ED0 0440 0060                  		subi.w	#$60,d0
00006ED4 6400                       		bcc.s	loc_60EE
00006ED6 7000                       		moveq	#0,d0
00006ED8                            
00006ED8                            loc_60EE:
00006ED8 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006EDC 6D00                       		blt.s	loc_60F8
00006EDE 3038 F72E                  		move.w	($FFFFF72E).w,d0
00006EE2                            
00006EE2                            loc_60F8:
00006EE2 31C0 F704                  		move.w	d0,($FFFFF704).w
00006EE6 6100 0000                  		bsr.w	BgScrollSpeed
00006EEA 7000                       		moveq	#0,d0
00006EEC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006EF0 E508                       		lsl.b	#2,d0
00006EF2 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006EF8 6000 0000                  		bra.w	LevSz_Unk
00006EFC                            
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            ; Which	256x256	tiles contain loops or roll-tunnels
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006EFC                            ; loop,	loop, tunnel, tunnel
00006EFC                            ; ---------------------------------------------------------------------------
00006EFC                            LoopTileNums:	incbin	misc\loopnums.bin
00006F1C                            		even
00006F1C                            ; this is from the cwa source code i will share kaito x gakupo mpreg if this does not work i swear t ogod if this does not
00006F1C                            ; ITS GONJE HELP
00006F1C                            ; ===========================================================================
00006F1C                            
00006F1C                            LevSz_Unk:				; XREF: LevelSizeLoad
00006F1C 7000                       		moveq	#0,d0
00006F1E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006F22 E748                       		lsl.w	#3,d0
00006F24 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
00006F28 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
00006F2C 24D9                       		move.l	(a1)+,(a2)+
00006F2E 24D9                       		move.l	(a1)+,(a2)+
00006F30 4E75                       		rts	
00006F32                            ; End of function LevelSizeLoad
00006F32                            
00006F32                            ; ===========================================================================
00006F32 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
00006F3A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F42 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F4A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F52 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F5A 0800 0100 0100 0000        		dc.l $8000100, $1000000
00006F62 0070 0100 0100 0100        		dc.l $700100, $1000100
00006F6A                            
00006F6A                            ; ---------------------------------------------------------------------------
00006F6A                            ; Subroutine to	set scroll speed of some backgrounds
00006F6A                            ; ---------------------------------------------------------------------------
00006F6A                            
00006F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006F6A                            
00006F6A                            
00006F6A                            BgScrollSpeed:				; XREF: LevelSizeLoad
00006F6A 4A38 FE30                  		tst.b	($FFFFFE30).w
00006F6E 6600                       		bne.s	loc_6206
00006F70 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006F74 31C0 F714                  		move.w	d0,($FFFFF714).w
00006F78 31C1 F708                  		move.w	d1,($FFFFF708).w
00006F7C 31C1 F710                  		move.w	d1,($FFFFF710).w
00006F80 31C1 F718                  		move.w	d1,($FFFFF718).w
00006F84                            
00006F84                            loc_6206:
00006F84 7400                       		moveq	#0,d2
00006F86 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006F8A D442                       		add.w	d2,d2
00006F8C 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006F90 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
00006F94                            ; End of function BgScrollSpeed
00006F94                            
00006F94                            ; ===========================================================================
00006F94 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
00006F98 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006F9C 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006FA0 0000 0000                  		dc.w BgScroll_End-BgScroll_Index, BgScroll_MZ-BgScroll_Index ; MAKOTO
00006FA4                            ; ===========================================================================
00006FA4                            
00006FA4                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006FA4 6000 0000                  		bra.w	Deform_GHZ
00006FA8                            ; ===========================================================================
00006FA8                            
00006FA8                            BgScroll_LZ:				; XREF: BgScroll_Index
00006FA8 E280                       		asr.l	#1,d0
00006FAA 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FAE 4E75                       		rts	
00006FB0                            ; ===========================================================================
00006FB0                            
00006FB0                            BgScroll_MZ:				; XREF: BgScroll_Index
00006FB0 4E75                       		rts	
00006FB2                            ; ===========================================================================
00006FB2                            
00006FB2                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006FB2 E280                       		asr.l	#1,d0
00006FB4 0640 00C0                  		addi.w	#$C0,d0
00006FB8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FBC 4E75                       		rts	
00006FBE                            ; ===========================================================================
00006FBE                            
00006FBE                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006FBE E980                       		asl.l	#4,d0
00006FC0 2400                       		move.l	d0,d2
00006FC2 E380                       		asl.l	#1,d0
00006FC4 D082                       		add.l	d2,d0
00006FC6 E080                       		asr.l	#8,d0
00006FC8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FCC 31C0 F714                  		move.w	d0,($FFFFF714).w
00006FD0 4E75                       		rts	
00006FD2                            ; ===========================================================================
00006FD2                            
00006FD2                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006FD2 E980                       		asl.l	#4,d0
00006FD4 E380                       		asl.l	#1,d0
00006FD6 E080                       		asr.l	#8,d0
00006FD8 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006FDC 4E75                       		rts	
00006FDE                            ; ===========================================================================
00006FDE                            
00006FDE                            BgScroll_End:				; XREF: BgScroll_Index
00006FDE 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006FE4 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006FEA 4E75                       		rts	
00006FEC                            ; ===========================================================================
00006FEC 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006FF2 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006FF8 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006FFE 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00007004 4E75                       		rts
00007006                            
00007006                            ; ---------------------------------------------------------------------------
00007006                            ; Background layer deformation subroutines
00007006                            ; ---------------------------------------------------------------------------
00007006                            
00007006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007006                            
00007006                            
00007006                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
00007006 4A38 F744                  		tst.b	($FFFFF744).w
0000700A 6700                       		beq.s	loc_628E
0000700C 4E75                       		rts	
0000700E                            ; ===========================================================================
0000700E                            
0000700E                            loc_628E:
0000700E 4278 F754                  		clr.w	($FFFFF754).w
00007012 4278 F756                  		clr.w	($FFFFF756).w
00007016 4278 F758                  		clr.w	($FFFFF758).w
0000701A 4278 F75A                  		clr.w	($FFFFF75A).w
0000701E 6100 0000                  		bsr.w	ScrollHoriz
00007022 6100 0000                  		bsr.w	ScrollVertical
00007026 6100 0000                  		bsr.w	DynScrResizeLoad
0000702A 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
00007030 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
00007036 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
0000703C 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007042 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
00007048 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
0000704E 7000                       		moveq	#0,d0
00007050 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ
00007054 6700                       		beq.s	GetDeformRoutine	; GMZ
00007056 4EF9 0000 0000             		jmp	Deform_LZ	; GMZ
0000705C                            
0000705C                            GetDeformRoutine:	; GMZ
0000705C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007060 D040                       		add.w	d0,d0
00007062 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
00007066 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
0000706A                            ; End of function DeformBgLayer
0000706A                            
0000706A                            ; ===========================================================================
0000706A                            ; ---------------------------------------------------------------------------
0000706A                            ; Offset index for background layer deformation	code
0000706A                            ; ---------------------------------------------------------------------------
0000706A 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
0000706E 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
00007072 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
00007076 0000 0000                  		dc.w Deform_GHZ-Deform_Index, Deform_BHZ-Deform_Index ; MAKOTO
0000707A                            ; ---------------------------------------------------------------------------
0000707A                            ; Green	Hill Zone background layer deformation code
0000707A                            ; ---------------------------------------------------------------------------
0000707A                            
0000707A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000707A                            
0000707A                            
0000707A                            Deform_GHZ:				; XREF: Deform_Index
0000707A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000707E 48C4                       		ext.l	d4
00007080 EB84                       		asl.l	#5,d4
00007082 2204                       		move.l	d4,d1
00007084 E384                       		asl.l	#1,d4
00007086 D881                       		add.l	d1,d4
00007088 7A00                       		moveq	#0,d5
0000708A 6100 0000                  		bsr.w	ScrollBlock1
0000708E 6100 0000                  		bsr.w	ScrollBlock4
00007092 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007096 3038 F704                  		move.w	($FFFFF704).w,d0
0000709A 0240 07FF                  		andi.w	#$7FF,d0
0000709E EA48                       		lsr.w	#5,d0
000070A0 4440                       		neg.w	d0
000070A2 0640 0026                  		addi.w	#$26,d0
000070A6 31C0 F714                  		move.w	d0,($FFFFF714).w
000070AA 3800                       		move.w	d0,d4
000070AC 6100 0000                  		bsr.w	ScrollBlock3
000070B0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000070B6 323C 006F                  		move.w	#$6F,d1
000070BA 9244                       		sub.w	d4,d1
000070BC 3038 F700                  		move.w	($FFFFF700).w,d0
000070C0 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
000070C6 6600                       		bne.s	loc_633C
000070C8 7000                       		moveq	#0,d0
000070CA                            
000070CA                            loc_633C:
000070CA 4440                       		neg.w	d0
000070CC 4840                       		swap	d0
000070CE 3038 F708                  		move.w	($FFFFF708).w,d0
000070D2 4440                       		neg.w	d0
000070D4                            
000070D4                            loc_6346:
000070D4 22C0                       		move.l	d0,(a1)+
000070D6 51C9 FFFC                  		dbf	d1,loc_6346
000070DA 323C 0027                  		move.w	#$27,d1
000070DE 3038 F710                  		move.w	($FFFFF710).w,d0
000070E2 4440                       		neg.w	d0
000070E4                            
000070E4                            loc_6356:
000070E4 22C0                       		move.l	d0,(a1)+
000070E6 51C9 FFFC                  		dbf	d1,loc_6356
000070EA 3038 F710                  		move.w	($FFFFF710).w,d0
000070EE 0640 0000                  		addi.w	#0,d0
000070F2 3438 F700                  		move.w	($FFFFF700).w,d2
000070F6 0642 FE00                  		addi.w	#-$200,d2
000070FA 9440                       		sub.w	d0,d2
000070FC 48C2                       		ext.l	d2
000070FE E182                       		asl.l	#8,d2
00007100 85FC 0068                  		divs.w	#$68,d2
00007104 48C2                       		ext.l	d2
00007106 E182                       		asl.l	#8,d2
00007108 7600                       		moveq	#0,d3
0000710A 3600                       		move.w	d0,d3
0000710C 323C 0047                  		move.w	#$47,d1
00007110 D244                       		add.w	d4,d1
00007112                            
00007112                            loc_6384:
00007112 3003                       		move.w	d3,d0
00007114 4440                       		neg.w	d0
00007116 22C0                       		move.l	d0,(a1)+
00007118 4843                       		swap	d3
0000711A D682                       		add.l	d2,d3
0000711C 4843                       		swap	d3
0000711E 51C9 FFF2                  		dbf	d1,loc_6384
00007122 4E75                       		rts	
00007124                            ; End of function Deform_GHZ
00007124                            
00007124                            ; ---------------------------------------------------------------------------
00007124                            ; Labyrinth Zone background layer deformation code
00007124                            ; ---------------------------------------------------------------------------
00007124                            
00007124                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007124                            
00007124                            
00007124                            Deform_LZ:				; XREF: Deform_Index
00007124 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007128 48C4                       		ext.l	d4
0000712A EF84                       		asl.l	#7,d4
0000712C 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00007130 48C5                       		ext.l	d5
00007132 EF85                       		asl.l	#7,d5
00007134 6100 0000                  		bsr.w	ScrollBlock1
00007138 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000713E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007142 323C 00DF                  		move.w	#$DF,d1
00007146 3038 F700                  		move.w	($FFFFF700).w,d0
0000714A 4440                       		neg.w	d0
0000714C 4840                       		swap	d0
0000714E 3038 F708                  		move.w	($FFFFF708).w,d0
00007152 4440                       		neg.w	d0
00007154                            
00007154                            loc_63C6:
00007154 22C0                       		move.l	d0,(a1)+
00007156 51C9 FFFC                  		dbf	d1,loc_63C6
0000715A 3038 F646                  		move.w	($FFFFF646).w,d0
0000715E 9078 F704                  		sub.w	($FFFFF704).w,d0
00007162 4E75                       		rts	
00007164                            ; End of function Deform_LZ
00007164                            
00007164                            ; ---------------------------------------------------------------------------
00007164                            ; Marble Zone background layer deformation code
00007164                            ; ---------------------------------------------------------------------------
00007164                            
00007164                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007164                            
00007164                            
00007164                            Deform_MZ:				; XREF: Deform_Index
00007164 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007168 48C4                       		ext.l	d4
0000716A ED84                       		asl.l	#6,d4
0000716C 2204                       		move.l	d4,d1
0000716E E384                       		asl.l	#1,d4
00007170 D881                       		add.l	d1,d4
00007172 7A00                       		moveq	#0,d5
00007174 6100 0000                  		bsr.w	ScrollBlock1
00007178 303C 0200                  		move.w	#$200,d0
0000717C 3238 F704                  		move.w	($FFFFF704).w,d1
00007180 0441 01C8                  		subi.w	#$1C8,d1
00007184 6500                       		bcs.s	loc_6402
00007186 3401                       		move.w	d1,d2
00007188 D241                       		add.w	d1,d1
0000718A D242                       		add.w	d2,d1
0000718C E441                       		asr.w	#2,d1
0000718E D041                       		add.w	d1,d0
00007190                            
00007190                            loc_6402:
00007190 31C0 F714                  		move.w	d0,($FFFFF714).w
00007194 6100 0000                  		bsr.w	ScrollBlock3
00007198 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000719E 43F8 CC00                  		lea	($FFFFCC00).w,a1
000071A2 323C 00DF                  		move.w	#$DF,d1
000071A6 3038 F700                  		move.w	($FFFFF700).w,d0
000071AA 4440                       		neg.w	d0
000071AC 4840                       		swap	d0
000071AE 3038 F708                  		move.w	($FFFFF708).w,d0
000071B2 4440                       		neg.w	d0
000071B4                            
000071B4                            loc_6426:
000071B4 22C0                       		move.l	d0,(a1)+
000071B6 51C9 FFFC                  		dbf	d1,loc_6426
000071BA 4E75                       		rts	
000071BC                            ; End of function Deform_MZ
000071BC                            
000071BC                            ; ---------------------------------------------------------------------------
000071BC                            ; Star Light Zone background layer deformation code
000071BC                            ; ---------------------------------------------------------------------------
000071BC                            
000071BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000071BC                            
000071BC                            
000071BC                            Deform_SLZ:				; XREF: Deform_Index
000071BC 3838 F73A                  		move.w	($FFFFF73A).w,d4
000071C0 48C4                       		ext.l	d4
000071C2 EB84                       		asl.l	#5,d4
000071C4 2204                       		move.l	d4,d1
000071C6 E384                       		asl.l	#1,d4
000071C8 D881                       		add.l	d1,d4
000071CA 7A00                       		moveq	#0,d5
000071CC 6100 0000                  		bsr.w	ScrollBlock1
000071D0 6100 0000                  		bsr.w	ScrollBlock3
000071D4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000071D8                            	;	move.w	($FFFFF704).w,d0
000071D8                            	;	andi.w	#$7FF,d0
000071D8 EA48                       		lsr.w	#5,d0
000071DA 4440                       		neg.w	d0
000071DC 0640 0026                  		addi.w	#$26,d0
000071E0 31C0 F714                  		move.w	d0,($FFFFF714).w
000071E4 3800                       		move.w	d0,d4
000071E6                            	;	bsr.w	ScrollBlock3
000071E6 31FC FFFA F70C                     move.w #-$6,($FFFFF70C).w ; lock the background vertically in place
000071EC 43F8 CC00                  		lea	($FFFFCC00).w,a1	; load beginning address of horizontal scroll buffer to a1
000071F0                            
000071F0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000071F4 4440                       		neg.w	d0			; negate (positive to negative)
000071F6 4840                       		swap	d0			; send to the left side of d0
000071F8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000071FC 45F8 A800                  		lea	($FFFFA800).w,a2
00007200 069A 0000 5000             		addi.l	#$5000,(a2)+
00007206 069A 0000 C000             		addi.l	#$C000,(a2)+
0000720C 3038 A800                  		move.w	($FFFFA800).w,d0
00007210 4440                       		neg.w	d0			; negate (positive to negative)
00007212 E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
00007214 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007218                            slz_DeformLoop_1:
00007218 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000721A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_1	; repeat d1 number of scanlines
0000721E                            
0000721E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007222 4440                       		neg.w	d0			; negate (positive to negative)
00007224 4840                       		swap	d0			; send to the left side of d0
00007226 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000722A 45F8 A800                  		lea	($FFFFA800).w,a2
0000722E 069A 0000 5000             		addi.l	#$5000,(a2)+
00007234 069A 0000 C000             		addi.l	#$C000,(a2)+
0000723A 3038 A800                  		move.w	($FFFFA800).w,d0
0000723E 4440                       		neg.w	d0			; negate (positive to negative)
00007240 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00007242 323C 001A                  		move.w	#27-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007246                            slz_DeformLoop_2:
00007246 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007248 51C9 FFFC                  		dbf	d1,slz_DeformLoop_2	; repeat d1 number of scanlines
0000724C                            
0000724C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007250 4440                       		neg.w	d0			; negate (positive to negative)
00007252 4840                       		swap	d0			; send to the left side of d0
00007254 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007258 45F8 A800                  		lea	($FFFFA800).w,a2
0000725C 069A 0000 5000             		addi.l	#$5000,(a2)+
00007262 069A 0000 C000             		addi.l	#$C000,(a2)+
00007268 3038 A800                  		move.w	($FFFFA800).w,d0
0000726C 4440                       		neg.w	d0			; negate (positive to negative)
0000726E E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00007270 323C 0011                  		move.w	#18-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007274                            slz_DeformLoop_3:
00007274 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007276 51C9 FFFC                  		dbf	d1,slz_DeformLoop_3	; repeat d1 number of scanlines
0000727A                            
0000727A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000727E 4440                       		neg.w	d0			; negate (positive to negative)
00007280 4840                       		swap	d0			; send to the left side of d0
00007282 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007286 45F8 A800                  		lea	($FFFFA800).w,a2
0000728A 069A 0000 5000             		addi.l	#$5000,(a2)+
00007290 069A 0000 C000             		addi.l	#$C000,(a2)+
00007296 3038 A800                  		move.w	($FFFFA800).w,d0
0000729A 4440                       		neg.w	d0			; negate (positive to negative)
0000729C E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
0000729E 323C 0009                  		move.w	#10-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072A2                            slz_DeformLoop_4:
000072A2 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072A4 51C9 FFFC                  		dbf	d1,slz_DeformLoop_4	; repeat d1 number of scanlines
000072A8                            
000072A8 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072AC 4440                       		neg.w	d0			; negate (positive to negative)
000072AE 4840                       		swap	d0			; send to the left side of d0
000072B0 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072B4 45F8 A800                  		lea	($FFFFA800).w,a2
000072B8 069A 0000 5000             		addi.l	#$5000,(a2)+
000072BE 069A 0000 C000             		addi.l	#$C000,(a2)+
000072C4 3038 A800                  		move.w	($FFFFA800).w,d0
000072C8 4440                       		neg.w	d0			; negate (positive to negative)
000072CA E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
000072CC 323C 000F                  		move.w	#16-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072D0                            slz_DeformLoop_5:
000072D0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072D2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_5	; repeat d1 number of scanlines
000072D6                            
000072D6 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072DA 4440                       		neg.w	d0			; negate (positive to negative)
000072DC 4840                       		swap	d0			; send to the left side of d0
000072DE 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072E2 4440                       		neg.w	d0			; negate (positive to negative)
000072E4 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
000072E6 323C 001C                  		move.w	#29-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000072EA                            slz_DeformLoop_6:
000072EA 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000072EC 51C9 FFFC                  		dbf	d1,slz_DeformLoop_6	; repeat d1 number of scanlines
000072F0                            
000072F0 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
000072F4 4440                       		neg.w	d0			; negate (positive to negative)
000072F6 4840                       		swap	d0			; send to the left side of d0
000072F8 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
000072FC 4440                       		neg.w	d0			; negate (positive to negative)
000072FE EE40                       		asr.w	#7,d0			; divide by 128 (Slow down the scroll position)
00007300 323C 0005                  		move.w	#6-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007304                            slz_DeformLoop_7:
00007304 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007306 51C9 FFFC                  		dbf	d1,slz_DeformLoop_7	; repeat d1 number of scanlines
0000730A                            
0000730A 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000730E 4440                       		neg.w	d0			; negate (positive to negative)
00007310 4840                       		swap	d0			; send to the left side of d0
00007312 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007316 4440                       		neg.w	d0			; negate (positive to negative)
00007318 EC40                       		asr.w	#6,d0			; divide by 64 (Slow down the scroll position)
0000731A 323C 0004                  		move.w	#5-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000731E                            slz_DeformLoop_8:
0000731E 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007320 51C9 FFFC                  		dbf	d1,slz_DeformLoop_8	; repeat d1 number of scanlines
00007324                            
00007324 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007328 4440                       		neg.w	d0			; negate (positive to negative)
0000732A 4840                       		swap	d0			; send to the left side of d0
0000732C 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007330 4440                       		neg.w	d0			; negate (positive to negative)
00007332 EA40                       		asr.w	#5,d0			; divide by 32 (Slow down the scroll position)
00007334 323C 0007                  		move.w	#8-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007338                            slz_DeformLoop_9:
00007338 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000733A 51C9 FFFC                  		dbf	d1,slz_DeformLoop_9	; repeat d1 number of scanlines
0000733E                            
0000733E 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007342 4440                       		neg.w	d0			; negate (positive to negative)
00007344 4840                       		swap	d0			; send to the left side of d0
00007346 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000734A 4440                       		neg.w	d0			; negate (positive to negative)
0000734C E840                       		asr.w	#4,d0			; divide by 16 (Slow down the scroll position)
0000734E 323C 0006                  		move.w	#7-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007352                            slz_DeformLoop_10:
00007352 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007354 51C9 FFFC                  		dbf	d1,slz_DeformLoop_10	; repeat d1 number of scanlines
00007358                            
00007358 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
0000735C 4440                       		neg.w	d0			; negate (positive to negative)
0000735E 4840                       		swap	d0			; send to the left side of d0
00007360 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007364 4440                       		neg.w	d0			; negate (positive to negative)
00007366 E640                       		asr.w	#3,d0			; divide by 8 (Slow down the scroll position)
00007368 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
0000736C                            slz_DeformLoop_11:
0000736C 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
0000736E 51C9 FFFC                  		dbf	d1,slz_DeformLoop_11	; repeat d1 number of scanlines
00007372                            
00007372 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007376 4440                       		neg.w	d0			; negate (positive to negative)
00007378 4840                       		swap	d0			; send to the left side of d0
0000737A 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
0000737E 4440                       		neg.w	d0			; negate (positive to negative)
00007380 E440                       		asr.w	#2,d0			; divide by 4 (Slow down the scroll position)
00007382 323C 0013                  		move.w	#20-1,d1		; set number of scan lines to dump (minus 1 for dbf)
00007386                            slz_DeformLoop_12:
00007386 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
00007388 51C9 FFFC                  		dbf	d1,slz_DeformLoop_12	; repeat d1 number of scanlines
0000738C                            
0000738C 3038 F700                  		move.w	($FFFFF700).w,d0	; load FG screen's X position
00007390 4440                       		neg.w	d0			; negate (positive to negative)
00007392 4840                       		swap	d0			; send to the left side of d0
00007394 3038 F708                  		move.w	($FFFFF708).w,d0	; load BG screen's X position
00007398 4440                       		neg.w	d0			; negate (positive to negative)
0000739A E240                       		asr.w	#1,d0			; divide by 2 (Slow down the scroll position)
0000739C 323C 0031                  		move.w	#50-1,d1		; set number of scan lines to dump (minus 1 for dbf)
000073A0                            slz_DeformLoop_13:
000073A0 22C0                       		move.l	d0,(a1)+		; dump both the FG and BG scanline position to buffer
000073A2 51C9 FFFC                  		dbf	d1,slz_DeformLoop_13	; repeat d1 number of scanlines
000073A6 4E75                       		rts	
000073A8                            ; End of function Deform_SLZ
000073A8 4E75                       		rts	
000073AA                            ; End of function Deform_SLZ_2
000073AA                            
000073AA                            ; ---------------------------------------------------------------------------
000073AA                            ; Spring Yard Zone background layer deformation	code
000073AA                            ; ---------------------------------------------------------------------------
000073AA                            
000073AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073AA                            
000073AA                            
000073AA                            Deform_SYZ:				; XREF: Deform_Index
000073AA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000073AE 48C4                       		ext.l	d4
000073B0 ED84                       		asl.l	#6,d4
000073B2 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000073B6 48C5                       		ext.l	d5
000073B8 E985                       		asl.l	#4,d5
000073BA 2205                       		move.l	d5,d1
000073BC E385                       		asl.l	#1,d5
000073BE DA81                       		add.l	d1,d5
000073C0 6100 0000                  		bsr.w	ScrollBlock1
000073C4 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000073CA 43F8 CC00                  		lea	($FFFFCC00).w,a1
000073CE 323C 00DF                  		move.w	#$DF,d1
000073D2 3038 F700                  		move.w	($FFFFF700).w,d0
000073D6 4440                       		neg.w	d0
000073D8 4840                       		swap	d0
000073DA 3038 F708                  		move.w	($FFFFF708).w,d0
000073DE 4440                       		neg.w	d0
000073E0                            
000073E0                            loc_653C:
000073E0 22C0                       		move.l	d0,(a1)+
000073E2 51C9 FFFC                  		dbf	d1,loc_653C
000073E6 4E75                       		rts	
000073E8                            ; End of function Deform_SYZ
000073E8                            
000073E8                            ; ---------------------------------------------------------------------------
000073E8                            ; Scrap	Brain Zone background layer deformation	code
000073E8                            ; ---------------------------------------------------------------------------
000073E8                            
000073E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000073E8                            
000073E8                            
000073E8                            Deform_SBZ:				; XREF: Deform_Index
000073E8 3838 F73A                  		move.w	($FFFFF73A).w,d4
000073EC 48C4                       		ext.l	d4
000073EE ED84                       		asl.l	#6,d4
000073F0 3A38 F73C                  		move.w	($FFFFF73C).w,d5
000073F4 48C5                       		ext.l	d5
000073F6 E985                       		asl.l	#4,d5
000073F8 E385                       		asl.l	#1,d5
000073FA 6100 0000                  		bsr.w	ScrollBlock1
000073FE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00007404 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007408 323C 00DF                  		move.w	#$DF,d1
0000740C 3038 F700                  		move.w	($FFFFF700).w,d0
00007410 4440                       		neg.w	d0
00007412 4840                       		swap	d0
00007414 3038 F708                  		move.w	($FFFFF708).w,d0
00007418 4440                       		neg.w	d0
0000741A                            
0000741A                            loc_6576:
0000741A 22C0                       		move.l	d0,(a1)+
0000741C 51C9 FFFC                  		dbf	d1,loc_6576
00007420 4E75                       		rts	
00007422                            ; End of function Deform_SBZ
00007422                            ; ---------------------------------------------------------------------------
00007422                            ; Makoto Zone background layer deformation code
00007422                            ; ---------------------------------------------------------------------------
00007422                            
00007422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007422                            
00007422                            
00007422                            Deform_BHZ:				; XREF: Deform_Index
00007422 3838 F73A                  		move.w	($FFFFF73A).w,d4
00007426 48C4                       		ext.l	d4
00007428 E984                       		asl.l	#4,d4
0000742A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000742E 48C5                       		ext.l	d5
00007430 E985                       		asl.l	#4,d5
00007432 7A00                       		moveq	#0,d5	; reset bg position in title screen
00007434 6100 0000                  		bsr.w	ScrollBlock1
00007438 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000743E 43F8 CC00                  		lea	($FFFFCC00).w,a1
00007442 323C 00DF                  		move.w	#$DF,d1
00007446 3038 F700                  		move.w	($FFFFF700).w,d0
0000744A 4440                       		neg.w	d0
0000744C 4840                       		swap	d0
0000744E 3038 F708                  		move.w	($FFFFF708).w,d0
00007452 4440                       		neg.w	d0
00007454                            
00007454                            loc_63COCK6:
00007454 22C0                       		move.l	d0,(a1)+
00007456 51C9 FFFC                  		dbf	d1,loc_63COCK6
0000745A 3038 F646                  		move.w	($FFFFF646).w,d0
0000745E 9078 F704                  		sub.w	($FFFFF704).w,d0
00007462 4E75                       		rts	
00007464                            ; End of function Deform_BHZ
00007464                            ; ---------------------------------------------------------------------------
00007464                            ; Subroutine to	scroll the level horizontally as Sonic moves
00007464                            ; ---------------------------------------------------------------------------
00007464                            
00007464                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007464                            
00007464                            
00007464                            ScrollHoriz:				; XREF: DeformBgLayer
00007464 3838 F700                  		move.w	($FFFFF700).w,d4
00007468 6100                       		bsr.s	ScrollHoriz2
0000746A 3038 F700                  		move.w	($FFFFF700).w,d0
0000746E 0240 0010                  		andi.w	#$10,d0
00007472 1238 F74A                  		move.b	($FFFFF74A).w,d1
00007476 B300                       		eor.b	d1,d0
00007478 6600                       		bne.s	locret_65B0
0000747A 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
00007480 3038 F700                  		move.w	($FFFFF700).w,d0
00007484 9044                       		sub.w	d4,d0
00007486 6A00                       		bpl.s	loc_65AA
00007488 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000748E 4E75                       		rts	
00007490                            ; ===========================================================================
00007490                            
00007490                            loc_65AA:
00007490 08F8 0003 F754             		bset	#3,($FFFFF754).w
00007496                            
00007496                            locret_65B0:
00007496 4E75                       		rts	
00007498                            ; End of function ScrollHoriz
00007498                            
00007498                            
00007498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007498                            
00007498                            
00007498                            ScrollHoriz2:				; XREF: ScrollHoriz
00007498 3038 D008                  		move.w	($FFFFD008).w,d0
0000749C 9078 F700                  		sub.w	($FFFFF700).w,d0
000074A0 0440 0090                  		subi.w	#$90,d0
000074A4 6500                       		bcs.s	loc_65F6
000074A6 0440 0010                  		subi.w	#$10,d0
000074AA 6400                       		bcc.s	loc_65CC
000074AC 4278 F73A                  		clr.w	($FFFFF73A).w
000074B0 4E75                       		rts	
000074B2                            ; ===========================================================================
000074B2                            
000074B2                            loc_65CC:
000074B2 0C40 0010                  		cmpi.w	#$10,d0
000074B6 6500                       		bcs.s	loc_65D6
000074B8 303C 0010                  		move.w	#$10,d0
000074BC                            
000074BC                            loc_65D6:
000074BC D078 F700                  		add.w	($FFFFF700).w,d0
000074C0 B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000074C4 6D00                       		blt.s	loc_65E4
000074C6 3038 F72A                  		move.w	($FFFFF72A).w,d0
000074CA                            
000074CA                            loc_65E4:
000074CA 3200                       		move.w	d0,d1
000074CC 9278 F700                  		sub.w	($FFFFF700).w,d1
000074D0 E141                       		asl.w	#8,d1
000074D2 31C0 F700                  		move.w	d0,($FFFFF700).w
000074D6 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000074DA 4E75                       		rts	
000074DC                            ; ===========================================================================
000074DC                            
000074DC                            loc_65F6:				; XREF: ScrollHoriz2
000074DC D078 F700                  		add.w	($FFFFF700).w,d0
000074E0 B078 F728                  		cmp.w	($FFFFF728).w,d0
000074E4 6EE4                       		bgt.s	loc_65E4
000074E6 3038 F728                  		move.w	($FFFFF728).w,d0
000074EA 60DE                       		bra.s	loc_65E4
000074EC                            ; End of function ScrollHoriz2
000074EC                            
000074EC                            ; ===========================================================================
000074EC 4A40                       		tst.w	d0
000074EE 6A00                       		bpl.s	loc_6610
000074F0 303C FFFE                  		move.w	#-2,d0
000074F4 60E6                       		bra.s	loc_65F6
000074F6                            ; ===========================================================================
000074F6                            
000074F6                            loc_6610:
000074F6 303C 0002                  		move.w	#2,d0
000074FA 60B6                       		bra.s	loc_65CC
000074FC                            
000074FC                            ; ---------------------------------------------------------------------------
000074FC                            ; Subroutine to	scroll the level vertically as Sonic moves
000074FC                            ; ---------------------------------------------------------------------------
000074FC                            
000074FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000074FC                            
000074FC                            
000074FC                            ScrollVertical:				; XREF: DeformBgLayer
000074FC 7200                       		moveq	#0,d1
000074FE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00007502 9078 F704                  		sub.w	($FFFFF704).w,d0
00007506 0838 0002 D022             		btst	#2,($FFFFD022).w
0000750C 6700                       		beq.s	loc_662A
0000750E 5B40                       		subq.w	#5,d0
00007510                            
00007510                            loc_662A:
00007510 0838 0001 D022             		btst	#1,($FFFFD022).w
00007516 6700                       		beq.s	loc_664A
00007518 0640 0020                  		addi.w	#$20,d0
0000751C 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007520 6500                       		bcs.s	loc_6696
00007522 0440 0040                  		subi.w	#$40,d0
00007526 6400                       		bcc.s	loc_6696
00007528 4A38 F75C                  		tst.b	($FFFFF75C).w
0000752C 6600                       		bne.s	loc_66A8
0000752E 6000                       		bra.s	loc_6656
00007530                            ; ===========================================================================
00007530                            
00007530                            loc_664A:
00007530 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00007534 6600                       		bne.s	loc_665C
00007536 4A38 F75C                  		tst.b	($FFFFF75C).w
0000753A 6600                       		bne.s	loc_66A8
0000753C                            
0000753C                            loc_6656:
0000753C 4278 F73C                  		clr.w	($FFFFF73C).w
00007540 4E75                       		rts	
00007542                            ; ===========================================================================
00007542                            
00007542                            loc_665C:
00007542 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00007548 6600                       		bne.s	loc_6684
0000754A 3238 D014                  		move.w	($FFFFD014).w,d1
0000754E 6A00                       		bpl.s	loc_666C
00007550 4441                       		neg.w	d1
00007552                            
00007552                            loc_666C:
00007552 0C41 0800                  		cmpi.w	#$800,d1
00007556 6400                       		bcc.s	loc_6696
00007558 323C 0600                  		move.w	#$600,d1
0000755C 0C40 0006                  		cmpi.w	#6,d0
00007560 6E00                       		bgt.s	loc_66F6
00007562 0C40 FFFA                  		cmpi.w	#-6,d0
00007566 6D00                       		blt.s	loc_66C0
00007568 6000                       		bra.s	loc_66AE
0000756A                            ; ===========================================================================
0000756A                            
0000756A                            loc_6684:
0000756A 323C 0200                  		move.w	#$200,d1
0000756E 0C40 0002                  		cmpi.w	#2,d0
00007572 6E00                       		bgt.s	loc_66F6
00007574 0C40 FFFE                  		cmpi.w	#-2,d0
00007578 6D00                       		blt.s	loc_66C0
0000757A 6000                       		bra.s	loc_66AE
0000757C                            ; ===========================================================================
0000757C                            
0000757C                            loc_6696:
0000757C 323C 1000                  		move.w	#$1000,d1
00007580 0C40 0010                  		cmpi.w	#$10,d0
00007584 6E00                       		bgt.s	loc_66F6
00007586 0C40 FFF0                  		cmpi.w	#-$10,d0
0000758A 6D00                       		blt.s	loc_66C0
0000758C 6000                       		bra.s	loc_66AE
0000758E                            ; ===========================================================================
0000758E                            
0000758E                            loc_66A8:
0000758E 7000                       		moveq	#0,d0
00007590 11C0 F75C                  		move.b	d0,($FFFFF75C).w
00007594                            
00007594                            loc_66AE:
00007594 7200                       		moveq	#0,d1
00007596 3200                       		move.w	d0,d1
00007598 D278 F704                  		add.w	($FFFFF704).w,d1
0000759C 4A40                       		tst.w	d0
0000759E 6A00 0000                  		bpl.w	loc_6700
000075A2 6000 0000                  		bra.w	loc_66CC
000075A6                            ; ===========================================================================
000075A6                            
000075A6                            loc_66C0:
000075A6 4441                       		neg.w	d1
000075A8 48C1                       		ext.l	d1
000075AA E181                       		asl.l	#8,d1
000075AC D2B8 F704                  		add.l	($FFFFF704).w,d1
000075B0 4841                       		swap	d1
000075B2                            
000075B2                            loc_66CC:
000075B2 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000075B6 6E00                       		bgt.s	loc_6724
000075B8 0C41 FF00                  		cmpi.w	#-$100,d1
000075BC 6E00                       		bgt.s	loc_66F0
000075BE 0241 07FF                  		andi.w	#$7FF,d1
000075C2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000075C8 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000075CE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000075D4 6000                       		bra.s	loc_6724
000075D6                            ; ===========================================================================
000075D6                            
000075D6                            loc_66F0:
000075D6 3238 F72C                  		move.w	($FFFFF72C).w,d1
000075DA 6000                       		bra.s	loc_6724
000075DC                            ; ===========================================================================
000075DC                            
000075DC                            loc_66F6:
000075DC 48C1                       		ext.l	d1
000075DE E181                       		asl.l	#8,d1
000075E0 D2B8 F704                  		add.l	($FFFFF704).w,d1
000075E4 4841                       		swap	d1
000075E6                            
000075E6                            loc_6700:
000075E6 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000075EA 6D00                       		blt.s	loc_6724
000075EC 0441 0800                  		subi.w	#$800,d1
000075F0 6500                       		bcs.s	loc_6720
000075F2 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000075F8 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
000075FE 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00007604 6000                       		bra.s	loc_6724
00007606                            ; ===========================================================================
00007606                            
00007606                            loc_6720:
00007606 3238 F72E                  		move.w	($FFFFF72E).w,d1
0000760A                            
0000760A                            loc_6724:
0000760A 3838 F704                  		move.w	($FFFFF704).w,d4
0000760E 4841                       		swap	d1
00007610 2601                       		move.l	d1,d3
00007612 96B8 F704                  		sub.l	($FFFFF704).w,d3
00007616 E09B                       		ror.l	#8,d3
00007618 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000761C 21C1 F704                  		move.l	d1,($FFFFF704).w
00007620 3038 F704                  		move.w	($FFFFF704).w,d0
00007624 0240 0010                  		andi.w	#$10,d0
00007628 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000762C B300                       		eor.b	d1,d0
0000762E 6600                       		bne.s	locret_6766
00007630 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00007636 3038 F704                  		move.w	($FFFFF704).w,d0
0000763A 9044                       		sub.w	d4,d0
0000763C 6A00                       		bpl.s	loc_6760
0000763E 08F8 0000 F754             		bset	#0,($FFFFF754).w
00007644 4E75                       		rts	
00007646                            ; ===========================================================================
00007646                            
00007646                            loc_6760:
00007646 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000764C                            
0000764C                            locret_6766:
0000764C 4E75                       		rts	
0000764E                            ; End of function ScrollVertical
0000764E                            
0000764E                            
0000764E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000764E                            
0000764E                            
0000764E                            ScrollBlock1:				; XREF: Deform_GHZ; et al
0000764E 2438 F708                  		move.l	($FFFFF708).w,d2
00007652 2002                       		move.l	d2,d0
00007654 D084                       		add.l	d4,d0
00007656 21C0 F708                  		move.l	d0,($FFFFF708).w
0000765A 2200                       		move.l	d0,d1
0000765C 4841                       		swap	d1
0000765E 0241 0010                  		andi.w	#$10,d1
00007662 1638 F74C                  		move.b	($FFFFF74C).w,d3
00007666 B701                       		eor.b	d3,d1
00007668 6600                       		bne.s	loc_679C
0000766A 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
00007670 9082                       		sub.l	d2,d0
00007672 6A00                       		bpl.s	loc_6796
00007674 08F8 0002 F756             		bset	#2,($FFFFF756).w
0000767A 6000                       		bra.s	loc_679C
0000767C                            ; ===========================================================================
0000767C                            
0000767C                            loc_6796:
0000767C 08F8 0003 F756             		bset	#3,($FFFFF756).w
00007682                            
00007682                            loc_679C:
00007682 2638 F70C                  		move.l	($FFFFF70C).w,d3
00007686 2003                       		move.l	d3,d0
00007688 D085                       		add.l	d5,d0
0000768A 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000768E 2200                       		move.l	d0,d1
00007690 4841                       		swap	d1
00007692 0241 0010                  		andi.w	#$10,d1
00007696 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000769A B501                       		eor.b	d2,d1
0000769C 6600                       		bne.s	locret_67D0
0000769E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000076A4 9083                       		sub.l	d3,d0
000076A6 6A00                       		bpl.s	loc_67CA
000076A8 08F8 0000 F756             		bset	#0,($FFFFF756).w
000076AE 4E75                       		rts	
000076B0                            ; ===========================================================================
000076B0                            
000076B0                            loc_67CA:
000076B0 08F8 0001 F756             		bset	#1,($FFFFF756).w
000076B6                            
000076B6                            locret_67D0:
000076B6 4E75                       		rts	
000076B8                            ; End of function ScrollBlock1
000076B8                            
000076B8                            
000076B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076B8                            
000076B8                            
000076B8                            ScrollBlock2:				; XREF: Deform_SLZ
000076B8 2438 F708                  		move.l	($FFFFF708).w,d2
000076BC 2002                       		move.l	d2,d0
000076BE D084                       		add.l	d4,d0
000076C0 21C0 F708                  		move.l	d0,($FFFFF708).w
000076C4 2638 F70C                  		move.l	($FFFFF70C).w,d3
000076C8 2003                       		move.l	d3,d0
000076CA D085                       		add.l	d5,d0
000076CC 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000076D0 2200                       		move.l	d0,d1
000076D2 4841                       		swap	d1
000076D4 0241 0010                  		andi.w	#$10,d1
000076D8 1438 F74D                  		move.b	($FFFFF74D).w,d2
000076DC B501                       		eor.b	d2,d1
000076DE 6600                       		bne.s	locret_6812
000076E0 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000076E6 9083                       		sub.l	d3,d0
000076E8 6A00                       		bpl.s	loc_680C
000076EA 08F8 0000 F756             		bset	#0,($FFFFF756).w
000076F0 4E75                       		rts	
000076F2                            ; ===========================================================================
000076F2                            
000076F2                            loc_680C:
000076F2 08F8 0001 F756             		bset	#1,($FFFFF756).w
000076F8                            
000076F8                            locret_6812:
000076F8 4E75                       		rts	
000076FA                            ; End of function ScrollBlock2
000076FA                            
000076FA                            
000076FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000076FA                            
000076FA                            
000076FA                            ScrollBlock3:				; XREF: Deform_GHZ; et al
000076FA 3638 F70C                  		move.w	($FFFFF70C).w,d3
000076FE 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00007702 3200                       		move.w	d0,d1
00007704 0241 0010                  		andi.w	#$10,d1
00007708 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000770C B501                       		eor.b	d2,d1
0000770E 6600                       		bne.s	locret_6842
00007710 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00007716 9043                       		sub.w	d3,d0
00007718 6A00                       		bpl.s	loc_683C
0000771A 08F8 0000 F756             		bset	#0,($FFFFF756).w
00007720 4E75                       		rts	
00007722                            ; ===========================================================================
00007722                            
00007722                            loc_683C:
00007722 08F8 0001 F756             		bset	#1,($FFFFF756).w
00007728                            
00007728                            locret_6842:
00007728 4E75                       		rts	
0000772A                            ; End of function ScrollBlock3
0000772A                            
0000772A                            
0000772A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000772A                            
0000772A                            
0000772A                            ScrollBlock4:				; XREF: Deform_GHZ
0000772A 3438 F710                  		move.w	($FFFFF710).w,d2
0000772E 3638 F714                  		move.w	($FFFFF714).w,d3
00007732 3038 F73A                  		move.w	($FFFFF73A).w,d0
00007736 48C0                       		ext.l	d0
00007738 EF80                       		asl.l	#7,d0
0000773A D1B8 F710                  		add.l	d0,($FFFFF710).w
0000773E 3038 F710                  		move.w	($FFFFF710).w,d0
00007742 0240 0010                  		andi.w	#$10,d0
00007746 1238 F74E                  		move.b	($FFFFF74E).w,d1
0000774A B300                       		eor.b	d1,d0
0000774C 6600                       		bne.s	locret_6884
0000774E 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00007754 3038 F710                  		move.w	($FFFFF710).w,d0
00007758 9042                       		sub.w	d2,d0
0000775A 6A00                       		bpl.s	loc_687E
0000775C 08F8 0002 F758             		bset	#2,($FFFFF758).w
00007762 6000                       		bra.s	locret_6884
00007764                            ; ===========================================================================
00007764                            
00007764                            loc_687E:
00007764 08F8 0003 F758             		bset	#3,($FFFFF758).w
0000776A                            
0000776A                            locret_6884:
0000776A 4E75                       		rts	
0000776C                            ; End of function ScrollBlock4
0000776C                            
0000776C                            
0000776C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000776C                            
0000776C                            
0000776C                            sub_6886:				; XREF: loc_C44
0000776C 4BF9 00C0 0004             		lea	($C00004).l,a5
00007772 4DF9 00C0 0000             		lea	($C00000).l,a6
00007778 45F8 F756                  		lea	($FFFFF756).w,a2
0000777C 47F8 F708                  		lea	($FFFFF708).w,a3
00007780 49F8 A440                  		lea	($FFFFA440).w,a4
00007784 343C 6000                  		move.w	#$6000,d2
00007788 6100 0000                  		bsr.w	sub_6954
0000778C 45F8 F758                  		lea	($FFFFF758).w,a2
00007790 47F8 F710                  		lea	($FFFFF710).w,a3
00007794 6000 0000                  		bra.w	sub_69F4
00007798                            ; End of function sub_6886
00007798                            
00007798                            ; ---------------------------------------------------------------------------
00007798                            ; Subroutine to	display	correct	tiles as you move
00007798                            ; ---------------------------------------------------------------------------
00007798                            
00007798                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007798                            
00007798                            
00007798                            LoadTilesAsYouMove:			; XREF: Demo_Time
00007798 4BF9 00C0 0004             		lea	($C00004).l,a5
0000779E 4DF9 00C0 0000             		lea	($C00000).l,a6
000077A4 45F8 FF32                  		lea	($FFFFFF32).w,a2
000077A8 47F8 FF18                  		lea	($FFFFFF18).w,a3
000077AC 49F8 A440                  		lea	($FFFFA440).w,a4
000077B0 343C 6000                  		move.w	#$6000,d2
000077B4 6100 0000                  		bsr.w	sub_6954
000077B8 45F8 FF34                  		lea	($FFFFFF34).w,a2
000077BC 47F8 FF20                  		lea	($FFFFFF20).w,a3
000077C0 6100 0000                  		bsr.w	sub_69F4
000077C4 45F8 FF30                  		lea	($FFFFFF30).w,a2
000077C8 47F8 FF10                  		lea	($FFFFFF10).w,a3
000077CC 49F8 A400                  		lea	($FFFFA400).w,a4
000077D0 343C 4000                  		move.w	#$4000,d2
000077D4 4A12                       		tst.b	(a2)
000077D6 6700                       		beq.s	locret_6952
000077D8 0892 0000                  		bclr	#0,(a2)
000077DC 6700                       		beq.s	loc_6908
000077DE 78F0                       		moveq	#-$10,d4
000077E0 7AF0                       		moveq	#-$10,d5
000077E2 6100 0000                  		bsr.w	sub_6C20
000077E6 78F0                       		moveq	#-$10,d4
000077E8 7AF0                       		moveq	#-$10,d5
000077EA 6100 0000                  		bsr.w	sub_6AD8
000077EE                            
000077EE                            loc_6908:
000077EE 0892 0001                  		bclr	#1,(a2)
000077F2 6700                       		beq.s	loc_6922
000077F4 383C 00E0                  		move.w	#$E0,d4
000077F8 7AF0                       		moveq	#-$10,d5
000077FA 6100 0000                  		bsr.w	sub_6C20
000077FE 383C 00E0                  		move.w	#$E0,d4
00007802 7AF0                       		moveq	#-$10,d5
00007804 6100 0000                  		bsr.w	sub_6AD8
00007808                            
00007808                            loc_6922:
00007808 0892 0002                  		bclr	#2,(a2)
0000780C 6700                       		beq.s	loc_6938
0000780E 78F0                       		moveq	#-$10,d4
00007810 7AF0                       		moveq	#-$10,d5
00007812 6100 0000                  		bsr.w	sub_6C20
00007816 78F0                       		moveq	#-$10,d4
00007818 7AF0                       		moveq	#-$10,d5
0000781A 6100 0000                  		bsr.w	sub_6B04
0000781E                            
0000781E                            loc_6938:
0000781E 0892 0003                  		bclr	#3,(a2)
00007822 6700                       		beq.s	locret_6952
00007824 78F0                       		moveq	#-$10,d4
00007826 3A3C 0140                  		move.w	#$140,d5
0000782A 6100 0000                  		bsr.w	sub_6C20
0000782E 78F0                       		moveq	#-$10,d4
00007830 3A3C 0140                  		move.w	#$140,d5
00007834 6100 0000                  		bsr.w	sub_6B04
00007838                            
00007838                            locret_6952:
00007838 4E75                       		rts	
0000783A                            ; End of function LoadTilesAsYouMove
0000783A                            
0000783A                            
0000783A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000783A                            
0000783A                            
0000783A                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
0000783A 4A12                       		tst.b	(a2)
0000783C 6700 0000                  		beq.w	locret_69F2
00007840 0892 0000                  		bclr	#0,(a2)
00007844 6700                       		beq.s	loc_6972
00007846 78F0                       		moveq	#-$10,d4
00007848 7AF0                       		moveq	#-$10,d5
0000784A 6100 0000                  		bsr.w	sub_6C20
0000784E 78F0                       		moveq	#-$10,d4
00007850 7AF0                       		moveq	#-$10,d5
00007852 7C1F                       		moveq	#$1F,d6
00007854 6100 0000                  		bsr.w	sub_6ADA
00007858                            
00007858                            loc_6972:
00007858 0892 0001                  		bclr	#1,(a2)
0000785C 6700                       		beq.s	loc_698E
0000785E 383C 00E0                  		move.w	#$E0,d4
00007862 7AF0                       		moveq	#-$10,d5
00007864 6100 0000                  		bsr.w	sub_6C20
00007868 383C 00E0                  		move.w	#$E0,d4
0000786C 7AF0                       		moveq	#-$10,d5
0000786E 7C1F                       		moveq	#$1F,d6
00007870 6100 0000                  		bsr.w	sub_6ADA
00007874                            
00007874                            loc_698E:
00007874 0892 0002                  		bclr	#2,(a2)
00007878 6700                       		beq.s	loc_69BE
0000787A 78F0                       		moveq	#-$10,d4
0000787C 7AF0                       		moveq	#-$10,d5
0000787E 6100 0000                  		bsr.w	sub_6C20
00007882 78F0                       		moveq	#-$10,d4
00007884 7AF0                       		moveq	#-$10,d5
00007886 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000788A 322B 0004                  		move.w	4(a3),d1
0000788E 0241 FFF0                  		andi.w	#-$10,d1
00007892 9C41                       		sub.w	d1,d6
00007894 6D00                       		blt.s	loc_69BE
00007896 E84E                       		lsr.w	#4,d6
00007898 0C46 000F                  		cmpi.w	#$F,d6
0000789C 6500                       		bcs.s	loc_69BA
0000789E 7C0F                       		moveq	#$F,d6
000078A0                            
000078A0                            loc_69BA:
000078A0 6100 0000                  		bsr.w	sub_6B06
000078A4                            
000078A4                            loc_69BE:
000078A4 0892 0003                  		bclr	#3,(a2)
000078A8 6700                       		beq.s	locret_69F2
000078AA 78F0                       		moveq	#-$10,d4
000078AC 3A3C 0140                  		move.w	#$140,d5
000078B0 6100 0000                  		bsr.w	sub_6C20
000078B4 78F0                       		moveq	#-$10,d4
000078B6 3A3C 0140                  		move.w	#$140,d5
000078BA 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000078BE 322B 0004                  		move.w	4(a3),d1
000078C2 0241 FFF0                  		andi.w	#-$10,d1
000078C6 9C41                       		sub.w	d1,d6
000078C8 6D00                       		blt.s	locret_69F2
000078CA E84E                       		lsr.w	#4,d6
000078CC 0C46 000F                  		cmpi.w	#$F,d6
000078D0 6500                       		bcs.s	loc_69EE
000078D2 7C0F                       		moveq	#$F,d6
000078D4                            
000078D4                            loc_69EE:
000078D4 6100 0000                  		bsr.w	sub_6B06
000078D8                            
000078D8                            locret_69F2:
000078D8 4E75                       		rts	
000078DA                            ; End of function sub_6954
000078DA                            
000078DA                            
000078DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000078DA                            
000078DA                            
000078DA                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000078DA 4A12                       		tst.b	(a2)
000078DC 6700 0000                  		beq.w	locret_6A80
000078E0 0892 0002                  		bclr	#2,(a2)
000078E4 6700                       		beq.s	loc_6A3E
000078E6 0C53 0010                  		cmpi.w	#$10,(a3)
000078EA 6500                       		bcs.s	loc_6A3E
000078EC 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000078F0 322B 0004                  		move.w	4(a3),d1
000078F4 0241 FFF0                  		andi.w	#-$10,d1
000078F8 9841                       		sub.w	d1,d4
000078FA 3F04                       		move.w	d4,-(sp)
000078FC 7AF0                       		moveq	#-$10,d5
000078FE 6100 0000                  		bsr.w	sub_6C20
00007902 381F                       		move.w	(sp)+,d4
00007904 7AF0                       		moveq	#-$10,d5
00007906 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000790A 322B 0004                  		move.w	4(a3),d1
0000790E 0241 FFF0                  		andi.w	#-$10,d1
00007912 9C41                       		sub.w	d1,d6
00007914 6D00                       		blt.s	loc_6A3E
00007916 E84E                       		lsr.w	#4,d6
00007918 0446 000E                  		subi.w	#$E,d6
0000791C 6400                       		bcc.s	loc_6A3E
0000791E 4446                       		neg.w	d6
00007920 6100 0000                  		bsr.w	sub_6B06
00007924                            
00007924                            loc_6A3E:
00007924 0892 0003                  		bclr	#3,(a2)
00007928 6700                       		beq.s	locret_6A80
0000792A 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
0000792E 322B 0004                  		move.w	4(a3),d1
00007932 0241 FFF0                  		andi.w	#-$10,d1
00007936 9841                       		sub.w	d1,d4
00007938 3F04                       		move.w	d4,-(sp)
0000793A 3A3C 0140                  		move.w	#$140,d5
0000793E 6100 0000                  		bsr.w	sub_6C20
00007942 381F                       		move.w	(sp)+,d4
00007944 3A3C 0140                  		move.w	#$140,d5
00007948 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
0000794C 322B 0004                  		move.w	4(a3),d1
00007950 0241 FFF0                  		andi.w	#-$10,d1
00007954 9C41                       		sub.w	d1,d6
00007956 6D00                       		blt.s	locret_6A80
00007958 E84E                       		lsr.w	#4,d6
0000795A 0446 000E                  		subi.w	#$E,d6
0000795E 6400                       		bcc.s	locret_6A80
00007960 4446                       		neg.w	d6
00007962 6100 0000                  		bsr.w	sub_6B06
00007966                            
00007966                            locret_6A80:
00007966 4E75                       		rts	
00007968                            ; End of function sub_69F4
00007968                            
00007968                            ; ===========================================================================
00007968 4A12                       		tst.b	(a2)
0000796A 6700                       		beq.s	locret_6AD6
0000796C 0892 0002                  		bclr	#2,(a2)
00007970 6700                       		beq.s	loc_6AAC
00007972 383C 00D0                  		move.w	#$D0,d4
00007976 322B 0004                  		move.w	4(a3),d1
0000797A 0241 FFF0                  		andi.w	#-$10,d1
0000797E 9841                       		sub.w	d1,d4
00007980 3F04                       		move.w	d4,-(sp)
00007982 7AF0                       		moveq	#-$10,d5
00007984 6100 0000                  		bsr.w	sub_6C3C
00007988 381F                       		move.w	(sp)+,d4
0000798A 7AF0                       		moveq	#-$10,d5
0000798C 7C02                       		moveq	#2,d6
0000798E 6100 0000                  		bsr.w	sub_6B06
00007992                            
00007992                            loc_6AAC:
00007992 0892 0003                  		bclr	#3,(a2)
00007996 6700                       		beq.s	locret_6AD6
00007998 383C 00D0                  		move.w	#$D0,d4
0000799C 322B 0004                  		move.w	4(a3),d1
000079A0 0241 FFF0                  		andi.w	#-$10,d1
000079A4 9841                       		sub.w	d1,d4
000079A6 3F04                       		move.w	d4,-(sp)
000079A8 3A3C 0140                  		move.w	#$140,d5
000079AC 6100 0000                  		bsr.w	sub_6C3C
000079B0 381F                       		move.w	(sp)+,d4
000079B2 3A3C 0140                  		move.w	#$140,d5
000079B6 7C02                       		moveq	#2,d6
000079B8 6100 0000                  		bsr.w	sub_6B06
000079BC                            
000079BC                            locret_6AD6:
000079BC 4E75                       		rts	
000079BE                            
000079BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079BE                            
000079BE                            
000079BE                            sub_6AD8:				; XREF: LoadTilesAsYouMove
000079BE 7C15                       		moveq	#$15,d6
000079C0                            ; End of function sub_6AD8
000079C0                            
000079C0                            
000079C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079C0                            
000079C0                            
000079C0                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
000079C0 2E3C 0080 0000             		move.l	#$800000,d7
000079C6 2200                       		move.l	d0,d1
000079C8                            
000079C8                            loc_6AE2:
000079C8 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079CC 6100 0000                  		bsr.w	sub_6BD6
000079D0 2001                       		move.l	d1,d0
000079D2 6100 0000                  		bsr.w	sub_6B32
000079D6 5801                       		addq.b	#4,d1
000079D8 0201 007F                  		andi.b	#$7F,d1
000079DC 4CDF 0030                  		movem.l	(sp)+,d4-d5
000079E0 0645 0010                  		addi.w	#$10,d5
000079E4 51CE FFE2                  		dbf	d6,loc_6AE2
000079E8 4E75                       		rts	
000079EA                            ; End of function sub_6ADA
000079EA                            
000079EA                            
000079EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079EA                            
000079EA                            
000079EA                            sub_6B04:				; XREF: LoadTilesAsYouMove
000079EA 7C0F                       		moveq	#$F,d6
000079EC                            ; End of function sub_6B04
000079EC                            
000079EC                            
000079EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000079EC                            
000079EC                            
000079EC                            sub_6B06:				; XREF: sub_6954
000079EC 2E3C 0080 0000             		move.l	#$800000,d7
000079F2 2200                       		move.l	d0,d1
000079F4                            
000079F4                            loc_6B0E:
000079F4 48E7 0C00                  		movem.l	d4-d5,-(sp)
000079F8 6100 0000                  		bsr.w	sub_6BD6
000079FC 2001                       		move.l	d1,d0
000079FE 6100 0000                  		bsr.w	sub_6B32
00007A02 0641 0100                  		addi.w	#$100,d1
00007A06 0241 0FFF                  		andi.w	#$FFF,d1
00007A0A 4CDF 0030                  		movem.l	(sp)+,d4-d5
00007A0E 0644 0010                  		addi.w	#$10,d4
00007A12 51CE FFE0                  		dbf	d6,loc_6B0E
00007A16 4E75                       		rts	
00007A18                            ; End of function sub_6B06
00007A18                            
00007A18                            
00007A18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007A18                            
00007A18                            
00007A18                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00007A18 8042                       		or.w	d2,d0
00007A1A 4840                       		swap	d0
00007A1C 0810 0004                  		btst	#4,(a0)
00007A20 6600                       		bne.s	loc_6B6E
00007A22 0810 0003                  		btst	#3,(a0)
00007A26 6600                       		bne.s	loc_6B4E
00007A28 2A80                       		move.l	d0,(a5)
00007A2A 2C99                       		move.l	(a1)+,(a6)
00007A2C D087                       		add.l	d7,d0
00007A2E 2A80                       		move.l	d0,(a5)
00007A30 2C99                       		move.l	(a1)+,(a6)
00007A32 4E75                       		rts	
00007A34                            ; ===========================================================================
00007A34                            
00007A34                            loc_6B4E:
00007A34 2A80                       		move.l	d0,(a5)
00007A36 2819                       		move.l	(a1)+,d4
00007A38 0A84 0800 0800             		eori.l	#$8000800,d4
00007A3E 4844                       		swap	d4
00007A40 2C84                       		move.l	d4,(a6)
00007A42 D087                       		add.l	d7,d0
00007A44 2A80                       		move.l	d0,(a5)
00007A46 2819                       		move.l	(a1)+,d4
00007A48 0A84 0800 0800             		eori.l	#$8000800,d4
00007A4E 4844                       		swap	d4
00007A50 2C84                       		move.l	d4,(a6)
00007A52 4E75                       		rts	
00007A54                            ; ===========================================================================
00007A54                            
00007A54                            loc_6B6E:
00007A54 0810 0003                  		btst	#3,(a0)
00007A58 6600                       		bne.s	loc_6B90
00007A5A 2A80                       		move.l	d0,(a5)
00007A5C 2A19                       		move.l	(a1)+,d5
00007A5E 2819                       		move.l	(a1)+,d4
00007A60 0A84 1000 1000             		eori.l	#$10001000,d4
00007A66 2C84                       		move.l	d4,(a6)
00007A68 D087                       		add.l	d7,d0
00007A6A 2A80                       		move.l	d0,(a5)
00007A6C 0A85 1000 1000             		eori.l	#$10001000,d5
00007A72 2C85                       		move.l	d5,(a6)
00007A74 4E75                       		rts	
00007A76                            ; ===========================================================================
00007A76                            
00007A76                            loc_6B90:
00007A76 2A80                       		move.l	d0,(a5)
00007A78 2A19                       		move.l	(a1)+,d5
00007A7A 2819                       		move.l	(a1)+,d4
00007A7C 0A84 1800 1800             		eori.l	#$18001800,d4
00007A82 4844                       		swap	d4
00007A84 2C84                       		move.l	d4,(a6)
00007A86 D087                       		add.l	d7,d0
00007A88 2A80                       		move.l	d0,(a5)
00007A8A 0A85 1800 1800             		eori.l	#$18001800,d5
00007A90 4845                       		swap	d5
00007A92 2C85                       		move.l	d5,(a6)
00007A94 4E75                       		rts	
00007A96                            ; End of function sub_6B32
00007A96                            
00007A96                            ; ===========================================================================
00007A96 4E75                       		rts	
00007A98                            ; ===========================================================================
00007A98 2A80                       		move.l	d0,(a5)
00007A9A 3A3C 2000                  		move.w	#$2000,d5
00007A9E 3819                       		move.w	(a1)+,d4
00007AA0 D845                       		add.w	d5,d4
00007AA2 3C84                       		move.w	d4,(a6)
00007AA4 3819                       		move.w	(a1)+,d4
00007AA6 D845                       		add.w	d5,d4
00007AA8 3C84                       		move.w	d4,(a6)
00007AAA D087                       		add.l	d7,d0
00007AAC 2A80                       		move.l	d0,(a5)
00007AAE 3819                       		move.w	(a1)+,d4
00007AB0 D845                       		add.w	d5,d4
00007AB2 3C84                       		move.w	d4,(a6)
00007AB4 3819                       		move.w	(a1)+,d4
00007AB6 D845                       		add.w	d5,d4
00007AB8 3C84                       		move.w	d4,(a6)
00007ABA 4E75                       		rts	
00007ABC                            
00007ABC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007ABC                            
00007ABC                            
00007ABC                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00007ABC 43F8 B000                  		lea	($FFFFB000).w,a1
00007AC0 D86B 0004                  		add.w	4(a3),d4
00007AC4 DA53                       		add.w	(a3),d5
00007AC6 3604                       		move.w	d4,d3
00007AC8 E24B                       		lsr.w	#1,d3
00007ACA 0243 0380                  		andi.w	#$380,d3
00007ACE E64D                       		lsr.w	#3,d5
00007AD0 3005                       		move.w	d5,d0
00007AD2 EA48                       		lsr.w	#5,d0
00007AD4 0240 007F                  		andi.w	#$7F,d0
00007AD8 D043                       		add.w	d3,d0
00007ADA 76FF                       		moveq	#-1,d3
00007ADC 1634 0000                  		move.b	(a4,d0.w),d3
00007AE0 6700                       		beq.s	locret_6C1E
00007AE2 5303                       		subq.b	#1,d3
00007AE4 0243 007F                  		andi.w	#$7F,d3
00007AE8 EE5B                       		ror.w	#7,d3
00007AEA D844                       		add.w	d4,d4
00007AEC 0244 01E0                  		andi.w	#$1E0,d4
00007AF0 0245 001E                  		andi.w	#$1E,d5
00007AF4 D644                       		add.w	d4,d3
00007AF6 D645                       		add.w	d5,d3
00007AF8 2043                       		movea.l	d3,a0
00007AFA 3610                       		move.w	(a0),d3
00007AFC 0243 03FF                  		andi.w	#$3FF,d3
00007B00 E74B                       		lsl.w	#3,d3
00007B02 D2C3                       		adda.w	d3,a1
00007B04                            
00007B04                            locret_6C1E:
00007B04 4E75                       		rts	
00007B06                            ; End of function sub_6BD6
00007B06                            
00007B06                            
00007B06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B06                            
00007B06                            
00007B06                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00007B06 D86B 0004                  		add.w	4(a3),d4
00007B0A DA53                       		add.w	(a3),d5
00007B0C 0244 00F0                  		andi.w	#$F0,d4
00007B10 0245 01F0                  		andi.w	#$1F0,d5
00007B14 E94C                       		lsl.w	#4,d4
00007B16 E44D                       		lsr.w	#2,d5
00007B18 D845                       		add.w	d5,d4
00007B1A 7003                       		moveq	#3,d0
00007B1C 4840                       		swap	d0
00007B1E 3004                       		move.w	d4,d0
00007B20 4E75                       		rts	
00007B22                            ; End of function sub_6C20
00007B22                            
00007B22                            
00007B22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B22                            ; not used
00007B22                            
00007B22                            
00007B22                            sub_6C3C:
00007B22 D86B 0004                  		add.w	4(a3),d4
00007B26 DA53                       		add.w	(a3),d5
00007B28 0244 00F0                  		andi.w	#$F0,d4
00007B2C 0245 01F0                  		andi.w	#$1F0,d5
00007B30 E94C                       		lsl.w	#4,d4
00007B32 E44D                       		lsr.w	#2,d5
00007B34 D845                       		add.w	d5,d4
00007B36 7002                       		moveq	#2,d0
00007B38 4840                       		swap	d0
00007B3A 3004                       		move.w	d4,d0
00007B3C 4E75                       		rts	
00007B3E                            ; End of function sub_6C3C
00007B3E                            
00007B3E                            ; ---------------------------------------------------------------------------
00007B3E                            ; Subroutine to	load tiles as soon as the level	appears
00007B3E                            ; ---------------------------------------------------------------------------
00007B3E                            
00007B3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B3E                            
00007B3E                            
00007B3E                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00007B3E 4BF9 00C0 0004             		lea	($C00004).l,a5
00007B44 4DF9 00C0 0000             		lea	($C00000).l,a6
00007B4A 47F8 F700                  		lea	($FFFFF700).w,a3
00007B4E 49F8 A400                  		lea	($FFFFA400).w,a4
00007B52 343C 4000                  		move.w	#$4000,d2
00007B56 6100                       		bsr.s	LoadTilesFromStart2
00007B58 47F8 F708                  		lea	($FFFFF708).w,a3
00007B5C 49F8 A440                  		lea	($FFFFA440).w,a4
00007B60 343C 6000                  		move.w	#$6000,d2
00007B64                            ; End of function LoadTilesFromStart
00007B64                            
00007B64                            
00007B64                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B64                            
00007B64                            
00007B64                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00007B64 78F0                       		moveq	#-$10,d4
00007B66 7C0F                       		moveq	#$F,d6
00007B68                            
00007B68                            loc_6C82:
00007B68 48E7 0E00                  		movem.l	d4-d6,-(sp)
00007B6C 7A00                       		moveq	#0,d5
00007B6E 3204                       		move.w	d4,d1
00007B70 6100 FF94                  		bsr.w	sub_6C20
00007B74 3801                       		move.w	d1,d4
00007B76 7A00                       		moveq	#0,d5
00007B78 7C1F                       		moveq	#$1F,d6
00007B7A 6100 FE44                  		bsr.w	sub_6ADA
00007B7E 4CDF 0070                  		movem.l	(sp)+,d4-d6
00007B82 0644 0010                  		addi.w	#$10,d4
00007B86 51CE FFE0                  		dbf	d6,loc_6C82
00007B8A 4E75                       		rts	
00007B8C                            ; End of function LoadTilesFromStart2
00007B8C                            
00007B8C                            ; ---------------------------------------------------------------------------
00007B8C                            ; Main Load Block loading subroutine
00007B8C                            ; ---------------------------------------------------------------------------
00007B8C                            
00007B8C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B8C                            
00007B8C                            
00007B8C                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00007B8C 7000                       		moveq	#0,d0
00007B8E 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007B92 E948                       		lsl.w	#4,d0
00007B94 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00007B9A 45F2 0000                  		lea	(a2,d0.w),a2
00007B9E 2F0A                       		move.l	a2,-(sp)
00007BA0 588A                       		addq.l	#4,a2
00007BA2 205A                       		movea.l	(a2)+,a0
00007BA4 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00007BA8 303C 0000                  		move.w	#0,d0
00007BAC 6100 A448                  		bsr.w	EniDec
00007BB0 205A                       		movea.l	(a2)+,a0
00007BB2 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00007BB8 6100 A5BA                  		bsr.w	KosDec
00007BBC 6100 0000                  		bsr.w	LevelLayoutLoad
00007BC0 301A                       		move.w	(a2)+,d0
00007BC2 3012                       		move.w	(a2),d0
00007BC4 0240 00FF                  		andi.w	#$FF,d0
00007BC8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00007BCE 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00007BD0 700C                       		moveq	#$C,d0		; use SB3 pallet
00007BD2                            
00007BD2                            MLB_ChkSBZPal:
00007BD2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00007BD8 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00007BDA 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00007BE0 6600                       		bne.s	MLB_NormalPal	; if not, branch
00007BE2                            
00007BE2                            MLB_UsePal0E:
00007BE2 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00007BE4                            
00007BE4                            MLB_NormalPal:
00007BE4 6100 ADC2                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00007BE8 245F                       		movea.l	(sp)+,a2
00007BEA 584A                       		addq.w	#4,a2
00007BEC 7000                       		moveq	#0,d0
00007BEE 1012                       		move.b	(a2),d0
00007BF0 6700                       		beq.s	locret_6D10
00007BF2 6100 A264                  		bsr.w	LoadPLC		; load pattern load cues
00007BF6                            
00007BF6                            locret_6D10:
00007BF6 4E75                       		rts	
00007BF8                            ; End of function MainLoadBlockLoad
00007BF8                            
00007BF8                            ; ---------------------------------------------------------------------------
00007BF8                            ; Level	layout loading subroutine
00007BF8                            ; ---------------------------------------------------------------------------
00007BF8                            
00007BF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BF8                            
00007BF8                            
00007BF8                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00007BF8 47F8 A400                  		lea	($FFFFA400).w,a3
00007BFC 323C 01FF                  		move.w	#$1FF,d1
00007C00 7000                       		moveq	#0,d0
00007C02                            
00007C02                            LevLoad_ClrRam:
00007C02 26C0                       		move.l	d0,(a3)+
00007C04 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00007C08                            
00007C08 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00007C0C 7200                       		moveq	#0,d1
00007C0E 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00007C12 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00007C16 7202                       		moveq	#2,d1
00007C18                            ; End of function LevelLayoutLoad
00007C18                            
00007C18                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00007C18                            
00007C18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C18                            
00007C18                            
00007C18                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00007C18 3038 FE10                  		move.w	($FFFFFE10).w,d0
00007C1C ED08                       		lsl.b	#6,d0
00007C1E EA48                       		lsr.w	#5,d0
00007C20 3400                       		move.w	d0,d2
00007C22 D040                       		add.w	d0,d0
00007C24 D042                       		add.w	d2,d0
00007C26 D041                       		add.w	d1,d0
00007C28 43F9 0000 0000             		lea	(Level_Index).l,a1
00007C2E 3031 0000                  		move.w	(a1,d0.w),d0
00007C32 43F1 0000                  		lea	(a1,d0.w),a1
00007C36 7200                       		moveq	#0,d1
00007C38 3401                       		move.w	d1,d2
00007C3A 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00007C3C 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00007C3E                            
00007C3E                            LevLoad_NumRows:
00007C3E 3001                       		move.w	d1,d0
00007C40 204B                       		movea.l	a3,a0
00007C42                            
00007C42                            LevLoad_Row:
00007C42 10D9                       		move.b	(a1)+,(a0)+
00007C44 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00007C48 47EB 0080                  		lea	$80(a3),a3	; do next row
00007C4C 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00007C50 4E75                       		rts	
00007C52                            ; End of function LevelLayoutLoad2
00007C52                            
00007C52                            ; ---------------------------------------------------------------------------
00007C52                            ; Dynamic screen resize	loading	subroutine
00007C52                            ; ---------------------------------------------------------------------------
00007C52                            
00007C52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007C52                            
00007C52                            
00007C52                            DynScrResizeLoad:			; XREF: DeformBgLayer
00007C52 7000                       		moveq	#0,d0
00007C54 1038 FE10                  		move.b	($FFFFFE10).w,d0
00007C58 D040                       		add.w	d0,d0
00007C5A 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00007C5E 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00007C62 7202                       		moveq	#2,d1
00007C64 3038 F726                  		move.w	($FFFFF726).w,d0
00007C68 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00007C6C 6700                       		beq.s	locret_6DAA
00007C6E 6400                       		bcc.s	loc_6DAC
00007C70 4441                       		neg.w	d1
00007C72 3038 F704                  		move.w	($FFFFF704).w,d0
00007C76 B078 F726                  		cmp.w	($FFFFF726).w,d0
00007C7A 6300                       		bls.s	loc_6DA0
00007C7C 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00007C80 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00007C86                            
00007C86                            loc_6DA0:
00007C86 D378 F72E                  		add.w	d1,($FFFFF72E).w
00007C8A 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007C90                            
00007C90                            locret_6DAA:
00007C90 4E75                       		rts	
00007C92                            ; ===========================================================================
00007C92                            
00007C92                            loc_6DAC:				; XREF: DynScrResizeLoad
00007C92 3038 F704                  		move.w	($FFFFF704).w,d0
00007C96 5040                       		addq.w	#8,d0
00007C98 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00007C9C 6500                       		bcs.s	loc_6DC4
00007C9E 0838 0001 D022             		btst	#1,($FFFFD022).w
00007CA4 6700                       		beq.s	loc_6DC4
00007CA6 D241                       		add.w	d1,d1
00007CA8 D241                       		add.w	d1,d1
00007CAA                            
00007CAA                            loc_6DC4:
00007CAA D378 F72E                  		add.w	d1,($FFFFF72E).w
00007CAE 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00007CB4 4E75                       		rts	
00007CB6                            ; End of function DynScrResizeLoad
00007CB6                            
00007CB6                            ; ===========================================================================
00007CB6                            ; ---------------------------------------------------------------------------
00007CB6                            ; Offset index for dynamic screen resizing
00007CB6                            ; ---------------------------------------------------------------------------
00007CB6 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00007CBA 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00007CBE 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00007CC2 0000 0000                  		dc.w Resize_Ending-Resize_Index, Resize_GHZ-Resize_Index
00007CC6                            ; ===========================================================================
00007CC6                            ; ---------------------------------------------------------------------------
00007CC6                            ; Green	Hill Zone dynamic screen resizing
00007CC6                            ; ---------------------------------------------------------------------------
00007CC6                            
00007CC6                            Resize_GHZ:				; XREF: Resize_Index
00007CC6 7000                       		moveq	#0,d0
00007CC8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007CCC D040                       		add.w	d0,d0
00007CCE 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00007CD2 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00007CD6                            ; ===========================================================================
00007CD6 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00007CD8 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00007CDA 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00007CDC                            ; ===========================================================================
00007CDC                            
00007CDC                            Resize_GHZ1:
00007CDC 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00007CE2 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00007CE8 6500                       		bcs.s	locret_6E08	; if not, branch
00007CEA 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00007CF0                            
00007CF0                            locret_6E08:
00007CF0 4E75                       		rts	
00007CF2                            ; ===========================================================================
00007CF2                            
00007CF2                            Resize_GHZ2:
00007CF2 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007CF8 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00007CFE 6500                       		bcs.s	locret_6E3A
00007D00 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007D06 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00007D0C 6500                       		bcs.s	locret_6E3A
00007D0E 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007D14 0C78 1C00 F700             		cmpi.w	#$1C00,($FFFFF700).w
00007D1A 6500                       		bcs.s	locret_6E3A
00007D1C 31FC 0100 F726             		move.w	#$100,($FFFFF726).w
00007D22 0C78 1D00 F700             		cmpi.w	#$1D00,($FFFFF700).w
00007D28 6500                       		bcs.s	locret_6E3A
00007D2A 31FC 0020 F726             		move.w	#$20,($FFFFF726).w
00007D30                            		
00007D30                            locret_6E3A:
00007D30 4E75                       		rts	
00007D32                            ; ===========================================================================
00007D32                            
00007D32                            Resize_GHZ3:
00007D32 7000                       		moveq	#0,d0
00007D34 1038 F742                  		move.b	($FFFFF742).w,d0
00007D38 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00007D3C 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00007D40                            ; ===========================================================================
00007D40 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00007D42 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00007D44 0000                       		dc.w Resize_GHZ3end-off_6E4A
00007D46                            ; ===========================================================================
00007D46                            
00007D46                            Resize_GHZ3main:
00007D46 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007D4C 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00007D52 6500                       		bcs.s	locret_6E96
00007D54 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00007D5A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007D60 6500                       		bcs.s	locret_6E96
00007D62 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00007D68 6500                       		bcs.s	loc_6E98
00007D6A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00007D70 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00007D76 6400                       		bcc.s	loc_6E8E
00007D78 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00007D7E 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00007D84                            
00007D84                            loc_6E8E:
00007D84 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007D8A 6400                       		bcc.s	loc_6E98
00007D8C                            
00007D8C                            locret_6E96:
00007D8C 4E75                       		rts	
00007D8E                            ; ===========================================================================
00007D8E                            
00007D8E                            loc_6E98:
00007D8E 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00007D94 5438 F742                  		addq.b	#2,($FFFFF742).w
00007D98 4E75                       		rts	
00007D9A                            ; ===========================================================================
00007D9A                            
00007D9A                            Resize_GHZ3boss:
00007D9A 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00007DA0 6400                       		bcc.s	loc_6EB0
00007DA2 5538 F742                  		subq.b	#2,($FFFFF742).w
00007DA6                            
00007DA6                            loc_6EB0:
00007DA6 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00007DAC 6500                       		bcs.s	locret_6EE8
00007DAE 6100 0000                  		bsr.w	SingleObjLoad
00007DB2 6600                       		bne.s	loc_6ED0
00007DB4 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00007DB8 337C 2A60 0008             		move.w	#$2A60,8(a1)
00007DBE 337C 0280 000C             		move.w	#$280,$C(a1)
00007DC4                            
00007DC4                            loc_6ED0:
00007DC4 303C 008C                  		move.w	#$8C,d0
00007DC8 6100 9EA4                  		bsr.w	PlaySound	; play boss music
00007DCC 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007DD2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007DD6 7011                       		moveq	#$11,d0
00007DD8 6000 A07E                  		bra.w	LoadPLC		; load boss patterns
00007DDC                            ; ===========================================================================
00007DDC                            
00007DDC                            locret_6EE8:
00007DDC 4E75                       		rts	
00007DDE                            ; ===========================================================================
00007DDE                            
00007DDE                            Resize_GHZ3end:
00007DDE 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007DE4 4E75                       		rts	
00007DE6                            ; ===========================================================================
00007DE6                            ; ---------------------------------------------------------------------------
00007DE6                            ; Labyrinth Zone dynamic screen	resizing
00007DE6                            ; ---------------------------------------------------------------------------
00007DE6                            
00007DE6                            Resize_LZ:				; XREF: Resize_Index
00007DE6 7000                       		moveq	#0,d0
00007DE8 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007DEC D040                       		add.w	d0,d0
00007DEE 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00007DF2 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00007DF6                            ; ===========================================================================
00007DF6 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00007DF8 0000                       		dc.w Resize_LZ12-Resize_LZx
00007DFA 0000                       		dc.w Resize_LZ3-Resize_LZx
00007DFC 0000                       		dc.w Resize_SBZ3-Resize_LZx
00007DFE                            ; ===========================================================================
00007DFE                            
00007DFE                            Resize_LZ12:
00007DFE 4E75                       		rts	
00007E00                            ; ===========================================================================
00007E00                            
00007E00                            Resize_LZ3:
00007E00 7000                       		moveq	#0,d0
00007E02 1038 F742                  		move.b	($FFFFF742).w,d0
00007E06 303B 0000                  		move.w	off_6E4A2(pc,d0.w),d0
00007E0A 4EFB 0000                  		jmp	off_6E4A2(pc,d0.w)
00007E0E                            ; ===========================================================================
00007E0E                            off_6E4A2:	
00007E0E 0000                       		dc.w Resize_LZ3boss-off_6E4A2
00007E10 0000                       		dc.w Resize_LZ3end-off_6E4A2
00007E12                            ; ===========================================================================
00007E12                            Resize_LZ3boss:
00007E12 4A38 F742                  		tst.b	($FFFFF742).w
00007E16 6600                       		bne.s	locret_6F62
00007E18 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00007E1E 6500                       		bcs.s	locret_6F62
00007E20 31FC 0640 F726             		move.w	#$640,($FFFFF726).w ; set lower	y-boundary
00007E26 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00007E2C                            
00007E2C 6100 0000                  		bsr.w	SingleObjLoad
00007E30 6600                       		bne.s	loc_6F4A
00007E32 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00007E36 337C 1EA0 0008             		move.w	#$1EA0,8(a1)
00007E3C 337C 06E0 000C             		move.w	#$6E0,$C(a1)
00007E42                            loc_6F4A:
00007E42 303C 008C                  		move.w	#$8C,d0
00007E46 6100 9E26                  		bsr.w	PlaySound	; play boss music
00007E4A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007E50 5438 F742                  		addq.b	#2,($FFFFF742).w
00007E54 7022                       		moveq	#$22,d0
00007E56 6000 A000                  		bra.w	LoadPLC		; load boss patterns
00007E5A                            ; ===========================================================================
00007E5A                            
00007E5A                            locret_6F62:
00007E5A 4E75                       		rts	
00007E5C                            ; ===========================================================================
00007E5C                            
00007E5C                            Resize_LZ3end:
00007E5C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007E62 4E75                       		rts	
00007E64                            ; ===========================================================================
00007E64                            
00007E64                            Resize_SBZ3:
00007E64 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00007E6A 6500                       		bcs.s	locret_6F8C
00007E6C 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00007E72 6400                       		bcc.s	locret_6F8C	; if not, branch
00007E74 4238 FE30                  		clr.b	($FFFFFE30).w
00007E78 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00007E7E 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00007E84 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00007E8A                            
00007E8A                            locret_6F8C:
00007E8A 4E75                       		rts	
00007E8C                            ; ===========================================================================
00007E8C                            ; ---------------------------------------------------------------------------
00007E8C                            ; Marble Zone dynamic screen resizing
00007E8C                            ; ---------------------------------------------------------------------------
00007E8C                            
00007E8C                            Resize_MZ:				; XREF: Resize_Index
00007E8C 7000                       		moveq	#0,d0
00007E8E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007E92 D040                       		add.w	d0,d0
00007E94 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00007E98 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00007E9C                            ; ===========================================================================
00007E9C 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00007E9E 0000                       		dc.w Resize_MZ2-Resize_MZx
00007EA0 0000                       		dc.w Resize_MZ3-Resize_MZx
00007EA2                            ; ===========================================================================
00007EA2                            
00007EA2                            Resize_MZ1:
00007EA2 7000                       		moveq	#0,d0
00007EA4 1038 F742                  		move.b	($FFFFF742).w,d0
00007EA8 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00007EAC 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00007EB0                            ; ===========================================================================
00007EB0 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00007EB2 0000                       		dc.w loc_6FEA-off_6FB2
00007EB4 0000                       		dc.w loc_702E-off_6FB2
00007EB6 0000                       		dc.w loc_7050-off_6FB2
00007EB8                            ; ===========================================================================
00007EB8                            
00007EB8                            loc_6FBA:
00007EB8 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007EBE 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00007EC4 6500                       		bcs.s	locret_6FE8
00007EC6 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00007ECC 0C78 09A0 F700             		cmpi.w	#$9A0,($FFFFF700).w
00007ED2 6500                       		bcs.s	locret_6FE8
00007ED4 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007EDA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007EE0 6500                       		bcs.s	locret_6FE8
00007EE2 5438 F742                  		addq.b	#2,($FFFFF742).w
00007EE6                            
00007EE6                            locret_6FE8:
00007EE6 4E75                       		rts	
00007EE8                            ; ===========================================================================
00007EE8                            
00007EE8                            loc_6FEA:
00007EE8 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00007EEE 6400                       		bcc.s	loc_6FF8
00007EF0 5538 F742                  		subq.b	#2,($FFFFF742).w
00007EF4 4E75                       		rts	
00007EF6                            ; ===========================================================================
00007EF6                            
00007EF6                            loc_6FF8:
00007EF6 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007EFC 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00007F02 6400                       		bcc.s	locret_702C
00007F04 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00007F0A 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007F10 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007F16 6400                       		bcc.s	locret_702C
00007F18 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007F1E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007F24 6500                       		bcs.s	locret_702C
00007F26 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F2A                            
00007F2A                            locret_702C:
00007F2A 4E75                       		rts	
00007F2C                            ; ===========================================================================
00007F2C                            
00007F2C                            loc_702E:
00007F2C 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007F32 6400                       		bcc.s	loc_703C
00007F34 5538 F742                  		subq.b	#2,($FFFFF742).w
00007F38 4E75                       		rts	
00007F3A                            ; ===========================================================================
00007F3A                            
00007F3A                            loc_703C:
00007F3A 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007F40 6500                       		bcs.s	locret_704E
00007F42 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
00007F48 5438 F742                  		addq.b	#2,($FFFFF742).w
00007F4C                            
00007F4C                            locret_704E:
00007F4C 4E75                       		rts	
00007F4E                            ; ===========================================================================
00007F4E                            
00007F4E                            loc_7050:
00007F4E 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007F54 6500                       		bcs.s	locret_7072
00007F56 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00007F5C 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007F62 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
00007F68 6500                       		bcs.s	locret_7072
00007F6A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007F70                            
00007F70                            locret_7072:
00007F70 4E75                       		rts	
00007F72                            ; ===========================================================================
00007F72                            
00007F72                            Resize_MZ2:
00007F72 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007F78 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007F7E 6500                       		bcs.s	locret_7088
00007F80 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007F86                            
00007F86                            locret_7088:
00007F86 4E75                       		rts	
00007F88                            ; ===========================================================================
00007F88                            
00007F88                            Resize_MZ3:
00007F88 7000                       		moveq	#0,d0
00007F8A 1038 F742                  		move.b	($FFFFF742).w,d0
00007F8E 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007F92 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007F96                            ; ===========================================================================
00007F96 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
00007F98 0000                       		dc.w Resize_MZ3end-off_7098
00007F9A                            ; ===========================================================================
00007F9A                            
00007F9A                            Resize_MZ3boss:
00007F9A 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007FA0 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007FA6 6500                       		bcs.s	locret_70E8
00007FA8 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007FAE 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
00007FB4 6500                       		bcs.s	locret_70E8
00007FB6 6100 0000                  		bsr.w	SingleObjLoad
00007FBA 6600                       		bne.s	loc_70D0
00007FBC 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
00007FC0 337C 19F0 0008             		move.w	#$19F0,8(a1)
00007FC6 337C 022C 000C             		move.w	#$22C,$C(a1)
00007FCC                            
00007FCC                            loc_70D0:
00007FCC 303C 008C                  		move.w	#$8C,d0
00007FD0 6100 9C9C                  		bsr.w	PlaySound	; play boss music
00007FD4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007FDA 5438 F742                  		addq.b	#2,($FFFFF742).w
00007FDE 7011                       		moveq	#$11,d0
00007FE0 6000 9E76                  		bra.w	LoadPLC		; load boss patterns
00007FE4                            ; ===========================================================================
00007FE4                            
00007FE4                            locret_70E8:
00007FE4 4E75                       		rts	
00007FE6                            ; ===========================================================================
00007FE6                            
00007FE6                            Resize_MZ3end:
00007FE6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007FEC 4E75                       		rts	
00007FEE                            ; ===========================================================================
00007FEE                            ; ---------------------------------------------------------------------------
00007FEE                            ; Star Light Zone dynamic screen resizing
00007FEE                            ; ---------------------------------------------------------------------------
00007FEE                            
00007FEE                            Resize_SLZ:				; XREF: Resize_Index
00007FEE 7000                       		moveq	#0,d0
00007FF0 1038 FE11                  		move.b	($FFFFFE11).w,d0
00007FF4 D040                       		add.w	d0,d0
00007FF6 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
00007FFA 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
00007FFE                            ; ===========================================================================
00007FFE 0000                       Resize_SLZx:	dc.w Resize_SLZ1-Resize_SLZx
00008000 0000                       		dc.w Resize_SLZ2-Resize_SLZx
00008002 0000                       		dc.w Resize_SLZ3-Resize_SLZx
00008004                            ; ===========================================================================
00008004                            
00008004                            Resize_SLZ1:
00008004 31FC 0100 F726             		move.w	#$100,($FFFFF726).w ; set lower	y-boundary
0000800A 4E75                       		rts	
0000800C                            
0000800C                            Resize_SLZ2:
0000800C 4E75                       		rts	
0000800E                            ; ===========================================================================
0000800E                            
0000800E                            Resize_SLZ3:
0000800E 7000                       		moveq	#0,d0
00008010 1038 F742                  		move.b	($FFFFF742).w,d0
00008014 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00008018 4EFB 0000                  		jmp	off_7118(pc,d0.w)
0000801C                            ; ===========================================================================
0000801C 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
0000801E 0000                       		dc.w Resize_SLZ3boss-off_7118
00008020 0000                       		dc.w Resize_SLZ3end-off_7118
00008022                            ; ===========================================================================
00008022                            
00008022                            Resize_SLZ3main:
00008022 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00008028 6500                       		bcs.s	locret_7130
0000802A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00008030 5438 F742                  		addq.b	#2,($FFFFF742).w
00008034                            
00008034                            locret_7130:
00008034 4E75                       		rts	
00008036                            ; ===========================================================================
00008036                            
00008036                            Resize_SLZ3boss:
00008036 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000803C 6500                       		bcs.s	locret_715C
0000803E 6100 0000                  		bsr.w	SingleObjLoad
00008042 6600                       		bne.s	loc_7144
00008044 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00008048                            
00008048                            loc_7144:
00008048 303C 008C                  		move.w	#$8C,d0
0000804C 6100 9C20                  		bsr.w	PlaySound	; play boss music
00008050 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008056 5438 F742                  		addq.b	#2,($FFFFF742).w
0000805A 7011                       		moveq	#$11,d0
0000805C 6000 9DFA                  		bra.w	LoadPLC		; load boss patterns
00008060                            ; ===========================================================================
00008060                            
00008060                            locret_715C:
00008060 4E75                       		rts	
00008062                            ; ===========================================================================
00008062                            
00008062                            Resize_SLZ3end:
00008062 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00008068 4E75                       		rts
0000806A 4E75                       		rts
0000806C                            ; ===========================================================================
0000806C                            ; ---------------------------------------------------------------------------
0000806C                            ; Spring Yard Zone dynamic screen resizing
0000806C                            ; ---------------------------------------------------------------------------
0000806C                            
0000806C                            Resize_SYZ:				; XREF: Resize_Index
0000806C 7000                       		moveq	#0,d0
0000806E 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008072 D040                       		add.w	d0,d0
00008074 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00008078 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
0000807C                            ; ===========================================================================
0000807C 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
0000807E 0000                       		dc.w Resize_SYZ2-Resize_SYZx
00008080 0000                       		dc.w Resize_SYZ3-Resize_SYZx
00008082                            ; ===========================================================================
00008082                            
00008082                            Resize_SYZ1:
00008082 4E75                       		rts	
00008084                            ; ===========================================================================
00008084                            
00008084                            Resize_SYZ2:
00008084 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000808A 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
00008090 6500                       		bcs.s	locret_71A2
00008092 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00008098 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
0000809E 6500                       		bcs.s	locret_71A2
000080A0 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
000080A6                            
000080A6                            locret_71A2:
000080A6 4E75                       		rts	
000080A8                            ; ===========================================================================
000080A8                            
000080A8                            Resize_SYZ3:
000080A8 7000                       		moveq	#0,d0
000080AA 1038 F742                  		move.b	($FFFFF742).w,d0
000080AE 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
000080B2 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000080B6                            ; ===========================================================================
000080B6 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000080B8 0000                       		dc.w Resize_SYZ3boss-off_71B2
000080BA 0000                       		dc.w Resize_SYZ3end-off_71B2
000080BC                            ; ===========================================================================
000080BC                            
000080BC                            Resize_SYZ3main:
000080BC 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000080C2 6500                       		bcs.s	locret_71CE
000080C4 6100 0000                  		bsr.w	SingleObjLoad
000080C8 6600                       		bne.s	locret_71CE
000080CA 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000080CE 5438 F742                  		addq.b	#2,($FFFFF742).w
000080D2                            
000080D2                            locret_71CE:
000080D2 4E75                       		rts	
000080D4                            ; ===========================================================================
000080D4                            
000080D4                            Resize_SYZ3boss:
000080D4 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000080DA 6500                       		bcs.s	locret_7200
000080DC 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000080E2 6100 0000                  		bsr.w	SingleObjLoad
000080E6 6600                       		bne.s	loc_71EC
000080E8 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000080EC 5438 F742                  		addq.b	#2,($FFFFF742).w
000080F0                            
000080F0                            loc_71EC:
000080F0 303C 008C                  		move.w	#$8C,d0
000080F4 6100 9B78                  		bsr.w	PlaySound	; play boss music
000080F8 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000080FE 7011                       		moveq	#$11,d0
00008100 6000 9D56                  		bra.w	LoadPLC		; load boss patterns
00008104                            ; ===========================================================================
00008104                            
00008104                            locret_7200:
00008104 4E75                       		rts	
00008106                            ; ===========================================================================
00008106                            
00008106                            Resize_SYZ3end:
00008106 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
0000810C 4E75                       		rts	
0000810E                            ; ===========================================================================
0000810E                            ; ---------------------------------------------------------------------------
0000810E                            ; Scrap	Brain Zone dynamic screen resizing
0000810E                            ; ---------------------------------------------------------------------------
0000810E                            
0000810E                            Resize_SBZ:				; XREF: Resize_Index
0000810E 7000                       		moveq	#0,d0
00008110 1038 FE11                  		move.b	($FFFFFE11).w,d0
00008114 D040                       		add.w	d0,d0
00008116 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
0000811A 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
0000811E                            ; ===========================================================================
0000811E 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
00008120 0000                       		dc.w Resize_SBZ2-Resize_SBZx
00008122 0000                       		dc.w Resize_FZ-Resize_SBZx
00008124                            ; ===========================================================================
00008124                            
00008124                            Resize_SBZ1:
00008124 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0000812A 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
00008130 6500                       		bcs.s	locret_7242
00008132 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00008138 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
0000813E 6500                       		bcs.s	locret_7242
00008140 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00008146                            
00008146                            locret_7242:
00008146 4E75                       		rts	
00008148                            ; ===========================================================================
00008148                            
00008148                            Resize_SBZ2:
00008148 7000                       		moveq	#0,d0
0000814A 1038 F742                  		move.b	($FFFFF742).w,d0
0000814E 303B 0000                  		move.w	off_7252(pc,d0.w),d0
00008152 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00008156                            ; ===========================================================================
00008156 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00008158 0000                       		dc.w Resize_SBZ2boss-off_7252
0000815A 0000                       		dc.w Resize_SBZ2boss2-off_7252
0000815C 0000                       		dc.w Resize_SBZ2end-off_7252
0000815E                            ; ===========================================================================
0000815E                            
0000815E                            Resize_SBZ2main:
0000815E 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
00008164 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
0000816A 6500                       		bcs.s	locret_727A
0000816C 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
00008172 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00008178 6500                       		bcs.s	locret_727A
0000817A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000817E                            
0000817E                            locret_727A:
0000817E 4E75                       		rts	
00008180                            ; ===========================================================================
00008180                            
00008180                            Resize_SBZ2boss:
00008180 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00008186 6500                       		bcs.s	locret_7298
00008188 6100 0000                  		bsr.w	SingleObjLoad
0000818C 6600                       		bne.s	locret_7298
0000818E 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
00008192 5438 F742                  		addq.b	#2,($FFFFF742).w
00008196 701E                       		moveq	#$1E,d0
00008198 6000 9CBE                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
0000819C                            ; ===========================================================================
0000819C                            
0000819C                            locret_7298:
0000819C 4E75                       		rts	
0000819E                            ; ===========================================================================
0000819E                            
0000819E                            Resize_SBZ2boss2:
0000819E 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
000081A4 6500                       		bcs.s	loc_72B6
000081A6 6100 0000                  		bsr.w	SingleObjLoad
000081AA 6600                       		bne.s	loc_72B0
000081AC 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
000081B0 5438 F742                  		addq.b	#2,($FFFFF742).w
000081B4                            
000081B4                            loc_72B0:
000081B4 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000081BA                            
000081BA                            loc_72B6:
000081BA 6000                       		bra.s	loc_72C2
000081BC                            ; ===========================================================================
000081BC                            
000081BC                            Resize_SBZ2end:
000081BC 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000081C2 6500                       		bcs.s	loc_72C2
000081C4 4E75                       		rts	
000081C6                            ; ===========================================================================
000081C6                            
000081C6                            loc_72C2:
000081C6 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000081CC 4E75                       		rts	
000081CE                            ; ===========================================================================
000081CE                            
000081CE                            Resize_FZ:
000081CE 7000                       		moveq	#0,d0
000081D0 1038 F742                  		move.b	($FFFFF742).w,d0
000081D4 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000081D8 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000081DC                            ; ===========================================================================
000081DC 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000081E0 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000081E4 0000                       		dc.w Resize_FZend2-off_72D8
000081E6                            ; ===========================================================================
000081E6                            
000081E6                            Resize_FZmain:
000081E6 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000081EC 6500                       		bcs.s	loc_72F4
000081EE 5438 F742                  		addq.b	#2,($FFFFF742).w
000081F2 701F                       		moveq	#$1F,d0
000081F4 6100 9C62                  		bsr.w	LoadPLC		; load FZ boss patterns
000081F8                            
000081F8                            loc_72F4:
000081F8 60CC                       		bra.s	loc_72C2
000081FA                            ; ===========================================================================
000081FA                            
000081FA                            Resize_FZboss:
000081FA 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
00008200 6500                       		bcs.s	loc_7312
00008202 6100 0000                  		bsr.w	SingleObjLoad
00008206 6600                       		bne.s	loc_7312
00008208 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
0000820C 5438 F742                  		addq.b	#2,($FFFFF742).w
00008210 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00008216                            
00008216                            loc_7312:
00008216 60AE                       		bra.s	loc_72C2
00008218                            ; ===========================================================================
00008218                            
00008218                            Resize_FZend:
00008218 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0000821E 6500                       		bcs.s	loc_7320
00008220 5438 F742                  		addq.b	#2,($FFFFF742).w
00008224                            
00008224                            loc_7320:
00008224 60A0                       		bra.s	loc_72C2
00008226                            ; ===========================================================================
00008226                            
00008226                            locret_7322:
00008226 4E75                       		rts	
00008228                            ; ===========================================================================
00008228                            
00008228                            Resize_FZend2:
00008228 609C                       		bra.s	loc_72C2
0000822A                            ; ===========================================================================
0000822A                            ; ---------------------------------------------------------------------------
0000822A                            ; Ending sequence dynamic screen resizing (empty)
0000822A                            ; ---------------------------------------------------------------------------
0000822A                            
0000822A                            Resize_Ending:				; XREF: Resize_Index
0000822A 4E75                       		rts	
0000822C                            ; ===========================================================================
0000822C                            ; ---------------------------------------------------------------------------
0000822C                            ; Object 11 - GHZ bridge
0000822C                            ; ---------------------------------------------------------------------------
0000822C                            
0000822C                            Obj11:					; XREF: Obj_Index
0000822C 7000                       		moveq	#0,d0
0000822E 1028 0024                  		move.b	$24(a0),d0
00008232 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00008236 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
0000823A                            ; ===========================================================================
0000823A 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
0000823E 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
00008242 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00008246                            ; ===========================================================================
00008246                            
00008246                            Obj11_Main:				; XREF: Obj11_Index
00008246 5428 0024                  		addq.b	#2,$24(a0)
0000824A 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
00008252 317C 438E 0002             		move.w	#$438E,2(a0)
00008258 117C 0004 0001             		move.b	#4,1(a0)
0000825E 117C 0003 0018             		move.b	#3,$18(a0)
00008264 117C 0080 0019             		move.b	#$80,$19(a0)
0000826A 3428 000C                  		move.w	$C(a0),d2
0000826E 3628 0008                  		move.w	8(a0),d3
00008272 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
00008274 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00008278 7200                       		moveq	#0,d1
0000827A 1212                       		move.b	(a2),d1		; copy a2 to d1
0000827C 14FC 0000                  		move.b	#0,(a2)+
00008280 3001                       		move.w	d1,d0
00008282 E248                       		lsr.w	#1,d0
00008284 E948                       		lsl.w	#4,d0
00008286 9640                       		sub.w	d0,d3
00008288 5501                       		subq.b	#2,d1
0000828A 6500                       		bcs.s	Obj11_Action
0000828C                            
0000828C                            Obj11_MakeBdg:
0000828C 6100 0000                  		bsr.w	SingleObjLoad
00008290 6600                       		bne.s	Obj11_Action
00008292 5228 0028                  		addq.b	#1,$28(a0)
00008296 B668 0008                  		cmp.w	8(a0),d3
0000829A 6600                       		bne.s	loc_73B8
0000829C 0643 0010                  		addi.w	#$10,d3
000082A0 3142 000C                  		move.w	d2,$C(a0)
000082A4 3142 003C                  		move.w	d2,$3C(a0)
000082A8 3A08                       		move.w	a0,d5
000082AA 0445 D000                  		subi.w	#-$3000,d5
000082AE EC4D                       		lsr.w	#6,d5
000082B0 0245 007F                  		andi.w	#$7F,d5
000082B4 14C5                       		move.b	d5,(a2)+
000082B6 5228 0028                  		addq.b	#1,$28(a0)
000082BA                            
000082BA                            loc_73B8:				; XREF: ROM:00007398j
000082BA 3A09                       		move.w	a1,d5
000082BC 0445 D000                  		subi.w	#-$3000,d5
000082C0 EC4D                       		lsr.w	#6,d5
000082C2 0245 007F                  		andi.w	#$7F,d5
000082C6 14C5                       		move.b	d5,(a2)+
000082C8 137C 000A 0024             		move.b	#$A,$24(a1)
000082CE 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000082D0 3342 000C                  		move.w	d2,$C(a1)
000082D4 3342 003C                  		move.w	d2,$3C(a1)
000082D8 3343 0008                  		move.w	d3,8(a1)
000082DC 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000082E4 337C 438E 0002             		move.w	#$438E,2(a1)
000082EA 137C 0004 0001             		move.b	#4,1(a1)
000082F0 137C 0003 0018             		move.b	#3,$18(a1)
000082F6 137C 0008 0019             		move.b	#8,$19(a1)
000082FC 0643 0010                  		addi.w	#$10,d3
00008300 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
00008304                            
00008304                            Obj11_Action:				; XREF: Obj11_Index
00008304 6100                       		bsr.s	Obj11_Solid
00008306 4A28 003E                  		tst.b	$3E(a0)
0000830A 6700                       		beq.s	Obj11_Display
0000830C 5928 003E                  		subq.b	#4,$3E(a0)
00008310 6100 0000                  		bsr.w	Obj11_Bend
00008314                            
00008314                            Obj11_Display:
00008314 6100 0000                  		bsr.w	DisplaySprite
00008318 6000 0000                  		bra.w	Obj11_ChkDel
0000831C                            
0000831C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000831C                            
0000831C                            
0000831C                            Obj11_Solid:				; XREF: Obj11_Action
0000831C 7200                       		moveq	#0,d1
0000831E 1228 0028                  		move.b	$28(a0),d1
00008322 E749                       		lsl.w	#3,d1
00008324 3401                       		move.w	d1,d2
00008326 5041                       		addq.w	#8,d1
00008328 D442                       		add.w	d2,d2
0000832A 43F8 D000                  		lea	($FFFFD000).w,a1
0000832E 4A69 0012                  		tst.w	$12(a1)
00008332 6B00 0000                  		bmi.w	locret_751E
00008336 3029 0008                  		move.w	8(a1),d0
0000833A 9068 0008                  		sub.w	8(a0),d0
0000833E D041                       		add.w	d1,d0
00008340 6B00 0000                  		bmi.w	locret_751E
00008344 B042                       		cmp.w	d2,d0
00008346 6400 0000                  		bcc.w	locret_751E
0000834A 6000                       		bra.s	Platform2
0000834C                            ; End of function Obj11_Solid
0000834C                            
0000834C                            ; ---------------------------------------------------------------------------
0000834C                            ; Platform subroutine
0000834C                            ; ---------------------------------------------------------------------------
0000834C                            
0000834C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000834C                            
0000834C                            
0000834C                            PlatformObject:
0000834C 43F8 D000                  		lea	($FFFFD000).w,a1
00008350 4A69 0012                  		tst.w	$12(a1)
00008354 6B00 0000                  		bmi.w	locret_751E
00008358 3029 0008                  		move.w	8(a1),d0
0000835C 9068 0008                  		sub.w	8(a0),d0
00008360 D041                       		add.w	d1,d0
00008362 6B00 0000                  		bmi.w	locret_751E
00008366 D241                       		add.w	d1,d1
00008368 B041                       		cmp.w	d1,d0
0000836A 6400 0000                  		bcc.w	locret_751E
0000836E                            
0000836E                            Platform2:
0000836E 3028 000C                  		move.w	$C(a0),d0
00008372 5140                       		subq.w	#8,d0
00008374                            
00008374                            Platform3:
00008374 3429 000C                  		move.w	$C(a1),d2
00008378 1229 0016                  		move.b	$16(a1),d1
0000837C 4881                       		ext.w	d1
0000837E D242                       		add.w	d2,d1
00008380 5841                       		addq.w	#4,d1
00008382 9041                       		sub.w	d1,d0
00008384 6200 0000                  		bhi.w	locret_751E
00008388 0C40 FFF0                  		cmpi.w	#-$10,d0
0000838C 6500 0000                  		bcs.w	locret_751E
00008390 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008394 6B00 0000                  		bmi.w	locret_751E
00008398 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000839E 6400 0000                  		bcc.w	locret_751E
000083A2 D440                       		add.w	d0,d2
000083A4 5642                       		addq.w	#3,d2
000083A6 3342 000C                  		move.w	d2,$C(a1)
000083AA 5428 0024                  		addq.b	#2,$24(a0)
000083AE                            
000083AE                            loc_74AE:
000083AE 0829 0003 0022             		btst	#3,$22(a1)
000083B4 6700                       		beq.s	loc_74DC
000083B6 7000                       		moveq	#0,d0
000083B8 1029 003D                  		move.b	$3D(a1),d0
000083BC ED48                       		lsl.w	#6,d0
000083BE 0680 00FF D000             		addi.l	#$FFD000,d0
000083C4 2440                       		movea.l	d0,a2
000083C6 08AA 0003 0022             		bclr	#3,$22(a2)
000083CC 422A 0025                  		clr.b	$25(a2)
000083D0 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000083D6 6600                       		bne.s	loc_74DC
000083D8 552A 0024                  		subq.b	#2,$24(a2)
000083DC                            
000083DC                            loc_74DC:
000083DC 3008                       		move.w	a0,d0
000083DE 0440 D000                  		subi.w	#-$3000,d0
000083E2 EC48                       		lsr.w	#6,d0
000083E4 0240 007F                  		andi.w	#$7F,d0
000083E8 1340 003D                  		move.b	d0,$3D(a1)
000083EC 137C 0000 0026             		move.b	#0,$26(a1)
000083F2 337C 0000 0012             		move.w	#0,$12(a1)
000083F8 3369 0010 0014             		move.w	$10(a1),$14(a1)
000083FE 0829 0001 0022             		btst	#1,$22(a1)
00008404 6700                       		beq.s	loc_7512
00008406 2F08                       		move.l	a0,-(sp)
00008408 2049                       		movea.l	a1,a0
0000840A 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00008410 205F                       		movea.l	(sp)+,a0
00008412                            
00008412                            loc_7512:
00008412 08E9 0003 0022             		bset	#3,$22(a1)
00008418 08E8 0003 0022             		bset	#3,$22(a0)
0000841E                            
0000841E                            locret_751E:
0000841E 4E75                       		rts	
00008420                            ; End of function PlatformObject
00008420                            
00008420                            ; ---------------------------------------------------------------------------
00008420                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
00008420                            ; ---------------------------------------------------------------------------
00008420                            
00008420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008420                            
00008420                            
00008420                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
00008420 43F8 D000                  		lea	($FFFFD000).w,a1
00008424 4A69 0012                  		tst.w	$12(a1)
00008428 6B00 FFF4                  		bmi.w	locret_751E
0000842C 3029 0008                  		move.w	8(a1),d0
00008430 9068 0008                  		sub.w	8(a0),d0
00008434 D041                       		add.w	d1,d0
00008436 6BE6                       		bmi.s	locret_751E
00008438 D241                       		add.w	d1,d1
0000843A B041                       		cmp.w	d1,d0
0000843C 64E0                       		bcc.s	locret_751E
0000843E 0828 0000 0001             		btst	#0,1(a0)
00008444 6700                       		beq.s	loc_754A
00008446 4640                       		not.w	d0
00008448 D041                       		add.w	d1,d0
0000844A                            
0000844A                            loc_754A:
0000844A E248                       		lsr.w	#1,d0
0000844C 7600                       		moveq	#0,d3
0000844E 1632 0000                  		move.b	(a2,d0.w),d3
00008452 3028 000C                  		move.w	$C(a0),d0
00008456 9043                       		sub.w	d3,d0
00008458 6000 FF1A                  		bra.w	Platform3
0000845C                            ; End of function SlopeObject
0000845C                            
0000845C                            
0000845C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000845C                            
0000845C                            
0000845C                            Obj15_Solid:				; XREF: Obj15_SetSolid
0000845C 43F8 D000                  		lea	($FFFFD000).w,a1
00008460 4A69 0012                  		tst.w	$12(a1)
00008464 6B00 FFB8                  		bmi.w	locret_751E
00008468 3029 0008                  		move.w	8(a1),d0
0000846C 9068 0008                  		sub.w	8(a0),d0
00008470 D041                       		add.w	d1,d0
00008472 6B00 FFAA                  		bmi.w	locret_751E
00008476 D241                       		add.w	d1,d1
00008478 B041                       		cmp.w	d1,d0
0000847A 6400 FFA2                  		bcc.w	locret_751E
0000847E 3028 000C                  		move.w	$C(a0),d0
00008482 9043                       		sub.w	d3,d0
00008484 6000 FEEE                  		bra.w	Platform3
00008488                            ; End of function Obj15_Solid
00008488                            
00008488                            ; ===========================================================================
00008488                            
00008488                            Obj11_Action2:				; XREF: Obj11_Index
00008488 6100                       		bsr.s	Obj11_WalkOff
0000848A 6100 0000                  		bsr.w	DisplaySprite
0000848E 6000 0000                  		bra.w	Obj11_ChkDel
00008492                            
00008492                            ; ---------------------------------------------------------------------------
00008492                            ; Subroutine allowing Sonic to walk off a bridge
00008492                            ; ---------------------------------------------------------------------------
00008492                            
00008492                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008492                            
00008492                            
00008492                            Obj11_WalkOff:				; XREF: Obj11_Action2
00008492 7200                       		moveq	#0,d1
00008494 1228 0028                  		move.b	$28(a0),d1
00008498 E749                       		lsl.w	#3,d1
0000849A 3401                       		move.w	d1,d2
0000849C 5041                       		addq.w	#8,d1
0000849E 6100                       		bsr.s	ExitPlatform2
000084A0 6400                       		bcc.s	locret_75BE
000084A2 E848                       		lsr.w	#4,d0
000084A4 1140 003F                  		move.b	d0,$3F(a0)
000084A8 1028 003E                  		move.b	$3E(a0),d0
000084AC 0C00 0040                  		cmpi.b	#$40,d0
000084B0 6700                       		beq.s	loc_75B6
000084B2 5828 003E                  		addq.b	#4,$3E(a0)
000084B6                            
000084B6                            loc_75B6:
000084B6 6100 0000                  		bsr.w	Obj11_Bend
000084BA 6100 0000                  		bsr.w	Obj11_MoveSonic
000084BE                            
000084BE                            locret_75BE:
000084BE 4E75                       		rts	
000084C0                            ; End of function Obj11_WalkOff
000084C0                            
000084C0                            ; ---------------------------------------------------------------------------
000084C0                            ; Subroutine allowing Sonic to walk or jump off	a platform
000084C0                            ; ---------------------------------------------------------------------------
000084C0                            
000084C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084C0                            
000084C0                            
000084C0                            ExitPlatform:
000084C0 3401                       		move.w	d1,d2
000084C2                            
000084C2                            ExitPlatform2:
000084C2 D442                       		add.w	d2,d2
000084C4 43F8 D000                  		lea	($FFFFD000).w,a1
000084C8 0829 0001 0022             		btst	#1,$22(a1)
000084CE 6600                       		bne.s	loc_75E0
000084D0 3029 0008                  		move.w	8(a1),d0
000084D4 9068 0008                  		sub.w	8(a0),d0
000084D8 D041                       		add.w	d1,d0
000084DA 6B00                       		bmi.s	loc_75E0
000084DC B042                       		cmp.w	d2,d0
000084DE 6500                       		bcs.s	locret_75F2
000084E0                            
000084E0                            loc_75E0:
000084E0 08A9 0003 0022             		bclr	#3,$22(a1)
000084E6 117C 0002 0024             		move.b	#2,$24(a0)
000084EC 08A8 0003 0022             		bclr	#3,$22(a0)
000084F2                            
000084F2                            locret_75F2:
000084F2 4E75                       		rts	
000084F4                            ; End of function ExitPlatform
000084F4                            
000084F4                            
000084F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000084F4                            
000084F4                            
000084F4                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000084F4 7000                       		moveq	#0,d0
000084F6 1028 003F                  		move.b	$3F(a0),d0
000084FA 1030 0029                  		move.b	$29(a0,d0.w),d0
000084FE ED48                       		lsl.w	#6,d0
00008500 0680 00FF D000             		addi.l	#$FFD000,d0
00008506 2440                       		movea.l	d0,a2
00008508 43F8 D000                  		lea	($FFFFD000).w,a1
0000850C 302A 000C                  		move.w	$C(a2),d0
00008510 5140                       		subq.w	#8,d0
00008512 7200                       		moveq	#0,d1
00008514 1229 0016                  		move.b	$16(a1),d1
00008518 9041                       		sub.w	d1,d0
0000851A 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
0000851E 4E75                       		rts	
00008520                            ; End of function Obj11_MoveSonic
00008520                            
00008520                            
00008520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008520                            
00008520                            
00008520                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
00008520 1028 003E                  		move.b	$3E(a0),d0
00008524 6100 AEF0                  		bsr.w	CalcSine
00008528 3800                       		move.w	d0,d4
0000852A 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
00008530 7000                       		moveq	#0,d0
00008532 1028 0028                  		move.b	$28(a0),d0
00008536 E948                       		lsl.w	#4,d0
00008538 7600                       		moveq	#0,d3
0000853A 1628 003F                  		move.b	$3F(a0),d3
0000853E 3403                       		move.w	d3,d2
00008540 D640                       		add.w	d0,d3
00008542 7A00                       		moveq	#0,d5
00008544 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
0000854A 1A35 3000                  		move.b	(a5,d3.w),d5
0000854E 0243 000F                  		andi.w	#$F,d3
00008552 E94B                       		lsl.w	#4,d3
00008554 47F4 3000                  		lea	(a4,d3.w),a3
00008558 45E8 0029                  		lea	$29(a0),a2
0000855C                            
0000855C                            loc_765C:
0000855C 7000                       		moveq	#0,d0
0000855E 101A                       		move.b	(a2)+,d0
00008560 ED48                       		lsl.w	#6,d0
00008562 0680 00FF D000             		addi.l	#$FFD000,d0
00008568 2240                       		movea.l	d0,a1
0000856A 7000                       		moveq	#0,d0
0000856C 101B                       		move.b	(a3)+,d0
0000856E 5240                       		addq.w	#1,d0
00008570 C0C5                       		mulu.w	d5,d0
00008572 C0C4                       		mulu.w	d4,d0
00008574 4840                       		swap	d0
00008576 D069 003C                  		add.w	$3C(a1),d0
0000857A 3340 000C                  		move.w	d0,$C(a1)
0000857E 51CA FFDC                  		dbf	d2,loc_765C
00008582 7000                       		moveq	#0,d0
00008584 1028 0028                  		move.b	$28(a0),d0
00008588 7600                       		moveq	#0,d3
0000858A 1628 003F                  		move.b	$3F(a0),d3
0000858E 5203                       		addq.b	#1,d3
00008590 9600                       		sub.b	d0,d3
00008592 4403                       		neg.b	d3
00008594 6B00                       		bmi.s	locret_76CA
00008596 3403                       		move.w	d3,d2
00008598 E94B                       		lsl.w	#4,d3
0000859A 47F4 3000                  		lea	(a4,d3.w),a3
0000859E D6C2                       		adda.w	d2,a3
000085A0 5342                       		subq.w	#1,d2
000085A2 6500                       		bcs.s	locret_76CA
000085A4                            
000085A4                            loc_76A4:
000085A4 7000                       		moveq	#0,d0
000085A6 101A                       		move.b	(a2)+,d0
000085A8 ED48                       		lsl.w	#6,d0
000085AA 0680 00FF D000             		addi.l	#$FFD000,d0
000085B0 2240                       		movea.l	d0,a1
000085B2 7000                       		moveq	#0,d0
000085B4 1023                       		move.b	-(a3),d0
000085B6 5240                       		addq.w	#1,d0
000085B8 C0C5                       		mulu.w	d5,d0
000085BA C0C4                       		mulu.w	d4,d0
000085BC 4840                       		swap	d0
000085BE D069 003C                  		add.w	$3C(a1),d0
000085C2 3340 000C                  		move.w	d0,$C(a1)
000085C6 51CA FFDC                  		dbf	d2,loc_76A4
000085CA                            
000085CA                            locret_76CA:
000085CA 4E75                       		rts	
000085CC                            ; End of function Obj11_Bend
000085CC                            
000085CC                            ; ===========================================================================
000085CC                            ; ---------------------------------------------------------------------------
000085CC                            ; GHZ bridge-bending data
000085CC                            ; (Defines how the bridge bends	when Sonic walks across	it)
000085CC                            ; ---------------------------------------------------------------------------
000085CC                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000086DC                            		even
000086DC                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000087DC                            		even
000087DC                            
000087DC                            ; ===========================================================================
000087DC                            
000087DC                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000087DC 3028 0008                  		move.w	8(a0),d0
000087E0 0240 FF80                  		andi.w	#$FF80,d0
000087E4 3238 F700                  		move.w	($FFFFF700).w,d1
000087E8 0441 0080                  		subi.w	#$80,d1
000087EC 0241 FF80                  		andi.w	#$FF80,d1
000087F0 9041                       		sub.w	d1,d0
000087F2 0C40 0280                  		cmpi.w	#$280,d0
000087F6 6200 0000                  		bhi.w	Obj11_DelAll
000087FA 4E75                       		rts	
000087FC                            ; ===========================================================================
000087FC                            
000087FC                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000087FC 7400                       		moveq	#0,d2
000087FE 45E8 0028                  		lea	$28(a0),a2	; load bridge length
00008802 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
00008804 5302                       		subq.b	#1,d2		; subtract 1
00008806 6500                       		bcs.s	Obj11_Delete
00008808                            
00008808                            Obj11_DelLoop:
00008808 7000                       		moveq	#0,d0
0000880A 101A                       		move.b	(a2)+,d0
0000880C ED48                       		lsl.w	#6,d0
0000880E 0680 00FF D000             		addi.l	#$FFD000,d0
00008814 2240                       		movea.l	d0,a1
00008816 B048                       		cmp.w	a0,d0
00008818 6700                       		beq.s	loc_791E
0000881A 6100 0000                  		bsr.w	DeleteObject2
0000881E                            
0000881E                            loc_791E:
0000881E 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
00008822                            
00008822                            Obj11_Delete:
00008822 6100 0000                  		bsr.w	DeleteObject
00008826 4E75                       		rts	
00008828                            ; ===========================================================================
00008828                            
00008828                            Obj11_Delete2:				; XREF: Obj11_Index
00008828 6100 0000                  		bsr.w	DeleteObject
0000882C 4E75                       		rts	
0000882E                            ; ===========================================================================
0000882E                            
0000882E                            Obj11_Display2:				; XREF: Obj11_Index
0000882E 6100 0000                  		bsr.w	DisplaySprite
00008832 4E75                       		rts	
00008834                            ; ===========================================================================
00008834                            ; ---------------------------------------------------------------------------
00008834                            ; Sprite mappings - GHZ	bridge
00008834                            ; ---------------------------------------------------------------------------
00008834                            Map_obj11:
00008834                            	include "_maps\obj11.asm"
00008834                            ; ---------------------------------------------------------------------------
00008834                            ; Sprite mappings - GHZ	bridge
00008834                            ; ---------------------------------------------------------------------------
00008834 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00008838 0000                       		dc.w byte_794B-Map_obj11
0000883A 01                         byte_793A:	dc.b 1
0000883B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008840 02                         byte_7940:	dc.b 2
00008841 F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00008846 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
0000884B 01                         byte_794B:	dc.b 1
0000884C FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
00008852 00                         		even
00008852 00                         		even
00008852                            
00008852                            ; ===========================================================================
00008852                            ; ---------------------------------------------------------------------------
00008852                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
00008852                            ;	    - spiked ball on a chain (SBZ)
00008852                            ; ---------------------------------------------------------------------------
00008852                            
00008852                            Obj15:					; XREF: Obj_Index
00008852 7000                       		moveq	#0,d0
00008854 1028 0024                  		move.b	$24(a0),d0
00008858 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
0000885C 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
00008860                            ; ===========================================================================
00008860 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
00008864 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00008868 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
0000886C 0000                       		dc.w Obj15_Action-Obj15_Index
0000886E                            ; ===========================================================================
0000886E                            
0000886E                            Obj15_Main:				; XREF: Obj15_Index
0000886E 5428 0024                  		addq.b	#2,$24(a0)
00008872 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
0000887A 317C 4380 0002             		move.w	#$4380,2(a0)
00008880 117C 0004 0001             		move.b	#4,1(a0)
00008886 117C 0003 0018             		move.b	#3,$18(a0)
0000888C 117C 0018 0019             		move.b	#$18,$19(a0)
00008892 117C 0008 0016             		move.b	#8,$16(a0)
00008898 3168 000C 0038             		move.w	$C(a0),$38(a0)
0000889E 3168 0008 003A             		move.w	8(a0),$3A(a0)
000088A4 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000088AA 6600                       		bne.s	Obj15_NotSLZ
000088AC 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
000088B4 317C 43DC 0002             		move.w	#$43DC,2(a0)
000088BA 117C 0020 0019             		move.b	#$20,$19(a0)
000088C0 117C 0010 0016             		move.b	#$10,$16(a0)
000088C6 117C 0099 0020             		move.b	#$99,$20(a0)
000088CC                            
000088CC                            Obj15_NotSLZ:
000088CC 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000088D2 6600                       		bne.s	Obj15_SetLength
000088D4 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000088DC 317C 0391 0002             		move.w	#$391,2(a0)
000088E2 117C 0018 0019             		move.b	#$18,$19(a0)
000088E8 117C 0018 0016             		move.b	#$18,$16(a0)
000088EE 117C 0086 0020             		move.b	#$86,$20(a0)
000088F4 117C 000C 0024             		move.b	#$C,$24(a0)
000088FA                            
000088FA                            Obj15_SetLength:
000088FA 1810                       		move.b	0(a0),d4
000088FC 7200                       		moveq	#0,d1
000088FE 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
00008902 1212                       		move.b	(a2),d1		; move a2 to d1
00008904 3F01                       		move.w	d1,-(sp)
00008906 0241 000F                  		andi.w	#$F,d1
0000890A 14FC 0000                  		move.b	#0,(a2)+
0000890E 3601                       		move.w	d1,d3
00008910 E94B                       		lsl.w	#4,d3
00008912 5003                       		addq.b	#8,d3
00008914 1143 003C                  		move.b	d3,$3C(a0)
00008918 5103                       		subq.b	#8,d3
0000891A 4A28 001A                  		tst.b	$1A(a0)
0000891E 6700                       		beq.s	Obj15_MakeChain
00008920 5003                       		addq.b	#8,d3
00008922 5341                       		subq.w	#1,d1
00008924                            
00008924                            Obj15_MakeChain:
00008924 6100 0000                  		bsr.w	SingleObjLoad
00008928 6600                       		bne.s	loc_7A92
0000892A 5228 0028                  		addq.b	#1,$28(a0)
0000892E 3A09                       		move.w	a1,d5
00008930 0445 D000                  		subi.w	#-$3000,d5
00008934 EC4D                       		lsr.w	#6,d5
00008936 0245 007F                  		andi.w	#$7F,d5
0000893A 14C5                       		move.b	d5,(a2)+
0000893C 137C 000A 0024             		move.b	#$A,$24(a1)
00008942 1284                       		move.b	d4,0(a1)	; load swinging	object
00008944 2368 0004 0004             		move.l	4(a0),4(a1)
0000894A 3368 0002 0002             		move.w	2(a0),2(a1)
00008950 08A9 0006 0002             		bclr	#6,2(a1)
00008956 137C 0004 0001             		move.b	#4,1(a1)
0000895C 137C 0004 0018             		move.b	#4,$18(a1)
00008962 137C 0008 0019             		move.b	#8,$19(a1)
00008968 137C 0001 001A             		move.b	#1,$1A(a1)
0000896E 1343 003C                  		move.b	d3,$3C(a1)
00008972 0403 0010                  		subi.b	#$10,d3
00008976 6400                       		bcc.s	loc_7A8E
00008978 137C 0002 001A             		move.b	#2,$1A(a1)
0000897E 137C 0003 0018             		move.b	#3,$18(a1)
00008984 08E9 0006 0002             		bset	#6,2(a1)
0000898A                            
0000898A                            loc_7A8E:
0000898A 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
0000898E                            
0000898E                            loc_7A92:
0000898E 3A08                       		move.w	a0,d5
00008990 0445 D000                  		subi.w	#-$3000,d5
00008994 EC4D                       		lsr.w	#6,d5
00008996 0245 007F                  		andi.w	#$7F,d5
0000899A 14C5                       		move.b	d5,(a2)+
0000899C 317C 4080 0026             		move.w	#$4080,$26(a0)
000089A2 317C FE00 003E             		move.w	#-$200,$3E(a0)
000089A8 321F                       		move.w	(sp)+,d1
000089AA 0801 0004                  		btst	#4,d1		; is object type $8X ?
000089AE 6700                       		beq.s	loc_7AD4	; if not, branch
000089B0 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
000089B8 317C 43AA 0002             		move.w	#$43AA,2(a0)
000089BE 117C 0001 001A             		move.b	#1,$1A(a0)
000089C4 117C 0002 0018             		move.b	#2,$18(a0)
000089CA 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
000089D0                            
000089D0                            loc_7AD4:
000089D0 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
000089D6 6700                       		beq.s	Obj15_Action	; if yes, branch
000089D8                            
000089D8                            Obj15_SetSolid:				; XREF: Obj15_Index
000089D8 7200                       		moveq	#0,d1
000089DA 1228 0019                  		move.b	$19(a0),d1
000089DE 7600                       		moveq	#0,d3
000089E0 1628 0016                  		move.b	$16(a0),d3
000089E4 6100 FA76                  		bsr.w	Obj15_Solid
000089E8                            
000089E8                            Obj15_Action:				; XREF: Obj15_Index
000089E8 6100 0000                  		bsr.w	Obj15_Move
000089EC 6100 0000                  		bsr.w	DisplaySprite
000089F0 6000 0000                  		bra.w	Obj15_ChkDel
000089F4                            ; ===========================================================================
000089F4                            
000089F4                            Obj15_Action2:				; XREF: Obj15_Index
000089F4 7200                       		moveq	#0,d1
000089F6 1228 0019                  		move.b	$19(a0),d1
000089FA 6100 FAC4                  		bsr.w	ExitPlatform
000089FE 3F28 0008                  		move.w	8(a0),-(sp)
00008A02 6100 0000                  		bsr.w	Obj15_Move
00008A06 341F                       		move.w	(sp)+,d2
00008A08 7600                       		moveq	#0,d3
00008A0A 1628 0016                  		move.b	$16(a0),d3
00008A0E 5203                       		addq.b	#1,d3
00008A10 6100 0000                  		bsr.w	MvSonicOnPtfm
00008A14 6100 0000                  		bsr.w	DisplaySprite
00008A18 6000 0000                  		bra.w	Obj15_ChkDel
00008A1C                            
00008A1C 4E75                       		rts
00008A1E                            
00008A1E                            ; ---------------------------------------------------------------------------
00008A1E                            ; Subroutine to	change Sonic's position with a platform
00008A1E                            ; ---------------------------------------------------------------------------
00008A1E                            
00008A1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A1E                            
00008A1E                            
00008A1E                            MvSonicOnPtfm:
00008A1E 43F8 D000                  		lea	($FFFFD000).w,a1
00008A22 3028 000C                  		move.w	$C(a0),d0
00008A26 9043                       		sub.w	d3,d0
00008A28 6000                       		bra.s	MvSonic2
00008A2A                            ; End of function MvSonicOnPtfm
00008A2A                            
00008A2A                            ; ---------------------------------------------------------------------------
00008A2A                            ; Subroutine to	change Sonic's position with a platform
00008A2A                            ; ---------------------------------------------------------------------------
00008A2A                            
00008A2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A2A                            
00008A2A                            
00008A2A                            MvSonicOnPtfm2:
00008A2A 43F8 D000                  		lea	($FFFFD000).w,a1
00008A2E 3028 000C                  		move.w	$C(a0),d0
00008A32 0440 0009                  		subi.w	#9,d0
00008A36                            
00008A36                            MvSonic2:
00008A36 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008A3A 6B00                       		bmi.s	locret_7B62
00008A3C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008A42 6400                       		bcc.s	locret_7B62
00008A44 4A78 FE08                  		tst.w	($FFFFFE08).w
00008A48 6600                       		bne.s	locret_7B62
00008A4A 7200                       		moveq	#0,d1
00008A4C 1229 0016                  		move.b	$16(a1),d1
00008A50 9041                       		sub.w	d1,d0
00008A52 3340 000C                  		move.w	d0,$C(a1)
00008A56 9468 0008                  		sub.w	8(a0),d2
00008A5A 9569 0008                  		sub.w	d2,8(a1)
00008A5E                            
00008A5E                            locret_7B62:
00008A5E 4E75                       		rts	
00008A60                            ; End of function MvSonicOnPtfm2
00008A60                            
00008A60                            
00008A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A60                            
00008A60                            
00008A60                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00008A60 1038 FE78                  		move.b	($FFFFFE78).w,d0
00008A64 323C 0080                  		move.w	#$80,d1
00008A68 0828 0000 0022             		btst	#0,$22(a0)
00008A6E 6700                       		beq.s	loc_7B78
00008A70 4440                       		neg.w	d0
00008A72 D041                       		add.w	d1,d0
00008A74                            
00008A74                            loc_7B78:
00008A74 6000                       		bra.s	Obj15_Move2
00008A76                            ; End of function Obj15_Move
00008A76                            
00008A76                            
00008A76                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A76                            
00008A76                            
00008A76                            Obj48_Move:				; XREF: Obj48_Display2
00008A76 4A28 003D                  		tst.b	$3D(a0)
00008A7A 6600                       		bne.s	loc_7B9C
00008A7C 3028 003E                  		move.w	$3E(a0),d0
00008A80 5040                       		addq.w	#8,d0
00008A82 3140 003E                  		move.w	d0,$3E(a0)
00008A86 D168 0026                  		add.w	d0,$26(a0)
00008A8A 0C40 0200                  		cmpi.w	#$200,d0
00008A8E 6600                       		bne.s	loc_7BB6
00008A90 117C 0001 003D             		move.b	#1,$3D(a0)
00008A96 6000                       		bra.s	loc_7BB6
00008A98                            ; ===========================================================================
00008A98                            
00008A98                            loc_7B9C:
00008A98 3028 003E                  		move.w	$3E(a0),d0
00008A9C 5140                       		subq.w	#8,d0
00008A9E 3140 003E                  		move.w	d0,$3E(a0)
00008AA2 D168 0026                  		add.w	d0,$26(a0)
00008AA6 0C40 FE00                  		cmpi.w	#-$200,d0
00008AAA 6600                       		bne.s	loc_7BB6
00008AAC 117C 0000 003D             		move.b	#0,$3D(a0)
00008AB2                            
00008AB2                            loc_7BB6:
00008AB2 1028 0026                  		move.b	$26(a0),d0
00008AB6                            ; End of function Obj48_Move
00008AB6                            
00008AB6                            
00008AB6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AB6                            
00008AB6                            
00008AB6                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00008AB6 6100 A95E                  		bsr.w	CalcSine
00008ABA 3428 0038                  		move.w	$38(a0),d2
00008ABE 3628 003A                  		move.w	$3A(a0),d3
00008AC2 45E8 0028                  		lea	$28(a0),a2
00008AC6 7C00                       		moveq	#0,d6
00008AC8 1C1A                       		move.b	(a2)+,d6
00008ACA                            
00008ACA                            loc_7BCE:
00008ACA 7800                       		moveq	#0,d4
00008ACC 181A                       		move.b	(a2)+,d4
00008ACE ED4C                       		lsl.w	#6,d4
00008AD0 0684 00FF D000             		addi.l	#$FFD000,d4
00008AD6 2244                       		movea.l	d4,a1
00008AD8 7800                       		moveq	#0,d4
00008ADA 1829 003C                  		move.b	$3C(a1),d4
00008ADE 2A04                       		move.l	d4,d5
00008AE0 C9C0                       		muls.w	d0,d4
00008AE2 E084                       		asr.l	#8,d4
00008AE4 CBC1                       		muls.w	d1,d5
00008AE6 E085                       		asr.l	#8,d5
00008AE8 D842                       		add.w	d2,d4
00008AEA DA43                       		add.w	d3,d5
00008AEC 3344 000C                  		move.w	d4,$C(a1)
00008AF0 3345 0008                  		move.w	d5,8(a1)
00008AF4 51CE FFD4                  		dbf	d6,loc_7BCE
00008AF8 4E75                       		rts	
00008AFA                            ; End of function Obj15_Move2
00008AFA                            
00008AFA                            ; ===========================================================================
00008AFA                            
00008AFA                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00008AFA 3028 003A                  		move.w	$3A(a0),d0
00008AFE 0240 FF80                  		andi.w	#$FF80,d0
00008B02 3238 F700                  		move.w	($FFFFF700).w,d1
00008B06 0441 0080                  		subi.w	#$80,d1
00008B0A 0241 FF80                  		andi.w	#$FF80,d1
00008B0E 9041                       		sub.w	d1,d0
00008B10 0C40 0280                  		cmpi.w	#$280,d0
00008B14 6200 0000                  		bhi.w	Obj15_DelAll
00008B18 4E75                       		rts	
00008B1A                            ; ===========================================================================
00008B1A                            
00008B1A                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00008B1A 7400                       		moveq	#0,d2
00008B1C 45E8 0028                  		lea	$28(a0),a2
00008B20 141A                       		move.b	(a2)+,d2
00008B22                            
00008B22                            Obj15_DelLoop:
00008B22 7000                       		moveq	#0,d0
00008B24 101A                       		move.b	(a2)+,d0
00008B26 ED48                       		lsl.w	#6,d0
00008B28 0680 00FF D000             		addi.l	#$FFD000,d0
00008B2E 2240                       		movea.l	d0,a1
00008B30 6100 0000                  		bsr.w	DeleteObject2
00008B34 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00008B38 4E75                       		rts	
00008B3A                            ; ===========================================================================
00008B3A                            
00008B3A                            Obj15_Delete:				; XREF: Obj15_Index
00008B3A 6100 0000                  		bsr.w	DeleteObject
00008B3E 4E75                       		rts	
00008B40                            ; ===========================================================================
00008B40                            
00008B40                            Obj15_Display:				; XREF: Obj15_Index
00008B40 6000 0000                  		bra.w	DisplaySprite
00008B44                            ; ===========================================================================
00008B44                            ; ---------------------------------------------------------------------------
00008B44                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008B44                            ; ---------------------------------------------------------------------------
00008B44                            Map_obj15:
00008B44                            	include "_maps\obj15ghz.asm"
00008B44                            ; ---------------------------------------------------------------------------
00008B44                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00008B44                            ; ---------------------------------------------------------------------------
00008B44 0000                       		dc.w byte_7C4E-Map_obj15
00008B46 0000                       		dc.w byte_7C59-Map_obj15
00008B48 0000                       		dc.w byte_7C5F-Map_obj15
00008B4A 02                         byte_7C4E:	dc.b 2
00008B4B F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00008B50 F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00008B55 01                         byte_7C59:	dc.b 1
00008B56 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00008B5B 01                         byte_7C5F:	dc.b 1
00008B5C F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00008B62 00                         		even
00008B62 00                         		even
00008B62                            
00008B62                            ; ---------------------------------------------------------------------------
00008B62                            ; Sprite mappings - SLZ	swinging platforms
00008B62                            ; ---------------------------------------------------------------------------
00008B62                            Map_obj15a:
00008B62                            	include "_maps\obj15slz.asm"
00008B62                            ; ---------------------------------------------------------------------------
00008B62                            ; Sprite mappings - SLZ	swinging platforms
00008B62                            ; ---------------------------------------------------------------------------
00008B62 0000                       		dc.w byte_7C6C-Map_obj15a
00008B64 0000                       		dc.w byte_7C95-Map_obj15a
00008B66 0000                       		dc.w byte_7C9B-Map_obj15a
00008B68 08                         byte_7C6C:	dc.b 8
00008B69 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00008B6E F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00008B73 F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00008B78 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00008B7D 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00008B82 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00008B87 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00008B8C 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00008B91 01                         byte_7C95:	dc.b 1
00008B92 F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00008B97 01                         byte_7C9B:	dc.b 1
00008B98 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00008B9E 00                         		even
00008B9E 00                         		even
00008B9E                            
00008B9E                            ; ===========================================================================
00008B9E                            ; ---------------------------------------------------------------------------
00008B9E                            ; Object 17 - helix of spikes on a pole	(GHZ)
00008B9E                            ; ---------------------------------------------------------------------------
00008B9E                            
00008B9E                            Obj17:					; XREF: Obj_Index
00008B9E 7000                       		moveq	#0,d0
00008BA0 1028 0024                  		move.b	$24(a0),d0
00008BA4 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00008BA8 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00008BAC                            ; ===========================================================================
00008BAC 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00008BAE 0000                       		dc.w Obj17_Action-Obj17_Index
00008BB0 0000                       		dc.w Obj17_Action-Obj17_Index
00008BB2 0000                       		dc.w Obj17_Delete-Obj17_Index
00008BB4 0000                       		dc.w Obj17_Display-Obj17_Index
00008BB6                            ; ===========================================================================
00008BB6                            
00008BB6                            Obj17_Main:				; XREF: Obj17_Index
00008BB6 5428 0024                  		addq.b	#2,$24(a0)
00008BBA 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00008BC2 317C 4398 0002             		move.w	#$4398,2(a0)
00008BC8 117C 0007 0022             		move.b	#7,$22(a0)
00008BCE 117C 0004 0001             		move.b	#4,1(a0)
00008BD4 117C 0003 0018             		move.b	#3,$18(a0)
00008BDA 117C 0008 0019             		move.b	#8,$19(a0)
00008BE0 3428 000C                  		move.w	$C(a0),d2
00008BE4 3628 0008                  		move.w	8(a0),d3
00008BE8 1810                       		move.b	0(a0),d4
00008BEA 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008BEE 7200                       		moveq	#0,d1
00008BF0 1212                       		move.b	(a2),d1		; move a2 to d1
00008BF2 14FC 0000                  		move.b	#0,(a2)+
00008BF6 3001                       		move.w	d1,d0
00008BF8 E248                       		lsr.w	#1,d0
00008BFA E948                       		lsl.w	#4,d0
00008BFC 9640                       		sub.w	d0,d3
00008BFE 5501                       		subq.b	#2,d1
00008C00 6500                       		bcs.s	Obj17_Action
00008C02 7C00                       		moveq	#0,d6
00008C04                            
00008C04                            Obj17_MakeHelix:
00008C04 6100 0000                  		bsr.w	SingleObjLoad
00008C08 6600                       		bne.s	Obj17_Action
00008C0A 5228 0028                  		addq.b	#1,$28(a0)
00008C0E 3A09                       		move.w	a1,d5
00008C10 0445 D000                  		subi.w	#$D000,d5
00008C14 EC4D                       		lsr.w	#6,d5
00008C16 0245 007F                  		andi.w	#$7F,d5
00008C1A 14C5                       		move.b	d5,(a2)+
00008C1C 137C 0008 0024             		move.b	#8,$24(a1)
00008C22 1284                       		move.b	d4,0(a1)
00008C24 3342 000C                  		move.w	d2,$C(a1)
00008C28 3343 0008                  		move.w	d3,8(a1)
00008C2C 2368 0004 0004             		move.l	4(a0),4(a1)
00008C32 337C 4398 0002             		move.w	#$4398,2(a1)
00008C38 137C 0004 0001             		move.b	#4,1(a1)
00008C3E 137C 0003 0018             		move.b	#3,$18(a1)
00008C44 137C 0008 0019             		move.b	#8,$19(a1)
00008C4A 1346 003E                  		move.b	d6,$3E(a1)
00008C4E 5206                       		addq.b	#1,d6
00008C50 0206 0007                  		andi.b	#7,d6
00008C54 0643 0010                  		addi.w	#$10,d3
00008C58 B668 0008                  		cmp.w	8(a0),d3
00008C5C 6600                       		bne.s	loc_7D78
00008C5E 1146 003E                  		move.b	d6,$3E(a0)
00008C62 5206                       		addq.b	#1,d6
00008C64 0206 0007                  		andi.b	#7,d6
00008C68 0643 0010                  		addi.w	#$10,d3
00008C6C 5228 0028                  		addq.b	#1,$28(a0)
00008C70                            
00008C70                            loc_7D78:
00008C70 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00008C74                            
00008C74                            Obj17_Action:				; XREF: Obj17_Index
00008C74 6100 0000                  		bsr.w	Obj17_RotateSpikes
00008C78 6100 0000                  		bsr.w	DisplaySprite
00008C7C 6000 0000                  		bra.w	Obj17_ChkDel
00008C80                            
00008C80                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008C80                            
00008C80                            
00008C80                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00008C80 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00008C84 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00008C8A D028 003E                  		add.b	$3E(a0),d0
00008C8E 0200 0007                  		andi.b	#7,d0
00008C92 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00008C96 6600                       		bne.s	locret_7DA6
00008C98 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00008C9E                            
00008C9E                            locret_7DA6:
00008C9E 4E75                       		rts	
00008CA0                            ; End of function Obj17_RotateSpikes
00008CA0                            
00008CA0                            ; ===========================================================================
00008CA0                            
00008CA0                            Obj17_ChkDel:				; XREF: Obj17_Action
00008CA0 3028 0008                  		move.w	8(a0),d0
00008CA4 0240 FF80                  		andi.w	#$FF80,d0
00008CA8 3238 F700                  		move.w	($FFFFF700).w,d1
00008CAC 0441 0080                  		subi.w	#$80,d1
00008CB0 0241 FF80                  		andi.w	#$FF80,d1
00008CB4 9041                       		sub.w	d1,d0
00008CB6 0C40 0280                  		cmpi.w	#$280,d0
00008CBA 6200 0000                  		bhi.w	Obj17_DelAll
00008CBE 4E75                       		rts	
00008CC0                            ; ===========================================================================
00008CC0                            
00008CC0                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00008CC0 7400                       		moveq	#0,d2
00008CC2 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00008CC6 141A                       		move.b	(a2)+,d2	; move a2 to d2
00008CC8 5502                       		subq.b	#2,d2
00008CCA 6500                       		bcs.s	Obj17_Delete
00008CCC                            
00008CCC                            Obj17_DelLoop:
00008CCC 7000                       		moveq	#0,d0
00008CCE 101A                       		move.b	(a2)+,d0
00008CD0 ED48                       		lsl.w	#6,d0
00008CD2 0680 00FF D000             		addi.l	#$FFD000,d0
00008CD8 2240                       		movea.l	d0,a1
00008CDA 6100 0000                  		bsr.w	DeleteObject2	; delete object
00008CDE 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00008CE2                            
00008CE2                            Obj17_Delete:				; XREF: Obj17_Index
00008CE2 6100 0000                  		bsr.w	DeleteObject
00008CE6 4E75                       		rts	
00008CE8                            ; ===========================================================================
00008CE8                            
00008CE8                            Obj17_Display:				; XREF: Obj17_Index
00008CE8 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00008CEC 6000 0000                  		bra.w	DisplaySprite
00008CF0                            ; ===========================================================================
00008CF0                            ; ---------------------------------------------------------------------------
00008CF0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008CF0                            ; ---------------------------------------------------------------------------
00008CF0                            Map_obj17:
00008CF0                            	include "_maps\obj17.asm"
00008CF0                            ; ---------------------------------------------------------------------------
00008CF0                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00008CF0                            ; ---------------------------------------------------------------------------
00008CF0 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00008CF4 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00008CF8 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00008CFC 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00008D00 01                         byte_7E08:	dc.b 1
00008D01 F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00008D06 01                         byte_7E0E:	dc.b 1
00008D07 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00008D0C 01                         byte_7E14:	dc.b 1
00008D0D F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00008D12 01                         byte_7E1A:	dc.b 1
00008D13 FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00008D18 01                         byte_7E20:	dc.b 1
00008D19 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00008D1E 01                         byte_7E26:	dc.b 1
00008D1F 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00008D24 01                         byte_7E2C:	dc.b 1
00008D25 F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00008D2A                            		even
00008D2A                            		even
00008D2A                            
00008D2A                            ; ===========================================================================
00008D2A                            ; ---------------------------------------------------------------------------
00008D2A                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00008D2A                            ; ---------------------------------------------------------------------------
00008D2A                            
00008D2A                            Obj18:					; XREF: Obj_Index
00008D2A 7000                       		moveq	#0,d0
00008D2C 1028 0024                  		move.b	$24(a0),d0
00008D30 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00008D34 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00008D38                            ; ===========================================================================
00008D38 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00008D3A 0000                       		dc.w Obj18_Solid-Obj18_Index
00008D3C 0000                       		dc.w Obj18_Action2-Obj18_Index
00008D3E 0000                       		dc.w Obj18_Delete-Obj18_Index
00008D40 0000                       		dc.w Obj18_Action-Obj18_Index
00008D42                            ; ===========================================================================
00008D42                            
00008D42                            Obj18_Main:				; XREF: Obj18_Index
00008D42 5428 0024                  		addq.b	#2,$24(a0)
00008D46 317C 4000 0002             		move.w	#$4000,2(a0)
00008D4C 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00008D54 117C 0020 0019             		move.b	#$20,$19(a0)
00008D5A 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00008D60 6600                       		bne.s	Obj18_NotSYZ
00008D62 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00008D6A 117C 0020 0019             		move.b	#$20,$19(a0)
00008D70                            
00008D70                            Obj18_NotSYZ:
00008D70 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008D76 6600                       		bne.s	Obj18_NotSLZ
00008D78 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00008D80 117C 0020 0019             		move.b	#$20,$19(a0)
00008D86 317C 4000 0002             		move.w	#$4000,2(a0)
00008D8C 117C 0003 0028             		move.b	#3,$28(a0)
00008D92                            
00008D92                            Obj18_NotSLZ:
00008D92 117C 0004 0001             		move.b	#4,1(a0)
00008D98 117C 0004 0018             		move.b	#4,$18(a0)
00008D9E 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00008DA4 3168 000C 0034             		move.w	$C(a0),$34(a0)
00008DAA 3168 0008 0032             		move.w	8(a0),$32(a0)
00008DB0 317C 0080 0026             		move.w	#$80,$26(a0)
00008DB6 7200                       		moveq	#0,d1
00008DB8 1028 0028                  		move.b	$28(a0),d0
00008DBC 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00008DC0 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00008DC2 5201                       		addq.b	#1,d1		; use frame #1
00008DC4 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00008DCA                            
00008DCA                            Obj18_SetFrame:
00008DCA 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00008DCE                            
00008DCE                            Obj18_Solid:				; XREF: Obj18_Index
00008DCE 4A28 0038                  		tst.b	$38(a0)
00008DD2 6700                       		beq.s	loc_7EE0
00008DD4 5928 0038                  		subq.b	#4,$38(a0)
00008DD8                            
00008DD8                            loc_7EE0:
00008DD8 7200                       		moveq	#0,d1
00008DDA 1228 0019                  		move.b	$19(a0),d1
00008DDE 6100 F56C                  		bsr.w	PlatformObject
00008DE2                            
00008DE2                            Obj18_Action:				; XREF: Obj18_Index
00008DE2 6100 0000                  		bsr.w	Obj18_Move
00008DE6 6100 0000                  		bsr.w	Obj18_Nudge
00008DEA 6100 0000                  		bsr.w	DisplaySprite
00008DEE 6000 0000                  		bra.w	Obj18_ChkDel
00008DF2                            ; ===========================================================================
00008DF2                            
00008DF2                            Obj18_Action2:				; XREF: Obj18_Index
00008DF2 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00008DF8 6700                       		beq.s	loc_7F06
00008DFA 5828 0038                  		addq.b	#4,$38(a0)
00008DFE                            
00008DFE                            loc_7F06:
00008DFE 7200                       		moveq	#0,d1
00008E00 1228 0019                  		move.b	$19(a0),d1
00008E04 6100 F6BA                  		bsr.w	ExitPlatform
00008E08 3F28 0008                  		move.w	8(a0),-(sp)
00008E0C 6100 0000                  		bsr.w	Obj18_Move
00008E10 6100 0000                  		bsr.w	Obj18_Nudge
00008E14 341F                       		move.w	(sp)+,d2
00008E16 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00008E1A 6100 0000                  		bsr.w	DisplaySprite
00008E1E 6000 0000                  		bra.w	Obj18_ChkDel
00008E22                            
00008E22 4E75                       		rts
00008E24                            
00008E24                            ; ---------------------------------------------------------------------------
00008E24                            ; Subroutine to	move platform slightly when you	stand on it
00008E24                            ; ---------------------------------------------------------------------------
00008E24                            
00008E24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E24                            
00008E24                            
00008E24                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00008E24 1028 0038                  		move.b	$38(a0),d0
00008E28 6100 A5EC                  		bsr.w	CalcSine
00008E2C 323C 0400                  		move.w	#$400,d1
00008E30 C1C1                       		muls.w	d1,d0
00008E32 4840                       		swap	d0
00008E34 D068 002C                  		add.w	$2C(a0),d0
00008E38 3140 000C                  		move.w	d0,$C(a0)
00008E3C 4E75                       		rts	
00008E3E                            ; End of function Obj18_Nudge
00008E3E                            
00008E3E                            ; ---------------------------------------------------------------------------
00008E3E                            ; Subroutine to	move platforms
00008E3E                            ; ---------------------------------------------------------------------------
00008E3E                            
00008E3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008E3E                            
00008E3E                            
00008E3E                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00008E3E 7000                       		moveq	#0,d0
00008E40 1028 0028                  		move.b	$28(a0),d0
00008E44 0240 000F                  		andi.w	#$F,d0
00008E48 D040                       		add.w	d0,d0
00008E4A 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00008E4E 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00008E52                            ; End of function Obj18_Move
00008E52                            
00008E52                            ; ===========================================================================
00008E52 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00008E56 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00008E5A 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00008E5E 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00008E62 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00008E66 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00008E6A 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00008E6C                            ; ===========================================================================
00008E6C                            
00008E6C                            Obj18_Type00:
00008E6C 4E75                       		rts			; platform 00 doesn't move
00008E6E                            ; ===========================================================================
00008E6E                            
00008E6E                            Obj18_Type05:
00008E6E 3028 0032                  		move.w	$32(a0),d0
00008E72 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008E76 4401                       		neg.b	d1		; reverse platform-motion
00008E78 0601 0040                  		addi.b	#$40,d1
00008E7C 6000                       		bra.s	Obj18_01_Move
00008E7E                            ; ===========================================================================
00008E7E                            
00008E7E                            Obj18_Type01:
00008E7E 3028 0032                  		move.w	$32(a0),d0
00008E82 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008E86 0401 0040                  		subi.b	#$40,d1
00008E8A                            
00008E8A                            Obj18_01_Move:
00008E8A 4881                       		ext.w	d1
00008E8C D041                       		add.w	d1,d0
00008E8E 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00008E92 6000 0000                  		bra.w	Obj18_ChgMotion
00008E96                            ; ===========================================================================
00008E96                            
00008E96                            Obj18_Type0C:
00008E96 3028 0034                  		move.w	$34(a0),d0
00008E9A 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008E9E 4401                       		neg.b	d1		; reverse platform-motion
00008EA0 0601 0030                  		addi.b	#$30,d1
00008EA4 6000                       		bra.s	Obj18_02_Move
00008EA6                            ; ===========================================================================
00008EA6                            
00008EA6                            Obj18_Type0B:
00008EA6 3028 0034                  		move.w	$34(a0),d0
00008EAA 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00008EAE 0401 0030                  		subi.b	#$30,d1
00008EB2 6000                       		bra.s	Obj18_02_Move
00008EB4                            ; ===========================================================================
00008EB4                            
00008EB4                            Obj18_Type06:
00008EB4 3028 0034                  		move.w	$34(a0),d0
00008EB8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008EBC 4401                       		neg.b	d1		; reverse platform-motion
00008EBE 0601 0040                  		addi.b	#$40,d1
00008EC2 6000                       		bra.s	Obj18_02_Move
00008EC4                            ; ===========================================================================
00008EC4                            
00008EC4                            Obj18_Type02:
00008EC4 3028 0034                  		move.w	$34(a0),d0
00008EC8 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008ECC 0401 0040                  		subi.b	#$40,d1
00008ED0                            
00008ED0                            Obj18_02_Move:
00008ED0 4881                       		ext.w	d1
00008ED2 D041                       		add.w	d1,d0
00008ED4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008ED8 6000 0000                  		bra.w	Obj18_ChgMotion
00008EDC                            ; ===========================================================================
00008EDC                            
00008EDC                            Obj18_Type03:
00008EDC 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008EE0 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00008EE2 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00008EE8 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00008EEA 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00008EF0                            
00008EF0                            Obj18_03_NoMove:
00008EF0 4E75                       		rts	
00008EF2                            ; ===========================================================================
00008EF2                            
00008EF2                            Obj18_03_Wait:
00008EF2 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00008EF6 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00008EF8 317C 0020 003A             		move.w	#32,$3A(a0)
00008EFE 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00008F02 4E75                       		rts	
00008F04                            ; ===========================================================================
00008F04                            
00008F04                            Obj18_Type04:
00008F04 4A68 003A                  		tst.w	$3A(a0)
00008F08 6700                       		beq.s	loc_8048
00008F0A 5368 003A                  		subq.w	#1,$3A(a0)
00008F0E 6600                       		bne.s	loc_8048
00008F10 0828 0003 0022             		btst	#3,$22(a0)
00008F16 6700                       		beq.s	loc_8042
00008F18 08E9 0001 0022             		bset	#1,$22(a1)
00008F1E 08A9 0003 0022             		bclr	#3,$22(a1)
00008F24 137C 0002 0024             		move.b	#2,$24(a1)
00008F2A 08A8 0003 0022             		bclr	#3,$22(a0)
00008F30 4228 0025                  		clr.b	$25(a0)
00008F34 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008F3A                            
00008F3A                            loc_8042:
00008F3A 117C 0008 0024             		move.b	#8,$24(a0)
00008F40                            
00008F40                            loc_8048:
00008F40 2628 002C                  		move.l	$2C(a0),d3
00008F44 3028 0012                  		move.w	$12(a0),d0
00008F48 48C0                       		ext.l	d0
00008F4A E180                       		asl.l	#8,d0
00008F4C D680                       		add.l	d0,d3
00008F4E 2143 002C                  		move.l	d3,$2C(a0)
00008F52 0668 0038 0012             		addi.w	#$38,$12(a0)
00008F58 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008F5C 0640 00E0                  		addi.w	#$E0,d0
00008F60 B068 002C                  		cmp.w	$2C(a0),d0
00008F64 6400                       		bcc.s	locret_8074
00008F66 117C 0006 0024             		move.b	#6,$24(a0)
00008F6C                            
00008F6C                            locret_8074:
00008F6C 4E75                       		rts	
00008F6E                            ; ===========================================================================
00008F6E                            
00008F6E                            Obj18_Type07:
00008F6E 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00008F72 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
00008F74 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008F78 7000                       		moveq	#0,d0
00008F7A 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008F7E E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
00008F80 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
00008F84 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008F86 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008F8C                            
00008F8C                            Obj18_07_NoMove:
00008F8C 4E75                       		rts	
00008F8E                            ; ===========================================================================
00008F8E                            
00008F8E                            Obj18_07_Wait:
00008F8E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00008F92 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
00008F94 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008F98 4E75                       		rts	
00008F9A                            ; ===========================================================================
00008F9A                            
00008F9A                            Obj18_Type08:
00008F9A 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008F9E 3028 0034                  		move.w	$34(a0),d0
00008FA2 0440 0200                  		subi.w	#$200,d0
00008FA6 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008FAA 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008FAC 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
00008FB0                            
00008FB0                            Obj18_08_NoStop:
00008FB0 4E75                       		rts	
00008FB2                            ; ===========================================================================
00008FB2                            
00008FB2                            Obj18_Type0A:
00008FB2 3028 0034                  		move.w	$34(a0),d0
00008FB6 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00008FBA 0401 0040                  		subi.b	#$40,d1
00008FBE 4881                       		ext.w	d1
00008FC0 E241                       		asr.w	#1,d1
00008FC2 D041                       		add.w	d1,d0
00008FC4 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00008FC8                            
00008FC8                            Obj18_ChgMotion:
00008FC8 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
00008FCE 4E75                       		rts	
00008FD0                            ; ===========================================================================
00008FD0                            
00008FD0                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
00008FD0 3028 0032                  		move.w	$32(a0),d0
00008FD4 0240 FF80                  		andi.w	#$FF80,d0
00008FD8 3238 F700                  		move.w	($FFFFF700).w,d1
00008FDC 0441 0080                  		subi.w	#$80,d1
00008FE0 0241 FF80                  		andi.w	#$FF80,d1
00008FE4 9041                       		sub.w	d1,d0
00008FE6 0C40 0280                  		cmpi.w	#$280,d0
00008FEA 6200                       		bhi.s	Obj18_Delete
00008FEC 4E75                       		rts	
00008FEE                            ; ===========================================================================
00008FEE                            
00008FEE                            Obj18_Delete:				; XREF: Obj18_Index
00008FEE 6000 0000                  		bra.w	DeleteObject
00008FF2                            ; ===========================================================================
00008FF2                            ; ---------------------------------------------------------------------------
00008FF2                            ; Sprite mappings - unused
00008FF2                            ; ---------------------------------------------------------------------------
00008FF2                            Map_obj18x:
00008FF2                            	include "_maps\obj18x.asm"
00008FF2                            ; ---------------------------------------------------------------------------
00008FF2                            ; Sprite mappings - unused
00008FF2                            ; ---------------------------------------------------------------------------
00008FF2 0000                       		dc.w byte_80FE-Map_obj18x
00008FF4 0000                       		dc.w byte_8109-Map_obj18x
00008FF6 02                         byte_80FE:	dc.b 2
00008FF7 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
00008FFC F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
00009001 0A                         byte_8109:	dc.b $A
00009002 F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
00009007 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
0000900C 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
00009011 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00009016 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
0000901B F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
00009020 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
00009025 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
0000902A 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
0000902F 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
00009034                            		even
00009034                            		even
00009034                            
00009034                            ; ---------------------------------------------------------------------------
00009034                            ; Sprite mappings - GHZ	platforms
00009034                            ; ---------------------------------------------------------------------------
00009034                            Map_obj18:
00009034                            	include "_maps\obj18ghz.asm"
00009034                            ; ---------------------------------------------------------------------------
00009034                            ; Sprite mappings - GHZ	platforms
00009034                            ; ---------------------------------------------------------------------------
00009034 0000                       		dc.w byte_8140-Map_obj18
00009036 0000                       		dc.w byte_8155-Map_obj18
00009038 04                         byte_8140:	dc.b 4
00009039 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
0000903E F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
00009043 F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00009048 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
0000904D 0A                         byte_8155:	dc.b $A
0000904E F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
00009053 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00009058 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
0000905D 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
00009062 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00009067 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
0000906C 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
00009071 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00009076 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
0000907B 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
00009080                            		even
00009080                            		even
00009080                            
00009080                            ; ---------------------------------------------------------------------------
00009080                            ; Sprite mappings - SYZ	platforms
00009080                            ; ---------------------------------------------------------------------------
00009080                            Map_obj18a:
00009080                            	include "_maps\obj18syz.asm"
00009080                            ; ---------------------------------------------------------------------------
00009080                            ; Sprite mappings - SYZ	platforms
00009080                            ; ---------------------------------------------------------------------------
00009080 0000                       		dc.w byte_818A-Map_obj18a
00009082 03                         byte_818A:	dc.b 3
00009083 F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00009088 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
0000908D F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
00009092                            		even
00009092                            		even
00009092                            
00009092                            ; ---------------------------------------------------------------------------
00009092                            ; Sprite mappings - SLZ	platforms
00009092                            ; ---------------------------------------------------------------------------
00009092                            Map_obj18b:
00009092                            	include "_maps\obj18slz.asm"
00009092                            ; ---------------------------------------------------------------------------
00009092                            ; Sprite mappings - SLZ	platforms
00009092                            ; ---------------------------------------------------------------------------
00009092 0000                       		dc.w byte_819C-Map_obj18b
00009094 02                         byte_819C:	dc.b 2
00009095 F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
0000909A F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
000090A0 00                         		even
000090A0 00                         		even
000090A0                            
000090A0                            ; ===========================================================================
000090A0                            ; ---------------------------------------------------------------------------
000090A0                            ; Object 19 - Pearto bombs
000090A0                            ; ---------------------------------------------------------------------------
000090A0                            Obj19:					; XREF: Obj_Index
000090A0 7000                       		moveq	#0,d0
000090A2 1028 0024                  		move.b	$24(a0),d0
000090A6 323B 0000                  		move.w	off_7070(pc,d0.w),d1
000090AA 4EFB 1000                  		jmp	off_7070(pc,d1.w)
000090AE                            ; ---------------------------------------------------------------------------
000090AE                            
000090AE 0000 0000 0000             off_7070:	dc.w loc_7076-off_7070, loc_70A6-off_7070, loc_70EE-off_7070
000090B4                            ; ---------------------------------------------------------------------------
000090B4                            
000090B4                            loc_7076:
000090B4 5428 0024                  		addq.b	#2,$24(a0)
000090B8 217C 0000 0000 0004        		move.l	#Map_obj19,4(a0)
000090C0 317C 0480 0002             		move.w	#($9000/$20),2(a0)
000090C6 117C 0004 0001             		move.b	#4,1(a0)
000090CC 117C 0003 0019             		move.b	#3,$19(a0)
000090D2 117C 0087 0020             		move.b	#$87,$20(a0)
000090D8 117C 0008 0018             		move.b	#8,$18(a0)
000090DE 317C 0018 0030             		move.w	#$18,$30(a0)
000090E4                            
000090E4                            loc_70A6:
000090E4 0828 0007 0022             		btst	#7,$22(a0)
000090EA 6600                       		bne.s	loc_70C2
000090EC 4A68 0030                  		tst.w	$30(a0)
000090F0 6600                       		bne.s	loc_70D2
000090F2 4EB9 0000 0000             		jsr	ObjHitFloor
000090F8 4A41                       		tst.w	d1
000090FA 6A00                       		bpl.s	loc_70D6
000090FC D368 000C                  		add.w	d1,$C(a0)
00009100                            
00009100                            loc_70C2:
00009100 10BC 0027                  		move.b	#$27,0(a0); change object to explosion (why was this even here with the 3F branch)
00009104 117C 0000 0024             		move.b	#0,$24(a0)
0000910A                            ; ---------------------------------------------------------------------------
0000910A                            
0000910A                            loc_70D2:
0000910A 5368 0030                  		subq.w	#1,$30(a0)
0000910E                            
0000910E                            loc_70D6:
0000910E 6100 0000                  		bsr.w	ObjectFall
00009112 6100 0000                  		bsr.w	DisplaySprite
00009116 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000911A 0640 00E0                  		addi.w	#$E0,d0
0000911E B068 000C                  		cmp.w	$C(a0),d0
00009122 6500                       		bcs.s	loc_70EE
00009124 4E75                       		rts
00009126                            ; ---------------------------------------------------------------------------
00009126                            
00009126                            loc_70EE:
00009126 6100 0000                  		bsr.w	DeleteObject
0000912A 4E75                       		rts
0000912C                            		
0000912C                            Map_obj19:
0000912C                            	include "_maps\obj19.asm"
0000912C                            Map_02b4:
0000912C 0000                       Map_02b4_0: 	dc.w Map_02b4_2-Map_02b4
0000912E 01                         Map_02b4_2: 	dc.b $1
0000912F F706 2000 F8               	dc.b $F7, $6, $20, $0, $F8
00009134                            	even
00009134                            	even
00009134                            ; ===========================================================================
00009134                            ; ---------------------------------------------------------------------------
00009134                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009134                            ; ---------------------------------------------------------------------------
00009134                            Map_obj48:
00009134                            	include "_maps\obj48.asm"
00009134                            ; ---------------------------------------------------------------------------
00009134                            ; Sprite mappings - swinging ball on a chain from GHZ boss
00009134                            ; ---------------------------------------------------------------------------
00009134 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00009138 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
0000913C 06                         byte_81B2:	dc.b 6
0000913D F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
00009142 F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
00009147 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
0000914C E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00009151 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00009156 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0000915B 04                         byte_81D1:	dc.b 4
0000915C E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
00009161 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
00009166 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
0000916B 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
00009170 04                         byte_81E6:	dc.b 4
00009171 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00009176 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
0000917B 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00009180 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00009185 04                         byte_81FB:	dc.b 4
00009186 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
0000918B E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00009190 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00009195 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
0000919A                            		even
0000919A                            		even
0000919A                            
0000919A                            ; ===========================================================================
0000919A                            ; ---------------------------------------------------------------------------
0000919A                            ; Object 1A - GHZ collapsing ledge
0000919A                            ; ---------------------------------------------------------------------------
0000919A                            
0000919A                            Obj1A:					; XREF: Obj_Index
0000919A 7000                       		moveq	#0,d0
0000919C 1028 0024                  		move.b	$24(a0),d0
000091A0 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000091A4 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
000091A8                            ; ===========================================================================
000091A8 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
000091AC 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
000091B0 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
000091B4                            ; ===========================================================================
000091B4                            
000091B4                            Obj1A_Main:				; XREF: Obj1A_Index
000091B4 5428 0024                  		addq.b	#2,$24(a0)
000091B8 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
000091C0 317C 4000 0002             		move.w	#$4000,2(a0)
000091C6 0028 0004 0001             		ori.b	#4,1(a0)
000091CC 117C 0004 0018             		move.b	#4,$18(a0)
000091D2 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
000091D8 117C 0064 0019             		move.b	#$64,$19(a0)
000091DE 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000091E4 117C 0038 0016             		move.b	#$38,$16(a0)
000091EA 08E8 0004 0001             		bset	#4,1(a0)
000091F0                            
000091F0                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
000091F0 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
000091F4 6700                       		beq.s	Obj1A_Slope	; if not, branch
000091F6 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
000091FA 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
000091FE 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009202                            
00009202                            Obj1A_Slope:
00009202 323C 0030                  		move.w	#$30,d1
00009206 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
0000920C 6100 F212                  		bsr.w	SlopeObject
00009210 6000 0000                  		bra.w	MarkObjGone
00009214                            ; ===========================================================================
00009214                            
00009214                            Obj1A_Touch:				; XREF: Obj1A_Index
00009214 4A28 0038                  		tst.b	$38(a0)
00009218 6700 0000                  		beq.w	loc_847A
0000921C 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
00009222 5328 0038                  		subq.b	#1,$38(a0)
00009226                            
00009226                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009226                            
00009226                            
00009226                            Obj1A_WalkOff:				; XREF: Obj1A_Index
00009226 323C 0030                  		move.w	#$30,d1
0000922A 6100 F294                  		bsr.w	ExitPlatform
0000922E 323C 0030                  		move.w	#$30,d1
00009232 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00009238 3428 0008                  		move.w	8(a0),d2
0000923C 6100 0000                  		bsr.w	SlopeObject2
00009240 6000 0000                  		bra.w	MarkObjGone
00009244                            ; End of function Obj1A_WalkOff
00009244                            
00009244                            ; ===========================================================================
00009244                            
00009244                            Obj1A_Display:				; XREF: Obj1A_Index
00009244 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009248 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
0000924A 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000924E 6600 0000                  		bne.w	loc_82D0	; if yes, branch
00009252 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009256 6000 0000                  		bra.w	DisplaySprite
0000925A                            ; ===========================================================================
0000925A                            
0000925A                            loc_82D0:				; XREF: Obj1A_Display
0000925A 5328 0038                  		subq.b	#1,$38(a0)
0000925E 6100 FFC6                  		bsr.w	Obj1A_WalkOff
00009262 43F8 D000                  		lea	($FFFFD000).w,a1
00009266 0829 0003 0022             		btst	#3,$22(a1)
0000926C 6700                       		beq.s	loc_82FC
0000926E 4A28 0038                  		tst.b	$38(a0)
00009272 6600                       		bne.s	locret_8308
00009274 08A9 0003 0022             		bclr	#3,$22(a1)
0000927A 08A9 0005 0022             		bclr	#5,$22(a1)
00009280 137C 0001 001D             		move.b	#1,$1D(a1)
00009286                            
00009286                            loc_82FC:
00009286 117C 0000 003A             		move.b	#0,$3A(a0)
0000928C 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
00009292                            
00009292                            locret_8308:
00009292 4E75                       		rts	
00009294                            ; ===========================================================================
00009294                            
00009294                            Obj1A_TimeZero:				; XREF: Obj1A_Display
00009294 6100 0000                  		bsr.w	ObjectFall
00009298 6100 0000                  		bsr.w	DisplaySprite
0000929C 4A28 0001                  		tst.b	1(a0)
000092A0 6A00                       		bpl.s	Obj1A_Delete
000092A2 4E75                       		rts	
000092A4                            ; ===========================================================================
000092A4                            
000092A4                            Obj1A_Delete:				; XREF: Obj1A_Index
000092A4 6100 0000                  		bsr.w	DeleteObject
000092A8 4E75                       		rts	
000092AA                            ; ===========================================================================
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
000092AA                            ; ---------------------------------------------------------------------------
000092AA                            
000092AA                            Obj53:					; XREF: Obj_Index
000092AA 7000                       		moveq	#0,d0
000092AC 1028 0024                  		move.b	$24(a0),d0
000092B0 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
000092B4 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
000092B8                            ; ===========================================================================
000092B8 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
000092BC 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
000092C0 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
000092C4                            ; ===========================================================================
000092C4                            
000092C4                            Obj53_Main:				; XREF: Obj53_Index
000092C4 5428 0024                  		addq.b	#2,$24(a0)
000092C8 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
000092D0 317C 42B8 0002             		move.w	#$42B8,2(a0)
000092D6 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
000092DC 6600                       		bne.s	Obj53_NotSLZ
000092DE 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
000092E4 5428 001A                  		addq.b	#2,$1A(a0)
000092E8                            
000092E8                            Obj53_NotSLZ:
000092E8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000092EE 6600                       		bne.s	Obj53_NotSBZ
000092F0 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
000092F6                            
000092F6                            Obj53_NotSBZ:
000092F6 0028 0004 0001             		ori.b	#4,1(a0)
000092FC 117C 0004 0018             		move.b	#4,$18(a0)
00009302 117C 0007 0038             		move.b	#7,$38(a0)
00009308 117C 0044 0019             		move.b	#$44,$19(a0)
0000930E                            
0000930E                            Obj53_ChkTouch:				; XREF: Obj53_Index
0000930E 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009312 6700                       		beq.s	Obj53_Solid	; if not, branch
00009314 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00009318 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
0000931C 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009320                            
00009320                            Obj53_Solid:
00009320 323C 0020                  		move.w	#$20,d1
00009324 6100 F026                  		bsr.w	PlatformObject
00009328 4A28 0028                  		tst.b	$28(a0)
0000932C 6A00                       		bpl.s	Obj53_MarkAsGone
0000932E 0829 0003 0022             		btst	#3,$22(a1)
00009334 6700                       		beq.s	Obj53_MarkAsGone
00009336 08A8 0000 0001             		bclr	#0,1(a0)
0000933C 3029 0008                  		move.w	8(a1),d0
00009340 9068 0008                  		sub.w	8(a0),d0
00009344 6400                       		bcc.s	Obj53_MarkAsGone
00009346 08E8 0000 0001             		bset	#0,1(a0)
0000934C                            
0000934C                            Obj53_MarkAsGone:
0000934C 6000 0000                  		bra.w	MarkObjGone
00009350                            ; ===========================================================================
00009350                            
00009350                            Obj53_Touch:				; XREF: Obj53_Index
00009350 4A28 0038                  		tst.b	$38(a0)
00009354 6700 0000                  		beq.w	loc_8458
00009358 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000935E 5328 0038                  		subq.b	#1,$38(a0)
00009362                            
00009362                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009362                            
00009362                            
00009362                            Obj53_WalkOff:				; XREF: Obj53_Index
00009362 323C 0020                  		move.w	#$20,d1
00009366 6100 F158                  		bsr.w	ExitPlatform
0000936A 3428 0008                  		move.w	8(a0),d2
0000936E 6100 F6BA                  		bsr.w	MvSonicOnPtfm2
00009372 6000 0000                  		bra.w	MarkObjGone
00009376                            ; End of function Obj53_WalkOff
00009376                            
00009376                            ; ===========================================================================
00009376                            
00009376                            Obj53_Display:				; XREF: Obj53_Index
00009376 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
0000937A 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
0000937C 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
00009380 6600 0000                  		bne.w	loc_8402	; if yes, branch
00009384 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00009388 6000 0000                  		bra.w	DisplaySprite
0000938C                            ; ===========================================================================
0000938C                            
0000938C                            loc_8402:
0000938C 5328 0038                  		subq.b	#1,$38(a0)
00009390 6100 FFD0                  		bsr.w	Obj53_WalkOff
00009394 43F8 D000                  		lea	($FFFFD000).w,a1
00009398 0829 0003 0022             		btst	#3,$22(a1)
0000939E 6700                       		beq.s	loc_842E
000093A0 4A28 0038                  		tst.b	$38(a0)
000093A4 6600                       		bne.s	locret_843A
000093A6 08A9 0003 0022             		bclr	#3,$22(a1)
000093AC 08A9 0005 0022             		bclr	#5,$22(a1)
000093B2 137C 0001 001D             		move.b	#1,$1D(a1)
000093B8                            
000093B8                            loc_842E:
000093B8 117C 0000 003A             		move.b	#0,$3A(a0)
000093BE 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
000093C4                            
000093C4                            locret_843A:
000093C4 4E75                       		rts	
000093C6                            ; ===========================================================================
000093C6                            
000093C6                            Obj53_TimeZero:				; XREF: Obj53_Display
000093C6 6100 0000                  		bsr.w	ObjectFall
000093CA 6100 0000                  		bsr.w	DisplaySprite
000093CE 4A28 0001                  		tst.b	1(a0)
000093D2 6A00                       		bpl.s	Obj53_Delete
000093D4 4E75                       		rts	
000093D6                            ; ===========================================================================
000093D6                            
000093D6                            Obj53_Delete:				; XREF: Obj53_Index
000093D6 6100 0000                  		bsr.w	DeleteObject
000093DA 4E75                       		rts	
000093DC                            ; ===========================================================================
000093DC                            
000093DC                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
000093DC 117C 0000 003A             		move.b	#0,$3A(a0)
000093E2                            
000093E2                            loc_8458:				; XREF: Obj53_Touch
000093E2 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
000093E8 0828 0000 0028             		btst	#0,$28(a0)
000093EE 6700                       		beq.s	loc_846C
000093F0 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
000093F6                            
000093F6                            loc_846C:
000093F6 7207                       		moveq	#7,d1
000093F8 5228 001A                  		addq.b	#1,$1A(a0)
000093FC 6000                       		bra.s	loc_8486
000093FE                            ; ===========================================================================
000093FE                            
000093FE                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
000093FE 117C 0000 003A             		move.b	#0,$3A(a0)
00009404                            
00009404                            loc_847A:				; XREF: Obj1A_Touch
00009404 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
0000940A 7218                       		moveq	#$18,d1
0000940C 5428 001A                  		addq.b	#2,$1A(a0)
00009410                            
00009410                            loc_8486:				; XREF: Obj53_Collapse
00009410 7000                       		moveq	#0,d0
00009412 1028 001A                  		move.b	$1A(a0),d0
00009416 D040                       		add.w	d0,d0
00009418 2668 0004                  		movea.l	4(a0),a3
0000941C D6F3 0000                  		adda.w	(a3,d0.w),a3
00009420 524B                       		addq.w	#1,a3
00009422 08E8 0005 0001             		bset	#5,1(a0)
00009428 1810                       		move.b	0(a0),d4
0000942A 1A28 0001                  		move.b	1(a0),d5
0000942E 2248                       		movea.l	a0,a1
00009430 6000                       		bra.s	loc_84B2
00009432                            ; ===========================================================================
00009432                            
00009432                            loc_84AA:
00009432 6100 0000                  		bsr.w	SingleObjLoad
00009436 6600                       		bne.s	loc_84F2
00009438 5A4B                       		addq.w	#5,a3
0000943A                            
0000943A                            loc_84B2:
0000943A 137C 0006 0024             		move.b	#6,$24(a1)
00009440 1284                       		move.b	d4,0(a1)
00009442 234B 0004                  		move.l	a3,4(a1)
00009446 1345 0001                  		move.b	d5,1(a1)
0000944A 3368 0008 0008             		move.w	8(a0),8(a1)
00009450 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009456 3368 0002 0002             		move.w	2(a0),2(a1)
0000945C 1368 0018 0018             		move.b	$18(a0),$18(a1)
00009462 1368 0019 0019             		move.b	$19(a0),$19(a1)
00009468 135C 0038                  		move.b	(a4)+,$38(a1)
0000946C B3C8                       		cmpa.l	a0,a1
0000946E 6400                       		bcc.s	loc_84EE
00009470 6100 0000                  		bsr.w	DisplaySprite2
00009474                            
00009474                            loc_84EE:
00009474 51C9 FFBC                  		dbf	d1,loc_84AA
00009478                            
00009478                            loc_84F2:
00009478 6100 0000                  		bsr.w	DisplaySprite
0000947C 303C 00B9                  		move.w	#$B9,d0
00009480 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play collapsing	sound
00009486                            ; ===========================================================================
00009486                            ; ---------------------------------------------------------------------------
00009486                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
00009486                            ; ---------------------------------------------------------------------------
00009486 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
00009496 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000094A0 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
000094A8 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
000094B0                            
000094B0                            ; ---------------------------------------------------------------------------
000094B0                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
000094B0                            ; ---------------------------------------------------------------------------
000094B0                            
000094B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000094B0                            
000094B0                            
000094B0                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
000094B0 43F8 D000                  		lea	($FFFFD000).w,a1
000094B4 0829 0003 0022             		btst	#3,$22(a1)
000094BA 6700                       		beq.s	locret_856E
000094BC 3029 0008                  		move.w	8(a1),d0
000094C0 9068 0008                  		sub.w	8(a0),d0
000094C4 D041                       		add.w	d1,d0
000094C6 E248                       		lsr.w	#1,d0
000094C8 0828 0000 0001             		btst	#0,1(a0)
000094CE 6700                       		beq.s	loc_854E
000094D0 4640                       		not.w	d0
000094D2 D041                       		add.w	d1,d0
000094D4                            
000094D4                            loc_854E:
000094D4 7200                       		moveq	#0,d1
000094D6 1232 0000                  		move.b	(a2,d0.w),d1
000094DA 3028 000C                  		move.w	$C(a0),d0
000094DE 9041                       		sub.w	d1,d0
000094E0 7200                       		moveq	#0,d1
000094E2 1229 0016                  		move.b	$16(a1),d1
000094E6 9041                       		sub.w	d1,d0
000094E8 3340 000C                  		move.w	d0,$C(a1)
000094EC 9468 0008                  		sub.w	8(a0),d2
000094F0 9569 0008                  		sub.w	d2,8(a1)
000094F4                            
000094F4                            locret_856E:
000094F4 4E75                       		rts	
000094F6                            ; End of function SlopeObject2
000094F6                            
000094F6                            ; ===========================================================================
000094F6                            ; ---------------------------------------------------------------------------
000094F6                            ; Collision data for GHZ collapsing ledge
000094F6                            ; ---------------------------------------------------------------------------
000094F6                            Obj1A_SlopeData:
000094F6                            		incbin	misc\ghzledge.bin
00009526                            		even
00009526                            
00009526                            ; ---------------------------------------------------------------------------
00009526                            ; Sprite mappings - GHZ	collapsing ledge
00009526                            ; ---------------------------------------------------------------------------
00009526                            Map_obj1A:
00009526                            	include "_maps\obj1A.asm"
00009526                            ; ---------------------------------------------------------------------------
00009526                            ; Sprite mappings - GHZ	collapsing ledge
00009526                            ; ---------------------------------------------------------------------------
00009526 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
0000952A 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
0000952E 10                         byte_85A8:	dc.b $10
0000952F C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
00009534 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00009539 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000953E E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009543 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009548 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000954D F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
00009552 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00009557 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000955C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009561 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
00009566 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
0000956B 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00009570 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00009575 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
0000957A 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000957F 10                         byte_85F9:	dc.b $10
00009580 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
00009585 D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
0000958A E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
0000958F E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
00009594 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00009599 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
0000959E F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000095A3 F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000095A8 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000095AD F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000095B2 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000095B7 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000095BC 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000095C1 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000095C6 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000095CB 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000095D0 19                         byte_864A:	dc.b $19
000095D1 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
000095D6 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000095DB D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000095E0 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000095E5 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000095EA E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000095EF E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000095F4 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000095F9 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000095FE D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
00009603 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009608 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000960D F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009612 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009617 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000961C F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00009621 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
00009626 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
0000962B 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00009630 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
00009635 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
0000963A 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
0000963F 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
00009644 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
00009649 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
0000964E 19                         byte_86C8:	dc.b $19
0000964F C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
00009654 C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00009659 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
0000965E D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
00009663 E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00009668 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
0000966D E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
00009672 E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00009677 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
0000967C D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
00009681 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00009686 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
0000968B F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
00009690 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
00009695 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
0000969A F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000969F 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000096A4 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
000096A9 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000096AE 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
000096B3 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
000096B8 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
000096BD 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
000096C2 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000096C7 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000096CC                            		even
000096CC                            		even
000096CC                            
000096CC                            ; ---------------------------------------------------------------------------
000096CC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000096CC                            ; ---------------------------------------------------------------------------
000096CC                            Map_obj53:
000096CC                            	include "_maps\obj53.asm"
000096CC                            ; ---------------------------------------------------------------------------
000096CC                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
000096CC                            ; ---------------------------------------------------------------------------
000096CC 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
000096D0 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
000096D4 04                         byte_874E:	dc.b 4
000096D5 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
000096DA 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
000096DF F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
000096E4 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
000096E9 08                         byte_8763:	dc.b 8
000096EA F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
000096EF F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
000096F4 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
000096F9 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
000096FE 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
00009703 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00009708 0805 0000 00               		dc.b 8,	5, 0, 0, 0
0000970D 0805 0000 10               		dc.b 8,	5, 0, 0, $10
00009712 04                         byte_878C:	dc.b 4
00009713 F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00009718 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
0000971D F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
00009722 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
00009727 08                         byte_87A1:	dc.b 8
00009728 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000972D F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
00009732 F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00009737 F805 0004 10               		dc.b $F8, 5, 0,	4, $10
0000973C 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00009741 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
00009746 0805 0008 00               		dc.b 8,	5, 0, 8, 0
0000974B 0805 000C 10               		dc.b 8,	5, 0, $C, $10
00009750                            		even
00009750                            		even
00009750                            
00009750                            ; ===========================================================================
00009750                            ; ---------------------------------------------------------------------------
00009750                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
00009750                            ; ---------------------------------------------------------------------------
00009750                            
00009750                            Obj1C:					; XREF: Obj_Index
00009750 7000                       		moveq	#0,d0
00009752 1028 0024                  		move.b	$24(a0),d0
00009756 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
0000975A 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
0000975E                            ; ===========================================================================
0000975E 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
00009760 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
00009762                            ; ===========================================================================
00009762                            
00009762                            Obj1C_Main:				; XREF: Obj1C_Index
00009762 5428 0024                  		addq.b	#2,$24(a0)
00009766 7000                       		moveq	#0,d0
00009768 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
0000976C C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
00009770 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
00009774 2159 0004                  		move.l	(a1)+,4(a0)
00009778 3159 0002                  		move.w	(a1)+,2(a0)
0000977C 0028 0004 0001             		ori.b	#4,1(a0)
00009782 1159 001A                  		move.b	(a1)+,$1A(a0)
00009786 1159 0019                  		move.b	(a1)+,$19(a0)
0000978A 1159 0018                  		move.b	(a1)+,$18(a0)
0000978E 1159 0020                  		move.b	(a1)+,$20(a0)
00009792                            
00009792                            Obj1C_ChkDel:				; XREF: Obj1C_Index
00009792 3028 0008                  		move.w	8(a0),d0
00009796 0240 FF80                  		andi.w	#$FF80,d0
0000979A 3238 F700                  		move.w	($FFFFF700).w,d1
0000979E 0441 0080                  		subi.w	#$80,d1
000097A2 0241 FF80                  		andi.w	#$FF80,d1
000097A6 9041                       		sub.w	d1,d0
000097A8 0C40 0280                  		cmpi.w	#$280,d0
000097AC 6200 0000                  		bhi.w	DeleteObject
000097B0 6000 0000                  		bra.w	DisplaySprite
000097B4                            ; ===========================================================================
000097B4                            ; ---------------------------------------------------------------------------
000097B4                            ; Variables for	object $1C are stored in an array
000097B4                            ; ---------------------------------------------------------------------------
000097B4 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
000097B8 44D8                       		dc.w $44D8		; VRAM setting
000097BA 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
000097BE 0000 0000                  		dc.l Map_obj1C
000097C2 44D8                       		dc.w $44D8
000097C4 0008 0200                  		dc.b 0,	8, 2, 0
000097C8 0000 0000                  		dc.l Map_obj1C
000097CC 44D8                       		dc.w $44D8
000097CE 0008 0200                  		dc.b 0,	8, 2, 0
000097D2 0000 8834                  		dc.l Map_obj11
000097D6 438E                       		dc.w $438E
000097D8 0110 0100                  		dc.b 1,	$10, 1,	0
000097DC                            ; ---------------------------------------------------------------------------
000097DC                            ; Sprite mappings - SLZ	lava thrower
000097DC                            ; ---------------------------------------------------------------------------
000097DC                            Map_obj1C:
000097DC                            	include "_maps\obj1C.asm"
000097DC                            ; ---------------------------------------------------------------------------
000097DC                            ; Sprite mappings - SLZ	lava thrower
000097DC                            ; ---------------------------------------------------------------------------
000097DC 0000                       		dc.w byte_8858-Map_obj1C
000097DE 01                         byte_8858:	dc.b 1
000097DF F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
000097E4                            		even
000097E4                            		even
000097E4                            
000097E4                            ; ===========================================================================
000097E4                            ; ---------------------------------------------------------------------------
000097E4                            ; Object 1D - switch that activates when Sonic touches it
000097E4                            ; (this	is not used anywhere in	the game)
000097E4                            ; ---------------------------------------------------------------------------
000097E4                            
000097E4                            Obj1D:					; XREF: Obj_Index
000097E4 7000                       		moveq	#0,d0
000097E6 1028 0024                  		move.b	$24(a0),d0
000097EA 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
000097EE 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
000097F2                            ; ===========================================================================
000097F2 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
000097F4 0000                       		dc.w Obj1D_Action-Obj1D_Index
000097F6 0000                       		dc.w Obj1D_Delete-Obj1D_Index
000097F8                            ; ===========================================================================
000097F8                            
000097F8                            Obj1D_Main:				; XREF: Obj1D_Index
000097F8 5428 0024                  		addq.b	#2,$24(a0)
000097FC 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
00009804 317C 4000 0002             		move.w	#$4000,2(a0)
0000980A 117C 0004 0001             		move.b	#4,1(a0)
00009810 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
00009816 117C 0010 0019             		move.b	#$10,$19(a0)
0000981C 117C 0005 0018             		move.b	#5,$18(a0)
00009822                            
00009822                            Obj1D_Action:				; XREF: Obj1D_Index
00009822 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00009828 323C 0010                  		move.w	#$10,d1
0000982C 6100 0000                  		bsr.w	Obj1D_ChkTouch
00009830 6700                       		beq.s	Obj1D_ChkDel
00009832 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
00009836 7001                       		moveq	#1,d0
00009838 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
0000983C                            
0000983C                            Obj1D_ChkDel:
0000983C 6100 0000                  		bsr.w	DisplaySprite
00009840 3028 0008                  		move.w	8(a0),d0
00009844 0240 FF80                  		andi.w	#$FF80,d0
00009848 3238 F700                  		move.w	($FFFFF700).w,d1
0000984C 0441 0080                  		subi.w	#$80,d1
00009850 0241 FF80                  		andi.w	#$FF80,d1
00009854 9041                       		sub.w	d1,d0
00009856 0C40 0280                  		cmpi.w	#$280,d0
0000985A 6200 0000                  		bhi.w	Obj1D_Delete
0000985E 4E75                       		rts	
00009860                            ; ===========================================================================
00009860                            
00009860                            Obj1D_Delete:				; XREF: Obj1D_Index
00009860 6100 0000                  		bsr.w	DeleteObject
00009864 4E75                       		rts	
00009866                            ; ---------------------------------------------------------------------------
00009866                            ; Subroutine to	check if Sonic touches the object
00009866                            ; ---------------------------------------------------------------------------
00009866                            
00009866                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009866                            
00009866                            
00009866                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
00009866 43F8 D000                  		lea	($FFFFD000).w,a1
0000986A 3029 0008                  		move.w	8(a1),d0
0000986E 9068 0008                  		sub.w	8(a0),d0
00009872 D041                       		add.w	d1,d0
00009874 6B00                       		bmi.s	loc_8918
00009876 D241                       		add.w	d1,d1
00009878 B041                       		cmp.w	d1,d0
0000987A 6400                       		bcc.s	loc_8918
0000987C 3429 000C                  		move.w	$C(a1),d2
00009880 1229 0016                  		move.b	$16(a1),d1
00009884 4881                       		ext.w	d1
00009886 D242                       		add.w	d2,d1
00009888 3028 000C                  		move.w	$C(a0),d0
0000988C 0440 0010                  		subi.w	#$10,d0
00009890 9041                       		sub.w	d1,d0
00009892 6200                       		bhi.s	loc_8918
00009894 0C40 FFF0                  		cmpi.w	#-$10,d0
00009898 6500                       		bcs.s	loc_8918
0000989A 70FF                       		moveq	#-1,d0
0000989C 4E75                       		rts	
0000989E                            ; ===========================================================================
0000989E                            
0000989E                            loc_8918:
0000989E 7000                       		moveq	#0,d0
000098A0 4E75                       		rts	
000098A2                            ; End of function Obj1D_ChkTouch
000098A2                            
000098A2                            ; ===========================================================================
000098A2                            ; ---------------------------------------------------------------------------
000098A2                            ; Sprite mappings - object 1D
000098A2                            ; ---------------------------------------------------------------------------
000098A2                            Map_obj1D:
000098A2                            	include "_maps\obj1D.asm"
000098A2                            ; ---------------------------------------------------------------------------
000098A2                            ; Sprite mappings - object 1D
000098A2                            ; ---------------------------------------------------------------------------
000098A2 0000                       		dc.w byte_891E-Map_obj1D
000098A4 04                         byte_891E:	dc.b 4
000098A5 E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
000098AA 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
000098AF E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
000098B4 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
000098BA 00                         		even
000098BA 00                         		even
000098BA                            
000098BA                            ; ===========================================================================
000098BA                            ; ---------------------------------------------------------------------------
000098BA                            ; Object 2A - doors (SBZ)
000098BA                            ; ---------------------------------------------------------------------------
000098BA                            
000098BA                            Obj2A:					; XREF: Obj_Index
000098BA 7000                       		moveq	#0,d0
000098BC 1028 0024                  		move.b	$24(a0),d0
000098C0 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
000098C4 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
000098C8                            ; ===========================================================================
000098C8 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
000098CA 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
000098CC                            ; ===========================================================================
000098CC                            
000098CC                            Obj2A_Main:				; XREF: Obj2A_Index
000098CC 5428 0024                  		addq.b	#2,$24(a0)
000098D0 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
000098D8 317C 42E8 0002             		move.w	#$42E8,2(a0)
000098DE 0028 0004 0001             		ori.b	#4,1(a0)
000098E4 117C 0008 0019             		move.b	#8,$19(a0)
000098EA 117C 0004 0018             		move.b	#4,$18(a0)
000098F0                            
000098F0                            Obj2A_OpenShut:				; XREF: Obj2A_Index
000098F0 323C 0040                  		move.w	#$40,d1
000098F4 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
000098F8 3038 D008                  		move.w	($FFFFD008).w,d0
000098FC D041                       		add.w	d1,d0
000098FE B068 0008                  		cmp.w	8(a0),d0
00009902 6500                       		bcs.s	Obj2A_Animate
00009904 9041                       		sub.w	d1,d0
00009906 9041                       		sub.w	d1,d0
00009908 B068 0008                  		cmp.w	8(a0),d0
0000990C 6400                       		bcc.s	Obj2A_Animate
0000990E D041                       		add.w	d1,d0
00009910 B068 0008                  		cmp.w	8(a0),d0
00009914 6400                       		bcc.s	loc_899A
00009916 0828 0000 0022             		btst	#0,$22(a0)
0000991C 6600                       		bne.s	Obj2A_Animate
0000991E 6000                       		bra.s	Obj2A_Open
00009920                            ; ===========================================================================
00009920                            
00009920                            loc_899A:				; XREF: Obj2A_OpenShut
00009920 0828 0000 0022             		btst	#0,$22(a0)
00009926 6700                       		beq.s	Obj2A_Animate
00009928                            
00009928                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00009928 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
0000992E                            
0000992E                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
0000992E 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
00009934 6100 0000                  		bsr.w	AnimateSprite
00009938 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
0000993C 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
0000993E 323C 0011                  		move.w	#$11,d1
00009942 343C 0020                  		move.w	#$20,d2
00009946 3602                       		move.w	d2,d3
00009948 5243                       		addq.w	#1,d3
0000994A 3828 0008                  		move.w	8(a0),d4
0000994E 6100 0000                  		bsr.w	SolidObject
00009952                            
00009952                            Obj2A_MarkAsUsed:
00009952 6000 0000                  		bra.w	MarkObjGone
00009956                            ; ===========================================================================
00009956                            Ani_obj2A:
00009956                            	include "_anim\obj2A.asm"
00009956                            ; ---------------------------------------------------------------------------
00009956                            ; Animation script - doors (SBZ)
00009956                            ; ---------------------------------------------------------------------------
00009956 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
00009958 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
0000995A 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
00009966 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
00009972                            		even
00009972                            		even
00009972                            
00009972                            ; ---------------------------------------------------------------------------
00009972                            ; Sprite mappings - doors (SBZ)
00009972                            ; ---------------------------------------------------------------------------
00009972                            Map_obj2A:
00009972                            	include "_maps\obj2A.asm"
00009972                            ; ---------------------------------------------------------------------------
00009972                            ; Sprite mappings - doors (SBZ)
00009972                            ; ---------------------------------------------------------------------------
00009972 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
00009976 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
0000997A 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
0000997E 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
00009982 0000                       		dc.w byte_8A56-Map_obj2A
00009984 02                         byte_89FE:	dc.b 2
00009985 E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
0000998A 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
0000998F 02                         byte_8A09:	dc.b 2
00009990 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
00009995 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
0000999A 02                         byte_8A14:	dc.b 2
0000999B D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000099A0 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000099A5 02                         byte_8A1F:	dc.b 2
000099A6 D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
000099AB 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
000099B0 02                         byte_8A2A:	dc.b 2
000099B1 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
000099B6 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
000099BB 02                         byte_8A35:	dc.b 2
000099BC CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
000099C1 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
000099C6 02                         byte_8A40:	dc.b 2
000099C7 C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
000099CC 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
000099D1 02                         byte_8A4B:	dc.b 2
000099D2 C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
000099D7 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
000099DC 02                         byte_8A56:	dc.b 2
000099DD C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
000099E2 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
000099E8 00                         		even
000099E8 00                         		even
000099E8                            
000099E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000099E8                            
000099E8                            
000099E8                            Obj44_SolidWall:			; XREF: Obj44_Solid
000099E8 6100 0000                  		bsr.w	Obj44_SolidWall2
000099EC 6700                       		beq.s	loc_8AA8
000099EE 6B00 0000                  		bmi.w	loc_8AC4
000099F2 4A40                       		tst.w	d0
000099F4 6700 0000                  		beq.w	loc_8A92
000099F8 6B00                       		bmi.s	loc_8A7C
000099FA 4A69 0010                  		tst.w	$10(a1)
000099FE 6B00                       		bmi.s	loc_8A92
00009A00 6000                       		bra.s	loc_8A82
00009A02                            ; ===========================================================================
00009A02                            
00009A02                            loc_8A7C:
00009A02 4A69 0010                  		tst.w	$10(a1)
00009A06 6A00                       		bpl.s	loc_8A92
00009A08                            
00009A08                            loc_8A82:
00009A08 9169 0008                  		sub.w	d0,8(a1)
00009A0C 337C 0000 0014             		move.w	#0,$14(a1)
00009A12 337C 0000 0010             		move.w	#0,$10(a1)
00009A18                            
00009A18                            loc_8A92:
00009A18 0829 0001 0022             		btst	#1,$22(a1)
00009A1E 6600                       		bne.s	loc_8AB6
00009A20 08E9 0005 0022             		bset	#5,$22(a1)
00009A26 08E8 0005 0022             		bset	#5,$22(a0)
00009A2C 4E75                       		rts	
00009A2E                            ; ===========================================================================
00009A2E                            
00009A2E                            loc_8AA8:
00009A2E 0828 0005 0022             		btst	#5,$22(a0)
00009A34 6700                       		beq.s	locret_8AC2
00009A36 337C 0001 001C             		move.w	#1,$1C(a1)
00009A3C                            
00009A3C                            loc_8AB6:
00009A3C 08A8 0005 0022             		bclr	#5,$22(a0)
00009A42 08A9 0005 0022             		bclr	#5,$22(a1)
00009A48                            
00009A48                            locret_8AC2:
00009A48 4E75                       		rts	
00009A4A                            ; ===========================================================================
00009A4A                            
00009A4A                            loc_8AC4:
00009A4A 4A69 0012                  		tst.w	$12(a1)
00009A4E 6A00                       		bpl.s	locret_8AD8
00009A50 4A43                       		tst.w	d3
00009A52 6A00                       		bpl.s	locret_8AD8
00009A54 9769 000C                  		sub.w	d3,$C(a1)
00009A58 337C 0000 0012             		move.w	#0,$12(a1)
00009A5E                            
00009A5E                            locret_8AD8:
00009A5E 4E75                       		rts	
00009A60                            ; End of function Obj44_SolidWall
00009A60                            
00009A60                            
00009A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009A60                            
00009A60                            
00009A60                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00009A60 43F8 D000                  		lea	($FFFFD000).w,a1
00009A64 3029 0008                  		move.w	8(a1),d0
00009A68 9068 0008                  		sub.w	8(a0),d0
00009A6C D041                       		add.w	d1,d0
00009A6E 6B00                       		bmi.s	loc_8B48
00009A70 3601                       		move.w	d1,d3
00009A72 D643                       		add.w	d3,d3
00009A74 B043                       		cmp.w	d3,d0
00009A76 6200                       		bhi.s	loc_8B48
00009A78 1629 0016                  		move.b	$16(a1),d3
00009A7C 4883                       		ext.w	d3
00009A7E D443                       		add.w	d3,d2
00009A80 3629 000C                  		move.w	$C(a1),d3
00009A84 9668 000C                  		sub.w	$C(a0),d3
00009A88 D642                       		add.w	d2,d3
00009A8A 6B00                       		bmi.s	loc_8B48
00009A8C 3802                       		move.w	d2,d4
00009A8E D844                       		add.w	d4,d4
00009A90 B644                       		cmp.w	d4,d3
00009A92 6400                       		bcc.s	loc_8B48
00009A94 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00009A98 6B00                       		bmi.s	loc_8B48
00009A9A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00009AA0 6400                       		bcc.s	loc_8B48
00009AA2 4A78 FE08                  		tst.w	($FFFFFE08).w
00009AA6 6600                       		bne.s	loc_8B48
00009AA8 3A00                       		move.w	d0,d5
00009AAA B240                       		cmp.w	d0,d1
00009AAC 6400                       		bcc.s	loc_8B30
00009AAE D241                       		add.w	d1,d1
00009AB0 9041                       		sub.w	d1,d0
00009AB2 3A00                       		move.w	d0,d5
00009AB4 4445                       		neg.w	d5
00009AB6                            
00009AB6                            loc_8B30:
00009AB6 3203                       		move.w	d3,d1
00009AB8 B443                       		cmp.w	d3,d2
00009ABA 6400                       		bcc.s	loc_8B3C
00009ABC 9644                       		sub.w	d4,d3
00009ABE 3203                       		move.w	d3,d1
00009AC0 4441                       		neg.w	d1
00009AC2                            
00009AC2                            loc_8B3C:
00009AC2 BA41                       		cmp.w	d1,d5
00009AC4 6200                       		bhi.s	loc_8B44
00009AC6 7801                       		moveq	#1,d4
00009AC8 4E75                       		rts	
00009ACA                            ; ===========================================================================
00009ACA                            
00009ACA                            loc_8B44:
00009ACA 78FF                       		moveq	#-1,d4
00009ACC 4E75                       		rts	
00009ACE                            ; ===========================================================================
00009ACE                            
00009ACE                            loc_8B48:
00009ACE 7800                       		moveq	#0,d4
00009AD0 4E75                       		rts	
00009AD2                            ; End of function Obj44_SolidWall2
00009AD2                            
00009AD2                            ; ===========================================================================
00009AD2                            ; ---------------------------------------------------------------------------
00009AD2                            ; Object 1E - Ball Hog enemy (SBZ)
00009AD2                            ; ---------------------------------------------------------------------------
00009AD2                            
00009AD2                            Obj1E:					; XREF: Obj_Index
00009AD2 7000                       		moveq	#0,d0
00009AD4 1028 0024                  		move.b	$24(a0),d0
00009AD8 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00009ADC 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00009AE0                            ; ===========================================================================
00009AE0 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00009AE2 0000                       		dc.w Obj1E_Action-Obj1E_Index
00009AE4                            ; ===========================================================================
00009AE4                            
00009AE4                            Obj1E_Main:				; XREF: Obj1E_Index
00009AE4 117C 0013 0016             		move.b	#$13,$16(a0)
00009AEA 117C 0008 0017             		move.b	#8,$17(a0)
00009AF0 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009AF8 317C 2302 0002             		move.w	#$2302,2(a0)
00009AFE 117C 0004 0001             		move.b	#4,1(a0)
00009B04 117C 0004 0018             		move.b	#4,$18(a0)
00009B0A 117C 0005 0020             		move.b	#5,$20(a0)
00009B10 117C 000C 0019             		move.b	#$C,$19(a0)
00009B16 6100 0000                  		bsr.w	ObjectFall
00009B1A 4EB9 0000 0000             		jsr	ObjHitFloor
00009B20 4A41                       		tst.w	d1
00009B22 6A00                       		bpl.s	locret_8BAC
00009B24 D368 000C                  		add.w	d1,$C(a0)
00009B28 317C 0000 0012             		move.w	#0,$12(a0)
00009B2E 5428 0024                  		addq.b	#2,$24(a0)
00009B32                            
00009B32                            locret_8BAC:
00009B32 4E75                       		rts	
00009B34                            ; ===========================================================================
00009B34                            
00009B34                            Obj1E_Action:				; XREF: Obj1E_Index
00009B34 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00009B3A 6100 0000                  		bsr.w	AnimateSprite
00009B3E 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00009B44 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00009B46 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00009B4A 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00009B4C 6000                       		bra.s	Obj1E_MarkAsGone
00009B4E                            ; ===========================================================================
00009B4E                            
00009B4E                            Obj1E_SetBall:				; XREF: Obj1E_Action
00009B4E 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00009B52                            
00009B52                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00009B52 6000 0000                  		bra.w	MarkObjGone
00009B56                            ; ===========================================================================
00009B56                            
00009B56                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00009B56 117C 0001 0032             		move.b	#1,$32(a0)
00009B5C 6100 0000                  		bsr.w	SingleObjLoad
00009B60 6600                       		bne.s	loc_8C1A
00009B62 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00009B66 3368 0008 0008             		move.w	8(a0),8(a1)
00009B6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009B72 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00009B78 337C 0000 0012             		move.w	#0,$12(a1)
00009B7E 70FC                       		moveq	#-4,d0
00009B80 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00009B86 6700                       		beq.s	loc_8C0A	; if not, branch
00009B88 4440                       		neg.w	d0
00009B8A 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00009B8E                            
00009B8E                            loc_8C0A:
00009B8E D169 0008                  		add.w	d0,8(a1)
00009B92 0669 000C 000C             		addi.w	#$C,$C(a1)
00009B98 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00009B9E                            
00009B9E                            loc_8C1A:
00009B9E 60B2                       		bra.s	Obj1E_MarkAsGone
00009BA0                            ; ===========================================================================
00009BA0                            ; ---------------------------------------------------------------------------
00009BA0                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00009BA0                            ; ---------------------------------------------------------------------------
00009BA0                            
00009BA0                            Obj20:					; XREF: Obj_Index
00009BA0 7000                       		moveq	#0,d0
00009BA2 1028 0024                  		move.b	$24(a0),d0
00009BA6 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00009BAA 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00009BAE                            ; ===========================================================================
00009BAE 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00009BB0 0000                       		dc.w Obj20_Bounce-Obj20_Index
00009BB2                            ; ===========================================================================
00009BB2                            
00009BB2                            Obj20_Main:				; XREF: Obj20_Index
00009BB2 5428 0024                  		addq.b	#2,$24(a0)
00009BB6 117C 0007 0016             		move.b	#7,$16(a0)
00009BBC 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00009BC4 317C 2302 0002             		move.w	#$2302,2(a0)
00009BCA 117C 0004 0001             		move.b	#4,1(a0)
00009BD0 117C 0003 0018             		move.b	#3,$18(a0)
00009BD6 117C 0087 0020             		move.b	#$87,$20(a0)
00009BDC 117C 0008 0019             		move.b	#8,$19(a0)
00009BE2 7000                       		moveq	#0,d0
00009BE4 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009BE8 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00009BEC 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00009BF0 117C 0004 001A             		move.b	#4,$1A(a0)
00009BF6                            
00009BF6                            Obj20_Bounce:				; XREF: Obj20_Index
00009BF6 4EB9 0000 0000             		jsr	ObjectFall
00009BFC 4A68 0012                  		tst.w	$12(a0)
00009C00 6B00                       		bmi.s	Obj20_ChkExplode
00009C02 4EB9 0000 0000             		jsr	ObjHitFloor
00009C08 4A41                       		tst.w	d1
00009C0A 6A00                       		bpl.s	Obj20_ChkExplode
00009C0C D368 000C                  		add.w	d1,$C(a0)
00009C10 317C FD00 0012             		move.w	#-$300,$12(a0)
00009C16 4A03                       		tst.b	d3
00009C18 6700                       		beq.s	Obj20_ChkExplode
00009C1A 6B00                       		bmi.s	loc_8CA4
00009C1C 4A68 0010                  		tst.w	$10(a0)
00009C20 6A00                       		bpl.s	Obj20_ChkExplode
00009C22 4468 0010                  		neg.w	$10(a0)
00009C26 6000                       		bra.s	Obj20_ChkExplode
00009C28                            ; ===========================================================================
00009C28                            
00009C28                            loc_8CA4:				; XREF: Obj20_Bounce
00009C28 4A68 0010                  		tst.w	$10(a0)
00009C2C 6B00                       		bmi.s	Obj20_ChkExplode
00009C2E 4468 0010                  		neg.w	$10(a0)
00009C32                            
00009C32                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00009C32 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00009C36 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00009C38 10BC 0024                  		move.b	#$24,0(a0)
00009C3C 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00009C40 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00009C46 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00009C4A                            ; ===========================================================================
00009C4A                            
00009C4A                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00009C4A 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009C4E 6A00                       		bpl.s	Obj20_Display
00009C50 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00009C56 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00009C5C                            
00009C5C                            Obj20_Display:
00009C5C 6100 0000                  		bsr.w	DisplaySprite
00009C60 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009C64 0640 00E0                  		addi.w	#$E0,d0
00009C68 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00009C6C 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00009C70 4E75                       		rts	
00009C72                            ; ===========================================================================
00009C72                            ; ---------------------------------------------------------------------------
00009C72                            ; Object 24 - explosion	from a destroyed monitor
00009C72                            ; ---------------------------------------------------------------------------
00009C72                            
00009C72                            Obj24:					; XREF: Obj_Index
00009C72 7000                       		moveq	#0,d0
00009C74 1028 0024                  		move.b	$24(a0),d0
00009C78 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00009C7C 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00009C80                            ; ===========================================================================
00009C80 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00009C82 0000                       		dc.w Obj24_Animate-Obj24_Index
00009C84                            ; ===========================================================================
00009C84                            
00009C84                            Obj24_Main:				; XREF: Obj24_Index
00009C84 5428 0024                  		addq.b	#2,$24(a0)
00009C88 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00009C90 317C 041C 0002             		move.w	#$41C,2(a0)
00009C96 117C 0004 0001             		move.b	#4,1(a0)
00009C9C 117C 0001 0018             		move.b	#1,$18(a0)
00009CA2 117C 0000 0020             		move.b	#0,$20(a0)
00009CA8 117C 000C 0019             		move.b	#$C,$19(a0)
00009CAE 117C 0009 001E             		move.b	#9,$1E(a0)
00009CB4 117C 0000 001A             		move.b	#0,$1A(a0)
00009CBA 303C 00A5                  		move.w	#$A5,d0
00009CBE 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play explosion sound
00009CC4                            
00009CC4                            Obj24_Animate:				; XREF: Obj24_Index
00009CC4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009CC8 6A00                       		bpl.s	Obj24_Display
00009CCA 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00009CD0 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009CD4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00009CDA 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009CDE                            
00009CDE                            Obj24_Display:
00009CDE 6000 0000                  		bra.w	DisplaySprite
00009CE2                            ; ===========================================================================
00009CE2                            ; ---------------------------------------------------------------------------
00009CE2                            ; Object 27 - explosion	from a destroyed enemy
00009CE2                            ; ---------------------------------------------------------------------------
00009CE2                            
00009CE2                            Obj27:					; XREF: Obj_Index
00009CE2 7000                       		moveq	#0,d0
00009CE4 1028 0024                  		move.b	$24(a0),d0
00009CE8 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00009CEC 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00009CF0                            ; ===========================================================================
00009CF0 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00009CF2 0000                       		dc.w Obj27_Main-Obj27_Index
00009CF4 0000                       		dc.w Obj27_Animate-Obj27_Index
00009CF6                            ; ===========================================================================
00009CF6                            
00009CF6                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00009CF6 5428 0024                  		addq.b	#2,$24(a0)
00009CFA 6100 0000                  		bsr.w	SingleObjLoad
00009CFE 6600                       		bne.s	Obj27_Main
00009D00 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00009D04 3368 0008 0008             		move.w	8(a0),8(a1)
00009D0A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009D10 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00009D16                            
00009D16                            Obj27_Main:				; XREF: Obj27_Index
00009D16 5428 0024                  		addq.b	#2,$24(a0)
00009D1A 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00009D22 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009D28 117C 0004 0001             		move.b	#4,1(a0)
00009D2E 117C 0001 0018             		move.b	#1,$18(a0)
00009D34 117C 0000 0020             		move.b	#0,$20(a0)
00009D3A 117C 000C 0019             		move.b	#$C,$19(a0)
00009D40                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009D40 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009D46 117C 0000 001A             		move.b	#0,$1A(a0)
00009D4C 303C 00C1                  		move.w	#$C1,d0
00009D50 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00009D56                            
00009D56 45F9 0000 0000             		lea	(Obj27_ExplosionXYSpd).l,a2	; GMZ: Get Explosion X/Y Speeds according to subtype
00009D5C 1028 0028                  		move.b	$28(a0),d0
00009D60 3172 0000 0010             		move.w	(a2,d0.w),$10(a0)
00009D66 3172 0002 0012             		move.w	2(a2,d0.w),$12(a0)
00009D6C                            
00009D6C                            Obj27_Animate:				; XREF: Obj27_Index
00009D6C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00009D70 6A00                       		bpl.s	Obj27_Display
00009D72                            		; move.b	#7,$1E(a0)	; set frame duration to	7 frames
00009D72 117C 000E 001E             		move.b	#$E,$1E(a0)	; GMZ
00009D78 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00009D7C 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00009D82 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00009D86                            
00009D86                            Obj27_Display:
00009D86 4EB9 0000 0000             		jsr	SpeedToPos	; GMZ
00009D8C 0668 0038 0012             		addi.w	#$38,$12(a0)	; GMZ: Explosion Gravity
00009D92 6000 0000                  		bra.w	DisplaySprite
00009D96                            ; ===========================================================================
00009D96                            ; ---------------------------------------------------------------------------
00009D96                            Obj27_ExplosionXYSpd:
00009D96                            		; dc.w	-$350, -$300	; Left
00009D96                            		; dc.w	-$200, -$450	; Near middle (left)
00009D96                            		; dc.w	0, -$500	; Middle
00009D96                            		; dc.w	$200, -$450	; Near middle (right)
00009D96                            		; dc.w	$350, -$300	; Right
00009D96                            
00009D96 FEB0 FC00                  		dc.w	-$150, -$400	; Left
00009D9A FF00 FAB0                  		dc.w	-$100, -$550	; Near middle (left)
00009D9E 0000 FA00                  		dc.w	0, -$600	; Middle
00009DA2 0100 FAB0                  		dc.w	$100, -$550	; Near middle (right)
00009DA6 0150 FC00                  		dc.w	$150, -$400	; Right
00009DAA                            
00009DAA 6869 2068 656C 6C6F 2068+  		dc.b	"hi hello hru -garblemarden"
00009DC4                            ; ---------------------------------------------------------------------------
00009DC4                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00009DC4                            ; ---------------------------------------------------------------------------
00009DC4                            
00009DC4                            Obj3F:					; XREF: Obj_Index
00009DC4 7000                       		moveq	#0,d0
00009DC6 1028 0024                  		move.b	$24(a0),d0
00009DCA 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00009DCE 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00009DD2                            ; ===========================================================================
00009DD2 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00009DD4 FF9A                       		dc.w Obj27_Animate-Obj3F_Index
00009DD6                            ; ===========================================================================
00009DD6                            
00009DD6                            Obj3F_Main:				; XREF: Obj3F_Index
00009DD6 5428 0024                  		addq.b	#2,$24(a0)
00009DDA 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00009DE2 317C 05A0 0002             		move.w	#$5A0,2(a0)
00009DE8 117C 0004 0001             		move.b	#4,1(a0)
00009DEE 117C 0001 0018             		move.b	#1,$18(a0)
00009DF4 117C 0000 0020             		move.b	#0,$20(a0)
00009DFA 117C 000C 0019             		move.b	#$C,$19(a0)
00009E00 117C 0007 001E             		move.b	#7,$1E(a0)
00009E06 117C 0000 001A             		move.b	#0,$1A(a0)
00009E0C 303C 00C4                  		move.w	#$C4,d0
00009E10 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00009E16                            ; ===========================================================================
00009E16                            Ani_obj1E:
00009E16                            	include "_anim\obj1E.asm"
00009E16                            ; ---------------------------------------------------------------------------
00009E16                            ; Animation script - doors (SBZ)
00009E16                            ; ---------------------------------------------------------------------------
00009E16 0000                       		dc.w byte_8E4A-Ani_obj1E
00009E18 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00009E30 00                         		even
00009E30 00                         		even
00009E30                            
00009E30                            ; ---------------------------------------------------------------------------
00009E30                            ; Sprite mappings - Ball Hog enemy (SBZ)
00009E30                            ; ---------------------------------------------------------------------------
00009E30                            Map_obj1E:
00009E30                            	include "_maps\obj1E.asm"
00009E30                            Map_a7ad:
00009E30 0000                       Map_a7ad_0: 	dc.w Map_a7ad_C-Map_a7ad
00009E32 0000                       Map_a7ad_2: 	dc.w Map_a7ad_17-Map_a7ad
00009E34 0000                       Map_a7ad_4: 	dc.w Map_a7ad_22-Map_a7ad
00009E36 0000                       Map_a7ad_6: 	dc.w Map_a7ad_2D-Map_a7ad
00009E38 0000                       Map_a7ad_8: 	dc.w Map_a7ad_38-Map_a7ad
00009E3A 0000                       Map_a7ad_A: 	dc.w Map_a7ad_43-Map_a7ad
00009E3C 02                         Map_a7ad_C: 	dc.b $2
00009E3D EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009E42 FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009E47 02                         Map_a7ad_17: 	dc.b $2
00009E48 EF09 0000 F4               	dc.b $EF, $9, $0, $0, $F4
00009E4D FF0A 0006 F4               	dc.b $FF, $A, $0, $6, $F4
00009E52 02                         Map_a7ad_22: 	dc.b $2
00009E53 F409 0000 F4               	dc.b $F4, $9, $0, $0, $F4
00009E58 0409 0018 F4               	dc.b $4, $9, $0, $18, $F4
00009E5D 02                         Map_a7ad_2D: 	dc.b $2
00009E5E E409 0000 F4               	dc.b $E4, $9, $0, $0, $F4
00009E63 F40A 001E F4               	dc.b $F4, $A, $0, $1E, $F4
00009E68 02                         Map_a7ad_38: 	dc.b $2
00009E69 F805 0027 F8               	dc.b $F8, $5, $0, $27, $F8
00009E6E E805 000F F8               	dc.b $E8, $5, $0, $F, $F8
00009E73 02                         Map_a7ad_43: 	dc.b $2
00009E74 F805 002B F8               	dc.b $F8, $5, $0, $2B, $F8
00009E79 E805 0013 F8               	dc.b $E8, $5, $0, $13, $F8
00009E7E                            	even
00009E7E                            	even
00009E7E                            
00009E7E                            ; ---------------------------------------------------------------------------
00009E7E                            ; Sprite mappings - explosion
00009E7E                            ; ---------------------------------------------------------------------------
00009E7E                            Map_obj24:
00009E7E                            	include "_maps\obj24.asm"
00009E7E                            ; ---------------------------------------------------------------------------
00009E7E                            ; Sprite mappings - explosion
00009E7E                            ; ---------------------------------------------------------------------------
00009E7E 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00009E82 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00009E86 01                         byte_8EAE:	dc.b 1
00009E87 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00009E8C 01                         byte_8EB4:	dc.b 1
00009E8D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00009E92 01                         byte_8EBA:	dc.b 1
00009E93 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00009E98 01                         byte_8EC0:	dc.b 1
00009E99 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00009E9E                            		even
00009E9E                            		even
00009E9E                            
00009E9E                            ; ---------------------------------------------------------------------------
00009E9E                            ; Sprite mappings - explosion
00009E9E                            ; ---------------------------------------------------------------------------
00009E9E 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00009EA2 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00009EA6 0000                       		dc.w byte_8EF7-Map_obj27
00009EA8 01                         byte_8ED0:	dc.b 1
00009EA9 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00009EAE 01                         byte_8ED6:	dc.b 1
00009EAF F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00009EB4 01                         byte_8EDC:	dc.b 1
00009EB5 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00009EBA 04                         byte_8EE2:	dc.b 4
00009EBB EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00009EC0 EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00009EC5 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00009ECA FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00009ECF 04                         byte_8EF7:	dc.b 4
00009ED0 EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00009ED5 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00009EDA 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00009EDF FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00009EE4                            		even
00009EE4                            ; ---------------------------------------------------------------------------
00009EE4                            ; Sprite mappings - explosion from when	a boss is destroyed
00009EE4                            ; ---------------------------------------------------------------------------
00009EE4 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00009EE6 0000                       		dc.w byte_8F16-Map_obj3F
00009EE8 0000                       		dc.w byte_8F1C-Map_obj3F
00009EEA FFD6                       		dc.w byte_8EE2-Map_obj3F
00009EEC FFEB                       		dc.w byte_8EF7-Map_obj3F
00009EEE 01                         byte_8F16:	dc.b 1
00009EEF F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00009EF4 01                         byte_8F1C:	dc.b 1
00009EF5 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00009EFA                            		even
00009EFA                            ; ===========================================================================
00009EFA                            ; ---------------------------------------------------------------------------
00009EFA                            ; Object 28 - animals
00009EFA                            ; ---------------------------------------------------------------------------
00009EFA                            
00009EFA                            Obj28:					; XREF: Obj_Index
00009EFA 7000                       		moveq	#0,d0
00009EFC 1028 0024                  		move.b	$24(a0),d0
00009F00 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00009F04 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00009F08                            ; ===========================================================================
00009F08 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00009F0C 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009F10 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00009F14 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00009F18 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00009F1C 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00009F20 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00009F24 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009F28 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00009F2C 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00009F30 0000                       		dc.w loc_92D6-Obj28_Index
00009F32                            
00009F32 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1, 0,	5, 0,	5
00009F42                            
00009F42 FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00009F46 0000 0000                  		dc.l Map_obj28
00009F4A FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00009F4E 0000 0000                  		dc.l Map_obj28a		; mappings address
00009F52 FE80 FD00                  		dc.w $FE80, $FD00
00009F56 0000 0000                  		dc.l Map_obj28
00009F5A FEC0 FE80                  		dc.w $FEC0, $FE80
00009F5E 0000 0000                  		dc.l Map_obj28a
00009F62 FE40 FD00                  		dc.w $FE40, $FD00
00009F66 0000 0000                  		dc.l Map_obj28b
00009F6A FD00 FC00                  		dc.w $FD00, $FC00
00009F6E 0000 0000                  		dc.l Map_obj28a
00009F72 FD80 FC80                  		dc.w $FD80, $FC80
00009F76 0000 0000                  		dc.l Map_obj28b
00009F7A                            
00009F7A FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00009F8A FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00009F9A FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00009FA6                            
00009FA6 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00009FBA 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00009FCE 0000 0000                  		dc.l Map_obj28b
00009FD2                            
00009FD2 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00009FE4 0565 05B3                  		dc.w $565, $5B3
00009FE8                            ; ===========================================================================
00009FE8                            
00009FE8                            Obj28_Ending:				; XREF: Obj28_Index
00009FE8 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00009FEC 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00009FF0 7000                       		moveq	#0,d0
00009FF2 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00009FF6 D040                       		add.w	d0,d0		; multiply d0 by 2
00009FF8 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00009FFC 0440 0014                  		subi.w	#$14,d0
0000A000 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
0000A006 D040                       		add.w	d0,d0
0000A008 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
0000A00E 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000A012 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
0000A018 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
0000A01E 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000A024 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
0000A02A 117C 000C 0016             		move.b	#$C,$16(a0)
0000A030 117C 0004 0001             		move.b	#4,1(a0)
0000A036 08E8 0000 0001             		bset	#0,1(a0)
0000A03C 117C 0006 0018             		move.b	#6,$18(a0)
0000A042 117C 0008 0019             		move.b	#8,$19(a0)
0000A048 117C 0007 001E             		move.b	#7,$1E(a0)
0000A04E 6000 0000                  		bra.w	DisplaySprite
0000A052                            ; ===========================================================================
0000A052                            
0000A052                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000A052 5428 0024                  		addq.b	#2,$24(a0)
0000A056 6100 9398                  		bsr.w	RandomNumber
0000A05A 0240 0001                  		andi.w	#1,d0
0000A05E 7200                       		moveq	#0,d1
0000A060 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000A064 D241                       		add.w	d1,d1
0000A066 D240                       		add.w	d0,d1
0000A068 43FA FEC8                  		lea	Obj28_VarIndex(pc),a1
0000A06C 1031 1000                  		move.b	(a1,d1.w),d0
0000A070 1140 0030                  		move.b	d0,$30(a0)
0000A074 E748                       		lsl.w	#3,d0
0000A076 43FA FECA                  		lea	Obj28_Variables(pc),a1
0000A07A D2C0                       		adda.w	d0,a1
0000A07C 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000A080 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000A084 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
0000A088 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
0000A08E 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000A094 6700                       		beq.s	loc_90C0	; if yes, branch
0000A096 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
0000A09C                            
0000A09C                            loc_90C0:
0000A09C 117C 000C 0016             		move.b	#$C,$16(a0)
0000A0A2 117C 0004 0001             		move.b	#4,1(a0)
0000A0A8 08E8 0000 0001             		bset	#0,1(a0)
0000A0AE 117C 0006 0018             		move.b	#6,$18(a0)
0000A0B4 117C 0008 0019             		move.b	#8,$19(a0)
0000A0BA 117C 0007 001E             		move.b	#7,$1E(a0)
0000A0C0 117C 0002 001A             		move.b	#2,$1A(a0)
0000A0C6 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A0CC 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A0D0 6600                       		bne.s	loc_911C
0000A0D2 6100 0000                  		bsr.w	SingleObjLoad
0000A0D6 6600                       		bne.s	Obj28_Display
0000A0D8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000A0DC 3368 0008 0008             		move.w	8(a0),8(a1)
0000A0E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A0E8 3028 003E                  		move.w	$3E(a0),d0
0000A0EC E248                       		lsr.w	#1,d0
0000A0EE 1340 001A                  		move.b	d0,$1A(a1)
0000A0F2                            
0000A0F2                            Obj28_Display:
0000A0F2 6000 0000                  		bra.w	DisplaySprite
0000A0F6                            ; ===========================================================================
0000A0F6                            
0000A0F6                            loc_911C:
0000A0F6 117C 0012 0024             		move.b	#$12,$24(a0)
0000A0FC 4268 0010                  		clr.w	$10(a0)
0000A100 6000 0000                  		bra.w	DisplaySprite
0000A104                            ; ===========================================================================
0000A104                            
0000A104                            loc_912A:				; XREF: Obj28_Index
0000A104 4A28 0001                  		tst.b	1(a0)
0000A108 6A00 0000                  		bpl.w	DeleteObject
0000A10C 6100 0000                  		bsr.w	ObjectFall
0000A110 4A68 0012                  		tst.w	$12(a0)
0000A114 6B00                       		bmi.s	loc_9180
0000A116 4EB9 0000 0000             		jsr	ObjHitFloor
0000A11C 4A41                       		tst.w	d1
0000A11E 6A00                       		bpl.s	loc_9180
0000A120 D368 000C                  		add.w	d1,$C(a0)
0000A124 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A12A 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A130 117C 0001 001A             		move.b	#1,$1A(a0)
0000A136 1028 0030                  		move.b	$30(a0),d0
0000A13A D000                       		add.b	d0,d0
0000A13C 5800                       		addq.b	#4,d0
0000A13E 1140 0024                  		move.b	d0,$24(a0)
0000A142 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0000A146 6700                       		beq.s	loc_9180
0000A148 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
0000A14E 6700                       		beq.s	loc_9180
0000A150 4468 0010                  		neg.w	$10(a0)
0000A154 0868 0000 0001             		bchg	#0,1(a0)
0000A15A                            
0000A15A                            loc_9180:
0000A15A 6000 0000                  		bra.w	DisplaySprite
0000A15E                            ; ===========================================================================
0000A15E                            
0000A15E                            loc_9184:				; XREF: Obj28_Index
0000A15E 6100 0000                  		bsr.w	ObjectFall
0000A162 117C 0001 001A             		move.b	#1,$1A(a0)
0000A168 4A68 0012                  		tst.w	$12(a0)
0000A16C 6B00                       		bmi.s	loc_91AE
0000A16E 117C 0000 001A             		move.b	#0,$1A(a0)
0000A174 4EB9 0000 0000             		jsr	ObjHitFloor
0000A17A 4A41                       		tst.w	d1
0000A17C 6A00                       		bpl.s	loc_91AE
0000A17E D368 000C                  		add.w	d1,$C(a0)
0000A182 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A188                            
0000A188                            loc_91AE:
0000A188 4A28 0028                  		tst.b	$28(a0)
0000A18C 6600                       		bne.s	loc_9224
0000A18E 4A28 0001                  		tst.b	1(a0)
0000A192 6A00 0000                  		bpl.w	DeleteObject
0000A196 6000 0000                  		bra.w	DisplaySprite
0000A19A                            ; ===========================================================================
0000A19A                            
0000A19A                            loc_91C0:				; XREF: Obj28_Index
0000A19A 6100 0000                  		bsr.w	SpeedToPos
0000A19E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A1A4 4A68 0012                  		tst.w	$12(a0)
0000A1A8 6B00                       		bmi.s	loc_91FC
0000A1AA 4EB9 0000 0000             		jsr	ObjHitFloor
0000A1B0 4A41                       		tst.w	d1
0000A1B2 6A00                       		bpl.s	loc_91FC
0000A1B4 D368 000C                  		add.w	d1,$C(a0)
0000A1B8 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A1BE 4A28 0028                  		tst.b	$28(a0)
0000A1C2 6700                       		beq.s	loc_91FC
0000A1C4 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
0000A1CA 6700                       		beq.s	loc_91FC
0000A1CC 4468 0010                  		neg.w	$10(a0)
0000A1D0 0868 0000 0001             		bchg	#0,1(a0)
0000A1D6                            
0000A1D6                            loc_91FC:
0000A1D6 5328 001E                  		subq.b	#1,$1E(a0)
0000A1DA 6A00                       		bpl.s	loc_9212
0000A1DC 117C 0001 001E             		move.b	#1,$1E(a0)
0000A1E2 5228 001A                  		addq.b	#1,$1A(a0)
0000A1E6 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A1EC                            
0000A1EC                            loc_9212:
0000A1EC 4A28 0028                  		tst.b	$28(a0)
0000A1F0 6600                       		bne.s	loc_9224
0000A1F2 4A28 0001                  		tst.b	1(a0)
0000A1F6 6A00 0000                  		bpl.w	DeleteObject
0000A1FA 6000 0000                  		bra.w	DisplaySprite
0000A1FE                            ; ===========================================================================
0000A1FE                            
0000A1FE                            loc_9224:				; XREF: Obj28_Index
0000A1FE 3028 0008                  		move.w	8(a0),d0
0000A202 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A206 6500                       		bcs.s	loc_923C
0000A208 0440 0180                  		subi.w	#$180,d0
0000A20C 6A00                       		bpl.s	loc_923C
0000A20E 4A28 0001                  		tst.b	1(a0)
0000A212 6A00 0000                  		bpl.w	DeleteObject
0000A216                            
0000A216                            loc_923C:
0000A216 6000 0000                  		bra.w	DisplaySprite
0000A21A                            ; ===========================================================================
0000A21A                            
0000A21A                            loc_9240:				; XREF: Obj28_Index
0000A21A 4A28 0001                  		tst.b	1(a0)
0000A21E 6A00 0000                  		bpl.w	DeleteObject
0000A222 5368 0036                  		subq.w	#1,$36(a0)
0000A226 6600 0000                  		bne.w	loc_925C
0000A22A 117C 0002 0024             		move.b	#2,$24(a0)
0000A230 117C 0003 0018             		move.b	#3,$18(a0)
0000A236                            
0000A236                            loc_925C:
0000A236 6000 0000                  		bra.w	DisplaySprite
0000A23A                            ; ===========================================================================
0000A23A                            
0000A23A                            loc_9260:				; XREF: Obj28_Index
0000A23A 6100 0000                  		bsr.w	sub_9404
0000A23E 6400                       		bcc.s	loc_927C
0000A240 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A246 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A24C 117C 000E 0024             		move.b	#$E,$24(a0)
0000A252 6000 FF46                  		bra.w	loc_91C0
0000A256                            ; ===========================================================================
0000A256                            
0000A256                            loc_927C:
0000A256 6000 FFA6                  		bra.w	loc_9224
0000A25A                            ; ===========================================================================
0000A25A                            
0000A25A                            loc_9280:				; XREF: Obj28_Index
0000A25A 6100 0000                  		bsr.w	sub_9404
0000A25E 6A00                       		bpl.s	loc_92B6
0000A260 4268 0010                  		clr.w	$10(a0)
0000A264 4268 0032                  		clr.w	$32(a0)
0000A268 6100 0000                  		bsr.w	SpeedToPos
0000A26C 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A272 6100 0000                  		bsr.w	loc_93C4
0000A276 6100 0000                  		bsr.w	loc_93EC
0000A27A 5328 001E                  		subq.b	#1,$1E(a0)
0000A27E 6A00                       		bpl.s	loc_92B6
0000A280 117C 0001 001E             		move.b	#1,$1E(a0)
0000A286 5228 001A                  		addq.b	#1,$1A(a0)
0000A28A 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A290                            
0000A290                            loc_92B6:
0000A290 6000 FF6C                  		bra.w	loc_9224
0000A294                            ; ===========================================================================
0000A294                            
0000A294                            loc_92BA:				; XREF: Obj28_Index
0000A294 6100 0000                  		bsr.w	sub_9404
0000A298 6A00                       		bpl.s	loc_9310
0000A29A 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000A2A0 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A2A6 117C 0004 0024             		move.b	#4,$24(a0)
0000A2AC 6000 FEB0                  		bra.w	loc_9184
0000A2B0                            ; ===========================================================================
0000A2B0                            
0000A2B0                            loc_92D6:				; XREF: Obj28_Index
0000A2B0 6100 0000                  		bsr.w	ObjectFall
0000A2B4 117C 0001 001A             		move.b	#1,$1A(a0)
0000A2BA 4A68 0012                  		tst.w	$12(a0)
0000A2BE 6B00                       		bmi.s	loc_9310
0000A2C0 117C 0000 001A             		move.b	#0,$1A(a0)
0000A2C6 4EB9 0000 0000             		jsr	ObjHitFloor
0000A2CC 4A41                       		tst.w	d1
0000A2CE 6A00                       		bpl.s	loc_9310
0000A2D0 4628 0029                  		not.b	$29(a0)
0000A2D4 6600                       		bne.s	loc_9306
0000A2D6 4468 0010                  		neg.w	$10(a0)
0000A2DA 0868 0000 0001             		bchg	#0,1(a0)
0000A2E0                            
0000A2E0                            loc_9306:
0000A2E0 D368 000C                  		add.w	d1,$C(a0)
0000A2E4 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A2EA                            
0000A2EA                            loc_9310:
0000A2EA 6000 FF12                  		bra.w	loc_9224
0000A2EE                            ; ===========================================================================
0000A2EE                            
0000A2EE                            loc_9314:				; XREF: Obj28_Index
0000A2EE 6100 0000                  		bsr.w	sub_9404
0000A2F2 6A00                       		bpl.s	loc_932E
0000A2F4 4268 0010                  		clr.w	$10(a0)
0000A2F8 4268 0032                  		clr.w	$32(a0)
0000A2FC 6100 0000                  		bsr.w	ObjectFall
0000A300 6100 0000                  		bsr.w	loc_93C4
0000A304 6100 0000                  		bsr.w	loc_93EC
0000A308                            
0000A308                            loc_932E:
0000A308 6000 FEF4                  		bra.w	loc_9224
0000A30C                            ; ===========================================================================
0000A30C                            
0000A30C                            loc_9332:				; XREF: Obj28_Index
0000A30C 6100 0000                  		bsr.w	sub_9404
0000A310 6A00                       		bpl.s	loc_936C
0000A312 6100 0000                  		bsr.w	ObjectFall
0000A316 117C 0001 001A             		move.b	#1,$1A(a0)
0000A31C 4A68 0012                  		tst.w	$12(a0)
0000A320 6B00                       		bmi.s	loc_936C
0000A322 117C 0000 001A             		move.b	#0,$1A(a0)
0000A328 4EB9 0000 0000             		jsr	ObjHitFloor
0000A32E 4A41                       		tst.w	d1
0000A330 6A00                       		bpl.s	loc_936C
0000A332 4468 0010                  		neg.w	$10(a0)
0000A336 0868 0000 0001             		bchg	#0,1(a0)
0000A33C D368 000C                  		add.w	d1,$C(a0)
0000A340 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A346                            
0000A346                            loc_936C:
0000A346 6000 FEB6                  		bra.w	loc_9224
0000A34A                            ; ===========================================================================
0000A34A                            
0000A34A                            loc_9370:				; XREF: Obj28_Index
0000A34A 6100 0000                  		bsr.w	sub_9404
0000A34E 6A00                       		bpl.s	loc_93C0
0000A350 6100 0000                  		bsr.w	SpeedToPos
0000A354 0668 0018 0012             		addi.w	#$18,$12(a0)
0000A35A 4A68 0012                  		tst.w	$12(a0)
0000A35E 6B00                       		bmi.s	loc_93AA
0000A360 4EB9 0000 0000             		jsr	ObjHitFloor
0000A366 4A41                       		tst.w	d1
0000A368 6A00                       		bpl.s	loc_93AA
0000A36A 4628 0029                  		not.b	$29(a0)
0000A36E 6600                       		bne.s	loc_93A0
0000A370 4468 0010                  		neg.w	$10(a0)
0000A374 0868 0000 0001             		bchg	#0,1(a0)
0000A37A                            
0000A37A                            loc_93A0:
0000A37A D368 000C                  		add.w	d1,$C(a0)
0000A37E 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A384                            
0000A384                            loc_93AA:
0000A384 5328 001E                  		subq.b	#1,$1E(a0)
0000A388 6A00                       		bpl.s	loc_93C0
0000A38A 117C 0001 001E             		move.b	#1,$1E(a0)
0000A390 5228 001A                  		addq.b	#1,$1A(a0)
0000A394 0228 0001 001A             		andi.b	#1,$1A(a0)
0000A39A                            
0000A39A                            loc_93C0:
0000A39A 6000 FE62                  		bra.w	loc_9224
0000A39E                            ; ===========================================================================
0000A39E                            
0000A39E                            loc_93C4:
0000A39E 117C 0001 001A             		move.b	#1,$1A(a0)
0000A3A4 4A68 0012                  		tst.w	$12(a0)
0000A3A8 6B00                       		bmi.s	locret_93EA
0000A3AA 117C 0000 001A             		move.b	#0,$1A(a0)
0000A3B0 4EB9 0000 0000             		jsr	ObjHitFloor
0000A3B6 4A41                       		tst.w	d1
0000A3B8 6A00                       		bpl.s	locret_93EA
0000A3BA D368 000C                  		add.w	d1,$C(a0)
0000A3BE 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000A3C4                            
0000A3C4                            locret_93EA:
0000A3C4 4E75                       		rts	
0000A3C6                            ; ===========================================================================
0000A3C6                            
0000A3C6                            loc_93EC:
0000A3C6 08E8 0000 0001             		bset	#0,1(a0)
0000A3CC 3028 0008                  		move.w	8(a0),d0
0000A3D0 9078 D008                  		sub.w	($FFFFD008).w,d0
0000A3D4 6400                       		bcc.s	locret_9402
0000A3D6 08A8 0000 0001             		bclr	#0,1(a0)
0000A3DC                            
0000A3DC                            locret_9402:
0000A3DC 4E75                       		rts	
0000A3DE                            
0000A3DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A3DE                            
0000A3DE                            
0000A3DE                            sub_9404:
0000A3DE 3038 D008                  		move.w	($FFFFD008).w,d0
0000A3E2 9068 0008                  		sub.w	8(a0),d0
0000A3E6 0440 00B8                  		subi.w	#$B8,d0
0000A3EA 4E75                       		rts	
0000A3EC                            ; End of function sub_9404
0000A3EC                            
0000A3EC                            ; ===========================================================================
0000A3EC                            ; ---------------------------------------------------------------------------
0000A3EC                            ; Object 29 - points that appear when you destroy something
0000A3EC                            ; ---------------------------------------------------------------------------
0000A3EC                            
0000A3EC                            Obj29:					; XREF: Obj_Index
0000A3EC 7000                       		moveq	#0,d0
0000A3EE 1028 0024                  		move.b	$24(a0),d0
0000A3F2 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
0000A3F6 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
0000A3FA 6000 0000                  		bra.w	DisplaySprite
0000A3FE                            ; ===========================================================================
0000A3FE 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
0000A400 0000                       		dc.w Obj29_Slower-Obj29_Index
0000A402                            ; ===========================================================================
0000A402                            
0000A402                            Obj29_Main:				; XREF: Obj29_Index
0000A402 5428 0024                  		addq.b	#2,$24(a0)
0000A406 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
0000A40E 317C 2797 0002             		move.w	#$2797,2(a0)
0000A414 117C 0004 0001             		move.b	#4,1(a0)
0000A41A 117C 0001 0018             		move.b	#1,$18(a0)
0000A420 117C 0008 0019             		move.b	#8,$19(a0)
0000A426 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
0000A42C                            
0000A42C                            Obj29_Slower:				; XREF: Obj29_Index
0000A42C 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A430 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000A434 6100 0000                  		bsr.w	SpeedToPos
0000A438 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A43E 4E75                       		rts	
0000A440                            ; ===========================================================================
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            ; Sprite mappings - animals
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            Map_obj28:
0000A440                            	include "_maps\obj28.asm"
0000A440                            ; ---------------------------------------------------------------------------
0000A440                            ; Sprite mappings - animals
0000A440                            ; ---------------------------------------------------------------------------
0000A440 0000                       		dc.w byte_9472-Map_obj28
0000A442 0000                       		dc.w byte_9478-Map_obj28
0000A444 0000                       		dc.w byte_946C-Map_obj28
0000A446 01                         byte_946C:	dc.b 1
0000A447 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A44C 01                         byte_9472:	dc.b 1
0000A44D F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000A452 01                         byte_9478:	dc.b 1
0000A453 F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
0000A458                            		even
0000A458                            		even
0000A458                            
0000A458                            Map_obj28a:
0000A458                            	include "_maps\obj28a.asm"
0000A458                            ; ---------------------------------------------------------------------------
0000A458                            ; Sprite mappings - animals
0000A458                            ; ---------------------------------------------------------------------------
0000A458 0000                       		dc.w byte_948A-Map_obj28a
0000A45A 0000                       		dc.w byte_9490-Map_obj28a
0000A45C 0000                       		dc.w byte_9484-Map_obj28a
0000A45E 01                         byte_9484:	dc.b 1
0000A45F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A464 01                         byte_948A:	dc.b 1
0000A465 FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
0000A46A 01                         byte_9490:	dc.b 1
0000A46B FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000A470                            		even
0000A470                            		even
0000A470                            
0000A470                            Map_obj28b:
0000A470                            	include "_maps\obj28b.asm"
0000A470                            ; ---------------------------------------------------------------------------
0000A470                            ; Sprite mappings - animals
0000A470                            ; ---------------------------------------------------------------------------
0000A470 0000                       		dc.w byte_94A2-Map_obj28b
0000A472 0000                       		dc.w byte_94A8-Map_obj28b
0000A474 0000                       		dc.w byte_949C-Map_obj28b
0000A476 01                         byte_949C:	dc.b 1
0000A477 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000A47C 01                         byte_94A2:	dc.b 1
0000A47D FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000A482 01                         byte_94A8:	dc.b 1
0000A483 FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
0000A488                            		even
0000A488                            		even
0000A488                            
0000A488                            ; ---------------------------------------------------------------------------
0000A488                            ; Sprite mappings - points that	appear when you	destroy	something
0000A488                            ; ---------------------------------------------------------------------------
0000A488                            Map_obj29:
0000A488                            	include "_maps\obj29.asm"
0000A488                            ; ---------------------------------------------------------------------------
0000A488                            ; Sprite mappings - points that	appear when you	destroy	something
0000A488                            ; ---------------------------------------------------------------------------
0000A488 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
0000A48C 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000A490 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000A494 0000                       		dc.w byte_94E5-Map_obj29
0000A496 01                         byte_94BC:	dc.b 1
0000A497 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
0000A49C 01                         byte_94C2:	dc.b 1
0000A49D FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000A4A2 01                         byte_94C8:	dc.b 1
0000A4A3 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
0000A4A8 01                         byte_94CE:	dc.b 1
0000A4A9 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
0000A4AE 01                         byte_94D4:	dc.b 1
0000A4AF FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
0000A4B4 02                         byte_94DA:	dc.b 2
0000A4B5 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
0000A4BA FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
0000A4BF 02                         byte_94E5:	dc.b 2
0000A4C0 FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
0000A4C5 FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
0000A4CA                            		even
0000A4CA                            		even
0000A4CA                            
0000A4CA                            ; ===========================================================================
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
0000A4CA                            ; ---------------------------------------------------------------------------
0000A4CA                            
0000A4CA                            Obj1F:					; XREF: Obj_Index
0000A4CA 7000                       		moveq	#0,d0
0000A4CC 1028 0024                  		move.b	$24(a0),d0
0000A4D0 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
0000A4D4 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
0000A4D8                            ; ===========================================================================
0000A4D8 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
0000A4DA 0000                       		dc.w Obj1F_Action-Obj1F_Index
0000A4DC 0000                       		dc.w Obj1F_Delete-Obj1F_Index
0000A4DE 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
0000A4E0 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
0000A4E2                            ; ===========================================================================
0000A4E2                            
0000A4E2                            Obj1F_Main:				; XREF: Obj1F_Index
0000A4E2 117C 0010 0016             		move.b	#$10,$16(a0)
0000A4E8 117C 0008 0017             		move.b	#8,$17(a0)
0000A4EE 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A4F6 317C 0400 0002             		move.w	#$400,2(a0)
0000A4FC 117C 0004 0001             		move.b	#4,1(a0)
0000A502 117C 0003 0018             		move.b	#3,$18(a0)
0000A508 117C 0006 0020             		move.b	#6,$20(a0)
0000A50E 117C 0015 0019             		move.b	#$15,$19(a0)
0000A514 6100 0000                  		bsr.w	ObjectFall
0000A518 4EB9 0000 0000             		jsr	ObjHitFloor
0000A51E 4A41                       		tst.w	d1
0000A520 6A00                       		bpl.s	locret_955A
0000A522 D368 000C                  		add.w	d1,$C(a0)
0000A526 1143 0026                  		move.b	d3,$26(a0)
0000A52A 317C 0000 0012             		move.w	#0,$12(a0)
0000A530 5428 0024                  		addq.b	#2,$24(a0)
0000A534                            
0000A534                            locret_955A:
0000A534 4E75                       		rts	
0000A536                            ; ===========================================================================
0000A536                            
0000A536                            Obj1F_Action:				; XREF: Obj1F_Index
0000A536 7000                       		moveq	#0,d0
0000A538 1028 0025                  		move.b	$25(a0),d0
0000A53C 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000A540 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000A544 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A54A 6100 0000                  		bsr.w	AnimateSprite
0000A54E 6000 0000                  		bra.w	MarkObjGone
0000A552                            ; ===========================================================================
0000A552 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000A554 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
0000A556                            ; ===========================================================================
0000A556                            
0000A556                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
0000A556 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
0000A55A 6A00                       		bpl.s	locret_95B6
0000A55C 4A28 0001                  		tst.b	1(a0)
0000A560 6A00                       		bpl.s	Obj1F_Move
0000A562 0868 0001 0032             		bchg	#1,$32(a0)
0000A568 6600                       		bne.s	Obj1F_MakeFire
0000A56A                            
0000A56A                            Obj1F_Move:
0000A56A 5428 0025                  		addq.b	#2,$25(a0)
0000A56E 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000A574 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
0000A57A 6100 0000                  		bsr.w	Obj1F_SetAni
0000A57E 5600                       		addq.b	#3,d0
0000A580 1140 001C                  		move.b	d0,$1C(a0)
0000A584 0868 0000 0022             		bchg	#0,$22(a0)
0000A58A 6600                       		bne.s	locret_95B6
0000A58C 4468 0010                  		neg.w	$10(a0)		; change direction
0000A590                            
0000A590                            locret_95B6:
0000A590 4E75                       		rts	
0000A592                            ; ===========================================================================
0000A592                            
0000A592                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000A592 317C 003B 0030             		move.w	#$3B,$30(a0)
0000A598 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
0000A59E 6100 0000                  		bsr.w	SingleObjLoad
0000A5A2 6600                       		bne.s	Obj1F_MakeFire2
0000A5A4 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
0000A5A8 137C 0006 0024             		move.b	#6,$24(a1)
0000A5AE 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5B4 0469 0010 0008             		subi.w	#$10,8(a1)
0000A5BA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5C0 337C FF00 0010             		move.w	#-$100,$10(a1)
0000A5C6                            
0000A5C6                            Obj1F_MakeFire2:
0000A5C6 6100 0000                  		bsr.w	SingleObjLoad
0000A5CA 6600                       		bne.s	locret_9618
0000A5CC 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
0000A5D0 137C 0006 0024             		move.b	#6,$24(a1)
0000A5D6 3368 0008 0008             		move.w	8(a0),8(a1)
0000A5DC 0669 0010 0008             		addi.w	#$10,8(a1)
0000A5E2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A5E8 337C 0100 0010             		move.w	#$100,$10(a1)
0000A5EE                            
0000A5EE                            locret_9618:
0000A5EE 4E75                       		rts	
0000A5F0                            ; ===========================================================================
0000A5F0                            
0000A5F0                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
0000A5F0 5368 0030                  		subq.w	#1,$30(a0)
0000A5F4 6B00                       		bmi.s	loc_966E
0000A5F6 6100 0000                  		bsr.w	SpeedToPos
0000A5FA 0868 0000 0032             		bchg	#0,$32(a0)
0000A600 6600                       		bne.s	loc_9654
0000A602 3628 0008                  		move.w	8(a0),d3
0000A606 0643 0010                  		addi.w	#$10,d3
0000A60A 0828 0000 0022             		btst	#0,$22(a0)
0000A610 6700                       		beq.s	loc_9640
0000A612 0443 0020                  		subi.w	#$20,d3
0000A616                            
0000A616                            loc_9640:
0000A616 4EB9 0000 0000             		jsr	ObjHitFloor2
0000A61C 0C41 FFF8                  		cmpi.w	#-8,d1
0000A620 6D00                       		blt.s	loc_966E
0000A622 0C41 000C                  		cmpi.w	#$C,d1
0000A626 6C00                       		bge.s	loc_966E
0000A628 4E75                       		rts	
0000A62A                            ; ===========================================================================
0000A62A                            
0000A62A                            loc_9654:				; XREF: Obj1F_WalkOnFloor
0000A62A 4EB9 0000 0000             		jsr	ObjHitFloor
0000A630 D368 000C                  		add.w	d1,$C(a0)
0000A634 1143 0026                  		move.b	d3,$26(a0)
0000A638 6100 0000                  		bsr.w	Obj1F_SetAni
0000A63C 5600                       		addq.b	#3,d0
0000A63E 1140 001C                  		move.b	d0,$1C(a0)
0000A642 4E75                       		rts	
0000A644                            ; ===========================================================================
0000A644                            
0000A644                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000A644 5528 0025                  		subq.b	#2,$25(a0)
0000A648 317C 003B 0030             		move.w	#59,$30(a0)
0000A64E 317C 0000 0010             		move.w	#0,$10(a0)
0000A654 6100 0000                  		bsr.w	Obj1F_SetAni
0000A658 1140 001C                  		move.b	d0,$1C(a0)
0000A65C 4E75                       		rts	
0000A65E                            ; ---------------------------------------------------------------------------
0000A65E                            ; Subroutine to	set the	correct	animation for a	Crabmeat
0000A65E                            ; ---------------------------------------------------------------------------
0000A65E                            
0000A65E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A65E                            
0000A65E                            
0000A65E                            Obj1F_SetAni:				; XREF: loc_966E
0000A65E 7000                       		moveq	#0,d0
0000A660 1628 0026                  		move.b	$26(a0),d3
0000A664 6B00                       		bmi.s	loc_96A4
0000A666 0C03 0006                  		cmpi.b	#6,d3
0000A66A 6500                       		bcs.s	locret_96A2
0000A66C 7001                       		moveq	#1,d0
0000A66E 0828 0000 0022             		btst	#0,$22(a0)
0000A674 6600                       		bne.s	locret_96A2
0000A676 7002                       		moveq	#2,d0
0000A678                            
0000A678                            locret_96A2:
0000A678 4E75                       		rts	
0000A67A                            ; ===========================================================================
0000A67A                            
0000A67A                            loc_96A4:				; XREF: Obj1F_SetAni
0000A67A 0C03 00FA                  		cmpi.b	#-6,d3
0000A67E 6200                       		bhi.s	locret_96B6
0000A680 7002                       		moveq	#2,d0
0000A682 0828 0000 0022             		btst	#0,$22(a0)
0000A688 6600                       		bne.s	locret_96B6
0000A68A 7001                       		moveq	#1,d0
0000A68C                            
0000A68C                            locret_96B6:
0000A68C 4E75                       		rts	
0000A68E                            ; End of function Obj1F_SetAni
0000A68E                            
0000A68E                            ; ===========================================================================
0000A68E                            
0000A68E                            Obj1F_Delete:				; XREF: Obj1F_Index
0000A68E 6100 0000                  		bsr.w	DeleteObject
0000A692 4E75                       		rts	
0000A694                            ; ===========================================================================
0000A694                            ; ---------------------------------------------------------------------------
0000A694                            ; Sub-object - missile that the	Crabmeat throws
0000A694                            ; ---------------------------------------------------------------------------
0000A694                            
0000A694                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000A694 5428 0024                  		addq.b	#2,$24(a0)
0000A698 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000A6A0 317C 0400 0002             		move.w	#$400,2(a0)
0000A6A6 117C 0004 0001             		move.b	#4,1(a0)
0000A6AC 117C 0003 0018             		move.b	#3,$18(a0)
0000A6B2 117C 0087 0020             		move.b	#$87,$20(a0)
0000A6B8 117C 0008 0019             		move.b	#8,$19(a0)
0000A6BE 317C FC00 0012             		move.w	#-$400,$12(a0)
0000A6C4 117C 0007 001C             		move.b	#7,$1C(a0)
0000A6CA                            
0000A6CA                            Obj1F_BallMove:				; XREF: Obj1F_Index
0000A6CA 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
0000A6D0 6100 0000                  		bsr.w	AnimateSprite
0000A6D4 6100 0000                  		bsr.w	ObjectFall
0000A6D8 6100 0000                  		bsr.w	DisplaySprite
0000A6DC 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A6E0 0640 00E0                  		addi.w	#$E0,d0
0000A6E4 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A6E8 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
0000A6EA 4E75                       		rts	
0000A6EC                            ; ===========================================================================
0000A6EC                            
0000A6EC                            Obj1F_Delete2:
0000A6EC 6000 0000                  		bra.w	DeleteObject
0000A6F0                            ; ===========================================================================
0000A6F0                            Ani_obj1F:
0000A6F0                            	include "_anim\obj1F.asm"
0000A6F0                            ; ---------------------------------------------------------------------------
0000A6F0                            ; Animation script - Crabmeat enemy
0000A6F0                            ; ---------------------------------------------------------------------------
0000A6F0 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
0000A6F6 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
0000A6FC 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
0000A700 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
0000A704 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
0000A708 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
0000A70C 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000A712 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
0000A718 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
0000A71E 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000A722 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
0000A726                            		even
0000A726                            		even
0000A726                            
0000A726                            ; ---------------------------------------------------------------------------
0000A726                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
0000A726                            ; ---------------------------------------------------------------------------
0000A726                            Map_obj1F:
0000A726                            	include "_maps\obj1F.asm"
0000A726                            Map_1514:
0000A726 0000                       Map_1514_0: 	dc.w Map_1514_E-Map_1514
0000A728 0000                       Map_1514_2: 	dc.w Map_1514_1E-Map_1514
0000A72A 0000                       Map_1514_4: 	dc.w Map_1514_2E-Map_1514
0000A72C 0000                       Map_1514_6: 	dc.w Map_1514_3E-Map_1514
0000A72E 0000                       Map_1514_8: 	dc.w Map_1514_4E-Map_1514
0000A730 0000                       Map_1514_A: 	dc.w Map_1514_5E-Map_1514
0000A732 0000                       Map_1514_C: 	dc.w Map_1514_64-Map_1514
0000A734 03                         Map_1514_E: 	dc.b $3
0000A735 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A73A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A73F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A744 03                         Map_1514_1E: 	dc.b $3
0000A745 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A74A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A74F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A754 03                         Map_1514_2E: 	dc.b $3
0000A755 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A75A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A75F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A764 03                         Map_1514_3E: 	dc.b $3
0000A765 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A76A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A76F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A774 03                         Map_1514_4E: 	dc.b $3
0000A775 F80E 0000 E4               	dc.b $F8, $E, $0, $0, $E4
0000A77A F004 000C FC               	dc.b $F0, $4, $0, $C, $FC
0000A77F F80A 000E 04               	dc.b $F8, $A, $0, $E, $4
0000A784 01                         Map_1514_5E: 	dc.b $1
0000A785 F805 0017 F8               	dc.b $F8, $5, $0, $17, $F8
0000A78A 01                         Map_1514_64: 	dc.b $1
0000A78B F805 2017 F8               	dc.b $F8, $5, $20, $17, $F8
0000A790                            	even
0000A790                            	even
0000A790                            
0000A790                            ; ===========================================================================
0000A790                            ; ---------------------------------------------------------------------------
0000A790                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
0000A790                            ; ---------------------------------------------------------------------------
0000A790                            
0000A790                            Obj22:					; XREF: Obj_Index
0000A790 7000                       		moveq	#0,d0
0000A792 1028 0024                  		move.b	$24(a0),d0
0000A796 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
0000A79A 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
0000A79E                            ; ===========================================================================
0000A79E 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
0000A7A0 0000                       		dc.w Obj22_Action-Obj22_Index
0000A7A2 0000                       		dc.w Obj22_Delete-Obj22_Index
0000A7A4                            ; ===========================================================================
0000A7A4                            
0000A7A4                            Obj22_Main:				; XREF: Obj22_Index
0000A7A4 5428 0024                  		addq.b	#2,$24(a0)
0000A7A8 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
0000A7B0 317C 0444 0002             		move.w	#$444,2(a0)
0000A7B6 117C 0004 0001             		move.b	#4,1(a0)
0000A7BC 117C 0003 0018             		move.b	#3,$18(a0)
0000A7C2 117C 0008 0020             		move.b	#8,$20(a0)
0000A7C8 117C 0018 0019             		move.b	#$18,$19(a0)
0000A7CE                            
0000A7CE                            Obj22_Action:				; XREF: Obj22_Index
0000A7CE 7000                       		moveq	#0,d0
0000A7D0 1028 0025                  		move.b	$25(a0),d0
0000A7D4 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
0000A7D8 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
0000A7DC 43F9 0000 0000             		lea	(Ani_obj22).l,a1
0000A7E2 6100 0000                  		bsr.w	AnimateSprite
0000A7E6 6000 0000                  		bra.w	MarkObjGone
0000A7EA                            ; ===========================================================================
0000A7EA 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000A7EC 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000A7EE                            ; ===========================================================================
0000A7EE                            
0000A7EE                            Obj22_Move:				; XREF: Obj22_Index2
0000A7EE 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A7F2 6A00                       		bpl.s	locret_986C	; if time remains, branch
0000A7F4 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
0000A7FA 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000A7FC 5428 0025                  		addq.b	#2,$25(a0)
0000A800 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
0000A806 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000A80C 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
0000A812 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A818 6600                       		bne.s	locret_986C	; if not, branch
0000A81A 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000A81E                            
0000A81E                            locret_986C:
0000A81E 4E75                       		rts	
0000A820                            ; ===========================================================================
0000A820                            
0000A820                            Obj22_Fire:				; XREF: Obj22_Move
0000A820 6100 0000                  		bsr.w	SingleObjLoad
0000A824 6600                       		bne.s	locret_98D0
0000A826 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000A82A 3368 0008 0008             		move.w	8(a0),8(a1)
0000A830 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A836 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000A83C 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
0000A842 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
0000A848 303C 0018                  		move.w	#$18,d0
0000A84C 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
0000A852 6600                       		bne.s	loc_98AA	; if not, branch
0000A854 4440                       		neg.w	d0
0000A856 4469 0010                  		neg.w	$10(a1)		; move missile to the left
0000A85A                            
0000A85A                            loc_98AA:
0000A85A D169 0008                  		add.w	d0,8(a1)
0000A85E 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000A864 337C 000E 0032             		move.w	#$E,$32(a1)
0000A86A 2348 003C                  		move.l	a0,$3C(a1)
0000A86E 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
0000A874 317C 003B 0032             		move.w	#$3B,$32(a0)
0000A87A 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000A880                            
0000A880                            locret_98D0:
0000A880 4E75                       		rts	
0000A882                            ; ===========================================================================
0000A882                            
0000A882                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
0000A882 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000A886 6B00                       		bmi.s	Obj22_ChgDir
0000A888 6100 0000                  		bsr.w	SpeedToPos
0000A88C 4A28 0034                  		tst.b	$34(a0)
0000A890 6600                       		bne.s	locret_992A
0000A892 3038 D008                  		move.w	($FFFFD008).w,d0
0000A896 9068 0008                  		sub.w	8(a0),d0
0000A89A 6A00                       		bpl.s	Obj22_SetNrSonic
0000A89C 4440                       		neg.w	d0
0000A89E                            
0000A89E                            Obj22_SetNrSonic:
0000A89E 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
0000A8A2 6400                       		bcc.s	locret_992A	; if not, branch
0000A8A4 4A28 0001                  		tst.b	1(a0)
0000A8A8 6A00                       		bpl.s	locret_992A
0000A8AA 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
0000A8B0 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
0000A8B6 6000                       		bra.s	Obj22_Stop
0000A8B8                            ; ===========================================================================
0000A8B8                            
0000A8B8                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
0000A8B8 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
0000A8BE 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
0000A8C4 317C 003B 0032             		move.w	#59,$32(a0)
0000A8CA                            
0000A8CA                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
0000A8CA 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
0000A8CE 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
0000A8D4 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
0000A8DA                            
0000A8DA                            locret_992A:
0000A8DA 4E75                       		rts	
0000A8DC                            ; ===========================================================================
0000A8DC                            
0000A8DC                            Obj22_Delete:				; XREF: Obj22_Index
0000A8DC 6100 0000                  		bsr.w	DeleteObject
0000A8E0 4E75                       		rts	
0000A8E2                            ; ===========================================================================
0000A8E2                            ; ---------------------------------------------------------------------------
0000A8E2                            ; Object 23 - missile that Buzz	Bomber throws
0000A8E2                            ; ---------------------------------------------------------------------------
0000A8E2                            
0000A8E2                            Obj23:					; XREF: Obj_Index
0000A8E2 7000                       		moveq	#0,d0
0000A8E4 1028 0024                  		move.b	$24(a0),d0
0000A8E8 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000A8EC 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000A8F0                            ; ===========================================================================
0000A8F0 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
0000A8F2 0000                       		dc.w Obj23_Animate-Obj23_Index
0000A8F4 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
0000A8F6 0000                       		dc.w Obj23_Delete-Obj23_Index
0000A8F8 0000                       		dc.w Obj23_FromNewt-Obj23_Index
0000A8FA                            ; ===========================================================================
0000A8FA                            
0000A8FA                            Obj23_Main:				; XREF: Obj23_Index
0000A8FA 5368 0032                  		subq.w	#1,$32(a0)
0000A8FE 6A00                       		bpl.s	Obj23_ChkCancel
0000A900 5428 0024                  		addq.b	#2,$24(a0)
0000A904 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000A90C 317C 2444 0002             		move.w	#$2444,2(a0)
0000A912 117C 0004 0001             		move.b	#4,1(a0)
0000A918 117C 0003 0018             		move.b	#3,$18(a0)
0000A91E 117C 0008 0019             		move.b	#8,$19(a0)
0000A924 0228 0003 0022             		andi.b	#3,$22(a0)
0000A92A 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000A92E 6700                       		beq.s	Obj23_Animate	; if not, branch
0000A930 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
0000A936 117C 0087 0020             		move.b	#$87,$20(a0)
0000A93C 117C 0001 001C             		move.b	#1,$1C(a0)
0000A942 6000                       		bra.s	Obj23_Animate2
0000A944                            ; ===========================================================================
0000A944                            
0000A944                            Obj23_Animate:				; XREF: Obj23_Index
0000A944 6100                       		bsr.s	Obj23_ChkCancel
0000A946 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A94C 6100 0000                  		bsr.w	AnimateSprite
0000A950 6000 0000                  		bra.w	DisplaySprite
0000A954                            ; ---------------------------------------------------------------------------
0000A954                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
0000A954                            ; destroyed, and if it has, then cancel	the missile
0000A954                            ; ---------------------------------------------------------------------------
0000A954                            
0000A954                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A954                            
0000A954                            
0000A954                            Obj23_ChkCancel:			; XREF: Obj23_Main
0000A954 2268 003C                  		movea.l	$3C(a0),a1
0000A958 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000A95C 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000A95E 4E75                       		rts	
0000A960                            ; End of function Obj23_ChkCancel
0000A960                            
0000A960                            ; ===========================================================================
0000A960                            
0000A960                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000A960 0828 0007 0022             		btst	#7,$22(a0)
0000A966 6600                       		bne.s	Obj23_Explode
0000A968 117C 0087 0020             		move.b	#$87,$20(a0)
0000A96E 117C 0001 001C             		move.b	#1,$1C(a0)
0000A974 6100 0000                  		bsr.w	SpeedToPos
0000A978 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A97E 6100 0000                  		bsr.w	AnimateSprite
0000A982 6100 0000                  		bsr.w	DisplaySprite
0000A986 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000A98A 0640 00E0                  		addi.w	#$E0,d0
0000A98E B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
0000A992 6500                       		bcs.s	Obj23_Delete	; if yes, branch
0000A994 4E75                       		rts	
0000A996                            ; ===========================================================================
0000A996                            
0000A996                            Obj23_Explode:				; XREF: Obj23_FromBuzz
0000A996 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
0000A99A 117C 0000 0024             		move.b	#0,$24(a0)
0000A9A0 6000 F2D0                  		bra.w	Obj24
0000A9A4                            ; ===========================================================================
0000A9A4                            
0000A9A4                            Obj23_Delete:				; XREF: Obj23_Index
0000A9A4 6100 0000                  		bsr.w	DeleteObject
0000A9A8 4E75                       		rts	
0000A9AA                            ; ===========================================================================
0000A9AA                            
0000A9AA                            Obj23_FromNewt:				; XREF: Obj23_Index
0000A9AA 4A28 0001                  		tst.b	1(a0)
0000A9AE 6AF4                       		bpl.s	Obj23_Delete
0000A9B0 6100 0000                  		bsr.w	SpeedToPos
0000A9B4                            
0000A9B4                            Obj23_Animate2:				; XREF: Obj23_Main
0000A9B4 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000A9BA 6100 0000                  		bsr.w	AnimateSprite
0000A9BE 6100 0000                  		bsr.w	DisplaySprite
0000A9C2 4E75                       		rts	
0000A9C4                            ; ===========================================================================
0000A9C4                            Ani_obj22:
0000A9C4                            	include "_anim\obj22.asm"
0000A9C4                            ; ---------------------------------------------------------------------------
0000A9C4                            ; Animation script - Buzz Bomber enemy
0000A9C4                            ; ---------------------------------------------------------------------------
0000A9C4 0000                       		dc.w byte_9A1E-Ani_obj22
0000A9C6 0000                       		dc.w byte_9A22-Ani_obj22
0000A9C8 0000                       		dc.w byte_9A26-Ani_obj22
0000A9CA 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
0000A9CE 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
0000A9D2 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
0000A9D6                            		even
0000A9D6                            		even
0000A9D6                            
0000A9D6                            Ani_obj23:
0000A9D6                            	include "_anim\obj23.asm"
0000A9D6                            ; ---------------------------------------------------------------------------
0000A9D6                            ; Animation script - missile that Buzz Bomber throws
0000A9D6                            ; ---------------------------------------------------------------------------
0000A9D6 0000                       		dc.w byte_9A2E-Ani_obj23
0000A9D8 0000                       		dc.w byte_9A32-Ani_obj23
0000A9DA 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
0000A9DE 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
0000A9E2                            		even
0000A9E2                            		even
0000A9E2                            
0000A9E2                            ; ---------------------------------------------------------------------------
0000A9E2                            ; Sprite mappings - Buzz Bomber	enemy
0000A9E2                            ; ---------------------------------------------------------------------------
0000A9E2                            Map_obj22:
0000A9E2                            	include "_maps\obj22.asm"
0000A9E2                            Map_e97a:
0000A9E2 0000                       Map_e97a_0: 	dc.w Map_e97a_C-Map_e97a
0000A9E4 0000                       Map_e97a_2: 	dc.w Map_e97a_2B-Map_e97a
0000A9E6 0000                       Map_e97a_4: 	dc.w Map_e97a_4A-Map_e97a
0000A9E8 0000                       Map_e97a_6: 	dc.w Map_e97a_6E-Map_e97a
0000A9EA 0000                       Map_e97a_8: 	dc.w Map_e97a_92-Map_e97a
0000A9EC 0000                       Map_e97a_A: 	dc.w Map_e97a_B1-Map_e97a
0000A9EE 06                         Map_e97a_C: 	dc.b $6
0000A9EF F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000A9F4 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000A9F9 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000A9FE 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA03 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AA08 F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AA0D 06                         Map_e97a_2B: 	dc.b $6
0000AA0E F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA13 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA18 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA1D 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA22 F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000AA27 F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000AA2C 07                         Map_e97a_4A: 	dc.b $7
0000AA2D 0400 0030 0C               	dc.b $4, $0, $0, $30, $C
0000AA32 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA37 F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA3C 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA41 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA46 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AA4B F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AA50 07                         Map_e97a_6E: 	dc.b $7
0000AA51 0404 0031 0C               	dc.b $4, $4, $0, $31, $C
0000AA56 F409 0000 E8               	dc.b $F4, $9, $0, $0, $E8
0000AA5B F409 000F 00               	dc.b $F4, $9, $0, $F, $0
0000AA60 0408 0015 E8               	dc.b $4, $8, $0, $15, $E8
0000AA65 0404 0018 00               	dc.b $4, $4, $0, $18, $0
0000AA6A F408 001F EC               	dc.b $F4, $8, $0, $1F, $EC
0000AA6F F404 0022 04               	dc.b $F4, $4, $0, $22, $4
0000AA74 06                         Map_e97a_92: 	dc.b $6
0000AA75 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000AA7A 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000AA7F 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000AA84 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000AA89 F108 001A EC               	dc.b $F1, $8, $0, $1A, $EC
0000AA8E F104 001D 04               	dc.b $F1, $4, $0, $1D, $4
0000AA93 04                         Map_e97a_B1: 	dc.b $4
0000AA94 F40D 0000 EC               	dc.b $F4, $D, $0, $0, $EC
0000AA99 040C 0008 EC               	dc.b $4, $C, $0, $8, $EC
0000AA9E 0400 000C 0C               	dc.b $4, $0, $0, $C, $C
0000AAA3 0C04 000D F4               	dc.b $C, $4, $0, $D, $F4
0000AAA8                            	even
0000AAA8                            	even
0000AAA8                            
0000AAA8                            ; ---------------------------------------------------------------------------
0000AAA8                            ; Sprite mappings - missile that Buzz Bomber throws
0000AAA8                            ; ---------------------------------------------------------------------------
0000AAA8                            Map_obj23:
0000AAA8                            	include "_maps\obj23.asm"
0000AAA8                            ; ---------------------------------------------------------------------------
0000AAA8                            ; Sprite mappings - missile that Buzz Bomber throws
0000AAA8                            ; ---------------------------------------------------------------------------
0000AAA8 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
0000AAAC 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
0000AAB0 01                         byte_9B0E:	dc.b 1
0000AAB1 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
0000AAB6 01                         byte_9B14:	dc.b 1
0000AAB7 F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
0000AABC 01                         byte_9B1A:	dc.b 1
0000AABD F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
0000AAC2 01                         byte_9B20:	dc.b 1
0000AAC3 F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
0000AAC8                            		even
0000AAC8                            		even
0000AAC8                            
0000AAC8                            ; ===========================================================================
0000AAC8                            ; ---------------------------------------------------------------------------
0000AAC8                            ; Object 25 - rings
0000AAC8                            ; ---------------------------------------------------------------------------
0000AAC8                            
0000AAC8                            Obj25:					; XREF: Obj_Index
0000AAC8 7000                       		moveq	#0,d0
0000AACA 1028 0024                  		move.b	$24(a0),d0
0000AACE 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
0000AAD2 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
0000AAD6                            ; ===========================================================================
0000AAD6 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
0000AAD8 0000                       		dc.w Obj25_Animate-Obj25_Index
0000AADA 0000                       		dc.w Obj25_Collect-Obj25_Index
0000AADC 0000                       		dc.w Obj25_Sparkle-Obj25_Index
0000AADE 0000                       		dc.w Obj25_Delete-Obj25_Index
0000AAE0                            ; ---------------------------------------------------------------------------
0000AAE0                            ; Distances between rings (format: horizontal, vertical)
0000AAE0                            ; ---------------------------------------------------------------------------
0000AAE0 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
0000AAE2 1800                       		dc.b $18, 0		; horizontal normal
0000AAE4 2000                       		dc.b $20, 0		; horizontal wide
0000AAE6 0010                       		dc.b 0,	$10		; vertical tight
0000AAE8 0018                       		dc.b 0,	$18		; vertical normal
0000AAEA 0020                       		dc.b 0,	$20		; vertical wide
0000AAEC 1010                       		dc.b $10, $10		; diagonal
0000AAEE 1818                       		dc.b $18, $18
0000AAF0 2020                       		dc.b $20, $20
0000AAF2 F010                       		dc.b $F0, $10
0000AAF4 E818                       		dc.b $E8, $18
0000AAF6 E020                       		dc.b $E0, $20
0000AAF8 1008                       		dc.b $10, 8
0000AAFA 1810                       		dc.b $18, $10
0000AAFC F008                       		dc.b $F0, 8
0000AAFE E810                       		dc.b $E8, $10
0000AB00                            ; ===========================================================================
0000AB00                            
0000AB00                            Obj25_Main:				; XREF: Obj25_Index
0000AB00 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000AB04 7000                       		moveq	#0,d0
0000AB06 1028 0023                  		move.b	$23(a0),d0
0000AB0A 45F2 0002                  		lea	2(a2,d0.w),a2
0000AB0E 1812                       		move.b	(a2),d4
0000AB10 1228 0028                  		move.b	$28(a0),d1
0000AB14 1001                       		move.b	d1,d0
0000AB16 0241 0007                  		andi.w	#7,d1
0000AB1A 0C41 0007                  		cmpi.w	#7,d1
0000AB1E 6600                       		bne.s	loc_9B80
0000AB20 7206                       		moveq	#6,d1
0000AB22                            
0000AB22                            loc_9B80:
0000AB22 4841                       		swap	d1
0000AB24 323C 0000                  		move.w	#0,d1
0000AB28 E808                       		lsr.b	#4,d0
0000AB2A D040                       		add.w	d0,d0
0000AB2C 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
0000AB30 4885                       		ext.w	d5
0000AB32 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
0000AB36 4886                       		ext.w	d6
0000AB38 2248                       		movea.l	a0,a1
0000AB3A 3428 0008                  		move.w	8(a0),d2
0000AB3E 3628 000C                  		move.w	$C(a0),d3
0000AB42 E20C                       		lsr.b	#1,d4
0000AB44 6500                       		bcs.s	loc_9C02
0000AB46 0892 0007                  		bclr	#7,(a2)
0000AB4A 6000                       		bra.s	loc_9BBA
0000AB4C                            ; ===========================================================================
0000AB4C                            
0000AB4C                            Obj25_MakeRings:
0000AB4C 4841                       		swap	d1
0000AB4E E20C                       		lsr.b	#1,d4
0000AB50 6500                       		bcs.s	loc_9C02
0000AB52 0892 0007                  		bclr	#7,(a2)
0000AB56 6100 0000                  		bsr.w	SingleObjLoad
0000AB5A 6600                       		bne.s	loc_9C0E
0000AB5C                            
0000AB5C                            loc_9BBA:				; XREF: Obj25_Main
0000AB5C 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
0000AB60 5429 0024                  		addq.b	#2,$24(a1)
0000AB64 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
0000AB68 3368 0008 0032             		move.w	8(a0),$32(a1)
0000AB6E 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
0000AB72 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000AB7A 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000AB80 137C 0004 0001             		move.b	#4,1(a1)
0000AB86 137C 0002 0018             		move.b	#2,$18(a1)
0000AB8C 137C 0047 0020             		move.b	#$47,$20(a1)
0000AB92 137C 0008 0019             		move.b	#8,$19(a1)
0000AB98 1368 0023 0023             		move.b	$23(a0),$23(a1)
0000AB9E 1341 0034                  		move.b	d1,$34(a1)
0000ABA2                            
0000ABA2                            loc_9C02:
0000ABA2 5241                       		addq.w	#1,d1
0000ABA4 D445                       		add.w	d5,d2		; add ring spacing value to d2
0000ABA6 D646                       		add.w	d6,d3		; add ring spacing value to d3
0000ABA8 4841                       		swap	d1
0000ABAA 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
0000ABAE                            
0000ABAE                            loc_9C0E:
0000ABAE 0812 0000                  		btst	#0,(a2)
0000ABB2 6600 0000                  		bne.w	DeleteObject
0000ABB6                            
0000ABB6                            Obj25_Animate:				; XREF: Obj25_Index
0000ABB6 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
0000ABBC 6100 0000                  		bsr.w	DisplaySprite
0000ABC0 3028 0032                  		move.w	$32(a0),d0
0000ABC4 0240 FF80                  		andi.w	#$FF80,d0
0000ABC8 3238 F700                  		move.w	($FFFFF700).w,d1
0000ABCC 0441 0080                  		subi.w	#$80,d1
0000ABD0 0241 FF80                  		andi.w	#$FF80,d1
0000ABD4 9041                       		sub.w	d1,d0
0000ABD6 0C40 0280                  		cmpi.w	#$280,d0
0000ABDA 6200                       		bhi.s	Obj25_Delete
0000ABDC 4E75                       		rts	
0000ABDE                            ; ===========================================================================
0000ABDE                            
0000ABDE                            Obj25_Collect:				; XREF: Obj25_Index
0000ABDE 5428 0024                  		addq.b	#2,$24(a0)
0000ABE2 117C 0000 0020             		move.b	#0,$20(a0)
0000ABE8 117C 0001 0018             		move.b	#1,$18(a0)
0000ABEE 6100 0000                  		bsr.w	CollectRing
0000ABF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000ABF6 7000                       		moveq	#0,d0
0000ABF8 1028 0023                  		move.b	$23(a0),d0
0000ABFC 1228 0034                  		move.b	$34(a0),d1
0000AC00 03F2 0002                  		bset	d1,2(a2,d0.w)
0000AC04                            
0000AC04                            Obj25_Sparkle:				; XREF: Obj25_Index
0000AC04 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AC0A 6100 0000                  		bsr.w	AnimateSprite
0000AC0E 6000 0000                  		bra.w	DisplaySprite
0000AC12                            ; ===========================================================================
0000AC12                            
0000AC12                            Obj25_Delete:				; XREF: Obj25_Index
0000AC12 6000 0000                  		bra.w	DeleteObject
0000AC16                            
0000AC16                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AC16                            
0000AC16                            
0000AC16                            CollectRing:				; XREF: Obj25_Collect
0000AC16 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
0000AC1A 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
0000AC20 303C 00B5                  		move.w	#$B5,d0		; play ring sound
0000AC24 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
0000AC2A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AC2C 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
0000AC32 6700                       		beq.s	loc_9CA4
0000AC34 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
0000AC3A 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
0000AC3C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
0000AC42 6600                       		bne.s	Obj25_PlaySnd
0000AC44                            
0000AC44                            loc_9CA4:
0000AC44 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000AC48 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000AC4C 303C 0088                  		move.w	#$88,d0		; play extra life music
0000AC50                            
0000AC50                            Obj25_PlaySnd:
0000AC50 4EF9 0000 1C74             		jmp	(PlaySound_Special).l
0000AC56                            ; End of function CollectRing
0000AC56                            
0000AC56                            ; ===========================================================================
0000AC56                            ; ---------------------------------------------------------------------------
0000AC56                            ; Object 37 - rings flying out of Sonic	when he's hit
0000AC56                            ; ---------------------------------------------------------------------------
0000AC56                            
0000AC56                            Obj37:					; XREF: Obj_Index
0000AC56 7000                       		moveq	#0,d0
0000AC58 1028 0024                  		move.b	$24(a0),d0
0000AC5C 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
0000AC60 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
0000AC64                            ; ===========================================================================
0000AC64 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
0000AC66 0000                       		dc.w Obj37_Bounce-Obj37_Index
0000AC68 0000                       		dc.w Obj37_Collect-Obj37_Index
0000AC6A 0000                       		dc.w Obj37_Sparkle-Obj37_Index
0000AC6C 0000                       		dc.w Obj37_Delete-Obj37_Index
0000AC6E                            ; ===========================================================================
0000AC6E                            
0000AC6E                            Obj37_CountRings:			; XREF: Obj37_Index
0000AC6E 2248                       		movea.l	a0,a1
0000AC70 7A00                       		moveq	#0,d5
0000AC72 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
0000AC76 7020                       		moveq	#32,d0
0000AC78 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
0000AC7A 6500                       		bcs.s	loc_9CDE	; if not, branch
0000AC7C 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
0000AC7E                            
0000AC7E                            loc_9CDE:
0000AC7E 5345                       		subq.w	#1,d5
0000AC80 383C 0288                  		move.w	#$288,d4
0000AC84 6000                       		bra.s	Obj37_MakeRings
0000AC86                            ; ===========================================================================
0000AC86                            
0000AC86                            Obj37_Loop:
0000AC86 6100 0000                  		bsr.w	SingleObjLoad
0000AC8A 6600 0000                  		bne.w	Obj37_ResetCounter
0000AC8E                            
0000AC8E                            Obj37_MakeRings:			; XREF: Obj37_CountRings
0000AC8E 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
0000AC92 5429 0024                  		addq.b	#2,$24(a1)
0000AC96 137C 0008 0016             		move.b	#8,$16(a1)
0000AC9C 137C 0008 0017             		move.b	#8,$17(a1)
0000ACA2 3368 0008 0008             		move.w	8(a0),8(a1)
0000ACA8 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000ACAE 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
0000ACB6 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000ACBC 137C 0004 0001             		move.b	#4,1(a1)
0000ACC2 137C 0003 0018             		move.b	#3,$18(a1)
0000ACC8 137C 0047 0020             		move.b	#$47,$20(a1)
0000ACCE 137C 0008 0019             		move.b	#8,$19(a1)
0000ACD4 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
0000ACDA 4A44                       		tst.w	d4
0000ACDC 6B00                       		bmi.s	loc_9D62
0000ACDE 3004                       		move.w	d4,d0
0000ACE0 6100 8734                  		bsr.w	CalcSine
0000ACE4 3404                       		move.w	d4,d2
0000ACE6 E04A                       		lsr.w	#8,d2
0000ACE8 E560                       		asl.w	d2,d0
0000ACEA E561                       		asl.w	d2,d1
0000ACEC 3400                       		move.w	d0,d2
0000ACEE 3601                       		move.w	d1,d3
0000ACF0 0604 0010                  		addi.b	#$10,d4
0000ACF4 6400                       		bcc.s	loc_9D62
0000ACF6 0444 0080                  		subi.w	#$80,d4
0000ACFA 6400                       		bcc.s	loc_9D62
0000ACFC 383C 0288                  		move.w	#$288,d4
0000AD00                            
0000AD00                            loc_9D62:
0000AD00 3342 0010                  		move.w	d2,$10(a1)
0000AD04 3343 0012                  		move.w	d3,$12(a1)
0000AD08 4442                       		neg.w	d2
0000AD0A 4444                       		neg.w	d4
0000AD0C 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
0000AD10                            
0000AD10                            Obj37_ResetCounter:			; XREF: Obj37_Loop
0000AD10 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
0000AD16 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
0000AD1C 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
0000AD22 303C 00C6                  		move.w	#$C6,d0
0000AD26 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play ring loss sound
0000AD2C                            
0000AD2C                            Obj37_Bounce:				; XREF: Obj37_Index
0000AD2C 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
0000AD32 6100 0000                  		bsr.w	SpeedToPos
0000AD36 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD3C 6B00                       		bmi.s	Obj37_ChkDel
0000AD3E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000AD42 D007                       		add.b	d7,d0
0000AD44 0200 0003                  		andi.b	#3,d0
0000AD48 6600                       		bne.s	Obj37_ChkDel
0000AD4A 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD50 4A41                       		tst.w	d1
0000AD52 6A00                       		bpl.s	Obj37_ChkDel
0000AD54 D368 000C                  		add.w	d1,$C(a0)
0000AD58 3028 0012                  		move.w	$12(a0),d0
0000AD5C E440                       		asr.w	#2,d0
0000AD5E 9168 0012                  		sub.w	d0,$12(a0)
0000AD62 4468 0012                  		neg.w	$12(a0)
0000AD66                            
0000AD66                            Obj37_ChkDel:				; XREF: Obj37_Bounce
0000AD66 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000AD6A 6700                       		beq.s	Obj37_Delete
0000AD6C 3038 F72E                  		move.w	($FFFFF72E).w,d0
0000AD70 0640 00E0                  		addi.w	#$E0,d0
0000AD74 B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
0000AD78 6500                       		bcs.s	Obj37_Delete	; if yes, branch
0000AD7A 6000 0000                  		bra.w	DisplaySprite
0000AD7E                            ; ===========================================================================
0000AD7E                            
0000AD7E                            Obj37_Collect:				; XREF: Obj37_Index
0000AD7E 5428 0024                  		addq.b	#2,$24(a0)
0000AD82 117C 0000 0020             		move.b	#0,$20(a0)
0000AD88 117C 0001 0018             		move.b	#1,$18(a0)
0000AD8E 6100 FE86                  		bsr.w	CollectRing
0000AD92                            
0000AD92                            Obj37_Sparkle:				; XREF: Obj37_Index
0000AD92 43F9 0000 0000             		lea	(Ani_obj25).l,a1
0000AD98 6100 0000                  		bsr.w	AnimateSprite
0000AD9C 6000 0000                  		bra.w	DisplaySprite
0000ADA0                            ; ===========================================================================
0000ADA0                            
0000ADA0                            Obj37_Delete:				; XREF: Obj37_Index
0000ADA0 6000 0000                  		bra.w	DeleteObject
0000ADA4                            ; ===========================================================================
0000ADA4                            ; ---------------------------------------------------------------------------
0000ADA4                            ; Object 4B - giant ring for entry to special stage
0000ADA4                            ; ---------------------------------------------------------------------------
0000ADA4                            
0000ADA4                            Obj4B:					; XREF: Obj_Index
0000ADA4 7000                       		moveq	#0,d0
0000ADA6 1028 0024                  		move.b	$24(a0),d0
0000ADAA 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
0000ADAE 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
0000ADB2                            ; ===========================================================================
0000ADB2 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
0000ADB4 0000                       		dc.w Obj4B_Animate-Obj4B_Index
0000ADB6 0000                       		dc.w Obj4B_Collect-Obj4B_Index
0000ADB8 0000                       		dc.w Obj4B_Delete-Obj4B_Index
0000ADBA                            ; ===========================================================================
0000ADBA                            
0000ADBA                            Obj4B_Main:				; XREF: Obj4B_Index
0000ADBA 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
0000ADC2 317C 2400 0002             		move.w	#$2400,2(a0)
0000ADC8 0028 0004 0001             		ori.b	#4,1(a0)
0000ADCE 117C 0040 0019             		move.b	#$40,$19(a0)
0000ADD4 4A28 0001                  		tst.b	1(a0)
0000ADD8 6A00                       		bpl.s	Obj4B_Animate
0000ADDA 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
0000ADE0 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
0000ADE4 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000ADEA 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
0000ADEC 4E75                       		rts	
0000ADEE                            ; ===========================================================================
0000ADEE                            
0000ADEE                            Obj4B_Okay:				; XREF: Obj4B_Main
0000ADEE 5428 0024                  		addq.b	#2,$24(a0)
0000ADF2 117C 0002 0018             		move.b	#2,$18(a0)
0000ADF8 117C 0052 0020             		move.b	#$52,$20(a0)
0000ADFE 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
0000AE04                            
0000AE04                            Obj4B_Animate:				; XREF: Obj4B_Index
0000AE04 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
0000AE0A 3028 0008                  		move.w	8(a0),d0
0000AE0E 0240 FF80                  		andi.w	#$FF80,d0
0000AE12 3238 F700                  		move.w	($FFFFF700).w,d1
0000AE16 0441 0080                  		subi.w	#$80,d1
0000AE1A 0241 FF80                  		andi.w	#$FF80,d1
0000AE1E 9041                       		sub.w	d1,d0
0000AE20 0C40 0280                  		cmpi.w	#$280,d0
0000AE24 6200 0000                  		bhi.w	DeleteObject
0000AE28 6000 0000                  		bra.w	DisplaySprite
0000AE2C                            ; ===========================================================================
0000AE2C                            
0000AE2C                            Obj4B_Collect:				; XREF: Obj4B_Index
0000AE2C 5528 0024                  		subq.b	#2,$24(a0)
0000AE30 117C 0000 0020             		move.b	#0,$20(a0)
0000AE36 6100 0000                  		bsr.w	SingleObjLoad
0000AE3A 6600 0000                  		bne.w	Obj4B_PlaySnd
0000AE3E 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
0000AE42 3368 0008 0008             		move.w	8(a0),8(a1)
0000AE48 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000AE4E 2348 003C                  		move.l	a0,$3C(a1)
0000AE52 3038 D008                  		move.w	($FFFFD008).w,d0
0000AE56 B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
0000AE5A 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
0000AE5C 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
0000AE62                            
0000AE62                            Obj4B_PlaySnd:
0000AE62 303C 00C3                  		move.w	#$C3,d0
0000AE66 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play giant ring	sound
0000AE6C 6096                       		bra.s	Obj4B_Animate
0000AE6E                            ; ===========================================================================
0000AE6E                            
0000AE6E                            Obj4B_Delete:				; XREF: Obj4B_Index
0000AE6E 6000 0000                  		bra.w	DeleteObject
0000AE72                            ; ===========================================================================
0000AE72                            ; ---------------------------------------------------------------------------
0000AE72                            ; Object 7C - flash effect when	you collect the	giant ring
0000AE72                            ; ---------------------------------------------------------------------------
0000AE72                            
0000AE72                            Obj7C:					; XREF: Obj_Index
0000AE72 7000                       		moveq	#0,d0
0000AE74 1028 0024                  		move.b	$24(a0),d0
0000AE78 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
0000AE7C 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
0000AE80                            ; ===========================================================================
0000AE80 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
0000AE82 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
0000AE84 0000                       		dc.w Obj7C_Delete-Obj7C_Index
0000AE86                            ; ===========================================================================
0000AE86                            
0000AE86                            Obj7C_Main:				; XREF: Obj7C_Index
0000AE86 5428 0024                  		addq.b	#2,$24(a0)
0000AE8A 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
0000AE92 317C 2462 0002             		move.w	#$2462,2(a0)
0000AE98 0028 0004 0001             		ori.b	#4,1(a0)
0000AE9E 117C 0000 0018             		move.b	#0,$18(a0)
0000AEA4 117C 0020 0019             		move.b	#$20,$19(a0)
0000AEAA 117C 00FF 001A             		move.b	#$FF,$1A(a0)
0000AEB0                            
0000AEB0                            Obj7C_ChkDel:				; XREF: Obj7C_Index
0000AEB0 6100                       		bsr.s	Obj7C_Collect
0000AEB2 3028 0008                  		move.w	8(a0),d0
0000AEB6 0240 FF80                  		andi.w	#$FF80,d0
0000AEBA 3238 F700                  		move.w	($FFFFF700).w,d1
0000AEBE 0441 0080                  		subi.w	#$80,d1
0000AEC2 0241 FF80                  		andi.w	#$FF80,d1
0000AEC6 9041                       		sub.w	d1,d0
0000AEC8 0C40 0280                  		cmpi.w	#$280,d0
0000AECC 6200 0000                  		bhi.w	DeleteObject
0000AED0 6000 0000                  		bra.w	DisplaySprite
0000AED4                            
0000AED4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AED4                            
0000AED4                            
0000AED4                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
0000AED4 5328 001E                  		subq.b	#1,$1E(a0)
0000AED8 6A00                       		bpl.s	locret_9F76
0000AEDA 117C 0001 001E             		move.b	#1,$1E(a0)
0000AEE0 5228 001A                  		addq.b	#1,$1A(a0)
0000AEE4 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
0000AEEA 6400                       		bcc.s	Obj7C_End	; if yes, branch
0000AEEC 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
0000AEF2 6600                       		bne.s	locret_9F76	; if not, branch
0000AEF4 2268 003C                  		movea.l	$3C(a0),a1
0000AEF8 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
0000AEFE 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
0000AF04 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
0000AF0A 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
0000AF0E 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
0000AF12                            
0000AF12                            locret_9F76:
0000AF12 4E75                       		rts	
0000AF14                            ; ===========================================================================
0000AF14                            
0000AF14                            Obj7C_End:				; XREF: Obj7C_Collect
0000AF14 5428 0024                  		addq.b	#2,$24(a0)
0000AF18 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
0000AF1E 588F                       		addq.l	#4,sp
0000AF20 4E75                       		rts	
0000AF22                            ; End of function Obj7C_Collect
0000AF22                            
0000AF22                            ; ===========================================================================
0000AF22                            
0000AF22                            Obj7C_Delete:				; XREF: Obj7C_Index
0000AF22 6000 0000                  		bra.w	DeleteObject
0000AF26                            ; ===========================================================================
0000AF26                            Ani_obj25:
0000AF26                            	include "_anim\obj25.asm"
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26                            ; Animation script - ring
0000AF26                            ; ---------------------------------------------------------------------------
0000AF26 0000                       		dc.w byte_9F8C-Ani_obj25
0000AF28 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
0000AF2E                            		even
0000AF2E                            		even
0000AF2E                            
0000AF2E                            ; ---------------------------------------------------------------------------
0000AF2E                            ; Sprite mappings - rings
0000AF2E                            ; ---------------------------------------------------------------------------
0000AF2E                            Map_obj25:
0000AF2E                            	include "_maps\obj25.asm"
0000AF2E                            ; ---------------------------------------------------------------------------
0000AF2E                            ; Sprite mappings - rings
0000AF2E                            ; ---------------------------------------------------------------------------
0000AF2E 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
0000AF32 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
0000AF36 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
0000AF3A 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
0000AF3E 01                         byte_9FA2:	dc.b 1
0000AF3F F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000AF44 01                         byte_9FA8:	dc.b 1
0000AF45 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0000AF4A 01                         byte_9FAE:	dc.b 1
0000AF4B F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
0000AF50 01                         byte_9FB4:	dc.b 1
0000AF51 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
0000AF56 01                         byte_9FBA:	dc.b 1
0000AF57 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
0000AF5C 01                         byte_9FC0:	dc.b 1
0000AF5D F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
0000AF62 01                         byte_9FC6:	dc.b 1
0000AF63 F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
0000AF68 01                         byte_9FCC:	dc.b 1
0000AF69 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
0000AF6E                            		even
0000AF6E                            		even
0000AF6E                            
0000AF6E                            ; ---------------------------------------------------------------------------
0000AF6E                            ; Sprite mappings - giant ring
0000AF6E                            ; ---------------------------------------------------------------------------
0000AF6E                            Map_obj4B:
0000AF6E                            	include "_maps\obj4B.asm"
0000AF6E                            ; ---------------------------------------------------------------------------
0000AF6E                            ; Sprite mappings - giant ring
0000AF6E                            ; ---------------------------------------------------------------------------
0000AF6E 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
0000AF72 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
0000AF76 0A                         byte_9FDA:	dc.b $A
0000AF77 E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
0000AF7C E008 0003 00               		dc.b $E0, 8, 0,	3, 0
0000AF81 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
0000AF86 E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
0000AF8B F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
0000AF90 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
0000AF95 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
0000AF9A 100C 0022 00               		dc.b $10, $C, 0, $22, 0
0000AF9F 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
0000AFA4 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
0000AFA9 08                         byte_A00D:	dc.b 8
0000AFAA E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
0000AFAF E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
0000AFB4 E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
0000AFB9 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
0000AFBE F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
0000AFC3 0809 0045 00               		dc.b 8,	9, 0, $45, 0
0000AFC8 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
0000AFCD 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
0000AFD2 04                         byte_A036:	dc.b 4
0000AFD3 E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000AFD8 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000AFDD 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000AFE2 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000AFE7 08                         byte_A04B:	dc.b 8
0000AFE8 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000AFED E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000AFF2 E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000AFF7 F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000AFFC F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000B001 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000B006 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000B00B 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000B010                            		even
0000B010                            		even
0000B010                            
0000B010                            ; ---------------------------------------------------------------------------
0000B010                            ; Sprite mappings - flash effect when you collect the giant ring
0000B010                            ; ---------------------------------------------------------------------------
0000B010                            Map_obj7C:
0000B010                            	include "_maps\obj7C.asm"
0000B010                            ; ---------------------------------------------------------------------------
0000B010                            ; Sprite mappings - flash effect when you collect the giant ring
0000B010                            ; ---------------------------------------------------------------------------
0000B010 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000B014 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000B018 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000B01C 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000B020 02                         byte_A084:	dc.b 2
0000B021 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000B026 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000B02B 04                         byte_A08F:	dc.b 4
0000B02C E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000B031 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000B036 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000B03B 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000B040 04                         byte_A0A4:	dc.b 4
0000B041 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000B046 E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000B04B 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000B050 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000B055 04                         byte_A0B9:	dc.b 4
0000B056 E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000B05B E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000B060 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000B065 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000B06A 04                         byte_A0CE:	dc.b 4
0000B06B E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000B070 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000B075 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000B07A 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000B07F 04                         byte_A0E3:	dc.b 4
0000B080 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000B085 E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000B08A 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000B08F 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000B094 02                         byte_A0F8:	dc.b 2
0000B095 E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000B09A 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000B09F 04                         byte_A103:	dc.b 4
0000B0A0 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000B0A5 E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000B0AA 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000B0AF 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000B0B4                            		even
0000B0B4                            		even
0000B0B4                            
0000B0B4                            ; ===========================================================================
0000B0B4                            ; ---------------------------------------------------------------------------
0000B0B4                            ; Object 26 - monitors
0000B0B4                            ; ---------------------------------------------------------------------------
0000B0B4                            
0000B0B4                            Obj26:					; XREF: Obj_Index
0000B0B4 7000                       		moveq	#0,d0
0000B0B6 1028 0024                  		move.b	$24(a0),d0
0000B0BA 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000B0BE 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000B0C2                            ; ===========================================================================
0000B0C2 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000B0C4 0000                       		dc.w Obj26_Solid-Obj26_Index
0000B0C6 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000B0C8 0000                       		dc.w Obj26_Animate-Obj26_Index
0000B0CA 0000                       		dc.w Obj26_Display-Obj26_Index
0000B0CC                            ; ===========================================================================
0000B0CC                            
0000B0CC                            Obj26_Main:				; XREF: Obj26_Index
0000B0CC 5428 0024                  		addq.b	#2,$24(a0)
0000B0D0 117C 000E 0016             		move.b	#$E,$16(a0)
0000B0D6 117C 000E 0017             		move.b	#$E,$17(a0)
0000B0DC 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000B0E4 317C 0680 0002             		move.w	#$680,2(a0)
0000B0EA 117C 0004 0001             		move.b	#4,1(a0)
0000B0F0 117C 0003 0018             		move.b	#3,$18(a0)
0000B0F6 117C 000F 0019             		move.b	#$F,$19(a0)
0000B0FC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B100 7000                       		moveq	#0,d0
0000B102 1028 0023                  		move.b	$23(a0),d0
0000B106 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000B10C 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000B112 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000B114 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000B11A 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000B120 4E75                       		rts	
0000B122                            ; ===========================================================================
0000B122                            
0000B122                            Obj26_NotBroken:			; XREF: Obj26_Main
0000B122 117C 0046 0020             		move.b	#$46,$20(a0)
0000B128 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000B12E                            
0000B12E                            Obj26_Solid:				; XREF: Obj26_Index
0000B12E 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000B132 6700                       		beq.s	loc_A1EC	; if not, branch
0000B134 5500                       		subq.b	#2,d0
0000B136 6600                       		bne.s	Obj26_Fall
0000B138 7200                       		moveq	#0,d1
0000B13A 1228 0019                  		move.b	$19(a0),d1
0000B13E 0641 000B                  		addi.w	#$B,d1
0000B142 6100 D37C                  		bsr.w	ExitPlatform
0000B146 0829 0003 0022             		btst	#3,$22(a1)
0000B14C 6600 0000                  		bne.w	loc_A1BC
0000B150 4228 0025                  		clr.b	$25(a0)
0000B154 6000 0000                  		bra.w	Obj26_Animate
0000B158                            ; ===========================================================================
0000B158                            
0000B158                            loc_A1BC:				; XREF: Obj26_Solid
0000B158 363C 0010                  		move.w	#$10,d3
0000B15C 3428 0008                  		move.w	8(a0),d2
0000B160 6100 D8BC                  		bsr.w	MvSonicOnPtfm
0000B164 6000 0000                  		bra.w	Obj26_Animate
0000B168                            ; ===========================================================================
0000B168                            
0000B168                            Obj26_Fall:				; XREF: Obj26_Solid
0000B168 6100 0000                  		bsr.w	ObjectFall
0000B16C 4EB9 0000 0000             		jsr	ObjHitFloor
0000B172 4A41                       		tst.w	d1
0000B174 6A00 0000                  		bpl.w	Obj26_Animate
0000B178 D368 000C                  		add.w	d1,$C(a0)
0000B17C 4268 0012                  		clr.w	$12(a0)
0000B180 4228 0025                  		clr.b	$25(a0)
0000B184 6000 0000                  		bra.w	Obj26_Animate
0000B188                            ; ===========================================================================
0000B188                            
0000B188                            loc_A1EC:				; XREF: Obj26_Solid
0000B188 323C 001A                  		move.w	#$1A,d1
0000B18C 343C 000F                  		move.w	#$F,d2
0000B190 6100 0000                  		bsr.w	Obj26_SolidSides
0000B194 6700 0000                  		beq.w	loc_A25C
0000B198 4A69 0012                  		tst.w	$12(a1)
0000B19C 6B00                       		bmi.s	loc_A20A
0000B19E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000B1A4 6700                       		beq.s	loc_A25C	; if yes, branch
0000B1A6                            
0000B1A6                            loc_A20A:
0000B1A6 4A41                       		tst.w	d1
0000B1A8 6A00                       		bpl.s	loc_A220
0000B1AA 9769 000C                  		sub.w	d3,$C(a1)
0000B1AE 6100 D1FE                  		bsr.w	loc_74AE
0000B1B2 117C 0002 0025             		move.b	#2,$25(a0)
0000B1B8 6000 0000                  		bra.w	Obj26_Animate
0000B1BC                            ; ===========================================================================
0000B1BC                            
0000B1BC                            loc_A220:
0000B1BC 4A40                       		tst.w	d0
0000B1BE 6700 0000                  		beq.w	loc_A246
0000B1C2 6B00                       		bmi.s	loc_A230
0000B1C4 4A69 0010                  		tst.w	$10(a1)
0000B1C8 6B00                       		bmi.s	loc_A246
0000B1CA 6000                       		bra.s	loc_A236
0000B1CC                            ; ===========================================================================
0000B1CC                            
0000B1CC                            loc_A230:
0000B1CC 4A69 0010                  		tst.w	$10(a1)
0000B1D0 6A00                       		bpl.s	loc_A246
0000B1D2                            
0000B1D2                            loc_A236:
0000B1D2 9169 0008                  		sub.w	d0,8(a1)
0000B1D6 337C 0000 0014             		move.w	#0,$14(a1)
0000B1DC 337C 0000 0010             		move.w	#0,$10(a1)
0000B1E2                            
0000B1E2                            loc_A246:
0000B1E2 0829 0001 0022             		btst	#1,$22(a1)
0000B1E8 6600                       		bne.s	loc_A26A
0000B1EA 08E9 0005 0022             		bset	#5,$22(a1)
0000B1F0 08E8 0005 0022             		bset	#5,$22(a0)
0000B1F6 6000                       		bra.s	Obj26_Animate
0000B1F8                            ; ===========================================================================
0000B1F8                            
0000B1F8                            loc_A25C:
0000B1F8 0828 0005 0022             		btst	#5,$22(a0)
0000B1FE 6700                       		beq.s	Obj26_Animate
0000B200 337C 0001 001C             		move.w	#1,$1C(a1)
0000B206                            
0000B206                            loc_A26A:
0000B206 08A8 0005 0022             		bclr	#5,$22(a0)
0000B20C 08A9 0005 0022             		bclr	#5,$22(a1)
0000B212                            
0000B212                            Obj26_Animate:				; XREF: Obj26_Index
0000B212 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000B218 6100 0000                  		bsr.w	AnimateSprite
0000B21C                            
0000B21C                            Obj26_Display:				; XREF: Obj26_Index
0000B21C 6100 0000                  		bsr.w	DisplaySprite
0000B220 3028 0008                  		move.w	8(a0),d0
0000B224 0240 FF80                  		andi.w	#$FF80,d0
0000B228 3238 F700                  		move.w	($FFFFF700).w,d1
0000B22C 0441 0080                  		subi.w	#$80,d1
0000B230 0241 FF80                  		andi.w	#$FF80,d1
0000B234 9041                       		sub.w	d1,d0
0000B236 0C40 0280                  		cmpi.w	#$280,d0
0000B23A 6200 0000                  		bhi.w	DeleteObject
0000B23E 4E75                       		rts	
0000B240                            ; ===========================================================================
0000B240                            
0000B240                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000B240 5428 0024                  		addq.b	#2,$24(a0)
0000B244 117C 0000 0020             		move.b	#0,$20(a0)
0000B24A 6100 0000                  		bsr.w	SingleObjLoad
0000B24E 6600                       		bne.s	Obj26_Explode
0000B250 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000B254 3368 0008 0008             		move.w	8(a0),8(a1)
0000B25A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B260 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000B266 7400                       		moveq	#0,d2	; GMZ
0000B268 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0000B26A                            
0000B26A                            Obj26_Explode:
0000B26A 6100 0000                  		bsr.w	SingleObjLoad
0000B26E 6600                       		bne.s	Obj26_SetBroken
0000B270 12BC 0027                  		move.b	#$27,0(a1)	; GMZ: Load explosion object
0000B274 5429 0024                  		addq.b	#2,$24(a1)
0000B278 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0000B27C 3368 0008 0008             		move.w	8(a0),8(a1)
0000B282 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B288                            
0000B288                            Obj26_NextExplosion:
0000B288 5802                       		addq.b	#4,d2
0000B28A 51C9 FFDE                  		dbf	d1,Obj26_Explode
0000B28E                            
0000B28E                            Obj26_SetBroken:
0000B28E 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000B292 7000                       		moveq	#0,d0
0000B294 1028 0023                  		move.b	$23(a0),d0
0000B298 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000B29E 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000B2A4 6000 0000                  		bra.w	DisplaySprite
0000B2A8                            ; ===========================================================================
0000B2A8                            ; ---------------------------------------------------------------------------
0000B2A8                            ; Object 2E - contents of monitors
0000B2A8                            ; ---------------------------------------------------------------------------
0000B2A8                            
0000B2A8                            Obj2E:					; XREF: Obj_Index
0000B2A8 7000                       		moveq	#0,d0
0000B2AA 1028 0024                  		move.b	$24(a0),d0
0000B2AE 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000B2B2 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000B2B6 6000 0000                  		bra.w	DisplaySprite
0000B2BA                            ; ===========================================================================
0000B2BA 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000B2BC 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000B2BE 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000B2C0                            ; ===========================================================================
0000B2C0                            
0000B2C0                            Obj2E_Main:				; XREF: Obj2E_Index
0000B2C0 5428 0024                  		addq.b	#2,$24(a0)
0000B2C4 317C 0680 0002             		move.w	#$680,2(a0)
0000B2CA 117C 0024 0001             		move.b	#$24,1(a0)
0000B2D0 117C 0003 0018             		move.b	#3,$18(a0)
0000B2D6 117C 0008 0019             		move.b	#8,$19(a0)
0000B2DC 317C FD00 0012             		move.w	#-$300,$12(a0)
0000B2E2 7000                       		moveq	#0,d0
0000B2E4 1028 001C                  		move.b	$1C(a0),d0
0000B2E8 5400                       		addq.b	#2,d0
0000B2EA 1140 001A                  		move.b	d0,$1A(a0)
0000B2EE 227C 0000 0000             		movea.l	#Map_obj26,a1
0000B2F4 D000                       		add.b	d0,d0
0000B2F6 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000B2FA 5249                       		addq.w	#1,a1
0000B2FC 2149 0004                  		move.l	a1,4(a0)
0000B300                            
0000B300                            Obj2E_Move:				; XREF: Obj2E_Index
0000B300 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000B304 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000B308 6100 0000                  		bsr.w	SpeedToPos
0000B30C 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000B312 4E75                       		rts	
0000B314                            ; ===========================================================================
0000B314                            
0000B314                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000B314 5428 0024                  		addq.b	#2,$24(a0)
0000B318 317C 001D 001E             		move.w	#29,$1E(a0)
0000B31E 1028 001C                  		move.b	$1C(a0),d0
0000B322 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000B326 6600                       		bne.s	Obj2E_ChkSonic
0000B328 4E75                       		rts			; Eggman monitor does nothing
0000B32A                            ; ===========================================================================
0000B32A                            
0000B32A                            Obj2E_ChkSonic:
0000B32A 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000B32E 6600                       		bne.s	Obj2E_ChkShoes
0000B330                            
0000B330                            ExtraLife:
0000B330 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000B334 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000B338 303C 0088                  		move.w	#$88,d0
0000B33C 4EF9 0000 1C6E             		jmp	(PlaySound).l	; play extra life music
0000B342                            ; ===========================================================================
0000B342                            
0000B342                            Obj2E_ChkShoes:
0000B342 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000B346 6600                       		bne.s	Obj2E_ChkShield
0000B348 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000B34E 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000B354 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000B35A 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000B360 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000B366 303C 00E2                  		move.w	#$E2,d0
0000B36A 4EF9 0000 1C6E             		jmp	(PlaySound).l	; Speed	up the music
0000B370                            ; ===========================================================================
0000B370                            
0000B370                            Obj2E_ChkShield:
0000B370 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000B374 6600                       		bne.s	Obj2E_ChkInvinc
0000B376 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000B37C 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000B382 303C 00AF                  		move.w	#$AF,d0
0000B386 4EF9 0000 1C6E             		jmp	(PlaySound).l	; play shield sound
0000B38C                            ; ===========================================================================
0000B38C                            
0000B38C                            Obj2E_ChkInvinc:
0000B38C 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000B390 6600                       		bne.s	Obj2E_ChkRings
0000B392 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000B398 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000B39E 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000B3A4 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000B3AA 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000B3B0 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000B3B6 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000B3BC 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000B3C2 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000B3C8 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000B3CE 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000B3D2 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000B3D4 303C 0087                  		move.w	#$87,d0
0000B3D8 4EF9 0000 1C6E             		jmp	(PlaySound).l	; play invincibility music
0000B3DE                            ; ===========================================================================
0000B3DE                            
0000B3DE                            Obj2E_NoMusic:
0000B3DE 4E75                       		rts	
0000B3E0                            ; ===========================================================================
0000B3E0                            
0000B3E0                            Obj2E_ChkRings:
0000B3E0 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000B3E4 6600                       		bne.s	Obj2E_ChkS
0000B3E6 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000B3EC 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000B3F2 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000B3F8 6500                       		bcs.s	Obj2E_RingSound
0000B3FA 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000B400 6700 FF2E                  		beq.w	ExtraLife
0000B404 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000B40A 6500                       		bcs.s	Obj2E_RingSound
0000B40C 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000B412 6700 FF1C                  		beq.w	ExtraLife
0000B416                            
0000B416                            Obj2E_RingSound:
0000B416 303C 00B5                  		move.w	#$B5,d0
0000B41A 4EF9 0000 1C6E             		jmp	(PlaySound).l	; play ring sound
0000B420                            ; ===========================================================================
0000B420                            
0000B420                            Obj2E_ChkS:
0000B420 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000B424 6600                       		bne.s	Obj2E_ChkEnd
0000B426                            		; nop	
0000B426 7201                       		moveq	#1,d1
0000B428 B338 FE2F                  		eor.b	d1,($FFFFFE2F).w	; GMZ: Set reverse controls flag when broken, revert when another monitor of same type is broken again
0000B42C                            
0000B42C                            Obj2E_ChkEnd:
0000B42C 4E75                       		rts			; 'S' and goggles monitors do nothing
0000B42E                            ; ===========================================================================
0000B42E                            
0000B42E                            Obj2E_Delete:				; XREF: Obj2E_Index
0000B42E 5368 001E                  		subq.w	#1,$1E(a0)
0000B432 6B00 0000                  		bmi.w	DeleteObject
0000B436 4E75                       		rts	
0000B438                            ; ---------------------------------------------------------------------------
0000B438                            ; Subroutine to	make the sides of a monitor solid
0000B438                            ; ---------------------------------------------------------------------------
0000B438                            
0000B438                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B438                            
0000B438                            
0000B438                            Obj26_SolidSides:			; XREF: loc_A1EC
0000B438 43F8 D000                  		lea	($FFFFD000).w,a1
0000B43C 3029 0008                  		move.w	8(a1),d0
0000B440 9068 0008                  		sub.w	8(a0),d0
0000B444 D041                       		add.w	d1,d0
0000B446 6B00                       		bmi.s	loc_A4E6
0000B448 3601                       		move.w	d1,d3
0000B44A D643                       		add.w	d3,d3
0000B44C B043                       		cmp.w	d3,d0
0000B44E 6200                       		bhi.s	loc_A4E6
0000B450 1629 0016                  		move.b	$16(a1),d3
0000B454 4883                       		ext.w	d3
0000B456 D443                       		add.w	d3,d2
0000B458 3629 000C                  		move.w	$C(a1),d3
0000B45C 9668 000C                  		sub.w	$C(a0),d3
0000B460 D642                       		add.w	d2,d3
0000B462 6B00                       		bmi.s	loc_A4E6
0000B464 D442                       		add.w	d2,d2
0000B466 B642                       		cmp.w	d2,d3
0000B468 6400                       		bcc.s	loc_A4E6
0000B46A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000B46E 6B00                       		bmi.s	loc_A4E6
0000B470 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000B476 6400                       		bcc.s	loc_A4E6
0000B478 4A78 FE08                  		tst.w	($FFFFFE08).w
0000B47C 6600                       		bne.s	loc_A4E6
0000B47E B240                       		cmp.w	d0,d1
0000B480 6400                       		bcc.s	loc_A4DC
0000B482 D241                       		add.w	d1,d1
0000B484 9041                       		sub.w	d1,d0
0000B486                            
0000B486                            loc_A4DC:
0000B486 0C43 0010                  		cmpi.w	#$10,d3
0000B48A 6500                       		bcs.s	loc_A4EA
0000B48C                            
0000B48C                            loc_A4E2:
0000B48C 7201                       		moveq	#1,d1
0000B48E 4E75                       		rts	
0000B490                            ; ===========================================================================
0000B490                            
0000B490                            loc_A4E6:
0000B490 7200                       		moveq	#0,d1
0000B492 4E75                       		rts	
0000B494                            ; ===========================================================================
0000B494                            
0000B494                            loc_A4EA:
0000B494 7200                       		moveq	#0,d1
0000B496 1228 0019                  		move.b	$19(a0),d1
0000B49A 5841                       		addq.w	#4,d1
0000B49C 3401                       		move.w	d1,d2
0000B49E D442                       		add.w	d2,d2
0000B4A0 D269 0008                  		add.w	8(a1),d1
0000B4A4 9268 0008                  		sub.w	8(a0),d1
0000B4A8 6BE2                       		bmi.s	loc_A4E2
0000B4AA B242                       		cmp.w	d2,d1
0000B4AC 64DE                       		bcc.s	loc_A4E2
0000B4AE 72FF                       		moveq	#-1,d1
0000B4B0 4E75                       		rts	
0000B4B2                            ; End of function Obj26_SolidSides
0000B4B2                            
0000B4B2                            ; ===========================================================================
0000B4B2                            Ani_obj26:
0000B4B2                            	include "_anim\obj26.asm"
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2                            ; Animation script - monitors
0000B4B2                            ; ---------------------------------------------------------------------------
0000B4B2 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000B4B8 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000B4BE 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000B4C4 0000                       		dc.w byte_A582-Ani_obj26
0000B4C6 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000B4CC 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000B4D8 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000B4E4 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000B4F0 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000B4FC 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000B508 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000B514 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000B520 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000B52C 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000B534                            		even
0000B534                            		even
0000B534                            
0000B534                            ; ---------------------------------------------------------------------------
0000B534                            ; Sprite mappings - monitors
0000B534                            ; ---------------------------------------------------------------------------
0000B534                            Map_obj26:
0000B534                            	include "_maps\obj26.asm"
0000B534                            ; ================================================================================
0000B534                            ; Sprite Mappings - generated by Flex 2 Sat Mar 22 2025 11:29:00 GMT-0500 (Central Daylight Time)
0000B534                            ; ================================================================================
0000B534                            
0000B534                            DATAY1U343IF3L:
0000B534 0000 0000                  	dc.w DATAY1U343IF3L_0-DATAY1U343IF3L, DATAY1U343IF3L_1-DATAY1U343IF3L
0000B538 0000 0000                  	dc.w DATAY1U343IF3L_2-DATAY1U343IF3L, DATAY1U343IF3L_3-DATAY1U343IF3L
0000B53C 0000 0000                  	dc.w DATAY1U343IF3L_4-DATAY1U343IF3L, DATAY1U343IF3L_5-DATAY1U343IF3L
0000B540 0000 0000                  	dc.w DATAY1U343IF3L_6-DATAY1U343IF3L, DATAY1U343IF3L_7-DATAY1U343IF3L
0000B544 0000 0000                  	dc.w DATAY1U343IF3L_8-DATAY1U343IF3L, DATAY1U343IF3L_9-DATAY1U343IF3L
0000B548 0000 0000                  	dc.w DATAY1U343IF3L_A-DATAY1U343IF3L, DATAY1U343IF3L_B-DATAY1U343IF3L
0000B54C 05                         DATAY1U343IF3L_0: dc.b $5
0000B54D E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B552 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B557 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B55C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B561 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B566 06                         DATAY1U343IF3L_1: dc.b $6
0000B567 F205 0023 F8               	dc.b $F2, $5, $0, $23, $F8
0000B56C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B571 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B576 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B57B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B580 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B585 05                         DATAY1U343IF3L_2: dc.b $5
0000B586 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B58B 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B590 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B595 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B59A 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B59F 05                         DATAY1U343IF3L_3: dc.b $5
0000B5A0 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5A5 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5AA E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5AF 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5B4 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5B9 06                         DATAY1U343IF3L_4: dc.b $6
0000B5BA F205 0027 F8               	dc.b $F2, $5, $0, $27, $F8
0000B5BF E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5C4 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5C9 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5CE 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5D3 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5D8 06                         DATAY1U343IF3L_5: dc.b $6
0000B5D9 F205 002B F8               	dc.b $F2, $5, $0, $2B, $F8
0000B5DE E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B5E3 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B5E8 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B5ED 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B5F2 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B5F7 06                         DATAY1U343IF3L_6: dc.b $6
0000B5F8 F205 002F F8               	dc.b $F2, $5, $0, $2F, $F8
0000B5FD E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B602 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B607 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B60C 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B611 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B616 06                         DATAY1U343IF3L_7: dc.b $6
0000B617 F205 0033 F8               	dc.b $F2, $5, $0, $33, $F8
0000B61C E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B621 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B626 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B62B 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B630 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B635 06                         DATAY1U343IF3L_8: dc.b $6
0000B636 F205 0037 F8               	dc.b $F2, $5, $0, $37, $F8
0000B63B E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B640 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B645 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B64A 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B64F 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B654 06                         DATAY1U343IF3L_9: dc.b $6
0000B655 F205 003B F8               	dc.b $F2, $5, $0, $3B, $F8
0000B65A E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B65F 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B664 E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B669 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B66E 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B673 05                         DATAY1U343IF3L_A: dc.b $5
0000B674 E20F 0000 EB               	dc.b $E2, $F, $0, $0, $EB
0000B679 020D 0010 EB               	dc.b $2, $D, $0, $10, $EB
0000B67E E207 0018 0B               	dc.b $E2, $7, $0, $18, $B
0000B683 0204 0020 0B               	dc.b $2, $4, $0, $20, $B
0000B688 0A00 0022 0B               	dc.b $A, $0, $0, $22, $B
0000B68D 01                         DATAY1U343IF3L_B: dc.b $1
0000B68E FF0D 003F F0               	dc.b $FF, $D, $0, $3F, $F0
0000B694 00                         	even
0000B694 00                         	even
0000B694                            
0000B694                            ; ===========================================================================
0000B694                            ; ---------------------------------------------------------------------------
0000B694                            ; Object 0E - Sonic on the title screen
0000B694                            ; ---------------------------------------------------------------------------
0000B694                            
0000B694                            Obj0E:					; XREF: Obj_Index
0000B694 7000                       		moveq	#0,d0
0000B696 1028 0024                  		move.b	$24(a0),d0
0000B69A 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000B69E 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000B6A2                            ; ===========================================================================
0000B6A2 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000B6A4 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000B6A6 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000B6A8 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000B6AA                            ; ===========================================================================
0000B6AA                            
0000B6AA                            Obj0E_Main:				; XREF: Obj0E_Index
0000B6AA 5428 0024                  		addq.b	#2,$24(a0)
0000B6AE 317C 00F0 0008             		move.w	#$F0,8(a0)
0000B6B4 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000B6BA 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000B6C2 317C 2300 0002             		move.w	#$2300,2(a0)
0000B6C8 117C 0001 0018             		move.b	#1,$18(a0)
0000B6CE 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000B6D4 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B6DA 6100 0000                  		bsr.w	AnimateSprite
0000B6DE                            
0000B6DE                            Obj0E_Delay:				; XREF: Obj0E_Index
0000B6DE 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000B6E2 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000B6E4 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000B6E8 6000 0000                  		bra.w	DisplaySprite
0000B6EC                            ; ===========================================================================
0000B6EC                            
0000B6EC                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000B6EC 4E75                       		rts	
0000B6EE                            ; ===========================================================================
0000B6EE                            
0000B6EE                            Obj0E_Move:				; XREF: Obj0E_Index
0000B6EE 5168 000A                  		subq.w	#8,$A(a0)
0000B6F2 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000B6F8 6600                       		bne.s	Obj0E_Display
0000B6FA 5428 0024                  		addq.b	#2,$24(a0)
0000B6FE                            
0000B6FE                            Obj0E_Display:
0000B6FE 6000 0000                  		bra.w	DisplaySprite
0000B702                            ; ===========================================================================
0000B702 4E75                       		rts	
0000B704                            ; ===========================================================================
0000B704                            
0000B704                            Obj0E_Animate:				; XREF: Obj0E_Index
0000B704 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000B70A 6100 0000                  		bsr.w	AnimateSprite
0000B70E 6000 0000                  		bra.w	DisplaySprite
0000B712                            ; ===========================================================================
0000B712 4E75                       		rts	
0000B714                            ; ===========================================================================
0000B714                            ; ---------------------------------------------------------------------------
0000B714                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000B714                            ; ---------------------------------------------------------------------------
0000B714                            
0000B714                            Obj0F:					; XREF: Obj_Index
0000B714 7000                       		moveq	#0,d0
0000B716 1028 0024                  		move.b	$24(a0),d0
0000B71A 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000B71E 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000B722 6000 0000                  		bra.w	DisplaySprite
0000B726                            ; ===========================================================================
0000B726 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000B728 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000B72A 0000                       		dc.w locret_A6F8-Obj0F_Index
0000B72C                            ; ===========================================================================
0000B72C                            
0000B72C                            Obj0F_Main:				; XREF: Obj0F_Index
0000B72C 5428 0024                  		addq.b	#2,$24(a0)
0000B730 317C 00D0 0008             		move.w	#$D0,8(a0)
0000B736 317C 0130 000A             		move.w	#$130,$A(a0)
0000B73C 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000B744 317C 0200 0002             		move.w	#$200,2(a0)
0000B74A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000B750 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000B752 5428 0024                  		addq.b	#2,$24(a0)
0000B756 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000B75C 6600                       		bne.s	locret_A6F8	; if not, branch
0000B75E 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000B764 317C 0170 0008             		move.w	#$170,8(a0)
0000B76A 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000B770                            
0000B770                            locret_A6F8:				; XREF: Obj0F_Index
0000B770 4E75                       		rts	
0000B772                            ; ===========================================================================
0000B772                            
0000B772                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000B772 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000B778 6000 0000                  		bra.w	AnimateSprite
0000B77C                            ; ===========================================================================
0000B77C                            Ani_obj0E:
0000B77C                            	include "_anim\obj0E.asm"
0000B77C                            ; ---------------------------------------------------------------------------
0000B77C                            ; Animation script - Sonic on the title screen
0000B77C                            ; ---------------------------------------------------------------------------
0000B77C 0000                       		dc.w byte_A706-Ani_obj0E
0000B77E 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000B78A                            		even
0000B78A                            		even
0000B78A                            
0000B78A                            Ani_obj0F:
0000B78A                            	include "_anim\obj0F.asm"
0000B78A                            ; ---------------------------------------------------------------------------
0000B78A                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000B78A                            ; ---------------------------------------------------------------------------
0000B78A 0000                       		dc.w byte_A714-Ani_obj0F
0000B78C 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000B790                            		even
0000B790                            		even
0000B790                            
0000B790                            ; ---------------------------------------------------------------------------
0000B790                            ; Subroutine to	animate	a sprite using an animation script
0000B790                            ; ---------------------------------------------------------------------------
0000B790                            
0000B790                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B790                            
0000B790                            
0000B790                            AnimateSprite:
0000B790 7000                       		moveq	#0,d0
0000B792 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000B796 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000B79A 6700                       		beq.s	Anim_Run	; if not, branch
0000B79C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000B7A0 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B7A6 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000B7AC                            
0000B7AC                            Anim_Run:
0000B7AC 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000B7B0 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000B7B2 D040                       		add.w	d0,d0
0000B7B4 D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000B7B8 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000B7BC 7200                       		moveq	#0,d1
0000B7BE 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000B7C2 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000B7C6 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000B7C8                            
0000B7C8                            Anim_Next:
0000B7C8 1200                       		move.b	d0,d1
0000B7CA 0200 001F                  		andi.b	#$1F,d0
0000B7CE 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000B7D2 1028 0022                  		move.b	$22(a0),d0
0000B7D6 E719                       		rol.b	#3,d1
0000B7D8 B101                       		eor.b	d0,d1
0000B7DA 0201 0003                  		andi.b	#3,d1
0000B7DE 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000B7E4 8328 0001                  		or.b	d1,1(a0)
0000B7E8 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000B7EC                            
0000B7EC                            Anim_Wait:
0000B7EC 4E75                       		rts	
0000B7EE                            ; ===========================================================================
0000B7EE                            
0000B7EE                            Anim_End_FF:
0000B7EE 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000B7F0 6600                       		bne.s	Anim_End_FE	; if not, branch
0000B7F2 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000B7F8 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000B7FC 60CA                       		bra.s	Anim_Next
0000B7FE                            ; ===========================================================================
0000B7FE                            
0000B7FE                            Anim_End_FE:
0000B7FE 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000B800 6600                       		bne.s	Anim_End_FD	; if not, branch
0000B802 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000B806 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000B80A 9200                       		sub.b	d0,d1
0000B80C 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000B810 60B6                       		bra.s	Anim_Next
0000B812                            ; ===========================================================================
0000B812                            
0000B812                            Anim_End_FD:
0000B812 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000B814 6600                       		bne.s	Anim_End_FC	; if not, branch
0000B816 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000B81C                            
0000B81C                            Anim_End_FC:
0000B81C 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000B81E 6600                       		bne.s	Anim_End_FB	; if not, branch
0000B820 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000B824                            
0000B824                            Anim_End_FB:
0000B824 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000B826 6600                       		bne.s	Anim_End_FA	; if not, branch
0000B828 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000B82E 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000B832                            
0000B832                            Anim_End_FA:
0000B832 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000B834 6600                       		bne.s	Anim_End	; if not, branch
0000B836 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000B83A                            
0000B83A                            Anim_End:
0000B83A 4E75                       		rts	
0000B83C                            ; End of function AnimateSprite
0000B83C                            
0000B83C                            ; ===========================================================================
0000B83C                            ; ---------------------------------------------------------------------------
0000B83C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B83C                            ; ---------------------------------------------------------------------------
0000B83C                            Map_obj0F:
0000B83C                            	include "_maps\obj0F.asm"
0000B83C                            ; ---------------------------------------------------------------------------
0000B83C                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000B83C                            ; ---------------------------------------------------------------------------
0000B83C 0000                       		dc.w byte_A7CD-Map_obj0F
0000B83E 0000                       		dc.w byte_A7CC-Map_obj0F
0000B840 0000                       		dc.w byte_A7EB-Map_obj0F
0000B842 0000                       		dc.w byte_A882-Map_obj0F
0000B844 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000B845 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000B84A 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000B84F 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000B854 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000B859 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000B85E 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000B863 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000B864 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B869 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B86E B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B873 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B878 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B87D B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B882 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B887 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B88C B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B891 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000B896 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B89B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8A0 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8A5 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8AA D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8AF D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8B4 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8B9 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8BE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8C3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000B8C8 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8CD F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8D2 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8D7 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8DC F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8E1 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8E6 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8EB F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8F0 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8F5 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000B8FA 01                         byte_A882:	dc.b 1			; "TM"
0000B8FB FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000B900                            		even
0000B900                            		even
0000B900                            
0000B900                            ; ---------------------------------------------------------------------------
0000B900                            ; Sprite mappings - Sonic on the title screen
0000B900                            ; ---------------------------------------------------------------------------
0000B900                            Map_obj0E:
0000B900                            	include "_maps\obj0E.asm"
0000B900                            ; ================================================================================
0000B900                            ; Sprite Mappings - generated by Flex 2 Sun Mar 23 2025 15:32:50 GMT-0500 (Central Daylight Time)
0000B900                            ; ================================================================================
0000B900                            
0000B900                            DATAGKI0HYDQBXP:
0000B900 0000 0000                  	dc.w DATAGKI0HYDQBXP_0-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_1-DATAGKI0HYDQBXP
0000B904 0000 0000                  	dc.w DATAGKI0HYDQBXP_2-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_3-DATAGKI0HYDQBXP
0000B908 0000 0000                  	dc.w DATAGKI0HYDQBXP_4-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_5-DATAGKI0HYDQBXP
0000B90C 0000 0000                  	dc.w DATAGKI0HYDQBXP_6-DATAGKI0HYDQBXP, DATAGKI0HYDQBXP_7-DATAGKI0HYDQBXP
0000B910 08                         DATAGKI0HYDQBXP_0: dc.b $8
0000B911 0C0F 0126 08               	dc.b $C, $F, $1, $26, $8
0000B916 2C0F 0136 08               	dc.b $2C, $F, $1, $36, $8
0000B91B 4C0D 0146 08               	dc.b $4C, $D, $1, $46, $8
0000B920 0408 014E 20               	dc.b $4, $8, $1, $4E, $20
0000B925 0C0B 0151 28               	dc.b $C, $B, $1, $51, $28
0000B92A 2C0B 015D 28               	dc.b $2C, $B, $1, $5D, $28
0000B92F 4C05 0169 28               	dc.b $4C, $5, $1, $69, $28
0000B934 1407 016D 40               	dc.b $14, $7, $1, $6D, $40
0000B939 0B                         DATAGKI0HYDQBXP_1: dc.b $B
0000B93A 060F 0175 01               	dc.b $6, $F, $1, $75, $1
0000B93F 060F 0185 21               	dc.b $6, $F, $1, $85, $21
0000B944 0607 0195 41               	dc.b $6, $7, $1, $95, $41
0000B949 260F 019D 01               	dc.b $26, $F, $1, $9D, $1
0000B94E 260F 01AD 21               	dc.b $26, $F, $1, $AD, $21
0000B953 2607 01BD 41               	dc.b $26, $7, $1, $BD, $41
0000B958 460C 01C5 01               	dc.b $46, $C, $1, $C5, $1
0000B95D 460E 01C9 21               	dc.b $46, $E, $1, $C9, $21
0000B962 4606 01D5 41               	dc.b $46, $6, $1, $D5, $41
0000B967 4E08 01DB 09               	dc.b $4E, $8, $1, $DB, $9
0000B96C 5604 01DE 11               	dc.b $56, $4, $1, $DE, $11
0000B971 0B                         DATAGKI0HYDQBXP_2: dc.b $B
0000B972 F20F 0175 01               	dc.b $F2, $F, $1, $75, $1
0000B977 F20F 0185 21               	dc.b $F2, $F, $1, $85, $21
0000B97C F207 0195 41               	dc.b $F2, $7, $1, $95, $41
0000B981 120F 019D 01               	dc.b $12, $F, $1, $9D, $1
0000B986 120F 01AD 21               	dc.b $12, $F, $1, $AD, $21
0000B98B 1207 01BD 41               	dc.b $12, $7, $1, $BD, $41
0000B990 320C 01C5 01               	dc.b $32, $C, $1, $C5, $1
0000B995 320E 01C9 21               	dc.b $32, $E, $1, $C9, $21
0000B99A 3206 01D5 41               	dc.b $32, $6, $1, $D5, $41
0000B99F 3A08 01DB 09               	dc.b $3A, $8, $1, $DB, $9
0000B9A4 4204 01DE 11               	dc.b $42, $4, $1, $DE, $11
0000B9A9 0A                         DATAGKI0HYDQBXP_3: dc.b $A
0000B9AA FC0F 0000 08               	dc.b $FC, $F, $0, $0, $8
0000B9AF F408 0010 28               	dc.b $F4, $8, $0, $10, $28
0000B9B4 FC0F 0013 28               	dc.b $FC, $F, $0, $13, $28
0000B9B9 0400 0023 48               	dc.b $4, $0, $0, $23, $48
0000B9BE 0C06 0024 48               	dc.b $C, $6, $0, $24, $48
0000B9C3 2400 002A 48               	dc.b $24, $0, $0, $2A, $48
0000B9C8 1C0D 002B 08               	dc.b $1C, $D, $0, $2B, $8
0000B9CD 1C0E 0033 28               	dc.b $1C, $E, $0, $33, $28
0000B9D2 2C0B 003F 10               	dc.b $2C, $B, $0, $3F, $10
0000B9D7 3408 004B 28               	dc.b $34, $8, $0, $4B, $28
0000B9DC 10                         DATAGKI0HYDQBXP_4: dc.b $10
0000B9DD F80F 01E0 09               	dc.b $F8, $F, $1, $E0, $9
0000B9E2 F807 01F0 29               	dc.b $F8, $7, $1, $F0, $29
0000B9E7 0003 01F8 01               	dc.b $0, $3, $1, $F8, $1
0000B9EC 0003 01FC 39               	dc.b $0, $3, $1, $FC, $39
0000B9F1 1001 0200 F9               	dc.b $10, $1, $2, $0, $F9
0000B9F6 180D 0202 09               	dc.b $18, $D, $2, $2, $9
0000B9FB 1807 020A 29               	dc.b $18, $7, $2, $A, $29
0000BA00 1803 0212 41               	dc.b $18, $3, $2, $12, $41
0000BA05 2001 0216 01               	dc.b $20, $1, $2, $16, $1
0000BA0A 2003 0218 39               	dc.b $20, $3, $2, $18, $39
0000BA0F 2808 021C 11               	dc.b $28, $8, $2, $1C, $11
0000BA14 3007 021F 19               	dc.b $30, $7, $2, $1F, $19
0000BA19 3801 0227 11               	dc.b $38, $1, $2, $27, $11
0000BA1E 3806 0229 29               	dc.b $38, $6, $2, $29, $29
0000BA23 3801 022F 41               	dc.b $38, $1, $2, $2F, $41
0000BA28 4001 0231 39               	dc.b $40, $1, $2, $31, $39
0000BA2D 0B                         DATAGKI0HYDQBXP_5: dc.b $B
0000BA2E 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000BA33 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000BA38 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000BA3D 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000BA42 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000BA47 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000BA4C 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000BA51 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000BA56 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000BA5B 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000BA60 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000BA65 0F                         DATAGKI0HYDQBXP_6: dc.b $F
0000BA66 EC0F 004E E2               	dc.b $EC, $F, $0, $4E, $E2
0000BA6B 0C0F 005E E2               	dc.b $C, $F, $0, $5E, $E2
0000BA70 2C0F 006E E2               	dc.b $2C, $F, $0, $6E, $E2
0000BA75 EC0F 007E 02               	dc.b $EC, $F, $0, $7E, $2
0000BA7A 0C0F 008E 02               	dc.b $C, $F, $0, $8E, $2
0000BA7F 2C0F 009E 02               	dc.b $2C, $F, $0, $9E, $2
0000BA84 EC0F 00AE 22               	dc.b $EC, $F, $0, $AE, $22
0000BA89 0C0F 00BE 22               	dc.b $C, $F, $0, $BE, $22
0000BA8E 2C0F 00CE 22               	dc.b $2C, $F, $0, $CE, $22
0000BA93 EC0F 00DE 42               	dc.b $EC, $F, $0, $DE, $42
0000BA98 0C0F 00EE 42               	dc.b $C, $F, $0, $EE, $42
0000BA9D 2C0F 00FE 42               	dc.b $2C, $F, $0, $FE, $42
0000BAA2 EC07 010E 62               	dc.b $EC, $7, $1, $E, $62
0000BAA7 0C07 0116 62               	dc.b $C, $7, $1, $16, $62
0000BAAC 2C07 011E 62               	dc.b $2C, $7, $1, $1E, $62
0000BAB1 0F                         DATAGKI0HYDQBXP_7: dc.b $F
0000BAB2 EC0F 0233 E2               	dc.b $EC, $F, $2, $33, $E2
0000BAB7 0C0F 0243 E2               	dc.b $C, $F, $2, $43, $E2
0000BABC 2C0F 0253 E2               	dc.b $2C, $F, $2, $53, $E2
0000BAC1 EC0F 0263 02               	dc.b $EC, $F, $2, $63, $2
0000BAC6 0C0F 0273 02               	dc.b $C, $F, $2, $73, $2
0000BACB 2C0F 0283 02               	dc.b $2C, $F, $2, $83, $2
0000BAD0 EC0F 0293 22               	dc.b $EC, $F, $2, $93, $22
0000BAD5 0C0F 02A3 22               	dc.b $C, $F, $2, $A3, $22
0000BADA 2C0F 02B3 22               	dc.b $2C, $F, $2, $B3, $22
0000BADF EC0F 02C3 42               	dc.b $EC, $F, $2, $C3, $42
0000BAE4 0C0F 02D3 42               	dc.b $C, $F, $2, $D3, $42
0000BAE9 2C0F 02E3 42               	dc.b $2C, $F, $2, $E3, $42
0000BAEE EC07 02F3 62               	dc.b $EC, $7, $2, $F3, $62
0000BAF3 0C07 02FB 62               	dc.b $C, $7, $2, $FB, $62
0000BAF8 2C07 0303 62               	dc.b $2C, $7, $3, $3, $62
0000BAFE 00                         	even
0000BAFE 00                         	even
0000BAFE                            
0000BAFE                            ; ===========================================================================
0000BAFE                            ; ---------------------------------------------------------------------------
0000BAFE                            ; Object 2B - Chopper enemy (GHZ)
0000BAFE                            ; ---------------------------------------------------------------------------
0000BAFE                            
0000BAFE                            Obj2B:					; XREF: Obj_Index
0000BAFE 7000                       		moveq	#0,d0
0000BB00 1028 0024                  		move.b	$24(a0),d0
0000BB04 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000BB08 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000BB0C 6000 0000                  		bra.w	MarkObjGone
0000BB10                            ; ===========================================================================
0000BB10 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000BB12 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000BB14                            ; ===========================================================================
0000BB14                            
0000BB14                            Obj2B_Main:				; XREF: Obj2B_Index
0000BB14 5428 0024                  		addq.b	#2,$24(a0)
0000BB18 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000BB20 317C 047B 0002             		move.w	#$47B,2(a0)
0000BB26 117C 0004 0001             		move.b	#4,1(a0)
0000BB2C 117C 0004 0018             		move.b	#4,$18(a0)
0000BB32 117C 0009 0020             		move.b	#9,$20(a0)
0000BB38 117C 0010 0019             		move.b	#$10,$19(a0)
0000BB3E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BB44 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000BB4A                            
0000BB4A                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000BB4A 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000BB50 6100 FC3E                  		bsr.w	AnimateSprite
0000BB54 6100 0000                  		bsr.w	SpeedToPos
0000BB58 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000BB5E 3028 0030                  		move.w	$30(a0),d0
0000BB62 B068 000C                  		cmp.w	$C(a0),d0
0000BB66 6400                       		bcc.s	Obj2B_ChgAni
0000BB68 3140 000C                  		move.w	d0,$C(a0)
0000BB6C 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000BB72                            
0000BB72                            Obj2B_ChgAni:
0000BB72 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000BB78 0440 00C0                  		subi.w	#$C0,d0
0000BB7C B068 000C                  		cmp.w	$C(a0),d0
0000BB80 6400                       		bcc.s	locret_ABB6
0000BB82 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000BB88 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000BB8C 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000BB8E 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000BB94                            
0000BB94                            locret_ABB6:
0000BB94 4E75                       		rts	
0000BB96                            ; ===========================================================================
0000BB96                            Ani_obj2B:
0000BB96                            	include "_anim\obj2B.asm"
0000BB96                            ; ---------------------------------------------------------------------------
0000BB96                            ; Animation script - Chopper enemy
0000BB96                            ; ---------------------------------------------------------------------------
0000BB96 0000                       		dc.w byte_ABBE-Ani_obj2B
0000BB98 0000                       		dc.w byte_ABC2-Ani_obj2B
0000BB9A 0000                       		dc.w byte_ABC6-Ani_obj2B
0000BB9C 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000BBA0 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000BBA4 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000BBA8 00                         		even
0000BBA8 00                         		even
0000BBA8                            
0000BBA8                            ; ---------------------------------------------------------------------------
0000BBA8                            ; Sprite mappings - Chopper enemy (GHZ)
0000BBA8                            ; ---------------------------------------------------------------------------
0000BBA8                            Map_obj2B:
0000BBA8                            	include "_maps\obj2B.asm"
0000BBA8                            Map_1ff1:
0000BBA8 0000                       Map_1ff1_0: 	dc.w Map_1ff1_4-Map_1ff1
0000BBAA 0000                       Map_1ff1_2: 	dc.w Map_1ff1_F-Map_1ff1
0000BBAC 02                         Map_1ff1_4: 	dc.b $2
0000BBAD E80B 0000 F4               	dc.b $E8, $B, $0, $0, $F4
0000BBB2 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000BBB7 02                         Map_1ff1_F: 	dc.b $2
0000BBB8 E80B 0012 F4               	dc.b $E8, $B, $0, $12, $F4
0000BBBD 0809 000C F4               	dc.b $8, $9, $0, $C, $F4
0000BBC2                            	even
0000BBC2                            	even
0000BBC2                            
0000BBC2                            ; ===========================================================================
0000BBC2                            ; ---------------------------------------------------------------------------
0000BBC2                            ; Object 2C - Jaws enemy (LZ)
0000BBC2                            ; ---------------------------------------------------------------------------
0000BBC2                            
0000BBC2                            Obj2C:					; XREF: Obj_Index
0000BBC2 7000                       		moveq	#0,d0
0000BBC4 1028 0024                  		move.b	$24(a0),d0
0000BBC8 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000BBCC 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000BBD0                            ; ===========================================================================
0000BBD0 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000BBD2 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000BBD4                            ; ===========================================================================
0000BBD4                            
0000BBD4                            Obj2C_Main:				; XREF: Obj2C_Index
0000BBD4 5428 0024                  		addq.b	#2,$24(a0)
0000BBD8 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000BBE0 317C 2486 0002             		move.w	#$2486,2(a0)
0000BBE6 0028 0004 0001             		ori.b	#4,1(a0)
0000BBEC 117C 000A 0020             		move.b	#$A,$20(a0)
0000BBF2 117C 0004 0018             		move.b	#4,$18(a0)
0000BBF8 117C 0010 0019             		move.b	#$10,$19(a0)
0000BBFE 7000                       		moveq	#0,d0
0000BC00 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000BC04 ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000BC06 5340                       		subq.w	#1,d0
0000BC08 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000BC0C 3140 0032                  		move.w	d0,$32(a0)
0000BC10 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000BC16 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000BC1C 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000BC1E 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000BC22                            
0000BC22                            Obj2C_Turn:				; XREF: Obj2C_Index
0000BC22 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000BC26 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000BC28 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000BC2E 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000BC32 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000BC38 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000BC3E                            
0000BC3E                            Obj2C_Animate:
0000BC3E 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000BC44 6100 FB4A                  		bsr.w	AnimateSprite
0000BC48 6100 0000                  		bsr.w	SpeedToPos
0000BC4C 6000 0000                  		bra.w	MarkObjGone
0000BC50                            ; ===========================================================================
0000BC50                            Ani_obj2C:
0000BC50                            	include "_anim\obj2C.asm"
0000BC50                            ; ---------------------------------------------------------------------------
0000BC50                            ; Animation script - Jaws enemy
0000BC50                            ; ---------------------------------------------------------------------------
0000BC50 0000                       		dc.w byte_AC6A-Ani_obj2C
0000BC52 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000BC58                            		even
0000BC58                            		even
0000BC58                            
0000BC58                            ; ---------------------------------------------------------------------------
0000BC58                            ; Sprite mappings - Jaws enemy (LZ)
0000BC58                            ; ---------------------------------------------------------------------------
0000BC58                            Map_obj2C:
0000BC58                            	include "_maps\obj2C.asm"
0000BC58                            ; ---------------------------------------------------------------------------
0000BC58                            ; Sprite mappings - Jaws enemy (LZ)
0000BC58                            ; ---------------------------------------------------------------------------
0000BC58 0000                       		dc.w byte_AC78-Map_obj2C
0000BC5A 0000                       		dc.w byte_AC83-Map_obj2C
0000BC5C 0000                       		dc.w byte_AC8E-Map_obj2C
0000BC5E 0000                       		dc.w byte_AC99-Map_obj2C
0000BC60 02                         byte_AC78:	dc.b 2
0000BC61 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BC66 F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000BC6B 02                         byte_AC83:	dc.b 2
0000BC6C F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BC71 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000BC76 02                         byte_AC8E:	dc.b 2
0000BC77 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000BC7C F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000BC81 02                         byte_AC99:	dc.b 2
0000BC82 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000BC87 F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000BC8C                            		even
0000BC8C                            		even
0000BC8C                            
0000BC8C                            ; ===========================================================================
0000BC8C                            ; ---------------------------------------------------------------------------
0000BC8C                            ; Object 2D - Burrobot enemy (LZ)
0000BC8C                            ; ---------------------------------------------------------------------------
0000BC8C                            
0000BC8C                            Obj2D:					; XREF: Obj_Index
0000BC8C 7000                       		moveq	#0,d0
0000BC8E 1028 0024                  		move.b	$24(a0),d0
0000BC92 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000BC96 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000BC9A                            ; ===========================================================================
0000BC9A 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000BC9C 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000BC9E                            ; ===========================================================================
0000BC9E                            
0000BC9E                            Obj2D_Main:				; XREF: Obj2D_Index
0000BC9E 5428 0024                  		addq.b	#2,$24(a0)
0000BCA2 117C 0013 0016             		move.b	#$13,$16(a0)
0000BCA8 117C 0008 0017             		move.b	#8,$17(a0)
0000BCAE 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000BCB6 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000BCBC 0028 0004 0001             		ori.b	#4,1(a0)
0000BCC2 117C 0004 0018             		move.b	#4,$18(a0)
0000BCC8 117C 0005 0020             		move.b	#5,$20(a0)
0000BCCE 117C 000C 0019             		move.b	#$C,$19(a0)
0000BCD4 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000BCD8 117C 0002 001C             		move.b	#2,$1C(a0)
0000BCDE                            
0000BCDE                            Obj2D_Action:				; XREF: Obj2D_Index
0000BCDE 7000                       		moveq	#0,d0
0000BCE0 1028 0025                  		move.b	$25(a0),d0
0000BCE4 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000BCE8 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000BCEC 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000BCF2 6100 FA9C                  		bsr.w	AnimateSprite
0000BCF6 6000 0000                  		bra.w	MarkObjGone
0000BCFA                            ; ===========================================================================
0000BCFA 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000BCFC 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000BCFE 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000BD00 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000BD02                            ; ===========================================================================
0000BD02                            
0000BD02                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000BD02 5368 0030                  		subq.w	#1,$30(a0)
0000BD06 6A00                       		bpl.s	locret_AD42
0000BD08 5428 0025                  		addq.b	#2,$25(a0)
0000BD0C 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BD12 317C 0080 0010             		move.w	#$80,$10(a0)
0000BD18 117C 0001 001C             		move.b	#1,$1C(a0)
0000BD1E 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000BD24 6700                       		beq.s	locret_AD42
0000BD26 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000BD2A                            
0000BD2A                            locret_AD42:
0000BD2A 4E75                       		rts	
0000BD2C                            ; ===========================================================================
0000BD2C                            
0000BD2C                            Obj2D_Move:				; XREF: Obj2D_Index2
0000BD2C 5368 0030                  		subq.w	#1,$30(a0)
0000BD30 6B00                       		bmi.s	loc_AD84
0000BD32 6100 0000                  		bsr.w	SpeedToPos
0000BD36 0868 0000 0032             		bchg	#0,$32(a0)
0000BD3C 6600                       		bne.s	loc_AD78
0000BD3E 3628 0008                  		move.w	8(a0),d3
0000BD42 0643 000C                  		addi.w	#$C,d3
0000BD46 0828 0000 0022             		btst	#0,$22(a0)
0000BD4C 6600                       		bne.s	loc_AD6A
0000BD4E 0443 0018                  		subi.w	#$18,d3
0000BD52                            
0000BD52                            loc_AD6A:
0000BD52 4EB9 0000 0000             		jsr	ObjHitFloor2
0000BD58 0C41 000C                  		cmpi.w	#$C,d1
0000BD5C 6C00                       		bge.s	loc_AD84
0000BD5E 4E75                       		rts	
0000BD60                            ; ===========================================================================
0000BD60                            
0000BD60                            loc_AD78:				; XREF: Obj2D_Move
0000BD60 4EB9 0000 0000             		jsr	ObjHitFloor
0000BD66 D368 000C                  		add.w	d1,$C(a0)
0000BD6A 4E75                       		rts	
0000BD6C                            ; ===========================================================================
0000BD6C                            
0000BD6C                            loc_AD84:				; XREF: Obj2D_Move
0000BD6C 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000BD72 6700                       		beq.s	loc_ADA4
0000BD74 5528 0025                  		subq.b	#2,$25(a0)
0000BD78 317C 003B 0030             		move.w	#$3B,$30(a0)
0000BD7E 317C 0000 0010             		move.w	#0,$10(a0)
0000BD84 117C 0000 001C             		move.b	#0,$1C(a0)
0000BD8A 4E75                       		rts	
0000BD8C                            ; ===========================================================================
0000BD8C                            
0000BD8C                            loc_ADA4:
0000BD8C 5428 0025                  		addq.b	#2,$25(a0)
0000BD90 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BD96 117C 0002 001C             		move.b	#2,$1C(a0)
0000BD9C 4E75                       		rts	
0000BD9E                            ; ===========================================================================
0000BD9E                            
0000BD9E                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000BD9E 6100 0000                  		bsr.w	SpeedToPos
0000BDA2 0668 0018 0012             		addi.w	#$18,$12(a0)
0000BDA8 6B00                       		bmi.s	locret_ADF0
0000BDAA 117C 0003 001C             		move.b	#3,$1C(a0)
0000BDB0 4EB9 0000 0000             		jsr	ObjHitFloor
0000BDB6 4A41                       		tst.w	d1
0000BDB8 6A00                       		bpl.s	locret_ADF0
0000BDBA D368 000C                  		add.w	d1,$C(a0)
0000BDBE 317C 0000 0012             		move.w	#0,$12(a0)
0000BDC4 117C 0001 001C             		move.b	#1,$1C(a0)
0000BDCA 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000BDD0 5528 0025                  		subq.b	#2,$25(a0)
0000BDD4 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BDD8                            
0000BDD8                            locret_ADF0:
0000BDD8 4E75                       		rts	
0000BDDA                            ; ===========================================================================
0000BDDA                            
0000BDDA                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000BDDA 343C 0060                  		move.w	#$60,d2
0000BDDE 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000BDE2 6400                       		bcc.s	locret_AE20
0000BDE4 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000BDE8 9068 000C                  		sub.w	$C(a0),d0
0000BDEC 6400                       		bcc.s	locret_AE20
0000BDEE 0C40 FF80                  		cmpi.w	#-$80,d0
0000BDF2 6500                       		bcs.s	locret_AE20
0000BDF4 4A78 FE08                  		tst.w	($FFFFFE08).w
0000BDF8 6600                       		bne.s	locret_AE20
0000BDFA 5528 0025                  		subq.b	#2,$25(a0)
0000BDFE 3141 0010                  		move.w	d1,$10(a0)
0000BE02 317C FC00 0012             		move.w	#-$400,$12(a0)
0000BE08                            
0000BE08                            locret_AE20:
0000BE08 4E75                       		rts	
0000BE0A                            
0000BE0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BE0A                            
0000BE0A                            
0000BE0A                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000BE0A 323C 0080                  		move.w	#$80,d1
0000BE0E 08E8 0000 0022             		bset	#0,$22(a0)
0000BE14 3038 D008                  		move.w	($FFFFD008).w,d0
0000BE18 9068 0008                  		sub.w	8(a0),d0
0000BE1C 6400                       		bcc.s	loc_AE40
0000BE1E 4440                       		neg.w	d0
0000BE20 4441                       		neg.w	d1
0000BE22 08A8 0000 0022             		bclr	#0,$22(a0)
0000BE28                            
0000BE28                            loc_AE40:
0000BE28 B042                       		cmp.w	d2,d0
0000BE2A 4E75                       		rts	
0000BE2C                            ; End of function Obj2D_ChkSonic2
0000BE2C                            
0000BE2C                            ; ===========================================================================
0000BE2C                            Ani_obj2D:
0000BE2C                            	include "_anim\obj2D.asm"
0000BE2C                            ; ---------------------------------------------------------------------------
0000BE2C                            ; Animation script - Burrobot enemy but craig
0000BE2C                            ; ---------------------------------------------------------------------------
0000BE2C 0000                       		dc.w byte_AE4C-Ani_obj2D
0000BE2E 0000                       		dc.w byte_AE50-Ani_obj2D
0000BE30 0000                       		dc.w byte_AE54-Ani_obj2D
0000BE32 0000                       		dc.w byte_AE58-Ani_obj2D
0000BE34 0300 FF                    byte_AE4C:	dc.b 3,	0, $FF ; wait
0000BE37 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF ; waddle
0000BE3B 0100 0102 0304 0506 0708+  byte_AE54:	dc.b 1,	0, 1, 2, 3, 4, 5, 6, 7, 8, 3, 9, $A, $FF ; speen
0000BE49 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000BE4C                            		even
0000BE4C                            		even
0000BE4C                            
0000BE4C                            ; ---------------------------------------------------------------------------
0000BE4C                            ; Sprite mappings - Burrobot enemy (LZ)
0000BE4C                            ; ---------------------------------------------------------------------------
0000BE4C                            Map_obj2D:
0000BE4C                            	include "_maps\obj2D.asm"
0000BE4C                            Map_e3a3:
0000BE4C 0000                       Map_e3a3_0: 	dc.w Map_e3a3_16-Map_e3a3
0000BE4E 0000                       Map_e3a3_2: 	dc.w Map_e3a3_21-Map_e3a3
0000BE50 0000                       Map_e3a3_4: 	dc.w Map_e3a3_2C-Map_e3a3
0000BE52 0000                       Map_e3a3_6: 	dc.w Map_e3a3_37-Map_e3a3
0000BE54 0000                       Map_e3a3_8: 	dc.w Map_e3a3_42-Map_e3a3
0000BE56 0000                       Map_e3a3_A: 	dc.w Map_e3a3_4D-Map_e3a3
0000BE58 0000                       Map_e3a3_C: 	dc.w Map_e3a3_58-Map_e3a3
0000BE5A 0000                       Map_e3a3_E: 	dc.w Map_e3a3_63-Map_e3a3
0000BE5C 0000                       Map_e3a3_10: 	dc.w Map_e3a3_6E-Map_e3a3
0000BE5E 0000                       Map_e3a3_12: 	dc.w Map_e3a3_79-Map_e3a3
0000BE60 0000                       Map_e3a3_14: 	dc.w Map_e3a3_84-Map_e3a3
0000BE62 02                         Map_e3a3_16: 	dc.b $2
0000BE63 EC0B 0800 F4               	dc.b $EC, $B, $8, $0, $F4
0000BE68 0C08 080C F4               	dc.b $C, $8, $8, $C, $F4
0000BE6D 02                         Map_e3a3_21: 	dc.b $2
0000BE6E EC07 080F F8               	dc.b $EC, $7, $8, $F, $F8
0000BE73 0C04 0817 F8               	dc.b $C, $4, $8, $17, $F8
0000BE78 02                         Map_e3a3_2C: 	dc.b $2
0000BE79 EC07 0819 F8               	dc.b $EC, $7, $8, $19, $F8
0000BE7E 0C04 0821 F8               	dc.b $C, $4, $8, $21, $F8
0000BE83 02                         Map_e3a3_37: 	dc.b $2
0000BE84 EC02 0823 FC               	dc.b $EC, $2, $8, $23, $FC
0000BE89 FC02 1823 FC               	dc.b $FC, $2, $18, $23, $FC
0000BE8E 02                         Map_e3a3_42: 	dc.b $2
0000BE8F EC06 0826 F8               	dc.b $EC, $6, $8, $26, $F8
0000BE94 FC06 1826 F8               	dc.b $FC, $6, $18, $26, $F8
0000BE99 02                         Map_e3a3_4D: 	dc.b $2
0000BE9A EC06 082C F8               	dc.b $EC, $6, $8, $2C, $F8
0000BE9F FC06 182C F8               	dc.b $FC, $6, $18, $2C, $F8
0000BEA4 02                         Map_e3a3_58: 	dc.b $2
0000BEA5 EC0A 0832 F4               	dc.b $EC, $A, $8, $32, $F4
0000BEAA FC0A 1832 F4               	dc.b $FC, $A, $18, $32, $F4
0000BEAF 02                         Map_e3a3_63: 	dc.b $2
0000BEB0 EC06 002C F8               	dc.b $EC, $6, $0, $2C, $F8
0000BEB5 FC06 102C F8               	dc.b $FC, $6, $10, $2C, $F8
0000BEBA 02                         Map_e3a3_6E: 	dc.b $2
0000BEBB EC06 0026 F8               	dc.b $EC, $6, $0, $26, $F8
0000BEC0 FC06 1026 F8               	dc.b $FC, $6, $10, $26, $F8
0000BEC5 02                         Map_e3a3_79: 	dc.b $2
0000BEC6 EC07 0019 F8               	dc.b $EC, $7, $0, $19, $F8
0000BECB 0C04 0021 F8               	dc.b $C, $4, $0, $21, $F8
0000BED0 02                         Map_e3a3_84: 	dc.b $2
0000BED1 EC07 000F F8               	dc.b $EC, $7, $0, $F, $F8
0000BED6 0C04 0017 F8               	dc.b $C, $4, $0, $17, $F8
0000BEDC 00                         	even
0000BEDC 00                         	even
0000BEDC                            
0000BEDC                            ; ===========================================================================
0000BEDC                            ; ---------------------------------------------------------------------------
0000BEDC                            ; Object 2F - large moving platforms (MZ)
0000BEDC                            ; ---------------------------------------------------------------------------
0000BEDC                            
0000BEDC                            Obj2F:					; XREF: Obj_Index
0000BEDC 7000                       		moveq	#0,d0
0000BEDE 1028 0024                  		move.b	$24(a0),d0
0000BEE2 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000BEE6 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000BEEA                            ; ===========================================================================
0000BEEA 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000BEEC 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000BEEE                            
0000BEEE 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000BEF0 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000BEF2 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000BEF4 0140                       		dc.b 1,	$40
0000BEF6 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000BEF8 0220                       		dc.b 2,	$20
0000BEFA                            ; ===========================================================================
0000BEFA                            
0000BEFA                            Obj2F_Main:				; XREF: Obj2F_Index
0000BEFA 5428 0024                  		addq.b	#2,$24(a0)
0000BEFE 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000BF06 317C C000 0002             		move.w	#$C000,2(a0)
0000BF0C 117C 0004 0001             		move.b	#4,1(a0)
0000BF12 117C 0005 0018             		move.b	#5,$18(a0)
0000BF18 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000BF1E 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000BF24 7000                       		moveq	#0,d0
0000BF26 1028 0028                  		move.b	$28(a0),d0
0000BF2A E448                       		lsr.w	#2,d0
0000BF2C 0240 001C                  		andi.w	#$1C,d0
0000BF30 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000BF34 3019                       		move.w	(a1)+,d0
0000BF36 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000BF3A 214A 0030                  		move.l	a2,$30(a0)
0000BF3E 1159 001A                  		move.b	(a1)+,$1A(a0)
0000BF42 1151 0019                  		move.b	(a1),$19(a0)
0000BF46 0228 000F 0028             		andi.b	#$F,$28(a0)
0000BF4C 117C 0040 0016             		move.b	#$40,$16(a0)
0000BF52 08E8 0004 0001             		bset	#4,1(a0)
0000BF58                            
0000BF58                            Obj2F_Action:				; XREF: Obj2F_Index
0000BF58 6100 0000                  		bsr.w	Obj2F_Types
0000BF5C 4A28 0025                  		tst.b	$25(a0)
0000BF60 6700                       		beq.s	Obj2F_Solid
0000BF62 7200                       		moveq	#0,d1
0000BF64 1228 0019                  		move.b	$19(a0),d1
0000BF68 0641 000B                  		addi.w	#$B,d1
0000BF6C 6100 C552                  		bsr.w	ExitPlatform
0000BF70 0829 0003 0022             		btst	#3,$22(a1)
0000BF76 6600 0000                  		bne.w	Obj2F_Slope
0000BF7A 4228 0025                  		clr.b	$25(a0)
0000BF7E 6000                       		bra.s	Obj2F_Display
0000BF80                            ; ===========================================================================
0000BF80                            
0000BF80                            Obj2F_Slope:				; XREF: Obj2F_Action
0000BF80 7200                       		moveq	#0,d1
0000BF82 1228 0019                  		move.b	$19(a0),d1
0000BF86 0641 000B                  		addi.w	#$B,d1
0000BF8A 2468 0030                  		movea.l	$30(a0),a2
0000BF8E 3428 0008                  		move.w	8(a0),d2
0000BF92 6100 D51C                  		bsr.w	SlopeObject2
0000BF96 6000                       		bra.s	Obj2F_Display
0000BF98                            ; ===========================================================================
0000BF98                            
0000BF98                            Obj2F_Solid:				; XREF: Obj2F_Action
0000BF98 7200                       		moveq	#0,d1
0000BF9A 1228 0019                  		move.b	$19(a0),d1
0000BF9E 0641 000B                  		addi.w	#$B,d1
0000BFA2 343C 0020                  		move.w	#$20,d2
0000BFA6 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000BFAC 6600                       		bne.s	loc_AF8E
0000BFAE 343C 0030                  		move.w	#$30,d2
0000BFB2                            
0000BFB2                            loc_AF8E:
0000BFB2 2468 0030                  		movea.l	$30(a0),a2
0000BFB6 6100 0000                  		bsr.w	SolidObject2F
0000BFBA                            
0000BFBA                            Obj2F_Display:				; XREF: Obj2F_Action
0000BFBA 6100 0000                  		bsr.w	DisplaySprite
0000BFBE 6000 0000                  		bra.w	Obj2F_ChkDel
0000BFC2                            
0000BFC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BFC2                            
0000BFC2                            
0000BFC2                            Obj2F_Types:				; XREF: Obj2F_Action
0000BFC2 7000                       		moveq	#0,d0
0000BFC4 1028 0028                  		move.b	$28(a0),d0
0000BFC8 0240 0007                  		andi.w	#7,d0
0000BFCC D040                       		add.w	d0,d0
0000BFCE 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000BFD2 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000BFD6                            ; End of function Obj2F_Types
0000BFD6                            
0000BFD6                            ; ===========================================================================
0000BFD6 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000BFD8 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000BFDA 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000BFDC 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000BFDE 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000BFE0 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000BFE2                            ; ===========================================================================
0000BFE2                            
0000BFE2                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000BFE2 4E75                       		rts			; type 00 platform doesn't move
0000BFE4                            ; ===========================================================================
0000BFE4                            
0000BFE4                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000BFE4 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000BFE8 323C 0020                  		move.w	#$20,d1
0000BFEC 6000                       		bra.s	Obj2F_Move
0000BFEE                            ; ===========================================================================
0000BFEE                            
0000BFEE                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000BFEE 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000BFF2 323C 0030                  		move.w	#$30,d1
0000BFF6 6000                       		bra.s	Obj2F_Move
0000BFF8                            ; ===========================================================================
0000BFF8                            
0000BFF8                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000BFF8 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000BFFC 323C 0040                  		move.w	#$40,d1
0000C000 6000                       		bra.s	Obj2F_Move
0000C002                            ; ===========================================================================
0000C002                            
0000C002                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000C002 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000C006 323C 0060                  		move.w	#$60,d1
0000C00A                            
0000C00A                            Obj2F_Move:
0000C00A 0828 0003 0028             		btst	#3,$28(a0)
0000C010 6700                       		beq.s	loc_AFF2
0000C012 4440                       		neg.w	d0
0000C014 D041                       		add.w	d1,d0
0000C016                            
0000C016                            loc_AFF2:
0000C016 3228 002C                  		move.w	$2C(a0),d1
0000C01A 9240                       		sub.w	d0,d1
0000C01C 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000C020 4E75                       		rts	
0000C022                            ; ===========================================================================
0000C022                            
0000C022                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000C022 1028 0034                  		move.b	$34(a0),d0
0000C026 4A28 0025                  		tst.b	$25(a0)
0000C02A 6600                       		bne.s	loc_B010
0000C02C 5500                       		subq.b	#2,d0
0000C02E 6400                       		bcc.s	loc_B01C
0000C030 7000                       		moveq	#0,d0
0000C032 6000                       		bra.s	loc_B01C
0000C034                            ; ===========================================================================
0000C034                            
0000C034                            loc_B010:
0000C034 5800                       		addq.b	#4,d0
0000C036 0C00 0040                  		cmpi.b	#$40,d0
0000C03A 6500                       		bcs.s	loc_B01C
0000C03C 103C 0040                  		move.b	#$40,d0
0000C040                            
0000C040                            loc_B01C:
0000C040 1140 0034                  		move.b	d0,$34(a0)
0000C044 4EB9 0000 3416             		jsr	(CalcSine).l
0000C04A E848                       		lsr.w	#4,d0
0000C04C 3200                       		move.w	d0,d1
0000C04E D068 002C                  		add.w	$2C(a0),d0
0000C052 3140 000C                  		move.w	d0,$C(a0)
0000C056 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000C05C 6600                       		bne.s	loc_B07A
0000C05E 4A28 0035                  		tst.b	$35(a0)
0000C062 6600                       		bne.s	loc_B07A
0000C064 117C 0001 0035             		move.b	#1,$35(a0)
0000C06A 6100 0000                  		bsr.w	SingleObjLoad2
0000C06E 6600                       		bne.s	loc_B07A
0000C070 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000C074 3368 0008 0008             		move.w	8(a0),8(a1)
0000C07A 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000C080 5069 002C                  		addq.w	#8,$2C(a1)
0000C084 5769 002C                  		subq.w	#3,$2C(a1)
0000C088 0469 0040 0008             		subi.w	#$40,8(a1)
0000C08E 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000C094 2348 0038                  		move.l	a0,$38(a1)
0000C098 2448                       		movea.l	a0,a2
0000C09A 6100                       		bsr.s	sub_B09C
0000C09C                            
0000C09C                            loc_B07A:
0000C09C 7400                       		moveq	#0,d2
0000C09E 45E8 0036                  		lea	$36(a0),a2
0000C0A2 141A                       		move.b	(a2)+,d2
0000C0A4 5302                       		subq.b	#1,d2
0000C0A6 6500                       		bcs.s	locret_B09A
0000C0A8                            
0000C0A8                            loc_B086:
0000C0A8 7000                       		moveq	#0,d0
0000C0AA 101A                       		move.b	(a2)+,d0
0000C0AC ED48                       		lsl.w	#6,d0
0000C0AE 0640 D000                  		addi.w	#-$3000,d0
0000C0B2 3240                       		movea.w	d0,a1
0000C0B4 3341 003C                  		move.w	d1,$3C(a1)
0000C0B8 51CA FFEE                  		dbf	d2,loc_B086
0000C0BC                            
0000C0BC                            locret_B09A:
0000C0BC 4E75                       		rts	
0000C0BE                            
0000C0BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C0BE                            
0000C0BE                            
0000C0BE                            sub_B09C:
0000C0BE 45EA 0036                  		lea	$36(a2),a2
0000C0C2 7000                       		moveq	#0,d0
0000C0C4 1012                       		move.b	(a2),d0
0000C0C6 5212                       		addq.b	#1,(a2)
0000C0C8 45F2 0001                  		lea	1(a2,d0.w),a2
0000C0CC 3009                       		move.w	a1,d0
0000C0CE 0440 D000                  		subi.w	#-$3000,d0
0000C0D2 EC48                       		lsr.w	#6,d0
0000C0D4 0240 007F                  		andi.w	#$7F,d0
0000C0D8 1480                       		move.b	d0,(a2)
0000C0DA 4E75                       		rts	
0000C0DC                            ; End of function sub_B09C
0000C0DC                            
0000C0DC                            ; ===========================================================================
0000C0DC                            
0000C0DC                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000C0DC 4A28 0035                  		tst.b	$35(a0)
0000C0E0 6700                       		beq.s	loc_B0C6
0000C0E2 4A28 0001                  		tst.b	1(a0)
0000C0E6 6A00                       		bpl.s	Obj2F_DelFlames
0000C0E8                            
0000C0E8                            loc_B0C6:
0000C0E8 3028 002A                  		move.w	$2A(a0),d0
0000C0EC 0240 FF80                  		andi.w	#$FF80,d0
0000C0F0 3238 F700                  		move.w	($FFFFF700).w,d1
0000C0F4 0441 0080                  		subi.w	#$80,d1
0000C0F8 0241 FF80                  		andi.w	#$FF80,d1
0000C0FC 9041                       		sub.w	d1,d0
0000C0FE 0C40 0280                  		cmpi.w	#$280,d0
0000C102 6200 0000                  		bhi.w	DeleteObject
0000C106 4E75                       		rts	
0000C108                            ; ===========================================================================
0000C108                            
0000C108                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000C108 7400                       		moveq	#0,d2
0000C10A                            
0000C10A                            loc_B0E8:
0000C10A 45E8 0036                  		lea	$36(a0),a2
0000C10E 1412                       		move.b	(a2),d2
0000C110 421A                       		clr.b	(a2)+
0000C112 5302                       		subq.b	#1,d2
0000C114 6500                       		bcs.s	locret_B116
0000C116                            
0000C116                            loc_B0F4:
0000C116 7000                       		moveq	#0,d0
0000C118 1012                       		move.b	(a2),d0
0000C11A 421A                       		clr.b	(a2)+
0000C11C ED48                       		lsl.w	#6,d0
0000C11E 0640 D000                  		addi.w	#-$3000,d0
0000C122 3240                       		movea.w	d0,a1
0000C124 6100 0000                  		bsr.w	DeleteObject2
0000C128 51CA FFEC                  		dbf	d2,loc_B0F4
0000C12C 117C 0000 0035             		move.b	#0,$35(a0)
0000C132 117C 0000 0034             		move.b	#0,$34(a0)
0000C138                            
0000C138                            locret_B116:
0000C138 4E75                       		rts	
0000C13A                            ; ===========================================================================
0000C13A                            ; ---------------------------------------------------------------------------
0000C13A                            ; Collision data for large moving platforms (MZ)
0000C13A                            ; ---------------------------------------------------------------------------
0000C13A                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000C186                            		even
0000C186                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000C1B2                            		even
0000C1B2                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000C1FE                            		even
0000C1FE                            ; ===========================================================================
0000C1FE                            ; ---------------------------------------------------------------------------
0000C1FE                            ; Object 35 - fireball that sits on the	floor (MZ)
0000C1FE                            ; (appears when	you walk on sinking platforms)
0000C1FE                            ; ---------------------------------------------------------------------------
0000C1FE                            
0000C1FE                            Obj35:					; XREF: Obj_Index
0000C1FE 7000                       		moveq	#0,d0
0000C200 1028 0024                  		move.b	$24(a0),d0
0000C204 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000C208 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000C20C                            ; ===========================================================================
0000C20C 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000C20E 0000                       		dc.w loc_B238-Obj35_Index
0000C210 0000                       		dc.w Obj35_Move-Obj35_Index
0000C212                            ; ===========================================================================
0000C212                            
0000C212                            Obj35_Main:				; XREF: Obj35_Index
0000C212 5428 0024                  		addq.b	#2,$24(a0)
0000C216 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000C21E 317C 0345 0002             		move.w	#$345,2(a0)
0000C224 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000C22A 117C 0004 0001             		move.b	#4,1(a0)
0000C230 117C 0001 0018             		move.b	#1,$18(a0)
0000C236 117C 008B 0020             		move.b	#$8B,$20(a0)
0000C23C 117C 0008 0019             		move.b	#8,$19(a0)
0000C242 303C 00C8                  		move.w	#$C8,d0
0000C246 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play flame sound
0000C24C 4A28 0028                  		tst.b	$28(a0)
0000C250 6700                       		beq.s	loc_B238
0000C252 5428 0024                  		addq.b	#2,$24(a0)
0000C256 6000 0000                  		bra.w	Obj35_Move
0000C25A                            ; ===========================================================================
0000C25A                            
0000C25A                            loc_B238:				; XREF: Obj35_Index
0000C25A 2268 0030                  		movea.l	$30(a0),a1
0000C25E 3228 0008                  		move.w	8(a0),d1
0000C262 9268 002A                  		sub.w	$2A(a0),d1
0000C266 0641 000C                  		addi.w	#$C,d1
0000C26A 3001                       		move.w	d1,d0
0000C26C E248                       		lsr.w	#1,d0
0000C26E 1031 0000                  		move.b	(a1,d0.w),d0
0000C272 4440                       		neg.w	d0
0000C274 D068 002C                  		add.w	$2C(a0),d0
0000C278 3400                       		move.w	d0,d2
0000C27A D068 003C                  		add.w	$3C(a0),d0
0000C27E 3140 000C                  		move.w	d0,$C(a0)
0000C282 0C41 0084                  		cmpi.w	#$84,d1
0000C286 6400                       		bcc.s	loc_B2B0
0000C288 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C290 0C41 0080                  		cmpi.w	#$80,d1
0000C294 6400                       		bcc.s	loc_B2B0
0000C296 2028 0008                  		move.l	8(a0),d0
0000C29A 0680 0008 0000             		addi.l	#$80000,d0
0000C2A0 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000C2A6 6600                       		bne.s	loc_B2B0
0000C2A8 6100 0000                  		bsr.w	SingleObjLoad2
0000C2AC 6600                       		bne.s	loc_B2B0
0000C2AE 12BC 0035                  		move.b	#$35,0(a1)
0000C2B2 3368 0008 0008             		move.w	8(a0),8(a1)
0000C2B8 3342 002C                  		move.w	d2,$2C(a1)
0000C2BC 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000C2C2 137C 0001 0028             		move.b	#1,$28(a1)
0000C2C8 2468 0038                  		movea.l	$38(a0),a2
0000C2CC 6100 FDF0                  		bsr.w	sub_B09C
0000C2D0                            
0000C2D0                            loc_B2B0:
0000C2D0 6000                       		bra.s	Obj35_Animate
0000C2D2                            ; ===========================================================================
0000C2D2                            
0000C2D2                            Obj35_Move:				; XREF: Obj35_Index
0000C2D2 3028 002C                  		move.w	$2C(a0),d0
0000C2D6 D068 003C                  		add.w	$3C(a0),d0
0000C2DA 3140 000C                  		move.w	d0,$C(a0)
0000C2DE                            
0000C2DE                            Obj35_Animate:				; XREF: loc_B238
0000C2DE 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000C2E4 6100 F4AA                  		bsr.w	AnimateSprite
0000C2E8 6000 0000                  		bra.w	DisplaySprite
0000C2EC                            ; ===========================================================================
0000C2EC                            Ani_obj35:
0000C2EC                            	include "_anim\obj35.asm"
0000C2EC                            ; ---------------------------------------------------------------------------
0000C2EC                            ; Animation script - fireball that sits on the	floor (MZ)
0000C2EC                            ; ---------------------------------------------------------------------------
0000C2EC 0000                       		dc.w byte_B2CE-Ani_obj35
0000C2EE 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000C2F4                            		even
0000C2F4                            		even
0000C2F4                            
0000C2F4                            ; ---------------------------------------------------------------------------
0000C2F4                            ; Sprite mappings - large moving platforms (MZ)
0000C2F4                            ; ---------------------------------------------------------------------------
0000C2F4                            Map_obj2F:
0000C2F4                            	include "_maps\obj2F.asm"
0000C2F4                            ; ---------------------------------------------------------------------------
0000C2F4                            ; Sprite mappings - large moving platforms (MZ)
0000C2F4                            ; ---------------------------------------------------------------------------
0000C2F4 0000                       		dc.w byte_B2DA-Map_obj2F
0000C2F6 0000                       		dc.w byte_B31C-Map_obj2F
0000C2F8 0000                       		dc.w byte_B34F-Map_obj2F
0000C2FA 0D                         byte_B2DA:	dc.b $D
0000C2FB D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000C300 F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000C305 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C30A D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000C30F F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000C314 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C319 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000C31E D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000C323 F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000C328 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C32D 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000C332 D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000C337 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000C33C 0A                         byte_B31C:	dc.b $A
0000C33D D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000C342 F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000C347 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000C34C C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000C351 E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000C356 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C35B C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000C360 E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000C365 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000C36A E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000C36F 06                         byte_B34F:	dc.b 6
0000C370 D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000C375 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000C37A 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000C37F D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000C384 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000C389 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000C38E                            		even
0000C38E                            		even
0000C38E                            
0000C38E                            ; ---------------------------------------------------------------------------
0000C38E                            ; Sprite mappings - lava balls (MZ, SLZ)
0000C38E                            ; ---------------------------------------------------------------------------
0000C38E                            Map_obj14:
0000C38E                            	include "_maps\obj14.asm"
0000C38E                            ; --------------------------------------------------------------------------------
0000C38E                            ; Sprite mappings - output from SonMapEd - Sonic 1 format
0000C38E                            ; --------------------------------------------------------------------------------
0000C38E                            
0000C38E                            SME_C6wT7:	
0000C38E 0000 0000                  		dc.w SME_C6wT7_C-SME_C6wT7, SME_C6wT7_12-SME_C6wT7	
0000C392 0000 0000                  		dc.w SME_C6wT7_18-SME_C6wT7, SME_C6wT7_23-SME_C6wT7	
0000C396 0000 0000                  		dc.w SME_C6wT7_29-SME_C6wT7, SME_C6wT7_2F-SME_C6wT7	
0000C39A 01                         SME_C6wT7_C:	dc.b 1	
0000C39B E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000C3A0 01                         SME_C6wT7_12:	dc.b 1	
0000C3A1 E80F 0000 F8               		dc.b $E8, $F, 0, 0, $F8	
0000C3A6 02                         SME_C6wT7_18:	dc.b 2	
0000C3A7 EF06 0010 F8               		dc.b $EF, 6, 0, $10, $F8	
0000C3AC E707 0016 08               		dc.b $E7, 7, 0, $16, 8	
0000C3B1 01                         SME_C6wT7_23:	dc.b 1	
0000C3B2 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000C3B7 01                         SME_C6wT7_29:	dc.b 1	
0000C3B8 F00F 0000 E8               		dc.b $F0, $F, 0, 0, $E8	
0000C3BD 01                         SME_C6wT7_2F:	dc.b 1	
0000C3BE F00B 001E E8               		dc.b $F0, $B, 0, $1E, $E8	
0000C3C4 00                         		even
0000C3C4 00                         		even
0000C3C4                            
0000C3C4                            ; ===========================================================================
0000C3C4                            ; ---------------------------------------------------------------------------
0000C3C4                            ; Object 30 - large green glassy blocks	(MZ)
0000C3C4                            ; ---------------------------------------------------------------------------
0000C3C4                            
0000C3C4                            Obj30:					; XREF: Obj_Index
0000C3C4 7000                       		moveq	#0,d0
0000C3C6 1028 0024                  		move.b	$24(a0),d0
0000C3CA 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000C3CE 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000C3D2 3028 0008                  		move.w	8(a0),d0
0000C3D6 0240 FF80                  		andi.w	#$FF80,d0
0000C3DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000C3DE 0441 0080                  		subi.w	#$80,d1
0000C3E2 0241 FF80                  		andi.w	#$FF80,d1
0000C3E6 9041                       		sub.w	d1,d0
0000C3E8 0C40 0280                  		cmpi.w	#$280,d0
0000C3EC 6200 0000                  		bhi.w	Obj30_Delete
0000C3F0 6000 0000                  		bra.w	DisplaySprite
0000C3F4                            ; ===========================================================================
0000C3F4                            
0000C3F4                            Obj30_Delete:
0000C3F4 6000 0000                  		bra.w	DeleteObject
0000C3F8                            ; ===========================================================================
0000C3F8 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000C3FA 0000                       		dc.w Obj30_Block012-Obj30_Index
0000C3FC 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000C3FE 0000                       		dc.w Obj30_Block34-Obj30_Index
0000C400 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000C402                            
0000C402 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000C405 0400 01                    		dc.b 4,	0, 1
0000C408 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000C40B 0800 01                    		dc.b 8,	0, 1
0000C40E                            ; ===========================================================================
0000C40E                            
0000C40E                            Obj30_Main:				; XREF: Obj30_Index
0000C40E 45F9 0000 C402             		lea	(Obj30_Vars1).l,a2
0000C414 7201                       		moveq	#1,d1
0000C416 117C 0048 0016             		move.b	#$48,$16(a0)
0000C41C 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000C422 6500                       		bcs.s	loc_B40C	; if yes, branch
0000C424 45F9 0000 C408             		lea	(Obj30_Vars2).l,a2
0000C42A 7201                       		moveq	#1,d1
0000C42C 117C 0038 0016             		move.b	#$38,$16(a0)
0000C432                            
0000C432                            loc_B40C:
0000C432 2248                       		movea.l	a0,a1
0000C434 6000                       		bra.s	Obj30_Load	; load main object
0000C436                            ; ===========================================================================
0000C436                            
0000C436                            Obj30_Loop:
0000C436 6100 0000                  		bsr.w	SingleObjLoad2
0000C43A 6600                       		bne.s	loc_B480
0000C43C                            
0000C43C                            Obj30_Load:				; XREF: Obj30_Main
0000C43C 135A 0024                  		move.b	(a2)+,$24(a1)
0000C440 12BC 0030                  		move.b	#$30,0(a1)
0000C444 3368 0008 0008             		move.w	8(a0),8(a1)
0000C44A 101A                       		move.b	(a2)+,d0
0000C44C 4880                       		ext.w	d0
0000C44E D068 000C                  		add.w	$C(a0),d0
0000C452 3340 000C                  		move.w	d0,$C(a1)
0000C456 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000C45E 337C C38E 0002             		move.w	#$C38E,2(a1)
0000C464 137C 0004 0001             		move.b	#4,1(a1)
0000C46A 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C470 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C476 137C 0020 0019             		move.b	#$20,$19(a1)
0000C47C 137C 0004 0018             		move.b	#4,$18(a1)
0000C482 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C486 2348 003C                  		move.l	a0,$3C(a1)
0000C48A 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000C48E                            
0000C48E 137C 0010 0019             		move.b	#$10,$19(a1)
0000C494 137C 0003 0018             		move.b	#3,$18(a1)
0000C49A 5029 0028                  		addq.b	#8,$28(a1)
0000C49E 0229 000F 0028             		andi.b	#$F,$28(a1)
0000C4A4                            
0000C4A4                            loc_B480:
0000C4A4 317C 0090 0032             		move.w	#$90,$32(a0)
0000C4AA 08E8 0004 0001             		bset	#4,1(a0)
0000C4B0                            
0000C4B0                            Obj30_Block012:				; XREF: Obj30_Index
0000C4B0 6100 0000                  		bsr.w	Obj30_Types
0000C4B4 323C 002B                  		move.w	#$2B,d1
0000C4B8 343C 0048                  		move.w	#$48,d2
0000C4BC 363C 0049                  		move.w	#$49,d3
0000C4C0 3828 0008                  		move.w	8(a0),d4
0000C4C4 6000 0000                  		bra.w	SolidObject
0000C4C8                            ; ===========================================================================
0000C4C8                            
0000C4C8                            Obj30_Reflect012:			; XREF: Obj30_Index
0000C4C8 2268 003C                  		movea.l	$3C(a0),a1
0000C4CC 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C4D2 6000 0000                  		bra.w	Obj30_Types
0000C4D6                            ; ===========================================================================
0000C4D6                            
0000C4D6                            Obj30_Block34:				; XREF: Obj30_Index
0000C4D6 6100 0000                  		bsr.w	Obj30_Types
0000C4DA 323C 002B                  		move.w	#$2B,d1
0000C4DE 343C 0038                  		move.w	#$38,d2
0000C4E2 363C 0039                  		move.w	#$39,d3
0000C4E6 3828 0008                  		move.w	8(a0),d4
0000C4EA 6000 0000                  		bra.w	SolidObject
0000C4EE                            ; ===========================================================================
0000C4EE                            
0000C4EE                            Obj30_Reflect34:			; XREF: Obj30_Index
0000C4EE 2268 003C                  		movea.l	$3C(a0),a1
0000C4F2 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000C4F8 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000C4FE 6000 0002                  		bra.w	*+4
0000C502                            
0000C502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000C502                            
0000C502                            
0000C502                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000C502 7000                       		moveq	#0,d0
0000C504 1028 0028                  		move.b	$28(a0),d0
0000C508 0240 0007                  		andi.w	#7,d0
0000C50C D040                       		add.w	d0,d0
0000C50E 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000C512 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000C516                            ; End of function Obj30_Types
0000C516                            
0000C516                            ; ===========================================================================
0000C516 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000C518 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000C51A 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000C51C 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000C51E 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000C520                            ; ===========================================================================
0000C520                            
0000C520                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000C520 4E75                       		rts	
0000C522                            ; ===========================================================================
0000C522                            
0000C522                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000C522 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C526 323C 0040                  		move.w	#$40,d1
0000C52A 6000                       		bra.s	loc_B514
0000C52C                            ; ===========================================================================
0000C52C                            
0000C52C                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000C52C 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C530 323C 0040                  		move.w	#$40,d1
0000C534 4440                       		neg.w	d0
0000C536 D041                       		add.w	d1,d0
0000C538                            
0000C538                            loc_B514:				; XREF: Obj30_Type01
0000C538 0828 0003 0028             		btst	#3,$28(a0)
0000C53E 6700                       		beq.s	loc_B526
0000C540 4440                       		neg.w	d0
0000C542 D041                       		add.w	d1,d0
0000C544 E208                       		lsr.b	#1,d0
0000C546 0640 0020                  		addi.w	#$20,d0
0000C54A                            
0000C54A                            loc_B526:
0000C54A 6000 0000                  		bra.w	loc_B5EE
0000C54E                            ; ===========================================================================
0000C54E                            
0000C54E                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000C54E 0828 0003 0028             		btst	#3,$28(a0)
0000C554 6700                       		beq.s	loc_B53E
0000C556 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C55A 0440 0010                  		subi.w	#$10,d0
0000C55E 6000 0000                  		bra.w	loc_B5EE
0000C562                            ; ===========================================================================
0000C562                            
0000C562                            loc_B53E:
0000C562 0828 0003 0022             		btst	#3,$22(a0)
0000C568 6600                       		bne.s	loc_B54E
0000C56A 08A8 0000 0034             		bclr	#0,$34(a0)
0000C570 6000                       		bra.s	loc_B582
0000C572                            ; ===========================================================================
0000C572                            
0000C572                            loc_B54E:
0000C572 4A28 0034                  		tst.b	$34(a0)
0000C576 6600                       		bne.s	loc_B582
0000C578 117C 0001 0034             		move.b	#1,$34(a0)
0000C57E 08E8 0000 0035             		bset	#0,$35(a0)
0000C584 6700                       		beq.s	loc_B582
0000C586 08E8 0007 0034             		bset	#7,$34(a0)
0000C58C 317C 0010 0036             		move.w	#$10,$36(a0)
0000C592 117C 000A 0038             		move.b	#$A,$38(a0)
0000C598 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000C59E 6600                       		bne.s	loc_B582
0000C5A0 317C 0040 0036             		move.w	#$40,$36(a0)
0000C5A6                            
0000C5A6                            loc_B582:
0000C5A6 4A28 0034                  		tst.b	$34(a0)
0000C5AA 6A00                       		bpl.s	loc_B5AA
0000C5AC 4A28 0038                  		tst.b	$38(a0)
0000C5B0 6700                       		beq.s	loc_B594
0000C5B2 5328 0038                  		subq.b	#1,$38(a0)
0000C5B6 6600                       		bne.s	loc_B5AA
0000C5B8                            
0000C5B8                            loc_B594:
0000C5B8 4A68 0032                  		tst.w	$32(a0)
0000C5BC 6700                       		beq.s	loc_B5A4
0000C5BE 5368 0032                  		subq.w	#1,$32(a0)
0000C5C2 5368 0036                  		subq.w	#1,$36(a0)
0000C5C6 6600                       		bne.s	loc_B5AA
0000C5C8                            
0000C5C8                            loc_B5A4:
0000C5C8 08A8 0007 0034             		bclr	#7,$34(a0)
0000C5CE                            
0000C5CE                            loc_B5AA:
0000C5CE 3028 0032                  		move.w	$32(a0),d0
0000C5D2 6000                       		bra.s	loc_B5EE
0000C5D4                            ; ===========================================================================
0000C5D4                            
0000C5D4                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000C5D4 0828 0003 0028             		btst	#3,$28(a0)
0000C5DA 6700                       		beq.s	Obj30_ChkSwitch
0000C5DC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000C5E0 0440 0010                  		subi.w	#$10,d0
0000C5E4 6000                       		bra.s	loc_B5EE
0000C5E6                            ; ===========================================================================
0000C5E6                            
0000C5E6                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000C5E6 4A28 0034                  		tst.b	$34(a0)
0000C5EA 6600                       		bne.s	loc_B5E0
0000C5EC 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000C5F0 7000                       		moveq	#0,d0
0000C5F2 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000C5F6 E848                       		lsr.w	#4,d0		; read only the	first nybble
0000C5F8 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000C5FC 6700                       		beq.s	loc_B5EA	; if not, branch
0000C5FE 117C 0001 0034             		move.b	#1,$34(a0)
0000C604                            
0000C604                            loc_B5E0:
0000C604 4A68 0032                  		tst.w	$32(a0)
0000C608 6700                       		beq.s	loc_B5EA
0000C60A 5568 0032                  		subq.w	#2,$32(a0)
0000C60E                            
0000C60E                            loc_B5EA:
0000C60E 3028 0032                  		move.w	$32(a0),d0
0000C612                            
0000C612                            loc_B5EE:
0000C612 3228 0030                  		move.w	$30(a0),d1
0000C616 9240                       		sub.w	d0,d1
0000C618 3141 000C                  		move.w	d1,$C(a0)
0000C61C 4E75                       		rts	
0000C61E                            ; ===========================================================================
0000C61E                            ; ---------------------------------------------------------------------------
0000C61E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C61E                            ; ---------------------------------------------------------------------------
0000C61E                            Map_obj30:
0000C61E                            	include "_maps\obj30.asm"
0000C61E                            ; ---------------------------------------------------------------------------
0000C61E                            ; Sprite mappings - large green	glassy blocks (MZ)
0000C61E                            ; ---------------------------------------------------------------------------
0000C61E 0000                       		dc.w byte_B600-Map_obj30
0000C620 0000                       		dc.w byte_B63D-Map_obj30
0000C622 0000                       		dc.w byte_B648-Map_obj30
0000C624 0C                         byte_B600:	dc.b $C
0000C625 B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000C62A B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000C62F C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000C634 C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000C639 E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000C63E E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000C643 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000C648 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000C64D 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000C652 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000C657 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000C65C 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000C661 02                         byte_B63D:	dc.b 2
0000C662 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000C667 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000C66C 0A                         byte_B648:	dc.b $A
0000C66D C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000C672 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000C677 D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000C67C D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000C681 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000C686 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000C68B 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000C690 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000C695 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000C69A 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000C6A0 00                         		even
0000C6A0 00                         		even
0000C6A0                            
0000C6A0                            ; ===========================================================================
0000C6A0                            ; ---------------------------------------------------------------------------
0000C6A0                            ; Object 31 - stomping metal blocks on chains (MZ)
0000C6A0                            ; ---------------------------------------------------------------------------
0000C6A0                            
0000C6A0                            Obj31:					; XREF: Obj_Index
0000C6A0 7000                       		moveq	#0,d0
0000C6A2 1028 0024                  		move.b	$24(a0),d0
0000C6A6 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000C6AA 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000C6AE                            ; ===========================================================================
0000C6AE 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000C6B0 0000                       		dc.w loc_B798-Obj31_Index
0000C6B2 0000                       		dc.w loc_B7FE-Obj31_Index
0000C6B4 0000                       		dc.w Obj31_Display2-Obj31_Index
0000C6B6 0000                       		dc.w loc_B7E2-Obj31_Index
0000C6B8                            
0000C6B8 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000C6BA 0100                       		dc.b 1,	0
0000C6BC                            
0000C6BC 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000C6BF 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000C6C2 08CC 03                    		dc.b 8,	$CC, 3
0000C6C5 06F0 02                    		dc.b 6,	$F0, 2
0000C6C8                            
0000C6C8 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000C6CC 5000 7800                  		dc.w $5000, $7800
0000C6D0 3800 5800                  		dc.w $3800, $5800
0000C6D4 B800                       		dc.w $B800
0000C6D6                            ; ===========================================================================
0000C6D6                            
0000C6D6                            Obj31_Main:				; XREF: Obj31_Index
0000C6D6 7000                       		moveq	#0,d0
0000C6D8 1028 0028                  		move.b	$28(a0),d0
0000C6DC 6A00                       		bpl.s	loc_B6CE
0000C6DE 0240 007F                  		andi.w	#$7F,d0
0000C6E2 D040                       		add.w	d0,d0
0000C6E4 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000C6E8 115A 003A                  		move.b	(a2)+,$3A(a0)
0000C6EC 101A                       		move.b	(a2)+,d0
0000C6EE 1140 0028                  		move.b	d0,$28(a0)
0000C6F2                            
0000C6F2                            loc_B6CE:
0000C6F2 0200 000F                  		andi.b	#$F,d0
0000C6F6 D040                       		add.w	d0,d0
0000C6F8 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000C6FC 4A40                       		tst.w	d0
0000C6FE 6600                       		bne.s	loc_B6E0
0000C700 3142 0032                  		move.w	d2,$32(a0)
0000C704                            
0000C704                            loc_B6E0:
0000C704 45F9 0000 C6BC             		lea	(Obj31_Var).l,a2
0000C70A 2248                       		movea.l	a0,a1
0000C70C 7203                       		moveq	#3,d1
0000C70E 6000                       		bra.s	Obj31_MakeStomper
0000C710                            ; ===========================================================================
0000C710                            
0000C710                            Obj31_Loop:
0000C710 6100 0000                  		bsr.w	SingleObjLoad2
0000C714 6600 0000                  		bne.w	Obj31_SetSize
0000C718                            
0000C718                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000C718 135A 0024                  		move.b	(a2)+,$24(a1)
0000C71C 12BC 0031                  		move.b	#$31,0(a1)
0000C720 3368 0008 0008             		move.w	8(a0),8(a1)
0000C726 101A                       		move.b	(a2)+,d0
0000C728 4880                       		ext.w	d0
0000C72A D068 000C                  		add.w	$C(a0),d0
0000C72E 3340 000C                  		move.w	d0,$C(a1)
0000C732 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000C73A 337C 0300 0002             		move.w	#$300,2(a1)
0000C740 137C 0004 0001             		move.b	#4,1(a1)
0000C746 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000C74C 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000C752 137C 0010 0019             		move.b	#$10,$19(a1)
0000C758 3342 0034                  		move.w	d2,$34(a1)
0000C75C 137C 0004 0018             		move.b	#4,$18(a1)
0000C762 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C766 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000C76C 6600                       		bne.s	loc_B76A
0000C76E 5341                       		subq.w	#1,d1
0000C770 1028 0028                  		move.b	$28(a0),d0
0000C774 0240 00F0                  		andi.w	#$F0,d0
0000C778 0C40 0020                  		cmpi.w	#$20,d0
0000C77C 679A                       		beq.s	Obj31_MakeStomper
0000C77E 137C 0038 0019             		move.b	#$38,$19(a1)
0000C784 137C 0090 0020             		move.b	#$90,$20(a1)
0000C78A 5241                       		addq.w	#1,d1
0000C78C                            
0000C78C                            loc_B76A:
0000C78C 2348 003C                  		move.l	a0,$3C(a1)
0000C790 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000C794                            
0000C794 137C 0003 0018             		move.b	#3,$18(a1)
0000C79A                            
0000C79A                            Obj31_SetSize:
0000C79A 7000                       		moveq	#0,d0
0000C79C 1028 0028                  		move.b	$28(a0),d0
0000C7A0 E648                       		lsr.w	#3,d0
0000C7A2 0200 000E                  		andi.b	#$E,d0
0000C7A6 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000C7AA 115A 0019                  		move.b	(a2)+,$19(a0)
0000C7AE 115A 001A                  		move.b	(a2)+,$1A(a0)
0000C7B2 6000                       		bra.s	loc_B798
0000C7B4                            ; ===========================================================================
0000C7B4 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000C7B6 3009                       		dc.b $30, 9
0000C7B8 100A                       		dc.b $10, $A
0000C7BA                            ; ===========================================================================
0000C7BA                            
0000C7BA                            loc_B798:				; XREF: Obj31_Index
0000C7BA 6100 0000                  		bsr.w	Obj31_Types
0000C7BE 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000C7C4 7200                       		moveq	#0,d1
0000C7C6 1228 0019                  		move.b	$19(a0),d1
0000C7CA 0641 000B                  		addi.w	#$B,d1
0000C7CE 343C 000C                  		move.w	#$C,d2
0000C7D2 363C 000D                  		move.w	#$D,d3
0000C7D6 3828 0008                  		move.w	8(a0),d4
0000C7DA 6100 0000                  		bsr.w	SolidObject
0000C7DE 0828 0003 0022             		btst	#3,$22(a0)
0000C7E4 6700                       		beq.s	Obj31_Display
0000C7E6 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C7EC 6400                       		bcc.s	Obj31_Display
0000C7EE 2448                       		movea.l	a0,a2
0000C7F0 41F8 D000                  		lea	($FFFFD000).w,a0
0000C7F4 4EB9 0000 0000             		jsr	KillSonic
0000C7FA 204A                       		movea.l	a2,a0
0000C7FC                            
0000C7FC                            Obj31_Display:
0000C7FC 6100 0000                  		bsr.w	DisplaySprite
0000C800 6000 0000                  		bra.w	Obj31_ChkDel
0000C804                            ; ===========================================================================
0000C804                            
0000C804                            loc_B7E2:				; XREF: Obj31_Index
0000C804 117C 0080 0016             		move.b	#$80,$16(a0)
0000C80A 08E8 0004 0001             		bset	#4,1(a0)
0000C810 2268 003C                  		movea.l	$3C(a0),a1
0000C814 1029 0032                  		move.b	$32(a1),d0
0000C818 EA08                       		lsr.b	#5,d0
0000C81A 5600                       		addq.b	#3,d0
0000C81C 1140 001A                  		move.b	d0,$1A(a0)
0000C820                            
0000C820                            loc_B7FE:				; XREF: Obj31_Index
0000C820 2268 003C                  		movea.l	$3C(a0),a1
0000C824 7000                       		moveq	#0,d0
0000C826 1029 0032                  		move.b	$32(a1),d0
0000C82A D068 0030                  		add.w	$30(a0),d0
0000C82E 3140 000C                  		move.w	d0,$C(a0)
0000C832                            
0000C832                            Obj31_Display2:				; XREF: Obj31_Index
0000C832 6100 0000                  		bsr.w	DisplaySprite
0000C836                            
0000C836                            Obj31_ChkDel:				; XREF: Obj31_Display
0000C836 3028 0008                  		move.w	8(a0),d0
0000C83A 0240 FF80                  		andi.w	#$FF80,d0
0000C83E 3238 F700                  		move.w	($FFFFF700).w,d1
0000C842 0441 0080                  		subi.w	#$80,d1
0000C846 0241 FF80                  		andi.w	#$FF80,d1
0000C84A 9041                       		sub.w	d1,d0
0000C84C 0C40 0280                  		cmpi.w	#$280,d0
0000C850 6200 0000                  		bhi.w	DeleteObject
0000C854 4E75                       		rts	
0000C856                            ; ===========================================================================
0000C856                            
0000C856                            Obj31_Types:				; XREF: loc_B798
0000C856 1028 0028                  		move.b	$28(a0),d0
0000C85A 0240 000F                  		andi.w	#$F,d0
0000C85E D040                       		add.w	d0,d0
0000C860 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000C864 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000C868                            ; ===========================================================================
0000C868 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000C86A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C86C 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C86E 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C870 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C872 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000C874 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000C876                            ; ===========================================================================
0000C876                            
0000C876                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000C876 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000C87A 7000                       		moveq	#0,d0
0000C87C 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000C880 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000C884 6700                       		beq.s	loc_B8A8	; if not, branch
0000C886 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000C88A 6A00                       		bpl.s	loc_B872
0000C88C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000C892 6700                       		beq.s	loc_B8A0
0000C894                            
0000C894                            loc_B872:
0000C894 4A68 0032                  		tst.w	$32(a0)
0000C898 6700                       		beq.s	loc_B8A0
0000C89A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C89E 0200 000F                  		andi.b	#$F,d0
0000C8A2 6600                       		bne.s	loc_B892
0000C8A4 4A28 0001                  		tst.b	1(a0)
0000C8A8 6A00                       		bpl.s	loc_B892
0000C8AA 303C 00C7                  		move.w	#$C7,d0
0000C8AE 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C8B4                            
0000C8B4                            loc_B892:
0000C8B4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C8BA 6400                       		bcc.s	Obj31_Restart
0000C8BC 317C 0000 0032             		move.w	#0,$32(a0)
0000C8C2                            
0000C8C2                            loc_B8A0:
0000C8C2 317C 0000 0012             		move.w	#0,$12(a0)
0000C8C8 6000                       		bra.s	Obj31_Restart
0000C8CA                            ; ===========================================================================
0000C8CA                            
0000C8CA                            loc_B8A8:				; XREF: Obj31_Type00
0000C8CA 3228 0034                  		move.w	$34(a0),d1
0000C8CE B268 0032                  		cmp.w	$32(a0),d1
0000C8D2 6700                       		beq.s	Obj31_Restart
0000C8D4 3028 0012                  		move.w	$12(a0),d0
0000C8D8 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C8DE D168 0032                  		add.w	d0,$32(a0)
0000C8E2 B268 0032                  		cmp.w	$32(a0),d1
0000C8E6 6200                       		bhi.s	Obj31_Restart
0000C8E8 3141 0032                  		move.w	d1,$32(a0)
0000C8EC 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C8F2 4A28 0001                  		tst.b	1(a0)
0000C8F6 6A00                       		bpl.s	Obj31_Restart
0000C8F8 303C 00BD                  		move.w	#$BD,d0
0000C8FC 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C902                            
0000C902                            Obj31_Restart:
0000C902 7000                       		moveq	#0,d0
0000C904 1028 0032                  		move.b	$32(a0),d0
0000C908 D068 0030                  		add.w	$30(a0),d0
0000C90C 3140 000C                  		move.w	d0,$C(a0)
0000C910 4E75                       		rts	
0000C912                            ; ===========================================================================
0000C912                            
0000C912                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000C912 4A68 0036                  		tst.w	$36(a0)
0000C916 6700                       		beq.s	loc_B938
0000C918 4A68 0038                  		tst.w	$38(a0)
0000C91C 6700                       		beq.s	loc_B902
0000C91E 5368 0038                  		subq.w	#1,$38(a0)
0000C922 6000                       		bra.s	loc_B97C
0000C924                            ; ===========================================================================
0000C924                            
0000C924                            loc_B902:
0000C924 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C928 0200 000F                  		andi.b	#$F,d0
0000C92C 6600                       		bne.s	loc_B91C
0000C92E 4A28 0001                  		tst.b	1(a0)
0000C932 6A00                       		bpl.s	loc_B91C
0000C934 303C 00C7                  		move.w	#$C7,d0
0000C938 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000C93E                            
0000C93E                            loc_B91C:
0000C93E 0468 0080 0032             		subi.w	#$80,$32(a0)
0000C944 6400                       		bcc.s	loc_B97C
0000C946 317C 0000 0032             		move.w	#0,$32(a0)
0000C94C 317C 0000 0012             		move.w	#0,$12(a0)
0000C952 317C 0000 0036             		move.w	#0,$36(a0)
0000C958 6000                       		bra.s	loc_B97C
0000C95A                            ; ===========================================================================
0000C95A                            
0000C95A                            loc_B938:				; XREF: Obj31_Type01
0000C95A 3228 0034                  		move.w	$34(a0),d1
0000C95E B268 0032                  		cmp.w	$32(a0),d1
0000C962 6700                       		beq.s	loc_B97C
0000C964 3028 0012                  		move.w	$12(a0),d0
0000C968 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000C96E D168 0032                  		add.w	d0,$32(a0)
0000C972 B268 0032                  		cmp.w	$32(a0),d1
0000C976 6200                       		bhi.s	loc_B97C
0000C978 3141 0032                  		move.w	d1,$32(a0)
0000C97C 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000C982 317C 0001 0036             		move.w	#1,$36(a0)
0000C988 317C 003C 0038             		move.w	#$3C,$38(a0)
0000C98E 4A28 0001                  		tst.b	1(a0)
0000C992 6A00                       		bpl.s	loc_B97C
0000C994 303C 00BD                  		move.w	#$BD,d0
0000C998 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play stomping sound
0000C99E                            
0000C99E                            loc_B97C:
0000C99E 6000 FF62                  		bra.w	Obj31_Restart
0000C9A2                            ; ===========================================================================
0000C9A2                            
0000C9A2                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000C9A2 3038 D008                  		move.w	($FFFFD008).w,d0
0000C9A6 9068 0008                  		sub.w	8(a0),d0
0000C9AA 6400                       		bcc.s	loc_B98C
0000C9AC 4440                       		neg.w	d0
0000C9AE                            
0000C9AE                            loc_B98C:
0000C9AE 0C40 0090                  		cmpi.w	#$90,d0
0000C9B2 6400                       		bcc.s	loc_B996
0000C9B4 5228 0028                  		addq.b	#1,$28(a0)
0000C9B8                            
0000C9B8                            loc_B996:
0000C9B8 6000 FF48                  		bra.w	Obj31_Restart
0000C9BC                            ; ===========================================================================
0000C9BC                            ; ---------------------------------------------------------------------------
0000C9BC                            ; Object 45 - spiked metal block from beta version (MZ)
0000C9BC                            ; ---------------------------------------------------------------------------
0000C9BC                            
0000C9BC                            Obj45:					; XREF: Obj_Index
0000C9BC 7000                       		moveq	#0,d0
0000C9BE 1028 0024                  		move.b	$24(a0),d0
0000C9C2 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000C9C6 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000C9CA                            ; ===========================================================================
0000C9CA 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000C9CC 0000                       		dc.w Obj45_Solid-Obj45_Index
0000C9CE 0000                       		dc.w loc_BA8E-Obj45_Index
0000C9D0 0000                       		dc.w Obj45_Display-Obj45_Index
0000C9D2 0000                       		dc.w loc_BA7A-Obj45_Index
0000C9D4                            
0000C9D4 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000C9D7 04E4 01                    		dc.b	4, $E4,	  1
0000C9DA 0834 03                    		dc.b	8, $34,	  3
0000C9DD 0628 02                    		dc.b	6, $28,	  2
0000C9E0                            
0000C9E0 3800                       word_B9BE:	dc.w $3800
0000C9E2 A000                       		dc.w -$6000
0000C9E4 5000                       		dc.w $5000
0000C9E6                            ; ===========================================================================
0000C9E6                            
0000C9E6                            Obj45_Main:				; XREF: Obj45_Index
0000C9E6 7000                       		moveq	#0,d0
0000C9E8 1028 0028                  		move.b	$28(a0),d0
0000C9EC D040                       		add.w	d0,d0
0000C9EE 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000C9F2 45F9 0000 C9D4             		lea	(Obj45_Var).l,a2
0000C9F8 2248                       		movea.l	a0,a1
0000C9FA 7203                       		moveq	#3,d1
0000C9FC 6000                       		bra.s	Obj45_Load
0000C9FE                            ; ===========================================================================
0000C9FE                            
0000C9FE                            Obj45_Loop:
0000C9FE 6100 0000                  		bsr.w	SingleObjLoad2
0000CA02 6600                       		bne.s	loc_BA52
0000CA04                            
0000CA04                            Obj45_Load:				; XREF: Obj45_Main
0000CA04 135A 0024                  		move.b	(a2)+,$24(a1)
0000CA08 12BC 0045                  		move.b	#$45,0(a1)
0000CA0C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000CA12 101A                       		move.b	(a2)+,d0
0000CA14 4880                       		ext.w	d0
0000CA16 D068 0008                  		add.w	8(a0),d0
0000CA1A 3340 0008                  		move.w	d0,8(a1)
0000CA1E 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000CA26 337C 0300 0002             		move.w	#$300,2(a1)
0000CA2C 137C 0004 0001             		move.b	#4,1(a1)
0000CA32 3369 0008 0030             		move.w	8(a1),$30(a1)
0000CA38 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000CA3E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000CA44 137C 0020 0019             		move.b	#$20,$19(a1)
0000CA4A 3342 0034                  		move.w	d2,$34(a1)
0000CA4E 137C 0004 0018             		move.b	#4,$18(a1)
0000CA54 0C12 0001                  		cmpi.b	#1,(a2)
0000CA58 6600                       		bne.s	loc_BA40
0000CA5A 137C 0091 0020             		move.b	#$91,$20(a1)
0000CA60                            
0000CA60                            loc_BA40:
0000CA60 135A 001A                  		move.b	(a2)+,$1A(a1)
0000CA64 2348 003C                  		move.l	a0,$3C(a1)
0000CA68 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000CA6C                            
0000CA6C 137C 0003 0018             		move.b	#3,$18(a1)
0000CA72                            
0000CA72                            loc_BA52:
0000CA72 117C 0010 0019             		move.b	#$10,$19(a0)
0000CA78                            
0000CA78                            Obj45_Solid:				; XREF: Obj45_Index
0000CA78 3F28 0008                  		move.w	8(a0),-(sp)
0000CA7C 6100 0000                  		bsr.w	Obj45_Move
0000CA80 323C 0017                  		move.w	#$17,d1
0000CA84 343C 0020                  		move.w	#$20,d2
0000CA88 363C 0020                  		move.w	#$20,d3
0000CA8C 381F                       		move.w	(sp)+,d4
0000CA8E 6100 0000                  		bsr.w	SolidObject
0000CA92 6100 0000                  		bsr.w	DisplaySprite
0000CA96 6000 0000                  		bra.w	Obj45_ChkDel
0000CA9A                            ; ===========================================================================
0000CA9A                            
0000CA9A                            loc_BA7A:				; XREF: Obj45_Index
0000CA9A 2268 003C                  		movea.l	$3C(a0),a1
0000CA9E 1029 0032                  		move.b	$32(a1),d0
0000CAA2 0600 0010                  		addi.b	#$10,d0
0000CAA6 EA08                       		lsr.b	#5,d0
0000CAA8 5600                       		addq.b	#3,d0
0000CAAA 1140 001A                  		move.b	d0,$1A(a0)
0000CAAE                            
0000CAAE                            loc_BA8E:				; XREF: Obj45_Index
0000CAAE 2268 003C                  		movea.l	$3C(a0),a1
0000CAB2 7000                       		moveq	#0,d0
0000CAB4 1029 0032                  		move.b	$32(a1),d0
0000CAB8 4440                       		neg.w	d0
0000CABA D068 0030                  		add.w	$30(a0),d0
0000CABE 3140 0008                  		move.w	d0,8(a0)
0000CAC2                            
0000CAC2                            Obj45_Display:				; XREF: Obj45_Index
0000CAC2 6100 0000                  		bsr.w	DisplaySprite
0000CAC6                            
0000CAC6                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000CAC6 3028 003A                  		move.w	$3A(a0),d0
0000CACA 0240 FF80                  		andi.w	#$FF80,d0
0000CACE 3238 F700                  		move.w	($FFFFF700).w,d1
0000CAD2 0441 0080                  		subi.w	#$80,d1
0000CAD6 0241 FF80                  		andi.w	#$FF80,d1
0000CADA 9041                       		sub.w	d1,d0
0000CADC 0C40 0280                  		cmpi.w	#$280,d0
0000CAE0 6200 0000                  		bhi.w	DeleteObject
0000CAE4 4E75                       		rts	
0000CAE6                            
0000CAE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CAE6                            
0000CAE6                            
0000CAE6                            Obj45_Move:				; XREF: Obj45_Solid
0000CAE6 7000                       		moveq	#0,d0
0000CAE8 1028 0028                  		move.b	$28(a0),d0
0000CAEC D040                       		add.w	d0,d0
0000CAEE 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000CAF2 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000CAF6                            ; End of function Obj45_Move
0000CAF6                            
0000CAF6                            ; ===========================================================================
0000CAF6 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000CAF8 0000                       		dc.w loc_BADA-off_BAD6
0000CAFA                            ; ===========================================================================
0000CAFA                            
0000CAFA                            loc_BADA:				; XREF: off_BAD6
0000CAFA 4A68 0036                  		tst.w	$36(a0)
0000CAFE 6700                       		beq.s	loc_BB08
0000CB00 4A68 0038                  		tst.w	$38(a0)
0000CB04 6700                       		beq.s	loc_BAEC
0000CB06 5368 0038                  		subq.w	#1,$38(a0)
0000CB0A 6000                       		bra.s	loc_BB3C
0000CB0C                            ; ===========================================================================
0000CB0C                            
0000CB0C                            loc_BAEC:
0000CB0C 0468 0080 0032             		subi.w	#$80,$32(a0)
0000CB12 6400                       		bcc.s	loc_BB3C
0000CB14 317C 0000 0032             		move.w	#0,$32(a0)
0000CB1A 317C 0000 0010             		move.w	#0,$10(a0)
0000CB20 317C 0000 0036             		move.w	#0,$36(a0)
0000CB26 6000                       		bra.s	loc_BB3C
0000CB28                            ; ===========================================================================
0000CB28                            
0000CB28                            loc_BB08:				; XREF: loc_BADA
0000CB28 3228 0034                  		move.w	$34(a0),d1
0000CB2C B268 0032                  		cmp.w	$32(a0),d1
0000CB30 6700                       		beq.s	loc_BB3C
0000CB32 3028 0010                  		move.w	$10(a0),d0
0000CB36 0668 0070 0010             		addi.w	#$70,$10(a0)
0000CB3C D168 0032                  		add.w	d0,$32(a0)
0000CB40 B268 0032                  		cmp.w	$32(a0),d1
0000CB44 6200                       		bhi.s	loc_BB3C
0000CB46 3141 0032                  		move.w	d1,$32(a0)
0000CB4A 317C 0000 0010             		move.w	#0,$10(a0)
0000CB50 317C 0001 0036             		move.w	#1,$36(a0)
0000CB56 317C 003C 0038             		move.w	#$3C,$38(a0)
0000CB5C                            
0000CB5C                            loc_BB3C:
0000CB5C 7000                       		moveq	#0,d0
0000CB5E 1028 0032                  		move.b	$32(a0),d0
0000CB62 4440                       		neg.w	d0
0000CB64 D068 0030                  		add.w	$30(a0),d0
0000CB68 3140 0008                  		move.w	d0,8(a0)
0000CB6C 4E75                       		rts	
0000CB6E                            ; ===========================================================================
0000CB6E                            ; ---------------------------------------------------------------------------
0000CB6E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CB6E                            ; ---------------------------------------------------------------------------
0000CB6E                            Map_obj31:
0000CB6E                            	include "_maps\obj31.asm"
0000CB6E                            ; ---------------------------------------------------------------------------
0000CB6E                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000CB6E                            ; ---------------------------------------------------------------------------
0000CB6E 0000                       		dc.w byte_BB64-Map_obj31
0000CB70 0000                       		dc.w byte_BB7E-Map_obj31
0000CB72 0000                       		dc.w byte_BB98-Map_obj31
0000CB74 0000                       		dc.w byte_BB9E-Map_obj31
0000CB76 0000                       		dc.w byte_BBA9-Map_obj31
0000CB78 0000                       		dc.w byte_BBBE-Map_obj31
0000CB7A 0000                       		dc.w byte_BBDD-Map_obj31
0000CB7C 0000                       		dc.w byte_BC06-Map_obj31
0000CB7E 0000                       		dc.w byte_BC06-Map_obj31
0000CB80 0000                       		dc.w byte_BC39-Map_obj31
0000CB82 0000                       		dc.w byte_BC53-Map_obj31
0000CB84 05                         byte_BB64:	dc.b 5
0000CB85 F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000CB8A F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000CB8F EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CB94 F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000CB99 F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000CB9E 05                         byte_BB7E:	dc.b 5
0000CB9F F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000CBA4 F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000CBA9 F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000CBAE F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000CBB3 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000CBB8 01                         byte_BB98:	dc.b 1
0000CBB9 DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000CBBE 02                         byte_BB9E:	dc.b 2
0000CBBF 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CBC4 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CBC9 04                         byte_BBA9:	dc.b 4
0000CBCA E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CBCF F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CBD4 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CBD9 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CBDE 06                         byte_BBBE:	dc.b 6
0000CBDF C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CBE4 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CBE9 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CBEE F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CBF3 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CBF8 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CBFD 08                         byte_BBDD:	dc.b 8
0000CBFE A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CC03 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CC08 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CC0D D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CC12 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC17 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC1C 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC21 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC26 0A                         byte_BC06:	dc.b $A
0000CC27 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000CC2C 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000CC31 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000CC36 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000CC3B C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000CC40 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000CC45 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000CC4A F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000CC4F 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000CC54 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000CC59 05                         byte_BC39:	dc.b 5
0000CC5A F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000CC5F F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000CC64 F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000CC69 F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000CC6E EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000CC73 01                         byte_BC53:	dc.b 1
0000CC74 EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000CC7A 00                         		even
0000CC7A 00                         		even
0000CC7A                            
0000CC7A                            ; ---------------------------------------------------------------------------
0000CC7A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CC7A                            ; ---------------------------------------------------------------------------
0000CC7A                            Map_obj45:
0000CC7A                            	include "_maps\obj45.asm"
0000CC7A                            ; ---------------------------------------------------------------------------
0000CC7A                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000CC7A                            ; ---------------------------------------------------------------------------
0000CC7A 0000                       		dc.w byte_BC6C-Map_obj45
0000CC7C 0000                       		dc.w byte_BC7C-Map_obj45
0000CC7E 0000                       		dc.w byte_BC8C-Map_obj45
0000CC80 0000                       		dc.w byte_BC92-Map_obj45
0000CC82 0000                       		dc.w byte_BC9D-Map_obj45
0000CC84 0000                       		dc.w byte_BCB2-Map_obj45
0000CC86 0000                       		dc.w byte_BCD1-Map_obj45
0000CC88 0000                       		dc.w byte_BCFA-Map_obj45
0000CC8A 0000                       		dc.w byte_BCFA-Map_obj45
0000CC8C 03                         byte_BC6C:	dc.b 3
0000CC8D E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000CC92 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000CC97 F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000CC9C 03                         byte_BC7C:	dc.b 3
0000CC9D E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000CCA2 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000CCA7 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000CCAC 01                         byte_BC8C:	dc.b 1
0000CCAD F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000CCB2 02                         byte_BC92:	dc.b 2
0000CCB3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCB8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCBD 04                         byte_BC9D:	dc.b 4
0000CCBE F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCC3 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCC8 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CCCD F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CCD2 06                         byte_BCB2:	dc.b 6
0000CCD3 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCD8 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCDD F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CCE2 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CCE7 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CCEC F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CCF1 08                         byte_BCD1:	dc.b 8
0000CCF2 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CCF7 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CCFC F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CD01 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CD06 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CD0B F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CD10 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CD15 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CD1A 08                         byte_BCFA:	dc.b 8
0000CD1B F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000CD20 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000CD25 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000CD2A F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000CD2F F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000CD34 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000CD39 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000CD3E F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000CD43 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000CD48 F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000CD4E 00                         		even
0000CD4E 00                         		even
0000CD4E                            
0000CD4E                            ; ===========================================================================
0000CD4E                            ; ---------------------------------------------------------------------------
0000CD4E                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000CD4E                            ; ---------------------------------------------------------------------------
0000CD4E                            
0000CD4E                            Obj32:					; XREF: Obj_Index
0000CD4E 7000                       		moveq	#0,d0
0000CD50 1028 0024                  		move.b	$24(a0),d0
0000CD54 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000CD58 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000CD5C                            ; ===========================================================================
0000CD5C 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000CD5E 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000CD60                            ; ===========================================================================
0000CD60                            
0000CD60                            Obj32_Main:				; XREF: Obj32_Index
0000CD60 5428 0024                  		addq.b	#2,$24(a0)
0000CD64 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000CD6C 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000CD72 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000CD78 6700                       		beq.s	loc_BD60
0000CD7A 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000CD80                            
0000CD80                            loc_BD60:
0000CD80 117C 0004 0001             		move.b	#4,1(a0)
0000CD86 117C 0010 0019             		move.b	#$10,$19(a0)
0000CD8C 117C 0004 0018             		move.b	#4,$18(a0)
0000CD92 5668 000C                  		addq.w	#3,$C(a0)
0000CD96                            
0000CD96                            Obj32_Pressed:				; XREF: Obj32_Index
0000CD96 4A28 0001                  		tst.b	1(a0)
0000CD9A 6A00                       		bpl.s	Obj32_Display
0000CD9C 323C 001B                  		move.w	#$1B,d1
0000CDA0 343C 0005                  		move.w	#5,d2
0000CDA4 363C 0005                  		move.w	#5,d3
0000CDA8 3828 0008                  		move.w	8(a0),d4
0000CDAC 6100 0000                  		bsr.w	SolidObject
0000CDB0 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000CDB6 1028 0028                  		move.b	$28(a0),d0
0000CDBA 0240 000F                  		andi.w	#$F,d0
0000CDBE 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000CDC2 47F3 0000                  		lea	(a3,d0.w),a3
0000CDC6 7600                       		moveq	#0,d3
0000CDC8 0828 0006 0028             		btst	#6,$28(a0)
0000CDCE 6700                       		beq.s	loc_BDB2
0000CDD0 7607                       		moveq	#7,d3
0000CDD2                            
0000CDD2                            loc_BDB2:
0000CDD2 4A28 0028                  		tst.b	$28(a0)
0000CDD6 6A00                       		bpl.s	loc_BDBE
0000CDD8 6100 0000                  		bsr.w	Obj32_MZBlock
0000CDDC 6600                       		bne.s	loc_BDC8
0000CDDE                            
0000CDDE                            loc_BDBE:
0000CDDE 4A28 0025                  		tst.b	$25(a0)
0000CDE2 6600                       		bne.s	loc_BDC8
0000CDE4 0793                       		bclr	d3,(a3)
0000CDE6 6000                       		bra.s	loc_BDDE
0000CDE8                            ; ===========================================================================
0000CDE8                            
0000CDE8                            loc_BDC8:
0000CDE8 4A13                       		tst.b	(a3)
0000CDEA 6600                       		bne.s	loc_BDD6
0000CDEC 303C 00CD                  		move.w	#$CD,d0
0000CDF0 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play switch sound
0000CDF6                            
0000CDF6                            loc_BDD6:
0000CDF6 07D3                       		bset	d3,(a3)
0000CDF8 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000CDFE                            
0000CDFE                            loc_BDDE:
0000CDFE 0828 0005 0028             		btst	#5,$28(a0)
0000CE04 6700                       		beq.s	Obj32_Display
0000CE06 5328 001E                  		subq.b	#1,$1E(a0)
0000CE0A 6A00                       		bpl.s	Obj32_Display
0000CE0C 117C 0007 001E             		move.b	#7,$1E(a0)
0000CE12 0868 0001 001A             		bchg	#1,$1A(a0)
0000CE18                            
0000CE18                            Obj32_Display:
0000CE18 6100 0000                  		bsr.w	DisplaySprite
0000CE1C 3028 0008                  		move.w	8(a0),d0
0000CE20 0240 FF80                  		andi.w	#$FF80,d0
0000CE24 3238 F700                  		move.w	($FFFFF700).w,d1
0000CE28 0441 0080                  		subi.w	#$80,d1
0000CE2C 0241 FF80                  		andi.w	#$FF80,d1
0000CE30 9041                       		sub.w	d1,d0
0000CE32 0C40 0280                  		cmpi.w	#$280,d0
0000CE36 6200 0000                  		bhi.w	Obj32_Delete
0000CE3A 4E75                       		rts	
0000CE3C                            ; ===========================================================================
0000CE3C                            
0000CE3C                            Obj32_Delete:
0000CE3C 6100 0000                  		bsr.w	DeleteObject
0000CE40 4E75                       		rts	
0000CE42                            
0000CE42                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000CE42                            
0000CE42                            
0000CE42                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000CE42 3F03                       		move.w	d3,-(sp)
0000CE44 3428 0008                  		move.w	8(a0),d2
0000CE48 3628 000C                  		move.w	$C(a0),d3
0000CE4C 0442 0010                  		subi.w	#$10,d2
0000CE50 5143                       		subq.w	#8,d3
0000CE52 383C 0020                  		move.w	#$20,d4
0000CE56 3A3C 0010                  		move.w	#$10,d5
0000CE5A 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000CE5E 3C3C 005F                  		move.w	#$5F,d6
0000CE62                            
0000CE62                            Obj32_MZLoop:
0000CE62 4A29 0001                  		tst.b	1(a1)
0000CE66 6A00                       		bpl.s	loc_BE4E
0000CE68 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000CE6C 6700                       		beq.s	loc_BE5E	; if yes, branch
0000CE6E                            
0000CE6E                            loc_BE4E:
0000CE6E 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000CE72 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000CE76                            
0000CE76 361F                       		move.w	(sp)+,d3
0000CE78 7000                       		moveq	#0,d0
0000CE7A                            
0000CE7A                            locret_BE5A:
0000CE7A 4E75                       		rts	
0000CE7C                            ; ===========================================================================
0000CE7C 1010                       Obj32_MZData:	dc.b $10, $10
0000CE7E                            ; ===========================================================================
0000CE7E                            
0000CE7E                            loc_BE5E:				; XREF: Obj32_MZBlock
0000CE7E 7001                       		moveq	#1,d0
0000CE80 0240 003F                  		andi.w	#$3F,d0
0000CE84 D040                       		add.w	d0,d0
0000CE86 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000CE8A 121A                       		move.b	(a2)+,d1
0000CE8C 4881                       		ext.w	d1
0000CE8E 3029 0008                  		move.w	8(a1),d0
0000CE92 9041                       		sub.w	d1,d0
0000CE94 9042                       		sub.w	d2,d0
0000CE96 6400                       		bcc.s	loc_BE80
0000CE98 D241                       		add.w	d1,d1
0000CE9A D041                       		add.w	d1,d0
0000CE9C 6500                       		bcs.s	loc_BE84
0000CE9E 60CE                       		bra.s	loc_BE4E
0000CEA0                            ; ===========================================================================
0000CEA0                            
0000CEA0                            loc_BE80:
0000CEA0 B044                       		cmp.w	d4,d0
0000CEA2 62CA                       		bhi.s	loc_BE4E
0000CEA4                            
0000CEA4                            loc_BE84:
0000CEA4 121A                       		move.b	(a2)+,d1
0000CEA6 4881                       		ext.w	d1
0000CEA8 3029 000C                  		move.w	$C(a1),d0
0000CEAC 9041                       		sub.w	d1,d0
0000CEAE 9043                       		sub.w	d3,d0
0000CEB0 6400                       		bcc.s	loc_BE9A
0000CEB2 D241                       		add.w	d1,d1
0000CEB4 D041                       		add.w	d1,d0
0000CEB6 6500                       		bcs.s	loc_BE9E
0000CEB8 60B4                       		bra.s	loc_BE4E
0000CEBA                            ; ===========================================================================
0000CEBA                            
0000CEBA                            loc_BE9A:
0000CEBA B045                       		cmp.w	d5,d0
0000CEBC 62B0                       		bhi.s	loc_BE4E
0000CEBE                            
0000CEBE                            loc_BE9E:
0000CEBE 361F                       		move.w	(sp)+,d3
0000CEC0 7001                       		moveq	#1,d0
0000CEC2 4E75                       		rts	
0000CEC4                            ; End of function Obj32_MZBlock
0000CEC4                            
0000CEC4                            ; ===========================================================================
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4                            Map_obj32:
0000CEC4                            	include "_maps\obj32.asm"
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000CEC4                            ; ---------------------------------------------------------------------------
0000CEC4 0000                       		dc.w byte_BEAC-Map_obj32
0000CEC6 0000                       		dc.w byte_BEB7-Map_obj32
0000CEC8 0000                       		dc.w byte_BEC2-Map_obj32
0000CECA 0000                       		dc.w byte_BEB7-Map_obj32
0000CECC 02                         byte_BEAC:	dc.b 2
0000CECD F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000CED2 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000CED7 02                         byte_BEB7:	dc.b 2
0000CED8 F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000CEDD F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000CEE2 02                         byte_BEC2:	dc.b 2
0000CEE3 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000CEE8 F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000CEED F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CEF2                            		even
0000CEF2                            		even
0000CEF2                            
0000CEF2                            ; ===========================================================================
0000CEF2                            ; ---------------------------------------------------------------------------
0000CEF2                            ; Object 33 - pushable blocks (MZ, LZ)
0000CEF2                            ; ---------------------------------------------------------------------------
0000CEF2                            
0000CEF2                            Obj33:					; XREF: Obj_Index
0000CEF2 7000                       		moveq	#0,d0
0000CEF4 1028 0024                  		move.b	$24(a0),d0
0000CEF8 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000CEFC 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000CF00                            ; ===========================================================================
0000CF00 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000CF02 0000                       		dc.w loc_BF6E-Obj33_Index
0000CF04 0000                       		dc.w loc_C02C-Obj33_Index
0000CF06                            
0000CF06 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000CF08 4001                       		dc.b $40, 1
0000CF0A                            ; ===========================================================================
0000CF0A                            
0000CF0A                            Obj33_Main:				; XREF: Obj33_Index
0000CF0A 5428 0024                  		addq.b	#2,$24(a0)
0000CF0E 117C 000F 0016             		move.b	#$F,$16(a0)
0000CF14 117C 000F 0017             		move.b	#$F,$17(a0)
0000CF1A 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000CF22 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000CF28 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000CF2E 6600                       		bne.s	loc_BF16
0000CF30 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000CF36                            
0000CF36                            loc_BF16:
0000CF36 117C 0004 0001             		move.b	#4,1(a0)
0000CF3C 117C 0003 0018             		move.b	#3,$18(a0)
0000CF42 3168 0008 0034             		move.w	8(a0),$34(a0)
0000CF48 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000CF4E 7000                       		moveq	#0,d0
0000CF50 1028 0028                  		move.b	$28(a0),d0
0000CF54 D040                       		add.w	d0,d0
0000CF56 0240 000E                  		andi.w	#$E,d0
0000CF5A 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000CF5E 115A 0019                  		move.b	(a2)+,$19(a0)
0000CF62 115A 001A                  		move.b	(a2)+,$1A(a0)
0000CF66 4A28 0028                  		tst.b	$28(a0)
0000CF6A 6700                       		beq.s	Obj33_ChkGone
0000CF6C 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000CF72                            
0000CF72                            Obj33_ChkGone:
0000CF72 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000CF76 7000                       		moveq	#0,d0
0000CF78 1028 0023                  		move.b	$23(a0),d0
0000CF7C 6700                       		beq.s	loc_BF6E
0000CF7E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000CF84 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000CF8A 6600 0000                  		bne.w	DeleteObject
0000CF8E                            
0000CF8E                            loc_BF6E:				; XREF: Obj33_Index
0000CF8E 4A28 0032                  		tst.b	$32(a0)
0000CF92 6600 0000                  		bne.w	loc_C046
0000CF96 7200                       		moveq	#0,d1
0000CF98 1228 0019                  		move.b	$19(a0),d1
0000CF9C 0641 000B                  		addi.w	#$B,d1
0000CFA0 343C 0010                  		move.w	#$10,d2
0000CFA4 363C 0011                  		move.w	#$11,d3
0000CFA8 3828 0008                  		move.w	8(a0),d4
0000CFAC 6100 0000                  		bsr.w	loc_C186
0000CFB0 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000CFB6 6600                       		bne.s	loc_BFC6	; if not, branch
0000CFB8 08A8 0007 0028             		bclr	#7,$28(a0)
0000CFBE 3028 0008                  		move.w	8(a0),d0
0000CFC2 0C40 0A20                  		cmpi.w	#$A20,d0
0000CFC6 6500                       		bcs.s	loc_BFC6
0000CFC8 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000CFCC 6400                       		bcc.s	loc_BFC6
0000CFCE 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000CFD2 0440 001C                  		subi.w	#$1C,d0
0000CFD6 3140 000C                  		move.w	d0,$C(a0)
0000CFDA 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000CFE0 08E8 0007 0028             		bset	#7,$28(a0)
0000CFE6                            
0000CFE6                            loc_BFC6:
0000CFE6 3028 0008                  		move.w	8(a0),d0
0000CFEA 0240 FF80                  		andi.w	#$FF80,d0
0000CFEE 3238 F700                  		move.w	($FFFFF700).w,d1
0000CFF2 0441 0080                  		subi.w	#$80,d1
0000CFF6 0241 FF80                  		andi.w	#$FF80,d1
0000CFFA 9041                       		sub.w	d1,d0
0000CFFC 0C40 0280                  		cmpi.w	#$280,d0
0000D000 6200                       		bhi.s	loc_BFE6
0000D002 6000 0000                  		bra.w	DisplaySprite
0000D006                            ; ===========================================================================
0000D006                            
0000D006                            loc_BFE6:
0000D006 3028 0034                  		move.w	$34(a0),d0
0000D00A 0240 FF80                  		andi.w	#$FF80,d0
0000D00E 3238 F700                  		move.w	($FFFFF700).w,d1
0000D012 0441 0080                  		subi.w	#$80,d1
0000D016 0241 FF80                  		andi.w	#$FF80,d1
0000D01A 9041                       		sub.w	d1,d0
0000D01C 0C40 0280                  		cmpi.w	#$280,d0
0000D020 6200                       		bhi.s	loc_C016
0000D022 3168 0034 0008             		move.w	$34(a0),8(a0)
0000D028 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000D02E 117C 0004 0024             		move.b	#4,$24(a0)
0000D034 6000                       		bra.s	loc_C02C
0000D036                            ; ===========================================================================
0000D036                            
0000D036                            loc_C016:
0000D036 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D03A 7000                       		moveq	#0,d0
0000D03C 1028 0023                  		move.b	$23(a0),d0
0000D040 6700                       		beq.s	loc_C028
0000D042 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000D048                            
0000D048                            loc_C028:
0000D048 6000 0000                  		bra.w	DeleteObject
0000D04C                            ; ===========================================================================
0000D04C                            
0000D04C                            loc_C02C:				; XREF: Obj33_Index
0000D04C 6100 0000                  		bsr.w	ChkObjOnScreen2
0000D050 6700                       		beq.s	locret_C044
0000D052 117C 0002 0024             		move.b	#2,$24(a0)
0000D058 4228 0032                  		clr.b	$32(a0)
0000D05C 4268 0010                  		clr.w	$10(a0)
0000D060 4268 0012                  		clr.w	$12(a0)
0000D064                            
0000D064                            locret_C044:
0000D064 4E75                       		rts	
0000D066                            ; ===========================================================================
0000D066                            
0000D066                            loc_C046:				; XREF: loc_BF6E
0000D066 3F28 0008                  		move.w	8(a0),-(sp)
0000D06A 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000D070 6400                       		bcc.s	loc_C056
0000D072 6100 0000                  		bsr.w	SpeedToPos
0000D076                            
0000D076                            loc_C056:
0000D076 0828 0001 0022             		btst	#1,$22(a0)
0000D07C 6700                       		beq.s	loc_C0A0
0000D07E 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D084 4EB9 0000 0000             		jsr	ObjHitFloor
0000D08A 4A41                       		tst.w	d1
0000D08C 6A00 0000                  		bpl.w	loc_C09E
0000D090 D368 000C                  		add.w	d1,$C(a0)
0000D094 4268 0012                  		clr.w	$12(a0)
0000D098 08A8 0001 0022             		bclr	#1,$22(a0)
0000D09E 3011                       		move.w	(a1),d0
0000D0A0 0240 03FF                  		andi.w	#$3FF,d0
0000D0A4 0C40 016A                  		cmpi.w	#$16A,d0
0000D0A8 6500                       		bcs.s	loc_C09E
0000D0AA 3028 0030                  		move.w	$30(a0),d0
0000D0AE E640                       		asr.w	#3,d0
0000D0B0 3140 0010                  		move.w	d0,$10(a0)
0000D0B4 117C 0001 0032             		move.b	#1,$32(a0)
0000D0BA 4268 000E                  		clr.w	$E(a0)
0000D0BE                            
0000D0BE                            loc_C09E:
0000D0BE 6000                       		bra.s	loc_C0E6
0000D0C0                            ; ===========================================================================
0000D0C0                            
0000D0C0                            loc_C0A0:
0000D0C0 4A68 0010                  		tst.w	$10(a0)
0000D0C4 6700 0000                  		beq.w	loc_C0D6
0000D0C8 6B00                       		bmi.s	loc_C0BC
0000D0CA 7600                       		moveq	#0,d3
0000D0CC 1628 0019                  		move.b	$19(a0),d3
0000D0D0 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D0D6 4A41                       		tst.w	d1		; has block touched a wall?
0000D0D8 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D0DA 6000                       		bra.s	loc_C0E6
0000D0DC                            ; ===========================================================================
0000D0DC                            
0000D0DC                            loc_C0BC:
0000D0DC 7600                       		moveq	#0,d3
0000D0DE 1628 0019                  		move.b	$19(a0),d3
0000D0E2 4643                       		not.w	d3
0000D0E4 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D0EA 4A41                       		tst.w	d1		; has block touched a wall?
0000D0EC 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000D0EE 6000                       		bra.s	loc_C0E6
0000D0F0                            ; ===========================================================================
0000D0F0                            
0000D0F0                            Obj33_StopPush:
0000D0F0 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000D0F4 6000                       		bra.s	loc_C0E6
0000D0F6                            ; ===========================================================================
0000D0F6                            
0000D0F6                            loc_C0D6:
0000D0F6 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000D0FE 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000D104 6400                       		bcc.s	loc_C104
0000D106                            
0000D106                            loc_C0E6:
0000D106 7200                       		moveq	#0,d1
0000D108 1228 0019                  		move.b	$19(a0),d1
0000D10C 0641 000B                  		addi.w	#$B,d1
0000D110 343C 0010                  		move.w	#$10,d2
0000D114 363C 0011                  		move.w	#$11,d3
0000D118 381F                       		move.w	(sp)+,d4
0000D11A 6100 0000                  		bsr.w	loc_C186
0000D11E 6100                       		bsr.s	Obj33_ChkLava
0000D120 6000 FEC4                  		bra.w	loc_BFC6
0000D124                            ; ===========================================================================
0000D124                            
0000D124                            loc_C104:
0000D124 381F                       		move.w	(sp)+,d4
0000D126 43F8 D000                  		lea	($FFFFD000).w,a1
0000D12A 08A9 0003 0022             		bclr	#3,$22(a1)
0000D130 08A8 0003 0022             		bclr	#3,$22(a0)
0000D136 6000 FECE                  		bra.w	loc_BFE6
0000D13A                            ; ===========================================================================
0000D13A                            
0000D13A                            Obj33_ChkLava:
0000D13A 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000D140 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000D142 343C FFE0                  		move.w	#-$20,d2
0000D146 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000D14C 6700                       		beq.s	Obj33_LoadLava
0000D14E 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000D154 6700                       		beq.s	Obj33_LoadLava
0000D156 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000D15C 6700                       		beq.s	Obj33_LoadLava
0000D15E 4E75                       		rts	
0000D160                            ; ===========================================================================
0000D160                            
0000D160                            Obj33_ChkLava2:
0000D160 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000D166 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000D168 343C 0020                  		move.w	#$20,d2
0000D16C 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000D172 6700                       		beq.s	Obj33_LoadLava
0000D174 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000D17A 6700                       		beq.s	Obj33_LoadLava
0000D17C                            
0000D17C                            Obj33_NoLava:
0000D17C 4E75                       		rts	
0000D17E                            ; ===========================================================================
0000D17E                            
0000D17E                            Obj33_LoadLava:
0000D17E 6100 0000                  		bsr.w	SingleObjLoad
0000D182 6600                       		bne.s	locret_C184
0000D184 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000D188 3368 0008 0008             		move.w	8(a0),8(a1)
0000D18E D569 0008                  		add.w	d2,8(a1)
0000D192 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D198 0669 0010 000C             		addi.w	#$10,$C(a1)
0000D19E 2348 003C                  		move.l	a0,$3C(a1)
0000D1A2                            
0000D1A2                            locret_C184:
0000D1A2 4E75                       		rts	
0000D1A4                            ; ===========================================================================
0000D1A4                            
0000D1A4                            loc_C186:				; XREF: loc_BF6E
0000D1A4 1028 0025                  		move.b	$25(a0),d0
0000D1A8 6700 0000                  		beq.w	loc_C218
0000D1AC 5500                       		subq.b	#2,d0
0000D1AE 6600                       		bne.s	loc_C1AA
0000D1B0 6100 B30E                  		bsr.w	ExitPlatform
0000D1B4 0829 0003 0022             		btst	#3,$22(a1)
0000D1BA 6600                       		bne.s	loc_C1A4
0000D1BC 4228 0025                  		clr.b	$25(a0)
0000D1C0 4E75                       		rts	
0000D1C2                            ; ===========================================================================
0000D1C2                            
0000D1C2                            loc_C1A4:
0000D1C2 3404                       		move.w	d4,d2
0000D1C4 6000 B858                  		bra.w	MvSonicOnPtfm
0000D1C8                            ; ===========================================================================
0000D1C8                            
0000D1C8                            loc_C1AA:
0000D1C8 5500                       		subq.b	#2,d0
0000D1CA 6600                       		bne.s	loc_C1F2
0000D1CC 6100 0000                  		bsr.w	SpeedToPos
0000D1D0 0668 0018 0012             		addi.w	#$18,$12(a0)
0000D1D6 4EB9 0000 0000             		jsr	ObjHitFloor
0000D1DC 4A41                       		tst.w	d1
0000D1DE 6A00 0000                  		bpl.w	locret_C1F0
0000D1E2 D368 000C                  		add.w	d1,$C(a0)
0000D1E6 4268 0012                  		clr.w	$12(a0)
0000D1EA 4228 0025                  		clr.b	$25(a0)
0000D1EE 3011                       		move.w	(a1),d0
0000D1F0 0240 03FF                  		andi.w	#$3FF,d0
0000D1F4 0C40 016A                  		cmpi.w	#$16A,d0
0000D1F8 6500                       		bcs.s	locret_C1F0
0000D1FA 3028 0030                  		move.w	$30(a0),d0
0000D1FE E640                       		asr.w	#3,d0
0000D200 3140 0010                  		move.w	d0,$10(a0)
0000D204 117C 0001 0032             		move.b	#1,$32(a0)
0000D20A 4268 000E                  		clr.w	$E(a0)
0000D20E                            
0000D20E                            locret_C1F0:
0000D20E 4E75                       		rts	
0000D210                            ; ===========================================================================
0000D210                            
0000D210                            loc_C1F2:
0000D210 6100 0000                  		bsr.w	SpeedToPos
0000D214 3028 0008                  		move.w	8(a0),d0
0000D218 0240 000C                  		andi.w	#$C,d0
0000D21C 6600 0000                  		bne.w	locret_C2E4
0000D220 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000D226 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000D22C 4268 0010                  		clr.w	$10(a0)
0000D230 5528 0025                  		subq.b	#2,$25(a0)
0000D234 4E75                       		rts	
0000D236                            ; ===========================================================================
0000D236                            
0000D236                            loc_C218:
0000D236 6100 0000                  		bsr.w	loc_FAC8
0000D23A 4A44                       		tst.w	d4
0000D23C 6700 0000                  		beq.w	locret_C2E4
0000D240 6B00 0000                  		bmi.w	locret_C2E4
0000D244 4A28 0032                  		tst.b	$32(a0)
0000D248 6700                       		beq.s	loc_C230
0000D24A 6000 0000                  		bra.w	locret_C2E4
0000D24E                            ; ===========================================================================
0000D24E                            
0000D24E                            loc_C230:
0000D24E 4A40                       		tst.w	d0
0000D250 6700 0000                  		beq.w	locret_C2E4
0000D254 6B00                       		bmi.s	loc_C268
0000D256 0829 0000 0022             		btst	#0,$22(a1)
0000D25C 6600 0000                  		bne.w	locret_C2E4
0000D260 3F00                       		move.w	d0,-(sp)
0000D262 7600                       		moveq	#0,d3
0000D264 1628 0019                  		move.b	$19(a0),d3
0000D268 4EB9 0000 0000             		jsr	ObjHitWallRight
0000D26E 301F                       		move.w	(sp)+,d0
0000D270 4A41                       		tst.w	d1
0000D272 6B00 0000                  		bmi.w	locret_C2E4
0000D276 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000D27E 7001                       		moveq	#1,d0
0000D280 323C 0040                  		move.w	#$40,d1
0000D284 6000                       		bra.s	loc_C294
0000D286                            ; ===========================================================================
0000D286                            
0000D286                            loc_C268:
0000D286 0829 0000 0022             		btst	#0,$22(a1)
0000D28C 6700                       		beq.s	locret_C2E4
0000D28E 3F00                       		move.w	d0,-(sp)
0000D290 7600                       		moveq	#0,d3
0000D292 1628 0019                  		move.b	$19(a0),d3
0000D296 4643                       		not.w	d3
0000D298 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000D29E 301F                       		move.w	(sp)+,d0
0000D2A0 4A41                       		tst.w	d1
0000D2A2 6B00                       		bmi.s	locret_C2E4
0000D2A4 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000D2AC 70FF                       		moveq	#-1,d0
0000D2AE 323C FFC0                  		move.w	#-$40,d1
0000D2B2                            
0000D2B2                            loc_C294:
0000D2B2 43F8 D000                  		lea	($FFFFD000).w,a1
0000D2B6 D169 0008                  		add.w	d0,8(a1)
0000D2BA 3341 0014                  		move.w	d1,$14(a1)
0000D2BE 337C 0000 0010             		move.w	#0,$10(a1)
0000D2C4 3F00                       		move.w	d0,-(sp)
0000D2C6 303C 00A7                  		move.w	#$A7,d0
0000D2CA 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play pushing sound
0000D2D0 301F                       		move.w	(sp)+,d0
0000D2D2 4A28 0028                  		tst.b	$28(a0)
0000D2D6 6B00                       		bmi.s	locret_C2E4
0000D2D8 3F00                       		move.w	d0,-(sp)
0000D2DA 4EB9 0000 0000             		jsr	ObjHitFloor
0000D2E0 301F                       		move.w	(sp)+,d0
0000D2E2 0C41 0004                  		cmpi.w	#4,d1
0000D2E6 6F00                       		ble.s	loc_C2E0
0000D2E8 317C 0400 0010             		move.w	#$400,$10(a0)
0000D2EE 4A40                       		tst.w	d0
0000D2F0 6A00                       		bpl.s	loc_C2D8
0000D2F2 4468 0010                  		neg.w	$10(a0)
0000D2F6                            
0000D2F6                            loc_C2D8:
0000D2F6 117C 0006 0025             		move.b	#6,$25(a0)
0000D2FC 6000                       		bra.s	locret_C2E4
0000D2FE                            ; ===========================================================================
0000D2FE                            
0000D2FE                            loc_C2E0:
0000D2FE D368 000C                  		add.w	d1,$C(a0)
0000D302                            
0000D302                            locret_C2E4:
0000D302 4E75                       		rts	
0000D304                            ; ===========================================================================
0000D304                            ; ---------------------------------------------------------------------------
0000D304                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D304                            ; ---------------------------------------------------------------------------
0000D304                            Map_obj33:
0000D304                            	include "_maps\obj33.asm"
0000D304                            ; ---------------------------------------------------------------------------
0000D304                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000D304                            ; ---------------------------------------------------------------------------
0000D304 0000                       		dc.w byte_C2EA-Map_obj33
0000D306 0000                       		dc.w byte_C2F0-Map_obj33
0000D308 01                         byte_C2EA:	dc.b 1
0000D309 F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000D30E 04                         byte_C2F0:	dc.b 4
0000D30F F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000D314 F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000D319 F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000D31E F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000D324 00                         		even
0000D324 00                         		even
0000D324                            
0000D324                            ; ===========================================================================
0000D324                            ; ---------------------------------------------------------------------------
0000D324                            ; Object 34 - zone title cards
0000D324                            ; ---------------------------------------------------------------------------
0000D324                            Obj34:					; XREF: Obj_Index
0000D324 7000                       		moveq	#0,d0
0000D326 1028 0024                  		move.b	$24(a0),d0
0000D32A 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000D32E 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000D332                            ; ===========================================================================
0000D332 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000D334 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000D336 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D338 0000                       		dc.w Obj34_Wait-Obj34_Index
0000D33A                            ; ===========================================================================
0000D33A                            
0000D33A                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000D33A 2248                       		movea.l	a0,a1
0000D33C 7000                       		moveq	#0,d0
0000D33E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D342 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000D348 6600                       		bne.s	Obj34_CheckFZ
0000D34A 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000D34C                            
0000D34C                            Obj34_CheckFZ:
0000D34C 3400                       		move.w	d0,d2
0000D34E 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000D354 6600                       		bne.s	Obj34_LoadConfig
0000D356 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000D358 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000D35A                            
0000D35A                            Obj34_LoadConfig:
0000D35A 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000D360 E948                       		lsl.w	#4,d0
0000D362 D6C0                       		adda.w	d0,a3
0000D364 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000D36A 7203                       		moveq	#3,d1
0000D36C                            
0000D36C                            Obj34_Loop:
0000D36C 12BC 0034                  		move.b	#$34,0(a1)
0000D370 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000D374 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000D378 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000D37C 335A 000A                  		move.w	(a2)+,$A(a1)
0000D380 135A 0024                  		move.b	(a2)+,$24(a1)
0000D384 101A                       		move.b	(a2)+,d0
0000D386 6600                       		bne.s	Obj34_ActNumber
0000D388 1002                       		move.b	d2,d0
0000D38A                            
0000D38A                            Obj34_ActNumber:
0000D38A 0C00 0007                  		cmpi.b	#7,d0
0000D38E 6600                       		bne.s	Obj34_MakeSprite
0000D390 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000D394 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000D39A 6600                       		bne.s	Obj34_MakeSprite
0000D39C 5300                       		subq.b	#1,d0
0000D39E                            
0000D39E                            Obj34_MakeSprite:
0000D39E 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000D3A2 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000D3AA 337C 8580 0002             		move.w	#$8580,2(a1)
0000D3B0 137C 0078 0019             		move.b	#$78,$19(a1)
0000D3B6 137C 0000 0001             		move.b	#0,1(a1)
0000D3BC 137C 0000 0018             		move.b	#0,$18(a1)
0000D3C2 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000D3C8 43E9 0040                  		lea	$40(a1),a1	; next object
0000D3CC 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000D3D0                            
0000D3D0                            Obj34_ChkPos:				; XREF: Obj34_Index
0000D3D0 7210                       		moveq	#$10,d1		; set horizontal speed
0000D3D2 3028 0030                  		move.w	$30(a0),d0
0000D3D6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000D3DA 6700                       		beq.s	loc_C3C8	; if yes, branch
0000D3DC 6C00                       		bge.s	Obj34_Move
0000D3DE 4441                       		neg.w	d1
0000D3E0                            
0000D3E0                            Obj34_Move:
0000D3E0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D3E4                            
0000D3E4                            loc_C3C8:
0000D3E4 3028 0008                  		move.w	8(a0),d0
0000D3E8 6B00                       		bmi.s	locret_C3D8
0000D3EA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D3EE 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000D3F0 6000 0000                  		bra.w	DisplaySprite
0000D3F4                            ; ===========================================================================
0000D3F4                            
0000D3F4                            locret_C3D8:
0000D3F4 4E75                       		rts	
0000D3F6                            ; ===========================================================================
0000D3F6                            
0000D3F6                            Obj34_Wait:				; XREF: Obj34_Index
0000D3F6 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000D3FA 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000D3FC 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000D400 6000 0000                  		bra.w	DisplaySprite
0000D404                            ; ===========================================================================
0000D404                            
0000D404                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000D404 4A28 0001                  		tst.b	1(a0)
0000D408 6A00                       		bpl.s	Obj34_ChangeArt
0000D40A 7220                       		moveq	#$20,d1
0000D40C 3028 0032                  		move.w	$32(a0),d0
0000D410 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000D414 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000D416 6C00                       		bge.s	Obj34_Move2
0000D418 4441                       		neg.w	d1
0000D41A                            
0000D41A                            Obj34_Move2:
0000D41A D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D41E 3028 0008                  		move.w	8(a0),d0
0000D422 6B00                       		bmi.s	locret_C412
0000D424 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D428 6400                       		bcc.s	locret_C412	; if yes, branch
0000D42A 6000 0000                  		bra.w	DisplaySprite
0000D42E                            ; ===========================================================================
0000D42E                            
0000D42E                            locret_C412:
0000D42E 4E75                       		rts	
0000D430                            ; ===========================================================================
0000D430                            
0000D430                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000D430 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000D436 6600                       		bne.s	Obj34_Delete
0000D438 7002                       		moveq	#2,d0
0000D43A 4EB9 0000 1E58             		jsr	(LoadPLC).l	; load explosion patterns
0000D440 7000                       		moveq	#0,d0
0000D442 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D446 103B 0000                  		move.b	Obj34_AnimalPLC(pc,d0.w),d0
0000D44A 4EB9 0000 1E58             		jsr	(LoadPLC).l	; load animal patterns
0000D450                            
0000D450                            Obj34_Delete:
0000D450 6000 0000                  		bra.w	DeleteObject
0000D454                            
0000D454                            ; ===========================================================================
0000D454                            Obj34_AnimalPLC:
0000D454 15                         		dc.b $15	; "GHZ"
0000D455 16                         		dc.b $16
0000D456 17                         		dc.b $17
0000D457 18                         		dc.b $18
0000D458 19                         		dc.b $19
0000D459 1A                         		dc.b $1A	; "SBZ"
0000D45A 15                         		dc.b $15	; Ending (placeholder?
0000D45B 1A                         		dc.b $1A	; MAKOTO
0000D45C                            	even
0000D45C 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000D45E 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000D460 00E4                       		dc.w $E4
0000D462 0206                       		dc.b 2,	6
0000D464 00EA                       		dc.w $EA
0000D466 0207                       		dc.b 2,	7
0000D468 00E0                       		dc.w $E0
0000D46A 020A                       		dc.b 2,	$A
0000D46C                            ; ---------------------------------------------------------------------------
0000D46C                            ; Title	card configuration data
0000D46C                            ; Format:
0000D46C                            ; 4 bytes per item (YYYY XXXX)
0000D46C                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000D46C                            ; ---------------------------------------------------------------------------
0000D46C 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D47C 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000D48C 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000D49C 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000D4AC 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000D4BC 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000D4CC 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000D4DC 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D4EC 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000D4FC                            ; ===========================================================================
0000D4FC                            ; ---------------------------------------------------------------------------
0000D4FC                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000D4FC                            ; ---------------------------------------------------------------------------
0000D4FC                            
0000D4FC                            Obj39:					; XREF: Obj_Index
0000D4FC 7000                       		moveq	#0,d0
0000D4FE 1028 0024                  		move.b	$24(a0),d0
0000D502 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000D506 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000D50A                            ; ===========================================================================
0000D50A 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000D50C 0000                       		dc.w loc_C50C-Obj39_Index
0000D50E 0000                       		dc.w Obj39_Wait-Obj39_Index
0000D510                            ; ===========================================================================
0000D510                            
0000D510                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000D510 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D514 6700                       		beq.s	Obj39_Main	; if yes, branch
0000D516 4E75                       		rts	
0000D518                            ; ===========================================================================
0000D518                            
0000D518                            Obj39_Main:
0000D518 5428 0024                  		addq.b	#2,$24(a0)
0000D51C 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000D522 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000D528 6700                       		beq.s	loc_C4EC	; if not, branch
0000D52A 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000D530                            
0000D530                            loc_C4EC:
0000D530 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000D536 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000D53E 317C 855E 0002             		move.w	#$855E,2(a0)
0000D544 117C 0000 0001             		move.b	#0,1(a0)
0000D54A 117C 0000 0018             		move.b	#0,$18(a0)
0000D550                            
0000D550                            loc_C50C:				; XREF: Obj39_Index
0000D550 7210                       		moveq	#$10,d1		; set horizontal speed
0000D552 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000D558 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000D55A 6500                       		bcs.s	Obj39_Move
0000D55C 4441                       		neg.w	d1
0000D55E                            
0000D55E                            Obj39_Move:
0000D55E D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D562 6000 0000                  		bra.w	DisplaySprite
0000D566                            ; ===========================================================================
0000D566                            
0000D566                            Obj39_SetWait:				; XREF: Obj39_Main
0000D566 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000D56C 5428 0024                  		addq.b	#2,$24(a0)
0000D570 4E75                       		rts	
0000D572                            ; ===========================================================================
0000D572                            
0000D572                            Obj39_Wait:				; XREF: Obj39_Index
0000D572 1038 F605                  		move.b	($FFFFF605).w,d0
0000D576 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000D57A 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000D57C 0828 0000 001A             		btst	#0,$1A(a0)
0000D582 6600                       		bne.s	Obj39_Display
0000D584 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000D588 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000D58A 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D58E 6000 0000                  		bra.w	DisplaySprite
0000D592                            ; ===========================================================================
0000D592                            
0000D592                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000D592 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000D596 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000D598 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000D59E 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000D5A2 6600                       		bne.s	Obj39_Display	; if yes, branch
0000D5A4 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000D5AA 6000                       		bra.s	Obj39_Display
0000D5AC                            ; ===========================================================================
0000D5AC                            
0000D5AC                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000D5AC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D5B2                            
0000D5B2                            Obj39_Display:				; XREF: Obj39_ChgMode
0000D5B2 6000 0000                  		bra.w	DisplaySprite
0000D5B6                            ; ===========================================================================
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000D5B6                            ; ---------------------------------------------------------------------------
0000D5B6                            
0000D5B6                            Obj3A:					; XREF: Obj_Index
0000D5B6 7000                       		moveq	#0,d0
0000D5B8 1028 0024                  		move.b	$24(a0),d0
0000D5BC 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000D5C0 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000D5C4                            ; ===========================================================================
0000D5C4 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000D5C6 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000D5C8 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5CA 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000D5CC 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5CE 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000D5D0 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000D5D2 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000D5D4 0000                       		dc.w loc_C766-Obj3A_Index
0000D5D6                            ; ===========================================================================
0000D5D6                            
0000D5D6                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000D5D6 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D5DA 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000D5DC 4E75                       		rts	
0000D5DE                            ; ===========================================================================
0000D5DE                            
0000D5DE                            Obj3A_Main:
0000D5DE 2248                       		movea.l	a0,a1
0000D5E0 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000D5E6 7206                       		moveq	#6,d1
0000D5E8                            
0000D5E8                            Obj3A_Loop:
0000D5E8 12BC 003A                  		move.b	#$3A,0(a1)
0000D5EC 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000D5F0 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000D5F4 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D5F8 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D5FC 135A 0024                  		move.b	(a2)+,$24(a1)
0000D600 101A                       		move.b	(a2)+,d0
0000D602 0C00 0006                  		cmpi.b	#6,d0
0000D606 6600                       		bne.s	loc_C5CA
0000D608 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000D60C                            
0000D60C                            loc_C5CA:
0000D60C 1340 001A                  		move.b	d0,$1A(a1)
0000D610 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000D618 337C 8580 0002             		move.w	#$8580,2(a1)
0000D61E 137C 0000 0001             		move.b	#0,1(a1)
0000D624 43E9 0040                  		lea	$40(a1),a1
0000D628 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000D62C                            
0000D62C                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000D62C 7210                       		moveq	#$10,d1		; set horizontal speed
0000D62E 3028 0030                  		move.w	$30(a0),d0
0000D632 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D636 6700                       		beq.s	loc_C61A	; if yes, branch
0000D638 6C00                       		bge.s	Obj3A_Move
0000D63A 4441                       		neg.w	d1
0000D63C                            
0000D63C                            Obj3A_Move:
0000D63C D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D640                            
0000D640                            loc_C5FE:				; XREF: loc_C61A
0000D640 3028 0008                  		move.w	8(a0),d0
0000D644 6B00                       		bmi.s	locret_C60E
0000D646 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D64A 6400                       		bcc.s	locret_C60E	; if yes, branch
0000D64C 6000 0000                  		bra.w	DisplaySprite
0000D650                            ; ===========================================================================
0000D650                            
0000D650                            locret_C60E:
0000D650 4E75                       		rts	
0000D652                            ; ===========================================================================
0000D652                            
0000D652                            loc_C610:				; XREF: loc_C61A
0000D652 117C 000E 0024             		move.b	#$E,$24(a0)
0000D658 6000 0000                  		bra.w	Obj3A_ChkPos2
0000D65C                            ; ===========================================================================
0000D65C                            
0000D65C                            loc_C61A:				; XREF: Obj3A_ChkPos
0000D65C 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000D662 67EE                       		beq.s	loc_C610
0000D664 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D66A 66D4                       		bne.s	loc_C5FE
0000D66C 5428 0024                  		addq.b	#2,$24(a0)
0000D670 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D676                            
0000D676                            Obj3A_Wait:				; XREF: Obj3A_Index
0000D676 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D67A 6600                       		bne.s	Obj3A_Display
0000D67C 5428 0024                  		addq.b	#2,$24(a0)
0000D680                            
0000D680                            Obj3A_Display:
0000D680 6000 0000                  		bra.w	DisplaySprite
0000D684                            ; ===========================================================================
0000D684                            
0000D684                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000D684 6100 0000                  		bsr.w	DisplaySprite
0000D688 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000D68E 7000                       		moveq	#0,d0
0000D690 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000D694 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000D696 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D69A 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000D6A0                            
0000D6A0                            Obj3A_RingBonus:
0000D6A0 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D6A4 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000D6A6 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000D6AA 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D6B0                            
0000D6B0                            Obj3A_ChkBonus:
0000D6B0 4A40                       		tst.w	d0		; is there any bonus?
0000D6B2 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000D6B4 303C 00C5                  		move.w	#$C5,d0
0000D6B8 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D6BE 5428 0024                  		addq.b	#2,$24(a0)
0000D6C2 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000D6C8 6600                       		bne.s	Obj3A_SetDelay
0000D6CA 5828 0024                  		addq.b	#4,$24(a0)
0000D6CE                            
0000D6CE                            Obj3A_SetDelay:
0000D6CE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D6D4                            
0000D6D4                            locret_C692:
0000D6D4 4E75                       		rts	
0000D6D6                            ; ===========================================================================
0000D6D6                            
0000D6D6                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000D6D6 4EB9 0000 0000             		jsr	AddPoints
0000D6DC 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D6E0 0200 0003                  		andi.b	#3,d0
0000D6E4 66EE                       		bne.s	locret_C692
0000D6E6 303C 00CD                  		move.w	#$CD,d0
0000D6EA 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D6F0                            ; ===========================================================================
0000D6F0                            
0000D6F0                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000D6F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000D6F4 0240 0007                  		andi.w	#7,d0
0000D6F8 E748                       		lsl.w	#3,d0
0000D6FA 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000D6FE 0241 0003                  		andi.w	#3,d1
0000D702 D241                       		add.w	d1,d1
0000D704 D041                       		add.w	d1,d0
0000D706 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000D70A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000D70E 4A40                       		tst.w	d0
0000D710 6600                       		bne.s	Obj3A_ChkSS
0000D712 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000D718 6000                       		bra.s	Obj3A_Display2
0000D71A                            ; ===========================================================================
0000D71A                            
0000D71A                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000D71A 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000D71E 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000D722 6700                       		beq.s	loc_C6EA	; if not, branch
0000D724 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000D72A 6000                       		bra.s	Obj3A_Display2
0000D72C                            ; ===========================================================================
0000D72C                            
0000D72C                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000D72C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D732                            
0000D732                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000D732 6000 0000                  		bra.w	DisplaySprite
0000D736                            ; ===========================================================================
0000D736                            ; ---------------------------------------------------------------------------
0000D736                            ; Level	order array
0000D736                            ; ---------------------------------------------------------------------------
0000D736                            LevelOrder:	incbin	misc\lvl_ord.bin
0000D776                            		even
0000D776                            ; ===========================================================================
0000D776                            
0000D776                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000D776 7220                       		moveq	#$20,d1		; set horizontal speed
0000D778 3028 0032                  		move.w	$32(a0),d0
0000D77C B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000D780 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000D782 6C00                       		bge.s	Obj3A_Move2
0000D784 4441                       		neg.w	d1
0000D786                            
0000D786                            Obj3A_Move2:
0000D786 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D78A 3028 0008                  		move.w	8(a0),d0
0000D78E 6B00                       		bmi.s	locret_C748
0000D790 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D794 6400                       		bcc.s	locret_C748	; if yes, branch
0000D796 6000 0000                  		bra.w	DisplaySprite
0000D79A                            ; ===========================================================================
0000D79A                            
0000D79A                            locret_C748:
0000D79A 4E75                       		rts	
0000D79C                            ; ===========================================================================
0000D79C                            
0000D79C                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000D79C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000D7A2 6600 0000                  		bne.w	DeleteObject
0000D7A6 5428 0024                  		addq.b	#2,$24(a0)
0000D7AA 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000D7AE 303C 008D                  		move.w	#$8D,d0
0000D7B2 4EF9 0000 1C6E             		jmp	(PlaySound).l	; play FZ music
0000D7B8                            ; ===========================================================================
0000D7B8                            
0000D7B8                            loc_C766:				; XREF: Obj3A_Index
0000D7B8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000D7BC 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000D7C2 6700 0000                  		beq.w	DeleteObject
0000D7C6 4E75                       		rts	
0000D7C8                            ; ===========================================================================
0000D7C8 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000D7CE 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000D7D0 FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000D7D6 0201                       		dc.b 2,	1
0000D7D8 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000D7DE 0206                       		dc.b 2,	6
0000D7E0 0520 0120 00EC             		dc.w $520, $120, $EC
0000D7E6 0202                       		dc.b 2,	2
0000D7E8 0540 0120 00FC             		dc.w $540, $120, $FC
0000D7EE 0203                       		dc.b 2,	3
0000D7F0 0560 0120 010C             		dc.w $560, $120, $10C
0000D7F6 0204                       		dc.b 2,	4
0000D7F8 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000D7FE 0205                       		dc.b 2,	5
0000D800                            ; ===========================================================================
0000D800                            ; ---------------------------------------------------------------------------
0000D800                            ; Object 7E - special stage results screen
0000D800                            ; ---------------------------------------------------------------------------
0000D800                            
0000D800                            Obj7E:					; XREF: Obj_Index
0000D800 7000                       		moveq	#0,d0
0000D802 1028 0024                  		move.b	$24(a0),d0
0000D806 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000D80A 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000D80E                            ; ===========================================================================
0000D80E 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000D810 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000D812 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D814 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000D816 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D818 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D81A 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D81C 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000D81E 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000D820 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000D822 0000                       		dc.w loc_C91A-Obj7E_Index
0000D824                            ; ===========================================================================
0000D824                            
0000D824                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000D824 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000D828 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000D82A 4E75                       		rts	
0000D82C                            ; ===========================================================================
0000D82C                            
0000D82C                            Obj7E_Main:
0000D82C 2248                       		movea.l	a0,a1
0000D82E 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000D834 7203                       		moveq	#3,d1
0000D836 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000D83C 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000D83E 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000D840                            
0000D840                            Obj7E_Loop:
0000D840 12BC 007E                  		move.b	#$7E,0(a1)
0000D844 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000D848 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000D84C 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000D850 135A 0024                  		move.b	(a2)+,$24(a1)
0000D854 135A 001A                  		move.b	(a2)+,$1A(a1)
0000D858 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000D860 337C 8580 0002             		move.w	#$8580,2(a1)
0000D866 137C 0000 0001             		move.b	#0,1(a1)
0000D86C 43E9 0040                  		lea	$40(a1),a1
0000D870 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000D874                            
0000D874 7007                       		moveq	#7,d0
0000D876 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000D87A 6700                       		beq.s	loc_C842
0000D87C 7000                       		moveq	#0,d0
0000D87E 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000D882 6600                       		bne.s	loc_C842	; if not, branch
0000D884 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000D886 317C 0018 0008             		move.w	#$18,8(a0)
0000D88C 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000D892                            
0000D892                            loc_C842:
0000D892 1140 001A                  		move.b	d0,$1A(a0)
0000D896                            
0000D896                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000D896 7210                       		moveq	#$10,d1		; set horizontal speed
0000D898 3028 0030                  		move.w	$30(a0),d0
0000D89C B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000D8A0 6700                       		beq.s	loc_C86C	; if yes, branch
0000D8A2 6C00                       		bge.s	Obj7E_Move
0000D8A4 4441                       		neg.w	d1
0000D8A6                            
0000D8A6                            Obj7E_Move:
0000D8A6 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000D8AA                            
0000D8AA                            loc_C85A:				; XREF: loc_C86C
0000D8AA 3028 0008                  		move.w	8(a0),d0
0000D8AE 6B00                       		bmi.s	locret_C86A
0000D8B0 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000D8B4 6400                       		bcc.s	locret_C86A	; if yes, branch
0000D8B6 6000 0000                  		bra.w	DisplaySprite
0000D8BA                            ; ===========================================================================
0000D8BA                            
0000D8BA                            locret_C86A:
0000D8BA 4E75                       		rts	
0000D8BC                            ; ===========================================================================
0000D8BC                            
0000D8BC                            loc_C86C:				; XREF: Obj7E_ChkPos
0000D8BC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000D8C2 66E6                       		bne.s	loc_C85A
0000D8C4 5428 0024                  		addq.b	#2,$24(a0)
0000D8C8 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D8CE 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000D8D4                            
0000D8D4                            Obj7E_Wait:				; XREF: Obj7E_Index
0000D8D4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000D8D8 6600                       		bne.s	Obj7E_Display
0000D8DA 5428 0024                  		addq.b	#2,$24(a0)
0000D8DE                            
0000D8DE                            Obj7E_Display:
0000D8DE 6000 0000                  		bra.w	DisplaySprite
0000D8E2                            ; ===========================================================================
0000D8E2                            
0000D8E2                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000D8E2 6100 0000                  		bsr.w	DisplaySprite
0000D8E6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000D8EC 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000D8F0 6700                       		beq.s	loc_C8C4	; if yes, branch
0000D8F2 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000D8F8 700A                       		moveq	#10,d0		; add 10 to score
0000D8FA 4EB9 0000 0000             		jsr	AddPoints
0000D900 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D904 0200 0003                  		andi.b	#3,d0
0000D908 6600                       		bne.s	locret_C8EA
0000D90A 303C 00CD                  		move.w	#$CD,d0
0000D90E 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000D914                            ; ===========================================================================
0000D914                            
0000D914                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000D914 303C 00C5                  		move.w	#$C5,d0
0000D918 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000D91E 5428 0024                  		addq.b	#2,$24(a0)
0000D922 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000D928 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000D92E 6500                       		bcs.s	locret_C8EA	; if not, branch
0000D930 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000D936 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000D93A                            
0000D93A                            locret_C8EA:
0000D93A 4E75                       		rts	
0000D93C                            ; ===========================================================================
0000D93C                            
0000D93C                            Obj7E_Exit:				; XREF: Obj7E_Index
0000D93C 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000D942 6000 0000                  		bra.w	DisplaySprite
0000D946                            ; ===========================================================================
0000D946                            
0000D946                            Obj7E_Continue:				; XREF: Obj7E_Index
0000D946 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000D94C 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000D952 303C 00BF                  		move.w	#$BF,d0
0000D956 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play continues music
0000D95C 5428 0024                  		addq.b	#2,$24(a0)
0000D960 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000D966 6000 0000                  		bra.w	DisplaySprite
0000D96A                            ; ===========================================================================
0000D96A                            
0000D96A                            loc_C91A:				; XREF: Obj7E_Index
0000D96A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D96E 0200 000F                  		andi.b	#$F,d0
0000D972 6600                       		bne.s	Obj7E_Display2
0000D974 0868 0000 001A             		bchg	#0,$1A(a0)
0000D97A                            
0000D97A                            Obj7E_Display2:
0000D97A 6000 0000                  		bra.w	DisplaySprite
0000D97E                            ; ===========================================================================
0000D97E 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000D984 0200                       		dc.b 2,	0		; rountine number, frame number
0000D986 0320 0120 0118             		dc.w $320, $120, $118
0000D98C 0201                       		dc.b 2,	1
0000D98E 0360 0120 0128             		dc.w $360, $120, $128
0000D994 0202                       		dc.b 2,	2
0000D996 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000D99C 0203                       		dc.b 2,	3
0000D99E 03A0 0120 0138             		dc.w $3A0, $120, $138
0000D9A4 0206                       		dc.b 2,	6
0000D9A6                            ; ===========================================================================
0000D9A6                            ; ---------------------------------------------------------------------------
0000D9A6                            ; Object 7F - chaos emeralds from the special stage results screen
0000D9A6                            ; ---------------------------------------------------------------------------
0000D9A6                            
0000D9A6                            Obj7F:					; XREF: Obj_Index
0000D9A6 7000                       		moveq	#0,d0
0000D9A8 1028 0024                  		move.b	$24(a0),d0
0000D9AC 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000D9B0 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000D9B4                            ; ===========================================================================
0000D9B4 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000D9B6 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000D9B8                            
0000D9B8                            ; ---------------------------------------------------------------------------
0000D9B8                            ; X-axis positions for chaos emeralds
0000D9B8                            ; ---------------------------------------------------------------------------
0000D9B8 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000D9C4                            ; ===========================================================================
0000D9C4                            
0000D9C4                            Obj7F_Main:				; XREF: Obj7F_Index
0000D9C4 2248                       		movea.l	a0,a1
0000D9C6 45F9 0000 D9B8             		lea	(Obj7F_PosData).l,a2
0000D9CC 7400                       		moveq	#0,d2
0000D9CE 7200                       		moveq	#0,d1
0000D9D0 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000D9D4 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000D9D6 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000D9DA                            
0000D9DA                            Obj7F_Loop:
0000D9DA 12BC 007F                  		move.b	#$7F,0(a1)
0000D9DE 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000D9E2 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000D9E8 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000D9EC 1633 2000                  		move.b	(a3,d2.w),d3
0000D9F0 1343 001A                  		move.b	d3,$1A(a1)
0000D9F4 1343 001C                  		move.b	d3,$1C(a1)
0000D9F8 5202                       		addq.b	#1,d2
0000D9FA 5429 0024                  		addq.b	#2,$24(a1)
0000D9FE 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000DA06 337C 8541 0002             		move.w	#$8541,2(a1)
0000DA0C 137C 0000 0001             		move.b	#0,1(a1)
0000DA12 43E9 0040                  		lea	$40(a1),a1	; next object
0000DA16 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000DA1A                            
0000DA1A                            Obj7F_Flash:				; XREF: Obj7F_Index
0000DA1A 1028 001A                  		move.b	$1A(a0),d0
0000DA1E 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000DA24 0C00 0006                  		cmpi.b	#6,d0
0000DA28 6600                       		bne.s	Obj7F_Display
0000DA2A 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000DA30                            
0000DA30                            Obj7F_Display:
0000DA30 6000 0000                  		bra.w	DisplaySprite
0000DA34                            ; ===========================================================================
0000DA34                            ; ---------------------------------------------------------------------------
0000DA34                            ; Sprite mappings - zone title cards
0000DA34                            ; ---------------------------------------------------------------------------
0000DA34                            Map_obj34:
0000DA34                                    include "_maps\obj34.asm"
0000DA34                            Map_c5df:
0000DA34 0000                       Map_c5df_0: 	dc.w Map_c5df_18-Map_c5df
0000DA36 0000                       Map_c5df_2: 	dc.w Map_c5df_55-Map_c5df
0000DA38 0000                       Map_c5df_4: 	dc.w Map_c5df_C4-Map_c5df
0000DA3A 0000                       Map_c5df_6: 	dc.w Map_c5df_DE-Map_c5df
0000DA3C 0000                       Map_c5df_8: 	dc.w Map_c5df_134-Map_c5df
0000DA3E 0000                       Map_c5df_A: 	dc.w Map_c5df_19E-Map_c5df
0000DA40 0000                       Map_c5df_C: 	dc.w Map_c5df_1C2-Map_c5df
0000DA42 0000                       Map_c5df_E: 	dc.w Map_c5df_1D7-Map_c5df
0000DA44 0000                       Map_c5df_10: 	dc.w Map_c5df_1E2-Map_c5df
0000DA46 0000                       Map_c5df_12: 	dc.w Map_c5df_1ED-Map_c5df
0000DA48 0000                       Map_c5df_14: 	dc.w Map_c5df_1F8-Map_c5df
0000DA4A 0000                       Map_c5df_16: 	dc.w Map_c5df_23A-Map_c5df
0000DA4C 0C                         Map_c5df_18: 	dc.b $C
0000DA4D F805 0008 80               	dc.b $F8, $5, $0, $8, $80
0000DA52 F805 003A 90               	dc.b $F8, $5, $0, $3A, $90
0000DA57 F805 0046 A0               	dc.b $F8, $5, $0, $46, $A0
0000DA5C F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
0000DA61 F805 0008 C0               	dc.b $F8, $5, $0, $8, $C0
0000DA66 F805 001C D0               	dc.b $F8, $5, $0, $1C, $D0
0000DA6B F805 004A E0               	dc.b $F8, $5, $0, $4A, $E0
0000DA70 F800 0056 F0               	dc.b $F8, $0, $0, $56, $F0
0000DA75 F805 003A 00               	dc.b $F8, $5, $0, $3A, $0
0000DA7A F805 0032 10               	dc.b $F8, $5, $0, $32, $10
0000DA7F F805 0026 20               	dc.b $F8, $5, $0, $26, $20
0000DA84 F805 0026 30               	dc.b $F8, $5, $0, $26, $30
0000DA89 16                         Map_c5df_55: 	dc.b $16
0000DA8A F801 0020 80               	dc.b $F8, $1, $0, $20, $80
0000DA8F F800 0056 88               	dc.b $F8, $0, $0, $56, $88
0000DA94 F805 0026 98               	dc.b $F8, $5, $0, $26, $98
0000DA99 F801 0020 A8               	dc.b $F8, $1, $0, $20, $A8
0000DA9E F805 0022 B0               	dc.b $F8, $5, $0, $22, $B0
0000DAA3 F805 0010 C0               	dc.b $F8, $5, $0, $10, $C0
0000DAA8 F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000DAAD F805 0014 E0               	dc.b $F8, $5, $0, $14, $E0
0000DAB2 F801 0020 F0               	dc.b $F8, $1, $0, $20, $F0
0000DAB7 F805 0026 F8               	dc.b $F8, $5, $0, $26, $F8
0000DABC F805 0010 08               	dc.b $F8, $5, $0, $10, $8
0000DAC1 F800 0056 18               	dc.b $F8, $0, $0, $56, $18
0000DAC6 F805 0010 28               	dc.b $F8, $5, $0, $10, $28
0000DACB F805 0018 38               	dc.b $F8, $5, $0, $18, $38
0000DAD0 F805 0018 48               	dc.b $F8, $5, $0, $18, $48
0000DAD5 F805 003E 58               	dc.b $F8, $5, $0, $3E, $58
0000DADA F805 0036 68               	dc.b $F8, $5, $0, $36, $68
0000DADF F805 0026 78               	dc.b $F8, $5, $0, $26, $78
0000DAE4 F805 0032 88               	dc.b $F8, $5, $0, $32, $88
0000DAE9 F805 003A 98               	dc.b $F8, $5, $0, $3A, $98
0000DAEE F805 0010 A8               	dc.b $F8, $5, $0, $10, $A8
0000DAF3 F805 003A B8               	dc.b $F8, $5, $0, $3A, $B8
0000DAF8 05                         Map_c5df_C4: 	dc.b $5
0000DAF9 F805 002A 80               	dc.b $F8, $5, $0, $2A, $80
0000DAFE F805 0000 90               	dc.b $F8, $5, $0, $0, $90
0000DB03 F805 003A A0               	dc.b $F8, $5, $0, $3A, $A0
0000DB08 F805 0004 B0               	dc.b $F8, $5, $0, $4, $B0
0000DB0D F805 0026 C0               	dc.b $F8, $5, $0, $26, $C0
0000DB12 11                         Map_c5df_DE: 	dc.b $11
0000DB13 F805 000C 80               	dc.b $F8, $5, $0, $C, $80
0000DB18 F805 0032 90               	dc.b $F8, $5, $0, $32, $90
0000DB1D F805 002E A0               	dc.b $F8, $5, $0, $2E, $A0
0000DB22 F805 0042 B0               	dc.b $F8, $5, $0, $42, $B0
0000DB27 F800 0056 C0               	dc.b $F8, $0, $0, $56, $C0
0000DB2C F805 0018 D0               	dc.b $F8, $5, $0, $18, $D0
0000DB31 F805 0010 E0               	dc.b $F8, $5, $0, $10, $E0
0000DB36 F805 0042 F0               	dc.b $F8, $5, $0, $42, $F0
0000DB3B F800 0056 00               	dc.b $F8, $0, $0, $56, $0
0000DB40 F805 003A 10               	dc.b $F8, $5, $0, $3A, $10
0000DB45 F801 0020 20               	dc.b $F8, $1, $0, $20, $20
0000DB4A F805 000C 28               	dc.b $F8, $5, $0, $C, $28
0000DB4F F805 0032 38               	dc.b $F8, $5, $0, $32, $38
0000DB54 F805 0042 48               	dc.b $F8, $5, $0, $42, $48
0000DB59 F805 001C 58               	dc.b $F8, $5, $0, $1C, $58
0000DB5E F801 0020 68               	dc.b $F8, $1, $0, $20, $68
0000DB63 F805 003E 70               	dc.b $F8, $5, $0, $3E, $70
0000DB68 15                         Map_c5df_134: 	dc.b $15
0000DB69 F805 0042 80               	dc.b $F8, $5, $0, $42, $80
0000DB6E F805 001C 90               	dc.b $F8, $5, $0, $1C, $90
0000DB73 F805 0010 A0               	dc.b $F8, $5, $0, $10, $A0
0000DB78 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000DB7D F805 0036 C0               	dc.b $F8, $5, $0, $36, $C0
0000DB82 F801 0020 D0               	dc.b $F8, $1, $0, $20, $D0
0000DB87 F805 0018 D8               	dc.b $F8, $5, $0, $18, $D8
0000DB8C F800 0056 E8               	dc.b $F8, $0, $0, $56, $E8
0000DB91 F805 0014 F8               	dc.b $F8, $5, $0, $14, $F8
0000DB96 F805 003A 08               	dc.b $F8, $5, $0, $3A, $8
0000DB9B F805 0032 18               	dc.b $F8, $5, $0, $32, $18
0000DBA0 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
0000DBA5 F800 0056 38               	dc.b $F8, $0, $0, $56, $38
0000DBAA F805 0004 48               	dc.b $F8, $5, $0, $4, $48
0000DBAF F805 0000 58               	dc.b $F8, $5, $0, $0, $58
0000DBB4 F805 003A 68               	dc.b $F8, $5, $0, $3A, $68
0000DBB9 F805 002E 78               	dc.b $F8, $5, $0, $2E, $78
0000DBBE F805 004A 88               	dc.b $F8, $5, $0, $4A, $88
0000DBC3 F805 0000 98               	dc.b $F8, $5, $0, $0, $98
0000DBC8 F805 003A A8               	dc.b $F8, $5, $0, $3A, $A8
0000DBCD F805 000C B8               	dc.b $F8, $5, $0, $C, $B8
0000DBD2 07                         Map_c5df_19E: 	dc.b $7
0000DBD3 F805 004E 80               	dc.b $F8, $5, $0, $4E, $80
0000DBD8 F800 0056 90               	dc.b $F8, $0, $0, $56, $90
0000DBDD F805 004E A0               	dc.b $F8, $5, $0, $4E, $A0
0000DBE2 F800 0056 B0               	dc.b $F8, $0, $0, $56, $B0
0000DBE7 F805 004E C0               	dc.b $F8, $5, $0, $4E, $C0
0000DBEC F800 0056 D0               	dc.b $F8, $0, $0, $56, $D0
0000DBF1 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000DBF6 04                         Map_c5df_1C2: 	dc.b $4
0000DBF7 F805 004E E0               	dc.b $F8, $5, $0, $4E, $E0
0000DBFC F805 0032 F0               	dc.b $F8, $5, $0, $32, $F0
0000DC01 F805 002E 00               	dc.b $F8, $5, $0, $2E, $0
0000DC06 F805 0010 10               	dc.b $F8, $5, $0, $10, $10
0000DC0B 02                         Map_c5df_1D7: 	dc.b $2
0000DC0C 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC11 F402 0057 0C               	dc.b $F4, $2, $0, $57, $C
0000DC16 02                         Map_c5df_1E2: 	dc.b $2
0000DC17 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC1C F406 005A 08               	dc.b $F4, $6, $0, $5A, $8
0000DC21 02                         Map_c5df_1ED: 	dc.b $2
0000DC22 040C 0053 EC               	dc.b $4, $C, $0, $53, $EC
0000DC27 F406 0060 08               	dc.b $F4, $6, $0, $60, $8
0000DC2C 0D                         Map_c5df_1F8: 	dc.b $D
0000DC2D E40C 0070 F4               	dc.b $E4, $C, $0, $70, $F4
0000DC32 E402 0074 14               	dc.b $E4, $2, $0, $74, $14
0000DC37 EC04 0077 EC               	dc.b $EC, $4, $0, $77, $EC
0000DC3C F405 0079 E4               	dc.b $F4, $5, $0, $79, $E4
0000DC41 140C 1870 EC               	dc.b $14, $C, $18, $70, $EC
0000DC46 0402 1874 E4               	dc.b $4, $2, $18, $74, $E4
0000DC4B 0C04 1877 04               	dc.b $C, $4, $18, $77, $4
0000DC50 FC05 1879 0C               	dc.b $FC, $5, $18, $79, $C
0000DC55 EC08 007D FC               	dc.b $EC, $8, $0, $7D, $FC
0000DC5A F40C 007C F4               	dc.b $F4, $C, $0, $7C, $F4
0000DC5F FC08 007C F4               	dc.b $FC, $8, $0, $7C, $F4
0000DC64 040C 007C EC               	dc.b $4, $C, $0, $7C, $EC
0000DC69 0C08 007C EC               	dc.b $C, $8, $0, $7C, $EC
0000DC6E 05                         Map_c5df_23A: 	dc.b $5
0000DC6F F805 0014 DC               	dc.b $F8, $5, $0, $14, $DC
0000DC74 F801 0020 EC               	dc.b $F8, $1, $0, $20, $EC
0000DC79 F805 002E F4               	dc.b $F8, $5, $0, $2E, $F4
0000DC7E F805 0000 04               	dc.b $F8, $5, $0, $0, $4
0000DC83 F805 0026 14               	dc.b $F8, $5, $0, $26, $14
0000DC88                            	even
0000DC88                            	even
0000DC88                            ; ---------------------------------------------------------------------------
0000DC88                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DC88                            ; ---------------------------------------------------------------------------
0000DC88                            Map_obj39:
0000DC88                            	include "_maps\obj39.asm"
0000DC88                            ; ---------------------------------------------------------------------------
0000DC88                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000DC88                            ; ---------------------------------------------------------------------------
0000DC88 0000                       		dc.w byte_CBAC-Map_obj39
0000DC8A 0000                       		dc.w byte_CBB7-Map_obj39
0000DC8C 0000                       		dc.w byte_CBC2-Map_obj39
0000DC8E 0000                       		dc.w byte_CBCD-Map_obj39
0000DC90 02                         byte_CBAC:	dc.b 2
0000DC91 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000DC96 F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000DC9B 02                         byte_CBB7:	dc.b 2
0000DC9C F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000DCA1 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000DCA6 02                         byte_CBC2:	dc.b 2
0000DCA7 F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000DCAC F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000DCB1 02                         byte_CBCD:	dc.b 2
0000DCB2 F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000DCB7 F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000DCBC                            		even
0000DCBC                            		even
0000DCBC                            
0000DCBC                            ; ---------------------------------------------------------------------------
0000DCBC                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000DCBC                            ; ---------------------------------------------------------------------------
0000DCBC 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000DCBE 0000                       		dc.w byte_CC13-Map_obj3A
0000DCC0 0000                       		dc.w byte_CC32-Map_obj3A
0000DCC2 0000                       		dc.w byte_CC51-Map_obj3A
0000DCC4 0000                       		dc.w byte_CC75-Map_obj3A
0000DCC6                            		;dc.w byte_CB47-Map_obj3A
0000DCC6                            		;dc.w byte_CB26-Map_obj3A
0000DCC6                            		;dc.w byte_CB31-Map_obj3A
0000DCC6                            		;dc.w byte_CB3C-Map_obj3A
0000DCC6 0F                         byte_CBEA:	dc.b $F	;  SONIC HAS | CADNIUM SULFIDE
0000DCC7 F805 0008 7C               		dc.b $F8, 5, 0, 8, $7C		; C
0000DCCC F805 0000 8C               		dc.b $F8, 5, 0, 0, $8C		; A
0000DCD1 F805 000C 9C               		dc.b $F8, 5, 0, $0C, $9C	; D
0000DCD6 F805 002E AC               		dc.b $F8, 5, 0, $2E, $AC	; N
0000DCDB F801 0020 BC               		dc.b $F8, 1, 0, $20, $BC	; I
0000DCE0 F805 0046 C4               		dc.b $F8, 5, 0, $46, $C4	; U
0000DCE5 F805 002A D4               		dc.b $F8, 5, 0, $2A, $D4	; M
0000DCEA F800 0056 E4               		dc.b $F8, 0, 0, $56, $E4	; Space
0000DCEF F805 003E F4               		dc.b $F8, 5, 0, $3E, $F4	; S
0000DCF4 F805 0046 04               		dc.b $F8, 5, 0, $46, $4	; U
0000DCF9 F805 0026 14               		dc.b $F8, 5, 0, $26, $14	; L
0000DCFE F805 0014 24               		dc.b $F8, 5, 0, $14, $24	; F
0000DD03 F801 0020 34               		dc.b $F8, 1, 0, $20, $34	; I
0000DD08 F805 000C 3C               		dc.b $F8, 5, 0, $0C, $3C	; D
0000DD0D F805 0010 4C               		dc.b $F8, 5, 0, $10, $4C	; E
0000DD12 06                         byte_CC13:	dc.b 6			; PASSED
0000DD13 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000DD18 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000DD1D F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000DD22 F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000DD27 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DD2C F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000DD31 06                         byte_CC32:	dc.b 6			; SCORE
0000DD32 F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DD37 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DD3C F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DD41 F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DD46 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DD4B FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DD50 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000DD51 F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000DD56 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DD5B F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DD60 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DD65 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DD6A F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000DD6F F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DD74 07                         byte_CC75:	dc.b 7			; RING BONUS
0000DD75 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DD7A F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DD7F F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DD84 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DD89 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DD8E F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DD93 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DD98                            		even
0000DD98                            ; ---------------------------------------------------------------------------
0000DD98                            ; Sprite mappings - special stage results screen
0000DD98                            ; ---------------------------------------------------------------------------
0000DD98 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000DD9A 0000                       		dc.w byte_CCEE-Map_obj7E
0000DD9C 0000                       		dc.w byte_CD0D-Map_obj7E
0000DD9E                            		;dc.w byte_CB47-Map_obj7E
0000DD9E 0000                       		dc.w byte_CD31-Map_obj7E
0000DDA0 0000                       		dc.w byte_CD46-Map_obj7E
0000DDA2 0000                       		dc.w byte_CD5B-Map_obj7E
0000DDA4 0000                       		dc.w byte_CD6B-Map_obj7E
0000DDA6 0000                       		dc.w byte_CDA8-Map_obj7E
0000DDA8 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000DDA9 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000DDAE F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000DDB3 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000DDB8 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000DDBD F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000DDC2 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000DDC7 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000DDCC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000DDD1 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000DDD6 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000DDDB F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000DDE0 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000DDE5 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000DDEA 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000DDEB F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000DDF0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000DDF5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000DDFA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000DDFF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000DE04 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000DE09 07                         byte_CD0D:	dc.b 7
0000DE0A F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000DE0F F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000DE14 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000DE19 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000DE1E FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000DE23 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000DE28 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000DE2D 04                         byte_CD31:	dc.b 4
0000DE2E F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE33 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE38 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE3D F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000DE42 04                         byte_CD46:	dc.b 4
0000DE43 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE48 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE4D F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE52 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000DE57 03                         byte_CD5B:	dc.b 3
0000DE58 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000DE5D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000DE62 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000DE67 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000DE68 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000DE6D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000DE72 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000DE77 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000DE7C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000DE81 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000DE86 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000DE8B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000DE90 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000DE95 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000DE9A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000DE9F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000DEA4 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000DEA5 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000DEAA F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000DEAF F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000DEB4 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000DEB9 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000DEBE F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000DEC3 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000DEC8 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000DECD F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000DED2 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000DED7 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000DEDC F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000DEE1 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000DEE6 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000DEEB F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000DEF0                            		even
0000DEF0                            ; ---------------------------------------------------------------------------
0000DEF0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DEF0                            ; ---------------------------------------------------------------------------
0000DEF0                            Map_obj7F:
0000DEF0                            	include "_maps\obj7F.asm"
0000DEF0                            ; ---------------------------------------------------------------------------
0000DEF0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000DEF0                            ; ---------------------------------------------------------------------------
0000DEF0 0000                       		dc.w byte_CE02-Map_obj7F
0000DEF2 0000                       		dc.w byte_CE08-Map_obj7F
0000DEF4 0000                       		dc.w byte_CE0E-Map_obj7F
0000DEF6 0000                       		dc.w byte_CE14-Map_obj7F
0000DEF8 0000                       		dc.w byte_CE1A-Map_obj7F
0000DEFA 0000                       		dc.w byte_CE20-Map_obj7F
0000DEFC 0000                       		dc.w byte_CE26-Map_obj7F
0000DEFE 01                         byte_CE02:	dc.b 1
0000DEFF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000DF04 01                         byte_CE08:	dc.b 1
0000DF05 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000DF0A 01                         byte_CE0E:	dc.b 1
0000DF0B F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000DF10 01                         byte_CE14:	dc.b 1
0000DF11 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000DF16 01                         byte_CE1A:	dc.b 1
0000DF17 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000DF1C 01                         byte_CE20:	dc.b 1
0000DF1D F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000DF22 00                         byte_CE26:	dc.b 0			; Blank frame
0000DF24 00                         		even
0000DF24 00                         		even
0000DF24                            
0000DF24                            ; ===========================================================================
0000DF24                            ; ---------------------------------------------------------------------------
0000DF24                            ; Object 36 - spikes
0000DF24                            ; ---------------------------------------------------------------------------
0000DF24                            
0000DF24                            Obj36:					; XREF: Obj_Index
0000DF24 7000                       		moveq	#0,d0
0000DF26 1028 0024                  		move.b	$24(a0),d0
0000DF2A 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000DF2E 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000DF32                            ; ===========================================================================
0000DF32 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000DF34 0000                       		dc.w Obj36_Solid-Obj36_Index
0000DF36                            
0000DF36 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000DF38 0110                       		dc.b 1,	$10
0000DF3A 0204                       		dc.b 2,	4
0000DF3C 031C                       		dc.b 3,	$1C
0000DF3E 0440                       		dc.b 4,	$40
0000DF40 0510                       		dc.b 5,	$10
0000DF42                            ; ===========================================================================
0000DF42                            
0000DF42                            Obj36_Main:				; XREF: Obj36_Index
0000DF42 5428 0024                  		addq.b	#2,$24(a0)
0000DF46 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000DF4E 317C 051B 0002             		move.w	#$51B,2(a0)
0000DF54 0028 0004 0001             		ori.b	#4,1(a0)
0000DF5A 117C 0004 0018             		move.b	#4,$18(a0)
0000DF60 1028 0028                  		move.b	$28(a0),d0
0000DF64 0228 000F 0028             		andi.b	#$F,$28(a0)
0000DF6A 0240 00F0                  		andi.w	#$F0,d0
0000DF6E 43F9 0000 DF36             		lea	(Obj36_Var).l,a1
0000DF74 E648                       		lsr.w	#3,d0
0000DF76 D2C0                       		adda.w	d0,a1
0000DF78 1159 001A                  		move.b	(a1)+,$1A(a0)
0000DF7C 1159 0019                  		move.b	(a1)+,$19(a0)
0000DF80 3168 0008 0030             		move.w	8(a0),$30(a0)
0000DF86 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000DF8C                            
0000DF8C                            Obj36_Solid:				; XREF: Obj36_Index
0000DF8C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000DF90 343C 0004                  		move.w	#4,d2
0000DF94 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000DF9A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000DF9C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000DFA2 6600                       		bne.s	Obj36_Upright	; if not, branch
0000DFA4 343C 0014                  		move.w	#$14,d2
0000DFA8                            
0000DFA8                            ; Spikes types $1x and $5x face	sideways
0000DFA8                            
0000DFA8                            Obj36_SideWays:				; XREF: Obj36_Solid
0000DFA8 323C 001B                  		move.w	#$1B,d1
0000DFAC 3602                       		move.w	d2,d3
0000DFAE 5243                       		addq.w	#1,d3
0000DFB0 3828 0008                  		move.w	8(a0),d4
0000DFB4 6100 0000                  		bsr.w	SolidObject
0000DFB8 0828 0003 0022             		btst	#3,$22(a0)
0000DFBE 6600                       		bne.s	Obj36_Display
0000DFC0 0C44 0001                  		cmpi.w	#1,d4
0000DFC4 6700                       		beq.s	Obj36_Hurt
0000DFC6 6000                       		bra.s	Obj36_Display
0000DFC8                            ; ===========================================================================
0000DFC8                            
0000DFC8                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000DFC8                            
0000DFC8                            Obj36_Upright:				; XREF: Obj36_Solid
0000DFC8 7200                       		moveq	#0,d1
0000DFCA 1228 0019                  		move.b	$19(a0),d1
0000DFCE 0641 000B                  		addi.w	#$B,d1
0000DFD2 343C 0010                  		move.w	#$10,d2
0000DFD6 363C 0011                  		move.w	#$11,d3
0000DFDA 3828 0008                  		move.w	8(a0),d4
0000DFDE 6100 0000                  		bsr.w	SolidObject
0000DFE2 0828 0003 0022             		btst	#3,$22(a0)
0000DFE8 6600                       		bne.s	Obj36_Hurt
0000DFEA 4A44                       		tst.w	d4
0000DFEC 6A00                       		bpl.s	Obj36_Display
0000DFEE                            
0000DFEE                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000DFEE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000DFF2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000DFF4 2F08                       		move.l	a0,-(sp)
0000DFF6 2448                       		movea.l	a0,a2
0000DFF8 41F8 D000                  		lea	($FFFFD000).w,a0
0000DFFC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000E002 6400                       		bcc.s	loc_CF20
0000E004 2628 000C                  		move.l	$C(a0),d3
0000E008 3028 0012                  		move.w	$12(a0),d0
0000E00C 48C0                       		ext.l	d0
0000E00E E180                       		asl.l	#8,d0
0000E010 9680                       		sub.l	d0,d3
0000E012 2143 000C                  		move.l	d3,$C(a0)
0000E016 4EB9 0000 0000             		jsr	HurtSonic
0000E01C                            
0000E01C                            loc_CF20:
0000E01C 205F                       		movea.l	(sp)+,a0
0000E01E                            
0000E01E                            Obj36_Display:
0000E01E 6100 0000                  		bsr.w	DisplaySprite
0000E022 3028 0030                  		move.w	$30(a0),d0
0000E026 0240 FF80                  		andi.w	#$FF80,d0
0000E02A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E02E 0441 0080                  		subi.w	#$80,d1
0000E032 0241 FF80                  		andi.w	#$FF80,d1
0000E036 9041                       		sub.w	d1,d0
0000E038 0C40 0280                  		cmpi.w	#$280,d0
0000E03C 6200 0000                  		bhi.w	DeleteObject
0000E040 4E75                       		rts	
0000E042                            ; ===========================================================================
0000E042                            
0000E042                            Obj36_Type0x:				; XREF: Obj36_Solid
0000E042 7000                       		moveq	#0,d0
0000E044 1028 0028                  		move.b	$28(a0),d0
0000E048 D040                       		add.w	d0,d0
0000E04A 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000E04E 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000E052                            ; ===========================================================================
0000E052 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000E054 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000E056 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000E058                            ; ===========================================================================
0000E058                            
0000E058                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000E058 4E75                       		rts			; don't move the object
0000E05A                            ; ===========================================================================
0000E05A                            
0000E05A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000E05A 6100 0000                  		bsr.w	Obj36_Wait
0000E05E 7000                       		moveq	#0,d0
0000E060 1028 0034                  		move.b	$34(a0),d0
0000E064 D068 0032                  		add.w	$32(a0),d0
0000E068 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000E06C 4E75                       		rts	
0000E06E                            ; ===========================================================================
0000E06E                            
0000E06E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000E06E 6100 0000                  		bsr.w	Obj36_Wait
0000E072 7000                       		moveq	#0,d0
0000E074 1028 0034                  		move.b	$34(a0),d0
0000E078 D068 0030                  		add.w	$30(a0),d0
0000E07C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000E080 4E75                       		rts	
0000E082                            ; ===========================================================================
0000E082                            
0000E082                            Obj36_Wait:
0000E082 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000E086 6700                       		beq.s	loc_CFA4	; if yes, branch
0000E088 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000E08C 6600                       		bne.s	locret_CFE6
0000E08E 4A28 0001                  		tst.b	1(a0)
0000E092 6A00                       		bpl.s	locret_CFE6
0000E094 303C 00B6                  		move.w	#$B6,d0
0000E098 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000E09E 6000                       		bra.s	locret_CFE6
0000E0A0                            ; ===========================================================================
0000E0A0                            
0000E0A0                            loc_CFA4:
0000E0A0 4A68 0036                  		tst.w	$36(a0)
0000E0A4 6700                       		beq.s	loc_CFC6
0000E0A6 0468 0800 0034             		subi.w	#$800,$34(a0)
0000E0AC 6400                       		bcc.s	locret_CFE6
0000E0AE 317C 0000 0034             		move.w	#0,$34(a0)
0000E0B4 317C 0000 0036             		move.w	#0,$36(a0)
0000E0BA 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E0C0 6000                       		bra.s	locret_CFE6
0000E0C2                            ; ===========================================================================
0000E0C2                            
0000E0C2                            loc_CFC6:
0000E0C2 0668 0800 0034             		addi.w	#$800,$34(a0)
0000E0C8 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000E0CE 6500                       		bcs.s	locret_CFE6
0000E0D0 317C 2000 0034             		move.w	#$2000,$34(a0)
0000E0D6 317C 0001 0036             		move.w	#1,$36(a0)
0000E0DC 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000E0E2                            
0000E0E2                            locret_CFE6:
0000E0E2 4E75                       		rts	
0000E0E4                            ; ===========================================================================
0000E0E4                            ; ---------------------------------------------------------------------------
0000E0E4                            ; Sprite mappings - spikes
0000E0E4                            ; ---------------------------------------------------------------------------
0000E0E4                            Map_obj36:
0000E0E4                            	include "_maps\obj36.asm"
0000E0E4                            Map_obj36_inner:
0000E0E4 0000                       Map_obj36_inner_0: 	dc.w Map_obj36_inner_C-Map_obj36_inner
0000E0E6 0000                       Map_obj36_inner_2: 	dc.w Map_obj36_inner_1C-Map_obj36_inner
0000E0E8 0000                       Map_obj36_inner_4: 	dc.w Map_obj36_inner_2C-Map_obj36_inner
0000E0EA 0000                       Map_obj36_inner_6: 	dc.w Map_obj36_inner_32-Map_obj36_inner
0000E0EC 0000                       Map_obj36_inner_8: 	dc.w Map_obj36_inner_42-Map_obj36_inner
0000E0EE 0000                       Map_obj36_inner_A: 	dc.w Map_obj36_inner_61-Map_obj36_inner
0000E0F0 03                         Map_obj36_inner_C: 	dc.b $3
0000E0F1 F003 0004 EC               	dc.b $F0, $3, $0, $4, $EC
0000E0F6 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E0FB F003 0004 0C               	dc.b $F0, $3, $0, $4, $C
0000E100 03                         Map_obj36_inner_1C: 	dc.b $3
0000E101 EC0C 0000 F0               	dc.b $EC, $C, $0, $0, $F0
0000E106 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000E10B 0C0C 0000 F0               	dc.b $C, $C, $0, $0, $F0
0000E110 01                         Map_obj36_inner_2C: 	dc.b $1
0000E111 F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E116 03                         Map_obj36_inner_32: 	dc.b $3
0000E117 F003 0004 E4               	dc.b $F0, $3, $0, $4, $E4
0000E11C F003 0004 FC               	dc.b $F0, $3, $0, $4, $FC
0000E121 F003 0004 14               	dc.b $F0, $3, $0, $4, $14
0000E126 06                         Map_obj36_inner_42: 	dc.b $6
0000E127 F003 0004 C0               	dc.b $F0, $3, $0, $4, $C0
0000E12C F003 0004 D8               	dc.b $F0, $3, $0, $4, $D8
0000E131 F003 0004 F0               	dc.b $F0, $3, $0, $4, $F0
0000E136 F003 0004 08               	dc.b $F0, $3, $0, $4, $8
0000E13B F003 0004 20               	dc.b $F0, $3, $0, $4, $20
0000E140 F003 0004 38               	dc.b $F0, $3, $0, $4, $38
0000E145 01                         Map_obj36_inner_61: 	dc.b $1
0000E146 FC0C 0000 F0               	dc.b $FC, $C, $0, $0, $F0
0000E14C 00                         	even
0000E14C 00                         	even
0000E14C                            
0000E14C                            ; ===========================================================================
0000E14C                            ; ---------------------------------------------------------------------------
0000E14C                            ; Object 3B - purple rock (GHZ)
0000E14C                            ; ---------------------------------------------------------------------------
0000E14C                            
0000E14C                            Obj3B:					; XREF: Obj_Index
0000E14C 7000                       		moveq	#0,d0
0000E14E 1028 0024                  		move.b	$24(a0),d0
0000E152 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000E156 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000E15A                            ; ===========================================================================
0000E15A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000E15C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000E15E                            ; ===========================================================================
0000E15E                            
0000E15E                            Obj3B_Main:				; XREF: Obj3B_Index
0000E15E 5428 0024                  		addq.b	#2,$24(a0)
0000E162 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000E16A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000E170 117C 0004 0001             		move.b	#4,1(a0)
0000E176 117C 0013 0019             		move.b	#$13,$19(a0)
0000E17C 117C 0004 0018             		move.b	#4,$18(a0)
0000E182                            
0000E182                            Obj3B_Solid:				; XREF: Obj3B_Index
0000E182 323C 001B                  		move.w	#$1B,d1
0000E186 343C 0010                  		move.w	#$10,d2
0000E18A 363C 0010                  		move.w	#$10,d3
0000E18E 3828 0008                  		move.w	8(a0),d4
0000E192 6100 0000                  		bsr.w	SolidObject
0000E196 6100 0000                  		bsr.w	DisplaySprite
0000E19A 3028 0008                  		move.w	8(a0),d0
0000E19E 0240 FF80                  		andi.w	#$FF80,d0
0000E1A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1A6 0441 0080                  		subi.w	#$80,d1
0000E1AA 0241 FF80                  		andi.w	#$FF80,d1
0000E1AE 9041                       		sub.w	d1,d0
0000E1B0 0C40 0280                  		cmpi.w	#$280,d0
0000E1B4 6200 0000                  		bhi.w	DeleteObject
0000E1B8 4E75                       		rts	
0000E1BA                            ; ===========================================================================
0000E1BA                            ; ---------------------------------------------------------------------------
0000E1BA                            ; Object 49 - waterfall	sound effect (GHZ)
0000E1BA                            ; ---------------------------------------------------------------------------
0000E1BA                            
0000E1BA                            Obj49:					; XREF: Obj_Index
0000E1BA 7000                       		moveq	#0,d0
0000E1BC 1028 0024                  		move.b	$24(a0),d0
0000E1C0 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000E1C4 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000E1C8                            ; ===========================================================================
0000E1C8 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000E1CA 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000E1CC                            ; ===========================================================================
0000E1CC                            
0000E1CC                            Obj49_Main:				; XREF: Obj49_Index
0000E1CC 5428 0024                  		addq.b	#2,$24(a0)
0000E1D0 117C 0004 0001             		move.b	#4,1(a0)
0000E1D6                            
0000E1D6                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000E1D6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000E1DA 0200 003F                  		andi.b	#$3F,d0
0000E1DE 6600                       		bne.s	Obj49_ChkDel
0000E1E0 303C 00D0                  		move.w	#$D0,d0
0000E1E4 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000E1EA                            
0000E1EA                            Obj49_ChkDel:
0000E1EA 3028 0008                  		move.w	8(a0),d0
0000E1EE 0240 FF80                  		andi.w	#$FF80,d0
0000E1F2 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1F6 0441 0080                  		subi.w	#$80,d1
0000E1FA 0241 FF80                  		andi.w	#$FF80,d1
0000E1FE 9041                       		sub.w	d1,d0
0000E200 0C40 0280                  		cmpi.w	#$280,d0
0000E204 6200 0000                  		bhi.w	DeleteObject
0000E208 4E75                       		rts	
0000E20A                            ; ===========================================================================
0000E20A                            ; ---------------------------------------------------------------------------
0000E20A                            ; Sprite mappings - purple rock	(GHZ)
0000E20A                            ; ---------------------------------------------------------------------------
0000E20A                            Map_obj3B:
0000E20A                            	include "_maps\obj3B.asm"
0000E20A                            ; ---------------------------------------------------------------------------
0000E20A                            ; Sprite mappings - purple rock	(GHZ)
0000E20A                            ; ---------------------------------------------------------------------------
0000E20A 0000                       		dc.w byte_D110-Map_obj3B
0000E20C 02                         byte_D110:	dc.b 2
0000E20D F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000E212 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000E218 00                         		even
0000E218 00                         		even
0000E218                            
0000E218                            ; ===========================================================================
0000E218                            ; ---------------------------------------------------------------------------
0000E218                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000E218                            ; ---------------------------------------------------------------------------
0000E218                            
0000E218                            Obj3C:					; XREF: Obj_Index
0000E218 7000                       		moveq	#0,d0
0000E21A 1028 0024                  		move.b	$24(a0),d0
0000E21E 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000E222 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000E226 6000 0000                  		bra.w	MarkObjGone
0000E22A                            ; ===========================================================================
0000E22A 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000E22C 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000E22E 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000E230                            ; ===========================================================================
0000E230                            
0000E230                            Obj3C_Main:				; XREF: Obj3C_Index
0000E230 5428 0024                  		addq.b	#2,$24(a0)
0000E234 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000E23C 317C 450F 0002             		move.w	#$450F,2(a0)
0000E242 117C 0004 0001             		move.b	#4,1(a0)
0000E248 117C 0010 0019             		move.b	#$10,$19(a0)
0000E24E 117C 0004 0018             		move.b	#4,$18(a0)
0000E254 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000E25A                            
0000E25A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000E25A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000E260 323C 001B                  		move.w	#$1B,d1
0000E264 343C 0020                  		move.w	#$20,d2
0000E268 363C 0020                  		move.w	#$20,d3
0000E26C 3828 0008                  		move.w	8(a0),d4
0000E270 6100 0000                  		bsr.w	SolidObject
0000E274 0828 0005 0022             		btst	#5,$22(a0)
0000E27A 6600                       		bne.s	Obj3C_ChkRoll
0000E27C                            
0000E27C                            locret_D180:
0000E27C 4E75                       		rts	
0000E27E                            ; ===========================================================================
0000E27E                            
0000E27E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000E27E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000E284 66F6                       		bne.s	locret_D180	; if not, branch
0000E286 3028 0030                  		move.w	$30(a0),d0
0000E28A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000E28C 4440                       		neg.w	d0
0000E28E                            
0000E28E                            Obj3C_ChkSpeed:
0000E28E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000E292 65E8                       		bcs.s	locret_D180	; if not, branch
0000E294 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000E29A 5869 0008                  		addq.w	#4,8(a1)
0000E29E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000E2A4 3028 0008                  		move.w	8(a0),d0
0000E2A8 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000E2AC 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000E2AE 5169 0008                  		subq.w	#8,8(a1)
0000E2B2 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000E2B8                            
0000E2B8                            Obj3C_Smash:
0000E2B8 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000E2BE 08A8 0005 0022             		bclr	#5,$22(a0)
0000E2C4 08A9 0005 0022             		bclr	#5,$22(a1)
0000E2CA 7207                       		moveq	#7,d1		; load 8 fragments
0000E2CC 343C 0070                  		move.w	#$70,d2
0000E2D0 6100                       		bsr.s	SmashObject
0000E2D2                            
0000E2D2                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000E2D2 6100 0000                  		bsr.w	SpeedToPos
0000E2D6 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000E2DC 6100 0000                  		bsr.w	DisplaySprite
0000E2E0 4A28 0001                  		tst.b	1(a0)
0000E2E4 6A00 0000                  		bpl.w	DeleteObject
0000E2E8 4E75                       		rts	
0000E2EA                            
0000E2EA                            ; ---------------------------------------------------------------------------
0000E2EA                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000E2EA                            ; ---------------------------------------------------------------------------
0000E2EA                            
0000E2EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E2EA                            
0000E2EA                            
0000E2EA                            SmashObject:				; XREF: Obj3C_Smash
0000E2EA 7000                       		moveq	#0,d0
0000E2EC 1028 001A                  		move.b	$1A(a0),d0
0000E2F0 D040                       		add.w	d0,d0
0000E2F2 2668 0004                  		movea.l	4(a0),a3
0000E2F6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000E2FA 524B                       		addq.w	#1,a3
0000E2FC 08E8 0005 0001             		bset	#5,1(a0)
0000E302 1810                       		move.b	0(a0),d4
0000E304 1A28 0001                  		move.b	1(a0),d5
0000E308 2248                       		movea.l	a0,a1
0000E30A 6000                       		bra.s	Smash_LoadFrag
0000E30C                            ; ===========================================================================
0000E30C                            
0000E30C                            Smash_Loop:
0000E30C 6100 0000                  		bsr.w	SingleObjLoad
0000E310 6600                       		bne.s	Smash_PlaySnd
0000E312 5A4B                       		addq.w	#5,a3
0000E314                            
0000E314                            Smash_LoadFrag:				; XREF: SmashObject
0000E314 137C 0004 0024             		move.b	#4,$24(a1)
0000E31A 1284                       		move.b	d4,0(a1)
0000E31C 234B 0004                  		move.l	a3,4(a1)
0000E320 1345 0001                  		move.b	d5,1(a1)
0000E324 3368 0008 0008             		move.w	8(a0),8(a1)
0000E32A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E330 3368 0002 0002             		move.w	2(a0),2(a1)
0000E336 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000E33C 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000E342 335C 0010                  		move.w	(a4)+,$10(a1)
0000E346 335C 0012                  		move.w	(a4)+,$12(a1)
0000E34A B3C8                       		cmpa.l	a0,a1
0000E34C 6400                       		bcc.s	loc_D268
0000E34E 2F08                       		move.l	a0,-(sp)
0000E350 2049                       		movea.l	a1,a0
0000E352 6100 0000                  		bsr.w	SpeedToPos
0000E356 D568 0012                  		add.w	d2,$12(a0)
0000E35A 205F                       		movea.l	(sp)+,a0
0000E35C 6100 0000                  		bsr.w	DisplaySprite2
0000E360                            
0000E360                            loc_D268:
0000E360 51C9 FFAA                  		dbf	d1,Smash_Loop
0000E364                            
0000E364                            Smash_PlaySnd:
0000E364 303C 00CB                  		move.w	#$CB,d0
0000E368 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play smashing sound
0000E36E                            ; End of function SmashObject
0000E36E                            
0000E36E                            ; ===========================================================================
0000E36E                            ; Smashed block	fragment speeds
0000E36E                            ;
0000E36E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000E372 0600 FF00                  		dc.w $600, $FF00
0000E376 0600 0100                  		dc.w $600, $100
0000E37A 0400 0500                  		dc.w $400, $500
0000E37E 0600 FA00                  		dc.w $600, $FA00
0000E382 0800 FE00                  		dc.w $800, $FE00
0000E386 0800 0200                  		dc.w $800, $200
0000E38A 0600 0600                  		dc.w $600, $600
0000E38E                            
0000E38E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000E392 F800 FE00                  		dc.w $F800, $FE00
0000E396 F800 0200                  		dc.w $F800, $200
0000E39A FA00 0600                  		dc.w $FA00, $600
0000E39E FC00 FB00                  		dc.w $FC00, $FB00
0000E3A2 FA00 FF00                  		dc.w $FA00, $FF00
0000E3A6 FA00 0100                  		dc.w $FA00, $100
0000E3AA FC00 0500                  		dc.w $FC00, $500
0000E3AE                            ; ---------------------------------------------------------------------------
0000E3AE                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E3AE                            ; ---------------------------------------------------------------------------
0000E3AE                            Map_obj3C:
0000E3AE                            	include "_maps\obj3C.asm"
0000E3AE                            ; ---------------------------------------------------------------------------
0000E3AE                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000E3AE                            ; ---------------------------------------------------------------------------
0000E3AE 0000                       		dc.w byte_D2BC-Map_obj3C
0000E3B0 0000                       		dc.w byte_D2E5-Map_obj3C
0000E3B2 0000                       		dc.w byte_D30E-Map_obj3C
0000E3B4 08                         byte_D2BC:	dc.b 8
0000E3B5 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000E3BA F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000E3BF 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000E3C4 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000E3C9 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E3CE F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E3D3 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E3D8 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E3DD 08                         byte_D2E5:	dc.b 8
0000E3DE E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E3E3 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E3E8 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E3ED 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E3F2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000E3F7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000E3FC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000E401 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000E406 08                         byte_D30E:	dc.b 8
0000E407 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000E40C F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000E411 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000E416 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000E41B E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000E420 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000E425 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000E42A 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000E430 00                         		even
0000E430 00                         		even
0000E430                            
0000E430                            ; ---------------------------------------------------------------------------
0000E430                            ; Object code loading subroutine
0000E430                            ; ---------------------------------------------------------------------------
0000E430                            
0000E430                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E430                            
0000E430                            
0000E430                            ObjectsLoad:				; XREF: TitleScreen; et al
0000E430 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000E434 7E7F                       		moveq	#$7F,d7
0000E436 7000                       		moveq	#0,d0
0000E438 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000E43E 6400                       		bcc.s	loc_D362
0000E440                            
0000E440                            loc_D348:
0000E440 1010                       		move.b	(a0),d0		; load object number from RAM
0000E442 6700                       		beq.s	loc_D358
0000E444 D040                       		add.w	d0,d0
0000E446 D040                       		add.w	d0,d0
0000E448 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000E44C 4E91                       		jsr	(a1)		; run the object's code
0000E44E 7000                       		moveq	#0,d0
0000E450                            
0000E450                            loc_D358:
0000E450 41E8 0040                  		lea	$40(a0),a0	; next object
0000E454 51CF FFEA                  		dbf	d7,loc_D348
0000E458 4E75                       		rts	
0000E45A                            ; ===========================================================================
0000E45A                            
0000E45A                            loc_D362:
0000E45A 7E1F                       		moveq	#$1F,d7
0000E45C 61E2                       		bsr.s	loc_D348
0000E45E 7E5F                       		moveq	#$5F,d7
0000E460                            
0000E460                            loc_D368:
0000E460 7000                       		moveq	#0,d0
0000E462 1010                       		move.b	(a0),d0
0000E464 6700                       		beq.s	loc_D378
0000E466 4A28 0001                  		tst.b	1(a0)
0000E46A 6A00                       		bpl.s	loc_D378
0000E46C 6100 0000                  		bsr.w	DisplaySprite
0000E470                            
0000E470                            loc_D378:
0000E470 41E8 0040                  		lea	$40(a0),a0
0000E474                            
0000E474                            loc_D37C:
0000E474 51CF FFEA                  		dbf	d7,loc_D368
0000E478 4E75                       		rts	
0000E47A                            ; End of function ObjectsLoad
0000E47A                            
0000E47A                            ; ===========================================================================
0000E47A                            ; ---------------------------------------------------------------------------
0000E47A                            ; Object pointers
0000E47A                            ; ---------------------------------------------------------------------------
0000E47A                            Obj_Index:
0000E47A                            	include "_inc\Object pointers.asm"
0000E47A                            ; ---------------------------------------------------------------------------
0000E47A                            ; Object pointers
0000E47A                            ; ---------------------------------------------------------------------------
0000E47A 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000E48A 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000E49A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000E4AA 0000 0000 0000 B694 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000E4BA 0000 822C 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000E4CA 0000 8852 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000E4DA 0000 90A0 0000 919A 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000E4EA 0000 97E4 0000 9AD2 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000E4FA 0000 0000 0000 A790 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000E50A 0000 AAC8 0000 B0B4 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000E51A 0000 A3EC 0000 98BA 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000E52A 0000 BC8C 0000 B2A8 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000E53A 0000 C6A0 0000 CD4E 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000E54A 0000 C1FE 0000 DF24 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000E55A 0000 D4FC 0000 D5B6 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000E56A 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000E57A 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000E58A 0000 C9BC 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000E59A 0000 E1BA 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000E5AA 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000E5BA 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000E5CA 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000E5DA 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000E5EA 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000E5FA 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000E60A 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000E61A 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000E62A 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000E63A 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000E64A 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000E65A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000E66A 0000 0000 0000 D800 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000E67A 0000 5C8A 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000E68A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000E69A 0000 6344 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E69A 0000 6344 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000E6AA                            
0000E6AA                            ; ---------------------------------------------------------------------------
0000E6AA                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E6AA                            ; ---------------------------------------------------------------------------
0000E6AA                            
0000E6AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6AA                            
0000E6AA                            _objectFall: 
0000E6AA                            ObjectFall:
0000E6AA 2428 0008                  		move.l	8(a0),d2
0000E6AE 2628 000C                  		move.l	$C(a0),d3
0000E6B2 3028 0010                  		move.w	$10(a0),d0
0000E6B6 48C0                       		ext.l	d0
0000E6B8 E180                       		asl.l	#8,d0
0000E6BA D480                       		add.l	d0,d2
0000E6BC 3028 0012                  		move.w	$12(a0),d0
0000E6C0 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000E6C6 48C0                       		ext.l	d0
0000E6C8 E180                       		asl.l	#8,d0
0000E6CA D680                       		add.l	d0,d3
0000E6CC 2142 0008                  		move.l	d2,8(a0)
0000E6D0 2143 000C                  		move.l	d3,$C(a0)
0000E6D4 4E75                       		rts	
0000E6D6                            ; End of function ObjectFall
0000E6D6                            
0000E6D6                            ; ---------------------------------------------------------------------------
0000E6D6                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000E6D6                            ; ---------------------------------------------------------------------------
0000E6D6                            
0000E6D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E6D6                            
0000E6D6                            
0000E6D6                            ObjectFallNoJump:
0000E6D6 2428 0008                  		move.l	8(a0),d2
0000E6DA 2628 000C                  		move.l	$C(a0),d3
0000E6DE 3028 0010                  		move.w	$10(a0),d0
0000E6E2 48C0                       		ext.l	d0
0000E6E4 E180                       		asl.l	#8,d0
0000E6E6 D480                       		add.l	d0,d2
0000E6E8                            ;		cmpi.b	#1,obID(a0)
0000E6E8                            ;		beq.s	ObjectFallSonic
0000E6E8 3028 000C                  		move.w	$C(a0),d0
0000E6EC 5868 000C                  		addi.w	#4,$C(a0)	; increase vertical speed
0000E6F0                            ;		ext.l	d0
0000E6F0                            ;		asl.l	#8,d0
0000E6F0                            ;		add.l	d0,d3
0000E6F0 2142 0008                  		move.l	d2,$8(a0)
0000E6F4                            ;		move.l	d3,obY(a0)
0000E6F4 4E75                       		rts	
0000E6F6                            
0000E6F6                            ; End of function ObjectFall
0000E6F6                            
0000E6F6                            JumpFallSonic:
0000E6F6 4CA8 0003 0010                     movem.w    $10(a0),d0-d1        ; Get speed
0000E6FC                                    
0000E6FC E180                               asl.l    #8,d0                ; Apply X speed
0000E6FE D1A8 0008                          add.l    d0,$8(a0)
0000E702                                    
0000E702 303C 0300                          move.w    #$300,d0            ; Y movement speed
0000E706 4A41                               tst.w    d1                ; Are we falling?
0000E708 6A00                               bpl.s    .SetYSpeed            ; If so, branch
0000E70A 4440                               neg.w    d0                ; Make Y movement go up
0000E70C                                    
0000E70C                            .SetYSpeed:
0000E70C 48C0                               ext.l    d0                ; Apply Y speed
0000E70E E180                               asl.l    #8,d0
0000E710 D1A8 000C                          add.l    d0,$C(a0)
0000E714 0668 0038 0012                     addi.w    #$38,$12(a0)            ; Apply gravity
0000E71A 4E75                               rts
0000E71C                            
0000E71C                            ; ---------------------------------------------------------------------------
0000E71C                            ; Subroutine translating object	speed to update	object position
0000E71C                            ; ---------------------------------------------------------------------------
0000E71C                            
0000E71C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E71C                            
0000E71C                            _objectSetSpeed:
0000E71C                            SpeedToPos:
0000E71C 2428 0008                  		move.l	8(a0),d2
0000E720 2628 000C                  		move.l	$C(a0),d3
0000E724 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000E728 48C0                       		ext.l	d0
0000E72A E180                       		asl.l	#8,d0		; multiply speed by $100
0000E72C D480                       		add.l	d0,d2		; add to x-axis	position
0000E72E 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000E732 48C0                       		ext.l	d0
0000E734 E180                       		asl.l	#8,d0		; multiply by $100
0000E736 D680                       		add.l	d0,d3		; add to y-axis	position
0000E738 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000E73C 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000E740 4E75                       		rts	
0000E742                            ; End of function SpeedToPos
0000E742                            
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000E742                            ; ---------------------------------------------------------------------------
0000E742                            
0000E742                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E742                            
0000E742                            _objectDraw:
0000E742                            DisplaySprite:
0000E742 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000E746 3028 0018                  		move.w	$18(a0),d0
0000E74A E248                       		lsr.w	#1,d0
0000E74C 0240 0380                  		andi.w	#$380,d0
0000E750 D2C0                       		adda.w	d0,a1
0000E752 0C51 007E                  		cmpi.w	#$7E,(a1)
0000E756 6400                       		bcc.s	locret_D620
0000E758 5451                       		addq.w	#2,(a1)
0000E75A D2D1                       		adda.w	(a1),a1
0000E75C 3288                       		move.w	a0,(a1)
0000E75E                            
0000E75E                            locret_D620:
0000E75E 4E75                       		rts	
0000E760                            ; End of function DisplaySprite
0000E760                            
0000E760                            ; ---------------------------------------------------------------------------
0000E760                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000E760                            ; ---------------------------------------------------------------------------
0000E760                            
0000E760                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E760                            
0000E760                            _objectDrawChild: 
0000E760                            DisplaySprite2:
0000E760 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000E764 3029 0018                  		move.w	$18(a1),d0
0000E768 E248                       		lsr.w	#1,d0
0000E76A 0240 0380                  		andi.w	#$380,d0
0000E76E D4C0                       		adda.w	d0,a2
0000E770 0C52 007E                  		cmpi.w	#$7E,(a2)
0000E774 6400                       		bcc.s	locret_D63E
0000E776 5452                       		addq.w	#2,(a2)
0000E778 D4D2                       		adda.w	(a2),a2
0000E77A 3489                       		move.w	a1,(a2)
0000E77C                            
0000E77C                            locret_D63E:
0000E77C 4E75                       		rts	
0000E77E                            ; End of function DisplaySprite2
0000E77E                            
0000E77E                            ; ---------------------------------------------------------------------------
0000E77E                            ; Subroutine to	delete an object
0000E77E                            ; ---------------------------------------------------------------------------
0000E77E                            
0000E77E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E77E                            
0000E77E                            _objectDelete: 
0000E77E                            DeleteObject:
0000E77E 2248                       		movea.l	a0,a1
0000E780                            
0000E780                            DeleteObject2:
0000E780 7200                       		moveq	#0,d1
0000E782 700F                       		moveq	#$F,d0
0000E784                            
0000E784                            loc_D646:
0000E784 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000E786 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000E78A 4E75                       		rts	
0000E78C                            ; End of function DeleteObject
0000E78C                            
0000E78C                            ; ===========================================================================
0000E78C 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000E790 00FF F700                  		dc.l $FFF700		; main screen x-position
0000E794 00FF F708                  		dc.l $FFF708		; background x-position	1
0000E798 00FF F718                  		dc.l $FFF718		; background x-position	2
0000E79C                            ; ---------------------------------------------------------------------------
0000E79C                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000E79C                            ; ---------------------------------------------------------------------------
0000E79C                            
0000E79C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E79C                            
0000E79C                            DrawObjects:
0000E79C                            BuildSprites:				; XREF: TitleScreen; et al
0000E79C 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000E7A0 7A00                       		moveq	#0,d5
0000E7A2 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000E7A6 7E07                       		moveq	#7,d7
0000E7A8                            
0000E7A8                            loc_D66A:
0000E7A8 4A54                       		tst.w	(a4)
0000E7AA 6700 0000                  		beq.w	loc_D72E
0000E7AE 7C02                       		moveq	#2,d6
0000E7B0                            
0000E7B0                            loc_D672:
0000E7B0 3074 6000                  		movea.w	(a4,d6.w),a0
0000E7B4 4A10                       		tst.b	(a0)
0000E7B6 6700 0000                  		beq.w	loc_D726
0000E7BA 08A8 0007 0001             		bclr	#7,1(a0)
0000E7C0 1028 0001                  		move.b	1(a0),d0
0000E7C4 1800                       		move.b	d0,d4
0000E7C6 0240 000C                  		andi.w	#$C,d0
0000E7CA 6700                       		beq.s	loc_D6DE
0000E7CC 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000E7D0 7000                       		moveq	#0,d0
0000E7D2 1028 0019                  		move.b	$19(a0),d0
0000E7D6 3628 0008                  		move.w	8(a0),d3
0000E7DA 9651                       		sub.w	(a1),d3
0000E7DC 3203                       		move.w	d3,d1
0000E7DE D240                       		add.w	d0,d1
0000E7E0 6B00 0000                  		bmi.w	loc_D726
0000E7E4 3203                       		move.w	d3,d1
0000E7E6 9240                       		sub.w	d0,d1
0000E7E8 0C41 0140                  		cmpi.w	#$140,d1
0000E7EC 6C00                       		bge.s	loc_D726
0000E7EE 0643 0080                  		addi.w	#$80,d3
0000E7F2 0804 0004                  		btst	#4,d4
0000E7F6 6700                       		beq.s	loc_D6E8
0000E7F8 7000                       		moveq	#0,d0
0000E7FA 1028 0016                  		move.b	$16(a0),d0
0000E7FE 3428 000C                  		move.w	$C(a0),d2
0000E802 9469 0004                  		sub.w	4(a1),d2
0000E806 3202                       		move.w	d2,d1
0000E808 D240                       		add.w	d0,d1
0000E80A 6B00                       		bmi.s	loc_D726
0000E80C 3202                       		move.w	d2,d1
0000E80E 9240                       		sub.w	d0,d1
0000E810 0C41 00E0                  		cmpi.w	#$E0,d1
0000E814 6C00                       		bge.s	loc_D726
0000E816 0642 0080                  		addi.w	#$80,d2
0000E81A 6000                       		bra.s	loc_D700
0000E81C                            ; ===========================================================================
0000E81C                            
0000E81C                            loc_D6DE:
0000E81C 3428 000A                  		move.w	$A(a0),d2
0000E820 3628 0008                  		move.w	8(a0),d3
0000E824 6000                       		bra.s	loc_D700
0000E826                            ; ===========================================================================
0000E826                            
0000E826                            loc_D6E8:
0000E826 3428 000C                  		move.w	$C(a0),d2
0000E82A 9469 0004                  		sub.w	4(a1),d2
0000E82E 0642 0080                  		addi.w	#$80,d2
0000E832 0C42 0060                  		cmpi.w	#$60,d2
0000E836 6500                       		bcs.s	loc_D726
0000E838 0C42 0180                  		cmpi.w	#$180,d2
0000E83C 6400                       		bcc.s	loc_D726
0000E83E                            
0000E83E                            loc_D700:
0000E83E 2268 0004                  		movea.l	4(a0),a1
0000E842 7200                       		moveq	#0,d1
0000E844 0804 0005                  		btst	#5,d4
0000E848 6600                       		bne.s	loc_D71C
0000E84A 1228 001A                  		move.b	$1A(a0),d1
0000E84E D201                       		add.b	d1,d1
0000E850 D2F1 1000                  		adda.w	(a1,d1.w),a1
0000E854 1219                       		move.b	(a1)+,d1
0000E856 5301                       		subq.b	#1,d1
0000E858 6B00                       		bmi.s	loc_D720
0000E85A                            
0000E85A                            loc_D71C:
0000E85A 6100 0000                  		bsr.w	sub_D750
0000E85E                            
0000E85E                            loc_D720:
0000E85E 08E8 0007 0001             		bset	#7,1(a0)
0000E864                            
0000E864                            loc_D726:
0000E864 5446                       		addq.w	#2,d6
0000E866 5554                       		subq.w	#2,(a4)
0000E868 6600 FF46                  		bne.w	loc_D672
0000E86C                            
0000E86C                            loc_D72E:
0000E86C 49EC 0080                  		lea	$80(a4),a4
0000E870 51CF FF36                  		dbf	d7,loc_D66A
0000E874 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000E878 0C05 0050                  		cmpi.b	#$50,d5
0000E87C 6700                       		beq.s	loc_D748
0000E87E 24BC 0000 0000             		move.l	#0,(a2)
0000E884 4E75                       		rts	
0000E886                            ; ===========================================================================
0000E886                            
0000E886                            loc_D748:
0000E886 157C 0000 FFFB             		move.b	#0,-5(a2)
0000E88C 4E75                       		rts	
0000E88E                            ; End of function BuildSprites
0000E88E                            
0000E88E                            
0000E88E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E88E                            
0000E88E                            
0000E88E                            sub_D750:				; XREF: BuildSprites
0000E88E 3668 0002                  		movea.w	2(a0),a3
0000E892 0804 0000                  		btst	#0,d4
0000E896 6600                       		bne.s	loc_D796
0000E898 0804 0001                  		btst	#1,d4
0000E89C 6600 0000                  		bne.w	loc_D7E4
0000E8A0                            ; End of function sub_D750
0000E8A0                            
0000E8A0                            
0000E8A0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E8A0                            
0000E8A0                            
0000E8A0                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000E8A0 0C05 0050                  		cmpi.b	#$50,d5
0000E8A4 6700                       		beq.s	locret_D794
0000E8A6 1019                       		move.b	(a1)+,d0
0000E8A8 4880                       		ext.w	d0
0000E8AA D042                       		add.w	d2,d0
0000E8AC 34C0                       		move.w	d0,(a2)+
0000E8AE 14D9                       		move.b	(a1)+,(a2)+
0000E8B0 5205                       		addq.b	#1,d5
0000E8B2 14C5                       		move.b	d5,(a2)+
0000E8B4 1019                       		move.b	(a1)+,d0
0000E8B6 E148                       		lsl.w	#8,d0
0000E8B8 1019                       		move.b	(a1)+,d0
0000E8BA D04B                       		add.w	a3,d0
0000E8BC 34C0                       		move.w	d0,(a2)+
0000E8BE 1019                       		move.b	(a1)+,d0
0000E8C0 4880                       		ext.w	d0
0000E8C2 D043                       		add.w	d3,d0
0000E8C4 0240 01FF                  		andi.w	#$1FF,d0
0000E8C8 6600                       		bne.s	loc_D78E
0000E8CA 5240                       		addq.w	#1,d0
0000E8CC                            
0000E8CC                            loc_D78E:
0000E8CC 34C0                       		move.w	d0,(a2)+
0000E8CE 51C9 FFD0                  		dbf	d1,sub_D762
0000E8D2                            
0000E8D2                            locret_D794:
0000E8D2 4E75                       		rts	
0000E8D4                            ; End of function sub_D762
0000E8D4                            
0000E8D4                            ; ===========================================================================
0000E8D4                            
0000E8D4                            loc_D796:
0000E8D4 0804 0001                  		btst	#1,d4
0000E8D8 6600 0000                  		bne.w	loc_D82A
0000E8DC                            
0000E8DC                            loc_D79E:
0000E8DC 0C05 0050                  		cmpi.b	#$50,d5
0000E8E0 6700                       		beq.s	locret_D7E2
0000E8E2 1019                       		move.b	(a1)+,d0
0000E8E4 4880                       		ext.w	d0
0000E8E6 D042                       		add.w	d2,d0
0000E8E8 34C0                       		move.w	d0,(a2)+
0000E8EA 1819                       		move.b	(a1)+,d4
0000E8EC 14C4                       		move.b	d4,(a2)+
0000E8EE 5205                       		addq.b	#1,d5
0000E8F0 14C5                       		move.b	d5,(a2)+
0000E8F2 1019                       		move.b	(a1)+,d0
0000E8F4 E148                       		lsl.w	#8,d0
0000E8F6 1019                       		move.b	(a1)+,d0
0000E8F8 D04B                       		add.w	a3,d0
0000E8FA 0A40 0800                  		eori.w	#$800,d0
0000E8FE 34C0                       		move.w	d0,(a2)+
0000E900 1019                       		move.b	(a1)+,d0
0000E902 4880                       		ext.w	d0
0000E904 4440                       		neg.w	d0
0000E906 D804                       		add.b	d4,d4
0000E908 0244 0018                  		andi.w	#$18,d4
0000E90C 5044                       		addq.w	#8,d4
0000E90E 9044                       		sub.w	d4,d0
0000E910 D043                       		add.w	d3,d0
0000E912 0240 01FF                  		andi.w	#$1FF,d0
0000E916 6600                       		bne.s	loc_D7DC
0000E918 5240                       		addq.w	#1,d0
0000E91A                            
0000E91A                            loc_D7DC:
0000E91A 34C0                       		move.w	d0,(a2)+
0000E91C 51C9 FFBE                  		dbf	d1,loc_D79E
0000E920                            
0000E920                            locret_D7E2:
0000E920 4E75                       		rts	
0000E922                            ; ===========================================================================
0000E922                            
0000E922                            loc_D7E4:				; XREF: sub_D750
0000E922 0C05 0050                  		cmpi.b	#$50,d5
0000E926 6700                       		beq.s	locret_D828
0000E928 1019                       		move.b	(a1)+,d0
0000E92A 1811                       		move.b	(a1),d4
0000E92C 4880                       		ext.w	d0
0000E92E 4440                       		neg.w	d0
0000E930 E70C                       		lsl.b	#3,d4
0000E932 0244 0018                  		andi.w	#$18,d4
0000E936 5044                       		addq.w	#8,d4
0000E938 9044                       		sub.w	d4,d0
0000E93A D042                       		add.w	d2,d0
0000E93C 34C0                       		move.w	d0,(a2)+
0000E93E 14D9                       		move.b	(a1)+,(a2)+
0000E940 5205                       		addq.b	#1,d5
0000E942 14C5                       		move.b	d5,(a2)+
0000E944 1019                       		move.b	(a1)+,d0
0000E946 E148                       		lsl.w	#8,d0
0000E948 1019                       		move.b	(a1)+,d0
0000E94A D04B                       		add.w	a3,d0
0000E94C 0A40 1000                  		eori.w	#$1000,d0
0000E950 34C0                       		move.w	d0,(a2)+
0000E952 1019                       		move.b	(a1)+,d0
0000E954 4880                       		ext.w	d0
0000E956 D043                       		add.w	d3,d0
0000E958 0240 01FF                  		andi.w	#$1FF,d0
0000E95C 6600                       		bne.s	loc_D822
0000E95E 5240                       		addq.w	#1,d0
0000E960                            
0000E960                            loc_D822:
0000E960 34C0                       		move.w	d0,(a2)+
0000E962 51C9 FFBE                  		dbf	d1,loc_D7E4
0000E966                            
0000E966                            locret_D828:
0000E966 4E75                       		rts	
0000E968                            ; ===========================================================================
0000E968                            
0000E968                            loc_D82A:
0000E968 0C05 0050                  		cmpi.b	#$50,d5
0000E96C 6700                       		beq.s	locret_D87C
0000E96E 1019                       		move.b	(a1)+,d0
0000E970 1811                       		move.b	(a1),d4
0000E972 4880                       		ext.w	d0
0000E974 4440                       		neg.w	d0
0000E976 E70C                       		lsl.b	#3,d4
0000E978 0244 0018                  		andi.w	#$18,d4
0000E97C 5044                       		addq.w	#8,d4
0000E97E 9044                       		sub.w	d4,d0
0000E980 D042                       		add.w	d2,d0
0000E982 34C0                       		move.w	d0,(a2)+
0000E984 1819                       		move.b	(a1)+,d4
0000E986 14C4                       		move.b	d4,(a2)+
0000E988 5205                       		addq.b	#1,d5
0000E98A 14C5                       		move.b	d5,(a2)+
0000E98C 1019                       		move.b	(a1)+,d0
0000E98E E148                       		lsl.w	#8,d0
0000E990 1019                       		move.b	(a1)+,d0
0000E992 D04B                       		add.w	a3,d0
0000E994 0A40 1800                  		eori.w	#$1800,d0
0000E998 34C0                       		move.w	d0,(a2)+
0000E99A 1019                       		move.b	(a1)+,d0
0000E99C 4880                       		ext.w	d0
0000E99E 4440                       		neg.w	d0
0000E9A0 D804                       		add.b	d4,d4
0000E9A2 0244 0018                  		andi.w	#$18,d4
0000E9A6 5044                       		addq.w	#8,d4
0000E9A8 9044                       		sub.w	d4,d0
0000E9AA D043                       		add.w	d3,d0
0000E9AC 0240 01FF                  		andi.w	#$1FF,d0
0000E9B0 6600                       		bne.s	loc_D876
0000E9B2 5240                       		addq.w	#1,d0
0000E9B4                            
0000E9B4                            loc_D876:
0000E9B4 34C0                       		move.w	d0,(a2)+
0000E9B6 51C9 FFB0                  		dbf	d1,loc_D82A
0000E9BA                            
0000E9BA                            locret_D87C:
0000E9BA 4E75                       		rts	
0000E9BC                            ; ---------------------------------------------------------------------------
0000E9BC                            ; Subroutine to	check if an object is on the screen
0000E9BC                            ; ---------------------------------------------------------------------------
0000E9BC                            
0000E9BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9BC                            
0000E9BC                            
0000E9BC                            ChkObjOnScreen:
0000E9BC 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000E9C0 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000E9C4 6B00                       		bmi.s	NotOnScreen
0000E9C6 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000E9CA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E9CC                            
0000E9CC 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000E9D0 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000E9D4 6B00                       		bmi.s	NotOnScreen
0000E9D6 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000E9DA 6C00                       		bge.s	NotOnScreen	; if not, branch
0000E9DC                            
0000E9DC 7000                       		moveq	#0,d0		; set flag to 0
0000E9DE 4E75                       		rts	
0000E9E0                            ; ===========================================================================
0000E9E0                            
0000E9E0                            NotOnScreen:				; XREF: ChkObjOnScreen
0000E9E0 7001                       		moveq	#1,d0		; set flag to 1
0000E9E2 4E75                       		rts	
0000E9E4                            ; End of function ChkObjOnScreen
0000E9E4                            
0000E9E4                            
0000E9E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E9E4                            
0000E9E4                            
0000E9E4                            ChkObjOnScreen2:
0000E9E4 7200                       		moveq	#0,d1
0000E9E6 1228 0019                  		move.b	$19(a0),d1
0000E9EA 3028 0008                  		move.w	8(a0),d0
0000E9EE 9078 F700                  		sub.w	($FFFFF700).w,d0
0000E9F2 D041                       		add.w	d1,d0
0000E9F4 6B00                       		bmi.s	NotOnScreen2
0000E9F6 D241                       		add.w	d1,d1
0000E9F8 9041                       		sub.w	d1,d0
0000E9FA 0C40 0140                  		cmpi.w	#320,d0
0000E9FE 6C00                       		bge.s	NotOnScreen2
0000EA00                            
0000EA00 3228 000C                  		move.w	$C(a0),d1
0000EA04 9278 F704                  		sub.w	($FFFFF704).w,d1
0000EA08 6B00                       		bmi.s	NotOnScreen2
0000EA0A 0C41 00E0                  		cmpi.w	#224,d1
0000EA0E 6C00                       		bge.s	NotOnScreen2
0000EA10                            
0000EA10 7000                       		moveq	#0,d0
0000EA12 4E75                       		rts	
0000EA14                            ; ===========================================================================
0000EA14                            
0000EA14                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000EA14 7001                       		moveq	#1,d0
0000EA16 4E75                       		rts	
0000EA18                            ; End of function ChkObjOnScreen2
0000EA18                            
0000EA18                            ; ---------------------------------------------------------------------------
0000EA18                            ; Subroutine to	load a level's objects
0000EA18                            ; ---------------------------------------------------------------------------
0000EA18                            
0000EA18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EA18                            
0000EA18                            
0000EA18                            ObjPosLoad:				; XREF: Level; et al
0000EA18 7000                       		moveq	#0,d0
0000EA1A 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000EA1E 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000EA22 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000EA26                            ; End of function ObjPosLoad
0000EA26                            
0000EA26                            ; ===========================================================================
0000EA26 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000EA28 0000                       		dc.w OPL_Next-OPL_Index
0000EA2A                            ; ===========================================================================
0000EA2A                            
0000EA2A                            OPL_Main:				; XREF: OPL_Index
0000EA2A 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000EA2E 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000EA32 ED08                       		lsl.b	#6,d0
0000EA34 E848                       		lsr.w	#4,d0
0000EA36 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000EA3C 2248                       		movea.l	a0,a1
0000EA3E D0F0 0000                  		adda.w	(a0,d0.w),a0
0000EA42 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EA46 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EA4A D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000EA4E 21C9 F778                  		move.l	a1,($FFFFF778).w
0000EA52 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000EA56 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA5A 34FC 0101                  		move.w	#$101,(a2)+
0000EA5E 303C 005E                  		move.w	#$5E,d0
0000EA62                            
0000EA62                            OPL_ClrList:
0000EA62 429A                       		clr.l	(a2)+
0000EA64 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000EA68                            
0000EA68 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA6C 7400                       		moveq	#0,d2
0000EA6E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EA72 0446 0080                  		subi.w	#$80,d6
0000EA76 6400                       		bcc.s	loc_D93C
0000EA78 7C00                       		moveq	#0,d6
0000EA7A                            
0000EA7A                            loc_D93C:
0000EA7A 0246 FF80                  		andi.w	#$FF80,d6
0000EA7E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EA82                            
0000EA82                            loc_D944:
0000EA82 BC50                       		cmp.w	(a0),d6
0000EA84 6300                       		bls.s	loc_D956
0000EA86 4A28 0004                  		tst.b	4(a0)
0000EA8A 6A00                       		bpl.s	loc_D952
0000EA8C 1412                       		move.b	(a2),d2
0000EA8E 5212                       		addq.b	#1,(a2)
0000EA90                            
0000EA90                            loc_D952:
0000EA90 5C48                       		addq.w	#6,a0
0000EA92 60EE                       		bra.s	loc_D944
0000EA94                            ; ===========================================================================
0000EA94                            
0000EA94                            loc_D956:
0000EA94 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EA98 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EA9C 0446 0080                  		subi.w	#$80,d6
0000EAA0 6500                       		bcs.s	loc_D976
0000EAA2                            
0000EAA2                            loc_D964:
0000EAA2 BC50                       		cmp.w	(a0),d6
0000EAA4 6300                       		bls.s	loc_D976
0000EAA6 4A28 0004                  		tst.b	4(a0)
0000EAAA 6A00                       		bpl.s	loc_D972
0000EAAC 522A 0001                  		addq.b	#1,1(a2)
0000EAB0                            
0000EAB0                            loc_D972:
0000EAB0 5C48                       		addq.w	#6,a0
0000EAB2 60EE                       		bra.s	loc_D964
0000EAB4                            ; ===========================================================================
0000EAB4                            
0000EAB4                            loc_D976:
0000EAB4 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EAB8 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000EABE                            
0000EABE                            OPL_Next:				; XREF: OPL_Index
0000EABE 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EAC2 7400                       		moveq	#0,d2
0000EAC4 3C38 F700                  		move.w	($FFFFF700).w,d6
0000EAC8 0246 FF80                  		andi.w	#$FF80,d6
0000EACC BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000EAD0 6700 0000                  		beq.w	locret_DA3A
0000EAD4 6C00                       		bge.s	loc_D9F6
0000EAD6 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EADA 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EADE 0446 0080                  		subi.w	#$80,d6
0000EAE2 6500                       		bcs.s	loc_D9D2
0000EAE4                            
0000EAE4                            loc_D9A6:
0000EAE4 BC68 FFFA                  		cmp.w	-6(a0),d6
0000EAE8 6C00                       		bge.s	loc_D9D2
0000EAEA 5D48                       		subq.w	#6,a0
0000EAEC 4A28 0004                  		tst.b	4(a0)
0000EAF0 6A00                       		bpl.s	loc_D9BC
0000EAF2 532A 0001                  		subq.b	#1,1(a2)
0000EAF6 142A 0001                  		move.b	1(a2),d2
0000EAFA                            
0000EAFA                            loc_D9BC:
0000EAFA 6100 0000                  		bsr.w	loc_DA3C
0000EAFE 6600                       		bne.s	loc_D9C6
0000EB00 5D48                       		subq.w	#6,a0
0000EB02 60E0                       		bra.s	loc_D9A6
0000EB04                            ; ===========================================================================
0000EB04                            
0000EB04                            loc_D9C6:
0000EB04 4A28 0004                  		tst.b	4(a0)
0000EB08 6A00                       		bpl.s	loc_D9D0
0000EB0A 522A 0001                  		addq.b	#1,1(a2)
0000EB0E                            
0000EB0E                            loc_D9D0:
0000EB0E 5C48                       		addq.w	#6,a0
0000EB10                            
0000EB10                            loc_D9D2:
0000EB10 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB14 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB18 0646 0300                  		addi.w	#$300,d6
0000EB1C                            
0000EB1C                            loc_D9DE:
0000EB1C BC68 FFFA                  		cmp.w	-6(a0),d6
0000EB20 6E00                       		bgt.s	loc_D9F0
0000EB22 4A28 FFFE                  		tst.b	-2(a0)
0000EB26 6A00                       		bpl.s	loc_D9EC
0000EB28 5312                       		subq.b	#1,(a2)
0000EB2A                            
0000EB2A                            loc_D9EC:
0000EB2A 5D48                       		subq.w	#6,a0
0000EB2C 60EE                       		bra.s	loc_D9DE
0000EB2E                            ; ===========================================================================
0000EB2E                            
0000EB2E                            loc_D9F0:
0000EB2E 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB32 4E75                       		rts	
0000EB34                            ; ===========================================================================
0000EB34                            
0000EB34                            loc_D9F6:
0000EB34 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000EB38 2078 F770                  		movea.l	($FFFFF770).w,a0
0000EB3C 0646 0280                  		addi.w	#$280,d6
0000EB40                            
0000EB40                            loc_DA02:
0000EB40 BC50                       		cmp.w	(a0),d6
0000EB42 6300                       		bls.s	loc_DA16
0000EB44 4A28 0004                  		tst.b	4(a0)
0000EB48 6A00                       		bpl.s	loc_DA10
0000EB4A 1412                       		move.b	(a2),d2
0000EB4C 5212                       		addq.b	#1,(a2)
0000EB4E                            
0000EB4E                            loc_DA10:
0000EB4E 6100 0000                  		bsr.w	loc_DA3C
0000EB52 67EC                       		beq.s	loc_DA02
0000EB54                            
0000EB54                            loc_DA16:
0000EB54 21C8 F770                  		move.l	a0,($FFFFF770).w
0000EB58 2078 F774                  		movea.l	($FFFFF774).w,a0
0000EB5C 0446 0300                  		subi.w	#$300,d6
0000EB60 6500                       		bcs.s	loc_DA36
0000EB62                            
0000EB62                            loc_DA24:
0000EB62 BC50                       		cmp.w	(a0),d6
0000EB64 6300                       		bls.s	loc_DA36
0000EB66 4A28 0004                  		tst.b	4(a0)
0000EB6A 6A00                       		bpl.s	loc_DA32
0000EB6C 522A 0001                  		addq.b	#1,1(a2)
0000EB70                            
0000EB70                            loc_DA32:
0000EB70 5C48                       		addq.w	#6,a0
0000EB72 60EE                       		bra.s	loc_DA24
0000EB74                            ; ===========================================================================
0000EB74                            
0000EB74                            loc_DA36:
0000EB74 21C8 F774                  		move.l	a0,($FFFFF774).w
0000EB78                            
0000EB78                            locret_DA3A:
0000EB78 4E75                       		rts	
0000EB7A                            ; ===========================================================================
0000EB7A                            
0000EB7A                            loc_DA3C:
0000EB7A 4A28 0004                  		tst.b	4(a0)
0000EB7E 6A00                       		bpl.s	OPL_MakeItem
0000EB80 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000EB86 6700                       		beq.s	OPL_MakeItem
0000EB88 5C48                       		addq.w	#6,a0
0000EB8A 7000                       		moveq	#0,d0
0000EB8C 4E75                       		rts	
0000EB8E                            ; ===========================================================================
0000EB8E                            
0000EB8E                            OPL_MakeItem:
0000EB8E 6100 0000                  		bsr.w	SingleObjLoad
0000EB92 6600                       		bne.s	locret_DA8A
0000EB94 3358 0008                  		move.w	(a0)+,8(a1)
0000EB98 3018                       		move.w	(a0)+,d0
0000EB9A 3200                       		move.w	d0,d1
0000EB9C 0240 0FFF                  		andi.w	#$FFF,d0
0000EBA0 3340 000C                  		move.w	d0,$C(a1)
0000EBA4 E559                       		rol.w	#2,d1
0000EBA6 0201 0003                  		andi.b	#3,d1
0000EBAA 1341 0001                  		move.b	d1,1(a1)
0000EBAE 1341 0022                  		move.b	d1,$22(a1)
0000EBB2 1018                       		move.b	(a0)+,d0
0000EBB4 6A00                       		bpl.s	loc_DA80
0000EBB6 0200 007F                  		andi.b	#$7F,d0
0000EBBA 1342 0023                  		move.b	d2,$23(a1)
0000EBBE                            
0000EBBE                            loc_DA80:
0000EBBE 1280                       		move.b	d0,0(a1)
0000EBC0 1358 0028                  		move.b	(a0)+,$28(a1)
0000EBC4 7000                       		moveq	#0,d0
0000EBC6                            
0000EBC6                            locret_DA8A:
0000EBC6 4E75                       		rts	
0000EBC8                            ; ---------------------------------------------------------------------------
0000EBC8                            ; Single object	loading	subroutine
0000EBC8                            ; ---------------------------------------------------------------------------
0000EBC8                            
0000EBC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBC8                            
0000EBC8                            
0000EBC8                            SingleObjLoad:
0000EBC8 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000EBCC 303C 005F                  		move.w	#$5F,d0
0000EBD0                            
0000EBD0                            loc_DA94:
0000EBD0 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000EBD2 6700                       		beq.s	locret_DAA0	; if yes, branch
0000EBD4 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000EBD8 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000EBDC                            
0000EBDC                            locret_DAA0:
0000EBDC 4E75                       		rts	
0000EBDE                            ; End of function SingleObjLoad
0000EBDE                            
0000EBDE                            
0000EBDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EBDE                            
0000EBDE                            
0000EBDE                            SingleObjLoad2:
0000EBDE 2248                       		movea.l	a0,a1
0000EBE0 303C F000                  		move.w	#-$1000,d0
0000EBE4 9048                       		sub.w	a0,d0
0000EBE6 EC48                       		lsr.w	#6,d0
0000EBE8 5340                       		subq.w	#1,d0
0000EBEA 6500                       		bcs.s	locret_DABC
0000EBEC                            
0000EBEC                            loc_DAB0:
0000EBEC 4A11                       		tst.b	(a1)
0000EBEE 6700                       		beq.s	locret_DABC
0000EBF0 43E9 0040                  		lea	$40(a1),a1
0000EBF4 51C8 FFF6                  		dbf	d0,loc_DAB0
0000EBF8                            
0000EBF8                            locret_DABC:
0000EBF8 4E75                       		rts	
0000EBFA                            ; End of function SingleObjLoad2
0000EBFA                            
0000EBFA                            ; ===========================================================================
0000EBFA                            ; ---------------------------------------------------------------------------
0000EBFA                            ; Object 41 - springs
0000EBFA                            ; ---------------------------------------------------------------------------
0000EBFA                            
0000EBFA                            Obj41:					; XREF: Obj_Index
0000EBFA 7000                       		moveq	#0,d0
0000EBFC 1028 0024                  		move.b	$24(a0),d0
0000EC00 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000EC04 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000EC08 6100 FB38                  		bsr.w	DisplaySprite
0000EC0C 3028 0008                  		move.w	8(a0),d0
0000EC10 0240 FF80                  		andi.w	#$FF80,d0
0000EC14 3238 F700                  		move.w	($FFFFF700).w,d1
0000EC18 0441 0080                  		subi.w	#$80,d1
0000EC1C 0241 FF80                  		andi.w	#$FF80,d1
0000EC20 9041                       		sub.w	d1,d0
0000EC22 0C40 0280                  		cmpi.w	#$280,d0
0000EC26 6200 FB56                  		bhi.w	DeleteObject
0000EC2A 4E75                       		rts	
0000EC2C                            ; ===========================================================================
0000EC2C 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000EC2E 0000                       		dc.w Obj41_Up-Obj41_Index
0000EC30 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000EC32 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000EC34 0000                       		dc.w Obj41_LR-Obj41_Index
0000EC36 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000EC38 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000EC3A 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000EC3C 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000EC3E 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000EC40                            
0000EC40 F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000EC42 F600                       		dc.w -$A00		; power	of yellow spring
0000EC44                            ; ===========================================================================
0000EC44                            
0000EC44                            Obj41_Main:				; XREF: Obj41_Index
0000EC44 5428 0024                  		addq.b	#2,$24(a0)
0000EC48 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000EC50 317C 0523 0002             		move.w	#$523,2(a0)
0000EC56 0028 0004 0001             		ori.b	#4,1(a0)
0000EC5C 117C 0010 0019             		move.b	#$10,$19(a0)
0000EC62 117C 0004 0018             		move.b	#4,$18(a0)
0000EC68 1028 0028                  		move.b	$28(a0),d0
0000EC6C 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000EC70 6700                       		beq.s	loc_DB54	; if not, branch
0000EC72 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000EC78 117C 0001 001C             		move.b	#1,$1C(a0)
0000EC7E 117C 0003 001A             		move.b	#3,$1A(a0)
0000EC84 317C 0533 0002             		move.w	#$533,2(a0)
0000EC8A 117C 0008 0019             		move.b	#8,$19(a0)
0000EC90                            
0000EC90                            loc_DB54:
0000EC90 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000EC94 6700                       		beq.s	loc_DB66	; if not, branch
0000EC96 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000EC9C 08E8 0001 0022             		bset	#1,$22(a0)
0000ECA2                            
0000ECA2                            loc_DB66:
0000ECA2 0800 0001                  		btst	#1,d0
0000ECA6 6700                       		beq.s	loc_DB72
0000ECA8 08E8 0005 0002             		bset	#5,2(a0)
0000ECAE                            
0000ECAE                            loc_DB72:
0000ECAE 0240 000F                  		andi.w	#$F,d0
0000ECB2 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000ECB8 4E75                       		rts	
0000ECBA                            ; ===========================================================================
0000ECBA                            
0000ECBA                            Obj41_Up:				; XREF: Obj41_Index
0000ECBA 323C 001B                  		move.w	#$1B,d1
0000ECBE 343C 0008                  		move.w	#8,d2
0000ECC2 363C 0010                  		move.w	#$10,d3
0000ECC6 3828 0008                  		move.w	8(a0),d4
0000ECCA 6100 0000                  		bsr.w	SolidObject
0000ECCE 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000ECD2 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000ECD4 4E75                       		rts	
0000ECD6                            ; ===========================================================================
0000ECD6                            
0000ECD6                            Obj41_BounceUp:				; XREF: Obj41_Up
0000ECD6 5428 0024                  		addq.b	#2,$24(a0)
0000ECDA 5069 000C                  		addq.w	#8,$C(a1)
0000ECDE 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000ECE4 08E9 0001 0022             		bset	#1,$22(a1)
0000ECEA 08A9 0003 0022             		bclr	#3,$22(a1)
0000ECF0 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000ECF6 137C 0002 0024             		move.b	#2,$24(a1)
0000ECFC 08A8 0003 0022             		bclr	#3,$22(a0)
0000ED02 4228 0025                  		clr.b	$25(a0)
0000ED06 303C 00CC                  		move.w	#$CC,d0
0000ED0A 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play spring sound
0000ED10                            
0000ED10                            Obj41_AniUp:				; XREF: Obj41_Index
0000ED10 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000ED16 6000 CA78                  		bra.w	AnimateSprite
0000ED1A                            ; ===========================================================================
0000ED1A                            
0000ED1A                            Obj41_ResetUp:				; XREF: Obj41_Index
0000ED1A 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000ED20 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000ED24 4E75                       		rts	
0000ED26                            ; ===========================================================================
0000ED26                            
0000ED26                            Obj41_LR:				; XREF: Obj41_Index
0000ED26 323C 0013                  		move.w	#$13,d1
0000ED2A 343C 000E                  		move.w	#$E,d2
0000ED2E 363C 000F                  		move.w	#$F,d3
0000ED32 3828 0008                  		move.w	8(a0),d4
0000ED36 6100 0000                  		bsr.w	SolidObject
0000ED3A 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000ED40 6600                       		bne.s	loc_DC0C
0000ED42 117C 0008 0024             		move.b	#8,$24(a0)
0000ED48                            
0000ED48                            loc_DC0C:
0000ED48 0828 0005 0022             		btst	#5,$22(a0)
0000ED4E 6600                       		bne.s	Obj41_BounceLR
0000ED50 4E75                       		rts	
0000ED52                            ; ===========================================================================
0000ED52                            
0000ED52                            Obj41_BounceLR:				; XREF: Obj41_LR
0000ED52 5428 0024                  		addq.b	#2,$24(a0)
0000ED56 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000ED5C 5069 0008                  		addq.w	#8,8(a1)
0000ED60 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000ED66 6600                       		bne.s	loc_DC36	; if yes, branch
0000ED68 0469 0010 0008             		subi.w	#$10,8(a1)
0000ED6E 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000ED72                            
0000ED72                            loc_DC36:
0000ED72 337C 000F 003E             		move.w	#$F,$3E(a1)
0000ED78 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000ED7E 0869 0000 0022             		bchg	#0,$22(a1)
0000ED84 0829 0002 0022             		btst	#2,$22(a1)
0000ED8A 6600                       		bne.s	loc_DC56
0000ED8C 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000ED92                            
0000ED92                            loc_DC56:
0000ED92 08A8 0005 0022             		bclr	#5,$22(a0)
0000ED98 08A9 0005 0022             		bclr	#5,$22(a1)
0000ED9E 303C 00CC                  		move.w	#$CC,d0
0000EDA2 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play spring sound
0000EDA8                            
0000EDA8                            Obj41_AniLR:				; XREF: Obj41_Index
0000EDA8 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EDAE 6000 C9E0                  		bra.w	AnimateSprite
0000EDB2                            ; ===========================================================================
0000EDB2                            
0000EDB2                            Obj41_ResetLR:				; XREF: Obj41_Index
0000EDB2 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000EDB8 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000EDBC 4E75                       		rts	
0000EDBE                            ; ===========================================================================
0000EDBE                            
0000EDBE                            Obj41_Dwn:				; XREF: Obj41_Index
0000EDBE 323C 001B                  		move.w	#$1B,d1
0000EDC2 343C 0008                  		move.w	#8,d2
0000EDC6 363C 0010                  		move.w	#$10,d3
0000EDCA 3828 0008                  		move.w	8(a0),d4
0000EDCE 6100 0000                  		bsr.w	SolidObject
0000EDD2 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000EDD8 6600                       		bne.s	loc_DCA4
0000EDDA 117C 000E 0024             		move.b	#$E,$24(a0)
0000EDE0                            
0000EDE0                            loc_DCA4:
0000EDE0 4A28 0025                  		tst.b	$25(a0)
0000EDE4 6600                       		bne.s	locret_DCAE
0000EDE6 4A44                       		tst.w	d4
0000EDE8 6B00                       		bmi.s	Obj41_BounceDwn
0000EDEA                            
0000EDEA                            locret_DCAE:
0000EDEA 4E75                       		rts	
0000EDEC                            ; ===========================================================================
0000EDEC                            
0000EDEC                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000EDEC 5428 0024                  		addq.b	#2,$24(a0)
0000EDF0 5169 000C                  		subq.w	#8,$C(a1)
0000EDF4 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000EDFA 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000EDFE 08E9 0001 0022             		bset	#1,$22(a1)
0000EE04 08A9 0003 0022             		bclr	#3,$22(a1)
0000EE0A 137C 0002 0024             		move.b	#2,$24(a1)
0000EE10 08A8 0003 0022             		bclr	#3,$22(a0)
0000EE16 4228 0025                  		clr.b	$25(a0)
0000EE1A 303C 00CC                  		move.w	#$CC,d0
0000EE1E 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play spring sound
0000EE24                            
0000EE24                            Obj41_AniDwn:				; XREF: Obj41_Index
0000EE24 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000EE2A 6000 C964                  		bra.w	AnimateSprite
0000EE2E                            ; ===========================================================================
0000EE2E                            
0000EE2E                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000EE2E 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000EE34 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000EE38 4E75                       		rts	
0000EE3A                            ; ===========================================================================
0000EE3A                            Ani_obj41:
0000EE3A                            	include "_anim\obj41.asm"
0000EE3A                            ; ---------------------------------------------------------------------------
0000EE3A                            ; Animation script - springs
0000EE3A                            ; ---------------------------------------------------------------------------
0000EE3A 0000                       		dc.w byte_DD02-Ani_obj41
0000EE3C 0000                       		dc.w byte_DD0E-Ani_obj41
0000EE3E 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000EE4A 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000EE56                            		even
0000EE56                            		even
0000EE56                            
0000EE56                            ; ---------------------------------------------------------------------------
0000EE56                            ; Sprite mappings - springs
0000EE56                            ; ---------------------------------------------------------------------------
0000EE56                            Map_obj41:
0000EE56                            	include "_maps\obj41.asm"
0000EE56                            ; ---------------------------------------------------------------------------
0000EE56                            ; Sprite mappings - springs
0000EE56                            ; ---------------------------------------------------------------------------
0000EE56 0000                       		dc.w byte_DD26-Map_obj41
0000EE58 0000                       		dc.w byte_DD31-Map_obj41
0000EE5A 0000                       		dc.w byte_DD37-Map_obj41
0000EE5C 0000                       		dc.w byte_DD47-Map_obj41
0000EE5E 0000                       		dc.w byte_DD4D-Map_obj41
0000EE60 0000                       		dc.w byte_DD53-Map_obj41
0000EE62 02                         byte_DD26:	dc.b 2
0000EE63 F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000EE68 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000EE6D 01                         byte_DD31:	dc.b 1
0000EE6E 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000EE73 03                         byte_DD37:	dc.b 3
0000EE74 E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000EE79 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000EE7E 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000EE83 01                         byte_DD47:	dc.b 1
0000EE84 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000EE89 01                         byte_DD4D:	dc.b 1
0000EE8A F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000EE8F 04                         byte_DD53:	dc.b 4
0000EE90 F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000EE95 F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000EE9A F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000EE9F 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000EEA4                            		even
0000EEA4                            		even
0000EEA4                            
0000EEA4                            ; ===========================================================================
0000EEA4                            ; ---------------------------------------------------------------------------
0000EEA4                            ; Object 42 - Newtron enemy (GHZ)
0000EEA4                            ; ---------------------------------------------------------------------------
0000EEA4                            
0000EEA4                            Obj42:					; XREF: Obj_Index
0000EEA4 7000                       		moveq	#0,d0
0000EEA6 1028 0024                  		move.b	$24(a0),d0
0000EEAA 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000EEAE 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000EEB2                            ; ===========================================================================
0000EEB2 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000EEB4 0000                       		dc.w Obj42_Action-Obj42_Index
0000EEB6 0000                       		dc.w Obj42_Delete-Obj42_Index
0000EEB8                            ; ===========================================================================
0000EEB8                            
0000EEB8                            Obj42_Main:				; XREF: Obj42_Index
0000EEB8 5428 0024                  		addq.b	#2,$24(a0)
0000EEBC 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000EEC4 317C 049B 0002             		move.w	#$49B,2(a0)
0000EECA 117C 0004 0001             		move.b	#4,1(a0)
0000EED0 117C 0004 0018             		move.b	#4,$18(a0)
0000EED6 117C 0014 0019             		move.b	#$14,$19(a0)
0000EEDC 117C 0010 0016             		move.b	#$10,$16(a0)
0000EEE2 117C 0008 0017             		move.b	#8,$17(a0)
0000EEE8                            
0000EEE8                            Obj42_Action:				; XREF: Obj42_Index
0000EEE8 7000                       		moveq	#0,d0
0000EEEA 1028 0025                  		move.b	$25(a0),d0
0000EEEE 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000EEF2 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000EEF6 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000EEFC 6100 C892                  		bsr.w	AnimateSprite
0000EF00 6000 0000                  		bra.w	MarkObjGone
0000EF04                            ; ===========================================================================
0000EF04 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000EF06 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000EF08 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000EF0A 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000EF0C 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000EF0E                            ; ===========================================================================
0000EF0E                            
0000EF0E                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000EF0E 08E8 0000 0022             		bset	#0,$22(a0)
0000EF14 3038 D008                  		move.w	($FFFFD008).w,d0
0000EF18 9068 0008                  		sub.w	8(a0),d0
0000EF1C 6400                       		bcc.s	loc_DDEA
0000EF1E 4440                       		neg.w	d0
0000EF20 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF26                            
0000EF26                            loc_DDEA:
0000EF26 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000EF2A 6400                       		bcc.s	locret_DE12	; if not, branch
0000EF2C 5428 0025                  		addq.b	#2,$25(a0)
0000EF30 117C 0001 001C             		move.b	#1,$1C(a0)
0000EF36 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000EF3A 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000EF3C 317C 249B 0002             		move.w	#$249B,2(a0)
0000EF42 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000EF48 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000EF4E                            
0000EF4E                            locret_DE12:
0000EF4E 4E75                       		rts	
0000EF50                            ; ===========================================================================
0000EF50                            
0000EF50                            Obj42_Type00:				; XREF: Obj42_Index2
0000EF50 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000EF56 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000EF58 08E8 0000 0022             		bset	#0,$22(a0)
0000EF5E 3038 D008                  		move.w	($FFFFD008).w,d0
0000EF62 9068 0008                  		sub.w	8(a0),d0
0000EF66 6400                       		bcc.s	locret_DE32
0000EF68 08A8 0000 0022             		bclr	#0,$22(a0)
0000EF6E                            
0000EF6E                            locret_DE32:
0000EF6E 4E75                       		rts	
0000EF70                            ; ===========================================================================
0000EF70                            
0000EF70                            Obj42_Fall:				; XREF: Obj42_Type00
0000EF70 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EF76 6600                       		bne.s	loc_DE42
0000EF78 117C 000C 0020             		move.b	#$C,$20(a0)
0000EF7E                            
0000EF7E                            loc_DE42:
0000EF7E 6100 F72A                  		bsr.w	ObjectFall
0000EF82 6100 0000                  		bsr.w	ObjHitFloor
0000EF86 4A41                       		tst.w	d1		; has newtron hit the floor?
0000EF88 6A00                       		bpl.s	locret_DE86	; if not, branch
0000EF8A D368 000C                  		add.w	d1,$C(a0)
0000EF8E 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000EF94 5428 0025                  		addq.b	#2,$25(a0)
0000EF98 117C 0002 001C             		move.b	#2,$1C(a0)
0000EF9E 0828 0005 0002             		btst	#5,2(a0)
0000EFA4 6700                       		beq.s	Obj42_Move
0000EFA6 5228 001C                  		addq.b	#1,$1C(a0)
0000EFAA                            
0000EFAA                            Obj42_Move:
0000EFAA 117C 000D 0020             		move.b	#$D,$20(a0)
0000EFB0 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000EFB6 0828 0000 0022             		btst	#0,$22(a0)
0000EFBC 6600                       		bne.s	locret_DE86
0000EFBE 4468 0010                  		neg.w	$10(a0)
0000EFC2                            
0000EFC2                            locret_DE86:
0000EFC2 4E75                       		rts	
0000EFC4                            ; ===========================================================================
0000EFC4                            
0000EFC4                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000EFC4 6100 F756                  		bsr.w	SpeedToPos
0000EFC8 6100 0000                  		bsr.w	ObjHitFloor
0000EFCC 0C41 FFF8                  		cmpi.w	#-8,d1
0000EFD0 6D00                       		blt.s	loc_DEA2
0000EFD2 0C41 000C                  		cmpi.w	#$C,d1
0000EFD6 6C00                       		bge.s	loc_DEA2
0000EFD8 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000EFDC 4E75                       		rts	
0000EFDE                            ; ===========================================================================
0000EFDE                            
0000EFDE                            loc_DEA2:
0000EFDE 5428 0025                  		addq.b	#2,$25(a0)
0000EFE2 4E75                       		rts	
0000EFE4                            ; ===========================================================================
0000EFE4                            
0000EFE4                            Obj42_Speed:				; XREF: Obj42_Index2
0000EFE4 6100 F736                  		bsr.w	SpeedToPos
0000EFE8 4E75                       		rts	
0000EFEA                            ; ===========================================================================
0000EFEA                            
0000EFEA                            Obj42_Type01:				; XREF: Obj42_Index2
0000EFEA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000EFF0 6600                       		bne.s	Obj42_FireMissile
0000EFF2 117C 000C 0020             		move.b	#$C,$20(a0)
0000EFF8                            
0000EFF8                            Obj42_FireMissile:
0000EFF8 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000EFFE 6600                       		bne.s	locret_DF14
0000F000 4A28 0032                  		tst.b	$32(a0)
0000F004 6600                       		bne.s	locret_DF14
0000F006 117C 0001 0032             		move.b	#1,$32(a0)
0000F00C 6100 FBBA                  		bsr.w	SingleObjLoad
0000F010 6600                       		bne.s	locret_DF14
0000F012 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000F016 3368 0008 0008             		move.w	8(a0),8(a1)
0000F01C 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F022 5169 000C                  		subq.w	#8,$C(a1)
0000F026 337C 0200 0010             		move.w	#$200,$10(a1)
0000F02C 303C 0014                  		move.w	#$14,d0
0000F030 0828 0000 0022             		btst	#0,$22(a0)
0000F036 6600                       		bne.s	loc_DF04
0000F038 4440                       		neg.w	d0
0000F03A 4469 0010                  		neg.w	$10(a1)
0000F03E                            
0000F03E                            loc_DF04:
0000F03E D169 0008                  		add.w	d0,8(a1)
0000F042 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F048 137C 0001 0028             		move.b	#1,$28(a1)
0000F04E                            
0000F04E                            locret_DF14:
0000F04E 4E75                       		rts	
0000F050                            ; ===========================================================================
0000F050                            
0000F050                            Obj42_Delete:				; XREF: Obj42_Index
0000F050 6000 F72C                  		bra.w	DeleteObject
0000F054                            ; ===========================================================================
0000F054                            Ani_obj42:
0000F054                            	include "_anim\obj42.asm"
0000F054                            ; ---------------------------------------------------------------------------
0000F054                            ; Animation script - Newtron enemy
0000F054                            ; ---------------------------------------------------------------------------
0000F054 0000                       		dc.w byte_DF24-Ani_obj42
0000F056 0000                       		dc.w byte_DF28-Ani_obj42
0000F058 0000                       		dc.w byte_DF30-Ani_obj42
0000F05A 0000                       		dc.w byte_DF34-Ani_obj42
0000F05C 0000                       		dc.w byte_DF38-Ani_obj42
0000F05E 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000F062 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000F06A 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000F06E 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000F072 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000F07C                            		even
0000F07C                            		even
0000F07C                            
0000F07C                            ; ---------------------------------------------------------------------------
0000F07C                            ; Sprite mappings - Newtron enemy (GHZ)
0000F07C                            ; ---------------------------------------------------------------------------
0000F07C                            Map_obj42:
0000F07C                            	include "_maps\obj42.asm"
0000F07C                            ; ---------------------------------------------------------------------------
0000F07C                            ; Sprite mappings - Newtron enemy (GHZ)
0000F07C                            ; ---------------------------------------------------------------------------
0000F07C 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000F080 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000F084 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000F088 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000F08C 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000F090 0000                       		dc.w byte_DFF8-Map_obj42
0000F092 03                         byte_DF58:	dc.b 3
0000F093 EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000F098 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000F09D FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000F0A2 03                         byte_DF68:	dc.b 3
0000F0A3 EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000F0A8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0AD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F0B2 03                         byte_DF78:	dc.b 3
0000F0B3 EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000F0B8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0BD FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000F0C2 04                         byte_DF88:	dc.b 4
0000F0C3 EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000F0C8 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000F0CD FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000F0D2 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000F0D7 03                         byte_DF9D:	dc.b 3
0000F0D8 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000F0DD FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000F0E2 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000F0E7 02                         byte_DFAD:	dc.b 2
0000F0E8 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F0ED F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F0F2 03                         byte_DFB8:	dc.b 3
0000F0F3 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F0F8 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F0FD FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000F102 03                         byte_DFC8:	dc.b 3
0000F103 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F108 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F10D FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000F112 03                         byte_DFD8:	dc.b 3
0000F113 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F118 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F11D FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000F122 03                         byte_DFE8:	dc.b 3
0000F123 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000F128 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000F12D FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000F132 00                         byte_DFF8:	dc.b 0
0000F134 00                         		even
0000F134 00                         		even
0000F134                            
0000F134                            ; ===========================================================================
0000F134                            ; ---------------------------------------------------------------------------
0000F134                            ; Object 43 - Roller enemy (SYZ)
0000F134                            ; ---------------------------------------------------------------------------
0000F134                            
0000F134                            Obj43:					; XREF: Obj_Index
0000F134 7000                       		moveq	#0,d0
0000F136 1028 0024                  		move.b	$24(a0),d0
0000F13A 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000F13E 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000F142                            ; ===========================================================================
0000F142 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000F144 0000                       		dc.w Obj43_Action-Obj43_Index
0000F146                            ; ===========================================================================
0000F146                            
0000F146                            Obj43_Main:				; XREF: Obj43_Index
0000F146 117C 000E 0016             		move.b	#$E,$16(a0)
0000F14C 117C 0008 0017             		move.b	#8,$17(a0)
0000F152 6100 F556                  		bsr.w	ObjectFall
0000F156 6100 0000                  		bsr.w	ObjHitFloor
0000F15A 4A41                       		tst.w	d1
0000F15C 6A00                       		bpl.s	locret_E052
0000F15E D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000F162 317C 0000 0012             		move.w	#0,$12(a0)
0000F168 5428 0024                  		addq.b	#2,$24(a0)
0000F16C 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000F174 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000F17A 117C 0004 0001             		move.b	#4,1(a0)
0000F180 117C 0004 0018             		move.b	#4,$18(a0)
0000F186 117C 0010 0019             		move.b	#$10,$19(a0)
0000F18C                            
0000F18C                            locret_E052:
0000F18C 4E75                       		rts	
0000F18E                            ; ===========================================================================
0000F18E                            
0000F18E                            Obj43_Action:				; XREF: Obj43_Index
0000F18E 7000                       		moveq	#0,d0
0000F190 1028 0025                  		move.b	$25(a0),d0
0000F194 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000F198 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000F19C 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000F1A2 6100 C5EC                  		bsr.w	AnimateSprite
0000F1A6 3028 0008                  		move.w	8(a0),d0
0000F1AA 0240 FF80                  		andi.w	#$FF80,d0
0000F1AE 3238 F700                  		move.w	($FFFFF700).w,d1
0000F1B2 0441 0080                  		subi.w	#$80,d1
0000F1B6 0241 FF80                  		andi.w	#$FF80,d1
0000F1BA 9041                       		sub.w	d1,d0
0000F1BC 0C40 0280                  		cmpi.w	#$280,d0
0000F1C0 6E00 0000                  		bgt.w	Obj43_ChkGone
0000F1C4 6000 F57C                  		bra.w	DisplaySprite
0000F1C8                            ; ===========================================================================
0000F1C8                            
0000F1C8                            Obj43_ChkGone:				; XREF: Obj43_Action
0000F1C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F1CC 7000                       		moveq	#0,d0
0000F1CE 1028 0023                  		move.b	$23(a0),d0
0000F1D2 6700                       		beq.s	Obj43_Delete
0000F1D4 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F1DA                            
0000F1DA                            Obj43_Delete:
0000F1DA 6000 F5A2                  		bra.w	DeleteObject
0000F1DE                            ; ===========================================================================
0000F1DE 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000F1E0 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000F1E2 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000F1E4 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000F1E6                            ; ===========================================================================
0000F1E6                            
0000F1E6                            Obj43_RollChk:				; XREF: Obj43_Index2
0000F1E6 3038 D008                  		move.w	($FFFFD008).w,d0
0000F1EA 0440 0100                  		subi.w	#$100,d0
0000F1EE 6500                       		bcs.s	loc_E0D2
0000F1F0 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000F1F4 6500                       		bcs.s	loc_E0D2
0000F1F6 5828 0025                  		addq.b	#4,$25(a0)
0000F1FA 117C 0002 001C             		move.b	#2,$1C(a0)
0000F200 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000F206 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000F20C                            
0000F20C                            loc_E0D2:
0000F20C 588F                       		addq.l	#4,sp
0000F20E 4E75                       		rts	
0000F210                            ; ===========================================================================
0000F210                            
0000F210                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000F210 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000F216 6700                       		beq.s	loc_E0F8
0000F218 5368 0030                  		subq.w	#1,$30(a0)
0000F21C 6A00                       		bpl.s	locret_E0F6
0000F21E 117C 0001 001C             		move.b	#1,$1C(a0)
0000F224 317C 0700 0010             		move.w	#$700,$10(a0)
0000F22A 117C 008E 0020             		move.b	#$8E,$20(a0)
0000F230                            
0000F230                            locret_E0F6:
0000F230 4E75                       		rts	
0000F232                            ; ===========================================================================
0000F232                            
0000F232                            loc_E0F8:
0000F232 5428 0025                  		addq.b	#2,$25(a0)
0000F236 4E75                       		rts	
0000F238                            ; ===========================================================================
0000F238                            
0000F238                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000F238 6100 0000                  		bsr.w	Obj43_Stop
0000F23C 6100 F4DE                  		bsr.w	SpeedToPos
0000F240 6100 0000                  		bsr.w	ObjHitFloor
0000F244 0C41 FFF8                  		cmpi.w	#-8,d1
0000F248 6D00                       		blt.s	Obj43_Jump
0000F24A 0C41 000C                  		cmpi.w	#$C,d1
0000F24E 6C00                       		bge.s	Obj43_Jump
0000F250 D368 000C                  		add.w	d1,$C(a0)
0000F254 4E75                       		rts	
0000F256                            ; ===========================================================================
0000F256                            
0000F256                            Obj43_Jump:
0000F256 5428 0025                  		addq.b	#2,$25(a0)
0000F25A 08E8 0000 0032             		bset	#0,$32(a0)
0000F260 6700                       		beq.s	locret_E12E
0000F262 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000F268                            
0000F268                            locret_E12E:
0000F268 4E75                       		rts	
0000F26A                            ; ===========================================================================
0000F26A                            
0000F26A                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000F26A 6100 F43E                  		bsr.w	ObjectFall
0000F26E 4A68 0012                  		tst.w	$12(a0)
0000F272 6B00                       		bmi.s	locret_E150
0000F274 6100 0000                  		bsr.w	ObjHitFloor
0000F278 4A41                       		tst.w	d1
0000F27A 6A00                       		bpl.s	locret_E150
0000F27C D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000F280 5528 0025                  		subq.b	#2,$25(a0)
0000F284 317C 0000 0012             		move.w	#0,$12(a0)
0000F28A                            
0000F28A                            locret_E150:
0000F28A 4E75                       		rts	
0000F28C                            
0000F28C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F28C                            
0000F28C                            
0000F28C                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000F28C 4A28 0032                  		tst.b	$32(a0)
0000F290 6B00                       		bmi.s	locret_E188
0000F292 3038 D008                  		move.w	($FFFFD008).w,d0
0000F296 0440 0030                  		subi.w	#$30,d0
0000F29A 9068 0008                  		sub.w	8(a0),d0
0000F29E 6400                       		bcc.s	locret_E188
0000F2A0 117C 0000 001C             		move.b	#0,$1C(a0)
0000F2A6 117C 000E 0020             		move.b	#$E,$20(a0)
0000F2AC 4268 0010                  		clr.w	$10(a0)
0000F2B0 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000F2B6 117C 0002 0025             		move.b	#2,$25(a0)
0000F2BC 08E8 0007 0032             		bset	#7,$32(a0)
0000F2C2                            
0000F2C2                            locret_E188:
0000F2C2 4E75                       		rts	
0000F2C4                            ; End of function Obj43_Stop
0000F2C4                            
0000F2C4                            ; ===========================================================================
0000F2C4                            Ani_obj43:
0000F2C4                            	include "_anim\obj43.asm"
0000F2C4                            ; ---------------------------------------------------------------------------
0000F2C4                            ; Animation script - Roller enemy
0000F2C4                            ; ---------------------------------------------------------------------------
0000F2C4 0000                       		dc.w byte_E190-Ani_obj43
0000F2C6 0000                       		dc.w byte_E196-Ani_obj43
0000F2C8 0000                       		dc.w byte_E19C-Ani_obj43
0000F2CA 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000F2D0 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000F2D6 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000F2DC 00                         		even
0000F2DC 00                         		even
0000F2DC                            
0000F2DC                            ; ---------------------------------------------------------------------------
0000F2DC                            ; Sprite mappings - Roller enemy (SYZ)
0000F2DC                            ; ---------------------------------------------------------------------------
0000F2DC                            Map_obj43:
0000F2DC                            	include "_maps\obj43.asm"
0000F2DC                            Map_61da:
0000F2DC 0000                       Map_61da_0: 	dc.w Map_61da_A-Map_61da
0000F2DE 0000                       Map_61da_2: 	dc.w Map_61da_15-Map_61da
0000F2E0 0000                       Map_61da_4: 	dc.w Map_61da_20-Map_61da
0000F2E2 0000                       Map_61da_6: 	dc.w Map_61da_26-Map_61da
0000F2E4 0000                       Map_61da_8: 	dc.w Map_61da_2C-Map_61da
0000F2E6 02                         Map_61da_A: 	dc.b $2
0000F2E7 DE0E 0000 F0               	dc.b $DE, $E, $0, $0, $F0
0000F2EC F60E 000C F0               	dc.b $F6, $E, $0, $C, $F0
0000F2F1 02                         Map_61da_15: 	dc.b $2
0000F2F2 E60E 0000 F0               	dc.b $E6, $E, $0, $0, $F0
0000F2F7 FE0D 0018 F0               	dc.b $FE, $D, $0, $18, $F0
0000F2FC 01                         Map_61da_20: 	dc.b $1
0000F2FD F00F 0020 F0               	dc.b $F0, $F, $0, $20, $F0
0000F302 01                         Map_61da_26: 	dc.b $1
0000F303 F00F 0030 F0               	dc.b $F0, $F, $0, $30, $F0
0000F308 01                         Map_61da_2C: 	dc.b $1
0000F309 F00F 0040 F0               	dc.b $F0, $F, $0, $40, $F0
0000F30E                            	even
0000F30E                            	even
0000F30E                            
0000F30E                            ; ===========================================================================
0000F30E                            ; ---------------------------------------------------------------------------
0000F30E                            ; Object 44 - walls (GHZ)
0000F30E                            ; ---------------------------------------------------------------------------
0000F30E                            
0000F30E                            Obj44:					; XREF: Obj_Index
0000F30E 7000                       		moveq	#0,d0
0000F310 1028 0024                  		move.b	$24(a0),d0
0000F314 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000F318 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000F31C                            ; ===========================================================================
0000F31C 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000F31E 0000                       		dc.w Obj44_Solid-Obj44_Index
0000F320 0000                       		dc.w Obj44_Display-Obj44_Index
0000F322                            ; ===========================================================================
0000F322                            
0000F322                            Obj44_Main:				; XREF: Obj44_Index
0000F322 5428 0024                  		addq.b	#2,$24(a0)
0000F326 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000F32E 317C 434C 0002             		move.w	#$434C,2(a0)
0000F334 0028 0004 0001             		ori.b	#4,1(a0)
0000F33A 117C 0008 0019             		move.b	#8,$19(a0)
0000F340 117C 0006 0018             		move.b	#6,$18(a0)
0000F346 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000F34C 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000F352 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000F354 5428 0024                  		addq.b	#2,$24(a0)
0000F358 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000F35A                            ; ===========================================================================
0000F35A                            
0000F35A                            Obj44_Solid:				; XREF: Obj44_Index
0000F35A 323C 0013                  		move.w	#$13,d1
0000F35E 343C 0028                  		move.w	#$28,d2
0000F362 6100 A684                  		bsr.w	Obj44_SolidWall
0000F366                            
0000F366                            Obj44_Display:				; XREF: Obj44_Index
0000F366 6100 F3DA                  		bsr.w	DisplaySprite
0000F36A 3028 0008                  		move.w	8(a0),d0
0000F36E 0240 FF80                  		andi.w	#$FF80,d0
0000F372 3238 F700                  		move.w	($FFFFF700).w,d1
0000F376 0441 0080                  		subi.w	#$80,d1
0000F37A 0241 FF80                  		andi.w	#$FF80,d1
0000F37E 9041                       		sub.w	d1,d0
0000F380 0C40 0280                  		cmpi.w	#$280,d0
0000F384 6200 F3F8                  		bhi.w	DeleteObject
0000F388 4E75                       		rts	
0000F38A                            ; ===========================================================================
0000F38A                            ; ---------------------------------------------------------------------------
0000F38A                            ; Sprite mappings - walls (GHZ)
0000F38A                            ; ---------------------------------------------------------------------------
0000F38A                            Map_obj44:
0000F38A                            	include "_maps\obj44.asm"
0000F38A                            ; ---------------------------------------------------------------------------
0000F38A                            ; Sprite mappings - walls (GHZ)
0000F38A                            ; ---------------------------------------------------------------------------
0000F38A 0000                       		dc.w byte_E256-Map_obj44
0000F38C 0000                       		dc.w byte_E26B-Map_obj44
0000F38E 0000                       		dc.w byte_E280-Map_obj44
0000F390 04                         byte_E256:	dc.b 4
0000F391 E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000F396 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F39B 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F3A0 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F3A5 04                         byte_E26B:	dc.b 4
0000F3A6 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000F3AB F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000F3B0 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000F3B5 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000F3BA 04                         byte_E280:	dc.b 4
0000F3BB E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000F3C0 F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000F3C5 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000F3CA 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000F3D0 00                         		even
0000F3D0 00                         		even
0000F3D0                            
0000F3D0                            ; ===========================================================================
0000F3D0                            ; ---------------------------------------------------------------------------
0000F3D0                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000F3D0                            ; ---------------------------------------------------------------------------
0000F3D0                            
0000F3D0                            Obj13:					; XREF: Obj_Index
0000F3D0 7000                       		moveq	#0,d0
0000F3D2 1028 0024                  		move.b	$24(a0),d0
0000F3D6 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000F3DA 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000F3DE 6000 0000                  		bra.w	Obj14_ChkDel
0000F3E2                            ; ===========================================================================
0000F3E2 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000F3E4 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000F3E6                            ; ---------------------------------------------------------------------------
0000F3E6                            ;
0000F3E6                            ; Lava ball production rates
0000F3E6                            ;
0000F3E6 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000F3EC                            ; ===========================================================================
0000F3EC                            
0000F3EC                            Obj13_Main:				; XREF: Obj13_Index
0000F3EC 5428 0024                  		addq.b	#2,$24(a0)
0000F3F0 1028 0028                  		move.b	$28(a0),d0
0000F3F4 E848                       		lsr.w	#4,d0
0000F3F6 0240 000F                  		andi.w	#$F,d0
0000F3FA 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000F400 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000F406 0228 000F 0028             		andi.b	#$F,$28(a0)
0000F40C                            
0000F40C                            Obj13_MakeLava:				; XREF: Obj13_Index
0000F40C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000F410 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000F412 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000F418 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000F41C 6600                       		bne.s	locret_E302
0000F41E 6100 F7A8                  		bsr.w	SingleObjLoad
0000F422 6600                       		bne.s	locret_E302
0000F424 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000F428 3368 0008 0008             		move.w	8(a0),8(a1)
0000F42E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F434 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000F43A                            
0000F43A                            locret_E302:
0000F43A 4E75                       		rts	
0000F43C                            ; ===========================================================================
0000F43C                            ; ---------------------------------------------------------------------------
0000F43C                            ; Object 14 - lava balls (MZ, SLZ)
0000F43C                            ; ---------------------------------------------------------------------------
0000F43C                            
0000F43C                            Obj14:					; XREF: Obj_Index
0000F43C 7000                       		moveq	#0,d0
0000F43E 1028 0024                  		move.b	$24(a0),d0
0000F442 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000F446 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000F44A 6000 F2F6                  		bra.w	DisplaySprite
0000F44E                            ; ===========================================================================
0000F44E 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000F450 0000                       		dc.w Obj14_Action-Obj14_Index
0000F452 0000                       		dc.w Obj14_Delete-Obj14_Index
0000F454                            
0000F454 FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000F45E 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000F466                            ; ===========================================================================
0000F466                            
0000F466                            Obj14_Main:				; XREF: Obj14_Index
0000F466 5428 0024                  		addq.b	#2,$24(a0)
0000F46A 117C 0008 0016             		move.b	#8,$16(a0)
0000F470 117C 0008 0017             		move.b	#8,$17(a0)
0000F476 217C 0000 C38E 0004        		move.l	#Map_obj14,4(a0)
0000F47E 317C 0345 0002             		move.w	#$345,2(a0)
0000F484 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000F48A 6600                       		bne.s	loc_E35A
0000F48C 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000F492                            
0000F492                            loc_E35A:
0000F492 117C 0004 0001             		move.b	#4,1(a0)
0000F498 117C 0003 0018             		move.b	#3,$18(a0)
0000F49E 117C 008B 0020             		move.b	#$8B,$20(a0)
0000F4A4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F4AA 4A28 0029                  		tst.b	$29(a0)
0000F4AE 6700                       		beq.s	Obj14_SetSpeed
0000F4B0 5428 0018                  		addq.b	#2,$18(a0)
0000F4B4                            
0000F4B4                            Obj14_SetSpeed:
0000F4B4 7000                       		moveq	#0,d0
0000F4B6 1028 0028                  		move.b	$28(a0),d0
0000F4BA D040                       		add.w	d0,d0
0000F4BC 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000F4C2 117C 0008 0019             		move.b	#8,$19(a0)
0000F4C8 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000F4CE 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000F4D0 117C 0010 0019             		move.b	#$10,$19(a0)
0000F4D6 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000F4DC 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000F4E2 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000F4E8                            
0000F4E8                            Obj14_PlaySnd:
0000F4E8 303C 00AE                  		move.w	#$AE,d0
0000F4EC 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000F4F2                            
0000F4F2                            Obj14_Action:				; XREF: Obj14_Index
0000F4F2 7000                       		moveq	#0,d0
0000F4F4 1028 0028                  		move.b	$28(a0),d0
0000F4F8 D040                       		add.w	d0,d0
0000F4FA 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000F4FE 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000F502 6100 F218                  		bsr.w	SpeedToPos
0000F506 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000F50C 6100 C282                  		bsr.w	AnimateSprite
0000F510                            
0000F510                            Obj14_ChkDel:				; XREF: Obj13
0000F510 3028 0008                  		move.w	8(a0),d0
0000F514 0240 FF80                  		andi.w	#$FF80,d0
0000F518 3238 F700                  		move.w	($FFFFF700).w,d1
0000F51C 0441 0080                  		subi.w	#$80,d1
0000F520 0241 FF80                  		andi.w	#$FF80,d1
0000F524 9041                       		sub.w	d1,d0
0000F526 0C40 0280                  		cmpi.w	#$280,d0
0000F52A 6200 F252                  		bhi.w	DeleteObject
0000F52E 4E75                       		rts	
0000F530                            ; ===========================================================================
0000F530 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F534 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000F538 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000F53C 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000F540 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000F542                            ; ===========================================================================
0000F542                            ; lavaball types 00-03 fly up and fall back down
0000F542                            
0000F542                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000F542 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000F548 3028 0030                  		move.w	$30(a0),d0
0000F54C B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000F550 6400                       		bcc.s	loc_E41E	; if not, branch
0000F552 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000F556                            
0000F556                            loc_E41E:
0000F556 08A8 0001 0022             		bclr	#1,$22(a0)
0000F55C 4A68 0012                  		tst.w	$12(a0)
0000F560 6A00                       		bpl.s	locret_E430
0000F562 08E8 0001 0022             		bset	#1,$22(a0)
0000F568                            
0000F568                            locret_E430:
0000F568 4E75                       		rts	
0000F56A                            ; ===========================================================================
0000F56A                            ; lavaball type	04 flies up until it hits the ceiling
0000F56A                            
0000F56A                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000F56A 08E8 0001 0022             		bset	#1,$22(a0)
0000F570 6100 0000                  		bsr.w	ObjHitCeiling
0000F574 4A41                       		tst.w	d1
0000F576 6A00                       		bpl.s	locret_E452
0000F578 117C 0008 0028             		move.b	#8,$28(a0)
0000F57E 117C 0001 001C             		move.b	#1,$1C(a0)
0000F584 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000F58A                            
0000F58A                            locret_E452:
0000F58A 4E75                       		rts	
0000F58C                            ; ===========================================================================
0000F58C                            ; lavaball type	05 falls down until it hits the	floor
0000F58C                            
0000F58C                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000F58C 08A8 0001 0022             		bclr	#1,$22(a0)
0000F592 6100 0000                  		bsr.w	ObjHitFloor
0000F596 4A41                       		tst.w	d1
0000F598 6A00                       		bpl.s	locret_E474
0000F59A 117C 0008 0028             		move.b	#8,$28(a0)
0000F5A0 117C 0001 001C             		move.b	#1,$1C(a0)
0000F5A6 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000F5AC                            
0000F5AC                            locret_E474:
0000F5AC 4E75                       		rts	
0000F5AE                            ; ===========================================================================
0000F5AE                            ; lavaball types 06-07 move sideways
0000F5AE                            
0000F5AE                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000F5AE 08E8 0000 0022             		bset	#0,$22(a0)
0000F5B4 76F8                       		moveq	#-8,d3
0000F5B6 6100 0000                  		bsr.w	ObjHitWallLeft
0000F5BA 4A41                       		tst.w	d1
0000F5BC 6A00                       		bpl.s	locret_E498
0000F5BE 117C 0008 0028             		move.b	#8,$28(a0)
0000F5C4 117C 0003 001C             		move.b	#3,$1C(a0)
0000F5CA 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F5D0                            
0000F5D0                            locret_E498:
0000F5D0 4E75                       		rts	
0000F5D2                            ; ===========================================================================
0000F5D2                            
0000F5D2                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000F5D2 08A8 0000 0022             		bclr	#0,$22(a0)
0000F5D8 7608                       		moveq	#8,d3
0000F5DA 6100 0000                  		bsr.w	ObjHitWallRight
0000F5DE 4A41                       		tst.w	d1
0000F5E0 6A00                       		bpl.s	locret_E4BC
0000F5E2 117C 0008 0028             		move.b	#8,$28(a0)
0000F5E8 117C 0003 001C             		move.b	#3,$1C(a0)
0000F5EE 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000F5F4                            
0000F5F4                            locret_E4BC:
0000F5F4 4E75                       		rts	
0000F5F6                            ; ===========================================================================
0000F5F6                            
0000F5F6                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000F5F6 4E75                       		rts	
0000F5F8                            ; ===========================================================================
0000F5F8                            
0000F5F8                            Obj14_Delete:				; XREF: Obj14_Index
0000F5F8 6000 F184                  		bra.w	DeleteObject
0000F5FC                            ; ===========================================================================
0000F5FC                            Ani_obj14:
0000F5FC                            	include "_anim\obj14.asm"
0000F5FC                            ; ---------------------------------------------------------------------------
0000F5FC                            ; Animation script - lava balls
0000F5FC                            ; ---------------------------------------------------------------------------
0000F5FC 0000                       		dc.w byte_E4CC-Ani_obj14
0000F5FE 0000                       		dc.w byte_E4D2-Ani_obj14
0000F600 0000                       		dc.w byte_E4D6-Ani_obj14
0000F602 0000                       		dc.w byte_E4DC-Ani_obj14
0000F604 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000F60A 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000F60E 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000F614 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000F618                            		even
0000F618                            		even
0000F618                            
0000F618                            ; ===========================================================================
0000F618                            ; ---------------------------------------------------------------------------
0000F618                            ; Object 6D - flame thrower (SBZ)
0000F618                            ; ---------------------------------------------------------------------------
0000F618                            
0000F618                            Obj6D:					; XREF: Obj_Index
0000F618 7000                       		moveq	#0,d0
0000F61A 1028 0024                  		move.b	$24(a0),d0
0000F61E 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000F622 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000F626                            ; ===========================================================================
0000F626 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000F628 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000F62A                            ; ===========================================================================
0000F62A                            
0000F62A                            Obj6D_Main:				; XREF: Obj6D_Index
0000F62A 5428 0024                  		addq.b	#2,$24(a0)
0000F62E 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000F636 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000F63C 0028 0004 0001             		ori.b	#4,1(a0)
0000F642 117C 0001 0018             		move.b	#1,$18(a0)
0000F648 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F64E 117C 000C 0019             		move.b	#$C,$19(a0)
0000F654 1028 0028                  		move.b	$28(a0),d0
0000F658 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000F65C D040                       		add.w	d0,d0		; multiply by 2
0000F65E 3140 0030                  		move.w	d0,$30(a0)
0000F662 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000F666 1028 0028                  		move.b	$28(a0),d0
0000F66A 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000F66E EB48                       		lsl.w	#5,d0		; multiply by $20
0000F670 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000F674 117C 000A 0036             		move.b	#$A,$36(a0)
0000F67A 0828 0001 0022             		btst	#1,$22(a0)
0000F680 6700                       		beq.s	Obj6D_Action
0000F682 117C 0002 001C             		move.b	#2,$1C(a0)
0000F688 117C 0015 0036             		move.b	#$15,$36(a0)
0000F68E                            
0000F68E                            Obj6D_Action:				; XREF: Obj6D_Index
0000F68E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000F692 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000F694 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000F69A 0868 0000 001C             		bchg	#0,$1C(a0)
0000F6A0 6700                       		beq.s	loc_E57A
0000F6A2 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000F6A8 303C 00B3                  		move.w	#$B3,d0
0000F6AC 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play flame sound
0000F6B2                            
0000F6B2                            loc_E57A:
0000F6B2 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000F6B8 6100 C0D6                  		bsr.w	AnimateSprite
0000F6BC 117C 0000 0020             		move.b	#0,$20(a0)
0000F6C2 1028 0036                  		move.b	$36(a0),d0
0000F6C6 B028 001A                  		cmp.b	$1A(a0),d0
0000F6CA 6600                       		bne.s	Obj6D_ChkDel
0000F6CC 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000F6D2                            
0000F6D2                            Obj6D_ChkDel:
0000F6D2 3028 0008                  		move.w	8(a0),d0
0000F6D6 0240 FF80                  		andi.w	#$FF80,d0
0000F6DA 3238 F700                  		move.w	($FFFFF700).w,d1
0000F6DE 0441 0080                  		subi.w	#$80,d1
0000F6E2 0241 FF80                  		andi.w	#$FF80,d1
0000F6E6 9041                       		sub.w	d1,d0
0000F6E8 0C40 0280                  		cmpi.w	#$280,d0
0000F6EC 6200 F090                  		bhi.w	DeleteObject
0000F6F0 6000 F050                  		bra.w	DisplaySprite
0000F6F4                            ; ===========================================================================
0000F6F4                            Ani_obj6D:
0000F6F4                            	include "_anim\obj6D.asm"
0000F6F4                            ; ---------------------------------------------------------------------------
0000F6F4                            ; Animation script - flamethrower (SBZ)
0000F6F4                            ; ---------------------------------------------------------------------------
0000F6F4 0000                       		dc.w byte_E5C4-Ani_obj6D
0000F6F6 0000                       		dc.w byte_E5D2-Ani_obj6D
0000F6F8 0000                       		dc.w byte_E5DC-Ani_obj6D
0000F6FA 0000                       		dc.w byte_E5EA-Ani_obj6D
0000F6FC 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000F70A 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000F714 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000F722 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000F72C                            		even
0000F72C                            		even
0000F72C                            
0000F72C                            ; ---------------------------------------------------------------------------
0000F72C                            ; Sprite mappings - flame thrower (SBZ)
0000F72C                            ; ---------------------------------------------------------------------------
0000F72C                            Map_obj6D:
0000F72C                            	include "_maps\obj6D.asm"
0000F72C                            ; ---------------------------------------------------------------------------
0000F72C                            ; Sprite mappings - flame thrower (SBZ)
0000F72C                            ; ---------------------------------------------------------------------------
0000F72C 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000F730 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000F734 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000F738 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000F73C 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000F740 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000F744 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000F748 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000F74C 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000F750 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000F754 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000F758 01                         byte_E620:	dc.b 1
0000F759 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F75E 02                         byte_E626:	dc.b 2
0000F75F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F764 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F769 02                         byte_E631:	dc.b 2
0000F76A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F76F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F774 03                         byte_E63C:	dc.b 3
0000F775 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F77A 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F77F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F784 03                         byte_E64C:	dc.b 3
0000F785 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F78A 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F78F 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F794 04                         byte_E65C:	dc.b 4
0000F795 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F79A 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F79F 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F7A4 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7A9 04                         byte_E671:	dc.b 4
0000F7AA 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F7AF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F7B4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F7B9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7BE 05                         byte_E686:	dc.b 5
0000F7BF F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F7C4 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F7C9 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F7CE 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F7D3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7D8 05                         byte_E6A0:	dc.b 5
0000F7D9 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F7DE 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F7E3 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F7E8 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F7ED 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F7F2 06                         byte_E6BA:	dc.b 6
0000F7F3 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F7F8 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F7FD 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F802 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F807 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F80C 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F811 06                         byte_E6D9:	dc.b 6
0000F812 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F817 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F81C 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F821 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F826 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F82B 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000F830 01                         byte_E6F8:	dc.b 1
0000F831 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F836 02                         byte_E6FE:	dc.b 2
0000F837 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F83C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F841 02                         byte_E709:	dc.b 2
0000F842 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F847 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F84C 03                         byte_E714:	dc.b 3
0000F84D 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F852 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F857 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F85C 03                         byte_E724:	dc.b 3
0000F85D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F862 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F867 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F86C 04                         byte_E734:	dc.b 4
0000F86D 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F872 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F877 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F87C 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F881 04                         byte_E749:	dc.b 4
0000F882 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F887 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F88C 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F891 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F896 05                         byte_E75E:	dc.b 5
0000F897 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000F89C 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8A1 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000F8A6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8AB 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8B0 05                         byte_E778:	dc.b 5
0000F8B1 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F8B6 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000F8BB 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F8C0 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8C5 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F8CA 06                         byte_E792:	dc.b 6
0000F8CB E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000F8D0 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000F8D5 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000F8DA 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000F8DF 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F8E4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000F8E9 06                         byte_E7B1:	dc.b 6
0000F8EA E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000F8EF F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000F8F4 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000F8F9 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000F8FE 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000F903 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000F908                            		even
0000F908                            		even
0000F908                            
0000F908                            ; ===========================================================================
0000F908                            ; ---------------------------------------------------------------------------
0000F908                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000F908                            ; ---------------------------------------------------------------------------
0000F908                            
0000F908                            Obj46:					; XREF: Obj_Index
0000F908 7000                       		moveq	#0,d0
0000F90A 1028 0024                  		move.b	$24(a0),d0
0000F90E 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000F912 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000F916                            ; ===========================================================================
0000F916 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000F918 0000                       		dc.w Obj46_Action-Obj46_Index
0000F91A                            ; ===========================================================================
0000F91A                            
0000F91A                            Obj46_Main:				; XREF: Obj46_Index
0000F91A 5428 0024                  		addq.b	#2,$24(a0)
0000F91E 117C 000F 0016             		move.b	#$F,$16(a0)
0000F924 117C 000F 0017             		move.b	#$F,$17(a0)
0000F92A 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000F932 317C 4000 0002             		move.w	#$4000,2(a0)
0000F938 117C 0004 0001             		move.b	#4,1(a0)
0000F93E 117C 0003 0018             		move.b	#3,$18(a0)
0000F944 117C 0010 0019             		move.b	#$10,$19(a0)
0000F94A 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000F950 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000F956                            
0000F956                            Obj46_Action:				; XREF: Obj46_Index
0000F956 4A28 0001                  		tst.b	1(a0)
0000F95A 6A00                       		bpl.s	Obj46_ChkDel
0000F95C 7000                       		moveq	#0,d0
0000F95E 1028 0028                  		move.b	$28(a0),d0	; get object type
0000F962 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000F966 D040                       		add.w	d0,d0
0000F968 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000F96C 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000F970 323C 001B                  		move.w	#$1B,d1
0000F974 343C 0010                  		move.w	#$10,d2
0000F978 363C 0011                  		move.w	#$11,d3
0000F97C 3828 0008                  		move.w	8(a0),d4
0000F980 6100 0000                  		bsr.w	SolidObject
0000F984                            
0000F984                            Obj46_ChkDel:
0000F984 6100 EDBC                  		bsr.w	DisplaySprite
0000F988 3028 0008                  		move.w	8(a0),d0
0000F98C 0240 FF80                  		andi.w	#$FF80,d0
0000F990 3238 F700                  		move.w	($FFFFF700).w,d1
0000F994 0441 0080                  		subi.w	#$80,d1
0000F998 0241 FF80                  		andi.w	#$FF80,d1
0000F99C 9041                       		sub.w	d1,d0
0000F99E 0C40 0280                  		cmpi.w	#$280,d0
0000F9A2 6200 EDDA                  		bhi.w	DeleteObject
0000F9A6 4E75                       		rts	
0000F9A8                            ; ===========================================================================
0000F9A8 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000F9AA 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000F9AC 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000F9AE 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000F9B0 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000F9B2                            ; ===========================================================================
0000F9B2                            
0000F9B2                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000F9B2 4E75                       		rts	
0000F9B4                            ; ===========================================================================
0000F9B4                            
0000F9B4                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000F9B4 3038 D008                  		move.w	($FFFFD008).w,d0
0000F9B8 9068 0008                  		sub.w	8(a0),d0
0000F9BC 6400                       		bcc.s	loc_E888
0000F9BE 4440                       		neg.w	d0
0000F9C0                            
0000F9C0                            loc_E888:
0000F9C0 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000F9C4 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000F9C6 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000F9CC                            
0000F9CC                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000F9CC 7000                       		moveq	#0,d0
0000F9CE 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000F9D2 0828 0003 0028             		btst	#3,$28(a0)
0000F9D8 6700                       		beq.s	loc_E8A8
0000F9DA 4440                       		neg.w	d0
0000F9DC 0640 0010                  		addi.w	#$10,d0
0000F9E0                            
0000F9E0                            loc_E8A8:
0000F9E0 3228 0030                  		move.w	$30(a0),d1
0000F9E4 9240                       		sub.w	d0,d1
0000F9E6 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000F9EA 4E75                       		rts	
0000F9EC                            ; ===========================================================================
0000F9EC                            
0000F9EC                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000F9EC 6100 ED2E                  		bsr.w	SpeedToPos
0000F9F0 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000F9F6 6100 0000                  		bsr.w	ObjHitFloor
0000F9FA 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000F9FC 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000FA00 D368 000C                  		add.w	d1,$C(a0)
0000FA04 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000FA08 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FA0E 117C 0004 0028             		move.b	#4,$28(a0)
0000FA14 3011                       		move.w	(a1),d0
0000FA16 0240 03FF                  		andi.w	#$3FF,d0
0000FA1A 0C40 02E8                  		cmpi.w	#$2E8,d0
0000FA1E 6400                       		bcc.s	locret_E8EE
0000FA20 117C 0000 0028             		move.b	#0,$28(a0)
0000FA26                            
0000FA26                            locret_E8EE:
0000FA26 4E75                       		rts	
0000FA28                            ; ===========================================================================
0000FA28                            
0000FA28                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000FA28 7000                       		moveq	#0,d0
0000FA2A 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000FA2E E648                       		lsr.w	#3,d0
0000FA30 3228 0030                  		move.w	$30(a0),d1
0000FA34 9240                       		sub.w	d0,d1
0000FA36 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000FA3A 4E75                       		rts	
0000FA3C                            ; ===========================================================================
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            Map_obj46:
0000FA3C                            	include "_maps\obj46.asm"
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000FA3C                            ; ---------------------------------------------------------------------------
0000FA3C 0000                       		dc.w byte_E906-Map_obj46
0000FA3E 01                         byte_E906:	dc.b 1
0000FA3F F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000FA44                            		even
0000FA44                            		even
0000FA44                            
0000FA44                            ; ===========================================================================
0000FA44                            ; ---------------------------------------------------------------------------
0000FA44                            ; Object 12 - lamp (SYZ)
0000FA44                            ; ---------------------------------------------------------------------------
0000FA44                            
0000FA44                            Obj12:					; XREF: Obj_Index
0000FA44 7000                       		moveq	#0,d0
0000FA46 1028 0024                  		move.b	$24(a0),d0
0000FA4A 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000FA4E 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000FA52                            ; ===========================================================================
0000FA52 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000FA54 0000                       		dc.w Obj12_Animate-Obj12_Index
0000FA56                            ; ===========================================================================
0000FA56                            
0000FA56                            Obj12_Main:				; XREF: Obj12_Index
0000FA56 5428 0024                  		addq.b	#2,$24(a0)
0000FA5A 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000FA62 317C 0000 0002             		move.w	#0,2(a0)
0000FA68 117C 0004 0001             		move.b	#4,1(a0)
0000FA6E 117C 0010 0019             		move.b	#$10,$19(a0)
0000FA74 117C 0006 0018             		move.b	#6,$18(a0)
0000FA7A                            
0000FA7A                            Obj12_Animate:				; XREF: Obj12_Index
0000FA7A 5328 001E                  		subq.b	#1,$1E(a0)
0000FA7E 6A00                       		bpl.s	Obj12_ChkDel
0000FA80 117C 0007 001E             		move.b	#7,$1E(a0)
0000FA86 5228 001A                  		addq.b	#1,$1A(a0)
0000FA8A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000FA90 6500                       		bcs.s	Obj12_ChkDel
0000FA92 117C 0000 001A             		move.b	#0,$1A(a0)
0000FA98                            
0000FA98                            Obj12_ChkDel:
0000FA98 3028 0008                  		move.w	8(a0),d0
0000FA9C 0240 FF80                  		andi.w	#$FF80,d0
0000FAA0 3238 F700                  		move.w	($FFFFF700).w,d1
0000FAA4 0441 0080                  		subi.w	#$80,d1
0000FAA8 0241 FF80                  		andi.w	#$FF80,d1
0000FAAC 9041                       		sub.w	d1,d0
0000FAAE 0C40 0280                  		cmpi.w	#$280,d0
0000FAB2 6200 ECCA                  		bhi.w	DeleteObject
0000FAB6 6000 EC8A                  		bra.w	DisplaySprite
0000FABA                            ; ===========================================================================
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            ; Sprite mappings - lamp (SYZ)
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            Map_obj12:
0000FABA                            	include "_maps\obj12.asm"
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA                            ; Sprite mappings - lamp (SYZ)
0000FABA                            ; ---------------------------------------------------------------------------
0000FABA 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000FABE 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000FAC2 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000FAC6 02                         byte_E98E:	dc.b 2
0000FAC7 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000FACC 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000FAD1 02                         byte_E999:	dc.b 2
0000FAD2 F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000FAD7 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000FADC 02                         byte_E9A4:	dc.b 2
0000FADD F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000FAE2 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000FAE7 02                         byte_E9AF:	dc.b 2
0000FAE8 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000FAED 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000FAF2 02                         byte_E9BA:	dc.b 2
0000FAF3 F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000FAF8 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000FAFD 02                         byte_E9C5:	dc.b 2
0000FAFE F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000FB03 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000FB08                            		even
0000FB08                            		even
0000FB08                            
0000FB08                            ; ===========================================================================
0000FB08                            ; ---------------------------------------------------------------------------
0000FB08                            ; Object 47 - pinball bumper (SYZ)
0000FB08                            ; ---------------------------------------------------------------------------
0000FB08                            
0000FB08                            Obj47:					; XREF: Obj_Index
0000FB08 7000                       		moveq	#0,d0
0000FB0A 1028 0024                  		move.b	$24(a0),d0
0000FB0E 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000FB12 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000FB16                            ; ===========================================================================
0000FB16 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000FB18 0000                       		dc.w Obj47_Hit-Obj47_Index
0000FB1A                            ; ===========================================================================
0000FB1A                            
0000FB1A                            Obj47_Main:				; XREF: Obj47_Index
0000FB1A 5428 0024                  		addq.b	#2,$24(a0)
0000FB1E 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000FB26 317C 0380 0002             		move.w	#$380,2(a0)
0000FB2C 117C 0004 0001             		move.b	#4,1(a0)
0000FB32 117C 0010 0019             		move.b	#$10,$19(a0)
0000FB38 117C 0001 0018             		move.b	#1,$18(a0)
0000FB3E 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000FB44                            
0000FB44                            Obj47_Hit:				; XREF: Obj47_Index
0000FB44 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000FB48 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000FB4C 4228 0021                  		clr.b	$21(a0)
0000FB50 43F8 D000                  		lea	($FFFFD000).w,a1
0000FB54 3228 0008                  		move.w	8(a0),d1
0000FB58 3428 000C                  		move.w	$C(a0),d2
0000FB5C 9269 0008                  		sub.w	8(a1),d1
0000FB60 9469 000C                  		sub.w	$C(a1),d2
0000FB64 4EB9 0000 36E4             		jsr	(CalcAngle).l
0000FB6A 4EB9 0000 3416             		jsr	(CalcSine).l
0000FB70 C3FC F900                  		muls.w	#-$700,d1
0000FB74 E081                       		asr.l	#8,d1
0000FB76 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000FB7A C1FC F900                  		muls.w	#-$700,d0
0000FB7E E080                       		asr.l	#8,d0
0000FB80 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000FB84 08E9 0001 0022             		bset	#1,$22(a1)
0000FB8A 08A9 0004 0022             		bclr	#4,$22(a1)
0000FB90 08A9 0005 0022             		bclr	#5,$22(a1)
0000FB96 4229 003C                  		clr.b	$3C(a1)
0000FB9A 117C 0001 001C             		move.b	#1,$1C(a0)
0000FBA0 303C 00B4                  		move.w	#$B4,d0
0000FBA4 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play bumper sound
0000FBAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FBAE 7000                       		moveq	#0,d0
0000FBB0 1028 0023                  		move.b	$23(a0),d0
0000FBB4 6700                       		beq.s	Obj47_Score
0000FBB6 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000FBBC 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000FBBE 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000FBC2                            
0000FBC2                            Obj47_Score:
0000FBC2 7001                       		moveq	#1,d0
0000FBC4 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000FBCA 6100 EFFC                  		bsr.w	SingleObjLoad
0000FBCE 6600                       		bne.s	Obj47_Display
0000FBD0 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FBD4 3368 0008 0008             		move.w	8(a0),8(a1)
0000FBDA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FBE0 137C 0004 001A             		move.b	#4,$1A(a1)
0000FBE6                            
0000FBE6                            Obj47_Display:
0000FBE6 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000FBEC 6100 BBA2                  		bsr.w	AnimateSprite
0000FBF0 3028 0008                  		move.w	8(a0),d0
0000FBF4 0240 FF80                  		andi.w	#$FF80,d0
0000FBF8 3238 F700                  		move.w	($FFFFF700).w,d1
0000FBFC 0441 0080                  		subi.w	#$80,d1
0000FC00 0241 FF80                  		andi.w	#$FF80,d1
0000FC04 9041                       		sub.w	d1,d0
0000FC06 0C40 0280                  		cmpi.w	#$280,d0
0000FC0A 6200                       		bhi.s	Obj47_ChkHit
0000FC0C 6000 EB34                  		bra.w	DisplaySprite
0000FC10                            ; ===========================================================================
0000FC10                            
0000FC10                            Obj47_ChkHit:				; XREF: Obj47_Display
0000FC10 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000FC14 7000                       		moveq	#0,d0
0000FC16 1028 0023                  		move.b	$23(a0),d0
0000FC1A 6700                       		beq.s	Obj47_Delete
0000FC1C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000FC22                            
0000FC22                            Obj47_Delete:
0000FC22 6000 EB5A                  		bra.w	DeleteObject
0000FC26                            ; ===========================================================================
0000FC26                            Ani_obj47:
0000FC26                            	include "_anim\obj47.asm"
0000FC26                            ; ---------------------------------------------------------------------------
0000FC26                            ; Animation script - flamethrower (SBZ)
0000FC26                            ; ---------------------------------------------------------------------------
0000FC26 0000                       		dc.w byte_EAF4-Ani_obj47
0000FC28 0000                       		dc.w byte_EAF8-Ani_obj47
0000FC2A 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000FC2E 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000FC36                            		even
0000FC36                            		even
0000FC36                            
0000FC36                            ; ---------------------------------------------------------------------------
0000FC36                            ; Sprite mappings - pinball bumper (SYZ)
0000FC36                            ; ---------------------------------------------------------------------------
0000FC36                            Map_obj47:
0000FC36                            	include "_maps\obj47.asm"
0000FC36                            ; ---------------------------------------------------------------------------
0000FC36                            ; Sprite mappings - pinball bumper (SYZ)
0000FC36                            ; ---------------------------------------------------------------------------
0000FC36 0000                       		dc.w byte_EB06-Map_obj47
0000FC38 0000                       		dc.w byte_EB11-Map_obj47
0000FC3A 0000                       		dc.w byte_EB1C-Map_obj47
0000FC3C 02                         byte_EB06:	dc.b 2
0000FC3D F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000FC42 F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000FC47 02                         byte_EB11:	dc.b 2
0000FC48 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000FC4D F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000FC52 02                         byte_EB1C:	dc.b 2
0000FC53 F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000FC58 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000FC5E 00                         		even
0000FC5E 00                         		even
0000FC5E                            
0000FC5E                            ; ===========================================================================
0000FC5E                            ; ---------------------------------------------------------------------------
0000FC5E                            ; Object 0D - signpost at the end of a level
0000FC5E                            ; ---------------------------------------------------------------------------
0000FC5E                            
0000FC5E                            Obj0D:					; XREF: Obj_Index
0000FC5E 7000                       		moveq	#0,d0
0000FC60 1028 0024                  		move.b	$24(a0),d0
0000FC64 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000FC68 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000FC6C 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000FC72 6100 BB1C                  		bsr.w	AnimateSprite
0000FC76 6100 EACA                  		bsr.w	DisplaySprite
0000FC7A 3028 0008                  		move.w	8(a0),d0
0000FC7E 0240 FF80                  		andi.w	#$FF80,d0
0000FC82 3238 F700                  		move.w	($FFFFF700).w,d1
0000FC86 0441 0080                  		subi.w	#$80,d1
0000FC8A 0241 FF80                  		andi.w	#$FF80,d1
0000FC8E 9041                       		sub.w	d1,d0
0000FC90 0C40 0280                  		cmpi.w	#$280,d0
0000FC94 6200 EAE8                  		bhi.w	DeleteObject
0000FC98 4E75                       		rts	
0000FC9A                            ; ===========================================================================
0000FC9A 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000FC9C 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000FC9E 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000FCA0 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000FCA2 0000                       		dc.w locret_ED1A-Obj0D_Index
0000FCA4                            ; ===========================================================================
0000FCA4                            
0000FCA4                            Obj0D_Main:				; XREF: Obj0D_Index
0000FCA4 5428 0024                  		addq.b	#2,$24(a0)
0000FCA8 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000FCB0 317C 0680 0002             		move.w	#$680,2(a0)
0000FCB6 117C 0004 0001             		move.b	#4,1(a0)
0000FCBC 117C 0018 0019             		move.b	#$18,$19(a0)
0000FCC2 117C 0004 0018             		move.b	#4,$18(a0)
0000FCC8                            
0000FCC8                            Obj0D_Touch:				; XREF: Obj0D_Index
0000FCC8 3038 D008                  		move.w	($FFFFD008).w,d0
0000FCCC 9068 0008                  		sub.w	8(a0),d0
0000FCD0 6500                       		bcs.s	locret_EBBA
0000FCD2 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000FCD6 6400                       		bcc.s	locret_EBBA	; if not, branch
0000FCD8 303C 00CF                  		move.w	#$CF,d0
0000FCDC 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play signpost	sound
0000FCE2 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FCE6 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000FCEC 5428 0024                  		addq.b	#2,$24(a0)
0000FCF0                            
0000FCF0                            locret_EBBA:
0000FCF0 4E75                       		rts	
0000FCF2                            ; ===========================================================================
0000FCF2                            
0000FCF2                            Obj0D_Spin:				; XREF: Obj0D_Index
0000FCF2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000FCF6 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000FCF8 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000FCFE 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000FD02 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000FD08 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000FD0A 5428 0024                  		addq.b	#2,$24(a0)
0000FD0E                            
0000FD0E                            Obj0D_Sparkle:
0000FD0E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000FD12 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000FD14 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000FD1A 7000                       		moveq	#0,d0
0000FD1C 1028 0034                  		move.b	$34(a0),d0
0000FD20 5428 0034                  		addq.b	#2,$34(a0)
0000FD24 0228 000E 0034             		andi.b	#$E,$34(a0)
0000FD2A 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000FD2E 6100 EE98                  		bsr.w	SingleObjLoad
0000FD32 6600                       		bne.s	locret_EC42
0000FD34 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000FD38 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000FD3E 101A                       		move.b	(a2)+,d0
0000FD40 4880                       		ext.w	d0
0000FD42 D068 0008                  		add.w	8(a0),d0
0000FD46 3340 0008                  		move.w	d0,8(a1)
0000FD4A 101A                       		move.b	(a2)+,d0
0000FD4C 4880                       		ext.w	d0
0000FD4E D068 000C                  		add.w	$C(a0),d0
0000FD52 3340 000C                  		move.w	d0,$C(a1)
0000FD56 237C 0000 AF2E 0004        		move.l	#Map_obj25,4(a1)
0000FD5E 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000FD64 137C 0004 0001             		move.b	#4,1(a1)
0000FD6A 137C 0002 0018             		move.b	#2,$18(a1)
0000FD70 137C 0008 0019             		move.b	#8,$19(a1)
0000FD76                            
0000FD76                            locret_EC42:
0000FD76 4E75                       		rts	
0000FD78                            ; ===========================================================================
0000FD78 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000FD7A 0808                       		dc.b	8,   8
0000FD7C F000                       		dc.b -$10,   0
0000FD7E 18F8                       		dc.b  $18,  -8
0000FD80 00F8                       		dc.b	0,  -8
0000FD82 1000                       		dc.b  $10,   0
0000FD84 E808                       		dc.b -$18,   8
0000FD86 1810                       		dc.b  $18, $10
0000FD88                            ; ===========================================================================
0000FD88                            
0000FD88                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000FD88 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000FD8C 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000FD90 0838 0001 D022             		btst	#1,($FFFFD022).w
0000FD96 6600                       		bne.s	loc_EC70
0000FD98 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000FD9E 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0000FDA4 6700                       		beq.s	Obj0D_MoveLeft	; GMZ: If not, branch
0000FDA6 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0000FDAC 6000                       		bra.s	loc_EC70
0000FDAE                            
0000FDAE                            Obj0D_MoveLeft:
0000FDAE 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000FDB4                            
0000FDB4                            loc_EC70:
0000FDB4 4A38 D000                  		tst.b	($FFFFD000).w
0000FDB8 6700                       		beq.s	loc_EC86
0000FDBA 3038 D008                  		move.w	($FFFFD008).w,d0
0000FDBE 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000FDC2 0641 0128                  		addi.w	#$128,d1
0000FDC6 B041                       		cmp.w	d1,d0
0000FDC8 6500                       		bcs.s	locret_ECEE
0000FDCA                            
0000FDCA                            loc_EC86:
0000FDCA 5428 0024                  		addq.b	#2,$24(a0)
0000FDCE                            
0000FDCE                            ; ---------------------------------------------------------------------------
0000FDCE                            ; Subroutine to	set up bonuses at the end of an	act
0000FDCE                            ; ---------------------------------------------------------------------------
0000FDCE                            
0000FDCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FDCE                            
0000FDCE                            
0000FDCE                            GotThroughAct:				; XREF: Obj3E_EndAct
0000FDCE 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000FDD2 6600                       		bne.s	locret_ECEE
0000FDD4 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000FDDA 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000FDDE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000FDE2 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000FDE8 7010                       		moveq	#$10,d0
0000FDEA 4EB9 0000 1E8A             		jsr	(LoadPLC2).l	; load title card patterns
0000FDF0 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000FDF6 7000                       		moveq	#0,d0
0000FDF8 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000FDFC C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000FE00 7200                       		moveq	#0,d1
0000FE02 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000FE06 D041                       		add.w	d1,d0		; add up your time
0000FE08 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000FE0C 7214                       		moveq	#$14,d1
0000FE0E B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000FE10 6500                       		bcs.s	loc_ECD0	; if not, branch
0000FE12 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000FE14                            
0000FE14                            loc_ECD0:
0000FE14 D040                       		add.w	d0,d0
0000FE16 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000FE1C 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000FE20 C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000FE24 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000FE28 303C 008E                  		move.w	#$8E,d0
0000FE2C 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000FE32                            
0000FE32                            locret_ECEE:
0000FE32 4E75                       		rts	
0000FE34                            ; End of function GotThroughAct
0000FE34                            
0000FE34                            ; ===========================================================================
0000FE34 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000FE48 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000FE5E                            ; ===========================================================================
0000FE5E                            
0000FE5E                            locret_ED1A:				; XREF: Obj0D_Index
0000FE5E 4E75                       		rts	
0000FE60                            ; ===========================================================================
0000FE60                            Ani_obj0D:
0000FE60                            	include "_anim\obj0D.asm"
0000FE60                            ; ---------------------------------------------------------------------------
0000FE60                            ; Animation script - signpost
0000FE60                            ; ---------------------------------------------------------------------------
0000FE60 0000                       		dc.w byte_ED24-Ani_obj0D
0000FE62 0000                       		dc.w byte_ED28-Ani_obj0D
0000FE64 0000                       		dc.w byte_ED2E-Ani_obj0D
0000FE66 0000                       		dc.w byte_ED34-Ani_obj0D
0000FE68 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000FE6C 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000FE72 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000FE78 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000FE7C 00                         		even
0000FE7C 00                         		even
0000FE7C                            
0000FE7C                            ; ---------------------------------------------------------------------------
0000FE7C                            ; Sprite mappings - signpost
0000FE7C                            ; ---------------------------------------------------------------------------
0000FE7C                            Map_obj0D:
0000FE7C                            	include "_maps\obj0D.asm"
0000FE7C                            ; ---------------------------------------------------------------------------
0000FE7C                            ; Sprite mappings - signpost
0000FE7C                            ; ---------------------------------------------------------------------------
0000FE7C 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000FE80 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000FE84 0000                       		dc.w byte_ED73-Map_obj0D
0000FE86 03                         byte_ED42:	dc.b 3
0000FE87 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000FE8C F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000FE91 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FE96 02                         byte_ED52:	dc.b 2
0000FE97 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000FE9C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FEA1 02                         byte_ED5D:	dc.b 2
0000FEA2 F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000FEA7 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FEAC 02                         byte_ED68:	dc.b 2
0000FEAD F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000FEB2 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000FEB7 03                         byte_ED73:	dc.b 3
0000FEB8 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000FEBD F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000FEC2 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000FEC8 00                         		even
0000FEC8 00                         		even
0000FEC8                            
0000FEC8                            ; ===========================================================================
0000FEC8                            ; ---------------------------------------------------------------------------
0000FEC8                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000FEC8                            ; ---------------------------------------------------------------------------
0000FEC8                            
0000FEC8                            Obj4C:					; XREF: Obj_Index
0000FEC8 7000                       		moveq	#0,d0
0000FECA 1028 0024                  		move.b	$24(a0),d0
0000FECE 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000FED2 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000FED6 6000 0000                  		bra.w	Obj4D_ChkDel
0000FEDA                            ; ===========================================================================
0000FEDA 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000FEDC 0000                       		dc.w loc_EDCC-Obj4C_Index
0000FEDE 0000                       		dc.w loc_EE3E-Obj4C_Index
0000FEE0 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000FEE2 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000FEE4 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000FEE6                            ; ===========================================================================
0000FEE6                            
0000FEE6                            Obj4C_Main:				; XREF: Obj4C_Index
0000FEE6 5428 0024                  		addq.b	#2,$24(a0)
0000FEEA 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000FEF2 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000FEF8 117C 0004 0001             		move.b	#4,1(a0)
0000FEFE 117C 0001 0018             		move.b	#1,$18(a0)
0000FF04 117C 0038 0019             		move.b	#$38,$19(a0)
0000FF0A 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000FF10                            
0000FF10                            loc_EDCC:				; XREF: Obj4C_Index
0000FF10 5368 0032                  		subq.w	#1,$32(a0)
0000FF14 6A00                       		bpl.s	locret_EDF0
0000FF16 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000FF1C 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000FF20 3228 000C                  		move.w	$C(a0),d1
0000FF24 B041                       		cmp.w	d1,d0
0000FF26 6400                       		bcc.s	locret_EDF0
0000FF28 0441 0170                  		subi.w	#$170,d1
0000FF2C B041                       		cmp.w	d1,d0
0000FF2E 6500                       		bcs.s	locret_EDF0
0000FF30 5428 0024                  		addq.b	#2,$24(a0)
0000FF34                            
0000FF34                            locret_EDF0:
0000FF34 4E75                       		rts	
0000FF36                            ; ===========================================================================
0000FF36                            
0000FF36                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000FF36 5428 0024                  		addq.b	#2,$24(a0)
0000FF3A 6100 ECA2                  		bsr.w	SingleObjLoad2
0000FF3E 6600                       		bne.s	loc_EE18
0000FF40 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000FF44 3368 0008 0008             		move.w	8(a0),8(a1)
0000FF4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FF50 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000FF56 2348 003C                  		move.l	a0,$3C(a1)
0000FF5A                            
0000FF5A                            loc_EE18:
0000FF5A 117C 0001 001C             		move.b	#1,$1C(a0)
0000FF60 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FF64 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000FF66 117C 0004 001C             		move.b	#4,$1C(a0)
0000FF6C 6000                       		bra.s	Obj4C_Display
0000FF6E                            ; ===========================================================================
0000FF6E                            
0000FF6E                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000FF6E 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000FF72 08E9 0001 0022             		bset	#1,$22(a1)
0000FF78 337C FA80 0012             		move.w	#-$580,$12(a1)
0000FF7E 6000                       		bra.s	Obj4C_Display
0000FF80                            ; ===========================================================================
0000FF80                            
0000FF80                            loc_EE3E:				; XREF: Obj4C_Index
0000FF80 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000FF84 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000FF86 5428 0024                  		addq.b	#2,$24(a0)
0000FF8A 4E75                       		rts	
0000FF8C                            ; ===========================================================================
0000FF8C                            
0000FF8C                            Obj4C_Display:				; XREF: Obj4C_Index
0000FF8C 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000FF92 6100 B7FC                  		bsr.w	AnimateSprite
0000FF96 6100 E7AA                  		bsr.w	DisplaySprite
0000FF9A 4E75                       		rts	
0000FF9C                            ; ===========================================================================
0000FF9C                            
0000FF9C                            Obj4C_Delete:				; XREF: Obj4C_Index
0000FF9C 117C 0000 001C             		move.b	#0,$1C(a0)
0000FFA2 117C 0002 0024             		move.b	#2,$24(a0)
0000FFA8 4A28 0028                  		tst.b	$28(a0)
0000FFAC 6700 E7D0                  		beq.w	DeleteObject
0000FFB0 4E75                       		rts	
0000FFB2                            ; ===========================================================================
0000FFB2                            ; ---------------------------------------------------------------------------
0000FFB2                            ; Object 4D - lava geyser / lavafall (MZ)
0000FFB2                            ; ---------------------------------------------------------------------------
0000FFB2                            
0000FFB2                            Obj4D:					; XREF: Obj_Index
0000FFB2 7000                       		moveq	#0,d0
0000FFB4 1028 0024                  		move.b	$24(a0),d0
0000FFB8 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000FFBC 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000FFC0 6000 E780                  		bra.w	DisplaySprite
0000FFC4                            ; ===========================================================================
0000FFC4 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000FFC6 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000FFC8 0000                       		dc.w loc_EFFC-Obj4D_Index
0000FFCA 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000FFCC                            
0000FFCC FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000FFD0                            ; ===========================================================================
0000FFD0                            
0000FFD0                            Obj4D_Main:				; XREF: Obj4D_Index
0000FFD0 5428 0024                  		addq.b	#2,$24(a0)
0000FFD4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000FFDA 4A28 0028                  		tst.b	$28(a0)
0000FFDE 6700                       		beq.s	loc_EEA4
0000FFE0 0468 0250 000C             		subi.w	#$250,$C(a0)
0000FFE6                            
0000FFE6                            loc_EEA4:
0000FFE6 7000                       		moveq	#0,d0
0000FFE8 1028 0028                  		move.b	$28(a0),d0
0000FFEC D040                       		add.w	d0,d0
0000FFEE 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000FFF4 2248                       		movea.l	a0,a1
0000FFF6 7201                       		moveq	#1,d1
0000FFF8 6100                       		bsr.s	Obj4D_MakeLava
0000FFFA 6000                       		bra.s	loc_EF10
0000FFFC                            ; ===========================================================================
0000FFFC                            
0000FFFC                            Obj4D_Loop:
0000FFFC 6100 EBE0                  		bsr.w	SingleObjLoad2
00010000 6600                       		bne.s	loc_EF0A
00010002                            
00010002                            Obj4D_MakeLava:				; XREF: Obj4D_Main
00010002 12BC 004D                  		move.b	#$4D,0(a1)
00010006 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0001000E 337C 63A8 0002             		move.w	#$63A8,2(a1)
00010014 137C 0004 0001             		move.b	#4,1(a1)
0001001A 137C 0020 0019             		move.b	#$20,$19(a1)
00010020 3368 0008 0008             		move.w	8(a0),8(a1)
00010026 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001002C 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010032 137C 0001 0018             		move.b	#1,$18(a1)
00010038 137C 0005 001C             		move.b	#5,$1C(a1)
0001003E 4A28 0028                  		tst.b	$28(a0)
00010042 6700                       		beq.s	loc_EF0A
00010044 137C 0002 001C             		move.b	#2,$1C(a1)
0001004A                            
0001004A                            loc_EF0A:
0001004A 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0001004E 4E75                       		rts	
00010050                            ; ===========================================================================
00010050                            
00010050                            loc_EF10:				; XREF: Obj4D_Main
00010050 0669 0060 000C             		addi.w	#$60,$C(a1)
00010056 3368 0030 0030             		move.w	$30(a0),$30(a1)
0001005C 0669 0060 0030             		addi.w	#$60,$30(a1)
00010062 137C 0093 0020             		move.b	#$93,$20(a1)
00010068 137C 0080 0016             		move.b	#$80,$16(a1)
0001006E 08E9 0004 0001             		bset	#4,1(a1)
00010074 5829 0024                  		addq.b	#4,$24(a1)
00010078 2348 003C                  		move.l	a0,$3C(a1)
0001007C 4A28 0028                  		tst.b	$28(a0)
00010080 6700                       		beq.s	Obj4D_PlaySnd
00010082 7200                       		moveq	#0,d1
00010084 6100 FF76                  		bsr.w	Obj4D_Loop
00010088 5429 0024                  		addq.b	#2,$24(a1)
0001008C 08E9 0004 0002             		bset	#4,2(a1)
00010092 0669 0100 000C             		addi.w	#$100,$C(a1)
00010098 137C 0000 0018             		move.b	#0,$18(a1)
0001009E 3368 0030 0030             		move.w	$30(a0),$30(a1)
000100A4 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
000100AA 117C 0000 0028             		move.b	#0,$28(a0)
000100B0                            
000100B0                            Obj4D_PlaySnd:
000100B0 303C 00C8                  		move.w	#$C8,d0
000100B4 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play flame sound
000100BA                            
000100BA                            Obj4D_Action:				; XREF: Obj4D_Index
000100BA 7000                       		moveq	#0,d0
000100BC 1028 0028                  		move.b	$28(a0),d0
000100C0 D040                       		add.w	d0,d0
000100C2 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
000100C6 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
000100CA 6100 E650                  		bsr.w	SpeedToPos
000100CE 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
000100D4 6100 B6BA                  		bsr.w	AnimateSprite
000100D8                            
000100D8                            Obj4D_ChkDel:				; XREF: Obj4C
000100D8 3028 0008                  		move.w	8(a0),d0
000100DC 0240 FF80                  		andi.w	#$FF80,d0
000100E0 3238 F700                  		move.w	($FFFFF700).w,d1
000100E4 0441 0080                  		subi.w	#$80,d1
000100E8 0241 FF80                  		andi.w	#$FF80,d1
000100EC 9041                       		sub.w	d1,d0
000100EE 0C40 0280                  		cmpi.w	#$280,d0
000100F2 6200 E68A                  		bhi.w	DeleteObject
000100F6 4E75                       		rts	
000100F8                            ; ===========================================================================
000100F8 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
000100FA 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
000100FC                            ; ===========================================================================
000100FC                            
000100FC                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
000100FC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010102 3028 0030                  		move.w	$30(a0),d0
00010106 B068 000C                  		cmp.w	$C(a0),d0
0001010A 6400                       		bcc.s	locret_EFDA
0001010C 5828 0024                  		addq.b	#4,$24(a0)
00010110 2268 003C                  		movea.l	$3C(a0),a1
00010114 137C 0003 001C             		move.b	#3,$1C(a1)
0001011A                            
0001011A                            locret_EFDA:
0001011A 4E75                       		rts	
0001011C                            ; ===========================================================================
0001011C                            
0001011C                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0001011C 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
00010122 3028 0030                  		move.w	$30(a0),d0
00010126 B068 000C                  		cmp.w	$C(a0),d0
0001012A 6400                       		bcc.s	locret_EFFA
0001012C 5828 0024                  		addq.b	#4,$24(a0)
00010130 2268 003C                  		movea.l	$3C(a0),a1
00010134 137C 0001 001C             		move.b	#1,$1C(a1)
0001013A                            
0001013A                            locret_EFFA:
0001013A 4E75                       		rts	
0001013C                            ; ===========================================================================
0001013C                            
0001013C                            loc_EFFC:				; XREF: Obj4D_Index
0001013C 2268 003C                  		movea.l	$3C(a0),a1
00010140 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00010146 6700 0000                  		beq.w	Obj4D_Delete
0001014A 3029 000C                  		move.w	$C(a1),d0
0001014E 0640 0060                  		addi.w	#$60,d0
00010152 3140 000C                  		move.w	d0,$C(a0)
00010156 9068 0030                  		sub.w	$30(a0),d0
0001015A 4440                       		neg.w	d0
0001015C 7208                       		moveq	#8,d1
0001015E 0C40 0040                  		cmpi.w	#$40,d0
00010162 6C00                       		bge.s	loc_F026
00010164 720B                       		moveq	#$B,d1
00010166                            
00010166                            loc_F026:
00010166 0C40 0080                  		cmpi.w	#$80,d0
0001016A 6F00                       		ble.s	loc_F02E
0001016C 720E                       		moveq	#$E,d1
0001016E                            
0001016E                            loc_F02E:
0001016E 5328 001E                  		subq.b	#1,$1E(a0)
00010172 6A00                       		bpl.s	loc_F04C
00010174 117C 0007 001E             		move.b	#7,$1E(a0)
0001017A 5228 001B                  		addq.b	#1,$1B(a0)
0001017E 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
00010184 6500                       		bcs.s	loc_F04C
00010186 117C 0000 001B             		move.b	#0,$1B(a0)
0001018C                            
0001018C                            loc_F04C:
0001018C 1028 001B                  		move.b	$1B(a0),d0
00010190 D001                       		add.b	d1,d0
00010192 1140 001A                  		move.b	d0,$1A(a0)
00010196 6000 FF40                  		bra.w	Obj4D_ChkDel
0001019A                            ; ===========================================================================
0001019A                            
0001019A                            Obj4D_Delete:				; XREF: Obj4D_Index
0001019A 6000 E5E2                  		bra.w	DeleteObject
0001019E                            ; ===========================================================================
0001019E                            ; ---------------------------------------------------------------------------
0001019E                            ; Object 4E - advancing	wall of	lava (MZ)
0001019E                            ; ---------------------------------------------------------------------------
0001019E                            
0001019E                            Obj4E:					; XREF: Obj_Index
0001019E 7000                       		moveq	#0,d0
000101A0 1028 0024                  		move.b	$24(a0),d0
000101A4 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
000101A8 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
000101AC                            ; ===========================================================================
000101AC 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
000101AE 0000                       		dc.w Obj4E_Solid-Obj4E_Index
000101B0 0000                       		dc.w Obj4E_Action-Obj4E_Index
000101B2 0000                       		dc.w Obj4E_Move2-Obj4E_Index
000101B4 0000                       		dc.w Obj4E_Delete-Obj4E_Index
000101B6                            ; ===========================================================================
000101B6                            
000101B6                            Obj4E_Main:				; XREF: Obj4E_Index
000101B6 5828 0024                  		addq.b	#4,$24(a0)
000101BA 2248                       		movea.l	a0,a1
000101BC 7201                       		moveq	#1,d1
000101BE 6000                       		bra.s	Obj4E_Main2
000101C0                            ; ===========================================================================
000101C0                            
000101C0                            Obj4E_Loop:
000101C0 6100 EA1C                  		bsr.w	SingleObjLoad2
000101C4 6600                       		bne.s	loc_F0C8
000101C6                            
000101C6                            Obj4E_Main2:				; XREF: Obj4E_Main
000101C6 12BC 004E                  		move.b	#$4E,0(a1)	; load object
000101CA 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
000101D2 337C 63A8 0002             		move.w	#$63A8,2(a1)
000101D8 137C 0004 0001             		move.b	#4,1(a1)
000101DE 137C 0050 0019             		move.b	#$50,$19(a1)
000101E4 3368 0008 0008             		move.w	8(a0),8(a1)
000101EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000101F0 137C 0001 0018             		move.b	#1,$18(a1)
000101F6 137C 0000 001C             		move.b	#0,$1C(a1)
000101FC 137C 0094 0020             		move.b	#$94,$20(a1)
00010202 2348 003C                  		move.l	a0,$3C(a1)
00010206                            
00010206                            loc_F0C8:
00010206 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0001020A                            
0001020A 5C29 0024                  		addq.b	#6,$24(a1)
0001020E 137C 0004 001A             		move.b	#4,$1A(a1)
00010214                            
00010214                            Obj4E_Action:				; XREF: Obj4E_Index
00010214 3038 D008                  		move.w	($FFFFD008).w,d0
00010218 9068 0008                  		sub.w	8(a0),d0
0001021C 6400                       		bcc.s	Obj4E_ChkSonic
0001021E 4440                       		neg.w	d0
00010220                            
00010220                            Obj4E_ChkSonic:
00010220 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
00010224 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010226 3038 D00C                  		move.w	($FFFFD00C).w,d0
0001022A 9068 000C                  		sub.w	$C(a0),d0
0001022E 6400                       		bcc.s	loc_F0F4
00010230 4440                       		neg.w	d0
00010232                            
00010232                            loc_F0F4:
00010232 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
00010236 6400                       		bcc.s	Obj4E_Move	; if not, branch
00010238 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0001023E 6000                       		bra.s	Obj4E_Solid
00010240                            ; ===========================================================================
00010240                            
00010240                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
00010240 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
00010244 6700                       		beq.s	Obj4E_Solid	; if not, branch
00010246 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0001024C 5528 0024                  		subq.b	#2,$24(a0)
00010250                            
00010250                            Obj4E_Solid:				; XREF: Obj4E_Index
00010250 323C 002B                  		move.w	#$2B,d1
00010254 343C 0018                  		move.w	#$18,d2
00010258 3602                       		move.w	d2,d3
0001025A 5243                       		addq.w	#1,d3
0001025C 3828 0008                  		move.w	8(a0),d4
00010260 1028 0024                  		move.b	$24(a0),d0
00010264 3F00                       		move.w	d0,-(sp)
00010266 6100 0000                  		bsr.w	SolidObject
0001026A 301F                       		move.w	(sp)+,d0
0001026C 1140 0024                  		move.b	d0,$24(a0)
00010270 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
00010276 6600                       		bne.s	Obj4E_Animate	; if not, branch
00010278 4268 0010                  		clr.w	$10(a0)		; stop object moving
0001027C 4228 0036                  		clr.b	$36(a0)
00010280                            
00010280                            Obj4E_Animate:
00010280 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
00010286 6100 B508                  		bsr.w	AnimateSprite
0001028A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00010290 6400                       		bcc.s	Obj4E_ChkDel
00010292 6100 E488                  		bsr.w	SpeedToPos
00010296                            
00010296                            Obj4E_ChkDel:
00010296 6100 E4AA                  		bsr.w	DisplaySprite
0001029A 4A28 0036                  		tst.b	$36(a0)
0001029E 6600                       		bne.s	locret_F17E
000102A0 3028 0008                  		move.w	8(a0),d0
000102A4 0240 FF80                  		andi.w	#$FF80,d0
000102A8 3238 F700                  		move.w	($FFFFF700).w,d1
000102AC 0441 0080                  		subi.w	#$80,d1
000102B0 0241 FF80                  		andi.w	#$FF80,d1
000102B4 9041                       		sub.w	d1,d0
000102B6 0C40 0280                  		cmpi.w	#$280,d0
000102BA 6200                       		bhi.s	Obj4E_ChkGone
000102BC                            
000102BC                            locret_F17E:
000102BC 4E75                       		rts	
000102BE                            ; ===========================================================================
000102BE                            
000102BE                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
000102BE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000102C2 7000                       		moveq	#0,d0
000102C4 1028 0023                  		move.b	$23(a0),d0
000102C8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000102CE 117C 0008 0024             		move.b	#8,$24(a0)
000102D4 4E75                       		rts	
000102D6                            ; ===========================================================================
000102D6                            
000102D6                            Obj4E_Move2:				; XREF: Obj4E_Index
000102D6 2268 003C                  		movea.l	$3C(a0),a1
000102DA 0C29 0008 0024             		cmpi.b	#8,$24(a1)
000102E0 6700                       		beq.s	Obj4E_Delete
000102E2 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
000102E8 0468 0080 0008             		subi.w	#$80,8(a0)
000102EE 6000 E452                  		bra.w	DisplaySprite
000102F2                            ; ===========================================================================
000102F2                            
000102F2                            Obj4E_Delete:				; XREF: Obj4E_Index
000102F2 6000 E48A                  		bra.w	DeleteObject
000102F6                            ; ===========================================================================
000102F6                            ; ---------------------------------------------------------------------------
000102F6                            ; Object 54 - invisible	lava tag (MZ)
000102F6                            ; ---------------------------------------------------------------------------
000102F6                            
000102F6                            Obj54:					; XREF: Obj_Index
000102F6 7000                       		moveq	#0,d0
000102F8 1028 0024                  		move.b	$24(a0),d0
000102FC 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
00010300 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
00010304                            ; ===========================================================================
00010304 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
00010306 0000                       		dc.w Obj54_ChkDel-Obj54_Index
00010308                            
00010308 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0001030C                            ; ===========================================================================
0001030C                            
0001030C                            Obj54_Main:				; XREF: Obj54_Index
0001030C 5428 0024                  		addq.b	#2,$24(a0)
00010310 7000                       		moveq	#0,d0
00010312 1028 0028                  		move.b	$28(a0),d0
00010316 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0001031C 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
00010324 117C 0084 0001             		move.b	#$84,1(a0)
0001032A                            
0001032A                            Obj54_ChkDel:				; XREF: Obj54_Index
0001032A 3028 0008                  		move.w	8(a0),d0
0001032E 0240 FF80                  		andi.w	#$FF80,d0
00010332 3238 F700                  		move.w	($FFFFF700).w,d1
00010336 0441 0080                  		subi.w	#$80,d1
0001033A 0241 FF80                  		andi.w	#$FF80,d1
0001033E 9041                       		sub.w	d1,d0
00010340 6B00 E43C                  		bmi.w	DeleteObject
00010344 0C40 0280                  		cmpi.w	#$280,d0
00010348 6200 E434                  		bhi.w	DeleteObject
0001034C 4E75                       		rts	
0001034E                            ; ===========================================================================
0001034E                            ; ---------------------------------------------------------------------------
0001034E                            ; Sprite mappings - invisible lava tag (MZ)
0001034E                            ; ---------------------------------------------------------------------------
0001034E                            Map_obj54:
0001034E                            	include "_maps\obj54.asm"
0001034E                            ; ---------------------------------------------------------------------------
0001034E                            ; Sprite mappings - invisible lava tag (MZ)
0001034E                            ; ---------------------------------------------------------------------------
0001034E 0000                       		dc.w byte_F212-Map_obj54
00010350 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
00010352 00                         		even
00010352 00                         		even
00010352                            
00010352                            Ani_obj4C:
00010352                            	include "_anim\obj4C.asm"
00010352                            ; ---------------------------------------------------------------------------
00010352                            ; Animation script - geyser of lava (MZ)
00010352                            ; ---------------------------------------------------------------------------
00010352 0000                       		dc.w byte_F220-Ani_obj4C
00010354 0000                       		dc.w byte_F22A-Ani_obj4C
00010356 0000                       		dc.w byte_F22E-Ani_obj4C
00010358 0000                       		dc.w byte_F232-Ani_obj4C
0001035A 0000                       		dc.w byte_F23A-Ani_obj4C
0001035C 0000                       		dc.w byte_F23E-Ani_obj4C
0001035E 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
00010368 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0001036C 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
00010370 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
00010378 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0001037C 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
00010380                            		even
00010380                            		even
00010380                            
00010380                            Ani_obj4E:
00010380                            	include "_anim\obj4E.asm"
00010380                            ; ---------------------------------------------------------------------------
00010380                            ; Animation script - advancing wall of lava (MZ)
00010380                            ; ---------------------------------------------------------------------------
00010380 0000                       		dc.w byte_F244-Ani_obj4E
00010382 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
00010388                            		even
00010388                            		even
00010388                            
00010388                            ; ---------------------------------------------------------------------------
00010388                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010388                            ; ---------------------------------------------------------------------------
00010388                            Map_obj4C:
00010388                            	include "_maps\obj4C.asm"
00010388                            ; ---------------------------------------------------------------------------
00010388                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
00010388                            ; ---------------------------------------------------------------------------
00010388 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0001038C 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
00010390 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
00010394 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
00010398 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0001039C 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
000103A0 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
000103A4 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
000103A8 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
000103AC 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
000103B0 02                         byte_F272:	dc.b 2
000103B1 EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
000103B6 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
000103BB 02                         byte_F27D:	dc.b 2
000103BC EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
000103C1 EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
000103C6 04                         byte_F288:	dc.b 4
000103C7 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000103CC F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000103D1 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
000103D6 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
000103DB 04                         byte_F29D:	dc.b 4
000103DC EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
000103E1 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
000103E6 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
000103EB EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
000103F0 06                         byte_F2B2:	dc.b 6
000103F1 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
000103F6 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
000103FB F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
00010400 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
00010405 E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0001040A E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0001040F 06                         byte_F2D1:	dc.b 6
00010410 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
00010415 F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0001041A F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0001041F EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
00010424 E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
00010429 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0001042E 02                         byte_F2F0:	dc.b 2
0001042F E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
00010434 E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
00010439 02                         byte_F2FB:	dc.b 2
0001043A E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0001043F E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
00010444 0A                         byte_F306:	dc.b $A
00010445 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0001044A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0001044F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
00010454 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
00010459 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0001045E D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010463 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
00010468 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0001046D 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010472 100F 0840 00               		dc.b $10, $F, 8, $40, 0
00010477 0A                         byte_F339:	dc.b $A
00010478 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0001047D 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010482 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
00010487 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0001048C D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010491 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
00010496 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0001049B F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000104A0 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000104A5 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000104AA 0A                         byte_F36C:	dc.b $A
000104AB 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000104B0 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000104B5 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000104BA B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000104BF D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000104C4 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000104C9 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
000104CE F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
000104D3 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
000104D8 100F 0860 00               		dc.b $10, $F, 8, $60, 0
000104DD 06                         byte_F39F:	dc.b 6
000104DE 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
000104E3 900F 0840 00               		dc.b $90, $F, 8, $40, 0
000104E8 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
000104ED B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
000104F2 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
000104F7 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
000104FC 06                         byte_F3BE:	dc.b 6
000104FD 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010502 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010507 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001050C B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
00010511 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
00010516 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0001051B 06                         byte_F3DD:	dc.b 6
0001051C 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
00010521 900F 0860 00               		dc.b $90, $F, 8, $60, 0
00010526 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0001052B B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
00010530 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
00010535 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0001053A 10                         byte_F3FC:	dc.b $10
0001053B 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
00010540 900F 0840 00               		dc.b $90, $F, 8, $40, 0
00010545 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0001054A B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0001054F D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
00010554 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
00010559 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0001055E F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
00010563 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
00010568 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0001056D 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
00010572 300F 0840 00               		dc.b $30, $F, 8, $40, 0
00010577 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0001057C 500F 0840 00               		dc.b $50, $F, 8, $40, 0
00010581 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
00010586 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0001058B 10                         byte_F44D:	dc.b $10
0001058C 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
00010591 900F 0850 00               		dc.b $90, $F, 8, $50, 0
00010596 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0001059B B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
000105A0 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
000105A5 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
000105AA F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
000105AF F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
000105B4 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
000105B9 100F 0850 00               		dc.b $10, $F, 8, $50, 0
000105BE 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
000105C3 300F 0850 00               		dc.b $30, $F, 8, $50, 0
000105C8 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
000105CD 500F 0850 00               		dc.b $50, $F, 8, $50, 0
000105D2 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
000105D7 700F 0850 00               		dc.b $70, $F, 8, $50, 0
000105DC 10                         byte_F49E:	dc.b $10
000105DD 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
000105E2 900F 0860 00               		dc.b $90, $F, 8, $60, 0
000105E7 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
000105EC B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
000105F1 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
000105F6 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
000105FB F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
00010600 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
00010605 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0001060A 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0001060F 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
00010614 300F 0860 00               		dc.b $30, $F, 8, $60, 0
00010619 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0001061E 500F 0860 00               		dc.b $50, $F, 8, $60, 0
00010623 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
00010628 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0001062D 06                         byte_F4EF:	dc.b 6
0001062E E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
00010633 E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
00010638 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0001063D E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
00010642 D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
00010647 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0001064C 06                         byte_F50E:	dc.b 6
0001064D E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
00010652 E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
00010657 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0001065C E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
00010661 D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
00010666 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0001066B 00                         byte_F52D:	dc.b 0
0001066C                            		even
0001066C                            		even
0001066C                            
0001066C                            ; ---------------------------------------------------------------------------
0001066C                            ; Sprite mappings - advancing wall of lava (MZ)
0001066C                            ; ---------------------------------------------------------------------------
0001066C                            Map_obj4E:
0001066C                            	include "_maps\obj4E.asm"
0001066C                            ; ---------------------------------------------------------------------------
0001066C                            ; Sprite mappings - advancing wall of lava (MZ)
0001066C                            ; ---------------------------------------------------------------------------
0001066C 0000                       		dc.w byte_F538-Map_obj4E
0001066E 0000                       		dc.w byte_F566-Map_obj4E
00010670 0000                       		dc.w byte_F594-Map_obj4E
00010672 0000                       		dc.w byte_F5C2-Map_obj4E
00010674 0000                       		dc.w byte_F5F0-Map_obj4E
00010676 09                         byte_F538:	dc.b 9
00010677 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0001067C 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
00010681 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010686 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001068B 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010690 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010695 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001069A E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0001069F 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000106A4 09                         byte_F566:	dc.b 9
000106A5 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
000106AA 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
000106AF 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000106B4 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000106B9 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000106BE E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000106C3 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000106C8 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000106CD 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
000106D2 09                         byte_F594:	dc.b 9
000106D3 E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
000106D8 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
000106DD 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
000106E2 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
000106E7 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
000106EC E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
000106F1 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
000106F6 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
000106FB 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010700 09                         byte_F5C2:	dc.b 9
00010701 E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
00010706 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0001070B 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010710 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
00010715 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0001071A E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0001071F 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
00010724 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010729 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0001072E 08                         byte_F5F0:	dc.b 8
0001072F E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
00010734 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
00010739 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0001073E 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
00010743 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
00010748 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0001074D E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
00010752 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
00010758 00                         		even
00010758 00                         		even
00010758                            
00010758                            ; ===========================================================================
00010758                            ; ---------------------------------------------------------------------------
00010758                            ; Object 40 - Moto Bug enemy (GHZ)
00010758                            ; ---------------------------------------------------------------------------
00010758                            
00010758                            Obj40:					; XREF: Obj_Index
00010758 7000                       		moveq	#0,d0
0001075A 1028 0024                  		move.b	$24(a0),d0
0001075E 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
00010762 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
00010766                            ; ===========================================================================
00010766 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
00010768 0000                       		dc.w Obj40_Action-Obj40_Index
0001076A 0000                       		dc.w Obj40_Animate-Obj40_Index
0001076C 0000                       		dc.w Obj40_Delete-Obj40_Index
0001076E                            ; ===========================================================================
0001076E                            
0001076E                            Obj40_Main:				; XREF: Obj40_Index
0001076E 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
00010776 317C 04F0 0002             		move.w	#$4F0,2(a0)
0001077C 117C 0004 0001             		move.b	#4,1(a0)
00010782 117C 0004 0018             		move.b	#4,$18(a0)
00010788 117C 0014 0019             		move.b	#$14,$19(a0)
0001078E 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
00010792 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
00010794 117C 000E 0016             		move.b	#$E,$16(a0)
0001079A 117C 0008 0017             		move.b	#8,$17(a0)
000107A0 117C 000C 0020             		move.b	#$C,$20(a0)
000107A6 6100 DF02                  		bsr.w	ObjectFall
000107AA 4EB9 0000 0000             		jsr	ObjHitFloor
000107B0 4A41                       		tst.w	d1
000107B2 6A00                       		bpl.s	locret_F68A
000107B4 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000107B8 317C 0000 0012             		move.w	#0,$12(a0)
000107BE 5428 0024                  		addq.b	#2,$24(a0)
000107C2 0868 0000 0022             		bchg	#0,$22(a0)
000107C8                            
000107C8                            locret_F68A:
000107C8 4E75                       		rts	
000107CA                            ; ===========================================================================
000107CA                            
000107CA                            Obj40_SetSmoke:				; XREF: Obj40_Main
000107CA 5828 0024                  		addq.b	#4,$24(a0)
000107CE 6000 0000                  		bra.w	Obj40_Animate
000107D2                            ; ===========================================================================
000107D2                            
000107D2                            Obj40_Action:				; XREF: Obj40_Index
000107D2 7000                       		moveq	#0,d0
000107D4 1028 0025                  		move.b	$25(a0),d0
000107D8 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
000107DC 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
000107E0 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000107E6 6100 AFA8                  		bsr.w	AnimateSprite
000107EA                            
000107EA                            ; ---------------------------------------------------------------------------
000107EA                            ; Routine to mark an enemy/monitor/ring	as destroyed
000107EA                            ; ---------------------------------------------------------------------------
000107EA                            
000107EA                            MarkObjGone:
000107EA 3028 0008                  		move.w	8(a0),d0
000107EE 0240 FF80                  		andi.w	#$FF80,d0
000107F2 3238 F700                  		move.w	($FFFFF700).w,d1
000107F6 0441 0080                  		subi.w	#$80,d1
000107FA 0241 FF80                  		andi.w	#$FF80,d1
000107FE 9041                       		sub.w	d1,d0
00010800 0C40 0280                  		cmpi.w	#$280,d0
00010804 6200 0000                  		bhi.w	Mark_ChkGone
00010808 6000 DF38                  		bra.w	DisplaySprite
0001080C                            ; ===========================================================================
0001080C                            
0001080C                            Mark_ChkGone:
0001080C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010810 7000                       		moveq	#0,d0
00010812 1028 0023                  		move.b	$23(a0),d0
00010816 6700                       		beq.s	Mark_Delete
00010818 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0001081E                            
0001081E                            Mark_Delete:
0001081E 6000 DF5E                  		bra.w	DeleteObject
00010822                            
00010822                            ; ===========================================================================
00010822 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
00010824 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
00010826                            ; ===========================================================================
00010826                            
00010826                            Obj40_Move:				; XREF: Obj40_Index2
00010826 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0001082A 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0001082C 5428 0025                  		addq.b	#2,$25(a0)
00010830 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
00010836 117C 0001 001C             		move.b	#1,$1C(a0)
0001083C 0868 0000 0022             		bchg	#0,$22(a0)
00010842 6600                       		bne.s	locret_F70A
00010844 4468 0010                  		neg.w	$10(a0)		; change direction
00010848                            
00010848                            locret_F70A:
00010848 4E75                       		rts	
0001084A                            ; ===========================================================================
0001084A                            
0001084A                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0001084A 6100 DED0                  		bsr.w	SpeedToPos
0001084E 4EB9 0000 0000             		jsr	ObjHitFloor
00010854 0C41 FFF8                  		cmpi.w	#-8,d1
00010858 6D00                       		blt.s	Obj40_Pause
0001085A 0C41 000C                  		cmpi.w	#$C,d1
0001085E 6C00                       		bge.s	Obj40_Pause
00010860 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
00010864 5328 0033                  		subq.b	#1,$33(a0)
00010868 6A00                       		bpl.s	locret_F756
0001086A 117C 000F 0033             		move.b	#$F,$33(a0)
00010870 6100 E356                  		bsr.w	SingleObjLoad
00010874 6600                       		bne.s	locret_F756
00010876 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0001087A 3368 0008 0008             		move.w	8(a0),8(a1)
00010880 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010886 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001088C 137C 0002 001C             		move.b	#2,$1C(a1)
00010892                            
00010892                            locret_F756:
00010892 4E75                       		rts	
00010894                            ; ===========================================================================
00010894                            
00010894                            Obj40_Pause:				; XREF: Obj40_FixToFloor
00010894 5528 0025                  		subq.b	#2,$25(a0)
00010898 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0001089E 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
000108A4 117C 0000 001C             		move.b	#0,$1C(a0)
000108AA 4E75                       		rts	
000108AC                            ; ===========================================================================
000108AC                            
000108AC                            Obj40_Animate:				; XREF: Obj40_Index
000108AC 43F9 0000 0000             		lea	(Ani_obj40).l,a1
000108B2 6100 AEDC                  		bsr.w	AnimateSprite
000108B6 6000 DE8A                  		bra.w	DisplaySprite
000108BA                            ; ===========================================================================
000108BA                            
000108BA                            Obj40_Delete:				; XREF: Obj40_Index
000108BA 6000 DEC2                  		bra.w	DeleteObject
000108BE                            ; ===========================================================================
000108BE                            Ani_obj40:
000108BE                            	include "_anim\obj40.asm"
000108BE                            ; ---------------------------------------------------------------------------
000108BE                            ; Animation script - Motobug enemy
000108BE                            ; ---------------------------------------------------------------------------
000108BE 0000                       		dc.w byte_F788-Ani_obj40
000108C0 0000                       		dc.w byte_F78C-Ani_obj40
000108C2 0000                       		dc.w byte_F792-Ani_obj40
000108C4 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
000108C8 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
000108CE 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
000108DC                            		even
000108DC                            		even
000108DC                            
000108DC                            ; ---------------------------------------------------------------------------
000108DC                            ; Sprite mappings - Moto Bug enemy (GHZ)
000108DC                            ; ---------------------------------------------------------------------------
000108DC                            Map_obj40:
000108DC                            	include "_maps\obj40.asm"
000108DC                            Map_cedc:
000108DC 0000                       Map_cedc_0: 	dc.w Map_cedc_E-Map_cedc
000108DE 0000                       Map_cedc_2: 	dc.w Map_cedc_23-Map_cedc
000108E0 0000                       Map_cedc_4: 	dc.w Map_cedc_38-Map_cedc
000108E2 0000                       Map_cedc_6: 	dc.w Map_cedc_52-Map_cedc
000108E4 0000                       Map_cedc_8: 	dc.w Map_cedc_58-Map_cedc
000108E6 0000                       Map_cedc_A: 	dc.w Map_cedc_5E-Map_cedc
000108E8 0000                       Map_cedc_C: 	dc.w Map_cedc_64-Map_cedc
000108EA 04                         Map_cedc_E: 	dc.b $4
000108EB F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
000108F0 000C 0008 EC               	dc.b $0, $C, $0, $8, $EC
000108F5 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000108FA 0808 000E F4               	dc.b $8, $8, $0, $E, $F4
000108FF 04                         Map_cedc_23: 	dc.b $4
00010900 F10D 0000 EC               	dc.b $F1, $D, $0, $0, $EC
00010905 010C 0008 EC               	dc.b $1, $C, $0, $8, $EC
0001090A F901 000C 0C               	dc.b $F9, $1, $0, $C, $C
0001090F 0908 0011 F4               	dc.b $9, $8, $0, $11, $F4
00010914 05                         Map_cedc_38: 	dc.b $5
00010915 F00D 0000 EC               	dc.b $F0, $D, $0, $0, $EC
0001091A 000C 0014 EC               	dc.b $0, $C, $0, $14, $EC
0001091F F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00010924 0804 0018 EC               	dc.b $8, $4, $0, $18, $EC
00010929 0804 0012 FC               	dc.b $8, $4, $0, $12, $FC
0001092E 01                         Map_cedc_52: 	dc.b $1
0001092F FA00 001A 10               	dc.b $FA, $0, $0, $1A, $10
00010934 01                         Map_cedc_58: 	dc.b $1
00010935 FA00 001B 10               	dc.b $FA, $0, $0, $1B, $10
0001093A 01                         Map_cedc_5E: 	dc.b $1
0001093B FA00 001C 10               	dc.b $FA, $0, $0, $1C, $10
00010940 00                         Map_cedc_64: 	dc.b $0
00010942 00                         	even
00010942 00                         	even
00010942                            
00010942                            ; ===========================================================================
00010942                            ; ---------------------------------------------------------------------------
00010942                            ; Object 4F - blank
00010942                            ; ---------------------------------------------------------------------------
00010942                            
00010942                            Obj4F:					; XREF: Obj_Index
00010942 4E75                       		rts	
00010944                            
00010944                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010944                            
00010944                            
00010944                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
00010944 3038 FE04                  		move.w	($FFFFFE04).w,d0
00010948 D047                       		add.w	d7,d0
0001094A 0240 0003                  		andi.w	#3,d0
0001094E 6600                       		bne.s	loc_F836
00010950 7600                       		moveq	#0,d3
00010952 1628 0019                  		move.b	$19(a0),d3
00010956 4A68 0010                  		tst.w	$10(a0)
0001095A 6B00                       		bmi.s	loc_F82C
0001095C 6100 0000                  		bsr.w	ObjHitWallRight
00010960 4A41                       		tst.w	d1
00010962 6A00                       		bpl.s	loc_F836
00010964                            
00010964                            loc_F828:
00010964 7001                       		moveq	#1,d0
00010966 4E75                       		rts	
00010968                            ; ===========================================================================
00010968                            
00010968                            loc_F82C:
00010968 4643                       		not.w	d3
0001096A 6100 0000                  		bsr.w	ObjHitWallLeft
0001096E 4A41                       		tst.w	d1
00010970 6BF2                       		bmi.s	loc_F828
00010972                            
00010972                            loc_F836:
00010972 7000                       		moveq	#0,d0
00010974 4E75                       		rts	
00010976                            ; End of function Obj50_ChkWall
00010976                            
00010976                            ; ===========================================================================
00010976                            ; ---------------------------------------------------------------------------
00010976                            ; Object 50 - Yadrin enemy (SYZ)
00010976                            ; ---------------------------------------------------------------------------
00010976                            
00010976                            Obj50:					; XREF: Obj_Index
00010976 7000                       		moveq	#0,d0
00010978 1028 0024                  		move.b	$24(a0),d0
0001097C 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
00010980 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
00010984                            ; ===========================================================================
00010984 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
00010986 0000                       		dc.w Obj50_Action-Obj50_Index
00010988                            ; ===========================================================================
00010988                            
00010988                            Obj50_Main:				; XREF: Obj50_Index
00010988 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
00010990 317C 247B 0002             		move.w	#$247B,2(a0)
00010996 117C 0004 0001             		move.b	#4,1(a0)
0001099C 117C 0004 0018             		move.b	#4,$18(a0)
000109A2 117C 0014 0019             		move.b	#$14,$19(a0)
000109A8 117C 0011 0016             		move.b	#$11,$16(a0)
000109AE 117C 0008 0017             		move.b	#8,$17(a0)
000109B4 117C 00CC 0020             		move.b	#$CC,$20(a0)
000109BA 6100 DCEE                  		bsr.w	ObjectFall
000109BE 6100 0000                  		bsr.w	ObjHitFloor
000109C2 4A41                       		tst.w	d1
000109C4 6A00                       		bpl.s	locret_F89E
000109C6 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
000109CA 317C 0000 0012             		move.w	#0,$12(a0)
000109D0 5428 0024                  		addq.b	#2,$24(a0)
000109D4 0868 0000 0022             		bchg	#0,$22(a0)
000109DA                            
000109DA                            locret_F89E:
000109DA 4E75                       		rts	
000109DC                            ; ===========================================================================
000109DC                            
000109DC                            Obj50_Action:				; XREF: Obj50_Index
000109DC 7000                       		moveq	#0,d0
000109DE 1028 0025                  		move.b	$25(a0),d0
000109E2 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
000109E6 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
000109EA 43F9 0000 0000             		lea	(Ani_obj50).l,a1
000109F0 6100 AD9E                  		bsr.w	AnimateSprite
000109F4 6000 FDF4                  		bra.w	MarkObjGone
000109F8                            ; ===========================================================================
000109F8 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
000109FA 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
000109FC                            ; ===========================================================================
000109FC                            
000109FC                            Obj50_Move:				; XREF: Obj50_Index2
000109FC 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
00010A00 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
00010A02 5428 0025                  		addq.b	#2,$25(a0)
00010A06 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
00010A0C 117C 0001 001C             		move.b	#1,$1C(a0)
00010A12 0868 0000 0022             		bchg	#0,$22(a0)
00010A18 6600                       		bne.s	locret_F8E2
00010A1A 4468 0010                  		neg.w	$10(a0)		; change direction
00010A1E                            
00010A1E                            locret_F8E2:
00010A1E 4E75                       		rts	
00010A20                            ; ===========================================================================
00010A20                            
00010A20                            Obj50_FixToFloor:			; XREF: Obj50_Index2
00010A20 6100 DCFA                  		bsr.w	SpeedToPos
00010A24 6100 0000                  		bsr.w	ObjHitFloor
00010A28 0C41 FFF8                  		cmpi.w	#-8,d1
00010A2C 6D00                       		blt.s	Obj50_Pause
00010A2E 0C41 000C                  		cmpi.w	#$C,d1
00010A32 6C00                       		bge.s	Obj50_Pause
00010A34 D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
00010A38 6100 FF0A                  		bsr.w	Obj50_ChkWall
00010A3C 6600                       		bne.s	Obj50_Pause
00010A3E 4E75                       		rts	
00010A40                            ; ===========================================================================
00010A40                            
00010A40                            Obj50_Pause:				; XREF: Obj50_FixToFloor
00010A40 5528 0025                  		subq.b	#2,$25(a0)
00010A44 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
00010A4A 317C 0000 0010             		move.w	#0,$10(a0)
00010A50 117C 0000 001C             		move.b	#0,$1C(a0)
00010A56 4E75                       		rts	
00010A58                            ; ===========================================================================
00010A58                            Ani_obj50:
00010A58                            	include "_anim\obj50.asm"
00010A58                            ; ---------------------------------------------------------------------------
00010A58                            ; Animation script - Yadrin enemy
00010A58                            ; ---------------------------------------------------------------------------
00010A58 0000                       		dc.w byte_F920-Ani_obj50
00010A5A 0000                       		dc.w byte_F924-Ani_obj50
00010A5C 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
00010A60 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
00010A6A                            		even
00010A6A                            		even
00010A6A                            
00010A6A                            ; ---------------------------------------------------------------------------
00010A6A                            ; Sprite mappings - Yadrin enemy (SYZ)
00010A6A                            ; ---------------------------------------------------------------------------
00010A6A                            Map_obj50:
00010A6A                            	include "_maps\obj50.asm"
00010A6A                            Map_ff24:
00010A6A 0000                       Map_ff24_0: 	dc.w Map_ff24_C-Map_ff24
00010A6C 0000                       Map_ff24_2: 	dc.w Map_ff24_26-Map_ff24
00010A6E 0000                       Map_ff24_4: 	dc.w Map_ff24_40-Map_ff24
00010A70 0000                       Map_ff24_6: 	dc.w Map_ff24_5A-Map_ff24
00010A72 0000                       Map_ff24_8: 	dc.w Map_ff24_74-Map_ff24
00010A74 0000                       Map_ff24_A: 	dc.w Map_ff24_8E-Map_ff24
00010A76 05                         Map_ff24_C: 	dc.b $5
00010A77 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010A7C FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010A81 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010A86 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010A8B 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010A90 05                         Map_ff24_26: 	dc.b $5
00010A91 F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010A96 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010A9B EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AA0 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010AA5 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010AAA 05                         Map_ff24_40: 	dc.b $5
00010AAB F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010AB0 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010AB5 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010ABA F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010ABF 0409 0031 FC               	dc.b $4, $9, $0, $31, $FC
00010AC4 05                         Map_ff24_5A: 	dc.b $5
00010AC5 F408 0000 F4               	dc.b $F4, $8, $0, $0, $F4
00010ACA FC0E 0003 EC               	dc.b $FC, $E, $0, $3, $EC
00010ACF EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AD4 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010AD9 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010ADE 05                         Map_ff24_74: 	dc.b $5
00010ADF F408 0014 F4               	dc.b $F4, $8, $0, $14, $F4
00010AE4 FC0E 0017 EC               	dc.b $FC, $E, $0, $17, $EC
00010AE9 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010AEE F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010AF3 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010AF8 05                         Map_ff24_8E: 	dc.b $5
00010AF9 F409 0023 F4               	dc.b $F4, $9, $0, $23, $F4
00010AFE 040D 0029 EC               	dc.b $4, $D, $0, $29, $EC
00010B03 EC04 000F FC               	dc.b $EC, $4, $0, $F, $FC
00010B08 F402 0011 0C               	dc.b $F4, $2, $0, $11, $C
00010B0D 0409 0037 FC               	dc.b $4, $9, $0, $37, $FC
00010B12                            	even
00010B12                            	even
00010B12                            
00010B12                            ; ---------------------------------------------------------------------------
00010B12                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
00010B12                            ;
00010B12                            ; variables:
00010B12                            ; d1 = width
00010B12                            ; d2 = height /	2 (when	jumping)
00010B12                            ; d3 = height /	2 (when	walking)
00010B12                            ; d4 = x-axis position
00010B12                            ; ---------------------------------------------------------------------------
00010B12                            
00010B12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010B12                            
00010B12                            
00010B12                            SolidObject:
00010B12 4A28 0025                  		tst.b	$25(a0)
00010B16 6700 0000                  		beq.w	loc_FAC8
00010B1A 3401                       		move.w	d1,d2
00010B1C D442                       		add.w	d2,d2
00010B1E 43F8 D000                  		lea	($FFFFD000).w,a1
00010B22 0829 0001 0022             		btst	#1,$22(a1)
00010B28 6600                       		bne.s	loc_F9FE
00010B2A 3029 0008                  		move.w	8(a1),d0
00010B2E 9068 0008                  		sub.w	8(a0),d0
00010B32 D041                       		add.w	d1,d0
00010B34 6B00                       		bmi.s	loc_F9FE
00010B36 B042                       		cmp.w	d2,d0
00010B38 6500                       		bcs.s	loc_FA12
00010B3A                            
00010B3A                            loc_F9FE:
00010B3A 08A9 0003 0022             		bclr	#3,$22(a1)
00010B40 08A8 0003 0022             		bclr	#3,$22(a0)
00010B46 4228 0025                  		clr.b	$25(a0)
00010B4A 7800                       		moveq	#0,d4
00010B4C 4E75                       		rts	
00010B4E                            ; ===========================================================================
00010B4E                            
00010B4E                            loc_FA12:
00010B4E 3404                       		move.w	d4,d2
00010B50 4EB9 0000 8A1E             		jsr	MvSonicOnPtfm 
00010B56 7800                       		moveq	#0,d4
00010B58 4E75                       		rts	
00010B5A                            ; ===========================================================================
00010B5A                            
00010B5A                            SolidObject71:				; XREF: Obj71_Solid
00010B5A 4A28 0025                  		tst.b	$25(a0)
00010B5E 6700 0000                  		beq.w	loc_FAD0
00010B62 3401                       		move.w	d1,d2
00010B64 D442                       		add.w	d2,d2
00010B66 43F8 D000                  		lea	($FFFFD000).w,a1
00010B6A 0829 0001 0022             		btst	#1,$22(a1)
00010B70 6600                       		bne.s	loc_FA44
00010B72 3029 0008                  		move.w	8(a1),d0
00010B76 9068 0008                  		sub.w	8(a0),d0
00010B7A D041                       		add.w	d1,d0
00010B7C 6B00                       		bmi.s	loc_FA44
00010B7E B042                       		cmp.w	d2,d0
00010B80 6500                       		bcs.s	loc_FA58
00010B82                            
00010B82                            loc_FA44:
00010B82 08A9 0003 0022             		bclr	#3,$22(a1)
00010B88 08A8 0003 0022             		bclr	#3,$22(a0)
00010B8E 4228 0025                  		clr.b	$25(a0)
00010B92 7800                       		moveq	#0,d4
00010B94 4E75                       		rts	
00010B96                            ; ===========================================================================
00010B96                            
00010B96                            loc_FA58:
00010B96 3404                       		move.w	d4,d2
00010B98                            	;	bsr.w	MvSonicOnPtfm  Causes an error in building (Come back to this)
00010B98 7800                       		moveq	#0,d4
00010B9A 4E75                       		rts	
00010B9C                            ; ===========================================================================
00010B9C                            
00010B9C                            SolidObject2F:				; XREF: Obj2F_Solid
00010B9C 43F8 D000                  		lea	($FFFFD000).w,a1
00010BA0 4A28 0001                  		tst.b	1(a0)
00010BA4 6A00 0000                  		bpl.w	loc_FB92
00010BA8 3029 0008                  		move.w	8(a1),d0
00010BAC 9068 0008                  		sub.w	8(a0),d0
00010BB0 D041                       		add.w	d1,d0
00010BB2 6B00 0000                  		bmi.w	loc_FB92
00010BB6 3601                       		move.w	d1,d3
00010BB8 D643                       		add.w	d3,d3
00010BBA B043                       		cmp.w	d3,d0
00010BBC 6200 0000                  		bhi.w	loc_FB92
00010BC0 3A00                       		move.w	d0,d5
00010BC2 0828 0000 0001             		btst	#0,1(a0)
00010BC8 6700                       		beq.s	loc_FA94
00010BCA 4645                       		not.w	d5
00010BCC DA43                       		add.w	d3,d5
00010BCE                            
00010BCE                            loc_FA94:
00010BCE E24D                       		lsr.w	#1,d5
00010BD0 7600                       		moveq	#0,d3
00010BD2 1632 5000                  		move.b	(a2,d5.w),d3
00010BD6 9612                       		sub.b	(a2),d3
00010BD8 3A28 000C                  		move.w	$C(a0),d5
00010BDC 9A43                       		sub.w	d3,d5
00010BDE 1629 0016                  		move.b	$16(a1),d3
00010BE2 4883                       		ext.w	d3
00010BE4 D443                       		add.w	d3,d2
00010BE6 3629 000C                  		move.w	$C(a1),d3
00010BEA 9645                       		sub.w	d5,d3
00010BEC 5843                       		addq.w	#4,d3
00010BEE D642                       		add.w	d2,d3
00010BF0 6B00 0000                  		bmi.w	loc_FB92
00010BF4 3802                       		move.w	d2,d4
00010BF6 D844                       		add.w	d4,d4
00010BF8 B644                       		cmp.w	d4,d3
00010BFA 6400 0000                  		bcc.w	loc_FB92
00010BFE 6000 0000                  		bra.w	loc_FB0E
00010C02                            ; ===========================================================================
00010C02                            
00010C02                            loc_FAC8:
00010C02 4A28 0001                  		tst.b	1(a0)
00010C06 6A00 0000                  		bpl.w	loc_FB92
00010C0A                            
00010C0A                            loc_FAD0:
00010C0A 43F8 D000                  		lea	($FFFFD000).w,a1
00010C0E 3029 0008                  		move.w	8(a1),d0
00010C12 9068 0008                  		sub.w	8(a0),d0
00010C16 D041                       		add.w	d1,d0
00010C18 6B00 0000                  		bmi.w	loc_FB92
00010C1C 3601                       		move.w	d1,d3
00010C1E D643                       		add.w	d3,d3
00010C20 B043                       		cmp.w	d3,d0
00010C22 6200 0000                  		bhi.w	loc_FB92
00010C26 1629 0016                  		move.b	$16(a1),d3
00010C2A 4883                       		ext.w	d3
00010C2C D443                       		add.w	d3,d2
00010C2E 3629 000C                  		move.w	$C(a1),d3
00010C32 9668 000C                  		sub.w	$C(a0),d3
00010C36 5843                       		addq.w	#4,d3
00010C38 D642                       		add.w	d2,d3
00010C3A 6B00 0000                  		bmi.w	loc_FB92
00010C3E 3802                       		move.w	d2,d4
00010C40 D844                       		add.w	d4,d4
00010C42 B644                       		cmp.w	d4,d3
00010C44 6400 0000                  		bcc.w	loc_FB92
00010C48                            
00010C48                            loc_FB0E:
00010C48 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00010C4C 6B00 0000                  		bmi.w	loc_FB92
00010C50 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00010C56 6400 0000                  		bcc.w	loc_FB92
00010C5A 4A78 FE08                  		tst.w	($FFFFFE08).w
00010C5E 6600 0000                  		bne.w	loc_FBAC
00010C62 3A00                       		move.w	d0,d5
00010C64 B240                       		cmp.w	d0,d1
00010C66 6400                       		bcc.s	loc_FB36
00010C68 D241                       		add.w	d1,d1
00010C6A 9041                       		sub.w	d1,d0
00010C6C 3A00                       		move.w	d0,d5
00010C6E 4445                       		neg.w	d5
00010C70                            
00010C70                            loc_FB36:
00010C70 3203                       		move.w	d3,d1
00010C72 B443                       		cmp.w	d3,d2
00010C74 6400                       		bcc.s	loc_FB44
00010C76 5943                       		subq.w	#4,d3
00010C78 9644                       		sub.w	d4,d3
00010C7A 3203                       		move.w	d3,d1
00010C7C 4441                       		neg.w	d1
00010C7E                            
00010C7E                            loc_FB44:
00010C7E BA41                       		cmp.w	d1,d5
00010C80 6200 0000                  		bhi.w	loc_FBB0
00010C84 0C41 0004                  		cmpi.w	#4,d1
00010C88 6300                       		bls.s	loc_FB8C
00010C8A 4A40                       		tst.w	d0
00010C8C 6700                       		beq.s	loc_FB70
00010C8E 6B00                       		bmi.s	loc_FB5E
00010C90 4A69 0010                  		tst.w	$10(a1)
00010C94 6B00                       		bmi.s	loc_FB70
00010C96 6000                       		bra.s	loc_FB64
00010C98                            ; ===========================================================================
00010C98                            
00010C98                            loc_FB5E:
00010C98 4A69 0010                  		tst.w	$10(a1)
00010C9C 6A00                       		bpl.s	loc_FB70
00010C9E                            
00010C9E                            loc_FB64:
00010C9E 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
00010CA4 337C 0000 0010             		move.w	#0,$10(a1)
00010CAA                            
00010CAA                            loc_FB70:
00010CAA 9169 0008                  		sub.w	d0,8(a1)
00010CAE 0829 0001 0022             		btst	#1,$22(a1)
00010CB4 6600                       		bne.s	loc_FB8C
00010CB6 08E9 0005 0022             		bset	#5,$22(a1)
00010CBC 08E8 0005 0022             		bset	#5,$22(a0)
00010CC2 7801                       		moveq	#1,d4
00010CC4 4E75                       		rts	
00010CC6                            ; ===========================================================================
00010CC6                            
00010CC6                            loc_FB8C:
00010CC6 6100                       		bsr.s	loc_FBA0
00010CC8 7801                       		moveq	#1,d4
00010CCA 4E75                       		rts	
00010CCC                            ; ===========================================================================
00010CCC                            
00010CCC                            loc_FB92:
00010CCC 0828 0005 0022             		btst	#5,$22(a0)
00010CD2 6700                       		beq.s	loc_FBAC
00010CD4 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
00010CDA                            
00010CDA                            loc_FBA0:
00010CDA 08A8 0005 0022             		bclr	#5,$22(a0)
00010CE0 08A9 0005 0022             		bclr	#5,$22(a1)
00010CE6                            
00010CE6                            loc_FBAC:
00010CE6 7800                       		moveq	#0,d4
00010CE8 4E75                       		rts	
00010CEA                            ; ===========================================================================
00010CEA                            
00010CEA                            loc_FBB0:
00010CEA 4A43                       		tst.w	d3
00010CEC 6B00                       		bmi.s	loc_FBBC
00010CEE 0C43 0010                  		cmpi.w	#$10,d3
00010CF2 6500                       		bcs.s	loc_FBEE
00010CF4 60D6                       		bra.s	loc_FB92
00010CF6                            ; ===========================================================================
00010CF6                            
00010CF6                            loc_FBBC:
00010CF6 4A69 0012                  		tst.w	$12(a1)
00010CFA 6700                       		beq.s	loc_FBD6
00010CFC 6A00                       		bpl.s	loc_FBD2
00010CFE 4A43                       		tst.w	d3
00010D00 6A00                       		bpl.s	loc_FBD2
00010D02 9769 000C                  		sub.w	d3,$C(a1)
00010D06 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
00010D0C                            
00010D0C                            loc_FBD2:
00010D0C 78FF                       		moveq	#-1,d4
00010D0E 4E75                       		rts	
00010D10                            ; ===========================================================================
00010D10                            
00010D10                            loc_FBD6:
00010D10 0829 0001 0022             		btst	#1,$22(a1)
00010D16 66F4                       		bne.s	loc_FBD2
00010D18 2F08                       		move.l	a0,-(sp)
00010D1A 2049                       		movea.l	a1,a0
00010D1C 4EB9 0000 0000             		jsr	KillSonic
00010D22 205F                       		movea.l	(sp)+,a0
00010D24 78FF                       		moveq	#-1,d4
00010D26 4E75                       		rts	
00010D28                            ; ===========================================================================
00010D28                            
00010D28                            loc_FBEE:
00010D28 5943                       		subq.w	#4,d3
00010D2A 7200                       		moveq	#0,d1
00010D2C 1228 0019                  		move.b	$19(a0),d1
00010D30 3401                       		move.w	d1,d2
00010D32 D442                       		add.w	d2,d2
00010D34 D269 0008                  		add.w	8(a1),d1
00010D38 9268 0008                  		sub.w	8(a0),d1
00010D3C 6B00                       		bmi.s	loc_FC28
00010D3E B242                       		cmp.w	d2,d1
00010D40 6400                       		bcc.s	loc_FC28
00010D42 4A69 0012                  		tst.w	$12(a1)
00010D46 6B00                       		bmi.s	loc_FC28
00010D48 9769 000C                  		sub.w	d3,$C(a1)
00010D4C 5369 000C                  		subq.w	#1,$C(a1)
00010D50 6100                       		bsr.s	sub_FC2C
00010D52 117C 0002 0025             		move.b	#2,$25(a0)
00010D58 08E8 0003 0022             		bset	#3,$22(a0)
00010D5E 78FF                       		moveq	#-1,d4
00010D60 4E75                       		rts	
00010D62                            ; ===========================================================================
00010D62                            
00010D62                            loc_FC28:
00010D62 7800                       		moveq	#0,d4
00010D64 4E75                       		rts	
00010D66                            ; End of function SolidObject
00010D66                            
00010D66                            
00010D66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010D66                            
00010D66                            
00010D66                            sub_FC2C:				; XREF: SolidObject
00010D66 0829 0003 0022             		btst	#3,$22(a1)
00010D6C 6700                       		beq.s	loc_FC4E
00010D6E 7000                       		moveq	#0,d0
00010D70 1029 003D                  		move.b	$3D(a1),d0
00010D74 ED48                       		lsl.w	#6,d0
00010D76 0680 00FF D000             		addi.l	#$FFD000,d0
00010D7C 2440                       		movea.l	d0,a2
00010D7E 08AA 0003 0022             		bclr	#3,$22(a2)
00010D84 422A 0025                  		clr.b	$25(a2)
00010D88                            
00010D88                            loc_FC4E:
00010D88 3008                       		move.w	a0,d0
00010D8A 0440 D000                  		subi.w	#-$3000,d0
00010D8E EC48                       		lsr.w	#6,d0
00010D90 0240 007F                  		andi.w	#$7F,d0
00010D94 1340 003D                  		move.b	d0,$3D(a1)
00010D98 137C 0000 0026             		move.b	#0,$26(a1)
00010D9E 337C 0000 0012             		move.w	#0,$12(a1)
00010DA4 3369 0010 0014             		move.w	$10(a1),$14(a1)
00010DAA 0829 0001 0022             		btst	#1,$22(a1)
00010DB0 6700                       		beq.s	loc_FC84
00010DB2 2F08                       		move.l	a0,-(sp)
00010DB4 2049                       		movea.l	a1,a0
00010DB6 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
00010DBC 205F                       		movea.l	(sp)+,a0
00010DBE                            
00010DBE                            loc_FC84:
00010DBE 08E9 0003 0022             		bset	#3,$22(a1)
00010DC4 08E8 0003 0022             		bset	#3,$22(a0)
00010DCA 4E75                       		rts	
00010DCC                            ; End of function sub_FC2C
00010DCC                            
00010DCC                            ; ===========================================================================
00010DCC                            ; ---------------------------------------------------------------------------
00010DCC                            ; Object 51 - smashable	green block (MZ)
00010DCC                            ; ---------------------------------------------------------------------------
00010DCC                            
00010DCC                            Obj51:					; XREF: Obj_Index
00010DCC 7000                       		moveq	#0,d0
00010DCE 1028 0024                  		move.b	$24(a0),d0
00010DD2 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
00010DD6 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
00010DDA 6000 FA0E                  		bra.w	MarkObjGone
00010DDE                            ; ===========================================================================
00010DDE 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
00010DE0 0000                       		dc.w Obj51_Solid-Obj51_Index
00010DE2 0000                       		dc.w Obj51_Display-Obj51_Index
00010DE4                            ; ===========================================================================
00010DE4                            
00010DE4                            Obj51_Main:				; XREF: Obj51_Index
00010DE4 5428 0024                  		addq.b	#2,$24(a0)
00010DE8 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
00010DF0 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010DF6 117C 0004 0001             		move.b	#4,1(a0)
00010DFC 117C 0010 0019             		move.b	#$10,$19(a0)
00010E02 117C 0004 0018             		move.b	#4,$18(a0)
00010E08 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00010E0E                            
00010E0E                            Obj51_Solid:				; XREF: Obj51_Index
00010E0E 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
00010E14 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
00010E1A 323C 001B                  		move.w	#$1B,d1
00010E1E 343C 0010                  		move.w	#$10,d2
00010E22 363C 0011                  		move.w	#$11,d3
00010E26 3828 0008                  		move.w	8(a0),d4
00010E2A 6100 FCE6                  		bsr.w	SolidObject
00010E2E 0828 0003 0022             		btst	#3,$22(a0)
00010E34 6600                       		bne.s	Obj51_Smash
00010E36                            
00010E36                            locret_FCFC:
00010E36 4E75                       		rts	
00010E38                            ; ===========================================================================
00010E38                            
00010E38                            Obj51_Smash:				; XREF: Obj51_Solid
00010E38 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
00010E3E 66F6                       		bne.s	locret_FCFC	; if not, branch
00010E40 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
00010E46 08E9 0002 0022             		bset	#2,$22(a1)
00010E4C 137C 000E 0016             		move.b	#$E,$16(a1)
00010E52 137C 0007 0017             		move.b	#7,$17(a1)
00010E58 137C 0002 001C             		move.b	#2,$1C(a1)
00010E5E 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
00010E64 08E9 0001 0022             		bset	#1,$22(a1)
00010E6A 08A9 0003 0022             		bclr	#3,$22(a1)
00010E70 137C 0002 0024             		move.b	#2,$24(a1)
00010E76 08A8 0003 0022             		bclr	#3,$22(a0)
00010E7C 4228 0025                  		clr.b	$25(a0)
00010E80 117C 0001 001A             		move.b	#1,$1A(a0)
00010E86 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
00010E8C 7203                       		moveq	#3,d1		; set number of	fragments to 4
00010E8E 343C 0038                  		move.w	#$38,d2
00010E92 6100 D456                  		bsr.w	SmashObject
00010E96 6100 DD30                  		bsr.w	SingleObjLoad
00010E9A 6600                       		bne.s	Obj51_Display
00010E9C 12BC 0029                  		move.b	#$29,0(a1)	; load points object
00010EA0 3368 0008 0008             		move.w	8(a0),8(a1)
00010EA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010EAC 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
00010EB0 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
00010EB4 0C42 0006                  		cmpi.w	#6,d2
00010EB8 6500                       		bcs.s	Obj51_Bonus
00010EBA 7406                       		moveq	#6,d2
00010EBC                            
00010EBC                            Obj51_Bonus:
00010EBC 7000                       		moveq	#0,d0
00010EBE 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
00010EC2 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
00010EC8 6500                       		bcs.s	loc_FD98	; if not, branch
00010ECA 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
00010ECE 740A                       		moveq	#10,d2
00010ED0                            
00010ED0                            loc_FD98:
00010ED0 4EB9 0000 0000             		jsr	AddPoints
00010ED6 E24A                       		lsr.w	#1,d2
00010ED8 1342 001A                  		move.b	d2,$1A(a1)
00010EDC                            
00010EDC                            Obj51_Display:				; XREF: Obj51_Index
00010EDC 6100 D83E                  		bsr.w	SpeedToPos
00010EE0 0668 0038 0012             		addi.w	#$38,$12(a0)
00010EE6 6100 D85A                  		bsr.w	DisplaySprite
00010EEA 4A28 0001                  		tst.b	1(a0)
00010EEE 6A00 D88E                  		bpl.w	DeleteObject
00010EF2 4E75                       		rts	
00010EF4                            ; ===========================================================================
00010EF4 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
00010EF8 FF00 FF00                  		dc.w $FF00, $FF00
00010EFC 0200 FE00                  		dc.w $200, $FE00
00010F00 0100 FF00                  		dc.w $100, $FF00
00010F04                            
00010F04 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
00010F0C                            ; ---------------------------------------------------------------------------
00010F0C                            ; Sprite mappings - smashable green block (MZ)
00010F0C                            ; ---------------------------------------------------------------------------
00010F0C                            Map_obj51:
00010F0C                            	include "_maps\obj51.asm"
00010F0C                            ; ---------------------------------------------------------------------------
00010F0C                            ; Sprite mappings - smashable green block (MZ)
00010F0C                            ; ---------------------------------------------------------------------------
00010F0C 0000                       		dc.w byte_FDD8-Map_obj51
00010F0E 0000                       		dc.w byte_FDE3-Map_obj51
00010F10 02                         byte_FDD8:	dc.b 2
00010F11 F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
00010F16 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
00010F1B 04                         byte_FDE3:	dc.b 4
00010F1C F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
00010F21 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
00010F26 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
00010F2B 0005 8000 00               		dc.b 0,	5, $80,	0, 0
00010F30                            		even
00010F30                            		even
00010F30                            
00010F30                            ; ===========================================================================
00010F30                            ; ---------------------------------------------------------------------------
00010F30                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
00010F30                            ; ---------------------------------------------------------------------------
00010F30                            
00010F30                            Obj52:					; XREF: Obj_Index
00010F30 7000                       		moveq	#0,d0
00010F32 1028 0024                  		move.b	$24(a0),d0
00010F36 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
00010F3A 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
00010F3E                            ; ===========================================================================
00010F3E 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
00010F40 0000                       		dc.w Obj52_Platform-Obj52_Index
00010F42 0000                       		dc.w Obj52_StandOn-Obj52_Index
00010F44                            
00010F44 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
00010F46 2001                       		dc.b $20, 1
00010F48 2002                       		dc.b $20, 2
00010F4A 4003                       		dc.b $40, 3
00010F4C 3004                       		dc.b $30, 4
00010F4E                            ; ===========================================================================
00010F4E                            
00010F4E                            Obj52_Main:				; XREF: Obj52_Index
00010F4E 5428 0024                  		addq.b	#2,$24(a0)
00010F52 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
00010F5A 317C 42B8 0002             		move.w	#$42B8,2(a0)
00010F60 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010F66 6600                       		bne.s	loc_FE44
00010F68 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
00010F70 317C 43BC 0002             		move.w	#$43BC,2(a0)
00010F76 117C 0007 0016             		move.b	#7,$16(a0)
00010F7C                            
00010F7C                            loc_FE44:
00010F7C 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00010F82 6600                       		bne.s	loc_FE60
00010F84 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
00010F8A 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
00010F90 6700                       		beq.s	loc_FE60	; if yes, branch
00010F92 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
00010F98                            
00010F98                            loc_FE60:
00010F98 117C 0004 0001             		move.b	#4,1(a0)
00010F9E 7000                       		moveq	#0,d0
00010FA0 1028 0028                  		move.b	$28(a0),d0
00010FA4 E648                       		lsr.w	#3,d0
00010FA6 0240 001E                  		andi.w	#$1E,d0
00010FAA 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
00010FAE 115A 0019                  		move.b	(a2)+,$19(a0)
00010FB2 115A 001A                  		move.b	(a2)+,$1A(a0)
00010FB6 117C 0004 0018             		move.b	#4,$18(a0)
00010FBC 3168 0008 0030             		move.w	8(a0),$30(a0)
00010FC2 3168 000C 0032             		move.w	$C(a0),$32(a0)
00010FC8 0228 000F 0028             		andi.b	#$F,$28(a0)
00010FCE                            
00010FCE                            Obj52_Platform:				; XREF: Obj52_Index
00010FCE 6100 0000                  		bsr.w	Obj52_Move
00010FD2 7200                       		moveq	#0,d1
00010FD4 1228 0019                  		move.b	$19(a0),d1
00010FD8 4EB9 0000 834C             		jsr	(PlatformObject).l
00010FDE 6000                       		bra.s	Obj52_ChkDel
00010FE0                            ; ===========================================================================
00010FE0                            
00010FE0                            Obj52_StandOn:				; XREF: Obj52_Index
00010FE0 7200                       		moveq	#0,d1
00010FE2 1228 0019                  		move.b	$19(a0),d1
00010FE6 4EB9 0000 84C0             		jsr	(ExitPlatform).l
00010FEC 3F28 0008                  		move.w	8(a0),-(sp)
00010FF0 6100 0000                  		bsr.w	Obj52_Move
00010FF4 341F                       		move.w	(sp)+,d2
00010FF6 4EB9 0000 8A2A             		jsr	(MvSonicOnPtfm2).l
00010FFC                            
00010FFC                            Obj52_ChkDel:				; XREF: Obj52_Platform
00010FFC 3028 0030                  		move.w	$30(a0),d0
00011000 0240 FF80                  		andi.w	#$FF80,d0
00011004 3238 F700                  		move.w	($FFFFF700).w,d1
00011008 0441 0080                  		subi.w	#$80,d1
0001100C 0241 FF80                  		andi.w	#$FF80,d1
00011010 9041                       		sub.w	d1,d0
00011012 0C40 0280                  		cmpi.w	#$280,d0
00011016 6200 D766                  		bhi.w	DeleteObject
0001101A 6000 D726                  		bra.w	DisplaySprite
0001101E                            ; ===========================================================================
0001101E                            
0001101E                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0001101E 7000                       		moveq	#0,d0
00011020 1028 0028                  		move.b	$28(a0),d0
00011024 0240 000F                  		andi.w	#$F,d0
00011028 D040                       		add.w	d0,d0
0001102A 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0001102E 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
00011032                            ; ===========================================================================
00011032 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
00011036 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0001103A 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0001103E 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
00011042 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
00011046 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
00011048                            ; ===========================================================================
00011048                            
00011048                            Obj52_Type00:				; XREF: Obj52_TypeIndex
00011048 4E75                       		rts	
0001104A                            ; ===========================================================================
0001104A                            
0001104A                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0001104A 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001104E 323C 0060                  		move.w	#$60,d1
00011052 0828 0000 0022             		btst	#0,$22(a0)
00011058 6700                       		beq.s	loc_FF26
0001105A 4440                       		neg.w	d0
0001105C D041                       		add.w	d1,d0
0001105E                            
0001105E                            loc_FF26:
0001105E 3228 0030                  		move.w	$30(a0),d1
00011062 9240                       		sub.w	d0,d1
00011064 3141 0008                  		move.w	d1,8(a0)
00011068 4E75                       		rts	
0001106A                            ; ===========================================================================
0001106A                            
0001106A                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0001106A 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
00011070 6600                       		bne.s	Obj52_02_Wait
00011072 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011076                            
00011076                            Obj52_02_Wait:
00011076 4E75                       		rts	
00011078                            ; ===========================================================================
00011078                            
00011078                            Obj52_Type03:				; XREF: Obj52_TypeIndex
00011078 7600                       		moveq	#0,d3
0001107A 1628 0019                  		move.b	$19(a0),d3
0001107E 6100 0000                  		bsr.w	ObjHitWallRight
00011082 4A41                       		tst.w	d1		; has the platform hit a wall?
00011084 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
00011086 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0001108A 3168 0008 0030             		move.w	8(a0),$30(a0)
00011090 4E75                       		rts	
00011092                            ; ===========================================================================
00011092                            
00011092                            Obj52_03_End:
00011092 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
00011096 4E75                       		rts	
00011098                            ; ===========================================================================
00011098                            
00011098                            Obj52_Type05:				; XREF: Obj52_TypeIndex
00011098 7600                       		moveq	#0,d3
0001109A 1628 0019                  		move.b	$19(a0),d3
0001109E 6100 0000                  		bsr.w	ObjHitWallRight
000110A2 4A41                       		tst.w	d1		; has the platform hit a wall?
000110A4 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
000110A6 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
000110AA 3168 0008 0030             		move.w	8(a0),$30(a0)
000110B0 4E75                       		rts	
000110B2                            ; ===========================================================================
000110B2                            
000110B2                            Obj52_05_End:
000110B2 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
000110B6 4E75                       		rts	
000110B8                            ; ===========================================================================
000110B8                            
000110B8                            Obj52_Type06:				; XREF: Obj52_TypeIndex
000110B8 6100 D662                  		bsr.w	SpeedToPos
000110BC 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
000110C2 6100 0000                  		bsr.w	ObjHitFloor
000110C6 4A41                       		tst.w	d1		; has platform hit the floor?
000110C8 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
000110CC D368 000C                  		add.w	d1,$C(a0)
000110D0 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
000110D4 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
000110D8                            
000110D8                            locret_FFA0:
000110D8 4E75                       		rts	
000110DA                            ; ===========================================================================
000110DA                            
000110DA                            Obj52_Type07:				; XREF: Obj52_TypeIndex
000110DA 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
000110DE 6700                       		beq.s	Obj52_07_ChkDel
000110E0 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
000110E4                            
000110E4                            Obj52_07_ChkDel:
000110E4 588F                       		addq.l	#4,sp
000110E6 3028 0030                  		move.w	$30(a0),d0
000110EA 0240 FF80                  		andi.w	#$FF80,d0
000110EE 3238 F700                  		move.w	($FFFFF700).w,d1
000110F2 0441 0080                  		subi.w	#$80,d1
000110F6 0241 FF80                  		andi.w	#$FF80,d1
000110FA 9041                       		sub.w	d1,d0
000110FC 0C40 0280                  		cmpi.w	#$280,d0
00011100 6200 D67C                  		bhi.w	DeleteObject
00011104 4E75                       		rts	
00011106                            ; ===========================================================================
00011106                            
00011106                            Obj52_Type08:				; XREF: Obj52_TypeIndex
00011106 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001110A 323C 0080                  		move.w	#$80,d1
0001110E 0828 0000 0022             		btst	#0,$22(a0)
00011114 6700                       		beq.s	loc_FFE2
00011116 4440                       		neg.w	d0
00011118 D041                       		add.w	d1,d0
0001111A                            
0001111A                            loc_FFE2:
0001111A 3228 0032                  		move.w	$32(a0),d1
0001111E 9240                       		sub.w	d0,d1
00011120 3141 000C                  		move.w	d1,$C(a0)
00011124 4E75                       		rts	
00011126                            ; ===========================================================================
00011126                            
00011126                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
00011126 7600                       		moveq	#0,d3
00011128 1628 0019                  		move.b	$19(a0),d3
0001112C D643                       		add.w	d3,d3
0001112E 7208                       		moveq	#8,d1
00011130 0828 0000 0022             		btst	#0,$22(a0)
00011136 6700                       		beq.s	loc_10004
00011138 4441                       		neg.w	d1
0001113A 4443                       		neg.w	d3
0001113C                            
0001113C                            loc_10004:
0001113C 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
00011140 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
00011142 3028 0008                  		move.w	8(a0),d0
00011146 9068 0030                  		sub.w	$30(a0),d0
0001114A B043                       		cmp.w	d3,d0
0001114C 6700                       		beq.s	Obj52_0A_Wait
0001114E D368 0008                  		add.w	d1,8(a0)	; move platform
00011152 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
00011158 4E75                       		rts	
0001115A                            ; ===========================================================================
0001115A                            
0001115A                            Obj52_0A_Wait:
0001115A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0001115E 6600                       		bne.s	locret_1002E	; if time remains, branch
00011160 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
00011166                            
00011166                            locret_1002E:
00011166 4E75                       		rts	
00011168                            ; ===========================================================================
00011168                            
00011168                            Obj52_0A_Back:
00011168 3028 0008                  		move.w	8(a0),d0
0001116C 9068 0030                  		sub.w	$30(a0),d0
00011170 6700                       		beq.s	Obj52_0A_Reset
00011172 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
00011176 4E75                       		rts	
00011178                            ; ===========================================================================
00011178                            
00011178                            Obj52_0A_Reset:
00011178 4268 0036                  		clr.w	$36(a0)
0001117C 5328 0028                  		subq.b	#1,$28(a0)
00011180 4E75                       		rts	
00011182                            ; ===========================================================================
00011182                            ; ---------------------------------------------------------------------------
00011182                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011182                            ; ---------------------------------------------------------------------------
00011182                            Map_obj52:
00011182                            	include "_maps\obj52mz.asm"
00011182                            ; ---------------------------------------------------------------------------
00011182                            ; Sprite mappings - moving blocks (MZ, SBZ)
00011182                            ; ---------------------------------------------------------------------------
00011182 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
00011186 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0001118A 0000                       		dc.w byte_1008F-Map_obj52
0001118C 01                         byte_10054:	dc.b 1
0001118D F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
00011192 02                         byte_1005A:	dc.b 2
00011193 F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
00011198 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0001119D 04                         byte_10065:	dc.b 4
0001119E F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
000111A3 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
000111A8 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
000111AD 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
000111B2 04                         byte_1007A:	dc.b 4
000111B3 F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
000111B8 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
000111BD F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
000111C2 F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
000111C7 03                         byte_1008F:	dc.b 3
000111C8 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
000111CD F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
000111D2 F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
000111D8 00                         		even
000111D8 00                         		even
000111D8                            
000111D8                            ; ---------------------------------------------------------------------------
000111D8                            ; Sprite mappings - moving block (LZ)
000111D8                            ; ---------------------------------------------------------------------------
000111D8                            Map_obj52a:
000111D8                            	include "_maps\obj52lz.asm"
000111D8                            ; ---------------------------------------------------------------------------
000111D8                            ; Sprite mappings - moving block (LZ)
000111D8                            ; ---------------------------------------------------------------------------
000111D8 0000                       		dc.w byte_100A2-Map_obj52a
000111DA 01                         byte_100A2:	dc.b 1
000111DB F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
000111E0                            		even
000111E0                            		even
000111E0                            
000111E0                            ; ===========================================================================
000111E0                            ; ---------------------------------------------------------------------------
000111E0                            ; Object 55 - Basaran enemy (MZ)
000111E0                            ; ---------------------------------------------------------------------------
000111E0                            
000111E0                            Obj55:					; XREF: Obj_Index
000111E0 7000                       		moveq	#0,d0
000111E2 1028 0024                  		move.b	$24(a0),d0
000111E6 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
000111EA 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
000111EE                            ; ===========================================================================
000111EE 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
000111F0 0000                       		dc.w Obj55_Action-Obj55_Index
000111F2                            ; ===========================================================================
000111F2                            
000111F2                            Obj55_Main:				; XREF: Obj55_Index
000111F2 5428 0024                  		addq.b	#2,$24(a0)
000111F6 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
000111FE 317C 84B8 0002             		move.w	#$84B8,2(a0)
00011204 117C 0004 0001             		move.b	#4,1(a0)
0001120A 117C 000C 0016             		move.b	#$C,$16(a0)
00011210 117C 0002 0018             		move.b	#2,$18(a0)
00011216 117C 000B 0020             		move.b	#$B,$20(a0)
0001121C 117C 0010 0019             		move.b	#$10,$19(a0)
00011222                            
00011222                            Obj55_Action:				; XREF: Obj55_Index
00011222 7000                       		moveq	#0,d0
00011224 1028 0025                  		move.b	$25(a0),d0
00011228 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
0001122C 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
00011230 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00011236 6100 A558                  		bsr.w	AnimateSprite
0001123A 6000 F5AE                  		bra.w	MarkObjGone
0001123E                            ; ===========================================================================
0001123E 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
00011240 0000                       		dc.w Obj55_DropFly-Obj55_Index2
00011242 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
00011244 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
00011246                            ; ===========================================================================
00011246                            
00011246                            Obj55_ChkDrop:				; XREF: Obj55_Index2
00011246 343C 0080                  		move.w	#$80,d2
0001124A 6100 0000                  		bsr.w	Obj55_ChkSonic
0001124E 6400                       		bcc.s	Obj55_NoDrop
00011250 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011254 3140 0036                  		move.w	d0,$36(a0)
00011258 9068 000C                  		sub.w	$C(a0),d0
0001125C 6500                       		bcs.s	Obj55_NoDrop
0001125E 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
00011262 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
00011264 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011268 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
0001126A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001126E D007                       		add.b	d7,d0
00011270 0200 0007                  		andi.b	#7,d0
00011274 6600                       		bne.s	Obj55_NoDrop
00011276 117C 0001 001C             		move.b	#1,$1C(a0)
0001127C 5428 0025                  		addq.b	#2,$25(a0)
00011280                            
00011280                            Obj55_NoDrop:
00011280 4E75                       		rts	
00011282                            ; ===========================================================================
00011282                            
00011282                            Obj55_DropFly:				; XREF: Obj55_Index2
00011282 6100 D498                  		bsr.w	SpeedToPos
00011286 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
0001128C 343C 0080                  		move.w	#$80,d2
00011290 6100 0000                  		bsr.w	Obj55_ChkSonic
00011294 3028 0036                  		move.w	$36(a0),d0
00011298 9068 000C                  		sub.w	$C(a0),d0
0001129C 6500                       		bcs.s	Obj55_ChkDel
0001129E 0C40 0010                  		cmpi.w	#$10,d0
000112A2 6400                       		bcc.s	locret_10180
000112A4 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
000112A8 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
000112AE 117C 0002 001C             		move.b	#2,$1C(a0)
000112B4 5428 0025                  		addq.b	#2,$25(a0)
000112B8                            
000112B8                            locret_10180:
000112B8 4E75                       		rts	
000112BA                            ; ===========================================================================
000112BA                            
000112BA                            Obj55_ChkDel:				; XREF: Obj55_DropFly
000112BA 4A28 0001                  		tst.b	1(a0)
000112BE 6A00 D4BE                  		bpl.w	DeleteObject
000112C2 4E75                       		rts	
000112C4                            ; ===========================================================================
000112C4                            
000112C4                            Obj55_PlaySnd:				; XREF: Obj55_Index2
000112C4 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000112C8 0200 000F                  		andi.b	#$F,d0
000112CC 6600                       		bne.s	loc_101A0
000112CE 303C 00C0                  		move.w	#$C0,d0
000112D2 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play flapping sound
000112D8                            
000112D8                            loc_101A0:
000112D8 6100 D442                  		bsr.w	SpeedToPos
000112DC 3038 D008                  		move.w	($FFFFD008).w,d0
000112E0 9068 0008                  		sub.w	8(a0),d0
000112E4 6400                       		bcc.s	loc_101B0
000112E6 4440                       		neg.w	d0
000112E8                            
000112E8                            loc_101B0:
000112E8 0C40 0080                  		cmpi.w	#$80,d0
000112EC 6500                       		bcs.s	locret_101C6
000112EE 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000112F2 D007                       		add.b	d7,d0
000112F4 0200 0007                  		andi.b	#7,d0
000112F8 6600                       		bne.s	locret_101C6
000112FA 5428 0025                  		addq.b	#2,$25(a0)
000112FE                            
000112FE                            locret_101C6:
000112FE 4E75                       		rts	
00011300                            ; ===========================================================================
00011300                            
00011300                            Obj55_FlyUp:				; XREF: Obj55_Index2
00011300 6100 D41A                  		bsr.w	SpeedToPos
00011304 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
0001130A 6100 0000                  		bsr.w	ObjHitCeiling
0001130E 4A41                       		tst.w	d1		; has basaran hit the ceiling?
00011310 6A00                       		bpl.s	locret_101F4	; if not, branch
00011312 9368 000C                  		sub.w	d1,$C(a0)
00011316 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
0001131C 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
00011320 4268 0012                  		clr.w	$12(a0)
00011324 4228 001C                  		clr.b	$1C(a0)
00011328 4228 0025                  		clr.b	$25(a0)
0001132C                            
0001132C                            locret_101F4:
0001132C 4E75                       		rts	
0001132E                            ; ===========================================================================
0001132E                            
0001132E                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001132E 323C 0100                  		move.w	#$100,d1
00011332 08E8 0000 0022             		bset	#0,$22(a0)
00011338 3038 D008                  		move.w	($FFFFD008).w,d0
0001133C 9068 0008                  		sub.w	8(a0),d0
00011340 6400                       		bcc.s	loc_10214
00011342 4440                       		neg.w	d0
00011344 4441                       		neg.w	d1
00011346 08A8 0000 0022             		bclr	#0,$22(a0)
0001134C                            
0001134C                            loc_10214:
0001134C B042                       		cmp.w	d2,d0
0001134E 4E75                       		rts	
00011350                            ; ===========================================================================
00011350 6100 D3CA                  		bsr.w	SpeedToPos
00011354 6100 D3EC                  		bsr.w	DisplaySprite
00011358 4A28 0001                  		tst.b	1(a0)
0001135C 6A00 D420                  		bpl.w	DeleteObject
00011360 4E75                       		rts	
00011362                            ; ===========================================================================
00011362                            Ani_obj55:
00011362                            	include "_anim\obj55.asm"
00011362                            ; ---------------------------------------------------------------------------
00011362                            ; Animation script - Basaran enemy
00011362                            ; ---------------------------------------------------------------------------
00011362 0000                       		dc.w byte_10230-Ani_obj55
00011364 0000                       		dc.w byte_10234-Ani_obj55
00011366 0000                       		dc.w byte_10238-Ani_obj55
00011368 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
0001136C 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
00011370 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
00011376                            		even
00011376                            		even
00011376                            
00011376                            ; ---------------------------------------------------------------------------
00011376                            ; Sprite mappings - Basaran enemy (MZ)
00011376                            ; ---------------------------------------------------------------------------
00011376                            Map_obj55:
00011376                            	include "_maps\obj55.asm"
00011376                            ; ---------------------------------------------------------------------------
00011376                            ; Sprite mappings - Basaran enemy (MZ)
00011376                            ; ---------------------------------------------------------------------------
00011376 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
0001137A 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
0001137E 01                         byte_10246:	dc.b 1
0001137F F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00011384 03                         byte_1024C:	dc.b 3
00011385 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
0001138A 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
0001138F 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
00011394 04                         byte_1025C:	dc.b 4
00011395 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
0001139A 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
0001139F 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
000113A4 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
000113A9 04                         byte_10271:	dc.b 4
000113AA F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
000113AF 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
000113B4 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
000113B9 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
000113BE                            		even
000113BE                            		even
000113BE                            
000113BE                            ; ===========================================================================
000113BE                            ; ---------------------------------------------------------------------------
000113BE                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
000113BE                            ; ---------------------------------------------------------------------------
000113BE                            
000113BE                            Obj56:					; XREF: Obj_Index
000113BE 7000                       		moveq	#0,d0
000113C0 1028 0024                  		move.b	$24(a0),d0
000113C4 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
000113C8 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
000113CC                            ; ===========================================================================
000113CC 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
000113CE 0000                       		dc.w Obj56_Action-Obj56_Index
000113D0                            
000113D0 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
000113D2 2020                       		dc.b  $20, $20
000113D4 1020                       		dc.b  $10, $20
000113D6 201A                       		dc.b  $20, $1A
000113D8 1027                       		dc.b  $10, $27
000113DA 1010                       		dc.b  $10, $10
000113DC 0820                       		dc.b	8, $20
000113DE 4010                       		dc.b  $40, $10
000113E0                            ; ===========================================================================
000113E0                            
000113E0                            Obj56_Main:				; XREF: Obj56_Index
000113E0 5428 0024                  		addq.b	#2,$24(a0)
000113E4 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
000113EC 317C 4000 0002             		move.w	#$4000,2(a0)
000113F2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000113F8 6600                       		bne.s	loc_102C8
000113FA 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
00011400                            
00011400                            loc_102C8:
00011400 117C 0004 0001             		move.b	#4,1(a0)
00011406 117C 0003 0018             		move.b	#3,$18(a0)
0001140C 7000                       		moveq	#0,d0
0001140E 1028 0028                  		move.b	$28(a0),d0
00011412 E648                       		lsr.w	#3,d0
00011414 0240 000E                  		andi.w	#$E,d0
00011418 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
0001141C 115A 0019                  		move.b	(a2)+,$19(a0)
00011420 1152 0016                  		move.b	(a2),$16(a0)
00011424 E248                       		lsr.w	#1,d0
00011426 1140 001A                  		move.b	d0,$1A(a0)
0001142A 3168 0008 0034             		move.w	8(a0),$34(a0)
00011430 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011436 7000                       		moveq	#0,d0
00011438 1012                       		move.b	(a2),d0
0001143A D040                       		add.w	d0,d0
0001143C 3140 003A                  		move.w	d0,$3A(a0)
00011440 7000                       		moveq	#0,d0
00011442 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011448 6700                       		beq.s	loc_10332
0001144A 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
0001144E 0240 000F                  		andi.w	#$F,d0
00011452 5140                       		subq.w	#8,d0
00011454 6500                       		bcs.s	loc_10332
00011456 E548                       		lsl.w	#2,d0
00011458 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
0001145C 45F2 0000                  		lea	(a2,d0.w),a2
00011460 4A52                       		tst.w	(a2)
00011462 6A00                       		bpl.s	loc_10332
00011464 0868 0000 0022             		bchg	#0,$22(a0)
0001146A                            
0001146A                            loc_10332:
0001146A 1028 0028                  		move.b	$28(a0),d0
0001146E 6A00                       		bpl.s	Obj56_Action
00011470 0200 000F                  		andi.b	#$F,d0
00011474 1140 003C                  		move.b	d0,$3C(a0)
00011478 117C 0005 0028             		move.b	#5,$28(a0)
0001147E 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
00011484 6600                       		bne.s	Obj56_ChkGone
00011486 117C 000C 0028             		move.b	#$C,$28(a0)
0001148C 317C 0080 003A             		move.w	#$80,$3A(a0)
00011492                            
00011492                            Obj56_ChkGone:
00011492 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011496 7000                       		moveq	#0,d0
00011498 1028 0023                  		move.b	$23(a0),d0
0001149C 6700                       		beq.s	Obj56_Action
0001149E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000114A4 0832 0000 0002             		btst	#0,2(a2,d0.w)
000114AA 6700                       		beq.s	Obj56_Action
000114AC 5228 0028                  		addq.b	#1,$28(a0)
000114B0 4268 003A                  		clr.w	$3A(a0)
000114B4                            
000114B4                            Obj56_Action:				; XREF: Obj56_Index
000114B4 3F28 0008                  		move.w	8(a0),-(sp)
000114B8 7000                       		moveq	#0,d0
000114BA 1028 0028                  		move.b	$28(a0),d0	; get object type
000114BE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000114C2 D040                       		add.w	d0,d0
000114C4 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
000114C8 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
000114CC 381F                       		move.w	(sp)+,d4
000114CE 4A28 0001                  		tst.b	1(a0)
000114D2 6A00                       		bpl.s	Obj56_ChkDel
000114D4 7200                       		moveq	#0,d1
000114D6 1228 0019                  		move.b	$19(a0),d1
000114DA 0641 000B                  		addi.w	#$B,d1
000114DE 7400                       		moveq	#0,d2
000114E0 1428 0016                  		move.b	$16(a0),d2
000114E4 3602                       		move.w	d2,d3
000114E6 5243                       		addq.w	#1,d3
000114E8 6100 F628                  		bsr.w	SolidObject
000114EC                            
000114EC                            Obj56_ChkDel:
000114EC 3028 0034                  		move.w	$34(a0),d0
000114F0 0240 FF80                  		andi.w	#$FF80,d0
000114F4 3238 F700                  		move.w	($FFFFF700).w,d1
000114F8 0441 0080                  		subi.w	#$80,d1
000114FC 0241 FF80                  		andi.w	#$FF80,d1
00011500 9041                       		sub.w	d1,d0
00011502 0C40 0280                  		cmpi.w	#$280,d0
00011506 6200 D276                  		bhi.w	DeleteObject
0001150A 6000 D236                  		bra.w	DisplaySprite
0001150E                            ; ===========================================================================
0001150E 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
00011512 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00011516 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
0001151A 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001151E 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
00011522 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00011526 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
0001152A                            ; ===========================================================================
0001152A                            
0001152A                            Obj56_Type00:				; XREF: Obj56_TypeIndex
0001152A 4E75                       		rts	
0001152C                            ; ===========================================================================
0001152C                            
0001152C                            Obj56_Type01:				; XREF: Obj56_TypeIndex
0001152C 323C 0040                  		move.w	#$40,d1
00011530 7000                       		moveq	#0,d0
00011532 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011536 6000                       		bra.s	Obj56_Move_LR
00011538                            ; ===========================================================================
00011538                            
00011538                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00011538 323C 0080                  		move.w	#$80,d1
0001153C 7000                       		moveq	#0,d0
0001153E 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011542                            
00011542                            Obj56_Move_LR:
00011542 0828 0000 0022             		btst	#0,$22(a0)
00011548 6700                       		beq.s	loc_10416
0001154A 4440                       		neg.w	d0
0001154C D041                       		add.w	d1,d0
0001154E                            
0001154E                            loc_10416:
0001154E 3228 0034                  		move.w	$34(a0),d1
00011552 9240                       		sub.w	d0,d1
00011554 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011558 4E75                       		rts	
0001155A                            ; ===========================================================================
0001155A                            
0001155A                            Obj56_Type03:				; XREF: Obj56_TypeIndex
0001155A 323C 0040                  		move.w	#$40,d1
0001155E 7000                       		moveq	#0,d0
00011560 1038 FE68                  		move.b	($FFFFFE68).w,d0
00011564 6000                       		bra.s	Obj56_Move_UD
00011566                            ; ===========================================================================
00011566                            
00011566                            Obj56_Type04:				; XREF: Obj56_TypeIndex
00011566 323C 0080                  		move.w	#$80,d1
0001156A 7000                       		moveq	#0,d0
0001156C 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
00011570                            
00011570                            Obj56_Move_UD:
00011570 0828 0000 0022             		btst	#0,$22(a0)
00011576 6700                       		beq.s	loc_10444
00011578 4440                       		neg.w	d0
0001157A D041                       		add.w	d1,d0
0001157C                            
0001157C                            loc_10444:
0001157C 3228 0030                  		move.w	$30(a0),d1
00011580 9240                       		sub.w	d0,d1
00011582 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011586 4E75                       		rts	
00011588                            ; ===========================================================================
00011588                            
00011588                            Obj56_Type05:				; XREF: Obj56_TypeIndex
00011588 4A28 0038                  		tst.b	$38(a0)
0001158C 6600                       		bne.s	loc_104A4
0001158E 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00011594 6600                       		bne.s	loc_1047A	; if not, branch
00011596 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
0001159C 6600                       		bne.s	loc_1047A
0001159E 4238 F7C9                  		clr.b	($FFFFF7C9).w
000115A2 3038 D008                  		move.w	($FFFFD008).w,d0
000115A6 B068 0008                  		cmp.w	8(a0),d0
000115AA 6400                       		bcc.s	loc_1047A
000115AC 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
000115B2                            
000115B2                            loc_1047A:
000115B2 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000115B6 7000                       		moveq	#0,d0
000115B8 1028 003C                  		move.b	$3C(a0),d0
000115BC 0832 0000 0000             		btst	#0,(a2,d0.w)
000115C2 6700                       		beq.s	loc_104AE
000115C4 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000115CA 6600                       		bne.s	loc_1049E	; if not, branch
000115CC 0C00 0003                  		cmpi.b	#3,d0
000115D0 6600                       		bne.s	loc_1049E
000115D2 4238 F7C9                  		clr.b	($FFFFF7C9).w
000115D6                            
000115D6                            loc_1049E:
000115D6 117C 0001 0038             		move.b	#1,$38(a0)
000115DC                            
000115DC                            loc_104A4:
000115DC 4A68 003A                  		tst.w	$3A(a0)
000115E0 6700                       		beq.s	loc_104C8
000115E2 5568 003A                  		subq.w	#2,$3A(a0)
000115E6                            
000115E6                            loc_104AE:
000115E6 3028 003A                  		move.w	$3A(a0),d0
000115EA 0828 0000 0022             		btst	#0,$22(a0)
000115F0 6700                       		beq.s	loc_104BC
000115F2 4440                       		neg.w	d0
000115F4                            
000115F4                            loc_104BC:
000115F4 3228 0030                  		move.w	$30(a0),d1
000115F8 D240                       		add.w	d0,d1
000115FA 3141 000C                  		move.w	d1,$C(a0)
000115FE 4E75                       		rts	
00011600                            ; ===========================================================================
00011600                            
00011600                            loc_104C8:
00011600 5228 0028                  		addq.b	#1,$28(a0)
00011604 4228 0038                  		clr.b	$38(a0)
00011608 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001160C 7000                       		moveq	#0,d0
0001160E 1028 0023                  		move.b	$23(a0),d0
00011612 67D2                       		beq.s	loc_104AE
00011614 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001161A 60CA                       		bra.s	loc_104AE
0001161C                            ; ===========================================================================
0001161C                            
0001161C                            Obj56_Type06:				; XREF: Obj56_TypeIndex
0001161C 4A28 0038                  		tst.b	$38(a0)
00011620 6600                       		bne.s	loc_10500
00011622 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00011626 7000                       		moveq	#0,d0
00011628 1028 003C                  		move.b	$3C(a0),d0
0001162C 4A32 0000                  		tst.b	(a2,d0.w)
00011630 6A00                       		bpl.s	loc_10512
00011632 117C 0001 0038             		move.b	#1,$38(a0)
00011638                            
00011638                            loc_10500:
00011638 7000                       		moveq	#0,d0
0001163A 1028 0016                  		move.b	$16(a0),d0
0001163E D040                       		add.w	d0,d0
00011640 B068 003A                  		cmp.w	$3A(a0),d0
00011644 6700                       		beq.s	loc_1052C
00011646 5468 003A                  		addq.w	#2,$3A(a0)
0001164A                            
0001164A                            loc_10512:
0001164A 3028 003A                  		move.w	$3A(a0),d0
0001164E 0828 0000 0022             		btst	#0,$22(a0)
00011654 6700                       		beq.s	loc_10520
00011656 4440                       		neg.w	d0
00011658                            
00011658                            loc_10520:
00011658 3228 0030                  		move.w	$30(a0),d1
0001165C D240                       		add.w	d0,d1
0001165E 3141 000C                  		move.w	d1,$C(a0)
00011662 4E75                       		rts	
00011664                            ; ===========================================================================
00011664                            
00011664                            loc_1052C:
00011664 5328 0028                  		subq.b	#1,$28(a0)
00011668 4228 0038                  		clr.b	$38(a0)
0001166C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011670 7000                       		moveq	#0,d0
00011672 1028 0023                  		move.b	$23(a0),d0
00011676 67D2                       		beq.s	loc_10512
00011678 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0001167E 60CA                       		bra.s	loc_10512
00011680                            ; ===========================================================================
00011680                            
00011680                            Obj56_Type07:				; XREF: Obj56_TypeIndex
00011680 4A28 0038                  		tst.b	$38(a0)
00011684 6600                       		bne.s	loc_1055E
00011686 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
0001168A 6700                       		beq.s	locret_10578
0001168C 117C 0001 0038             		move.b	#1,$38(a0)
00011692 4268 003A                  		clr.w	$3A(a0)
00011696                            
00011696                            loc_1055E:
00011696 5268 0008                  		addq.w	#1,8(a0)
0001169A 3168 0008 0034             		move.w	8(a0),$34(a0)
000116A0 5268 003A                  		addq.w	#1,$3A(a0)
000116A4 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
000116AA 6600                       		bne.s	locret_10578
000116AC 4228 0028                  		clr.b	$28(a0)
000116B0                            
000116B0                            locret_10578:
000116B0 4E75                       		rts	
000116B2                            ; ===========================================================================
000116B2                            
000116B2                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
000116B2 4A28 0038                  		tst.b	$38(a0)
000116B6 6600                       		bne.s	loc_10598
000116B8 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
000116BC 7000                       		moveq	#0,d0
000116BE 1028 003C                  		move.b	$3C(a0),d0
000116C2 0832 0000 0000             		btst	#0,(a2,d0.w)
000116C8 6700                       		beq.s	loc_105A2
000116CA 117C 0001 0038             		move.b	#1,$38(a0)
000116D0                            
000116D0                            loc_10598:
000116D0 4A68 003A                  		tst.w	$3A(a0)
000116D4 6700                       		beq.s	loc_105C0
000116D6 5568 003A                  		subq.w	#2,$3A(a0)
000116DA                            
000116DA                            loc_105A2:
000116DA 3028 003A                  		move.w	$3A(a0),d0
000116DE 0828 0000 0022             		btst	#0,$22(a0)
000116E4 6700                       		beq.s	loc_105B4
000116E6 4440                       		neg.w	d0
000116E8 0640 0080                  		addi.w	#$80,d0
000116EC                            
000116EC                            loc_105B4:
000116EC 3228 0034                  		move.w	$34(a0),d1
000116F0 D240                       		add.w	d0,d1
000116F2 3141 0008                  		move.w	d1,8(a0)
000116F6 4E75                       		rts	
000116F8                            ; ===========================================================================
000116F8                            
000116F8                            loc_105C0:
000116F8 5228 0028                  		addq.b	#1,$28(a0)
000116FC 4228 0038                  		clr.b	$38(a0)
00011700 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011704 7000                       		moveq	#0,d0
00011706 1028 0023                  		move.b	$23(a0),d0
0001170A 67CE                       		beq.s	loc_105A2
0001170C 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00011712 60C6                       		bra.s	loc_105A2
00011714                            ; ===========================================================================
00011714                            
00011714                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00011714 4A28 0038                  		tst.b	$38(a0)
00011718 6600                       		bne.s	loc_105F8
0001171A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001171E 7000                       		moveq	#0,d0
00011720 1028 003C                  		move.b	$3C(a0),d0
00011724 4A32 0000                  		tst.b	(a2,d0.w)
00011728 6A00                       		bpl.s	loc_10606
0001172A 117C 0001 0038             		move.b	#1,$38(a0)
00011730                            
00011730                            loc_105F8:
00011730 303C 0080                  		move.w	#$80,d0
00011734 B068 003A                  		cmp.w	$3A(a0),d0
00011738 6700                       		beq.s	loc_10624
0001173A 5468 003A                  		addq.w	#2,$3A(a0)
0001173E                            
0001173E                            loc_10606:
0001173E 3028 003A                  		move.w	$3A(a0),d0
00011742 0828 0000 0022             		btst	#0,$22(a0)
00011748 6700                       		beq.s	loc_10618
0001174A 4440                       		neg.w	d0
0001174C 0640 0080                  		addi.w	#$80,d0
00011750                            
00011750                            loc_10618:
00011750 3228 0034                  		move.w	$34(a0),d1
00011754 D240                       		add.w	d0,d1
00011756 3141 0008                  		move.w	d1,8(a0)
0001175A 4E75                       		rts	
0001175C                            ; ===========================================================================
0001175C                            
0001175C                            loc_10624:
0001175C 5328 0028                  		subq.b	#1,$28(a0)
00011760 4228 0038                  		clr.b	$38(a0)
00011764 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011768 7000                       		moveq	#0,d0
0001176A 1028 0023                  		move.b	$23(a0),d0
0001176E 67CE                       		beq.s	loc_10606
00011770 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00011776 60C6                       		bra.s	loc_10606
00011778                            ; ===========================================================================
00011778                            
00011778                            Obj56_Type08:				; XREF: Obj56_TypeIndex
00011778 323C 0010                  		move.w	#$10,d1
0001177C 7000                       		moveq	#0,d0
0001177E 1038 FE88                  		move.b	($FFFFFE88).w,d0
00011782 E248                       		lsr.w	#1,d0
00011784 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
00011788 6000                       		bra.s	Obj56_Move_Sqr
0001178A                            ; ===========================================================================
0001178A                            
0001178A                            Obj56_Type09:				; XREF: Obj56_TypeIndex
0001178A 323C 0030                  		move.w	#$30,d1
0001178E 7000                       		moveq	#0,d0
00011790 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
00011794 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
00011798 6000                       		bra.s	Obj56_Move_Sqr
0001179A                            ; ===========================================================================
0001179A                            
0001179A                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
0001179A 323C 0050                  		move.w	#$50,d1
0001179E 7000                       		moveq	#0,d0
000117A0 1038 FE90                  		move.b	($FFFFFE90).w,d0
000117A4 3638 FE92                  		move.w	($FFFFFE92).w,d3
000117A8 6000                       		bra.s	Obj56_Move_Sqr
000117AA                            ; ===========================================================================
000117AA                            
000117AA                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
000117AA 323C 0070                  		move.w	#$70,d1
000117AE 7000                       		moveq	#0,d0
000117B0 1038 FE94                  		move.b	($FFFFFE94).w,d0
000117B4 3638 FE96                  		move.w	($FFFFFE96).w,d3
000117B8                            
000117B8                            Obj56_Move_Sqr:
000117B8 4A43                       		tst.w	d3
000117BA 6600                       		bne.s	loc_1068E
000117BC 5228 0022                  		addq.b	#1,$22(a0)
000117C0 0228 0003 0022             		andi.b	#3,$22(a0)
000117C6                            
000117C6                            loc_1068E:
000117C6 1428 0022                  		move.b	$22(a0),d2
000117CA 0202 0003                  		andi.b	#3,d2
000117CE 6600                       		bne.s	loc_106AE
000117D0 9041                       		sub.w	d1,d0
000117D2 D068 0034                  		add.w	$34(a0),d0
000117D6 3140 0008                  		move.w	d0,8(a0)
000117DA 4441                       		neg.w	d1
000117DC D268 0030                  		add.w	$30(a0),d1
000117E0 3141 000C                  		move.w	d1,$C(a0)
000117E4 4E75                       		rts	
000117E6                            ; ===========================================================================
000117E6                            
000117E6                            loc_106AE:
000117E6 5302                       		subq.b	#1,d2
000117E8 6600                       		bne.s	loc_106CC
000117EA 5341                       		subq.w	#1,d1
000117EC 9041                       		sub.w	d1,d0
000117EE 4440                       		neg.w	d0
000117F0 D068 0030                  		add.w	$30(a0),d0
000117F4 3140 000C                  		move.w	d0,$C(a0)
000117F8 5241                       		addq.w	#1,d1
000117FA D268 0034                  		add.w	$34(a0),d1
000117FE 3141 0008                  		move.w	d1,8(a0)
00011802 4E75                       		rts	
00011804                            ; ===========================================================================
00011804                            
00011804                            loc_106CC:
00011804 5302                       		subq.b	#1,d2
00011806 6600                       		bne.s	loc_106EA
00011808 5341                       		subq.w	#1,d1
0001180A 9041                       		sub.w	d1,d0
0001180C 4440                       		neg.w	d0
0001180E D068 0034                  		add.w	$34(a0),d0
00011812 3140 0008                  		move.w	d0,8(a0)
00011816 5241                       		addq.w	#1,d1
00011818 D268 0030                  		add.w	$30(a0),d1
0001181C 3141 000C                  		move.w	d1,$C(a0)
00011820 4E75                       		rts	
00011822                            ; ===========================================================================
00011822                            
00011822                            loc_106EA:
00011822 9041                       		sub.w	d1,d0
00011824 D068 0030                  		add.w	$30(a0),d0
00011828 3140 000C                  		move.w	d0,$C(a0)
0001182C 4441                       		neg.w	d1
0001182E D268 0034                  		add.w	$34(a0),d1
00011832 3141 0008                  		move.w	d1,8(a0)
00011836 4E75                       		rts	
00011838                            ; ===========================================================================
00011838                            ; ---------------------------------------------------------------------------
00011838                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011838                            ; ---------------------------------------------------------------------------
00011838                            Map_obj56:
00011838                            	include "_maps\obj56.asm"
00011838                            ; ---------------------------------------------------------------------------
00011838                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00011838                            ; ---------------------------------------------------------------------------
00011838 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
0001183C 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
00011840 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
00011844 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
00011848 01                         byte_10710:	dc.b 1
00011849 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
0001184E 04                         byte_10716:	dc.b 4
0001184F E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
00011854 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
00011859 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
0001185E 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
00011863 02                         byte_1072B:	dc.b 2
00011864 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
00011869 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
0001186E 04                         byte_10736:	dc.b 4
0001186F E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
00011874 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
00011879 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
0001187E 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
00011883 03                         byte_1074B:	dc.b 3
00011884 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
00011889 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
0001188E 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
00011893 01                         byte_1075B:	dc.b 1
00011894 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00011899 02                         byte_10761:	dc.b 2
0001189A E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001189F 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
000118A4 04                         byte_1076C:	dc.b 4
000118A5 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
000118AA F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
000118AF F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
000118B4 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
000118BA 00                         		even
000118BA 00                         		even
000118BA                            
000118BA                            ; ===========================================================================
000118BA                            ; ---------------------------------------------------------------------------
000118BA                            ; Object 57 - spiked balls (SYZ, LZ)
000118BA                            ; ---------------------------------------------------------------------------
000118BA                            
000118BA                            Obj57:					; XREF: Obj_Index
000118BA 7000                       		moveq	#0,d0
000118BC 1028 0024                  		move.b	$24(a0),d0
000118C0 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
000118C4 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
000118C8                            ; ===========================================================================
000118C8 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
000118CA 0000                       		dc.w Obj57_Move-Obj57_Index
000118CC 0000                       		dc.w Obj57_Display-Obj57_Index
000118CE                            ; ===========================================================================
000118CE                            
000118CE                            Obj57_Main:				; XREF: Obj57_Index
000118CE 5428 0024                  		addq.b	#2,$24(a0)
000118D2 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
000118DA 317C 03BA 0002             		move.w	#$3BA,2(a0)
000118E0 117C 0004 0001             		move.b	#4,1(a0)
000118E6 117C 0004 0018             		move.b	#4,$18(a0)
000118EC 117C 0008 0019             		move.b	#8,$19(a0)
000118F2 3168 0008 003A             		move.w	8(a0),$3A(a0)
000118F8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000118FE 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00011904 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0001190A 6600                       		bne.s	loc_107E8
0001190C 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
00011912 317C 0310 0002             		move.w	#$310,2(a0)
00011918 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
00011920                            
00011920                            loc_107E8:
00011920 1228 0028                  		move.b	$28(a0),d1	; get object type
00011924 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011928 4881                       		ext.w	d1
0001192A E741                       		asl.w	#3,d1		; multiply by 8
0001192C 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
00011930 1028 0022                  		move.b	$22(a0),d0
00011934 E418                       		ror.b	#2,d0
00011936 0200 00C0                  		andi.b	#-$40,d0
0001193A 1140 0026                  		move.b	d0,$26(a0)
0001193E 45E8 0029                  		lea	$29(a0),a2
00011942 1228 0028                  		move.b	$28(a0),d1	; get object type
00011946 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
0001194A 14FC 0000                  		move.b	#0,(a2)+
0001194E 3601                       		move.w	d1,d3
00011950 E94B                       		lsl.w	#4,d3
00011952 1143 003C                  		move.b	d3,$3C(a0)
00011956 5341                       		subq.w	#1,d1		; set chain length (type-1)
00011958 6500                       		bcs.s	loc_10894
0001195A 0828 0003 0028             		btst	#3,$28(a0)
00011960 6700                       		beq.s	Obj57_MakeChain
00011962 5341                       		subq.w	#1,d1
00011964 6500                       		bcs.s	loc_10894
00011966                            
00011966                            Obj57_MakeChain:
00011966 6100 D260                  		bsr.w	SingleObjLoad
0001196A 6600                       		bne.s	loc_10894
0001196C 5228 0029                  		addq.b	#1,$29(a0)
00011970 3A09                       		move.w	a1,d5
00011972 0445 D000                  		subi.w	#-$3000,d5
00011976 EC4D                       		lsr.w	#6,d5
00011978 0245 007F                  		andi.w	#$7F,d5
0001197C 14C5                       		move.b	d5,(a2)+
0001197E 137C 0004 0024             		move.b	#4,$24(a1)
00011984 1290                       		move.b	0(a0),0(a1)
00011986 2368 0004 0004             		move.l	4(a0),4(a1)
0001198C 3368 0002 0002             		move.w	2(a0),2(a1)
00011992 1368 0001 0001             		move.b	1(a0),1(a1)
00011998 1368 0018 0018             		move.b	$18(a0),$18(a1)
0001199E 1368 0019 0019             		move.b	$19(a0),$19(a1)
000119A4 1368 0020 0020             		move.b	$20(a0),$20(a1)
000119AA 0403 0010                  		subi.b	#$10,d3
000119AE 1343 003C                  		move.b	d3,$3C(a1)
000119B2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
000119B8 6600                       		bne.s	loc_10890
000119BA 4A03                       		tst.b	d3
000119BC 6600                       		bne.s	loc_10890
000119BE 137C 0002 001A             		move.b	#2,$1A(a1)
000119C4                            
000119C4                            loc_10890:
000119C4 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
000119C8                            
000119C8                            loc_10894:
000119C8 3A08                       		move.w	a0,d5
000119CA 0445 D000                  		subi.w	#-$3000,d5
000119CE EC4D                       		lsr.w	#6,d5
000119D0 0245 007F                  		andi.w	#$7F,d5
000119D4 14C5                       		move.b	d5,(a2)+
000119D6 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000119DC 6600                       		bne.s	Obj57_Move
000119DE 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
000119E4 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
000119EA                            
000119EA                            Obj57_Move:				; XREF: Obj57_Index
000119EA 6100 0000                  		bsr.w	Obj57_MoveSub
000119EE 6000 0000                  		bra.w	Obj57_ChkDel
000119F2                            ; ===========================================================================
000119F2                            
000119F2                            Obj57_MoveSub:				; XREF: Obj57_Move
000119F2 3028 003E                  		move.w	$3E(a0),d0
000119F6 D168 0026                  		add.w	d0,$26(a0)
000119FA 1028 0026                  		move.b	$26(a0),d0
000119FE 4EB9 0000 3416             		jsr	(CalcSine).l
00011A04 3428 0038                  		move.w	$38(a0),d2
00011A08 3628 003A                  		move.w	$3A(a0),d3
00011A0C 45E8 0029                  		lea	$29(a0),a2
00011A10 7C00                       		moveq	#0,d6
00011A12 1C1A                       		move.b	(a2)+,d6
00011A14                            
00011A14                            Obj57_MoveLoop:
00011A14 7800                       		moveq	#0,d4
00011A16 181A                       		move.b	(a2)+,d4
00011A18 ED4C                       		lsl.w	#6,d4
00011A1A 0684 00FF D000             		addi.l	#$FFD000,d4
00011A20 2244                       		movea.l	d4,a1
00011A22 7800                       		moveq	#0,d4
00011A24 1829 003C                  		move.b	$3C(a1),d4
00011A28 2A04                       		move.l	d4,d5
00011A2A C9C0                       		muls.w	d0,d4
00011A2C E084                       		asr.l	#8,d4
00011A2E CBC1                       		muls.w	d1,d5
00011A30 E085                       		asr.l	#8,d5
00011A32 D842                       		add.w	d2,d4
00011A34 DA43                       		add.w	d3,d5
00011A36 3344 000C                  		move.w	d4,$C(a1)
00011A3A 3345 0008                  		move.w	d5,8(a1)
00011A3E 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
00011A42 4E75                       		rts	
00011A44                            ; ===========================================================================
00011A44                            
00011A44                            Obj57_ChkDel:				; XREF: Obj57_Move
00011A44 3028 003A                  		move.w	$3A(a0),d0
00011A48 0240 FF80                  		andi.w	#$FF80,d0
00011A4C 3238 F700                  		move.w	($FFFFF700).w,d1
00011A50 0441 0080                  		subi.w	#$80,d1
00011A54 0241 FF80                  		andi.w	#$FF80,d1
00011A58 9041                       		sub.w	d1,d0
00011A5A 0C40 0280                  		cmpi.w	#$280,d0
00011A5E 6200 0000                  		bhi.w	Obj57_Delete
00011A62 6000 CCDE                  		bra.w	DisplaySprite
00011A66                            ; ===========================================================================
00011A66                            
00011A66                            Obj57_Delete:				; XREF: Obj57_ChkDel
00011A66 7400                       		moveq	#0,d2
00011A68 45E8 0029                  		lea	$29(a0),a2
00011A6C 141A                       		move.b	(a2)+,d2
00011A6E                            
00011A6E                            Obj57_DelLoop:
00011A6E 7000                       		moveq	#0,d0
00011A70 101A                       		move.b	(a2)+,d0
00011A72 ED48                       		lsl.w	#6,d0
00011A74 0680 00FF D000             		addi.l	#$FFD000,d0
00011A7A 2240                       		movea.l	d0,a1
00011A7C 6100 CD02                  		bsr.w	DeleteObject2
00011A80 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
00011A84                            
00011A84 4E75                       		rts	
00011A86                            ; ===========================================================================
00011A86                            
00011A86                            Obj57_Display:				; XREF: Obj57_Index
00011A86 6000 CCBA                  		bra.w	DisplaySprite
00011A8A                            ; ===========================================================================
00011A8A                            ; ---------------------------------------------------------------------------
00011A8A                            ; Sprite mappings - chain of spiked balls (SYZ)
00011A8A                            ; ---------------------------------------------------------------------------
00011A8A                            Map_obj57:
00011A8A                            	include "_maps\obj57syz.asm"
00011A8A                            ; ---------------------------------------------------------------------------
00011A8A                            ; Sprite mappings - chain of spiked balls (SYZ)
00011A8A                            ; ---------------------------------------------------------------------------
00011A8A 0000                       		dc.w byte_10958-Map_obj57
00011A8C 01                         byte_10958:	dc.b 1
00011A8D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011A92                            		even
00011A92                            		even
00011A92                            
00011A92                            ; ---------------------------------------------------------------------------
00011A92                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011A92                            ; ---------------------------------------------------------------------------
00011A92                            Map_obj57a:
00011A92                            	include "_maps\obj57lz.asm"
00011A92                            ; ---------------------------------------------------------------------------
00011A92                            ; Sprite mappings - spiked ball	on a chain (LZ)
00011A92                            ; ---------------------------------------------------------------------------
00011A92 0000                       		dc.w byte_10964-Map_obj57a
00011A94 0000                       		dc.w byte_1096A-Map_obj57a
00011A96 0000                       		dc.w byte_10970-Map_obj57a
00011A98 01                         byte_10964:	dc.b 1
00011A99 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00011A9E 01                         byte_1096A:	dc.b 1
00011A9F F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00011AA4 01                         byte_10970:	dc.b 1
00011AA5 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00011AAA                            		even
00011AAA                            		even
00011AAA                            
00011AAA                            ; ===========================================================================
00011AAA                            ; ---------------------------------------------------------------------------
00011AAA                            ; Object 58 - giant spiked balls (SYZ)
00011AAA                            ; ---------------------------------------------------------------------------
00011AAA                            
00011AAA                            Obj58:					; XREF: Obj_Index
00011AAA 7000                       		moveq	#0,d0
00011AAC 1028 0024                  		move.b	$24(a0),d0
00011AB0 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00011AB4 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00011AB8                            ; ===========================================================================
00011AB8 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00011ABA 0000                       		dc.w Obj58_Move-Obj58_Index
00011ABC                            ; ===========================================================================
00011ABC                            
00011ABC                            Obj58_Main:				; XREF: Obj58_Index
00011ABC 5428 0024                  		addq.b	#2,$24(a0)
00011AC0 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00011AC8 317C 0396 0002             		move.w	#$396,2(a0)
00011ACE 117C 0004 0001             		move.b	#4,1(a0)
00011AD4 117C 0004 0018             		move.b	#4,$18(a0)
00011ADA 117C 0018 0019             		move.b	#$18,$19(a0)
00011AE0 3168 0008 003A             		move.w	8(a0),$3A(a0)
00011AE6 3168 000C 0038             		move.w	$C(a0),$38(a0)
00011AEC 117C 0086 0020             		move.b	#$86,$20(a0)
00011AF2 1228 0028                  		move.b	$28(a0),d1	; get object type
00011AF6 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00011AFA 4881                       		ext.w	d1
00011AFC E741                       		asl.w	#3,d1		; multiply by 8
00011AFE 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
00011B02 1028 0022                  		move.b	$22(a0),d0
00011B06 E418                       		ror.b	#2,d0
00011B08 0200 00C0                  		andi.b	#$C0,d0
00011B0C 1140 0026                  		move.b	d0,$26(a0)
00011B10 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00011B16                            
00011B16                            Obj58_Move:				; XREF: Obj58_Index
00011B16 7000                       		moveq	#0,d0
00011B18 1028 0028                  		move.b	$28(a0),d0	; get object type
00011B1C 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
00011B20 D040                       		add.w	d0,d0
00011B22 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00011B26 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00011B2A 3028 003A                  		move.w	$3A(a0),d0
00011B2E 0240 FF80                  		andi.w	#$FF80,d0
00011B32 3238 F700                  		move.w	($FFFFF700).w,d1
00011B36 0441 0080                  		subi.w	#$80,d1
00011B3A 0241 FF80                  		andi.w	#$FF80,d1
00011B3E 9041                       		sub.w	d1,d0
00011B40 0C40 0280                  		cmpi.w	#$280,d0
00011B44 6200 CC38                  		bhi.w	DeleteObject
00011B48 6000 CBF8                  		bra.w	DisplaySprite
00011B4C                            ; ===========================================================================
00011B4C 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
00011B4E 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
00011B50 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
00011B52 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
00011B54                            ; ===========================================================================
00011B54                            
00011B54                            Obj58_Type00:				; XREF: Obj58_TypeIndex
00011B54 4E75                       		rts	
00011B56                            ; ===========================================================================
00011B56                            
00011B56                            Obj58_Type01:				; XREF: Obj58_TypeIndex
00011B56 323C 0060                  		move.w	#$60,d1
00011B5A 7000                       		moveq	#0,d0
00011B5C 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011B60 0828 0000 0022             		btst	#0,$22(a0)
00011B66 6700                       		beq.s	loc_10A38
00011B68 4440                       		neg.w	d0
00011B6A D041                       		add.w	d1,d0
00011B6C                            
00011B6C                            loc_10A38:
00011B6C 3228 003A                  		move.w	$3A(a0),d1
00011B70 9240                       		sub.w	d0,d1
00011B72 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
00011B76 4E75                       		rts	
00011B78                            ; ===========================================================================
00011B78                            
00011B78                            Obj58_Type02:				; XREF: Obj58_TypeIndex
00011B78 323C 0060                  		move.w	#$60,d1
00011B7C 7000                       		moveq	#0,d0
00011B7E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00011B82 0828 0000 0022             		btst	#0,$22(a0)
00011B88 6700                       		beq.s	loc_10A5C
00011B8A 4440                       		neg.w	d0
00011B8C 0640 0080                  		addi.w	#$80,d0
00011B90                            
00011B90                            loc_10A5C:
00011B90 3228 0038                  		move.w	$38(a0),d1
00011B94 9240                       		sub.w	d0,d1
00011B96 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
00011B9A 4E75                       		rts	
00011B9C                            ; ===========================================================================
00011B9C                            
00011B9C                            Obj58_Type03:				; XREF: Obj58_TypeIndex
00011B9C 3028 003E                  		move.w	$3E(a0),d0
00011BA0 D168 0026                  		add.w	d0,$26(a0)
00011BA4 1028 0026                  		move.b	$26(a0),d0
00011BA8 4EB9 0000 3416             		jsr	(CalcSine).l
00011BAE 3428 0038                  		move.w	$38(a0),d2
00011BB2 3628 003A                  		move.w	$3A(a0),d3
00011BB6 7800                       		moveq	#0,d4
00011BB8 1828 003C                  		move.b	$3C(a0),d4
00011BBC 2A04                       		move.l	d4,d5
00011BBE C9C0                       		muls.w	d0,d4
00011BC0 E084                       		asr.l	#8,d4
00011BC2 CBC1                       		muls.w	d1,d5
00011BC4 E085                       		asr.l	#8,d5
00011BC6 D842                       		add.w	d2,d4
00011BC8 DA43                       		add.w	d3,d5
00011BCA 3144 000C                  		move.w	d4,$C(a0)
00011BCE 3145 0008                  		move.w	d5,8(a0)
00011BD2 4E75                       		rts	
00011BD4                            ; ===========================================================================
00011BD4                            ; ---------------------------------------------------------------------------
00011BD4                            ; Sprite mappings - SBZ	spiked ball on a chain
00011BD4                            ; ---------------------------------------------------------------------------
00011BD4                            Map_obj15b:
00011BD4                            	include "_maps\obj15sbz.asm"
00011BD4                            ; ---------------------------------------------------------------------------
00011BD4                            ; Sprite mappings - spiked ball on a chain (SBZ)
00011BD4                            ; ---------------------------------------------------------------------------
00011BD4 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00011BD8 0000                       		dc.w byte_10AC6-Map_obj15b
00011BDA 05                         byte_10AA6:	dc.b 5
00011BDB E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00011BE0 F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00011BE5 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00011BEA F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00011BEF 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00011BF4 01                         byte_10AC0:	dc.b 1
00011BF5 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00011BFA 02                         byte_10AC6:	dc.b 2
00011BFB F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00011C00 E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00011C06 00                         		even
00011C06 00                         		even
00011C06                            
00011C06                            ; ===========================================================================
00011C06                            ; ---------------------------------------------------------------------------
00011C06                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00011C06                            ; ---------------------------------------------------------------------------
00011C06                            
00011C06                            Obj59:					; XREF: Obj_Index
00011C06 7000                       		moveq	#0,d0
00011C08 1028 0024                  		move.b	$24(a0),d0
00011C0C 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00011C10 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00011C14 3028 0032                  		move.w	$32(a0),d0
00011C18 0240 FF80                  		andi.w	#$FF80,d0
00011C1C 3238 F700                  		move.w	($FFFFF700).w,d1
00011C20 0441 0080                  		subi.w	#$80,d1
00011C24 0241 FF80                  		andi.w	#$FF80,d1
00011C28 9041                       		sub.w	d1,d0
00011C2A 0C40 0280                  		cmpi.w	#$280,d0
00011C2E 6200 CB4E                  		bhi.w	DeleteObject
00011C32 6000 CB0E                  		bra.w	DisplaySprite
00011C36                            ; ===========================================================================
00011C36 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00011C38 0000                       		dc.w Obj59_Platform-Obj59_Index
00011C3A 0000                       		dc.w Obj59_Action-Obj59_Index
00011C3C 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00011C3E                            
00011C3E 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00011C40                            
00011C40 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00011C42 2001                       		dc.b $20, 1
00011C44 3401                       		dc.b $34, 1
00011C46 1003                       		dc.b $10, 3
00011C48 2003                       		dc.b $20, 3
00011C4A 3403                       		dc.b $34, 3
00011C4C 1401                       		dc.b $14, 1
00011C4E 2401                       		dc.b $24, 1
00011C50 2C01                       		dc.b $2C, 1
00011C52 1403                       		dc.b $14, 3
00011C54 2403                       		dc.b $24, 3
00011C56 2C03                       		dc.b $2C, 3
00011C58 2005                       		dc.b $20, 5
00011C5A 2007                       		dc.b $20, 7
00011C5C 3009                       		dc.b $30, 9
00011C5E                            ; ===========================================================================
00011C5E                            
00011C5E                            Obj59_Main:				; XREF: Obj59_Index
00011C5E 5428 0024                  		addq.b	#2,$24(a0)
00011C62 7000                       		moveq	#0,d0
00011C64 1028 0028                  		move.b	$28(a0),d0
00011C68 6A00                       		bpl.s	Obj59_Main2
00011C6A 5828 0024                  		addq.b	#4,$24(a0)
00011C6E 0240 007F                  		andi.w	#$7F,d0
00011C72 C0FC 0006                  		mulu.w	#6,d0
00011C76 3140 003C                  		move.w	d0,$3C(a0)
00011C7A 3140 003E                  		move.w	d0,$3E(a0)
00011C7E 588F                       		addq.l	#4,sp
00011C80 4E75                       		rts	
00011C82                            ; ===========================================================================
00011C82                            
00011C82                            Obj59_Main2:
00011C82 E648                       		lsr.w	#3,d0
00011C84 0240 001E                  		andi.w	#$1E,d0
00011C88 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00011C8C 115A 0019                  		move.b	(a2)+,$19(a0)
00011C90 115A 001A                  		move.b	(a2)+,$1A(a0)
00011C94 7000                       		moveq	#0,d0
00011C96 1028 0028                  		move.b	$28(a0),d0
00011C9A D040                       		add.w	d0,d0
00011C9C 0240 001E                  		andi.w	#$1E,d0
00011CA0 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00011CA4 101A                       		move.b	(a2)+,d0
00011CA6 E548                       		lsl.w	#2,d0
00011CA8 3140 003C                  		move.w	d0,$3C(a0)
00011CAC 115A 0028                  		move.b	(a2)+,$28(a0)
00011CB0 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00011CB8 317C 4000 0002             		move.w	#$4000,2(a0)
00011CBE 117C 0004 0001             		move.b	#4,1(a0)
00011CC4 117C 0004 0018             		move.b	#4,$18(a0)
00011CCA 3168 0008 0032             		move.w	8(a0),$32(a0)
00011CD0 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011CD6                            
00011CD6                            Obj59_Platform:				; XREF: Obj59_Index
00011CD6 7200                       		moveq	#0,d1
00011CD8 1228 0019                  		move.b	$19(a0),d1
00011CDC 4EB9 0000 834C             		jsr	(PlatformObject).l
00011CE2 6000 0000                  		bra.w	Obj59_Types
00011CE6                            ; ===========================================================================
00011CE6                            
00011CE6                            Obj59_Action:				; XREF: Obj59_Index
00011CE6 7200                       		moveq	#0,d1
00011CE8 1228 0019                  		move.b	$19(a0),d1
00011CEC 4EB9 0000 84C0             		jsr	(ExitPlatform).l
00011CF2 3F28 0008                  		move.w	8(a0),-(sp)
00011CF6 6100 0000                  		bsr.w	Obj59_Types
00011CFA 341F                       		move.w	(sp)+,d2
00011CFC 4A10                       		tst.b	0(a0)
00011CFE 6700                       		beq.s	locret_10BD4
00011D00 4EF9 0000 8A2A             		jmp	(MvSonicOnPtfm2).l
00011D06                            ; ===========================================================================
00011D06                            
00011D06                            locret_10BD4:
00011D06 4E75                       		rts	
00011D08                            ; ===========================================================================
00011D08                            
00011D08                            Obj59_Types:
00011D08 7000                       		moveq	#0,d0
00011D0A 1028 0028                  		move.b	$28(a0),d0
00011D0E 0240 000F                  		andi.w	#$F,d0
00011D12 D040                       		add.w	d0,d0
00011D14 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00011D18 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00011D1C                            ; ===========================================================================
00011D1C 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D20 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D24 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D28 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00011D2C 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00011D30                            ; ===========================================================================
00011D30                            
00011D30                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00011D30 4E75                       		rts	
00011D32                            ; ===========================================================================
00011D32                            
00011D32                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00011D32 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00011D38 6600                       		bne.s	locret_10C0C
00011D3A 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00011D3E                            
00011D3E                            locret_10C0C:
00011D3E 4E75                       		rts	
00011D40                            ; ===========================================================================
00011D40                            
00011D40                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00011D40 6100 0000                  		bsr.w	Obj59_Move
00011D44 3028 0034                  		move.w	$34(a0),d0
00011D48 4440                       		neg.w	d0
00011D4A D068 0030                  		add.w	$30(a0),d0
00011D4E 3140 000C                  		move.w	d0,$C(a0)
00011D52 4E75                       		rts	
00011D54                            ; ===========================================================================
00011D54                            
00011D54                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00011D54 6100 0000                  		bsr.w	Obj59_Move
00011D58 3028 0034                  		move.w	$34(a0),d0
00011D5C D068 0030                  		add.w	$30(a0),d0
00011D60 3140 000C                  		move.w	d0,$C(a0)
00011D64 4E75                       		rts	
00011D66                            ; ===========================================================================
00011D66                            
00011D66                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00011D66 6100 0000                  		bsr.w	Obj59_Move
00011D6A 3028 0034                  		move.w	$34(a0),d0
00011D6E E240                       		asr.w	#1,d0
00011D70 4440                       		neg.w	d0
00011D72 D068 0030                  		add.w	$30(a0),d0
00011D76 3140 000C                  		move.w	d0,$C(a0)
00011D7A 3028 0034                  		move.w	$34(a0),d0
00011D7E D068 0032                  		add.w	$32(a0),d0
00011D82 3140 0008                  		move.w	d0,8(a0)
00011D86 4E75                       		rts	
00011D88                            ; ===========================================================================
00011D88                            
00011D88                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00011D88 6100 0000                  		bsr.w	Obj59_Move
00011D8C 3028 0034                  		move.w	$34(a0),d0
00011D90 E240                       		asr.w	#1,d0
00011D92 D068 0030                  		add.w	$30(a0),d0
00011D96 3140 000C                  		move.w	d0,$C(a0)
00011D9A 3028 0034                  		move.w	$34(a0),d0
00011D9E 4440                       		neg.w	d0
00011DA0 D068 0032                  		add.w	$32(a0),d0
00011DA4 3140 0008                  		move.w	d0,8(a0)
00011DA8 4E75                       		rts	
00011DAA                            ; ===========================================================================
00011DAA                            
00011DAA                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00011DAA 6100 0000                  		bsr.w	Obj59_Move
00011DAE 3028 0034                  		move.w	$34(a0),d0
00011DB2 4440                       		neg.w	d0
00011DB4 D068 0030                  		add.w	$30(a0),d0
00011DB8 3140 000C                  		move.w	d0,$C(a0)
00011DBC 4A28 0028                  		tst.b	$28(a0)
00011DC0 6700 0000                  		beq.w	loc_10C94
00011DC4 4E75                       		rts	
00011DC6                            ; ===========================================================================
00011DC6                            
00011DC6                            loc_10C94:
00011DC6 0828 0003 0022             		btst	#3,$22(a0)
00011DCC 6700                       		beq.s	Obj59_Delete
00011DCE 08E9 0001 0022             		bset	#1,$22(a1)
00011DD4 08A9 0003 0022             		bclr	#3,$22(a1)
00011DDA 137C 0002 0024             		move.b	#2,$24(a1)
00011DE0                            
00011DE0                            Obj59_Delete:
00011DE0 6000 C99C                  		bra.w	DeleteObject
00011DE4                            
00011DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00011DE4                            
00011DE4                            
00011DE4                            Obj59_Move:				; XREF: Obj59_Type02; et al
00011DE4 3028 0038                  		move.w	$38(a0),d0
00011DE8 4A28 003A                  		tst.b	$3A(a0)
00011DEC 6600                       		bne.s	loc_10CC8
00011DEE 0C40 0800                  		cmpi.w	#$800,d0
00011DF2 6400                       		bcc.s	loc_10CD0
00011DF4 0640 0010                  		addi.w	#$10,d0
00011DF8 6000                       		bra.s	loc_10CD0
00011DFA                            ; ===========================================================================
00011DFA                            
00011DFA                            loc_10CC8:
00011DFA 4A40                       		tst.w	d0
00011DFC 6700                       		beq.s	loc_10CD0
00011DFE 0440 0010                  		subi.w	#$10,d0
00011E02                            
00011E02                            loc_10CD0:
00011E02 3140 0038                  		move.w	d0,$38(a0)
00011E06 48C0                       		ext.l	d0
00011E08 E180                       		asl.l	#8,d0
00011E0A D0A8 0034                  		add.l	$34(a0),d0
00011E0E 2140 0034                  		move.l	d0,$34(a0)
00011E12 4840                       		swap	d0
00011E14 3428 003C                  		move.w	$3C(a0),d2
00011E18 B042                       		cmp.w	d2,d0
00011E1A 6300                       		bls.s	loc_10CF0
00011E1C 117C 0001 003A             		move.b	#1,$3A(a0)
00011E22                            
00011E22                            loc_10CF0:
00011E22 D442                       		add.w	d2,d2
00011E24 B042                       		cmp.w	d2,d0
00011E26 6600                       		bne.s	locret_10CFA
00011E28 4228 0028                  		clr.b	$28(a0)
00011E2C                            
00011E2C                            locret_10CFA:
00011E2C 4E75                       		rts	
00011E2E                            ; End of function Obj59_Move
00011E2E                            
00011E2E                            ; ===========================================================================
00011E2E                            
00011E2E                            Obj59_MakeMulti:			; XREF: Obj59_Index
00011E2E 5368 003C                  		subq.w	#1,$3C(a0)
00011E32 6600                       		bne.s	Obj59_ChkDel
00011E34 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00011E3A 6100 CD8C                  		bsr.w	SingleObjLoad
00011E3E 6600                       		bne.s	Obj59_ChkDel
00011E40 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00011E44 3368 0008 0008             		move.w	8(a0),8(a1)
00011E4A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011E50 137C 000E 0028             		move.b	#$E,$28(a1)
00011E56                            
00011E56                            Obj59_ChkDel:
00011E56 588F                       		addq.l	#4,sp
00011E58 3028 0008                  		move.w	8(a0),d0
00011E5C 0240 FF80                  		andi.w	#$FF80,d0
00011E60 3238 F700                  		move.w	($FFFFF700).w,d1
00011E64 0441 0080                  		subi.w	#$80,d1
00011E68 0241 FF80                  		andi.w	#$FF80,d1
00011E6C 9041                       		sub.w	d1,d0
00011E6E 0C40 0280                  		cmpi.w	#$280,d0
00011E72 6200 C90A                  		bhi.w	DeleteObject
00011E76 4E75                       		rts	
00011E78                            ; ===========================================================================
00011E78                            ; ---------------------------------------------------------------------------
00011E78                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011E78                            ; ---------------------------------------------------------------------------
00011E78                            Map_obj59:
00011E78                            	include "_maps\obj59.asm"
00011E78                            ; ---------------------------------------------------------------------------
00011E78                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00011E78                            ; ---------------------------------------------------------------------------
00011E78 0000                       		dc.w byte_10D4A-Map_obj59
00011E7A 03                         byte_10D4A:	dc.b 3
00011E7B F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00011E80 F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00011E85 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00011E8A                            		even
00011E8A                            		even
00011E8A                            
00011E8A                            ; ===========================================================================
00011E8A                            ; ---------------------------------------------------------------------------
00011E8A                            ; Object 5A - platforms	moving in circles (SLZ)
00011E8A                            ; ---------------------------------------------------------------------------
00011E8A                            
00011E8A                            Obj5A:					; XREF: Obj_Index
00011E8A 7000                       		moveq	#0,d0
00011E8C 1028 0024                  		move.b	$24(a0),d0
00011E90 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00011E94 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00011E98 3028 0032                  		move.w	$32(a0),d0
00011E9C 0240 FF80                  		andi.w	#$FF80,d0
00011EA0 3238 F700                  		move.w	($FFFFF700).w,d1
00011EA4 0441 0080                  		subi.w	#$80,d1
00011EA8 0241 FF80                  		andi.w	#$FF80,d1
00011EAC 9041                       		sub.w	d1,d0
00011EAE 0C40 0280                  		cmpi.w	#$280,d0
00011EB2 6200 C8CA                  		bhi.w	DeleteObject
00011EB6 6000 C88A                  		bra.w	DisplaySprite
00011EBA                            ; ===========================================================================
00011EBA 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00011EBC 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00011EBE 0000                       		dc.w Obj5A_Action-Obj5A_Index
00011EC0                            ; ===========================================================================
00011EC0                            
00011EC0                            Obj5A_Main:				; XREF: Obj5A_Index
00011EC0 5428 0024                  		addq.b	#2,$24(a0)
00011EC4 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00011ECC 317C 4000 0002             		move.w	#$4000,2(a0)
00011ED2 117C 0004 0001             		move.b	#4,1(a0)
00011ED8 117C 0004 0018             		move.b	#4,$18(a0)
00011EDE 117C 0018 0019             		move.b	#$18,$19(a0)
00011EE4 3168 0008 0032             		move.w	8(a0),$32(a0)
00011EEA 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011EF0                            
00011EF0                            Obj5A_Platform:				; XREF: Obj5A_Index
00011EF0 7200                       		moveq	#0,d1
00011EF2 1228 0019                  		move.b	$19(a0),d1
00011EF6 4EB9 0000 834C             		jsr	(PlatformObject).l
00011EFC 6000 0000                  		bra.w	Obj5A_Types
00011F00                            ; ===========================================================================
00011F00                            
00011F00                            Obj5A_Action:				; XREF: Obj5A_Index
00011F00 7200                       		moveq	#0,d1
00011F02 1228 0019                  		move.b	$19(a0),d1
00011F06 4EB9 0000 84C0             		jsr	(ExitPlatform).l
00011F0C 3F28 0008                  		move.w	8(a0),-(sp)
00011F10 6100 0000                  		bsr.w	Obj5A_Types
00011F14 341F                       		move.w	(sp)+,d2
00011F16 4EF9 0000 8A2A             		jmp	(MvSonicOnPtfm2).l
00011F1C                            ; ===========================================================================
00011F1C                            
00011F1C                            Obj5A_Types:
00011F1C 7000                       		moveq	#0,d0
00011F1E 1028 0028                  		move.b	$28(a0),d0
00011F22 0240 000C                  		andi.w	#$C,d0
00011F26 E248                       		lsr.w	#1,d0
00011F28 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00011F2C 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00011F30                            ; ===========================================================================
00011F30 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00011F32 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00011F34                            ; ===========================================================================
00011F34                            
00011F34                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00011F34 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011F38 0401 0050                  		subi.b	#$50,d1
00011F3C 4881                       		ext.w	d1
00011F3E 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011F42 0402 0050                  		subi.b	#$50,d2
00011F46 4882                       		ext.w	d2
00011F48 0828 0000 0028             		btst	#0,$28(a0)
00011F4E 6700                       		beq.s	loc_10E24
00011F50 4441                       		neg.w	d1
00011F52 4442                       		neg.w	d2
00011F54                            
00011F54                            loc_10E24:
00011F54 0828 0001 0028             		btst	#1,$28(a0)
00011F5A 6700                       		beq.s	loc_10E30
00011F5C 4441                       		neg.w	d1
00011F5E C342                       		exg	d1,d2
00011F60                            
00011F60                            loc_10E30:
00011F60 D268 0032                  		add.w	$32(a0),d1
00011F64 3141 0008                  		move.w	d1,8(a0)
00011F68 D468 0030                  		add.w	$30(a0),d2
00011F6C 3142 000C                  		move.w	d2,$C(a0)
00011F70 4E75                       		rts	
00011F72                            ; ===========================================================================
00011F72                            
00011F72                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00011F72 1238 FE80                  		move.b	($FFFFFE80).w,d1
00011F76 0401 0050                  		subi.b	#$50,d1
00011F7A 4881                       		ext.w	d1
00011F7C 1438 FE84                  		move.b	($FFFFFE84).w,d2
00011F80 0402 0050                  		subi.b	#$50,d2
00011F84 4882                       		ext.w	d2
00011F86 0828 0000 0028             		btst	#0,$28(a0)
00011F8C 6700                       		beq.s	loc_10E62
00011F8E 4441                       		neg.w	d1
00011F90 4442                       		neg.w	d2
00011F92                            
00011F92                            loc_10E62:
00011F92 0828 0001 0028             		btst	#1,$28(a0)
00011F98 6700                       		beq.s	loc_10E6E
00011F9A 4441                       		neg.w	d1
00011F9C C342                       		exg	d1,d2
00011F9E                            
00011F9E                            loc_10E6E:
00011F9E 4441                       		neg.w	d1
00011FA0 D268 0032                  		add.w	$32(a0),d1
00011FA4 3141 0008                  		move.w	d1,8(a0)
00011FA8 D468 0030                  		add.w	$30(a0),d2
00011FAC 3142 000C                  		move.w	d2,$C(a0)
00011FB0 4E75                       		rts	
00011FB2                            ; ===========================================================================
00011FB2                            ; ---------------------------------------------------------------------------
00011FB2                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011FB2                            ; ---------------------------------------------------------------------------
00011FB2                            Map_obj5A:
00011FB2                            	include "_maps\obj5A.asm"
00011FB2                            ; ---------------------------------------------------------------------------
00011FB2                            ; Sprite mappings - platforms that move	in circles (SLZ)
00011FB2                            ; ---------------------------------------------------------------------------
00011FB2 0000                       		dc.w byte_10E84-Map_obj5A
00011FB4 02                         byte_10E84:	dc.b 2
00011FB5 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00011FBA F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00011FC0 00                         		even
00011FC0 00                         		even
00011FC0                            
00011FC0                            ; ===========================================================================
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0                            ; Object 5B - blocks that form a staircase (SLZ)
00011FC0                            ; ---------------------------------------------------------------------------
00011FC0                            
00011FC0                            Obj5B:					; XREF: Obj_Index
00011FC0 7000                       		moveq	#0,d0
00011FC2 1028 0024                  		move.b	$24(a0),d0
00011FC6 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00011FCA 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00011FCE 3028 0030                  		move.w	$30(a0),d0
00011FD2 0240 FF80                  		andi.w	#$FF80,d0
00011FD6 3238 F700                  		move.w	($FFFFF700).w,d1
00011FDA 0441 0080                  		subi.w	#$80,d1
00011FDE 0241 FF80                  		andi.w	#$FF80,d1
00011FE2 9041                       		sub.w	d1,d0
00011FE4 0C40 0280                  		cmpi.w	#$280,d0
00011FE8 6200 C794                  		bhi.w	DeleteObject
00011FEC 6000 C754                  		bra.w	DisplaySprite
00011FF0                            ; ===========================================================================
00011FF0 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00011FF2 0000                       		dc.w Obj5B_Move-Obj5B_Index
00011FF4 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00011FF6                            ; ===========================================================================
00011FF6                            
00011FF6                            Obj5B_Main:				; XREF: Obj5B_Index
00011FF6 5428 0024                  		addq.b	#2,$24(a0)
00011FFA 7638                       		moveq	#$38,d3
00011FFC 7801                       		moveq	#1,d4
00011FFE 0828 0000 0022             		btst	#0,$22(a0)
00012004 6700                       		beq.s	loc_10EDA
00012006 763B                       		moveq	#$3B,d3
00012008 78FF                       		moveq	#-1,d4
0001200A                            
0001200A                            loc_10EDA:
0001200A 3428 0008                  		move.w	8(a0),d2
0001200E 2248                       		movea.l	a0,a1
00012010 7203                       		moveq	#3,d1
00012012 6000                       		bra.s	Obj5B_MakeBlocks
00012014                            ; ===========================================================================
00012014                            
00012014                            Obj5B_Loop:
00012014 6100 CBC8                  		bsr.w	SingleObjLoad2
00012018 6600 0000                  		bne.w	Obj5B_Move
0001201C 137C 0004 0024             		move.b	#4,$24(a1)
00012022                            
00012022                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00012022 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00012026 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
0001202E 337C 4000 0002             		move.w	#$4000,2(a1)
00012034 137C 0004 0001             		move.b	#4,1(a1)
0001203A 137C 0003 0018             		move.b	#3,$18(a1)
00012040 137C 0010 0019             		move.b	#$10,$19(a1)
00012046 1368 0028 0028             		move.b	$28(a0),$28(a1)
0001204C 3342 0008                  		move.w	d2,8(a1)
00012050 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012056 3368 0008 0030             		move.w	8(a0),$30(a1)
0001205C 3369 000C 0032             		move.w	$C(a1),$32(a1)
00012062 0642 0020                  		addi.w	#$20,d2
00012066 1343 0037                  		move.b	d3,$37(a1)
0001206A 2348 003C                  		move.l	a0,$3C(a1)
0001206E D604                       		add.b	d4,d3
00012070 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00012074                            
00012074                            Obj5B_Move:				; XREF: Obj5B_Index
00012074 7000                       		moveq	#0,d0
00012076 1028 0028                  		move.b	$28(a0),d0
0001207A 0240 0007                  		andi.w	#7,d0
0001207E D040                       		add.w	d0,d0
00012080 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00012084 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00012088                            
00012088                            Obj5B_Solid:				; XREF: Obj5B_Index
00012088 2468 003C                  		movea.l	$3C(a0),a2
0001208C 7000                       		moveq	#0,d0
0001208E 1028 0037                  		move.b	$37(a0),d0
00012092 1032 0000                  		move.b	(a2,d0.w),d0
00012096 D068 0032                  		add.w	$32(a0),d0
0001209A 3140 000C                  		move.w	d0,$C(a0)
0001209E 7200                       		moveq	#0,d1
000120A0 1228 0019                  		move.b	$19(a0),d1
000120A4 0641 000B                  		addi.w	#$B,d1
000120A8 343C 0010                  		move.w	#$10,d2
000120AC 363C 0011                  		move.w	#$11,d3
000120B0 3828 0008                  		move.w	8(a0),d4
000120B4 6100 EA5C                  		bsr.w	SolidObject
000120B8 4A04                       		tst.b	d4
000120BA 6A00                       		bpl.s	loc_10F92
000120BC 1544 0036                  		move.b	d4,$36(a2)
000120C0                            
000120C0                            loc_10F92:
000120C0 0828 0003 0022             		btst	#3,$22(a0)
000120C6 6700                       		beq.s	locret_10FA0
000120C8 157C 0001 0036             		move.b	#1,$36(a2)
000120CE                            
000120CE                            locret_10FA0:
000120CE 4E75                       		rts	
000120D0                            ; ===========================================================================
000120D0 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
000120D2 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000120D4 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
000120D6 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
000120D8                            ; ===========================================================================
000120D8                            
000120D8                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
000120D8 4A68 0034                  		tst.w	$34(a0)
000120DC 6600                       		bne.s	loc_10FC0
000120DE 0C28 0001 0036             		cmpi.b	#1,$36(a0)
000120E4 6600                       		bne.s	locret_10FBE
000120E6 317C 001E 0034             		move.w	#$1E,$34(a0)
000120EC                            
000120EC                            locret_10FBE:
000120EC 4E75                       		rts	
000120EE                            ; ===========================================================================
000120EE                            
000120EE                            loc_10FC0:
000120EE 5368 0034                  		subq.w	#1,$34(a0)
000120F2 66F8                       		bne.s	locret_10FBE
000120F4 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000120F8 4E75                       		rts	
000120FA                            ; ===========================================================================
000120FA                            
000120FA                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
000120FA 4A68 0034                  		tst.w	$34(a0)
000120FE 6600                       		bne.s	loc_10FE0
00012100 4A28 0036                  		tst.b	$36(a0)
00012104 6A00                       		bpl.s	locret_10FDE
00012106 317C 003C 0034             		move.w	#$3C,$34(a0)
0001210C                            
0001210C                            locret_10FDE:
0001210C 4E75                       		rts	
0001210E                            ; ===========================================================================
0001210E                            
0001210E                            loc_10FE0:
0001210E 5368 0034                  		subq.w	#1,$34(a0)
00012112 6600                       		bne.s	loc_10FEC
00012114 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012118 4E75                       		rts	
0001211A                            ; ===========================================================================
0001211A                            
0001211A                            loc_10FEC:
0001211A 43E8 0038                  		lea	$38(a0),a1
0001211E 3028 0034                  		move.w	$34(a0),d0
00012122 E408                       		lsr.b	#2,d0
00012124 0200 0001                  		andi.b	#1,d0
00012128 12C0                       		move.b	d0,(a1)+
0001212A 0A00 0001                  		eori.b	#1,d0
0001212E 12C0                       		move.b	d0,(a1)+
00012130 0A00 0001                  		eori.b	#1,d0
00012134 12C0                       		move.b	d0,(a1)+
00012136 0A00 0001                  		eori.b	#1,d0
0001213A 12C0                       		move.b	d0,(a1)+
0001213C 4E75                       		rts	
0001213E                            ; ===========================================================================
0001213E                            
0001213E                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
0001213E 43E8 0038                  		lea	$38(a0),a1
00012142 0C11 0080                  		cmpi.b	#$80,(a1)
00012146 6700                       		beq.s	locret_11038
00012148 5211                       		addq.b	#1,(a1)
0001214A 7200                       		moveq	#0,d1
0001214C 1219                       		move.b	(a1)+,d1
0001214E 4841                       		swap	d1
00012150 E289                       		lsr.l	#1,d1
00012152 2401                       		move.l	d1,d2
00012154 E289                       		lsr.l	#1,d1
00012156 2601                       		move.l	d1,d3
00012158 D682                       		add.l	d2,d3
0001215A 4841                       		swap	d1
0001215C 4842                       		swap	d2
0001215E 4843                       		swap	d3
00012160 12C3                       		move.b	d3,(a1)+
00012162 12C2                       		move.b	d2,(a1)+
00012164 12C1                       		move.b	d1,(a1)+
00012166                            
00012166                            locret_11038:
00012166 4E75                       		rts	
00012168 4E75                       		rts	
0001216A                            ; ===========================================================================
0001216A                            ; ---------------------------------------------------------------------------
0001216A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001216A                            ; ---------------------------------------------------------------------------
0001216A                            Map_obj5B:
0001216A                            	include "_maps\obj5B.asm"
0001216A                            ; ---------------------------------------------------------------------------
0001216A                            ; Sprite mappings - blocks that	form a staircase (SLZ)
0001216A                            ; ---------------------------------------------------------------------------
0001216A 0000                       		dc.w byte_1103E-Map_obj5B
0001216C 01                         byte_1103E:	dc.b 1
0001216D F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00012172                            		even
00012172                            		even
00012172                            
00012172                            ; ===========================================================================
00012172                            ; ---------------------------------------------------------------------------
00012172                            ; Object 5C - metal girders in foreground (SLZ)
00012172                            ; ---------------------------------------------------------------------------
00012172                            
00012172                            Obj5C:					; XREF: Obj_Index
00012172 7000                       		moveq	#0,d0
00012174 1028 0024                  		move.b	$24(a0),d0
00012178 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
0001217C 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00012180                            ; ===========================================================================
00012180 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00012182 0000                       		dc.w Obj5C_Display-Obj5C_Index
00012184                            ; ===========================================================================
00012184                            
00012184                            Obj5C_Main:				; XREF: Obj5C_Index
00012184 5428 0024                  		addq.b	#2,$24(a0)
00012188 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00012190 317C 83CC 0002             		move.w	#$83CC,2(a0)
00012196 117C 0010 0019             		move.b	#$10,$19(a0)
0001219C                            
0001219C                            Obj5C_Display:				; XREF: Obj5C_Index
0001219C 2238 F700                  		move.l	($FFFFF700).w,d1
000121A0 D281                       		add.l	d1,d1
000121A2 4841                       		swap	d1
000121A4 4441                       		neg.w	d1
000121A6 3141 0008                  		move.w	d1,8(a0)
000121AA 2238 F704                  		move.l	($FFFFF704).w,d1
000121AE D281                       		add.l	d1,d1
000121B0 4841                       		swap	d1
000121B2 0241 003F                  		andi.w	#$3F,d1
000121B6 4441                       		neg.w	d1
000121B8 0641 0100                  		addi.w	#$100,d1
000121BC 3141 000A                  		move.w	d1,$A(a0)
000121C0 6000 C580                  		bra.w	DisplaySprite
000121C4                            ; ===========================================================================
000121C4                            ; ---------------------------------------------------------------------------
000121C4                            ; Sprite mappings - metal girders in foreground	(SLZ)
000121C4                            ; ---------------------------------------------------------------------------
000121C4                            Map_obj5C:
000121C4                            	include "_maps\obj5C.asm"
000121C4                            ; ---------------------------------------------------------------------------
000121C4                            ; Sprite mappings - metal girders in foreground	(SLZ)
000121C4                            ; ---------------------------------------------------------------------------
000121C4 0000                       		dc.w byte_11098-Map_obj5C
000121C6 09                         byte_11098:	dc.b 9
000121C7 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
000121CC A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
000121D1 C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
000121D6 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
000121DB 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
000121E0 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
000121E5 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
000121EA 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
000121EF 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
000121F4                            		even
000121F4                            		even
000121F4                            
000121F4                            ; ===========================================================================
000121F4                            ; ---------------------------------------------------------------------------
000121F4                            ; Object 1B - water surface (LZ)
000121F4                            ; ---------------------------------------------------------------------------
000121F4                            
000121F4                            Obj1B:					; XREF: Obj_Index
000121F4 7000                       		moveq	#0,d0
000121F6 1028 0024                  		move.b	$24(a0),d0
000121FA 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
000121FE 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
00012202                            ; ===========================================================================
00012202 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00012204 0000                       		dc.w Obj1B_Action-Obj1B_Index
00012206                            ; ===========================================================================
00012206                            
00012206                            Obj1B_Main:				; XREF: Obj1B_Index
00012206 5428 0024                  		addq.b	#2,$24(a0)
0001220A 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
00012212 317C C300 0002             		move.w	#$C300,2(a0)
00012218 117C 0004 0001             		move.b	#4,1(a0)
0001221E 117C 0080 0019             		move.b	#$80,$19(a0)
00012224 3168 0008 0030             		move.w	8(a0),$30(a0)
0001222A                            
0001222A                            Obj1B_Action:				; XREF: Obj1B_Index
0001222A 3238 F700                  		move.w	($FFFFF700).w,d1
0001222E 0241 FFE0                  		andi.w	#$FFE0,d1
00012232 D268 0030                  		add.w	$30(a0),d1
00012236 0838 0000 FE05             		btst	#0,($FFFFFE05).w
0001223C 6700                       		beq.s	loc_11114
0001223E 0641 0020                  		addi.w	#$20,d1
00012242                            
00012242                            loc_11114:
00012242 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
00012246 3238 F646                  		move.w	($FFFFF646).w,d1
0001224A 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
0001224E 4A28 0032                  		tst.b	$32(a0)
00012252 6600                       		bne.s	Obj1B_Animate
00012254 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
0001225A 6700                       		beq.s	loc_1114A	; if not, branch
0001225C 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
00012260 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
00012266 6000                       		bra.s	Obj1B_Display
00012268                            ; ===========================================================================
00012268                            
00012268                            Obj1B_Animate:				; XREF: loc_11114
00012268 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001226C 6600                       		bne.s	Obj1B_Display	; if yes, branch
0001226E 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
00012274 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
00012278                            
00012278                            loc_1114A:				; XREF: loc_11114
00012278 5328 001E                  		subq.b	#1,$1E(a0)
0001227C 6A00                       		bpl.s	Obj1B_Display
0001227E 117C 0007 001E             		move.b	#7,$1E(a0)
00012284 5228 001A                  		addq.b	#1,$1A(a0)
00012288 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
0001228E 6500                       		bcs.s	Obj1B_Display
00012290 117C 0000 001A             		move.b	#0,$1A(a0)
00012296                            
00012296                            Obj1B_Display:
00012296 6000 C4AA                  		bra.w	DisplaySprite
0001229A                            ; ===========================================================================
0001229A                            ; ---------------------------------------------------------------------------
0001229A                            ; Sprite mappings - water surface (LZ)
0001229A                            ; ---------------------------------------------------------------------------
0001229A                            Map_obj1B:
0001229A                            	include "_maps\obj1B.asm"
0001229A                            ; ---------------------------------------------------------------------------
0001229A                            ; Sprite mappings - water surface (LZ)
0001229A                            ; ---------------------------------------------------------------------------
0001229A 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
0001229E 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000122A2 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
000122A6 03                         byte_11178:	dc.b 3
000122A7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000122AC FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000122B1 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000122B6 03                         byte_11188:	dc.b 3
000122B7 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000122BC FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
000122C1 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
000122C6 03                         byte_11198:	dc.b 3
000122C7 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
000122CC FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
000122D1 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
000122D6 06                         byte_111A8:	dc.b 6
000122D7 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
000122DC FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
000122E1 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
000122E6 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
000122EB FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
000122F0 FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
000122F5 06                         byte_111C7:	dc.b 6
000122F6 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
000122FB FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
00012300 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00012305 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
0001230A FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001230F FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00012314 06                         byte_111E6:	dc.b 6
00012315 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
0001231A FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001231F FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00012324 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00012329 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001232E FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00012334 00                         		even
00012334 00                         		even
00012334                            
00012334                            ; ===========================================================================
00012334                            ; ---------------------------------------------------------------------------
00012334                            ; Object 0B - pole that	breaks (LZ)
00012334                            ; ---------------------------------------------------------------------------
00012334                            
00012334                            Obj0B:					; XREF: Obj_Index
00012334 7000                       		moveq	#0,d0
00012336 1028 0024                  		move.b	$24(a0),d0
0001233A 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001233E 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
00012342                            ; ===========================================================================
00012342 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
00012344 0000                       		dc.w Obj0B_Action-Obj0B_Index
00012346 0000                       		dc.w Obj0B_Display-Obj0B_Index
00012348                            ; ===========================================================================
00012348                            
00012348                            Obj0B_Main:				; XREF: Obj0B_Index
00012348 5428 0024                  		addq.b	#2,$24(a0)
0001234C 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
00012354 317C 43DE 0002             		move.w	#$43DE,2(a0)
0001235A 117C 0004 0001             		move.b	#4,1(a0)
00012360 117C 0008 0019             		move.b	#8,$19(a0)
00012366 117C 0004 0018             		move.b	#4,$18(a0)
0001236C 117C 00E1 0020             		move.b	#$E1,$20(a0)
00012372 7000                       		moveq	#0,d0
00012374 1028 0028                  		move.b	$28(a0),d0	; get object type
00012378 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001237C 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
00012380                            
00012380                            Obj0B_Action:				; XREF: Obj0B_Index
00012380 4A28 0032                  		tst.b	$32(a0)
00012384 6700                       		beq.s	Obj0B_Grab
00012386 4A68 0030                  		tst.w	$30(a0)
0001238A 6700                       		beq.s	Obj0B_MoveUp
0001238C 5368 0030                  		subq.w	#1,$30(a0)
00012390 6600                       		bne.s	Obj0B_MoveUp
00012392 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
00012398 6000                       		bra.s	Obj0B_Release
0001239A                            ; ===========================================================================
0001239A                            
0001239A                            Obj0B_MoveUp:				; XREF: Obj0B_Action
0001239A 43F8 D000                  		lea	($FFFFD000).w,a1
0001239E 3028 000C                  		move.w	$C(a0),d0
000123A2 0440 0018                  		subi.w	#$18,d0
000123A6 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
000123AC 6700                       		beq.s	Obj0B_MoveDown
000123AE 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
000123B2 B069 000C                  		cmp.w	$C(a1),d0
000123B6 6500                       		bcs.s	Obj0B_MoveDown
000123B8 3340 000C                  		move.w	d0,$C(a1)
000123BC                            
000123BC                            Obj0B_MoveDown:
000123BC 0640 0024                  		addi.w	#$24,d0
000123C0 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
000123C6 6700                       		beq.s	Obj0B_LetGo
000123C8 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
000123CC B069 000C                  		cmp.w	$C(a1),d0
000123D0 6400                       		bcc.s	Obj0B_LetGo
000123D2 3340 000C                  		move.w	d0,$C(a1)
000123D6                            
000123D6                            Obj0B_LetGo:
000123D6 1038 F603                  		move.b	($FFFFF603).w,d0
000123DA 0240 0070                  		andi.w	#$70,d0
000123DE 6700                       		beq.s	Obj0B_Display
000123E0                            
000123E0                            Obj0B_Release:				; XREF: Obj0B_Action
000123E0 4228 0020                  		clr.b	$20(a0)
000123E4 5428 0024                  		addq.b	#2,$24(a0)
000123E8 4238 F7C8                  		clr.b	($FFFFF7C8).w
000123EC 4238 F7C9                  		clr.b	($FFFFF7C9).w
000123F0 4228 0032                  		clr.b	$32(a0)
000123F4 6000                       		bra.s	Obj0B_Display
000123F6                            ; ===========================================================================
000123F6                            
000123F6                            Obj0B_Grab:				; XREF: Obj0B_Action
000123F6 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
000123FA 6700                       		beq.s	Obj0B_Display	; if not, branch
000123FC 43F8 D000                  		lea	($FFFFD000).w,a1
00012400 3028 0008                  		move.w	8(a0),d0
00012404 0640 0014                  		addi.w	#$14,d0
00012408 B069 0008                  		cmp.w	8(a1),d0
0001240C 6400                       		bcc.s	Obj0B_Display
0001240E 4228 0021                  		clr.b	$21(a0)
00012412 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00012418 6400                       		bcc.s	Obj0B_Display
0001241A 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001241E 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
00012422 3028 0008                  		move.w	8(a0),d0
00012426 0640 0014                  		addi.w	#$14,d0
0001242A 3340 0008                  		move.w	d0,8(a1)
0001242E 08A9 0000 0022             		bclr	#0,$22(a1)
00012434 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
0001243A 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
00012440 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00012446 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
0001244C                            
0001244C                            Obj0B_Display:				; XREF: Obj0B_Index
0001244C 6000 E39C                  		bra.w	MarkObjGone
00012450                            ; ===========================================================================
00012450                            ; ---------------------------------------------------------------------------
00012450                            ; Sprite mappings - pole that breaks (LZ)
00012450                            ; ---------------------------------------------------------------------------
00012450                            Map_obj0B:
00012450                            	include "_maps\obj0B.asm"
00012450                            ; ---------------------------------------------------------------------------
00012450                            ; Sprite mappings - pole that breaks (LZ)
00012450                            ; ---------------------------------------------------------------------------
00012450 0000                       		dc.w byte_11326-Map_obj0B
00012452 0000                       		dc.w byte_11331-Map_obj0B
00012454 02                         byte_11326:	dc.b 2			; normal pole
00012455 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
0001245A 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
0001245F 04                         byte_11331:	dc.b 4			; broken pole
00012460 E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
00012465 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
0001246A 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
0001246F 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
00012474                            		even
00012474                            		even
00012474                            
00012474                            ; ===========================================================================
00012474                            ; ---------------------------------------------------------------------------
00012474                            ; Object 0C - flapping door (LZ)
00012474                            ; ---------------------------------------------------------------------------
00012474                            
00012474                            Obj0C:					; XREF: Obj_Index
00012474 7000                       		moveq	#0,d0
00012476 1028 0024                  		move.b	$24(a0),d0
0001247A 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
0001247E 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
00012482                            ; ===========================================================================
00012482 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
00012484 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
00012486                            ; ===========================================================================
00012486                            
00012486                            Obj0C_Main:				; XREF: Obj0C_Index
00012486 5428 0024                  		addq.b	#2,$24(a0)
0001248A 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
00012492 317C 4328 0002             		move.w	#$4328,2(a0)
00012498 0028 0004 0001             		ori.b	#4,1(a0)
0001249E 117C 0028 0019             		move.b	#$28,$19(a0)
000124A4 7000                       		moveq	#0,d0
000124A6 1028 0028                  		move.b	$28(a0),d0	; get object type
000124AA C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000124AE 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
000124B2                            
000124B2                            Obj0C_OpenClose:			; XREF: Obj0C_Index
000124B2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000124B6 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
000124B8 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
000124BE 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
000124C4 4A28 0001                  		tst.b	1(a0)
000124C8 6A00                       		bpl.s	Obj0C_Solid
000124CA 303C 00BB                  		move.w	#$BB,d0
000124CE 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play door sound
000124D4                            
000124D4                            Obj0C_Solid:
000124D4 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
000124DA 6100 92B4                  		bsr.w	AnimateSprite
000124DE 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
000124E2 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
000124E6 6600                       		bne.s	Obj0C_Display	; if yes, branch
000124E8 3038 D008                  		move.w	($FFFFD008).w,d0
000124EC B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
000124F0 6400                       		bcc.s	Obj0C_Display	; if yes, branch
000124F2 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000124F8 323C 0013                  		move.w	#$13,d1
000124FC 343C 0020                  		move.w	#$20,d2
00012500 3602                       		move.w	d2,d3
00012502 5243                       		addq.w	#1,d3
00012504 3828 0008                  		move.w	8(a0),d4
00012508 6100 E608                  		bsr.w	SolidObject	; make the door	solid
0001250C                            
0001250C                            Obj0C_Display:
0001250C 6000 E2DC                  		bra.w	MarkObjGone
00012510                            ; ===========================================================================
00012510                            Ani_obj0C:
00012510                            	include "_anim\obj0C.asm"
00012510                            ; ---------------------------------------------------------------------------
00012510                            ; Animation script - flapping door (LZ)
00012510                            ; ---------------------------------------------------------------------------
00012510 0000                       		dc.w byte_113E6-Ani_obj0C
00012512 0000                       		dc.w byte_113EC-Ani_obj0C
00012514 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
0001251A 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
00012520                            		even
00012520                            		even
00012520                            
00012520                            ; ---------------------------------------------------------------------------
00012520                            ; Sprite mappings - flapping door (LZ)
00012520                            ; ---------------------------------------------------------------------------
00012520                            Map_obj0C:
00012520                            	include "_maps\obj0C.asm"
00012520                            ; ---------------------------------------------------------------------------
00012520                            ; Sprite mappings - flapping door (LZ)
00012520                            ; ---------------------------------------------------------------------------
00012520 0000                       		dc.w byte_113F8-Map_obj0C
00012522 0000                       		dc.w byte_11403-Map_obj0C
00012524 0000                       		dc.w byte_1140E-Map_obj0C
00012526 02                         byte_113F8:	dc.b 2
00012527 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
0001252C 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00012531 02                         byte_11403:	dc.b 2
00012532 DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00012537 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
0001253C 02                         byte_1140E:	dc.b 2
0001253D D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
00012542 180D 1018 00               		dc.b $18, $D, $10, $18,	0
00012548 00                         		even
00012548 00                         		even
00012548                            
00012548                            ; ===========================================================================
00012548                            ; ---------------------------------------------------------------------------
00012548                            ; Object 71 - invisible	solid blocks
00012548                            ; ---------------------------------------------------------------------------
00012548                            
00012548                            Obj71:					; XREF: Obj_Index
00012548 7000                       		moveq	#0,d0
0001254A 1028 0024                  		move.b	$24(a0),d0
0001254E 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
00012552 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
00012556                            ; ===========================================================================
00012556 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
00012558 0000                       		dc.w Obj71_Solid-Obj71_Index
0001255A                            ; ===========================================================================
0001255A                            
0001255A                            Obj71_Main:				; XREF: Obj71_Index
0001255A 5428 0024                  		addq.b	#2,$24(a0)
0001255E 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
00012566 317C 8680 0002             		move.w	#$8680,2(a0)
0001256C 0028 0004 0001             		ori.b	#4,1(a0)
00012572 1028 0028                  		move.b	$28(a0),d0	; get object type
00012576 1200                       		move.b	d0,d1
00012578 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
0001257C 0640 0010                  		addi.w	#$10,d0
00012580 E248                       		lsr.w	#1,d0
00012582 1140 0019                  		move.b	d0,$19(a0)	; set object width
00012586 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
0001258A 5241                       		addq.w	#1,d1
0001258C E749                       		lsl.w	#3,d1
0001258E 1141 0016                  		move.b	d1,$16(a0)	; set object height
00012592                            
00012592                            Obj71_Solid:				; XREF: Obj71_Index
00012592 6100 C428                  		bsr.w	ChkObjOnScreen
00012596 6600                       		bne.s	Obj71_ChkDel
00012598 7200                       		moveq	#0,d1
0001259A 1228 0019                  		move.b	$19(a0),d1
0001259E 0641 000B                  		addi.w	#$B,d1
000125A2 7400                       		moveq	#0,d2
000125A4 1428 0016                  		move.b	$16(a0),d2
000125A8 3602                       		move.w	d2,d3
000125AA 5243                       		addq.w	#1,d3
000125AC 3828 0008                  		move.w	8(a0),d4
000125B0 6100 E5A8                  		bsr.w	SolidObject71
000125B4                            
000125B4                            Obj71_ChkDel:
000125B4 3028 0008                  		move.w	8(a0),d0
000125B8 0240 FF80                  		andi.w	#$FF80,d0
000125BC 3238 F700                  		move.w	($FFFFF700).w,d1
000125C0 0441 0080                  		subi.w	#$80,d1
000125C4 0241 FF80                  		andi.w	#$FF80,d1
000125C8 9041                       		sub.w	d1,d0
000125CA 0C40 0280                  		cmpi.w	#$280,d0
000125CE 6200                       		bhi.s	Obj71_Delete
000125D0 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
000125D4 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
000125D6 4EFA C16A                  		jmp	DisplaySprite	; if yes, display the object
000125DA                            ; ===========================================================================
000125DA                            
000125DA                            Obj71_NoDisplay:
000125DA 4E75                       		rts	
000125DC                            ; ===========================================================================
000125DC                            
000125DC                            Obj71_Delete:
000125DC 4EFA C1A0                  		jmp	DeleteObject
000125E0                            ; ===========================================================================
000125E0                            ; ---------------------------------------------------------------------------
000125E0                            ; Sprite mappings - invisible solid blocks
000125E0                            ; ---------------------------------------------------------------------------
000125E0                            Map_obj71:
000125E0                            	include "_maps\obj71.asm"
000125E0                            ; ---------------------------------------------------------------------------
000125E0                            ; Sprite mappings - invisible solid blocks
000125E0                            ; ---------------------------------------------------------------------------
000125E0 0000                       		dc.w byte_114BC-Map_obj71
000125E2 0000                       		dc.w byte_114D1-Map_obj71
000125E4 0000                       		dc.w byte_114E6-Map_obj71
000125E6 04                         byte_114BC:	dc.b 4
000125E7 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
000125EC F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
000125F1 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
000125F6 0005 0018 00               		dc.b 0,	5, 0, $18, 0
000125FB 04                         byte_114D1:	dc.b 4
000125FC E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
00012601 E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00012606 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
0001260B 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
00012610 04                         byte_114E6:	dc.b 4
00012611 E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00012616 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
0001261B 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
00012620 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00012626 00                         		even
00012626 00                         		even
00012626                            
00012626                            ; ===========================================================================
00012626                            ; ---------------------------------------------------------------------------
00012626                            ; Object 5D - fans (SLZ)
00012626                            ; ---------------------------------------------------------------------------
00012626                            
00012626                            Obj5D:					; XREF: Obj_Index
00012626 7000                       		moveq	#0,d0
00012628 1028 0024                  		move.b	$24(a0),d0
0001262C 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
00012630 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00012634                            ; ===========================================================================
00012634 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00012636 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00012638                            ; ===========================================================================
00012638                            
00012638                            Obj5D_Main:				; XREF: Obj5D_Index
00012638 5428 0024                  		addq.b	#2,$24(a0)
0001263C 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
00012644 317C 43A0 0002             		move.w	#$43A0,2(a0)
0001264A 0028 0004 0001             		ori.b	#4,1(a0)
00012650 117C 0010 0019             		move.b	#$10,$19(a0)
00012656 117C 0004 0018             		move.b	#4,$18(a0)
0001265C                            
0001265C                            Obj5D_Delay:				; XREF: Obj5D_Index
0001265C 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
00012662 6600                       		bne.s	Obj5D_Blow	; if yes, branch
00012664 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012668 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
0001266A 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
00012670 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
00012676 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
00012678 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
0001267E                            
0001267E                            Obj5D_Blow:
0001267E 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
00012682 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
00012686 43F8 D000                  		lea	($FFFFD000).w,a1
0001268A 3029 0008                  		move.w	8(a1),d0
0001268E 9068 0008                  		sub.w	8(a0),d0
00012692 0828 0000 0022             		btst	#0,$22(a0)
00012698 6600                       		bne.s	Obj5D_ChkSonic
0001269A 4440                       		neg.w	d0
0001269C                            
0001269C                            Obj5D_ChkSonic:
0001269C 0640 0050                  		addi.w	#$50,d0
000126A0 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
000126A4 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
000126A6 3229 000C                  		move.w	$C(a1),d1
000126AA 0641 0060                  		addi.w	#$60,d1
000126AE 9268 000C                  		sub.w	$C(a0),d1
000126B2 6500                       		bcs.s	Obj5D_Animate
000126B4 0C41 0070                  		cmpi.w	#$70,d1
000126B8 6400                       		bcc.s	Obj5D_Animate
000126BA 0440 0050                  		subi.w	#$50,d0
000126BE 6400                       		bcc.s	loc_1159A
000126C0 4640                       		not.w	d0
000126C2 D040                       		add.w	d0,d0
000126C4                            
000126C4                            loc_1159A:
000126C4 0640 0060                  		addi.w	#$60,d0
000126C8 0828 0000 0022             		btst	#0,$22(a0)
000126CE 6600                       		bne.s	loc_115A8
000126D0 4440                       		neg.w	d0
000126D2                            
000126D2                            loc_115A8:
000126D2 4400                       		neg.b	d0
000126D4 E840                       		asr.w	#4,d0
000126D6 0828 0000 0028             		btst	#0,$28(a0)
000126DC 6700                       		beq.s	Obj5D_MoveSonic
000126DE 4440                       		neg.w	d0
000126E0                            
000126E0                            Obj5D_MoveSonic:
000126E0 D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
000126E4                            
000126E4                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
000126E4 5328 001E                  		subq.b	#1,$1E(a0)
000126E8 6A00                       		bpl.s	Obj5D_ChkDel
000126EA 117C 0000 001E             		move.b	#0,$1E(a0)
000126F0 5228 001B                  		addq.b	#1,$1B(a0)
000126F4 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
000126FA 6500                       		bcs.s	loc_115D8
000126FC 117C 0000 001B             		move.b	#0,$1B(a0)
00012702                            
00012702                            loc_115D8:
00012702 7000                       		moveq	#0,d0
00012704 0828 0000 0028             		btst	#0,$28(a0)
0001270A 6700                       		beq.s	loc_115E4
0001270C 7002                       		moveq	#2,d0
0001270E                            
0001270E                            loc_115E4:
0001270E D028 001B                  		add.b	$1B(a0),d0
00012712 1140 001A                  		move.b	d0,$1A(a0)
00012716                            
00012716                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00012716 6100 C02A                  		bsr.w	DisplaySprite
0001271A 3028 0008                  		move.w	8(a0),d0
0001271E 0240 FF80                  		andi.w	#$FF80,d0
00012722 3238 F700                  		move.w	($FFFFF700).w,d1
00012726 0441 0080                  		subi.w	#$80,d1
0001272A 0241 FF80                  		andi.w	#$FF80,d1
0001272E 9041                       		sub.w	d1,d0
00012730 0C40 0280                  		cmpi.w	#$280,d0
00012734 6200 C048                  		bhi.w	DeleteObject
00012738 4E75                       		rts	
0001273A                            ; ===========================================================================
0001273A                            ; ---------------------------------------------------------------------------
0001273A                            ; Sprite mappings - fans (SLZ)
0001273A                            ; ---------------------------------------------------------------------------
0001273A                            Map_obj5D:
0001273A                            	include "_maps\obj5D.asm"
0001273A                            ; ---------------------------------------------------------------------------
0001273A                            ; Sprite mappings - fans (SLZ)
0001273A                            ; ---------------------------------------------------------------------------
0001273A 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001273E 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
00012742 0000                       		dc.w byte_1161A-Map_obj5D
00012744 02                         byte_1161A:	dc.b 2
00012745 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
0001274A 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
0001274F 02                         byte_11625:	dc.b 2
00012750 F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
00012755 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
0001275A 02                         byte_11630:	dc.b 2
0001275B F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
00012760 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
00012766 00                         		even
00012766 00                         		even
00012766                            
00012766                            ; ===========================================================================
00012766                            ; ---------------------------------------------------------------------------
00012766                            ; Object 5E - seesaws (SLZ)
00012766                            ; ---------------------------------------------------------------------------
00012766                            
00012766                            Obj5E:					; XREF: Obj_Index
00012766 7000                       		moveq	#0,d0
00012768 1028 0024                  		move.b	$24(a0),d0
0001276C 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
00012770 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
00012774 3028 0030                  		move.w	$30(a0),d0
00012778 0240 FF80                  		andi.w	#$FF80,d0
0001277C 3238 F700                  		move.w	($FFFFF700).w,d1
00012780 0441 0080                  		subi.w	#$80,d1
00012784 0241 FF80                  		andi.w	#$FF80,d1
00012788 9041                       		sub.w	d1,d0
0001278A 6B00 BFF2                  		bmi.w	DeleteObject
0001278E 0C40 0280                  		cmpi.w	#$280,d0
00012792 6200 BFEA                  		bhi.w	DeleteObject
00012796 6000 BFAA                  		bra.w	DisplaySprite
0001279A                            ; ===========================================================================
0001279A 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
0001279C 0000                       		dc.w Obj5E_Slope-Obj5E_Index
0001279E 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000127A0 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000127A2 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
000127A4 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
000127A6                            ; ===========================================================================
000127A6                            
000127A6                            Obj5E_Main:				; XREF: Obj5E_Index
000127A6 5428 0024                  		addq.b	#2,$24(a0)
000127AA 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
000127B2 317C 0374 0002             		move.w	#$374,2(a0)
000127B8 0028 0004 0001             		ori.b	#4,1(a0)
000127BE 117C 0004 0018             		move.b	#4,$18(a0)
000127C4 117C 0030 0019             		move.b	#$30,$19(a0)
000127CA 3168 0008 0030             		move.w	8(a0),$30(a0)
000127D0 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
000127D4 6600                       		bne.s	loc_116D2	; if not, branch
000127D6 6100 C406                  		bsr.w	SingleObjLoad2
000127DA 6600                       		bne.s	loc_116D2
000127DC 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
000127E0 5C29 0024                  		addq.b	#6,$24(a1)
000127E4 3368 0008 0008             		move.w	8(a0),8(a1)
000127EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000127F0 1368 0022 0022             		move.b	$22(a0),$22(a1)
000127F6 2348 003C                  		move.l	a0,$3C(a1)
000127FA                            
000127FA                            loc_116D2:
000127FA 0828 0000 0022             		btst	#0,$22(a0)
00012800 6700                       		beq.s	loc_116E0
00012802 117C 0002 001A             		move.b	#2,$1A(a0)
00012808                            
00012808                            loc_116E0:
00012808 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001280E                            
0001280E                            Obj5E_Slope:				; XREF: Obj5E_Index
0001280E 1228 003A                  		move.b	$3A(a0),d1
00012812 6100 0000                  		bsr.w	loc_11766
00012816 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001281C 0828 0000 001A             		btst	#0,$1A(a0)
00012822 6700                       		beq.s	loc_11702
00012824 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
0001282A                            
0001282A                            loc_11702:
0001282A 43F8 D000                  		lea	($FFFFD000).w,a1
0001282E 3169 0012 0038             		move.w	$12(a1),$38(a0)
00012834 323C 0030                  		move.w	#$30,d1
00012838 4EB9 0000 8420             		jsr	(SlopeObject).l
0001283E 4E75                       		rts	
00012840                            ; ===========================================================================
00012840                            
00012840                            Obj5E_Slope2:				; XREF: Obj5E_Index
00012840 6100 0000                  		bsr.w	loc_1174A
00012844 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
0001284A 0828 0000 001A             		btst	#0,$1A(a0)
00012850 6700                       		beq.s	loc_11730
00012852 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00012858                            
00012858                            loc_11730:
00012858 323C 0030                  		move.w	#$30,d1
0001285C 4EB9 0000 84C0             		jsr	(ExitPlatform).l
00012862 323C 0030                  		move.w	#$30,d1
00012866 3428 0008                  		move.w	8(a0),d2
0001286A 4EB9 0000 94B0             		jsr	SlopeObject2
00012870 4E75                       		rts	
00012872                            ; ===========================================================================
00012872                            
00012872                            loc_1174A:				; XREF: Obj5E_Slope2
00012872 7202                       		moveq	#2,d1
00012874 43F8 D000                  		lea	($FFFFD000).w,a1
00012878 3028 0008                  		move.w	8(a0),d0
0001287C 9069 0008                  		sub.w	8(a1),d0
00012880 6400                       		bcc.s	loc_1175E
00012882 4440                       		neg.w	d0
00012884 7200                       		moveq	#0,d1
00012886                            
00012886                            loc_1175E:
00012886 0C40 0008                  		cmpi.w	#8,d0
0001288A 6400                       		bcc.s	loc_11766
0001288C 7201                       		moveq	#1,d1
0001288E                            
0001288E                            loc_11766:
0001288E 1028 001A                  		move.b	$1A(a0),d0
00012892 B001                       		cmp.b	d1,d0
00012894 6700                       		beq.s	locret_11790
00012896 6400                       		bcc.s	loc_11772
00012898 5400                       		addq.b	#2,d0
0001289A                            
0001289A                            loc_11772:
0001289A 5300                       		subq.b	#1,d0
0001289C 1140 001A                  		move.b	d0,$1A(a0)
000128A0 1141 003A                  		move.b	d1,$3A(a0)
000128A4 08A8 0000 0001             		bclr	#0,1(a0)
000128AA 0828 0001 001A             		btst	#1,$1A(a0)
000128B0 6700                       		beq.s	locret_11790
000128B2 08E8 0000 0001             		bset	#0,1(a0)
000128B8                            
000128B8                            locret_11790:
000128B8 4E75                       		rts	
000128BA                            ; ===========================================================================
000128BA                            
000128BA                            Obj5E_Spikeball:			; XREF: Obj5E_Index
000128BA 5428 0024                  		addq.b	#2,$24(a0)
000128BE 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
000128C6 317C 04F0 0002             		move.w	#$4F0,2(a0)
000128CC 0028 0004 0001             		ori.b	#4,1(a0)
000128D2 117C 0004 0018             		move.b	#4,$18(a0)
000128D8 117C 008B 0020             		move.b	#$8B,$20(a0)
000128DE 117C 000C 0019             		move.b	#$C,$19(a0)
000128E4 3168 0008 0030             		move.w	8(a0),$30(a0)
000128EA 0668 0028 0008             		addi.w	#$28,8(a0)
000128F0 3168 000C 0034             		move.w	$C(a0),$34(a0)
000128F6 117C 0001 001A             		move.b	#1,$1A(a0)
000128FC 0828 0000 0022             		btst	#0,$22(a0)
00012902 6700                       		beq.s	Obj5E_MoveSpike
00012904 0468 0050 0008             		subi.w	#$50,8(a0)
0001290A 117C 0002 003A             		move.b	#2,$3A(a0)
00012910                            
00012910                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
00012910 2268 003C                  		movea.l	$3C(a0),a1
00012914 7000                       		moveq	#0,d0
00012916 1028 003A                  		move.b	$3A(a0),d0
0001291A 9029 003A                  		sub.b	$3A(a1),d0
0001291E 6700                       		beq.s	loc_1183E
00012920 6400                       		bcc.s	loc_117FC
00012922 4400                       		neg.b	d0
00012924                            
00012924                            loc_117FC:
00012924 323C F7E8                  		move.w	#-$818,d1
00012928 343C FEEC                  		move.w	#-$114,d2
0001292C 0C00 0001                  		cmpi.b	#1,d0
00012930 6700                       		beq.s	loc_11822
00012932 323C F510                  		move.w	#-$AF0,d1
00012936 343C FF34                  		move.w	#-$CC,d2
0001293A 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
00012940 6D00                       		blt.s	loc_11822
00012942 323C F200                  		move.w	#-$E00,d1
00012946 343C FF60                  		move.w	#-$A0,d2
0001294A                            
0001294A                            loc_11822:
0001294A 3141 0012                  		move.w	d1,$12(a0)
0001294E 3142 0010                  		move.w	d2,$10(a0)
00012952 3028 0008                  		move.w	8(a0),d0
00012956 9068 0030                  		sub.w	$30(a0),d0
0001295A 6400                       		bcc.s	loc_11838
0001295C 4468 0010                  		neg.w	$10(a0)
00012960                            
00012960                            loc_11838:
00012960 5428 0024                  		addq.b	#2,$24(a0)
00012964 6000                       		bra.s	Obj5E_SpikeFall
00012966                            ; ===========================================================================
00012966                            
00012966                            loc_1183E:				; XREF: Obj5E_MoveSpike
00012966 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001296C 7000                       		moveq	#0,d0
0001296E 1029 001A                  		move.b	$1A(a1),d0
00012972 343C 0028                  		move.w	#$28,d2
00012976 3228 0008                  		move.w	8(a0),d1
0001297A 9268 0030                  		sub.w	$30(a0),d1
0001297E 6400                       		bcc.s	loc_1185C
00012980 4442                       		neg.w	d2
00012982 5440                       		addq.w	#2,d0
00012984                            
00012984                            loc_1185C:
00012984 D040                       		add.w	d0,d0
00012986 3228 0034                  		move.w	$34(a0),d1
0001298A D272 0000                  		add.w	(a2,d0.w),d1
0001298E 3141 000C                  		move.w	d1,$C(a0)
00012992 D468 0030                  		add.w	$30(a0),d2
00012996 3142 0008                  		move.w	d2,8(a0)
0001299A 4268 000E                  		clr.w	$E(a0)
0001299E 4268 000A                  		clr.w	$A(a0)
000129A2 4E75                       		rts	
000129A4                            ; ===========================================================================
000129A4                            
000129A4                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
000129A4 4A68 0012                  		tst.w	$12(a0)
000129A8 6A00                       		bpl.s	loc_1189A
000129AA 6100 BCFE                  		bsr.w	ObjectFall
000129AE 3028 0034                  		move.w	$34(a0),d0
000129B2 0440 002F                  		subi.w	#$2F,d0
000129B6 B068 000C                  		cmp.w	$C(a0),d0
000129BA 6E00                       		bgt.s	locret_11898
000129BC 6100 BCEC                  		bsr.w	ObjectFall
000129C0                            
000129C0                            locret_11898:
000129C0 4E75                       		rts	
000129C2                            ; ===========================================================================
000129C2                            
000129C2                            loc_1189A:				; XREF: Obj5E_SpikeFall
000129C2 6100 BCE6                  		bsr.w	ObjectFall
000129C6 2268 003C                  		movea.l	$3C(a0),a1
000129CA 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000129D0 7000                       		moveq	#0,d0
000129D2 1029 001A                  		move.b	$1A(a1),d0
000129D6 3228 0008                  		move.w	8(a0),d1
000129DA 9268 0030                  		sub.w	$30(a0),d1
000129DE 6400                       		bcc.s	loc_118BA
000129E0 5440                       		addq.w	#2,d0
000129E2                            
000129E2                            loc_118BA:
000129E2 D040                       		add.w	d0,d0
000129E4 3228 0034                  		move.w	$34(a0),d1
000129E8 D272 0000                  		add.w	(a2,d0.w),d1
000129EC B268 000C                  		cmp.w	$C(a0),d1
000129F0 6E00                       		bgt.s	locret_11938
000129F2 2268 003C                  		movea.l	$3C(a0),a1
000129F6 7202                       		moveq	#2,d1
000129F8 4A68 0010                  		tst.w	$10(a0)
000129FC 6B00                       		bmi.s	Obj5E_Spring
000129FE 7200                       		moveq	#0,d1
00012A00                            
00012A00                            Obj5E_Spring:
00012A00 1341 003A                  		move.b	d1,$3A(a1)
00012A04 1141 003A                  		move.b	d1,$3A(a0)
00012A08 B229 001A                  		cmp.b	$1A(a1),d1
00012A0C 6700                       		beq.s	loc_1192C
00012A0E 08A9 0003 0022             		bclr	#3,$22(a1)
00012A14 6700                       		beq.s	loc_1192C
00012A16 4229 0025                  		clr.b	$25(a1)
00012A1A 137C 0002 0024             		move.b	#2,$24(a1)
00012A20 45F8 D000                  		lea	($FFFFD000).w,a2
00012A24 3568 0012 0012             		move.w	$12(a0),$12(a2)
00012A2A 446A 0012                  		neg.w	$12(a2)
00012A2E 08EA 0001 0022             		bset	#1,$22(a2)
00012A34 08AA 0003 0022             		bclr	#3,$22(a2)
00012A3A 422A 003C                  		clr.b	$3C(a2)
00012A3E 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
00012A44 157C 0002 0024             		move.b	#2,$24(a2)
00012A4A 303C 00CC                  		move.w	#$CC,d0
00012A4E 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play spring sound
00012A54                            
00012A54                            loc_1192C:
00012A54 4268 0010                  		clr.w	$10(a0)
00012A58 4268 0012                  		clr.w	$12(a0)
00012A5C 5528 0024                  		subq.b	#2,$24(a0)
00012A60                            
00012A60                            locret_11938:
00012A60 4E75                       		rts	
00012A62                            ; ===========================================================================
00012A62 FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00012A6C                            
00012A6C                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
00012A9C                            		even
00012A9C                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00012ACC                            		even
00012ACC                            ; ---------------------------------------------------------------------------
00012ACC                            ; Sprite mappings - seesaws (SLZ)
00012ACC                            ; ---------------------------------------------------------------------------
00012ACC                            Map_obj5E:
00012ACC                            	include "_maps\obj5E.asm"
00012ACC                            ; ---------------------------------------------------------------------------
00012ACC                            ; Sprite mappings - seesaws (SLZ)
00012ACC                            ; ---------------------------------------------------------------------------
00012ACC 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012AD0 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00012AD4 07                         byte_119AC:	dc.b 7
00012AD5 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00012ADA DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
00012ADF E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00012AE4 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00012AE9 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
00012AEE F406 0006 13               		dc.b $F4, 6, 0,	6, $13
00012AF3 FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00012AF8 04                         byte_119D0:	dc.b 4
00012AF9 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
00012AFE E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
00012B03 E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00012B08 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
00012B0E 00                         		even
00012B0E 00                         		even
00012B0E                            
00012B0E                            ; ---------------------------------------------------------------------------
00012B0E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012B0E                            ; ---------------------------------------------------------------------------
00012B0E                            Map_obj5Ea:
00012B0E                            	include "_maps\obj5Eballs.asm"
00012B0E                            ; ---------------------------------------------------------------------------
00012B0E                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
00012B0E                            ; ---------------------------------------------------------------------------
00012B0E 0000                       		dc.w byte_119EA-Map_obj5Ea
00012B10 0000                       		dc.w byte_119F0-Map_obj5Ea
00012B12 01                         byte_119EA:	dc.b 1
00012B13 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00012B18 01                         byte_119F0:	dc.b 1
00012B19 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00012B1E                            		even
00012B1E                            		even
00012B1E                            
00012B1E                            ; ===========================================================================
00012B1E                            ; ---------------------------------------------------------------------------
00012B1E                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
00012B1E                            ; ---------------------------------------------------------------------------
00012B1E                            
00012B1E                            Obj5F:					; XREF: Obj_Index
00012B1E 7000                       		moveq	#0,d0
00012B20 1028 0024                  		move.b	$24(a0),d0
00012B24 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00012B28 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00012B2C                            ; ===========================================================================
00012B2C 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
00012B2E 0000                       		dc.w Obj5F_Action-Obj5F_Index
00012B30 0000                       		dc.w Obj5F_Display-Obj5F_Index
00012B32 0000                       		dc.w Obj5F_End-Obj5F_Index
00012B34                            ; ===========================================================================
00012B34                            
00012B34                            Obj5F_Main:				; XREF: Obj5F_Index
00012B34 5428 0024                  		addq.b	#2,$24(a0)
00012B38 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
00012B40 317C 0400 0002             		move.w	#$400,2(a0)
00012B46 0028 0004 0001             		ori.b	#4,1(a0)
00012B4C 117C 0003 0018             		move.b	#3,$18(a0)
00012B52 117C 000C 0019             		move.b	#$C,$19(a0)
00012B58 1028 0028                  		move.b	$28(a0),d0
00012B5C 6700                       		beq.s	loc_11A3C
00012B5E 1140 0024                  		move.b	d0,$24(a0)
00012B62 4E75                       		rts	
00012B64                            ; ===========================================================================
00012B64                            
00012B64                            loc_11A3C:
00012B64 117C 009A 0020             		move.b	#$9A,$20(a0)
00012B6A 0868 0000 0022             		bchg	#0,$22(a0)
00012B70                            
00012B70                            Obj5F_Action:				; XREF: Obj5F_Index
00012B70 7000                       		moveq	#0,d0
00012B72 1028 0025                  		move.b	$25(a0),d0
00012B76 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
00012B7A 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
00012B7E 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012B84 6100 8C0A                  		bsr.w	AnimateSprite
00012B88 6000 DC60                  		bra.w	MarkObjGone
00012B8C                            ; ===========================================================================
00012B8C 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
00012B8E 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
00012B90 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
00012B92                            ; ===========================================================================
00012B92                            
00012B92                            Obj5F_Walk:				; XREF: Obj5F_Index2
00012B92 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012B96 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012B9A 6A00                       		bpl.s	locret_11A96	; if time remains, branch
00012B9C 5428 0025                  		addq.b	#2,$25(a0)
00012BA0 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00012BA6 317C 0010 0010             		move.w	#$10,$10(a0)
00012BAC 117C 0001 001C             		move.b	#1,$1C(a0)
00012BB2 0868 0000 0022             		bchg	#0,$22(a0)
00012BB8 6700                       		beq.s	locret_11A96
00012BBA 4468 0010                  		neg.w	$10(a0)		; change direction
00012BBE                            
00012BBE                            locret_11A96:
00012BBE 4E75                       		rts	
00012BC0                            ; ===========================================================================
00012BC0                            
00012BC0                            Obj5F_Wait:				; XREF: Obj5F_Index2
00012BC0 6100 0000                  		bsr.w	Obj5F_ChkSonic
00012BC4 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00012BC8 6B00                       		bmi.s	loc_11AA8
00012BCA 6100 BB50                  		bsr.w	SpeedToPos
00012BCE 4E75                       		rts	
00012BD0                            ; ===========================================================================
00012BD0                            
00012BD0                            loc_11AA8:
00012BD0 5528 0025                  		subq.b	#2,$25(a0)
00012BD4 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00012BDA 4268 0010                  		clr.w	$10(a0)		; stop walking
00012BDE 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00012BE4 4E75                       		rts	
00012BE6                            ; ===========================================================================
00012BE6                            
00012BE6                            Obj5F_Explode:				; XREF: Obj5F_Index2
00012BE6 5368 0030                  		subq.w	#1,$30(a0)
00012BEA 6A00                       		bpl.s	locret_11AD0
00012BEC 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00012BF0 117C 0000 0024             		move.b	#0,$24(a0)
00012BF6                            
00012BF6                            locret_11AD0:
00012BF6 4E75                       		rts	
00012BF8                            ; ===========================================================================
00012BF8                            
00012BF8                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00012BF8 3038 D008                  		move.w	($FFFFD008).w,d0
00012BFC 9068 0008                  		sub.w	8(a0),d0
00012C00 6400                       		bcc.s	loc_11ADE
00012C02 4440                       		neg.w	d0
00012C04                            
00012C04                            loc_11ADE:
00012C04 0C40 0060                  		cmpi.w	#$60,d0
00012C08 6400                       		bcc.s	locret_11B5E
00012C0A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012C0E 9068 000C                  		sub.w	$C(a0),d0
00012C12 6400                       		bcc.s	Obj5F_MakeFuse
00012C14 4440                       		neg.w	d0
00012C16                            
00012C16                            Obj5F_MakeFuse:
00012C16 0C40 0060                  		cmpi.w	#$60,d0
00012C1A 6400                       		bcc.s	locret_11B5E
00012C1C 4A78 FE08                  		tst.w	($FFFFFE08).w
00012C20 6600                       		bne.s	locret_11B5E
00012C22 117C 0004 0025             		move.b	#4,$25(a0)
00012C28 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00012C2E 4268 0010                  		clr.w	$10(a0)
00012C32 117C 0002 001C             		move.b	#2,$1C(a0)
00012C38 6100 BFA4                  		bsr.w	SingleObjLoad2
00012C3C 6600                       		bne.s	locret_11B5E
00012C3E 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00012C42 3368 0008 0008             		move.w	8(a0),8(a1)
00012C48 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012C4E 3368 000C 0034             		move.w	$C(a0),$34(a1)
00012C54 1368 0022 0022             		move.b	$22(a0),$22(a1)
00012C5A 137C 0004 0028             		move.b	#4,$28(a1)
00012C60 137C 0003 001C             		move.b	#3,$1C(a1)
00012C66 337C 0010 0012             		move.w	#$10,$12(a1)
00012C6C 0828 0001 0022             		btst	#1,$22(a0)
00012C72 6700                       		beq.s	loc_11B54
00012C74 4469 0012                  		neg.w	$12(a1)
00012C78                            
00012C78                            loc_11B54:
00012C78 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00012C7E 2348 003C                  		move.l	a0,$3C(a1)
00012C82                            
00012C82                            locret_11B5E:
00012C82 4E75                       		rts	
00012C84                            ; ===========================================================================
00012C84                            
00012C84                            Obj5F_Display:				; XREF: Obj5F_Index
00012C84 6100                       		bsr.s	loc_11B70
00012C86 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012C8C 6100 8B02                  		bsr.w	AnimateSprite
00012C90 6000 DB58                  		bra.w	MarkObjGone
00012C94                            ; ===========================================================================
00012C94                            
00012C94                            loc_11B70:
00012C94 5368 0030                  		subq.w	#1,$30(a0)
00012C98 6B00                       		bmi.s	loc_11B7C
00012C9A 6100 BA80                  		bsr.w	SpeedToPos
00012C9E 4E75                       		rts	
00012CA0                            ; ===========================================================================
00012CA0                            
00012CA0                            loc_11B7C:
00012CA0 4268 0030                  		clr.w	$30(a0)
00012CA4 4228 0024                  		clr.b	$24(a0)
00012CA8 3168 0034 000C             		move.w	$34(a0),$C(a0)
00012CAE 7203                       		moveq	#3,d1
00012CB0 2248                       		movea.l	a0,a1
00012CB2 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00012CB8 6000                       		bra.s	Obj5F_MakeShrap
00012CBA                            ; ===========================================================================
00012CBA                            
00012CBA                            Obj5F_Loop:
00012CBA 6100 BF22                  		bsr.w	SingleObjLoad2
00012CBE 6600                       		bne.s	loc_11BCE
00012CC0                            
00012CC0                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00012CC0 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00012CC4 3368 0008 0008             		move.w	8(a0),8(a1)
00012CCA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00012CD0 137C 0006 0028             		move.b	#6,$28(a1)
00012CD6 137C 0004 001C             		move.b	#4,$1C(a1)
00012CDC 335A 0010                  		move.w	(a2)+,$10(a1)
00012CE0 335A 0012                  		move.w	(a2)+,$12(a1)
00012CE4 137C 0098 0020             		move.b	#$98,$20(a1)
00012CEA 08E9 0007 0001             		bset	#7,1(a1)
00012CF0                            
00012CF0                            loc_11BCE:
00012CF0 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00012CF4                            
00012CF4 117C 0006 0024             		move.b	#6,$24(a0)
00012CFA                            
00012CFA                            Obj5F_End:				; XREF: Obj5F_Index
00012CFA 6100 BA20                  		bsr.w	SpeedToPos
00012CFE 0668 0018 0012             		addi.w	#$18,$12(a0)
00012D04 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00012D0A 6100 8A84                  		bsr.w	AnimateSprite
00012D0E 4A28 0001                  		tst.b	1(a0)
00012D12 6A00 BA6A                  		bpl.w	DeleteObject
00012D16 6000 BA2A                  		bra.w	DisplaySprite
00012D1A                            ; ===========================================================================
00012D1A FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00012D2A                            
00012D2A                            Ani_obj5F:
00012D2A                            	include "_anim\obj5F.asm"
00012D2A                            ; ---------------------------------------------------------------------------
00012D2A                            ; Animation script - Bomb enemy
00012D2A                            ; ---------------------------------------------------------------------------
00012D2A 0000                       		dc.w byte_11C12-Ani_obj5F
00012D2C 0000                       		dc.w byte_11C16-Ani_obj5F
00012D2E 0000                       		dc.w byte_11C1C-Ani_obj5F
00012D30 0000                       		dc.w byte_11C20-Ani_obj5F
00012D32 0000                       		dc.w byte_11C24-Ani_obj5F
00012D34 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00012D38 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00012D3E 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00012D42 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00012D46 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00012D4A                            		even
00012D4A                            		even
00012D4A                            
00012D4A                            ; ---------------------------------------------------------------------------
00012D4A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012D4A                            ; ---------------------------------------------------------------------------
00012D4A                            Map_obj5F:
00012D4A                            	include "_maps\obj5F.asm"
00012D4A                            ; ---------------------------------------------------------------------------
00012D4A                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00012D4A                            ; ---------------------------------------------------------------------------
00012D4A 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00012D4E 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00012D52 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00012D56 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00012D5A 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00012D5E 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00012D62 03                         byte_11C40:	dc.b 3
00012D63 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012D68 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012D6D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012D72 03                         byte_11C50:	dc.b 3
00012D73 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012D78 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012D7D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012D82 03                         byte_11C60:	dc.b 3
00012D83 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012D88 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00012D8D E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012D92 03                         byte_11C70:	dc.b 3
00012D93 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012D98 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00012D9D E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012DA2 03                         byte_11C80:	dc.b 3
00012DA3 F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00012DA8 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00012DAD E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00012DB2 03                         byte_11C90:	dc.b 3
00012DB3 F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012DB8 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00012DBD E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00012DC2 02                         byte_11CA0:	dc.b 2
00012DC3 F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00012DC8 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012DCD 02                         byte_11CAB:	dc.b 2
00012DCE F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00012DD3 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00012DD8 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00012DD9 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00012DDE 01                         byte_11CBC:	dc.b 1			; fuse
00012DDF E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00012DE4 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00012DE5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00012DEA 01                         byte_11CC8:	dc.b 1			; fireball
00012DEB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00012DF0                            		even
00012DF0                            		even
00012DF0                            
00012DF0                            ; ===========================================================================
00012DF0                            ; ---------------------------------------------------------------------------
00012DF0                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00012DF0                            ; ---------------------------------------------------------------------------
00012DF0                            
00012DF0                            Obj60:					; XREF: Obj_Index
00012DF0 7000                       		moveq	#0,d0
00012DF2 1028 0024                  		move.b	$24(a0),d0
00012DF6 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00012DFA 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00012DFE                            ; ===========================================================================
00012DFE 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00012E00 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00012E02 0000                       		dc.w Obj60_Display-Obj60_Index
00012E04 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00012E06 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00012E08                            ; ===========================================================================
00012E08                            
00012E08                            Obj60_Main:				; XREF: Obj60_Index
00012E08 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00012E10 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00012E16 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00012E1C 6700                       		beq.s	loc_11D02
00012E1E 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00012E24                            
00012E24                            loc_11D02:
00012E24 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00012E2A 6600                       		bne.s	loc_11D10
00012E2C 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00012E32                            
00012E32                            loc_11D10:
00012E32 0028 0004 0001             		ori.b	#4,1(a0)
00012E38 117C 0004 0018             		move.b	#4,$18(a0)
00012E3E 117C 000B 0020             		move.b	#$B,$20(a0)
00012E44 117C 000C 0019             		move.b	#$C,$19(a0)
00012E4A 7400                       		moveq	#0,d2
00012E4C 45E8 0037                  		lea	$37(a0),a2
00012E50 264A                       		movea.l	a2,a3
00012E52 524A                       		addq.w	#1,a2
00012E54 7203                       		moveq	#3,d1
00012E56                            
00012E56                            Obj60_MakeOrbs:
00012E56 6100 BD86                  		bsr.w	SingleObjLoad2
00012E5A 6600                       		bne.s	loc_11D90
00012E5C 5213                       		addq.b	#1,(a3)
00012E5E 3A09                       		move.w	a1,d5
00012E60 0445 D000                  		subi.w	#-$3000,d5
00012E64 EC4D                       		lsr.w	#6,d5
00012E66 0245 007F                  		andi.w	#$7F,d5
00012E6A 14C5                       		move.b	d5,(a2)+
00012E6C 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00012E6E 137C 0006 0024             		move.b	#6,$24(a1)
00012E74 2368 0004 0004             		move.l	4(a0),4(a1)
00012E7A 3368 0002 0002             		move.w	2(a0),2(a1)
00012E80 0029 0004 0001             		ori.b	#4,1(a1)
00012E86 137C 0004 0018             		move.b	#4,$18(a1)
00012E8C 137C 0008 0019             		move.b	#8,$19(a1)
00012E92 137C 0003 001A             		move.b	#3,$1A(a1)
00012E98 137C 0098 0020             		move.b	#$98,$20(a1)
00012E9E 1342 0026                  		move.b	d2,$26(a1)
00012EA2 0602 0040                  		addi.b	#$40,d2
00012EA6 2348 003C                  		move.l	a0,$3C(a1)
00012EAA 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00012EAE                            
00012EAE                            loc_11D90:
00012EAE 7001                       		moveq	#1,d0
00012EB0 0828 0000 0022             		btst	#0,$22(a0)
00012EB6 6700                       		beq.s	Obj60_Move
00012EB8 4440                       		neg.w	d0
00012EBA                            
00012EBA                            Obj60_Move:
00012EBA 1140 0036                  		move.b	d0,$36(a0)
00012EBE 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00012EC4 5428 0024                  		addq.b	#2,$24(a0)
00012EC8 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00012ECE 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00012ED4 6700                       		beq.s	locret_11DBC	; if not, branch
00012ED6 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00012EDA                            
00012EDA                            locret_11DBC:
00012EDA 4E75                       		rts	
00012EDC                            ; ===========================================================================
00012EDC                            
00012EDC                            Obj60_ChkSonic:				; XREF: Obj60_Index
00012EDC 3038 D008                  		move.w	($FFFFD008).w,d0
00012EE0 9068 0008                  		sub.w	8(a0),d0
00012EE4 6400                       		bcc.s	loc_11DCA
00012EE6 4440                       		neg.w	d0
00012EE8                            
00012EE8                            loc_11DCA:
00012EE8 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00012EEC 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012EEE 3038 D00C                  		move.w	($FFFFD00C).w,d0
00012EF2 9068 000C                  		sub.w	$C(a0),d0
00012EF6 6400                       		bcc.s	loc_11DDC
00012EF8 4440                       		neg.w	d0
00012EFA                            
00012EFA                            loc_11DDC:
00012EFA 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00012EFE 6400                       		bcc.s	Obj60_Animate	; if not, branch
00012F00 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00012F04 6600                       		bne.s	Obj60_Animate	; if yes, branch
00012F06 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00012F0C                            
00012F0C                            Obj60_Animate:
00012F0C 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00012F12 6100 887C                  		bsr.w	AnimateSprite
00012F16 6000 0000                  		bra.w	Obj60_ChkDel
00012F1A                            ; ===========================================================================
00012F1A                            
00012F1A                            Obj60_Display:				; XREF: Obj60_Index
00012F1A 6100 B800                  		bsr.w	SpeedToPos
00012F1E                            
00012F1E                            Obj60_ChkDel:				; XREF: Obj60_Animate
00012F1E 3028 0008                  		move.w	8(a0),d0
00012F22 0240 FF80                  		andi.w	#$FF80,d0
00012F26 3238 F700                  		move.w	($FFFFF700).w,d1
00012F2A 0441 0080                  		subi.w	#$80,d1
00012F2E 0241 FF80                  		andi.w	#$FF80,d1
00012F32 9041                       		sub.w	d1,d0
00012F34 0C40 0280                  		cmpi.w	#$280,d0
00012F38 6200 0000                  		bhi.w	Obj60_ChkGone
00012F3C 6000 B804                  		bra.w	DisplaySprite
00012F40                            ; ===========================================================================
00012F40                            
00012F40                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00012F40 45F8 FC00                  		lea	($FFFFFC00).w,a2
00012F44 7000                       		moveq	#0,d0
00012F46 1028 0023                  		move.b	$23(a0),d0
00012F4A 6700                       		beq.s	loc_11E34
00012F4C 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00012F52                            
00012F52                            loc_11E34:
00012F52 45E8 0037                  		lea	$37(a0),a2
00012F56 7400                       		moveq	#0,d2
00012F58 141A                       		move.b	(a2)+,d2
00012F5A 5342                       		subq.w	#1,d2
00012F5C 6500                       		bcs.s	Obj60_Delete
00012F5E                            
00012F5E                            loc_11E40:
00012F5E 7000                       		moveq	#0,d0
00012F60 101A                       		move.b	(a2)+,d0
00012F62 ED48                       		lsl.w	#6,d0
00012F64 0680 00FF D000             		addi.l	#$FFD000,d0
00012F6A 2240                       		movea.l	d0,a1
00012F6C 6100 B812                  		bsr.w	DeleteObject2
00012F70 51CA FFEC                  		dbf	d2,loc_11E40
00012F74                            
00012F74                            Obj60_Delete:
00012F74 6000 B808                  		bra.w	DeleteObject
00012F78                            ; ===========================================================================
00012F78                            
00012F78                            Obj60_MoveOrb:				; XREF: Obj60_Index
00012F78 2268 003C                  		movea.l	$3C(a0),a1
00012F7C 0C11 0060                  		cmpi.b	#$60,0(a1)
00012F80 6600 B7FC                  		bne.w	DeleteObject
00012F84 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00012F8A 6600                       		bne.s	Obj60_Circle
00012F8C 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00012F92 6600                       		bne.s	Obj60_Circle
00012F94 5428 0024                  		addq.b	#2,$24(a0)
00012F98 5329 0037                  		subq.b	#1,$37(a1)
00012F9C 6600                       		bne.s	Obj60_FireOrb
00012F9E 5429 0024                  		addq.b	#2,$24(a1)
00012FA2                            
00012FA2                            Obj60_FireOrb:
00012FA2 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00012FA8 0829 0000 0022             		btst	#0,$22(a1)
00012FAE 6700                       		beq.s	Obj60_Display2
00012FB0 4468 0010                  		neg.w	$10(a0)
00012FB4                            
00012FB4                            Obj60_Display2:
00012FB4 6000 B78C                  		bra.w	DisplaySprite
00012FB8                            ; ===========================================================================
00012FB8                            
00012FB8                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00012FB8 1028 0026                  		move.b	$26(a0),d0
00012FBC 4EB9 0000 3416             		jsr	(CalcSine).l
00012FC2 E841                       		asr.w	#4,d1
00012FC4 D269 0008                  		add.w	8(a1),d1
00012FC8 3141 0008                  		move.w	d1,8(a0)
00012FCC E840                       		asr.w	#4,d0
00012FCE D069 000C                  		add.w	$C(a1),d0
00012FD2 3140 000C                  		move.w	d0,$C(a0)
00012FD6 1029 0036                  		move.b	$36(a1),d0
00012FDA D128 0026                  		add.b	d0,$26(a0)
00012FDE 6000 B762                  		bra.w	DisplaySprite
00012FE2                            ; ===========================================================================
00012FE2                            
00012FE2                            Obj60_ChkDel2:				; XREF: Obj60_Index
00012FE2 6100 B738                  		bsr.w	SpeedToPos
00012FE6 4A28 0001                  		tst.b	1(a0)
00012FEA 6A00 B792                  		bpl.w	DeleteObject
00012FEE 6000 B752                  		bra.w	DisplaySprite
00012FF2                            ; ===========================================================================
00012FF2                            Ani_obj60:
00012FF2                            	include "_anim\obj60.asm"
00012FF2                            ; ---------------------------------------------------------------------------
00012FF2                            ; Animation script - Orbinaut enemy
00012FF2                            ; ---------------------------------------------------------------------------
00012FF2 0000                       		dc.w byte_11EDA-Ani_obj60
00012FF4 0000                       		dc.w byte_11EDE-Ani_obj60
00012FF6 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00012FFA 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00013000                            		even
00013000                            		even
00013000                            
00013000                            ; ---------------------------------------------------------------------------
00013000                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013000                            ; ---------------------------------------------------------------------------
00013000                            Map_obj60:
00013000                            	include "_maps\obj60.asm"
00013000                            ; ---------------------------------------------------------------------------
00013000                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00013000                            ; ---------------------------------------------------------------------------
00013000 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00013004 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00013008 01                         byte_11EEC:	dc.b 1
00013009 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001300E 01                         byte_11EF2:	dc.b 1
0001300F F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00013014 01                         byte_11EF8:	dc.b 1
00013015 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001301A 01                         byte_11EFE:	dc.b 1
0001301B F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00013020                            		even
00013020                            		even
00013020                            
00013020                            ; ===========================================================================
00013020                            ; ---------------------------------------------------------------------------
00013020                            ; Object 16 - harpoon (LZ)
00013020                            ; ---------------------------------------------------------------------------
00013020                            
00013020                            Obj16:					; XREF: Obj_Index
00013020 7000                       		moveq	#0,d0
00013022 1028 0024                  		move.b	$24(a0),d0
00013026 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
0001302A 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
0001302E                            ; ===========================================================================
0001302E 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00013030 0000                       		dc.w Obj16_Move-Obj16_Index
00013032 0000                       		dc.w Obj16_Wait-Obj16_Index
00013034                            ; ===========================================================================
00013034                            
00013034                            Obj16_Main:				; XREF: Obj16_Index
00013034 5428 0024                  		addq.b	#2,$24(a0)
00013038 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00013040 317C 03CC 0002             		move.w	#$3CC,2(a0)
00013046 0028 0004 0001             		ori.b	#4,1(a0)
0001304C 117C 0004 0018             		move.b	#4,$18(a0)
00013052 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00013058 117C 0014 0019             		move.b	#$14,$19(a0)
0001305E 317C 003C 0030             		move.w	#60,$30(a0)
00013064                            
00013064                            Obj16_Move:				; XREF: Obj16_Index
00013064 43F9 0000 0000             		lea	(Ani_obj16).l,a1
0001306A 6100 8724                  		bsr.w	AnimateSprite
0001306E 7000                       		moveq	#0,d0
00013070 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00013074 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
0001307A 6000 D76E                  		bra.w	MarkObjGone
0001307E                            ; ===========================================================================
0001307E 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00013084                            ; ===========================================================================
00013084                            
00013084                            Obj16_Wait:				; XREF: Obj16_Index
00013084 5368 0030                  		subq.w	#1,$30(a0)
00013088 6A00                       		bpl.s	Obj16_ChkDel
0001308A 317C 003C 0030             		move.w	#60,$30(a0)
00013090 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00013094 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
0001309A                            
0001309A                            Obj16_ChkDel:
0001309A 6000 D74E                  		bra.w	MarkObjGone
0001309E                            ; ===========================================================================
0001309E                            Ani_obj16:
0001309E                            	include "_anim\obj16.asm"
0001309E                            ; ---------------------------------------------------------------------------
0001309E                            ; Animation script - harpoon (LZ)
0001309E                            ; ---------------------------------------------------------------------------
0001309E 0000                       		dc.w byte_11F8A-Ani_obj16
000130A0 0000                       		dc.w byte_11F8E-Ani_obj16
000130A2 0000                       		dc.w byte_11F92-Ani_obj16
000130A4 0000                       		dc.w byte_11F96-Ani_obj16
000130A6 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
000130AA 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
000130AE 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
000130B2 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
000130B6                            		even
000130B6                            		even
000130B6                            
000130B6                            ; ---------------------------------------------------------------------------
000130B6                            ; Sprite mappings - harpoon (LZ)
000130B6                            ; ---------------------------------------------------------------------------
000130B6                            Map_obj16:
000130B6                            	include "_maps\obj16.asm"
000130B6                            ; ---------------------------------------------------------------------------
000130B6                            ; Sprite mappings - harpoon (LZ)
000130B6                            ; ---------------------------------------------------------------------------
000130B6 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
000130BA 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
000130BE 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
000130C2 01                         byte_11FA6:	dc.b 1
000130C3 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
000130C8 01                         byte_11FAC:	dc.b 1
000130C9 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
000130CE 02                         byte_11FB2:	dc.b 2
000130CF FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
000130D4 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
000130D9 01                         byte_11FBD:	dc.b 1
000130DA F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
000130DF 01                         byte_11FC3:	dc.b 1
000130E0 E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
000130E5 02                         byte_11FC9:	dc.b 2
000130E6 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
000130EB F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
000130F0                            		even
000130F0                            		even
000130F0                            
000130F0                            ; ===========================================================================
000130F0                            ; ---------------------------------------------------------------------------
000130F0                            ; Object 61 - blocks (LZ)
000130F0                            ; ---------------------------------------------------------------------------
000130F0                            
000130F0                            Obj61:					; XREF: Obj_Index
000130F0 7000                       		moveq	#0,d0
000130F2 1028 0024                  		move.b	$24(a0),d0
000130F6 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
000130FA 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
000130FE                            ; ===========================================================================
000130FE 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00013100 0000                       		dc.w Obj61_Action-Obj61_Index
00013102                            
00013102 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00013104 200C                       		dc.b $20, $C
00013106 1010                       		dc.b $10, $10
00013108 1010                       		dc.b $10, $10
0001310A                            ; ===========================================================================
0001310A                            
0001310A                            Obj61_Main:				; XREF: Obj61_Index
0001310A 5428 0024                  		addq.b	#2,$24(a0)
0001310E 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00013116 317C 43E6 0002             		move.w	#$43E6,2(a0)
0001311C 117C 0004 0001             		move.b	#4,1(a0)
00013122 117C 0003 0018             		move.b	#3,$18(a0)
00013128 7000                       		moveq	#0,d0
0001312A 1028 0028                  		move.b	$28(a0),d0
0001312E E648                       		lsr.w	#3,d0
00013130 0240 000E                  		andi.w	#$E,d0
00013134 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00013138 115A 0019                  		move.b	(a2)+,$19(a0)
0001313C 1152 0016                  		move.b	(a2),$16(a0)
00013140 E248                       		lsr.w	#1,d0
00013142 1140 001A                  		move.b	d0,$1A(a0)
00013146 3168 0008 0034             		move.w	8(a0),$34(a0)
0001314C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00013152 1028 0028                  		move.b	$28(a0),d0
00013156 0200 000F                  		andi.b	#$F,d0
0001315A 6700                       		beq.s	Obj61_Action
0001315C 0C00 0007                  		cmpi.b	#7,d0
00013160 6700                       		beq.s	Obj61_Action
00013162 117C 0001 0038             		move.b	#1,$38(a0)
00013168                            
00013168                            Obj61_Action:				; XREF: Obj61_Index
00013168 3F28 0008                  		move.w	8(a0),-(sp)
0001316C 7000                       		moveq	#0,d0
0001316E 1028 0028                  		move.b	$28(a0),d0
00013172 0240 000F                  		andi.w	#$F,d0
00013176 D040                       		add.w	d0,d0
00013178 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
0001317C 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00013180 381F                       		move.w	(sp)+,d4
00013182 4A28 0001                  		tst.b	1(a0)
00013186 6A00                       		bpl.s	Obj61_ChkDel
00013188 7200                       		moveq	#0,d1
0001318A 1228 0019                  		move.b	$19(a0),d1
0001318E 0641 000B                  		addi.w	#$B,d1
00013192 7400                       		moveq	#0,d2
00013194 1428 0016                  		move.b	$16(a0),d2
00013198 3602                       		move.w	d2,d3
0001319A 5243                       		addq.w	#1,d3
0001319C 6100 D974                  		bsr.w	SolidObject
000131A0 1144 003F                  		move.b	d4,$3F(a0)
000131A4 6100 0000                  		bsr.w	loc_12180
000131A8                            
000131A8                            Obj61_ChkDel:
000131A8 3028 0034                  		move.w	$34(a0),d0
000131AC 0240 FF80                  		andi.w	#$FF80,d0
000131B0 3238 F700                  		move.w	($FFFFF700).w,d1
000131B4 0441 0080                  		subi.w	#$80,d1
000131B8 0241 FF80                  		andi.w	#$FF80,d1
000131BC 9041                       		sub.w	d1,d0
000131BE 0C40 0280                  		cmpi.w	#$280,d0
000131C2 6200 B5BA                  		bhi.w	DeleteObject
000131C6 6000 B57A                  		bra.w	DisplaySprite
000131CA                            ; ===========================================================================
000131CA 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000131CE 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
000131D2 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
000131D6 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
000131DA                            ; ===========================================================================
000131DA                            
000131DA                            Obj61_Type00:				; XREF: Obj61_TypeIndex
000131DA 4E75                       		rts	
000131DC                            ; ===========================================================================
000131DC                            
000131DC                            Obj61_Type01:				; XREF: Obj61_TypeIndex
000131DC 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
000131E0 6600                       		bne.s	loc_120D6	; if yes, branch
000131E2 0828 0003 0022             		btst	#3,$22(a0)
000131E8 6700                       		beq.s	locret_120D4
000131EA 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
000131F0                            
000131F0                            locret_120D4:
000131F0 4E75                       		rts	
000131F2                            ; ===========================================================================
000131F2                            
000131F2                            loc_120D6:
000131F2 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
000131F6 66F8                       		bne.s	locret_120D4	; if time remains, branch
000131F8 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
000131FC 4228 0038                  		clr.b	$38(a0)
00013200 4E75                       		rts	
00013202                            ; ===========================================================================
00013202                            
00013202                            Obj61_Type02:				; XREF: Obj61_TypeIndex
00013202 6100 B518                  		bsr.w	SpeedToPos
00013206 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
0001320A 6100 0000                  		bsr.w	ObjHitFloor
0001320E 4A41                       		tst.w	d1
00013210 6A00 0000                  		bpl.w	locret_12106
00013214 5241                       		addq.w	#1,d1
00013216 D368 000C                  		add.w	d1,$C(a0)
0001321A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001321E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013222                            
00013222                            locret_12106:
00013222 4E75                       		rts	
00013224                            ; ===========================================================================
00013224                            
00013224                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00013224 6100 B4F6                  		bsr.w	SpeedToPos
00013228 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
0001322C 6100 0000                  		bsr.w	ObjHitCeiling
00013230 4A41                       		tst.w	d1
00013232 6A00 0000                  		bpl.w	locret_12126
00013236 9368 000C                  		sub.w	d1,$C(a0)
0001323A 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001323E 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
00013242                            
00013242                            locret_12126:
00013242 4E75                       		rts	
00013244                            ; ===========================================================================
00013244                            
00013244                            Obj61_Type05:				; XREF: Obj61_TypeIndex
00013244 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
0001324A 6600                       		bne.s	locret_12138	; if not, branch
0001324C 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00013250 4228 0038                  		clr.b	$38(a0)
00013254                            
00013254                            locret_12138:
00013254 4E75                       		rts	
00013256                            ; ===========================================================================
00013256                            
00013256                            Obj61_Type07:				; XREF: Obj61_TypeIndex
00013256 3038 F646                  		move.w	($FFFFF646).w,d0
0001325A 9068 000C                  		sub.w	$C(a0),d0
0001325E 6700                       		beq.s	locret_1217E
00013260 6400                       		bcc.s	loc_12162
00013262 0C40 FFFE                  		cmpi.w	#-2,d0
00013266 6C00                       		bge.s	loc_1214E
00013268 70FE                       		moveq	#-2,d0
0001326A                            
0001326A                            loc_1214E:
0001326A D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
0001326E 6100 0000                  		bsr.w	ObjHitCeiling
00013272 4A41                       		tst.w	d1
00013274 6A00 0000                  		bpl.w	locret_12160
00013278 9368 000C                  		sub.w	d1,$C(a0)
0001327C                            
0001327C                            locret_12160:
0001327C 4E75                       		rts	
0001327E                            ; ===========================================================================
0001327E                            
0001327E                            loc_12162:				; XREF: Obj61_Type07
0001327E 0C40 0002                  		cmpi.w	#2,d0
00013282 6F00                       		ble.s	loc_1216A
00013284 7002                       		moveq	#2,d0
00013286                            
00013286                            loc_1216A:
00013286 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
0001328A 6100 0000                  		bsr.w	ObjHitFloor
0001328E 4A41                       		tst.w	d1
00013290 6A00 0000                  		bpl.w	locret_1217E
00013294 5241                       		addq.w	#1,d1
00013296 D368 000C                  		add.w	d1,$C(a0)
0001329A                            
0001329A                            locret_1217E:
0001329A 4E75                       		rts	
0001329C                            ; ===========================================================================
0001329C                            
0001329C                            loc_12180:				; XREF: Obj61_Action
0001329C 4A28 0038                  		tst.b	$38(a0)
000132A0 6700                       		beq.s	locret_121C0
000132A2 0828 0003 0022             		btst	#3,$22(a0)
000132A8 6600                       		bne.s	loc_1219A
000132AA 4A28 003E                  		tst.b	$3E(a0)
000132AE 6700                       		beq.s	locret_121C0
000132B0 5928 003E                  		subq.b	#4,$3E(a0)
000132B4 6000                       		bra.s	loc_121A6
000132B6                            ; ===========================================================================
000132B6                            
000132B6                            loc_1219A:
000132B6 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
000132BC 6700                       		beq.s	locret_121C0
000132BE 5828 003E                  		addq.b	#4,$3E(a0)
000132C2                            
000132C2                            loc_121A6:
000132C2 1028 003E                  		move.b	$3E(a0),d0
000132C6 4EB9 0000 3416             		jsr	(CalcSine).l
000132CC 323C 0400                  		move.w	#$400,d1
000132D0 C1C1                       		muls.w	d1,d0
000132D2 4840                       		swap	d0
000132D4 D068 0030                  		add.w	$30(a0),d0
000132D8 3140 000C                  		move.w	d0,$C(a0)
000132DC                            
000132DC                            locret_121C0:
000132DC 4E75                       		rts	
000132DE                            ; ===========================================================================
000132DE                            ; ---------------------------------------------------------------------------
000132DE                            ; Sprite mappings - blocks (LZ)
000132DE                            ; ---------------------------------------------------------------------------
000132DE                            Map_obj61:
000132DE                            	include "_maps\obj61.asm"
000132DE                            ; ---------------------------------------------------------------------------
000132DE                            ; Sprite mappings - blocks (LZ)
000132DE                            ; ---------------------------------------------------------------------------
000132DE 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
000132E2 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
000132E6 01                         byte_121CA:	dc.b 1
000132E7 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000132EC 02                         byte_121D0:	dc.b 2
000132ED F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
000132F2 F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
000132F7 01                         byte_121DB:	dc.b 1
000132F8 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
000132FD 01                         byte_121E1:	dc.b 1
000132FE F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00013304 00                         		even
00013304 00                         		even
00013304                            
00013304                            ; ===========================================================================
00013304                            ; ---------------------------------------------------------------------------
00013304                            ; Object 62 - gargoyle head (LZ)
00013304                            ; ---------------------------------------------------------------------------
00013304                            
00013304                            Obj62:					; XREF: Obj_Index
00013304 7000                       		moveq	#0,d0
00013306 1028 0024                  		move.b	$24(a0),d0
0001330A 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001330E 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
00013312 6000 D4D6                  		bra.w	MarkObjGone
00013316                            ; ===========================================================================
00013316 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00013318 0000                       		dc.w Obj62_MakeFire-Obj62_Index
0001331A 0000                       		dc.w Obj62_FireBall-Obj62_Index
0001331C 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001331E                            
0001331E 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00013326                            ; ===========================================================================
00013326                            
00013326                            Obj62_Main:				; XREF: Obj62_Index
00013326 5428 0024                  		addq.b	#2,$24(a0)
0001332A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00013332 317C 42E9 0002             		move.w	#$42E9,2(a0)
00013338 0028 0004 0001             		ori.b	#4,1(a0)
0001333E 117C 0003 0018             		move.b	#3,$18(a0)
00013344 117C 0010 0019             		move.b	#$10,$19(a0)
0001334A 1028 0028                  		move.b	$28(a0),d0	; get object type
0001334E 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00013352 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
00013358 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001335E 0228 000F 0028             		andi.b	#$F,$28(a0)
00013364                            
00013364                            Obj62_MakeFire:				; XREF: Obj62_Index
00013364 5328 001E                  		subq.b	#1,$1E(a0)
00013368 6600                       		bne.s	Obj62_NoFire
0001336A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00013370 6100 B64A                  		bsr.w	ChkObjOnScreen
00013374 6600                       		bne.s	Obj62_NoFire
00013376 6100 B850                  		bsr.w	SingleObjLoad
0001337A 6600                       		bne.s	Obj62_NoFire
0001337C 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
00013380 5829 0024                  		addq.b	#4,$24(a1)
00013384 3368 0008 0008             		move.w	8(a0),8(a1)
0001338A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00013390 1368 0001 0001             		move.b	1(a0),1(a1)
00013396 1368 0022 0022             		move.b	$22(a0),$22(a1)
0001339C                            
0001339C                            Obj62_NoFire:
0001339C 4E75                       		rts	
0001339E                            ; ===========================================================================
0001339E                            
0001339E                            Obj62_FireBall:				; XREF: Obj62_Index
0001339E 5428 0024                  		addq.b	#2,$24(a0)
000133A2 117C 0008 0016             		move.b	#8,$16(a0)
000133A8 117C 0008 0017             		move.b	#8,$17(a0)
000133AE 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
000133B6 317C 02E9 0002             		move.w	#$2E9,2(a0)
000133BC 0028 0004 0001             		ori.b	#4,1(a0)
000133C2 117C 0004 0018             		move.b	#4,$18(a0)
000133C8 117C 0098 0020             		move.b	#$98,$20(a0)
000133CE 117C 0008 0019             		move.b	#8,$19(a0)
000133D4 117C 0002 001A             		move.b	#2,$1A(a0)
000133DA 5068 000C                  		addq.w	#8,$C(a0)
000133DE 317C 0200 0010             		move.w	#$200,$10(a0)
000133E4 0828 0000 0022             		btst	#0,$22(a0)
000133EA 6600                       		bne.s	Obj62_Sound
000133EC 4468 0010                  		neg.w	$10(a0)
000133F0                            
000133F0                            Obj62_Sound:
000133F0 303C 00AE                  		move.w	#$AE,d0
000133F4 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play lava ball sound
000133FA                            
000133FA                            Obj62_AniFire:				; XREF: Obj62_Index
000133FA 1038 FE05                  		move.b	($FFFFFE05).w,d0
000133FE 0200 0007                  		andi.b	#7,d0
00013402 6600                       		bne.s	Obj62_StopFire
00013404 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
0001340A                            
0001340A                            Obj62_StopFire:
0001340A 6100 B310                  		bsr.w	SpeedToPos
0001340E 0828 0000 0022             		btst	#0,$22(a0)
00013414 6600                       		bne.s	Obj62_StopFire2
00013416 76F8                       		moveq	#-8,d3
00013418 6100 0000                  		bsr.w	ObjHitWallLeft
0001341C 4A41                       		tst.w	d1
0001341E 6B00 B35E                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
00013422 4E75                       		rts	
00013424                            ; ===========================================================================
00013424                            
00013424                            Obj62_StopFire2:
00013424 7608                       		moveq	#8,d3
00013426 6100 0000                  		bsr.w	ObjHitWallRight
0001342A 4A41                       		tst.w	d1
0001342C 6B00 B350                  		bmi.w	DeleteObject
00013430 4E75                       		rts	
00013432                            ; ===========================================================================
00013432                            ; ---------------------------------------------------------------------------
00013432                            ; Sprite mappings - gargoyle head (LZ)
00013432                            ; ---------------------------------------------------------------------------
00013432                            Map_obj62:
00013432                            	include "_maps\obj62.asm"
00013432                            ; ---------------------------------------------------------------------------
00013432                            ; Sprite mappings - gargoyle head (LZ)
00013432                            ; ---------------------------------------------------------------------------
00013432 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00013436 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
0001343A 03                         byte_12320:	dc.b 3
0001343B F004 0000 00               		dc.b $F0, 4, 0,	0, 0
00013440 F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
00013445 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
0001344A 01                         byte_12330:	dc.b 1
0001344B FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
00013450 01                         byte_12336:	dc.b 1
00013451 FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
00013456                            		even
00013456                            		even
00013456                            
00013456                            ; ===========================================================================
00013456                            ; ---------------------------------------------------------------------------
00013456                            ; Object 63 - platforms	on a conveyor belt (LZ)
00013456                            ; ---------------------------------------------------------------------------
00013456                            
00013456                            Obj63:					; XREF: Obj_Index
00013456 7000                       		moveq	#0,d0
00013458 1028 0024                  		move.b	$24(a0),d0
0001345C 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
00013460 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
00013464 3028 0030                  		move.w	$30(a0),d0
00013468 0240 FF80                  		andi.w	#$FF80,d0
0001346C 3238 F700                  		move.w	($FFFFF700).w,d1
00013470 0441 0080                  		subi.w	#$80,d1
00013474 0241 FF80                  		andi.w	#$FF80,d1
00013478 9041                       		sub.w	d1,d0
0001347A 0C40 0280                  		cmpi.w	#$280,d0
0001347E 6200                       		bhi.s	loc_1236A
00013480                            
00013480                            Obj63_Display:				; XREF: loc_1236A
00013480 6000 B2C0                  		bra.w	DisplaySprite
00013484                            ; ===========================================================================
00013484                            
00013484                            loc_1236A:				; XREF: Obj63
00013484 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
0001348A 6600                       		bne.s	loc_12378
0001348C 0C40 FF80                  		cmpi.w	#-$80,d0
00013490 64EE                       		bcc.s	Obj63_Display
00013492                            
00013492                            loc_12378:
00013492 1028 002F                  		move.b	$2F(a0),d0
00013496 6A00 B2E6                  		bpl.w	DeleteObject
0001349A 0240 007F                  		andi.w	#$7F,d0
0001349E 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000134A2 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000134A8 6000 B2D4                  		bra.w	DeleteObject
000134AC                            ; ===========================================================================
000134AC 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
000134AE 0000                       		dc.w loc_124B2-Obj63_Index
000134B0 0000                       		dc.w loc_124C2-Obj63_Index
000134B2 0000                       		dc.w loc_124DE-Obj63_Index
000134B4                            ; ===========================================================================
000134B4                            
000134B4                            Obj63_Main:				; XREF: Obj63_Index
000134B4 1028 0028                  		move.b	$28(a0),d0
000134B8 6B00 0000                  		bmi.w	loc_12460
000134BC 5428 0024                  		addq.b	#2,$24(a0)
000134C0 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
000134C8 317C 43F6 0002             		move.w	#$43F6,2(a0)
000134CE 0028 0004 0001             		ori.b	#4,1(a0)
000134D4 117C 0010 0019             		move.b	#$10,$19(a0)
000134DA 117C 0004 0018             		move.b	#4,$18(a0)
000134E0 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
000134E6 6600                       		bne.s	loc_123E2
000134E8 5828 0024                  		addq.b	#4,$24(a0)
000134EC 317C 03F6 0002             		move.w	#$3F6,2(a0)
000134F2 117C 0001 0018             		move.b	#1,$18(a0)
000134F8 6000 0000                  		bra.w	loc_124DE
000134FC                            ; ===========================================================================
000134FC                            
000134FC                            loc_123E2:
000134FC 117C 0004 001A             		move.b	#4,$1A(a0)
00013502 7000                       		moveq	#0,d0
00013504 1028 0028                  		move.b	$28(a0),d0
00013508 3200                       		move.w	d0,d1
0001350A E648                       		lsr.w	#3,d0
0001350C 0240 001E                  		andi.w	#$1E,d0
00013510 45FA 0000                  		lea	Obj63_Data(pc),a2
00013514 D4F2 0000                  		adda.w	(a2,d0.w),a2
00013518 315A 0038                  		move.w	(a2)+,$38(a0)
0001351C 315A 0030                  		move.w	(a2)+,$30(a0)
00013520 214A 003C                  		move.l	a2,$3C(a0)
00013524 0241 000F                  		andi.w	#$F,d1
00013528 E549                       		lsl.w	#2,d1
0001352A 1141 0038                  		move.b	d1,$38(a0)
0001352E 117C 0004 003A             		move.b	#4,$3A(a0)
00013534 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013538 6700                       		beq.s	loc_1244C
0001353A 117C 0001 003B             		move.b	#1,$3B(a0)
00013540 4428 003A                  		neg.b	$3A(a0)
00013544 7200                       		moveq	#0,d1
00013546 1228 0038                  		move.b	$38(a0),d1
0001354A D228 003A                  		add.b	$3A(a0),d1
0001354E B228 0039                  		cmp.b	$39(a0),d1
00013552 6500                       		bcs.s	loc_12448
00013554 1001                       		move.b	d1,d0
00013556 7200                       		moveq	#0,d1
00013558 4A00                       		tst.b	d0
0001355A 6A00                       		bpl.s	loc_12448
0001355C 1228 0039                  		move.b	$39(a0),d1
00013560 5901                       		subq.b	#4,d1
00013562                            
00013562                            loc_12448:
00013562 1141 0038                  		move.b	d1,$38(a0)
00013566                            
00013566                            loc_1244C:
00013566 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001356C 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00013572 6100 0000                  		bsr.w	Obj63_ChangeDir
00013576 6000 0000                  		bra.w	loc_124B2
0001357A                            ; ===========================================================================
0001357A                            
0001357A                            loc_12460:				; XREF: Obj63_Main
0001357A 1140 002F                  		move.b	d0,$2F(a0)
0001357E 0240 007F                  		andi.w	#$7F,d0
00013582 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00013586 08F2 0000 0000             		bset	#0,(a2,d0.w)
0001358C 6600 B1F0                  		bne.w	DeleteObject
00013590 D040                       		add.w	d0,d0
00013592 0240 001E                  		andi.w	#$1E,d0
00013596 45F9 0000 0000             		lea	(ObjPos_LZxpf_Index).l,a2
0001359C D4F2 0000                  		adda.w	(a2,d0.w),a2
000135A0 321A                       		move.w	(a2)+,d1
000135A2 2248                       		movea.l	a0,a1
000135A4 6000                       		bra.s	Obj63_MakePtfms
000135A6                            ; ===========================================================================
000135A6                            
000135A6                            Obj63_Loop:
000135A6 6100 B620                  		bsr.w	SingleObjLoad
000135AA 6600                       		bne.s	loc_124AA
000135AC                            
000135AC                            Obj63_MakePtfms:			; XREF: loc_12460
000135AC 12BC 0063                  		move.b	#$63,0(a1)
000135B0 335A 0008                  		move.w	(a2)+,8(a1)
000135B4 335A 000C                  		move.w	(a2)+,$C(a1)
000135B8 301A                       		move.w	(a2)+,d0
000135BA 1340 0028                  		move.b	d0,$28(a1)
000135BE                            
000135BE                            loc_124AA:
000135BE 51C9 FFE6                  		dbf	d1,Obj63_Loop
000135C2                            
000135C2 588F                       		addq.l	#4,sp
000135C4 4E75                       		rts	
000135C6                            ; ===========================================================================
000135C6                            
000135C6                            loc_124B2:				; XREF: Obj63_Index
000135C6 7200                       		moveq	#0,d1
000135C8 1228 0019                  		move.b	$19(a0),d1
000135CC 4EB9 0000 834C             		jsr	(PlatformObject).l
000135D2 6000 0000                  		bra.w	sub_12502
000135D6                            ; ===========================================================================
000135D6                            
000135D6                            loc_124C2:				; XREF: Obj63_Index
000135D6 7200                       		moveq	#0,d1
000135D8 1228 0019                  		move.b	$19(a0),d1
000135DC 4EB9 0000 84C0             		jsr	(ExitPlatform).l
000135E2 3F28 0008                  		move.w	8(a0),-(sp)
000135E6 6100 0000                  		bsr.w	sub_12502
000135EA 341F                       		move.w	(sp)+,d2
000135EC 4EF9 0000 8A2A             		jmp	(MvSonicOnPtfm2).l
000135F2                            ; ===========================================================================
000135F2                            
000135F2                            loc_124DE:				; XREF: Obj63_Index
000135F2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000135F6 0240 0003                  		andi.w	#3,d0
000135FA 6600                       		bne.s	loc_124FC
000135FC 7201                       		moveq	#1,d1
000135FE 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00013602 6700                       		beq.s	loc_124F2
00013604 4401                       		neg.b	d1
00013606                            
00013606                            loc_124F2:
00013606 D328 001A                  		add.b	d1,$1A(a0)
0001360A 0228 0003 001A             		andi.b	#3,$1A(a0)
00013610                            
00013610                            loc_124FC:
00013610 588F                       		addq.l	#4,sp
00013612 6000 D1D6                  		bra.w	MarkObjGone
00013616                            
00013616                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013616                            
00013616                            
00013616                            sub_12502:				; XREF: loc_124B2; loc_124C2
00013616 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001361A 6700                       		beq.s	loc_12520
0001361C 4A28 003B                  		tst.b	$3B(a0)
00013620 6600                       		bne.s	loc_12520
00013622 117C 0001 003B             		move.b	#1,$3B(a0)
00013628 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001362E 4428 003A                  		neg.b	$3A(a0)
00013632 6000                       		bra.s	loc_12534
00013634                            ; ===========================================================================
00013634                            
00013634                            loc_12520:
00013634 3028 0008                  		move.w	8(a0),d0
00013638 B068 0034                  		cmp.w	$34(a0),d0
0001363C 6600                       		bne.s	loc_1256A
0001363E 3028 000C                  		move.w	$C(a0),d0
00013642 B068 0036                  		cmp.w	$36(a0),d0
00013646 6600                       		bne.s	loc_1256A
00013648                            
00013648                            loc_12534:
00013648 7200                       		moveq	#0,d1
0001364A 1228 0038                  		move.b	$38(a0),d1
0001364E D228 003A                  		add.b	$3A(a0),d1
00013652 B228 0039                  		cmp.b	$39(a0),d1
00013656 6500                       		bcs.s	loc_12552
00013658 1001                       		move.b	d1,d0
0001365A 7200                       		moveq	#0,d1
0001365C 4A00                       		tst.b	d0
0001365E 6A00                       		bpl.s	loc_12552
00013660 1228 0039                  		move.b	$39(a0),d1
00013664 5901                       		subq.b	#4,d1
00013666                            
00013666                            loc_12552:
00013666 1141 0038                  		move.b	d1,$38(a0)
0001366A 2268 003C                  		movea.l	$3C(a0),a1
0001366E 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00013674 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
0001367A 6100 0000                  		bsr.w	Obj63_ChangeDir
0001367E                            
0001367E                            loc_1256A:
0001367E 6100 B09C                  		bsr.w	SpeedToPos
00013682 4E75                       		rts	
00013684                            ; End of function sub_12502
00013684                            
00013684                            
00013684                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013684                            
00013684                            
00013684                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
00013684 7000                       		moveq	#0,d0
00013686 343C FF00                  		move.w	#-$100,d2
0001368A 3028 0008                  		move.w	8(a0),d0
0001368E 9068 0034                  		sub.w	$34(a0),d0
00013692 6400                       		bcc.s	loc_12584
00013694 4440                       		neg.w	d0
00013696 4442                       		neg.w	d2
00013698                            
00013698                            loc_12584:
00013698 7200                       		moveq	#0,d1
0001369A 363C FF00                  		move.w	#-$100,d3
0001369E 3228 000C                  		move.w	$C(a0),d1
000136A2 9268 0036                  		sub.w	$36(a0),d1
000136A6 6400                       		bcc.s	loc_12598
000136A8 4441                       		neg.w	d1
000136AA 4443                       		neg.w	d3
000136AC                            
000136AC                            loc_12598:
000136AC B240                       		cmp.w	d0,d1
000136AE 6500                       		bcs.s	loc_125C2
000136B0 3028 0008                  		move.w	8(a0),d0
000136B4 9068 0034                  		sub.w	$34(a0),d0
000136B8 6700                       		beq.s	loc_125AE
000136BA 48C0                       		ext.l	d0
000136BC E180                       		asl.l	#8,d0
000136BE 81C1                       		divs.w	d1,d0
000136C0 4440                       		neg.w	d0
000136C2                            
000136C2                            loc_125AE:
000136C2 3140 0010                  		move.w	d0,$10(a0)
000136C6 3143 0012                  		move.w	d3,$12(a0)
000136CA 4840                       		swap	d0
000136CC 3140 000A                  		move.w	d0,$A(a0)
000136D0 4268 000E                  		clr.w	$E(a0)
000136D4 4E75                       		rts	
000136D6                            ; ===========================================================================
000136D6                            
000136D6                            loc_125C2:				; XREF: Obj63_ChangeDir
000136D6 3228 000C                  		move.w	$C(a0),d1
000136DA 9268 0036                  		sub.w	$36(a0),d1
000136DE 6700                       		beq.s	loc_125D4
000136E0 48C1                       		ext.l	d1
000136E2 E181                       		asl.l	#8,d1
000136E4 83C0                       		divs.w	d0,d1
000136E6 4441                       		neg.w	d1
000136E8                            
000136E8                            loc_125D4:
000136E8 3141 0012                  		move.w	d1,$12(a0)
000136EC 3142 0010                  		move.w	d2,$10(a0)
000136F0 4841                       		swap	d1
000136F2 3141 000E                  		move.w	d1,$E(a0)
000136F6 4268 000A                  		clr.w	$A(a0)
000136FA 4E75                       		rts	
000136FC                            ; End of function Obj63_ChangeDir
000136FC                            
000136FC                            ; ===========================================================================
000136FC 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
000136FE 0000                       		dc.w word_12610-Obj63_Data
00013700 0000                       		dc.w word_12628-Obj63_Data
00013702 0000                       		dc.w word_1263C-Obj63_Data
00013704 0000                       		dc.w word_12650-Obj63_Data
00013706 0000                       		dc.w word_12668-Obj63_Data
00013708 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00013718 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00013724 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00013734 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001373C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
00013750 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
00013764 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
0001377C 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
00013790                            
00013790                            ; ---------------------------------------------------------------------------
00013790                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013790                            ; ---------------------------------------------------------------------------
00013790                            Map_obj63:
00013790                            	include "_maps\obj63.asm"
00013790                            ; ---------------------------------------------------------------------------
00013790                            ; Sprite mappings - platforms on a conveyor belt (LZ)
00013790                            ; ---------------------------------------------------------------------------
00013790 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
00013794 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
00013798 0000                       		dc.w byte_1269E-Map_obj63
0001379A 01                         byte_12686:	dc.b 1
0001379B F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
000137A0 01                         byte_1268C:	dc.b 1
000137A1 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000137A6 01                         byte_12692:	dc.b 1
000137A7 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
000137AC 01                         byte_12698:	dc.b 1
000137AD F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
000137B2 01                         byte_1269E:	dc.b 1
000137B3 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
000137B8                            		even
000137B8                            		even
000137B8                            
000137B8                            ; ===========================================================================
000137B8                            ; ---------------------------------------------------------------------------
000137B8                            ; Object 64 - bubbles (LZ)
000137B8                            ; ---------------------------------------------------------------------------
000137B8                            
000137B8                            Obj64:					; XREF: Obj_Index
000137B8 7000                       		moveq	#0,d0
000137BA 1028 0024                  		move.b	$24(a0),d0
000137BE 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
000137C2 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
000137C6                            ; ===========================================================================
000137C6 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
000137C8 0000                       		dc.w Obj64_Animate-Obj64_Index
000137CA 0000                       		dc.w Obj64_ChkWater-Obj64_Index
000137CC 0000                       		dc.w Obj64_Display2-Obj64_Index
000137CE 0000                       		dc.w Obj64_Delete3-Obj64_Index
000137D0 0000                       		dc.w Obj64_BblMaker-Obj64_Index
000137D2                            ; ===========================================================================
000137D2                            
000137D2                            Obj64_Main:				; XREF: Obj64_Index
000137D2 5428 0024                  		addq.b	#2,$24(a0)
000137D6 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
000137DE 317C 8348 0002             		move.w	#$8348,2(a0)
000137E4 117C 0084 0001             		move.b	#$84,1(a0)
000137EA 117C 0010 0019             		move.b	#$10,$19(a0)
000137F0 117C 0001 0018             		move.b	#1,$18(a0)
000137F6 1028 0028                  		move.b	$28(a0),d0	; get object type
000137FA 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
000137FC 5028 0024                  		addq.b	#8,$24(a0)
00013800 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00013804 1140 0032                  		move.b	d0,$32(a0)
00013808 1140 0033                  		move.b	d0,$33(a0)
0001380C 117C 0006 001C             		move.b	#6,$1C(a0)
00013812 6000 0000                  		bra.w	Obj64_BblMaker
00013816                            ; ===========================================================================
00013816                            
00013816                            Obj64_Bubble:				; XREF: Obj64_Main
00013816 1140 001C                  		move.b	d0,$1C(a0)
0001381A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013820 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00013826 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001382C 1140 0026                  		move.b	d0,$26(a0)
00013830                            
00013830                            Obj64_Animate:				; XREF: Obj64_Index
00013830 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013836 4EB9 0000 B790             		jsr	AnimateSprite
0001383C 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
00013842 6600                       		bne.s	Obj64_ChkWater
00013844 117C 0001 002E             		move.b	#1,$2E(a0)
0001384A                            
0001384A                            Obj64_ChkWater:				; XREF: Obj64_Index
0001384A 3038 F646                  		move.w	($FFFFF646).w,d0
0001384E B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
00013852 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
00013854                            
00013854                            Obj64_Burst:				; XREF: Obj64_Wobble
00013854 117C 0006 0024             		move.b	#6,$24(a0)
0001385A 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
0001385E 6000 0000                  		bra.w	Obj64_Display2
00013862                            ; ===========================================================================
00013862                            
00013862                            Obj64_Wobble:				; XREF: Obj64_ChkWater
00013862 1028 0026                  		move.b	$26(a0),d0
00013866 5228 0026                  		addq.b	#1,$26(a0)
0001386A 0240 007F                  		andi.w	#$7F,d0
0001386E 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013874 1031 0000                  		move.b	(a1,d0.w),d0
00013878 4880                       		ext.w	d0
0001387A D068 0030                  		add.w	$30(a0),d0
0001387E 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
00013882 4A28 002E                  		tst.b	$2E(a0)
00013886 6700                       		beq.s	Obj64_Display
00013888 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
0001388C 6700                       		beq.s	Obj64_Display	; if not, branch
0001388E                            
0001388E 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
00013892 303C 00AD                  		move.w	#$AD,d0
00013896 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
0001389C 43F8 D000                  		lea	($FFFFD000).w,a1
000138A0 4269 0010                  		clr.w	$10(a1)
000138A4 4269 0012                  		clr.w	$12(a1)
000138A8 4269 0014                  		clr.w	$14(a1)
000138AC 137C 0015 001C             		move.b	#$15,$1C(a1)
000138B2 337C 0023 003E             		move.w	#$23,$3E(a1)
000138B8 137C 0000 003C             		move.b	#0,$3C(a1)
000138BE 08A9 0005 0022             		bclr	#5,$22(a1)
000138C4 08A9 0004 0022             		bclr	#4,$22(a1)
000138CA 0829 0002 0022             		btst	#2,$22(a1)
000138D0 6700 FF82                  		beq.w	Obj64_Burst
000138D4 08A9 0002 0022             		bclr	#2,$22(a1)
000138DA 137C 0013 0016             		move.b	#$13,$16(a1)
000138E0 137C 0009 0017             		move.b	#9,$17(a1)
000138E6 5B69 000C                  		subq.w	#5,$C(a1)
000138EA 6000 FF68                  		bra.w	Obj64_Burst
000138EE                            ; ===========================================================================
000138EE                            
000138EE                            Obj64_Display:				; XREF: Obj64_Wobble
000138EE 6100 AE2C                  		bsr.w	SpeedToPos
000138F2 4A28 0001                  		tst.b	1(a0)
000138F6 6A00                       		bpl.s	Obj64_Delete
000138F8 4EFA AE48                  		jmp	DisplaySprite
000138FC                            ; ===========================================================================
000138FC                            
000138FC                            Obj64_Delete:
000138FC 4EFA AE80                  		jmp	DeleteObject
00013900                            ; ===========================================================================
00013900                            
00013900                            Obj64_Display2:				; XREF: Obj64_Index
00013900 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013906 4EB9 0000 B790             		jsr	AnimateSprite
0001390C 4A28 0001                  		tst.b	1(a0)
00013910 6A00                       		bpl.s	Obj64_Delete2
00013912 4EFA AE2E                  		jmp	DisplaySprite
00013916                            ; ===========================================================================
00013916                            
00013916                            Obj64_Delete2:
00013916 4EFA AE66                  		jmp	DeleteObject
0001391A                            ; ===========================================================================
0001391A                            
0001391A                            Obj64_Delete3:				; XREF: Obj64_Index
0001391A 6000 AE62                  		bra.w	DeleteObject
0001391E                            ; ===========================================================================
0001391E                            
0001391E                            Obj64_BblMaker:				; XREF: Obj64_Index
0001391E 4A68 0036                  		tst.w	$36(a0)
00013922 6600                       		bne.s	loc_12874
00013924 3038 F646                  		move.w	($FFFFF646).w,d0
00013928 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001392C 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
00013930 4A28 0001                  		tst.b	1(a0)
00013934 6A00 0000                  		bpl.w	Obj64_ChkDel
00013938 5368 0038                  		subq.w	#1,$38(a0)
0001393C 6A00 0000                  		bpl.w	loc_12914
00013940 317C 0001 0036             		move.w	#1,$36(a0)
00013946                            
00013946                            loc_1283A:
00013946 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001394C 3200                       		move.w	d0,d1
0001394E 0240 0007                  		andi.w	#7,d0
00013952 0C40 0006                  		cmpi.w	#6,d0
00013956 64EE                       		bcc.s	loc_1283A
00013958                            
00013958 1140 0034                  		move.b	d0,$34(a0)
0001395C 0241 000C                  		andi.w	#$C,d1
00013960 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
00013966 D2C1                       		adda.w	d1,a1
00013968 2149 003C                  		move.l	a1,$3C(a0)
0001396C 5328 0032                  		subq.b	#1,$32(a0)
00013970 6A00                       		bpl.s	loc_12872
00013972 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013978 08E8 0007 0036             		bset	#7,$36(a0)
0001397E                            
0001397E                            loc_12872:
0001397E 6000                       		bra.s	loc_1287C
00013980                            ; ===========================================================================
00013980                            
00013980                            loc_12874:				; XREF: Obj64_BblMaker
00013980 5368 0038                  		subq.w	#1,$38(a0)
00013984 6A00 0000                  		bpl.w	loc_12914
00013988                            
00013988                            loc_1287C:
00013988 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001398E 0240 001F                  		andi.w	#$1F,d0
00013992 3140 0038                  		move.w	d0,$38(a0)
00013996 6100 B230                  		bsr.w	SingleObjLoad
0001399A 6600                       		bne.s	loc_128F8
0001399C 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000139A0 3368 0008 0008             		move.w	8(a0),8(a1)
000139A6 4EB9 0000 33F0             		jsr	(RandomNumber).l
000139AC 0240 000F                  		andi.w	#$F,d0
000139B0 5140                       		subq.w	#8,d0
000139B2 D169 0008                  		add.w	d0,8(a1)
000139B6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000139BC 7000                       		moveq	#0,d0
000139BE 1028 0034                  		move.b	$34(a0),d0
000139C2 2468 003C                  		movea.l	$3C(a0),a2
000139C6 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
000139CC 0828 0007 0036             		btst	#7,$36(a0)
000139D2 6700                       		beq.s	loc_128F8
000139D4 4EB9 0000 33F0             		jsr	(RandomNumber).l
000139DA 0240 0003                  		andi.w	#3,d0
000139DE 6600                       		bne.s	loc_128E4
000139E0 08E8 0006 0036             		bset	#6,$36(a0)
000139E6 6600                       		bne.s	loc_128F8
000139E8 137C 0002 0028             		move.b	#2,$28(a1)
000139EE                            
000139EE                            loc_128E4:
000139EE 4A28 0034                  		tst.b	$34(a0)
000139F2 6600                       		bne.s	loc_128F8
000139F4 08E8 0006 0036             		bset	#6,$36(a0)
000139FA 6600                       		bne.s	loc_128F8
000139FC 137C 0002 0028             		move.b	#2,$28(a1)
00013A02                            
00013A02                            loc_128F8:
00013A02 5328 0034                  		subq.b	#1,$34(a0)
00013A06 6A00                       		bpl.s	loc_12914
00013A08 4EB9 0000 33F0             		jsr	(RandomNumber).l
00013A0E 0240 007F                  		andi.w	#$7F,d0
00013A12 0640 0080                  		addi.w	#$80,d0
00013A16 D168 0038                  		add.w	d0,$38(a0)
00013A1A 4268 0036                  		clr.w	$36(a0)
00013A1E                            
00013A1E                            loc_12914:
00013A1E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00013A24 4EB9 0000 B790             		jsr	AnimateSprite
00013A2A                            
00013A2A                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00013A2A 3028 0008                  		move.w	8(a0),d0
00013A2E 0240 FF80                  		andi.w	#$FF80,d0
00013A32 3238 F700                  		move.w	($FFFFF700).w,d1
00013A36 0441 0080                  		subi.w	#$80,d1
00013A3A 0241 FF80                  		andi.w	#$FF80,d1
00013A3E 9041                       		sub.w	d1,d0
00013A40 0C40 0280                  		cmpi.w	#$280,d0
00013A44 6200 AD38                  		bhi.w	DeleteObject
00013A48 3038 F646                  		move.w	($FFFFF646).w,d0
00013A4C B068 000C                  		cmp.w	$C(a0),d0
00013A50 6500 ACF0                  		bcs.w	DisplaySprite
00013A54 4E75                       		rts	
00013A56                            ; ===========================================================================
00013A56                            ; bubble production sequence
00013A56                            
00013A56                            ; 0 = small bubble, 1 =	large bubble
00013A56                            
00013A56 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
00013A68                            
00013A68                            ; ===========================================================================
00013A68                            
00013A68                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
00013A68 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013A6C 6B00                       		bmi.s	loc_12998
00013A6E 43F8 D000                  		lea	($FFFFD000).w,a1
00013A72 3029 0008                  		move.w	8(a1),d0
00013A76 3228 0008                  		move.w	8(a0),d1
00013A7A 0441 0010                  		subi.w	#$10,d1
00013A7E B240                       		cmp.w	d0,d1
00013A80 6400                       		bcc.s	loc_12998
00013A82 0641 0020                  		addi.w	#$20,d1
00013A86 B240                       		cmp.w	d0,d1
00013A88 6500                       		bcs.s	loc_12998
00013A8A 3029 000C                  		move.w	$C(a1),d0
00013A8E 3228 000C                  		move.w	$C(a0),d1
00013A92 B240                       		cmp.w	d0,d1
00013A94 6400                       		bcc.s	loc_12998
00013A96 0641 0010                  		addi.w	#$10,d1
00013A9A B240                       		cmp.w	d0,d1
00013A9C 6500                       		bcs.s	loc_12998
00013A9E 7001                       		moveq	#1,d0
00013AA0 4E75                       		rts	
00013AA2                            ; ===========================================================================
00013AA2                            
00013AA2                            loc_12998:
00013AA2 7000                       		moveq	#0,d0
00013AA4 4E75                       		rts	
00013AA6                            ; ===========================================================================
00013AA6                            Ani_obj64:
00013AA6                            	include "_anim\obj64.asm"
00013AA6                            ; ---------------------------------------------------------------------------
00013AA6                            ; Animation script - bubbles (LZ)
00013AA6                            ; ---------------------------------------------------------------------------
00013AA6 0000                       		dc.w byte_129AA-Ani_obj64
00013AA8 0000                       		dc.w byte_129B0-Ani_obj64
00013AAA 0000                       		dc.w byte_129B6-Ani_obj64
00013AAC 0000                       		dc.w byte_129BE-Ani_obj64
00013AAE 0000                       		dc.w byte_129BE-Ani_obj64
00013AB0 0000                       		dc.w byte_129C0-Ani_obj64
00013AB2 0000                       		dc.w byte_129C6-Ani_obj64
00013AB4 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00013ABA 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
00013AC0 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00013AC8 04FC                       byte_129BE:	dc.b 4,	$FC
00013ACA 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
00013AD0 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00013AD6 00                         		even
00013AD6 00                         		even
00013AD6                            
00013AD6                            ; ---------------------------------------------------------------------------
00013AD6                            ; Sprite mappings - bubbles (LZ)
00013AD6                            ; ---------------------------------------------------------------------------
00013AD6                            Map_obj64:
00013AD6                            	include "_maps\obj64.asm"
00013AD6                            ; ---------------------------------------------------------------------------
00013AD6                            ; Sprite mappings - bubbles (LZ)
00013AD6                            ; ---------------------------------------------------------------------------
00013AD6 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00013ADA 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
00013ADE 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00013AE2 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00013AE6 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00013AEA 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
00013AEE 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00013AF2 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00013AF6 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00013AFA 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
00013AFE 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00013B02 0000                       		dc.w byte_12A9C-Map_obj64
00013B04 01                         byte_129FA:	dc.b 1
00013B05 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00013B0A 01                         byte_12A00:	dc.b 1
00013B0B FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
00013B10 01                         byte_12A06:	dc.b 1
00013B11 FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00013B16 01                         byte_12A0C:	dc.b 1
00013B17 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
00013B1C 01                         byte_12A12:	dc.b 1
00013B1D F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00013B22 01                         byte_12A18:	dc.b 1
00013B23 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00013B28 01                         byte_12A1E:	dc.b 1
00013B29 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
00013B2E 04                         byte_12A24:	dc.b 4
00013B2F F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00013B34 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00013B39 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
00013B3E 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
00013B43 04                         byte_12A39:	dc.b 4
00013B44 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
00013B49 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
00013B4E 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
00013B53 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
00013B58 01                         byte_12A4E:	dc.b 1
00013B59 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
00013B5E 01                         byte_12A54:	dc.b 1
00013B5F F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
00013B64 01                         byte_12A5A:	dc.b 1
00013B65 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
00013B6A 01                         byte_12A60:	dc.b 1
00013B6B F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
00013B70 01                         byte_12A66:	dc.b 1
00013B71 F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
00013B76 01                         byte_12A6C:	dc.b 1
00013B77 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
00013B7C 01                         byte_12A72:	dc.b 1
00013B7D F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
00013B82 01                         byte_12A78:	dc.b 1
00013B83 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
00013B88 01                         byte_12A7E:	dc.b 1
00013B89 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
00013B8E 01                         byte_12A84:	dc.b 1
00013B8F F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
00013B94 01                         byte_12A8A:	dc.b 1
00013B95 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
00013B9A 01                         byte_12A90:	dc.b 1
00013B9B F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
00013BA0 01                         byte_12A96:	dc.b 1
00013BA1 F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00013BA6 00                         byte_12A9C:	dc.b 0
00013BA8 00                         		even
00013BA8 00                         		even
00013BA8                            
00013BA8                            ; ===========================================================================
00013BA8                            ; ---------------------------------------------------------------------------
00013BA8                            ; Object 65 - waterfalls (LZ)
00013BA8                            ; ---------------------------------------------------------------------------
00013BA8                            
00013BA8                            Obj65:					; XREF: Obj_Index
00013BA8 7000                       		moveq	#0,d0
00013BAA 1028 0024                  		move.b	$24(a0),d0
00013BAE 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00013BB2 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00013BB6                            ; ===========================================================================
00013BB6 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00013BB8 0000                       		dc.w Obj65_Animate-Obj65_Index
00013BBA 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00013BBC 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00013BBE 0000                       		dc.w loc_12B36-Obj65_Index
00013BC0                            ; ===========================================================================
00013BC0                            
00013BC0                            Obj65_Main:				; XREF: Obj65_Index
00013BC0 5828 0024                  		addq.b	#4,$24(a0)
00013BC4 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00013BCC 317C 4259 0002             		move.w	#$4259,2(a0)
00013BD2 0028 0004 0001             		ori.b	#4,1(a0)
00013BD8 117C 0018 0019             		move.b	#$18,$19(a0)
00013BDE 117C 0001 0018             		move.b	#1,$18(a0)
00013BE4 1028 0028                  		move.b	$28(a0),d0	; get object type
00013BE8 6A00                       		bpl.s	loc_12AE6
00013BEA 08E8 0007 0002             		bset	#7,2(a0)
00013BF0                            
00013BF0                            loc_12AE6:
00013BF0 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00013BF4 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00013BF8 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00013BFC 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00013BFE 4228 0018                  		clr.b	$18(a0)
00013C02 5528 0024                  		subq.b	#2,$24(a0)
00013C06 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00013C0C 6700                       		beq.s	loc_12B0A	; if not, branch
00013C0E 117C 0006 0024             		move.b	#6,$24(a0)
00013C14                            
00013C14                            loc_12B0A:
00013C14 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00013C1A 6700                       		beq.s	Obj65_Animate	; if not, branch
00013C1C 117C 0008 0024             		move.b	#8,$24(a0)
00013C22                            
00013C22                            Obj65_Animate:				; XREF: Obj65_Index
00013C22 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00013C28 4EB9 0000 B790             		jsr	AnimateSprite
00013C2E                            
00013C2E                            Obj65_ChkDel:				; XREF: Obj65_Index
00013C2E 6000 CBBA                  		bra.w	MarkObjGone
00013C32                            ; ===========================================================================
00013C32                            
00013C32                            Obj65_FixHeight:			; XREF: Obj65_Index
00013C32 3038 F646                  		move.w	($FFFFF646).w,d0
00013C36 0440 0010                  		subi.w	#$10,d0
00013C3A 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00013C3E 60E2                       		bra.s	Obj65_Animate
00013C40                            ; ===========================================================================
00013C40                            
00013C40                            loc_12B36:				; XREF: Obj65_Index
00013C40 08A8 0007 0002             		bclr	#7,2(a0)
00013C46 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00013C4C 6600                       		bne.s	Obj65_Animate2
00013C4E 08E8 0007 0002             		bset	#7,2(a0)
00013C54                            
00013C54                            Obj65_Animate2:
00013C54 60CC                       		bra.s	Obj65_Animate
00013C56                            ; ===========================================================================
00013C56                            Ani_obj65:
00013C56                            	include "_anim\obj65.asm"
00013C56                            ; ---------------------------------------------------------------------------
00013C56                            ; Animation script - waterfall (LZ)
00013C56                            ; ---------------------------------------------------------------------------
00013C56 0000                       		dc.w byte_12B4E-Ani_obj65
00013C58 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00013C5E 00                         		even
00013C5E 00                         		even
00013C5E                            
00013C5E                            ; ---------------------------------------------------------------------------
00013C5E                            ; Sprite mappings - waterfalls (LZ)
00013C5E                            ; ---------------------------------------------------------------------------
00013C5E                            Map_obj65:
00013C5E                            	include "_maps\obj65.asm"
00013C5E                            ; ---------------------------------------------------------------------------
00013C5E                            ; Sprite mappings - waterfalls (LZ)
00013C5E                            ; ---------------------------------------------------------------------------
00013C5E 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00013C62 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00013C66 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00013C6A 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00013C6E 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00013C72 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00013C76 01                         byte_12B6C:	dc.b 1
00013C77 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00013C7C 02                         byte_12B72:	dc.b 2
00013C7D F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00013C82 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00013C87 02                         byte_12B7D:	dc.b 2
00013C88 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013C8D 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013C92 01                         byte_12B88:	dc.b 1
00013C93 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00013C98 02                         byte_12B8E:	dc.b 2
00013C99 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00013C9E 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00013CA3 01                         byte_12B99:	dc.b 1
00013CA4 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00013CA9 01                         byte_12B9F:	dc.b 1
00013CAA F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00013CAF 01                         byte_12BA5:	dc.b 1
00013CB0 F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00013CB5 02                         byte_12BAB:	dc.b 2
00013CB6 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00013CBB 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00013CC0 02                         byte_12BB6:	dc.b 2
00013CC1 F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00013CC6 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00013CCB 02                         byte_12BC1:	dc.b 2
00013CCC F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00013CD1 F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00013CD6 02                         byte_12BCC:	dc.b 2
00013CD7 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00013CDC F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00013CE2 00                         		even
00013CE2 00                         		even
00013CE2                            
00013CE2                            ; ===========================================================================
00013CE2                            ; ---------------------------------------------------------------------------
00013CE2                            ; Object 01 - Sonic
00013CE2                            ; ---------------------------------------------------------------------------
00013CE2                            
00013CE2                            Obj01:					; XREF: Obj_Index
00013CE2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00013CE6 6700                       		beq.s	Obj01_Normal	; if not, branch
00013CE8 4EF9 0000 0000             		jmp	DebugMode
00013CEE                            ; ===========================================================================
00013CEE                            
00013CEE                            Obj01_Normal:
00013CEE 7000                       		moveq	#0,d0
00013CF0 1028 0024                  		move.b	$24(a0),d0
00013CF4 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00013CF8 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00013CFC                            ; ===========================================================================
00013CFC 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00013CFE 0000                       		dc.w Obj01_Control-Obj01_Index
00013D00 0000                       		dc.w Obj01_Hurt-Obj01_Index
00013D02 0000                       		dc.w Obj01_Death-Obj01_Index
00013D04 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00013D06                            ; ===========================================================================
00013D06                            
00013D06                            Player_Maps:
00013D06 0000 0000                  	dc.l	Map_Sonic
00013D0A 0000 0000                  	dc.l	Map_Sonic ; gronic
00013D0E 0000 0000                  	dc.l	Map_Sonic ; anakama
00013D12 0000 0000                  	dc.l	Map_Sonic ; LimitedSonic
00013D16                            	; insert player mapping here
00013D16                            	
00013D16                            Obj01_Main:				; XREF: Obj01_Index
00013D16 5428 0024                  		addq.b	#2,$24(a0)
00013D1A 117C 0013 0016             		move.b	#$13,$16(a0)
00013D20 117C 0009 0017             		move.b	#9,$17(a0)
00013D26                            		
00013D26 7000                       		moveq	#0,d0
00013D28 1038 FFE8                  		move.b	(v_character),d0
00013D2C E548                       		lsl.w	#2,d0
00013D2E 43FA FFD6                  		lea 	Player_Maps(pc),a1
00013D32 2171 0000 0004             		move.l	(a1,d0.w),4(a0)	; load Map patterns
00013D38                            		
00013D38 317C 0780 0002             		move.w	#$780,2(a0)
00013D3E 117C 0002 0018             		move.b	#2,$18(a0)
00013D44 117C 0018 0019             		move.b	#$18,$19(a0)
00013D4A 117C 0004 0001             		move.b	#4,1(a0)
00013D50 31FC 0FFF F760             		move.w	#$FFF,($FFFFF760).w ; Sonic's top speed
00013D56 31FC 000F F762             		move.w	#$F,($FFFFF762).w ; Sonic's acceleration
00013D5C 31FC 0AAA F764             		move.w	#$AAA,($FFFFF764).w ; Sonic's deceleration
00013D62                            
00013D62                            Obj01_Control:				; XREF: Obj01_Index
00013D62 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00013D66 6700                       		beq.s	loc_12C58	; if not, branch
00013D68 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00013D6E 6700                       		beq.s	loc_12C58	; if not, branch
00013D70 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00013D76 4238 F7CC                  		clr.b	($FFFFF7CC).w
00013D7A 4E75                       		rts	
00013D7C                            ; ===========================================================================
00013D7C                            
00013D7C                            loc_12C58:
00013D7C 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00013D80 6600                       		bne.s	loc_12C64	; if yes, branch
00013D82 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00013D88                            
00013D88                            loc_12C64:
00013D88 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00013D8E 6600                       		bne.s	loc_12C7E	; if yes, branch
00013D90 7000                       		moveq	#0,d0
00013D92 1028 0022                  		move.b	$22(a0),d0
00013D96 0240 0006                  		andi.w	#6,d0
00013D9A 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00013D9E 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00013DA2                            
00013DA2                            loc_12C7E:
00013DA2 6100                       		bsr.s	Sonic_Display
00013DA4 6100 0000                  		bsr.w	Sonic_RecordPos
00013DA8 6100 0000                  		bsr.w	Sonic_Water
00013DAC 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00013DB2 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00013DB8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013DBC 6700                       		beq.s	loc_12CA6
00013DBE 4A28 001C                  		tst.b	$1C(a0)
00013DC2 6600                       		bne.s	loc_12CA6
00013DC4 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00013DCA                            
00013DCA                            loc_12CA6:
00013DCA 6100 0000                  		bsr.w	Sonic_Animate
00013DCE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00013DD2 6B00                       		bmi.s	loc_12CB6
00013DD4 4EB9 0000 0000             		jsr	TouchResponse
00013DDA                            
00013DDA                            loc_12CB6:
00013DDA 6100 0000                  		bsr.w	Sonic_Loops
00013DDE 6100 0000                  		bsr.w	LoadSonicDynPLC
00013DE2 4E75                       		rts	
00013DE4                            ; ===========================================================================
00013DE4 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00013DE6 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00013DE8 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00013DEA 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            ; Music	to play	after invincibility wears off
00013DEC                            ; ---------------------------------------------------------------------------
00013DEC                            ; ===========================================================================
00013DEC                            
00013DEC                            Sonic_Display:				; XREF: loc_12C7E
00013DEC 3028 0030                  		move.w	$30(a0),d0
00013DF0 6700                       		beq.s	Obj01_Display
00013DF2 5368 0030                  		subq.w	#1,$30(a0)
00013DF6 E648                       		lsr.w	#3,d0
00013DF8 6400                       		bcc.s	Obj01_ChkInvin
00013DFA                            
00013DFA                            Obj01_Display:
00013DFA 4EBA A946                  		jsr	DisplaySprite
00013DFE                            
00013DFE                            ; Second part of the NineKode. Play different music on different acts - after invincibility wears off
00013DFE                             
00013DFE                            Obj01_ChkInvin:
00013DFE 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00013E02 6700 0000                  		beq.w	Obj01_ChkShoes	; if not, branch	; change to beq.w
00013E06 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00013E0A 6700 0000                  		beq.w	Obj01_ChkShoes	; if no	time remains, branch	; change to beq.w
00013E0E 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00013E12 6600 0000                  		bne.w	Obj01_ChkShoes	; change to bne.w
00013E16 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00013E1A 6600 0000                  		bne.w	Obj01_RmvInvin	; change to bne.w
00013E1E 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013E24 6500 0000                  		bcs.w	Obj01_RmvInvin	; change to bcs.w
00013E28 7000                       		moveq	#0,d0
00013E2A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00013E2E                             
00013E2E 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
00013E34 6600                       		bne.s	Obj01_GetBgm2	; if not, branch
00013E36 43F9 0000 4474             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
00013E3C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E3E                             
00013E3E                            Obj01_GetBgm2:
00013E3E 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
00013E44 6600                       		bne.s	Obj01_GetBgm3	; if not, branch
00013E46 43F9 0000 447C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
00013E4C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E4E                             
00013E4E                            Obj01_GetBgm3:
00013E4E 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
00013E54 6600                       		bne.s	Obj01_GetBgm4	; if not, branch
00013E56 43F9 0000 4484             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 3
00013E5C 6000                       		bra.s	Obj01_PlayMusic	; go to PlayMusic
00013E5E                             
00013E5E                            Obj01_GetBgm4:
00013E5E 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
00013E64 6600                       		bne.s	Obj01_PlayMusic	; if not, branch
00013E66 43F9 0000 448C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
00013E6C                             
00013E6C                            Obj01_PlayMusic:
00013E6C 1031 0000                  		move.b	(a1,d0.w),d0
00013E70 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play normal music
00013E76                             
00013E76                            ; NineKode ends here.
00013E76                            
00013E76                            Obj01_RmvInvin:
00013E76 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00013E7C                            
00013E7C                            Obj01_ChkShoes:
00013E7C 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00013E80 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00013E82 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00013E86 6700                       		beq.s	Obj01_ExitChk
00013E88 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00013E8C 6600                       		bne.s	Obj01_ExitChk
00013E8E 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013E94 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013E9A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013EA0 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00013EA6 303C 00E3                  		move.w	#$E3,d0
00013EAA 4EF9 0000 1C6E             		jmp	(PlaySound).l	; run music at normal speed
00013EB0                            ; ===========================================================================
00013EB0                            
00013EB0                            Obj01_ExitChk:
00013EB0 4E75                       		rts	
00013EB2                            
00013EB2                            ; ---------------------------------------------------------------------------
00013EB2                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00013EB2                            ; ---------------------------------------------------------------------------
00013EB2                            
00013EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013EB2                            
00013EB2                            
00013EB2                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00013EB2 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00013EB6 43F8 CB00                  		lea	($FFFFCB00).w,a1
00013EBA 43F1 0000                  		lea	(a1,d0.w),a1
00013EBE 32E8 0008                  		move.w	8(a0),(a1)+
00013EC2 32E8 000C                  		move.w	$C(a0),(a1)+
00013EC6 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00013ECA 4E75                       		rts	
00013ECC                            ; End of function Sonic_RecordPos
00013ECC                            
00013ECC                            ; ---------------------------------------------------------------------------
00013ECC                            ; Subroutine for Sonic when he's underwater
00013ECC                            ; ---------------------------------------------------------------------------
00013ECC                            
00013ECC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013ECC                            
00013ECC                            
00013ECC                            Sonic_Water:				; XREF: loc_12C7E
00013ECC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00013ED2 6700                       		beq.s	Obj01_InWater	; if yes, branch
00013ED4                            
00013ED4                            locret_12D80:
00013ED4 4E75                       		rts	
00013ED6                            ; ===========================================================================
00013ED6                            
00013ED6                            Obj01_InWater:
00013ED6 3038 F646                  		move.w	($FFFFF646).w,d0
00013EDA B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00013EDE 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00013EE0 08E8 0006 0022             		bset	#6,$22(a0)
00013EE6 66EC                       		bne.s	locret_12D80
00013EE8 6100 0000                  		bsr.w	ResumeMusic
00013EEC 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00013EF2 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00013EF8 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00013EFE 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00013F04 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00013F0A E0E8 0010                  		asr	$10(a0)
00013F0E E0E8 0012                  		asr	$12(a0)
00013F12 E0E8 0012                  		asr	$12(a0)
00013F16 67BC                       		beq.s	locret_12D80
00013F18 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013F1E 303C 00AA                  		move.w	#$AA,d0
00013F22 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play splash sound
00013F28                            ; ===========================================================================
00013F28                            
00013F28                            Obj01_OutWater:
00013F28 08A8 0006 0022             		bclr	#6,$22(a0)
00013F2E 67A4                       		beq.s	locret_12D80
00013F30 6100 0000                  		bsr.w	ResumeMusic
00013F34 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00013F3A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00013F40 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00013F46 E1E8 0012                  		asl	$12(a0)
00013F4A 6700 FF88                  		beq.w	locret_12D80
00013F4E 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00013F54 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00013F5A 6E00                       		bgt.s	loc_12E0E
00013F5C 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00013F62                            
00013F62                            loc_12E0E:
00013F62 303C 00AA                  		move.w	#$AA,d0
00013F66 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play splash sound
00013F6C                            ; End of function Sonic_Water
00013F6C                            
00013F6C                            ; ===========================================================================
00013F6C                            ; ---------------------------------------------------------------------------
00013F6C                            ; Modes	for controlling	Sonic
00013F6C                            ; ---------------------------------------------------------------------------
00013F6C                            
00013F6C                            Obj01_MdNormal:				; XREF: Obj01_Modes
00013F6C 6100 0000                  		bsr.w	Sonic_Jump
00013F70 6100 0000                  		bsr.w	Sonic_SlopeResist
00013F74 6100 0000                  		bsr.w	Sonic_Move
00013F78 6100 0000                  		bsr.w	Sonic_Roll
00013F7C 6100 0000                  		bsr.w	Sonic_LevelBound
00013F80 4EBA A79A                  		jsr	SpeedToPos
00013F84 6100 0000                  		bsr.w	Sonic_AnglePos
00013F88 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013F8C 4E75                       		rts	
00013F8E                            ; ===========================================================================
00013F8E                            
00013F8E                            Obj01_MdJump:				; XREF: Obj01_Modes
00013F8E 6100 0000                  		bsr.w	Sonic_JumpHeight
00013F92 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013F96 6100 0000                  		bsr.w	Sonic_LevelBound
00013F9A 4EBA A70E                  		jsr	ObjectFall
00013F9E 0828 0006 0022             		btst	#6,$22(a0)
00013FA4 6700                       		beq.s	loc_12E5C
00013FA6 0468 0028 0012             		subi.w	#$28,$12(a0)
00013FAC                            
00013FAC                            loc_12E5C:
00013FAC 6100 0000                  		bsr.w	Sonic_JumpAngle
00013FB0 6100 0000                  		bsr.w	Sonic_Floor
00013FB4 4E75                       		rts	
00013FB6                            ; ===========================================================================
00013FB6                            
00013FB6                            Obj01_MdRoll:				; XREF: Obj01_Modes
00013FB6 6100 0000                  		bsr.w	Sonic_Jump
00013FBA 6100 0000                  		bsr.w	Sonic_RollRepel
00013FBE 6100 0000                  		bsr.w	Sonic_RollSpeed
00013FC2 6100 0000                  		bsr.w	Sonic_LevelBound
00013FC6 4EBA A754                  		jsr	SpeedToPos
00013FCA 6100 0000                  		bsr.w	Sonic_AnglePos
00013FCE 6100 0000                  		bsr.w	Sonic_SlopeRepel
00013FD2 4E75                       		rts	
00013FD4                            ; ===========================================================================
00013FD4                            
00013FD4                            Obj01_MdJump2:				; XREF: Obj01_Modes
00013FD4 6100 0000                  		bsr.w	Sonic_JumpHeight
00013FD8 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00013FDC 6100 0000                  		bsr.w	Sonic_LevelBound
00013FE0 6100 0000                  		bsr.w	Sonic_AirUnroll
00013FE4 4EBA A6C4                  		jsr	ObjectFall
00013FE8 0828 0006 0022             		btst	#6,$22(a0)
00013FEE 6700                       		beq.s	loc_12EA6
00013FF0 0468 0028 0012             		subi.w	#$28,$12(a0)
00013FF6                            
00013FF6                            loc_12EA6:
00013FF6 6100 0000                  		bsr.w	Sonic_JumpAngle
00013FFA 6100 0000                  		bsr.w	Sonic_Floor
00013FFE 4E75                       		rts	
00014000                            ; ---------------------------------------------------------------------------
00014000                            ; Subroutine to	make Sonic walk/run
00014000                            ; ---------------------------------------------------------------------------
00014000                            
00014000                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014000                            
00014000                            
00014000                            Sonic_Move:				; XREF: Obj01_MdNormal
00014000 3C38 F760                  		move.w	($FFFFF760).w,d6
00014004 3A38 F762                  		move.w	($FFFFF762).w,d5
00014008 3838 F764                  		move.w	($FFFFF764).w,d4
0001400C 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014010 6600 0000                  		bne.w	loc_12FEE
00014014 4A68 003E                  		tst.w	$3E(a0)
00014018 6600 0000                  		bne.w	Obj01_ResetScr
0001401C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014022 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00014024 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001402A 6600                       		bne.s	Obj01_MoveRight	; GMZ: If yes, branch
0001402C 6100 0000                  		bsr.w	Sonic_MoveLeft
00014030                            
00014030                            Obj01_NotLeft:
00014030 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014036 6700                       		beq.s	Obj01_NotRight	; if not, branch
00014038 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001403E 6700                       		beq.s	Obj01_MoveRight	; GMZ: If not, branch
00014040 6100 0000                  		bsr.w	Sonic_MoveLeft
00014044 6000                       		bra.s	Obj01_NotRight
00014046                            
00014046                            Obj01_MoveRight:
00014046 6100 0000                  		bsr.w	Sonic_MoveRight
0001404A                            
0001404A                            Obj01_NotRight:
0001404A 1028 0026                  		move.b	$26(a0),d0
0001404E 0600 0020                  		addi.b	#$20,d0
00014052 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00014056 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
0001405A 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001405E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00014062 08A8 0005 0022             		bclr	#5,$22(a0)
00014068 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
0001406E 0828 0003 0022             		btst	#3,$22(a0)
00014074 6700                       		beq.s	Sonic_Balance
00014076 7000                       		moveq	#0,d0
00014078 1028 003D                  		move.b	$3D(a0),d0
0001407C ED48                       		lsl.w	#6,d0
0001407E 43F8 D000                  		lea	($FFFFD000).w,a1
00014082 43F1 0000                  		lea	(a1,d0.w),a1
00014086 4A29 0022                  		tst.b	$22(a1)
0001408A 6B00                       		bmi.s	Sonic_LookUp
0001408C 7200                       		moveq	#0,d1
0001408E 1229 0019                  		move.b	$19(a1),d1
00014092 3401                       		move.w	d1,d2
00014094 D442                       		add.w	d2,d2
00014096 5942                       		subq.w	#4,d2
00014098 D268 0008                  		add.w	8(a0),d1
0001409C 9269 0008                  		sub.w	8(a1),d1
000140A0 0C41 0004                  		cmpi.w	#4,d1
000140A4 6D00                       		blt.s	loc_12F6A
000140A6 B242                       		cmp.w	d2,d1
000140A8 6C00                       		bge.s	loc_12F5A
000140AA 6000                       		bra.s	Sonic_LookUp
000140AC                            ; ===========================================================================
000140AC                            
000140AC                            Sonic_Balance:
000140AC 4EB9 0000 0000             		jsr	ObjHitFloor
000140B2 0C41 000C                  		cmpi.w	#$C,d1
000140B6 6D00                       		blt.s	Sonic_LookUp
000140B8 0C28 0003 0036             		cmpi.b	#3,$36(a0)
000140BE 6600                       		bne.s	loc_12F62
000140C0                            
000140C0                            loc_12F5A:
000140C0 08A8 0000 0022             		bclr	#0,$22(a0)
000140C6 6000                       		bra.s	loc_12F70
000140C8                            ; ===========================================================================
000140C8                            
000140C8                            loc_12F62:
000140C8 0C28 0003 0037             		cmpi.b	#3,$37(a0)
000140CE 6600                       		bne.s	Sonic_LookUp
000140D0                            
000140D0                            loc_12F6A:
000140D0 08E8 0000 0022             		bset	#0,$22(a0)
000140D6                            
000140D6                            loc_12F70:
000140D6 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
000140DC 6000                       		bra.s	Obj01_ResetScr
000140DE                            ; ===========================================================================
000140DE                            
000140DE                            Sonic_LookUp:
000140DE 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
000140E4 6700                       		beq.s	Sonic_Duck	; if not, branch
000140E6 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
000140EC 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
000140F2 6700                       		beq.s	loc_12FC2
000140F4 5478 F73E                  		addq.w	#2,($FFFFF73E).w
000140F8 6000                       		bra.s	loc_12FC2
000140FA                            ; ===========================================================================
000140FA                            
000140FA                            Sonic_Duck:
000140FA 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014100 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00014102 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00014108 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
0001410E 6700                       		beq.s	loc_12FC2
00014110 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014114 6000                       		bra.s	loc_12FC2
00014116                            ; ===========================================================================
00014116                            
00014116                            Obj01_ResetScr:
00014116 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
0001411C 6700                       		beq.s	loc_12FC2	; if yes, branch
0001411E 6400                       		bcc.s	loc_12FBE
00014120 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00014124                            
00014124                            loc_12FBE:
00014124 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00014128                            
00014128                            loc_12FC2:
00014128 1038 F602                  		move.b	($FFFFF602).w,d0
0001412C 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00014130 6600                       		bne.s	loc_12FEE	; if yes, branch
00014132 3028 0014                  		move.w	$14(a0),d0
00014136 6700                       		beq.s	loc_12FEE
00014138 6B00                       		bmi.s	loc_12FE2
0001413A 9045                       		sub.w	d5,d0
0001413C 6400                       		bcc.s	loc_12FDC
0001413E 303C 0000                  		move.w	#0,d0
00014142                            
00014142                            loc_12FDC:
00014142 3140 0014                  		move.w	d0,$14(a0)
00014146 6000                       		bra.s	loc_12FEE
00014148                            ; ===========================================================================
00014148                            
00014148                            loc_12FE2:
00014148 D045                       		add.w	d5,d0
0001414A 6400                       		bcc.s	loc_12FEA
0001414C 303C 0000                  		move.w	#0,d0
00014150                            
00014150                            loc_12FEA:
00014150 3140 0014                  		move.w	d0,$14(a0)
00014154                            
00014154                            loc_12FEE:
00014154 1028 0026                  		move.b	$26(a0),d0
00014158 4EB9 0000 3416             		jsr	(CalcSine).l
0001415E C3E8 0014                  		muls.w	$14(a0),d1
00014162 E081                       		asr.l	#8,d1
00014164 3141 0010                  		move.w	d1,$10(a0)
00014168 C1E8 0014                  		muls.w	$14(a0),d0
0001416C E080                       		asr.l	#8,d0
0001416E 3140 0012                  		move.w	d0,$12(a0)
00014172                            
00014172                            loc_1300C:
00014172 1028 0026                  		move.b	$26(a0),d0
00014176 0600 0040                  		addi.b	#$40,d0
0001417A 6B00                       		bmi.s	locret_1307C
0001417C 123C 0040                  		move.b	#$40,d1
00014180 4A68 0014                  		tst.w	$14(a0)
00014184 6700                       		beq.s	locret_1307C
00014186 6B00                       		bmi.s	loc_13024
00014188 4441                       		neg.w	d1
0001418A                            
0001418A                            loc_13024:
0001418A 1028 0026                  		move.b	$26(a0),d0
0001418E D001                       		add.b	d1,d0
00014190 3F00                       		move.w	d0,-(sp)
00014192 6100 0000                  		bsr.w	Sonic_WalkSpeed
00014196 301F                       		move.w	(sp)+,d0
00014198 4A41                       		tst.w	d1
0001419A 6A00                       		bpl.s	locret_1307C
0001419C E141                       		asl.w	#8,d1
0001419E 0600 0020                  		addi.b	#$20,d0
000141A2 0200 00C0                  		andi.b	#$C0,d0
000141A6 6700                       		beq.s	loc_13078
000141A8 0C00 0040                  		cmpi.b	#$40,d0
000141AC 6700                       		beq.s	loc_13066
000141AE 0C00 0080                  		cmpi.b	#$80,d0
000141B2 6700                       		beq.s	loc_13060
000141B4 D368 0010                  		add.w	d1,$10(a0)
000141B8 08E8 0005 0022             		bset	#5,$22(a0)
000141BE 317C 0000 0014             		move.w	#0,$14(a0)
000141C4 4E75                       		rts	
000141C6                            ; ===========================================================================
000141C6                            
000141C6                            loc_13060:
000141C6 9368 0012                  		sub.w	d1,$12(a0)
000141CA 4E75                       		rts	
000141CC                            ; ===========================================================================
000141CC                            
000141CC                            loc_13066:
000141CC 9368 0010                  		sub.w	d1,$10(a0)
000141D0 08E8 0005 0022             		bset	#5,$22(a0)
000141D6 317C 0000 0014             		move.w	#0,$14(a0)
000141DC 4E75                       		rts	
000141DE                            ; ===========================================================================
000141DE                            
000141DE                            loc_13078:
000141DE D368 0012                  		add.w	d1,$12(a0)
000141E2                            
000141E2                            locret_1307C:
000141E2 4E75                       		rts	
000141E4                            ; End of function Sonic_Move
000141E4                            
000141E4                            
000141E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000141E4                            
000141E4                            
000141E4                            Sonic_MoveLeft:				; XREF: Sonic_Move
000141E4 3028 0014                  		move.w	$14(a0),d0
000141E8 6700                       		beq.s	loc_13086
000141EA 6A00                       		bpl.s	loc_130B2
000141EC                            
000141EC                            loc_13086:
000141EC 08E8 0000 0022             		bset	#0,$22(a0)
000141F2 6600                       		bne.s	loc_1309A
000141F4 08A8 0005 0022             		bclr	#5,$22(a0)
000141FA 117C 0001 001D             		move.b	#1,$1D(a0)
00014200                            
00014200                            loc_1309A:
00014200 9045                       		sub.w	d5,d0
00014202 3206                       		move.w	d6,d1
00014204 4441                       		neg.w	d1
00014206 B041                       		cmp.w	d1,d0
00014208 6E00                       		bgt.s	loc_130A6
0001420A 3001                       		move.w	d1,d0
0001420C                            
0001420C                            loc_130A6:
0001420C 3140 0014                  		move.w	d0,$14(a0)
00014210 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00014216 4E75                       		rts	
00014218                            ; ===========================================================================
00014218                            
00014218                            loc_130B2:				; XREF: Sonic_MoveLeft
00014218 9044                       		sub.w	d4,d0
0001421A 6400                       		bcc.s	loc_130BA
0001421C 303C FF80                  		move.w	#-$80,d0
00014220                            
00014220                            loc_130BA:
00014220 3140 0014                  		move.w	d0,$14(a0)
00014224 1028 0026                  		move.b	$26(a0),d0
00014228 0600 0020                  		addi.b	#$20,d0
0001422C 0200 00C0                  		andi.b	#$C0,d0
00014230 6600                       		bne.s	locret_130E8
00014232 0C40 0400                  		cmpi.w	#$400,d0
00014236 6D00                       		blt.s	locret_130E8
00014238 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001423E 08A8 0000 0022             		bclr	#0,$22(a0)
00014244 303C 00A4                  		move.w	#$A4,d0
00014248 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play stopping sound
0001424E                            
0001424E                            locret_130E8:
0001424E 4E75                       		rts	
00014250                            ; End of function Sonic_MoveLeft
00014250                            
00014250                            
00014250                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014250                            
00014250                            
00014250                            Sonic_MoveRight:			; XREF: Sonic_Move
00014250 3028 0014                  		move.w	$14(a0),d0
00014254 6B00                       		bmi.s	loc_13118
00014256 08A8 0000 0022             		bclr	#0,$22(a0)
0001425C 6700                       		beq.s	loc_13104
0001425E 08A8 0005 0022             		bclr	#5,$22(a0)
00014264 117C 0001 001D             		move.b	#1,$1D(a0)
0001426A                            
0001426A                            loc_13104:
0001426A D045                       		add.w	d5,d0
0001426C B046                       		cmp.w	d6,d0
0001426E 6D00                       		blt.s	loc_1310C
00014270 3006                       		move.w	d6,d0
00014272                            
00014272                            loc_1310C:
00014272 3140 0014                  		move.w	d0,$14(a0)
00014276 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001427C 4E75                       		rts	
0001427E                            ; ===========================================================================
0001427E                            
0001427E                            loc_13118:				; XREF: Sonic_MoveRight
0001427E D044                       		add.w	d4,d0
00014280 6400                       		bcc.s	loc_13120
00014282 303C 0080                  		move.w	#$80,d0
00014286                            
00014286                            loc_13120:
00014286 3140 0014                  		move.w	d0,$14(a0)
0001428A 1028 0026                  		move.b	$26(a0),d0
0001428E 0600 0020                  		addi.b	#$20,d0
00014292 0200 00C0                  		andi.b	#$C0,d0
00014296 6600                       		bne.s	locret_1314E
00014298 0C40 FC00                  		cmpi.w	#-$400,d0
0001429C 6E00                       		bgt.s	locret_1314E
0001429E 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
000142A4 08E8 0000 0022             		bset	#0,$22(a0)
000142AA 303C 00A4                  		move.w	#$A4,d0
000142AE 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play stopping sound
000142B4                            
000142B4                            locret_1314E:
000142B4 4E75                       		rts	
000142B6                            ; End of function Sonic_MoveRight
000142B6                            
000142B6                            ; ---------------------------------------------------------------------------
000142B6                            ; Subroutine to	change Sonic's speed as he rolls
000142B6                            ; ---------------------------------------------------------------------------
000142B6                            
000142B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000142B6                            
000142B6                            
000142B6                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000142B6 3C38 F760                  		move.w	($FFFFF760).w,d6
000142BA E346                       		asl.w	#1,d6
000142BC 3A38 F762                  		move.w	($FFFFF762).w,d5
000142C0 E245                       		asr.w	#1,d5
000142C2 3838 F764                  		move.w	($FFFFF764).w,d4
000142C6 E444                       		asr.w	#2,d4
000142C8 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000142CC 6600 0000                  		bne.w	loc_131CC
000142D0 4A68 003E                  		tst.w	$3E(a0)
000142D4 6600                       		bne.s	loc_13188
000142D6 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000142DC 6700                       		beq.s	loc_1317C	; if not, branch
000142DE 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000142E4 6600                       		bne.s	SonicRS_RollRight	; GMZ: If yes, branch
000142E6 6100 0000                  		bsr.w	Sonic_RollLeft
000142EA                            
000142EA                            loc_1317C:
000142EA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000142F0 6700                       		beq.s	loc_13188	; if not, branch
000142F2 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
000142F8 6700                       		beq.s	SonicRS_RollRight	; GMZ: If not, branch
000142FA 6100 0000                  		bsr.w	Sonic_RollLeft
000142FE 6000                       		bra.s	loc_13188
00014300                            
00014300                            SonicRS_RollRight:
00014300 6100 0000                  		bsr.w	Sonic_RollRight
00014304                            
00014304                            loc_13188:
00014304 3028 0014                  		move.w	$14(a0),d0
00014308 6700                       		beq.s	loc_131AA
0001430A 6B00                       		bmi.s	loc_1319E
0001430C 9045                       		sub.w	d5,d0
0001430E 6400                       		bcc.s	loc_13198
00014310 303C 0000                  		move.w	#0,d0
00014314                            
00014314                            loc_13198:
00014314 3140 0014                  		move.w	d0,$14(a0)
00014318 6000                       		bra.s	loc_131AA
0001431A                            ; ===========================================================================
0001431A                            
0001431A                            loc_1319E:				; XREF: Sonic_RollSpeed
0001431A D045                       		add.w	d5,d0
0001431C 6400                       		bcc.s	loc_131A6
0001431E 303C 0000                  		move.w	#0,d0
00014322                            
00014322                            loc_131A6:
00014322 3140 0014                  		move.w	d0,$14(a0)
00014326                            
00014326                            loc_131AA:
00014326 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001432A 6600                       		bne.s	loc_131CC	; if yes, branch
0001432C 08A8 0002 0022             		bclr	#2,$22(a0)
00014332 117C 0013 0016             		move.b	#$13,$16(a0)
00014338 117C 0009 0017             		move.b	#9,$17(a0)
0001433E 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00014344 5B68 000C                  		subq.w	#5,$C(a0)
00014348                            
00014348                            loc_131CC:
00014348 1028 0026                  		move.b	$26(a0),d0
0001434C 4EB9 0000 3416             		jsr	(CalcSine).l
00014352 C1E8 0014                  		muls.w	$14(a0),d0
00014356 E080                       		asr.l	#8,d0
00014358 3140 0012                  		move.w	d0,$12(a0)
0001435C C3E8 0014                  		muls.w	$14(a0),d1
00014360 E081                       		asr.l	#8,d1
00014362 0C41 1000                  		cmpi.w	#$1000,d1
00014366 6F00                       		ble.s	loc_131F0
00014368 323C 1000                  		move.w	#$1000,d1
0001436C                            
0001436C                            loc_131F0:
0001436C 0C41 F000                  		cmpi.w	#-$1000,d1
00014370 6C00                       		bge.s	loc_131FA
00014372 323C F000                  		move.w	#-$1000,d1
00014376                            
00014376                            loc_131FA:
00014376 3141 0010                  		move.w	d1,$10(a0)
0001437A 6000 FDF6                  		bra.w	loc_1300C
0001437E                            ; End of function Sonic_RollSpeed
0001437E                            
0001437E                            
0001437E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001437E                            
0001437E                            
0001437E                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
0001437E 3028 0014                  		move.w	$14(a0),d0
00014382 6700                       		beq.s	loc_1320A
00014384 6A00                       		bpl.s	loc_13218
00014386                            
00014386                            loc_1320A:
00014386 08E8 0000 0022             		bset	#0,$22(a0)
0001438C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00014392 4E75                       		rts	
00014394                            ; ===========================================================================
00014394                            
00014394                            loc_13218:
00014394 9044                       		sub.w	d4,d0
00014396 6400                       		bcc.s	loc_13220
00014398 303C FF80                  		move.w	#-$80,d0
0001439C                            
0001439C                            loc_13220:
0001439C 3140 0014                  		move.w	d0,$14(a0)
000143A0 4E75                       		rts	
000143A2                            ; End of function Sonic_RollLeft
000143A2                            
000143A2                            
000143A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000143A2                            
000143A2                            
000143A2                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
000143A2 3028 0014                  		move.w	$14(a0),d0
000143A6 6B00                       		bmi.s	loc_1323A
000143A8 08A8 0000 0022             		bclr	#0,$22(a0)
000143AE 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000143B4 4E75                       		rts	
000143B6                            ; ===========================================================================
000143B6                            
000143B6                            loc_1323A:
000143B6 D044                       		add.w	d4,d0
000143B8 6400                       		bcc.s	loc_13242
000143BA 303C 0080                  		move.w	#$80,d0
000143BE                            
000143BE                            loc_13242:
000143BE 3140 0014                  		move.w	d0,$14(a0)
000143C2 4E75                       		rts	
000143C4                            ; End of function Sonic_RollRight
000143C4                            
000143C4                            Sonic_AirUnroll:
000143C4                            		
000143C4 4A28 003A                  		tst.b	$3A(a0) ; check jump height control
000143C8 6600                       		bne.s	@timer
000143CA 1038 F605                  		move.b	($FFFFF605).w,d0
000143CE 0200 0070                  		andi.b	#$70,d0 ; is abc being pressed?
000143D2 6700                       		beq.s	@end	; if not, branch
000143D4 08A8 0002 0022             		bclr	#2,$22(a0)
000143DA 117C 0013 0016             		move.b	#$13,$16(a0)
000143E0 117C 0009 0017             		move.b	#9,$17(a0)
000143E6 117C 000E 001C             		move.b	#14,$1C(a0)	; use dunk animation
000143EC 303C 00A5                  		move.w	#$A5,d0
000143F0 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play fart sound
000143F6 2028 0010                  		move.l	$10(a0),d0
000143FA D080                       		add.l	d0,d0
000143FC 2140 0010                  		move.l	d0,$10(a0)
00014400 5B68 000C                  		subq.w	#5,$C(a0)
00014404                            	@end:
00014404 4E75                       		rts
00014406                            	@timer:
00014406 5328 003A                  		subq.b	#1,$3A(a0)
0001440A 4E75                       		rts
0001440C                            
0001440C                            ; ---------------------------------------------------------------------------
0001440C                            ; Subroutine to	change Sonic's direction while jumping
0001440C                            ; ---------------------------------------------------------------------------
0001440C                            
0001440C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001440C                            
0001440C                            
0001440C                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
0001440C 3C38 F760                  		move.w	($FFFFF760).w,d6
00014410 3A38 F762                  		move.w	($FFFFF762).w,d5
00014414 E345                       		asl.w	#1,d5
00014416 0828 0004 0022             		btst	#4,$22(a0)
0001441C 6600                       		bne.s	Obj01_ResetScr2
0001441E 3028 0010                  		move.w	$10(a0),d0
00014422 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00014428 6700                       		beq.s	loc_13278	; if not, branch
0001442A 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00014430 6600                       		bne.s	SonicCJD_JumpRight	; GMZ: If yes, branch
00014432 6100 0000                  		bsr.w	SonicCJD_JumpLeft
00014436 6E00                       		bgt.s	loc_13278
00014438 3001                       		move.w	d1,d0
0001443A                            
0001443A                            loc_13278:
0001443A 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00014440 6700                       		beq.s	Obj01_JumpMove	; if not, branch
00014442 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
00014448 6700                       		beq.s	SonicCJD_JumpRight	; GMZ: If not, branch
0001444A 6100 0000                  		bsr.w	SonicCJD_JumpLeft
0001444E 6E00                       		bgt.s	Obj01_JumpMove
00014450 3001                       		move.w	d1,d0
00014452 6000                       		bra.s	Obj01_JumpMove
00014454                            
00014454                            SonicCJD_JumpLeft:
00014454 08E8 0000 0022             		bset	#0,$22(a0)
0001445A 9045                       		sub.w	d5,d0
0001445C 3206                       		move.w	d6,d1
0001445E 4441                       		neg.w	d1
00014460 B041                       		cmp.w	d1,d0
00014462                            		; bgt.s	loc_13278
00014462                            		; move.w	d1,d0
00014462 4E75                       		rts
00014464                            
00014464                            SonicCJD_JumpRight:
00014464 08A8 0000 0022             		bclr	#0,$22(a0)
0001446A D045                       		add.w	d5,d0
0001446C B046                       		cmp.w	d6,d0
0001446E 6D00                       		blt.s	Obj01_JumpMove
00014470 3006                       		move.w	d6,d0
00014472                            
00014472                            Obj01_JumpMove:
00014472 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
00014476                            
00014476                            Obj01_ResetScr2:
00014476 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
0001447C 6700                       		beq.s	loc_132A4	; if yes, branch
0001447E 6400                       		bcc.s	loc_132A0
00014480 5878 F73E                  		addq.w	#4,($FFFFF73E).w
00014484                            
00014484                            loc_132A0:
00014484 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00014488                            
00014488                            loc_132A4:
00014488 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
0001448E 6500                       		bcs.s	locret_132D2	; if yes, branch
00014490 3028 0010                  		move.w	$10(a0),d0
00014494 3200                       		move.w	d0,d1
00014496 EA41                       		asr.w	#5,d1
00014498 6700                       		beq.s	locret_132D2
0001449A 6B00                       		bmi.s	loc_132C6
0001449C 9041                       		sub.w	d1,d0
0001449E 6400                       		bcc.s	loc_132C0
000144A0 303C 0000                  		move.w	#0,d0
000144A4                            
000144A4                            loc_132C0:
000144A4 3140 0010                  		move.w	d0,$10(a0)
000144A8 4E75                       		rts	
000144AA                            ; ===========================================================================
000144AA                            
000144AA                            loc_132C6:
000144AA 9041                       		sub.w	d1,d0
000144AC 6500                       		bcs.s	loc_132CE
000144AE 303C 0000                  		move.w	#0,d0
000144B2                            
000144B2                            loc_132CE:
000144B2 3140 0010                  		move.w	d0,$10(a0)
000144B6                            
000144B6                            locret_132D2:
000144B6 4E75                       		rts	
000144B8                            ; End of function Sonic_ChgJumpDir
000144B8                            
000144B8                            ; ===========================================================================
000144B8                            ; ---------------------------------------------------------------------------
000144B8                            ; Unused subroutine to squash Sonic
000144B8                            ; ---------------------------------------------------------------------------
000144B8 1028 0026                  		move.b	$26(a0),d0
000144BC 0600 0020                  		addi.b	#$20,d0
000144C0 0200 00C0                  		andi.b	#$C0,d0
000144C4 6600                       		bne.s	locret_13302
000144C6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000144CA 4A41                       		tst.w	d1
000144CC 6A00                       		bpl.s	locret_13302
000144CE 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
000144D4 317C 0000 0010             		move.w	#0,$10(a0)
000144DA 317C 0000 0012             		move.w	#0,$12(a0)
000144E0 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
000144E6                            
000144E6                            locret_13302:
000144E6 4E75                       		rts	
000144E8                            ; ---------------------------------------------------------------------------
000144E8                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
000144E8                            ; ---------------------------------------------------------------------------
000144E8                            
000144E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000144E8                            
000144E8                            
000144E8                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
000144E8 2228 0008                  		move.l	8(a0),d1
000144EC 3028 0010                  		move.w	$10(a0),d0
000144F0 48C0                       		ext.l	d0
000144F2 E180                       		asl.l	#8,d0
000144F4 D280                       		add.l	d0,d1
000144F6 4841                       		swap	d1
000144F8 3038 F728                  		move.w	($FFFFF728).w,d0
000144FC 0640 0010                  		addi.w	#$10,d0
00014500 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014502 6200                       		bhi.s	Boundary_Sides	; if yes, branch
00014504 3038 F72A                  		move.w	($FFFFF72A).w,d0
00014508 0640 0128                  		addi.w	#$128,d0
0001450C 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00014510 6600                       		bne.s	loc_13332
00014512 0640 0040                  		addi.w	#$40,d0
00014516                            
00014516                            loc_13332:
00014516 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00014518 6300                       		bls.s	Boundary_Sides	; if yes, branch
0001451A                            
0001451A                            loc_13336:
0001451A 3038 F72E                  		move.w	($FFFFF72E).w,d0
0001451E 0640 00E0                  		addi.w	#$E0,d0
00014522 B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
00014526 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
00014528 4E75                       		rts	
0001452A                            ; ===========================================================================
0001452A                            
0001452A                            Boundary_Bottom:
0001452A 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
00014530                            		; bne.w	KillSonic	; if not, kill Sonic
00014530 6600 0000                  		bne.w	CallKillSonic	; GMZ
00014534 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
0001453A                            		; bcs.w	KillSonic
0001453A 6500 0000                  		bcs.w	CallKillSonic	; GMZ
0001453E 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
00014542 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014548 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
0001454E 4E75                       		rts	
00014550                            
00014550                            CallKillSonic:
00014550 4EF9 0000 0000             		jmp	KillSonic	; GMZ
00014556                            ; ===========================================================================
00014556                            
00014556                            Boundary_Sides:
00014556 3140 0008                  		move.w	d0,8(a0)
0001455A 317C 0000 000A             		move.w	#0,$A(a0)
00014560 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
00014566 317C 0000 0014             		move.w	#0,$14(a0)
0001456C 60AC                       		bra.s	loc_13336
0001456E                            ; End of function Sonic_LevelBound
0001456E                            
0001456E                            ; ---------------------------------------------------------------------------
0001456E                            ; Subroutine allowing Sonic to roll when he's moving
0001456E                            ; ---------------------------------------------------------------------------
0001456E                            
0001456E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001456E                            
0001456E                            
0001456E                            Sonic_Roll:				; XREF: Obj01_MdNormal
0001456E 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00014572 6600                       		bne.s	Obj01_NoRoll
00014574 3028 0014                  		move.w	$14(a0),d0
00014578 6A00                       		bpl.s	loc_13392
0001457A 4440                       		neg.w	d0
0001457C                            
0001457C                            loc_13392:
0001457C 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
00014580 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
00014582 1038 F602                  		move.b	($FFFFF602).w,d0
00014586 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
0001458A 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
0001458C 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00014592 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00014594                            
00014594                            Obj01_NoRoll:
00014594 4E75                       		rts	
00014596                            ; ===========================================================================
00014596                            
00014596                            Obj01_ChkRoll:
00014596 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
0001459C 6700                       		beq.s	Obj01_DoRoll	; if not, branch
0001459E 4E75                       		rts	
000145A0                            ; ===========================================================================
000145A0                            
000145A0                            Obj01_DoRoll:
000145A0 08E8 0002 0022             		bset	#2,$22(a0)
000145A6 117C 000E 0016             		move.b	#$E,$16(a0)
000145AC 117C 0007 0017             		move.b	#7,$17(a0)
000145B2 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
000145B8 5A68 000C                  		addq.w	#5,$C(a0)
000145BC 303C 00BE                  		move.w	#$BE,d0
000145C0 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play rolling sound
000145C6 4A68 0014                  		tst.w	$14(a0)
000145CA 6600                       		bne.s	locret_133E8
000145CC 317C 0200 0014             		move.w	#$200,$14(a0)
000145D2                            
000145D2                            locret_133E8:
000145D2 4E75                       		rts	
000145D4                            ; End of function Sonic_Roll
000145D4                            
000145D4                            ; ---------------------------------------------------------------------------
000145D4                            ; Subroutine allowing Sonic to jump
000145D4                            ; ---------------------------------------------------------------------------
000145D4                            
000145D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000145D4                            
000145D4                            
000145D4                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
000145D4 1038 F603                  		move.b	($FFFFF603).w,d0
000145D8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000145DC 6700 0000                  		beq.w	locret_1348E	; if not, branch
000145E0 7000                       		moveq	#0,d0
000145E2 1028 0026                  		move.b	$26(a0),d0
000145E6 0600 0080                  		addi.b	#$80,d0
000145EA 6100 0000                  		bsr.w	sub_14D48
000145EE 0C41 0006                  		cmpi.w	#6,d1
000145F2 6D00 0000                  		blt.w	locret_1348E
000145F6 343C 0680                  		move.w	#$680,d2
000145FA 0828 0006 0022             		btst	#6,$22(a0)
00014600 6700                       		beq.s	loc_1341C
00014602 343C 0380                  		move.w	#$380,d2
00014606                            
00014606                            loc_1341C:
00014606 7000                       		moveq	#0,d0
00014608 1028 0026                  		move.b	$26(a0),d0
0001460C 0400 0040                  		subi.b	#$40,d0
00014610 4EB9 0000 3416             		jsr	(CalcSine).l
00014616 C3C2                       		muls.w	d2,d1
00014618 E081                       		asr.l	#8,d1
0001461A D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
0001461E C1C2                       		muls.w	d2,d0
00014620 E080                       		asr.l	#8,d0
00014622 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
00014626 08E8 0001 0022             		bset	#1,$22(a0)
0001462C 08A8 0005 0022             		bclr	#5,$22(a0)
00014632 588F                       		addq.l	#4,sp
00014634 117C 0001 003C             		move.b	#1,$3C(a0)
0001463A 4228 0038                  		clr.b	$38(a0)
0001463E 303C 00A0                  		move.w	#$A0,d0
00014642 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play jumping sound
00014648 117C 0013 0016             		move.b	#$13,$16(a0)
0001464E 117C 0009 0017             		move.b	#9,$17(a0)
00014654 0828 0002 0022             		btst	#2,$22(a0)
0001465A 6600                       		bne.s	loc_13490
0001465C 117C 000E 0016             		move.b	#$E,$16(a0)
00014662 117C 0007 0017             		move.b	#7,$17(a0)
00014668 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
0001466E 08E8 0002 0022             		bset	#2,$22(a0)
00014674 5A68 000C                  		addq.w	#5,$C(a0)
00014678 117C 000A 003A             		move.b	#10,$3A(a0) ; timer
0001467E                            
0001467E                            locret_1348E:
0001467E 4E75                       		rts	
00014680                            ; ===========================================================================
00014680                            
00014680                            loc_13490:
00014680 08E8 0004 0022             		bset	#4,$22(a0)
00014686 4E75                       		rts	
00014688                            ; End of function Sonic_Jump
00014688                            
00014688                            
00014688                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014688                            
00014688                            
00014688                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014688 4A28 003C                  		tst.b	$3C(a0)
0001468C 6700                       		beq.s	loc_134C4
0001468E 323C FC00                  		move.w	#-$400,d1
00014692 0828 0006 0022             		btst	#6,$22(a0)
00014698 6700                       		beq.s	loc_134AE
0001469A 323C FE00                  		move.w	#-$200,d1
0001469E                            
0001469E                            loc_134AE:
0001469E B268 0012                  		cmp.w	$12(a0),d1
000146A2 6F00                       		ble.s	locret_134C2
000146A4 1038 F602                  		move.b	($FFFFF602).w,d0
000146A8 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
000146AC 6600                       		bne.s	locret_134C2	; if yes, branch
000146AE 3141 0012                  		move.w	d1,$12(a0)
000146B2                            
000146B2                            locret_134C2:
000146B2 4E75                       		rts	
000146B4                            ; ===========================================================================
000146B4                            
000146B4                            loc_134C4:
000146B4 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
000146BA 6C00                       		bge.s	locret_134D2
000146BC 317C F040 0012             		move.w	#-$FC0,$12(a0)
000146C2                            
000146C2                            locret_134D2:
000146C2 4E75                       		rts	
000146C4                            ; End of function Sonic_JumpHeight
000146C4                            
000146C4                            ; ---------------------------------------------------------------------------
000146C4                            ; Subroutine to	slow Sonic walking up a	slope
000146C4                            ; ---------------------------------------------------------------------------
000146C4                            
000146C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146C4                            
000146C4                            
000146C4                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
000146C4 1028 0026                  		move.b	$26(a0),d0
000146C8 0600 0060                  		addi.b	#$60,d0
000146CC 0C00 00C0                  		cmpi.b	#$C0,d0
000146D0 6400                       		bcc.s	locret_13508
000146D2 1028 0026                  		move.b	$26(a0),d0
000146D6 4EB9 0000 3416             		jsr	(CalcSine).l
000146DC C1FC 0020                  		muls.w	#$20,d0
000146E0 E080                       		asr.l	#8,d0
000146E2 4A68 0014                  		tst.w	$14(a0)
000146E6 6700                       		beq.s	locret_13508
000146E8 6B00                       		bmi.s	loc_13504
000146EA 4A40                       		tst.w	d0
000146EC 6700                       		beq.s	locret_13502
000146EE D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
000146F2                            
000146F2                            locret_13502:
000146F2 4E75                       		rts	
000146F4                            ; ===========================================================================
000146F4                            
000146F4                            loc_13504:
000146F4 D168 0014                  		add.w	d0,$14(a0)
000146F8                            
000146F8                            locret_13508:
000146F8 4E75                       		rts	
000146FA                            ; End of function Sonic_SlopeResist
000146FA                            
000146FA                            ; ---------------------------------------------------------------------------
000146FA                            ; Subroutine to	push Sonic down	a slope	while he's rolling
000146FA                            ; ---------------------------------------------------------------------------
000146FA                            
000146FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146FA                            
000146FA                            
000146FA                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
000146FA 1028 0026                  		move.b	$26(a0),d0
000146FE 0600 0060                  		addi.b	#$60,d0
00014702 0C00 00C0                  		cmpi.b	#-$40,d0
00014706 6400                       		bcc.s	locret_13544
00014708 1028 0026                  		move.b	$26(a0),d0
0001470C 4EB9 0000 3416             		jsr	(CalcSine).l
00014712 C1FC 0050                  		muls.w	#$50,d0
00014716 E080                       		asr.l	#8,d0
00014718 4A68 0014                  		tst.w	$14(a0)
0001471C 6B00                       		bmi.s	loc_1353A
0001471E 4A40                       		tst.w	d0
00014720 6A00                       		bpl.s	loc_13534
00014722 E480                       		asr.l	#2,d0
00014724                            
00014724                            loc_13534:
00014724 D168 0014                  		add.w	d0,$14(a0)
00014728 4E75                       		rts	
0001472A                            ; ===========================================================================
0001472A                            
0001472A                            loc_1353A:
0001472A 4A40                       		tst.w	d0
0001472C 6B00                       		bmi.s	loc_13540
0001472E E480                       		asr.l	#2,d0
00014730                            
00014730                            loc_13540:
00014730 D168 0014                  		add.w	d0,$14(a0)
00014734                            
00014734                            locret_13544:
00014734 4E75                       		rts	
00014736                            ; End of function Sonic_RollRepel
00014736                            
00014736                            ; ---------------------------------------------------------------------------
00014736                            ; Subroutine to	push Sonic down	a slope
00014736                            ; ---------------------------------------------------------------------------
00014736                            
00014736                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014736                            
00014736                            
00014736                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
00014736 4E71                       		nop	
00014738 4A28 0038                  		tst.b	$38(a0)
0001473C 6600                       		bne.s	locret_13580
0001473E 4A68 003E                  		tst.w	$3E(a0)
00014742 6600                       		bne.s	loc_13582
00014744 1028 0026                  		move.b	$26(a0),d0
00014748 0600 0020                  		addi.b	#$20,d0
0001474C 0200 00C0                  		andi.b	#$C0,d0
00014750 6700                       		beq.s	locret_13580
00014752 3028 0014                  		move.w	$14(a0),d0
00014756 6A00                       		bpl.s	loc_1356A
00014758 4440                       		neg.w	d0
0001475A                            
0001475A                            loc_1356A:
0001475A 0C40 0280                  		cmpi.w	#$280,d0
0001475E 6400                       		bcc.s	locret_13580
00014760 4268 0014                  		clr.w	$14(a0)
00014764 08E8 0001 0022             		bset	#1,$22(a0)
0001476A 317C 001E 003E             		move.w	#$1E,$3E(a0)
00014770                            
00014770                            locret_13580:
00014770 4E75                       		rts	
00014772                            ; ===========================================================================
00014772                            
00014772                            loc_13582:
00014772 5368 003E                  		subq.w	#1,$3E(a0)
00014776 4E75                       		rts	
00014778                            ; End of function Sonic_SlopeRepel
00014778                            
00014778                            ; ---------------------------------------------------------------------------
00014778                            ; Subroutine to	return Sonic's angle to 0 as he jumps
00014778                            ; ---------------------------------------------------------------------------
00014778                            
00014778                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014778                            
00014778                            
00014778                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
00014778 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
0001477C 6700                       		beq.s	locret_135A2	; if already 0,	branch
0001477E 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
00014780                            
00014780 5400                       		addq.b	#2,d0		; increase angle
00014782 6400                       		bcc.s	loc_13596
00014784 7000                       		moveq	#0,d0
00014786                            
00014786                            loc_13596:
00014786 6000                       		bra.s	loc_1359E
00014788                            ; ===========================================================================
00014788                            
00014788                            loc_13598:
00014788 5500                       		subq.b	#2,d0		; decrease angle
0001478A 6400                       		bcc.s	loc_1359E
0001478C 7000                       		moveq	#0,d0
0001478E                            
0001478E                            loc_1359E:
0001478E 1140 0026                  		move.b	d0,$26(a0)
00014792                            
00014792                            locret_135A2:
00014792 4E75                       		rts	
00014794                            ; End of function Sonic_JumpAngle
00014794                            
00014794                            ; ---------------------------------------------------------------------------
00014794                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00014794                            ; ---------------------------------------------------------------------------
00014794                            
00014794                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014794                            
00014794                            
00014794                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00014794 3228 0010                  		move.w	$10(a0),d1
00014798 3428 0012                  		move.w	$12(a0),d2
0001479C 4EB9 0000 36E4             		jsr	(CalcAngle).l
000147A2 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
000147A6 0400 0020                  		subi.b	#$20,d0
000147AA 11C0 FFED                  		move.b	d0,($FFFFFFED).w
000147AE 0200 00C0                  		andi.b	#$C0,d0
000147B2 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
000147B6 0C00 0040                  		cmpi.b	#$40,d0
000147BA 6700 0000                  		beq.w	loc_13680
000147BE 0C00 0080                  		cmpi.b	#$80,d0
000147C2 6700 0000                  		beq.w	loc_136E2
000147C6 0C00 00C0                  		cmpi.b	#-$40,d0
000147CA 6700 0000                  		beq.w	loc_1373E
000147CE 6100 0000                  		bsr.w	Sonic_HitWall
000147D2 4A41                       		tst.w	d1
000147D4 6A00                       		bpl.s	loc_135F0
000147D6 9368 0008                  		sub.w	d1,8(a0)
000147DA 317C 0000 0010             		move.w	#0,$10(a0)
000147E0                            
000147E0                            loc_135F0:
000147E0 6100 0000                  		bsr.w	sub_14EB4
000147E4 4A41                       		tst.w	d1
000147E6 6A00                       		bpl.s	loc_13602
000147E8 D368 0008                  		add.w	d1,8(a0)
000147EC 317C 0000 0010             		move.w	#0,$10(a0)
000147F2                            
000147F2                            loc_13602:
000147F2 6100 0000                  		bsr.w	Sonic_HitFloor
000147F6 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
000147FA 4A41                       		tst.w	d1
000147FC 6A00                       		bpl.s	locret_1367E
000147FE 1428 0012                  		move.b	$12(a0),d2
00014802 5002                       		addq.b	#8,d2
00014804 4402                       		neg.b	d2
00014806 B202                       		cmp.b	d2,d1
00014808 6C00                       		bge.s	loc_1361E
0001480A B002                       		cmp.b	d2,d0
0001480C 6D00                       		blt.s	locret_1367E
0001480E                            
0001480E                            loc_1361E:
0001480E D368 000C                  		add.w	d1,$C(a0)
00014812 1143 0026                  		move.b	d3,$26(a0)
00014816 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001481A 117C 0000 001C             		move.b	#0,$1C(a0)
00014820 1003                       		move.b	d3,d0
00014822 0600 0020                  		addi.b	#$20,d0
00014826 0200 0040                  		andi.b	#$40,d0
0001482A 6600                       		bne.s	loc_1365C
0001482C 1003                       		move.b	d3,d0
0001482E 0600 0010                  		addi.b	#$10,d0
00014832 0200 0020                  		andi.b	#$20,d0
00014836 6700                       		beq.s	loc_1364E
00014838 E0E8 0012                  		asr	$12(a0)
0001483C 6000                       		bra.s	loc_13670
0001483E                            ; ===========================================================================
0001483E                            
0001483E                            loc_1364E:
0001483E 317C 0000 0012             		move.w	#0,$12(a0)
00014844 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001484A 4E75                       		rts	
0001484C                            ; ===========================================================================
0001484C                            
0001484C                            loc_1365C:
0001484C 317C 0000 0010             		move.w	#0,$10(a0)
00014852 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
00014858 6F00                       		ble.s	loc_13670
0001485A 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
00014860                            
00014860                            loc_13670:
00014860 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014866 4A03                       		tst.b	d3
00014868 6A00                       		bpl.s	locret_1367E
0001486A 4468 0014                  		neg.w	$14(a0)
0001486E                            
0001486E                            locret_1367E:
0001486E 4E75                       		rts	
00014870                            ; ===========================================================================
00014870                            
00014870                            loc_13680:
00014870 6100 0000                  		bsr.w	Sonic_HitWall
00014874 4A41                       		tst.w	d1
00014876 6A00                       		bpl.s	loc_1369A
00014878 9368 0008                  		sub.w	d1,8(a0)
0001487C 317C 0000 0010             		move.w	#0,$10(a0)
00014882 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014888 4E75                       		rts	
0001488A                            ; ===========================================================================
0001488A                            
0001488A                            loc_1369A:
0001488A 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001488E 4A41                       		tst.w	d1
00014890 6A00                       		bpl.s	loc_136B4
00014892 9368 000C                  		sub.w	d1,$C(a0)
00014896 4A68 0012                  		tst.w	$12(a0)
0001489A 6A00                       		bpl.s	locret_136B2
0001489C 317C 0000 0012             		move.w	#0,$12(a0)
000148A2                            
000148A2                            locret_136B2:
000148A2 4E75                       		rts	
000148A4                            ; ===========================================================================
000148A4                            
000148A4                            loc_136B4:
000148A4 4A68 0012                  		tst.w	$12(a0)
000148A8 6B00                       		bmi.s	locret_136E0
000148AA 6100 0000                  		bsr.w	Sonic_HitFloor
000148AE 4A41                       		tst.w	d1
000148B0 6A00                       		bpl.s	locret_136E0
000148B2 D368 000C                  		add.w	d1,$C(a0)
000148B6 1143 0026                  		move.b	d3,$26(a0)
000148BA 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000148BE 117C 0000 001C             		move.b	#0,$1C(a0)
000148C4 317C 0000 0012             		move.w	#0,$12(a0)
000148CA 3168 0010 0014             		move.w	$10(a0),$14(a0)
000148D0                            
000148D0                            locret_136E0:
000148D0 4E75                       		rts	
000148D2                            ; ===========================================================================
000148D2                            
000148D2                            loc_136E2:
000148D2 6100 0000                  		bsr.w	Sonic_HitWall
000148D6 4A41                       		tst.w	d1
000148D8 6A00                       		bpl.s	loc_136F4
000148DA 9368 0008                  		sub.w	d1,8(a0)
000148DE 317C 0000 0010             		move.w	#0,$10(a0)
000148E4                            
000148E4                            loc_136F4:
000148E4 6100 0000                  		bsr.w	sub_14EB4
000148E8 4A41                       		tst.w	d1
000148EA 6A00                       		bpl.s	loc_13706
000148EC D368 0008                  		add.w	d1,8(a0)
000148F0 317C 0000 0010             		move.w	#0,$10(a0)
000148F6                            
000148F6                            loc_13706:
000148F6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000148FA 4A41                       		tst.w	d1
000148FC 6A00                       		bpl.s	locret_1373C
000148FE 9368 000C                  		sub.w	d1,$C(a0)
00014902 1003                       		move.b	d3,d0
00014904 0600 0020                  		addi.b	#$20,d0
00014908 0200 0040                  		andi.b	#$40,d0
0001490C 6600                       		bne.s	loc_13726
0001490E 317C 0000 0012             		move.w	#0,$12(a0)
00014914 4E75                       		rts	
00014916                            ; ===========================================================================
00014916                            
00014916                            loc_13726:
00014916 1143 0026                  		move.b	d3,$26(a0)
0001491A 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001491E 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014924 4A03                       		tst.b	d3
00014926 6A00                       		bpl.s	locret_1373C
00014928 4468 0014                  		neg.w	$14(a0)
0001492C                            
0001492C                            locret_1373C:
0001492C 4E75                       		rts	
0001492E                            ; ===========================================================================
0001492E                            
0001492E                            loc_1373E:
0001492E 6100 0000                  		bsr.w	sub_14EB4
00014932 4A41                       		tst.w	d1
00014934 6A00                       		bpl.s	loc_13758
00014936 D368 0008                  		add.w	d1,8(a0)
0001493A 317C 0000 0010             		move.w	#0,$10(a0)
00014940 3168 0012 0014             		move.w	$12(a0),$14(a0)
00014946 4E75                       		rts	
00014948                            ; ===========================================================================
00014948                            
00014948                            loc_13758:
00014948 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
0001494C 4A41                       		tst.w	d1
0001494E 6A00                       		bpl.s	loc_13772
00014950 9368 000C                  		sub.w	d1,$C(a0)
00014954 4A68 0012                  		tst.w	$12(a0)
00014958 6A00                       		bpl.s	locret_13770
0001495A 317C 0000 0012             		move.w	#0,$12(a0)
00014960                            
00014960                            locret_13770:
00014960 4E75                       		rts	
00014962                            ; ===========================================================================
00014962                            
00014962                            loc_13772:
00014962 4A68 0012                  		tst.w	$12(a0)
00014966 6B00                       		bmi.s	locret_1379E
00014968 6100 0000                  		bsr.w	Sonic_HitFloor
0001496C 4A41                       		tst.w	d1
0001496E 6A00                       		bpl.s	locret_1379E
00014970 D368 000C                  		add.w	d1,$C(a0)
00014974 1143 0026                  		move.b	d3,$26(a0)
00014978 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001497C 117C 0000 001C             		move.b	#0,$1C(a0)
00014982 317C 0000 0012             		move.w	#0,$12(a0)
00014988 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001498E                            
0001498E                            locret_1379E:
0001498E 4E75                       		rts	
00014990                            ; End of function Sonic_Floor
00014990                            
00014990                            ; ---------------------------------------------------------------------------
00014990                            ; Subroutine to	reset Sonic's mode when he lands on the floor
00014990                            ; ---------------------------------------------------------------------------
00014990                            
00014990                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014990                            
00014990                            
00014990                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
00014990 0828 0004 0022             		btst	#4,$22(a0)
00014996 6700                       		beq.s	loc_137AE
00014998 4E71                       		nop	
0001499A 4E71                       		nop	
0001499C 4E71                       		nop	
0001499E                            
0001499E                            loc_137AE:
0001499E 08A8 0005 0022             		bclr	#5,$22(a0)
000149A4 08A8 0001 0022             		bclr	#1,$22(a0)
000149AA 08A8 0004 0022             		bclr	#4,$22(a0)
000149B0 0828 0002 0022             		btst	#2,$22(a0)
000149B6 6700                       		beq.s	loc_137E4
000149B8 08A8 0002 0022             		bclr	#2,$22(a0)
000149BE 117C 0013 0016             		move.b	#$13,$16(a0)
000149C4 117C 0009 0017             		move.b	#9,$17(a0)
000149CA 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
000149D0 5B68 000C                  		subq.w	#5,$C(a0)
000149D4                            
000149D4                            loc_137E4:
000149D4 117C 0000 003C             		move.b	#0,$3C(a0)
000149DA 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
000149E0 4E75                       		rts	
000149E2                            ; End of function Sonic_ResetOnFloor
000149E2                            
000149E2                            ; ===========================================================================
000149E2                            ; ---------------------------------------------------------------------------
000149E2                            ; Sonic	when he	gets hurt
000149E2                            ; ---------------------------------------------------------------------------
000149E2                            
000149E2                            Obj01_Hurt:				; XREF: Obj01_Index
000149E2 4EBA 9D38                  		jsr	SpeedToPos
000149E6 0668 0030 0012             		addi.w	#$30,$12(a0)
000149EC 0828 0006 0022             		btst	#6,$22(a0)
000149F2 6700                       		beq.s	loc_1380C
000149F4 0468 0020 0012             		subi.w	#$20,$12(a0)
000149FA                            
000149FA                            loc_1380C:
000149FA 6100 0000                  		bsr.w	Sonic_HurtStop
000149FE 6100 FAE8                  		bsr.w	Sonic_LevelBound
00014A02 6100 F4AE                  		bsr.w	Sonic_RecordPos
00014A06 6100 0000                  		bsr.w	Sonic_Animate
00014A0A 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A0E 4EFA 9D32                  		jmp	DisplaySprite
00014A12                            
00014A12                            ; ---------------------------------------------------------------------------
00014A12                            ; Subroutine to	stop Sonic falling after he's been hurt
00014A12                            ; ---------------------------------------------------------------------------
00014A12                            
00014A12                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A12                            
00014A12                            
00014A12                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00014A12 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A16 0640 00E0                  		addi.w	#$E0,d0
00014A1A B068 000C                  		cmp.w	$C(a0),d0
00014A1E 6500 0000                  		bcs.w	KillSonic
00014A22 6100 FD70                  		bsr.w	Sonic_Floor
00014A26 0828 0001 0022             		btst	#1,$22(a0)
00014A2C 6600                       		bne.s	locret_13860
00014A2E 7000                       		moveq	#0,d0
00014A30 3140 0012                  		move.w	d0,$12(a0)
00014A34 3140 0010                  		move.w	d0,$10(a0)
00014A38 3140 0014                  		move.w	d0,$14(a0)
00014A3C 117C 0000 001C             		move.b	#0,$1C(a0)
00014A42 5528 0024                  		subq.b	#2,$24(a0)
00014A46 317C 0078 0030             		move.w	#$78,$30(a0)
00014A4C                            
00014A4C                            locret_13860:
00014A4C 4E75                       		rts	
00014A4E                            ; End of function Sonic_HurtStop
00014A4E                            
00014A4E                            ; ===========================================================================
00014A4E                            ; ---------------------------------------------------------------------------
00014A4E                            ; Sonic	when he	dies
00014A4E                            ; ---------------------------------------------------------------------------
00014A4E                            
00014A4E                            Obj01_Death:				; XREF: Obj01_Index
00014A4E 6100 0000                  		bsr.w	GameOver
00014A52 4EBA 9C56                  		jsr	ObjectFall
00014A56 6100 F45A                  		bsr.w	Sonic_RecordPos
00014A5A 6100 0000                  		bsr.w	Sonic_Animate
00014A5E 6100 0000                  		bsr.w	LoadSonicDynPLC
00014A62 4EFA 9CDE                  		jmp	DisplaySprite
00014A66                            
00014A66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A66                            
00014A66                            
00014A66                            GameOver:				; XREF: Obj01_Death
00014A66 3038 F72E                  		move.w	($FFFFF72E).w,d0
00014A6A 0640 0100                  		addi.w	#$100,d0
00014A6E B068 000C                  		cmp.w	$C(a0),d0
00014A72 6400 0000                  		bcc.w	locret_13900
00014A76 317C FFC8 0012             		move.w	#-$38,$12(a0)
00014A7C 5428 0024                  		addq.b	#2,$24(a0)
00014A80 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
00014A84 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
00014A88 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
00014A8C 6600                       		bne.s	loc_138D4
00014A8E 317C 0000 003A             		move.w	#0,$3A(a0)
00014A94 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00014A9A 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014AA0 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00014AA6 4238 FE1A                  		clr.b	($FFFFFE1A).w
00014AAA                            
00014AAA                            loc_138C2:
00014AAA 303C 008F                  		move.w	#$8F,d0
00014AAE 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play game over music
00014AB4 7003                       		moveq	#3,d0
00014AB6 4EF9 0000 1E58             		jmp	(LoadPLC).l	; load game over patterns
00014ABC                            ; ===========================================================================
00014ABC                            
00014ABC                            loc_138D4:
00014ABC 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00014AC2 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00014AC6 6700                       		beq.s	locret_13900	; if not, branch
00014AC8 317C 0000 003A             		move.w	#0,$3A(a0)
00014ACE 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00014AD4 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00014ADA 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
00014AE0 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00014AE6 60C2                       		bra.s	loc_138C2
00014AE8                            ; ===========================================================================
00014AE8                            
00014AE8                            locret_13900:
00014AE8 4E75                       		rts	
00014AEA                            ; End of function GameOver
00014AEA                            
00014AEA                            ; ===========================================================================
00014AEA                            ; ---------------------------------------------------------------------------
00014AEA                            ; Sonic	when the level is restarted
00014AEA                            ; ---------------------------------------------------------------------------
00014AEA                            
00014AEA                            Obj01_ResetLevel:			; XREF: Obj01_Index
00014AEA 4A68 003A                  		tst.w	$3A(a0)
00014AEE 6700                       		beq.s	locret_13914
00014AF0 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00014AF4 6600                       		bne.s	locret_13914
00014AF6 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
00014AFC                            
00014AFC                            locret_13914:
00014AFC 4E75                       		rts	
00014AFE                            
00014AFE                            ; ---------------------------------------------------------------------------
00014AFE                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
00014AFE                            ; ---------------------------------------------------------------------------
00014AFE                            
00014AFE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AFE                            
00014AFE                            
00014AFE                            Sonic_Loops:				; XREF: Obj01_Control
00014AFE                            ;		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00014AFE                            ;		beq.s	loc_13926	; if yes, branch
00014AFE                            ;		tst.b	($FFFFFE10).w	; is level GHZ ?
00014AFE                            ;		bne.w	locret_139C2	; if not, branch
00014AFE                            ;		this is commented out, please do more plane messups id love that
00014AFE                            ;loc_13926:
00014AFE 3028 000C                  		move.w	$C(a0),d0
00014B02 E248                       		lsr.w	#1,d0
00014B04 0240 0380                  		andi.w	#$380,d0
00014B08 1228 0008                  		move.b	8(a0),d1
00014B0C 0241 007F                  		andi.w	#$7F,d1
00014B10 D041                       		add.w	d1,d0
00014B12 43F8 A400                  		lea	($FFFFA400).w,a1
00014B16 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00014B1A B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
00014B1E 6700 FA76                  		beq.w	Obj01_ChkRoll
00014B22 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
00014B26 6700 FA6E                  		beq.w	Obj01_ChkRoll
00014B2A B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
00014B2E 6700                       		beq.s	loc_13976
00014B30 B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
00014B34 6700                       		beq.s	loc_13966
00014B36 08A8 0006 0001             		bclr	#6,1(a0)
00014B3C 4E75                       		rts	
00014B3E                            ; ===========================================================================
00014B3E                            
00014B3E                            loc_13966:
00014B3E 0828 0001 0022             		btst	#1,$22(a0)
00014B44 6700                       		beq.s	loc_13976
00014B46 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B4C 4E75                       		rts	
00014B4E                            ; ===========================================================================
00014B4E                            
00014B4E                            loc_13976:
00014B4E 3428 0008                  		move.w	8(a0),d2
00014B52 0C02 002C                  		cmpi.b	#$2C,d2
00014B56 6400                       		bcc.s	loc_13988
00014B58 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B5E 4E75                       		rts	
00014B60                            ; ===========================================================================
00014B60                            
00014B60                            loc_13988:
00014B60 0C02 00E0                  		cmpi.b	#-$20,d2
00014B64 6500                       		bcs.s	loc_13996
00014B66 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B6C 4E75                       		rts	
00014B6E                            ; ===========================================================================
00014B6E                            
00014B6E                            loc_13996:
00014B6E 0828 0006 0001             		btst	#6,1(a0)
00014B74 6600                       		bne.s	loc_139B2
00014B76 1228 0026                  		move.b	$26(a0),d1
00014B7A 6700                       		beq.s	locret_139C2
00014B7C 0C01 0080                  		cmpi.b	#-$80,d1
00014B80 6200                       		bhi.s	locret_139C2
00014B82 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00014B88 4E75                       		rts	
00014B8A                            ; ===========================================================================
00014B8A                            
00014B8A                            loc_139B2:
00014B8A 1228 0026                  		move.b	$26(a0),d1
00014B8E 0C01 0080                  		cmpi.b	#-$80,d1
00014B92 6300                       		bls.s	locret_139C2
00014B94 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00014B9A                            
00014B9A                            locret_139C2:
00014B9A 4E75                       		rts	
00014B9C                            ; End of function Sonic_Loops
00014B9C                            
00014B9C                            ; ---------------------------------------------------------------------------
00014B9C                            ; Subroutine to	animate	Sonic's sprites
00014B9C                            ; ---------------------------------------------------------------------------
00014B9C                            
00014B9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B9C                            
00014B9C                            Player_Anim:
00014B9C 0000 0000                  	dc.l	SonicAniData
00014BA0 0000 0000                  	dc.l	SonicAniData ; gronic
00014BA4 0000 0000                  	dc.l	SonicAniData ; anakama
00014BA8 0000 0000                  	dc.l	SonicAniData ; LimitedSonic
00014BAC                            
00014BAC                            	; Insert more animation data for other characters here
00014BAC                            	
00014BAC                            Sonic_Animate:				; XREF: Obj01_Control; et al
00014BAC 7000                       			moveq	#0,d0
00014BAE 1038 FFE8                  		move.b	(v_character),d0
00014BB2 E548                       		lsl.w	#2,d0
00014BB4 43FA FFE6                  		lea 	Player_Anim(pc),a1
00014BB8                            		
00014BB8 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic dplc
00014BBC                            	
00014BBC 7000                       		moveq	#0,d0
00014BBE 1028 001C                  		move.b	$1C(a0),d0
00014BC2 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
00014BC6 6700                       		beq.s	SAnim_Do	; if not, branch
00014BC8 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00014BCC 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00014BD2 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
00014BD8                            
00014BD8                            SAnim_Do:
00014BD8 D040                       		add.w	d0,d0
00014BDA D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00014BDE 1011                       		move.b	(a1),d0
00014BE0 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00014BE2 1228 0022                  		move.b	$22(a0),d1
00014BE6 0201 0001                  		andi.b	#1,d1
00014BEA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014BF0 8328 0001                  		or.b	d1,1(a0)
00014BF4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014BF8 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
00014BFA 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00014BFE                            
00014BFE                            SAnim_Do2:
00014BFE 7200                       		moveq	#0,d1
00014C00 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00014C04 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
00014C08 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
00014C0A                            
00014C0A                            SAnim_Next:
00014C0A 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00014C0E 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00014C12                            
00014C12                            SAnim_Delay:
00014C12 4E75                       		rts	
00014C14                            ; ===========================================================================
00014C14                            
00014C14                            SAnim_End_FF:
00014C14 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
00014C16 6600                       		bne.s	SAnim_End_FE	; if not, branch
00014C18 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00014C1E 1029 0001                  		move.b	1(a1),d0	; read sprite number
00014C22 60E6                       		bra.s	SAnim_Next
00014C24                            ; ===========================================================================
00014C24                            
00014C24                            SAnim_End_FE:
00014C24 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
00014C26 6600                       		bne.s	SAnim_End_FD	; if not, branch
00014C28 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00014C2C 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00014C30 9200                       		sub.b	d0,d1
00014C32 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
00014C36 60D2                       		bra.s	SAnim_Next
00014C38                            ; ===========================================================================
00014C38                            
00014C38                            SAnim_End_FD:
00014C38 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
00014C3A 6600                       		bne.s	SAnim_End	; if not, branch
00014C3C 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
00014C42                            
00014C42                            SAnim_End:
00014C42 4E75                       		rts	
00014C44                            ; ===========================================================================
00014C44                            
00014C44                            SAnim_WalkRun:				; XREF: SAnim_Do
00014C44 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00014C48 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
00014C4A 5200                       		addq.b	#1,d0		; is animation walking/running?
00014C4C 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
00014C50 7200                       		moveq	#0,d1
00014C52 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
00014C56 1428 0022                  		move.b	$22(a0),d2
00014C5A 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
00014C5E 6600                       		bne.s	loc_13A70	; if yes, branch
00014C60 4600                       		not.b	d0		; reverse angle
00014C62                            
00014C62                            loc_13A70:
00014C62 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
00014C66 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
00014C68 7203                       		moveq	#3,d1
00014C6A                            
00014C6A                            loc_13A78:
00014C6A 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014C70 B302                       		eor.b	d1,d2
00014C72 8528 0001                  		or.b	d2,1(a0)
00014C76 0828 0005 0022             		btst	#5,$22(a0)
00014C7C 6600 0000                  		bne.w	SAnim_Push
00014C80 E808                       		lsr.b	#4,d0		; divide angle by $10
00014C82 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
00014C86 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014C8A 6A00                       		bpl.s	loc_13A9C
00014C8C 4442                       		neg.w	d2
00014C8E                            
00014C8E                            loc_13A9C:
00014C8E 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
00014C94 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
00014C98 6400                       		bcc.s	loc_13AB4	; if yes, branch
00014C9A 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00014CA0 1200                       		move.b	d0,d1
00014CA2 E209                       		lsr.b	#1,d1
00014CA4 D001                       		add.b	d1,d0
00014CA6                            
00014CA6                            loc_13AB4:
00014CA6 D000                       		add.b	d0,d0
00014CA8 1600                       		move.b	d0,d3
00014CAA 4442                       		neg.w	d2
00014CAC 0642 0800                  		addi.w	#$800,d2
00014CB0 6A00                       		bpl.s	loc_13AC2
00014CB2 7400                       		moveq	#0,d2
00014CB4                            
00014CB4                            loc_13AC2:
00014CB4 E04A                       		lsr.w	#8,d2
00014CB6 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014CBA 6100 FF42                  		bsr.w	SAnim_Do2
00014CBE D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00014CC2 4E75                       		rts	
00014CC4                            ; ===========================================================================
00014CC4                            
00014CC4                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00014CC4 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00014CC6 6600                       		bne.s	SAnim_Push	; if not, branch
00014CC8 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014CCC 6A00                       		bpl.s	loc_13ADE
00014CCE 4442                       		neg.w	d2
00014CD0                            
00014CD0                            loc_13ADE:
00014CD0 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00014CD6 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00014CDA 6400                       		bcc.s	loc_13AF0	; if yes, branch
00014CDC 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00014CE2                            
00014CE2                            loc_13AF0:
00014CE2 4442                       		neg.w	d2
00014CE4 0642 0400                  		addi.w	#$400,d2
00014CE8 6A00                       		bpl.s	loc_13AFA
00014CEA 7400                       		moveq	#0,d2
00014CEC                            
00014CEC                            loc_13AFA:
00014CEC E04A                       		lsr.w	#8,d2
00014CEE 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014CF2 1228 0022                  		move.b	$22(a0),d1
00014CF6 0201 0001                  		andi.b	#1,d1
00014CFA 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014D00 8328 0001                  		or.b	d1,1(a0)
00014D04 6000 FEF8                  		bra.w	SAnim_Do2
00014D08                            ; ===========================================================================
00014D08                            
00014D08                            SAnim_Push:				; XREF: SAnim_RollJump
00014D08 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00014D0C 6B00                       		bmi.s	loc_13B1E
00014D0E 4442                       		neg.w	d2
00014D10                            
00014D10                            loc_13B1E:
00014D10 0642 0800                  		addi.w	#$800,d2
00014D14 6A00                       		bpl.s	loc_13B26
00014D16 7400                       		moveq	#0,d2
00014D18                            
00014D18                            loc_13B26:
00014D18 EC4A                       		lsr.w	#6,d2
00014D1A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00014D1E 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00014D24 1228 0022                  		move.b	$22(a0),d1
00014D28 0201 0001                  		andi.b	#1,d1
00014D2C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00014D32 8328 0001                  		or.b	d1,1(a0)
00014D36 6000 FEC6                  		bra.w	SAnim_Do2
00014D3A                            ; End of function Sonic_Animate
00014D3A                            
00014D3A                            ; ===========================================================================
00014D3A                            SonicAniData:
00014D3A                            	include "_anim\Sonic.asm"
00014D3A                            ; ---------------------------------------------------------------------------
00014D3A                            ; Animation script - Sonic
00014D3A                            ; ---------------------------------------------------------------------------
00014D3A 0000                       		dc.w SonAni_Walk-SonicAniData
00014D3C 0000                       		dc.w SonAni_Run-SonicAniData
00014D3E 0000                       		dc.w SonAni_Roll-SonicAniData
00014D40 0000                       		dc.w SonAni_Roll2-SonicAniData
00014D42 0000                       		dc.w SonAni_Push-SonicAniData
00014D44 0000                       		dc.w SonAni_Wait-SonicAniData
00014D46 0000                       		dc.w SonAni_Balance-SonicAniData
00014D48 0000                       		dc.w SonAni_LookUp-SonicAniData
00014D4A 0000                       		dc.w SonAni_Duck-SonicAniData
00014D4C 0000                       		dc.w SonAni_Warp1-SonicAniData
00014D4E 0000                       		dc.w SonAni_Warp2-SonicAniData
00014D50 0000                       		dc.w SonAni_Warp3-SonicAniData
00014D52 0000                       		dc.w SonAni_Warp4-SonicAniData
00014D54 0000                       		dc.w SonAni_Stop-SonicAniData
00014D56 0000                       		dc.w SonAni_Float1-SonicAniData
00014D58 0000                       		dc.w SonAni_Float2-SonicAniData
00014D5A 0000                       		dc.w SonAni_Spring-SonicAniData
00014D5C 0000                       		dc.w SonAni_LZHang-SonicAniData
00014D5E 0000                       		dc.w SonAni_Leap1-SonicAniData
00014D60 0000                       		dc.w SonAni_Leap2-SonicAniData
00014D62 0000                       		dc.w SonAni_Surf-SonicAniData
00014D64 0000                       		dc.w SonAni_Bubble-SonicAniData
00014D66 0000                       		dc.w SonAni_Death1-SonicAniData
00014D68 0000                       		dc.w SonAni_Drown-SonicAniData
00014D6A 0000                       		dc.w SonAni_Death2-SonicAniData
00014D6C 0000                       		dc.w SonAni_Shrink-SonicAniData
00014D6E 0000                       		dc.w SonAni_Hurt-SonicAniData
00014D70 0000                       		dc.w SonAni_LZSlide-SonicAniData
00014D72 0000                       		dc.w SonAni_Blank-SonicAniData
00014D74 0000                       		dc.w SonAni_Float3-SonicAniData
00014D76 0000                       		dc.w SonAni_Float4-SonicAniData
00014D78 FF08 095A 0A0B 0659 07FF   SonAni_Walk:	dc.b $FF, 8, 9, $5A, $A, $B, 6, $59, 7, $FF
00014D82 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00014D8A FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00014D92 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00014D9A FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00014DA2 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00014DB8 1E3A 3BFF                  SonAni_Balance:	dc.b $1E, $3A, $3B, $FF
00014DBC 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00014DC0 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00014DC4 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00014DC8 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00014DCC 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00014DD0 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00014DD4 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00014DD8 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00014DDC 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00014DE4 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00014DE8 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00014DEC 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00014DF2 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00014DF8 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00014DFC 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00014E04 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00014E08 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00014E0C 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00014E10 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00014E1A 035B FF00                  SonAni_Hurt:	dc.b 3,	$5B, $FF, 0
00014E1E 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00014E22 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00014E26 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00014E2E 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00014E32                            		even
00014E32                            		even
00014E32                            
00014E32                            ; ---------------------------------------------------------------------------
00014E32                            ; Sonic	pattern	loading	subroutine
00014E32                            ; ---------------------------------------------------------------------------
00014E32                            
00014E32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E32                            Player_DPLC:
00014E32 0000 0000                  	dc.l	SonicDynPLC
00014E36 0000 0000                  	dc.l	SonicDynPLC ; gronic
00014E3A 0000 0000                  	dc.l	SonicDynPLC ; anakama
00014E3E 0000 0000                  	dc.l	SonicDynPLC ; LimitedSonic
00014E42                            	; add pointers for player dplc here
00014E42                            Player_Art:
00014E42 0000 0000                  	dc.l	Art_Sonic
00014E46 0000 0000                  	dc.l	Art_Sonic ; gronic
00014E4A 0000 0000                  	dc.l	Art_Sonic ; anakama
00014E4E 0000 0000                  	dc.l	Art_Sonic ; LimitedSonic
00014E52                            	; add pointers for player art here
00014E52                            
00014E52                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00014E52 7000                       		moveq	#0,d0
00014E54 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00014E58 B038 F766                  		cmp.b	($FFFFF766).w,d0
00014E5C 6700                       		beq.s	locret_13C96
00014E5E 11C0 F766                  		move.b	d0,($FFFFF766).w
00014E62                            		
00014E62 323C 0000                  		move.w	#0,d1
00014E66 1238 FFE8                  		move.b	(v_character),d1
00014E6A E549                       		lsl.w	#2,d1
00014E6C 45FA FFC4                  		lea 	Player_DPLC(pc),a2
00014E70                            
00014E70 2472 1000                  		movea.l	(a2,d1.w),a2	; load Sonic dplc
00014E74                            		
00014E74 D040                       		add.w	d0,d0
00014E76 D4F2 0000                  		adda.w	(a2,d0.w),a2
00014E7A 7200                       		moveq	#0,d1
00014E7C 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00014E7E 5301                       		subq.b	#1,d1
00014E80 6B00                       		bmi.s	locret_13C96
00014E82 47F8 C800                  		lea	($FFFFC800).w,a3
00014E86 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00014E8C                            
00014E8C                            SPLC_ReadEntry:
00014E8C 303C 0000                  		move.w	#0,d0
00014E90 1038 FFE8                  		move.b	(v_character),d0
00014E94 E548                       		lsl.w	#2,d0
00014E96 43FA FFAA                  		lea 	Player_Art(pc),a1
00014E9A                            
00014E9A 2271 0000                  		movea.l	(a1,d0.w),a1	; load Sonic art
00014E9E                            
00014E9E 7400                       		moveq	#0,d2
00014EA0 141A                       		move.b	(a2)+,d2
00014EA2 3002                       		move.w	d2,d0
00014EA4 E808                       		lsr.b	#4,d0
00014EA6 E14A                       		lsl.w	#8,d2
00014EA8 141A                       		move.b	(a2)+,d2
00014EAA EB4A                       		lsl.w	#5,d2
00014EAC D3C2                       		adda.l	d2,a1
00014EAE                            
00014EAE                            SPLC_LoadTile:
00014EAE 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00014EB2 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00014EB6 47EB 0020                  		lea	$20(a3),a3	; next tile
00014EBA 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00014EBE                            
00014EBE 51C9 FFCC                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00014EC2                            
00014EC2                            locret_13C96:
00014EC2 4E75                       		rts	
00014EC4                            ; End of function LoadSonicDynPLC
00014EC4                            
00014EC4                            ; ===========================================================================
00014EC4                            ; ---------------------------------------------------------------------------
00014EC4                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00014EC4                            ; ---------------------------------------------------------------------------
00014EC4                            
00014EC4                            Obj0A:					; XREF: Obj_Index
00014EC4 7000                       		moveq	#0,d0
00014EC6 1028 0024                  		move.b	$24(a0),d0
00014ECA 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00014ECE 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00014ED2                            ; ===========================================================================
00014ED2 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00014ED6 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00014EDA 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00014EDE 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00014EE2 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00014EE4                            ; ===========================================================================
00014EE4                            
00014EE4                            Obj0A_Main:				; XREF: Obj0A_Index
00014EE4 5428 0024                  		addq.b	#2,$24(a0)
00014EE8 217C 0001 3AD6 0004        		move.l	#Map_obj64,4(a0)
00014EF0 317C 8348 0002             		move.w	#$8348,2(a0)
00014EF6 117C 0084 0001             		move.b	#$84,1(a0)
00014EFC 117C 0010 0019             		move.b	#$10,$19(a0)
00014F02 117C 0001 0018             		move.b	#1,$18(a0)
00014F08 1028 0028                  		move.b	$28(a0),d0
00014F0C 6A00                       		bpl.s	loc_13D00
00014F0E 5028 0024                  		addq.b	#8,$24(a0)
00014F12 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00014F1A 317C 0440 0002             		move.w	#$440,2(a0)
00014F20 0240 007F                  		andi.w	#$7F,d0
00014F24 1140 0033                  		move.b	d0,$33(a0)
00014F28 6000 0000                  		bra.w	Obj0A_Countdown
00014F2C                            ; ===========================================================================
00014F2C                            
00014F2C                            loc_13D00:
00014F2C 1140 001C                  		move.b	d0,$1C(a0)
00014F30 3168 0008 0030             		move.w	8(a0),$30(a0)
00014F36 317C FF78 0012             		move.w	#-$88,$12(a0)
00014F3C                            
00014F3C                            Obj0A_Animate:				; XREF: Obj0A_Index
00014F3C 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014F42 4EB9 0000 B790             		jsr	AnimateSprite
00014F48                            
00014F48                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00014F48 3038 F646                  		move.w	($FFFFF646).w,d0
00014F4C B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00014F50 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00014F52 117C 0006 0024             		move.b	#6,$24(a0)
00014F58 5E28 001C                  		addq.b	#7,$1C(a0)
00014F5C 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00014F62 6700                       		beq.s	Obj0A_Display
00014F64 6000                       		bra.s	Obj0A_Display
00014F66                            ; ===========================================================================
00014F66                            
00014F66                            Obj0A_Wobble:
00014F66 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00014F6A 6700                       		beq.s	loc_13D44
00014F6C 5868 0030                  		addq.w	#4,$30(a0)
00014F70                            
00014F70                            loc_13D44:
00014F70 1028 0026                  		move.b	$26(a0),d0
00014F74 5228 0026                  		addq.b	#1,$26(a0)
00014F78 0240 007F                  		andi.w	#$7F,d0
00014F7C 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00014F82 1031 0000                  		move.b	(a1,d0.w),d0
00014F86 4880                       		ext.w	d0
00014F88 D068 0030                  		add.w	$30(a0),d0
00014F8C 3140 0008                  		move.w	d0,8(a0)
00014F90 6100                       		bsr.s	Obj0A_ShowNumber
00014F92 4EBA 9788                  		jsr	SpeedToPos
00014F96 4A28 0001                  		tst.b	1(a0)
00014F9A 6A00                       		bpl.s	Obj0A_Delete
00014F9C 4EFA 97A4                  		jmp	DisplaySprite
00014FA0                            ; ===========================================================================
00014FA0                            
00014FA0                            Obj0A_Delete:
00014FA0 4EFA 97DC                  		jmp	DeleteObject
00014FA4                            ; ===========================================================================
00014FA4                            
00014FA4                            Obj0A_Display:				; XREF: Obj0A_Index
00014FA4 6100                       		bsr.s	Obj0A_ShowNumber
00014FA6 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014FAC 4EB9 0000 B790             		jsr	AnimateSprite
00014FB2 4EFA 978E                  		jmp	DisplaySprite
00014FB6                            ; ===========================================================================
00014FB6                            
00014FB6                            Obj0A_Delete2:				; XREF: Obj0A_Index
00014FB6 4EFA 97C6                  		jmp	DeleteObject
00014FBA                            ; ===========================================================================
00014FBA                            
00014FBA                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00014FBA 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00014FC0 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00014FC2 5368 0038                  		subq.w	#1,$38(a0)
00014FC6 6600                       		bne.s	Obj0A_Display2
00014FC8 117C 000E 0024             		move.b	#$E,$24(a0)
00014FCE 5E28 001C                  		addq.b	#7,$1C(a0)
00014FD2 60D0                       		bra.s	Obj0A_Display
00014FD4                            ; ===========================================================================
00014FD4                            
00014FD4                            Obj0A_Display2:
00014FD4 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00014FDA 4EB9 0000 B790             		jsr	AnimateSprite
00014FE0 4A28 0001                  		tst.b	1(a0)
00014FE4 6A00                       		bpl.s	Obj0A_Delete3
00014FE6 4EFA 975A                  		jmp	DisplaySprite
00014FEA                            ; ===========================================================================
00014FEA                            
00014FEA                            Obj0A_Delete3:
00014FEA 4EFA 9792                  		jmp	DeleteObject
00014FEE                            ; ===========================================================================
00014FEE                            
00014FEE                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00014FEE 4A68 0038                  		tst.w	$38(a0)
00014FF2 6700                       		beq.s	locret_13E1A
00014FF4 5368 0038                  		subq.w	#1,$38(a0)
00014FF8 6600                       		bne.s	locret_13E1A
00014FFA 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00015000 6400                       		bcc.s	locret_13E1A
00015002 317C 000F 0038             		move.w	#$F,$38(a0)
00015008 4268 0012                  		clr.w	$12(a0)
0001500C 117C 0080 0001             		move.b	#$80,1(a0)
00015012 3028 0008                  		move.w	8(a0),d0
00015016 9078 F700                  		sub.w	($FFFFF700).w,d0
0001501A 0640 0080                  		addi.w	#$80,d0
0001501E 3140 0008                  		move.w	d0,8(a0)
00015022 3028 000C                  		move.w	$C(a0),d0
00015026 9078 F704                  		sub.w	($FFFFF704).w,d0
0001502A 0640 0080                  		addi.w	#$80,d0
0001502E 3140 000A                  		move.w	d0,$A(a0)
00015032 117C 000C 0024             		move.b	#$C,$24(a0)
00015038                            
00015038                            locret_13E1A:
00015038 4E75                       		rts	
0001503A                            ; ===========================================================================
0001503A                            Obj0A_WobbleData:
0001503A 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
0001504B 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
0001505C 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
0001506D 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
0001507D FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
0001508A FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00015097 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
000150A4 FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
000150B1 FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
000150BA                            ; ===========================================================================
000150BA                            
000150BA                            Obj0A_Countdown:			; XREF: Obj0A_Index
000150BA 4A68 002C                  		tst.w	$2C(a0)
000150BE 6600 0000                  		bne.w	loc_13F86
000150C2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
000150C8 6400 0000                  		bcc.w	locret_1408C
000150CC 0838 0006 D022             		btst	#6,($FFFFD022).w
000150D2 6700 0000                  		beq.w	locret_1408C
000150D6 5368 0038                  		subq.w	#1,$38(a0)
000150DA 6A00 0000                  		bpl.w	loc_13FAC
000150DE 317C 003B 0038             		move.w	#59,$38(a0)
000150E4 317C 0001 0036             		move.w	#1,$36(a0)
000150EA 4EB9 0000 33F0             		jsr	(RandomNumber).l
000150F0 0240 0001                  		andi.w	#1,d0
000150F4 1140 0034                  		move.b	d0,$34(a0)
000150F8 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
000150FC 0C40 0019                  		cmpi.w	#$19,d0
00015100 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00015102 0C40 0014                  		cmpi.w	#$14,d0
00015106 6700                       		beq.s	Obj0A_WarnSound
00015108 0C40 000F                  		cmpi.w	#$F,d0
0001510C 6700                       		beq.s	Obj0A_WarnSound
0001510E 0C40 000C                  		cmpi.w	#$C,d0
00015112 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00015114 6600                       		bne.s	loc_13F02
00015116 303C 0092                  		move.w	#$92,d0
0001511A 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play countdown music
00015120                            
00015120                            loc_13F02:
00015120 5328 0032                  		subq.b	#1,$32(a0)
00015124 6A00                       		bpl.s	Obj0A_ReduceAir
00015126 1168 0033 0032             		move.b	$33(a0),$32(a0)
0001512C 08E8 0007 0036             		bset	#7,$36(a0)
00015132 6000                       		bra.s	Obj0A_ReduceAir
00015134                            ; ===========================================================================
00015134                            
00015134                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00015134 303C 00C2                  		move.w	#$C2,d0
00015138 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
0001513E                            
0001513E                            Obj0A_ReduceAir:
0001513E 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00015142 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00015146 6100 0000                  		bsr.w	ResumeMusic
0001514A 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00015150 303C 00B2                  		move.w	#$B2,d0
00015154 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play drowning sound
0001515A 117C 000A 0034             		move.b	#$A,$34(a0)
00015160 317C 0001 0036             		move.w	#1,$36(a0)
00015166 317C 0078 002C             		move.w	#$78,$2C(a0)
0001516C 2F08                       		move.l	a0,-(sp)
0001516E 41F8 D000                  		lea	($FFFFD000).w,a0
00015172 6100 F81C                  		bsr.w	Sonic_ResetOnFloor
00015176 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
0001517C 08E8 0001 0022             		bset	#1,$22(a0)
00015182 08E8 0007 0002             		bset	#7,2(a0)
00015188 317C 0000 0012             		move.w	#0,$12(a0)
0001518E 317C 0000 0010             		move.w	#0,$10(a0)
00015194 317C 0000 0014             		move.w	#0,$14(a0)
0001519A 11FC 0001 F744             		move.b	#1,($FFFFF744).w
000151A0 205F                       		movea.l	(sp)+,a0
000151A2 4E75                       		rts	
000151A4                            ; ===========================================================================
000151A4                            
000151A4                            loc_13F86:
000151A4 5368 002C                  		subq.w	#1,$2C(a0)
000151A8 6600                       		bne.s	loc_13F94
000151AA 11FC 0006 D024             		move.b	#6,($FFFFD024).w
000151B0 4E75                       		rts	
000151B2                            ; ===========================================================================
000151B2                            
000151B2                            loc_13F94:
000151B2 2F08                       		move.l	a0,-(sp)
000151B4 41F8 D000                  		lea	($FFFFD000).w,a0
000151B8 4EBA 9562                  		jsr	SpeedToPos
000151BC 0668 0010 0012             		addi.w	#$10,$12(a0)
000151C2 205F                       		movea.l	(sp)+,a0
000151C4 6000                       		bra.s	loc_13FAC
000151C6                            ; ===========================================================================
000151C6                            
000151C6                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
000151C6 6000                       		bra.s	Obj0A_MakeItem
000151C8                            ; ===========================================================================
000151C8                            
000151C8                            loc_13FAC:
000151C8 4A68 0036                  		tst.w	$36(a0)
000151CC 6700 0000                  		beq.w	locret_1408C
000151D0 5368 003A                  		subq.w	#1,$3A(a0)
000151D4 6A00 0000                  		bpl.w	locret_1408C
000151D8                            
000151D8                            Obj0A_MakeItem:
000151D8 4EB9 0000 33F0             		jsr	(RandomNumber).l
000151DE 0240 000F                  		andi.w	#$F,d0
000151E2 3140 003A                  		move.w	d0,$3A(a0)
000151E6 4EBA 99E0                  		jsr	SingleObjLoad
000151EA 6600 0000                  		bne.w	locret_1408C
000151EE 12BC 000A                  		move.b	#$A,0(a1)	; load object
000151F2 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
000151F8 7006                       		moveq	#6,d0
000151FA 0838 0000 D022             		btst	#0,($FFFFD022).w
00015200 6700                       		beq.s	loc_13FF2
00015202 4440                       		neg.w	d0
00015204 137C 0040 0026             		move.b	#$40,$26(a1)
0001520A                            
0001520A                            loc_13FF2:
0001520A D169 0008                  		add.w	d0,8(a1)
0001520E 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00015214 137C 0006 0028             		move.b	#6,$28(a1)
0001521A 4A68 002C                  		tst.w	$2C(a0)
0001521E 6700 0000                  		beq.w	loc_1403E
00015222 0268 0007 003A             		andi.w	#7,$3A(a0)
00015228 0668 0000 003A             		addi.w	#0,$3A(a0)
0001522E 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015232 0440 000C                  		subi.w	#$C,d0
00015236 3340 000C                  		move.w	d0,$C(a1)
0001523A 4EB9 0000 33F0             		jsr	(RandomNumber).l
00015240 1340 0026                  		move.b	d0,$26(a1)
00015244 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015248 0200 0003                  		andi.b	#3,d0
0001524C 6600                       		bne.s	loc_14082
0001524E 137C 000E 0028             		move.b	#$E,$28(a1)
00015254 6000                       		bra.s	loc_14082
00015256                            ; ===========================================================================
00015256                            
00015256                            loc_1403E:
00015256 0828 0007 0036             		btst	#7,$36(a0)
0001525C 6700                       		beq.s	loc_14082
0001525E 3438 FE14                  		move.w	($FFFFFE14).w,d2
00015262 E24A                       		lsr.w	#1,d2
00015264 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001526A 0240 0003                  		andi.w	#3,d0
0001526E 6600                       		bne.s	loc_1406A
00015270 08E8 0006 0036             		bset	#6,$36(a0)
00015276 6600                       		bne.s	loc_14082
00015278 1342 0028                  		move.b	d2,$28(a1)
0001527C 337C 001C 0038             		move.w	#$1C,$38(a1)
00015282                            
00015282                            loc_1406A:
00015282 4A28 0034                  		tst.b	$34(a0)
00015286 6600                       		bne.s	loc_14082
00015288 08E8 0006 0036             		bset	#6,$36(a0)
0001528E 6600                       		bne.s	loc_14082
00015290 1342 0028                  		move.b	d2,$28(a1)
00015294 337C 001C 0038             		move.w	#$1C,$38(a1)
0001529A                            
0001529A                            loc_14082:
0001529A 5328 0034                  		subq.b	#1,$34(a0)
0001529E 6A00                       		bpl.s	locret_1408C
000152A0 4268 0036                  		clr.w	$36(a0)
000152A4                            
000152A4                            locret_1408C:
000152A4 4E75                       		rts	
000152A6                            
000152A6                            ; ---------------------------------------------------------------------------
000152A6                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
000152A6                            ; ---------------------------------------------------------------------------
000152A6                            
000152A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000152A6                            
000152A6                            
000152A6                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
000152A6 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
000152AC                             
000152AC                            ; Third section of the NineKode - Play correct music after the countdown (if you breathe)
000152AC                             
000152AC 6200 0000                  		bhi.w	loc_140AC	; change to bhi.w!
000152B0                             
000152B0 0C38 0000 FE11             		cmpi.b	#$0,($FFFFFE11).w	; is this act 1?
000152B6 6600                       		bne.s	Air_GetBgm2	; if not, branch
000152B8 43F9 0000 4474             		lea	(MusicList1).l,a1	; load Music Playlist for Acts 1
000152BE 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000152C0                             
000152C0                            Air_GetBgm2:
000152C0 0C38 0001 FE11             		cmpi.b	#$1,($FFFFFE11).w	; is this act 2?
000152C6 6600                       		bne.s	Air_GetBgm3	; if not, branch
000152C8 43F9 0000 447C             		lea	(MusicList2).l,a1	; load Music Playlist for Acts 2
000152CE 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000152D0                             
000152D0                            Air_GetBgm3:
000152D0 0C38 0002 FE11             		cmpi.b	#$2,($FFFFFE11).w	; is this act 3?
000152D6 6600                       		bne.s	Air_GetBgm4	; if not, branch
000152D8 43F9 0000 4484             		lea	(MusicList3).l,a1	; load Music Playlist for Acts 39
000152DE 6000                       		bra.s	Air_PlayMusic	; go to PlayMusic
000152E0                             
000152E0                            Air_GetBgm4:
000152E0 0C38 0003 FE11             		cmpi.b	#$3,($FFFFFE11).w	; is this act 4?
000152E6 6600                       		bne.s	Air_PlayMusic	; if not, branch
000152E8 43F9 0000 448C             		lea	(MusicList4).l,a1	; load Music Playlist for Acts 4
000152EE                             
000152EE                            Air_PlayMusic:
000152EE 1029 0001                  		move.b	1(a1),d0	; load entry $1 from the playlist
000152F2                             
000152F2                            loc_140A6:
000152F2 4EB9 0000 1C6E             		jsr	(PlaySound).l
000152F8                             
000152F8                            ; NineKode ends here
000152F8                            
000152F8                            loc_140AC:
000152F8 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000152FE 4238 D372                  		clr.b	($FFFFD372).w
00015302 4E75                       		rts	
00015304                            ; End of function ResumeMusic
00015304                            
00015304                            ; ===========================================================================
00015304                            Ani_obj0A:
00015304                            	include "_anim\obj0A.asm"
00015304                            ; ---------------------------------------------------------------------------
00015304                            ; Animation script - countdown numbers and bubbles (LZ)
00015304                            ; ---------------------------------------------------------------------------
00015304 0000                       		dc.w byte_140D6-Ani_obj0A
00015306 0000                       		dc.w byte_140E0-Ani_obj0A
00015308 0000                       		dc.w byte_140EA-Ani_obj0A
0001530A 0000                       		dc.w byte_140F4-Ani_obj0A
0001530C 0000                       		dc.w byte_140FE-Ani_obj0A
0001530E 0000                       		dc.w byte_14108-Ani_obj0A
00015310 0000                       		dc.w byte_14112-Ani_obj0A
00015312 0000                       		dc.w byte_14118-Ani_obj0A
00015314 0000                       		dc.w byte_14120-Ani_obj0A
00015316 0000                       		dc.w byte_14128-Ani_obj0A
00015318 0000                       		dc.w byte_14130-Ani_obj0A
0001531A 0000                       		dc.w byte_14138-Ani_obj0A
0001531C 0000                       		dc.w byte_14140-Ani_obj0A
0001531E 0000                       		dc.w byte_14148-Ani_obj0A
00015320 0000                       		dc.w byte_1414A-Ani_obj0A
00015322 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
0001532C 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
00015336 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00015340 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
0001534A 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
00015354 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
0001535E 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
00015364 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
0001536C 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
00015374 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
0001537C 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
00015384 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
0001538C 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
00015394 0EFC                       byte_14148:	dc.b $E, $FC
00015396 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
0001539C                            		even
0001539C                            		even
0001539C                            
0001539C                            ; ---------------------------------------------------------------------------
0001539C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001539C                            ; ---------------------------------------------------------------------------
0001539C                            Map_obj0A:
0001539C                            	include "_maps\obj0A.asm"
0001539C                            ; ---------------------------------------------------------------------------
0001539C                            ; Sprite mappings - drowning countdown numbers (LZ)
0001539C                            ; ---------------------------------------------------------------------------
0001539C 0000                       		dc.w byte_14152-Map_obj0A
0001539E 01                         byte_14152:	dc.b 1
0001539F E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
000153A4                            		even
000153A4                            		even
000153A4                            
000153A4                            ; ===========================================================================
000153A4                            ; ---------------------------------------------------------------------------
000153A4                            ; Object 38 - shield and invincibility stars
000153A4                            ; ---------------------------------------------------------------------------
000153A4                            
000153A4                            Obj38:					; XREF: Obj_Index
000153A4 7000                       		moveq	#0,d0
000153A6 1028 0024                  		move.b	$24(a0),d0
000153AA 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000153AE 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000153B2                            ; ===========================================================================
000153B2 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000153B4 0000                       		dc.w Obj38_Shield-Obj38_Index
000153B6 0000                       		dc.w Obj38_Stars-Obj38_Index
000153B8                            ; ===========================================================================
000153B8                            
000153B8                            Obj38_Main:				; XREF: Obj38_Index
000153B8 5428 0024                  		addq.b	#2,$24(a0)
000153BC 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000153C4 117C 0004 0001             		move.b	#4,1(a0)
000153CA 117C 0001 0018             		move.b	#1,$18(a0)
000153D0 117C 0010 0019             		move.b	#$10,$19(a0)
000153D6 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000153DA 6600                       		bne.s	Obj38_DoStars	; if not, branch
000153DC 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000153E2 4E75                       		rts	
000153E4                            ; ===========================================================================
000153E4                            
000153E4                            Obj38_DoStars:
000153E4 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000153E8 317C 055C 0002             		move.w	#$55C,2(a0)
000153EE 4E75                       		rts	
000153F0                            ; ===========================================================================
000153F0                            
000153F0                            Obj38_Shield:				; XREF: Obj38_Index
000153F0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000153F4 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000153F6 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000153FA 6700                       		beq.s	Obj38_Delete	; if not, branch
000153FC 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
00015402 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
00015408 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001540E 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00015414 4EB9 0000 B790             		jsr	AnimateSprite
0001541A 4EFA 9326                  		jmp	DisplaySprite
0001541E                            ; ===========================================================================
0001541E                            
0001541E                            Obj38_RmvShield:
0001541E 4E75                       		rts	
00015420                            ; ===========================================================================
00015420                            
00015420                            Obj38_Delete:
00015420 4EFA 935C                  		jmp	DeleteObject
00015424                            ; ===========================================================================
00015424                            
00015424                            Obj38_Stars:				; XREF: Obj38_Index
00015424 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00015428 6700                       		beq.s	Obj38_Delete2	; if not, branch
0001542A 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
0001542E 1228 001C                  		move.b	$1C(a0),d1
00015432 5301                       		subq.b	#1,d1
00015434 6000                       		bra.s	Obj38_StarTrail
00015436                            ; ===========================================================================
00015436 E909                       		lsl.b	#4,d1
00015438 5801                       		addq.b	#4,d1
0001543A 9001                       		sub.b	d1,d0
0001543C 1228 0030                  		move.b	$30(a0),d1
00015440 9001                       		sub.b	d1,d0
00015442 5801                       		addq.b	#4,d1
00015444 0201 000F                  		andi.b	#$F,d1
00015448 1141 0030                  		move.b	d1,$30(a0)
0001544C 6000                       		bra.s	Obj38_StarTrail2a
0001544E                            ; ===========================================================================
0001544E                            
0001544E                            Obj38_StarTrail:			; XREF: Obj38_Stars
0001544E E709                       		lsl.b	#3,d1
00015450 1401                       		move.b	d1,d2
00015452 D201                       		add.b	d1,d1
00015454 D202                       		add.b	d2,d1
00015456 5801                       		addq.b	#4,d1
00015458 9001                       		sub.b	d1,d0
0001545A 1228 0030                  		move.b	$30(a0),d1
0001545E 9001                       		sub.b	d1,d0
00015460 5801                       		addq.b	#4,d1
00015462 0C01 0018                  		cmpi.b	#$18,d1
00015466 6500                       		bcs.s	Obj38_StarTrail2
00015468 7200                       		moveq	#0,d1
0001546A                            
0001546A                            Obj38_StarTrail2:
0001546A 1141 0030                  		move.b	d1,$30(a0)
0001546E                            
0001546E                            Obj38_StarTrail2a:
0001546E 43F8 CB00                  		lea	($FFFFCB00).w,a1
00015472 43F1 0000                  		lea	(a1,d0.w),a1
00015476 3159 0008                  		move.w	(a1)+,8(a0)
0001547A 3159 000C                  		move.w	(a1)+,$C(a0)
0001547E 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00015484 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001548A 4EB9 0000 B790             		jsr	AnimateSprite
00015490 4EFA 92B0                  		jmp	DisplaySprite
00015494                            ; ===========================================================================
00015494                            
00015494                            Obj38_Delete2:				; XREF: Obj38_Stars
00015494 4EFA 92E8                  		jmp	DeleteObject
00015498                            ; ===========================================================================
00015498                            ; ---------------------------------------------------------------------------
00015498                            ; Object 4A - special stage entry from beta
00015498                            ; ---------------------------------------------------------------------------
00015498                            
00015498                            Obj4A:					; XREF: Obj_Index
00015498 7000                       		moveq	#0,d0
0001549A 1028 0024                  		move.b	$24(a0),d0
0001549E 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
000154A2 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
000154A6                            ; ===========================================================================
000154A6 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
000154A8 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000154AA 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000154AC                            ; ===========================================================================
000154AC                            
000154AC                            Obj4A_Main:				; XREF: Obj4A_Index
000154AC 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000154B0 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000154B2 4E75                       		rts	
000154B4                            ; ===========================================================================
000154B4                            
000154B4                            Obj4A_Main2:
000154B4 5428 0024                  		addq.b	#2,$24(a0)
000154B8 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000154C0 117C 0004 0001             		move.b	#4,1(a0)
000154C6 117C 0001 0018             		move.b	#1,$18(a0)
000154CC 117C 0038 0019             		move.b	#$38,$19(a0)
000154D2 317C 0541 0002             		move.w	#$541,2(a0)
000154D8 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000154DE                            
000154DE                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000154DE 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000154E4 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000154EA 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000154F0 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000154F6 4EB9 0000 B790             		jsr	AnimateSprite
000154FC 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
00015502 6600                       		bne.s	Obj4A_Display
00015504 4A38 D000                  		tst.b	($FFFFD000).w
00015508 6700                       		beq.s	Obj4A_Display
0001550A 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00015510 303C 00A8                  		move.w	#$A8,d0
00015514 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
0001551A                            
0001551A                            Obj4A_Display:
0001551A 4EFA 9226                  		jmp	DisplaySprite
0001551E                            ; ===========================================================================
0001551E                            
0001551E                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
0001551E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00015522 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
00015524 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
0001552A 4EFA 9252                  		jmp	DeleteObject
0001552E                            ; ===========================================================================
0001552E                            
0001552E                            Obj4A_Wait:
0001552E 4E75                       		rts	
00015530                            ; ===========================================================================
00015530                            ; ---------------------------------------------------------------------------
00015530                            ; Object 08 - water splash (LZ)
00015530                            ; ---------------------------------------------------------------------------
00015530                            
00015530                            Obj08:					; XREF: Obj_Index
00015530 7000                       		moveq	#0,d0
00015532 1028 0024                  		move.b	$24(a0),d0
00015536 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
0001553A 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
0001553E                            ; ===========================================================================
0001553E 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00015540 0000                       		dc.w Obj08_Display-Obj08_Index
00015542 0000                       		dc.w Obj08_Delete-Obj08_Index
00015544                            ; ===========================================================================
00015544                            
00015544                            Obj08_Main:				; XREF: Obj08_Index
00015544 5428 0024                  		addq.b	#2,$24(a0)
00015548 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00015550 0028 0004 0001             		ori.b	#4,1(a0)
00015556 117C 0001 0018             		move.b	#1,$18(a0)
0001555C 117C 0010 0019             		move.b	#$10,$19(a0)
00015562 317C 4259 0002             		move.w	#$4259,2(a0)
00015568 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
0001556E                            
0001556E                            Obj08_Display:				; XREF: Obj08_Index
0001556E 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
00015574 43F9 0000 0000             		lea	(Ani_obj08).l,a1
0001557A 4EB9 0000 B790             		jsr	AnimateSprite
00015580 4EFA 91C0                  		jmp	DisplaySprite
00015584                            ; ===========================================================================
00015584                            
00015584                            Obj08_Delete:				; XREF: Obj08_Index
00015584 4EFA 91F8                  		jmp	DeleteObject	; delete when animation	is complete
00015588                            ; ===========================================================================
00015588                            Ani_obj38:
00015588                            	include "_anim\obj38.asm"
00015588                            ; ---------------------------------------------------------------------------
00015588                            ; Animation script - shield and invincibility stars
00015588                            ; ---------------------------------------------------------------------------
00015588 0000                       		dc.w byte_14356-Ani_obj38
0001558A 0000                       		dc.w byte_1435E-Ani_obj38
0001558C 0000                       		dc.w byte_14364-Ani_obj38
0001558E 0000                       		dc.w byte_1437E-Ani_obj38
00015590 0000                       		dc.w byte_14398-Ani_obj38
00015592 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
0001559A 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
000155A0 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000155B1 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000155BA 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000155CB 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000155D4 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000155E5 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000155EE                            		even
000155EE                            		even
000155EE                            
000155EE                            ; ---------------------------------------------------------------------------
000155EE                            ; Sprite mappings - shield and invincibility stars
000155EE                            ; ---------------------------------------------------------------------------
000155EE                            Map_obj38:
000155EE                            	include "_maps\obj38.asm"
000155EE                            ; ---------------------------------------------------------------------------
000155EE                            ; Sprite mappings - shield and invincibility stars
000155EE                            ; ---------------------------------------------------------------------------
000155EE 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000155F2 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000155F6 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000155FA 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000155FE 04                         byte_143C2:	dc.b 4
000155FF E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015604 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015609 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
0001560E 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015613 04                         byte_143D7:	dc.b 4
00015614 E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
00015619 E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
0001561E 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00015623 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
00015628 04                         byte_143EC:	dc.b 4
00015629 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001562E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00015633 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00015638 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
0001563D 04                         byte_14401:	dc.b 4
0001563E E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00015643 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
00015648 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001564D 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00015652 04                         byte_14416:	dc.b 4
00015653 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00015658 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
0001565D 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00015662 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00015667 04                         byte_1442B:	dc.b 4
00015668 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
0001566D E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00015672 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
00015677 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
0001567C 04                         byte_14440:	dc.b 4
0001567D E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00015682 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
00015687 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
0001568C 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00015692 00                         		even
00015692 00                         		even
00015692                            
00015692                            Ani_obj4A:
00015692                            	include "_anim\obj4A.asm"
00015692                            ; ---------------------------------------------------------------------------
00015692                            ; Animation script - special stage entry effect from beta
00015692                            ; ---------------------------------------------------------------------------
00015692 0000                       		dc.w byte_14458-Ani_obj4A
00015694 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
000156A8                            		even
000156A8                            		even
000156A8                            
000156A8                            ; ---------------------------------------------------------------------------
000156A8                            ; Sprite mappings - special stage entry	from beta
000156A8                            ; ---------------------------------------------------------------------------
000156A8                            Map_obj4A:
000156A8                            	include "_maps\obj4A.asm"
000156A8                            ; ---------------------------------------------------------------------------
000156A8                            ; Sprite mappings - special stage entry	from beta
000156A8                            ; ---------------------------------------------------------------------------
000156A8 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000156AC 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000156B0 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000156B4 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000156B8 03                         byte_1447C:	dc.b 3
000156B9 F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000156BE 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000156C3 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000156C8 03                         byte_1448C:	dc.b 3
000156C9 F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000156CE 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000156D3 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000156D8 05                         byte_1449C:	dc.b 5
000156D9 E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000156DE EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000156E3 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000156E8 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000156ED 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000156F2 09                         byte_144B6:	dc.b 9
000156F3 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000156F8 F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000156FD 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
00015702 0005 0034 10               		dc.b 0,	5, 0, $34, $10
00015707 F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
0001570C F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00015711 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00015716 0000 0825 28               		dc.b 0,	0, 8, $25, $28
0001571B F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00015720 12                         byte_144E4:	dc.b $12
00015721 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
00015726 F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
0001572B F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00015730 0000 0025 00               		dc.b 0,	0, 0, $25, 0
00015735 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
0001573A 1000 1026 00               		dc.b $10, 0, $10, $26, 0
0001573F 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
00015744 F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
00015749 0000 0026 10               		dc.b 0,	0, 0, $26, $10
0001574E 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00015753 0800 0826 18               		dc.b 8,	0, 8, $26, $18
00015758 0800 0029 20               		dc.b 8,	0, 0, $29, $20
0001575D F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00015762 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
00015767 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
0001576C F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00015771 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
00015776 F800 1025 40               		dc.b $F8, 0, $10, $25, $40
0001577B 11                         byte_1453F:	dc.b $11
0001577C F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00015781 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
00015786 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
0001578B 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00015790 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
00015795 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001579A 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
0001579F F800 1025 30               		dc.b $F8, 0, $10, $25, $30
000157A4 0000 0025 30               		dc.b 0,	0, 0, $25, $30
000157A9 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000157AE 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000157B3 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000157B8 F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000157BD 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000157C2 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000157C7 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000157CC 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000157D1 09                         byte_14595:	dc.b 9
000157D2 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000157D7 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000157DC 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000157E1 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000157E6 FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000157EB FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000157F0 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000157F5 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000157FA 04                         		dc.b 4
000157FB 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
00015800                            		even
00015800                            		even
00015800                            
00015800                            Ani_obj08:
00015800                            	include "_anim\obj08.asm"
00015800                            ; ---------------------------------------------------------------------------
00015800                            ; Animation script - water splash (LZ)
00015800                            ; ---------------------------------------------------------------------------
00015800 0000                       		dc.w byte_145C6-Ani_obj08
00015802 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
00015808                            		even
00015808                            		even
00015808                            
00015808                            ; ---------------------------------------------------------------------------
00015808                            ; Sprite mappings - water splash (LZ)
00015808                            ; ---------------------------------------------------------------------------
00015808                            Map_obj08:
00015808                            	include "_maps\obj08.asm"
00015808                            ; ---------------------------------------------------------------------------
00015808                            ; Sprite mappings - water splash (LZ)
00015808                            ; ---------------------------------------------------------------------------
00015808 0000                       		dc.w byte_145D2-Map_obj08
0001580A 0000                       		dc.w byte_145DD-Map_obj08
0001580C 0000                       		dc.w byte_145E8-Map_obj08
0001580E 02                         byte_145D2:	dc.b 2
0001580F F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
00015814 FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
00015819 02                         byte_145DD:	dc.b 2
0001581A E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
0001581F EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
00015824 01                         byte_145E8:	dc.b 1
00015825 E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
0001582A                            		even
0001582A                            		even
0001582A                            
0001582A                            ; ---------------------------------------------------------------------------
0001582A                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
0001582A                            ; ---------------------------------------------------------------------------
0001582A                            
0001582A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001582A                            
0001582A                            
0001582A                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
0001582A 0828 0003 0022             		btst	#3,$22(a0)
00015830 6700                       		beq.s	loc_14602
00015832 7000                       		moveq	#0,d0
00015834 11C0 F768                  		move.b	d0,($FFFFF768).w
00015838 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001583C 4E75                       		rts	
0001583E                            ; ===========================================================================
0001583E                            
0001583E                            loc_14602:
0001583E 7003                       		moveq	#3,d0
00015840 11C0 F768                  		move.b	d0,($FFFFF768).w
00015844 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015848 1028 0026                  		move.b	$26(a0),d0
0001584C 0600 0020                  		addi.b	#$20,d0
00015850 6A00                       		bpl.s	loc_14624
00015852 1028 0026                  		move.b	$26(a0),d0
00015856 6A00                       		bpl.s	loc_1461E
00015858 5300                       		subq.b	#1,d0
0001585A                            
0001585A                            loc_1461E:
0001585A 0600 0020                  		addi.b	#$20,d0
0001585E 6000                       		bra.s	loc_14630
00015860                            ; ===========================================================================
00015860                            
00015860                            loc_14624:
00015860 1028 0026                  		move.b	$26(a0),d0
00015864 6A00                       		bpl.s	loc_1462C
00015866 5200                       		addq.b	#1,d0
00015868                            
00015868                            loc_1462C:
00015868 0600 001F                  		addi.b	#$1F,d0
0001586C                            
0001586C                            loc_14630:
0001586C 0200 00C0                  		andi.b	#$C0,d0
00015870 0C00 0040                  		cmpi.b	#$40,d0
00015874 6700 0000                  		beq.w	Sonic_WalkVertL
00015878 0C00 0080                  		cmpi.b	#$80,d0
0001587C 6700 0000                  		beq.w	Sonic_WalkCeiling
00015880 0C00 00C0                  		cmpi.b	#$C0,d0
00015884 6700 0000                  		beq.w	Sonic_WalkVertR
00015888 3428 000C                  		move.w	$C(a0),d2
0001588C 3628 0008                  		move.w	8(a0),d3
00015890 7000                       		moveq	#0,d0
00015892 1028 0016                  		move.b	$16(a0),d0
00015896 4880                       		ext.w	d0
00015898 D440                       		add.w	d0,d2
0001589A 1028 0017                  		move.b	$17(a0),d0
0001589E 4880                       		ext.w	d0
000158A0 D640                       		add.w	d0,d3
000158A2 49F8 F768                  		lea	($FFFFF768).w,a4
000158A6 367C 0010                  		movea.w	#$10,a3
000158AA 3C3C 0000                  		move.w	#0,d6
000158AE 7A0D                       		moveq	#$D,d5
000158B0 6100 0000                  		bsr.w	FindFloor
000158B4 3F01                       		move.w	d1,-(sp)
000158B6 3428 000C                  		move.w	$C(a0),d2
000158BA 3628 0008                  		move.w	8(a0),d3
000158BE 7000                       		moveq	#0,d0
000158C0 1028 0016                  		move.b	$16(a0),d0
000158C4 4880                       		ext.w	d0
000158C6 D440                       		add.w	d0,d2
000158C8 1028 0017                  		move.b	$17(a0),d0
000158CC 4880                       		ext.w	d0
000158CE 4440                       		neg.w	d0
000158D0 D640                       		add.w	d0,d3
000158D2 49F8 F76A                  		lea	($FFFFF76A).w,a4
000158D6 367C 0010                  		movea.w	#$10,a3
000158DA 3C3C 0000                  		move.w	#0,d6
000158DE 7A0D                       		moveq	#$D,d5
000158E0 6100 0000                  		bsr.w	FindFloor
000158E4 301F                       		move.w	(sp)+,d0
000158E6 6100 0000                  		bsr.w	Sonic_Angle
000158EA 4A41                       		tst.w	d1
000158EC 6700                       		beq.s	locret_146BE
000158EE 6A00                       		bpl.s	loc_146C0
000158F0 0C41 FFF2                  		cmpi.w	#-$E,d1
000158F4 6D00                       		blt.s	locret_146E6
000158F6 D368 000C                  		add.w	d1,$C(a0)
000158FA                            
000158FA                            locret_146BE:
000158FA 4E75                       		rts	
000158FC                            ; ===========================================================================
000158FC                            
000158FC                            loc_146C0:
000158FC 0C41 000E                  		cmpi.w	#$E,d1
00015900 6E00                       		bgt.s	loc_146CC
00015902                            
00015902                            loc_146C6:
00015902 D368 000C                  		add.w	d1,$C(a0)
00015906 4E75                       		rts	
00015908                            ; ===========================================================================
00015908                            
00015908                            loc_146CC:
00015908 4A28 0038                  		tst.b	$38(a0)
0001590C 66F4                       		bne.s	loc_146C6
0001590E 08E8 0001 0022             		bset	#1,$22(a0)
00015914 08A8 0005 0022             		bclr	#5,$22(a0)
0001591A 117C 0001 001D             		move.b	#1,$1D(a0)
00015920 4E75                       		rts	
00015922                            ; ===========================================================================
00015922                            
00015922                            locret_146E6:
00015922 4E75                       		rts	
00015924                            ; End of function Sonic_AnglePos
00015924                            
00015924                            ; ===========================================================================
00015924 2428 0008                  		move.l	8(a0),d2
00015928 3028 0010                  		move.w	$10(a0),d0
0001592C 48C0                       		ext.l	d0
0001592E E180                       		asl.l	#8,d0
00015930 9480                       		sub.l	d0,d2
00015932 2142 0008                  		move.l	d2,8(a0)
00015936 303C 0038                  		move.w	#$38,d0
0001593A 48C0                       		ext.l	d0
0001593C E180                       		asl.l	#8,d0
0001593E 9680                       		sub.l	d0,d3
00015940 2143 000C                  		move.l	d3,$C(a0)
00015944 4E75                       		rts	
00015946                            ; ===========================================================================
00015946                            
00015946                            locret_1470A:
00015946 4E75                       		rts	
00015948                            ; ===========================================================================
00015948 2628 000C                  		move.l	$C(a0),d3
0001594C 3028 0012                  		move.w	$12(a0),d0
00015950 0440 0038                  		subi.w	#$38,d0
00015954 3140 0012                  		move.w	d0,$12(a0)
00015958 48C0                       		ext.l	d0
0001595A E180                       		asl.l	#8,d0
0001595C 9680                       		sub.l	d0,d3
0001595E 2143 000C                  		move.l	d3,$C(a0)
00015962 4E75                       		rts	
00015964 4E75                       		rts	
00015966                            ; ===========================================================================
00015966 2428 0008                  		move.l	8(a0),d2
0001596A 2628 000C                  		move.l	$C(a0),d3
0001596E 3028 0010                  		move.w	$10(a0),d0
00015972 48C0                       		ext.l	d0
00015974 E180                       		asl.l	#8,d0
00015976 9480                       		sub.l	d0,d2
00015978 3028 0012                  		move.w	$12(a0),d0
0001597C 48C0                       		ext.l	d0
0001597E E180                       		asl.l	#8,d0
00015980 9680                       		sub.l	d0,d3
00015982 2142 0008                  		move.l	d2,8(a0)
00015986 2143 000C                  		move.l	d3,$C(a0)
0001598A 4E75                       		rts	
0001598C                            
0001598C                            ; ---------------------------------------------------------------------------
0001598C                            ; Subroutine to	change Sonic's angle as he walks along the floor
0001598C                            ; ---------------------------------------------------------------------------
0001598C                            
0001598C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001598C                            
0001598C                            
0001598C                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
0001598C 1438 F76A                  		move.b	($FFFFF76A).w,d2
00015990 B240                       		cmp.w	d0,d1
00015992 6F00                       		ble.s	loc_1475E
00015994 1438 F768                  		move.b	($FFFFF768).w,d2
00015998 3200                       		move.w	d0,d1
0001599A                            
0001599A                            loc_1475E:
0001599A 0802 0000                  		btst	#0,d2
0001599E 6600                       		bne.s	loc_1476A
000159A0 1142 0026                  		move.b	d2,$26(a0)
000159A4 4E75                       		rts	
000159A6                            ; ===========================================================================
000159A6                            
000159A6                            loc_1476A:
000159A6 1428 0026                  		move.b	$26(a0),d2
000159AA 0602 0020                  		addi.b	#$20,d2
000159AE 0202 00C0                  		andi.b	#$C0,d2
000159B2 1142 0026                  		move.b	d2,$26(a0)
000159B6 4E75                       		rts	
000159B8                            ; End of function Sonic_Angle
000159B8                            
000159B8                            ; ---------------------------------------------------------------------------
000159B8                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000159B8                            ; ---------------------------------------------------------------------------
000159B8                            
000159B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000159B8                            
000159B8                            
000159B8                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000159B8 3428 000C                  		move.w	$C(a0),d2
000159BC 3628 0008                  		move.w	8(a0),d3
000159C0 7000                       		moveq	#0,d0
000159C2 1028 0017                  		move.b	$17(a0),d0
000159C6 4880                       		ext.w	d0
000159C8 4440                       		neg.w	d0
000159CA D440                       		add.w	d0,d2
000159CC 1028 0016                  		move.b	$16(a0),d0
000159D0 4880                       		ext.w	d0
000159D2 D640                       		add.w	d0,d3
000159D4 49F8 F768                  		lea	($FFFFF768).w,a4
000159D8 367C 0010                  		movea.w	#$10,a3
000159DC 3C3C 0000                  		move.w	#0,d6
000159E0 7A0D                       		moveq	#$D,d5
000159E2 6100 0000                  		bsr.w	FindWall
000159E6 3F01                       		move.w	d1,-(sp)
000159E8 3428 000C                  		move.w	$C(a0),d2
000159EC 3628 0008                  		move.w	8(a0),d3
000159F0 7000                       		moveq	#0,d0
000159F2 1028 0017                  		move.b	$17(a0),d0
000159F6 4880                       		ext.w	d0
000159F8 D440                       		add.w	d0,d2
000159FA 1028 0016                  		move.b	$16(a0),d0
000159FE 4880                       		ext.w	d0
00015A00 D640                       		add.w	d0,d3
00015A02 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015A06 367C 0010                  		movea.w	#$10,a3
00015A0A 3C3C 0000                  		move.w	#0,d6
00015A0E 7A0D                       		moveq	#$D,d5
00015A10 6100 0000                  		bsr.w	FindWall
00015A14 301F                       		move.w	(sp)+,d0
00015A16 6100 FF74                  		bsr.w	Sonic_Angle
00015A1A 4A41                       		tst.w	d1
00015A1C 6700                       		beq.s	locret_147F0
00015A1E 6A00                       		bpl.s	loc_147F2
00015A20 0C41 FFF2                  		cmpi.w	#-$E,d1
00015A24 6D00 FF20                  		blt.w	locret_1470A
00015A28 D368 0008                  		add.w	d1,8(a0)
00015A2C                            
00015A2C                            locret_147F0:
00015A2C 4E75                       		rts	
00015A2E                            ; ===========================================================================
00015A2E                            
00015A2E                            loc_147F2:
00015A2E 0C41 000E                  		cmpi.w	#$E,d1
00015A32 6E00                       		bgt.s	loc_147FE
00015A34                            
00015A34                            loc_147F8:
00015A34 D368 0008                  		add.w	d1,8(a0)
00015A38 4E75                       		rts	
00015A3A                            ; ===========================================================================
00015A3A                            
00015A3A                            loc_147FE:
00015A3A 4A28 0038                  		tst.b	$38(a0)
00015A3E 66F4                       		bne.s	loc_147F8
00015A40 08E8 0001 0022             		bset	#1,$22(a0)
00015A46 08A8 0005 0022             		bclr	#5,$22(a0)
00015A4C 117C 0001 001D             		move.b	#1,$1D(a0)
00015A52 4E75                       		rts	
00015A54                            ; End of function Sonic_WalkVertR
00015A54                            
00015A54                            ; ---------------------------------------------------------------------------
00015A54                            ; Subroutine allowing Sonic to walk upside-down
00015A54                            ; ---------------------------------------------------------------------------
00015A54                            
00015A54                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015A54                            
00015A54                            
00015A54                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
00015A54 3428 000C                  		move.w	$C(a0),d2
00015A58 3628 0008                  		move.w	8(a0),d3
00015A5C 7000                       		moveq	#0,d0
00015A5E 1028 0016                  		move.b	$16(a0),d0
00015A62 4880                       		ext.w	d0
00015A64 9440                       		sub.w	d0,d2
00015A66 0A42 000F                  		eori.w	#$F,d2
00015A6A 1028 0017                  		move.b	$17(a0),d0
00015A6E 4880                       		ext.w	d0
00015A70 D640                       		add.w	d0,d3
00015A72 49F8 F768                  		lea	($FFFFF768).w,a4
00015A76 367C FFF0                  		movea.w	#-$10,a3
00015A7A 3C3C 1000                  		move.w	#$1000,d6
00015A7E 7A0D                       		moveq	#$D,d5
00015A80 6100 0000                  		bsr.w	FindFloor
00015A84 3F01                       		move.w	d1,-(sp)
00015A86 3428 000C                  		move.w	$C(a0),d2
00015A8A 3628 0008                  		move.w	8(a0),d3
00015A8E 7000                       		moveq	#0,d0
00015A90 1028 0016                  		move.b	$16(a0),d0
00015A94 4880                       		ext.w	d0
00015A96 9440                       		sub.w	d0,d2
00015A98 0A42 000F                  		eori.w	#$F,d2
00015A9C 1028 0017                  		move.b	$17(a0),d0
00015AA0 4880                       		ext.w	d0
00015AA2 9640                       		sub.w	d0,d3
00015AA4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015AA8 367C FFF0                  		movea.w	#-$10,a3
00015AAC 3C3C 1000                  		move.w	#$1000,d6
00015AB0 7A0D                       		moveq	#$D,d5
00015AB2 6100 0000                  		bsr.w	FindFloor
00015AB6 301F                       		move.w	(sp)+,d0
00015AB8 6100 FED2                  		bsr.w	Sonic_Angle
00015ABC 4A41                       		tst.w	d1
00015ABE 6700                       		beq.s	locret_14892
00015AC0 6A00                       		bpl.s	loc_14894
00015AC2 0C41 FFF2                  		cmpi.w	#-$E,d1
00015AC6 6D00 FE5A                  		blt.w	locret_146E6
00015ACA 9368 000C                  		sub.w	d1,$C(a0)
00015ACE                            
00015ACE                            locret_14892:
00015ACE 4E75                       		rts	
00015AD0                            ; ===========================================================================
00015AD0                            
00015AD0                            loc_14894:
00015AD0 0C41 000E                  		cmpi.w	#$E,d1
00015AD4 6E00                       		bgt.s	loc_148A0
00015AD6                            
00015AD6                            loc_1489A:
00015AD6 9368 000C                  		sub.w	d1,$C(a0)
00015ADA 4E75                       		rts	
00015ADC                            ; ===========================================================================
00015ADC                            
00015ADC                            loc_148A0:
00015ADC 4A28 0038                  		tst.b	$38(a0)
00015AE0 66F4                       		bne.s	loc_1489A
00015AE2 08E8 0001 0022             		bset	#1,$22(a0)
00015AE8 08A8 0005 0022             		bclr	#5,$22(a0)
00015AEE 117C 0001 001D             		move.b	#1,$1D(a0)
00015AF4 4E75                       		rts	
00015AF6                            ; End of function Sonic_WalkCeiling
00015AF6                            
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
00015AF6                            ; ---------------------------------------------------------------------------
00015AF6                            
00015AF6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015AF6                            
00015AF6                            
00015AF6                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
00015AF6 3428 000C                  		move.w	$C(a0),d2
00015AFA 3628 0008                  		move.w	8(a0),d3
00015AFE 7000                       		moveq	#0,d0
00015B00 1028 0017                  		move.b	$17(a0),d0
00015B04 4880                       		ext.w	d0
00015B06 9440                       		sub.w	d0,d2
00015B08 1028 0016                  		move.b	$16(a0),d0
00015B0C 4880                       		ext.w	d0
00015B0E 9640                       		sub.w	d0,d3
00015B10 0A43 000F                  		eori.w	#$F,d3
00015B14 49F8 F768                  		lea	($FFFFF768).w,a4
00015B18 367C FFF0                  		movea.w	#-$10,a3
00015B1C 3C3C 0800                  		move.w	#$800,d6
00015B20 7A0D                       		moveq	#$D,d5
00015B22 6100 0000                  		bsr.w	FindWall
00015B26 3F01                       		move.w	d1,-(sp)
00015B28 3428 000C                  		move.w	$C(a0),d2
00015B2C 3628 0008                  		move.w	8(a0),d3
00015B30 7000                       		moveq	#0,d0
00015B32 1028 0017                  		move.b	$17(a0),d0
00015B36 4880                       		ext.w	d0
00015B38 D440                       		add.w	d0,d2
00015B3A 1028 0016                  		move.b	$16(a0),d0
00015B3E 4880                       		ext.w	d0
00015B40 9640                       		sub.w	d0,d3
00015B42 0A43 000F                  		eori.w	#$F,d3
00015B46 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015B4A 367C FFF0                  		movea.w	#-$10,a3
00015B4E 3C3C 0800                  		move.w	#$800,d6
00015B52 7A0D                       		moveq	#$D,d5
00015B54 6100 0000                  		bsr.w	FindWall
00015B58 301F                       		move.w	(sp)+,d0
00015B5A 6100 FE30                  		bsr.w	Sonic_Angle
00015B5E 4A41                       		tst.w	d1
00015B60 6700                       		beq.s	locret_14934
00015B62 6A00                       		bpl.s	loc_14936
00015B64 0C41 FFF2                  		cmpi.w	#-$E,d1
00015B68 6D00 FDDC                  		blt.w	locret_1470A
00015B6C 9368 0008                  		sub.w	d1,8(a0)
00015B70                            
00015B70                            locret_14934:
00015B70 4E75                       		rts	
00015B72                            ; ===========================================================================
00015B72                            
00015B72                            loc_14936:
00015B72 0C41 000E                  		cmpi.w	#$E,d1
00015B76 6E00                       		bgt.s	loc_14942
00015B78                            
00015B78                            loc_1493C:
00015B78 9368 0008                  		sub.w	d1,8(a0)
00015B7C 4E75                       		rts	
00015B7E                            ; ===========================================================================
00015B7E                            
00015B7E                            loc_14942:
00015B7E 4A28 0038                  		tst.b	$38(a0)
00015B82 66F4                       		bne.s	loc_1493C
00015B84 08E8 0001 0022             		bset	#1,$22(a0)
00015B8A 08A8 0005 0022             		bclr	#5,$22(a0)
00015B90 117C 0001 001D             		move.b	#1,$1D(a0)
00015B96 4E75                       		rts	
00015B98                            ; End of function Sonic_WalkVertL
00015B98                            
00015B98                            ; ---------------------------------------------------------------------------
00015B98                            ; Subroutine to	find which tile	the object is standing on
00015B98                            ; ---------------------------------------------------------------------------
00015B98                            
00015B98                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015B98                            
00015B98                            
00015B98                            Floor_ChkTile:				; XREF: FindFloor; et al
00015B98 3002                       		move.w	d2,d0
00015B9A E248                       		lsr.w	#1,d0
00015B9C 0240 0380                  		andi.w	#$380,d0
00015BA0 3203                       		move.w	d3,d1
00015BA2 E049                       		lsr.w	#8,d1
00015BA4 0241 007F                  		andi.w	#$7F,d1
00015BA8 D041                       		add.w	d1,d0
00015BAA 72FF                       		moveq	#-1,d1
00015BAC 43F8 A400                  		lea	($FFFFA400).w,a1
00015BB0 1231 0000                  		move.b	(a1,d0.w),d1
00015BB4 6700                       		beq.s	loc_14996
00015BB6 6B00                       		bmi.s	loc_1499A
00015BB8 5301                       		subq.b	#1,d1
00015BBA 4881                       		ext.w	d1
00015BBC EE59                       		ror.w	#7,d1
00015BBE 3002                       		move.w	d2,d0
00015BC0 D040                       		add.w	d0,d0
00015BC2 0240 01E0                  		andi.w	#$1E0,d0
00015BC6 D240                       		add.w	d0,d1
00015BC8 3003                       		move.w	d3,d0
00015BCA E648                       		lsr.w	#3,d0
00015BCC 0240 001E                  		andi.w	#$1E,d0
00015BD0 D240                       		add.w	d0,d1
00015BD2                            
00015BD2                            loc_14996:
00015BD2 2241                       		movea.l	d1,a1
00015BD4 4E75                       		rts	
00015BD6                            ; ===========================================================================
00015BD6                            
00015BD6                            loc_1499A:
00015BD6 0241 007F                  		andi.w	#$7F,d1
00015BDA 0828 0006 0001             		btst	#6,1(a0)
00015BE0 6700                       		beq.s	loc_149B2
00015BE2 5241                       		addq.w	#1,d1
00015BE4 0C41 0029                  		cmpi.w	#$29,d1
00015BE8 6600                       		bne.s	loc_149B2
00015BEA 323C 0051                  		move.w	#$51,d1
00015BEE                            
00015BEE                            loc_149B2:
00015BEE 5301                       		subq.b	#1,d1
00015BF0 EE59                       		ror.w	#7,d1
00015BF2 3002                       		move.w	d2,d0
00015BF4 D040                       		add.w	d0,d0
00015BF6 0240 01E0                  		andi.w	#$1E0,d0
00015BFA D240                       		add.w	d0,d1
00015BFC 3003                       		move.w	d3,d0
00015BFE E648                       		lsr.w	#3,d0
00015C00 0240 001E                  		andi.w	#$1E,d0
00015C04 D240                       		add.w	d0,d1
00015C06 2241                       		movea.l	d1,a1
00015C08 4E75                       		rts	
00015C0A                            ; End of function Floor_ChkTile
00015C0A                            
00015C0A                            
00015C0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015C0A                            
00015C0A                            
00015C0A                            FindFloor:				; XREF: Sonic_AnglePos; et al
00015C0A 618C                       		bsr.s	Floor_ChkTile
00015C0C 3011                       		move.w	(a1),d0
00015C0E 3800                       		move.w	d0,d4
00015C10 0240 07FF                  		andi.w	#$7FF,d0
00015C14 6700                       		beq.s	loc_149DE
00015C16 0B04                       		btst	d5,d4
00015C18 6600                       		bne.s	loc_149EC
00015C1A                            
00015C1A                            loc_149DE:
00015C1A D44B                       		add.w	a3,d2
00015C1C 6100 0000                  		bsr.w	FindFloor2
00015C20 944B                       		sub.w	a3,d2
00015C22 0641 0010                  		addi.w	#$10,d1
00015C26 4E75                       		rts	
00015C28                            ; ===========================================================================
00015C28                            
00015C28                            loc_149EC:
00015C28 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00015C2C 1032 0000                  		move.b	(a2,d0.w),d0
00015C30 0240 00FF                  		andi.w	#$FF,d0
00015C34 67E4                       		beq.s	loc_149DE
00015C36 45F9 0000 0000             		lea	(AngleMap).l,a2
00015C3C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015C40 E948                       		lsl.w	#4,d0
00015C42 3203                       		move.w	d3,d1
00015C44 0804 000B                  		btst	#$B,d4
00015C48 6700                       		beq.s	loc_14A12
00015C4A 4641                       		not.w	d1
00015C4C 4414                       		neg.b	(a4)
00015C4E                            
00015C4E                            loc_14A12:
00015C4E 0804 000C                  		btst	#$C,d4
00015C52 6700                       		beq.s	loc_14A22
00015C54 0614 0040                  		addi.b	#$40,(a4)
00015C58 4414                       		neg.b	(a4)
00015C5A 0414 0040                  		subi.b	#$40,(a4)
00015C5E                            
00015C5E                            loc_14A22:
00015C5E 0241 000F                  		andi.w	#$F,d1
00015C62 D240                       		add.w	d0,d1
00015C64 45F9 0000 0000             		lea	(CollArray1).l,a2
00015C6A 1032 1000                  		move.b	(a2,d1.w),d0
00015C6E 4880                       		ext.w	d0
00015C70 BD44                       		eor.w	d6,d4
00015C72 0804 000C                  		btst	#$C,d4
00015C76 6700                       		beq.s	loc_14A3E
00015C78 4440                       		neg.w	d0
00015C7A                            
00015C7A                            loc_14A3E:
00015C7A 4A40                       		tst.w	d0
00015C7C 679C                       		beq.s	loc_149DE
00015C7E 6B00                       		bmi.s	loc_14A5A
00015C80 0C00 0010                  		cmpi.b	#$10,d0
00015C84 6700                       		beq.s	loc_14A66
00015C86 3202                       		move.w	d2,d1
00015C88 0241 000F                  		andi.w	#$F,d1
00015C8C D041                       		add.w	d1,d0
00015C8E 323C 000F                  		move.w	#$F,d1
00015C92 9240                       		sub.w	d0,d1
00015C94 4E75                       		rts	
00015C96                            ; ===========================================================================
00015C96                            
00015C96                            loc_14A5A:
00015C96 3202                       		move.w	d2,d1
00015C98 0241 000F                  		andi.w	#$F,d1
00015C9C D041                       		add.w	d1,d0
00015C9E 6A00 FF7A                  		bpl.w	loc_149DE
00015CA2                            
00015CA2                            loc_14A66:
00015CA2 944B                       		sub.w	a3,d2
00015CA4 6100 0000                  		bsr.w	FindFloor2
00015CA8 D44B                       		add.w	a3,d2
00015CAA 0441 0010                  		subi.w	#$10,d1
00015CAE 4E75                       		rts	
00015CB0                            ; End of function FindFloor
00015CB0                            
00015CB0                            
00015CB0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015CB0                            
00015CB0                            
00015CB0                            FindFloor2:				; XREF: FindFloor
00015CB0 6100 FEE6                  		bsr.w	Floor_ChkTile
00015CB4 3011                       		move.w	(a1),d0
00015CB6 3800                       		move.w	d0,d4
00015CB8 0240 07FF                  		andi.w	#$7FF,d0
00015CBC 6700                       		beq.s	loc_14A86
00015CBE 0B04                       		btst	d5,d4
00015CC0 6600                       		bne.s	loc_14A94
00015CC2                            
00015CC2                            loc_14A86:
00015CC2 323C 000F                  		move.w	#$F,d1
00015CC6 3002                       		move.w	d2,d0
00015CC8 0240 000F                  		andi.w	#$F,d0
00015CCC 9240                       		sub.w	d0,d1
00015CCE 4E75                       		rts	
00015CD0                            ; ===========================================================================
00015CD0                            
00015CD0                            loc_14A94:
00015CD0 2478 F796                  		movea.l	($FFFFF796).w,a2
00015CD4 1032 0000                  		move.b	(a2,d0.w),d0
00015CD8 0240 00FF                  		andi.w	#$FF,d0
00015CDC 67E4                       		beq.s	loc_14A86
00015CDE 45F9 0000 0000             		lea	(AngleMap).l,a2
00015CE4 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015CE8 E948                       		lsl.w	#4,d0
00015CEA 3203                       		move.w	d3,d1
00015CEC 0804 000B                  		btst	#$B,d4
00015CF0 6700                       		beq.s	loc_14ABA
00015CF2 4641                       		not.w	d1
00015CF4 4414                       		neg.b	(a4)
00015CF6                            
00015CF6                            loc_14ABA:
00015CF6 0804 000C                  		btst	#$C,d4
00015CFA 6700                       		beq.s	loc_14ACA
00015CFC 0614 0040                  		addi.b	#$40,(a4)
00015D00 4414                       		neg.b	(a4)
00015D02 0414 0040                  		subi.b	#$40,(a4)
00015D06                            
00015D06                            loc_14ACA:
00015D06 0241 000F                  		andi.w	#$F,d1
00015D0A D240                       		add.w	d0,d1
00015D0C 45F9 0000 0000             		lea	(CollArray1).l,a2
00015D12 1032 1000                  		move.b	(a2,d1.w),d0
00015D16 4880                       		ext.w	d0
00015D18 BD44                       		eor.w	d6,d4
00015D1A 0804 000C                  		btst	#$C,d4
00015D1E 6700                       		beq.s	loc_14AE6
00015D20 4440                       		neg.w	d0
00015D22                            
00015D22                            loc_14AE6:
00015D22 4A40                       		tst.w	d0
00015D24 679C                       		beq.s	loc_14A86
00015D26 6B00                       		bmi.s	loc_14AFC
00015D28 3202                       		move.w	d2,d1
00015D2A 0241 000F                  		andi.w	#$F,d1
00015D2E D041                       		add.w	d1,d0
00015D30 323C 000F                  		move.w	#$F,d1
00015D34 9240                       		sub.w	d0,d1
00015D36 4E75                       		rts	
00015D38                            ; ===========================================================================
00015D38                            
00015D38                            loc_14AFC:
00015D38 3202                       		move.w	d2,d1
00015D3A 0241 000F                  		andi.w	#$F,d1
00015D3E D041                       		add.w	d1,d0
00015D40 6A00 FF80                  		bpl.w	loc_14A86
00015D44 4641                       		not.w	d1
00015D46 4E75                       		rts	
00015D48                            ; End of function FindFloor2
00015D48                            
00015D48                            
00015D48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015D48                            
00015D48                            
00015D48                            FindWall:				; XREF: Sonic_WalkVertR; et al
00015D48 6100 FE4E                  		bsr.w	Floor_ChkTile
00015D4C 3011                       		move.w	(a1),d0
00015D4E 3800                       		move.w	d0,d4
00015D50 0240 07FF                  		andi.w	#$7FF,d0
00015D54 6700                       		beq.s	loc_14B1E
00015D56 0B04                       		btst	d5,d4
00015D58 6600                       		bne.s	loc_14B2C
00015D5A                            
00015D5A                            loc_14B1E:
00015D5A D64B                       		add.w	a3,d3
00015D5C 6100 0000                  		bsr.w	FindWall2
00015D60 964B                       		sub.w	a3,d3
00015D62 0641 0010                  		addi.w	#$10,d1
00015D66 4E75                       		rts	
00015D68                            ; ===========================================================================
00015D68                            
00015D68                            loc_14B2C:
00015D68 2478 F796                  		movea.l	($FFFFF796).w,a2
00015D6C 1032 0000                  		move.b	(a2,d0.w),d0
00015D70 0240 00FF                  		andi.w	#$FF,d0
00015D74 67E4                       		beq.s	loc_14B1E
00015D76 45F9 0000 0000             		lea	(AngleMap).l,a2
00015D7C 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015D80 E948                       		lsl.w	#4,d0
00015D82 3202                       		move.w	d2,d1
00015D84 0804 000C                  		btst	#$C,d4
00015D88 6700                       		beq.s	loc_14B5A
00015D8A 4641                       		not.w	d1
00015D8C 0614 0040                  		addi.b	#$40,(a4)
00015D90 4414                       		neg.b	(a4)
00015D92 0414 0040                  		subi.b	#$40,(a4)
00015D96                            
00015D96                            loc_14B5A:
00015D96 0804 000B                  		btst	#$B,d4
00015D9A 6700                       		beq.s	loc_14B62
00015D9C 4414                       		neg.b	(a4)
00015D9E                            
00015D9E                            loc_14B62:
00015D9E 0241 000F                  		andi.w	#$F,d1
00015DA2 D240                       		add.w	d0,d1
00015DA4 45F9 0000 0000             		lea	(CollArray2).l,a2
00015DAA 1032 1000                  		move.b	(a2,d1.w),d0
00015DAE 4880                       		ext.w	d0
00015DB0 BD44                       		eor.w	d6,d4
00015DB2 0804 000B                  		btst	#$B,d4
00015DB6 6700                       		beq.s	loc_14B7E
00015DB8 4440                       		neg.w	d0
00015DBA                            
00015DBA                            loc_14B7E:
00015DBA 4A40                       		tst.w	d0
00015DBC 679C                       		beq.s	loc_14B1E
00015DBE 6B00                       		bmi.s	loc_14B9A
00015DC0 0C00 0010                  		cmpi.b	#$10,d0
00015DC4 6700                       		beq.s	loc_14BA6
00015DC6 3203                       		move.w	d3,d1
00015DC8 0241 000F                  		andi.w	#$F,d1
00015DCC D041                       		add.w	d1,d0
00015DCE 323C 000F                  		move.w	#$F,d1
00015DD2 9240                       		sub.w	d0,d1
00015DD4 4E75                       		rts	
00015DD6                            ; ===========================================================================
00015DD6                            
00015DD6                            loc_14B9A:
00015DD6 3203                       		move.w	d3,d1
00015DD8 0241 000F                  		andi.w	#$F,d1
00015DDC D041                       		add.w	d1,d0
00015DDE 6A00 FF7A                  		bpl.w	loc_14B1E
00015DE2                            
00015DE2                            loc_14BA6:
00015DE2 964B                       		sub.w	a3,d3
00015DE4 6100 0000                  		bsr.w	FindWall2
00015DE8 D64B                       		add.w	a3,d3
00015DEA 0441 0010                  		subi.w	#$10,d1
00015DEE 4E75                       		rts	
00015DF0                            ; End of function FindWall
00015DF0                            
00015DF0                            
00015DF0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015DF0                            
00015DF0                            
00015DF0                            FindWall2:				; XREF: FindWall
00015DF0 6100 FDA6                  		bsr.w	Floor_ChkTile
00015DF4 3011                       		move.w	(a1),d0
00015DF6 3800                       		move.w	d0,d4
00015DF8 0240 07FF                  		andi.w	#$7FF,d0
00015DFC 6700                       		beq.s	loc_14BC6
00015DFE 0B04                       		btst	d5,d4
00015E00 6600                       		bne.s	loc_14BD4
00015E02                            
00015E02                            loc_14BC6:
00015E02 323C 000F                  		move.w	#$F,d1
00015E06 3003                       		move.w	d3,d0
00015E08 0240 000F                  		andi.w	#$F,d0
00015E0C 9240                       		sub.w	d0,d1
00015E0E 4E75                       		rts	
00015E10                            ; ===========================================================================
00015E10                            
00015E10                            loc_14BD4:
00015E10 2478 F796                  		movea.l	($FFFFF796).w,a2
00015E14 1032 0000                  		move.b	(a2,d0.w),d0
00015E18 0240 00FF                  		andi.w	#$FF,d0
00015E1C 67E4                       		beq.s	loc_14BC6
00015E1E 45F9 0000 0000             		lea	(AngleMap).l,a2
00015E24 18B2 0000                  		move.b	(a2,d0.w),(a4)
00015E28 E948                       		lsl.w	#4,d0
00015E2A 3202                       		move.w	d2,d1
00015E2C 0804 000C                  		btst	#$C,d4
00015E30 6700                       		beq.s	loc_14C02
00015E32 4641                       		not.w	d1
00015E34 0614 0040                  		addi.b	#$40,(a4)
00015E38 4414                       		neg.b	(a4)
00015E3A 0414 0040                  		subi.b	#$40,(a4)
00015E3E                            
00015E3E                            loc_14C02:
00015E3E 0804 000B                  		btst	#$B,d4
00015E42 6700                       		beq.s	loc_14C0A
00015E44 4414                       		neg.b	(a4)
00015E46                            
00015E46                            loc_14C0A:
00015E46 0241 000F                  		andi.w	#$F,d1
00015E4A D240                       		add.w	d0,d1
00015E4C 45F9 0000 0000             		lea	(CollArray2).l,a2
00015E52 1032 1000                  		move.b	(a2,d1.w),d0
00015E56 4880                       		ext.w	d0
00015E58 BD44                       		eor.w	d6,d4
00015E5A 0804 000B                  		btst	#$B,d4
00015E5E 6700                       		beq.s	loc_14C26
00015E60 4440                       		neg.w	d0
00015E62                            
00015E62                            loc_14C26:
00015E62 4A40                       		tst.w	d0
00015E64 679C                       		beq.s	loc_14BC6
00015E66 6B00                       		bmi.s	loc_14C3C
00015E68 3203                       		move.w	d3,d1
00015E6A 0241 000F                  		andi.w	#$F,d1
00015E6E D041                       		add.w	d1,d0
00015E70 323C 000F                  		move.w	#$F,d1
00015E74 9240                       		sub.w	d0,d1
00015E76 4E75                       		rts	
00015E78                            ; ===========================================================================
00015E78                            
00015E78                            loc_14C3C:
00015E78 3203                       		move.w	d3,d1
00015E7A 0241 000F                  		andi.w	#$F,d1
00015E7E D041                       		add.w	d1,d0
00015E80 6A00 FF80                  		bpl.w	loc_14BC6
00015E84 4641                       		not.w	d1
00015E86 4E75                       		rts	
00015E88                            ; End of function FindWall2
00015E88                            
00015E88                            ; ---------------------------------------------------------------------------
00015E88                            ; Unused floor/wall subroutine - logs something	to do with collision
00015E88                            ; ---------------------------------------------------------------------------
00015E88                            
00015E88                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015E88                            
00015E88                            
00015E88                            FloorLog_Unk:				; XREF: Level
00015E88 4E75                       		rts	
00015E8A                            
00015E8A 43F9 0000 0000             		lea	(CollArray1).l,a1
00015E90 45F9 0000 0000             		lea	(CollArray1).l,a2
00015E96 363C 00FF                  		move.w	#$FF,d3
00015E9A                            
00015E9A                            loc_14C5E:
00015E9A 7A10                       		moveq	#$10,d5
00015E9C 343C 000F                  		move.w	#$F,d2
00015EA0                            
00015EA0                            loc_14C64:
00015EA0 7800                       		moveq	#0,d4
00015EA2 323C 000F                  		move.w	#$F,d1
00015EA6                            
00015EA6                            loc_14C6A:
00015EA6 3019                       		move.w	(a1)+,d0
00015EA8 EAA8                       		lsr.l	d5,d0
00015EAA D944                       		addx.w	d4,d4
00015EAC 51C9 FFF8                  		dbf	d1,loc_14C6A
00015EB0                            
00015EB0 34C4                       		move.w	d4,(a2)+
00015EB2 92FC 0020                  		suba.w	#$20,a1
00015EB6 5345                       		subq.w	#1,d5
00015EB8 51CA FFE6                  		dbf	d2,loc_14C64
00015EBC                            
00015EBC D2FC 0020                  		adda.w	#$20,a1
00015EC0 51CB FFD8                  		dbf	d3,loc_14C5E
00015EC4                            
00015EC4 43F9 0000 0000             		lea	(CollArray1).l,a1
00015ECA 45F9 0000 0000             		lea	(CollArray2).l,a2
00015ED0 6100                       		bsr.s	FloorLog_Unk2
00015ED2 43F9 0000 0000             		lea	(CollArray1).l,a1
00015ED8 45F9 0000 0000             		lea	(CollArray1).l,a2
00015EDE                            
00015EDE                            ; End of function FloorLog_Unk
00015EDE                            
00015EDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015EDE                            
00015EDE                            
00015EDE                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00015EDE 363C 0FFF                  		move.w	#$FFF,d3
00015EE2                            
00015EE2                            loc_14CA6:
00015EE2 7400                       		moveq	#0,d2
00015EE4 323C 000F                  		move.w	#$F,d1
00015EE8 3019                       		move.w	(a1)+,d0
00015EEA 6700                       		beq.s	loc_14CD4
00015EEC 6B00                       		bmi.s	loc_14CBE
00015EEE                            
00015EEE                            loc_14CB2:
00015EEE E248                       		lsr.w	#1,d0
00015EF0 6400                       		bcc.s	loc_14CB8
00015EF2 5202                       		addq.b	#1,d2
00015EF4                            
00015EF4                            loc_14CB8:
00015EF4 51C9 FFF8                  		dbf	d1,loc_14CB2
00015EF8                            
00015EF8 6000                       		bra.s	loc_14CD6
00015EFA                            ; ===========================================================================
00015EFA                            
00015EFA                            loc_14CBE:
00015EFA 0C40 FFFF                  		cmpi.w	#-1,d0
00015EFE 6700                       		beq.s	loc_14CD0
00015F00                            
00015F00                            loc_14CC4:
00015F00 E348                       		lsl.w	#1,d0
00015F02 6400                       		bcc.s	loc_14CCA
00015F04 5302                       		subq.b	#1,d2
00015F06                            
00015F06                            loc_14CCA:
00015F06 51C9 FFF8                  		dbf	d1,loc_14CC4
00015F0A                            
00015F0A 6000                       		bra.s	loc_14CD6
00015F0C                            ; ===========================================================================
00015F0C                            
00015F0C                            loc_14CD0:
00015F0C 303C 0010                  		move.w	#$10,d0
00015F10                            
00015F10                            loc_14CD4:
00015F10 3400                       		move.w	d0,d2
00015F12                            
00015F12                            loc_14CD6:
00015F12 14C2                       		move.b	d2,(a2)+
00015F14 51CB FFCC                  		dbf	d3,loc_14CA6
00015F18                            
00015F18 4E75                       		rts	
00015F1A                            
00015F1A                            ; End of function FloorLog_Unk2
00015F1A                            
00015F1A                            
00015F1A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F1A                            
00015F1A                            
00015F1A                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00015F1A 2628 0008                  		move.l	8(a0),d3
00015F1E 2428 000C                  		move.l	$C(a0),d2
00015F22 3228 0010                  		move.w	$10(a0),d1
00015F26 48C1                       		ext.l	d1
00015F28 E181                       		asl.l	#8,d1
00015F2A D681                       		add.l	d1,d3
00015F2C 3228 0012                  		move.w	$12(a0),d1
00015F30 48C1                       		ext.l	d1
00015F32 E181                       		asl.l	#8,d1
00015F34 D481                       		add.l	d1,d2
00015F36 4842                       		swap	d2
00015F38 4843                       		swap	d3
00015F3A 11C0 F768                  		move.b	d0,($FFFFF768).w
00015F3E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015F42 1200                       		move.b	d0,d1
00015F44 0600 0020                  		addi.b	#$20,d0
00015F48 6A00                       		bpl.s	loc_14D1A
00015F4A 1001                       		move.b	d1,d0
00015F4C 6A00                       		bpl.s	loc_14D14
00015F4E 5300                       		subq.b	#1,d0
00015F50                            
00015F50                            loc_14D14:
00015F50 0600 0020                  		addi.b	#$20,d0
00015F54 6000                       		bra.s	loc_14D24
00015F56                            ; ===========================================================================
00015F56                            
00015F56                            loc_14D1A:
00015F56 1001                       		move.b	d1,d0
00015F58 6A00                       		bpl.s	loc_14D20
00015F5A 5200                       		addq.b	#1,d0
00015F5C                            
00015F5C                            loc_14D20:
00015F5C 0600 001F                  		addi.b	#$1F,d0
00015F60                            
00015F60                            loc_14D24:
00015F60 0200 00C0                  		andi.b	#$C0,d0
00015F64 6700 0000                  		beq.w	loc_14DF0
00015F68 0C00 0080                  		cmpi.b	#$80,d0
00015F6C 6700 0000                  		beq.w	loc_14F7C
00015F70 0201 0038                  		andi.b	#$38,d1
00015F74 6600                       		bne.s	loc_14D3C
00015F76 5042                       		addq.w	#8,d2
00015F78                            
00015F78                            loc_14D3C:
00015F78 0C00 0040                  		cmpi.b	#$40,d0
00015F7C 6700 0000                  		beq.w	loc_1504A
00015F80 6000 0000                  		bra.w	loc_14EBC
00015F84                            
00015F84                            ; End of function Sonic_WalkSpeed
00015F84                            
00015F84                            
00015F84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015F84                            
00015F84                            
00015F84                            sub_14D48:				; XREF: Sonic_Jump
00015F84 11C0 F768                  		move.b	d0,($FFFFF768).w
00015F88 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00015F8C 0600 0020                  		addi.b	#$20,d0
00015F90 0200 00C0                  		andi.b	#$C0,d0
00015F94 0C00 0040                  		cmpi.b	#$40,d0
00015F98 6700 0000                  		beq.w	loc_14FD6
00015F9C 0C00 0080                  		cmpi.b	#$80,d0
00015FA0 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00015FA4 0C00 00C0                  		cmpi.b	#$C0,d0
00015FA8 6700 0000                  		beq.w	sub_14E50
00015FAC                            
00015FAC                            ; End of function sub_14D48
00015FAC                            
00015FAC                            ; ---------------------------------------------------------------------------
00015FAC                            ; Subroutine to	make Sonic land	on the floor after jumping
00015FAC                            ; ---------------------------------------------------------------------------
00015FAC                            
00015FAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015FAC                            
00015FAC                            
00015FAC                            Sonic_HitFloor:				; XREF: Sonic_Floor
00015FAC 3428 000C                  		move.w	$C(a0),d2
00015FB0 3628 0008                  		move.w	8(a0),d3
00015FB4 7000                       		moveq	#0,d0
00015FB6 1028 0016                  		move.b	$16(a0),d0
00015FBA 4880                       		ext.w	d0
00015FBC D440                       		add.w	d0,d2
00015FBE 1028 0017                  		move.b	$17(a0),d0
00015FC2 4880                       		ext.w	d0
00015FC4 D640                       		add.w	d0,d3
00015FC6 49F8 F768                  		lea	($FFFFF768).w,a4
00015FCA 367C 0010                  		movea.w	#$10,a3
00015FCE 3C3C 0000                  		move.w	#0,d6
00015FD2 7A0D                       		moveq	#$D,d5
00015FD4 6100 FC34                  		bsr.w	FindFloor
00015FD8 3F01                       		move.w	d1,-(sp)
00015FDA 3428 000C                  		move.w	$C(a0),d2
00015FDE 3628 0008                  		move.w	8(a0),d3
00015FE2 7000                       		moveq	#0,d0
00015FE4 1028 0016                  		move.b	$16(a0),d0
00015FE8 4880                       		ext.w	d0
00015FEA D440                       		add.w	d0,d2
00015FEC 1028 0017                  		move.b	$17(a0),d0
00015FF0 4880                       		ext.w	d0
00015FF2 9640                       		sub.w	d0,d3
00015FF4 49F8 F76A                  		lea	($FFFFF76A).w,a4
00015FF8 367C 0010                  		movea.w	#$10,a3
00015FFC 3C3C 0000                  		move.w	#0,d6
00016000 7A0D                       		moveq	#$D,d5
00016002 6100 FC06                  		bsr.w	FindFloor
00016006 301F                       		move.w	(sp)+,d0
00016008 143C 0000                  		move.b	#0,d2
0001600C                            
0001600C                            loc_14DD0:
0001600C 1638 F76A                  		move.b	($FFFFF76A).w,d3
00016010 B240                       		cmp.w	d0,d1
00016012 6F00                       		ble.s	loc_14DDE
00016014 1638 F768                  		move.b	($FFFFF768).w,d3
00016018 C141                       		exg	d0,d1
0001601A                            
0001601A                            loc_14DDE:
0001601A 0803 0000                  		btst	#0,d3
0001601E 6700                       		beq.s	locret_14DE6
00016020 1602                       		move.b	d2,d3
00016022                            
00016022                            locret_14DE6:
00016022 4E75                       		rts	
00016024                            
00016024                            ; End of function Sonic_HitFloor
00016024                            
00016024                            ; ===========================================================================
00016024 3428 000C                  		move.w	$C(a0),d2
00016028 3628 0008                  		move.w	8(a0),d3
0001602C                            
0001602C                            loc_14DF0:				; XREF: Sonic_WalkSpeed
0001602C 0642 000A                  		addi.w	#$A,d2
00016030 49F8 F768                  		lea	($FFFFF768).w,a4
00016034 367C 0010                  		movea.w	#$10,a3
00016038 3C3C 0000                  		move.w	#0,d6
0001603C 7A0E                       		moveq	#$E,d5
0001603E 6100 FBCA                  		bsr.w	FindFloor
00016042 143C 0000                  		move.b	#0,d2
00016046                            
00016046                            loc_14E0A:				; XREF: sub_14EB4
00016046 1638 F768                  		move.b	($FFFFF768).w,d3
0001604A 0803 0000                  		btst	#0,d3
0001604E 6700                       		beq.s	locret_14E16
00016050 1602                       		move.b	d2,d3
00016052                            
00016052                            locret_14E16:
00016052 4E75                       		rts	
00016054                            
00016054                            ; ---------------------------------------------------------------------------
00016054                            ; Subroutine allowing objects to interact with the floor
00016054                            ; ---------------------------------------------------------------------------
00016054                            
00016054                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016054                            
00016054                            
00016054                            ObjHitFloor:
00016054 3628 0008                  		move.w	8(a0),d3
00016058                            
00016058                            ; End of function ObjHitFloor
00016058                            
00016058                            
00016058                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016058                            
00016058                            
00016058                            ObjHitFloor2:
00016058 3428 000C                  		move.w	$C(a0),d2
0001605C 7000                       		moveq	#0,d0
0001605E 1028 0016                  		move.b	$16(a0),d0
00016062 4880                       		ext.w	d0
00016064 D440                       		add.w	d0,d2
00016066 49F8 F768                  		lea	($FFFFF768).w,a4
0001606A 18BC 0000                  		move.b	#0,(a4)
0001606E 367C 0010                  		movea.w	#$10,a3
00016072 3C3C 0000                  		move.w	#0,d6
00016076 7A0D                       		moveq	#$D,d5
00016078 6100 FB90                  		bsr.w	FindFloor
0001607C 1638 F768                  		move.b	($FFFFF768).w,d3
00016080 0803 0000                  		btst	#0,d3
00016084 6700                       		beq.s	locret_14E4E
00016086 163C 0000                  		move.b	#0,d3
0001608A                            
0001608A                            locret_14E4E:
0001608A 4E75                       		rts	
0001608C                            ; End of function ObjHitFloor2
0001608C                            
0001608C                            
0001608C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001608C                            
0001608C                            
0001608C                            sub_14E50:				; XREF: sub_14D48
0001608C 3428 000C                  		move.w	$C(a0),d2
00016090 3628 0008                  		move.w	8(a0),d3
00016094 7000                       		moveq	#0,d0
00016096 1028 0017                  		move.b	$17(a0),d0
0001609A 4880                       		ext.w	d0
0001609C 9440                       		sub.w	d0,d2
0001609E 1028 0016                  		move.b	$16(a0),d0
000160A2 4880                       		ext.w	d0
000160A4 D640                       		add.w	d0,d3
000160A6 49F8 F768                  		lea	($FFFFF768).w,a4
000160AA 367C 0010                  		movea.w	#$10,a3
000160AE 3C3C 0000                  		move.w	#0,d6
000160B2 7A0E                       		moveq	#$E,d5
000160B4 6100 FC92                  		bsr.w	FindWall
000160B8 3F01                       		move.w	d1,-(sp)
000160BA 3428 000C                  		move.w	$C(a0),d2
000160BE 3628 0008                  		move.w	8(a0),d3
000160C2 7000                       		moveq	#0,d0
000160C4 1028 0017                  		move.b	$17(a0),d0
000160C8 4880                       		ext.w	d0
000160CA D440                       		add.w	d0,d2
000160CC 1028 0016                  		move.b	$16(a0),d0
000160D0 4880                       		ext.w	d0
000160D2 D640                       		add.w	d0,d3
000160D4 49F8 F76A                  		lea	($FFFFF76A).w,a4
000160D8 367C 0010                  		movea.w	#$10,a3
000160DC 3C3C 0000                  		move.w	#0,d6
000160E0 7A0E                       		moveq	#$E,d5
000160E2 6100 FC64                  		bsr.w	FindWall
000160E6 301F                       		move.w	(sp)+,d0
000160E8 143C 00C0                  		move.b	#-$40,d2
000160EC 6000 FF1E                  		bra.w	loc_14DD0
000160F0                            
000160F0                            ; End of function sub_14E50
000160F0                            
000160F0                            
000160F0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000160F0                            
000160F0                            
000160F0                            sub_14EB4:				; XREF: Sonic_Floor
000160F0 3428 000C                  		move.w	$C(a0),d2
000160F4 3628 0008                  		move.w	8(a0),d3
000160F8                            
000160F8                            loc_14EBC:
000160F8 0643 000A                  		addi.w	#$A,d3
000160FC 49F8 F768                  		lea	($FFFFF768).w,a4
00016100 367C 0010                  		movea.w	#$10,a3
00016104 3C3C 0000                  		move.w	#0,d6
00016108 7A0E                       		moveq	#$E,d5
0001610A 6100 FC3C                  		bsr.w	FindWall
0001610E 143C 00C0                  		move.b	#-$40,d2
00016112 6000 FF32                  		bra.w	loc_14E0A
00016116                            
00016116                            ; End of function sub_14EB4
00016116                            
00016116                            ; ---------------------------------------------------------------------------
00016116                            ; Subroutine to	detect when an object hits a wall to its right
00016116                            ; ---------------------------------------------------------------------------
00016116                            
00016116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016116                            
00016116                            
00016116                            ObjHitWallRight:
00016116 D668 0008                  		add.w	8(a0),d3
0001611A 3428 000C                  		move.w	$C(a0),d2
0001611E 49F8 F768                  		lea	($FFFFF768).w,a4
00016122 18BC 0000                  		move.b	#0,(a4)
00016126 367C 0010                  		movea.w	#$10,a3
0001612A 3C3C 0000                  		move.w	#0,d6
0001612E 7A0E                       		moveq	#$E,d5
00016130 6100 FC16                  		bsr.w	FindWall
00016134 1638 F768                  		move.b	($FFFFF768).w,d3
00016138 0803 0000                  		btst	#0,d3
0001613C 6700                       		beq.s	locret_14F06
0001613E 163C 00C0                  		move.b	#-$40,d3
00016142                            
00016142                            locret_14F06:
00016142 4E75                       		rts	
00016144                            
00016144                            ; End of function ObjHitWallRight
00016144                            
00016144                            ; ---------------------------------------------------------------------------
00016144                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00016144                            ; touches them
00016144                            ; ---------------------------------------------------------------------------
00016144                            
00016144                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016144                            
00016144                            
00016144                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00016144 3428 000C                  		move.w	$C(a0),d2
00016148 3628 0008                  		move.w	8(a0),d3
0001614C 7000                       		moveq	#0,d0
0001614E 1028 0016                  		move.b	$16(a0),d0
00016152 4880                       		ext.w	d0
00016154 9440                       		sub.w	d0,d2
00016156 0A42 000F                  		eori.w	#$F,d2
0001615A 1028 0017                  		move.b	$17(a0),d0
0001615E 4880                       		ext.w	d0
00016160 D640                       		add.w	d0,d3
00016162 49F8 F768                  		lea	($FFFFF768).w,a4
00016166 367C FFF0                  		movea.w	#-$10,a3
0001616A 3C3C 1000                  		move.w	#$1000,d6
0001616E 7A0E                       		moveq	#$E,d5
00016170 6100 FA98                  		bsr.w	FindFloor
00016174 3F01                       		move.w	d1,-(sp)
00016176 3428 000C                  		move.w	$C(a0),d2
0001617A 3628 0008                  		move.w	8(a0),d3
0001617E 7000                       		moveq	#0,d0
00016180 1028 0016                  		move.b	$16(a0),d0
00016184 4880                       		ext.w	d0
00016186 9440                       		sub.w	d0,d2
00016188 0A42 000F                  		eori.w	#$F,d2
0001618C 1028 0017                  		move.b	$17(a0),d0
00016190 4880                       		ext.w	d0
00016192 9640                       		sub.w	d0,d3
00016194 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016198 367C FFF0                  		movea.w	#-$10,a3
0001619C 3C3C 1000                  		move.w	#$1000,d6
000161A0 7A0E                       		moveq	#$E,d5
000161A2 6100 FA66                  		bsr.w	FindFloor
000161A6 301F                       		move.w	(sp)+,d0
000161A8 143C 0080                  		move.b	#-$80,d2
000161AC 6000 FE5E                  		bra.w	loc_14DD0
000161B0                            ; End of function Sonic_DontRunOnWalls
000161B0                            
000161B0                            ; ===========================================================================
000161B0 3428 000C                  		move.w	$C(a0),d2
000161B4 3628 0008                  		move.w	8(a0),d3
000161B8                            
000161B8                            loc_14F7C:
000161B8 0442 000A                  		subi.w	#$A,d2
000161BC 0A42 000F                  		eori.w	#$F,d2
000161C0 49F8 F768                  		lea	($FFFFF768).w,a4
000161C4 367C FFF0                  		movea.w	#-$10,a3
000161C8 3C3C 1000                  		move.w	#$1000,d6
000161CC 7A0E                       		moveq	#$E,d5
000161CE 6100 FA3A                  		bsr.w	FindFloor
000161D2 143C 0080                  		move.b	#-$80,d2
000161D6 6000 FE6E                  		bra.w	loc_14E0A
000161DA                            
000161DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000161DA                            
000161DA                            
000161DA                            ObjHitCeiling:
000161DA 3428 000C                  		move.w	$C(a0),d2
000161DE 3628 0008                  		move.w	8(a0),d3
000161E2 7000                       		moveq	#0,d0
000161E4 1028 0016                  		move.b	$16(a0),d0
000161E8 4880                       		ext.w	d0
000161EA 9440                       		sub.w	d0,d2
000161EC 0A42 000F                  		eori.w	#$F,d2
000161F0 49F8 F768                  		lea	($FFFFF768).w,a4
000161F4 367C FFF0                  		movea.w	#-$10,a3
000161F8 3C3C 1000                  		move.w	#$1000,d6
000161FC 7A0E                       		moveq	#$E,d5
000161FE 6100 FA0A                  		bsr.w	FindFloor
00016202 1638 F768                  		move.b	($FFFFF768).w,d3
00016206 0803 0000                  		btst	#0,d3
0001620A 6700                       		beq.s	locret_14FD4
0001620C 163C 0080                  		move.b	#-$80,d3
00016210                            
00016210                            locret_14FD4:
00016210 4E75                       		rts	
00016212                            ; End of function ObjHitCeiling
00016212                            
00016212                            ; ===========================================================================
00016212                            
00016212                            loc_14FD6:				; XREF: sub_14D48
00016212 3428 000C                  		move.w	$C(a0),d2
00016216 3628 0008                  		move.w	8(a0),d3
0001621A 7000                       		moveq	#0,d0
0001621C 1028 0017                  		move.b	$17(a0),d0
00016220 4880                       		ext.w	d0
00016222 9440                       		sub.w	d0,d2
00016224 1028 0016                  		move.b	$16(a0),d0
00016228 4880                       		ext.w	d0
0001622A 9640                       		sub.w	d0,d3
0001622C 0A43 000F                  		eori.w	#$F,d3
00016230 49F8 F768                  		lea	($FFFFF768).w,a4
00016234 367C FFF0                  		movea.w	#-$10,a3
00016238 3C3C 0800                  		move.w	#$800,d6
0001623C 7A0E                       		moveq	#$E,d5
0001623E 6100 FB08                  		bsr.w	FindWall
00016242 3F01                       		move.w	d1,-(sp)
00016244 3428 000C                  		move.w	$C(a0),d2
00016248 3628 0008                  		move.w	8(a0),d3
0001624C 7000                       		moveq	#0,d0
0001624E 1028 0017                  		move.b	$17(a0),d0
00016252 4880                       		ext.w	d0
00016254 D440                       		add.w	d0,d2
00016256 1028 0016                  		move.b	$16(a0),d0
0001625A 4880                       		ext.w	d0
0001625C 9640                       		sub.w	d0,d3
0001625E 0A43 000F                  		eori.w	#$F,d3
00016262 49F8 F76A                  		lea	($FFFFF76A).w,a4
00016266 367C FFF0                  		movea.w	#-$10,a3
0001626A 3C3C 0800                  		move.w	#$800,d6
0001626E 7A0E                       		moveq	#$E,d5
00016270 6100 FAD6                  		bsr.w	FindWall
00016274 301F                       		move.w	(sp)+,d0
00016276 143C 0040                  		move.b	#$40,d2
0001627A 6000 FD90                  		bra.w	loc_14DD0
0001627E                            
0001627E                            ; ---------------------------------------------------------------------------
0001627E                            ; Subroutine to	stop Sonic when	he jumps at a wall
0001627E                            ; ---------------------------------------------------------------------------
0001627E                            
0001627E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001627E                            
0001627E                            
0001627E                            Sonic_HitWall:				; XREF: Sonic_Floor
0001627E 3428 000C                  		move.w	$C(a0),d2
00016282 3628 0008                  		move.w	8(a0),d3
00016286                            
00016286                            loc_1504A:
00016286 0443 000A                  		subi.w	#$A,d3
0001628A 0A43 000F                  		eori.w	#$F,d3
0001628E 49F8 F768                  		lea	($FFFFF768).w,a4
00016292 367C FFF0                  		movea.w	#-$10,a3
00016296 3C3C 0800                  		move.w	#$800,d6
0001629A 7A0E                       		moveq	#$E,d5
0001629C 6100 FAAA                  		bsr.w	FindWall
000162A0 143C 0040                  		move.b	#$40,d2
000162A4 6000 FDA0                  		bra.w	loc_14E0A
000162A8                            ; End of function Sonic_HitWall
000162A8                            
000162A8                            ; ---------------------------------------------------------------------------
000162A8                            ; Subroutine to	detect when an object hits a wall to its left
000162A8                            ; ---------------------------------------------------------------------------
000162A8                            
000162A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000162A8                            
000162A8                            
000162A8                            ObjHitWallLeft:
000162A8 D668 0008                  		add.w	8(a0),d3
000162AC 3428 000C                  		move.w	$C(a0),d2
000162B0 49F8 F768                  		lea	($FFFFF768).w,a4
000162B4 18BC 0000                  		move.b	#0,(a4)
000162B8 367C FFF0                  		movea.w	#-$10,a3
000162BC 3C3C 0800                  		move.w	#$800,d6
000162C0 7A0E                       		moveq	#$E,d5
000162C2 6100 FA84                  		bsr.w	FindWall
000162C6 1638 F768                  		move.b	($FFFFF768).w,d3
000162CA 0803 0000                  		btst	#0,d3
000162CE 6700                       		beq.s	locret_15098
000162D0 163C 0040                  		move.b	#$40,d3
000162D4                            
000162D4                            locret_15098:
000162D4 4E75                       		rts	
000162D6                            ; End of function ObjHitWallLeft
000162D6                            
000162D6                            ; ===========================================================================
000162D6                            ; ---------------------------------------------------------------------------
000162D6                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
000162D6                            ; ---------------------------------------------------------------------------
000162D6                            
000162D6                            Obj66:					; XREF: Obj_Index
000162D6 7000                       		moveq	#0,d0
000162D8 1028 0024                  		move.b	$24(a0),d0
000162DC 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
000162E0 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
000162E4                            ; ===========================================================================
000162E4 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
000162E6 0000                       		dc.w Obj66_Action-Obj66_Index
000162E8 0000                       		dc.w Obj66_Display-Obj66_Index
000162EA 0000                       		dc.w Obj66_Release-Obj66_Index
000162EC                            ; ===========================================================================
000162EC                            
000162EC                            Obj66_Main:				; XREF: Obj66_Index
000162EC 5428 0024                  		addq.b	#2,$24(a0)
000162F0 323C 0001                  		move.w	#1,d1
000162F4 2248                       		movea.l	a0,a1
000162F6 6000                       		bra.s	Obj66_MakeItem
000162F8                            ; ===========================================================================
000162F8                            
000162F8                            Obj66_Loop:
000162F8 6100 88CE                  		bsr.w	SingleObjLoad
000162FC 6600                       		bne.s	loc_150FE
000162FE 12BC 0066                  		move.b	#$66,0(a1)
00016302 5829 0024                  		addq.b	#4,$24(a1)
00016306 3368 0008 0008             		move.w	8(a0),8(a1)
0001630C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00016312 137C 0003 0018             		move.b	#3,$18(a1)
00016318 137C 0010 001A             		move.b	#$10,$1A(a1)
0001631E                            
0001631E                            Obj66_MakeItem:				; XREF: Obj66_Main
0001631E 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
00016326 337C 4348 0002             		move.w	#$4348,2(a1)
0001632C 0029 0004 0001             		ori.b	#4,1(a1)
00016332 137C 0038 0019             		move.b	#$38,$19(a1)
00016338                            
00016338                            loc_150FE:
00016338 51C9 FFBE                  		dbf	d1,Obj66_Loop
0001633C                            
0001633C 117C 0030 0019             		move.b	#$30,$19(a0)
00016342 117C 0004 0018             		move.b	#4,$18(a0)
00016348 317C 003C 0030             		move.w	#$3C,$30(a0)
0001634E 117C 0001 0034             		move.b	#1,$34(a0)
00016354 1168 0028 0038             		move.b	$28(a0),$38(a0)
0001635A                            
0001635A                            Obj66_Action:				; XREF: Obj66_Index
0001635A 6100 0000                  		bsr.w	Obj66_ChkSwitch
0001635E 4A28 0001                  		tst.b	1(a0)
00016362 6A00 0000                  		bpl.w	Obj66_Display
00016366 323C 0030                  		move.w	#$30,d1
0001636A 3401                       		move.w	d1,d2
0001636C 3602                       		move.w	d2,d3
0001636E 5243                       		addq.w	#1,d3
00016370 3828 0008                  		move.w	8(a0),d4
00016374 6100 A79C                  		bsr.w	SolidObject
00016378 0828 0005 0022             		btst	#5,$22(a0)
0001637E 6700 0000                  		beq.w	Obj66_Display
00016382 43F8 D000                  		lea	($FFFFD000).w,a1
00016386 720E                       		moveq	#$E,d1
00016388 3029 0008                  		move.w	8(a1),d0
0001638C B068 0008                  		cmp.w	8(a0),d0
00016390 6500                       		bcs.s	Obj66_GrabSonic
00016392 7207                       		moveq	#7,d1
00016394                            
00016394                            Obj66_GrabSonic:
00016394 B228 001A                  		cmp.b	$1A(a0),d1
00016398 6600                       		bne.s	Obj66_Display
0001639A 1141 0032                  		move.b	d1,$32(a0)
0001639E 5828 0024                  		addq.b	#4,$24(a0)
000163A2 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
000163A8 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000163AE 337C 0800 0014             		move.w	#$800,$14(a1)
000163B4 337C 0000 0010             		move.w	#0,$10(a1)
000163BA 337C 0000 0012             		move.w	#0,$12(a1)
000163C0 08A8 0005 0022             		bclr	#5,$22(a0)
000163C6 08A9 0005 0022             		bclr	#5,$22(a1)
000163CC 08E9 0001 0022             		bset	#1,$22(a1)
000163D2 3429 0008                  		move.w	8(a1),d2
000163D6 3629 000C                  		move.w	$C(a1),d3
000163DA 6100 0000                  		bsr.w	Obj66_ChgPos
000163DE D569 0008                  		add.w	d2,8(a1)
000163E2 D769 000C                  		add.w	d3,$C(a1)
000163E6 E0E9 0008                  		asr	8(a1)
000163EA E0E9 000C                  		asr	$C(a1)
000163EE                            
000163EE                            Obj66_Display:				; XREF: Obj66_Index
000163EE 6000 A3FA                  		bra.w	MarkObjGone
000163F2                            ; ===========================================================================
000163F2                            
000163F2                            Obj66_Release:				; XREF: Obj66_Index
000163F2 1028 001A                  		move.b	$1A(a0),d0
000163F6 0C00 0004                  		cmpi.b	#4,d0
000163FA 6700                       		beq.s	loc_151C8
000163FC 0C00 0007                  		cmpi.b	#7,d0
00016400 6600                       		bne.s	loc_151F8
00016402                            
00016402                            loc_151C8:
00016402 B028 0032                  		cmp.b	$32(a0),d0
00016406 6700                       		beq.s	loc_151F8
00016408 43F8 D000                  		lea	($FFFFD000).w,a1
0001640C 337C 0000 0010             		move.w	#0,$10(a1)
00016412 337C 0800 0012             		move.w	#$800,$12(a1)
00016418 0C00 0004                  		cmpi.b	#4,d0
0001641C 6700                       		beq.s	loc_151F0
0001641E 337C 0800 0010             		move.w	#$800,$10(a1)
00016424 337C 0800 0012             		move.w	#$800,$12(a1)
0001642A                            
0001642A                            loc_151F0:
0001642A 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
0001642E 5928 0024                  		subq.b	#4,$24(a0)
00016432                            
00016432                            loc_151F8:
00016432 6100                       		bsr.s	Obj66_ChkSwitch
00016434 6100                       		bsr.s	Obj66_ChgPos
00016436 6000 A3B2                  		bra.w	MarkObjGone
0001643A                            
0001643A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001643A                            
0001643A                            
0001643A                            Obj66_ChkSwitch:			; XREF: Obj66_Action
0001643A 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001643E 7000                       		moveq	#0,d0
00016440 1028 0038                  		move.b	$38(a0),d0
00016444 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
0001644A 6700                       		beq.s	loc_15224	; if not, branch
0001644C 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00016450 6600                       		bne.s	Obj66_Animate	; if yes, branch
00016452 4428 0034                  		neg.b	$34(a0)
00016456 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
0001645C 6000                       		bra.s	Obj66_Animate
0001645E                            ; ===========================================================================
0001645E                            
0001645E                            loc_15224:
0001645E 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00016462                            
00016462                            Obj66_Animate:
00016462 5328 001E                  		subq.b	#1,$1E(a0)
00016466 6A00                       		bpl.s	locret_15246
00016468 117C 0007 001E             		move.b	#7,$1E(a0)
0001646E 1228 0034                  		move.b	$34(a0),d1
00016472 1028 001A                  		move.b	$1A(a0),d0
00016476 D001                       		add.b	d1,d0
00016478 0200 000F                  		andi.b	#$F,d0
0001647C 1140 001A                  		move.b	d0,$1A(a0)
00016480                            
00016480                            locret_15246:
00016480 4E75                       		rts	
00016482                            ; End of function Obj66_ChkSwitch
00016482                            
00016482                            
00016482                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016482                            
00016482                            
00016482                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00016482 43F8 D000                  		lea	($FFFFD000).w,a1
00016486 7000                       		moveq	#0,d0
00016488 1028 001A                  		move.b	$1A(a0),d0
0001648C D040                       		add.w	d0,d0
0001648E 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00016492 101A                       		move.b	(a2)+,d0
00016494 4880                       		ext.w	d0
00016496 D068 0008                  		add.w	8(a0),d0
0001649A 3340 0008                  		move.w	d0,8(a1)
0001649E 101A                       		move.b	(a2)+,d0
000164A0 4880                       		ext.w	d0
000164A2 D068 000C                  		add.w	$C(a0),d0
000164A6 3340 000C                  		move.w	d0,$C(a1)
000164AA 4E75                       		rts	
000164AC                            ; End of function Obj66_ChgPos
000164AC                            
000164AC                            ; ===========================================================================
000164AC E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000164B0 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000164B4 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000164B8 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000164BC 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000164C0 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000164C4 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000164C8 E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000164CC                            ; ---------------------------------------------------------------------------
000164CC                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000164CC                            ; ---------------------------------------------------------------------------
000164CC                            Map_obj66:
000164CC                            	include "_maps\obj66.asm"
000164CC                            ; ---------------------------------------------------------------------------
000164CC                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000164CC                            ; ---------------------------------------------------------------------------
000164CC 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000164D0 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000164D4 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000164D8 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000164DC 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000164E0 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000164E4 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000164E8 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000164EC 0000                       		dc.w byte_154A4-Map_obj66
000164EE 06                         byte_152B4:	dc.b 6
000164EF E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000164F4 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000164F9 E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000164FE E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
00016503 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
00016508 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
0001650D 06                         byte_152D3:	dc.b 6
0001650E F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00016513 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
00016518 F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
0001651D F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00016522 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
00016527 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
0001652C 06                         byte_152F2:	dc.b 6
0001652D 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00016532 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
00016537 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
0001653C 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00016541 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
00016546 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
0001654B 06                         byte_15311:	dc.b 6
0001654C 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00016551 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
00016556 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
0001655B 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00016560 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
00016565 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
0001656A 06                         byte_15330:	dc.b 6
0001656B 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00016570 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
00016575 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
0001657A 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
0001657F 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
00016584 200A 1800 00               		dc.b $20, $A, $18, 0, 0
00016589 06                         byte_1534F:	dc.b 6
0001658A 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
0001658F 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
00016594 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
00016599 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
0001659E 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
000165A3 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
000165A8 06                         byte_1536E:	dc.b 6
000165A9 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000165AE 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000165B3 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000165B8 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000165BD 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000165C2 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000165C7 06                         byte_1538D:	dc.b 6
000165C8 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000165CD F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000165D2 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000165D7 F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000165DC 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000165E1 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000165E6 06                         byte_153AC:	dc.b 6
000165E7 E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000165EC 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000165F1 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000165F6 E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000165FB 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
00016600 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
00016605 06                         byte_153CB:	dc.b 6
00016606 D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
0001660B E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00016610 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
00016615 DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
0001661A F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
0001661F F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
00016624 06                         byte_153EA:	dc.b 6
00016625 D009 1834 00               		dc.b $D0, 9, $18, $34, 0
0001662A E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
0001662F D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
00016634 D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
00016639 E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
0001663E E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00016643 06                         byte_15409:	dc.b 6
00016644 D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
00016649 D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
0001664E CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00016653 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
00016658 E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
0001665D E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00016662 06                         byte_15428:	dc.b 6
00016663 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
00016668 D005 1845 08               		dc.b $D0, 5, $18, $45, 8
0001666D C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00016672 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
00016677 E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
0001667C E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00016681 06                         byte_15447:	dc.b 6
00016682 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
00016687 D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
0001668C CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00016691 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
00016696 E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
0001669B E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
000166A0 06                         byte_15466:	dc.b 6
000166A1 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
000166A6 D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000166AB D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000166B0 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000166B5 E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000166BA E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000166BF 06                         byte_15485:	dc.b 6
000166C0 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000166C5 D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000166CA DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000166CF DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000166D4 F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000166D9 F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000166DE 0C                         byte_154A4:	dc.b $C
000166DF C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000166E4 D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000166E9 E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000166EE C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000166F3 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000166F8 E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000166FD 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
00016702 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
00016707 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
0001670C 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00016711 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
00016716 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
0001671C 00                         		even
0001671C 00                         		even
0001671C                            
0001671C                            ; ===========================================================================
0001671C                            ; ---------------------------------------------------------------------------
0001671C                            ; Object 67 - disc that	you run	around (SBZ)
0001671C                            ; ---------------------------------------------------------------------------
0001671C                            
0001671C                            Obj67:					; XREF: Obj_Index
0001671C 7000                       		moveq	#0,d0
0001671E 1028 0024                  		move.b	$24(a0),d0
00016722 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
00016726 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
0001672A                            ; ===========================================================================
0001672A 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
0001672C 0000                       		dc.w Obj67_Action-Obj67_Index
0001672E                            ; ===========================================================================
0001672E                            
0001672E                            Obj67_Main:				; XREF: Obj67_Index
0001672E 5428 0024                  		addq.b	#2,$24(a0)
00016732 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
0001673A 317C C344 0002             		move.w	#$C344,2(a0)
00016740 117C 0004 0001             		move.b	#4,1(a0)
00016746 117C 0004 0018             		move.b	#4,$18(a0)
0001674C 117C 0008 0019             		move.b	#8,$19(a0)
00016752 3168 0008 0032             		move.w	8(a0),$32(a0)
00016758 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001675E 117C 0018 0034             		move.b	#$18,$34(a0)
00016764 117C 0048 0038             		move.b	#$48,$38(a0)
0001676A 1228 0028                  		move.b	$28(a0),d1	; get object type
0001676E 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00016772 6700                       		beq.s	loc_15546
00016774 117C 0010 0034             		move.b	#$10,$34(a0)
0001677A 117C 0038 0038             		move.b	#$38,$38(a0)
00016780                            
00016780                            loc_15546:
00016780 1228 0028                  		move.b	$28(a0),d1	; get object type
00016784 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00016788 4881                       		ext.w	d1
0001678A E741                       		asl.w	#3,d1
0001678C 3141 0036                  		move.w	d1,$36(a0)
00016790 1028 0022                  		move.b	$22(a0),d0
00016794 E418                       		ror.b	#2,d0
00016796 0200 00C0                  		andi.b	#-$40,d0
0001679A 1140 0026                  		move.b	d0,$26(a0)
0001679E                            
0001679E                            Obj67_Action:				; XREF: Obj67_Index
0001679E 6100 0000                  		bsr.w	Obj67_MoveSonic
000167A2 6100 0000                  		bsr.w	Obj67_MoveSpot
000167A6 6000 0000                  		bra.w	Obj67_ChkDel
000167AA                            ; ===========================================================================
000167AA                            
000167AA                            Obj67_MoveSonic:			; XREF: Obj67_Action
000167AA 7400                       		moveq	#0,d2
000167AC 1428 0038                  		move.b	$38(a0),d2
000167B0 3602                       		move.w	d2,d3
000167B2 D643                       		add.w	d3,d3
000167B4 43F8 D000                  		lea	($FFFFD000).w,a1
000167B8 3029 0008                  		move.w	8(a1),d0
000167BC 9068 0032                  		sub.w	$32(a0),d0
000167C0 D042                       		add.w	d2,d0
000167C2 B043                       		cmp.w	d3,d0
000167C4 6400                       		bcc.s	loc_155A8
000167C6 3229 000C                  		move.w	$C(a1),d1
000167CA 9268 0030                  		sub.w	$30(a0),d1
000167CE D242                       		add.w	d2,d1
000167D0 B243                       		cmp.w	d3,d1
000167D2 6400                       		bcc.s	loc_155A8
000167D4 0829 0001 0022             		btst	#1,$22(a1)
000167DA 6700                       		beq.s	loc_155B8
000167DC 4228 003A                  		clr.b	$3A(a0)
000167E0 4E75                       		rts	
000167E2                            ; ===========================================================================
000167E2                            
000167E2                            loc_155A8:
000167E2 4A28 003A                  		tst.b	$3A(a0)
000167E6 6700                       		beq.s	locret_155B6
000167E8 4229 0038                  		clr.b	$38(a1)
000167EC 4228 003A                  		clr.b	$3A(a0)
000167F0                            
000167F0                            locret_155B6:
000167F0 4E75                       		rts	
000167F2                            ; ===========================================================================
000167F2                            
000167F2                            loc_155B8:
000167F2 4A28 003A                  		tst.b	$3A(a0)
000167F6 6600                       		bne.s	loc_155E2
000167F8 117C 0001 003A             		move.b	#1,$3A(a0)
000167FE 0829 0002 0022             		btst	#2,$22(a1)
00016804 6600                       		bne.s	loc_155D0
00016806 4229 001C                  		clr.b	$1C(a1)
0001680A                            
0001680A                            loc_155D0:
0001680A 08A9 0005 0022             		bclr	#5,$22(a1)
00016810 137C 0001 001D             		move.b	#1,$1D(a1)
00016816 137C 0001 0038             		move.b	#1,$38(a1)
0001681C                            
0001681C                            loc_155E2:
0001681C 3029 0014                  		move.w	$14(a1),d0
00016820 4A68 0036                  		tst.w	$36(a0)
00016824 6A00                       		bpl.s	loc_15608
00016826 0C40 FC00                  		cmpi.w	#-$400,d0
0001682A 6F00                       		ble.s	loc_155FA
0001682C 337C FC00 0014             		move.w	#-$400,$14(a1)
00016832 4E75                       		rts	
00016834                            ; ===========================================================================
00016834                            
00016834                            loc_155FA:
00016834 0C40 F100                  		cmpi.w	#-$F00,d0
00016838 6C00                       		bge.s	locret_15606
0001683A 337C F100 0014             		move.w	#-$F00,$14(a1)
00016840                            
00016840                            locret_15606:
00016840 4E75                       		rts	
00016842                            ; ===========================================================================
00016842                            
00016842                            loc_15608:
00016842 0C40 0400                  		cmpi.w	#$400,d0
00016846 6C00                       		bge.s	loc_15616
00016848 337C 0400 0014             		move.w	#$400,$14(a1)
0001684E 4E75                       		rts	
00016850                            ; ===========================================================================
00016850                            
00016850                            loc_15616:
00016850 0C40 0F00                  		cmpi.w	#$F00,d0
00016854 6F00                       		ble.s	locret_15622
00016856 337C 0F00 0014             		move.w	#$F00,$14(a1)
0001685C                            
0001685C                            locret_15622:
0001685C 4E75                       		rts	
0001685E                            ; ===========================================================================
0001685E                            
0001685E                            Obj67_MoveSpot:				; XREF: Obj67_Action
0001685E 3028 0036                  		move.w	$36(a0),d0
00016862 D168 0026                  		add.w	d0,$26(a0)
00016866 1028 0026                  		move.b	$26(a0),d0
0001686A 4EB9 0000 3416             		jsr	(CalcSine).l
00016870 3428 0030                  		move.w	$30(a0),d2
00016874 3628 0032                  		move.w	$32(a0),d3
00016878 7800                       		moveq	#0,d4
0001687A 1828 0034                  		move.b	$34(a0),d4
0001687E E14C                       		lsl.w	#8,d4
00016880 2A04                       		move.l	d4,d5
00016882 C9C0                       		muls.w	d0,d4
00016884 4844                       		swap	d4
00016886 CBC1                       		muls.w	d1,d5
00016888 4845                       		swap	d5
0001688A D842                       		add.w	d2,d4
0001688C DA43                       		add.w	d3,d5
0001688E 3144 000C                  		move.w	d4,$C(a0)
00016892 3145 0008                  		move.w	d5,8(a0)
00016896 4E75                       		rts	
00016898                            ; ===========================================================================
00016898                            
00016898                            Obj67_ChkDel:				; XREF: Obj67_Action
00016898 3028 0032                  		move.w	$32(a0),d0
0001689C 0240 FF80                  		andi.w	#-$80,d0
000168A0 3238 F700                  		move.w	($FFFFF700).w,d1
000168A4 0441 0080                  		subi.w	#$80,d1
000168A8 0241 FF80                  		andi.w	#-$80,d1
000168AC 9041                       		sub.w	d1,d0
000168AE 0C40 0280                  		cmpi.w	#$280,d0
000168B2 6200                       		bhi.s	Obj67_Delete
000168B4 4EF9 0000 E742             		jmp	DisplaySprite
000168BA                            ; ===========================================================================
000168BA                            
000168BA                            Obj67_Delete:
000168BA 4EF9 0000 E77E             		jmp	DeleteObject
000168C0                            ; ===========================================================================
000168C0                            ; ---------------------------------------------------------------------------
000168C0                            ; Sprite mappings - disc that you run around (SBZ)
000168C0                            ; (It's just a small blob that moves around in a circle. The disc itself is
000168C0                            ; part of the level tiles.)
000168C0                            ; ---------------------------------------------------------------------------
000168C0                            Map_obj67:
000168C0                            	include "_maps\obj67.asm"
000168C0                            ; ---------------------------------------------------------------------------
000168C0                            ; Sprite mappings - disc that you run around (SBZ)
000168C0                            ; (It's just a small blob that moves around in a circle. The disc itself is
000168C0                            ; part of the level tiles.)
000168C0                            ; ---------------------------------------------------------------------------
000168C0 0000                       		dc.w byte_15688-Map_obj67
000168C2 01                         byte_15688:	dc.b 1
000168C3 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000168C8                            		even
000168C8                            		even
000168C8                            
000168C8                            ; ===========================================================================
000168C8                            ; ---------------------------------------------------------------------------
000168C8                            ; Object 68 - conveyor belts (SBZ)
000168C8                            ; ---------------------------------------------------------------------------
000168C8                            
000168C8                            Obj68:					; XREF: Obj_Index
000168C8 7000                       		moveq	#0,d0
000168CA 1028 0024                  		move.b	$24(a0),d0
000168CE 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000168D2 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000168D6                            ; ===========================================================================
000168D6 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000168D8 0000                       		dc.w Obj68_Action-Obj68_Index
000168DA                            ; ===========================================================================
000168DA                            
000168DA                            Obj68_Main:				; XREF: Obj68_Index
000168DA 5428 0024                  		addq.b	#2,$24(a0)
000168DE 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000168E4 1228 0028                  		move.b	$28(a0),d1	; get object type
000168E8 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000168EC 6700                       		beq.s	loc_156BA	; if zero, branch
000168EE 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000168F4                            
000168F4                            loc_156BA:
000168F4 1228 0028                  		move.b	$28(a0),d1	; get object type
000168F8 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000168FC 4881                       		ext.w	d1
000168FE E841                       		asr.w	#4,d1
00016900 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
00016904                            
00016904                            Obj68_Action:				; XREF: Obj68_Index
00016904 6100                       		bsr.s	Obj68_MoveSonic
00016906 3028 0008                  		move.w	8(a0),d0
0001690A 0240 FF80                  		andi.w	#$FF80,d0
0001690E 3238 F700                  		move.w	($FFFFF700).w,d1
00016912 0441 0080                  		subi.w	#$80,d1
00016916 0241 FF80                  		andi.w	#$FF80,d1
0001691A 9041                       		sub.w	d1,d0
0001691C 0C40 0280                  		cmpi.w	#$280,d0
00016920 6200                       		bhi.s	Obj68_Delete
00016922 4E75                       		rts	
00016924                            ; ===========================================================================
00016924                            
00016924                            Obj68_Delete:
00016924 4EF9 0000 E77E             		jmp	DeleteObject
0001692A                            ; ===========================================================================
0001692A                            
0001692A                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001692A 7400                       		moveq	#0,d2
0001692C 1428 0038                  		move.b	$38(a0),d2
00016930 3602                       		move.w	d2,d3
00016932 D643                       		add.w	d3,d3
00016934 43F8 D000                  		lea	($FFFFD000).w,a1
00016938 3029 0008                  		move.w	8(a1),d0
0001693C 9068 0008                  		sub.w	8(a0),d0
00016940 D042                       		add.w	d2,d0
00016942 B043                       		cmp.w	d3,d0
00016944 6400                       		bcc.s	locret_1572E
00016946 3229 000C                  		move.w	$C(a1),d1
0001694A 9268 000C                  		sub.w	$C(a0),d1
0001694E 0641 0030                  		addi.w	#$30,d1
00016952 0C41 0030                  		cmpi.w	#$30,d1
00016956 6400                       		bcc.s	locret_1572E
00016958 0829 0001 0022             		btst	#1,$22(a1)
0001695E 6600                       		bne.s	locret_1572E
00016960 3028 0036                  		move.w	$36(a0),d0
00016964 D169 0008                  		add.w	d0,8(a1)
00016968                            
00016968                            locret_1572E:
00016968 4E75                       		rts	
0001696A                            
0001696A                            ; ===========================================================================
0001696A                            ; ---------------------------------------------------------------------------
0001696A                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001696A                            ; ---------------------------------------------------------------------------
0001696A                            
0001696A                            Obj69:					; XREF: Obj_Index
0001696A 7000                       		moveq	#0,d0
0001696C 1028 0024                  		move.b	$24(a0),d0
00016970 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00016974 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
00016978                            ; ===========================================================================
00016978 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001697A 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
0001697C 0000                       		dc.w Obj69_Spinner-Obj69_Index
0001697E                            ; ===========================================================================
0001697E                            
0001697E                            Obj69_Main:				; XREF: Obj69_Index
0001697E 5428 0024                  		addq.b	#2,$24(a0)
00016982 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001698A 317C 4492 0002             		move.w	#$4492,2(a0)
00016990 0028 0004 0001             		ori.b	#4,1(a0)
00016996 117C 0080 0019             		move.b	#$80,$19(a0)
0001699C 7000                       		moveq	#0,d0
0001699E 1028 0028                  		move.b	$28(a0),d0
000169A2 0240 000F                  		andi.w	#$F,d0
000169A6 C0FC 003C                  		mulu.w	#$3C,d0
000169AA 3140 0032                  		move.w	d0,$32(a0)
000169AE 4A28 0028                  		tst.b	$28(a0)
000169B2 6A00                       		bpl.s	Obj69_Trapdoor
000169B4 5428 0024                  		addq.b	#2,$24(a0)
000169B8 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000169C0 317C 04DF 0002             		move.w	#$4DF,2(a0)
000169C6 117C 0010 0019             		move.b	#$10,$19(a0)
000169CC 117C 0002 001C             		move.b	#2,$1C(a0)
000169D2 7000                       		moveq	#0,d0
000169D4 1028 0028                  		move.b	$28(a0),d0	; get object type
000169D8 3200                       		move.w	d0,d1
000169DA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000169DE C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000169E2 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000169E6 3140 0032                  		move.w	d0,$32(a0)
000169EA 0241 0070                  		andi.w	#$70,d1
000169EE 0641 0010                  		addi.w	#$10,d1
000169F2 E549                       		lsl.w	#2,d1
000169F4 5341                       		subq.w	#1,d1
000169F6 3141 0036                  		move.w	d1,$36(a0)
000169FA 6000                       		bra.s	Obj69_Spinner
000169FC                            ; ===========================================================================
000169FC                            
000169FC                            Obj69_Trapdoor:				; XREF: Obj69_Index
000169FC 5368 0030                  		subq.w	#1,$30(a0)
00016A00 6A00                       		bpl.s	Obj69_Animate
00016A02 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A08 0868 0000 001C             		bchg	#0,$1C(a0)
00016A0E 4A28 0001                  		tst.b	1(a0)
00016A12 6A00                       		bpl.s	Obj69_Animate
00016A14 303C 00BB                  		move.w	#$BB,d0
00016A18 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play door sound
00016A1E                            
00016A1E                            Obj69_Animate:
00016A1E 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016A24 4EB9 0000 B790             		jsr	AnimateSprite
00016A2A 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00016A2E 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00016A30 323C 004B                  		move.w	#$4B,d1
00016A34 343C 000C                  		move.w	#$C,d2
00016A38 3602                       		move.w	d2,d3
00016A3A 5243                       		addq.w	#1,d3
00016A3C 3828 0008                  		move.w	8(a0),d4
00016A40 6100 A0D0                  		bsr.w	SolidObject
00016A44 6000 9DA4                  		bra.w	MarkObjGone
00016A48                            ; ===========================================================================
00016A48                            
00016A48                            Obj69_NotSolid:
00016A48 0828 0003 0022             		btst	#3,$22(a0)
00016A4E 6700                       		beq.s	Obj69_Display
00016A50 43F8 D000                  		lea	($FFFFD000).w,a1
00016A54 08A9 0003 0022             		bclr	#3,$22(a1)
00016A5A 08A8 0003 0022             		bclr	#3,$22(a0)
00016A60 4228 0025                  		clr.b	$25(a0)
00016A64                            
00016A64                            Obj69_Display:
00016A64 6000 9D84                  		bra.w	MarkObjGone
00016A68                            ; ===========================================================================
00016A68                            
00016A68                            Obj69_Spinner:				; XREF: Obj69_Index
00016A68 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016A6C C068 0036                  		and.w	$36(a0),d0
00016A70 6600                       		bne.s	Obj69_Delay
00016A72 117C 0001 0034             		move.b	#1,$34(a0)
00016A78                            
00016A78                            Obj69_Delay:
00016A78 4A28 0034                  		tst.b	$34(a0)
00016A7C 6700                       		beq.s	Obj69_Animate2
00016A7E 5368 0030                  		subq.w	#1,$30(a0)
00016A82 6A00                       		bpl.s	Obj69_Animate2
00016A84 3168 0032 0030             		move.w	$32(a0),$30(a0)
00016A8A 4228 0034                  		clr.b	$34(a0)
00016A8E 0868 0000 001C             		bchg	#0,$1C(a0)
00016A94                            
00016A94                            Obj69_Animate2:
00016A94 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00016A9A 4EB9 0000 B790             		jsr	AnimateSprite
00016AA0 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00016AA4 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
00016AA6 323C 001B                  		move.w	#$1B,d1
00016AAA 343C 0007                  		move.w	#7,d2
00016AAE 3602                       		move.w	d2,d3
00016AB0 5243                       		addq.w	#1,d3
00016AB2 3828 0008                  		move.w	8(a0),d4
00016AB6 6100 A05A                  		bsr.w	SolidObject
00016ABA 6000 9D2E                  		bra.w	MarkObjGone
00016ABE                            ; ===========================================================================
00016ABE                            
00016ABE                            Obj69_NotSolid2:
00016ABE 0828 0003 0022             		btst	#3,$22(a0)
00016AC4 6700                       		beq.s	Obj69_Display2
00016AC6 43F8 D000                  		lea	($FFFFD000).w,a1
00016ACA 08A9 0003 0022             		bclr	#3,$22(a1)
00016AD0 08A8 0003 0022             		bclr	#3,$22(a0)
00016AD6 4228 0025                  		clr.b	$25(a0)
00016ADA                            
00016ADA                            Obj69_Display2:
00016ADA 6000 9D0E                  		bra.w	MarkObjGone
00016ADE                            ; ===========================================================================
00016ADE                            Ani_obj69:
00016ADE                            	include "_anim\obj69.asm"
00016ADE                            ; ---------------------------------------------------------------------------
00016ADE                            ; Animation script - trapdoor (SBZ)
00016ADE                            ; ---------------------------------------------------------------------------
00016ADE 0000                       		dc.w byte_158AC-Ani_obj69
00016AE0 0000                       		dc.w byte_158B2-Ani_obj69
00016AE2 0000                       		dc.w byte_158B8-Ani_obj69
00016AE4 0000                       		dc.w byte_158CC-Ani_obj69
00016AE6 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
00016AEC 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
00016AF2 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016AFF 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016B06 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00016B13 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
00016B1A                            		even
00016B1A                            		even
00016B1A                            
00016B1A                            ; ---------------------------------------------------------------------------
00016B1A                            ; Sprite mappings - trapdoor (SBZ)
00016B1A                            ; ---------------------------------------------------------------------------
00016B1A                            Map_obj69:
00016B1A                            	include "_maps\obj69.asm"
00016B1A                            ; ---------------------------------------------------------------------------
00016B1A                            ; Sprite mappings - trapdoor (SBZ)
00016B1A                            ; ---------------------------------------------------------------------------
00016B1A 0000                       		dc.w byte_158E6-Map_obj69
00016B1C 0000                       		dc.w byte_158FB-Map_obj69
00016B1E 0000                       		dc.w byte_15924-Map_obj69
00016B20 04                         byte_158E6:	dc.b 4
00016B21 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
00016B26 F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
00016B2B F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00016B30 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00016B35 08                         byte_158FB:	dc.b 8
00016B36 F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
00016B3B 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00016B40 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00016B45 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
00016B4A F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00016B4F 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00016B54 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
00016B59 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00016B5E 04                         byte_15924:	dc.b 4
00016B5F 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00016B64 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
00016B69 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00016B6E 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00016B74 00                         		even
00016B74 00                         		even
00016B74                            
00016B74                            ; ---------------------------------------------------------------------------
00016B74                            ; Sprite mappings - spinning platforms (SBZ)
00016B74                            ; ---------------------------------------------------------------------------
00016B74                            Map_obj69a:
00016B74                            	include "_maps\obj69a.asm"
00016B74                            ; ---------------------------------------------------------------------------
00016B74                            ; Sprite mappings - spinning platforms (SBZ)
00016B74                            ; ---------------------------------------------------------------------------
00016B74 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
00016B78 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00016B7C 0000                       		dc.w byte_15970-Map_obj69a
00016B7E 02                         byte_15944:	dc.b 2
00016B7F F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00016B84 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
00016B89 02                         byte_1594F:	dc.b 2
00016B8A F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00016B8F 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00016B94 02                         byte_1595A:	dc.b 2
00016B95 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
00016B9A 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00016B9F 02                         byte_15965:	dc.b 2
00016BA0 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00016BA5 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
00016BAA 02                         byte_15970:	dc.b 2
00016BAB F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
00016BB0 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
00016BB6 00                         		even
00016BB6 00                         		even
00016BB6                            
00016BB6                            ; ===========================================================================
00016BB6                            ; ---------------------------------------------------------------------------
00016BB6                            ; Object 6A - ground saws and pizza cutters (SBZ)
00016BB6                            ; ---------------------------------------------------------------------------
00016BB6                            
00016BB6                            Obj6A:					; XREF: Obj_Index
00016BB6 7000                       		moveq	#0,d0
00016BB8 1028 0024                  		move.b	$24(a0),d0
00016BBC 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
00016BC0 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
00016BC4                            ; ===========================================================================
00016BC4 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
00016BC6 0000                       		dc.w Obj6A_Action-Obj6A_Index
00016BC8                            ; ===========================================================================
00016BC8                            
00016BC8                            Obj6A_Main:				; XREF: Obj6A_Index
00016BC8 5428 0024                  		addq.b	#2,$24(a0)
00016BCC 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
00016BD4 317C 43B5 0002             		move.w	#$43B5,2(a0)
00016BDA 117C 0004 0001             		move.b	#4,1(a0)
00016BE0 117C 0004 0018             		move.b	#4,$18(a0)
00016BE6 117C 0020 0019             		move.b	#$20,$19(a0)
00016BEC 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016BF2 3168 000C 0038             		move.w	$C(a0),$38(a0)
00016BF8 0C28 0003 0028             		cmpi.b	#3,$28(a0)
00016BFE 6400                       		bcc.s	Obj6A_Action
00016C00 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016C06                            
00016C06                            Obj6A_Action:				; XREF: Obj6A_Index
00016C06 7000                       		moveq	#0,d0
00016C08 1028 0028                  		move.b	$28(a0),d0
00016C0C 0240 0007                  		andi.w	#7,d0
00016C10 D040                       		add.w	d0,d0
00016C12 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
00016C16 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
00016C1A 3028 003A                  		move.w	$3A(a0),d0
00016C1E 0240 FF80                  		andi.w	#$FF80,d0
00016C22 3238 F700                  		move.w	($FFFFF700).w,d1
00016C26 0441 0080                  		subi.w	#$80,d1
00016C2A 0241 FF80                  		andi.w	#$FF80,d1
00016C2E 9041                       		sub.w	d1,d0
00016C30 0C40 0280                  		cmpi.w	#$280,d0
00016C34 6200                       		bhi.s	Obj6A_Delete
00016C36 4EF9 0000 E742             		jmp	DisplaySprite
00016C3C                            ; ===========================================================================
00016C3C                            
00016C3C                            Obj6A_Delete:
00016C3C 4EF9 0000 E77E             		jmp	DeleteObject
00016C42                            ; ===========================================================================
00016C42 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
00016C46 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
00016C4A 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00016C4C                            ; ===========================================================================
00016C4C                            
00016C4C                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00016C4C 4E75                       		rts	
00016C4E                            ; ===========================================================================
00016C4E                            
00016C4E                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00016C4E 323C 0060                  		move.w	#$60,d1
00016C52 7000                       		moveq	#0,d0
00016C54 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
00016C58 0828 0000 0022             		btst	#0,$22(a0)
00016C5E 6700                       		beq.s	Obj6A_Animate01
00016C60 4440                       		neg.w	d0
00016C62 D041                       		add.w	d1,d0
00016C64                            
00016C64                            Obj6A_Animate01:
00016C64 3228 003A                  		move.w	$3A(a0),d1
00016C68 9240                       		sub.w	d0,d1
00016C6A 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00016C6E 5328 001E                  		subq.b	#1,$1E(a0)
00016C72 6A00                       		bpl.s	loc_15A46
00016C74 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
00016C7A 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00016C80                            
00016C80                            loc_15A46:
00016C80 4A28 0001                  		tst.b	1(a0)
00016C84 6A00                       		bpl.s	locret_15A60
00016C86 3038 FE04                  		move.w	($FFFFFE04).w,d0
00016C8A 0240 000F                  		andi.w	#$F,d0
00016C8E 6600                       		bne.s	locret_15A60
00016C90 303C 00B0                  		move.w	#$B0,d0
00016C94 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play saw sound
00016C9A                            
00016C9A                            locret_15A60:
00016C9A 4E75                       		rts	
00016C9C                            ; ===========================================================================
00016C9C                            
00016C9C                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00016C9C 323C 0030                  		move.w	#$30,d1
00016CA0 7000                       		moveq	#0,d0
00016CA2 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016CA6 0828 0000 0022             		btst	#0,$22(a0)
00016CAC 6700                       		beq.s	Obj6A_Animate02
00016CAE 4440                       		neg.w	d0
00016CB0 0640 0080                  		addi.w	#$80,d0
00016CB4                            
00016CB4                            Obj6A_Animate02:
00016CB4 3228 0038                  		move.w	$38(a0),d1
00016CB8 9240                       		sub.w	d0,d1
00016CBA 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
00016CBE 5328 001E                  		subq.b	#1,$1E(a0)
00016CC2 6A00                       		bpl.s	loc_15A96
00016CC4 117C 0002 001E             		move.b	#2,$1E(a0)
00016CCA 0868 0000 001A             		bchg	#0,$1A(a0)
00016CD0                            
00016CD0                            loc_15A96:
00016CD0 4A28 0001                  		tst.b	1(a0)
00016CD4 6A00                       		bpl.s	locret_15AB0
00016CD6 1038 FE64                  		move.b	($FFFFFE64).w,d0
00016CDA 0C00 0018                  		cmpi.b	#$18,d0
00016CDE 6600                       		bne.s	locret_15AB0
00016CE0 303C 00B0                  		move.w	#$B0,d0
00016CE4 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play saw sound
00016CEA                            
00016CEA                            locret_15AB0:
00016CEA 4E75                       		rts	
00016CEC                            ; ===========================================================================
00016CEC                            
00016CEC                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
00016CEC 4A28 003D                  		tst.b	$3D(a0)
00016CF0 6600                       		bne.s	Obj6A_Animate03
00016CF2 3038 D008                  		move.w	($FFFFD008).w,d0
00016CF6 0440 00C0                  		subi.w	#$C0,d0
00016CFA 6500                       		bcs.s	loc_15B02
00016CFC 9068 0008                  		sub.w	8(a0),d0
00016D00 6500                       		bcs.s	loc_15B02
00016D02 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016D06 0440 0080                  		subi.w	#$80,d0
00016D0A B068 000C                  		cmp.w	$C(a0),d0
00016D0E 6400                       		bcc.s	locret_15B04
00016D10 0640 0100                  		addi.w	#$100,d0
00016D14 B068 000C                  		cmp.w	$C(a0),d0
00016D18 6500                       		bcs.s	locret_15B04
00016D1A 117C 0001 003D             		move.b	#1,$3D(a0)
00016D20 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00016D26 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016D2C 117C 0002 001A             		move.b	#2,$1A(a0)
00016D32 303C 00B0                  		move.w	#$B0,d0
00016D36 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play saw sound
00016D3C                            
00016D3C                            loc_15B02:
00016D3C 588F                       		addq.l	#4,sp
00016D3E                            
00016D3E                            locret_15B04:
00016D3E 4E75                       		rts	
00016D40                            ; ===========================================================================
00016D40                            
00016D40                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00016D40 4EB9 0000 E71C             		jsr	SpeedToPos
00016D46 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016D4C 5328 001E                  		subq.b	#1,$1E(a0)
00016D50 6A00                       		bpl.s	locret_15B24
00016D52 117C 0002 001E             		move.b	#2,$1E(a0)
00016D58 0868 0000 001A             		bchg	#0,$1A(a0)
00016D5E                            
00016D5E                            locret_15B24:
00016D5E 4E75                       		rts	
00016D60                            ; ===========================================================================
00016D60                            
00016D60                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00016D60 4A28 003D                  		tst.b	$3D(a0)
00016D64 6600                       		bne.s	Obj6A_Animate04
00016D66 3038 D008                  		move.w	($FFFFD008).w,d0
00016D6A 0640 00E0                  		addi.w	#$E0,d0
00016D6E 9068 0008                  		sub.w	8(a0),d0
00016D72 6400                       		bcc.s	loc_15B74
00016D74 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016D78 0440 0080                  		subi.w	#$80,d0
00016D7C B068 000C                  		cmp.w	$C(a0),d0
00016D80 6400                       		bcc.s	locret_15B76
00016D82 0640 0100                  		addi.w	#$100,d0
00016D86 B068 000C                  		cmp.w	$C(a0),d0
00016D8A 6500                       		bcs.s	locret_15B76
00016D8C 117C 0001 003D             		move.b	#1,$3D(a0)
00016D92 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00016D98 117C 00A2 0020             		move.b	#$A2,$20(a0)
00016D9E 117C 0002 001A             		move.b	#2,$1A(a0)
00016DA4 303C 00B0                  		move.w	#$B0,d0
00016DA8 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play saw sound
00016DAE                            
00016DAE                            loc_15B74:
00016DAE 588F                       		addq.l	#4,sp
00016DB0                            
00016DB0                            locret_15B76:
00016DB0 4E75                       		rts	
00016DB2                            ; ===========================================================================
00016DB2                            
00016DB2                            Obj6A_Animate04:
00016DB2 4EB9 0000 E71C             		jsr	SpeedToPos
00016DB8 3168 0008 003A             		move.w	8(a0),$3A(a0)
00016DBE 5328 001E                  		subq.b	#1,$1E(a0)
00016DC2 6A00                       		bpl.s	locret_15B96
00016DC4 117C 0002 001E             		move.b	#2,$1E(a0)
00016DCA 0868 0000 001A             		bchg	#0,$1A(a0)
00016DD0                            
00016DD0                            locret_15B96:
00016DD0 4E75                       		rts	
00016DD2                            ; ===========================================================================
00016DD2                            ; ---------------------------------------------------------------------------
00016DD2                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016DD2                            ; ---------------------------------------------------------------------------
00016DD2                            Map_obj6A:
00016DD2                            	include "_maps\obj6A.asm"
00016DD2                            ; ---------------------------------------------------------------------------
00016DD2                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00016DD2                            ; ---------------------------------------------------------------------------
00016DD2 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00016DD6 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00016DDA 07                         byte_15BA0:	dc.b 7
00016DDB C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016DE0 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016DE5 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016DEA E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016DEF E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016DF4 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016DF9 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016DFE 07                         byte_15BC4:	dc.b 7
00016DFF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00016E04 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00016E09 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00016E0E E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016E13 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016E18 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016E1D 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016E22 04                         byte_15BE8:	dc.b 4
00016E23 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00016E28 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00016E2D 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00016E32 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00016E37 04                         byte_15BFD:	dc.b 4
00016E38 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00016E3D E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00016E42 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00016E47 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00016E4C                            		even
00016E4C                            		even
00016E4C                            
00016E4C                            ; ===========================================================================
00016E4C                            ; ---------------------------------------------------------------------------
00016E4C                            ; Object 6B - stomper (SBZ)
00016E4C                            ; ---------------------------------------------------------------------------
00016E4C                            
00016E4C                            Obj6B:					; XREF: Obj_Index
00016E4C 7000                       		moveq	#0,d0
00016E4E 1028 0024                  		move.b	$24(a0),d0
00016E52 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00016E56 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00016E5A                            ; ===========================================================================
00016E5A 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00016E5C 0000                       		dc.w Obj6B_Action-Obj6B_Index
00016E5E                            
00016E5E 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00016E62 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00016E66 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00016E6A 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00016E6E 8040 0005                  		dc.b  $80, $40,	  0,   5
00016E72                            ; ===========================================================================
00016E72                            
00016E72                            Obj6B_Main:				; XREF: Obj6B_Index
00016E72 5428 0024                  		addq.b	#2,$24(a0)
00016E76 7000                       		moveq	#0,d0
00016E78 1028 0028                  		move.b	$28(a0),d0
00016E7C E448                       		lsr.w	#2,d0
00016E7E 0240 001C                  		andi.w	#$1C,d0
00016E82 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00016E86 115B 0019                  		move.b	(a3)+,$19(a0)
00016E8A 115B 0016                  		move.b	(a3)+,$16(a0)
00016E8E E448                       		lsr.w	#2,d0
00016E90 1140 001A                  		move.b	d0,$1A(a0)
00016E94 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00016E9C 317C 22C0 0002             		move.w	#$22C0,2(a0)
00016EA2 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00016EA8 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00016EAA 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00016EB0 6700                       		beq.s	Obj6B_SBZ3
00016EB2                            
00016EB2                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00016EB2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016EB6 7000                       		moveq	#0,d0
00016EB8 1028 0023                  		move.b	$23(a0),d0
00016EBC 6700                       		beq.s	Obj6B_Delete
00016EBE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016EC4                            
00016EC4                            Obj6B_Delete:
00016EC4 4EF9 0000 E77E             		jmp	DeleteObject
00016ECA                            ; ===========================================================================
00016ECA                            
00016ECA                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00016ECA 317C 41F0 0002             		move.w	#$41F0,2(a0)
00016ED0 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00016ED6 6600                       		bne.s	Obj6B_SBZ12
00016ED8 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016EDC 7000                       		moveq	#0,d0
00016EDE 1028 0023                  		move.b	$23(a0),d0
00016EE2 6700                       		beq.s	Obj6B_SBZ12
00016EE4 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016EEA 6700                       		beq.s	Obj6B_SBZ12
00016EEC 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016EF0 60C0                       		bra.s	Obj6B_ChkGone
00016EF2                            ; ===========================================================================
00016EF2                            
00016EF2                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00016EF2 0028 0004 0001             		ori.b	#4,1(a0)
00016EF8 117C 0004 0018             		move.b	#4,$18(a0)
00016EFE 3168 0008 0034             		move.w	8(a0),$34(a0)
00016F04 3168 000C 0030             		move.w	$C(a0),$30(a0)
00016F0A 7000                       		moveq	#0,d0
00016F0C 101B                       		move.b	(a3)+,d0
00016F0E 3140 003C                  		move.w	d0,$3C(a0)
00016F12 7000                       		moveq	#0,d0
00016F14 1028 0028                  		move.b	$28(a0),d0
00016F18 6A00                       		bpl.s	Obj6B_Action
00016F1A 0200 000F                  		andi.b	#$F,d0
00016F1E 1140 003E                  		move.b	d0,$3E(a0)
00016F22 1153 0028                  		move.b	(a3),$28(a0)
00016F26 0C13 0005                  		cmpi.b	#5,(a3)
00016F2A 6600                       		bne.s	Obj6B_ChkGone2
00016F2C 08E8 0004 0001             		bset	#4,1(a0)
00016F32                            
00016F32                            Obj6B_ChkGone2:
00016F32 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016F36 7000                       		moveq	#0,d0
00016F38 1028 0023                  		move.b	$23(a0),d0
00016F3C 6700                       		beq.s	Obj6B_Action
00016F3E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016F44                            
00016F44                            Obj6B_Action:				; XREF: Obj6B_Index
00016F44 3F28 0008                  		move.w	8(a0),-(sp)
00016F48 7000                       		moveq	#0,d0
00016F4A 1028 0028                  		move.b	$28(a0),d0
00016F4E 0240 000F                  		andi.w	#$F,d0
00016F52 D040                       		add.w	d0,d0
00016F54 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00016F58 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00016F5C 381F                       		move.w	(sp)+,d4
00016F5E 4A28 0001                  		tst.b	1(a0)
00016F62 6A00                       		bpl.s	Obj6B_ChkDel
00016F64 7200                       		moveq	#0,d1
00016F66 1228 0019                  		move.b	$19(a0),d1
00016F6A 0641 000B                  		addi.w	#$B,d1
00016F6E 7400                       		moveq	#0,d2
00016F70 1428 0016                  		move.b	$16(a0),d2
00016F74 3602                       		move.w	d2,d3
00016F76 5243                       		addq.w	#1,d3
00016F78 6100 9B98                  		bsr.w	SolidObject
00016F7C                            
00016F7C                            Obj6B_ChkDel:
00016F7C 3028 0034                  		move.w	$34(a0),d0
00016F80 0240 FF80                  		andi.w	#$FF80,d0
00016F84 3238 F700                  		move.w	($FFFFF700).w,d1
00016F88 0441 0080                  		subi.w	#$80,d1
00016F8C 0241 FF80                  		andi.w	#$FF80,d1
00016F90 9041                       		sub.w	d1,d0
00016F92 0C40 0280                  		cmpi.w	#$280,d0
00016F96 6200                       		bhi.s	loc_15D64
00016F98 4EF9 0000 E742             		jmp	DisplaySprite
00016F9E                            ; ===========================================================================
00016F9E                            
00016F9E                            loc_15D64:
00016F9E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016FA4 6600                       		bne.s	Obj6B_Delete2
00016FA6 4238 F7CB                  		clr.b	($FFFFF7CB).w
00016FAA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016FAE 7000                       		moveq	#0,d0
00016FB0 1028 0023                  		move.b	$23(a0),d0
00016FB4 6700                       		beq.s	Obj6B_Delete2
00016FB6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016FBC                            
00016FBC                            Obj6B_Delete2:
00016FBC 4EF9 0000 E77E             		jmp	DeleteObject
00016FC2                            ; ===========================================================================
00016FC2 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00016FC6 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00016FCA 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00016FCE                            ; ===========================================================================
00016FCE                            
00016FCE                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00016FCE 4E75                       		rts	
00016FD0                            ; ===========================================================================
00016FD0                            
00016FD0                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00016FD0 4A28 0038                  		tst.b	$38(a0)
00016FD4 6600                       		bne.s	loc_15DB4
00016FD6 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00016FDA 7000                       		moveq	#0,d0
00016FDC 1028 003E                  		move.b	$3E(a0),d0
00016FE0 0832 0000 0000             		btst	#0,(a2,d0.w)
00016FE6 6700                       		beq.s	loc_15DC2
00016FE8 117C 0001 0038             		move.b	#1,$38(a0)
00016FEE                            
00016FEE                            loc_15DB4:
00016FEE 3028 003C                  		move.w	$3C(a0),d0
00016FF2 B068 003A                  		cmp.w	$3A(a0),d0
00016FF6 6700                       		beq.s	loc_15DE0
00016FF8 5468 003A                  		addq.w	#2,$3A(a0)
00016FFC                            
00016FFC                            loc_15DC2:
00016FFC 3028 003A                  		move.w	$3A(a0),d0
00017000 0828 0000 0022             		btst	#0,$22(a0)
00017006 6700                       		beq.s	loc_15DD4
00017008 4440                       		neg.w	d0
0001700A 0640 0080                  		addi.w	#$80,d0
0001700E                            
0001700E                            loc_15DD4:
0001700E 3228 0034                  		move.w	$34(a0),d1
00017012 9240                       		sub.w	d0,d1
00017014 3141 0008                  		move.w	d1,8(a0)
00017018 4E75                       		rts	
0001701A                            ; ===========================================================================
0001701A                            
0001701A                            loc_15DE0:
0001701A 5228 0028                  		addq.b	#1,$28(a0)
0001701E 317C 00B4 0036             		move.w	#$B4,$36(a0)
00017024 4228 0038                  		clr.b	$38(a0)
00017028 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001702C 7000                       		moveq	#0,d0
0001702E 1028 0023                  		move.b	$23(a0),d0
00017032 67C8                       		beq.s	loc_15DC2
00017034 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001703A 60C0                       		bra.s	loc_15DC2
0001703C                            ; ===========================================================================
0001703C                            
0001703C                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
0001703C 4A28 0038                  		tst.b	$38(a0)
00017040 6600                       		bne.s	loc_15E14
00017042 5368 0036                  		subq.w	#1,$36(a0)
00017046 6600                       		bne.s	loc_15E1E
00017048 117C 0001 0038             		move.b	#1,$38(a0)
0001704E                            
0001704E                            loc_15E14:
0001704E 4A68 003A                  		tst.w	$3A(a0)
00017052 6700                       		beq.s	loc_15E3C
00017054 5568 003A                  		subq.w	#2,$3A(a0)
00017058                            
00017058                            loc_15E1E:
00017058 3028 003A                  		move.w	$3A(a0),d0
0001705C 0828 0000 0022             		btst	#0,$22(a0)
00017062 6700                       		beq.s	loc_15E30
00017064 4440                       		neg.w	d0
00017066 0640 0080                  		addi.w	#$80,d0
0001706A                            
0001706A                            loc_15E30:
0001706A 3228 0034                  		move.w	$34(a0),d1
0001706E 9240                       		sub.w	d0,d1
00017070 3141 0008                  		move.w	d1,8(a0)
00017074 4E75                       		rts	
00017076                            ; ===========================================================================
00017076                            
00017076                            loc_15E3C:
00017076 5328 0028                  		subq.b	#1,$28(a0)
0001707A 4228 0038                  		clr.b	$38(a0)
0001707E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017082 7000                       		moveq	#0,d0
00017084 1028 0023                  		move.b	$23(a0),d0
00017088 67CE                       		beq.s	loc_15E1E
0001708A 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00017090 60C6                       		bra.s	loc_15E1E
00017092                            ; ===========================================================================
00017092                            
00017092                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00017092 4A28 0038                  		tst.b	$38(a0)
00017096 6600                       		bne.s	loc_15E7C
00017098 4A68 003A                  		tst.w	$3A(a0)
0001709C 6700                       		beq.s	loc_15E6A
0001709E 5368 003A                  		subq.w	#1,$3A(a0)
000170A2 6000                       		bra.s	loc_15E8E
000170A4                            ; ===========================================================================
000170A4                            
000170A4                            loc_15E6A:
000170A4 5368 0036                  		subq.w	#1,$36(a0)
000170A8 6A00                       		bpl.s	loc_15E8E
000170AA 317C 003C 0036             		move.w	#$3C,$36(a0)
000170B0 117C 0001 0038             		move.b	#1,$38(a0)
000170B6                            
000170B6                            loc_15E7C:
000170B6 5068 003A                  		addq.w	#8,$3A(a0)
000170BA 3028 003A                  		move.w	$3A(a0),d0
000170BE B068 003C                  		cmp.w	$3C(a0),d0
000170C2 6600                       		bne.s	loc_15E8E
000170C4 4228 0038                  		clr.b	$38(a0)
000170C8                            
000170C8                            loc_15E8E:
000170C8 3028 003A                  		move.w	$3A(a0),d0
000170CC 0828 0000 0022             		btst	#0,$22(a0)
000170D2 6700                       		beq.s	loc_15EA0
000170D4 4440                       		neg.w	d0
000170D6 0640 0038                  		addi.w	#$38,d0
000170DA                            
000170DA                            loc_15EA0:
000170DA 3228 0030                  		move.w	$30(a0),d1
000170DE D240                       		add.w	d0,d1
000170E0 3141 000C                  		move.w	d1,$C(a0)
000170E4 4E75                       		rts	
000170E6                            ; ===========================================================================
000170E6                            
000170E6                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
000170E6 4A28 0038                  		tst.b	$38(a0)
000170EA 6600                       		bne.s	loc_15ED0
000170EC 4A68 003A                  		tst.w	$3A(a0)
000170F0 6700                       		beq.s	loc_15EBE
000170F2 5168 003A                  		subq.w	#8,$3A(a0)
000170F6 6000                       		bra.s	loc_15EF0
000170F8                            ; ===========================================================================
000170F8                            
000170F8                            loc_15EBE:
000170F8 5368 0036                  		subq.w	#1,$36(a0)
000170FC 6A00                       		bpl.s	loc_15EF0
000170FE 317C 003C 0036             		move.w	#$3C,$36(a0)
00017104 117C 0001 0038             		move.b	#1,$38(a0)
0001710A                            
0001710A                            loc_15ED0:
0001710A 3028 003A                  		move.w	$3A(a0),d0
0001710E B068 003C                  		cmp.w	$3C(a0),d0
00017112 6700                       		beq.s	loc_15EE0
00017114 5068 003A                  		addq.w	#8,$3A(a0)
00017118 6000                       		bra.s	loc_15EF0
0001711A                            ; ===========================================================================
0001711A                            
0001711A                            loc_15EE0:
0001711A 5368 0036                  		subq.w	#1,$36(a0)
0001711E 6A00                       		bpl.s	loc_15EF0
00017120 317C 003C 0036             		move.w	#$3C,$36(a0)
00017126 4228 0038                  		clr.b	$38(a0)
0001712A                            
0001712A                            loc_15EF0:
0001712A 3028 003A                  		move.w	$3A(a0),d0
0001712E 0828 0000 0022             		btst	#0,$22(a0)
00017134 6700                       		beq.s	loc_15F02
00017136 4440                       		neg.w	d0
00017138 0640 0038                  		addi.w	#$38,d0
0001713C                            
0001713C                            loc_15F02:
0001713C 3228 0030                  		move.w	$30(a0),d1
00017140 D240                       		add.w	d0,d1
00017142 3141 000C                  		move.w	d1,$C(a0)
00017146 4E75                       		rts	
00017148                            ; ===========================================================================
00017148                            
00017148                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00017148 4A28 0038                  		tst.b	$38(a0)
0001714C 6600                       		bne.s	loc_15F3E
0001714E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00017152 7000                       		moveq	#0,d0
00017154 1028 003E                  		move.b	$3E(a0),d0
00017158 0832 0000 0000             		btst	#0,(a2,d0.w)
0001715E 6700                       		beq.s	locret_15F5C
00017160 117C 0001 0038             		move.b	#1,$38(a0)
00017166 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001716A 7000                       		moveq	#0,d0
0001716C 1028 0023                  		move.b	$23(a0),d0
00017170 6700                       		beq.s	loc_15F3E
00017172 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00017178                            
00017178                            loc_15F3E:
00017178 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00017180 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00017188 3168 0008 0034             		move.w	8(a0),$34(a0)
0001718E 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00017194 6700                       		beq.s	loc_15F5E
00017196                            
00017196                            locret_15F5C:
00017196 4E75                       		rts	
00017198                            ; ===========================================================================
00017198                            
00017198                            loc_15F5E:
00017198 4228 0028                  		clr.b	$28(a0)
0001719C 4228 0038                  		clr.b	$38(a0)
000171A0 4E75                       		rts	
000171A2                            ; ===========================================================================
000171A2                            ; ---------------------------------------------------------------------------
000171A2                            ; Sprite mappings - stomper and	platforms (SBZ)
000171A2                            ; ---------------------------------------------------------------------------
000171A2                            Map_obj6B:
000171A2                            	include "_maps\obj6B.asm"
000171A2                            ; ---------------------------------------------------------------------------
000171A2                            ; Sprite mappings - stomper and	platforms (SBZ)
000171A2                            ; ---------------------------------------------------------------------------
000171A2 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
000171A6 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
000171AA 0000                       		dc.w byte_15FB0-Map_obj6B
000171AC 04                         byte_15F72:	dc.b 4
000171AD F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
000171B2 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
000171B7 F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
000171BC F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
000171C1 08                         byte_15F87:	dc.b 8
000171C2 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
000171C7 E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
000171CC E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
000171D1 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
000171D6 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
000171DB 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
000171E0 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
000171E5 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
000171EA 0E                         byte_15FB0:	dc.b $E
000171EB C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
000171F0 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
000171F5 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
000171FA C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
000171FF C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00017204 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00017209 C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
0001720E C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00017213 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00017218 E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
0001721D E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00017222 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00017227 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
0001722C 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00017232 00                         		even
00017232 00                         		even
00017232                            
00017232                            ; ===========================================================================
00017232                            ; ---------------------------------------------------------------------------
00017232                            ; Object 6C - vanishing	platforms (SBZ)
00017232                            ; ---------------------------------------------------------------------------
00017232                            
00017232                            Obj6C:					; XREF: Obj_Index
00017232 7000                       		moveq	#0,d0
00017234 1028 0024                  		move.b	$24(a0),d0
00017238 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
0001723C 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00017240                            ; ===========================================================================
00017240 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00017242 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017244 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00017246 0000                       		dc.w loc_16068-Obj6C_Index
00017248                            ; ===========================================================================
00017248                            
00017248                            Obj6C_Main:				; XREF: Obj6C_Index
00017248 5C28 0024                  		addq.b	#6,$24(a0)
0001724C 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00017254 317C 44C3 0002             		move.w	#$44C3,2(a0)
0001725A 0028 0004 0001             		ori.b	#4,1(a0)
00017260 117C 0010 0019             		move.b	#$10,$19(a0)
00017266 117C 0004 0018             		move.b	#4,$18(a0)
0001726C 7000                       		moveq	#0,d0
0001726E 1028 0028                  		move.b	$28(a0),d0	; get object type
00017272 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00017276 5240                       		addq.w	#1,d0		; add 1
00017278 EF48                       		lsl.w	#7,d0		; multiply by $80
0001727A 3200                       		move.w	d0,d1
0001727C 5340                       		subq.w	#1,d0
0001727E 3140 0030                  		move.w	d0,$30(a0)
00017282 3140 0032                  		move.w	d0,$32(a0)
00017286 7000                       		moveq	#0,d0
00017288 1028 0028                  		move.b	$28(a0),d0	; get object type
0001728C 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00017290 0641 0080                  		addi.w	#$80,d1
00017294 C0C1                       		mulu.w	d1,d0
00017296 E088                       		lsr.l	#8,d0
00017298 3140 0036                  		move.w	d0,$36(a0)
0001729C 5341                       		subq.w	#1,d1
0001729E 3141 0038                  		move.w	d1,$38(a0)
000172A2                            
000172A2                            loc_16068:				; XREF: Obj6C_Index
000172A2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000172A6 9068 0036                  		sub.w	$36(a0),d0
000172AA C068 0038                  		and.w	$38(a0),d0
000172AE 6600                       		bne.s	Obj6C_Animate
000172B0 5928 0024                  		subq.b	#4,$24(a0)
000172B4 6000                       		bra.s	Obj6C_Vanish
000172B6                            ; ===========================================================================
000172B6                            
000172B6                            Obj6C_Animate:
000172B6 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000172BC 4EB9 0000 B790             		jsr	AnimateSprite
000172C2 6000 9526                  		bra.w	MarkObjGone
000172C6                            ; ===========================================================================
000172C6                            
000172C6                            Obj6C_Vanish:				; XREF: Obj6C_Index
000172C6 5368 0030                  		subq.w	#1,$30(a0)
000172CA 6A00                       		bpl.s	loc_160AA
000172CC 317C 007F 0030             		move.w	#127,$30(a0)
000172D2 4A28 001C                  		tst.b	$1C(a0)
000172D6 6700                       		beq.s	loc_160A4
000172D8 3168 0032 0030             		move.w	$32(a0),$30(a0)
000172DE                            
000172DE                            loc_160A4:
000172DE 0868 0000 001C             		bchg	#0,$1C(a0)
000172E4                            
000172E4                            loc_160AA:
000172E4 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
000172EA 4EB9 0000 B790             		jsr	AnimateSprite
000172F0 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
000172F6 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
000172F8 0C28 0002 0024             		cmpi.b	#2,$24(a0)
000172FE 6600                       		bne.s	loc_160D6
00017300 7200                       		moveq	#0,d1
00017302 1228 0019                  		move.b	$19(a0),d1
00017306 4EB9 0000 834C             		jsr	(PlatformObject).l
0001730C 6000 94DC                  		bra.w	MarkObjGone
00017310                            ; ===========================================================================
00017310                            
00017310                            loc_160D6:
00017310 7200                       		moveq	#0,d1
00017312 1228 0019                  		move.b	$19(a0),d1
00017316 4EB9 0000 84C0             		jsr	(ExitPlatform).l
0001731C 3428 0008                  		move.w	8(a0),d2
00017320 4EB9 0000 8A2A             		jsr	(MvSonicOnPtfm2).l
00017326 6000 94C2                  		bra.w	MarkObjGone
0001732A                            ; ===========================================================================
0001732A                            
0001732A                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001732A 0828 0003 0022             		btst	#3,$22(a0)
00017330 6700                       		beq.s	Obj6C_Display
00017332 43F8 D000                  		lea	($FFFFD000).w,a1
00017336 08A9 0003 0022             		bclr	#3,$22(a1)
0001733C 08A8 0003 0022             		bclr	#3,$22(a0)
00017342 117C 0002 0024             		move.b	#2,$24(a0)
00017348 4228 0025                  		clr.b	$25(a0)
0001734C                            
0001734C                            Obj6C_Display:
0001734C 6000 949C                  		bra.w	MarkObjGone
00017350                            ; ===========================================================================
00017350                            Ani_obj6C:
00017350                            	include "_anim\obj6C.asm"
00017350                            ; ---------------------------------------------------------------------------
00017350                            ; Animation script - vanishing platforms (SBZ)
00017350                            ; ---------------------------------------------------------------------------
00017350 0000                       		dc.w byte_1611A-Ani_obj6C
00017352 0000                       		dc.w byte_16122-Ani_obj6C
00017354 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
0001735C 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00017364                            		even
00017364                            		even
00017364                            
00017364                            ; ---------------------------------------------------------------------------
00017364                            ; Sprite mappings - vanishing platforms	(SBZ)
00017364                            ; ---------------------------------------------------------------------------
00017364                            Map_obj6C:
00017364                            	include "_maps\obj6C.asm"
00017364                            ; ---------------------------------------------------------------------------
00017364                            ; Sprite mappings - vanishing platforms	(SBZ)
00017364                            ; ---------------------------------------------------------------------------
00017364 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
00017368 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
0001736C 01                         byte_16132:	dc.b 1
0001736D F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00017372 01                         byte_16138:	dc.b 1
00017373 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
00017378 01                         byte_1613E:	dc.b 1
00017379 F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
0001737E 00                         byte_16144:	dc.b 0
00017380 00                         		even
00017380 00                         		even
00017380                            
00017380                            ; ===========================================================================
00017380                            ; ---------------------------------------------------------------------------
00017380                            ; Object 6E - electrocution orbs (SBZ)
00017380                            ; ---------------------------------------------------------------------------
00017380                            
00017380                            Obj6E:					; XREF: Obj_Index
00017380 7000                       		moveq	#0,d0
00017382 1028 0024                  		move.b	$24(a0),d0
00017386 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001738A 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
0001738E                            ; ===========================================================================
0001738E 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00017390 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00017392                            ; ===========================================================================
00017392                            
00017392                            Obj6E_Main:				; XREF: Obj6E_Index
00017392 5428 0024                  		addq.b	#2,$24(a0)
00017396 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
0001739E 317C 047E 0002             		move.w	#$47E,2(a0)
000173A4 0028 0004 0001             		ori.b	#4,1(a0)
000173AA 117C 0028 0019             		move.b	#$28,$19(a0)
000173B0 7000                       		moveq	#0,d0
000173B2 1028 0028                  		move.b	$28(a0),d0	; read object type
000173B6 E948                       		lsl.w	#4,d0		; multiply by $10
000173B8 5340                       		subq.w	#1,d0
000173BA 3140 0034                  		move.w	d0,$34(a0)
000173BE                            
000173BE                            Obj6E_Shock:				; XREF: Obj6E_Index
000173BE 3038 FE04                  		move.w	($FFFFFE04).w,d0
000173C2 C068 0034                  		and.w	$34(a0),d0
000173C6 6600                       		bne.s	Obj6E_Animate
000173C8 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000173CE 4A28 0001                  		tst.b	1(a0)
000173D2 6A00                       		bpl.s	Obj6E_Animate
000173D4 303C 00B1                  		move.w	#$B1,d0
000173D8 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play electricity sound
000173DE                            
000173DE                            Obj6E_Animate:
000173DE 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000173E4 4EB9 0000 B790             		jsr	AnimateSprite
000173EA 117C 0000 0020             		move.b	#0,$20(a0)
000173F0 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000173F6 6600                       		bne.s	Obj6E_Display	; if not, branch
000173F8 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000173FE                            
000173FE                            Obj6E_Display:
000173FE 6000 93EA                  		bra.w	MarkObjGone
00017402                            ; ===========================================================================
00017402                            Ani_obj6E:
00017402                            	include "_anim\obj6E.asm"
00017402                            ; ---------------------------------------------------------------------------
00017402                            ; Animation script - electrocution orbs (SBZ)
00017402                            ; ---------------------------------------------------------------------------
00017402 0000                       		dc.w byte_161CC-Ani_obj6E
00017404 0000                       		dc.w byte_161D0-Ani_obj6E
00017406 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
0001740A 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001741A                            		even
0001741A                            		even
0001741A                            
0001741A                            ; ---------------------------------------------------------------------------
0001741A                            ; Sprite mappings - electrocution orbs (SBZ)
0001741A                            ; ---------------------------------------------------------------------------
0001741A                            Map_obj6E:
0001741A                            	include "_maps\obj6E.asm"
0001741A                            Map_26ed:
0001741A 0000                       Map_26ed_0: 	dc.w Map_26ed_C-Map_26ed
0001741C 0000                       Map_26ed_2: 	dc.w Map_26ed_12-Map_26ed
0001741E 0000                       Map_26ed_4: 	dc.w Map_26ed_1D-Map_26ed
00017420 0000                       Map_26ed_6: 	dc.w Map_26ed_3C-Map_26ed
00017422 0000                       Map_26ed_8: 	dc.w Map_26ed_65-Map_26ed
00017424 0000                       Map_26ed_A: 	dc.w Map_26ed_84-Map_26ed
00017426 01                         Map_26ed_C: 	dc.b $1
00017427 0805 0000 F8               	dc.b $8, $5, $0, $0, $F8
0001742C 02                         Map_26ed_12: 	dc.b $2
0001742D F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00017432 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00017437 06                         Map_26ed_1D: 	dc.b $6
00017438 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001743D 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00017442 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00017447 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001744C F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00017451 F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00017456 08                         Map_26ed_3C: 	dc.b $8
00017457 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
0001745C 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
00017461 F605 0010 0C               	dc.b $F6, $5, $0, $10, $C
00017466 F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001746B F605 0810 E4               	dc.b $F6, $5, $8, $10, $E4
00017470 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00017475 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
0001747A F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001747F 06                         Map_26ed_65: 	dc.b $6
00017480 F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
00017485 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
0001748A F605 0010 1C               	dc.b $F6, $5, $0, $10, $1C
0001748F F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
00017494 F605 0810 D4               	dc.b $F6, $5, $8, $10, $D4
00017499 F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
0001749E 04                         Map_26ed_84: 	dc.b $4
0001749F F80A 0004 F4               	dc.b $F8, $A, $0, $4, $F4
000174A4 1008 000D F4               	dc.b $10, $8, $0, $D, $F4
000174A9 F605 0010 2C               	dc.b $F6, $5, $0, $10, $2C
000174AE F605 0810 C4               	dc.b $F6, $5, $8, $10, $C4
000174B4 00                         	even
000174B4 00                         	even
000174B4                            
000174B4                            ; ===========================================================================
000174B4                            ; ---------------------------------------------------------------------------
000174B4                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
000174B4                            ; ---------------------------------------------------------------------------
000174B4                            
000174B4                            Obj6F:					; XREF: Obj_Index
000174B4 7000                       		moveq	#0,d0
000174B6 1028 0024                  		move.b	$24(a0),d0
000174BA 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000174BE 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000174C2 3028 0030                  		move.w	$30(a0),d0
000174C6 0240 FF80                  		andi.w	#$FF80,d0
000174CA 3238 F700                  		move.w	($FFFFF700).w,d1
000174CE 0441 0080                  		subi.w	#$80,d1
000174D2 0241 FF80                  		andi.w	#$FF80,d1
000174D6 9041                       		sub.w	d1,d0
000174D8 0C40 0280                  		cmpi.w	#$280,d0
000174DC 6200                       		bhi.s	loc_1629A
000174DE                            
000174DE                            Obj6F_Display:
000174DE 4EF9 0000 E742             		jmp	DisplaySprite
000174E4                            ; ===========================================================================
000174E4                            
000174E4                            loc_1629A:
000174E4 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000174EA 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000174EC 0C40 FF80                  		cmpi.w	#-$80,d0
000174F0 64EC                       		bcc.s	Obj6F_Display
000174F2                            
000174F2                            Obj6F_Act1or2:
000174F2 1028 002F                  		move.b	$2F(a0),d0
000174F6 6A00                       		bpl.s	Obj6F_Delete
000174F8 0240 007F                  		andi.w	#$7F,d0
000174FC 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
00017500 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00017506                            
00017506                            Obj6F_Delete:
00017506 4EF9 0000 E77E             		jmp	DeleteObject
0001750C                            ; ===========================================================================
0001750C 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
0001750E 0000                       		dc.w loc_163D8-Obj6F_Index
00017510                            ; ===========================================================================
00017510                            
00017510                            Obj6F_Main:				; XREF: Obj6F_Index
00017510 1028 0028                  		move.b	$28(a0),d0
00017514 6B00 0000                  		bmi.w	loc_16380
00017518 5428 0024                  		addq.b	#2,$24(a0)
0001751C 217C 0001 6B74 0004        		move.l	#Map_obj69a,4(a0)
00017524 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001752A 117C 0010 0019             		move.b	#$10,$19(a0)
00017530 0028 0004 0001             		ori.b	#4,1(a0)
00017536 117C 0004 0018             		move.b	#4,$18(a0)
0001753C 7000                       		moveq	#0,d0
0001753E 1028 0028                  		move.b	$28(a0),d0
00017542 3200                       		move.w	d0,d1
00017544 E648                       		lsr.w	#3,d0
00017546 0240 001E                  		andi.w	#$1E,d0
0001754A 45FA 0000                  		lea	off_164A6(pc),a2
0001754E D4F2 0000                  		adda.w	(a2,d0.w),a2
00017552 315A 0038                  		move.w	(a2)+,$38(a0)
00017556 315A 0030                  		move.w	(a2)+,$30(a0)
0001755A 214A 003C                  		move.l	a2,$3C(a0)
0001755E 0241 000F                  		andi.w	#$F,d1
00017562 E549                       		lsl.w	#2,d1
00017564 1141 0038                  		move.b	d1,$38(a0)
00017568 117C 0004 003A             		move.b	#4,$3A(a0)
0001756E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00017572 6700                       		beq.s	loc_16356
00017574 117C 0001 003B             		move.b	#1,$3B(a0)
0001757A 4428 003A                  		neg.b	$3A(a0)
0001757E 7200                       		moveq	#0,d1
00017580 1228 0038                  		move.b	$38(a0),d1
00017584 D228 003A                  		add.b	$3A(a0),d1
00017588 B228 0039                  		cmp.b	$39(a0),d1
0001758C 6500                       		bcs.s	loc_16352
0001758E 1001                       		move.b	d1,d0
00017590 7200                       		moveq	#0,d1
00017592 4A00                       		tst.b	d0
00017594 6A00                       		bpl.s	loc_16352
00017596 1228 0039                  		move.b	$39(a0),d1
0001759A 5901                       		subq.b	#4,d1
0001759C                            
0001759C                            loc_16352:
0001759C 1141 0038                  		move.b	d1,$38(a0)
000175A0                            
000175A0                            loc_16356:
000175A0 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000175A6 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000175AC 4A41                       		tst.w	d1
000175AE 6600                       		bne.s	loc_1636C
000175B0 117C 0001 001C             		move.b	#1,$1C(a0)
000175B6                            
000175B6                            loc_1636C:
000175B6 0C41 0008                  		cmpi.w	#8,d1
000175BA 6600                       		bne.s	loc_16378
000175BC 117C 0000 001C             		move.b	#0,$1C(a0)
000175C2                            
000175C2                            loc_16378:
000175C2 6100 C0C0                  		bsr.w	Obj63_ChangeDir
000175C6 6000 0000                  		bra.w	loc_163D8
000175CA                            ; ===========================================================================
000175CA                            
000175CA                            loc_16380:				; XREF: Obj6F_Main
000175CA 1140 002F                  		move.b	d0,$2F(a0)
000175CE 0240 007F                  		andi.w	#$7F,d0
000175D2 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000175D6 08F2 0000 0000             		bset	#0,(a2,d0.w)
000175DC 6700                       		beq.s	loc_1639A
000175DE 4EF9 0000 E77E             		jmp	DeleteObject
000175E4                            ; ===========================================================================
000175E4                            
000175E4                            loc_1639A:
000175E4 D040                       		add.w	d0,d0
000175E6 0240 001E                  		andi.w	#$1E,d0
000175EA 45F9 0000 0000             		lea	(ObjPos_SBZ1pf_Index).l,a2
000175F0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000175F4 321A                       		move.w	(a2)+,d1
000175F6 2248                       		movea.l	a0,a1
000175F8 6000                       		bra.s	Obj6F_LoadPform
000175FA                            ; ===========================================================================
000175FA                            
000175FA                            Obj6F_Loop:
000175FA 4EB9 0000 EBC8             		jsr	SingleObjLoad
00017600 6600                       		bne.s	loc_163D0
00017602                            
00017602                            Obj6F_LoadPform:			; XREF: loc_1639A
00017602 12BC 006F                  		move.b	#$6F,0(a1)
00017606 335A 0008                  		move.w	(a2)+,8(a1)
0001760A 335A 000C                  		move.w	(a2)+,$C(a1)
0001760E 301A                       		move.w	(a2)+,d0
00017610 1340 0028                  		move.b	d0,$28(a1)
00017614                            
00017614                            loc_163D0:
00017614 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00017618                            
00017618 588F                       		addq.l	#4,sp
0001761A 4E75                       		rts	
0001761C                            ; ===========================================================================
0001761C                            
0001761C                            loc_163D8:				; XREF: Obj6F_Index
0001761C 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
00017622 4EB9 0000 B790             		jsr	AnimateSprite
00017628 4A28 001A                  		tst.b	$1A(a0)
0001762C 6600                       		bne.s	loc_16404
0001762E 3F28 0008                  		move.w	8(a0),-(sp)
00017632 6100 0000                  		bsr.w	loc_16424
00017636 323C 001B                  		move.w	#$1B,d1
0001763A 343C 0007                  		move.w	#7,d2
0001763E 3602                       		move.w	d2,d3
00017640 5243                       		addq.w	#1,d3
00017642 381F                       		move.w	(sp)+,d4
00017644 6000 94CC                  		bra.w	SolidObject
00017648                            ; ===========================================================================
00017648                            
00017648                            loc_16404:
00017648 0828 0003 0022             		btst	#3,$22(a0)
0001764E 6700                       		beq.s	loc_16420
00017650 43F8 D000                  		lea	($FFFFD000).w,a1
00017654 08A9 0003 0022             		bclr	#3,$22(a1)
0001765A 08A8 0003 0022             		bclr	#3,$22(a0)
00017660 4228 0025                  		clr.b	$25(a0)
00017664                            
00017664                            loc_16420:
00017664 6000 0002                  		bra.w	*+4
00017668                            
00017668                            loc_16424:
00017668 3028 0008                  		move.w	8(a0),d0
0001766C B068 0034                  		cmp.w	$34(a0),d0
00017670 6600                       		bne.s	loc_16484
00017672 3028 000C                  		move.w	$C(a0),d0
00017676 B068 0036                  		cmp.w	$36(a0),d0
0001767A 6600                       		bne.s	loc_16484
0001767C 7200                       		moveq	#0,d1
0001767E 1228 0038                  		move.b	$38(a0),d1
00017682 D228 003A                  		add.b	$3A(a0),d1
00017686 B228 0039                  		cmp.b	$39(a0),d1
0001768A 6500                       		bcs.s	loc_16456
0001768C 1001                       		move.b	d1,d0
0001768E 7200                       		moveq	#0,d1
00017690 4A00                       		tst.b	d0
00017692 6A00                       		bpl.s	loc_16456
00017694 1228 0039                  		move.b	$39(a0),d1
00017698 5901                       		subq.b	#4,d1
0001769A                            
0001769A                            loc_16456:
0001769A 1141 0038                  		move.b	d1,$38(a0)
0001769E 2268 003C                  		movea.l	$3C(a0),a1
000176A2 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000176A8 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000176AE 4A41                       		tst.w	d1
000176B0 6600                       		bne.s	loc_16474
000176B2 117C 0001 001C             		move.b	#1,$1C(a0)
000176B8                            
000176B8                            loc_16474:
000176B8 0C41 0008                  		cmpi.w	#8,d1
000176BC 6600                       		bne.s	loc_16480
000176BE 117C 0000 001C             		move.b	#0,$1C(a0)
000176C4                            
000176C4                            loc_16480:
000176C4 6100 BFBE                  		bsr.w	Obj63_ChangeDir
000176C8                            
000176C8                            loc_16484:
000176C8 4EF9 0000 E71C             		jmp	SpeedToPos
000176CE                            ; ===========================================================================
000176CE                            Ani_obj6F:
000176CE                            	include "_anim\obj6F.asm"
000176CE                            ; ---------------------------------------------------------------------------
000176CE                            ; Animation script - platform on conveyor belt (SBZ)
000176CE                            ; ---------------------------------------------------------------------------
000176CE 0000                       		dc.w byte_1648E-Ani_obj6F
000176D0 0000                       		dc.w byte_164A2-Ani_obj6F
000176D2 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000176DF 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000176E6 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000176EA 00                         		even
000176EA 00                         		even
000176EA                            
000176EA 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000176F0 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000176F6 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
0001770A 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
0001771E 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
00017732 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
00017746 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
0001775A 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
0001776E                            ; ===========================================================================
0001776E                            ; ---------------------------------------------------------------------------
0001776E                            ; Object 70 - large girder block (SBZ)
0001776E                            ; ---------------------------------------------------------------------------
0001776E                            
0001776E                            Obj70:					; XREF: Obj_Index
0001776E 7000                       		moveq	#0,d0
00017770 1028 0024                  		move.b	$24(a0),d0
00017774 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00017778 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
0001777C                            ; ===========================================================================
0001777C 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
0001777E 0000                       		dc.w Obj70_Action-Obj70_Index
00017780                            ; ===========================================================================
00017780                            
00017780                            Obj70_Main:				; XREF: Obj70_Index
00017780 5428 0024                  		addq.b	#2,$24(a0)
00017784 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
0001778C 317C 42F0 0002             		move.w	#$42F0,2(a0)
00017792 0028 0004 0001             		ori.b	#4,1(a0)
00017798 117C 0004 0018             		move.b	#4,$18(a0)
0001779E 117C 0060 0019             		move.b	#$60,$19(a0)
000177A4 117C 0018 0016             		move.b	#$18,$16(a0)
000177AA 3168 0008 0032             		move.w	8(a0),$32(a0)
000177B0 3168 000C 0030             		move.w	$C(a0),$30(a0)
000177B6 6100 0000                  		bsr.w	Obj70_Move2
000177BA                            
000177BA                            Obj70_Action:				; XREF: Obj70_Index
000177BA 3F28 0008                  		move.w	8(a0),-(sp)
000177BE 4A68 003A                  		tst.w	$3A(a0)
000177C2 6700                       		beq.s	Obj70_Move
000177C4 5368 003A                  		subq.w	#1,$3A(a0)
000177C8 6600                       		bne.s	Obj70_Solid
000177CA                            
000177CA                            Obj70_Move:
000177CA 4EB9 0000 E71C             		jsr	SpeedToPos
000177D0 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000177D4 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000177D6 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000177DA                            
000177DA                            Obj70_Solid:
000177DA 381F                       		move.w	(sp)+,d4
000177DC 4A28 0001                  		tst.b	1(a0)
000177E0 6A00                       		bpl.s	Obj70_ChkDel
000177E2 7200                       		moveq	#0,d1
000177E4 1228 0019                  		move.b	$19(a0),d1
000177E8 0641 000B                  		addi.w	#$B,d1
000177EC 7400                       		moveq	#0,d2
000177EE 1428 0016                  		move.b	$16(a0),d2
000177F2 3602                       		move.w	d2,d3
000177F4 5243                       		addq.w	#1,d3
000177F6 6100 931A                  		bsr.w	SolidObject
000177FA                            
000177FA                            Obj70_ChkDel:
000177FA 3028 0032                  		move.w	$32(a0),d0
000177FE 0240 FF80                  		andi.w	#$FF80,d0
00017802 3238 F700                  		move.w	($FFFFF700).w,d1
00017806 0441 0080                  		subi.w	#$80,d1
0001780A 0241 FF80                  		andi.w	#$FF80,d1
0001780E 9041                       		sub.w	d1,d0
00017810 0C40 0280                  		cmpi.w	#$280,d0
00017814 6200                       		bhi.s	Obj70_Delete
00017816 4EF9 0000 E742             		jmp	DisplaySprite
0001781C                            ; ===========================================================================
0001781C                            
0001781C                            Obj70_Delete:
0001781C 4EF9 0000 E77E             		jmp	DeleteObject
00017822                            ; ===========================================================================
00017822                            
00017822                            Obj70_Move2:				; XREF: Obj70_Main
00017822 1028 0038                  		move.b	$38(a0),d0
00017826 0240 0018                  		andi.w	#$18,d0
0001782A 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00017830 43F1 0000                  		lea	(a1,d0.w),a1
00017834 3159 0010                  		move.w	(a1)+,$10(a0)
00017838 3159 0012                  		move.w	(a1)+,$12(a0)
0001783C 3159 0034                  		move.w	(a1)+,$34(a0)
00017840 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
00017844 317C 0007 003A             		move.w	#7,$3A(a0)
0001784A 4E75                       		rts	
0001784C                            ; ===========================================================================
0001784C 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
00017854 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
0001785C FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
00017864 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
0001786C                            ; ---------------------------------------------------------------------------
0001786C                            ; Sprite mappings - large girder block (SBZ)
0001786C                            ; ---------------------------------------------------------------------------
0001786C                            Map_obj70:
0001786C                            	include "_maps\obj70.asm"
0001786C                            ; ---------------------------------------------------------------------------
0001786C                            ; Sprite mappings - large girder block (SBZ)
0001786C                            ; ---------------------------------------------------------------------------
0001786C 0000                       		dc.w byte_1662A-Map_obj70
0001786E 0C                         byte_1662A:	dc.b $C
0001786F E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
00017874 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00017879 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
0001787E 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
00017883 E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00017888 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
0001788D E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
00017892 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
00017897 E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
0001789C 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
000178A1 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
000178A6 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
000178AC 00                         		even
000178AC 00                         		even
000178AC                            
000178AC                            ; ===========================================================================
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            ; Object 72 - teleporter (SBZ)
000178AC                            ; ---------------------------------------------------------------------------
000178AC                            
000178AC                            Obj72:					; XREF: Obj_Index
000178AC 7000                       		moveq	#0,d0
000178AE 1028 0024                  		move.b	$24(a0),d0
000178B2 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
000178B6 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000178BA 3028 0008                  		move.w	8(a0),d0
000178BE 0240 FF80                  		andi.w	#$FF80,d0
000178C2 3238 F700                  		move.w	($FFFFF700).w,d1
000178C6 0441 0080                  		subi.w	#$80,d1
000178CA 0241 FF80                  		andi.w	#$FF80,d1
000178CE 9041                       		sub.w	d1,d0
000178D0 0C40 0280                  		cmpi.w	#$280,d0
000178D4 6200                       		bhi.s	Obj72_Delete
000178D6 4E75                       		rts	
000178D8                            ; ===========================================================================
000178D8                            
000178D8                            Obj72_Delete:
000178D8 4EF9 0000 E77E             		jmp	DeleteObject
000178DE                            ; ===========================================================================
000178DE 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000178E0 0000                       		dc.w loc_166C8-Obj72_Index
000178E2 0000                       		dc.w loc_1675E-Obj72_Index
000178E4 0000                       		dc.w loc_16798-Obj72_Index
000178E6                            ; ===========================================================================
000178E6                            
000178E6                            Obj72_Main:				; XREF: Obj72_Index
000178E6 5428 0024                  		addq.b	#2,$24(a0)
000178EA 1028 0028                  		move.b	$28(a0),d0
000178EE D040                       		add.w	d0,d0
000178F0 0240 001E                  		andi.w	#$1E,d0
000178F4 45FA 0000                  		lea	Obj72_Data(pc),a2
000178F8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000178FC 315A 003A                  		move.w	(a2)+,$3A(a0)
00017900 214A 003C                  		move.l	a2,$3C(a0)
00017904 315A 0036                  		move.w	(a2)+,$36(a0)
00017908 315A 0038                  		move.w	(a2)+,$38(a0)
0001790C                            
0001790C                            loc_166C8:				; XREF: Obj72_Index
0001790C 43F8 D000                  		lea	($FFFFD000).w,a1
00017910 3029 0008                  		move.w	8(a1),d0
00017914 9068 0008                  		sub.w	8(a0),d0
00017918 0828 0000 0022             		btst	#0,$22(a0)
0001791E 6700                       		beq.s	loc_166E0
00017920 0640 000F                  		addi.w	#$F,d0
00017924                            
00017924                            loc_166E0:
00017924 0C40 0010                  		cmpi.w	#$10,d0
00017928 6400                       		bcc.s	locret_1675C
0001792A 3229 000C                  		move.w	$C(a1),d1
0001792E 9268 000C                  		sub.w	$C(a0),d1
00017932 0641 0020                  		addi.w	#$20,d1
00017936 0C41 0040                  		cmpi.w	#$40,d1
0001793A 6400                       		bcc.s	locret_1675C
0001793C 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00017940 6600                       		bne.s	locret_1675C
00017942 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00017948 6600                       		bne.s	loc_1670E
0001794A 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00017950 6500                       		bcs.s	locret_1675C
00017952                            
00017952                            loc_1670E:
00017952 5428 0024                  		addq.b	#2,$24(a0)
00017956 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
0001795C 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
00017962 337C 0800 0014             		move.w	#$800,$14(a1)
00017968 337C 0000 0010             		move.w	#0,$10(a1)
0001796E 337C 0000 0012             		move.w	#0,$12(a1)
00017974 08A8 0005 0022             		bclr	#5,$22(a0)
0001797A 08A9 0005 0022             		bclr	#5,$22(a1)
00017980 08E9 0001 0022             		bset	#1,$22(a1)
00017986 3368 0008 0008             		move.w	8(a0),8(a1)
0001798C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017992 4228 0032                  		clr.b	$32(a0)
00017996 303C 00BE                  		move.w	#$BE,d0
0001799A 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
000179A0                            
000179A0                            locret_1675C:
000179A0 4E75                       		rts	
000179A2                            ; ===========================================================================
000179A2                            
000179A2                            loc_1675E:				; XREF: Obj72_Index
000179A2 43F8 D000                  		lea	($FFFFD000).w,a1
000179A6 1028 0032                  		move.b	$32(a0),d0
000179AA 5428 0032                  		addq.b	#2,$32(a0)
000179AE 4EB9 0000 3416             		jsr	(CalcSine).l
000179B4 EA40                       		asr.w	#5,d0
000179B6 3428 000C                  		move.w	$C(a0),d2
000179BA 9440                       		sub.w	d0,d2
000179BC 3342 000C                  		move.w	d2,$C(a1)
000179C0 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000179C6 6600                       		bne.s	locret_16796
000179C8 6100 0000                  		bsr.w	sub_1681C
000179CC 5428 0024                  		addq.b	#2,$24(a0)
000179D0 303C 00BC                  		move.w	#$BC,d0
000179D4 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play teleport sound
000179DA                            
000179DA                            locret_16796:
000179DA 4E75                       		rts	
000179DC                            ; ===========================================================================
000179DC                            
000179DC                            loc_16798:				; XREF: Obj72_Index
000179DC 588F                       		addq.l	#4,sp
000179DE 43F8 D000                  		lea	($FFFFD000).w,a1
000179E2 5328 002E                  		subq.b	#1,$2E(a0)
000179E6 6A00                       		bpl.s	loc_167DA
000179E8 3368 0036 0008             		move.w	$36(a0),8(a1)
000179EE 3368 0038 000C             		move.w	$38(a0),$C(a1)
000179F4 7200                       		moveq	#0,d1
000179F6 1228 003A                  		move.b	$3A(a0),d1
000179FA 5801                       		addq.b	#4,d1
000179FC B228 003B                  		cmp.b	$3B(a0),d1
00017A00 6500                       		bcs.s	loc_167C2
00017A02 7200                       		moveq	#0,d1
00017A04 6000                       		bra.s	loc_16800
00017A06                            ; ===========================================================================
00017A06                            
00017A06                            loc_167C2:
00017A06 1141 003A                  		move.b	d1,$3A(a0)
00017A0A 2468 003C                  		movea.l	$3C(a0),a2
00017A0E 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
00017A14 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00017A1A 6000 0000                  		bra.w	sub_1681C
00017A1E                            ; ===========================================================================
00017A1E                            
00017A1E                            loc_167DA:
00017A1E 2429 0008                  		move.l	8(a1),d2
00017A22 2629 000C                  		move.l	$C(a1),d3
00017A26 3029 0010                  		move.w	$10(a1),d0
00017A2A 48C0                       		ext.l	d0
00017A2C E180                       		asl.l	#8,d0
00017A2E D480                       		add.l	d0,d2
00017A30 3029 0012                  		move.w	$12(a1),d0
00017A34 48C0                       		ext.l	d0
00017A36 E180                       		asl.l	#8,d0
00017A38 D680                       		add.l	d0,d3
00017A3A 2342 0008                  		move.l	d2,8(a1)
00017A3E 2343 000C                  		move.l	d3,$C(a1)
00017A42 4E75                       		rts	
00017A44                            ; ===========================================================================
00017A44                            
00017A44                            loc_16800:
00017A44 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00017A4A 4228 0024                  		clr.b	$24(a0)
00017A4E 4238 F7C8                  		clr.b	($FFFFF7C8).w
00017A52 337C 0000 0010             		move.w	#0,$10(a1)
00017A58 337C 0200 0012             		move.w	#$200,$12(a1)
00017A5E 4E75                       		rts	
00017A60                            
00017A60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017A60                            
00017A60                            
00017A60                            sub_1681C:
00017A60 7000                       		moveq	#0,d0
00017A62 343C 1000                  		move.w	#$1000,d2
00017A66 3028 0036                  		move.w	$36(a0),d0
00017A6A 9069 0008                  		sub.w	8(a1),d0
00017A6E 6C00                       		bge.s	loc_16830
00017A70 4440                       		neg.w	d0
00017A72 4442                       		neg.w	d2
00017A74                            
00017A74                            loc_16830:
00017A74 7200                       		moveq	#0,d1
00017A76 363C 1000                  		move.w	#$1000,d3
00017A7A 3228 0038                  		move.w	$38(a0),d1
00017A7E 9269 000C                  		sub.w	$C(a1),d1
00017A82 6C00                       		bge.s	loc_16844
00017A84 4441                       		neg.w	d1
00017A86 4443                       		neg.w	d3
00017A88                            
00017A88                            loc_16844:
00017A88 B240                       		cmp.w	d0,d1
00017A8A 6500                       		bcs.s	loc_1687A
00017A8C 7200                       		moveq	#0,d1
00017A8E 3228 0038                  		move.w	$38(a0),d1
00017A92 9269 000C                  		sub.w	$C(a1),d1
00017A96 4841                       		swap	d1
00017A98 83C3                       		divs.w	d3,d1
00017A9A 7000                       		moveq	#0,d0
00017A9C 3028 0036                  		move.w	$36(a0),d0
00017AA0 9069 0008                  		sub.w	8(a1),d0
00017AA4 6700                       		beq.s	loc_16866
00017AA6 4840                       		swap	d0
00017AA8 81C1                       		divs.w	d1,d0
00017AAA                            
00017AAA                            loc_16866:
00017AAA 3340 0010                  		move.w	d0,$10(a1)
00017AAE 3343 0012                  		move.w	d3,$12(a1)
00017AB2 4A41                       		tst.w	d1
00017AB4 6A00                       		bpl.s	loc_16874
00017AB6 4441                       		neg.w	d1
00017AB8                            
00017AB8                            loc_16874:
00017AB8 3141 002E                  		move.w	d1,$2E(a0)
00017ABC 4E75                       		rts	
00017ABE                            ; ===========================================================================
00017ABE                            
00017ABE                            loc_1687A:
00017ABE 7000                       		moveq	#0,d0
00017AC0 3028 0036                  		move.w	$36(a0),d0
00017AC4 9069 0008                  		sub.w	8(a1),d0
00017AC8 4840                       		swap	d0
00017ACA 81C2                       		divs.w	d2,d0
00017ACC 7200                       		moveq	#0,d1
00017ACE 3228 0038                  		move.w	$38(a0),d1
00017AD2 9269 000C                  		sub.w	$C(a1),d1
00017AD6 6700                       		beq.s	loc_16898
00017AD8 4841                       		swap	d1
00017ADA 83C0                       		divs.w	d0,d1
00017ADC                            
00017ADC                            loc_16898:
00017ADC 3341 0012                  		move.w	d1,$12(a1)
00017AE0 3342 0010                  		move.w	d2,$10(a1)
00017AE4 4A40                       		tst.w	d0
00017AE6 6A00                       		bpl.s	loc_168A6
00017AE8 4440                       		neg.w	d0
00017AEA                            
00017AEA                            loc_168A6:
00017AEA 3140 002E                  		move.w	d0,$2E(a0)
00017AEE 4E75                       		rts	
00017AF0                            ; End of function sub_1681C
00017AF0                            
00017AF0                            ; ===========================================================================
00017AF0 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
00017AF6 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
00017AFC 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
00017B00 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
00017B06 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
00017B0C 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
00017B12 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00017B18 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00017B1E 0884 0298 0894             		dc.w $884, $298, $894
00017B24 0270 0894 0190             		dc.w $270, $894, $190
00017B2A 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00017B30 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
00017B36 1184 0498 1158             		dc.w $1184, $498, $1158
00017B3C 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
00017B42 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00017B48 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00017B4E 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
00017B54 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00017B5A 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00017B60 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
00017B66 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00017B6C FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
00017B72 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00017B78                            ; ===========================================================================
00017B78                            ; ---------------------------------------------------------------------------
00017B78                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00017B78                            ; ---------------------------------------------------------------------------
00017B78                            
00017B78                            Obj78:					; XREF: Obj_Index
00017B78 7000                       		moveq	#0,d0
00017B7A 1028 0024                  		move.b	$24(a0),d0
00017B7E 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
00017B82 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
00017B86                            ; ===========================================================================
00017B86 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00017B88 0000                       		dc.w Obj78_Action-Obj78_Index
00017B8A 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017B8C 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00017B8E 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00017B90 0000                       		dc.w Obj78_Delete-Obj78_Index
00017B92 0000                       		dc.w loc_16CC0-Obj78_Index
00017B94                            ; ===========================================================================
00017B94                            
00017B94                            locret_16950:
00017B94 4E75                       		rts	
00017B96                            ; ===========================================================================
00017B96                            
00017B96                            Obj78_Main:				; XREF: Obj78_Index
00017B96 117C 0007 0016             		move.b	#7,$16(a0)
00017B9C 117C 0008 0017             		move.b	#8,$17(a0)
00017BA2 4EB9 0000 E6AA             		jsr	ObjectFall
00017BA8 4EBA E4AA                  		jsr	ObjHitFloor
00017BAC 4A41                       		tst.w	d1
00017BAE 6AE4                       		bpl.s	locret_16950
00017BB0 D368 000C                  		add.w	d1,$C(a0)
00017BB4 4268 0012                  		clr.w	$12(a0)
00017BB8 5428 0024                  		addq.b	#2,$24(a0)
00017BBC 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
00017BC4 317C 22B0 0002             		move.w	#$22B0,2(a0)
00017BCA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
00017BD0 6700                       		beq.s	loc_16996
00017BD2 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
00017BD8                            
00017BD8                            loc_16996:
00017BD8 0228 0003 0001             		andi.b	#3,1(a0)
00017BDE 0028 0004 0001             		ori.b	#4,1(a0)
00017BE4 1168 0001 0022             		move.b	1(a0),$22(a0)
00017BEA 117C 0004 0018             		move.b	#4,$18(a0)
00017BF0 117C 0008 0019             		move.b	#8,$19(a0)
00017BF6 117C 000B 0020             		move.b	#$B,$20(a0)
00017BFC 3428 0008                  		move.w	8(a0),d2
00017C00 7A0C                       		moveq	#$C,d5
00017C02 0828 0000 0022             		btst	#0,$22(a0)
00017C08 6700                       		beq.s	loc_169CA
00017C0A 4445                       		neg.w	d5
00017C0C                            
00017C0C                            loc_169CA:
00017C0C 1C3C 0004                  		move.b	#4,d6
00017C10 7600                       		moveq	#0,d3
00017C12 7804                       		moveq	#4,d4
00017C14 2448                       		movea.l	a0,a2
00017C16 7202                       		moveq	#2,d1
00017C18                            
00017C18                            Obj78_LoadBody:
00017C18 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00017C1E 6600                       		bne.s	Obj78_QuitLoad
00017C20 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
00017C24 1346 0024                  		move.b	d6,$24(a1)
00017C28 5406                       		addq.b	#2,d6
00017C2A 2368 0004 0004             		move.l	4(a0),4(a1)
00017C30 3368 0002 0002             		move.w	2(a0),2(a1)
00017C36 137C 0005 0018             		move.b	#5,$18(a1)
00017C3C 137C 0008 0019             		move.b	#8,$19(a1)
00017C42 137C 00CB 0020             		move.b	#$CB,$20(a1)
00017C48 D445                       		add.w	d5,d2
00017C4A 3342 0008                  		move.w	d2,8(a1)
00017C4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017C54 1368 0022 0022             		move.b	$22(a0),$22(a1)
00017C5A 1368 0022 0001             		move.b	$22(a0),1(a1)
00017C60 137C 0008 001A             		move.b	#8,$1A(a1)
00017C66 234A 003C                  		move.l	a2,$3C(a1)
00017C6A 1344 003C                  		move.b	d4,$3C(a1)
00017C6E 5804                       		addq.b	#4,d4
00017C70 2449                       		movea.l	a1,a2
00017C72                            
00017C72                            Obj78_QuitLoad:
00017C72 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
00017C76                            
00017C76 117C 0007 002A             		move.b	#7,$2A(a0)
00017C7C 4228 003C                  		clr.b	$3C(a0)
00017C80                            
00017C80                            Obj78_Action:				; XREF: Obj78_Index
00017C80 4A28 0022                  		tst.b	$22(a0)
00017C84 6B00 0000                  		bmi.w	loc_16C96
00017C88 7000                       		moveq	#0,d0
00017C8A 1028 0025                  		move.b	$25(a0),d0
00017C8E 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
00017C92 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
00017C96 1228 002B                  		move.b	$2B(a0),d1
00017C9A 6A00                       		bpl.s	Obj78_Display
00017C9C 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017CA2 1028 0026                  		move.b	$26(a0),d0
00017CA6 0240 007F                  		andi.w	#$7F,d0
00017CAA 5828 0026                  		addq.b	#4,$26(a0)
00017CAE 1031 0000                  		move.b	(a1,d0.w),d0
00017CB2 6A00                       		bpl.s	Obj78_AniHead
00017CB4 08A8 0007 002B             		bclr	#7,$2B(a0)
00017CBA 6000                       		bra.s	Obj78_Display
00017CBC                            ; ===========================================================================
00017CBC                            
00017CBC                            Obj78_AniHead:
00017CBC 0201 0010                  		andi.b	#$10,d1
00017CC0 D001                       		add.b	d1,d0
00017CC2 1140 001A                  		move.b	d0,$1A(a0)
00017CC6                            
00017CC6                            Obj78_Display:
00017CC6 3028 0008                  		move.w	8(a0),d0
00017CCA 0240 FF80                  		andi.w	#$FF80,d0
00017CCE 3238 F700                  		move.w	($FFFFF700).w,d1
00017CD2 0441 0080                  		subi.w	#$80,d1
00017CD6 0241 FF80                  		andi.w	#$FF80,d1
00017CDA 9041                       		sub.w	d1,d0
00017CDC 0C40 0280                  		cmpi.w	#$280,d0
00017CE0 6200 0000                  		bhi.w	Obj78_ChkGone
00017CE4 4EF9 0000 E742             		jmp	DisplaySprite
00017CEA                            ; ===========================================================================
00017CEA                            
00017CEA                            Obj78_ChkGone:
00017CEA 45F8 FC00                  		lea	($FFFFFC00).w,a2
00017CEE 7000                       		moveq	#0,d0
00017CF0 1028 0023                  		move.b	$23(a0),d0
00017CF4 6700                       		beq.s	loc_16ABC
00017CF6 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00017CFC                            
00017CFC                            loc_16ABC:
00017CFC 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
00017D02 4E75                       		rts	
00017D04                            ; ===========================================================================
00017D04                            
00017D04                            Obj78_Delete:				; XREF: Obj78_Index
00017D04 4EF9 0000 E77E             		jmp	DeleteObject
00017D0A                            ; ===========================================================================
00017D0A 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
00017D0C 0000                       		dc.w loc_16B02-Obj78_Index2
00017D0E                            ; ===========================================================================
00017D0E                            
00017D0E                            Obj78_Move:				; XREF: Obj78_Index2
00017D0E 5328 002A                  		subq.b	#1,$2A(a0)
00017D12 6B00                       		bmi.s	Obj78_Move2
00017D14 4E75                       		rts	
00017D16                            ; ===========================================================================
00017D16                            
00017D16                            Obj78_Move2:
00017D16 5428 0025                  		addq.b	#2,$25(a0)
00017D1A 117C 0010 002A             		move.b	#$10,$2A(a0)
00017D20 317C FF40 0010             		move.w	#-$C0,$10(a0)
00017D26 317C 0040 0014             		move.w	#$40,$14(a0)
00017D2C 0868 0004 002B             		bchg	#4,$2B(a0)
00017D32 6600                       		bne.s	loc_16AFC
00017D34 4268 0010                  		clr.w	$10(a0)
00017D38 4468 0014                  		neg.w	$14(a0)
00017D3C                            
00017D3C                            loc_16AFC:
00017D3C 08E8 0007 002B             		bset	#7,$2B(a0)
00017D42                            
00017D42                            loc_16B02:				; XREF: Obj78_Index2
00017D42 5328 002A                  		subq.b	#1,$2A(a0)
00017D46 6B00                       		bmi.s	loc_16B5E
00017D48 2F28 0008                  		move.l	8(a0),-(sp)
00017D4C 2428 0008                  		move.l	8(a0),d2
00017D50 3028 0010                  		move.w	$10(a0),d0
00017D54 0828 0000 0022             		btst	#0,$22(a0)
00017D5A 6700                       		beq.s	loc_16B1E
00017D5C 4440                       		neg.w	d0
00017D5E                            
00017D5E                            loc_16B1E:
00017D5E 48C0                       		ext.l	d0
00017D60 E180                       		asl.l	#8,d0
00017D62 D480                       		add.l	d0,d2
00017D64 2142 0008                  		move.l	d2,8(a0)
00017D68 4EBA E2EA                  		jsr	ObjHitFloor
00017D6C 241F                       		move.l	(sp)+,d2
00017D6E 0C41 FFF8                  		cmpi.w	#-8,d1
00017D72 6D00                       		blt.s	loc_16B70
00017D74 0C41 000C                  		cmpi.w	#$C,d1
00017D78 6C00                       		bge.s	loc_16B70
00017D7A D368 000C                  		add.w	d1,$C(a0)
00017D7E 4842                       		swap	d2
00017D80 B468 0008                  		cmp.w	8(a0),d2
00017D84 6700                       		beq.s	locret_16B5C
00017D86 7000                       		moveq	#0,d0
00017D88 1028 003C                  		move.b	$3C(a0),d0
00017D8C 5228 003C                  		addq.b	#1,$3C(a0)
00017D90 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017D96 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017D9A                            
00017D9A                            locret_16B5C:
00017D9A 4E75                       		rts	
00017D9C                            ; ===========================================================================
00017D9C                            
00017D9C                            loc_16B5E:
00017D9C 5528 0025                  		subq.b	#2,$25(a0)
00017DA0 117C 0007 002A             		move.b	#7,$2A(a0)
00017DA6 317C 0000 0010             		move.w	#0,$10(a0)
00017DAC 4E75                       		rts	
00017DAE                            ; ===========================================================================
00017DAE                            
00017DAE                            loc_16B70:
00017DAE 2142 0008                  		move.l	d2,8(a0)
00017DB2 0868 0000 0022             		bchg	#0,$22(a0)
00017DB8 1168 0022 0001             		move.b	$22(a0),1(a0)
00017DBE 7000                       		moveq	#0,d0
00017DC0 1028 003C                  		move.b	$3C(a0),d0
00017DC4 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00017DCA 5228 003C                  		addq.b	#1,$3C(a0)
00017DCE 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017DD4 4E75                       		rts	
00017DD6                            ; ===========================================================================
00017DD6                            
00017DD6                            Obj78_BodySeg2:				; XREF: Obj78_Index
00017DD6 2268 003C                  		movea.l	$3C(a0),a1
00017DDA 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017DE0 6A00                       		bpl.s	Obj78_BodySeg1
00017DE2 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00017DE8 1028 0026                  		move.b	$26(a0),d0
00017DEC 0240 007F                  		andi.w	#$7F,d0
00017DF0 5828 0026                  		addq.b	#4,$26(a0)
00017DF4 4A31 0004                  		tst.b	4(a1,d0.w)
00017DF8 6A00                       		bpl.s	Obj78_AniBody
00017DFA 5828 0026                  		addq.b	#4,$26(a0)
00017DFE                            
00017DFE                            Obj78_AniBody:
00017DFE 1031 0000                  		move.b	(a1,d0.w),d0
00017E02 5000                       		addq.b	#8,d0
00017E04 1140 001A                  		move.b	d0,$1A(a0)
00017E08                            
00017E08                            Obj78_BodySeg1:				; XREF: Obj78_Index
00017E08 2268 003C                  		movea.l	$3C(a0),a1
00017E0C 4A28 0022                  		tst.b	$22(a0)
00017E10 6B00 0000                  		bmi.w	loc_16C90
00017E14 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00017E1A 1169 0025 0025             		move.b	$25(a1),$25(a0)
00017E20 6700 0000                  		beq.w	loc_16C64
00017E24 3169 0014 0014             		move.w	$14(a1),$14(a0)
00017E2A 3029 0010                  		move.w	$10(a1),d0
00017E2E D069 0014                  		add.w	$14(a1),d0
00017E32 3140 0010                  		move.w	d0,$10(a0)
00017E36 2428 0008                  		move.l	8(a0),d2
00017E3A 2602                       		move.l	d2,d3
00017E3C 3028 0010                  		move.w	$10(a0),d0
00017E40 0828 0000 0022             		btst	#0,$22(a0)
00017E46 6700                       		beq.s	loc_16C0C
00017E48 4440                       		neg.w	d0
00017E4A                            
00017E4A                            loc_16C0C:
00017E4A 48C0                       		ext.l	d0
00017E4C E180                       		asl.l	#8,d0
00017E4E D480                       		add.l	d0,d2
00017E50 2142 0008                  		move.l	d2,8(a0)
00017E54 4843                       		swap	d3
00017E56 B668 0008                  		cmp.w	8(a0),d3
00017E5A 6700                       		beq.s	loc_16C64
00017E5C 7000                       		moveq	#0,d0
00017E5E 1028 003C                  		move.b	$3C(a0),d0
00017E62 1231 002C                  		move.b	$2C(a1,d0.w),d1
00017E66 0C01 0080                  		cmpi.b	#-$80,d1
00017E6A 6600                       		bne.s	loc_16C50
00017E6C 4843                       		swap	d3
00017E6E 2143 0008                  		move.l	d3,8(a0)
00017E72 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017E76 0868 0000 0022             		bchg	#0,$22(a0)
00017E7C 1168 0022 0001             		move.b	$22(a0),1(a0)
00017E82 5228 003C                  		addq.b	#1,$3C(a0)
00017E86 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017E8C 6000                       		bra.s	loc_16C64
00017E8E                            ; ===========================================================================
00017E8E                            
00017E8E                            loc_16C50:
00017E8E 4881                       		ext.w	d1
00017E90 D368 000C                  		add.w	d1,$C(a0)
00017E94 5228 003C                  		addq.b	#1,$3C(a0)
00017E98 0228 000F 003C             		andi.b	#$F,$3C(a0)
00017E9E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00017EA2                            
00017EA2                            loc_16C64:
00017EA2 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00017EA8 6700                       		beq.s	loc_16C90
00017EAA 0C11 0027                  		cmpi.b	#$27,0(a1)
00017EAE 6700                       		beq.s	loc_16C7C
00017EB0 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00017EB6 6600                       		bne.s	loc_16C82
00017EB8                            
00017EB8                            loc_16C7C:
00017EB8 117C 000A 0024             		move.b	#$A,$24(a0)
00017EBE                            
00017EBE                            loc_16C82:
00017EBE 4EF9 0000 E742             		jmp	DisplaySprite
00017EC4                            
00017EC4                            ; ===========================================================================
00017EC4 FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00017ECC                            ; ===========================================================================
00017ECC                            
00017ECC                            loc_16C90:
00017ECC 08E9 0007 0022             		bset	#7,$22(a1)
00017ED2                            
00017ED2                            loc_16C96:
00017ED2 7000                       		moveq	#0,d0
00017ED4 1028 0024                  		move.b	$24(a0),d0
00017ED8 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00017EDC 0828 0000 0022             		btst	#0,$22(a0)
00017EE2 6700                       		beq.s	loc_16CAA
00017EE4 4440                       		neg.w	d0
00017EE6                            
00017EE6                            loc_16CAA:
00017EE6 3140 0010                  		move.w	d0,$10(a0)
00017EEA 317C FC00 0012             		move.w	#-$400,$12(a0)
00017EF0 117C 000C 0024             		move.b	#$C,$24(a0)
00017EF6 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00017EFC                            
00017EFC                            loc_16CC0:				; XREF: Obj78_Index
00017EFC 4EB9 0000 E6AA             		jsr	ObjectFall
00017F02 4A68 0012                  		tst.w	$12(a0)
00017F06 6B00                       		bmi.s	loc_16CE0
00017F08 4EBA E14A                  		jsr	ObjHitFloor
00017F0C 4A41                       		tst.w	d1
00017F0E 6A00                       		bpl.s	loc_16CE0
00017F10 D368 000C                  		add.w	d1,$C(a0)
00017F14 317C FC00 0012             		move.w	#-$400,$12(a0)
00017F1A                            
00017F1A                            loc_16CE0:
00017F1A 4A28 0001                  		tst.b	1(a0)
00017F1E 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00017F22 4EF9 0000 E742             		jmp	DisplaySprite
00017F28                            ; ===========================================================================
00017F28                            Ani_obj78:
00017F28                            	include "_anim\obj78.asm"
00017F28                            ; ---------------------------------------------------------------------------
00017F28                            ; Animation script - Caterkiller enemy (uses non-standard format)
00017F28                            ; ---------------------------------------------------------------------------
00017F28 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00017F38 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00017F48 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00017F58 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00017F68 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00017F78 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00017F88 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00017F98 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00017FA8                            	even
00017FA8                            	even
00017FA8                            
00017FA8                            ; ---------------------------------------------------------------------------
00017FA8                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017FA8                            ; ---------------------------------------------------------------------------
00017FA8                            Map_obj78:
00017FA8                            	include "_maps\obj78.asm"
00017FA8                            ; ---------------------------------------------------------------------------
00017FA8                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00017FA8                            ; ---------------------------------------------------------------------------
00017FA8 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00017FAC 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00017FB0 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00017FB4 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00017FB8 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00017FBC 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00017FC0 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00017FC4 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00017FC8 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00017FCC 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00017FD0 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00017FD4 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00017FD8 01                         byte_16D9E:	dc.b 1
00017FD9 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00017FDE 01                         byte_16DA4:	dc.b 1
00017FDF F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00017FE4 01                         byte_16DAA:	dc.b 1
00017FE5 F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00017FEA 01                         byte_16DB0:	dc.b 1
00017FEB EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00017FF0 01                         byte_16DB6:	dc.b 1
00017FF1 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00017FF6 01                         byte_16DBC:	dc.b 1
00017FF7 ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00017FFC 01                         byte_16DC2:	dc.b 1
00017FFD EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00018002 01                         byte_16DC8:	dc.b 1
00018003 EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00018008 01                         byte_16DCE:	dc.b 1
00018009 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001800E 01                         byte_16DD4:	dc.b 1
0001800F F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00018014 01                         byte_16DDA:	dc.b 1
00018015 F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
0001801A 01                         byte_16DE0:	dc.b 1
0001801B F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00018020 01                         byte_16DE6:	dc.b 1
00018021 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00018026 01                         byte_16DEC:	dc.b 1
00018027 F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
0001802C 01                         byte_16DF2:	dc.b 1
0001802D F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00018032 01                         byte_16DF8:	dc.b 1
00018033 F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00018038 01                         byte_16DFE:	dc.b 1
00018039 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
0001803E 01                         byte_16E04:	dc.b 1
0001803F F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00018044 01                         byte_16E0A:	dc.b 1
00018045 F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
0001804A 01                         byte_16E10:	dc.b 1
0001804B EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00018050 01                         byte_16E16:	dc.b 1
00018051 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00018056 01                         byte_16E1C:	dc.b 1
00018057 ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
0001805C 01                         byte_16E22:	dc.b 1
0001805D EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00018062 01                         byte_16E28:	dc.b 1
00018063 EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00018068                            		even
00018068                            		even
00018068                            
00018068                            ; ===========================================================================
00018068                            ; ---------------------------------------------------------------------------
00018068                            ; Object 79 - lamppost
00018068                            ; ---------------------------------------------------------------------------
00018068                            
00018068                            Obj79:					; XREF: Obj_Index
00018068 7000                       		moveq	#0,d0
0001806A 1028 0024                  		move.b	$24(a0),d0
0001806E 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00018072 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00018076 4EFA 8772                  		jmp	MarkObjGone
0001807A                            ; ===========================================================================
0001807A 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
0001807C 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
0001807E 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00018080 0000                       		dc.w Obj79_Twirl-Obj79_Index
00018082                            ; ===========================================================================
00018082                            
00018082                            Obj79_Main:				; XREF: Obj79_Index
00018082 5428 0024                  		addq.b	#2,$24(a0)
00018086 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
0001808E 317C 07A0 0002             		move.w	#$7A0,2(a0)
00018094 117C 0004 0001             		move.b	#4,1(a0)
0001809A 117C 0008 0019             		move.b	#8,$19(a0)
000180A0 117C 0005 0018             		move.b	#5,$18(a0)
000180A6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000180AA 7000                       		moveq	#0,d0
000180AC 1028 0023                  		move.b	$23(a0),d0
000180B0 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000180B6 0832 0000 0002             		btst	#0,2(a2,d0.w)
000180BC 6600                       		bne.s	Obj79_RedLamp
000180BE 1238 FE30                  		move.b	($FFFFFE30).w,d1
000180C2 0201 007F                  		andi.b	#$7F,d1
000180C6 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
000180CA 0202 007F                  		andi.b	#$7F,d2
000180CE B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
000180D0 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
000180D2                            
000180D2                            Obj79_RedLamp:
000180D2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000180D8 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
000180DE 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
000180E4 4E75                       		rts	
000180E6                            ; ===========================================================================
000180E6                            
000180E6                            Obj79_BlueLamp:				; XREF: Obj79_Index
000180E6 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
000180EA 6600 0000                  		bne.w	locret_16F90	; if yes, branch
000180EE 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000180F2 6B00 0000                  		bmi.w	locret_16F90
000180F6 1238 FE30                  		move.b	($FFFFFE30).w,d1
000180FA 0201 007F                  		andi.b	#$7F,d1
000180FE 1428 0028                  		move.b	$28(a0),d2
00018102 0202 007F                  		andi.b	#$7F,d2
00018106 B202                       		cmp.b	d2,d1
00018108 6500                       		bcs.s	Obj79_HitLamp
0001810A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0001810E 7000                       		moveq	#0,d0
00018110 1028 0023                  		move.b	$23(a0),d0
00018114 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001811A 117C 0004 0024             		move.b	#4,$24(a0)
00018120 117C 0003 001A             		move.b	#3,$1A(a0)
00018126 6000 0000                  		bra.w	locret_16F90
0001812A                            ; ===========================================================================
0001812A                            
0001812A                            Obj79_HitLamp:
0001812A 3038 D008                  		move.w	($FFFFD008).w,d0
0001812E 9068 0008                  		sub.w	8(a0),d0
00018132 5040                       		addq.w	#8,d0
00018134 0C40 0010                  		cmpi.w	#$10,d0
00018138 6400 0000                  		bcc.w	locret_16F90
0001813C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00018140 9068 000C                  		sub.w	$C(a0),d0
00018144 0640 0040                  		addi.w	#$40,d0
00018148 0C40 0068                  		cmpi.w	#$68,d0
0001814C 6400                       		bcc.s	locret_16F90
0001814E 303C 00A1                  		move.w	#$A1,d0
00018152 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play lamppost sound
00018158 5428 0024                  		addq.b	#2,$24(a0)
0001815C 4EB9 0000 EBC8             		jsr	SingleObjLoad
00018162 6600                       		bne.s	loc_16F76
00018164 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00018168 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
0001816E 3368 0008 0030             		move.w	8(a0),$30(a1)
00018174 3368 000C 0032             		move.w	$C(a0),$32(a1)
0001817A 0469 0018 0032             		subi.w	#$18,$32(a1)
00018180 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00018188 337C 07A0 0002             		move.w	#$7A0,2(a1)
0001818E 137C 0004 0001             		move.b	#4,1(a1)
00018194 137C 0008 0019             		move.b	#8,$19(a1)
0001819A 137C 0004 0018             		move.b	#4,$18(a1)
000181A0 137C 0002 001A             		move.b	#2,$1A(a1)
000181A6 337C 0020 0036             		move.w	#$20,$36(a1)
000181AC                            
000181AC                            loc_16F76:
000181AC 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
000181B2 6100 0000                  		bsr.w	Obj79_StoreInfo
000181B6 45F8 FC00                  		lea	($FFFFFC00).w,a2
000181BA 7000                       		moveq	#0,d0
000181BC 1028 0023                  		move.b	$23(a0),d0
000181C0 08F2 0000 0002             		bset	#0,2(a2,d0.w)
000181C6                            
000181C6                            locret_16F90:
000181C6 4E75                       		rts	
000181C8                            ; ===========================================================================
000181C8                            
000181C8                            Obj79_AfterHit:				; XREF: Obj79_Index
000181C8 4E75                       		rts	
000181CA                            ; ===========================================================================
000181CA                            
000181CA                            Obj79_Twirl:				; XREF: Obj79_Index
000181CA 5368 0036                  		subq.w	#1,$36(a0)
000181CE 6A00                       		bpl.s	loc_16FA0
000181D0 117C 0004 0024             		move.b	#4,$24(a0)
000181D6                            
000181D6                            loc_16FA0:
000181D6 1028 0026                  		move.b	$26(a0),d0
000181DA 0428 0010 0026             		subi.b	#$10,$26(a0)
000181E0 0400 0040                  		subi.b	#$40,d0
000181E4 4EB9 0000 3416             		jsr	(CalcSine).l
000181EA C3FC 0C00                  		muls.w	#$C00,d1
000181EE 4841                       		swap	d1
000181F0 D268 0030                  		add.w	$30(a0),d1
000181F4 3141 0008                  		move.w	d1,8(a0)
000181F8 C1FC 0C00                  		muls.w	#$C00,d0
000181FC 4840                       		swap	d0
000181FE D068 0032                  		add.w	$32(a0),d0
00018202 3140 000C                  		move.w	d0,$C(a0)
00018206 4E75                       		rts	
00018208                            ; ===========================================================================
00018208                            ; ---------------------------------------------------------------------------
00018208                            ; Subroutine to	store information when you hit a lamppost
00018208                            ; ---------------------------------------------------------------------------
00018208                            
00018208                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00018208 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
0001820E 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00018214 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
0001821A 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00018220 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00018226 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
0001822C 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00018232 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00018238 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
0001823E 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00018244 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
0001824A 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00018250 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00018256 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
0001825C 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00018262 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00018268 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
0001826E 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00018274 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
0001827A 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00018280 4E75                       		rts	
00018282                            
00018282                            ; ---------------------------------------------------------------------------
00018282                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00018282                            ; ---------------------------------------------------------------------------
00018282                            
00018282                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018282                            
00018282                            
00018282                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00018282 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00018288 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
0001828E 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00018294 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
0001829A 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
000182A0 4278 FE20                  		clr.w	($FFFFFE20).w
000182A4 4238 FE1B                  		clr.b	($FFFFFE1B).w
000182A8 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
000182AE 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
000182B4 5338 FE24                  		subq.b	#1,($FFFFFE24).w
000182B8 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
000182BE 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
000182C4 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
000182CA 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
000182D0 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
000182D6 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
000182DC 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
000182E2 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
000182E8 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
000182EE 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
000182F4 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
000182FA 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00018300 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00018306 6600                       		bne.s	loc_170E4
00018308 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
0001830E 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00018314 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
0001831A                            
0001831A                            loc_170E4:
0001831A 4A38 FE30                  		tst.b	($FFFFFE30).w
0001831E 6A00                       		bpl.s	locret_170F6
00018320 3038 FE32                  		move.w	($FFFFFE32).w,d0
00018324 0440 00A0                  		subi.w	#$A0,d0
00018328 31C0 F728                  		move.w	d0,($FFFFF728).w
0001832C                            
0001832C                            locret_170F6:
0001832C 4E75                       		rts	
0001832E                            ; End of function Obj79_LoadInfo
0001832E                            
0001832E                            ; ===========================================================================
0001832E                            ; ---------------------------------------------------------------------------
0001832E                            ; Sprite mappings - lamppost
0001832E                            ; ---------------------------------------------------------------------------
0001832E                            Map_obj79:
0001832E                            	include "_maps\obj79.asm"
0001832E                            ; ---------------------------------------------------------------------------
0001832E                            ; Sprite mappings - lamppost
0001832E                            ; ---------------------------------------------------------------------------
0001832E 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
00018332 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
00018336 06                         byte_17100:	dc.b 6
00018337 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001833C E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018341 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018346 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001834B D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00018350 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
00018355 04                         byte_1711F:	dc.b 4
00018356 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001835B E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018360 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018365 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001836A 02                         byte_17134:	dc.b 2
0001836B F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00018370 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
00018375 06                         byte_1713F:	dc.b 6
00018376 E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
0001837B E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00018380 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
00018385 F403 2802 00               		dc.b $F4, 3, $28, 2, 0
0001838A D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
0001838F D401 0808 00               		dc.b $D4, 1, 8,	8, 0
00018394                            		even
00018394                            		even
00018394                            
00018394                            ; ===========================================================================
00018394                            ; ---------------------------------------------------------------------------
00018394                            ; Object 7D - hidden points at the end of a level
00018394                            ; ---------------------------------------------------------------------------
00018394                            
00018394                            Obj7D:					; XREF: Obj_Index
00018394 7000                       		moveq	#0,d0
00018396 1028 0024                  		move.b	$24(a0),d0
0001839A 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
0001839E 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
000183A2                            ; ===========================================================================
000183A2 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
000183A4 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
000183A6                            ; ===========================================================================
000183A6                            
000183A6                            Obj7D_Main:				; XREF: Obj7D_Index
000183A6 7410                       		moveq	#$10,d2
000183A8 3602                       		move.w	d2,d3
000183AA D643                       		add.w	d3,d3
000183AC 43F8 D000                  		lea	($FFFFD000).w,a1
000183B0 3029 0008                  		move.w	8(a1),d0
000183B4 9068 0008                  		sub.w	8(a0),d0
000183B8 D042                       		add.w	d2,d0
000183BA B043                       		cmp.w	d3,d0
000183BC 6400                       		bcc.s	Obj7D_ChkDel
000183BE 3229 000C                  		move.w	$C(a1),d1
000183C2 9268 000C                  		sub.w	$C(a0),d1
000183C6 D242                       		add.w	d2,d1
000183C8 B243                       		cmp.w	d3,d1
000183CA 6400                       		bcc.s	Obj7D_ChkDel
000183CC 4A78 FE08                  		tst.w	($FFFFFE08).w
000183D0 6600                       		bne.s	Obj7D_ChkDel
000183D2 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000183D6 6600                       		bne.s	Obj7D_ChkDel
000183D8 5428 0024                  		addq.b	#2,$24(a0)
000183DC 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000183E4 317C 84B6 0002             		move.w	#$84B6,2(a0)
000183EA 0028 0004 0001             		ori.b	#4,1(a0)
000183F0 117C 0000 0018             		move.b	#0,$18(a0)
000183F6 117C 0010 0019             		move.b	#$10,$19(a0)
000183FC 1168 0028 001A             		move.b	$28(a0),$1A(a0)
00018402 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
00018408 303C 00C9                  		move.w	#$C9,d0
0001840C 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play bonus sound
00018412 7000                       		moveq	#0,d0
00018414 1028 0028                  		move.b	$28(a0),d0
00018418 D040                       		add.w	d0,d0
0001841A 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
0001841E 4EB9 0000 0000             		jsr	AddPoints
00018424                            
00018424                            Obj7D_ChkDel:
00018424 3028 0008                  		move.w	8(a0),d0
00018428 0240 FF80                  		andi.w	#$FF80,d0
0001842C 3238 F700                  		move.w	($FFFFF700).w,d1
00018430 0441 0080                  		subi.w	#$80,d1
00018434 0241 FF80                  		andi.w	#$FF80,d1
00018438 9041                       		sub.w	d1,d0
0001843A 0C40 0280                  		cmpi.w	#$280,d0
0001843E 6200                       		bhi.s	Obj7D_Delete
00018440 4E75                       		rts	
00018442                            ; ===========================================================================
00018442                            
00018442                            Obj7D_Delete:
00018442 4EF9 0000 E77E             		jmp	DeleteObject
00018448                            ; ===========================================================================
00018448 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
0001844A 03E8                       		dc.w 1000
0001844C 0064                       		dc.w 100
0001844E 0001                       		dc.w 1
00018450                            ; ===========================================================================
00018450                            
00018450                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00018450 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
00018454 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
00018456 3028 0008                  		move.w	8(a0),d0
0001845A 0240 FF80                  		andi.w	#-$80,d0
0001845E 3238 F700                  		move.w	($FFFFF700).w,d1
00018462 0441 0080                  		subi.w	#$80,d1
00018466 0241 FF80                  		andi.w	#-$80,d1
0001846A 9041                       		sub.w	d1,d0
0001846C 0C40 0280                  		cmpi.w	#$280,d0
00018470 6200                       		bhi.s	Obj7D_Delete2
00018472 4EF9 0000 E742             		jmp	DisplaySprite
00018478                            ; ===========================================================================
00018478                            
00018478                            Obj7D_Delete2:
00018478 4EF9 0000 E77E             		jmp	DeleteObject
0001847E                            ; ===========================================================================
0001847E                            ; ---------------------------------------------------------------------------
0001847E                            ; Sprite mappings - hidden points at the end of	a level
0001847E                            ; ---------------------------------------------------------------------------
0001847E                            Map_obj7D:
0001847E                            	include "_maps\obj7D.asm"
0001847E                            ; ---------------------------------------------------------------------------
0001847E                            ; Sprite mappings - hidden points at the end of	a level
0001847E                            ; ---------------------------------------------------------------------------
0001847E 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
00018482 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
00018486 00                         byte_17250:	dc.b 0
00018487 01                         byte_17251:	dc.b 1
00018488 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0001848D 01                         byte_17257:	dc.b 1
0001848E F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
00018493 01                         byte_1725D:	dc.b 1
00018494 F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
0001849A 00                         		even
0001849A 00                         		even
0001849A                            
0001849A                            ; ===========================================================================
0001849A                            ; ---------------------------------------------------------------------------
0001849A                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
0001849A                            ; ---------------------------------------------------------------------------
0001849A                            
0001849A                            Obj8A:					; XREF: Obj_Index
0001849A 7000                       		moveq	#0,d0
0001849C 1028 0024                  		move.b	$24(a0),d0
000184A0 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
000184A4 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
000184A8                            ; ===========================================================================
000184A8 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
000184AA 0000                       		dc.w Obj8A_Display-Obj8A_Index
000184AC                            ; ===========================================================================
000184AC                            
000184AC                            Obj8A_Main:				; XREF: Obj8A_Index
000184AC 5428 0024                  		addq.b	#2,$24(a0)
000184B0 317C 0120 0008             		move.w	#$120,8(a0)
000184B6 317C 00F0 000A             		move.w	#$F0,$A(a0)
000184BC 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000184C4 317C 05A0 0002             		move.w	#$5A0,2(a0)
000184CA 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000184CE 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000184D2 117C 0000 0001             		move.b	#0,1(a0)
000184D8 117C 0000 0018             		move.b	#0,$18(a0)
000184DE 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000184E4 6600                       		bne.s	Obj8A_Display	; if not, branch
000184E6 317C 00A6 0002             		move.w	#$A6,2(a0)
000184EC 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000184F2 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000184F6 6700                       		beq.s	Obj8A_Display	; if not, branch
000184F8 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000184FE 6600                       		bne.s	Obj8A_Display	; if not, branch
00018500 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
00018506 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
0001850C 4EF9 0000 E77E             		jmp	DeleteObject
00018512                            ; ===========================================================================
00018512                            
00018512                            Obj8A_Display:				; XREF: Obj8A_Index
00018512 4EF9 0000 E742             		jmp	DisplaySprite
00018518                            ; ===========================================================================
00018518                            ; ---------------------------------------------------------------------------
00018518                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00018518                            ; ---------------------------------------------------------------------------
00018518                            Map_obj8A:
00018518                            	include "_maps\obj8A.asm"
00018518                            Map_ca8f:
00018518 0000                       Map_ca8f_0: 	dc.w Map_ca8f_16-Map_ca8f
0001851A 0000                       Map_ca8f_2: 	dc.w Map_ca8f_3F-Map_ca8f
0001851C 0000                       Map_ca8f_4: 	dc.w Map_ca8f_90-Map_ca8f
0001851E 0000                       Map_ca8f_6: 	dc.w Map_ca8f_C3-Map_ca8f
00018520 0000                       Map_ca8f_8: 	dc.w Map_ca8f_13C-Map_ca8f
00018522 0000                       Map_ca8f_A: 	dc.w Map_ca8f_1A1-Map_ca8f
00018524 0000                       Map_ca8f_C: 	dc.w Map_ca8f_224-Map_ca8f
00018526 0000                       Map_ca8f_E: 	dc.w Map_ca8f_298-Map_ca8f
00018528 0000                       Map_ca8f_10: 	dc.w Map_ca8f_334-Map_ca8f
0001852A 0000                       Map_ca8f_12: 	dc.w Map_ca8f_380-Map_ca8f
0001852C 0000                       Map_ca8f_14: 	dc.w Map_ca8f_3A9-Map_ca8f
0001852E 0000                       Map_ca8f_tm: 	dc.w Map_ca8f_tmss-Map_ca8f
00018530 08                         Map_ca8f_16: 	dc.b $8
00018531 CC05 803E BD               	dc.b $CC, $5, $80, $3E, $BD
00018536 E205 800E CD               	dc.b $E2, $5, $80, $E, $CD
0001853B F305 8004 DE               	dc.b $F3, $5, $80, $4, $DE
00018540 0409 8008 EF               	dc.b $4, $9, $80, $8, $EF
00018545 B205 000E E5               	dc.b $B2, $5, $0, $E, $E5
0001854A B205 0012 F5               	dc.b $B2, $5, $0, $12, $F5
0001854F B301 0016 08               	dc.b $B3, $1, $0, $16, $8
00018554 B309 001C 0A               	dc.b $B3, $9, $0, $1C, $A
00018559 10                         Map_ca8f_3F: 	dc.b $10
0001855A D805 0000 80               	dc.b $D8, $5, $0, $0, $80
0001855F D805 0004 90               	dc.b $D8, $5, $0, $4, $90
00018564 D809 0008 A0               	dc.b $D8, $9, $0, $8, $A0
00018569 D805 000E B4               	dc.b $D8, $5, $0, $E, $B4
0001856E D805 0012 D0               	dc.b $D8, $5, $0, $12, $D0
00018573 D805 0016 E0               	dc.b $D8, $5, $0, $16, $E0
00018578 D805 0004 F0               	dc.b $D8, $5, $0, $4, $F0
0001857D D805 001A 00               	dc.b $D8, $5, $0, $1A, $0
00018582 0805 001E C8               	dc.b $8, $5, $0, $1E, $C8
00018587 0805 0004 D8               	dc.b $8, $5, $0, $4, $D8
0001858C 0805 0022 E8               	dc.b $8, $5, $0, $22, $E8
00018591 0805 0026 F8               	dc.b $8, $5, $0, $26, $F8
00018596 0805 0016 08               	dc.b $8, $5, $0, $16, $8
0001859B 0805 002A 20               	dc.b $8, $5, $0, $2A, $20
000185A0 0805 0004 30               	dc.b $8, $5, $0, $4, $30
000185A5 0805 002E 44               	dc.b $8, $5, $0, $2E, $44
000185AA 0A                         Map_ca8f_90: 	dc.b $A
000185AB D805 0012 80               	dc.b $D8, $5, $0, $12, $80
000185B0 D805 0022 90               	dc.b $D8, $5, $0, $22, $90
000185B5 D805 0026 A0               	dc.b $D8, $5, $0, $26, $A0
000185BA D805 0000 B0               	dc.b $D8, $5, $0, $0, $B0
000185BF D805 0022 C0               	dc.b $D8, $5, $0, $22, $C0
000185C4 D805 0004 D0               	dc.b $D8, $5, $0, $4, $D0
000185C9 D809 0008 E0               	dc.b $D8, $9, $0, $8, $E0
000185CE 0805 002A E8               	dc.b $8, $5, $0, $2A, $E8
000185D3 0805 0032 F8               	dc.b $8, $5, $0, $32, $F8
000185D8 0805 0036 08               	dc.b $8, $5, $0, $36, $8
000185DD 18                         Map_ca8f_C3: 	dc.b $18
000185DE D805 001E 88               	dc.b $D8, $5, $0, $1E, $88
000185E3 D805 003A 98               	dc.b $D8, $5, $0, $3A, $98
000185E8 D805 0004 A8               	dc.b $D8, $5, $0, $4, $A8
000185ED D805 0022 B8               	dc.b $D8, $5, $0, $22, $B8
000185F2 D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000185F7 D805 001E D8               	dc.b $D8, $5, $0, $1E, $D8
000185FC D805 003E E8               	dc.b $D8, $5, $0, $3E, $E8
00018601 D805 000E F8               	dc.b $D8, $5, $0, $E, $F8
00018606 D805 0022 08               	dc.b $D8, $5, $0, $22, $8
0001860B D805 0042 20               	dc.b $D8, $5, $0, $42, $20
00018610 D805 000E 30               	dc.b $D8, $5, $0, $E, $30
00018615 D805 002E 40               	dc.b $D8, $5, $0, $2E, $40
0001861A D801 0046 50               	dc.b $D8, $1, $0, $46, $50
0001861F D805 0000 58               	dc.b $D8, $5, $0, $0, $58
00018624 D805 001A 68               	dc.b $D8, $5, $0, $1A, $68
00018629 0805 0048 C0               	dc.b $8, $5, $0, $48, $C0
0001862E 0801 0046 D0               	dc.b $8, $1, $0, $46, $D0
00018633 0805 0000 D8               	dc.b $8, $5, $0, $0, $D8
00018638 0801 0046 E8               	dc.b $8, $1, $0, $46, $E8
0001863D 0805 002E F0               	dc.b $8, $5, $0, $2E, $F0
00018642 0805 0016 00               	dc.b $8, $5, $0, $16, $0
00018647 0805 0004 10               	dc.b $8, $5, $0, $4, $10
0001864C 0805 001A 20               	dc.b $8, $5, $0, $1A, $20
00018651 0805 0042 30               	dc.b $8, $5, $0, $42, $30
00018656 14                         Map_ca8f_13C: 	dc.b $14
00018657 D005 0042 A0               	dc.b $D0, $5, $0, $42, $A0
0001865C D005 000E B0               	dc.b $D0, $5, $0, $E, $B0
00018661 D005 002E C0               	dc.b $D0, $5, $0, $2E, $C0
00018666 D001 0046 D0               	dc.b $D0, $1, $0, $46, $D0
0001866B D005 0000 D8               	dc.b $D0, $5, $0, $0, $D8
00018670 D005 001A E8               	dc.b $D0, $5, $0, $1A, $E8
00018675 0005 004C E8               	dc.b $0, $5, $0, $4C, $E8
0001867A 0001 0046 F8               	dc.b $0, $1, $0, $46, $F8
0001867F 0005 001A 04               	dc.b $0, $5, $0, $1A, $4
00018684 0005 002A 14               	dc.b $0, $5, $0, $2A, $14
00018689 0005 0004 24               	dc.b $0, $5, $0, $4, $24
0001868E 2005 0012 D0               	dc.b $20, $5, $0, $12, $D0
00018693 2005 003A E0               	dc.b $20, $5, $0, $3A, $E0
00018698 2005 000E F0               	dc.b $20, $5, $0, $E, $F0
0001869D 2005 001A 00               	dc.b $20, $5, $0, $1A, $0
000186A2 2001 0046 10               	dc.b $20, $1, $0, $46, $10
000186A7 2005 0050 18               	dc.b $20, $5, $0, $50, $18
000186AC 2005 0022 30               	dc.b $20, $5, $0, $22, $30
000186B1 2001 0046 40               	dc.b $20, $1, $0, $46, $40
000186B6 2005 000E 48               	dc.b $20, $5, $0, $E, $48
000186BB 1A                         Map_ca8f_1A1: 	dc.b $1A
000186BC D805 002E 98               	dc.b $D8, $5, $0, $2E, $98
000186C1 D805 0026 A8               	dc.b $D8, $5, $0, $26, $A8
000186C6 D805 0032 B8               	dc.b $D8, $5, $0, $32, $B8
000186CB D805 001A C8               	dc.b $D8, $5, $0, $1A, $C8
000186D0 D805 0054 D8               	dc.b $D8, $5, $0, $54, $D8
000186D5 D805 0012 F8               	dc.b $D8, $5, $0, $12, $F8
000186DA D805 0022 08               	dc.b $D8, $5, $0, $22, $8
000186DF D805 0026 18               	dc.b $D8, $5, $0, $26, $18
000186E4 D805 0042 28               	dc.b $D8, $5, $0, $42, $28
000186E9 D805 0032 38               	dc.b $D8, $5, $0, $32, $38
000186EE D805 001E 48               	dc.b $D8, $5, $0, $1E, $48
000186F3 D805 000E 58               	dc.b $D8, $5, $0, $E, $58
000186F8 0809 0008 88               	dc.b $8, $9, $0, $8, $88
000186FD 0805 0004 9C               	dc.b $8, $5, $0, $4, $9C
00018702 0805 002E AC               	dc.b $8, $5, $0, $2E, $AC
00018707 0805 0004 BC               	dc.b $8, $5, $0, $4, $BC
0001870C 0805 003E CC               	dc.b $8, $5, $0, $3E, $CC
00018711 0805 0026 DC               	dc.b $8, $5, $0, $26, $DC
00018716 0805 001A F8               	dc.b $8, $5, $0, $1A, $F8
0001871B 0805 0004 08               	dc.b $8, $5, $0, $4, $8
00018720 0805 0058 18               	dc.b $8, $5, $0, $58, $18
00018725 0805 0004 28               	dc.b $8, $5, $0, $4, $28
0001872A 0809 0008 38               	dc.b $8, $9, $0, $8, $38
0001872F 0805 0032 4C               	dc.b $8, $5, $0, $32, $4C
00018734 0805 0022 5C               	dc.b $8, $5, $0, $22, $5C
00018739 0805 0004 6C               	dc.b $8, $5, $0, $4, $6C
0001873E 17                         Map_ca8f_224: 	dc.b $17
0001873F D005 002E 98               	dc.b $D0, $5, $0, $2E, $98
00018744 D005 0026 A8               	dc.b $D0, $5, $0, $26, $A8
00018749 D005 0032 B8               	dc.b $D0, $5, $0, $32, $B8
0001874E D005 001A C8               	dc.b $D0, $5, $0, $1A, $C8
00018753 D005 0054 D8               	dc.b $D0, $5, $0, $54, $D8
00018758 D005 0012 F8               	dc.b $D0, $5, $0, $12, $F8
0001875D D005 0022 08               	dc.b $D0, $5, $0, $22, $8
00018762 D005 0026 18               	dc.b $D0, $5, $0, $26, $18
00018767 D005 0000 28               	dc.b $D0, $5, $0, $0, $28
0001876C D005 0022 38               	dc.b $D0, $5, $0, $22, $38
00018771 D005 0004 48               	dc.b $D0, $5, $0, $4, $48
00018776 D009 0008 58               	dc.b $D0, $9, $0, $8, $58
0001877B 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018780 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018785 0009 0008 E8               	dc.b $0, $9, $0, $8, $E8
0001878A 0001 0046 FC               	dc.b $0, $1, $0, $46, $FC
0001878F 0005 003E 04               	dc.b $0, $5, $0, $3E, $4
00018794 0005 0004 14               	dc.b $0, $5, $0, $4, $14
00018799 2009 0008 D0               	dc.b $20, $9, $0, $8, $D0
0001879E 2005 0004 E4               	dc.b $20, $5, $0, $4, $E4
000187A3 2005 001E F4               	dc.b $20, $5, $0, $1E, $F4
000187A8 2005 0058 04               	dc.b $20, $5, $0, $58, $4
000187AD 2005 002A 14               	dc.b $20, $5, $0, $2A, $14
000187B2 1F                         Map_ca8f_298: 	dc.b $1F
000187B3 D805 002E 80               	dc.b $D8, $5, $0, $2E, $80
000187B8 D805 0012 90               	dc.b $D8, $5, $0, $12, $90
000187BD D805 000E A0               	dc.b $D8, $5, $0, $E, $A0
000187C2 D805 001E B0               	dc.b $D8, $5, $0, $1E, $B0
000187C7 D801 0046 C0               	dc.b $D8, $1, $0, $46, $C0
000187CC D805 0004 C8               	dc.b $D8, $5, $0, $4, $C8
000187D1 D805 0016 D8               	dc.b $D8, $5, $0, $16, $D8
000187D6 D805 003E F8               	dc.b $D8, $5, $0, $3E, $F8
000187DB D805 003A 08               	dc.b $D8, $5, $0, $3A, $8
000187E0 D805 0004 18               	dc.b $D8, $5, $0, $4, $18
000187E5 D805 001A 28               	dc.b $D8, $5, $0, $1A, $28
000187EA D805 0058 38               	dc.b $D8, $5, $0, $58, $38
000187EF D805 002E 48               	dc.b $D8, $5, $0, $2E, $48
000187F4 0005 005C B0               	dc.b $0, $5, $0, $5C, $B0
000187F9 0005 0032 C0               	dc.b $0, $5, $0, $32, $C0
000187FE 0005 004C D0               	dc.b $0, $5, $0, $4C, $D0
00018803 0001 0046 E0               	dc.b $0, $1, $0, $46, $E0
00018808 0005 0026 E8               	dc.b $0, $5, $0, $26, $E8
0001880D 0009 0008 00               	dc.b $0, $9, $0, $8, $0
00018812 0001 0046 14               	dc.b $0, $1, $0, $46, $14
00018817 0005 001A 1C               	dc.b $0, $5, $0, $1A, $1C
0001881C 0005 000E 2C               	dc.b $0, $5, $0, $E, $2C
00018821 0005 0000 3C               	dc.b $0, $5, $0, $0, $3C
00018826 0001 0046 4C               	dc.b $0, $1, $0, $46, $4C
0001882B 0005 002E 54               	dc.b $0, $5, $0, $2E, $54
00018830 0005 003A 64               	dc.b $0, $5, $0, $3A, $64
00018835 0001 0046 74               	dc.b $0, $1, $0, $46, $74
0001883A 2005 0012 F8               	dc.b $20, $5, $0, $12, $F8
0001883F 2005 0004 08               	dc.b $20, $5, $0, $4, $8
00018844 2005 0012 18               	dc.b $20, $5, $0, $12, $18
00018849 2005 0004 28               	dc.b $20, $5, $0, $4, $28
0001884E 0F                         Map_ca8f_334: 	dc.b $F
0001884F F805 0012 80               	dc.b $F8, $5, $0, $12, $80
00018854 F805 0022 90               	dc.b $F8, $5, $0, $22, $90
00018859 F805 000E A0               	dc.b $F8, $5, $0, $E, $A0
0001885E F805 002E B0               	dc.b $F8, $5, $0, $2E, $B0
00018863 F805 000E C0               	dc.b $F8, $5, $0, $E, $C0
00018868 F805 001A D0               	dc.b $F8, $5, $0, $1A, $D0
0001886D F805 003E E0               	dc.b $F8, $5, $0, $3E, $E0
00018872 F805 000E F0               	dc.b $F8, $5, $0, $E, $F0
00018877 F805 0042 00               	dc.b $F8, $5, $0, $42, $0
0001887C F805 0048 18               	dc.b $F8, $5, $0, $48, $18
00018881 F805 002A 28               	dc.b $F8, $5, $0, $2A, $28
00018886 F805 002E 40               	dc.b $F8, $5, $0, $2E, $40
0001888B F805 000E 50               	dc.b $F8, $5, $0, $E, $50
00018890 F805 0000 60               	dc.b $F8, $5, $0, $0, $60
00018895 F805 0004 70               	dc.b $F8, $5, $0, $4, $70
0001889A 08                         Map_ca8f_380: 	dc.b $8
0001889B 3005 003E C0               	dc.b $30, $5, $0, $3E, $C0
000188A0 3005 0022 D0               	dc.b $30, $5, $0, $22, $D0
000188A5 3005 002A E0               	dc.b $30, $5, $0, $2A, $E0
000188AA 3005 0004 F8               	dc.b $30, $5, $0, $4, $F8
000188AF 3005 0000 08               	dc.b $30, $5, $0, $0, $8
000188B4 3005 0004 18               	dc.b $30, $5, $0, $4, $18
000188B9 3001 0046 28               	dc.b $30, $1, $0, $46, $28
000188BE 3005 001A 30               	dc.b $30, $5, $0, $1A, $30
000188C3 20                         Map_ca8f_3A9: 	dc.b $20
000188C4 ED05 002E BF               	dc.b $ED, $5, $0, $2E, $BF
000188C9 ED05 0026 CD               	dc.b $ED, $5, $0, $26, $CD
000188CE ED09 0008 DD               	dc.b $ED, $9, $0, $8, $DD
000188D3 ED05 000E F1               	dc.b $ED, $5, $0, $E, $F1
000188D8 ED05 0026 00               	dc.b $ED, $5, $0, $26, $0
000188DD ED05 001A 10               	dc.b $ED, $5, $0, $1A, $10
000188E2 ED05 000E 1F               	dc.b $ED, $5, $0, $E, $1F
000188E7 FD05 0012 BF               	dc.b $FD, $5, $0, $12, $BF
000188EC FD05 0016 CE               	dc.b $FD, $5, $0, $16, $CE
000188F1 FD05 000E DD               	dc.b $FD, $5, $0, $E, $DD
000188F6 FD05 0004 EC               	dc.b $FD, $5, $0, $4, $EC
000188FB FD05 002E FC               	dc.b $FD, $5, $0, $2E, $FC
00018900 FD05 000E 0A               	dc.b $FD, $5, $0, $E, $A
00018905 0D05 0004 BE               	dc.b $D, $5, $0, $4, $BE
0001890A 0D05 0054 CE               	dc.b $D, $5, $0, $54, $CE
0001890F 0D05 0054 DD               	dc.b $D, $5, $0, $54, $DD
00018914 0D05 0032 F2               	dc.b $D, $5, $0, $32, $F2
00018919 0D05 001A 02               	dc.b $D, $5, $0, $1A, $2
0001891E 0D05 0054 11               	dc.b $D, $5, $0, $54, $11
00018923 0D05 002A 20               	dc.b $D, $5, $0, $2A, $20
00018928 0D01 0046 30               	dc.b $D, $1, $0, $46, $30
0001892D 0D05 001A 38               	dc.b $D, $5, $0, $1A, $38
00018932 0D05 0000 47               	dc.b $D, $5, $0, $0, $47
00018937 1D05 003E BE               	dc.b $1D, $5, $0, $3E, $BE
0001893C 1D05 0026 CE               	dc.b $1D, $5, $0, $26, $CE
00018941 1D05 003E E4               	dc.b $1D, $5, $0, $3E, $E4
00018946 1D05 003A F4               	dc.b $1D, $5, $0, $3A, $F4
0001894B 1D05 000E 04               	dc.b $1D, $5, $0, $E, $4
00018950 1D05 000E 2A               	dc.b $1D, $5, $0, $E, $2A
00018955 1D05 0022 1A               	dc.b $1D, $5, $0, $22, $1A
0001895A 1D05 0012 39               	dc.b $1D, $5, $0, $12, $39
0001895F 1D05 0026 48               	dc.b $1D, $5, $0, $26, $48
00018964 1C                         Map_ca8f_tmss:	dc.b 28
000189F2 00                         	even
000189F2 00                         	even
000189F2                            
000189F2                            ; ===========================================================================
000189F2                            ; ---------------------------------------------------------------------------
000189F2                            ; Object 3D - matthew boss - modified by GK89
000189F2                            ; ---------------------------------------------------------------------------
000189F2                            
000189F2                            Obj3D:					; XREF: Obj_Index
000189F2 7000                       		moveq	#0,d0
000189F4 1028 0024                  		move.b	$24(a0),d0
000189F8 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
000189FC 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
00018A00                            ; ===========================================================================
00018A00 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
00018A02 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00018A04 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00018A06 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00018A08                            
00018A08 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00018A0A 0401                       		dc.b 4,	1
00018A0C 0607                       		dc.b 6,	7
00018A0E                            ; ===========================================================================
00018A0E                            
00018A0E                            Obj3D_Main:				; XREF: Obj3D_Index
00018A0E 45F9 0001 8A08             		lea	(Obj3D_ObjData).l,a2
00018A14 2248                       		movea.l	a0,a1
00018A16 7202                       		moveq	#2,d1
00018A18 6000                       		bra.s	Obj3D_LoadBoss
00018A1A                            ; ===========================================================================
00018A1A                            
00018A1A                            Obj3D_Loop:
00018A1A 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00018A20 6600                       		bne.s	loc_17772
00018A22                            
00018A22                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
00018A22 135A 0024                  		move.b	(a2)+,$24(a1)
00018A26 12BC 003D                  		move.b	#$3D,0(a1)
00018A2A 3368 0008 0008             		move.w	8(a0),8(a1)
00018A30 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A36 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
00018A3E 337C 0400 0002             		move.w	#$400,2(a1)
00018A44 137C 0004 0001             		move.b	#4,1(a1)
00018A4A 137C 0020 0019             		move.b	#$20,$19(a1)
00018A50 137C 0003 0018             		move.b	#3,$18(a1)
00018A56 135A 001C                  		move.b	(a2)+,$1C(a1)
00018A5A 2348 0034                  		move.l	a0,$34(a1)
00018A5E 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
00018A62                            
00018A62                            loc_17772:
00018A62 3168 0008 0030             		move.w	8(a0),$30(a0)
00018A68 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018A6E 117C 000F 0020             		move.b	#$F,$20(a0)
00018A74 117C 0028 0021             		move.b	#$28,$21(a0)	; set number of	hits to	8
00018A7A                            
00018A7A                            Obj3D_ShipMain:				; XREF: Obj3D_Index
00018A7A 7000                       		moveq	#0,d0
00018A7C 1028 0025                  		move.b	$25(a0),d0
00018A80 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
00018A84 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
00018A88 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018A8E 4EB9 0000 B790             		jsr	AnimateSprite
00018A94 1028 0022                  		move.b	$22(a0),d0
00018A98 0200 0003                  		andi.b	#3,d0
00018A9C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018AA2 8128 0001                  		or.b	d0,1(a0)
00018AA6 4EF9 0000 E742             		jmp	DisplaySprite
00018AAC                            ; ===========================================================================
00018AAC 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
00018AAE 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
00018AB0 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
00018AB2 0000                       		dc.w loc_17954-Obj3D_ShipIndex
00018AB4 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
00018AB6 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
00018AB8 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
00018ABA                            ; ===========================================================================
00018ABA                            
00018ABA                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
00018ABA 4EB9 0000 0000             		jsr    Obj3D_ShipMove
00018AC0 6100 0000                  		bsr.w	BossMove
00018AC4 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
00018ACA 6600                       		bne.s	loc_177E6
00018ACC 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
00018AD2 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00018AD6                            
00018AD6                            loc_177E6:
00018AD6 1028 003F                  		move.b	$3F(a0),d0
00018ADA 4EB9 0000 3416             		jsr	(CalcSine).l
00018AE0 EC40                       		asr.w	#6,d0
00018AE2 D068 0038                  		add.w	$38(a0),d0
00018AE6 3140 000C                  		move.w	d0,$C(a0)
00018AEA 3168 0030 0008             		move.w	$30(a0),8(a0)
00018AF0 5428 003F                  		addq.b	#2,$3F(a0)
00018AF4 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00018AFA 6400                       		bcc.s	locret_1784A
00018AFC 4A28 0022                  		tst.b	$22(a0)
00018B00 6B00                       		bmi.s	loc_1784C
00018B02 4A28 0020                  		tst.b	$20(a0)
00018B06 6600                       		bne.s	locret_1784A
00018B08 4A28 003E                  		tst.b	$3E(a0)
00018B0C 6600                       		bne.s	Obj3D_ShipFlash
00018B0E 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00018B14 303C 00AC                  		move.w	#$AC,d0
00018B18 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018B1E                            
00018B1E                            Obj3D_ShipFlash:
00018B1E 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00018B22 7000                       		moveq	#0,d0		; move 0 (black) to d0
00018B24 4A51                       		tst.w	(a1)
00018B26 6600                       		bne.s	loc_1783C
00018B28 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00018B2C                            
00018B2C                            loc_1783C:
00018B2C 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00018B2E 5328 003E                  		subq.b	#1,$3E(a0)
00018B32 6600                       		bne.s	locret_1784A
00018B34 117C 000F 0020             		move.b	#$F,$20(a0)
00018B3A                            
00018B3A                            locret_1784A:
00018B3A 4E75                       		rts	
00018B3C                            ; ===========================================================================
00018B3C                            
00018B3C                            loc_1784C:				; XREF: loc_177E6
00018B3C 7064                       		moveq	#100,d0
00018B3E 6100 0000                  		bsr.w	AddPoints
00018B42 117C 0008 0025             		move.b	#8,$25(a0)
00018B48 317C 00B3 003C             		move.w	#$B3,$3C(a0)
00018B4E 4E75                       		rts	
00018B50                            
00018B50                            ; ---------------------------------------------------------------------------
00018B50                            ; Defeated boss	subroutine
00018B50                            ; ---------------------------------------------------------------------------
00018B50                            
00018B50                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B50                            
00018B50                            
00018B50                            BossDefeated:
00018B50 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00018B54 0200 0007                  		andi.b	#7,d0
00018B58 6600                       		bne.s	locret_178A2
00018B5A 4EB9 0000 EBC8             		jsr	SingleObjLoad
00018B60 6600                       		bne.s	locret_178A2
00018B62 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00018B66 3368 0008 0008             		move.w	8(a0),8(a1)
00018B6C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018B72 4EB9 0000 33F0             		jsr	(RandomNumber).l
00018B78 3200                       		move.w	d0,d1
00018B7A 7200                       		moveq	#0,d1
00018B7C 1200                       		move.b	d0,d1
00018B7E E409                       		lsr.b	#2,d1
00018B80 0441 0020                  		subi.w	#$20,d1
00018B84 D369 0008                  		add.w	d1,8(a1)
00018B88 E048                       		lsr.w	#8,d0
00018B8A E608                       		lsr.b	#3,d0
00018B8C D169 000C                  		add.w	d0,$C(a1)
00018B90                            
00018B90                            locret_178A2:
00018B90 4E75                       		rts	
00018B92                            ; End of function BossDefeated
00018B92                            
00018B92                            ; ---------------------------------------------------------------------------
00018B92                            ; Subroutine to	move a boss
00018B92                            ; ---------------------------------------------------------------------------
00018B92                            
00018B92                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018B92                            
00018B92                            
00018B92                            BossMove:
00018B92 2428 0030                  		move.l	$30(a0),d2
00018B96 2628 0038                  		move.l	$38(a0),d3
00018B9A 3028 0010                  		move.w	$10(a0),d0
00018B9E 48C0                       		ext.l	d0
00018BA0 E180                       		asl.l	#8,d0
00018BA2 D480                       		add.l	d0,d2
00018BA4 3028 0012                  		move.w	$12(a0),d0
00018BA8 48C0                       		ext.l	d0
00018BAA E180                       		asl.l	#8,d0
00018BAC D680                       		add.l	d0,d3
00018BAE 2142 0030                  		move.l	d2,$30(a0)
00018BB2 2143 0038                  		move.l	d3,$38(a0)
00018BB6 4E75                       		rts	
00018BB8                            ; End of function BossMove
00018BB8                            
00018BB8                            ; ===========================================================================
00018BB8                            
00018BB8                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex		
00018BB8 6100 FFD8                  		bsr.w	BossMove
00018BBC 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
00018BC2 6600                       		bne.s	loc_17916
00018BC4 317C 0000 0010             		move.w	#0,$10(a0)
00018BCA 317C 0000 0012             		move.w	#0,$12(a0)
00018BD0 5428 0025                  		addq.b	#2,$25(a0)
00018BD4 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00018BDA 6600                       		bne.s	loc_17910
00018BDC 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00018BE0 3368 0030 0008             		move.w	$30(a0),8(a1)
00018BE6 3368 0038 000C             		move.w	$38(a0),$C(a1)
00018BEC 2348 0034                  		move.l	a0,$34(a1)
00018BF0                            
00018BF0                            loc_17910:
00018BF0 317C 0077 003C             		move.w	#$77,$3C(a0)
00018BF6                            
00018BF6                            loc_17916:
00018BF6 6000 FEDE                  		bra.w	loc_177E6
00018BFA                            ; ===========================================================================
00018BFA                            
00018BFA                            Obj3D_ShipMove:				; XREF:  sonic follow move
00018BFA 5368 003C                  		subq.w	#1,$3C(a0)
00018BFE 4EB9 0000 0000             		jsr 	Obj3D_UpStuff
00018C04 5428 0025                  		addq.b	#2,$25(a0)
00018C08 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018C0E 3038 D008                  		move.w	($FFFFD008).w,d0	 
00018C12 9068 0008                  		sub.w	8(a0),d0		 
00018C16 6A00                       		bpl.s	Obj3D_left			 
00018C18 08A8 0000 0022             		bclr	#0,$22(a0)		 
00018C1E 6000                       		bra.s	Obj3D_right		 
00018C20 08A8 0005 0022             		bclr	#5,$22(a0)
00018C26 4EB9 0000 0000              		jsr     loc_17950
00018C2C 4E75                       		rts
00018C2E                            ; ===========================================================================
00018C2E                            
00018C2E                            Obj3D_right:
00018C2E 317C FF00 0010             		move.w	#-$100,$10(a0)	
00018C34 4E75                       		Rts
00018C36                            
00018C36                            Obj3D_left:
00018C36 317C 0100 0010             		move.w	#$100,$10(a0)	 
00018C3C 0828 0000 0022             		btst	#0,$22(a0)	; is matt facing	left?
00018C42 6600                       		bne.s	RTSboss  	; if not, branch
00018C44 0868 0000 0022              		bchg	#0,$22(a0)
00018C4A                            
00018C4A                            RTSboss:	    
00018C4A 4E75                       		rts
00018C4C                             ; ===========================================================================
00018C4C                            
00018C4C                            Obj3D_UpStuff:
00018C4C 3038 D00C                  		move.w	($FFFFD00C).w,d0	 
00018C50 9068 000C                  		sub.w	$C(a0),d0		 
00018C54 6A00                       		bpl.s	Obj3D_down			 
00018C56 6000                        		bra.s	Obj3D_up		 
00018C58 08A8 0005 0022             		bclr	#5,$22(a0)
00018C5E                             
00018C5E                            Obj3D_up:		
00018C5E 317C FEE0 0012             		move.w	#-$120,$12(a0)           ; Up	 
00018C64 4E75                        	    rts
00018C66                            
00018C66                            Obj3D_down:
00018C66 317C 0120 0012              		move.w	#$120, $12(a0)           ; Down
00018C6C                            
00018C6C                            loc_17950:
00018C6C 6000 FE68                  		bra.w	loc_177E6
00018C70                            ; ===========================================================================
00018C70                            
00018C70                            loc_17954:				; XREF: Obj3D_ShipIndex
00018C70 5368 003C                  		subq.w	#1,$3C(a0)
00018C74 6B00                       		bmi.s	loc_17960
00018C76 6100 FF1A                  		bsr.w	BossMove
00018C7A 6000                       		bra.s	loc_17976
00018C7C                            ; ===========================================================================
00018C7C                            
00018C7C                            loc_17960:
00018C7C 0868 0000 0022             		bchg	#0,$22(a0)
00018C82 317C 003F 003C             		move.w	#$3F,$3C(a0)
00018C88 5528 0025                  		subq.b	#2,$25(a0)
00018C8C 317C 0000 0010             		move.w	#0,$10(a0)
00018C92                            
00018C92                            loc_17976:
00018C92 6000 FE42                  		bra.w	loc_177E6
00018C96                            ; ===========================================================================
00018C96                            
00018C96                            loc_1797A:				; XREF: Obj3D_ShipIndex
00018C96 5368 003C                  		subq.w	#1,$3C(a0)
00018C9A 6B00                       		bmi.s	loc_17984
00018C9C 6000 FEB2                  		bra.w	BossDefeated
00018CA0                            ; ===========================================================================
00018CA0                            
00018CA0                            loc_17984:
00018CA0 08E8 0000 0022             		bset	#0,$22(a0)
00018CA6 08A8 0007 0022             		bclr	#7,$22(a0)
00018CAC 4268 0010                  		clr.w	$10(a0)
00018CB0 5428 0025                  		addq.b	#2,$25(a0)
00018CB4 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018CBA 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018CBE 6600                       		bne.s	locret_179AA
00018CC0 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018CC6 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00018CCC 6000 FE82                  		bra.w	BossDefeated
00018CD0                            
00018CD0                            locret_179AA:
00018CD0 4E75                       		rts	
00018CD2                            ; ===========================================================================
00018CD2                            
00018CD2                            loc_179AC:				; XREF: Obj3D_ShipIndex
00018CD2 4EB9 0000 E6AA             		jsr ObjectFall		
00018CD8 5268 003C                  		addq.w	#1,$3C(a0)
00018CDC 6700                       		beq.s	loc_179BC
00018CDE 6A00                       		bpl.s	loc_179C2
00018CE0 6000                       		bra.s	loc_179EE
00018CE2                            ; ===========================================================================
00018CE2                            
00018CE2                            loc_179BC:
00018CE2 4268 0012                  		clr.w	$12(a0)
00018CE6 6000                       		bra.s	loc_179EE
00018CE8                            ; ===========================================================================
00018CE8                            
00018CE8                            loc_179C2:
00018CE8 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018CEE 6500                       		bcs.s	loc_179DA
00018CF0 6700                       		beq.s	loc_179E0
00018CF2 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00018CF8 6500                       		bcs.s	loc_179EE
00018CFA 5428 0025                  		addq.b	#2,$25(a0)
00018CFE 6000                       		bra.s	loc_179EE
00018D00                            ; ===========================================================================
00018D00                            
00018D00                            loc_179DA:
00018D00 5168 0012                  		subq.w	#8,$12(a0)
00018D04 6000                       		bra.s	loc_179EE
00018D06 6000 FE48                  		bra.w	BossDefeated
00018D0A                            ; ===========================================================================
00018D0A                            
00018D0A                            loc_179E0:
00018D0A 4268 0012                  		clr.w	$12(a0)
00018D0E 303C 0081                  		move.w	#$81,d0
00018D12 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play GHZ music
00018D18                            
00018D18                            loc_179EE:
00018D18 6100 FE78                  		bsr.w	BossMove
00018D1C 6000 FDB8                  		bra.w	loc_177E6
00018D20                            ; ===========================================================================
00018D20                            
00018D20                            loc_179F6:				; XREF: Obj3D_ShipIndex
00018D20 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00018D26 6700                       		beq.s	loc_17A10
00018D28 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018D2C 6000                       		bra.s	loc_17A16
00018D2E                            ; ===========================================================================
00018D2E                            
00018D2E                            loc_17A10:
00018D2E 4A28 0001                  		tst.b	1(a0)
00018D32 6A00                       		bpl.s	Obj3D_ShipDel
00018D34                            
00018D34                            loc_17A16:
00018D34 6100 FE5C                  		bsr.w	BossMove
00018D38 6000 FD9C                  		bra.w	loc_177E6
00018D3C                            ; ===========================================================================
00018D3C                            
00018D3C                            Obj3D_ShipDel:
00018D3C 4EF9 0000 E77E             		jmp	DeleteObject
00018D42                            ; ===========================================================================
00018D42                            
00018D42                            Obj3D_FaceMain:				; XREF: Obj3D_Index
00018D42 7000                       		moveq	#0,d0
00018D44 7201                       		moveq	#1,d1
00018D46 2268 0034                  		movea.l	$34(a0),a1
00018D4A 1029 0025                  		move.b	$25(a1),d0
00018D4E 5900                       		subq.b	#4,d0
00018D50 6600                       		bne.s	loc_17A3E
00018D52 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00018D58 6600                       		bne.s	loc_17A46
00018D5A 7204                       		moveq	#4,d1
00018D5C                            
00018D5C                            loc_17A3E:
00018D5C 5D00                       		subq.b	#6,d0
00018D5E 6B00                       		bmi.s	loc_17A46
00018D60 720A                       		moveq	#$A,d1
00018D62 6000                       		bra.s	loc_17A5A
00018D64                            ; ===========================================================================
00018D64                            
00018D64                            loc_17A46:
00018D64 4A29 0020                  		tst.b	$20(a1)
00018D68 6600                       		bne.s	loc_17A50
00018D6A 7205                       		moveq	#5,d1
00018D6C 6000                       		bra.s	loc_17A5A
00018D6E                            ; ===========================================================================
00018D6E                            
00018D6E                            loc_17A50:
00018D6E 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018D74 6500                       		bcs.s	loc_17A5A
00018D76 7204                       		moveq	#4,d1
00018D78                            
00018D78                            loc_17A5A:
00018D78 1141 001C                  		move.b	d1,$1C(a0)
00018D7C 5500                       		subq.b	#2,d0
00018D7E 6600                       		bne.s	Obj3D_FaceDisp
00018D80 117C 0006 001C             		move.b	#6,$1C(a0)
00018D86 4A28 0001                  		tst.b	1(a0)
00018D8A 6A00                       		bpl.s	Obj3D_FaceDel
00018D8C                            
00018D8C                            Obj3D_FaceDisp:
00018D8C 6000                       		bra.s	Obj3D_Display
00018D8E                            ; ===========================================================================
00018D8E                            
00018D8E                            Obj3D_FaceDel:
00018D8E 4EF9 0000 E77E             		jmp	DeleteObject
00018D94                            ; ===========================================================================
00018D94                            
00018D94                            Obj3D_FlameMain:			; XREF: Obj3D_Index
00018D94 117C 0007 001C             		move.b	#7,$1C(a0)
00018D9A 2268 0034                  		movea.l	$34(a0),a1
00018D9E 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
00018DA4 6600                       		bne.s	loc_17A96
00018DA6 117C 000B 001C             		move.b	#$B,$1C(a0)
00018DAC 4A28 0001                  		tst.b	1(a0)
00018DB0 6A00                       		bpl.s	Obj3D_FlameDel
00018DB2 6000                       		bra.s	Obj3D_FlameDisp
00018DB4                            ; ===========================================================================
00018DB4                            
00018DB4                            loc_17A96:
00018DB4 3029 0010                  		move.w	$10(a1),d0
00018DB8 6700                       		beq.s	Obj3D_FlameDisp
00018DBA 117C 0008 001C             		move.b	#8,$1C(a0)
00018DC0                            
00018DC0                            Obj3D_FlameDisp:
00018DC0 6000                       		bra.s	Obj3D_Display
00018DC2                            ; ===========================================================================
00018DC2                            
00018DC2                            Obj3D_FlameDel:
00018DC2 4EF9 0000 E77E             		jmp	DeleteObject
00018DC8                            ; ===========================================================================
00018DC8                            
00018DC8                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
00018DC8 2268 0034                  		movea.l	$34(a0),a1
00018DCC 3169 0008 0008             		move.w	8(a1),8(a0)
00018DD2 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018DD8 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018DDE 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
00018DE4 4EB9 0000 B790             		jsr	AnimateSprite
00018DEA 1028 0022                  		move.b	$22(a0),d0
00018DEE 0200 0003                  		andi.b	#3,d0
00018DF2 0228 00FC 0001             		andi.b	#$FC,1(a0)
00018DF8 8128 0001                  		or.b	d0,1(a0)
00018DFC 4EF9 0000 E742             		jmp	DisplaySprite
00018E02                            ; ===========================================================================
00018E02                            ; ---------------------------------------------------------------------------
00018E02                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
00018E02                            ; ---------------------------------------------------------------------------
00018E02                            
00018E02                            Obj48:					; XREF: Obj_Index
00018E02 7000                       		moveq	#0,d0
00018E04 1028 0024                  		move.b	$24(a0),d0
00018E08 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00018E0C 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00018E10                            ; ===========================================================================
00018E10 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00018E12 0000                       		dc.w Obj48_Base-Obj48_Index
00018E14 0000                       		dc.w Obj48_Display2-Obj48_Index
00018E16 0000                       		dc.w loc_17C68-Obj48_Index
00018E18 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00018E1A                            ; ===========================================================================
00018E1A                            
00018E1A                            Obj48_Main:				; XREF: Obj48_Index
00018E1A 5428 0024                  		addq.b	#2,$24(a0)
00018E1E 317C 4080 0026             		move.w	#$4080,$26(a0)
00018E24 317C FE00 003E             		move.w	#-$200,$3E(a0)
00018E2A 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00018E32 317C 046C 0002             		move.w	#$46C,2(a0)
00018E38 45E8 0028                  		lea	$28(a0),a2
00018E3C 14FC 0000                  		move.b	#0,(a2)+
00018E40 7205                       		moveq	#5,d1
00018E42 2248                       		movea.l	a0,a1
00018E44 6000                       		bra.s	loc_17B60
00018E46                            ; ===========================================================================
00018E46                            
00018E46                            Obj48_MakeLinks:
00018E46 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00018E4C 6600                       		bne.s	Obj48_MakeBall
00018E4E 3368 0008 0008             		move.w	8(a0),8(a1)
00018E54 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018E5A 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00018E5E 137C 0006 0024             		move.b	#6,$24(a1)
00018E64 237C 0000 8B44 0004        		move.l	#Map_obj15,4(a1)
00018E6C 337C 0380 0002             		move.w	#$380,2(a1)
00018E72 137C 0001 001A             		move.b	#1,$1A(a1)
00018E78 5228 0028                  		addq.b	#1,$28(a0)
00018E7C                            
00018E7C                            loc_17B60:				; XREF: Obj48_Main
00018E7C 3A09                       		move.w	a1,d5
00018E7E 0445 D000                  		subi.w	#$D000,d5
00018E82 EC4D                       		lsr.w	#6,d5
00018E84 0245 007F                  		andi.w	#$7F,d5
00018E88 14C5                       		move.b	d5,(a2)+
00018E8A 137C 0004 0001             		move.b	#4,1(a1)
00018E90 137C 0008 0019             		move.b	#8,$19(a1)
00018E96 137C 0006 0018             		move.b	#6,$18(a1)
00018E9C 2368 0034 0034             		move.l	$34(a0),$34(a1)
00018EA2 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00018EA6                            
00018EA6                            Obj48_MakeBall:
00018EA6 137C 0008 0024             		move.b	#8,$24(a1)
00018EAC 237C 0000 9134 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00018EB4 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00018EBA 137C 0001 001A             		move.b	#1,$1A(a1)
00018EC0 137C 0005 0018             		move.b	#5,$18(a1)
00018EC6 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00018ECC 4E75                       		rts	
00018ECE                            ; ===========================================================================
00018ECE                            
00018ECE 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00018ED4                            
00018ED4                            ; ===========================================================================
00018ED4                            
00018ED4                            Obj48_Base:				; XREF: Obj48_Index
00018ED4 47F9 0001 8ECE             		lea	(Obj48_PosData).l,a3
00018EDA 45E8 0028                  		lea	$28(a0),a2
00018EDE 7C00                       		moveq	#0,d6
00018EE0 1C1A                       		move.b	(a2)+,d6
00018EE2                            
00018EE2                            loc_17BC6:
00018EE2 7800                       		moveq	#0,d4
00018EE4 181A                       		move.b	(a2)+,d4
00018EE6 ED4C                       		lsl.w	#6,d4
00018EE8 0684 00FF D000             		addi.l	#$FFD000,d4
00018EEE 2244                       		movea.l	d4,a1
00018EF0 101B                       		move.b	(a3)+,d0
00018EF2 B029 003C                  		cmp.b	$3C(a1),d0
00018EF6 6700                       		beq.s	loc_17BE0
00018EF8 5229 003C                  		addq.b	#1,$3C(a1)
00018EFC                            
00018EFC                            loc_17BE0:
00018EFC 51CE FFE4                  		dbf	d6,loc_17BC6
00018F00                            
00018F00 B029 003C                  		cmp.b	$3C(a1),d0
00018F04 6600                       		bne.s	loc_17BFA
00018F06 2268 0034                  		movea.l	$34(a0),a1
00018F0A 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00018F10 6600                       		bne.s	loc_17BFA
00018F12 5428 0024                  		addq.b	#2,$24(a0)
00018F16                            
00018F16                            loc_17BFA:
00018F16 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00018F1C 6700                       		beq.s	Obj48_Display
00018F1E 5268 0032                  		addq.w	#1,$32(a0)
00018F22                            
00018F22                            Obj48_Display:
00018F22 6100 0000                  		bsr.w	sub_17C2A
00018F26 1028 0026                  		move.b	$26(a0),d0
00018F2A 4EB9 0000 8AB6             		jsr	(Obj15_Move2).l
00018F30 4EF9 0000 E742             		jmp	DisplaySprite
00018F36                            ; ===========================================================================
00018F36                            
00018F36                            Obj48_Display2:				; XREF: Obj48_Index
00018F36 6100 0000                  		bsr.w	sub_17C2A
00018F3A 4EB9 0000 8A76             		jsr	(Obj48_Move).l
00018F40 4EF9 0000 E742             		jmp	DisplaySprite
00018F46                            
00018F46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00018F46                            
00018F46                            
00018F46                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00018F46 2268 0034                  		movea.l	$34(a0),a1
00018F4A 0628 0020 001B             		addi.b	#$20,$1B(a0)
00018F50 6400                       		bcc.s	loc_17C3C
00018F52 0868 0000 001A             		bchg	#0,$1A(a0)
00018F58                            
00018F58                            loc_17C3C:
00018F58 3169 0008 003A             		move.w	8(a1),$3A(a0)
00018F5E 3029 000C                  		move.w	$C(a1),d0
00018F62 D068 0032                  		add.w	$32(a0),d0
00018F66 3140 0038                  		move.w	d0,$38(a0)
00018F6A 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018F70 4A29 0022                  		tst.b	$22(a1)
00018F74 6A00                       		bpl.s	locret_17C66
00018F76 10BC 003F                  		move.b	#$3F,0(a0)
00018F7A 117C 0000 0024             		move.b	#0,$24(a0)
00018F80                            
00018F80                            locret_17C66:
00018F80 4E75                       		rts	
00018F82                            ; End of function sub_17C2A
00018F82                            
00018F82                            ; ===========================================================================
00018F82                            
00018F82                            loc_17C68:				; XREF: Obj48_Index
00018F82 2268 0034                  		movea.l	$34(a0),a1
00018F86 4A29 0022                  		tst.b	$22(a1)
00018F8A 6A00                       		bpl.s	Obj48_Display3
00018F8C 10BC 003F                  		move.b	#$3F,0(a0)
00018F90 117C 0000 0024             		move.b	#0,$24(a0)
00018F96                            
00018F96                            Obj48_Display3:
00018F96 4EF9 0000 E742             		jmp	DisplaySprite
00018F9C                            ; ===========================================================================
00018F9C                            
00018F9C                            Obj48_ChkVanish:			; XREF: Obj48_Index
00018F9C 7000                       		moveq	#0,d0
00018F9E 4A28 001A                  		tst.b	$1A(a0)
00018FA2 6600                       		bne.s	Obj48_Vanish
00018FA4 5200                       		addq.b	#1,d0
00018FA6                            
00018FA6                            Obj48_Vanish:
00018FA6 1140 001A                  		move.b	d0,$1A(a0)
00018FAA 2268 0034                  		movea.l	$34(a0),a1
00018FAE 4A29 0022                  		tst.b	$22(a1)
00018FB2 6A00                       		bpl.s	Obj48_Display4
00018FB4 117C 0000 0020             		move.b	#0,$20(a0)
00018FBA 6100 FB94                  		bsr.w	BossDefeated
00018FBE 5328 003C                  		subq.b	#1,$3C(a0)
00018FC2 6A00                       		bpl.s	Obj48_Display4
00018FC4 10BC 003F                  		move.b	#$3F,(a0)
00018FC8 117C 0000 0024             		move.b	#0,$24(a0)
00018FCE                            
00018FCE                            Obj48_Display4:
00018FCE 4EF9 0000 E742             		jmp	DisplaySprite
00018FD4                            ; ===========================================================================
00018FD4                            Ani_Eggman:
00018FD4                            	include "_anim\Eggman.asm"
00018FD4                            ; ---------------------------------------------------------------------------
00018FD4                            ; Animation script - Eggman (bosses)
00018FD4                            ; ---------------------------------------------------------------------------
00018FD4 0000                       		dc.w byte_17CD4-Ani_Eggman
00018FD6 0000                       		dc.w byte_17CD8-Ani_Eggman
00018FD8 0000                       		dc.w byte_17CDC-Ani_Eggman
00018FDA 0000                       		dc.w byte_17CE0-Ani_Eggman
00018FDC 0000                       		dc.w byte_17CE4-Ani_Eggman
00018FDE 0000                       		dc.w byte_17CE8-Ani_Eggman
00018FE0 0000                       		dc.w byte_17CEC-Ani_Eggman
00018FE2 0000                       		dc.w byte_17CF0-Ani_Eggman
00018FE4 0000                       		dc.w byte_17CF4-Ani_Eggman
00018FE6 0000                       		dc.w byte_17CF8-Ani_Eggman
00018FE8 0000                       		dc.w byte_17CFC-Ani_Eggman
00018FEA 0000                       		dc.w byte_17D00-Ani_Eggman
00018FEC 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00018FF0 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00018FF4 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00018FF8 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00018FFC 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00019000 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00019004 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00019008 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
0001900C 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00019010 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00019014 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00019018 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00019024                            		even
00019024                            		even
00019024                            Ani_TetoB:
00019024                            	include "_anim\TetoB.asm"
00019024                            ; ---------------------------------------------------------------------------
00019024                            ; Animation script - Eggman (bosses)
00019024                            ; ---------------------------------------------------------------------------
00019024 0000                       		dc.w spin-Ani_TetoB
00019026 0000                       		dc.w static-Ani_TetoB
00019028 0000                       		dc.w static2-Ani_TetoB
0001902A 0400 0102 03FF 00          spin:	dc.b 4, 0, 1, 2, 3, $FF, 0
00019031 0500 FF                    static:	dc.b 5,	0, $FF
00019034 0501 FF                    static2:	dc.b 5,	1, $FF
00019038 00                         		even
00019038 00                         		even
00019038                            ; ---------------------------------------------------------------------------
00019038                            ; Sprite mappings - Eggman (boss levels)
00019038                            ; ---------------------------------------------------------------------------
00019038                            Map_Eggman:
00019038                            	include "_maps\Eggman.asm"
00019038                            Map_dc7e:
00019038 0000                       Map_dc7e_0: 	dc.w Map_dc7e_1A-Map_dc7e
0001903A 0000                       Map_dc7e_2: 	dc.w Map_dc7e_39-Map_dc7e
0001903C 0000                       Map_dc7e_4: 	dc.w Map_dc7e_44-Map_dc7e
0001903E 0000                       Map_dc7e_6: 	dc.w Map_dc7e_4F-Map_dc7e
00019040 0000                       Map_dc7e_8: 	dc.w Map_dc7e_5F-Map_dc7e
00019042 0000                       Map_dc7e_A: 	dc.w Map_dc7e_6F-Map_dc7e
00019044 0000                       Map_dc7e_C: 	dc.w Map_dc7e_7F-Map_dc7e
00019046 0000                       Map_dc7e_E: 	dc.w Map_dc7e_8F-Map_dc7e
00019048 0000                       Map_dc7e_10: 	dc.w Map_dc7e_A4-Map_dc7e
0001904A 0000                       Map_dc7e_12: 	dc.w Map_dc7e_AA-Map_dc7e
0001904C 0000                       Map_dc7e_14: 	dc.w Map_dc7e_B0-Map_dc7e
0001904E 0000                       Map_dc7e_16: 	dc.w Map_dc7e_B1-Map_dc7e
00019050 0000                       Map_dc7e_18: 	dc.w Map_dc7e_BC-Map_dc7e
00019052 06                         Map_dc7e_1A: 	dc.b $6
00019053 EC01 000A E4               	dc.b $EC, $1, $0, $A, $E4
00019058 EC05 000C 0C               	dc.b $EC, $5, $0, $C, $C
0001905D FC0E 2010 E4               	dc.b $FC, $E, $20, $10, $E4
00019062 FC0E 201C 04               	dc.b $FC, $E, $20, $1C, $4
00019067 140C 2028 EC               	dc.b $14, $C, $20, $28, $EC
0001906C 1400 202C 0C               	dc.b $14, $0, $20, $2C, $C
00019071 02                         Map_dc7e_39: 	dc.b $2
00019072 E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00019077 EC0D 0002 EC               	dc.b $EC, $D, $0, $2, $EC
0001907C 02                         Map_dc7e_44: 	dc.b $2
0001907D E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
00019082 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
00019087 03                         Map_dc7e_4F: 	dc.b $3
00019088 E408 003D F4               	dc.b $E4, $8, $0, $3D, $F4
0001908D EC09 0040 EC               	dc.b $EC, $9, $0, $40, $EC
00019092 EC05 0046 04               	dc.b $EC, $5, $0, $46, $4
00019097 03                         Map_dc7e_5F: 	dc.b $3
00019098 E408 004A F4               	dc.b $E4, $8, $0, $4A, $F4
0001909D EC09 004D EC               	dc.b $EC, $9, $0, $4D, $EC
000190A2 EC05 0053 04               	dc.b $EC, $5, $0, $53, $4
000190A7 03                         Map_dc7e_6F: 	dc.b $3
000190A8 E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000190AD EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000190B2 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000190B7 03                         Map_dc7e_7F: 	dc.b $3
000190B8 E404 0064 04               	dc.b $E4, $4, $0, $64, $4
000190BD E404 0000 F4               	dc.b $E4, $4, $0, $0, $F4
000190C2 EC0D 0035 EC               	dc.b $EC, $D, $0, $35, $EC
000190C7 04                         Map_dc7e_8F: 	dc.b $4
000190C8 E409 0066 F4               	dc.b $E4, $9, $0, $66, $F4
000190CD E408 0057 F4               	dc.b $E4, $8, $0, $57, $F4
000190D2 EC09 005A EC               	dc.b $EC, $9, $0, $5A, $EC
000190D7 EC05 0060 04               	dc.b $EC, $5, $0, $60, $4
000190DC 01                         Map_dc7e_A4: 	dc.b $1
000190DD 0405 002D 22               	dc.b $4, $5, $0, $2D, $22
000190E2 01                         Map_dc7e_AA: 	dc.b $1
000190E3 0405 0031 22               	dc.b $4, $5, $0, $31, $22
000190E8 00                         Map_dc7e_B0: 	dc.b $0
000190E9 02                         Map_dc7e_B1: 	dc.b $2
000190EA 0008 012A 22               	dc.b $0, $8, $1, $2A, $22
000190EF 0808 112A 22               	dc.b $8, $8, $11, $2A, $22
000190F4 02                         Map_dc7e_BC: 	dc.b $2
000190F5 F80B 012D 22               	dc.b $F8, $B, $1, $2D, $22
000190FA 0001 0139 3A               	dc.b $0, $1, $1, $39, $3A
00019100 00                         	even
00019100 00                         	even
00019100                            
00019100                            ; ---------------------------------------------------------------------------
00019100                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019100                            ; ---------------------------------------------------------------------------
00019100                            Map_BossItems:
00019100                            	include "_maps\Boss items.asm"
00019100                            ; ---------------------------------------------------------------------------
00019100                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00019100                            ; ---------------------------------------------------------------------------
00019100 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00019104 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00019108 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
0001910C 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00019110 01                         byte_17DE4:	dc.b 1
00019111 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019116 02                         byte_17DEA:	dc.b 2
00019117 FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
0001911C F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00019121 00                         		dc.b 0
00019122 01                         byte_17DF6:	dc.b 1
00019123 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00019128 01                         byte_17DFC:	dc.b 1
00019129 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
0001912E 01                         byte_17E02:	dc.b 1
0001912F 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00019134 04                         byte_17E08:	dc.b 4
00019135 F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
0001913A F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
0001913F F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00019144 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00019149 00                         		dc.b 0
0001914A 02                         byte_17E1E:	dc.b 2
0001914B 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00019150 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00019155 00                         		dc.b 0
00019156 02                         byte_17E2A:	dc.b 2
00019157 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
0001915C 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00019162 00                         		even
00019162 00                         		even
00019162                            
00019162                            ; ===========================================================================
00019162                            ; ---------------------------------------------------------------------------
00019162                            ; Object 77 - Fatass teto boss fight in LZ -STDH
00019162                            ; ---------------------------------------------------------------------------
00019162                            
00019162                            
00019162                            obj77:					; XREF: Obj_Index
00019162 7000                       		moveq	#0,d0
00019164 1028 0024                  		move.b	$24(a0),d0
00019168 323B 0000                  		move.w	obj77_Index(pc,d0.w),d1
0001916C 4EFB 1000                  		jmp	obj77_Index(pc,d1.w)
00019170                            ; ===========================================================================
00019170 0000                       obj77_Index:	dc.w obj77_Main-obj77_Index
00019172 0000                       		dc.w obj77_ShipMain-obj77_Index
00019174 0000                       		dc.w obj77_FaceMain-obj77_Index
00019176 0000                       		dc.w obj77_FlameMain-obj77_Index
00019178                            
00019178 0200                       obj77_ObjData:	dc.b 2,	0		; routine counter, animation
0001917A 0401                       		dc.b 4,	1
0001917C 0607                       		dc.b 6,	7
0001917E                            ; ===========================================================================
0001917E                            
0001917E                            obj77_Main:				; XREF: obj77_Index
0001917E 45F9 0001 9178             		lea	(obj77_ObjData).l,a2
00019184 2248                       		movea.l	a0,a1
00019186 7202                       		moveq	#2,d1
00019188 6000                       		bra.s	obj77_LoadBoss
0001918A                            ; ===========================================================================
0001918A                            
0001918A                            obj77_Loop:
0001918A 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00019190 6600                       		bne.s	loc2_17772
00019192                            
00019192                            obj77_LoadBoss:				; XREF: obj77_Main
00019192 135A 0024                  		move.b	(a2)+,$24(a1)
00019196 12BC 0077                  		move.b	#$77,0(a1)
0001919A 3368 0008 0008             		move.w	8(a0),8(a1)
000191A0 3368 000C 000C             		move.w	$C(a0),$C(a1)
000191A6 237C 0000 0000 0004        		move.l	#Map_TetoBoss,4(a1)
000191AE 337C 0400 0002             		move.w	#$400,2(a1)
000191B4 137C 0004 0001             		move.b	#4,1(a1)
000191BA 137C 0020 0019             		move.b	#$20,$19(a1)
000191C0 137C 0003 0018             		move.b	#3,$18(a1)
000191C6 135A 001C                  		move.b	(a2)+,$1C(a1)
000191CA 2348 0034                  		move.l	a0,$34(a1)
000191CE 51C9 FFBA                  		dbf	d1,obj77_Loop	; repeat sequence 2 more times
000191D2                            
000191D2                            loc2_17772:
000191D2 3168 0008 0030             		move.w	8(a0),$30(a0)
000191D8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000191DE 117C 000F 0020             		move.b	#$F,$20(a0)
000191E4 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000191EA                            
000191EA                            obj77_ShipMain:				; XREF: obj77_Index
000191EA 7000                       		moveq	#0,d0
000191EC 1028 0025                  		move.b	$25(a0),d0
000191F0 323B 0000                  		move.w	obj77_ShipIndex(pc,d0.w),d1
000191F4 4EBB 1000                  		jsr	obj77_ShipIndex(pc,d1.w)
000191F8 43F9 0001 9024             		lea	(Ani_TetoB).l,a1
000191FE 4EB9 0000 B790             		jsr	AnimateSprite
00019204 1028 0022                  		move.b	$22(a0),d0
00019208 0200 0003                  		andi.b	#3,d0
0001920C 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019212 8128 0001                  		or.b	d0,1(a0)
00019216 4EF9 0000 E742             		jmp	DisplaySprite
0001921C                            ; ===========================================================================
0001921C 0000                       obj77_ShipIndex:dc.w obj77_ShipStart-obj77_ShipIndex
0001921E 0000                       		dc.w obj77_MakeBall-obj77_ShipIndex
00019220 0000                       		dc.w obj77_ShipMove-obj77_ShipIndex
00019222 0000                       		dc.w loc2_17954-obj77_ShipIndex
00019224 0000                       		dc.w fatassruns-obj77_ShipIndex		
00019226 0000                       		dc.w loc2_1797A-obj77_ShipIndex
00019228 0000                       		dc.w loc2_179AC-obj77_ShipIndex
0001922A 0000                       		dc.w loc2_179F6-obj77_ShipIndex
0001922C                            ; ===========================================================================
0001922C                            
0001922C                            obj77_ShipStart:			; XREF: obj77_ShipIndex
0001922C                            	;	move.w	#$100,$12(a0)	; move ship down
0001922C 6100 F964                  		bsr.w	BossMove
00019230 0C68 06E0 0038             		cmpi.w	#$6E0,$38(a0)
00019236 6600                       		bne.s	loc2_177E6
00019238 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
0001923E 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00019242                            
00019242                            loc2_177E6:
00019242                            ;		move.b	$3F(a0),d0
00019242                            ;		jsr	(CalcSine).l
00019242 EC40                       		asr.w	#6,d0
00019244 D068 0038                  		add.w	$38(a0),d0
00019248 3140 000C                  		move.w	d0,$C(a0)
0001924C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019252 5428 003F                  		addq.b	#2,$3F(a0)
00019256 0C28 000A 0025             		cmpi.b	#$A,$25(a0)
0001925C 6400                       		bcc.s	locret_1784A2
0001925E 4A28 0022                  		tst.b	$22(a0)
00019262 6B00                       		bmi.s	loc2_1784C
00019264 4A28 0020                  		tst.b	$20(a0)
00019268 6600                       		bne.s	locret_1784A2
0001926A 4A28 003E                  		tst.b	$3E(a0)
0001926E 6600                       		bne.s	obj77_ShipFlash
00019270 117C 0060 003E             		move.b	#$60,$3E(a0)	; set number of	times for ship to flash
00019276 303C 00AC                  		move.w	#$AC,d0
0001927A 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019280                            
00019280                            obj77_ShipFlash:
00019280 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
00019284 7000                       		moveq	#0,d0		; move 0 (black) to d0
00019286 4A51                       		tst.w	(a1)
00019288 6600                       		bne.s	loc2_1783C
0001928A 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
0001928E                            
0001928E                            loc2_1783C:
0001928E 3280                       		move.w	d0,(a1)		; load colour stored in	d0
00019290 5328 003E                  		subq.b	#1,$3E(a0)
00019294 6600                       		bne.s	locret_1784A2
00019296 117C 000F 0020             		move.b	#$F,$20(a0)
0001929C                            
0001929C                            locret_1784A2:
0001929C 4E75                       		rts	
0001929E                            ; ===========================================================================
0001929E                            
0001929E                            loc2_1784C:				; XREF: loc2_177E6
0001929E 7064                       		moveq	#100,d0
000192A0 6100 0000                  		bsr.w	AddPoints
000192A4 117C 000A 0025             		move.b	#$A,$25(a0)
000192AA 317C 00B3 003C             		move.w	#$B3,$3C(a0)
000192B0 4E75                       		rts	
000192B2                            ; ===========================================================================
000192B2                            
000192B2                            obj77_MakeBall:				; XREF: obj77_ShipIndex
000192B2 317C FF00 0010             		move.w	#-$100,$10(a0)
000192B8 117C 0001 001C             		move.b	#1,$1C(a0)	; it runs
000192BE 6100 F8D2                  		bsr.w	BossMove
000192C2 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0)
000192C8 6600                       		bne.s	loc2_17916
000192CA 317C 0000 0010             		move.w	#0,$10(a0)
000192D0 117C 0002 001C             		move.b	#2,$1C(a0)	; stare
000192D6 317C 0000 0012             		move.w	#0,$12(a0)
000192DC 5428 0025                  		addq.b	#2,$25(a0)
000192E0                            
000192E0                            loc2_17910:
000192E0 317C 0077 003C             		move.w	#$77,$3C(a0)
000192E6                            
000192E6                            loc2_17916:
000192E6 6000 FF5A                  		bra.w	loc2_177E6
000192EA                            ; ===========================================================================
000192EA                            
000192EA                            obj77_ShipMove:				; XREF: obj77_ShipIndex
000192EA 6100 F8A6                  		bsr.w	BossMove
000192EE 5368 003C                  		subq.w	#1,$3C(a0)
000192F2 6A00                       		bpl.s	loc2_17950 ; if time remains go here
000192F4 117C 0000 001C             		move.b	#0,$1C(a0)	; make it spin
000192FA 117C 0087 0020             		move.b	#$87,$20(a0) ; the spinning hurts you
00019300 317C FE00 0010             		move.w	#-$200,$10(a0)	; move the ship	sideways
00019306 0C68 1D10 0030             		cmpi.w	#$1D10,$30(a0) ; is teto here
0001930C 6600                       		bne.s	loc2_17950 ; if not branch
0001930E                            
0001930E                            fatass_attack:
0001930E 317C 0000 0010             		move.w	#0,$10(a0) ; stop her
00019314 317C FE00 0012             		move.w	#-$200,$12(a0) ; OH SHIT SHES GOING UP
0001931A 0C68 0680 0038              		cmpi.w	#$680,$38(a0) ; is she here
00019320 6600                       		bne.s	loc2_17950    ; if not you know the drill
00019322 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
00019326 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
0001932C                            
0001932C                            loc2_17950:
0001932C 6000 FF14                  		bra.w	loc2_177E6
00019330                            ; ===========================================================================
00019330                            
00019330                            loc2_17954:				; XREF: obj77_ShipIndex
00019330 6100 F860                  		bsr.w	BossMove
00019334 317C 0400 0012             		move.w	#$400,$12(a0) ; RUN A EARTHQUAKE!!
0001933A                            		; i suck at programming
0001933A 0C68 06E0 0038              		cmpi.w	#$6E0,$38(a0) ; is she back to the ground
00019340 6600                       		bne.s	loc2_17976    ; if not blah blah
00019342 317C 0000 0012             		move.w	#0,$12(a0) ; stop her		
00019348 5428 0025                  		addq.b	#2,$25(a0)	; next routine!
0001934C 303C 00B9                  		move.w	#$B9,d0
00019350 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play the earthquake sound
00019356                            
00019356                            Peartobombs:	
00019356 4EB9 0000 EBDE                		jsr	SingleObjLoad2
0001935C 6600                       		bne.s	secondone
0001935E 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb
00019362 337C 1D70 0008             		move.w	#$1D70,8(a1)
00019368 337C 0670 000C             		move.w	#$670,$C(a1)
0001936E                            secondone:		
0001936E 4EB9 0000 EBDE                		jsr	SingleObjLoad2
00019374 6600                       		bne.s	loc2_17976		
00019376 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 2
0001937A 337C 1D20 0008             		move.w	#$1D20,8(a1)
00019380 337C 0670 000C             		move.w	#$670,$C(a1)
00019386                            lastone:
00019386 4EB9 0000 EBDE                		jsr	SingleObjLoad2
0001938C 6600                       		bne.s	loc2_17976		
0001938E 12BC 0019                  		move.b	#$19,0(a1)	; load pearto bomb 3
00019392 337C 1E00 0008             		move.w	#$1E00,8(a1)
00019398 337C 0670 000C             		move.w	#$670,$C(a1)
0001939E                            		
0001939E                            loc2_17976:
0001939E 6000 FEA2                  		bra.w	loc2_177E6
000193A2                            		
000193A2                            ; ===========================================================================
000193A2                            Fatassruns:
000193A2 6100 F7EE                   		bsr.w	BossMove
000193A6 317C 0200 0010             		move.w	#$200,$10(a0)	; IT RUNS!!
000193AC 0C68 1E00 0030             		cmpi.w	#$1E00,$30(a0) ; is she back here
000193B2 6600                       		bne.s	processstuff ; is not go here
000193B4 317C 0000 0010             		move.w	#0,$10(a0)	; stop'
000193BA 117C 0002 001C             		move.b	#2,$1C(a0)	; stareeeee
000193C0 5928 0025                  		subq.b	#4,$25(a0) ; make the boss loop
000193C4 317C 0077 003C             		move.w	#$77,$3C(a0) ; timeerr
000193CA 117C 000F 0020             		move.b	#$F,$20(a0) ; now you can hit her
000193D0                            		
000193D0                            		
000193D0                            processstuff:
000193D0 6000 FE70                  		bra.w	loc2_177E6
000193D4                            ; ===========================================================================
000193D4                            
000193D4                            loc2_1797A:				; XREF: obj77_ShipIndex
000193D4 5368 003C                  		subq.w	#1,$3C(a0)
000193D8 6B00                       		bmi.s	loc2_17984
000193DA 6000 F774                  		bra.w	BossDefeated
000193DE                            ; ===========================================================================
000193DE                            
000193DE                            loc2_17984:
000193DE 08E8 0000 0022             		bset	#0,$22(a0)
000193E4 08A8 0007 0022             		bclr	#7,$22(a0)
000193EA 4268 0010                  		clr.w	$10(a0)
000193EE 5428 0025                  		addq.b	#2,$25(a0)
000193F2 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000193F8 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000193FC 6600                       		bne.s	locret_179AA2
000193FE 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019404                            
00019404                            locret_179AA2:
00019404 4E75                       		rts	
00019406                            ; ===========================================================================
00019406                            
00019406                            loc2_179AC:				; XREF: obj77_ShipIndex
00019406 5268 003C                  		addq.w	#1,$3C(a0)
0001940A 6700                       		beq.s	loc2_179BC
0001940C 6A00                       		bpl.s	loc2_179C2
0001940E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019414 6000                       		bra.s	loc2_179EE
00019416                            ; ===========================================================================
00019416                            
00019416                            loc2_179BC:
00019416 4268 0012                  		clr.w	$12(a0)
0001941A 6000                       		bra.s	loc2_179EE
0001941C                            ; ===========================================================================
0001941C                            
0001941C                            loc2_179C2:
0001941C 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00019422 6500                       		bcs.s	loc2_179DA
00019424 6700                       		beq.s	loc2_179E0
00019426 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001942C 6500                       		bcs.s	loc2_179EE
0001942E 5428 0025                  		addq.b	#2,$25(a0)
00019432 6000                       		bra.s	loc2_179EE
00019434                            ; ===========================================================================
00019434                            
00019434                            loc2_179DA:
00019434 5168 0012                  		subq.w	#8,$12(a0)
00019438 6000                       		bra.s	loc2_179EE
0001943A                            ; ===========================================================================
0001943A                            
0001943A                            loc2_179E0:
0001943A 4268 0012                  		clr.w	$12(a0)
0001943E 303C 0097                  		move.w	#$97,d0
00019442 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play lz3 music
00019448                            
00019448                            loc2_179EE:
00019448 6100 F748                  		bsr.w	BossMove
0001944C 6000 FDF4                  		bra.w	loc2_177E6
00019450                            ; ===========================================================================
00019450                            
00019450                            loc2_179F6:				; XREF: obj77_ShipIndex
00019450 317C 0400 0010             		move.w	#$400,$10(a0)
00019456 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001945C 0C78 1F00 F72A             		cmpi.w	#$1F00,($FFFFF72A).w
00019462 6700                       		beq.s	loc2_17A10
00019464 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019468 6000                       		bra.s	loc2_17A16
0001946A                            ; ===========================================================================
0001946A                            
0001946A                            loc2_17A10:
0001946A 4A28 0001                  		tst.b	1(a0)
0001946E 6A00                       		bpl.s	obj77_ShipDel
00019470                            
00019470                            loc2_17A16:
00019470 6100 F720                  		bsr.w	BossMove
00019474 6000 FDCC                  		bra.w	loc2_177E6
00019478                            ; ===========================================================================
00019478                            
00019478                            obj77_ShipDel:
00019478 4EF9 0000 E77E             		jmp	DeleteObject
0001947E                            ; ===========================================================================
0001947E                            
0001947E                            obj77_FaceMain:				; XREF: obj77_Index
0001947E 4E75                       		rts
00019480                            ; ===========================================================================
00019480                            
00019480                            obj77_FlameMain:			; XREF: obj77_Index
00019480 4E75                       		rts
00019482                            ; ===========================================================================
00019482                            
00019482                            obj77_Display:				; XREF: obj77_FaceDisp; obj77_FlameDisp
00019482 43F9 0001 9024             		lea	(Ani_TetoB).l,a1
00019488 4EB9 0000 B790             		jsr	AnimateSprite
0001948E 4EF9 0000 E742             		jmp	DisplaySprite
00019494                            ; ---------------------------------------------------------------------------
00019494                            ; Sprite mappings - Fatass teto boss
00019494                            ; ---------------------------------------------------------------------------
00019494                            Map_TetoBoss:
00019494                            	include "_maps\tetoboss.asm"
00019494                            Map_f09a:
00019494 0000                       Map_f09a_0: 	dc.w Map_f09a_8-Map_f09a
00019496 0000                       Map_f09a_2: 	dc.w Map_f09a_18-Map_f09a
00019498 0000                       Map_f09a_4: 	dc.w Map_f09a_37-Map_f09a
0001949A 0000                       Map_f09a_6: 	dc.w Map_f09a_47-Map_f09a
0001949C 03                         Map_f09a_8: 	dc.b $3
0001949D E50F 602B F0               	dc.b $E5, $F, $60, $2B, $F0
000194A2 050E 603B F0               	dc.b $5, $E, $60, $3B, $F0
000194A7 DD00 6047 F8               	dc.b $DD, $0, $60, $47, $F8
000194AC 06                         Map_f09a_18: 	dc.b $6
000194AD EC0E 6000 E4               	dc.b $EC, $E, $60, $0, $E4
000194B2 040E 600C EC               	dc.b $4, $E, $60, $C, $EC
000194B7 E408 6018 F4               	dc.b $E4, $8, $60, $18, $F4
000194BC 1C00 601B F4               	dc.b $1C, $0, $60, $1B, $F4
000194C1 EC0A 601C 04               	dc.b $EC, $A, $60, $1C, $4
000194C6 0406 6025 0C               	dc.b $4, $6, $60, $25, $C
000194CB 03                         Map_f09a_37: 	dc.b $3
000194CC E50F 682B F0               	dc.b $E5, $F, $68, $2B, $F0
000194D1 050E 683B F0               	dc.b $5, $E, $68, $3B, $F0
000194D6 DD00 6847 00               	dc.b $DD, $0, $68, $47, $0
000194DB 06                         Map_f09a_47: 	dc.b $6
000194DC ED0E 6048 E4               	dc.b $ED, $E, $60, $48, $E4
000194E1 050E 6054 EC               	dc.b $5, $E, $60, $54, $EC
000194E6 E508 6060 F4               	dc.b $E5, $8, $60, $60, $F4
000194EB DD00 6063 FC               	dc.b $DD, $0, $60, $63, $FC
000194F0 ED0A 6064 04               	dc.b $ED, $A, $60, $64, $4
000194F5 0502 606D 0C               	dc.b $5, $2, $60, $6D, $C
000194FA                            	even
000194FA                            	even
000194FA                            ; ===========================================================================
000194FA                            ; ---------------------------------------------------------------------------
000194FA                            ; Object 73 - Eggman (MZ)
000194FA                            ; ---------------------------------------------------------------------------
000194FA                            
000194FA                            Obj73:					; XREF: Obj_Index
000194FA 7000                       		moveq	#0,d0
000194FC 1028 0024                  		move.b	$24(a0),d0
00019500 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
00019504 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
00019508                            ; ===========================================================================
00019508 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
0001950A 0000                       		dc.w Obj73_ShipMain-Obj73_Index
0001950C 0000                       		dc.w Obj73_FaceMain-Obj73_Index
0001950E 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00019510 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00019512                            
00019512 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019515 0401 04                    		dc.b 4,	1, 4
00019518 0607 04                    		dc.b 6,	7, 4
0001951B 0800 03                    		dc.b 8,	0, 3
0001951E                            ; ===========================================================================
0001951E                            
0001951E                            Obj73_Main:				; XREF: Obj73_Index
0001951E 3168 0008 0030             		move.w	8(a0),$30(a0)
00019524 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001952A 117C 000F 0020             		move.b	#$F,$20(a0)
00019530 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019536 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
0001953A 2248                       		movea.l	a0,a1
0001953C 7203                       		moveq	#3,d1
0001953E 6000                       		bra.s	Obj73_LoadBoss
00019540                            ; ===========================================================================
00019540                            
00019540                            Obj73_Loop:
00019540 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00019546 6600                       		bne.s	Obj73_ShipMain
00019548 12BC 0073                  		move.b	#$73,0(a1)
0001954C 3368 0008 0008             		move.w	8(a0),8(a1)
00019552 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019558                            
00019558                            Obj73_LoadBoss:				; XREF: Obj73_Main
00019558 08A8 0000 0022             		bclr	#0,$22(a0)
0001955E 4229 0025                  		clr.b	$25(a1)
00019562 135A 0024                  		move.b	(a2)+,$24(a1)
00019566 135A 001C                  		move.b	(a2)+,$1C(a1)
0001956A 135A 0018                  		move.b	(a2)+,$18(a1)
0001956E 237C 0001 9038 0004        		move.l	#Map_Eggman,4(a1)
00019576 337C 0400 0002             		move.w	#$400,2(a1)
0001957C 137C 0004 0001             		move.b	#4,1(a1)
00019582 137C 0020 0019             		move.b	#$20,$19(a1)
00019588 2348 0034                  		move.l	a0,$34(a1)
0001958C 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
00019590                            
00019590                            Obj73_ShipMain:
00019590 7000                       		moveq	#0,d0
00019592 1028 0025                  		move.b	$25(a0),d0
00019596 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
0001959A 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
0001959E 43F9 0001 8FD4             		lea	(Ani_Eggman).l,a1
000195A4 4EB9 0000 B790             		jsr	AnimateSprite
000195AA 7003                       		moveq	#3,d0
000195AC C028 0022                  		and.b	$22(a0),d0
000195B0 0228 00FC 0001             		andi.b	#$FC,1(a0)
000195B6 8128 0001                  		or.b	d0,1(a0)
000195BA 4EF9 0000 E742             		jmp	DisplaySprite
000195C0                            ; ===========================================================================
000195C0 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
000195C2 0000                       		dc.w loc_183AA-Obj73_ShipIndex
000195C4 0000                       		dc.w loc_184F6-Obj73_ShipIndex
000195C6 0000                       		dc.w loc_1852C-Obj73_ShipIndex
000195C8 0000                       		dc.w loc_18582-Obj73_ShipIndex
000195CA                            ; ===========================================================================
000195CA                            
000195CA                            loc_18302:				; XREF: Obj73_ShipIndex
000195CA 1028 003F                  		move.b	$3F(a0),d0
000195CE 5428 003F                  		addq.b	#2,$3F(a0)
000195D2 4EB9 0000 3416             		jsr	(CalcSine).l
000195D8 E440                       		asr.w	#2,d0
000195DA 3140 0012                  		move.w	d0,$12(a0)
000195DE 317C FF00 0010             		move.w	#-$100,$10(a0)
000195E4 6100 F5AC                  		bsr.w	BossMove
000195E8 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
000195EE 6600                       		bne.s	loc_18334
000195F0 5428 0025                  		addq.b	#2,$25(a0)
000195F4 4228 0028                  		clr.b	$28(a0)
000195F8 42A8 0010                  		clr.l	$10(a0)
000195FC                            
000195FC                            loc_18334:
000195FC 4EB9 0000 33F0             		jsr	(RandomNumber).l
00019602 1140 0034                  		move.b	d0,$34(a0)
00019606                            
00019606                            loc_1833E:
00019606 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001960C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019612 0C28 0004 0025             		cmpi.b	#4,$25(a0)
00019618 6400                       		bcc.s	locret_18390
0001961A 4A28 0022                  		tst.b	$22(a0)
0001961E 6B00                       		bmi.s	loc_18392
00019620 4A28 0020                  		tst.b	$20(a0)
00019624 6600                       		bne.s	locret_18390
00019626 4A28 003E                  		tst.b	$3E(a0)
0001962A 6600                       		bne.s	loc_18374
0001962C 117C 0028 003E             		move.b	#$28,$3E(a0)
00019632 303C 00AC                  		move.w	#$AC,d0
00019636 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001963C                            
0001963C                            loc_18374:
0001963C 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019640 7000                       		moveq	#0,d0
00019642 4A51                       		tst.w	(a1)
00019644 6600                       		bne.s	loc_18382
00019646 303C 0EEE                  		move.w	#$EEE,d0
0001964A                            
0001964A                            loc_18382:
0001964A 3280                       		move.w	d0,(a1)
0001964C 5328 003E                  		subq.b	#1,$3E(a0)
00019650 6600                       		bne.s	locret_18390
00019652 117C 000F 0020             		move.b	#$F,$20(a0)
00019658                            
00019658                            locret_18390:
00019658 4E75                       		rts	
0001965A                            ; ===========================================================================
0001965A                            
0001965A                            loc_18392:				; XREF: loc_1833E
0001965A 7064                       		moveq	#100,d0
0001965C 6100 0000                  		bsr.w	AddPoints
00019660 117C 0004 0025             		move.b	#4,$25(a0)
00019666 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001966C 4268 0010                  		clr.w	$10(a0)
00019670 4E75                       		rts	
00019672                            ; ===========================================================================
00019672                            
00019672                            loc_183AA:				; XREF: Obj73_ShipIndex
00019672 7000                       		moveq	#0,d0
00019674 1028 0028                  		move.b	$28(a0),d0
00019678 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
0001967C 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
00019680 0228 0006 0028             		andi.b	#6,$28(a0)
00019686 6000 FF7E                  		bra.w	loc_1833E
0001968A                            ; ===========================================================================
0001968A 0000                       off_183C2:	dc.w loc_183CA-off_183C2
0001968C 0000                       		dc.w Obj73_MakeLava2-off_183C2
0001968E 0000                       		dc.w loc_183CA-off_183C2
00019690 0000                       		dc.w Obj73_MakeLava2-off_183C2
00019692                            ; ===========================================================================
00019692                            
00019692                            loc_183CA:				; XREF: off_183C2
00019692 4A68 0010                  		tst.w	$10(a0)
00019696 6600                       		bne.s	loc_183FE
00019698 7040                       		moveq	#$40,d0
0001969A 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000196A0 6700                       		beq.s	loc_183E6
000196A2 6500                       		bcs.s	loc_183DE
000196A4 4440                       		neg.w	d0
000196A6                            
000196A6                            loc_183DE:
000196A6 3140 0012                  		move.w	d0,$12(a0)
000196AA 6000 F4E6                  		bra.w	BossMove
000196AE                            ; ===========================================================================
000196AE                            
000196AE                            loc_183E6:
000196AE 317C 0200 0010             		move.w	#$200,$10(a0)
000196B4 317C 0100 0012             		move.w	#$100,$12(a0)
000196BA 0828 0000 0022             		btst	#0,$22(a0)
000196C0 6600                       		bne.s	loc_183FE
000196C2 4468 0010                  		neg.w	$10(a0)
000196C6                            
000196C6                            loc_183FE:
000196C6 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
000196CC 6400                       		bcc.s	Obj73_MakeLava
000196CE 6100 F4C2                  		bsr.w	BossMove
000196D2 5968 0012                  		subq.w	#4,$12(a0)
000196D6                            
000196D6                            Obj73_MakeLava:
000196D6 5328 0034                  		subq.b	#1,$34(a0)
000196DA 6400                       		bcc.s	loc_1845C
000196DC 4EB9 0000 EBC8             		jsr	SingleObjLoad
000196E2 6600                       		bne.s	loc_1844A
000196E4 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
000196E8 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
000196EE 4EB9 0000 33F0             		jsr	(RandomNumber).l
000196F4 0280 0000 FFFF             		andi.l	#$FFFF,d0
000196FA 80FC 0050                  		divu.w	#$50,d0
000196FE 4840                       		swap	d0
00019700 0640 1878                  		addi.w	#$1878,d0
00019704 3340 0008                  		move.w	d0,8(a1)
00019708 EE09                       		lsr.b	#7,d1
0001970A 337C 00FF 0028             		move.w	#$FF,$28(a1)
00019710                            
00019710                            loc_1844A:
00019710 4EB9 0000 33F0             		jsr	(RandomNumber).l
00019716 0200 001F                  		andi.b	#$1F,d0
0001971A 0600 0040                  		addi.b	#$40,d0
0001971E 1140 0034                  		move.b	d0,$34(a0)
00019722                            
00019722                            loc_1845C:
00019722 0828 0000 0022             		btst	#0,$22(a0)
00019728 6700                       		beq.s	loc_18474
0001972A 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00019730 6D00                       		blt.s	locret_1849C
00019732 317C 1910 0030             		move.w	#$1910,$30(a0)
00019738 6000                       		bra.s	loc_18482
0001973A                            ; ===========================================================================
0001973A                            
0001973A                            loc_18474:
0001973A 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00019740 6E00                       		bgt.s	locret_1849C
00019742 317C 1830 0030             		move.w	#$1830,$30(a0)
00019748                            
00019748                            loc_18482:
00019748 4268 0010                  		clr.w	$10(a0)
0001974C 317C FE80 0012             		move.w	#-$180,$12(a0)
00019752 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
00019758 6400                       		bcc.s	loc_18498
0001975A 4468 0012                  		neg.w	$12(a0)
0001975E                            
0001975E                            loc_18498:
0001975E 5428 0028                  		addq.b	#2,$28(a0)
00019762                            
00019762                            locret_1849C:
00019762 4E75                       		rts	
00019764                            ; ===========================================================================
00019764                            
00019764                            Obj73_MakeLava2:			; XREF: off_183C2
00019764 6100 F42C                  		bsr.w	BossMove
00019768 3028 0038                  		move.w	$38(a0),d0
0001976C 0440 022C                  		subi.w	#$22C,d0
00019770 6E00                       		bgt.s	locret_184F4
00019772 303C 022C                  		move.w	#$22C,d0
00019776 4A68 0012                  		tst.w	$12(a0)
0001977A 6700                       		beq.s	loc_184EA
0001977C 4268 0012                  		clr.w	$12(a0)
00019780 317C 0050 003C             		move.w	#$50,$3C(a0)
00019786 0868 0000 0022             		bchg	#0,$22(a0)
0001978C 4EB9 0000 EBC8             		jsr	SingleObjLoad
00019792 6600                       		bne.s	loc_184EA
00019794 3368 0030 0008             		move.w	$30(a0),8(a1)
0001979A 3368 0038 000C             		move.w	$38(a0),$C(a1)
000197A0 0669 0018 000C             		addi.w	#$18,$C(a1)
000197A6 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000197AA 137C 0001 0028             		move.b	#1,$28(a1)
000197B0                            
000197B0                            loc_184EA:
000197B0 5368 003C                  		subq.w	#1,$3C(a0)
000197B4 6600                       		bne.s	locret_184F4
000197B6 5428 0028                  		addq.b	#2,$28(a0)
000197BA                            
000197BA                            locret_184F4:
000197BA 4E75                       		rts	
000197BC                            ; ===========================================================================
000197BC                            
000197BC                            loc_184F6:				; XREF: Obj73_ShipIndex
000197BC 5368 003C                  		subq.w	#1,$3C(a0)
000197C0 6B00                       		bmi.s	loc_18500
000197C2 6000 F38C                  		bra.w	BossDefeated
000197C6                            ; ===========================================================================
000197C6                            
000197C6                            loc_18500:
000197C6 08E8 0000 0022             		bset	#0,$22(a0)
000197CC 08A8 0007 0022             		bclr	#7,$22(a0)
000197D2 4268 0010                  		clr.w	$10(a0)
000197D6 5428 0025                  		addq.b	#2,$25(a0)
000197DA 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000197E0 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000197E4 6600                       		bne.s	locret_1852A
000197E6 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000197EC 4268 0012                  		clr.w	$12(a0)
000197F0                            
000197F0                            locret_1852A:
000197F0 4E75                       		rts	
000197F2                            ; ===========================================================================
000197F2                            
000197F2                            loc_1852C:				; XREF: Obj73_ShipIndex
000197F2 5268 003C                  		addq.w	#1,$3C(a0)
000197F6 6700                       		beq.s	loc_18544
000197F8 6A00                       		bpl.s	loc_1854E
000197FA 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00019800 6400                       		bcc.s	loc_18544
00019802 0668 0018 0012             		addi.w	#$18,$12(a0)
00019808 6000                       		bra.s	loc_1857A
0001980A                            ; ===========================================================================
0001980A                            
0001980A                            loc_18544:
0001980A 4268 0012                  		clr.w	$12(a0)
0001980E 4268 003C                  		clr.w	$3C(a0)
00019812 6000                       		bra.s	loc_1857A
00019814                            ; ===========================================================================
00019814                            
00019814                            loc_1854E:
00019814 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
0001981A 6500                       		bcs.s	loc_18566
0001981C 6700                       		beq.s	loc_1856C
0001981E 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
00019824 6500                       		bcs.s	loc_1857A
00019826 5428 0025                  		addq.b	#2,$25(a0)
0001982A 6000                       		bra.s	loc_1857A
0001982C                            ; ===========================================================================
0001982C                            
0001982C                            loc_18566:
0001982C 5168 0012                  		subq.w	#8,$12(a0)
00019830 6000                       		bra.s	loc_1857A
00019832                            ; ===========================================================================
00019832                            
00019832                            loc_1856C:
00019832 4268 0012                  		clr.w	$12(a0)
00019836 303C 0083                  		move.w	#$83,d0
0001983A 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play MZ music
00019840                            
00019840                            loc_1857A:
00019840 6100 F350                  		bsr.w	BossMove
00019844 6000 FDC0                  		bra.w	loc_1833E
00019848                            ; ===========================================================================
00019848                            
00019848                            loc_18582:				; XREF: Obj73_ShipIndex
00019848 317C 0500 0010             		move.w	#$500,$10(a0)
0001984E 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019854 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
0001985A 6400                       		bcc.s	loc_1859C
0001985C 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019860 6000                       		bra.s	loc_185A2
00019862                            ; ===========================================================================
00019862                            
00019862                            loc_1859C:
00019862 4A28 0001                  		tst.b	1(a0)
00019866 6A00                       		bpl.s	Obj73_ShipDel
00019868                            
00019868                            loc_185A2:
00019868 6100 F328                  		bsr.w	BossMove
0001986C 6000 FD98                  		bra.w	loc_1833E
00019870                            ; ===========================================================================
00019870                            
00019870                            Obj73_ShipDel:
00019870 4EF9 0000 E77E             		jmp	DeleteObject
00019876                            ; ===========================================================================
00019876                            
00019876                            Obj73_FaceMain:				; XREF: Obj73_Index
00019876 7000                       		moveq	#0,d0
00019878 7201                       		moveq	#1,d1
0001987A 2268 0034                  		movea.l	$34(a0),a1
0001987E 1029 0025                  		move.b	$25(a1),d0
00019882 5540                       		subq.w	#2,d0
00019884 6600                       		bne.s	loc_185D2
00019886 0829 0001 0028             		btst	#1,$28(a1)
0001988C 6700                       		beq.s	loc_185DA
0001988E 4A69 0012                  		tst.w	$12(a1)
00019892 6600                       		bne.s	loc_185DA
00019894 7204                       		moveq	#4,d1
00019896 6000                       		bra.s	loc_185EE
00019898                            ; ===========================================================================
00019898                            
00019898                            loc_185D2:
00019898 5500                       		subq.b	#2,d0
0001989A 6B00                       		bmi.s	loc_185DA
0001989C 720A                       		moveq	#$A,d1
0001989E 6000                       		bra.s	loc_185EE
000198A0                            ; ===========================================================================
000198A0                            
000198A0                            loc_185DA:
000198A0 4A29 0020                  		tst.b	$20(a1)
000198A4 6600                       		bne.s	loc_185E4
000198A6 7205                       		moveq	#5,d1
000198A8 6000                       		bra.s	loc_185EE
000198AA                            ; ===========================================================================
000198AA                            
000198AA                            loc_185E4:
000198AA 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000198B0 6500                       		bcs.s	loc_185EE
000198B2 7204                       		moveq	#4,d1
000198B4                            
000198B4                            loc_185EE:
000198B4 1141 001C                  		move.b	d1,$1C(a0)
000198B8 5900                       		subq.b	#4,d0
000198BA 6600                       		bne.s	loc_18602
000198BC 117C 0006 001C             		move.b	#6,$1C(a0)
000198C2 4A28 0001                  		tst.b	1(a0)
000198C6 6A00                       		bpl.s	Obj73_FaceDel
000198C8                            
000198C8                            loc_18602:
000198C8 6000                       		bra.s	Obj73_Display
000198CA                            ; ===========================================================================
000198CA                            
000198CA                            Obj73_FaceDel:
000198CA 4EF9 0000 E77E             		jmp	DeleteObject
000198D0                            ; ===========================================================================
000198D0                            
000198D0                            Obj73_FlameMain:			; XREF: Obj73_Index
000198D0 117C 0007 001C             		move.b	#7,$1C(a0)
000198D6 2268 0034                  		movea.l	$34(a0),a1
000198DA 0C29 0008 0025             		cmpi.b	#8,$25(a1)
000198E0 6D00                       		blt.s	loc_1862A
000198E2 117C 000B 001C             		move.b	#$B,$1C(a0)
000198E8 4A28 0001                  		tst.b	1(a0)
000198EC 6A00                       		bpl.s	Obj73_FlameDel
000198EE 6000                       		bra.s	loc_18636
000198F0                            ; ===========================================================================
000198F0                            
000198F0                            loc_1862A:
000198F0 4A69 0010                  		tst.w	$10(a1)
000198F4 6700                       		beq.s	loc_18636
000198F6 117C 0008 001C             		move.b	#8,$1C(a0)
000198FC                            
000198FC                            loc_18636:
000198FC 6000                       		bra.s	Obj73_Display
000198FE                            ; ===========================================================================
000198FE                            
000198FE                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
000198FE 4EF9 0000 E77E             		jmp	DeleteObject
00019904                            ; ===========================================================================
00019904                            
00019904                            Obj73_Display:
00019904 43F9 0001 8FD4             		lea	(Ani_Eggman).l,a1
0001990A 4EB9 0000 B790             		jsr	AnimateSprite
00019910                            
00019910                            loc_1864A:
00019910 2268 0034                  		movea.l	$34(a0),a1
00019914 3169 0008 0008             		move.w	8(a1),8(a0)
0001991A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019920 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019926 7003                       		moveq	#3,d0
00019928 C028 0022                  		and.b	$22(a0),d0
0001992C 0228 00FC 0001             		andi.b	#-4,1(a0)
00019932 8128 0001                  		or.b	d0,1(a0)
00019936 4EF9 0000 E742             		jmp	DisplaySprite
0001993C                            ; ===========================================================================
0001993C                            
0001993C                            Obj73_TubeMain:				; XREF: Obj73_Index
0001993C 2268 0034                  		movea.l	$34(a0),a1
00019940 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019946 6600                       		bne.s	loc_18688
00019948 4A28 0001                  		tst.b	1(a0)
0001994C 6A00                       		bpl.s	Obj73_TubeDel
0001994E                            
0001994E                            loc_18688:
0001994E 217C 0001 9100 0004        		move.l	#Map_BossItems,4(a0)
00019956 317C 246C 0002             		move.w	#$246C,2(a0)
0001995C 117C 0004 001A             		move.b	#4,$1A(a0)
00019962 60AC                       		bra.s	loc_1864A
00019964                            ; ===========================================================================
00019964                            
00019964                            Obj73_TubeDel:
00019964 4EF9 0000 E77E             		jmp	DeleteObject
0001996A                            ; ===========================================================================
0001996A                            ; ---------------------------------------------------------------------------
0001996A                            ; Object 74 - lava that	Eggman drops (MZ)
0001996A                            ; ---------------------------------------------------------------------------
0001996A                            
0001996A                            Obj74:					; XREF: Obj_Index
0001996A 7000                       		moveq	#0,d0
0001996C 1028 0024                  		move.b	$24(a0),d0
00019970 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
00019974 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
00019978 4EF9 0000 E742             		jmp	DisplaySprite
0001997E                            ; ===========================================================================
0001997E 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
00019980 0000                       		dc.w Obj74_Action-Obj74_Index
00019982 0000                       		dc.w loc_18886-Obj74_Index
00019984 0000                       		dc.w Obj74_Delete3-Obj74_Index
00019986                            ; ===========================================================================
00019986                            
00019986                            Obj74_Main:				; XREF: Obj74_Index
00019986 117C 0008 0016             		move.b	#8,$16(a0)
0001998C 117C 0008 0017             		move.b	#8,$17(a0)
00019992 217C 0000 C38E 0004        		move.l	#Map_obj14,4(a0)
0001999A 317C 0345 0002             		move.w	#$345,2(a0)
000199A0 117C 0004 0001             		move.b	#4,1(a0)
000199A6 117C 0005 0018             		move.b	#5,$18(a0)
000199AC 3168 000C 0038             		move.w	$C(a0),$38(a0)
000199B2 117C 0008 0019             		move.b	#8,$19(a0)
000199B8 5428 0024                  		addq.b	#2,$24(a0)
000199BC 4A28 0028                  		tst.b	$28(a0)
000199C0 6600                       		bne.s	loc_1870A
000199C2 117C 008B 0020             		move.b	#$8B,$20(a0)
000199C8 5428 0024                  		addq.b	#2,$24(a0)
000199CC 6000 0000                  		bra.w	loc_18886
000199D0                            ; ===========================================================================
000199D0                            
000199D0                            loc_1870A:
000199D0 117C 001E 0029             		move.b	#$1E,$29(a0)
000199D6 303C 00AE                  		move.w	#$AE,d0
000199DA 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play lava sound
000199E0                            
000199E0                            Obj74_Action:				; XREF: Obj74_Index
000199E0 7000                       		moveq	#0,d0
000199E2 1028 0025                  		move.b	$25(a0),d0
000199E6 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
000199EA 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
000199EE 4EB9 0000 E71C             		jsr	SpeedToPos
000199F4 43F9 0000 F5FC             		lea	(Ani_obj14).l,a1
000199FA 4EB9 0000 B790             		jsr	AnimateSprite
00019A00 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
00019A06 6200                       		bhi.s	Obj74_Delete
00019A08 4E75                       		rts	
00019A0A                            ; ===========================================================================
00019A0A                            
00019A0A                            Obj74_Delete:
00019A0A 4EF9 0000 E77E             		jmp	DeleteObject
00019A10                            ; ===========================================================================
00019A10 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00019A12 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
00019A14 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
00019A16 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
00019A18                            ; ===========================================================================
00019A18                            
00019A18                            Obj74_Drop:				; XREF: Obj74_Index2
00019A18 08E8 0001 0022             		bset	#1,$22(a0)
00019A1E 5328 0029                  		subq.b	#1,$29(a0)
00019A22 6A00                       		bpl.s	locret_18780
00019A24 117C 008B 0020             		move.b	#$8B,$20(a0)
00019A2A 4228 0028                  		clr.b	$28(a0)
00019A2E 0668 0018 0012             		addi.w	#$18,$12(a0)
00019A34 08A8 0001 0022             		bclr	#1,$22(a0)
00019A3A 6100 C618                  		bsr.w	ObjHitFloor
00019A3E 4A41                       		tst.w	d1
00019A40 6A00                       		bpl.s	locret_18780
00019A42 5428 0025                  		addq.b	#2,$25(a0)
00019A46                            
00019A46                            locret_18780:
00019A46 4E75                       		rts	
00019A48                            ; ===========================================================================
00019A48                            
00019A48                            Obj74_MakeFlame:			; XREF: Obj74_Index2
00019A48 5568 000C                  		subq.w	#2,$C(a0)
00019A4C 08E8 0007 0002             		bset	#7,2(a0)
00019A52 317C 00A0 0010             		move.w	#$A0,$10(a0)
00019A58 4268 0012                  		clr.w	$12(a0)
00019A5C 3168 0008 0030             		move.w	8(a0),$30(a0)
00019A62 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019A68 117C 0003 0029             		move.b	#3,$29(a0)
00019A6E 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00019A74 6600                       		bne.s	loc_187CA
00019A76 47D1                       		lea	(a1),a3
00019A78 45D0                       		lea	(a0),a2
00019A7A 7003                       		moveq	#3,d0
00019A7C                            
00019A7C                            Obj74_Loop:
00019A7C 26DA                       		move.l	(a2)+,(a3)+
00019A7E 26DA                       		move.l	(a2)+,(a3)+
00019A80 26DA                       		move.l	(a2)+,(a3)+
00019A82 26DA                       		move.l	(a2)+,(a3)+
00019A84 51C8 FFF6                  		dbf	d0,Obj74_Loop
00019A88                            
00019A88 4469 0010                  		neg.w	$10(a1)
00019A8C 5429 0025                  		addq.b	#2,$25(a1)
00019A90                            
00019A90                            loc_187CA:
00019A90 5428 0025                  		addq.b	#2,$25(a0)
00019A94 4E75                       		rts	
00019A96                            
00019A96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019A96                            
00019A96                            
00019A96                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
00019A96 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00019A9C 6600                       		bne.s	locret_187EE
00019A9E 3368 0008 0008             		move.w	8(a0),8(a1)
00019AA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019AAA 12BC 0074                  		move.b	#$74,(a1)
00019AAE 337C 0067 0028             		move.w	#$67,$28(a1)
00019AB4                            
00019AB4                            locret_187EE:
00019AB4 4E75                       		rts	
00019AB6                            ; End of function Obj74_Duplicate2
00019AB6                            
00019AB6                            ; ===========================================================================
00019AB6                            
00019AB6                            Obj74_Duplicate:			; XREF: Obj74_Index2
00019AB6 6100 C59C                  		bsr.w	ObjHitFloor
00019ABA 4A41                       		tst.w	d1
00019ABC 6A00                       		bpl.s	loc_18826
00019ABE 3028 0008                  		move.w	8(a0),d0
00019AC2 0C40 1940                  		cmpi.w	#$1940,d0
00019AC6 6E00                       		bgt.s	loc_1882C
00019AC8 3228 0030                  		move.w	$30(a0),d1
00019ACC B240                       		cmp.w	d0,d1
00019ACE 6700                       		beq.s	loc_1881E
00019AD0 0240 0010                  		andi.w	#$10,d0
00019AD4 0241 0010                  		andi.w	#$10,d1
00019AD8 B240                       		cmp.w	d0,d1
00019ADA 6700                       		beq.s	loc_1881E
00019ADC 61B8                       		bsr.s	Obj74_Duplicate2
00019ADE 3168 0008 0032             		move.w	8(a0),$32(a0)
00019AE4                            
00019AE4                            loc_1881E:
00019AE4 3168 0008 0030             		move.w	8(a0),$30(a0)
00019AEA 4E75                       		rts	
00019AEC                            ; ===========================================================================
00019AEC                            
00019AEC                            loc_18826:
00019AEC 5428 0025                  		addq.b	#2,$25(a0)
00019AF0 4E75                       		rts	
00019AF2                            ; ===========================================================================
00019AF2                            
00019AF2                            loc_1882C:
00019AF2 5428 0024                  		addq.b	#2,$24(a0)
00019AF6 4E75                       		rts	
00019AF8                            ; ===========================================================================
00019AF8                            
00019AF8                            Obj74_FallEdge:				; XREF: Obj74_Index2
00019AF8 08A8 0001 0022             		bclr	#1,$22(a0)
00019AFE 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
00019B04 3028 0008                  		move.w	8(a0),d0
00019B08 9068 0032                  		sub.w	$32(a0),d0
00019B0C 6A00                       		bpl.s	loc_1884A
00019B0E 4440                       		neg.w	d0
00019B10                            
00019B10                            loc_1884A:
00019B10 0C40 0012                  		cmpi.w	#$12,d0
00019B14 6600                       		bne.s	loc_18856
00019B16 08A8 0007 0002             		bclr	#7,2(a0)
00019B1C                            
00019B1C                            loc_18856:
00019B1C 6100 C536                  		bsr.w	ObjHitFloor
00019B20 4A41                       		tst.w	d1
00019B22 6A00                       		bpl.s	locret_1887E
00019B24 5328 0029                  		subq.b	#1,$29(a0)
00019B28 6700                       		beq.s	Obj74_Delete2
00019B2A 4268 0012                  		clr.w	$12(a0)
00019B2E 3168 0032 0008             		move.w	$32(a0),8(a0)
00019B34 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019B3A 08E8 0007 0002             		bset	#7,2(a0)
00019B40 5528 0025                  		subq.b	#2,$25(a0)
00019B44                            
00019B44                            locret_1887E:
00019B44 4E75                       		rts	
00019B46                            ; ===========================================================================
00019B46                            
00019B46                            Obj74_Delete2:
00019B46 4EF9 0000 E77E             		jmp	DeleteObject
00019B4C                            ; ===========================================================================
00019B4C                            
00019B4C                            loc_18886:				; XREF: Obj74_Index
00019B4C 08E8 0007 0002             		bset	#7,2(a0)
00019B52 5328 0029                  		subq.b	#1,$29(a0)
00019B56 6600                       		bne.s	Obj74_Animate
00019B58 117C 0001 001C             		move.b	#1,$1C(a0)
00019B5E 5968 000C                  		subq.w	#4,$C(a0)
00019B62 4228 0020                  		clr.b	$20(a0)
00019B66                            
00019B66                            Obj74_Animate:
00019B66 43F9 0000 F5FC             		lea	(Ani_obj14).l,a1
00019B6C 4EF9 0000 B790             		jmp	AnimateSprite
00019B72                            ; ===========================================================================
00019B72                            
00019B72                            Obj74_Delete3:				; XREF: Obj74_Index
00019B72 4EF9 0000 E77E             		jmp	DeleteObject
00019B78                            ; ===========================================================================
00019B78                            
00019B78                            Obj7A_Delete:
00019B78 4EF9 0000 E77E             		jmp	DeleteObject
00019B7E                            ; ===========================================================================
00019B7E                            ; ---------------------------------------------------------------------------
00019B7E                            ; Object 7A - Eggman (SLZ)
00019B7E                            ; ---------------------------------------------------------------------------
00019B7E                            
00019B7E                            Obj7A:					; XREF: Obj_Index
00019B7E 7000                       		moveq	#0,d0
00019B80 1028 0024                  		move.b	$24(a0),d0
00019B84 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
00019B88 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
00019B8C                            ; ===========================================================================
00019B8C 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
00019B8E 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
00019B90 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
00019B92 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
00019B94 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
00019B96                            
00019B96 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
00019B99 0401 04                    		dc.b 4,	1, 4
00019B9C 0607 04                    		dc.b 6,	7, 4
00019B9F 0800 03                    		dc.b 8,	0, 3
00019BA2                            ; ===========================================================================
00019BA2                            
00019BA2                            Obj7A_Main:				; XREF: Obj7A_Index
00019BA2 317C 2188 0008             		move.w	#$2188,8(a0)
00019BA8 317C 0228 000C             		move.w	#$228,$C(a0)
00019BAE 3168 0008 0030             		move.w	8(a0),$30(a0)
00019BB4 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019BBA 117C 000F 0020             		move.b	#$F,$20(a0)
00019BC0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019BC6 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00019BCA 2248                       		movea.l	a0,a1
00019BCC 7203                       		moveq	#3,d1
00019BCE 6000                       		bra.s	Obj7A_LoadBoss
00019BD0                            ; ===========================================================================
00019BD0                            
00019BD0                            Obj7A_Loop:
00019BD0 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00019BD6 6600                       		bne.s	loc_1895C
00019BD8 12BC 007A                  		move.b	#$7A,0(a1)
00019BDC 3368 0008 0008             		move.w	8(a0),8(a1)
00019BE2 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019BE8                            
00019BE8                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
00019BE8 08A8 0000 0022             		bclr	#0,$22(a0)
00019BEE 4229 0025                  		clr.b	$25(a1)
00019BF2 135A 0024                  		move.b	(a2)+,$24(a1)
00019BF6 135A 001C                  		move.b	(a2)+,$1C(a1)
00019BFA 135A 0018                  		move.b	(a2)+,$18(a1)
00019BFE 237C 0001 9038 0004        		move.l	#Map_Eggman,4(a1)
00019C06 337C 0400 0002             		move.w	#$400,2(a1)
00019C0C 137C 0004 0001             		move.b	#4,1(a1)
00019C12 137C 0020 0019             		move.b	#$20,$19(a1)
00019C18 2348 0034                  		move.l	a0,$34(a1)
00019C1C 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00019C20                            
00019C20                            loc_1895C:
00019C20 43F8 D040                  		lea	($FFFFD040).w,a1
00019C24 45E8 002A                  		lea	$2A(a0),a2
00019C28 705E                       		moveq	#$5E,d0
00019C2A 723E                       		moveq	#$3E,d1
00019C2C                            
00019C2C                            loc_18968:
00019C2C B011                       		cmp.b	(a1),d0
00019C2E 6600                       		bne.s	loc_18974
00019C30 4A29 0028                  		tst.b	$28(a1)
00019C34 6700                       		beq.s	loc_18974
00019C36 34C9                       		move.w	a1,(a2)+
00019C38                            
00019C38                            loc_18974:
00019C38 D2FC 0040                  		adda.w	#$40,a1
00019C3C 51C9 FFEE                  		dbf	d1,loc_18968
00019C40                            
00019C40                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00019C40 7000                       		moveq	#0,d0
00019C42 1028 0025                  		move.b	$25(a0),d0
00019C46 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00019C4A 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00019C4E 43F9 0001 8FD4             		lea	(Ani_Eggman).l,a1
00019C54 4EB9 0000 B790             		jsr	AnimateSprite
00019C5A 7003                       		moveq	#3,d0
00019C5C C028 0022                  		and.b	$22(a0),d0
00019C60 0228 00FC 0001             		andi.b	#$FC,1(a0)
00019C66 8128 0001                  		or.b	d0,1(a0)
00019C6A 4EF9 0000 E742             		jmp	DisplaySprite
00019C70                            ; ===========================================================================
00019C70 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
00019C72 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
00019C74 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
00019C76 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
00019C78 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
00019C7A 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
00019C7C                            ; ===========================================================================
00019C7C                            
00019C7C                            loc_189B8:				; XREF: Obj7A_ShipIndex
00019C7C 317C FF00 0010             		move.w	#-$100,$10(a0)
00019C82 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
00019C88 6400                       		bcc.s	loc_189CA
00019C8A 5428 0025                  		addq.b	#2,$25(a0)
00019C8E                            
00019C8E                            loc_189CA:
00019C8E 6100 EF02                  		bsr.w	BossMove
00019C92 1028 003F                  		move.b	$3F(a0),d0
00019C96 5428 003F                  		addq.b	#2,$3F(a0)
00019C9A 4EB9 0000 3416             		jsr	(CalcSine).l
00019CA0 EC40                       		asr.w	#6,d0
00019CA2 D068 0038                  		add.w	$38(a0),d0
00019CA6 3140 000C                  		move.w	d0,$C(a0)
00019CAA 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CB0 6000                       		bra.s	loc_189FE
00019CB2                            ; ===========================================================================
00019CB2                            
00019CB2                            loc_189EE:
00019CB2 6100 EEDE                  		bsr.w	BossMove
00019CB6 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019CBC 3168 0030 0008             		move.w	$30(a0),8(a0)
00019CC2                            
00019CC2                            loc_189FE:
00019CC2 0C28 0006 0025             		cmpi.b	#6,$25(a0)
00019CC8 6400                       		bcc.s	locret_18A44
00019CCA 4A28 0022                  		tst.b	$22(a0)
00019CCE 6B00                       		bmi.s	loc_18A46
00019CD0 4A28 0020                  		tst.b	$20(a0)
00019CD4 6600                       		bne.s	locret_18A44
00019CD6 4A28 003E                  		tst.b	$3E(a0)
00019CDA 6600                       		bne.s	loc_18A28
00019CDC 117C 0020 003E             		move.b	#$20,$3E(a0)
00019CE2 303C 00AC                  		move.w	#$AC,d0
00019CE6 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019CEC                            
00019CEC                            loc_18A28:
00019CEC 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019CF0 7000                       		moveq	#0,d0
00019CF2 4A51                       		tst.w	(a1)
00019CF4 6600                       		bne.s	loc_18A36
00019CF6 303C 0EEE                  		move.w	#$EEE,d0
00019CFA                            
00019CFA                            loc_18A36:
00019CFA 3280                       		move.w	d0,(a1)
00019CFC 5328 003E                  		subq.b	#1,$3E(a0)
00019D00 6600                       		bne.s	locret_18A44
00019D02 117C 000F 0020             		move.b	#$F,$20(a0)
00019D08                            
00019D08                            locret_18A44:
00019D08 4E75                       		rts	
00019D0A                            ; ===========================================================================
00019D0A                            
00019D0A                            loc_18A46:
00019D0A 7064                       		moveq	#100,d0
00019D0C 6100 0000                  		bsr.w	AddPoints
00019D10 117C 0006 0025             		move.b	#6,$25(a0)
00019D16 117C 0078 003C             		move.b	#$78,$3C(a0)
00019D1C 4268 0010                  		clr.w	$10(a0)
00019D20 4E75                       		rts	
00019D22                            ; ===========================================================================
00019D22                            
00019D22                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00019D22 3028 0030                  		move.w	$30(a0),d0
00019D26 317C 0200 0010             		move.w	#$200,$10(a0)
00019D2C 0828 0000 0022             		btst	#0,$22(a0)
00019D32 6600                       		bne.s	loc_18A7C
00019D34 4468 0010                  		neg.w	$10(a0)
00019D38 0C40 2008                  		cmpi.w	#$2008,d0
00019D3C 6E00                       		bgt.s	loc_18A88
00019D3E 6000                       		bra.s	loc_18A82
00019D40                            ; ===========================================================================
00019D40                            
00019D40                            loc_18A7C:
00019D40 0C40 2138                  		cmpi.w	#$2138,d0
00019D44 6D00                       		blt.s	loc_18A88
00019D46                            
00019D46                            loc_18A82:
00019D46 0868 0000 0022             		bchg	#0,$22(a0)
00019D4C                            
00019D4C                            loc_18A88:
00019D4C 3028 0008                  		move.w	8(a0),d0
00019D50 72FF                       		moveq	#-1,d1
00019D52 7402                       		moveq	#2,d2
00019D54 45E8 002A                  		lea	$2A(a0),a2
00019D58 7828                       		moveq	#$28,d4
00019D5A 4A68 0010                  		tst.w	$10(a0)
00019D5E 6A00                       		bpl.s	loc_18A9E
00019D60 4444                       		neg.w	d4
00019D62                            
00019D62                            loc_18A9E:
00019D62 321A                       		move.w	(a2)+,d1
00019D64 2641                       		movea.l	d1,a3
00019D66 082B 0003 0022             		btst	#3,$22(a3)
00019D6C 6600                       		bne.s	loc_18AB4
00019D6E 362B 0008                  		move.w	8(a3),d3
00019D72 D644                       		add.w	d4,d3
00019D74 9640                       		sub.w	d0,d3
00019D76 6700                       		beq.s	loc_18AC0
00019D78                            
00019D78                            loc_18AB4:
00019D78 51CA FFE8                  		dbf	d2,loc_18A9E
00019D7C                            
00019D7C 1142 0028                  		move.b	d2,$28(a0)
00019D80 6000 FF0C                  		bra.w	loc_189CA
00019D84                            ; ===========================================================================
00019D84                            
00019D84                            loc_18AC0:
00019D84 1142 0028                  		move.b	d2,$28(a0)
00019D88 5428 0025                  		addq.b	#2,$25(a0)
00019D8C 117C 0028 003C             		move.b	#$28,$3C(a0)
00019D92 6000 FEFA                  		bra.w	loc_189CA
00019D96                            ; ===========================================================================
00019D96                            
00019D96                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
00019D96 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
00019D9C 6600                       		bne.s	loc_18B36
00019D9E 70FF                       		moveq	#-1,d0
00019DA0 1028 0028                  		move.b	$28(a0),d0
00019DA4 4880                       		ext.w	d0
00019DA6 6B00                       		bmi.s	loc_18B40
00019DA8 5540                       		subq.w	#2,d0
00019DAA 4440                       		neg.w	d0
00019DAC D040                       		add.w	d0,d0
00019DAE 43E8 002A                  		lea	$2A(a0),a1
00019DB2 3031 0000                  		move.w	(a1,d0.w),d0
00019DB6 2440                       		movea.l	d0,a2
00019DB8 43F8 D040                  		lea	($FFFFD040).w,a1
00019DBC 723E                       		moveq	#$3E,d1
00019DBE                            
00019DBE                            loc_18AFA:
00019DBE B0A9 003C                  		cmp.l	$3C(a1),d0
00019DC2 6700                       		beq.s	loc_18B40
00019DC4 D2FC 0040                  		adda.w	#$40,a1
00019DC8 51C9 FFF4                  		dbf	d1,loc_18AFA
00019DCC                            
00019DCC 2F08                       		move.l	a0,-(sp)
00019DCE 41D2                       		lea	(a2),a0
00019DD0 4EB9 0000 EBDE             		jsr	SingleObjLoad2
00019DD6 205F                       		movea.l	(sp)+,a0
00019DD8 6600                       		bne.s	loc_18B40
00019DDA 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00019DDE 3368 0008 0008             		move.w	8(a0),8(a1)
00019DE4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019DEA 0669 0020 000C             		addi.w	#$20,$C(a1)
00019DF0 136A 0022 0022             		move.b	$22(a2),$22(a1)
00019DF6 234A 003C                  		move.l	a2,$3C(a1)
00019DFA                            
00019DFA                            loc_18B36:
00019DFA 5328 003C                  		subq.b	#1,$3C(a0)
00019DFE 6700                       		beq.s	loc_18B40
00019E00 6000 FEC0                  		bra.w	loc_189FE
00019E04                            ; ===========================================================================
00019E04                            
00019E04                            loc_18B40:
00019E04 5528 0025                  		subq.b	#2,$25(a0)
00019E08 6000 FE84                  		bra.w	loc_189CA
00019E0C                            ; ===========================================================================
00019E0C                            
00019E0C                            loc_18B48:				; XREF: Obj7A_ShipIndex
00019E0C 5328 003C                  		subq.b	#1,$3C(a0)
00019E10 6B00                       		bmi.s	loc_18B52
00019E12 6000 ED3C                  		bra.w	BossDefeated
00019E16                            ; ===========================================================================
00019E16                            
00019E16                            loc_18B52:
00019E16 5428 0025                  		addq.b	#2,$25(a0)
00019E1A 4268 0012                  		clr.w	$12(a0)
00019E1E 08E8 0000 0022             		bset	#0,$22(a0)
00019E24 08A8 0007 0022             		bclr	#7,$22(a0)
00019E2A 4268 0010                  		clr.w	$10(a0)
00019E2E 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00019E34 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00019E38 6600                       		bne.s	loc_18B7C
00019E3A 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00019E40                            
00019E40                            loc_18B7C:
00019E40 6000 FE80                  		bra.w	loc_189FE
00019E44                            ; ===========================================================================
00019E44                            
00019E44                            loc_18B80:				; XREF: Obj7A_ShipIndex
00019E44 5228 003C                  		addq.b	#1,$3C(a0)
00019E48 6700                       		beq.s	loc_18B90
00019E4A 6A00                       		bpl.s	loc_18B96
00019E4C 0668 0018 0012             		addi.w	#$18,$12(a0)
00019E52 6000                       		bra.s	loc_18BC2
00019E54                            ; ===========================================================================
00019E54                            
00019E54                            loc_18B90:
00019E54 4268 0012                  		clr.w	$12(a0)
00019E58 6000                       		bra.s	loc_18BC2
00019E5A                            ; ===========================================================================
00019E5A                            
00019E5A                            loc_18B96:
00019E5A 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00019E60 6500                       		bcs.s	loc_18BAE
00019E62 6700                       		beq.s	loc_18BB4
00019E64 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00019E6A 6500                       		bcs.s	loc_18BC2
00019E6C 5428 0025                  		addq.b	#2,$25(a0)
00019E70 6000                       		bra.s	loc_18BC2
00019E72                            ; ===========================================================================
00019E72                            
00019E72                            loc_18BAE:
00019E72 5168 0012                  		subq.w	#8,$12(a0)
00019E76 6000                       		bra.s	loc_18BC2
00019E78                            ; ===========================================================================
00019E78                            
00019E78                            loc_18BB4:
00019E78 4268 0012                  		clr.w	$12(a0)
00019E7C 303C 0084                  		move.w	#$84,d0
00019E80 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play SLZ music
00019E86                            
00019E86                            loc_18BC2:
00019E86 6000 FE2A                  		bra.w	loc_189EE
00019E8A                            ; ===========================================================================
00019E8A                            
00019E8A                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00019E8A 317C 0400 0010             		move.w	#$400,$10(a0)
00019E90 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019E96 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00019E9C 6400                       		bcc.s	loc_18BE0
00019E9E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019EA2 6000                       		bra.s	loc_18BE8
00019EA4                            ; ===========================================================================
00019EA4                            
00019EA4                            loc_18BE0:
00019EA4 4A28 0001                  		tst.b	1(a0)
00019EA8 6A00 FCCE                  		bpl.w	Obj7A_Delete
00019EAC                            
00019EAC                            loc_18BE8:
00019EAC 6100 ECE4                  		bsr.w	BossMove
00019EB0 6000 FDDC                  		bra.w	loc_189CA
00019EB4                            ; ===========================================================================
00019EB4                            
00019EB4                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00019EB4 7000                       		moveq	#0,d0
00019EB6 7201                       		moveq	#1,d1
00019EB8 2268 0034                  		movea.l	$34(a0),a1
00019EBC 1029 0025                  		move.b	$25(a1),d0
00019EC0 0C00 0006                  		cmpi.b	#6,d0
00019EC4 6B00                       		bmi.s	loc_18C06
00019EC6 720A                       		moveq	#$A,d1
00019EC8 6000                       		bra.s	loc_18C1A
00019ECA                            ; ===========================================================================
00019ECA                            
00019ECA                            loc_18C06:
00019ECA 4A29 0020                  		tst.b	$20(a1)
00019ECE 6600                       		bne.s	loc_18C10
00019ED0 7205                       		moveq	#5,d1
00019ED2 6000                       		bra.s	loc_18C1A
00019ED4                            ; ===========================================================================
00019ED4                            
00019ED4                            loc_18C10:
00019ED4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00019EDA 6500                       		bcs.s	loc_18C1A
00019EDC 7204                       		moveq	#4,d1
00019EDE                            
00019EDE                            loc_18C1A:
00019EDE 1141 001C                  		move.b	d1,$1C(a0)
00019EE2 0C00 000A                  		cmpi.b	#$A,d0
00019EE6 6600                       		bne.s	loc_18C32
00019EE8 117C 0006 001C             		move.b	#6,$1C(a0)
00019EEE 4A28 0001                  		tst.b	1(a0)
00019EF2 6A00 FC84                  		bpl.w	Obj7A_Delete
00019EF6                            
00019EF6                            loc_18C32:
00019EF6 6000                       		bra.s	loc_18C6C
00019EF8                            ; ===========================================================================
00019EF8                            
00019EF8                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00019EF8 117C 0008 001C             		move.b	#8,$1C(a0)
00019EFE 2268 0034                  		movea.l	$34(a0),a1
00019F02 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F08 6600                       		bne.s	loc_18C56
00019F0A 4A28 0001                  		tst.b	1(a0)
00019F0E 6A00 FC68                  		bpl.w	Obj7A_Delete
00019F12 117C 000B 001C             		move.b	#$B,$1C(a0)
00019F18 6000                       		bra.s	loc_18C6C
00019F1A                            ; ===========================================================================
00019F1A                            
00019F1A                            loc_18C56:
00019F1A 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00019F20 6E00                       		bgt.s	loc_18C6C
00019F22 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00019F28 6D00                       		blt.s	loc_18C6C
00019F2A 117C 0007 001C             		move.b	#7,$1C(a0)
00019F30                            
00019F30                            loc_18C6C:
00019F30 43F9 0001 8FD4             		lea	(Ani_Eggman).l,a1
00019F36 4EB9 0000 B790             		jsr	AnimateSprite
00019F3C                            
00019F3C                            loc_18C78:
00019F3C 2268 0034                  		movea.l	$34(a0),a1
00019F40 3169 0008 0008             		move.w	8(a1),8(a0)
00019F46 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019F4C 1169 0022 0022             		move.b	$22(a1),$22(a0)
00019F52 7003                       		moveq	#3,d0
00019F54 C028 0022                  		and.b	$22(a0),d0
00019F58 0228 00FC 0001             		andi.b	#-4,1(a0)
00019F5E 8128 0001                  		or.b	d0,1(a0)
00019F62 4EF9 0000 E742             		jmp	DisplaySprite
00019F68                            ; ===========================================================================
00019F68                            
00019F68                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00019F68 2268 0034                  		movea.l	$34(a0),a1
00019F6C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00019F72 6600                       		bne.s	loc_18CB8
00019F74 4A28 0001                  		tst.b	1(a0)
00019F78 6A00 FBFE                  		bpl.w	Obj7A_Delete
00019F7C                            
00019F7C                            loc_18CB8:
00019F7C 217C 0001 9100 0004        		move.l	#Map_BossItems,4(a0)
00019F84 317C 246C 0002             		move.w	#$246C,2(a0)
00019F8A 117C 0003 001A             		move.b	#3,$1A(a0)
00019F90 60AA                       		bra.s	loc_18C78
00019F92                            ; ===========================================================================
00019F92                            ; ---------------------------------------------------------------------------
00019F92                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00019F92                            ; ---------------------------------------------------------------------------
00019F92                            
00019F92                            Obj7B:					; XREF: Obj_Index
00019F92 7000                       		moveq	#0,d0
00019F94 1028 0024                  		move.b	$24(a0),d0
00019F98 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00019F9C 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00019FA0 3028 0030                  		move.w	$30(a0),d0
00019FA4 0240 FF80                  		andi.w	#$FF80,d0
00019FA8 3238 F700                  		move.w	($FFFFF700).w,d1
00019FAC 0441 0080                  		subi.w	#$80,d1
00019FB0 0241 FF80                  		andi.w	#$FF80,d1
00019FB4 9041                       		sub.w	d1,d0
00019FB6 6B00 FBC0                  		bmi.w	Obj7A_Delete
00019FBA 0C40 0280                  		cmpi.w	#$280,d0
00019FBE 6200 FBB8                  		bhi.w	Obj7A_Delete
00019FC2 4EF9 0000 E742             		jmp	DisplaySprite
00019FC8                            ; ===========================================================================
00019FC8 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00019FCA 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00019FCC 0000                       		dc.w loc_18DC6-Obj7B_Index
00019FCE 0000                       		dc.w loc_18EAA-Obj7B_Index
00019FD0 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00019FD2 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00019FD4                            ; ===========================================================================
00019FD4                            
00019FD4                            Obj7B_Main:				; XREF: Obj7B_Index
00019FD4 217C 0001 2B0E 0004        		move.l	#Map_obj5Ea,4(a0)
00019FDC 317C 0518 0002             		move.w	#$518,2(a0)
00019FE2 117C 0001 001A             		move.b	#1,$1A(a0)
00019FE8 0028 0004 0001             		ori.b	#4,1(a0)
00019FEE 117C 0004 0018             		move.b	#4,$18(a0)
00019FF4 117C 008B 0020             		move.b	#$8B,$20(a0)
00019FFA 117C 000C 0019             		move.b	#$C,$19(a0)
0001A000 2268 003C                  		movea.l	$3C(a0),a1
0001A004 3169 0008 0030             		move.w	8(a1),$30(a0)
0001A00A 3169 000C 0034             		move.w	$C(a1),$34(a0)
0001A010 08E8 0000 0022             		bset	#0,$22(a0)
0001A016 3028 0008                  		move.w	8(a0),d0
0001A01A B069 0008                  		cmp.w	8(a1),d0
0001A01E 6E00                       		bgt.s	loc_18D68
0001A020 08A8 0000 0022             		bclr	#0,$22(a0)
0001A026 117C 0002 003A             		move.b	#2,$3A(a0)
0001A02C                            
0001A02C                            loc_18D68:
0001A02C 5428 0024                  		addq.b	#2,$24(a0)
0001A030                            
0001A030                            Obj7B_Fall:				; XREF: Obj7B_Index
0001A030 4EB9 0000 E6AA             		jsr	ObjectFall
0001A036 2268 003C                  		movea.l	$3C(a0),a1
0001A03A 45F9 0000 0000             		lea	(word_19018).l,a2
0001A040 7000                       		moveq	#0,d0
0001A042 1029 001A                  		move.b	$1A(a1),d0
0001A046 3228 0008                  		move.w	8(a0),d1
0001A04A 9268 0030                  		sub.w	$30(a0),d1
0001A04E 6400                       		bcc.s	loc_18D8E
0001A050 5440                       		addq.w	#2,d0
0001A052                            
0001A052                            loc_18D8E:
0001A052 D040                       		add.w	d0,d0
0001A054 3228 0034                  		move.w	$34(a0),d1
0001A058 D272 0000                  		add.w	(a2,d0.w),d1
0001A05C B268 000C                  		cmp.w	$C(a0),d1
0001A060 6E00                       		bgt.s	locret_18DC4
0001A062 2268 003C                  		movea.l	$3C(a0),a1
0001A066 7202                       		moveq	#2,d1
0001A068 0828 0000 0022             		btst	#0,$22(a0)
0001A06E 6700                       		beq.s	loc_18DAE
0001A070 7200                       		moveq	#0,d1
0001A072                            
0001A072                            loc_18DAE:
0001A072 317C 00F0 0028             		move.w	#$F0,$28(a0)
0001A078 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
0001A07E 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A084 6000 0000                  		bra.w	loc_18FA2
0001A088                            ; ===========================================================================
0001A088                            
0001A088                            locret_18DC4:
0001A088 4E75                       		rts	
0001A08A                            ; ===========================================================================
0001A08A                            
0001A08A                            loc_18DC6:				; XREF: Obj7B_Index
0001A08A 2268 003C                  		movea.l	$3C(a0),a1
0001A08E 7000                       		moveq	#0,d0
0001A090 1028 003A                  		move.b	$3A(a0),d0
0001A094 9029 003A                  		sub.b	$3A(a1),d0
0001A098 6700                       		beq.s	loc_18E2A
0001A09A 6400                       		bcc.s	loc_18DDA
0001A09C 4400                       		neg.b	d0
0001A09E                            
0001A09E                            loc_18DDA:
0001A09E 323C F7E8                  		move.w	#-$818,d1
0001A0A2 343C FEEC                  		move.w	#-$114,d2
0001A0A6 0C00 0001                  		cmpi.b	#1,d0
0001A0AA 6700                       		beq.s	loc_18E00
0001A0AC 323C F6A0                  		move.w	#-$960,d1
0001A0B0 343C FF0C                  		move.w	#-$F4,d2
0001A0B4 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
0001A0BA 6D00                       		blt.s	loc_18E00
0001A0BC 323C F5E0                  		move.w	#-$A20,d1
0001A0C0 343C FF80                  		move.w	#-$80,d2
0001A0C4                            
0001A0C4                            loc_18E00:
0001A0C4 3141 0012                  		move.w	d1,$12(a0)
0001A0C8 3142 0010                  		move.w	d2,$10(a0)
0001A0CC 3028 0008                  		move.w	8(a0),d0
0001A0D0 9068 0030                  		sub.w	$30(a0),d0
0001A0D4 6400                       		bcc.s	loc_18E16
0001A0D6 4468 0010                  		neg.w	$10(a0)
0001A0DA                            
0001A0DA                            loc_18E16:
0001A0DA 117C 0001 001A             		move.b	#1,$1A(a0)
0001A0E0 317C 0020 0028             		move.w	#$20,$28(a0)
0001A0E6 5428 0024                  		addq.b	#2,$24(a0)
0001A0EA 6000 0000                  		bra.w	loc_18EAA
0001A0EE                            ; ===========================================================================
0001A0EE                            
0001A0EE                            loc_18E2A:				; XREF: loc_18DC6
0001A0EE 45F9 0000 0000             		lea	(word_19018).l,a2
0001A0F4 7000                       		moveq	#0,d0
0001A0F6 1029 001A                  		move.b	$1A(a1),d0
0001A0FA 343C 0028                  		move.w	#$28,d2
0001A0FE 3228 0008                  		move.w	8(a0),d1
0001A102 9268 0030                  		sub.w	$30(a0),d1
0001A106 6400                       		bcc.s	loc_18E48
0001A108 4442                       		neg.w	d2
0001A10A 5440                       		addq.w	#2,d0
0001A10C                            
0001A10C                            loc_18E48:
0001A10C D040                       		add.w	d0,d0
0001A10E 3228 0034                  		move.w	$34(a0),d1
0001A112 D272 0000                  		add.w	(a2,d0.w),d1
0001A116 3141 000C                  		move.w	d1,$C(a0)
0001A11A D468 0030                  		add.w	$30(a0),d2
0001A11E 3142 0008                  		move.w	d2,8(a0)
0001A122 4268 000E                  		clr.w	$E(a0)
0001A126 4268 000A                  		clr.w	$A(a0)
0001A12A 5368 0028                  		subq.w	#1,$28(a0)
0001A12E 6600                       		bne.s	loc_18E7A
0001A130 317C 0020 0028             		move.w	#$20,$28(a0)
0001A136 117C 0008 0024             		move.b	#8,$24(a0)
0001A13C 4E75                       		rts	
0001A13E                            ; ===========================================================================
0001A13E                            
0001A13E                            loc_18E7A:
0001A13E 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
0001A144 6600                       		bne.s	loc_18E88
0001A146 117C 0005 001F             		move.b	#5,$1F(a0)
0001A14C                            
0001A14C                            loc_18E88:
0001A14C 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
0001A152 6600                       		bne.s	loc_18E96
0001A154 117C 0002 001F             		move.b	#2,$1F(a0)
0001A15A                            
0001A15A                            loc_18E96:
0001A15A 5328 001E                  		subq.b	#1,$1E(a0)
0001A15E 6E00                       		bgt.s	locret_18EA8
0001A160 0868 0000 001A             		bchg	#0,$1A(a0)
0001A166 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
0001A16C                            
0001A16C                            locret_18EA8:
0001A16C 4E75                       		rts	
0001A16E                            ; ===========================================================================
0001A16E                            
0001A16E                            loc_18EAA:				; XREF: Obj7B_Index
0001A16E 43F8 D040                  		lea	($FFFFD040).w,a1
0001A172 707A                       		moveq	#$7A,d0
0001A174 7240                       		moveq	#$40,d1
0001A176 743E                       		moveq	#$3E,d2
0001A178                            
0001A178                            loc_18EB4:
0001A178 B011                       		cmp.b	(a1),d0
0001A17A 6700                       		beq.s	loc_18EC0
0001A17C D2C1                       		adda.w	d1,a1
0001A17E 51CA FFF8                  		dbf	d2,loc_18EB4
0001A182                            
0001A182 6000                       		bra.s	loc_18F38
0001A184                            ; ===========================================================================
0001A184                            
0001A184                            loc_18EC0:
0001A184 3029 0008                  		move.w	8(a1),d0
0001A188 3229 000C                  		move.w	$C(a1),d1
0001A18C 3428 0008                  		move.w	8(a0),d2
0001A190 3628 000C                  		move.w	$C(a0),d3
0001A194 45FA 0000                  		lea	byte_19022(pc),a2
0001A198 47FA 0000                  		lea	byte_19026(pc),a3
0001A19C 181A                       		move.b	(a2)+,d4
0001A19E 4884                       		ext.w	d4
0001A1A0 D044                       		add.w	d4,d0
0001A1A2 181B                       		move.b	(a3)+,d4
0001A1A4 4884                       		ext.w	d4
0001A1A6 D444                       		add.w	d4,d2
0001A1A8 B440                       		cmp.w	d0,d2
0001A1AA 6500                       		bcs.s	loc_18F38
0001A1AC 181A                       		move.b	(a2)+,d4
0001A1AE 4884                       		ext.w	d4
0001A1B0 D044                       		add.w	d4,d0
0001A1B2 181B                       		move.b	(a3)+,d4
0001A1B4 4884                       		ext.w	d4
0001A1B6 D444                       		add.w	d4,d2
0001A1B8 B042                       		cmp.w	d2,d0
0001A1BA 6500                       		bcs.s	loc_18F38
0001A1BC 181A                       		move.b	(a2)+,d4
0001A1BE 4884                       		ext.w	d4
0001A1C0 D244                       		add.w	d4,d1
0001A1C2 181B                       		move.b	(a3)+,d4
0001A1C4 4884                       		ext.w	d4
0001A1C6 D644                       		add.w	d4,d3
0001A1C8 B641                       		cmp.w	d1,d3
0001A1CA 6500                       		bcs.s	loc_18F38
0001A1CC 181A                       		move.b	(a2)+,d4
0001A1CE 4884                       		ext.w	d4
0001A1D0 D244                       		add.w	d4,d1
0001A1D2 181B                       		move.b	(a3)+,d4
0001A1D4 4884                       		ext.w	d4
0001A1D6 D644                       		add.w	d4,d3
0001A1D8 B243                       		cmp.w	d3,d1
0001A1DA 6500                       		bcs.s	loc_18F38
0001A1DC 5428 0024                  		addq.b	#2,$24(a0)
0001A1E0 4268 0028                  		clr.w	$28(a0)
0001A1E4 4229 0020                  		clr.b	$20(a1)
0001A1E8 5329 0021                  		subq.b	#1,$21(a1)
0001A1EC 6600                       		bne.s	loc_18F38
0001A1EE 08E9 0007 0022             		bset	#7,$22(a1)
0001A1F4 4268 0010                  		clr.w	$10(a0)
0001A1F8 4268 0012                  		clr.w	$12(a0)
0001A1FC                            
0001A1FC                            loc_18F38:
0001A1FC 4A68 0012                  		tst.w	$12(a0)
0001A200 6A00                       		bpl.s	loc_18F5C
0001A202 4EB9 0000 E6AA             		jsr	ObjectFall
0001A208 3028 0034                  		move.w	$34(a0),d0
0001A20C 0440 002F                  		subi.w	#$2F,d0
0001A210 B068 000C                  		cmp.w	$C(a0),d0
0001A214 6E00                       		bgt.s	loc_18F58
0001A216 4EB9 0000 E6AA             		jsr	ObjectFall
0001A21C                            
0001A21C                            loc_18F58:
0001A21C 6000 FF20                  		bra.w	loc_18E7A
0001A220                            ; ===========================================================================
0001A220                            
0001A220                            loc_18F5C:
0001A220 4EB9 0000 E6AA             		jsr	ObjectFall
0001A226 2268 003C                  		movea.l	$3C(a0),a1
0001A22A 45F9 0000 0000             		lea	(word_19018).l,a2
0001A230 7000                       		moveq	#0,d0
0001A232 1029 001A                  		move.b	$1A(a1),d0
0001A236 3228 0008                  		move.w	8(a0),d1
0001A23A 9268 0030                  		sub.w	$30(a0),d1
0001A23E 6400                       		bcc.s	loc_18F7E
0001A240 5440                       		addq.w	#2,d0
0001A242                            
0001A242                            loc_18F7E:
0001A242 D040                       		add.w	d0,d0
0001A244 3228 0034                  		move.w	$34(a0),d1
0001A248 D272 0000                  		add.w	(a2,d0.w),d1
0001A24C B268 000C                  		cmp.w	$C(a0),d1
0001A250 6ECA                       		bgt.s	loc_18F58
0001A252 2268 003C                  		movea.l	$3C(a0),a1
0001A256 7202                       		moveq	#2,d1
0001A258 4A68 0010                  		tst.w	$10(a0)
0001A25C 6B00                       		bmi.s	loc_18F9C
0001A25E 7200                       		moveq	#0,d1
0001A260                            
0001A260                            loc_18F9C:
0001A260 317C 0000 0028             		move.w	#0,$28(a0)
0001A266                            
0001A266                            loc_18FA2:
0001A266 1341 003A                  		move.b	d1,$3A(a1)
0001A26A 1141 003A                  		move.b	d1,$3A(a0)
0001A26E B229 001A                  		cmp.b	$1A(a1),d1
0001A272 6700                       		beq.s	loc_19008
0001A274 08A9 0003 0022             		bclr	#3,$22(a1)
0001A27A 6700                       		beq.s	loc_19008
0001A27C 4229 0025                  		clr.b	$25(a1)
0001A280 137C 0002 0024             		move.b	#2,$24(a1)
0001A286 45F8 D000                  		lea	($FFFFD000).w,a2
0001A28A 3568 0012 0012             		move.w	$12(a0),$12(a2)
0001A290 446A 0012                  		neg.w	$12(a2)
0001A294 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0001A29A 6600                       		bne.s	loc_18FDC
0001A29C E0EA 0012                  		asr	$12(a2)
0001A2A0                            
0001A2A0                            loc_18FDC:
0001A2A0 08EA 0001 0022             		bset	#1,$22(a2)
0001A2A6 08AA 0003 0022             		bclr	#3,$22(a2)
0001A2AC 422A 003C                  		clr.b	$3C(a2)
0001A2B0 2F08                       		move.l	a0,-(sp)
0001A2B2 41D2                       		lea	(a2),a0
0001A2B4 4EBA A2E0                  		jsr	Obj01_ChkRoll
0001A2B8 205F                       		movea.l	(sp)+,a0
0001A2BA 157C 0002 0024             		move.b	#2,$24(a2)
0001A2C0 303C 00CC                  		move.w	#$CC,d0
0001A2C4 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play "spring" sound
0001A2CA                            
0001A2CA                            loc_19008:
0001A2CA 4268 0010                  		clr.w	$10(a0)
0001A2CE 4268 0012                  		clr.w	$12(a0)
0001A2D2 5428 0024                  		addq.b	#2,$24(a0)
0001A2D6 6000 FE66                  		bra.w	loc_18E7A
0001A2DA                            ; ===========================================================================
0001A2DA FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
0001A2E4                            		even
0001A2E4 E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
0001A2E8                            		even
0001A2E8 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
0001A2EC                            		even
0001A2EC                            ; ===========================================================================
0001A2EC                            
0001A2EC                            Obj7B_Explode:				; XREF: Obj7B_Index
0001A2EC 10BC 003F                  		move.b	#$3F,(a0)
0001A2F0 4228 0024                  		clr.b	$24(a0)
0001A2F4 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
0001A2FA 6700                       		beq.s	Obj7B_MakeFrag
0001A2FC 4E75                       		rts	
0001A2FE                            ; ===========================================================================
0001A2FE                            
0001A2FE                            Obj7B_MakeFrag:
0001A2FE 3168 0034 000C             		move.w	$34(a0),$C(a0)
0001A304 7203                       		moveq	#3,d1
0001A306 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
0001A30A                            
0001A30A                            Obj7B_Loop:
0001A30A 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001A310 6600                       		bne.s	loc_1909A
0001A312 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
0001A316 137C 000A 0024             		move.b	#$A,$24(a1)
0001A31C 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
0001A324 137C 0003 0018             		move.b	#3,$18(a1)
0001A32A 337C 0518 0002             		move.w	#$518,2(a1)
0001A330 3368 0008 0008             		move.w	8(a0),8(a1)
0001A336 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A33C 335A 0010                  		move.w	(a2)+,$10(a1)
0001A340 335A 0012                  		move.w	(a2)+,$12(a1)
0001A344 137C 0098 0020             		move.b	#$98,$20(a1)
0001A34A 0029 0004 0001             		ori.b	#4,1(a1)
0001A350 08E9 0007 0001             		bset	#7,1(a1)
0001A356 137C 000C 0019             		move.b	#$C,$19(a1)
0001A35C                            
0001A35C                            loc_1909A:
0001A35C 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
0001A360                            
0001A360 4E75                       		rts	
0001A362                            ; ===========================================================================
0001A362 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
0001A366 FF60 FDC0                  		dc.w $FF60, $FDC0
0001A36A 0100 FCC0                  		dc.w $100, $FCC0
0001A36E 00A0 FDC0                  		dc.w $A0, $FDC0
0001A372                            ; ===========================================================================
0001A372                            
0001A372                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
0001A372 4EB9 0000 E71C             		jsr	SpeedToPos
0001A378 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A37E 3168 000C 0034             		move.w	$C(a0),$34(a0)
0001A384 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A38A 7004                       		moveq	#4,d0
0001A38C C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001A390 E448                       		lsr.w	#2,d0
0001A392 1140 001A                  		move.b	d0,$1A(a0)
0001A396 4A28 0001                  		tst.b	1(a0)
0001A39A 6A00 F7DC                  		bpl.w	Obj7A_Delete
0001A39E 4E75                       		rts	
0001A3A0                            ; ===========================================================================
0001A3A0                            ; ---------------------------------------------------------------------------
0001A3A0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001A3A0                            ; ---------------------------------------------------------------------------
0001A3A0                            Map_obj7B:
0001A3A0                            	include "_maps\obj7B.asm"
0001A3A0                            ; ---------------------------------------------------------------------------
0001A3A0                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
0001A3A0                            ; ---------------------------------------------------------------------------
0001A3A0 0000                       		dc.w byte_190E2-Map_obj7B
0001A3A2 0000                       		dc.w byte_190E8-Map_obj7B
0001A3A4 01                         byte_190E2:	dc.b 1
0001A3A5 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
0001A3AA 01                         byte_190E8:	dc.b 1
0001A3AB FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
0001A3B0                            		even
0001A3B0                            		even
0001A3B0                            
0001A3B0                            ; ===========================================================================
0001A3B0                            ; ---------------------------------------------------------------------------
0001A3B0                            ; Object 75 - Eggman (SYZ)
0001A3B0                            ; ---------------------------------------------------------------------------
0001A3B0                            
0001A3B0                            Obj75:					; XREF: Obj_Index
0001A3B0 7000                       		moveq	#0,d0
0001A3B2 1028 0024                  		move.b	$24(a0),d0
0001A3B6 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
0001A3BA 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
0001A3BE                            ; ===========================================================================
0001A3BE 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
0001A3C0 0000                       		dc.w Obj75_ShipMain-Obj75_Index
0001A3C2 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001A3C4 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001A3C6 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001A3C8                            
0001A3C8 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
0001A3CB 0401 05                    		dc.b 4,	1, 5
0001A3CE 0607 05                    		dc.b 6,	7, 5
0001A3D1 0800 05                    		dc.b 8,	0, 5
0001A3D4                            ; ===========================================================================
0001A3D4                            
0001A3D4                            Obj75_Main:				; XREF: Obj75_Index
0001A3D4 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
0001A3DA 317C 04DA 000C             		move.w	#$4DA,$C(a0)
0001A3E0 3168 0008 0030             		move.w	8(a0),$30(a0)
0001A3E6 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001A3EC 117C 000F 0020             		move.b	#$F,$20(a0)
0001A3F2 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001A3F8 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
0001A3FC 2248                       		movea.l	a0,a1
0001A3FE 7203                       		moveq	#3,d1
0001A400 6000                       		bra.s	Obj75_LoadBoss
0001A402                            ; ===========================================================================
0001A402                            
0001A402                            Obj75_Loop:
0001A402 4EB9 0000 EBDE             		jsr	SingleObjLoad2
0001A408 6600                       		bne.s	Obj75_ShipMain
0001A40A 12BC 0075                  		move.b	#$75,(a1)
0001A40E 3368 0008 0008             		move.w	8(a0),8(a1)
0001A414 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001A41A                            
0001A41A                            Obj75_LoadBoss:				; XREF: Obj75_Main
0001A41A 08A8 0000 0022             		bclr	#0,$22(a0)
0001A420 4229 0025                  		clr.b	$25(a1)
0001A424 135A 0024                  		move.b	(a2)+,$24(a1)
0001A428 135A 001C                  		move.b	(a2)+,$1C(a1)
0001A42C 135A 0018                  		move.b	(a2)+,$18(a1)
0001A430 237C 0001 9038 0004        		move.l	#Map_Eggman,4(a1)
0001A438 337C 0400 0002             		move.w	#$400,2(a1)
0001A43E 137C 0004 0001             		move.b	#4,1(a1)
0001A444 137C 0020 0019             		move.b	#$20,$19(a1)
0001A44A 2348 0034                  		move.l	a0,$34(a1)
0001A44E 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
0001A452                            
0001A452                            Obj75_ShipMain:				; XREF: Obj75_Index
0001A452 7000                       		moveq	#0,d0
0001A454 1028 0025                  		move.b	$25(a0),d0
0001A458 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
0001A45C 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
0001A460 43F9 0001 8FD4             		lea	(Ani_Eggman).l,a1
0001A466 4EB9 0000 B790             		jsr	AnimateSprite
0001A46C 7003                       		moveq	#3,d0
0001A46E C028 0022                  		and.b	$22(a0),d0
0001A472 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A478 8128 0001                  		or.b	d0,1(a0)
0001A47C 4EF9 0000 E742             		jmp	DisplaySprite
0001A482                            ; ===========================================================================
0001A482 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
0001A486 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
0001A48A 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
0001A48E                            ; ===========================================================================
0001A48E                            
0001A48E                            loc_191CC:				; XREF: Obj75_ShipIndex
0001A48E 317C FF00 0010             		move.w	#-$100,$10(a0)
0001A494 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
0001A49A 6400                       		bcc.s	loc_191DE
0001A49C 5428 0025                  		addq.b	#2,$25(a0)
0001A4A0                            
0001A4A0                            loc_191DE:
0001A4A0 1028 003F                  		move.b	$3F(a0),d0
0001A4A4 5428 003F                  		addq.b	#2,$3F(a0)
0001A4A8 4EB9 0000 3416             		jsr	(CalcSine).l
0001A4AE E440                       		asr.w	#2,d0
0001A4B0 3140 0012                  		move.w	d0,$12(a0)
0001A4B4                            
0001A4B4                            loc_191F2:
0001A4B4 6100 E6DC                  		bsr.w	BossMove
0001A4B8 3168 0038 000C             		move.w	$38(a0),$C(a0)
0001A4BE 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A4C4                            
0001A4C4                            loc_19202:
0001A4C4 3028 0008                  		move.w	8(a0),d0
0001A4C8 0440 2C00                  		subi.w	#$2C00,d0
0001A4CC EA48                       		lsr.w	#5,d0
0001A4CE 1140 0034                  		move.b	d0,$34(a0)
0001A4D2 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001A4D8 6400                       		bcc.s	locret_19256
0001A4DA 4A28 0022                  		tst.b	$22(a0)
0001A4DE 6B00                       		bmi.s	loc_19258
0001A4E0 4A28 0020                  		tst.b	$20(a0)
0001A4E4 6600                       		bne.s	locret_19256
0001A4E6 4A28 003E                  		tst.b	$3E(a0)
0001A4EA 6600                       		bne.s	loc_1923A
0001A4EC 117C 0020 003E             		move.b	#$20,$3E(a0)
0001A4F2 303C 00AC                  		move.w	#$AC,d0
0001A4F6 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A4FC                            
0001A4FC                            loc_1923A:
0001A4FC 43F8 FB22                  		lea	($FFFFFB22).w,a1
0001A500 7000                       		moveq	#0,d0
0001A502 4A51                       		tst.w	(a1)
0001A504 6600                       		bne.s	loc_19248
0001A506 303C 0EEE                  		move.w	#$EEE,d0
0001A50A                            
0001A50A                            loc_19248:
0001A50A 3280                       		move.w	d0,(a1)
0001A50C 5328 003E                  		subq.b	#1,$3E(a0)
0001A510 6600                       		bne.s	locret_19256
0001A512 117C 000F 0020             		move.b	#$F,$20(a0)
0001A518                            
0001A518                            locret_19256:
0001A518 4E75                       		rts	
0001A51A                            ; ===========================================================================
0001A51A                            
0001A51A                            loc_19258:				; XREF: loc_19202
0001A51A 7064                       		moveq	#100,d0
0001A51C 6100 0000                  		bsr.w	AddPoints
0001A520 117C 0006 0025             		move.b	#6,$25(a0)
0001A526 317C 00B4 003C             		move.w	#$B4,$3C(a0)
0001A52C 4268 0010                  		clr.w	$10(a0)
0001A530 4E75                       		rts	
0001A532                            ; ===========================================================================
0001A532                            
0001A532                            loc_19270:				; XREF: Obj75_ShipIndex
0001A532 3028 0030                  		move.w	$30(a0),d0
0001A536 317C 0140 0010             		move.w	#$140,$10(a0)
0001A53C 0828 0000 0022             		btst	#0,$22(a0)
0001A542 6600                       		bne.s	loc_1928E
0001A544 4468 0010                  		neg.w	$10(a0)
0001A548 0C40 2C08                  		cmpi.w	#$2C08,d0
0001A54C 6E00                       		bgt.s	loc_1929E
0001A54E 6000                       		bra.s	loc_19294
0001A550                            ; ===========================================================================
0001A550                            
0001A550                            loc_1928E:
0001A550 0C40 2D38                  		cmpi.w	#$2D38,d0
0001A554 6D00                       		blt.s	loc_1929E
0001A556                            
0001A556                            loc_19294:
0001A556 0868 0000 0022             		bchg	#0,$22(a0)
0001A55C 4228 003D                  		clr.b	$3D(a0)
0001A560                            
0001A560                            loc_1929E:
0001A560 0440 2C10                  		subi.w	#$2C10,d0
0001A564 0240 001F                  		andi.w	#$1F,d0
0001A568 0440 001F                  		subi.w	#$1F,d0
0001A56C 6A00                       		bpl.s	loc_192AE
0001A56E 4440                       		neg.w	d0
0001A570                            
0001A570                            loc_192AE:
0001A570 5340                       		subq.w	#1,d0
0001A572 6E00                       		bgt.s	loc_192E8
0001A574 4A28 003D                  		tst.b	$3D(a0)
0001A578 6600                       		bne.s	loc_192E8
0001A57A 3238 D008                  		move.w	($FFFFD008).w,d1
0001A57E 0441 2C00                  		subi.w	#$2C00,d1
0001A582 EA41                       		asr.w	#5,d1
0001A584 B228 0034                  		cmp.b	$34(a0),d1
0001A588 6600                       		bne.s	loc_192E8
0001A58A 7000                       		moveq	#0,d0
0001A58C 1028 0034                  		move.b	$34(a0),d0
0001A590 EB40                       		asl.w	#5,d0
0001A592 0640 2C10                  		addi.w	#$2C10,d0
0001A596 3140 0030                  		move.w	d0,$30(a0)
0001A59A 6100 0000                  		bsr.w	Obj75_FindBlocks
0001A59E 5428 0025                  		addq.b	#2,$25(a0)
0001A5A2 4268 0028                  		clr.w	$28(a0)
0001A5A6 4268 0010                  		clr.w	$10(a0)
0001A5AA                            
0001A5AA                            loc_192E8:
0001A5AA 6000 FEF4                  		bra.w	loc_191DE
0001A5AE                            ; ===========================================================================
0001A5AE                            
0001A5AE                            loc_192EC:				; XREF: Obj75_ShipIndex
0001A5AE 7000                       		moveq	#0,d0
0001A5B0 1028 0028                  		move.b	$28(a0),d0
0001A5B4 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
0001A5B8 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
0001A5BC                            ; ===========================================================================
0001A5BC 0000                       off_192FA:	dc.w loc_19302-off_192FA
0001A5BE 0000                       		dc.w loc_19348-off_192FA
0001A5C0 0000                       		dc.w loc_1938E-off_192FA
0001A5C2 0000                       		dc.w loc_193D0-off_192FA
0001A5C4                            ; ===========================================================================
0001A5C4                            
0001A5C4                            loc_19302:				; XREF: off_192FA
0001A5C4 317C 0180 0012             		move.w	#$180,$12(a0)
0001A5CA 3028 0038                  		move.w	$38(a0),d0
0001A5CE 0C40 0556                  		cmpi.w	#$556,d0
0001A5D2 6500                       		bcs.s	loc_19344
0001A5D4 317C 0556 0038             		move.w	#$556,$38(a0)
0001A5DA 4268 003C                  		clr.w	$3C(a0)
0001A5DE 70FF                       		moveq	#-1,d0
0001A5E0 3028 0036                  		move.w	$36(a0),d0
0001A5E4 6700                       		beq.s	loc_1933C
0001A5E6 2240                       		movea.l	d0,a1
0001A5E8 137C 00FF 0029             		move.b	#-1,$29(a1)
0001A5EE 117C 00FF 0029             		move.b	#-1,$29(a0)
0001A5F4 2348 0034                  		move.l	a0,$34(a1)
0001A5F8 317C 0032 003C             		move.w	#$32,$3C(a0)
0001A5FE                            
0001A5FE                            loc_1933C:
0001A5FE 4268 0012                  		clr.w	$12(a0)
0001A602 5428 0028                  		addq.b	#2,$28(a0)
0001A606                            
0001A606                            loc_19344:
0001A606 6000 FEAC                  		bra.w	loc_191F2
0001A60A                            ; ===========================================================================
0001A60A                            
0001A60A                            loc_19348:				; XREF: off_192FA
0001A60A 5368 003C                  		subq.w	#1,$3C(a0)
0001A60E 6A00                       		bpl.s	loc_19366
0001A610 5428 0028                  		addq.b	#2,$28(a0)
0001A614 317C F800 0012             		move.w	#-$800,$12(a0)
0001A61A 4A68 0036                  		tst.w	$36(a0)
0001A61E 6600                       		bne.s	loc_19362
0001A620 E0E8 0012                  		asr	$12(a0)
0001A624                            
0001A624                            loc_19362:
0001A624 7000                       		moveq	#0,d0
0001A626 6000                       		bra.s	loc_1937C
0001A628                            ; ===========================================================================
0001A628                            
0001A628                            loc_19366:
0001A628 7000                       		moveq	#0,d0
0001A62A 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
0001A630 6E00                       		bgt.s	loc_1937C
0001A632 7002                       		moveq	#2,d0
0001A634 0828 0001 003D             		btst	#1,$3D(a0)
0001A63A 6700                       		beq.s	loc_1937C
0001A63C 4440                       		neg.w	d0
0001A63E                            
0001A63E                            loc_1937C:
0001A63E D068 0038                  		add.w	$38(a0),d0
0001A642 3140 000C                  		move.w	d0,$C(a0)
0001A646 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A64C 6000 FE76                  		bra.w	loc_19202
0001A650                            ; ===========================================================================
0001A650                            
0001A650                            loc_1938E:				; XREF: off_192FA
0001A650 303C 04DA                  		move.w	#$4DA,d0
0001A654 4A68 0036                  		tst.w	$36(a0)
0001A658 6700                       		beq.s	loc_1939C
0001A65A 0440 0018                  		subi.w	#$18,d0
0001A65E                            
0001A65E                            loc_1939C:
0001A65E B068 0038                  		cmp.w	$38(a0),d0
0001A662 6D00                       		blt.s	loc_193BE
0001A664 317C 0008 003C             		move.w	#8,$3C(a0)
0001A66A 4A68 0036                  		tst.w	$36(a0)
0001A66E 6700                       		beq.s	loc_193B4
0001A670 317C 002D 003C             		move.w	#$2D,$3C(a0)
0001A676                            
0001A676                            loc_193B4:
0001A676 5428 0028                  		addq.b	#2,$28(a0)
0001A67A 4268 0012                  		clr.w	$12(a0)
0001A67E 6000                       		bra.s	loc_193CC
0001A680                            ; ===========================================================================
0001A680                            
0001A680                            loc_193BE:
0001A680 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
0001A686 6C00                       		bge.s	loc_193CC
0001A688 0668 000C 0012             		addi.w	#$C,$12(a0)
0001A68E                            
0001A68E                            loc_193CC:
0001A68E 6000 FE24                  		bra.w	loc_191F2
0001A692                            ; ===========================================================================
0001A692                            
0001A692                            loc_193D0:				; XREF: off_192FA
0001A692 5368 003C                  		subq.w	#1,$3C(a0)
0001A696 6E00                       		bgt.s	loc_19406
0001A698 6B00                       		bmi.s	loc_193EE
0001A69A 70FF                       		moveq	#-1,d0
0001A69C 3028 0036                  		move.w	$36(a0),d0
0001A6A0 6700                       		beq.s	loc_193E8
0001A6A2 2240                       		movea.l	d0,a1
0001A6A4 137C 000A 0029             		move.b	#$A,$29(a1)
0001A6AA                            
0001A6AA                            loc_193E8:
0001A6AA 4268 0036                  		clr.w	$36(a0)
0001A6AE 6000                       		bra.s	loc_19406
0001A6B0                            ; ===========================================================================
0001A6B0                            
0001A6B0                            loc_193EE:
0001A6B0 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
0001A6B6 6600                       		bne.s	loc_19406
0001A6B8 4228 0029                  		clr.b	$29(a0)
0001A6BC 5528 0025                  		subq.b	#2,$25(a0)
0001A6C0 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001A6C6 6000                       		bra.s	loc_19446
0001A6C8                            ; ===========================================================================
0001A6C8                            
0001A6C8                            loc_19406:
0001A6C8 7001                       		moveq	#1,d0
0001A6CA 4A68 0036                  		tst.w	$36(a0)
0001A6CE 6700                       		beq.s	loc_19410
0001A6D0 7002                       		moveq	#2,d0
0001A6D2                            
0001A6D2                            loc_19410:
0001A6D2 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001A6D8 6700                       		beq.s	loc_19424
0001A6DA 6D00                       		blt.s	loc_1941C
0001A6DC 4440                       		neg.w	d0
0001A6DE                            
0001A6DE                            loc_1941C:
0001A6DE 4A68 0036                  		tst.w	$36(a0)
0001A6E2 D168 0038                  		add.w	d0,$38(a0)
0001A6E6                            
0001A6E6                            loc_19424:
0001A6E6 7000                       		moveq	#0,d0
0001A6E8 4A68 0036                  		tst.w	$36(a0)
0001A6EC 6700                       		beq.s	loc_19438
0001A6EE 7002                       		moveq	#2,d0
0001A6F0 0828 0000 003D             		btst	#0,$3D(a0)
0001A6F6 6700                       		beq.s	loc_19438
0001A6F8 4440                       		neg.w	d0
0001A6FA                            
0001A6FA                            loc_19438:
0001A6FA D068 0038                  		add.w	$38(a0),d0
0001A6FE 3140 000C                  		move.w	d0,$C(a0)
0001A702 3168 0030 0008             		move.w	$30(a0),8(a0)
0001A708                            
0001A708                            loc_19446:
0001A708 6000 FDBA                  		bra.w	loc_19202
0001A70C                            
0001A70C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001A70C                            
0001A70C                            
0001A70C                            Obj75_FindBlocks:			; XREF: loc_192AE
0001A70C 4268 0036                  		clr.w	$36(a0)
0001A710 43F8 D040                  		lea	($FFFFD040).w,a1
0001A714 703E                       		moveq	#$3E,d0
0001A716 7276                       		moveq	#$76,d1
0001A718 1428 0034                  		move.b	$34(a0),d2
0001A71C                            
0001A71C                            Obj75_FindLoop:
0001A71C B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
0001A71E 6600                       		bne.s	loc_1946A	; if not, branch
0001A720 B429 0028                  		cmp.b	$28(a1),d2
0001A724 6600                       		bne.s	loc_1946A
0001A726 3149 0036                  		move.w	a1,$36(a0)
0001A72A 6000                       		bra.s	locret_19472
0001A72C                            ; ===========================================================================
0001A72C                            
0001A72C                            loc_1946A:
0001A72C 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
0001A730 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001A734                            
0001A734                            locret_19472:
0001A734 4E75                       		rts	
0001A736                            ; End of function Obj75_FindBlocks
0001A736                            
0001A736                            ; ===========================================================================
0001A736                            
0001A736                            loc_19474:				; XREF: Obj75_ShipIndex
0001A736 5368 003C                  		subq.w	#1,$3C(a0)
0001A73A 6B00                       		bmi.s	loc_1947E
0001A73C 6000 E412                  		bra.w	BossDefeated
0001A740                            ; ===========================================================================
0001A740                            
0001A740                            loc_1947E:
0001A740 5428 0025                  		addq.b	#2,$25(a0)
0001A744 4268 0012                  		clr.w	$12(a0)
0001A748 08E8 0000 0022             		bset	#0,$22(a0)
0001A74E 08A8 0007 0022             		bclr	#7,$22(a0)
0001A754 4268 0010                  		clr.w	$10(a0)
0001A758 317C FFFF 003C             		move.w	#-1,$3C(a0)
0001A75E 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001A762 6600                       		bne.s	loc_194A8
0001A764 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
0001A76A                            
0001A76A                            loc_194A8:
0001A76A 6000 FD58                  		bra.w	loc_19202
0001A76E                            ; ===========================================================================
0001A76E                            
0001A76E                            loc_194AC:				; XREF: Obj75_ShipIndex
0001A76E 5268 003C                  		addq.w	#1,$3C(a0)
0001A772 6700                       		beq.s	loc_194BC
0001A774 6A00                       		bpl.s	loc_194C2
0001A776 0668 0018 0012             		addi.w	#$18,$12(a0)
0001A77C 6000                       		bra.s	loc_194EE
0001A77E                            ; ===========================================================================
0001A77E                            
0001A77E                            loc_194BC:
0001A77E 4268 0012                  		clr.w	$12(a0)
0001A782 6000                       		bra.s	loc_194EE
0001A784                            ; ===========================================================================
0001A784                            
0001A784                            loc_194C2:
0001A784 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
0001A78A 6500                       		bcs.s	loc_194DA
0001A78C 6700                       		beq.s	loc_194E0
0001A78E 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
0001A794 6500                       		bcs.s	loc_194EE
0001A796 5428 0025                  		addq.b	#2,$25(a0)
0001A79A 6000                       		bra.s	loc_194EE
0001A79C                            ; ===========================================================================
0001A79C                            
0001A79C                            loc_194DA:
0001A79C 5168 0012                  		subq.w	#8,$12(a0)
0001A7A0 6000                       		bra.s	loc_194EE
0001A7A2                            ; ===========================================================================
0001A7A2                            
0001A7A2                            loc_194E0:
0001A7A2 4268 0012                  		clr.w	$12(a0)
0001A7A6 303C 0085                  		move.w	#$85,d0
0001A7AA 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play SYZ music
0001A7B0                            
0001A7B0                            loc_194EE:
0001A7B0 6000 FD02                  		bra.w	loc_191F2
0001A7B4                            ; ===========================================================================
0001A7B4                            
0001A7B4                            loc_194F2:				; XREF: Obj75_ShipIndex
0001A7B4 317C 0400 0010             		move.w	#$400,$10(a0)
0001A7BA 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001A7C0 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001A7C6 6400                       		bcc.s	loc_1950C
0001A7C8 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A7CC 6000                       		bra.s	loc_19512
0001A7CE                            ; ===========================================================================
0001A7CE                            
0001A7CE                            loc_1950C:
0001A7CE 4A28 0001                  		tst.b	1(a0)
0001A7D2 6A00                       		bpl.s	Obj75_ShipDelete
0001A7D4                            
0001A7D4                            loc_19512:
0001A7D4 6100 E3BC                  		bsr.w	BossMove
0001A7D8 6000 FCC6                  		bra.w	loc_191DE
0001A7DC                            ; ===========================================================================
0001A7DC                            
0001A7DC                            Obj75_ShipDelete:
0001A7DC 4EF9 0000 E77E             		jmp	DeleteObject
0001A7E2                            ; ===========================================================================
0001A7E2                            
0001A7E2                            Obj75_FaceMain:				; XREF: Obj75_Index
0001A7E2 7201                       		moveq	#1,d1
0001A7E4 2268 0034                  		movea.l	$34(a0),a1
0001A7E8 7000                       		moveq	#0,d0
0001A7EA 1029 0025                  		move.b	$25(a1),d0
0001A7EE 303B 0000                  		move.w	off_19546(pc,d0.w),d0
0001A7F2 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001A7F6 1141 001C                  		move.b	d1,$1C(a0)
0001A7FA 1010                       		move.b	(a0),d0
0001A7FC B011                       		cmp.b	(a1),d0
0001A7FE 6600                       		bne.s	Obj75_FaceDelete
0001A800 6000                       		bra.s	loc_195BE
0001A802                            ; ===========================================================================
0001A802                            
0001A802                            Obj75_FaceDelete:
0001A802 4EF9 0000 E77E             		jmp	DeleteObject
0001A808                            ; ===========================================================================
0001A808 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
0001A80C 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
0001A810 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001A814                            ; ===========================================================================
0001A814                            
0001A814                            loc_19552:				; XREF: off_19546
0001A814 720A                       		moveq	#$A,d1
0001A816 4E75                       		rts	
0001A818                            ; ===========================================================================
0001A818                            
0001A818                            loc_19556:				; XREF: off_19546
0001A818 7206                       		moveq	#6,d1
0001A81A 4E75                       		rts	
0001A81C                            ; ===========================================================================
0001A81C                            
0001A81C                            loc_1955A:				; XREF: off_19546
0001A81C 7000                       		moveq	#0,d0
0001A81E 1029 0028                  		move.b	$28(a1),d0
0001A822 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001A826 4EFB 0000                  		jmp	off_19568(pc,d0.w)
0001A82A                            ; ===========================================================================
0001A82A 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
0001A82E 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
0001A832                            ; ===========================================================================
0001A832                            
0001A832                            loc_19570:				; XREF: off_19568
0001A832 6000                       		bra.s	loc_19574
0001A834                            ; ===========================================================================
0001A834                            
0001A834                            loc_19572:				; XREF: off_19568
0001A834 7206                       		moveq	#6,d1
0001A836                            
0001A836                            loc_19574:				; XREF: off_19546
0001A836 4A29 0020                  		tst.b	$20(a1)
0001A83A 6600                       		bne.s	loc_1957E
0001A83C 7205                       		moveq	#5,d1
0001A83E 4E75                       		rts	
0001A840                            ; ===========================================================================
0001A840                            
0001A840                            loc_1957E:
0001A840 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001A846 6500                       		bcs.s	locret_19588
0001A848 7204                       		moveq	#4,d1
0001A84A                            
0001A84A                            locret_19588:
0001A84A 4E75                       		rts	
0001A84C                            ; ===========================================================================
0001A84C                            
0001A84C                            Obj75_FlameMain:			; XREF: Obj75_Index
0001A84C 117C 0007 001C             		move.b	#7,$1C(a0)
0001A852 2268 0034                  		movea.l	$34(a0),a1
0001A856 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A85C 6600                       		bne.s	loc_195AA
0001A85E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A864 4A28 0001                  		tst.b	1(a0)
0001A868 6A00                       		bpl.s	Obj75_FlameDelete
0001A86A 6000                       		bra.s	loc_195B6
0001A86C                            ; ===========================================================================
0001A86C                            
0001A86C                            loc_195AA:
0001A86C 4A69 0010                  		tst.w	$10(a1)
0001A870 6700                       		beq.s	loc_195B6
0001A872 117C 0008 001C             		move.b	#8,$1C(a0)
0001A878                            
0001A878                            loc_195B6:
0001A878 6000                       		bra.s	loc_195BE
0001A87A                            ; ===========================================================================
0001A87A                            
0001A87A                            Obj75_FlameDelete:
0001A87A 4EF9 0000 E77E             		jmp	DeleteObject
0001A880                            ; ===========================================================================
0001A880                            
0001A880                            loc_195BE:
0001A880 43F9 0001 8FD4             		lea	(Ani_Eggman).l,a1
0001A886 4EB9 0000 B790             		jsr	AnimateSprite
0001A88C 2268 0034                  		movea.l	$34(a0),a1
0001A890 3169 0008 0008             		move.w	8(a1),8(a0)
0001A896 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A89C                            
0001A89C                            loc_195DA:
0001A89C 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A8A2 7003                       		moveq	#3,d0
0001A8A4 C028 0022                  		and.b	$22(a0),d0
0001A8A8 0228 00FC 0001             		andi.b	#$FC,1(a0)
0001A8AE 8128 0001                  		or.b	d0,1(a0)
0001A8B2 4EF9 0000 E742             		jmp	DisplaySprite
0001A8B8                            ; ===========================================================================
0001A8B8                            
0001A8B8                            Obj75_SpikeMain:			; XREF: Obj75_Index
0001A8B8 217C 0001 9100 0004        		move.l	#Map_BossItems,4(a0)
0001A8C0 317C 246C 0002             		move.w	#$246C,2(a0)
0001A8C6 117C 0005 001A             		move.b	#5,$1A(a0)
0001A8CC 2268 0034                  		movea.l	$34(a0),a1
0001A8D0 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001A8D6 6600                       		bne.s	loc_1961C
0001A8D8 4A28 0001                  		tst.b	1(a0)
0001A8DC 6A00                       		bpl.s	Obj75_SpikeDelete
0001A8DE                            
0001A8DE                            loc_1961C:
0001A8DE 3169 0008 0008             		move.w	8(a1),8(a0)
0001A8E4 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A8EA 3028 003C                  		move.w	$3C(a0),d0
0001A8EE 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001A8F4 6600                       		bne.s	loc_19652
0001A8F6 0C29 0006 0028             		cmpi.b	#6,$28(a1)
0001A8FC 6700                       		beq.s	loc_1964C
0001A8FE 4A29 0028                  		tst.b	$28(a1)
0001A902 6600                       		bne.s	loc_19658
0001A904 0C40 0094                  		cmpi.w	#$94,d0
0001A908 6C00                       		bge.s	loc_19658
0001A90A 5E40                       		addq.w	#7,d0
0001A90C 6000                       		bra.s	loc_19658
0001A90E                            ; ===========================================================================
0001A90E                            
0001A90E                            loc_1964C:
0001A90E 4A69 003C                  		tst.w	$3C(a1)
0001A912 6A00                       		bpl.s	loc_19658
0001A914                            
0001A914                            loc_19652:
0001A914 4A40                       		tst.w	d0
0001A916 6F00                       		ble.s	loc_19658
0001A918 5B40                       		subq.w	#5,d0
0001A91A                            
0001A91A                            loc_19658:
0001A91A 3140 003C                  		move.w	d0,$3C(a0)
0001A91E E440                       		asr.w	#2,d0
0001A920 D168 000C                  		add.w	d0,$C(a0)
0001A924 117C 0008 0019             		move.b	#8,$19(a0)
0001A92A 117C 000C 0016             		move.b	#$C,$16(a0)
0001A930 4228 0020                  		clr.b	$20(a0)
0001A934 2268 0034                  		movea.l	$34(a0),a1
0001A938 4A29 0020                  		tst.b	$20(a1)
0001A93C 6700                       		beq.s	loc_19688
0001A93E 4A29 0029                  		tst.b	$29(a1)
0001A942 6600                       		bne.s	loc_19688
0001A944 117C 0084 0020             		move.b	#$84,$20(a0)
0001A94A                            
0001A94A                            loc_19688:
0001A94A 6000 FF50                  		bra.w	loc_195DA
0001A94E                            ; ===========================================================================
0001A94E                            
0001A94E                            Obj75_SpikeDelete:
0001A94E 4EF9 0000 E77E             		jmp	DeleteObject
0001A954                            ; ===========================================================================
0001A954                            ; ---------------------------------------------------------------------------
0001A954                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001A954                            ; ---------------------------------------------------------------------------
0001A954                            
0001A954                            Obj76:					; XREF: Obj_Index
0001A954 7000                       		moveq	#0,d0
0001A956 1028 0024                  		move.b	$24(a0),d0
0001A95A 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
0001A95E 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
0001A962                            ; ===========================================================================
0001A962 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
0001A964 0000                       		dc.w Obj76_Action-Obj76_Index
0001A966 0000                       		dc.w loc_19762-Obj76_Index
0001A968                            ; ===========================================================================
0001A968                            
0001A968                            Obj76_Main:				; XREF: Obj76_Index
0001A968 7800                       		moveq	#0,d4
0001A96A 3A3C 2C10                  		move.w	#$2C10,d5
0001A96E 7C09                       		moveq	#9,d6
0001A970 43D0                       		lea	(a0),a1
0001A972 6000                       		bra.s	Obj76_MakeBlock
0001A974                            ; ===========================================================================
0001A974                            
0001A974                            Obj76_Loop:
0001A974 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001A97A 6600                       		bne.s	Obj76_ExitLoop
0001A97C                            
0001A97C                            Obj76_MakeBlock:			; XREF: Obj76_Main
0001A97C 12BC 0076                  		move.b	#$76,(a1)
0001A980 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
0001A988 337C 4000 0002             		move.w	#$4000,2(a1)
0001A98E 137C 0004 0001             		move.b	#4,1(a1)
0001A994 137C 0010 0019             		move.b	#$10,$19(a1)
0001A99A 137C 0010 0016             		move.b	#$10,$16(a1)
0001A9A0 137C 0003 0018             		move.b	#3,$18(a1)
0001A9A6 3345 0008                  		move.w	d5,8(a1)	; set x-position
0001A9AA 337C 0582 000C             		move.w	#$582,$C(a1)
0001A9B0 3344 0028                  		move.w	d4,$28(a1)
0001A9B4 0644 0101                  		addi.w	#$101,d4
0001A9B8 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
0001A9BC 5429 0024                  		addq.b	#2,$24(a1)
0001A9C0 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001A9C4                            
0001A9C4                            Obj76_ExitLoop:
0001A9C4 4E75                       		rts	
0001A9C6                            ; ===========================================================================
0001A9C6                            
0001A9C6                            Obj76_Action:				; XREF: Obj76_Index
0001A9C6 1028 0029                  		move.b	$29(a0),d0
0001A9CA B028 0028                  		cmp.b	$28(a0),d0
0001A9CE 6700                       		beq.s	Obj76_Solid
0001A9D0 4A00                       		tst.b	d0
0001A9D2 6B00                       		bmi.s	loc_19718
0001A9D4                            
0001A9D4                            loc_19712:
0001A9D4 6100 0000                  		bsr.w	Obj76_Break
0001A9D8 6000                       		bra.s	Obj76_Display
0001A9DA                            ; ===========================================================================
0001A9DA                            
0001A9DA                            loc_19718:
0001A9DA 2268 0034                  		movea.l	$34(a0),a1
0001A9DE 4A29 0021                  		tst.b	$21(a1)
0001A9E2 67F0                       		beq.s	loc_19712
0001A9E4 3169 0008 0008             		move.w	8(a1),8(a0)
0001A9EA 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A9F0 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001A9F6 B2C8                       		cmpa.w	a0,a1
0001A9F8 6500                       		bcs.s	Obj76_Display
0001A9FA 3029 0012                  		move.w	$12(a1),d0
0001A9FE 48C0                       		ext.l	d0
0001AA00 E080                       		asr.l	#8,d0
0001AA02 D168 000C                  		add.w	d0,$C(a0)
0001AA06 6000                       		bra.s	Obj76_Display
0001AA08                            ; ===========================================================================
0001AA08                            
0001AA08                            Obj76_Solid:				; XREF: Obj76_Action
0001AA08 323C 001B                  		move.w	#$1B,d1
0001AA0C 343C 0010                  		move.w	#$10,d2
0001AA10 363C 0011                  		move.w	#$11,d3
0001AA14 3828 0008                  		move.w	8(a0),d4
0001AA18 4EB9 0001 0B12             		jsr	SolidObject
0001AA1E                            
0001AA1E                            Obj76_Display:				; XREF: Obj76_Action
0001AA1E 4EF9 0000 E742             		jmp	DisplaySprite
0001AA24                            ; ===========================================================================
0001AA24                            
0001AA24                            loc_19762:				; XREF: Obj76_Index
0001AA24 4A28 0001                  		tst.b	1(a0)
0001AA28 6A00                       		bpl.s	Obj76_Delete
0001AA2A 4EB9 0000 E6AA             		jsr	ObjectFall
0001AA30 4EF9 0000 E742             		jmp	DisplaySprite
0001AA36                            ; ===========================================================================
0001AA36                            
0001AA36                            Obj76_Delete:
0001AA36 4EF9 0000 E77E             		jmp	DeleteObject
0001AA3C                            
0001AA3C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AA3C                            
0001AA3C                            
0001AA3C                            Obj76_Break:				; XREF: Obj76_Action
0001AA3C 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
0001AA40 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001AA44 7801                       		moveq	#1,d4
0001AA46 7203                       		moveq	#3,d1
0001AA48 7438                       		moveq	#$38,d2
0001AA4A 5428 0024                  		addq.b	#2,$24(a0)
0001AA4E 117C 0008 0019             		move.b	#8,$19(a0)
0001AA54 117C 0008 0016             		move.b	#8,$16(a0)
0001AA5A 43D0                       		lea	(a0),a1
0001AA5C 6000                       		bra.s	Obj76_MakeFrag
0001AA5E                            ; ===========================================================================
0001AA5E                            
0001AA5E                            Obj76_LoopFrag:
0001AA5E 4EB9 0000 EBDE             		jsr	SingleObjLoad2
0001AA64 6600                       		bne.s	loc_197D4
0001AA66                            
0001AA66                            Obj76_MakeFrag:
0001AA66 45D0                       		lea	(a0),a2
0001AA68 47D1                       		lea	(a1),a3
0001AA6A 7603                       		moveq	#3,d3
0001AA6C                            
0001AA6C                            loc_197AA:
0001AA6C 26DA                       		move.l	(a2)+,(a3)+
0001AA6E 26DA                       		move.l	(a2)+,(a3)+
0001AA70 26DA                       		move.l	(a2)+,(a3)+
0001AA72 26DA                       		move.l	(a2)+,(a3)+
0001AA74 51CB FFF6                  		dbf	d3,loc_197AA
0001AA78                            
0001AA78 335C 0010                  		move.w	(a4)+,$10(a1)
0001AA7C 335C 0012                  		move.w	(a4)+,$12(a1)
0001AA80 361D                       		move.w	(a5)+,d3
0001AA82 D769 0008                  		add.w	d3,8(a1)
0001AA86 361D                       		move.w	(a5)+,d3
0001AA88 D769 000C                  		add.w	d3,$C(a1)
0001AA8C 1344 001A                  		move.b	d4,$1A(a1)
0001AA90 5244                       		addq.w	#1,d4
0001AA92 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
0001AA96                            
0001AA96                            loc_197D4:
0001AA96 303C 00CB                  		move.w	#$CB,d0
0001AA9A 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play smashing sound
0001AAA0                            ; End of function Obj76_Break
0001AAA0                            
0001AAA0                            ; ===========================================================================
0001AAA0 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
0001AAA4 0180 FE00                  		dc.w $180, $FE00
0001AAA8 FF00 FF00                  		dc.w $FF00, $FF00
0001AAAC 0100 FF00                  		dc.w $100, $FF00
0001AAB0 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
0001AAB4 0010 0000                  		dc.w $10, 0
0001AAB8 0000 0010                  		dc.w 0,	$10
0001AABC 0010 0010                  		dc.w $10, $10
0001AAC0                            ; ---------------------------------------------------------------------------
0001AAC0                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
0001AAC0                            ; ---------------------------------------------------------------------------
0001AAC0                            Map_obj76:
0001AAC0                            	include "_maps\obj76.asm"
0001AAC0                            ; ---------------------------------------------------------------------------
0001AAC0                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
0001AAC0                            ; ---------------------------------------------------------------------------
0001AAC0 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001AAC4 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001AAC8 0000                       		dc.w byte_19826-Map_obj76
0001AACA 02                         byte_19808:	dc.b 2
0001AACB F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
0001AAD0 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001AAD5 00                         		dc.b 0
0001AAD6 01                         byte_19814:	dc.b 1
0001AAD7 F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
0001AADC 01                         byte_1981A:	dc.b 1
0001AADD F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
0001AAE2 01                         byte_19820:	dc.b 1
0001AAE3 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001AAE8 01                         byte_19826:	dc.b 1
0001AAE9 F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
0001AAEE                            		even
0001AAEE                            		even
0001AAEE                            
0001AAEE                            ; ===========================================================================
0001AAEE                            
0001AAEE                            loc_1982C:				; XREF: loc_19C62; loc_19C80
0001AAEE 4EF9 0000 E77E             		jmp	DeleteObject
0001AAF4                            ; ===========================================================================
0001AAF4                            ; ---------------------------------------------------------------------------
0001AAF4                            ; Object 82 - Eggman (SBZ2)
0001AAF4                            ; ---------------------------------------------------------------------------
0001AAF4                            
0001AAF4                            Obj82:					; XREF: Obj_Index
0001AAF4 7000                       		moveq	#0,d0
0001AAF6 1028 0024                  		move.b	$24(a0),d0
0001AAFA 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
0001AAFE 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
0001AB02                            ; ===========================================================================
0001AB02 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001AB04 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001AB06 0000                       		dc.w Obj82_Switch-Obj82_Index
0001AB08                            
0001AB08 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
0001AB0B 0400 03                    		dc.b 4,	0, 3
0001AB0E                            ; ===========================================================================
0001AB0E                            
0001AB0E                            Obj82_Main:				; XREF: Obj82_Index
0001AB0E 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
0001AB12 317C 2160 0008             		move.w	#$2160,8(a0)
0001AB18 317C 05A4 000C             		move.w	#$5A4,$C(a0)
0001AB1E 117C 000F 0020             		move.b	#$F,$20(a0)
0001AB24 117C 0010 0021             		move.b	#$10,$21(a0)
0001AB2A 08A8 0000 0022             		bclr	#0,$22(a0)
0001AB30 4228 0025                  		clr.b	$25(a0)
0001AB34 115A 0024                  		move.b	(a2)+,$24(a0)
0001AB38 115A 001C                  		move.b	(a2)+,$1C(a0)
0001AB3C 115A 0018                  		move.b	(a2)+,$18(a0)
0001AB40 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001AB48 317C 0400 0002             		move.w	#$400,2(a0)
0001AB4E 117C 0004 0001             		move.b	#4,1(a0)
0001AB54 08E8 0007 0001             		bset	#7,1(a0)
0001AB5A 117C 0020 0019             		move.b	#$20,$19(a0)
0001AB60 4EB9 0000 EBDE             		jsr	SingleObjLoad2
0001AB66 6600                       		bne.s	Obj82_Eggman
0001AB68 2348 0034                  		move.l	a0,$34(a1)
0001AB6C 12BC 0082                  		move.b	#$82,(a1)	; load switch object
0001AB70 337C 2130 0008             		move.w	#$2130,8(a1)
0001AB76 337C 05BC 000C             		move.w	#$5BC,$C(a1)
0001AB7C 4228 0025                  		clr.b	$25(a0)
0001AB80 135A 0024                  		move.b	(a2)+,$24(a1)
0001AB84 135A 001C                  		move.b	(a2)+,$1C(a1)
0001AB88 135A 0018                  		move.b	(a2)+,$18(a1)
0001AB8C 237C 0000 CEC4 0004        		move.l	#Map_obj32,4(a1)
0001AB94 337C 04A4 0002             		move.w	#$4A4,2(a1)
0001AB9A 137C 0004 0001             		move.b	#4,1(a1)
0001ABA0 08E9 0007 0001             		bset	#7,1(a1)
0001ABA6 137C 0010 0019             		move.b	#$10,$19(a1)
0001ABAC 137C 0000 001A             		move.b	#0,$1A(a1)
0001ABB2                            
0001ABB2                            Obj82_Eggman:				; XREF: Obj82_Index
0001ABB2 7000                       		moveq	#0,d0
0001ABB4 1028 0025                  		move.b	$25(a0),d0
0001ABB8 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
0001ABBC 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
0001ABC0 43FA 0000                  		lea	Ani_obj82(pc),a1
0001ABC4 4EB9 0000 B790             		jsr	AnimateSprite
0001ABCA 4EF9 0000 E742             		jmp	DisplaySprite
0001ABD0                            ; ===========================================================================
0001ABD0 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
0001ABD2 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001ABD4 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001ABD6 0000                       		dc.w loc_19934-Obj82_EggIndex
0001ABD8                            ; ===========================================================================
0001ABD8                            
0001ABD8                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001ABD8 3028 0008                  		move.w	8(a0),d0
0001ABDC 9078 D008                  		sub.w	($FFFFD008).w,d0
0001ABE0 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001ABE4 6400                       		bcc.s	loc_19934	; if not, branch
0001ABE6 5428 0025                  		addq.b	#2,$25(a0)
0001ABEA 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
0001ABF0 117C 0001 001C             		move.b	#1,$1C(a0)
0001ABF6                            
0001ABF6                            loc_19934:				; XREF: Obj82_EggIndex
0001ABF6 4EF9 0000 E71C             		jmp	SpeedToPos
0001ABFC                            ; ===========================================================================
0001ABFC                            
0001ABFC                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
0001ABFC 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
0001AC00 6600                       		bne.s	loc_19954	; if time remains, branch
0001AC02 5428 0025                  		addq.b	#2,$25(a0)
0001AC06 117C 0002 001C             		move.b	#2,$1C(a0)
0001AC0C 5868 000C                  		addq.w	#4,$C(a0)
0001AC10 317C 000F 003C             		move.w	#15,$3C(a0)
0001AC16                            
0001AC16                            loc_19954:
0001AC16 60DE                       		bra.s	loc_19934
0001AC18                            ; ===========================================================================
0001AC18                            
0001AC18                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001AC18 5368 003C                  		subq.w	#1,$3C(a0)
0001AC1C 6E00                       		bgt.s	loc_199D0
0001AC1E 6600                       		bne.s	loc_1996A
0001AC20 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001AC26 317C FC40 0012             		move.w	#-$3C0,$12(a0)
0001AC2C                            
0001AC2C                            loc_1996A:
0001AC2C 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
0001AC32 6E00                       		bgt.s	loc_19976
0001AC34 4268 0010                  		clr.w	$10(a0)
0001AC38                            
0001AC38                            loc_19976:
0001AC38 0668 0024 0012             		addi.w	#$24,$12(a0)
0001AC3E 4A68 0012                  		tst.w	$12(a0)
0001AC42 6B00                       		bmi.s	Obj82_FindBlocks
0001AC44 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
0001AC4A 6500                       		bcs.s	Obj82_FindBlocks
0001AC4C 317C 5357 0028             		move.w	#$5357,$28(a0)
0001AC52 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001AC58 6500                       		bcs.s	Obj82_FindBlocks
0001AC5A 317C 059B 000C             		move.w	#$59B,$C(a0)
0001AC60 4268 0012                  		clr.w	$12(a0)
0001AC64                            
0001AC64                            Obj82_FindBlocks:
0001AC64 3028 0010                  		move.w	$10(a0),d0
0001AC68 8068 0012                  		or.w	$12(a0),d0
0001AC6C 6600                       		bne.s	loc_199D0
0001AC6E 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
0001AC72 703E                       		moveq	#$3E,d0
0001AC74 7240                       		moveq	#$40,d1
0001AC76                            
0001AC76                            Obj82_FindLoop:	
0001AC76 D2C1                       		adda.w	d1,a1		; jump to next object RAM
0001AC78 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
0001AC7C 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
0001AC80                            
0001AC80 6600                       		bne.s	loc_199D0
0001AC82 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
0001AC88 5428 0025                  		addq.b	#2,$25(a0)
0001AC8C 117C 0001 001C             		move.b	#1,$1C(a0)
0001AC92                            
0001AC92                            loc_199D0:
0001AC92 6000 FF62                  		bra.w	loc_19934
0001AC96                            ; ===========================================================================
0001AC96                            
0001AC96                            Obj82_Switch:				; XREF: Obj82_Index
0001AC96 7000                       		moveq	#0,d0
0001AC98 1028 0025                  		move.b	$25(a0),d0
0001AC9C 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
0001ACA0 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
0001ACA4                            ; ===========================================================================
0001ACA4 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
0001ACA6 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
0001ACA8                            ; ===========================================================================
0001ACA8                            
0001ACA8                            loc_199E6:				; XREF: Obj82_SwIndex
0001ACA8 2268 0034                  		movea.l	$34(a0),a1
0001ACAC 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
0001ACB2 6600                       		bne.s	Obj82_SwDisplay
0001ACB4 117C 0001 001A             		move.b	#1,$1A(a0)
0001ACBA 5428 0025                  		addq.b	#2,$25(a0)
0001ACBE                            
0001ACBE                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
0001ACBE 4EF9 0000 E742             		jmp	DisplaySprite
0001ACC4                            ; ===========================================================================
0001ACC4                            Ani_obj82:
0001ACC4                            	include "_anim\obj82.asm"
0001ACC4                            ; ---------------------------------------------------------------------------
0001ACC4                            ; Animation script - Eggman (SBZ2)
0001ACC4                            ; ---------------------------------------------------------------------------
0001ACC4 0000                       		dc.w byte_19A10-Ani_obj82
0001ACC6 0000                       		dc.w byte_19A14-Ani_obj82
0001ACC8 0000                       		dc.w byte_19A18-Ani_obj82
0001ACCA 0000                       		dc.w byte_19A20-Ani_obj82
0001ACCC 0000                       		dc.w byte_19A24-Ani_obj82
0001ACCE 0000                       		dc.w byte_19A2A-Ani_obj82
0001ACD0 0000                       		dc.w byte_19A30-Ani_obj82
0001ACD2 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001ACD6 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
0001ACDA 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
0001ACE2 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001ACE6 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
0001ACEC 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
0001ACF2 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001ACF6                            		even
0001ACF6                            		even
0001ACF6                            
0001ACF6                            ; ---------------------------------------------------------------------------
0001ACF6                            ; Sprite mappings - Eggman (SBZ2)
0001ACF6                            ; ---------------------------------------------------------------------------
0001ACF6                            Map_obj82:
0001ACF6                            	include "_maps\obj82.asm"
0001ACF6                            ; ================================================================================
0001ACF6                            ; Sprite Mappings - generated by Flex 2 Fri Mar 21 2025 21:13:29 GMT-0500 (Central Daylight Time)
0001ACF6                            ; ================================================================================
0001ACF6                            
0001ACF6                            DATAA16Z12RYSAF:
0001ACF6 0000 0000                  	dc.w DATAA16Z12RYSAF_0-DATAA16Z12RYSAF, DATAA16Z12RYSAF_1-DATAA16Z12RYSAF
0001ACFA 0000 0000                  	dc.w DATAA16Z12RYSAF_2-DATAA16Z12RYSAF, DATAA16Z12RYSAF_3-DATAA16Z12RYSAF
0001ACFE 0000 0000                  	dc.w DATAA16Z12RYSAF_4-DATAA16Z12RYSAF, DATAA16Z12RYSAF_5-DATAA16Z12RYSAF
0001AD02 0000 0000                  	dc.w DATAA16Z12RYSAF_6-DATAA16Z12RYSAF, DATAA16Z12RYSAF_7-DATAA16Z12RYSAF
0001AD06 0000 0000                  	dc.w DATAA16Z12RYSAF_8-DATAA16Z12RYSAF, DATAA16Z12RYSAF_9-DATAA16Z12RYSAF
0001AD0A 0000                       	dc.w DATAA16Z12RYSAF_A-DATAA16Z12RYSAF
0001AD0C 03                         DATAA16Z12RYSAF_0: dc.b $3
0001AD0D FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001AD12 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AD17 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AD1C 04                         DATAA16Z12RYSAF_1: dc.b $4
0001AD1D E80D 000C F0               	dc.b $E8, $D, $0, $C, $F0
0001AD22 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AD27 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AD2C FC00 006D E8               	dc.b $FC, $0, $0, $6D, $E8
0001AD31 04                         DATAA16Z12RYSAF_2: dc.b $4
0001AD32 E90D 000C F0               	dc.b $E9, $D, $0, $C, $F0
0001AD37 E90E 0000 F0               	dc.b $E9, $E, $0, $0, $F0
0001AD3C 010F 005D F0               	dc.b $1, $F, $0, $5D, $F0
0001AD41 FD00 006D E8               	dc.b $FD, $0, $0, $6D, $E8
0001AD46 03                         DATAA16Z12RYSAF_3: dc.b $3
0001AD47 E80F 006E E8               	dc.b $E8, $F, $0, $6E, $E8
0001AD4C 080D 007E E8               	dc.b $8, $D, $0, $7E, $E8
0001AD51 F005 0086 08               	dc.b $F0, $5, $0, $86, $8
0001AD56 04                         DATAA16Z12RYSAF_4: dc.b $4
0001AD57 E00F 008A E8               	dc.b $E0, $F, $0, $8A, $E8
0001AD5C 000C 009A E8               	dc.b $0, $C, $0, $9A, $E8
0001AD61 0806 009E F0               	dc.b $8, $6, $0, $9E, $F0
0001AD66 E805 00A4 08               	dc.b $E8, $5, $0, $A4, $8
0001AD6B 04                         DATAA16Z12RYSAF_5: dc.b $4
0001AD6C E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001AD71 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001AD76 E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001AD7B 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001AD80 07                         DATAA16Z12RYSAF_6: dc.b $7
0001AD81 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001AD86 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001AD8B 0409 082E 00               	dc.b $4, $9, $8, $2E, $0
0001AD90 0405 0834 E8               	dc.b $4, $5, $8, $34, $E8
0001AD95 F00F 081E F0               	dc.b $F0, $F, $8, $1E, $F0
0001AD9A F104 0838 10               	dc.b $F1, $4, $8, $38, $10
0001AD9F F104 0038 E0               	dc.b $F1, $4, $0, $38, $E0
0001ADA4 04                         DATAA16Z12RYSAF_7: dc.b $4
0001ADA5 080D 00A8 E4               	dc.b $8, $D, $0, $A8, $E4
0001ADAA E80F 00B0 EC               	dc.b $E8, $F, $0, $B0, $EC
0001ADAF 0805 00C0 04               	dc.b $8, $5, $0, $C0, $4
0001ADB4 F005 00C4 0C               	dc.b $F0, $5, $0, $C4, $C
0001ADB9 05                         DATAA16Z12RYSAF_8: dc.b $5
0001ADBA 0C05 00C8 E4               	dc.b $C, $5, $0, $C8, $E4
0001ADBF E40F 00CC EC               	dc.b $E4, $F, $0, $CC, $EC
0001ADC4 040C 00DC EC               	dc.b $4, $C, $0, $DC, $EC
0001ADC9 0C05 00E0 FC               	dc.b $C, $5, $0, $E0, $FC
0001ADCE EC04 00E4 0C               	dc.b $EC, $4, $0, $E4, $C
0001ADD3 08                         DATAA16Z12RYSAF_9: dc.b $8
0001ADD4 E80D 0014 EC               	dc.b $E8, $D, $0, $14, $EC
0001ADD9 E801 001C 0C               	dc.b $E8, $1, $0, $1C, $C
0001ADDE E80E 0000 F0               	dc.b $E8, $E, $0, $0, $F0
0001ADE3 000F 004D F0               	dc.b $0, $F, $0, $4D, $F0
0001ADE8 E00D 3ECE F0               	dc.b $E0, $D, $3E, $CE, $F0
0001ADED F00D 3ECE F0               	dc.b $F0, $D, $3E, $CE, $F0
0001ADF2 000D 3ECE F0               	dc.b $0, $D, $3E, $CE, $F0
0001ADF7 100D 3ECE F0               	dc.b $10, $D, $3E, $CE, $F0
0001ADFC 03                         DATAA16Z12RYSAF_A: dc.b $3
0001ADFD EC0D 003A E4               	dc.b $EC, $D, $0, $3A, $E4
0001AE02 F408 0042 04               	dc.b $F4, $8, $0, $42, $4
0001AE07 EC0D 0045 FC               	dc.b $EC, $D, $0, $45, $FC
0001AE0C                            	even
0001AE0C                            	even
0001AE0C                            
0001AE0C                            ; ===========================================================================
0001AE0C                            ; ---------------------------------------------------------------------------
0001AE0C                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
0001AE0C                            ; ---------------------------------------------------------------------------
0001AE0C                            
0001AE0C                            Obj83:					; XREF: Obj_Index
0001AE0C 7000                       		moveq	#0,d0
0001AE0E 1028 0024                  		move.b	$24(a0),d0
0001AE12 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
0001AE16 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
0001AE1A                            ; ===========================================================================
0001AE1A 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
0001AE1C 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
0001AE1E 0000                       		dc.w loc_19C36-Obj83_Index
0001AE20 0000                       		dc.w loc_19C62-Obj83_Index
0001AE22 0000                       		dc.w loc_19C72-Obj83_Index
0001AE24 0000                       		dc.w loc_19C80-Obj83_Index
0001AE26                            ; ===========================================================================
0001AE26                            
0001AE26                            Obj83_Main:				; XREF: Obj83_Index
0001AE26 317C 2080 0008             		move.w	#$2080,8(a0)
0001AE2C 317C 05D0 000C             		move.w	#$5D0,$C(a0)
0001AE32 117C 0080 0019             		move.b	#$80,$19(a0)
0001AE38 117C 0010 0016             		move.b	#$10,$16(a0)
0001AE3E 117C 0004 0001             		move.b	#4,1(a0)
0001AE44 08E8 0007 0001             		bset	#7,1(a0)
0001AE4A 7800                       		moveq	#0,d4
0001AE4C 3A3C 2010                  		move.w	#$2010,d5
0001AE50 7C07                       		moveq	#7,d6
0001AE52 45E8 0030                  		lea	$30(a0),a2
0001AE56                            
0001AE56                            Obj83_MakeBlock:
0001AE56 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001AE5C 6600                       		bne.s	Obj83_ExitMake
0001AE5E 34C9                       		move.w	a1,(a2)+
0001AE60 12BC 0083                  		move.b	#$83,(a1)	; load block object
0001AE64 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
0001AE6C 337C 4518 0002             		move.w	#$4518,2(a1)
0001AE72 137C 0004 0001             		move.b	#4,1(a1)
0001AE78 137C 0010 0019             		move.b	#$10,$19(a1)
0001AE7E 137C 0010 0016             		move.b	#$10,$16(a1)
0001AE84 137C 0003 0018             		move.b	#3,$18(a1)
0001AE8A 3345 0008                  		move.w	d5,8(a1)	; set X	position
0001AE8E 337C 05D0 000C             		move.w	#$5D0,$C(a1)
0001AE94 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
0001AE98 137C 0008 0024             		move.b	#8,$24(a1)
0001AE9E 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
0001AEA2                            
0001AEA2                            Obj83_ExitMake:
0001AEA2 5428 0024                  		addq.b	#2,$24(a0)
0001AEA6 4E75                       		rts	
0001AEA8                            ; ===========================================================================
0001AEA8                            
0001AEA8                            Obj83_ChkBreak:				; XREF: Obj83_Index
0001AEA8 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AEAE 6600                       		bne.s	Obj83_Solid	; if not, branch
0001AEB0 4228 001A                  		clr.b	$1A(a0)
0001AEB4 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
0001AEB8                            
0001AEB8                            Obj83_Solid:
0001AEB8 7000                       		moveq	#0,d0
0001AEBA 1028 001A                  		move.b	$1A(a0),d0
0001AEBE 4400                       		neg.b	d0
0001AEC0 4880                       		ext.w	d0
0001AEC2 5040                       		addq.w	#8,d0
0001AEC4 E940                       		asl.w	#4,d0
0001AEC6 383C 2100                  		move.w	#$2100,d4
0001AECA 9840                       		sub.w	d0,d4
0001AECC 1140 0019                  		move.b	d0,$19(a0)
0001AED0 3144 0008                  		move.w	d4,8(a0)
0001AED4 720B                       		moveq	#$B,d1
0001AED6 D240                       		add.w	d0,d1
0001AED8 7410                       		moveq	#$10,d2
0001AEDA 7611                       		moveq	#$11,d3
0001AEDC 4EF9 0001 0B12             		jmp	SolidObject
0001AEE2                            ; ===========================================================================
0001AEE2                            
0001AEE2                            loc_19C36:				; XREF: Obj83_Index
0001AEE2 0428 000E 001E             		subi.b	#$E,$1E(a0)
0001AEE8 6400                       		bcc.s	Obj83_Solid2
0001AEEA 70FF                       		moveq	#-1,d0
0001AEEC 1028 001A                  		move.b	$1A(a0),d0
0001AEF0 4880                       		ext.w	d0
0001AEF2 D040                       		add.w	d0,d0
0001AEF4 3030 0030                  		move.w	$30(a0,d0.w),d0
0001AEF8 2240                       		movea.l	d0,a1
0001AEFA 337C 474F 0028             		move.w	#$474F,$28(a1)
0001AF00 5228 001A                  		addq.b	#1,$1A(a0)
0001AF04 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
0001AF0A 6700                       		beq.s	loc_19C62
0001AF0C                            
0001AF0C                            Obj83_Solid2:
0001AF0C 60AA                       		bra.s	Obj83_Solid
0001AF0E                            ; ===========================================================================
0001AF0E                            
0001AF0E                            loc_19C62:				; XREF: Obj83_Index
0001AF0E 08A8 0003 0022             		bclr	#3,$22(a0)
0001AF14 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AF1A 6000 FBD2                  		bra.w	loc_1982C
0001AF1E                            ; ===========================================================================
0001AF1E                            
0001AF1E                            loc_19C72:				; XREF: Obj83_Index
0001AF1E 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
0001AF24 6700                       		beq.s	Obj83_Break	; if yes, branch
0001AF26 4EF9 0000 E742             		jmp	DisplaySprite
0001AF2C                            ; ===========================================================================
0001AF2C                            
0001AF2C                            loc_19C80:				; XREF: Obj83_Index
0001AF2C 4A28 0001                  		tst.b	1(a0)
0001AF30 6A00 FBBC                  		bpl.w	loc_1982C
0001AF34 4EB9 0000 E6AA             		jsr	ObjectFall
0001AF3A 4EF9 0000 E742             		jmp	DisplaySprite
0001AF40                            ; ===========================================================================
0001AF40                            
0001AF40                            Obj83_Break:				; XREF: loc_19C72
0001AF40 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
0001AF44 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
0001AF48 7801                       		moveq	#1,d4
0001AF4A 7203                       		moveq	#3,d1
0001AF4C 7438                       		moveq	#$38,d2
0001AF4E 5428 0024                  		addq.b	#2,$24(a0)
0001AF52 117C 0008 0019             		move.b	#8,$19(a0)
0001AF58 117C 0008 0016             		move.b	#8,$16(a0)
0001AF5E 43D0                       		lea	(a0),a1
0001AF60 6000                       		bra.s	Obj83_MakeFrag
0001AF62                            ; ===========================================================================
0001AF62                            
0001AF62                            Obj83_LoopFrag:
0001AF62 4EB9 0000 EBDE             		jsr	SingleObjLoad2
0001AF68 6600                       		bne.s	Obj83_BreakSnd
0001AF6A                            
0001AF6A                            Obj83_MakeFrag:				; XREF: Obj83_Break
0001AF6A 45D0                       		lea	(a0),a2
0001AF6C 47D1                       		lea	(a1),a3
0001AF6E 7603                       		moveq	#3,d3
0001AF70                            
0001AF70                            loc_19CC4:
0001AF70 26DA                       		move.l	(a2)+,(a3)+
0001AF72 26DA                       		move.l	(a2)+,(a3)+
0001AF74 26DA                       		move.l	(a2)+,(a3)+
0001AF76 26DA                       		move.l	(a2)+,(a3)+
0001AF78 51CB FFF6                  		dbf	d3,loc_19CC4
0001AF7C                            
0001AF7C 335C 0012                  		move.w	(a4)+,$12(a1)
0001AF80 361D                       		move.w	(a5)+,d3
0001AF82 D769 0008                  		add.w	d3,8(a1)
0001AF86 361D                       		move.w	(a5)+,d3
0001AF88 D769 000C                  		add.w	d3,$C(a1)
0001AF8C 1344 001A                  		move.b	d4,$1A(a1)
0001AF90 5244                       		addq.w	#1,d4
0001AF92 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
0001AF96                            
0001AF96                            Obj83_BreakSnd:
0001AF96 303C 00CB                  		move.w	#$CB,d0
0001AF9A 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play smashing sound
0001AFA0 4EF9 0000 E742             		jmp	DisplaySprite
0001AFA6                            ; ===========================================================================
0001AFA6 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
0001AFAA 0120 00C0                  		dc.w $120, $C0
0001AFAE FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
0001AFB2 0010 0000                  		dc.w $10, 0
0001AFB6 0000 0010                  		dc.w 0,	$10
0001AFBA 0010 0010                  		dc.w $10, $10
0001AFBE                            ; ---------------------------------------------------------------------------
0001AFBE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AFBE                            ; ---------------------------------------------------------------------------
0001AFBE                            Map_obj83:
0001AFBE                            	include "_maps\obj83.asm"
0001AFBE                            ; ---------------------------------------------------------------------------
0001AFBE                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
0001AFBE                            ; ---------------------------------------------------------------------------
0001AFBE 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
0001AFC2 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
0001AFC6 0000                       		dc.w byte_19D46-Map_obj83
0001AFC8 01                         byte_19D1C:	dc.b 1
0001AFC9 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0001AFCE 02                         byte_19D22:	dc.b 2
0001AFCF F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
0001AFD4 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
0001AFD9 00                         		dc.b 0
0001AFDA 02                         byte_19D2E:	dc.b 2
0001AFDB F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
0001AFE0 F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
0001AFE5 00                         		dc.b 0
0001AFE6 02                         byte_19D3A:	dc.b 2
0001AFE7 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
0001AFEC F801 0006 00               		dc.b $F8, 1, 0,	6, 0
0001AFF1 00                         		dc.b 0
0001AFF2 02                         byte_19D46:	dc.b 2
0001AFF3 F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
0001AFF8 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
0001AFFE 00                         		even
0001AFFE 00                         		even
0001AFFE                            
0001AFFE                            ; ===========================================================================
0001AFFE                            ; ---------------------------------------------------------------------------
0001AFFE                            ; Object 85 - Eggman (FZ)
0001AFFE                            ; ---------------------------------------------------------------------------
0001AFFE                            
0001AFFE                            Obj85_Delete:
0001AFFE 4EF9 0000 E77E             		jmp	DeleteObject
0001B004                            ; ===========================================================================
0001B004                            
0001B004                            Obj85:					; XREF: Obj_Index
0001B004 7000                       		moveq	#0,d0
0001B006 1028 0024                  		move.b	$24(a0),d0
0001B00A 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
0001B00E 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
0001B012                            ; ===========================================================================
0001B012 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
0001B014 0000                       		dc.w Obj85_Eggman-Obj85_Index
0001B016 0000                       		dc.w loc_1A38E-Obj85_Index
0001B018 0000                       		dc.w loc_1A346-Obj85_Index
0001B01A 0000                       		dc.w loc_1A2C6-Obj85_Index
0001B01C 0000                       		dc.w loc_1A3AC-Obj85_Index
0001B01E 0000                       		dc.w loc_1A264-Obj85_Index
0001B020                            
0001B020 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
0001B026 0001 ACF6                  		dc.l Map_obj82		; mappings pointer
0001B02A 25B0 0590 0300             		dc.w $25B0, $590, $300
0001B030 0000 0000                  		dc.l Map_obj84
0001B034 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
0001B03A 0000 0000                  		dc.l Map_FZBoss
0001B03E 26E0 0596 0470             		dc.w $26E0, $596, $470
0001B044 0001 ACF6                  		dc.l Map_obj82
0001B048 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B04E 0001 9038                  		dc.l Map_Eggman
0001B052 26E0 0596 0400             		dc.w $26E0, $596, $400
0001B058 0001 9038                  		dc.l Map_Eggman
0001B05C                            
0001B05C 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
0001B061 0400 0112 08               		dc.b 4,	0, 1, $12, 8
0001B066 0600 0300 00               		dc.b 6,	0, 3, 0, 0
0001B06B 0800 0300 00               		dc.b 8,	0, 3, 0, 0
0001B070 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
0001B075 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
0001B07A                            ; ===========================================================================
0001B07A                            
0001B07A                            Obj85_Main:				; XREF: Obj85_Index
0001B07A 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
0001B07E 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
0001B082 2248                       		movea.l	a0,a1
0001B084 7205                       		moveq	#5,d1
0001B086 6000                       		bra.s	Obj85_LoadBoss
0001B088                            ; ===========================================================================
0001B088                            
0001B088                            Obj85_Loop:
0001B088 4EB9 0000 EBDE             		jsr	SingleObjLoad2
0001B08E 6600                       		bne.s	loc_19E20
0001B090                            
0001B090                            Obj85_LoadBoss:				; XREF: Obj85_Main
0001B090 12BC 0085                  		move.b	#$85,(a1)
0001B094 335A 0008                  		move.w	(a2)+,8(a1)
0001B098 335A 000C                  		move.w	(a2)+,$C(a1)
0001B09C 335A 0002                  		move.w	(a2)+,2(a1)
0001B0A0 235A 0004                  		move.l	(a2)+,4(a1)
0001B0A4 135B 0024                  		move.b	(a3)+,$24(a1)
0001B0A8 135B 001C                  		move.b	(a3)+,$1C(a1)
0001B0AC 135B 0018                  		move.b	(a3)+,$18(a1)
0001B0B0 135B 0017                  		move.b	(a3)+,$17(a1)
0001B0B4 135B 0016                  		move.b	(a3)+,$16(a1)
0001B0B8 137C 0004 0001             		move.b	#4,1(a1)
0001B0BE 08E8 0007 0001             		bset	#7,1(a0)
0001B0C4 2348 0034                  		move.l	a0,$34(a1)
0001B0C8 51C9 FFBE                  		dbf	d1,Obj85_Loop
0001B0CC                            
0001B0CC                            loc_19E20:
0001B0CC 45E8 0036                  		lea	$36(a0),a2
0001B0D0 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001B0D6 6600                       		bne.s	loc_19E5A
0001B0D8 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
0001B0DC 3489                       		move.w	a1,(a2)
0001B0DE 2348 0034                  		move.l	a0,$34(a1)
0001B0E2 45E8 0038                  		lea	$38(a0),a2
0001B0E6 7400                       		moveq	#0,d2
0001B0E8 7203                       		moveq	#3,d1
0001B0EA                            
0001B0EA                            loc_19E3E:
0001B0EA 4EB9 0000 EBDE             		jsr	SingleObjLoad2
0001B0F0 6600                       		bne.s	loc_19E5A
0001B0F2 34C9                       		move.w	a1,(a2)+
0001B0F4 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
0001B0F8 2348 0034                  		move.l	a0,$34(a1)
0001B0FC 1342 0028                  		move.b	d2,$28(a1)
0001B100 5442                       		addq.w	#2,d2
0001B102 51C9 FFE6                  		dbf	d1,loc_19E3E
0001B106                            
0001B106                            loc_19E5A:
0001B106 317C 0000 0034             		move.w	#0,$34(a0)
0001B10C 4EB8 33F0                  		jsr	RandomNumber	; get a number between 0 and 250
0001B110 4240                       		clr.w	d0
0001B112 4840                       		swap	d0
0001B114 80FC 00FB                  		divu.w	#251,d0
0001B118 4840                       		swap	d0
0001B11A 0640 0118                  		add.w	#280,d0		; add 280
0001B11E 33C0 00FF 7FFE             		move.w	d0,($FF7FFE).l	; that's the number of hits
0001B124 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B12A                            
0001B12A                            Obj85_Eggman:				; XREF: Obj85_Index
0001B12A 7000                       		moveq	#0,d0
0001B12C 1028 0034                  		move.b	$34(a0),d0
0001B130 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
0001B134 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
0001B138 4EF9 0000 E742             		jmp	DisplaySprite
0001B13E                            ; ===========================================================================
0001B13E 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
0001B142 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
0001B146 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
0001B14A 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
0001B14E                            ; ===========================================================================
0001B14E                            
0001B14E                            loc_19E90:				; XREF: off_19E80
0001B14E 4AB8 F680                  		tst.l	($FFFFF680).w
0001B152 6600                       		bne.s	loc_19EA2
0001B154 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
0001B15A 6500                       		bcs.s	loc_19EA2
0001B15C 5428 0034                  		addq.b	#2,$34(a0)
0001B160                            
0001B160                            loc_19EA2:
0001B160 52B8 F636                  		addq.l	#1,($FFFFF636).w
0001B164 4E75                       		rts	
0001B166                            ; ===========================================================================
0001B166                            
0001B166                            loc_19EA8:				; XREF: off_19E80
0001B166 4A68 0030                  		tst.w	$30(a0)
0001B16A 6A00                       		bpl.s	loc_19F10
0001B16C 4268 0030                  		clr.w	$30(a0)
0001B170 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001B176 0240 000C                  		andi.w	#$C,d0
0001B17A 3200                       		move.w	d0,d1
0001B17C 5441                       		addq.w	#2,d1
0001B17E 4A80                       		tst.l	d0
0001B180 6A00                       		bpl.s	loc_19EC6
0001B182 C141                       		exg	d1,d0
0001B184                            
0001B184                            loc_19EC6:
0001B184 43FA 0000                  		lea	word_19FD6(pc),a1
0001B188 3031 0000                  		move.w	(a1,d0.w),d0
0001B18C 3231 1000                  		move.w	(a1,d1.w),d1
0001B190 3140 0030                  		move.w	d0,$30(a0)
0001B194 74FF                       		moveq	#-1,d2
0001B196 3430 0038                  		move.w	$38(a0,d0.w),d2
0001B19A 2242                       		movea.l	d2,a1
0001B19C 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B1A2 337C FFFF 0030             		move.w	#-1,$30(a1)
0001B1A8 3430 1038                  		move.w	$38(a0,d1.w),d2
0001B1AC 2242                       		movea.l	d2,a1
0001B1AE 137C 0001 0029             		move.b	#1,$29(a1)
0001B1B4 337C 0000 0030             		move.w	#0,$30(a1)
0001B1BA 317C 0001 0032             		move.w	#1,$32(a0)
0001B1C0 4228 0035                  		clr.b	$35(a0)
0001B1C4 303C 00B7                  		move.w	#$B7,d0
0001B1C8 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play rumbling sound
0001B1CE                            
0001B1CE                            loc_19F10:
0001B1CE 4A68 0032                  		tst.w	$32(a0)
0001B1D2 6B00 0000                  		bmi.w	loc_19FA6
0001B1D6 08A8 0000 0022             		bclr	#0,$22(a0)
0001B1DC 3038 D008                  		move.w	($FFFFD008).w,d0
0001B1E0 9068 0008                  		sub.w	8(a0),d0
0001B1E4 6500                       		bcs.s	loc_19F2E
0001B1E6 08E8 0000 0022             		bset	#0,$22(a0)
0001B1EC                            
0001B1EC                            loc_19F2E:
0001B1EC 323C 002B                  		move.w	#$2B,d1
0001B1F0 343C 0014                  		move.w	#$14,d2
0001B1F4 363C 0014                  		move.w	#$14,d3
0001B1F8 3828 0008                  		move.w	8(a0),d4
0001B1FC 4EB9 0001 0B12             		jsr	SolidObject
0001B202 4A44                       		tst.w	d4
0001B204 6E00                       		bgt.s	loc_19F50
0001B206                            
0001B206                            loc_19F48:
0001B206 4A28 0035                  		tst.b	$35(a0)
0001B20A 6600                       		bne.s	loc_19F88
0001B20C 6000                       		bra.s	loc_19F96
0001B20E                            ; ===========================================================================
0001B20E                            
0001B20E                            loc_19F50:
0001B20E 5E78 F636                  		addq.w	#7,($FFFFF636).w	; add 7 to... the rng seed?
0001B212                            ;		cmpi.b	#2,($FFFFD01C).w	; check if player is in ball form (nah)
0001B212                            ;		bne.s	loc_19F48
0001B212                            ;		move.w	#$300,d0		; knock player back (nah)
0001B212                            ;		btst	#0,$22(a0)
0001B212                            ;		bne.s	loc_19F6A
0001B212                            ;		neg.w	d0
0001B212                            ;
0001B212                            ;loc_19F6A:
0001B212                            ;		move.w	d0,($FFFFD010).w
0001B212 4A28 0035                  		tst.b	$35(a0)
0001B216 6600                       		bne.s	loc_19F88
0001B218 5379 00FF 7FFE             		subq.w	#1,($FF7FFE).l		; no overflowing! dumbass glitch finish the boss again looking ass
0001B21E 6400                       		bcc.s	@notoverflown
0001B220 4279 00FF 7FFE             		clr.w	($FF7FFE).l
0001B226                            @notoverflown:
0001B226 117C 0001 0035             		move.b	#1,$35(a0)		; eye-frame timer
0001B22C 303C 00AC                  		move.w	#$AC,d0
0001B230 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B236                            
0001B236                            loc_19F88:
0001B236 5328 0035                  		subq.b	#1,$35(a0)
0001B23A 6700                       		beq.s	loc_19F96
0001B23C 117C 0003 001C             		move.b	#3,$1C(a0)
0001B242 6000                       		bra.s	loc_19F9C
0001B244                            ; ===========================================================================
0001B244                            
0001B244                            loc_19F96:
0001B244 117C 0001 001C             		move.b	#1,$1C(a0)
0001B24A                            
0001B24A                            loc_19F9C:
0001B24A 43FA FA78                  		lea	Ani_obj82(pc),a1
0001B24E 4EF9 0000 B790             		jmp	AnimateSprite
0001B254                            ; ===========================================================================
0001B254                            
0001B254                            loc_19FA6:
0001B254 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B25A 6700                       		beq.s	loc_19FBC
0001B25C 5428 0034                  		addq.b	#2,$34(a0)
0001B260 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B266 4268 0032                  		clr.w	$32(a0)
0001B26A 4E75                       		rts	
0001B26C                            ; ===========================================================================
0001B26C                            
0001B26C                            loc_19FBC:
0001B26C 117C 0006 0034             		move.b	#6,$34(a0)
0001B272 317C 25C0 0008             		move.w	#$25C0,8(a0)
0001B278 317C 053C 000C             		move.w	#$53C,$C(a0)
0001B27E 117C 0014 0016             		move.b	#$14,$16(a0)
0001B284 4E75                       		rts	
0001B286                            ; ===========================================================================
0001B286 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
0001B296                            ; ===========================================================================
0001B296                            
0001B296                            loc_19FE6:				; XREF: off_19E80
0001B296 70FF                       		moveq	#-1,d0
0001B298 3028 0036                  		move.w	$36(a0),d0
0001B29C 2240                       		movea.l	d0,a1
0001B29E 4A68 0030                  		tst.w	$30(a0)
0001B2A2 6A00                       		bpl.s	loc_1A000
0001B2A4 4268 0030                  		clr.w	$30(a0)
0001B2A8 137C 00FF 0029             		move.b	#-1,$29(a1)
0001B2AE 6100                       		bsr.s	loc_1A020
0001B2B0                            
0001B2B0                            loc_1A000:
0001B2B0 700F                       		moveq	#$F,d0
0001B2B2 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
0001B2B6 6600                       		bne.s	loc_1A00A
0001B2B8 6100                       		bsr.s	loc_1A020
0001B2BA                            
0001B2BA                            loc_1A00A:
0001B2BA 4A68 0032                  		tst.w	$32(a0)
0001B2BE 6700                       		beq.s	locret_1A01E
0001B2C0 5528 0034                  		subq.b	#2,$34(a0)
0001B2C4 317C FFFF 0030             		move.w	#-1,$30(a0)
0001B2CA 4268 0032                  		clr.w	$32(a0)
0001B2CE                            
0001B2CE                            locret_1A01E:
0001B2CE 4E75                       		rts	
0001B2D0                            ; ===========================================================================
0001B2D0                            
0001B2D0                            loc_1A020:
0001B2D0 303C 00B1                  		move.w	#$B1,d0
0001B2D4 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play electricity sound
0001B2DA                            ; ===========================================================================
0001B2DA                            
0001B2DA                            loc_1A02A:				; XREF: off_19E80
0001B2DA 117C 0030 0017             		move.b	#$30,$17(a0)
0001B2E0 08E8 0000 0022             		bset	#0,$22(a0)
0001B2E6 4EB9 0000 E71C             		jsr	SpeedToPos
0001B2EC 117C 0006 001A             		move.b	#6,$1A(a0)
0001B2F2 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B2F8 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
0001B2FE 6500                       		bcs.s	loc_1A070
0001B300 317C 059C 000C             		move.w	#$59C,$C(a0)
0001B306 5428 0034                  		addq.b	#2,$34(a0)
0001B30A 117C 0020 0017             		move.b	#$20,$17(a0)
0001B310 317C 0100 0010             		move.w	#$100,$10(a0)
0001B316 317C FF00 0012             		move.w	#-$100,$12(a0)
0001B31C 5438 F742                  		addq.b	#2,($FFFFF742).w
0001B320                            
0001B320                            loc_1A070:
0001B320 6000 0000                  		bra.w	loc_1A166
0001B324                            ; ===========================================================================
0001B324                            
0001B324                            loc_1A074:				; XREF: off_19E80
0001B324 08E8 0000 0022             		bset	#0,$22(a0)
0001B32A 117C 0004 001C             		move.b	#4,$1C(a0)
0001B330 4EB9 0000 E71C             		jsr	SpeedToPos
0001B336 0668 0010 0012             		addi.w	#$10,$12(a0)
0001B33C 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
0001B342 6500                       		bcs.s	loc_1A09A
0001B344 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001B34A                            
0001B34A                            loc_1A09A:
0001B34A 317C 0400 0010             		move.w	#$400,$10(a0)
0001B350 3028 0008                  		move.w	8(a0),d0
0001B354 9078 D008                  		sub.w	($FFFFD008).w,d0
0001B358 6A00                       		bpl.s	loc_1A0B4
0001B35A 317C 0500 0010             		move.w	#$500,$10(a0)
0001B360 6000 0000                  		bra.w	loc_1A0F2
0001B364                            ; ===========================================================================
0001B364                            
0001B364                            loc_1A0B4:
0001B364 0440 0070                  		subi.w	#$70,d0
0001B368 6500                       		bcs.s	loc_1A0F2
0001B36A 0468 0100 0010             		subi.w	#$100,$10(a0)
0001B370 5140                       		subq.w	#8,d0
0001B372 6500                       		bcs.s	loc_1A0F2
0001B374 0468 0100 0010             		subi.w	#$100,$10(a0)
0001B37A 5140                       		subq.w	#8,d0
0001B37C 6500                       		bcs.s	loc_1A0F2
0001B37E 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B384 5140                       		subq.w	#8,d0
0001B386 6500                       		bcs.s	loc_1A0F2
0001B388 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B38E 5140                       		subq.w	#8,d0
0001B390 6500                       		bcs.s	loc_1A0F2
0001B392 0468 0080 0010             		subi.w	#$80,$10(a0)
0001B398 0440 0038                  		subi.w	#$38,d0
0001B39C 6500                       		bcs.s	loc_1A0F2
0001B39E 4268 0010                  		clr.w	$10(a0)
0001B3A2                            
0001B3A2                            loc_1A0F2:
0001B3A2 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001B3A8 6500                       		bcs.s	loc_1A110
0001B3AA 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001B3B0 317C 0240 0010             		move.w	#$240,$10(a0)
0001B3B6 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001B3BC 5428 0034                  		addq.b	#2,$34(a0)
0001B3C0                            
0001B3C0                            loc_1A110:
0001B3C0 6000                       		bra.s	loc_1A15C
0001B3C2                            ; ===========================================================================
0001B3C2                            
0001B3C2                            loc_1A112:				; XREF: off_19E80
0001B3C2 4EB9 0000 E71C             		jsr	SpeedToPos
0001B3C8 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001B3CE 6500                       		bcs.s	loc_1A124
0001B3D0 4268 0010                  		clr.w	$10(a0)
0001B3D4                            
0001B3D4                            loc_1A124:
0001B3D4 0668 0034 0012             		addi.w	#$34,$12(a0)
0001B3DA 4A68 0012                  		tst.w	$12(a0)
0001B3DE 6B00                       		bmi.s	loc_1A142
0001B3E0 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001B3E6 6500                       		bcs.s	loc_1A142
0001B3E8 317C 0592 000C             		move.w	#$592,$C(a0)
0001B3EE 4268 0012                  		clr.w	$12(a0)
0001B3F2                            
0001B3F2                            loc_1A142:
0001B3F2 3028 0010                  		move.w	$10(a0),d0
0001B3F6 8068 0012                  		or.w	$12(a0),d0
0001B3FA 6600                       		bne.s	loc_1A15C
0001B3FC 5428 0034                  		addq.b	#2,$34(a0)
0001B400 317C FE80 0012             		move.w	#-$180,$12(a0)
0001B406 117C 0001 0021             		move.b	#1,$21(a0)
0001B40C                            
0001B40C                            loc_1A15C:
0001B40C 43FA F8B6                  		lea	Ani_obj82(pc),a1
0001B410 4EB9 0000 B790             		jsr	AnimateSprite
0001B416                            
0001B416                            loc_1A166:
0001B416 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001B41C 6C00                       		bge.s	loc_1A172
0001B41E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001B422                            
0001B422                            loc_1A172:
0001B422 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001B428 6C00                       		bge.s	locret_1A190
0001B42A 323C 001B                  		move.w	#$1B,d1
0001B42E 343C 0070                  		move.w	#$70,d2
0001B432 363C 0071                  		move.w	#$71,d3
0001B436 3828 0008                  		move.w	8(a0),d4
0001B43A 4EF9 0001 0B12             		jmp	SolidObject
0001B440                            ; ===========================================================================
0001B440                            
0001B440                            locret_1A190:
0001B440 4E75                       		rts	
0001B442                            ; ===========================================================================
0001B442                            
0001B442                            loc_1A192:				; XREF: off_19E80
0001B442 217C 0001 9038 0004        		move.l	#Map_Eggman,4(a0)
0001B44A 317C 0400 0002             		move.w	#$400,2(a0)
0001B450 117C 0000 001C             		move.b	#0,$1C(a0)
0001B456 08E8 0000 0022             		bset	#0,$22(a0)
0001B45C 4EB9 0000 E71C             		jsr	SpeedToPos
0001B462 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001B468 6400                       		bcc.s	loc_1A1D0
0001B46A 317C 0180 0010             		move.w	#$180,$10(a0)
0001B470 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001B476 117C 000F 0020             		move.b	#$F,$20(a0)
0001B47C 5428 0034                  		addq.b	#2,$34(a0)
0001B480                            
0001B480                            loc_1A1D0:
0001B480 6000 FF8A                  		bra.w	loc_1A15C
0001B484                            ; ===========================================================================
0001B484                            
0001B484                            loc_1A1D4:				; XREF: off_19E80
0001B484 08E8 0000 0022             		bset	#0,$22(a0)
0001B48A 4EB9 0000 E71C             		jsr	SpeedToPos
0001B490 4A68 0030                  		tst.w	$30(a0)
0001B494 6600                       		bne.s	loc_1A1FC
0001B496 4A28 0020                  		tst.b	$20(a0)
0001B49A 6600                       		bne.s	loc_1A216
0001B49C 317C 001E 0030             		move.w	#$1E,$30(a0)
0001B4A2 303C 00AC                  		move.w	#$AC,d0
0001B4A6 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001B4AC                            
0001B4AC                            loc_1A1FC:
0001B4AC 5368 0030                  		subq.w	#1,$30(a0)
0001B4B0 6600                       		bne.s	loc_1A216
0001B4B2 4A28 0022                  		tst.b	$22(a0)
0001B4B6 6A00                       		bpl.s	loc_1A210
0001B4B8 317C 0060 0012             		move.w	#$60,$12(a0)
0001B4BE 6000                       		bra.s	loc_1A216
0001B4C0                            ; ===========================================================================
0001B4C0                            
0001B4C0                            loc_1A210:
0001B4C0 117C 000F 0020             		move.b	#$F,$20(a0)
0001B4C6                            
0001B4C6                            loc_1A216:
0001B4C6 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001B4CC 6D00                       		blt.s	loc_1A23A
0001B4CE 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001B4D4 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001B4DA 4278 D014                  		clr.w	($FFFFD014).w
0001B4DE 4A68 0012                  		tst.w	$12(a0)
0001B4E2 6A00                       		bpl.s	loc_1A248
0001B4E4 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001B4EA                            
0001B4EA                            loc_1A23A:
0001B4EA 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001B4F0 6D00                       		blt.s	loc_1A248
0001B4F2 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001B4F8                            
0001B4F8                            loc_1A248:
0001B4F8 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001B4FE 6500                       		bcs.s	loc_1A260
0001B500 4A28 0001                  		tst.b	1(a0)
0001B504 6B00                       		bmi.s	loc_1A260
0001B506 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001B50C 6000 FAF0                  		bra.w	Obj85_Delete
0001B510                            ; ===========================================================================
0001B510                            
0001B510                            loc_1A260:
0001B510 6000 FEFA                  		bra.w	loc_1A15C
0001B514                            ; ===========================================================================
0001B514                            
0001B514                            loc_1A264:				; XREF: Obj85_Index
0001B514 2268 0034                  		movea.l	$34(a0),a1
0001B518 1011                       		move.b	(a1),d0
0001B51A B010                       		cmp.b	(a0),d0
0001B51C 6600 FAE0                  		bne.w	Obj85_Delete
0001B520 117C 0007 001C             		move.b	#7,$1C(a0)
0001B526 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B52C 6C00                       		bge.s	loc_1A280
0001B52E 6000                       		bra.s	loc_1A2A6
0001B530                            ; ===========================================================================
0001B530                            
0001B530                            loc_1A280:
0001B530 4A69 0010                  		tst.w	$10(a1)
0001B534 6700                       		beq.s	loc_1A28C
0001B536 117C 000B 001C             		move.b	#$B,$1C(a0)
0001B53C                            
0001B53C                            loc_1A28C:
0001B53C 43FA DA96                  		lea	Ani_Eggman(pc),a1
0001B540 4EB9 0000 B790             		jsr	AnimateSprite
0001B546                            
0001B546                            loc_1A296:
0001B546 2268 0034                  		movea.l	$34(a0),a1
0001B54A 3169 0008 0008             		move.w	8(a1),8(a0)
0001B550 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B556                            
0001B556                            loc_1A2A6:
0001B556 2268 0034                  		movea.l	$34(a0),a1
0001B55A 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001B560 7003                       		moveq	#3,d0
0001B562 C028 0022                  		and.b	$22(a0),d0
0001B566 0228 00FC 0001             		andi.b	#-4,1(a0)
0001B56C 8128 0001                  		or.b	d0,1(a0)
0001B570 4EF9 0000 E742             		jmp	DisplaySprite
0001B576                            ; ===========================================================================
0001B576                            
0001B576                            loc_1A2C6:				; XREF: Obj85_Index
0001B576 2268 0034                  		movea.l	$34(a0),a1
0001B57A 1011                       		move.b	(a1),d0
0001B57C B010                       		cmp.b	(a0),d0
0001B57E 6600 FA7E                  		bne.w	Obj85_Delete
0001B582 0CA9 0001 9038 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B58A 6700                       		beq.s	loc_1A2E4
0001B58C 117C 000A 001A             		move.b	#$A,$1A(a0)
0001B592 60C2                       		bra.s	loc_1A2A6
0001B594                            ; ===========================================================================
0001B594                            
0001B594                            loc_1A2E4:
0001B594 117C 0001 001C             		move.b	#1,$1C(a0)
0001B59A 4A29 0021                  		tst.b	$21(a1)
0001B59E 6F00                       		ble.s	loc_1A312
0001B5A0 117C 0006 001C             		move.b	#6,$1C(a0)
0001B5A6 217C 0001 9038 0004        		move.l	#Map_Eggman,4(a0)
0001B5AE 317C 0400 0002             		move.w	#$400,2(a0)
0001B5B4 43FA DA1E                  		lea	Ani_Eggman(pc),a1
0001B5B8 4EB9 0000 B790             		jsr	AnimateSprite
0001B5BE 6000 FF86                  		bra.w	loc_1A296
0001B5C2                            ; ===========================================================================
0001B5C2                            
0001B5C2                            loc_1A312:
0001B5C2 4A28 0001                  		tst.b	1(a0)
0001B5C6 6A00 FA36                  		bpl.w	Obj85_Delete
0001B5CA 6100 D584                  		bsr.w	BossDefeated
0001B5CE 117C 0002 0018             		move.b	#2,$18(a0)
0001B5D4 117C 0000 001C             		move.b	#0,$1C(a0)
0001B5DA 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001B5E2 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001B5E8 43FA 0000                  		lea	Ani_obj85(pc),a1
0001B5EC 4EB9 0000 B790             		jsr	AnimateSprite
0001B5F2 6000 FF52                  		bra.w	loc_1A296
0001B5F6                            ; ===========================================================================
0001B5F6                            
0001B5F6                            loc_1A346:				; XREF: Obj85_Index
0001B5F6 08E8 0000 0022             		bset	#0,$22(a0)
0001B5FC 2268 0034                  		movea.l	$34(a0),a1
0001B600 0CA9 0001 9038 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B608 6700                       		beq.s	loc_1A35E
0001B60A 6000 FF4A                  		bra.w	loc_1A2A6
0001B60E                            ; ===========================================================================
0001B60E                            
0001B60E                            loc_1A35E:
0001B60E 3169 0008 0008             		move.w	8(a1),8(a0)
0001B614 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001B61A 4A28 001E                  		tst.b	$1E(a0)
0001B61E 6600                       		bne.s	loc_1A376
0001B620 117C 0014 001E             		move.b	#$14,$1E(a0)
0001B626                            
0001B626                            loc_1A376:
0001B626 5328 001E                  		subq.b	#1,$1E(a0)
0001B62A 6E00                       		bgt.s	loc_1A38A
0001B62C 5228 001A                  		addq.b	#1,$1A(a0)
0001B630 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001B636 6E00 F9C6                  		bgt.w	Obj85_Delete
0001B63A                            
0001B63A                            loc_1A38A:
0001B63A 6000 FF0A                  		bra.w	loc_1A296
0001B63E                            ; ===========================================================================
0001B63E                            
0001B63E                            loc_1A38E:				; XREF: Obj85_Index
0001B63E 117C 000B 001A             		move.b	#$B,$1A(a0)
0001B644 3038 D008                  		move.w	($FFFFD008).w,d0
0001B648 9068 0008                  		sub.w	8(a0),d0
0001B64C 6500                       		bcs.s	loc_1A3A6
0001B64E 4A28 0001                  		tst.b	1(a0)
0001B652 6A00 F9AA                  		bpl.w	Obj85_Delete
0001B656                            
0001B656                            loc_1A3A6:
0001B656 4EF9 0000 E742             		jmp	DisplaySprite
0001B65C                            ; ===========================================================================
0001B65C                            
0001B65C                            loc_1A3AC:				; XREF: Obj85_Index
0001B65C 117C 0000 001A             		move.b	#0,$1A(a0)
0001B662 08E8 0000 0022             		bset	#0,$22(a0)
0001B668 2268 0034                  		movea.l	$34(a0),a1
0001B66C 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001B672 6600                       		bne.s	loc_1A3D0
0001B674 0CA9 0001 9038 0004        		cmpi.l	#Map_Eggman,4(a1)
0001B67C 6700 F980                  		beq.w	Obj85_Delete
0001B680                            
0001B680                            loc_1A3D0:
0001B680 6000 FED4                  		bra.w	loc_1A2A6
0001B684                            ; ===========================================================================
0001B684                            Ani_obj85:
0001B684                            	include "_anim\obj85.asm"
0001B684                            ; ---------------------------------------------------------------------------
0001B684                            ; Animation script - Eggman (FZ)
0001B684                            ; ---------------------------------------------------------------------------
0001B684 0000                       		dc.w byte_1A3D6-Ani_obj85
0001B686 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001B68A                            		even
0001B68A                            		even
0001B68A                            
0001B68A                            Map_Eggman2:
0001B68A                            	include "_maps\Eggman2.asm"
0001B68A                            ; ---------------------------------------------------------------------------
0001B68A                            ; Sprite mappings - Eggman (FZ)
0001B68A                            ; ---------------------------------------------------------------------------
0001B68A 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001B68C 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001B68E 06                         byte_1A3DE:	dc.b 6
0001B68F E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001B694 EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001B699 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B69E FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B6A3 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B6A8 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B6AD 06                         byte_1A3FD:	dc.b 6
0001B6AE E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001B6B3 EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001B6B8 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001B6BD FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001B6C2 FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001B6C7 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001B6CC                            		even
0001B6CC                            		even
0001B6CC                            
0001B6CC                            Map_FZBoss:
0001B6CC                            	include "_maps\FZ boss.asm"
0001B6CC                            ; ---------------------------------------------------------------------------
0001B6CC                            ; Sprite mappings - boss (FZ)
0001B6CC                            ; ---------------------------------------------------------------------------
0001B6CC 0000                       		dc.w byte_1A422-Map_FZBoss
0001B6CE 0000                       		dc.w byte_1A42D-Map_FZBoss
0001B6D0 0000                       		dc.w byte_1A43D-Map_FZBoss
0001B6D2 02                         byte_1A422:	dc.b 2
0001B6D3 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001B6D8 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001B6DD 03                         byte_1A42D:	dc.b 3
0001B6DE 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001B6E3 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001B6E8 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001B6ED 02                         byte_1A43D:	dc.b 2
0001B6EE 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001B6F3 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001B6F8                            		even
0001B6F8                            		even
0001B6F8                            
0001B6F8                            ; ===========================================================================
0001B6F8                            
0001B6F8                            Obj84_Delete:
0001B6F8 4EF9 0000 E77E             		jmp	DeleteObject
0001B6FE                            ; ===========================================================================
0001B6FE                            ; ---------------------------------------------------------------------------
0001B6FE                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001B6FE                            ; ---------------------------------------------------------------------------
0001B6FE                            
0001B6FE                            Obj84:					; XREF: Obj_Index
0001B6FE 7000                       		moveq	#0,d0
0001B700 1028 0024                  		move.b	$24(a0),d0
0001B704 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001B708 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001B70C                            ; ===========================================================================
0001B70C 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001B70E 0000                       		dc.w loc_1A4CE-Obj84_Index
0001B710 0000                       		dc.w loc_1A57E-Obj84_Index
0001B712                            
0001B712 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001B716 2550 0620                  		dc.w $2550, $620
0001B71A 2490 04C0                  		dc.w $2490, $4C0
0001B71E 2510 04C0                  		dc.w $2510, $4C0
0001B722                            ; ===========================================================================
0001B722                            
0001B722                            Obj84_Main:				; XREF: Obj84_Index
0001B722 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001B726 7000                       		moveq	#0,d0
0001B728 1028 0028                  		move.b	$28(a0),d0
0001B72C D040                       		add.w	d0,d0
0001B72E D2C0                       		adda.w	d0,a1
0001B730 117C 0004 0001             		move.b	#4,1(a0)
0001B736 08E8 0007 0001             		bset	#7,1(a0)
0001B73C 08E8 0004 0001             		bset	#4,1(a0)
0001B742 317C 0300 0002             		move.w	#$300,2(a0)
0001B748 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001B750 3159 0008                  		move.w	(a1)+,8(a0)
0001B754 3151 000C                  		move.w	(a1),$C(a0)
0001B758 3159 0038                  		move.w	(a1)+,$38(a0)
0001B75C 117C 0020 0016             		move.b	#$20,$16(a0)
0001B762 117C 0060 0017             		move.b	#$60,$17(a0)
0001B768 117C 0020 0019             		move.b	#$20,$19(a0)
0001B76E 117C 0060 0016             		move.b	#$60,$16(a0)
0001B774 117C 0003 0018             		move.b	#3,$18(a0)
0001B77A 5428 0024                  		addq.b	#2,$24(a0)
0001B77E                            
0001B77E                            loc_1A4CE:				; XREF: Obj84_Index
0001B77E 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B784 6F00                       		ble.s	loc_1A4DC
0001B786 08E8 0001 0001             		bset	#1,1(a0)
0001B78C                            
0001B78C                            loc_1A4DC:
0001B78C 42A8 003C                  		clr.l	$3C(a0)
0001B790 4A28 0029                  		tst.b	$29(a0)
0001B794 6700                       		beq.s	loc_1A4EA
0001B796 5428 0024                  		addq.b	#2,$24(a0)
0001B79A                            
0001B79A                            loc_1A4EA:
0001B79A 2028 003C                  		move.l	$3C(a0),d0
0001B79E 2228 0038                  		move.l	$38(a0),d1
0001B7A2 D280                       		add.l	d0,d1
0001B7A4 4841                       		swap	d1
0001B7A6 3141 000C                  		move.w	d1,$C(a0)
0001B7AA 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001B7B0 6600                       		bne.s	loc_1A524
0001B7B2 4A68 0030                  		tst.w	$30(a0)
0001B7B6 6A00                       		bpl.s	loc_1A524
0001B7B8 70F6                       		moveq	#-$A,d0
0001B7BA 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001B7C0 6F00                       		ble.s	loc_1A514
0001B7C2 700E                       		moveq	#$E,d0
0001B7C4                            
0001B7C4                            loc_1A514:
0001B7C4 D240                       		add.w	d0,d1
0001B7C6 2268 0034                  		movea.l	$34(a0),a1
0001B7CA 3341 000C                  		move.w	d1,$C(a1)
0001B7CE 3368 0008 0008             		move.w	8(a0),8(a1)
0001B7D4                            
0001B7D4                            loc_1A524:
0001B7D4 323C 002B                  		move.w	#$2B,d1
0001B7D8 343C 0060                  		move.w	#$60,d2
0001B7DC 363C 0061                  		move.w	#$61,d3
0001B7E0 3828 0008                  		move.w	8(a0),d4
0001B7E4 4EB9 0001 0B12             		jsr	SolidObject
0001B7EA 7000                       		moveq	#0,d0
0001B7EC 3228 003C                  		move.w	$3C(a0),d1
0001B7F0 6A00                       		bpl.s	loc_1A550
0001B7F2 4441                       		neg.w	d1
0001B7F4 5141                       		subq.w	#8,d1
0001B7F6 6500                       		bcs.s	loc_1A55C
0001B7F8 5200                       		addq.b	#1,d0
0001B7FA E841                       		asr.w	#4,d1
0001B7FC D041                       		add.w	d1,d0
0001B7FE 6000                       		bra.s	loc_1A55C
0001B800                            ; ===========================================================================
0001B800                            
0001B800                            loc_1A550:
0001B800 0441 0027                  		subi.w	#$27,d1
0001B804 6500                       		bcs.s	loc_1A55C
0001B806 5200                       		addq.b	#1,d0
0001B808 E841                       		asr.w	#4,d1
0001B80A D041                       		add.w	d1,d0
0001B80C                            
0001B80C                            loc_1A55C:
0001B80C 1140 001A                  		move.b	d0,$1A(a0)
0001B810 3038 D008                  		move.w	($FFFFD008).w,d0
0001B814 9068 0008                  		sub.w	8(a0),d0
0001B818 6B00                       		bmi.s	loc_1A578
0001B81A 0440 0140                  		subi.w	#$140,d0
0001B81E 6B00                       		bmi.s	loc_1A578
0001B820 4A28 0001                  		tst.b	1(a0)
0001B824 6A00 FED2                  		bpl.w	Obj84_Delete
0001B828                            
0001B828                            loc_1A578:
0001B828 4EF9 0000 E742             		jmp	DisplaySprite
0001B82E                            ; ===========================================================================
0001B82E                            
0001B82E                            loc_1A57E:				; XREF: Obj84_Index
0001B82E 7000                       		moveq	#0,d0
0001B830 1028 0028                  		move.b	$28(a0),d0
0001B834 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001B838 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001B83C 6000 FF5C                  		bra.w	loc_1A4EA
0001B840                            ; ===========================================================================
0001B840 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001B842 0000                       		dc.w loc_1A598-off_1A590
0001B844 0000                       		dc.w loc_1A604-off_1A590
0001B846 0000                       		dc.w loc_1A604-off_1A590
0001B848                            ; ===========================================================================
0001B848                            
0001B848                            loc_1A598:				; XREF: off_1A590
0001B848 4A28 0029                  		tst.b	$29(a0)
0001B84C 6600                       		bne.s	loc_1A5D4
0001B84E 2268 0034                  		movea.l	$34(a0),a1
0001B852 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B858 6600                       		bne.s	loc_1A5B4
0001B85A 6100 D2F4                  		bsr.w	BossDefeated
0001B85E 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001B866                            
0001B866                            loc_1A5B4:
0001B866 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001B86E 6400                       		bcc.s	locret_1A602
0001B870 42A8 003C                  		clr.l	$3C(a0)
0001B874 2268 0034                  		movea.l	$34(a0),a1
0001B878 5369 0032                  		subq.w	#1,$32(a1)
0001B87C 4269 0030                  		clr.w	$30(a1)
0001B880 5528 0024                  		subq.b	#2,$24(a0)
0001B884 4E75                       		rts	
0001B886                            ; ===========================================================================
0001B886                            
0001B886                            loc_1A5D4:
0001B886 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001B88C 6C00                       		bge.s	loc_1A5E4
0001B88E 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001B896                            
0001B896                            loc_1A5E4:
0001B896 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001B89E 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001B8A4 6E00                       		bgt.s	locret_1A602
0001B8A6 4268 003E                  		clr.w	$3E(a0)
0001B8AA 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001B8B0 4228 0029                  		clr.b	$29(a0)
0001B8B4                            
0001B8B4                            locret_1A602:
0001B8B4 4E75                       		rts	
0001B8B6                            ; ===========================================================================
0001B8B6                            
0001B8B6                            loc_1A604:				; XREF: off_1A590
0001B8B6 08E8 0001 0001             		bset	#1,1(a0)
0001B8BC 4A28 0029                  		tst.b	$29(a0)
0001B8C0 6600                       		bne.s	loc_1A646
0001B8C2 2268 0034                  		movea.l	$34(a0),a1
0001B8C6 4A79 00FF 7FFE             		tst.w	($FF7FFE).l
0001B8CC 6600                       		bne.s	loc_1A626
0001B8CE 6100 D280                  		bsr.w	BossDefeated
0001B8D2 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001B8DA                            
0001B8DA                            loc_1A626:
0001B8DA 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001B8E2 6400                       		bcc.s	locret_1A674
0001B8E4 42A8 003C                  		clr.l	$3C(a0)
0001B8E8 2268 0034                  		movea.l	$34(a0),a1
0001B8EC 5369 0032                  		subq.w	#1,$32(a1)
0001B8F0 4269 0030                  		clr.w	$30(a1)
0001B8F4 5528 0024                  		subq.b	#2,$24(a0)
0001B8F8 4E75                       		rts	
0001B8FA                            ; ===========================================================================
0001B8FA                            
0001B8FA                            loc_1A646:
0001B8FA 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001B900 6D00                       		blt.s	loc_1A656
0001B902 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001B90A                            
0001B90A                            loc_1A656:
0001B90A 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001B912 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001B918 6D00                       		blt.s	locret_1A674
0001B91A 4268 003E                  		clr.w	$3E(a0)
0001B91E 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001B924 4228 0029                  		clr.b	$29(a0)
0001B928                            
0001B928                            locret_1A674:
0001B928 4E75                       		rts	
0001B92A                            ; ===========================================================================
0001B92A                            ; ---------------------------------------------------------------------------
0001B92A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B92A                            ; ---------------------------------------------------------------------------
0001B92A                            Map_obj84:
0001B92A                            	include "_maps\obj84.asm"
0001B92A                            ; ---------------------------------------------------------------------------
0001B92A                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001B92A                            ; ---------------------------------------------------------------------------
0001B92A 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001B92E 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001B932 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001B936 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B93A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001B93E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001B942 06                         byte_1A68E:	dc.b 6
0001B943 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B948 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B94D B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B952 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B957 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B95C B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B961 08                         byte_1A6AD:	dc.b 8
0001B962 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B967 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B96C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B971 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B976 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B97B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B980 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B985 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B98A 0A                         byte_1A6D6:	dc.b $A
0001B98B A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B990 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B995 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B99A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B99F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B9A4 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B9A9 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B9AE D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B9B3 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B9B8 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B9BD 0C                         byte_1A709:	dc.b $C
0001B9BE A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001B9C3 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001B9C8 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001B9CD B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001B9D2 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001B9D7 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001B9DC D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001B9E1 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001B9E6 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001B9EB F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001B9F0 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001B9F5 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001B9FA 0D                         byte_1A746:	dc.b $D
0001B9FB A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA00 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA05 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA0A B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA0F B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA14 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA19 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA1E D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA23 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA28 F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA2D 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BA32 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BA37 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001BA3C 0E                         byte_1A788:	dc.b $E
0001BA3D A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001BA42 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001BA47 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001BA4C B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001BA51 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001BA56 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001BA5B D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001BA60 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001BA65 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001BA6A F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001BA6F 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001BA74 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001BA79 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001BA7E 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001BA83 02                         byte_1A7CF:	dc.b 2
0001BA84 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001BA89 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001BA8E                            		even
0001BA8E                            		even
0001BA8E                            
0001BA8E                            ; ===========================================================================
0001BA8E                            ; ---------------------------------------------------------------------------
0001BA8E                            ; Object 86 - energy balls (FZ)
0001BA8E                            ; ---------------------------------------------------------------------------
0001BA8E                            
0001BA8E                            Obj86:					; XREF: Obj_Index
0001BA8E 7000                       		moveq	#0,d0
0001BA90 1028 0024                  		move.b	$24(a0),d0
0001BA94 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001BA98 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001BA9C                            ; ===========================================================================
0001BA9C 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001BA9E 0000                       		dc.w Obj86_Generator-Obj86_Index
0001BAA0 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001BAA2 0000                       		dc.w loc_1A962-Obj86_Index
0001BAA4 0000                       		dc.w loc_1A982-Obj86_Index
0001BAA6                            ; ===========================================================================
0001BAA6                            
0001BAA6                            Obj86_Main:				; XREF: Obj86_Index
0001BAA6 317C 2588 0008             		move.w	#$2588,8(a0)
0001BAAC 317C 053C 000C             		move.w	#$53C,$C(a0)
0001BAB2 317C 0300 0002             		move.w	#$300,2(a0)
0001BAB8 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001BAC0 117C 0000 001C             		move.b	#0,$1C(a0)
0001BAC6 117C 0003 0018             		move.b	#3,$18(a0)
0001BACC 117C 0008 0017             		move.b	#8,$17(a0)
0001BAD2 117C 0008 0016             		move.b	#8,$16(a0)
0001BAD8 117C 0004 0001             		move.b	#4,1(a0)
0001BADE 08E8 0007 0001             		bset	#7,1(a0)
0001BAE4 5428 0024                  		addq.b	#2,$24(a0)
0001BAE8                            
0001BAE8                            Obj86_Generator:			; XREF: Obj86_Index
0001BAE8 2268 0034                  		movea.l	$34(a0),a1
0001BAEC 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001BAF2 6600                       		bne.s	loc_1A850
0001BAF4 10BC 003F                  		move.b	#$3F,(a0)
0001BAF8 117C 0000 0024             		move.b	#0,$24(a0)
0001BAFE 4EF9 0000 E742             		jmp	DisplaySprite
0001BB04                            ; ===========================================================================
0001BB04                            
0001BB04                            loc_1A850:
0001BB04 117C 0000 001C             		move.b	#0,$1C(a0)
0001BB0A 4A28 0029                  		tst.b	$29(a0)
0001BB0E 6700                       		beq.s	loc_1A86C
0001BB10 5428 0024                  		addq.b	#2,$24(a0)
0001BB14 117C 0001 001C             		move.b	#1,$1C(a0)
0001BB1A 117C 003E 0028             		move.b	#$3E,$28(a0)
0001BB20                            
0001BB20                            loc_1A86C:
0001BB20 323C 0013                  		move.w	#$13,d1
0001BB24 343C 0008                  		move.w	#8,d2
0001BB28 363C 0011                  		move.w	#$11,d3
0001BB2C 3828 0008                  		move.w	8(a0),d4
0001BB30 4EB9 0001 0B12             		jsr	SolidObject
0001BB36 3038 D008                  		move.w	($FFFFD008).w,d0
0001BB3A 9068 0008                  		sub.w	8(a0),d0
0001BB3E 6B00                       		bmi.s	loc_1A89A
0001BB40 0440 0140                  		subi.w	#$140,d0
0001BB44 6B00                       		bmi.s	loc_1A89A
0001BB46 4A28 0001                  		tst.b	1(a0)
0001BB4A 6A00 FBAC                  		bpl.w	Obj84_Delete
0001BB4E                            
0001BB4E                            loc_1A89A:
0001BB4E 43FA 0000                  		lea	Ani_obj86(pc),a1
0001BB52 4EB9 0000 B790             		jsr	AnimateSprite
0001BB58 4EF9 0000 E742             		jmp	DisplaySprite
0001BB5E                            ; ===========================================================================
0001BB5E                            
0001BB5E                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001BB5E 4A28 0029                  		tst.b	$29(a0)
0001BB62 6700 0000                  		beq.w	loc_1A954
0001BB66 4228 0029                  		clr.b	$29(a0)
0001BB6A D068 0030                  		add.w	$30(a0),d0
0001BB6E 0240 001E                  		andi.w	#$1E,d0
0001BB72 D4C0                       		adda.w	d0,a2
0001BB74 5868 0030                  		addq.w	#4,$30(a0)
0001BB78 4268 0032                  		clr.w	$32(a0)
0001BB7C 7403                       		moveq	#3,d2
0001BB7E                            
0001BB7E                            Obj86_Loop:
0001BB7E 4EB9 0000 EBDE             		jsr	SingleObjLoad2
0001BB84 6600 0000                  		bne.w	loc_1A954
0001BB88 12BC 0086                  		move.b	#$86,(a1)
0001BB8C 3368 0008 0008             		move.w	8(a0),8(a1)
0001BB92 337C 053C 000C             		move.w	#$53C,$C(a1)
0001BB98 137C 0008 0024             		move.b	#8,$24(a1)
0001BB9E 337C 2300 0002             		move.w	#$2300,2(a1)
0001BBA4 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001BBAC 137C 000C 0016             		move.b	#$C,$16(a1)
0001BBB2 137C 000C 0017             		move.b	#$C,$17(a1)
0001BBB8 137C 0000 0020             		move.b	#0,$20(a1)
0001BBBE 137C 0003 0018             		move.b	#3,$18(a1)
0001BBC4 337C 003E 0028             		move.w	#$3E,$28(a1)
0001BBCA 137C 0004 0001             		move.b	#4,1(a1)
0001BBD0 08E9 0007 0001             		bset	#7,1(a1)
0001BBD6 2348 0034                  		move.l	a0,$34(a1)
0001BBDA 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001BBE0 3228 0032                  		move.w	$32(a0),d1
0001BBE4 C3FC FFB1                  		muls.w	#-$4F,d1
0001BBE8 0641 2578                  		addi.w	#$2578,d1
0001BBEC 0240 001F                  		andi.w	#$1F,d0
0001BBF0 0440 0010                  		subi.w	#$10,d0
0001BBF4 D041                       		add.w	d1,d0
0001BBF6 3340 0030                  		move.w	d0,$30(a1)
0001BBFA 5268 0032                  		addq.w	#1,$32(a0)
0001BBFE 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001BC04 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001BC08                            
0001BC08                            loc_1A954:
0001BC08 4A68 0032                  		tst.w	$32(a0)
0001BC0C 6600                       		bne.s	loc_1A95E
0001BC0E 5428 0024                  		addq.b	#2,$24(a0)
0001BC12                            
0001BC12                            loc_1A95E:
0001BC12 6000 FF0C                  		bra.w	loc_1A86C
0001BC16                            ; ===========================================================================
0001BC16                            
0001BC16                            loc_1A962:				; XREF: Obj86_Index
0001BC16 117C 0002 001C             		move.b	#2,$1C(a0)
0001BC1C 4A68 0038                  		tst.w	$38(a0)
0001BC20 6600                       		bne.s	loc_1A97E
0001BC22 117C 0002 0024             		move.b	#2,$24(a0)
0001BC28 2268 0034                  		movea.l	$34(a0),a1
0001BC2C 337C FFFF 0032             		move.w	#-1,$32(a1)
0001BC32                            
0001BC32                            loc_1A97E:
0001BC32 6000 FEEC                  		bra.w	loc_1A86C
0001BC36                            ; ===========================================================================
0001BC36                            
0001BC36                            loc_1A982:				; XREF: Obj86_Index
0001BC36 7000                       		moveq	#0,d0
0001BC38 1028 0025                  		move.b	$25(a0),d0
0001BC3C 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001BC40 4EFB 0000                  		jmp	Obj86_Index2(pc,d0.w)
0001BC44                            ; ===========================================================================
0001BC44 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001BC46 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001BC48 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2	; orb random 1
0001BC4A 0000                       		dc.w Obj86_Ball_Sine-Obj86_Index2	; rob random 2
0001BC4C 0000                       		dc.w Obj86_Ball_Explode-Obj86_Index2	; orb random 3
0001BC4E 0000                       		dc.w Obj86_Ball_Speed-Obj86_Index2	; yeah you get it
0001BC50 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001BC52 0000                       		dc.w Obj86_Ball_Homing-Obj86_Index2
0001BC54 0000                       		dc.w Obj86_Ball_Standard-Obj86_Index2
0001BC56 0000                       		dc.w Obj86_Ball_Static-Obj86_Index2
0001BC58                            ; ===========================================================================
0001BC58                            
0001BC58                            loc_1A9A6:				; XREF: Obj86_Index2
0001BC58 3028 0030                  		move.w	$30(a0),d0
0001BC5C 9068 0008                  		sub.w	8(a0),d0
0001BC60 E940                       		asl.w	#4,d0
0001BC62 3140 0010                  		move.w	d0,$10(a0)
0001BC66 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001BC6C 5428 0025                  		addq.b	#2,$25(a0)
0001BC70                            
0001BC70                            Obj86_Ball_Animate:
0001BC70 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001BC74 4EB9 0000 B790             		jsr	AnimateSprite
0001BC7A 4EF9 0000 E742             		jmp	DisplaySprite
0001BC80                            ; ===========================================================================
0001BC80                            
0001BC80                            loc_1A9C0:				; XREF: Obj86_Index2
0001BC80 4A68 0010                  		tst.w	$10(a0)
0001BC84 6700                       		beq.s	loc_1A9E6
0001BC86 4EB9 0000 E71C             		jsr	SpeedToPos
0001BC8C 3028 0008                  		move.w	8(a0),d0
0001BC90 9068 0030                  		sub.w	$30(a0),d0
0001BC94 6400                       		bcc.s	loc_1A9E6
0001BC96 4268 0010                  		clr.w	$10(a0)
0001BC9A D168 0008                  		add.w	d0,8(a0)
0001BC9E 2268 0034                  		movea.l	$34(a0),a1
0001BCA2 5369 0032                  		subq.w	#1,$32(a1)
0001BCA6                            
0001BCA6                            loc_1A9E6:
0001BCA6 117C 0000 001C             		move.b	#0,$1C(a0)
0001BCAC 5368 0028                  		subq.w	#1,$28(a0)
0001BCB0 6600                       		bne.s	locret_1AA1C
0001BCB2 4EB8 33F0                  		jsr	RandomNumber
0001BCB6 0240 000E                  		and.w	#7*2,d0
0001BCBA 5840                       		addq.w	#2*2,d0
0001BCBC 1140 0025                  		move.b	d0,$25(a0)	; set routine
0001BCC0 4840                       		swap	d0
0001BCC2 3140 0028                  		move.w	d0,$28(a0)	; set other number
0001BCC6 117C 0001 001C             		move.b	#1,$1C(a0)
0001BCCC 117C 009A 0020             		move.b	#$9A,$20(a0)
0001BCD2 3038 D008                  		move.w	($FFFFD008).w,d0
0001BCD6 9068 0008                  		sub.w	8(a0),d0
0001BCDA 3140 0010                  		move.w	d0,$10(a0)
0001BCDE 317C 0140 0012             		move.w	#$140,$12(a0)
0001BCE4                            
0001BCE4                            locret_1AA1C:
0001BCE4 6000 FF8A                  		bra.w	Obj86_Ball_Animate
0001BCE8                            ; ===========================================================================
0001BCE8                            
0001BCE8                            Obj86_Ball_Explode:
0001BCE8 5328 0028                  		subq.b	#1,$28(a0)
0001BCEC 6A00 FF82                  		bpl.w	Obj86_Ball_Animate
0001BCF0 2268 0034                  		movea.l	$34(a0),a1
0001BCF4 5369 0038                  		subq.w	#1,$38(a1)
0001BCF8 2248                       		move.l	a0,a1
0001BCFA 7400                       		moveq	#0,d2	; GMZ
0001BCFC 720F                       		moveq	#16-1,d1	; GMZ: Amount of explosion objects
0001BCFE 6000                       		bra.s	@start
0001BD00                            @loop:
0001BD00 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001BD06 6600                       		bne.s	@exit
0001BD08 3368 0008 0008             		move.w	8(a0),8(a1)
0001BD0E 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001BD14                            @start:
0001BD14 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001BD18 137C 0002 0024             		move.b	#2,$24(a1)	; ML: no animal
0001BD1E 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype:
0001BD22 5802                       		addq.b	#4,d2
0001BD24 51C9 FFDA                  		dbf	d1,@loop
0001BD28                            @exit:
0001BD28 6000 FF46                  		bra.w	Obj86_Ball_Animate
0001BD2C                            ; ===========================================================================
0001BD2C                            
0001BD2C                            Obj86_Ball_Sine:
0001BD2C 1028 0028                  		move.b	$28(a0),d0
0001BD30 5828 0028                  		addq.b	#4,$28(a0)
0001BD34 4EB8 3416                  		jsr	CalcSine
0001BD38 C1FC 0002                  		muls.w	#2,d0
0001BD3C 3140 0010                  		move.w	d0,$10(a0)
0001BD40                            
0001BD40 1028 0029                  		move.b	$29(a0),d0
0001BD44 5828 0029                  		addq.b	#4,$29(a0)
0001BD48 4EB8 3416                  		jsr	CalcSine
0001BD4C 4A40                       		tst.w	d0
0001BD4E 6B00                       		bmi.s	@upwards
0001BD50 E548                       		lsl.w	#2,d0		; x4 go down faster
0001BD52                            @upwards:
0001BD52 3140 0012                  		move.w	d0,$12(a0)
0001BD56 6000 0000                  		bra.w	loc_1AA1E
0001BD5A                            ; ===========================================================================
0001BD5A                            
0001BD5A                            Obj86_Ball_Homing:
0001BD5A 0C28 00F0 0028             		cmp.b	#$F0,$28(a0)
0001BD60 6400                       		bhs.s	@homer
0001BD62 0C28 00E0 0028             		cmp.b	#$E0,$28(a0)
0001BD68 6400                       		bhs.s	Obj86_Ball_Vanish
0001BD6A 5328 0028                  		subq.b	#1,$28(a0)
0001BD6E 6400                       		bcc.s	@nomorehoming
0001BD70 3038 D008                  		move.w	($FFFFD008).w,d0
0001BD74 9068 0008                  		sub.w	8(a0),d0
0001BD78 D168 0010                  		add.w	d0,$10(a0)
0001BD7C D168 0010                  		add.w	d0,$10(a0)
0001BD80                            @nomorehoming:
0001BD80 6000 0000                  		bra.w	loc_1AA1E
0001BD84                            @homer:
0001BD84 0C28 00DF 0028             		cmp.b	#$DF,$28(a0)
0001BD8A 60F4                       		bra.s	@nomorehoming	; next frame ig
0001BD8C                            ; ===========================================================================
0001BD8C                            
0001BD8C                            Obj86_Ball_Speed:
0001BD8C 4268 0010                  		clr.w	$10(a0)
0001BD90 7000                       		moveq	#0,d0
0001BD92 1028 0028                  		move.b	$28(a0),d0
0001BD96 E448                       		lsr.w	#2,d0
0001BD98 D168 0012                  		add.w	d0,$12(a0)
0001BD9C 1028 0029                  		move.b	$29(a0),d0
0001BDA0 D128 0028                  		add.b	d0,$28(a0)
0001BDA4 6000 0000                  		bra.w	loc_1AA1E
0001BDA8                            ; ===========================================================================
0001BDA8                            
0001BDA8                            Obj86_Ball_Vanish:
0001BDA8 303C 00E1                  		move.w	#$E1,d0
0001BDAC 4EB9 0000 1C74             		jsr	(PlaySound_Special).l
0001BDB2 6000 0000                  		bra.w	loc_1AA34
0001BDB6                            ; ===========================================================================
0001BDB6                            
0001BDB6                            Obj86_Ball_Static:
0001BDB6 4268 0010                  		clr.w	$10(a0)
0001BDBA 7000                       		moveq	#0,d0
0001BDBC 7200                       		moveq	#0,d1
0001BDBE 1028 0028                  		move.b	$28(a0),d0
0001BDC2 1228 0029                  		move.b	$29(a0),d1
0001BDC6 D041                       		add.w	d1,d0
0001BDC8 3140 0012                  		move.w	d0,$12(a0)
0001BDCC 6000 0000                  		bra.w	loc_1AA1E
0001BDD0                            ; ===========================================================================
0001BDD0                            
0001BDD0                            Obj86_Ball_Standard:
0001BDD0                            loc_1AA1E:
0001BDD0 4EB9 0000 E71C             		jsr	SpeedToPos
0001BDD6 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001BDDC 6500 FE92                  		blo.w	Obj86_Ball_Animate
0001BDE0                            loc_1AA34:
0001BDE0 2268 0034                  		movea.l	$34(a0),a1
0001BDE4 5369 0038                  		subq.w	#1,$38(a1)
0001BDE8 6000 F90E                  		bra.w	Obj84_Delete
0001BDEC                            ; ===========================================================================
0001BDEC                            Ani_obj86:
0001BDEC                            	include "_anim\obj86.asm"
0001BDEC                            ; ---------------------------------------------------------------------------
0001BDEC                            ; Animation script - energy ball launcher (FZ)
0001BDEC                            ; ---------------------------------------------------------------------------
0001BDEC 0000                       		dc.w byte_1AA46-Ani_obj86
0001BDEE 0000                       		dc.w byte_1AA4A-Ani_obj86
0001BDF0 0000                       		dc.w byte_1AA50-Ani_obj86
0001BDF2 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001BDF6 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001BDFC 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001BE02                            		even
0001BE02                            		even
0001BE02                            
0001BE02                            ; ---------------------------------------------------------------------------
0001BE02                            ; Sprite mappings - energy ball	launcher (FZ)
0001BE02                            ; ---------------------------------------------------------------------------
0001BE02                            Map_obj86:
0001BE02                            	include "_maps\obj86.asm"
0001BE02                            ; ---------------------------------------------------------------------------
0001BE02                            ; Sprite mappings - energy ball	launcher (FZ)
0001BE02                            ; ---------------------------------------------------------------------------
0001BE02 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001BE06 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001BE0A 01                         byte_1AA5E:	dc.b 1
0001BE0B F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001BE10 01                         byte_1AA64:	dc.b 1
0001BE11 F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001BE16 01                         byte_1AA6A:	dc.b 1
0001BE17 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001BE1C 01                         byte_1AA70:	dc.b 1
0001BE1D F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001BE22                            		even
0001BE22                            		even
0001BE22                            
0001BE22                            Ani_obj86a:
0001BE22                            	include "_anim\obj86a.asm"
0001BE22                            ; ---------------------------------------------------------------------------
0001BE22                            ; Animation script - energy balls (FZ)
0001BE22                            ; ---------------------------------------------------------------------------
0001BE22 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001BE24 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001BE26 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001BE35 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001BE44 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001BE48 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001BE52                            		even
0001BE52                            		even
0001BE52                            
0001BE52                            ; ---------------------------------------------------------------------------
0001BE52                            ; Sprite mappings - energy balls (FZ)
0001BE52                            ; ---------------------------------------------------------------------------
0001BE52                            Map_obj86a:
0001BE52                            	include "_maps\obj86a.asm"
0001BE52                            ; ---------------------------------------------------------------------------
0001BE52                            ; Sprite mappings - energy balls (FZ)
0001BE52                            ; ---------------------------------------------------------------------------
0001BE52 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001BE56 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001BE5A 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001BE5E 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001BE62 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001BE66 0000                       		dc.w byte_1AB20-Map_obj86a
0001BE68 02                         byte_1AABC:	dc.b 2
0001BE69 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001BE6E 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001BE73 02                         byte_1AAC7:	dc.b 2
0001BE74 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001BE79 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001BE7E 02                         byte_1AAD2:	dc.b 2
0001BE7F F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001BE84 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001BE89 02                         byte_1AADD:	dc.b 2
0001BE8A F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001BE8F 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001BE94 02                         byte_1AAE8:	dc.b 2
0001BE95 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001BE9A 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001BE9F 02                         byte_1AAF3:	dc.b 2
0001BEA0 F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001BEA5 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001BEAA 01                         byte_1AAFE:	dc.b 1
0001BEAB F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001BEB0 01                         byte_1AB04:	dc.b 1
0001BEB1 F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001BEB6 02                         byte_1AB0A:	dc.b 2
0001BEB7 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001BEBC 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001BEC1 02                         byte_1AB15:	dc.b 2
0001BEC2 F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001BEC7 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001BECC 00                         byte_1AB20:	dc.b 0
0001BECE 00                         		even
0001BECE 00                         		even
0001BECE                            
0001BECE                            ; ===========================================================================
0001BECE                            ; ---------------------------------------------------------------------------
0001BECE                            ; Object 3E - prison capsule
0001BECE                            ; ---------------------------------------------------------------------------
0001BECE                            
0001BECE                            Obj3E:					; XREF: Obj_Index
0001BECE 7000                       		moveq	#0,d0
0001BED0 1028 0024                  		move.b	$24(a0),d0
0001BED4 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001BED8 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001BEDC 3028 0008                  		move.w	8(a0),d0
0001BEE0 0240 FF80                  		andi.w	#$FF80,d0
0001BEE4 3238 F700                  		move.w	($FFFFF700).w,d1
0001BEE8 0441 0080                  		subi.w	#$80,d1
0001BEEC 0241 FF80                  		andi.w	#$FF80,d1
0001BEF0 9041                       		sub.w	d1,d0
0001BEF2 0C40 0280                  		cmpi.w	#$280,d0
0001BEF6 6200                       		bhi.s	Obj3E_Delete
0001BEF8 4EF9 0000 E742             		jmp	DisplaySprite
0001BEFE                            ; ===========================================================================
0001BEFE                            
0001BEFE                            Obj3E_Delete:
0001BEFE 4EF9 0000 E77E             		jmp	DeleteObject
0001BF04                            ; ===========================================================================
0001BF04 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001BF06 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001BF08 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001BF0A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF0C 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF0E 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001BF10 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001BF12 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001BF14                            
0001BF14 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001BF18 040C 0501                  		dc.b 4,	$C, 5, 1
0001BF1C 0610 0403                  		dc.b 6,	$10, 4,	3
0001BF20 0810 0305                  		dc.b 8,	$10, 3,	5
0001BF24                            ; ===========================================================================
0001BF24                            
0001BF24                            Obj3E_Main:				; XREF: Obj3E_Index
0001BF24 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001BF2C 317C 049D 0002             		move.w	#$49D,2(a0)
0001BF32 117C 0004 0001             		move.b	#4,1(a0)
0001BF38 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001BF3E 7000                       		moveq	#0,d0
0001BF40 1028 0028                  		move.b	$28(a0),d0
0001BF44 E548                       		lsl.w	#2,d0
0001BF46 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001BF4A 1159 0024                  		move.b	(a1)+,$24(a0)
0001BF4E 1159 0019                  		move.b	(a1)+,$19(a0)
0001BF52 1159 0018                  		move.b	(a1)+,$18(a0)
0001BF56 1159 001A                  		move.b	(a1)+,$1A(a0)
0001BF5A 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001BF5E 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001BF60 117C 0006 0020             		move.b	#6,$20(a0)
0001BF66 117C 0008 0021             		move.b	#8,$21(a0)
0001BF6C                            
0001BF6C                            Obj3E_Not02:
0001BF6C 4E75                       		rts	
0001BF6E                            ; ===========================================================================
0001BF6E                            
0001BF6E                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001BF6E 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001BF74 6700                       		beq.s	Obj3E_ChkOpened
0001BF76 323C 002B                  		move.w	#$2B,d1
0001BF7A 343C 0018                  		move.w	#$18,d2
0001BF7E 363C 0018                  		move.w	#$18,d3
0001BF82 3828 0008                  		move.w	8(a0),d4
0001BF86 4EF9 0001 0B12             		jmp	SolidObject
0001BF8C                            ; ===========================================================================
0001BF8C                            
0001BF8C                            Obj3E_ChkOpened:
0001BF8C 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001BF90 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001BF92 4228 0025                  		clr.b	$25(a0)
0001BF96 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001BF9C 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001BFA2                            
0001BFA2                            Obj3E_DoOpen:
0001BFA2 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001BFA8 4E75                       		rts	
0001BFAA                            ; ===========================================================================
0001BFAA                            
0001BFAA                            Obj3E_Switched:				; XREF: Obj3E_Index
0001BFAA 323C 0017                  		move.w	#$17,d1
0001BFAE 343C 0008                  		move.w	#8,d2
0001BFB2 363C 0008                  		move.w	#8,d3
0001BFB6 3828 0008                  		move.w	8(a0),d4
0001BFBA 4EB9 0001 0B12             		jsr	SolidObject
0001BFC0 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001BFC6 4EB9 0000 B790             		jsr	AnimateSprite
0001BFCC 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001BFD2 4A28 0025                  		tst.b	$25(a0)
0001BFD6 6700                       		beq.s	locret_1AC60
0001BFD8 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001BFDC 6600                       		bne.s	Obj3E_SkipScrPosChk	; GMZ: If not, branch
0001BFDE 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w	; GMZ: Is screen X pos 2AC0?
0001BFE4 6600                       		bne.s	locret_1AC60	; GMZ: If not, branch
0001BFE6                            
0001BFE6                            Obj3E_SkipScrPosChk:
0001BFE6 5068 000C                  		addq.w	#8,$C(a0)
0001BFEA 117C 000A 0024             		move.b	#$A,$24(a0)
0001BFF0                            		; move.w	#$3C,$1E(a0)
0001BFF0 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001BFF4 6600                       		bne.s	Obj3E_SetNormalTimer	; GMZ: If not, branch
0001BFF6 317C 0100 001E             		move.w	#$100,$1E(a0)	; GMZ: Timer for "Sonic Got Through"
0001BFFC 6000                       		bra.s	Obj3E_LockCtrl	; GMZ
0001BFFE                            
0001BFFE                            Obj3E_SetNormalTimer:	; GMZ
0001BFFE 317C 003C 001E             		move.w	#$3C,$1E(a0)	; GMZ
0001C004                            
0001C004                            Obj3E_LockCtrl:	; GMZ
0001C004 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001C008 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001C00C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001C012 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C016 6700                       		beq.s	Obj3E_NoCtrl	; GMZ: If yes, branch
0001C018 0838 0000 FE2F             		btst	#0,($FFFFFE2F).w	; GMZ: Have we got a reverse control power up?
0001C01E 6700                       		beq.s	Obj3E_MoveLeft	; GMZ: If not, branch
0001C020 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; make Sonic run to	the right
0001C026 6000                       		bra.s	Obj3E_ContinueCode
0001C028                            
0001C028                            Obj3E_MoveLeft:
0001C028 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001C02E                            
0001C02E                            Obj3E_NoCtrl:	; GMZ
0001C02E                            Obj3E_ContinueCode:
0001C02E 4228 0025                  		clr.b	$25(a0)
0001C032 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C036 6700                       		beq.s	Obj3E_LoadTruthNuke	; GMZ: If yes, branch
0001C038 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001C03E 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001C044                            
0001C044                            locret_1AC60:
0001C044 4E75                       		rts	
0001C046                            
0001C046                            Obj3E_LoadTruthNuke:	; GMZ
0001C046 2448                       		move.l	a0,a2	; GMZ
0001C048 207C FFFF D000             		move.l	#$FFFFD000,a0
0001C04E 4EB9 0000 E77E             		jsr	DeleteObject	; GMZ: Delete Sonic's object
0001C054 207C FFFF D040             		move.l	#$FFFFD040,a0
0001C05A 4EB9 0000 E77E             		jsr	DeleteObject	; GMZ: Delete the HUD object
0001C060 204A                       		move.l	a2,a0
0001C062 303C 00E4                  		move.w	#$E4,d0
0001C066 4EB8 1C74                  		jsr	PlaySound_Special	; GMZ: Stop music
0001C06A 303C 00CD                  		move.w	#$CD,d0
0001C06E 4EB8 1C6E                  		jsr	PlaySound	; GMZ: Play a button sound
0001C072 11FC 0001 FFF9             		move.b	#1,($FFFFFFF9).w	; GMZ: Set truth nuke flag
0001C078 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001C07C 4EB8 2828                  		jsr	Pal_MakeFlash
0001C080 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001C084 31FC 0000 FBC0             		move.w	#$0000,($FFFFFBC0).w	; GMZ: Make BG color black
0001C08A                            		; lea	(Obj3E_TNScrPos).l,a1
0001C08A                            		; moveq	#0,d2
0001C08A                            		; move.b	($FFFFFE10).w,d2
0001C08A                            		; lsl.l	#3,d2
0001C08A                            		; move.l	(a1,d2.w),d0
0001C08A                            		; move.l	4(a1,d2.w),d1
0001C08A                            		; move.l	d0,($FFFFF700).w
0001C08A                            		; move.l	d1,($FFFFF704).w
0001C08A                            		; cmpi.b	#8,d2
0001C08A                            		; ; beq.s	Obj3E_IsLZ
0001C08A                            		; ; move.l	#$00000000,($FFFFF704).w	; GMZ: Set camera to the top of the stage
0001C08A                            		; ; bra.s	Obj3E_IsntLZ
0001C08A                            		; bne.s	Obj3E_IsntLZ
0001C08A                            
0001C08A                            ; Obj3E_IsLZ:
0001C08A                            		; move.l	#$01600000,($FFFFD00C).w
0001C08A                            		; move.l	#$01000000,($FFFFF704).w
0001C08A                            		; move.l	#$20300000,($FFFFF700).w
0001C08A                            		; move.l	#0,($FFFFF646).w
0001C08A                            		; move.l	#0,($FFFFF64A).w
0001C08A                            		; move.b	#0,($FFFFF64E).w
0001C08A 21FC 2AC0 0000 F700        		move.l	#$2AC00000,($FFFFF700).w	; GMZ
0001C092 21FC 0000 0000 F704        		move.l	#$00000000,($FFFFF704).w	; GMZ
0001C09A                            
0001C09A                            Obj3E_IsntLZ:
0001C09A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001C0A0 7000                       		moveq	#0,d0
0001C0A2 7200                       		moveq	#0,d1
0001C0A4 303C 0A40                  		move.w	#$A40,d0
0001C0A8                            
0001C0A8                            Obj3E_ClearChunks:
0001C0A8 22C1                       		move.l	d1,(a1)+
0001C0AA 22C1                       		move.l	d1,(a1)+
0001C0AC 22C1                       		move.l	d1,(a1)+
0001C0AE 22C1                       		move.l	d1,(a1)+	; GMZ: Clear chunks to prevent garbage from appearing
0001C0B0 51C8 FFF6                  		dbf	d0,Obj3E_ClearChunks
0001C0B4 43F9 00FF A400             		lea	($FFA400).l,a1
0001C0BA 303C 0100                  		move.w	#$100,d0
0001C0BE                            
0001C0BE                            Obj3E_ClearLayout:
0001C0BE 22C1                       		move.l	d1,(a1)+	; GMZ: Clear layout to prevent garbage from appearing
0001C0C0 51C8 FFFC                  		dbf	d0,Obj3E_ClearLayout
0001C0C4                            
0001C0C4 4EB8 1B9A                  		jsr	ClearScreen
0001C0C8 4EB8 1EB6                  		jsr	ClearPLC
0001C0CC 7023                       		moveq	#$23,d0
0001C0CE 4EB8 1E58                  		jsr	LoadPLC	; GMZ: Load art
0001C0D2 2448                       		move.l	a0,a2	; Save a0 to a2
0001C0D4 43F9 00FF B010             		lea	($FFB010).l,a1
0001C0DA 41F9 0000 0000             		lea	(Eni_TruthNuke).l,a0
0001C0E0 303C 0000                  		move.w	#0,d0
0001C0E4 4EB8 1FF6                  		jsr	EniDec
0001C0E8 43F9 00FF B010             		lea	($FFB010).l,a1
0001C0EE 203C 4000 0003             		move.l	#$40000003,d0
0001C0F4 7200                       		moveq	#0,d1
0001C0F6 3238 F700                  		move.w	($FFFFF700).w,d1
0001C0FA 0241 01F8                  		andi.w	#$1F8,d1
0001C0FE E189                       		lsl.l	#8,d1
0001C100 ED89                       		lsl.l	#6,d1
0001C102 D081                       		add.l	d1,d0	; GMZ: Get correct plane position
0001C104 7227                       		moveq	#$27,d1
0001C106 741B                       		moveq	#$1B,d2
0001C108 4EB8 1CF8                  		jsr	ShowVDPGraphics	; GMZ: Load plane mappings
0001C10C 204A                       		move.l	a2,a0	; GMZ: Recover a0 from a2
0001C10E 4E75                       		rts	
0001C110                            ; ===========================================================================
0001C110                            
0001C110                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001C110 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C114 6700                       		beq.s	Obj3E_TNExplosion	; GMZ: If yes, branch
0001C116 7007                       		moveq	#7,d0
0001C118 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C11C 6600                       		bne.s	loc_1ACA0
0001C11E 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001C124 6600                       		bne.s	loc_1ACA0
0001C126 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001C12A 3368 0008 0008             		move.w	8(a0),8(a1)
0001C130 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C136 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001C13C 7200                       		moveq	#0,d1
0001C13E 1200                       		move.b	d0,d1
0001C140 E409                       		lsr.b	#2,d1
0001C142 0441 0020                  		subi.w	#$20,d1
0001C146 D369 0008                  		add.w	d1,8(a1)
0001C14A E048                       		lsr.w	#8,d0
0001C14C E608                       		lsr.b	#3,d0
0001C14E D169 000C                  		add.w	d0,$C(a1)
0001C152                            
0001C152                            loc_1ACA0:
0001C152 5368 001E                  		subq.w	#1,$1E(a0)
0001C156 6700                       		beq.s	Obj3E_MakeAnimal
0001C158 4E75                       		rts	
0001C15A                            
0001C15A                            Obj3E_TNExplosion:
0001C15A 303C 00C1                  		move.w	#$C1,d0
0001C15E 4EB8 1C6E                  		jsr	PlaySound	; GMZ: Play multiple explosion sounds while we wait
0001C162 5368 001E                  		subq.w	#1,$1E(a0)
0001C166 6700 0000                  		beq.w	Obj3E_TNExplTimerOver	; GMZ: If timer is 0, branch
0001C16A 4E75                       		rts
0001C16C                            
0001C16C                            Obj3E_TNExplTimerOver:	; GMZ
0001C16C 48E7 FF80                  		movem.l	d0-d7/a0,-(sp)
0001C170 4EB8 277C                  		jsr	Pal_MakeWhite	; GMZ: Fade out from black
0001C174 4CDF 01FF                  		movem.l	(sp)+,d0-d7/a0
0001C178 317C 0080 001E             		move.w	#$80,$1E(a0)	; GMZ: Set new timer
0001C17E 117C 000E 0024             		move.b	#$E,$24(a0)	; GMZ: Set routine to 0E (End Act)
0001C184 4E75                       		rts	
0001C186                            ; ===========================================================================
0001C186                            
0001C186                            Obj3E_MakeAnimal:
0001C186 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001C18C 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001C192 117C 0006 001A             		move.b	#6,$1A(a0)
0001C198 317C 0096 001E             		move.w	#$96,$1E(a0)
0001C19E 0668 0020 000C             		addi.w	#$20,$C(a0)
0001C1A4 7C07                       		moveq	#7,d6
0001C1A6 3A3C 009A                  		move.w	#$9A,d5
0001C1AA 78E4                       		moveq	#-$1C,d4
0001C1AC                            
0001C1AC                            Obj3E_Loop:
0001C1AC 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001C1B2 6600                       		bne.s	locret_1ACF8
0001C1B4 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C1B8 3368 0008 0008             		move.w	8(a0),8(a1)
0001C1BE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C1C4 D969 0008                  		add.w	d4,8(a1)
0001C1C8 5E44                       		addq.w	#7,d4
0001C1CA 3345 0036                  		move.w	d5,$36(a1)
0001C1CE 5145                       		subq.w	#8,d5
0001C1D0 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001C1D4                            
0001C1D4                            locret_1ACF8:
0001C1D4 4E75                       		rts	
0001C1D6                            ; ===========================================================================
0001C1D6                            
0001C1D6                            Obj3E_Animals:				; XREF: Obj3E_Index
0001C1D6 7007                       		moveq	#7,d0
0001C1D8 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001C1DC 6600                       		bne.s	loc_1AD38
0001C1DE 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001C1E4 6600                       		bne.s	loc_1AD38
0001C1E6 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001C1EA 3368 0008 0008             		move.w	8(a0),8(a1)
0001C1F0 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C1F6 4EB9 0000 33F0             		jsr	(RandomNumber).l
0001C1FC 0240 001F                  		andi.w	#$1F,d0
0001C200 5D40                       		subq.w	#6,d0
0001C202 4A41                       		tst.w	d1
0001C204 6A00                       		bpl.s	loc_1AD2E
0001C206 4440                       		neg.w	d0
0001C208                            
0001C208                            loc_1AD2E:
0001C208 D169 0008                  		add.w	d0,8(a1)
0001C20C 337C 000C 0036             		move.w	#$C,$36(a1)
0001C212                            
0001C212                            loc_1AD38:
0001C212 5368 001E                  		subq.w	#1,$1E(a0)
0001C216 6600                       		bne.s	locret_1AD48
0001C218 5428 0024                  		addq.b	#2,$24(a0)
0001C21C 317C 00B4 001E             		move.w	#180,$1E(a0)
0001C222                            
0001C222                            locret_1AD48:
0001C222 4E75                       		rts	
0001C224                            ; ===========================================================================
0001C224                            
0001C224                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001C224 4A38 FE10                  		tst.b	($FFFFFE10).w	; GMZ: Are we in GHZ?
0001C228 6700                       		beq.s	Obj3E_TNEndAct	; GMZ: If yes, branch
0001C22A 703E                       		moveq	#$3E,d0
0001C22C 7228                       		moveq	#$28,d1
0001C22E 7440                       		moveq	#$40,d2
0001C230 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001C234                            
0001C234                            Obj3E_FindObj28:
0001C234 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001C236 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001C238 D2C2                       		adda.w	d2,a1		; next object RAM
0001C23A 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001C23E                            
0001C23E 4EB9 0000 FDCE             		jsr	GotThroughAct
0001C244 4EF9 0000 E77E             		jmp	DeleteObject
0001C24A                            
0001C24A                            Obj3E_TNEndAct:
0001C24A 5368 001E                  		subq.w	#1,$1E(a0)	; GMZ: Wait some frames
0001C24E 6600                       		bne.s	Obj3E_Obj28Found	; GMZ: If timer isn't 0, branch
0001C250                            
0001C250 4EB9 0000 FDCE             		jsr	GotThroughAct
0001C256 4EF9 0000 E77E             		jmp	DeleteObject
0001C25C                            ; ===========================================================================
0001C25C                            
0001C25C                            Obj3E_Obj28Found:
0001C25C 4E75                       		rts	
0001C25E                            ; ===========================================================================
0001C25E                            Ani_obj3E:
0001C25E                            	include "_anim\obj3E.asm"
0001C25E                            ; ---------------------------------------------------------------------------
0001C25E                            ; Animation script - prison capsule
0001C25E                            ; ---------------------------------------------------------------------------
0001C25E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C260 0000                       		dc.w byte_1AD70-Ani_obj3E
0001C262 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001C266                            		even
0001C266                            		even
0001C266                            
0001C266                            ; ---------------------------------------------------------------------------
0001C266                            ; Sprite mappings - prison capsule
0001C266                            ; ---------------------------------------------------------------------------
0001C266                            Map_obj3E:
0001C266                            	include "_maps\obj3E.asm"
0001C266                            ; ---------------------------------------------------------------------------
0001C266                            ; Sprite mappings - prison capsule
0001C266                            ; ---------------------------------------------------------------------------
0001C266 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001C26A 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001C26E 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001C272 0000                       		dc.w byte_1ADE2-Map_obj3E
0001C274 07                         byte_1AD82:	dc.b 7
0001C275 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001C27A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001C27F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001C284 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001C289 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001C28E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C293 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C298 01                         byte_1ADA6:	dc.b 1
0001C299 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001C29E 06                         byte_1ADAC:	dc.b 6
0001C29F 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001C2A4 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001C2A9 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001C2AE 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001C2B3 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001C2B8 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001C2BD 01                         byte_1ADCB:	dc.b 1
0001C2BE F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001C2C3 02                         byte_1ADD1:	dc.b 2
0001C2C4 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001C2C9 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001C2CE 01                         byte_1ADDC:	dc.b 1
0001C2CF F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001C2D4 00                         byte_1ADE2:	dc.b 0
0001C2D6 00                         		even
0001C2D6 00                         		even
0001C2D6                            
0001C2D6                            ; ---------------------------------------------------------------------------
0001C2D6                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001C2D6                            ; ---------------------------------------------------------------------------
0001C2D6                            
0001C2D6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2D6                            
0001C2D6                            
0001C2D6                            TouchResponse:				; XREF: Obj01
0001C2D6 4E71                       		nop	
0001C2D8 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001C2DC 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001C2E0 5142                       		subq.w	#8,d2
0001C2E2 7A00                       		moveq	#0,d5
0001C2E4 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001C2E8 5705                       		subq.b	#3,d5
0001C2EA 9645                       		sub.w	d5,d3
0001C2EC 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001C2F2 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001C2F4 0643 000C                  		addi.w	#$C,d3
0001C2F8 7A0A                       		moveq	#$A,d5
0001C2FA                            
0001C2FA                            Touch_NoDuck:
0001C2FA 383C 0010                  		move.w	#$10,d4
0001C2FE DA45                       		add.w	d5,d5
0001C300 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001C304 3C3C 005F                  		move.w	#$5F,d6
0001C308                            
0001C308                            Touch_Loop:
0001C308 4A29 0001                  		tst.b	1(a1)
0001C30C 6A00                       		bpl.s	Touch_NextObj
0001C30E 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001C312 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001C314                            
0001C314                            Touch_NextObj:
0001C314 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001C318 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001C31C                            
0001C31C 7000                       		moveq	#0,d0
0001C31E 4E75                       		rts	
0001C320                            ; ===========================================================================
0001C320 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001C322 0C14                       		dc.b   $C, $14
0001C324 140C                       		dc.b  $14,  $C
0001C326 0410                       		dc.b	4, $10
0001C328 0C12                       		dc.b   $C, $12
0001C32A 1010                       		dc.b  $10, $10
0001C32C 0606                       		dc.b	6,   6
0001C32E 180C                       		dc.b  $18,  $C
0001C330 0C10                       		dc.b   $C, $10
0001C332 100C                       		dc.b  $10,  $C
0001C334 0808                       		dc.b	8,   8
0001C336 1410                       		dc.b  $14, $10
0001C338 1408                       		dc.b  $14,   8
0001C33A 0E0E                       		dc.b   $E,  $E
0001C33C 1818                       		dc.b  $18, $18
0001C33E 2810                       		dc.b  $28, $10
0001C340 1018                       		dc.b  $10, $18
0001C342 0810                       		dc.b	8, $10
0001C344 2070                       		dc.b  $20, $70
0001C346 4020                       		dc.b  $40, $20
0001C348 8020                       		dc.b  $80, $20
0001C34A 2020                       		dc.b  $20, $20
0001C34C 0808                       		dc.b	8,   8
0001C34E 0404                       		dc.b	4,   4
0001C350 2008                       		dc.b  $20,   8
0001C352 0C0C                       		dc.b   $C,  $C
0001C354 0804                       		dc.b	8,   4
0001C356 1804                       		dc.b  $18,   4
0001C358 2804                       		dc.b  $28,   4
0001C35A 0408                       		dc.b	4,   8
0001C35C 0418                       		dc.b	4, $18
0001C35E 0428                       		dc.b	4, $28
0001C360 0420                       		dc.b	4, $20
0001C362 1818                       		dc.b  $18, $18
0001C364 0C18                       		dc.b   $C, $18
0001C366 4808                       		dc.b  $48,   8
0001C368                            ; ===========================================================================
0001C368                            
0001C368                            Touch_Height:				; XREF: TouchResponse
0001C368 0240 003F                  		andi.w	#$3F,d0
0001C36C D040                       		add.w	d0,d0
0001C36E 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001C372 7200                       		moveq	#0,d1
0001C374 121A                       		move.b	(a2)+,d1
0001C376 3029 0008                  		move.w	8(a1),d0
0001C37A 9041                       		sub.w	d1,d0
0001C37C 9042                       		sub.w	d2,d0
0001C37E 6400                       		bcc.s	loc_1AE98
0001C380 D241                       		add.w	d1,d1
0001C382 D041                       		add.w	d1,d0
0001C384 6500                       		bcs.s	Touch_Width
0001C386 6000 FF8C                  		bra.w	Touch_NextObj
0001C38A                            ; ===========================================================================
0001C38A                            
0001C38A                            loc_1AE98:
0001C38A B044                       		cmp.w	d4,d0
0001C38C 6200 FF86                  		bhi.w	Touch_NextObj
0001C390                            
0001C390                            Touch_Width:
0001C390 7200                       		moveq	#0,d1
0001C392 121A                       		move.b	(a2)+,d1
0001C394 3029 000C                  		move.w	$C(a1),d0
0001C398 9041                       		sub.w	d1,d0
0001C39A 9043                       		sub.w	d3,d0
0001C39C 6400                       		bcc.s	loc_1AEB6
0001C39E D241                       		add.w	d1,d1
0001C3A0 D240                       		add.w	d0,d1
0001C3A2 6500                       		bcs.s	Touch_ChkValue
0001C3A4 6000 FF6E                  		bra.w	Touch_NextObj
0001C3A8                            ; ===========================================================================
0001C3A8                            
0001C3A8                            loc_1AEB6:
0001C3A8 B045                       		cmp.w	d5,d0
0001C3AA 6200 FF68                  		bhi.w	Touch_NextObj
0001C3AE                            
0001C3AE                            Touch_ChkValue:
0001C3AE 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001C3B2 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001C3B6 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001C3BA 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001C3BE 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001C3C2 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001C3C4 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001C3C8                            
0001C3C8                            ; touch	response is $40-$7F
0001C3C8                            
0001C3C8 1029 0020                  		move.b	$20(a1),d0
0001C3CC 0200 003F                  		andi.b	#$3F,d0
0001C3D0 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001C3D4 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001C3D6 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001C3DC 6400 0000                  		bcc.w	locret_1AEF2
0001C3E0 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001C3E4                            
0001C3E4                            locret_1AEF2:
0001C3E4 4E75                       		rts	
0001C3E6                            ; ===========================================================================
0001C3E6                            
0001C3E6                            Touch_Monitor:
0001C3E6 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001C3EA 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001C3EC 3028 000C                  		move.w	$C(a0),d0
0001C3F0 0440 0010                  		subi.w	#$10,d0
0001C3F4 B069 000C                  		cmp.w	$C(a1),d0
0001C3F8 6500                       		bcs.s	locret_1AF2E
0001C3FA 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C3FE 337C FE80 0012             		move.w	#-$180,$12(a1)
0001C404 4A29 0025                  		tst.b	$25(a1)
0001C408 6600                       		bne.s	locret_1AF2E
0001C40A 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001C40E 4E75                       		rts	
0001C410                            ; ===========================================================================
0001C410                            
0001C410                            loc_1AF1E:
0001C410 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001C416 6600                       		bne.s	locret_1AF2E
0001C418 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001C41C 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001C420                            
0001C420                            locret_1AF2E:
0001C420 4E75                       		rts	
0001C422                            ; ===========================================================================
0001C422                            
0001C422                            Touch_Enemy:				; XREF: Touch_ChkValue
0001C422 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C426 6600                       		bne.s	loc_1AF40	; if yes, branch
0001C428 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001C42E 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001C432                            
0001C432                            loc_1AF40:
0001C432 4A29 0021                  		tst.b	$21(a1)
0001C436 6700                       		beq.s	Touch_KillEnemy
0001C438 4468 0010                  		neg.w	$10(a0)
0001C43C 4468 0012                  		neg.w	$12(a0)
0001C440 E0E8 0010                  		asr	$10(a0)
0001C444 E0E8 0012                  		asr	$12(a0)
0001C448 137C 0000 0020             		move.b	#0,$20(a1)
0001C44E 5329 0021                  		subq.b	#1,$21(a1)
0001C452 6600                       		bne.s	locret_1AF68
0001C454 08E9 0007 0022             		bset	#7,$22(a1)
0001C45A                            
0001C45A                            locret_1AF68:
0001C45A 4E75                       		rts	
0001C45C                            ; ===========================================================================
0001C45C                            
0001C45C                            Touch_KillEnemy:
0001C45C 08E9 0007 0022             		bset	#7,$22(a1)
0001C462 7000                       		moveq	#0,d0
0001C464 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001C468 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001C46C 0C40 0006                  		cmpi.w	#6,d0
0001C470 6500                       		bcs.s	loc_1AF82
0001C472 7006                       		moveq	#6,d0
0001C474                            
0001C474                            loc_1AF82:
0001C474 3340 003E                  		move.w	d0,$3E(a1)
0001C478 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001C47C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001C482 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001C484 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001C488 337C 000A 003E             		move.w	#$A,$3E(a1)
0001C48E                            
0001C48E                            loc_1AF9C:
0001C48E 6100 0000                  		bsr.w	AddPoints
0001C492 7400                       		moveq	#0,d2	; GMZ
0001C494 7205                       		moveq	#5,d1	; GMZ: Amount of explosion objects
0001C496 2449                       		move.l	a1,a2	; GMZ: Save a1 address on a2
0001C498                            
0001C498                            TouchKE_Explode:
0001C498 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001C49C 137C 0000 0024             		move.b	#0,$24(a1)
0001C4A2 1342 0028                  		move.b	d2,$28(a1)	; GMZ: Set subtype
0001C4A6                            
0001C4A6                            TouchKE_NextExplosion:
0001C4A6 5802                       		addq.b	#4,d2
0001C4A8 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001C4AE 6600                       		bne.s	TouchKE_NoExplosion
0001C4B0 336A 0008 0008             		move.w	8(a2),8(a1)
0001C4B6 336A 000C 000C             		move.w	$C(a2),$C(a1)
0001C4BC 51C9 FFDA                  		dbf	d1,TouchKE_Explode
0001C4C0                            
0001C4C0                            TouchKE_NoExplosion:
0001C4C0 224A                       		move.l	a2,a1	; GMZ: Restore original a1 address
0001C4C2 4A68 0012                  		tst.w	$12(a0)
0001C4C6 6B00                       		bmi.s	loc_1AFC2
0001C4C8 3028 000C                  		move.w	$C(a0),d0
0001C4CC B069 000C                  		cmp.w	$C(a1),d0
0001C4D0 6400                       		bcc.s	loc_1AFCA
0001C4D2 4468 0012                  		neg.w	$12(a0)
0001C4D6 4E75                       		rts	
0001C4D8                            ; ===========================================================================
0001C4D8                            
0001C4D8                            loc_1AFC2:
0001C4D8 0668 0100 0012             		addi.w	#$100,$12(a0)
0001C4DE 4E75                       		rts	
0001C4E0                            ; ===========================================================================
0001C4E0                            
0001C4E0                            loc_1AFCA:
0001C4E0 0468 0100 0012             		subi.w	#$100,$12(a0)
0001C4E6 4E75                       		rts	
0001C4E8                            ; ===========================================================================
0001C4E8 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001C4F0                            ; ===========================================================================
0001C4F0                            
0001C4F0                            loc_1AFDA:				; XREF: Touch_CatKiller
0001C4F0 08E9 0007 0022             		bset	#7,$22(a1)
0001C4F6                            
0001C4F6                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001C4F6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001C4FA 6700                       		beq.s	Touch_Hurt	; if not, branch
0001C4FC                            
0001C4FC                            loc_1AFE6:				; XREF: Touch_Hurt
0001C4FC 70FF                       		moveq	#-1,d0
0001C4FE 4E75                       		rts	
0001C500                            ; ===========================================================================
0001C500                            
0001C500                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001C500 4E71                       		nop	
0001C502 4A68 0030                  		tst.w	$30(a0)
0001C506 66F4                       		bne.s	loc_1AFE6
0001C508 2449                       		movea.l	a1,a2
0001C50A                            
0001C50A                            ; End of function TouchResponse
0001C50A                            ; continue straight to HurtSonic
0001C50A                            
0001C50A                            ; ---------------------------------------------------------------------------
0001C50A                            ; Hurting Sonic	subroutine
0001C50A                            ; ---------------------------------------------------------------------------
0001C50A                            
0001C50A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C50A                            
0001C50A                            
0001C50A                            HurtSonic:
0001C50A 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001C50E 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001C510 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001C514 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001C518 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001C51E 6600                       		bne.s	Hurt_Shield
0001C520 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001C524 3368 0008 0008             		move.w	8(a0),8(a1)
0001C52A 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001C530                            
0001C530                            Hurt_Shield:
0001C530 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001C536 117C 0004 0024             		move.b	#4,$24(a0)
0001C53C 6100 8452                  		bsr.w	Sonic_ResetOnFloor
0001C540 08E8 0001 0022             		bset	#1,$22(a0)
0001C546 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001C54C 317C FE00 0010             		move.w	#-$200,$10(a0)
0001C552 0828 0006 0022             		btst	#6,$22(a0)
0001C558 6700                       		beq.s	Hurt_Reverse
0001C55A 317C FE00 0012             		move.w	#-$200,$12(a0)
0001C560 317C FF00 0010             		move.w	#-$100,$10(a0)
0001C566                            
0001C566                            Hurt_Reverse:
0001C566 3028 0008                  		move.w	8(a0),d0
0001C56A B06A 0008                  		cmp.w	8(a2),d0
0001C56E 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001C570 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001C574                            
0001C574                            Hurt_ChkSpikes:
0001C574 317C 0000 0014             		move.w	#0,$14(a0)
0001C57A 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001C580 317C 0078 0030             		move.w	#$78,$30(a0)
0001C586 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001C58A 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001C58E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C590 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001C594 6600                       		bne.s	Hurt_Sound	; if not, branch
0001C596 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001C59A                            
0001C59A                            Hurt_Sound:
0001C59A 4EB9 0000 1C74             		jsr	(PlaySound_Special).l
0001C5A0 70FF                       		moveq	#-1,d0
0001C5A2 4E75                       		rts	
0001C5A4                            ; ===========================================================================
0001C5A4                            
0001C5A4                            Hurt_NoRings:
0001C5A4 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001C5A8 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001C5AC                            ; End of function HurtSonic
0001C5AC                            
0001C5AC                            ; ---------------------------------------------------------------------------
0001C5AC                            ; Subroutine to	kill Sonic
0001C5AC                            ; ---------------------------------------------------------------------------
0001C5AC                            
0001C5AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5AC                            
0001C5AC                            
0001C5AC                            KillSonic:
0001C5AC 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001C5B0 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001C5B2 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001C5B8 117C 0006 0024             		move.b	#6,$24(a0)
0001C5BE 6100 83D0                  		bsr.w	Sonic_ResetOnFloor
0001C5C2 08E8 0001 0022             		bset	#1,$22(a0)
0001C5C8 317C F900 0012             		move.w	#-$700,$12(a0)
0001C5CE 317C 0000 0010             		move.w	#0,$10(a0)
0001C5D4 317C 0000 0014             		move.w	#0,$14(a0)
0001C5DA 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001C5E0 117C 0018 001C             		move.b	#$18,$1C(a0)
0001C5E6 08E8 0007 0002             		bset	#7,2(a0)
0001C5EC 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001C5F0 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001C5F4 6600                       		bne.s	Kill_Sound
0001C5F6 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001C5FA                            
0001C5FA                            Kill_Sound:
0001C5FA 4EB9 0000 1C74             		jsr	(PlaySound_Special).l
0001C600                            
0001C600                            Kill_NoDeath:
0001C600 70FF                       		moveq	#-1,d0
0001C602 4E75                       		rts	
0001C604                            ; End of function KillSonic
0001C604                            
0001C604                            
0001C604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C604                            
0001C604                            
0001C604                            Touch_Special:				; XREF: Touch_ChkValue
0001C604 1229 0020                  		move.b	$20(a1),d1
0001C608 0201 003F                  		andi.b	#$3F,d1
0001C60C 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001C610 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001C612 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001C616 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001C618 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001C61C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C61E 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001C622 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001C624 4E75                       		rts	
0001C626                            ; ===========================================================================
0001C626                            
0001C626                            Touch_CatKiller:			; XREF: Touch_Special
0001C626 6000 FEC8                  		bra.w	loc_1AFDA
0001C62A                            ; ===========================================================================
0001C62A                            
0001C62A                            Touch_Yadrin:				; XREF: Touch_Special
0001C62A 9A40                       		sub.w	d0,d5
0001C62C 0C45 0008                  		cmpi.w	#8,d5
0001C630 6400                       		bcc.s	loc_1B144
0001C632 3029 0008                  		move.w	8(a1),d0
0001C636 5940                       		subq.w	#4,d0
0001C638 0829 0000 0022             		btst	#0,$22(a1)
0001C63E 6700                       		beq.s	loc_1B130
0001C640 0440 0010                  		subi.w	#$10,d0
0001C644                            
0001C644                            loc_1B130:
0001C644 9042                       		sub.w	d2,d0
0001C646 6400                       		bcc.s	loc_1B13C
0001C648 0640 0018                  		addi.w	#$18,d0
0001C64C 6500                       		bcs.s	loc_1B140
0001C64E 6000                       		bra.s	loc_1B144
0001C650                            ; ===========================================================================
0001C650                            
0001C650                            loc_1B13C:
0001C650 B044                       		cmp.w	d4,d0
0001C652 6200                       		bhi.s	loc_1B144
0001C654                            
0001C654                            loc_1B140:
0001C654 6000 FEA0                  		bra.w	Touch_ChkHurt
0001C658                            ; ===========================================================================
0001C658                            
0001C658                            loc_1B144:
0001C658 6000 FDC8                  		bra.w	Touch_Enemy
0001C65C                            ; ===========================================================================
0001C65C                            
0001C65C                            Touch_D7orE1:				; XREF: Touch_Special
0001C65C 5229 0021                  		addq.b	#1,$21(a1)
0001C660 4E75                       		rts	
0001C662                            ; End of function Touch_Special
0001C662                            
0001C662                            ; ---------------------------------------------------------------------------
0001C662                            ; Subroutine to	show the special stage layout
0001C662                            ; ---------------------------------------------------------------------------
0001C662                            
0001C662                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C662                            
0001C662                            
0001C662                            SS_ShowLayout:				; XREF: SpecialStage
0001C662 6100 0000                  		bsr.w	SS_AniWallsRings
0001C666 6100 0000                  		bsr.w	SS_AniItems
0001C66A 3F05                       		move.w	d5,-(sp)
0001C66C 43F8 8000                  		lea	($FFFF8000).w,a1
0001C670 1038 F780                  		move.b	($FFFFF780).w,d0
0001C674 0200 00FC                  		andi.b	#$FC,d0
0001C678 4EB9 0000 3416             		jsr	(CalcSine).l
0001C67E 3800                       		move.w	d0,d4
0001C680 3A01                       		move.w	d1,d5
0001C682 C9FC 0018                  		muls.w	#$18,d4
0001C686 CBFC 0018                  		muls.w	#$18,d5
0001C68A 7400                       		moveq	#0,d2
0001C68C 3438 F700                  		move.w	($FFFFF700).w,d2
0001C690 84FC 0018                  		divu.w	#$18,d2
0001C694 4842                       		swap	d2
0001C696 4442                       		neg.w	d2
0001C698 0642 FF4C                  		addi.w	#-$B4,d2
0001C69C 7600                       		moveq	#0,d3
0001C69E 3638 F704                  		move.w	($FFFFF704).w,d3
0001C6A2 86FC 0018                  		divu.w	#$18,d3
0001C6A6 4843                       		swap	d3
0001C6A8 4443                       		neg.w	d3
0001C6AA 0643 FF4C                  		addi.w	#-$B4,d3
0001C6AE 3E3C 000F                  		move.w	#$F,d7
0001C6B2                            
0001C6B2                            loc_1B19E:
0001C6B2 48A7 E000                  		movem.w	d0-d2,-(sp)
0001C6B6 48A7 C000                  		movem.w	d0-d1,-(sp)
0001C6BA 4440                       		neg.w	d0
0001C6BC C3C2                       		muls.w	d2,d1
0001C6BE C1C3                       		muls.w	d3,d0
0001C6C0 2C00                       		move.l	d0,d6
0001C6C2 DC81                       		add.l	d1,d6
0001C6C4 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001C6C8 C1C2                       		muls.w	d2,d0
0001C6CA C3C3                       		muls.w	d3,d1
0001C6CC D280                       		add.l	d0,d1
0001C6CE 2406                       		move.l	d6,d2
0001C6D0 3C3C 000F                  		move.w	#$F,d6
0001C6D4                            
0001C6D4                            loc_1B1C0:
0001C6D4 2002                       		move.l	d2,d0
0001C6D6 E080                       		asr.l	#8,d0
0001C6D8 32C0                       		move.w	d0,(a1)+
0001C6DA 2001                       		move.l	d1,d0
0001C6DC E080                       		asr.l	#8,d0
0001C6DE 32C0                       		move.w	d0,(a1)+
0001C6E0 D485                       		add.l	d5,d2
0001C6E2 D284                       		add.l	d4,d1
0001C6E4 51CE FFEE                  		dbf	d6,loc_1B1C0
0001C6E8                            
0001C6E8 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001C6EC 0643 0018                  		addi.w	#$18,d3
0001C6F0 51CF FFC0                  		dbf	d7,loc_1B19E
0001C6F4                            
0001C6F4 3A1F                       		move.w	(sp)+,d5
0001C6F6 41F9 00FF 0000             		lea	($FF0000).l,a0
0001C6FC 7000                       		moveq	#0,d0
0001C6FE 3038 F704                  		move.w	($FFFFF704).w,d0
0001C702 80FC 0018                  		divu.w	#$18,d0
0001C706 C0FC 0080                  		mulu.w	#$80,d0
0001C70A D1C0                       		adda.l	d0,a0
0001C70C 7000                       		moveq	#0,d0
0001C70E 3038 F700                  		move.w	($FFFFF700).w,d0
0001C712 80FC 0018                  		divu.w	#$18,d0
0001C716 D0C0                       		adda.w	d0,a0
0001C718 49F8 8000                  		lea	($FFFF8000).w,a4
0001C71C 3E3C 000F                  		move.w	#$F,d7
0001C720                            
0001C720                            loc_1B20C:
0001C720 3C3C 000F                  		move.w	#$F,d6
0001C724                            
0001C724                            loc_1B210:
0001C724 7000                       		moveq	#0,d0
0001C726 1018                       		move.b	(a0)+,d0
0001C728 6700                       		beq.s	loc_1B268
0001C72A 0C00 004E                  		cmpi.b	#$4E,d0
0001C72E 6200                       		bhi.s	loc_1B268
0001C730 3614                       		move.w	(a4),d3
0001C732 0643 0120                  		addi.w	#$120,d3
0001C736 0C43 0070                  		cmpi.w	#$70,d3
0001C73A 6500                       		bcs.s	loc_1B268
0001C73C 0C43 01D0                  		cmpi.w	#$1D0,d3
0001C740 6400                       		bcc.s	loc_1B268
0001C742 342C 0002                  		move.w	2(a4),d2
0001C746 0642 00F0                  		addi.w	#$F0,d2
0001C74A 0C42 0070                  		cmpi.w	#$70,d2
0001C74E 6500                       		bcs.s	loc_1B268
0001C750 0C42 0170                  		cmpi.w	#$170,d2
0001C754 6400                       		bcc.s	loc_1B268
0001C756 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001C75C E748                       		lsl.w	#3,d0
0001C75E 4BF5 0000                  		lea	(a5,d0.w),a5
0001C762 225D                       		movea.l	(a5)+,a1
0001C764 321D                       		move.w	(a5)+,d1
0001C766 D241                       		add.w	d1,d1
0001C768 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001C76C 365D                       		movea.w	(a5)+,a3
0001C76E 7200                       		moveq	#0,d1
0001C770 1219                       		move.b	(a1)+,d1
0001C772 5301                       		subq.b	#1,d1
0001C774 6B00                       		bmi.s	loc_1B268
0001C776 4EB9 0000 E8A0             		jsr	sub_D762
0001C77C                            
0001C77C                            loc_1B268:
0001C77C 584C                       		addq.w	#4,a4
0001C77E 51CE FFA4                  		dbf	d6,loc_1B210
0001C782                            
0001C782 41E8 0070                  		lea	$70(a0),a0
0001C786 51CF FF98                  		dbf	d7,loc_1B20C
0001C78A                            
0001C78A 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001C78E 0C05 0050                  		cmpi.b	#$50,d5
0001C792 6700                       		beq.s	loc_1B288
0001C794 24BC 0000 0000             		move.l	#0,(a2)
0001C79A 4E75                       		rts	
0001C79C                            ; ===========================================================================
0001C79C                            
0001C79C                            loc_1B288:
0001C79C 157C 0000 FFFB             		move.b	#0,-5(a2)
0001C7A2 4E75                       		rts	
0001C7A4                            ; End of function SS_ShowLayout
0001C7A4                            
0001C7A4                            ; ---------------------------------------------------------------------------
0001C7A4                            ; Subroutine to	animate	walls and rings	in the special stage
0001C7A4                            ; ---------------------------------------------------------------------------
0001C7A4                            
0001C7A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7A4                            
0001C7A4                            
0001C7A4                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001C7A4 43F9 00FF 400C             		lea	($FF400C).l,a1
0001C7AA 7000                       		moveq	#0,d0
0001C7AC 1038 F780                  		move.b	($FFFFF780).w,d0
0001C7B0 E408                       		lsr.b	#2,d0
0001C7B2 0240 000F                  		andi.w	#$F,d0
0001C7B6 7223                       		moveq	#$23,d1
0001C7B8                            
0001C7B8                            loc_1B2A4:
0001C7B8 3280                       		move.w	d0,(a1)
0001C7BA 5049                       		addq.w	#8,a1
0001C7BC 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001C7C0                            
0001C7C0 43F9 00FF 4005             		lea	($FF4005).l,a1
0001C7C6 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001C7CA 6A00                       		bpl.s	loc_1B2C8
0001C7CC 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001C7D2 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001C7D6 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001C7DC                            
0001C7DC                            loc_1B2C8:
0001C7DC 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001C7E2 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001C7E6 6A00                       		bpl.s	loc_1B2E4
0001C7E8 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001C7EE 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001C7F2 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001C7F8                            
0001C7F8                            loc_1B2E4:
0001C7F8 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001C7FC 1340 0138                  		move.b	d0,$138(a1)
0001C800 1340 0160                  		move.b	d0,$160(a1)
0001C804 1340 0148                  		move.b	d0,$148(a1)
0001C808 1340 0150                  		move.b	d0,$150(a1)
0001C80C 1340 01D8                  		move.b	d0,$1D8(a1)
0001C810 1340 01E0                  		move.b	d0,$1E0(a1)
0001C814 1340 01E8                  		move.b	d0,$1E8(a1)
0001C818 1340 01F0                  		move.b	d0,$1F0(a1)
0001C81C 1340 01F8                  		move.b	d0,$1F8(a1)
0001C820 1340 0200                  		move.b	d0,$200(a1)
0001C824 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001C828 6A00                       		bpl.s	loc_1B326
0001C82A 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001C830 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001C834 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001C83A                            
0001C83A                            loc_1B326:
0001C83A 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001C83E 1340 0168                  		move.b	d0,$168(a1)
0001C842 1340 0170                  		move.b	d0,$170(a1)
0001C846 1340 0178                  		move.b	d0,$178(a1)
0001C84A 1340 0180                  		move.b	d0,$180(a1)
0001C84E 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001C852 6A00                       		bpl.s	loc_1B350
0001C854 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001C85A 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001C85E 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001C864                            
0001C864                            loc_1B350:
0001C864 43F9 00FF 4016             		lea	($FF4016).l,a1
0001C86A 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001C870 7000                       		moveq	#0,d0
0001C872 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001C876 D040                       		add.w	d0,d0
0001C878 41F0 0000                  		lea	(a0,d0.w),a0
0001C87C 3290                       		move.w	(a0),(a1)
0001C87E 3368 0002 0008             		move.w	2(a0),8(a1)
0001C884 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C88A 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C890 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C896 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C89C 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C8A2 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C8A8 D0FC 0020                  		adda.w	#$20,a0
0001C8AC D2FC 0048                  		adda.w	#$48,a1
0001C8B0 3290                       		move.w	(a0),(a1)
0001C8B2 3368 0002 0008             		move.w	2(a0),8(a1)
0001C8B8 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C8BE 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C8C4 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C8CA 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C8D0 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C8D6 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C8DC D0FC 0020                  		adda.w	#$20,a0
0001C8E0 D2FC 0048                  		adda.w	#$48,a1
0001C8E4 3290                       		move.w	(a0),(a1)
0001C8E6 3368 0002 0008             		move.w	2(a0),8(a1)
0001C8EC 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C8F2 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C8F8 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C8FE 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C904 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C90A 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C910 D0FC 0020                  		adda.w	#$20,a0
0001C914 D2FC 0048                  		adda.w	#$48,a1
0001C918 3290                       		move.w	(a0),(a1)
0001C91A 3368 0002 0008             		move.w	2(a0),8(a1)
0001C920 3368 0004 0010             		move.w	4(a0),$10(a1)
0001C926 3368 0006 0018             		move.w	6(a0),$18(a1)
0001C92C 3368 0008 0020             		move.w	8(a0),$20(a1)
0001C932 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001C938 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001C93E 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001C944 D0FC 0020                  		adda.w	#$20,a0
0001C948 D2FC 0048                  		adda.w	#$48,a1
0001C94C 4E75                       		rts	
0001C94E                            ; End of function SS_AniWallsRings
0001C94E                            
0001C94E                            ; ===========================================================================
0001C94E 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C95E 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001C96E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C97E 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001C98E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C99E 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001C9AE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C9BE 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001C9CE                            ; ---------------------------------------------------------------------------
0001C9CE                            ; Subroutine to	remove items when you collect them in the special stage
0001C9CE                            ; ---------------------------------------------------------------------------
0001C9CE                            
0001C9CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9CE                            
0001C9CE                            
0001C9CE                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001C9CE 45F9 00FF 4400             		lea	($FF4400).l,a2
0001C9D4 303C 001F                  		move.w	#$1F,d0
0001C9D8                            
0001C9D8                            loc_1B4C4:
0001C9D8 4A12                       		tst.b	(a2)
0001C9DA 6700                       		beq.s	locret_1B4CE
0001C9DC 504A                       		addq.w	#8,a2
0001C9DE 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001C9E2                            
0001C9E2                            locret_1B4CE:
0001C9E2 4E75                       		rts	
0001C9E4                            ; End of function SS_RemoveCollectedItem
0001C9E4                            
0001C9E4                            ; ---------------------------------------------------------------------------
0001C9E4                            ; Subroutine to	animate	special	stage items when you touch them
0001C9E4                            ; ---------------------------------------------------------------------------
0001C9E4                            
0001C9E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C9E4                            
0001C9E4                            
0001C9E4                            SS_AniItems:				; XREF: SS_ShowLayout
0001C9E4 41F9 00FF 4400             		lea	($FF4400).l,a0
0001C9EA 3E3C 001F                  		move.w	#$1F,d7
0001C9EE                            
0001C9EE                            loc_1B4DA:
0001C9EE 7000                       		moveq	#0,d0
0001C9F0 1010                       		move.b	(a0),d0
0001C9F2 6700                       		beq.s	loc_1B4E8
0001C9F4 E548                       		lsl.w	#2,d0
0001C9F6 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001C9FA 4E91                       		jsr	(a1)
0001C9FC                            
0001C9FC                            loc_1B4E8:
0001C9FC 5048                       		addq.w	#8,a0
0001C9FE                            
0001C9FE                            loc_1B4EA:
0001C9FE 51CF FFEE                  		dbf	d7,loc_1B4DA
0001CA02                            
0001CA02 4E75                       		rts	
0001CA04                            ; End of function SS_AniItems
0001CA04                            
0001CA04                            ; ===========================================================================
0001CA04 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001CA08 0000 0000                  		dc.l SS_AniBumper
0001CA0C 0000 0000                  		dc.l SS_Ani1Up
0001CA10 0000 0000                  		dc.l SS_AniReverse
0001CA14 0000 0000                  		dc.l SS_AniEmeraldSparks
0001CA18 0000 0000                  		dc.l SS_AniGlassBlock
0001CA1C                            ; ===========================================================================
0001CA1C                            
0001CA1C                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001CA1C 5328 0002                  		subq.b	#1,2(a0)
0001CA20 6A00                       		bpl.s	locret_1B530
0001CA22 117C 0005 0002             		move.b	#5,2(a0)
0001CA28 7000                       		moveq	#0,d0
0001CA2A 1028 0003                  		move.b	3(a0),d0
0001CA2E 5228 0003                  		addq.b	#1,3(a0)
0001CA32 2268 0004                  		movea.l	4(a0),a1
0001CA36 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001CA3A 1280                       		move.b	d0,(a1)
0001CA3C 6600                       		bne.s	locret_1B530
0001CA3E 4290                       		clr.l	(a0)
0001CA40 42A8 0004                  		clr.l	4(a0)
0001CA44                            
0001CA44                            locret_1B530:
0001CA44 4E75                       		rts	
0001CA46                            ; ===========================================================================
0001CA46 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001CA4C                            ; ===========================================================================
0001CA4C                            
0001CA4C                            SS_AniBumper:				; XREF: SS_AniIndex
0001CA4C 5328 0002                  		subq.b	#1,2(a0)
0001CA50 6A00                       		bpl.s	locret_1B566
0001CA52 117C 0007 0002             		move.b	#7,2(a0)
0001CA58 7000                       		moveq	#0,d0
0001CA5A 1028 0003                  		move.b	3(a0),d0
0001CA5E 5228 0003                  		addq.b	#1,3(a0)
0001CA62 2268 0004                  		movea.l	4(a0),a1
0001CA66 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001CA6A 6600                       		bne.s	loc_1B564
0001CA6C 4290                       		clr.l	(a0)
0001CA6E 42A8 0004                  		clr.l	4(a0)
0001CA72 12BC 0025                  		move.b	#$25,(a1)
0001CA76 4E75                       		rts	
0001CA78                            ; ===========================================================================
0001CA78                            
0001CA78                            loc_1B564:
0001CA78 1280                       		move.b	d0,(a1)
0001CA7A                            
0001CA7A                            locret_1B566:
0001CA7A 4E75                       		rts	
0001CA7C                            ; ===========================================================================
0001CA7C 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001CA82                            ; ===========================================================================
0001CA82                            
0001CA82                            SS_Ani1Up:				; XREF: SS_AniIndex
0001CA82 5328 0002                  		subq.b	#1,2(a0)
0001CA86 6A00                       		bpl.s	locret_1B596
0001CA88 117C 0005 0002             		move.b	#5,2(a0)
0001CA8E 7000                       		moveq	#0,d0
0001CA90 1028 0003                  		move.b	3(a0),d0
0001CA94 5228 0003                  		addq.b	#1,3(a0)
0001CA98 2268 0004                  		movea.l	4(a0),a1
0001CA9C 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001CAA0 1280                       		move.b	d0,(a1)
0001CAA2 6600                       		bne.s	locret_1B596
0001CAA4 4290                       		clr.l	(a0)
0001CAA6 42A8 0004                  		clr.l	4(a0)
0001CAAA                            
0001CAAA                            locret_1B596:
0001CAAA 4E75                       		rts	
0001CAAC                            ; ===========================================================================
0001CAAC 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001CAB2                            ; ===========================================================================
0001CAB2                            
0001CAB2                            SS_AniReverse:				; XREF: SS_AniIndex
0001CAB2 5328 0002                  		subq.b	#1,2(a0)
0001CAB6 6A00                       		bpl.s	locret_1B5CC
0001CAB8 117C 0007 0002             		move.b	#7,2(a0)
0001CABE 7000                       		moveq	#0,d0
0001CAC0 1028 0003                  		move.b	3(a0),d0
0001CAC4 5228 0003                  		addq.b	#1,3(a0)
0001CAC8 2268 0004                  		movea.l	4(a0),a1
0001CACC 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001CAD0 6600                       		bne.s	loc_1B5CA
0001CAD2 4290                       		clr.l	(a0)
0001CAD4 42A8 0004                  		clr.l	4(a0)
0001CAD8 12BC 002B                  		move.b	#$2B,(a1)
0001CADC 4E75                       		rts	
0001CADE                            ; ===========================================================================
0001CADE                            
0001CADE                            loc_1B5CA:
0001CADE 1280                       		move.b	d0,(a1)
0001CAE0                            
0001CAE0                            locret_1B5CC:
0001CAE0 4E75                       		rts	
0001CAE2                            ; ===========================================================================
0001CAE2 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001CAE8                            ; ===========================================================================
0001CAE8                            
0001CAE8                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001CAE8 5328 0002                  		subq.b	#1,2(a0)
0001CAEC 6A00                       		bpl.s	locret_1B60C
0001CAEE 117C 0005 0002             		move.b	#5,2(a0)
0001CAF4 7000                       		moveq	#0,d0
0001CAF6 1028 0003                  		move.b	3(a0),d0
0001CAFA 5228 0003                  		addq.b	#1,3(a0)
0001CAFE 2268 0004                  		movea.l	4(a0),a1
0001CB02 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001CB06 1280                       		move.b	d0,(a1)
0001CB08 6600                       		bne.s	locret_1B60C
0001CB0A 4290                       		clr.l	(a0)
0001CB0C 42A8 0004                  		clr.l	4(a0)
0001CB10 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001CB16 303C 00A8                  		move.w	#$A8,d0
0001CB1A 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001CB20                            
0001CB20                            locret_1B60C:
0001CB20 4E75                       		rts	
0001CB22                            ; ===========================================================================
0001CB22 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001CB28                            ; ===========================================================================
0001CB28                            
0001CB28                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001CB28 5328 0002                  		subq.b	#1,2(a0)
0001CB2C 6A00                       		bpl.s	locret_1B640
0001CB2E 117C 0001 0002             		move.b	#1,2(a0)
0001CB34 7000                       		moveq	#0,d0
0001CB36 1028 0003                  		move.b	3(a0),d0
0001CB3A 5228 0003                  		addq.b	#1,3(a0)
0001CB3E 2268 0004                  		movea.l	4(a0),a1
0001CB42 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001CB46 1280                       		move.b	d0,(a1)
0001CB48 6600                       		bne.s	locret_1B640
0001CB4A 12A8 0004                  		move.b	4(a0),(a1)
0001CB4E 4290                       		clr.l	(a0)
0001CB50 42A8 0004                  		clr.l	4(a0)
0001CB54                            
0001CB54                            locret_1B640:
0001CB54 4E75                       		rts	
0001CB56                            ; ===========================================================================
0001CB56 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001CB60                            ; ---------------------------------------------------------------------------
0001CB60                            ; Special stage	layout pointers
0001CB60                            ; ---------------------------------------------------------------------------
0001CB60                            SS_LayoutIndex:
0001CB60                            	include "_inc\Special stage layout pointers.asm"
0001CB60                            ; ---------------------------------------------------------------------------
0001CB60                            ; Special stage	layout pointers
0001CB60                            ; ---------------------------------------------------------------------------
0001CB60 0000 0000                  	dc.l SS_1
0001CB64 0000 0000                  	dc.l SS_2
0001CB68 0000 0000                  	dc.l SS_3
0001CB6C 0000 0000                  	dc.l SS_4
0001CB70 0000 0000                  	dc.l SS_5
0001CB74 0000 0000                  	dc.l SS_6
0001CB78                            	even
0001CB78                            	even
0001CB78                            
0001CB78                            ; ---------------------------------------------------------------------------
0001CB78                            ; Special stage	start locations
0001CB78                            ; ---------------------------------------------------------------------------
0001CB78                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001CB90                            		even
0001CB90                            
0001CB90                            ; ---------------------------------------------------------------------------
0001CB90                            ; Subroutine to	load special stage layout
0001CB90                            ; ---------------------------------------------------------------------------
0001CB90                            
0001CB90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CB90                            
0001CB90                            
0001CB90                            SS_Load:				; XREF: SpecialStage
0001CB90 7000                       		moveq	#0,d0
0001CB92 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001CB96 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001CB9A 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001CBA0 6500                       		bcs.s	SS_ChkEmldNum
0001CBA2 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001CBA8                            
0001CBA8                            SS_ChkEmldNum:
0001CBA8 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001CBAE 6700                       		beq.s	SS_LoadData	; if yes, branch
0001CBB0 7200                       		moveq	#0,d1
0001CBB2 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001CBB6 5301                       		subq.b	#1,d1
0001CBB8 6500                       		bcs.s	SS_LoadData
0001CBBA 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001CBBE                            
0001CBBE                            SS_ChkEmldLoop:	
0001CBBE B033 1000                  		cmp.b	(a3,d1.w),d0
0001CBC2 6600                       		bne.s	SS_ChkEmldRepeat
0001CBC4 60CA                       		bra.s	SS_Load
0001CBC6                            ; ===========================================================================
0001CBC6                            
0001CBC6                            SS_ChkEmldRepeat:
0001CBC6 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001CBCA                            
0001CBCA                            SS_LoadData:
0001CBCA E548                       		lsl.w	#2,d0
0001CBCC 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001CBD0 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001CBD4 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001CBD8 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001CBDC 43F9 00FF 4000             		lea	($FF4000).l,a1
0001CBE2 303C 0000                  		move.w	#0,d0
0001CBE6 4EB9 0000 1FF6             		jsr	(EniDec).l
0001CBEC 43F9 00FF 0000             		lea	($FF0000).l,a1
0001CBF2 303C 0FFF                  		move.w	#$FFF,d0
0001CBF6                            
0001CBF6                            SS_ClrRAM3:
0001CBF6 4299                       		clr.l	(a1)+
0001CBF8 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001CBFC                            
0001CBFC 43F9 00FF 1020             		lea	($FF1020).l,a1
0001CC02 41F9 00FF 4000             		lea	($FF4000).l,a0
0001CC08 723F                       		moveq	#$3F,d1
0001CC0A                            
0001CC0A                            loc_1B6F6:
0001CC0A 743F                       		moveq	#$3F,d2
0001CC0C                            
0001CC0C                            loc_1B6F8:
0001CC0C 12D8                       		move.b	(a0)+,(a1)+
0001CC0E 51CA FFFC                  		dbf	d2,loc_1B6F8
0001CC12                            
0001CC12 43E9 0040                  		lea	$40(a1),a1
0001CC16 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001CC1A                            
0001CC1A 43F9 00FF 4008             		lea	($FF4008).l,a1
0001CC20 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001CC26 724D                       		moveq	#$4D,d1
0001CC28                            
0001CC28                            loc_1B714:
0001CC28 22D8                       		move.l	(a0)+,(a1)+
0001CC2A 32FC 0000                  		move.w	#0,(a1)+
0001CC2E 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001CC34 32D8                       		move.w	(a0)+,(a1)+
0001CC36 51C9 FFF0                  		dbf	d1,loc_1B714
0001CC3A                            
0001CC3A 43F9 00FF 4400             		lea	($FF4400).l,a1
0001CC40 323C 003F                  		move.w	#$3F,d1
0001CC44                            
0001CC44                            loc_1B730:
0001CC44                            
0001CC44 4299                       		clr.l	(a1)+
0001CC46 51C9 FFFC                  		dbf	d1,loc_1B730
0001CC4A                            
0001CC4A 4E75                       		rts	
0001CC4C                            ; End of function SS_Load
0001CC4C                            
0001CC4C                            ; ===========================================================================
0001CC4C                            ; ---------------------------------------------------------------------------
0001CC4C                            ; Special stage	mappings and VRAM pointers
0001CC4C                            ; ---------------------------------------------------------------------------
0001CC4C                            SS_MapIndex:
0001CC4C                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001CC4C                            ; ---------------------------------------------------------------------------
0001CC4C                            ; Special stage	mappings and VRAM pointers
0001CC4C                            ; ---------------------------------------------------------------------------
0001CC4C 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001CC50 0142                       	dc.w $142		; VRAM setting
0001CC52 0000 0000                  	dc.l Map_SSWalls
0001CC56 0142                       	dc.w $142
0001CC58 0000 0000                  	dc.l Map_SSWalls
0001CC5C 0142                       	dc.w $142
0001CC5E 0000 0000                  	dc.l Map_SSWalls
0001CC62 0142                       	dc.w $142
0001CC64 0000 0000                  	dc.l Map_SSWalls
0001CC68 0142                       	dc.w $142
0001CC6A 0000 0000                  	dc.l Map_SSWalls
0001CC6E 0142                       	dc.w $142
0001CC70 0000 0000                  	dc.l Map_SSWalls
0001CC74 0142                       	dc.w $142
0001CC76 0000 0000                  	dc.l Map_SSWalls
0001CC7A 0142                       	dc.w $142
0001CC7C 0000 0000                  	dc.l Map_SSWalls
0001CC80 0142                       	dc.w $142
0001CC82 0000 0000                  	dc.l Map_SSWalls
0001CC86 2142                       	dc.w $2142
0001CC88 0000 0000                  	dc.l Map_SSWalls
0001CC8C 2142                       	dc.w $2142
0001CC8E 0000 0000                  	dc.l Map_SSWalls
0001CC92 2142                       	dc.w $2142
0001CC94 0000 0000                  	dc.l Map_SSWalls
0001CC98 2142                       	dc.w $2142
0001CC9A 0000 0000                  	dc.l Map_SSWalls
0001CC9E 2142                       	dc.w $2142
0001CCA0 0000 0000                  	dc.l Map_SSWalls
0001CCA4 2142                       	dc.w $2142
0001CCA6 0000 0000                  	dc.l Map_SSWalls
0001CCAA 2142                       	dc.w $2142
0001CCAC 0000 0000                  	dc.l Map_SSWalls
0001CCB0 2142                       	dc.w $2142
0001CCB2 0000 0000                  	dc.l Map_SSWalls
0001CCB6 2142                       	dc.w $2142
0001CCB8 0000 0000                  	dc.l Map_SSWalls
0001CCBC 4142                       	dc.w $4142
0001CCBE 0000 0000                  	dc.l Map_SSWalls
0001CCC2 4142                       	dc.w $4142
0001CCC4 0000 0000                  	dc.l Map_SSWalls
0001CCC8 4142                       	dc.w $4142
0001CCCA 0000 0000                  	dc.l Map_SSWalls
0001CCCE 4142                       	dc.w $4142
0001CCD0 0000 0000                  	dc.l Map_SSWalls
0001CCD4 4142                       	dc.w $4142
0001CCD6 0000 0000                  	dc.l Map_SSWalls
0001CCDA 4142                       	dc.w $4142
0001CCDC 0000 0000                  	dc.l Map_SSWalls
0001CCE0 4142                       	dc.w $4142
0001CCE2 0000 0000                  	dc.l Map_SSWalls
0001CCE6 4142                       	dc.w $4142
0001CCE8 0000 0000                  	dc.l Map_SSWalls
0001CCEC 4142                       	dc.w $4142
0001CCEE 0000 0000                  	dc.l Map_SSWalls
0001CCF2 6142                       	dc.w $6142
0001CCF4 0000 0000                  	dc.l Map_SSWalls
0001CCF8 6142                       	dc.w $6142
0001CCFA 0000 0000                  	dc.l Map_SSWalls
0001CCFE 6142                       	dc.w $6142
0001CD00 0000 0000                  	dc.l Map_SSWalls
0001CD04 6142                       	dc.w $6142
0001CD06 0000 0000                  	dc.l Map_SSWalls
0001CD0A 6142                       	dc.w $6142
0001CD0C 0000 0000                  	dc.l Map_SSWalls
0001CD10 6142                       	dc.w $6142
0001CD12 0000 0000                  	dc.l Map_SSWalls
0001CD16 6142                       	dc.w $6142
0001CD18 0000 0000                  	dc.l Map_SSWalls
0001CD1C 6142                       	dc.w $6142
0001CD1E 0000 0000                  	dc.l Map_SSWalls
0001CD22 6142                       	dc.w $6142
0001CD24 0000 FC36                  	dc.l Map_obj47
0001CD28 023B                       	dc.w $23B
0001CD2A 0000 0000                  	dc.l Map_SS_R
0001CD2E 0570                       	dc.w $570
0001CD30 0000 0000                  	dc.l Map_SS_R
0001CD34 0251                       	dc.w $251
0001CD36 0000 0000                  	dc.l Map_SS_R
0001CD3A 0370                       	dc.w $370
0001CD3C 0000 0000                  	dc.l Map_SS_Up
0001CD40 0263                       	dc.w $263
0001CD42 0000 0000                  	dc.l Map_SS_Down
0001CD46 0263                       	dc.w $263
0001CD48 0000 0000                  	dc.l Map_SS_R
0001CD4C 22F0                       	dc.w $22F0
0001CD4E 0000 0000                  	dc.l Map_SS_Glass
0001CD52 0470                       	dc.w $470
0001CD54 0000 0000                  	dc.l Map_SS_Glass
0001CD58 05F0                       	dc.w $5F0
0001CD5A 0000 0000                  	dc.l Map_SS_Glass
0001CD5E 65F0                       	dc.w $65F0
0001CD60 0000 0000                  	dc.l Map_SS_Glass
0001CD64 25F0                       	dc.w $25F0
0001CD66 0000 0000                  	dc.l Map_SS_Glass
0001CD6A 45F0                       	dc.w $45F0
0001CD6C 0000 0000                  	dc.l Map_SS_R
0001CD70 02F0                       	dc.w $2F0
0001CD72 0100 FC36                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001CD76 023B                       	dc.w $23B
0001CD78 0200 FC36                  	dc.l Map_obj47+$2000000
0001CD7C 023B                       	dc.w $23B
0001CD7E 0000 0000                  	dc.l Map_SS_R
0001CD82 0797                       	dc.w $797
0001CD84 0000 0000                  	dc.l Map_SS_R
0001CD88 07A0                       	dc.w $7A0
0001CD8A 0000 0000                  	dc.l Map_SS_R
0001CD8E 07A9                       	dc.w $7A9
0001CD90 0000 0000                  	dc.l Map_SS_R
0001CD94 0797                       	dc.w $797
0001CD96 0000 0000                  	dc.l Map_SS_R
0001CD9A 07A0                       	dc.w $7A0
0001CD9C 0000 0000                  	dc.l Map_SS_R
0001CDA0 07A9                       	dc.w $7A9
0001CDA2 0000 AF2E                  	dc.l Map_obj25
0001CDA6 27B2                       	dc.w $27B2
0001CDA8 0000 0000                  	dc.l Map_SS_Chaos3
0001CDAC 0770                       	dc.w $770
0001CDAE 0000 0000                  	dc.l Map_SS_Chaos3
0001CDB2 2770                       	dc.w $2770
0001CDB4 0000 0000                  	dc.l Map_SS_Chaos3
0001CDB8 4770                       	dc.w $4770
0001CDBA 0000 0000                  	dc.l Map_SS_Chaos3
0001CDBE 6770                       	dc.w $6770
0001CDC0 0000 0000                  	dc.l Map_SS_Chaos1
0001CDC4 0770                       	dc.w $770
0001CDC6 0000 0000                  	dc.l Map_SS_Chaos2
0001CDCA 0770                       	dc.w $770
0001CDCC 0000 0000                  	dc.l Map_SS_R
0001CDD0 04F0                       	dc.w $4F0
0001CDD2 0400 AF2E                  	dc.l Map_obj25+$4000000
0001CDD6 27B2                       	dc.w $27B2
0001CDD8 0500 AF2E                  	dc.l Map_obj25+$5000000
0001CDDC 27B2                       	dc.w $27B2
0001CDDE 0600 AF2E                  	dc.l Map_obj25+$6000000
0001CDE2 27B2                       	dc.w $27B2
0001CDE4 0700 AF2E                  	dc.l Map_obj25+$7000000
0001CDE8 27B2                       	dc.w $27B2
0001CDEA 0000 0000                  	dc.l Map_SS_Glass
0001CDEE 23F0                       	dc.w $23F0
0001CDF0 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001CDF4 23F0                       	dc.w $23F0
0001CDF6 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001CDFA 23F0                       	dc.w $23F0
0001CDFC 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001CE00 23F0                       	dc.w $23F0
0001CE02 0000 0000                  	dc.l Map_SS_R+$2000000
0001CE06 04F0                       	dc.w $4F0
0001CE08 0000 0000                  	dc.l Map_SS_Glass
0001CE0C 05F0                       	dc.w $5F0
0001CE0E 0000 0000                  	dc.l Map_SS_Glass
0001CE12 65F0                       	dc.w $65F0
0001CE14 0000 0000                  	dc.l Map_SS_Glass
0001CE18 25F0                       	dc.w $25F0
0001CE1A 0000 0000                  	dc.l Map_SS_Glass
0001CE1E 45F0                       	dc.w $45F0
0001CE1E 45F0                       	dc.w $45F0
0001CE20                            
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            ; Sprite mappings - special stage "R" block
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            Map_SS_R:
0001CE20                            	include "_maps\SSRblock.asm"
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20                            ; Sprite mappings - special stage "R" block
0001CE20                            ; ---------------------------------------------------------------------------
0001CE20 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001CE24 0000                       		dc.w byte_1B91E-Map_SS_R
0001CE26 01                         byte_1B912:	dc.b 1
0001CE27 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CE2C 01                         byte_1B918:	dc.b 1
0001CE2D F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001CE32 00                         byte_1B91E:	dc.b 0
0001CE34 00                         		even
0001CE34 00                         		even
0001CE34                            
0001CE34                            ; ---------------------------------------------------------------------------
0001CE34                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001CE34                            ; ---------------------------------------------------------------------------
0001CE34                            Map_SS_Glass:
0001CE34                            	include "_maps\SSglassblock.asm"
0001CE34                            ; ---------------------------------------------------------------------------
0001CE34                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001CE34                            ; ---------------------------------------------------------------------------
0001CE34 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001CE38 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001CE3C 01                         byte_1B928:	dc.b 1
0001CE3D F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CE42 01                         byte_1B92E:	dc.b 1
0001CE43 F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001CE48 01                         byte_1B934:	dc.b 1
0001CE49 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001CE4E 01                         byte_1B93A:	dc.b 1
0001CE4F F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001CE54                            		even
0001CE54                            		even
0001CE54                            
0001CE54                            ; ---------------------------------------------------------------------------
0001CE54                            ; Sprite mappings - special stage "UP" block
0001CE54                            ; ---------------------------------------------------------------------------
0001CE54                            Map_SS_Up:
0001CE54                            	include "_maps\SSUPblock.asm"
0001CE54                            ; ---------------------------------------------------------------------------
0001CE54                            ; Sprite mappings - special stage "UP" block
0001CE54                            ; ---------------------------------------------------------------------------
0001CE54 0000                       		dc.w byte_1B944-Map_SS_Up
0001CE56 0000                       		dc.w byte_1B94A-Map_SS_Up
0001CE58 01                         byte_1B944:	dc.b 1
0001CE59 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001CE5E 01                         byte_1B94A:	dc.b 1
0001CE5F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001CE64                            		even
0001CE64                            		even
0001CE64                            
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64                            ; Sprite mappings - special stage "DOWN" block
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64                            Map_SS_Down:
0001CE64                            	include "_maps\SSDOWNblock.asm"
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64                            ; Sprite mappings - special stage "DOWN" block
0001CE64                            ; ---------------------------------------------------------------------------
0001CE64 0000                       		dc.w byte_1B954-Map_SS_Down
0001CE66 0000                       		dc.w byte_1B95A-Map_SS_Down
0001CE68 01                         byte_1B954:	dc.b 1
0001CE69 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001CE6E 01                         byte_1B95A:	dc.b 1
0001CE6F F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001CE74                            		even
0001CE74                            		even
0001CE74                            
0001CE74                            ; ---------------------------------------------------------------------------
0001CE74                            ; Sprite mappings - special stage chaos	emeralds
0001CE74                            ; ---------------------------------------------------------------------------
0001CE74 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001CE76 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001CE78 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001CE7A 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001CE7C 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001CE7E 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001CE80 01                         byte_1B96C:	dc.b 1
0001CE81 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001CE86 01                         byte_1B972:	dc.b 1
0001CE87 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001CE8C 01                         byte_1B978:	dc.b 1
0001CE8D F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001CE92 01                         byte_1B97E:	dc.b 1
0001CE93 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001CE98                            		even
0001CE98                            ; ===========================================================================
0001CE98                            ; ---------------------------------------------------------------------------
0001CE98                            ; Object 09 - Sonic (special stage)
0001CE98                            ; ---------------------------------------------------------------------------
0001CE98                            
0001CE98                            Obj09:					; XREF: Obj_Index
0001CE98                            ;		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001CE98                            ;		beq.s	Obj09_Normal	; if not, branch
0001CE98 6100 0000                  		bsr.w	SS_FixCamera
0001CE9C                            ;		bra.w	DebugMode
0001CE9C                            ; ===========================================================================
0001CE9C                            
0001CE9C                            Obj09_Normal:
0001CE9C 7000                       		moveq	#0,d0
0001CE9E 1028 0024                  		move.b	$24(a0),d0
0001CEA2 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001CEA6 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001CEAA                            ; ===========================================================================
0001CEAA 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001CEAC 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001CEAE 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001CEB0 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001CEB2                            ; ===========================================================================
0001CEB2                            
0001CEB2                            Obj09_Main:				; XREF: Obj09_Index
0001CEB2 5428 0024                  		addq.b	#2,$24(a0)
0001CEB6 117C 000E 0016             		move.b	#$E,$16(a0)
0001CEBC 117C 0007 0017             		move.b	#7,$17(a0)
0001CEC2 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001CECA 317C 0780 0002             		move.w	#$780,2(a0)
0001CED0 117C 0004 0001             		move.b	#4,1(a0)
0001CED6 117C 0000 0018             		move.b	#0,$18(a0)
0001CEDC 117C 0002 001C             		move.b	#2,$1C(a0)
0001CEE2 08E8 0002 0022             		bset	#2,$22(a0)
0001CEE8 08E8 0001 0022             		bset	#1,$22(a0)
0001CEEE                            
0001CEEE                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001CEEE                            ;		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001CEEE                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001CEEE                            ;		btst	#4,($FFFFF605).w ; is button B pressed?
0001CEEE                            ;		beq.s	Obj09_NoDebug	; if not, branch
0001CEEE                            ;		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001CEEE                            
0001CEEE                            Obj09_NoDebug:
0001CEEE 117C 0000 0030             		move.b	#0,$30(a0)
0001CEF4 7000                       		moveq	#0,d0
0001CEF6 1028 0022                  		move.b	$22(a0),d0
0001CEFA 0240 0002                  		andi.w	#2,d0
0001CEFE 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001CF02 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001CF06 4EB9 0001 4E52             		jsr	LoadSonicDynPLC
0001CF0C 4EF9 0000 E742             		jmp	DisplaySprite
0001CF12                            ; ===========================================================================
0001CF12 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001CF14 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001CF16                            ; ===========================================================================
0001CF16                            
0001CF16                            Obj09_OnWall:				; XREF: Obj09_Modes
0001CF16 6100 0000                  		bsr.w	Obj09_Rise
0001CF1A 6100 0000                  		bsr.w	Obj09_Move
0001CF1E 6100 0000                  		bsr.w	Obj09_Fall
0001CF22 6000                       		bra.s	Obj09_Display
0001CF24                            ; ===========================================================================
0001CF24                            
0001CF24                            Obj09_InAir:				; XREF: Obj09_Modes
0001CF24 6100 0000                  		bsr.w	Obj09_Rise
0001CF28 6100 0000                  		bsr.w	Obj09_Move
0001CF2C 6100 0000                  		bsr.w	Obj09_Fall
0001CF30                            
0001CF30                            Obj09_Display:				; XREF: Obj09_OnWall
0001CF30 6100 0000                  		bsr.w	Obj09_ChkItems
0001CF34 6100 0000                  		bsr.w	Obj09_ChkItems2
0001CF38 4EB9 0000 E71C             		jsr	SpeedToPos
0001CF3E 6100 0000                  		bsr.w	SS_FixCamera
0001CF42 3038 F780                  		move.w	($FFFFF780).w,d0
0001CF46 D078 F782                  		add.w	($FFFFF782).w,d0
0001CF4A 31C0 F780                  		move.w	d0,($FFFFF780).w
0001CF4E 4EB9 0001 4BAC             		jsr	Sonic_Animate
0001CF54 4E75                       		rts	
0001CF56                            
0001CF56                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CF56                            
0001CF56                            
0001CF56                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001CF56 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001CF5C 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001CF5E 4A78 F784                          tst.w   ($FFFFF784).w
0001CF62 6600                               bne.s   @corereverse1
0001CF64 6100 0000                  		bsr.w	Obj09_MoveLeft
0001CF68 6000                               bra.s   Obj09_ChkRight          
0001CF6A                            
0001CF6A                            @corereverse1:
0001CF6A 6100 0000                          bsr.w	Obj09_MoveRight
0001CF6E                            
0001CF6E                            Obj09_ChkRight:
0001CF6E 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001CF74 6700                       		beq.s	Obj09_MoveSpeed	; if not, branch
0001CF76 4A78 F784                          tst.w   ($FFFFF784).w
0001CF7A 6600                               bne.s   @corereverse2
0001CF7C 6100 0000                  		bsr.w	Obj09_MoveRight
0001CF80 6000                               bra.s   Obj09_MoveSpeed 
0001CF82                            
0001CF82                            @corereverse2:
0001CF82 6100 0000                  		bsr.w	Obj09_MoveLeft			;	branch to right movement subroutine
0001CF86                            
0001CF86                            Obj09_MoveSpeed:
0001CF86 1038 F602                  		move.b	($FFFFF602).w,d0
0001CF8A 0200 000C                  		andi.b	#$C,d0
0001CF8E 6600                       		bne.s	Obj09_MoveCollision
0001CF90 3028 0010                  		move.w	$10(a0),d0
0001CF94 6700                       		beq.s	Obj09_MoveCollision
0001CF96 317C 0000 0010             		move.w	#0,$10(a0)
0001CF9C                            
0001CF9C                            Obj09_MoveCollision:
0001CF9C 1038 F780                  		move.b	($FFFFF780).w,d0
0001CFA0 0600 0020                  		addi.b	#$20,d0
0001CFA4 0200 00C0                  		andi.b	#$C0,d0
0001CFA8 4400                       		neg.b	d0
0001CFAA 4EB9 0000 3416             		jsr	(CalcSine).l
0001CFB0 C3E8 0010                  		muls.w	$10(a0),d1
0001CFB4 D3A8 0008                  		add.l	d1,8(a0)
0001CFB8 C1E8 0012                  		muls.w	$12(a0),d0
0001CFBC D1A8 000C                  		add.l	d0,$C(a0)
0001CFC0 48E7 C000                  		movem.l	d0-d1,-(sp)
0001CFC4 2428 000C                  		move.l	$C(a0),d2
0001CFC8 2628 0008                  		move.l	8(a0),d3
0001CFCC 6100 0000                  		bsr.w	sub_1BCE8
0001CFD0 6700                       		beq.s	loc_1BAF2
0001CFD2 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001CFD6 93A8 0008                  		sub.l	d1,8(a0)
0001CFDA 91A8 000C                  		sub.l	d0,$C(a0)
0001CFDE 317C 0000 0010             		move.w	#0,$10(a0)
0001CFE4 4E75                       		rts	
0001CFE6                            ; ===========================================================================
0001CFE6                            
0001CFE6                            loc_1BAF2:
0001CFE6 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001CFEA 4E75                       		rts	
0001CFEC                            ; End of function Obj09_Move
0001CFEC                            
0001CFEC                            
0001CFEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CFEC                            
0001CFEC                            
0001CFEC                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001CFEC 08E8 0000 0022             		bset	#0,$22(a0)
0001CFF2 4240                               clr.w   d0
0001CFF4 3038 F786                          move.w  ($FFFFF786).w,d0
0001CFF8 D040                               add.w   d0,d0
0001CFFA 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001D000 4468 0010                          neg.w   $10(a0)
0001D004 4E75                               rts
0001D006                            
0001D006                            ; End of function Obj09_MoveLeft
0001D006                            
0001D006                            
0001D006                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D006                            
0001D006                            
0001D006                            Obj09_MoveRight:
0001D006 08A8 0000 0022             		bclr	#0,$22(a0)
0001D00C 4240                               clr.w   d0
0001D00E 3038 F786                          move.w  ($FFFFF786).w,d0
0001D012 D040                               add.w   d0,d0
0001D014 317B 0000 0010                     move.w	SS_XSpdIndex(pc,d0.w),$10(a0)
0001D01A 4E75                       		rts
0001D01C                            
0001D01C                            ; End of function Obj09_MoveRight
0001D01C                            
0001D01C                            ; ---------------------------------------------------------------------------
0001D01C                            
0001D01C                            SS_XSpdIndex:
0001D01C 0032                       		dc.w 50
0001D01E 0064                       		dc.w 100
0001D020 0096                       		dc.w 150
0001D022 00C8                       		dc.w 200
0001D024 00FA                       		dc.w 250
0001D026                            
0001D026                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D026                            
0001D026                            
0001D026                            Obj09_Rise:				; XREF: Obj09_OnWall
0001D026 0838 0000 F602             		btst	#0,($FFFFF602).w
0001D02C 6700                       		beq.s	Obj09_NoRise	; if not, branch
0001D02E 4A78 F784                          tst.w   ($FFFFF784).w
0001D032 6600 0000                          bne.w   @corereverse1
0001D036 6100 0000                  		bsr.w	Obj09_MoveUp
0001D03A 6000                               bra.s   Obj09_NoRise
0001D03C                            
0001D03C                            @corereverse1:
0001D03C 6100 0000                  		bsr.w	Obj09_Falling 
0001D040                                    
0001D040                            Obj09_NoRise:
0001D040 0838 0001 F602             		btst	#1,($FFFFF602).w	;	is Dn Pressed?
0001D046 6700                       		beq.s	Obj09_MoveYSpeed		;	
0001D048 4A78 F784                          tst.w   ($FFFFF784).w
0001D04C 6600 0000                          bne.w   @corereverse2
0001D050 6100 0000                  		bsr.w	Obj09_Falling			;	
0001D054 6000                               bra.s   Obj09_MoveYSpeed
0001D056                            
0001D056                            @corereverse2:
0001D056 6100 0000                  		bsr.w	Obj09_MoveUp
0001D05A                            		
0001D05A                            Obj09_MoveYSpeed:
0001D05A 1038 F602                  		move.b	($FFFFF602).w,d0
0001D05E 0200 0003                  		andi.b	#3,d0
0001D062 6600                       		bne.s	Obj09_MoveYCollision
0001D064 3028 0012                  		move.w	$12(a0),d0
0001D068 6700                       		beq.s	Obj09_MoveYCollision
0001D06A 317C 0000 0012             		move.w	#0,$12(a0)
0001D070                            
0001D070                            Obj09_MoveYCollision:		;	CODE TO CHECK STAGE COLLISION ON X-AXIS
0001D070 1038 F780                  		move.b	($FFFFF780).w,d0		;	check the Special Stage Angle
0001D074 0600 0020                  		addi.b	#$20,d0					;	?
0001D078 0200 00C0                  		andi.b	#$C0,d0					;	
0001D07C 4400                       		neg.b	d0						;	?
0001D07E 4EB9 0000 3416             		jsr	(CalcSine).l				;	load speed trajectory algorithms
0001D084 C3E8 0010                  		muls.w	$10(a0),d1			;	calculate x-speed trajectory
0001D088 D3A8 0008                  		add.l	d1,8(a0)				;	calculate Sonic's next x position
0001D08C C1E8 0012                  		muls.w	$12(a0),d0			;	calculate y-speed trajectory
0001D090 D1A8 000C                  		add.l	d0,$C(a0)				;	calculate Sonic's next y position
0001D094 48E7 C000                  		movem.l	d0-d1,-(sp)				;	save trajectory values
0001D098 2428 000C                  		move.l	$C(a0),d2				;	move sonic's next y-position into d2
0001D09C 2628 0008                  		move.l	8(a0),d3				;	move sonic's next x-position into d3
0001D0A0 6100 0000                  		bsr.w	sub_1BCE8				;	branch to the collision detection routine
0001D0A4 6700 FF40                  		beq.w	loc_1BAF2				;	if Sonic's not colliding with anything branch
0001D0A8 4CDF 0003                  		movem.l	(sp)+,d0-d1				;	remove x and y speed trajectory from the stack
0001D0AC 93A8 0008                  		sub.l	d1,8(a0)				;	cancel out Sonic's next x-position
0001D0B0 91A8 000C                  		sub.l	d0,$C(a0)				;	cancel out Sonic's next y-position
0001D0B4 317C 0000 0012             		move.w	#0,$12(a0)           ;	Make Sonic Stop
0001D0BA 4E75                       		rts								;	end routine
0001D0BC                            
0001D0BC                            Obj09_MoveUp:
0001D0BC 4240                               clr.w   d0
0001D0BE 3038 F786                          move.w  ($FFFFF786).w,d0
0001D0C2 D040                               add.w   d0,d0
0001D0C4 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001D0CA 4468 0012                          neg.w   $12(a0)
0001D0CE 4E75                               rts
0001D0D0                            
0001D0D0                            Obj09_Falling:
0001D0D0 4240                               clr.w   d0
0001D0D2 3038 F786                          move.w  ($FFFFF786).w,d0
0001D0D6 D040                               add.w   d0,d0
0001D0D8 317B 0000 0012                     move.w	SS_YSpdIndex(pc,d0.w),$12(a0)
0001D0DE 4E75                       		rts
0001D0E0                            ; End of function Obj09_Jump
0001D0E0                            
0001D0E0                            ; ---------------------------------------------------------------------------
0001D0E0                            SS_YSpdIndex:
0001D0E0 0080                       		dc.w $80
0001D0E2 0100                       		dc.w $100
0001D0E4 0180                       		dc.w $180
0001D0E6 0200                       		dc.w $200
0001D0E8 0280                       		dc.w $280
0001D0EA                            
0001D0EA                            
0001D0EA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D0EA                            
0001D0EA                            
0001D0EA                            nullsub_2:				; XREF: Obj09_InAir
0001D0EA 4E75                       		rts	
0001D0EC                            ; End of function nullsub_2
0001D0EC                            
0001D0EC                            ; ===========================================================================
0001D0EC                            ; ---------------------------------------------------------------------------
0001D0EC                            ; unused subroutine to limit Sonic's upward vertical speed
0001D0EC                            ; ---------------------------------------------------------------------------
0001D0EC 323C FC00                  		move.w	#-$400,d1
0001D0F0 B268 0012                  		cmp.w	$12(a0),d1
0001D0F4 6F00                       		ble.s	locret_1BBB4
0001D0F6 1038 F602                  		move.b	($FFFFF602).w,d0
0001D0FA 0200 0070                  		andi.b	#$70,d0
0001D0FE 6600                       		bne.s	locret_1BBB4
0001D100 3141 0012                  		move.w	d1,$12(a0)
0001D104                            
0001D104                            locret_1BBB4:
0001D104 4E75                       		rts	
0001D106                            ; ---------------------------------------------------------------------------
0001D106                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001D106                            ; ---------------------------------------------------------------------------
0001D106                            
0001D106                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D106                            
0001D106                            
0001D106                            SS_FixCamera:				; XREF: Obj09
0001D106 3428 000C                  		move.w	$C(a0),d2
0001D10A 3628 0008                  		move.w	8(a0),d3
0001D10E 3038 F700                  		move.w	($FFFFF700).w,d0
0001D112 0443 00A0                  		subi.w	#$A0,d3
0001D116 6500                       		bcs.s	loc_1BBCE
0001D118 9043                       		sub.w	d3,d0
0001D11A 9178 F700                  		sub.w	d0,($FFFFF700).w
0001D11E                            
0001D11E                            loc_1BBCE:
0001D11E 3038 F704                  		move.w	($FFFFF704).w,d0
0001D122 0442 0070                  		subi.w	#$70,d2
0001D126 6500                       		bcs.s	locret_1BBDE
0001D128 9042                       		sub.w	d2,d0
0001D12A 9178 F704                  		sub.w	d0,($FFFFF704).w
0001D12E                            
0001D12E                            locret_1BBDE:
0001D12E 4E75                       		rts	
0001D130                            ; End of function SS_FixCamera
0001D130                            
0001D130                            ; ===========================================================================
0001D130                            
0001D130                            Obj09_ExitStage:			; XREF: Obj09_Index
0001D130 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001D136 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001D13C 6600                       		bne.s	loc_1BBF4
0001D13E 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D144                            
0001D144                            loc_1BBF4:
0001D144 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001D14A 6D00                       		blt.s	loc_1BC12
0001D14C 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001D152                            ;		move.w	#$4000,($FFFFF780).w
0001D152 5428 0024                  		addq.b	#2,$24(a0)
0001D156 317C 003C 0038             		move.w	#$3C,$38(a0)
0001D15C                            
0001D15C                            loc_1BC12:
0001D15C                            ;		move.w	($FFFFF780).w,d0
0001D15C                            ;		add.w	($FFFFF782).w,d0
0001D15C                            ;		move.w	d0,($FFFFF780).w
0001D15C 4EB9 0001 4BAC             		jsr	Sonic_Animate
0001D162 4EB9 0001 4E52             		jsr	LoadSonicDynPLC
0001D168 6100 FF9C                  		bsr.w	SS_FixCamera
0001D16C 4EF9 0000 E742             		jmp	DisplaySprite
0001D172                            ; ===========================================================================
0001D172                            
0001D172                            Obj09_Exit2:				; XREF: Obj09_Index
0001D172 5368 0038                  		subq.w	#1,$38(a0)
0001D176 6600                       		bne.s	loc_1BC40
0001D178 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001D17E                            
0001D17E                            loc_1BC40:
0001D17E 4EB9 0001 4BAC             		jsr	Sonic_Animate
0001D184 4EB9 0001 4E52             		jsr	LoadSonicDynPLC
0001D18A 6100 FF7A                  		bsr.w	SS_FixCamera
0001D18E 4EF9 0000 E742             		jmp	DisplaySprite
0001D194                            
0001D194                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D194                            
0001D194                            
0001D194                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001D194 2428 000C                  		move.l	$C(a0),d2
0001D198 2628 0008                  		move.l	8(a0),d3
0001D19C 1038 F780                  		move.b	($FFFFF780).w,d0
0001D1A0 0200 00FC                  		andi.b	#$FC,d0
0001D1A4 4EB9 0000 3416             		jsr	(CalcSine).l
0001D1AA 3828 0010                  		move.w	$10(a0),d4
0001D1AE 48C4                       		ext.l	d4
0001D1B0 E184                       		asl.l	#8,d4
0001D1B2 C1FC 002A                  		muls.w	#$2A,d0
0001D1B6 D084                       		add.l	d4,d0
0001D1B8 3828 0012                  		move.w	$12(a0),d4
0001D1BC 48C4                       		ext.l	d4
0001D1BE E184                       		asl.l	#8,d4
0001D1C0 C3FC 002A                  		muls.w	#$2A,d1
0001D1C4 D284                       		add.l	d4,d1
0001D1C6 7A00                       		moveq	#0,d5
0001D1C8 3A28 0010                  		move.w	$10(a0),d5
0001D1CC 6700                       		beq.s	Obj09_NoXFall
0001D1CE D680                       		add.l	d0,d3
0001D1D0 6100 0000                  		bsr.w	sub_1BCE8
0001D1D4 6700                       		beq.s	loc_1BCB0
0001D1D6 9680                       		sub.l	d0,d3
0001D1D8 7000                       		moveq	#0,d0
0001D1DA 3140 0010                  		move.w	d0,$10(a0)
0001D1DE 08A8 0001 0022             		bclr	#1,$22(a0)
0001D1E4                            
0001D1E4                            Obj09_NoXFall
0001D1E4 7C00                       		moveq	#0,d6
0001D1E6 3C28 0012                  		move.w	$12(a0),d6
0001D1EA 6700                       		beq.s	Obj09_NoYFall
0001D1EC D481                       		add.l	d1,d2
0001D1EE 6100 0000                  		bsr.w	sub_1BCE8
0001D1F2 6700                       		beq.s	loc_1BCC6
0001D1F4 9481                       		sub.l	d1,d2
0001D1F6 7200                       		moveq	#0,d1
0001D1F8 3141 0012                  		move.w	d1,$12(a0)
0001D1FC 4E75                       		rts	
0001D1FE                            ; ===========================================================================
0001D1FE                            
0001D1FE                            loc_1BCB0:
0001D1FE 7C00                       		moveq	#0,d6
0001D200 3C28 0012                  		move.w	$12(a0),d6
0001D204 6700                       		beq.s	Obj09_NoYFall
0001D206 D481                       		add.l	d1,d2
0001D208 6100 0000                  		bsr.w	sub_1BCE8
0001D20C 6700                       		beq.s	loc_1BCD4
0001D20E 9481                       		sub.l	d1,d2
0001D210 7200                       		moveq	#0,d1
0001D212 3141 0012                  		move.w	d1,$12(a0)
0001D216 08A8 0001 0022             		bclr	#1,$22(a0)
0001D21C                            
0001D21C                            loc_1BCC6:
0001D21C E080                       		asr.l	#8,d0
0001D21E E081                       		asr.l	#8,d1
0001D220 3140 0010                  		move.w	d0,$10(a0)
0001D224 3141 0012                  		move.w	d1,$12(a0)
0001D228 4E75                       		rts	
0001D22A                            ; ===========================================================================
0001D22A                            
0001D22A                            loc_1BCD4:
0001D22A E080                       		asr.l	#8,d0
0001D22C E081                       		asr.l	#8,d1
0001D22E 3140 0010                  		move.w	d0,$10(a0)
0001D232 3141 0012                  		move.w	d1,$12(a0)
0001D236 08E8 0001 0022             		bset	#1,$22(a0)
0001D23C 4E75                       		rts	
0001D23E                            
0001D23E                            Obj09_NoYFall:
0001D23E 4E75                       		rts
0001D240                            ; End of function Obj09_Fall
0001D240                            
0001D240                            
0001D240                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D240                            
0001D240                            
0001D240                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001D240 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D246 7800                       		moveq	#0,d4
0001D248 4842                       		swap	d2
0001D24A 3802                       		move.w	d2,d4
0001D24C 4842                       		swap	d2
0001D24E 0644 0044                  		addi.w	#$44,d4
0001D252 88FC 0018                  		divu.w	#$18,d4
0001D256 C8FC 0080                  		mulu.w	#$80,d4
0001D25A D3C4                       		adda.l	d4,a1
0001D25C 7800                       		moveq	#0,d4
0001D25E 4843                       		swap	d3
0001D260 3803                       		move.w	d3,d4
0001D262 4843                       		swap	d3
0001D264 0644 0014                  		addi.w	#$14,d4
0001D268 88FC 0018                  		divu.w	#$18,d4
0001D26C D2C4                       		adda.w	d4,a1
0001D26E 7A00                       		moveq	#0,d5
0001D270 1819                       		move.b	(a1)+,d4
0001D272 6100                       		bsr.s	sub_1BD30
0001D274 1819                       		move.b	(a1)+,d4
0001D276 6100                       		bsr.s	sub_1BD30
0001D278 D2FC 007E                  		adda.w	#$7E,a1
0001D27C 1819                       		move.b	(a1)+,d4
0001D27E 6100                       		bsr.s	sub_1BD30
0001D280 1819                       		move.b	(a1)+,d4
0001D282 6100                       		bsr.s	sub_1BD30
0001D284 4A05                       		tst.b	d5
0001D286 4E75                       		rts	
0001D288                            ; End of function sub_1BCE8
0001D288                            
0001D288                            
0001D288                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D288                            
0001D288                            
0001D288                            sub_1BD30:				; XREF: sub_1BCE8
0001D288 6700                       		beq.s	locret_1BD44
0001D28A 0C04 0028                  		cmpi.b	#$28,d4
0001D28E 6500                       		blo.s	loc_1BD46
0001D290 0C04 004B                  		cmpi.b	#$4B,d4
0001D294 6400                       		bhs.s	loc_1BD46
0001D296 0C04 003A                  		cmpi.b	#$3A,d4
0001D29A 6400                       		bhs.s	locret_1BD44
0001D29C 0C04 002C                  		cmpi.b	#$2C,d4
0001D2A0 6400                       		bhs.s	loc_1BD46
0001D2A2                            
0001D2A2                            locret_1BD44:
0001D2A2 4E75                       		rts	
0001D2A4                            ; ===========================================================================
0001D2A4                            
0001D2A4                            loc_1BD46:
0001D2A4 1144 0030                  		move.b	d4,$30(a0)
0001D2A8 2149 0032                  		move.l	a1,$32(a0)
0001D2AC 7AFF                       		moveq	#-1,d5
0001D2AE 4E75                       		rts	
0001D2B0                            ; End of function sub_1BD30
0001D2B0                            
0001D2B0                            
0001D2B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D2B0                            
0001D2B0                            
0001D2B0                            Obj09_ChkItems:				; XREF: Obj09_Display
0001D2B0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001D2B6 7800                       		moveq	#0,d4
0001D2B8 3828 000C                  		move.w	$C(a0),d4
0001D2BC 0644 0050                  		addi.w	#$50,d4
0001D2C0 88FC 0018                  		divu.w	#$18,d4
0001D2C4 C8FC 0080                  		mulu.w	#$80,d4
0001D2C8 D3C4                       		adda.l	d4,a1
0001D2CA 7800                       		moveq	#0,d4
0001D2CC 3828 0008                  		move.w	8(a0),d4
0001D2D0 0644 0020                  		addi.w	#$20,d4
0001D2D4 88FC 0018                  		divu.w	#$18,d4
0001D2D8 D2C4                       		adda.w	d4,a1
0001D2DA 1811                       		move.b	(a1),d4
0001D2DC 6600                       		bne.s	Obj09_ChkCont
0001D2DE 4A28 003A                  		tst.b	$3A(a0)
0001D2E2 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001D2E6 7800                       		moveq	#0,d4
0001D2E8 4E75                       		rts	
0001D2EA                            ; ===========================================================================
0001D2EA                            
0001D2EA                            Obj09_ChkCont:
0001D2EA 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001D2EE 6600                       		bne.s	Obj09_Chk1Up
0001D2F0 6100 F6DC                  		bsr.w	SS_RemoveCollectedItem
0001D2F4 6600                       		bne.s	Obj09_GetCont
0001D2F6 14BC 0001                  		move.b	#1,(a2)
0001D2FA 2549 0004                  		move.l	a1,4(a2)
0001D2FE                            
0001D2FE                            Obj09_GetCont:
0001D2FE 4EB9 0000 AC16             		jsr	CollectRing
0001D304 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001D30A 6500                       		bcs.s	Obj09_NoCont
0001D30C 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001D312 6600                       		bne.s	Obj09_NoCont
0001D314 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001D318 303C 00BF                  		move.w	#$BF,d0
0001D31C 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play extra continue sound
0001D322                            
0001D322                            Obj09_NoCont:
0001D322 7800                       		moveq	#0,d4
0001D324 4E75                       		rts	
0001D326                            ; ===========================================================================
0001D326                            
0001D326                            Obj09_Chk1Up:
0001D326 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001D32A 6600                       		bne.s	Obj09_ChkEmer
0001D32C 6100 F6A0                  		bsr.w	SS_RemoveCollectedItem
0001D330 6600                       		bne.s	Obj09_Get1Up
0001D332 14BC 0003                  		move.b	#3,(a2)
0001D336 2549 0004                  		move.l	a1,4(a2)
0001D33A                            
0001D33A                            Obj09_Get1Up:
0001D33A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001D33E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001D342 303C 0088                  		move.w	#$88,d0
0001D346 4EB9 0000 1C6E             		jsr	(PlaySound).l	; play extra life music
0001D34C 7800                       		moveq	#0,d4
0001D34E 4E75                       		rts	
0001D350                            ; ===========================================================================
0001D350                            
0001D350                            Obj09_ChkEmer:
0001D350 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001D354 6500                       		bcs.s	Obj09_UPblock
0001D356 0C04 0040                  		cmpi.b	#$40,d4
0001D35A 6200                       		bhi.s	Obj09_UPblock
0001D35C 6100 F670                  		bsr.w	SS_RemoveCollectedItem
0001D360 6600                       		bne.s	Obj09_GetEmer
0001D362 14BC 0005                  		move.b	#5,(a2)
0001D366 2549 0004                  		move.l	a1,4(a2)
0001D36A                            
0001D36A                            Obj09_GetEmer:
0001D36A 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001D370 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001D372 0404 003B                  		subi.b	#$3B,d4
0001D376 7000                       		moveq	#0,d0
0001D378 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001D37C 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001D380 1584 0000                  		move.b	d4,(a2,d0.w)
0001D384 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001D388                            
0001D388                            Obj09_NoEmer:
0001D388 303C 0093                  		move.w	#$93,d0
0001D38C 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play emerald music
0001D392 7800                       		moveq	#0,d4
0001D394 4E75                       		rts	
0001D396                            
0001D396                            ; ===========================================================================
0001D396                            
0001D396                            Obj09_UPblock:
0001D396 0C04 0029                  		cmpi.b	#$29,d4		; is the item an "UP" block?
0001D39A 6600                       		bne.s	Obj09_DOWNblock
0001D39C 6100 F630                  		bsr.w	SS_RemoveCollectedItem
0001D3A0 6600                       		bne.s	Obj09_SpeedUp
0001D3A2 14BC 0001                  		move.b	#1,(a2)
0001D3A6 2549 0004                  		move.l	a1,4(a2)
0001D3AA                            
0001D3AA                            Obj09_SpeedUp:
0001D3AA 0C78 0004 F786             		cmpi.w	#4,($FFFFF786).w
0001D3B0 6400                       		bhs.s	Obj09_UPsnd
0001D3B2 5278 F786                  		addi.w	#1,($FFFFF786).w	; increase stage rotation speed
0001D3B6                            
0001D3B6                            Obj09_UPsnd:
0001D3B6 303C 00A9                  		move.w	#$A9,d0
0001D3BA 4EB9 0000 1C74             		jsr	(PlaySound_Special).l	; play up/down sound
0001D3C0 7800                       		moveq	#0,d4
0001D3C2 4E75                       		rts	
0001D3C4                            ; ===========================================================================
0001D3C4                            
0001D3C4                            Obj09_DOWNblock:
0001D3C4 0C04 002A                  		cmpi.b	#$2A,d4		; is the item a	"DOWN" block?
0001D3C8 6600                       		bne.s	Obj09_Rblock
0001D3CA 6100 F602                  		bsr.w	SS_RemoveCollectedItem
0001D3CE 6600                       		bne.s	Obj09_SpeedDown
0001D3D0 14BC 0001                  		move.b	#1,(a2)
0001D3D4 2549 0004                  		move.l	a1,4(a2)
0001D3D8                            
0001D3D8                            Obj09_SpeedDown:
0001D3D8 4A78 F786                  		tst.w 	($FFFFF786).w
0001D3DC 6700                       		beq.s	Obj09_DOWNsnd
0001D3DE 5378 F786                  		subi.w	#1,($FFFFF786).w	; reduce stage rotation speed
0001D3E2                            
0001D3E2                            Obj09_DOWNsnd:
0001D3E2 303C 00A9                  		move.w	#$A9,d0
0001D3E6 4EB9 0000 1C74             		jsr	(PlaySound_Special).l	; play up/down sound
0001D3EC 7800                       		moveq	#0,d4
0001D3EE 4E75                       		rts	
0001D3F0                            ; ===========================================================================
0001D3F0                            
0001D3F0                            Obj09_Rblock:
0001D3F0 0C04 002B                  		cmpi.b	#$2B,d4		; is the item an "R" block?
0001D3F4 6600                       		bne.s	Obj09_ChkGhost
0001D3F6 6100 F5D6                  		bsr.w	SS_RemoveCollectedItem
0001D3FA 6600                       		bne.s	Obj09_RevStage
0001D3FC 14BC 0001                  		move.b	#1,(a2)
0001D400 2549 0004                  		move.l	a1,4(a2)
0001D404                            
0001D404                            Obj09_RevStage:
0001D404 31FC 012C F784                     move.w  #300,($FFFFF784).w
0001D40A 103C 00A9                  		move.b	#$A9,d0
0001D40E 4EB9 0000 1C74             		jsr	(PlaySound_Special).l	; play sound
0001D414 7800                       		moveq	#0,d4
0001D416 4E75                       		rts	
0001D418                            
0001D418                            ; ===========================================================================
0001D418                            
0001D418                            Obj09_ChkGhost:
0001D418 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001D41C 6600                       		bne.s	Obj09_ChkGhostTag
0001D41E 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001D424                            
0001D424                            Obj09_ChkGhostTag:
0001D424 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001D428 6600                       		bne.s	Obj09_NoGhost
0001D42A 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001D430 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001D432 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001D438                            
0001D438                            Obj09_NoGhost:
0001D438 78FF                       		moveq	#-1,d4
0001D43A 4E75                       		rts	
0001D43C                            ; ===========================================================================
0001D43C                            
0001D43C                            Obj09_MakeGhostSolid:
0001D43C 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001D442 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001D444 43F9 00FF 1020             		lea	($FF1020).l,a1
0001D44A 723F                       		moveq	#$3F,d1
0001D44C                            
0001D44C                            Obj09_GhostLoop2:
0001D44C 743F                       		moveq	#$3F,d2
0001D44E                            
0001D44E                            Obj09_GhostLoop:
0001D44E 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001D452 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001D454 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001D458                            
0001D458                            Obj09_NoReplace:
0001D458 5249                       		addq.w	#1,a1
0001D45A 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001D45E 43E9 0040                  		lea	$40(a1),a1
0001D462 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001D466                            
0001D466                            Obj09_GhostNotSolid:
0001D466 4228 003A                  		clr.b	$3A(a0)
0001D46A 7800                       		moveq	#0,d4
0001D46C 4E75                       		rts	
0001D46E                            ; End of function Obj09_ChkItems
0001D46E                            
0001D46E                            
0001D46E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D46E                            
0001D46E                            
0001D46E                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001D46E 1028 0030                  		move.b	$30(a0),d0
0001D472 6600                       		bne.s	Obj09_GOAL
0001D474 5328 0036                  		subq.b	#1,$36(a0)
0001D478 6A00                       		bpl.s	loc_1BEA0
0001D47A 117C 0000 0036             		move.b	#0,$36(a0)
0001D480                            
0001D480                            loc_1BEA0:
0001D480 5328 0037                  		subq.b	#1,$37(a0)
0001D484 6A00                       		bpl.s	locret_1BEAC
0001D486 117C 0000 0037             		move.b	#0,$37(a0)
0001D48C                            
0001D48C                            locret_1BEAC:
0001D48C 4E75                       		rts	
0001D48E                            ; ===========================================================================
0001D48E                            
0001D48E                            ; ===========================================================================
0001D48E                            
0001D48E                            Obj09_GOAL:
0001D48E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001D492 6600                       		bne.s	Obj09_ChkGlass
0001D494 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001D498 303C 00A8                  		move.w	#$A8,d0		; change item
0001D49C 4EB9 0000 1C74             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001D4A2 4E75                       		rts	
0001D4A4                            ; ===========================================================================
0001D4A4                            
0001D4A4                            ; ===========================================================================
0001D4A4                            
0001D4A4                            Obj09_ChkGlass:
0001D4A4 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001D4A8 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001D4AA 0C00 002E                  		cmpi.b	#$2E,d0
0001D4AE 6700                       		beq.s	Obj09_Glass
0001D4B0 0C00 002F                  		cmpi.b	#$2F,d0
0001D4B4 6700                       		beq.s	Obj09_Glass
0001D4B6 0C00 0030                  		cmpi.b	#$30,d0
0001D4BA 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001D4BC                            
0001D4BC                            Obj09_Glass:
0001D4BC 6100 F510                  		bsr.w	SS_RemoveCollectedItem
0001D4C0 6600                       		bne.s	Obj09_GlassSnd
0001D4C2 14BC 0006                  		move.b	#6,(a2)
0001D4C6 2268 0032                  		movea.l	$32(a0),a1
0001D4CA 5389                       		subq.l	#1,a1
0001D4CC 2549 0004                  		move.l	a1,4(a2)
0001D4D0 1011                       		move.b	(a1),d0
0001D4D2 5200                       		addq.b	#1,d0		; change glass type when touched
0001D4D4 0C00 0030                  		cmpi.b	#$30,d0
0001D4D8 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001D4DA 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001D4DC                            
0001D4DC                            Obj09_GlassUpdate:
0001D4DC 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001D4E0                            
0001D4E0                            Obj09_GlassSnd:
0001D4E0 303C 00BA                  		move.w	#$BA,d0
0001D4E4 4EF9 0000 1C74             		jmp	(PlaySound_Special).l ;	play glass block sound
0001D4EA                            ; ===========================================================================
0001D4EA                            
0001D4EA                            Obj09_NoGlass:
0001D4EA 4E75                       		rts	
0001D4EC                            ; End of function Obj09_ChkItems2
0001D4EC                            
0001D4EC                            ; ===========================================================================
0001D4EC                            ; ---------------------------------------------------------------------------
0001D4EC                            ; Object 10 - blank
0001D4EC                            ; ---------------------------------------------------------------------------
0001D4EC                            
0001D4EC                            Obj10:					; XREF: Obj_Index
0001D4EC 4E75                       		rts	
0001D4EE                            ; ---------------------------------------------------------------------------
0001D4EE                            ; Subroutine to	animate	level graphics
0001D4EE                            ; ---------------------------------------------------------------------------
0001D4EE                            
0001D4EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D4EE                            
0001D4EE                            
0001D4EE                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001D4EE 4A38 FFF9                  		tst.b	($FFFFFFF9).w	; GMZ: Is truth nuke flag enabled?
0001D4F2 6600                       		bne.s	AniArt_Pause	; GMZ: If yes, branch
0001D4F4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001D4F8 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001D4FA 4DF9 00C0 0000             		lea	($C00000).l,a6
0001D500 6100 0000                  		bsr.w	AniArt_GiantRing
0001D504 7000                       		moveq	#0,d0
0001D506 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001D50A D040                       		add.w	d0,d0
0001D50C 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001D510 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001D514                            ; ===========================================================================
0001D514                            
0001D514                            AniArt_Pause:
0001D514 4E75                       		rts	
0001D516                            ; End of function AniArt_Load
0001D516                            
0001D516                            ; ===========================================================================
0001D516 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001D51A 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001D51E 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001D522 0000 0000                  		dc.w AniArt_Ending-AniArt_Index, AniArt_GHZ-AniArt_Index
0001D526                            ; ===========================================================================
0001D526                            ; ---------------------------------------------------------------------------
0001D526                            ; Animated pattern routine - Green Hill
0001D526                            ; ---------------------------------------------------------------------------
0001D526                            
0001D526                            AniArt_GHZ:				; XREF: AniArt_Index
0001D526 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D52A 6A00                       		bpl.s	loc_1C08A
0001D52C 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001D532 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001D538 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D53C 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D540 0240 0001                  		andi.w	#1,d0
0001D544 6700                       		beq.s	loc_1C078
0001D546 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001D54A                            
0001D54A                            loc_1C078:
0001D54A 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001D554 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001D558 6000 0000                  		bra.w	LoadTiles
0001D55C                            ; ===========================================================================
0001D55C                            
0001D55C                            loc_1C08A:
0001D55C 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D560 6A00                       		bpl.s	loc_1C0C0
0001D562 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001D568 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D56E 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D572 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D576 0240 0001                  		andi.w	#1,d0
0001D57A 6700                       		beq.s	loc_1C0AE
0001D57C 43E9 0200                  		lea	$200(a1),a1
0001D580                            
0001D580                            loc_1C0AE:
0001D580 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D58A 323C 000F                  		move.w	#$F,d1
0001D58E 6000 0000                  		bra.w	LoadTiles
0001D592                            ; ===========================================================================
0001D592                            
0001D592                            loc_1C0C0:
0001D592 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D596 6A00                       		bpl.s	locret_1C10C
0001D598 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D59E 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D5A2 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D5A6 0240 0003                  		andi.w	#3,d0
0001D5AA 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001D5AE 0800 0000                  		btst	#0,d0
0001D5B2 6600                       		bne.s	loc_1C0E8
0001D5B4 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001D5BA                            
0001D5BA                            loc_1C0E8:
0001D5BA EF48                       		lsl.w	#7,d0
0001D5BC 3200                       		move.w	d0,d1
0001D5BE D040                       		add.w	d0,d0
0001D5C0 D041                       		add.w	d1,d0
0001D5C2 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D5CC 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D5D2 43F1 0000                  		lea	(a1,d0.w),a1
0001D5D6 323C 000B                  		move.w	#$B,d1
0001D5DA 6100 0000                  		bsr.w	LoadTiles
0001D5DE                            
0001D5DE                            locret_1C10C:
0001D5DE 4E75                       		rts	
0001D5E0                            ; ===========================================================================
0001D5E0 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001D5E4                            ; ===========================================================================
0001D5E4                            ; ---------------------------------------------------------------------------
0001D5E4                            ; Animated pattern routine - Marble
0001D5E4                            ; ---------------------------------------------------------------------------
0001D5E4                            
0001D5E4                            AniArt_MZ:				; XREF: AniArt_Index
0001D5E4 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D5E8 6A00                       		bpl.s	loc_1C150
0001D5EA 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001D5F0 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001D5F6 7000                       		moveq	#0,d0
0001D5F8 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D5FC 5200                       		addq.b	#1,d0
0001D5FE 0C00 0003                  		cmpi.b	#3,d0
0001D602 6600                       		bne.s	loc_1C134
0001D604 7000                       		moveq	#0,d0
0001D606                            
0001D606                            loc_1C134:
0001D606 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001D60A C0FC 0100                  		mulu.w	#$100,d0
0001D60E D2C0                       		adda.w	d0,a1
0001D610 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001D61A 323C 0007                  		move.w	#7,d1
0001D61E 6100 0000                  		bsr.w	LoadTiles
0001D622                            
0001D622                            loc_1C150:
0001D622 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D626 6A00                       		bpl.s	loc_1C1AE
0001D628 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001D62E 7000                       		moveq	#0,d0
0001D630 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D634 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001D63A EE58                       		ror.w	#7,d0
0001D63C D8C0                       		adda.w	d0,a4
0001D63E 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001D648 7600                       		moveq	#0,d3
0001D64A 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001D64E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D652 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001D656 343C 0003                  		move.w	#3,d2
0001D65A                            
0001D65A                            loc_1C188:
0001D65A 3003                       		move.w	d3,d0
0001D65C D040                       		add.w	d0,d0
0001D65E 0240 001E                  		andi.w	#$1E,d0
0001D662 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001D668 3033 0000                  		move.w	(a3,d0.w),d0
0001D66C 47F3 0000                  		lea	(a3,d0.w),a3
0001D670 224C                       		movea.l	a4,a1
0001D672 323C 001F                  		move.w	#$1F,d1
0001D676 4E93                       		jsr	(a3)
0001D678 5843                       		addq.w	#4,d3
0001D67A 51CA FFDE                  		dbf	d2,loc_1C188
0001D67E 4E75                       		rts	
0001D680                            ; ===========================================================================
0001D680                            
0001D680                            loc_1C1AE:
0001D680 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D684 6A00 0000                  		bpl.w	locret_1C1EA
0001D688 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D68E 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001D694 7000                       		moveq	#0,d0
0001D696 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001D69A 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001D69E 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001D6A4 C0FC 00C0                  		mulu.w	#$C0,d0
0001D6A8 D2C0                       		adda.w	d0,a1
0001D6AA 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001D6B4 323C 0005                  		move.w	#5,d1
0001D6B8 6000 0000                  		bra.w	LoadTiles
0001D6BC                            ; ===========================================================================
0001D6BC                            
0001D6BC                            locret_1C1EA:
0001D6BC 4E75                       		rts	
0001D6BE                            ; ===========================================================================
0001D6BE                            ; ---------------------------------------------------------------------------
0001D6BE                            ; Animated pattern routine - Scrap Brain
0001D6BE                            ; ---------------------------------------------------------------------------
0001D6BE                            
0001D6BE                            AniArt_SBZ:				; XREF: AniArt_Index
0001D6BE 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001D6C2 6700                       		beq.s	loc_1C1F8
0001D6C4 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001D6C8 6000                       		bra.s	loc_1C250
0001D6CA                            ; ===========================================================================
0001D6CA                            
0001D6CA                            loc_1C1F8:
0001D6CA 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001D6CE 6A00                       		bpl.s	loc_1C250
0001D6D0 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001D6D6 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001D6DC 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001D6E6 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001D6EA 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001D6EE 0240 0007                  		andi.w	#7,d0
0001D6F2 6700                       		beq.s	loc_1C234
0001D6F4 5340                       		subq.w	#1,d0
0001D6F6 C0FC 0180                  		mulu.w	#$180,d0
0001D6FA 43F1 0000                  		lea	(a1,d0.w),a1
0001D6FE 323C 000B                  		move.w	#$B,d1
0001D702 6000 0000                  		bra.w	LoadTiles
0001D706                            ; ===========================================================================
0001D706                            
0001D706                            loc_1C234:
0001D706 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001D70C                            
0001D70C                            loc_1C23A:
0001D70C 323C 0005                  		move.w	#5,d1
0001D710 6100 0000                  		bsr.w	LoadTiles
0001D714 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D71A 323C 0005                  		move.w	#5,d1
0001D71E 6000 0000                  		bra.w	LoadTiles
0001D722                            ; ===========================================================================
0001D722                            
0001D722                            loc_1C250:
0001D722 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001D726 6700                       		beq.s	loc_1C25C
0001D728 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D72C 6000                       		bra.s	locret_1C2A0
0001D72E                            ; ===========================================================================
0001D72E                            
0001D72E                            loc_1C25C:
0001D72E 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D732 6A00                       		bpl.s	locret_1C2A0
0001D734 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D73A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001D740 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001D74A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D74E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D752 0240 0007                  		andi.w	#7,d0
0001D756 6700                       		beq.s	loc_1C298
0001D758 5340                       		subq.w	#1,d0
0001D75A C0FC 0180                  		mulu.w	#$180,d0
0001D75E 43F1 0000                  		lea	(a1,d0.w),a1
0001D762 323C 000B                  		move.w	#$B,d1
0001D766 6000 0000                  		bra.w	LoadTiles
0001D76A                            ; ===========================================================================
0001D76A                            
0001D76A                            loc_1C298:
0001D76A 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001D770 609A                       		bra.s	loc_1C23A
0001D772                            ; ===========================================================================
0001D772                            
0001D772                            locret_1C2A0:
0001D772 4E75                       		rts	
0001D774                            ; ===========================================================================
0001D774                            ; ---------------------------------------------------------------------------
0001D774                            ; Animated pattern routine - ending sequence
0001D774                            ; ---------------------------------------------------------------------------
0001D774                            
0001D774                            AniArt_Ending:				; XREF: AniArt_Index
0001D774 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001D778 6A00                       		bpl.s	loc_1C2F4
0001D77A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001D780 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001D786 45F8 9400                  		lea	($FFFF9400).w,a2
0001D78A 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001D78E 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001D792 0240 0001                  		andi.w	#1,d0
0001D796 6700                       		beq.s	loc_1C2CE
0001D798 43E9 0200                  		lea	$200(a1),a1
0001D79C 45EA 0200                  		lea	$200(a2),a2
0001D7A0                            
0001D7A0                            loc_1C2CE:
0001D7A0 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001D7AA 323C 000F                  		move.w	#$F,d1
0001D7AE 6100 0000                  		bsr.w	LoadTiles
0001D7B2 224A                       		movea.l	a2,a1
0001D7B4 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001D7BE 323C 000F                  		move.w	#$F,d1
0001D7C2 6000 0000                  		bra.w	LoadTiles
0001D7C6                            ; ===========================================================================
0001D7C6                            
0001D7C6                            loc_1C2F4:
0001D7C6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001D7CA 6A00                       		bpl.s	loc_1C33C
0001D7CC 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001D7D2 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001D7D6 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001D7DA 0240 0007                  		andi.w	#7,d0
0001D7DE 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001D7E2 EF48                       		lsl.w	#7,d0
0001D7E4 3200                       		move.w	d0,d1
0001D7E6 D040                       		add.w	d0,d0
0001D7E8 D041                       		add.w	d1,d0
0001D7EA 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001D7F4 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001D7FA 43F1 0000                  		lea	(a1,d0.w),a1
0001D7FE 323C 000B                  		move.w	#$B,d1
0001D802 6000 0000                  		bra.w	LoadTiles
0001D806                            ; ===========================================================================
0001D806 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001D80E                            ; ===========================================================================
0001D80E                            
0001D80E                            loc_1C33C:
0001D80E 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001D812 6A00                       		bpl.s	loc_1C37A
0001D814 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001D81A 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001D81E 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001D822 0240 0003                  		andi.w	#3,d0
0001D826 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001D82A E148                       		lsl.w	#8,d0
0001D82C D040                       		add.w	d0,d0
0001D82E 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001D838 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001D83C 43F1 0000                  		lea	(a1,d0.w),a1
0001D840 323C 000F                  		move.w	#$F,d1
0001D844 6000 0000                  		bra.w	LoadTiles
0001D848                            ; ===========================================================================
0001D848 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001D84C                            ; ===========================================================================
0001D84C                            
0001D84C                            loc_1C37A:
0001D84C 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001D850 6A00                       		bpl.s	locret_1C3B4
0001D852 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001D858 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001D85C 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001D860 0240 0003                  		andi.w	#3,d0
0001D864 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001D868 E148                       		lsl.w	#8,d0
0001D86A D040                       		add.w	d0,d0
0001D86C 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001D876 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001D87A 43F1 0000                  		lea	(a1,d0.w),a1
0001D87E 323C 000F                  		move.w	#$F,d1
0001D882 6000 0000                  		bra.w	LoadTiles
0001D886                            ; ===========================================================================
0001D886                            
0001D886                            locret_1C3B4:
0001D886 4E75                       		rts	
0001D888                            ; ===========================================================================
0001D888                            
0001D888                            AniArt_none:				; XREF: AniArt_Index
0001D888 4E75                       		rts	
0001D88A                            
0001D88A                            ; ---------------------------------------------------------------------------
0001D88A                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001D88A                            ; ---------------------------------------------------------------------------
0001D88A                            
0001D88A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D88A                            
0001D88A                            
0001D88A                            LoadTiles:
0001D88A 2C99                       		move.l	(a1)+,(a6)
0001D88C 2C99                       		move.l	(a1)+,(a6)
0001D88E 2C99                       		move.l	(a1)+,(a6)
0001D890 2C99                       		move.l	(a1)+,(a6)
0001D892 2C99                       		move.l	(a1)+,(a6)
0001D894 2C99                       		move.l	(a1)+,(a6)
0001D896 2C99                       		move.l	(a1)+,(a6)
0001D898 2C99                       		move.l	(a1)+,(a6)
0001D89A 51C9 FFEE                  		dbf	d1,LoadTiles
0001D89E 4E75                       		rts	
0001D8A0                            ; End of function LoadTiles
0001D8A0                            
0001D8A0                            ; ===========================================================================
0001D8A0                            ; ---------------------------------------------------------------------------
0001D8A0                            ; Animated pattern routine - more Marble Zone
0001D8A0                            ; ---------------------------------------------------------------------------
0001D8A0 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001D8A4 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001D8A8 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001D8AC 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001D8B0 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001D8B4 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001D8B8 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001D8BC 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001D8C0                            ; ===========================================================================
0001D8C0                            
0001D8C0                            loc_1C3EE:				; XREF: AniArt_MZextra
0001D8C0 2C91                       		move.l	(a1),(a6)
0001D8C2 43E9 0010                  		lea	$10(a1),a1
0001D8C6 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001D8CA 4E75                       		rts	
0001D8CC                            ; ===========================================================================
0001D8CC                            
0001D8CC                            loc_1C3FA:				; XREF: AniArt_MZextra
0001D8CC 2029 0002                  		move.l	2(a1),d0
0001D8D0 1029 0001                  		move.b	1(a1),d0
0001D8D4 E098                       		ror.l	#8,d0
0001D8D6 2C80                       		move.l	d0,(a6)
0001D8D8 43E9 0010                  		lea	$10(a1),a1
0001D8DC 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001D8E0 4E75                       		rts	
0001D8E2                            ; ===========================================================================
0001D8E2                            
0001D8E2                            loc_1C410:				; XREF: AniArt_MZextra
0001D8E2 2CA9 0002                  		move.l	2(a1),(a6)
0001D8E6 43E9 0010                  		lea	$10(a1),a1
0001D8EA 51C9 FFF6                  		dbf	d1,loc_1C410
0001D8EE 4E75                       		rts	
0001D8F0                            ; ===========================================================================
0001D8F0                            
0001D8F0                            loc_1C41E:				; XREF: AniArt_MZextra
0001D8F0 2029 0004                  		move.l	4(a1),d0
0001D8F4 1029 0003                  		move.b	3(a1),d0
0001D8F8 E098                       		ror.l	#8,d0
0001D8FA 2C80                       		move.l	d0,(a6)
0001D8FC 43E9 0010                  		lea	$10(a1),a1
0001D900 51C9 FFEE                  		dbf	d1,loc_1C41E
0001D904 4E75                       		rts	
0001D906                            ; ===========================================================================
0001D906                            
0001D906                            loc_1C434:				; XREF: AniArt_MZextra
0001D906 2CA9 0004                  		move.l	4(a1),(a6)
0001D90A 43E9 0010                  		lea	$10(a1),a1
0001D90E 51C9 FFF6                  		dbf	d1,loc_1C434
0001D912 4E75                       		rts	
0001D914                            ; ===========================================================================
0001D914                            
0001D914                            loc_1C442:				; XREF: AniArt_MZextra
0001D914 2029 0006                  		move.l	6(a1),d0
0001D918 1029 0005                  		move.b	5(a1),d0
0001D91C E098                       		ror.l	#8,d0
0001D91E 2C80                       		move.l	d0,(a6)
0001D920 43E9 0010                  		lea	$10(a1),a1
0001D924 51C9 FFEE                  		dbf	d1,loc_1C442
0001D928 4E75                       		rts	
0001D92A                            ; ===========================================================================
0001D92A                            
0001D92A                            loc_1C458:				; XREF: AniArt_MZextra
0001D92A 2CA9 0006                  		move.l	6(a1),(a6)
0001D92E 43E9 0010                  		lea	$10(a1),a1
0001D932 51C9 FFF6                  		dbf	d1,loc_1C458
0001D936 4E75                       		rts	
0001D938                            ; ===========================================================================
0001D938                            
0001D938                            loc_1C466:				; XREF: AniArt_MZextra
0001D938 2029 0008                  		move.l	8(a1),d0
0001D93C 1029 0007                  		move.b	7(a1),d0
0001D940 E098                       		ror.l	#8,d0
0001D942 2C80                       		move.l	d0,(a6)
0001D944 43E9 0010                  		lea	$10(a1),a1
0001D948 51C9 FFEE                  		dbf	d1,loc_1C466
0001D94C 4E75                       		rts	
0001D94E                            ; ===========================================================================
0001D94E                            
0001D94E                            loc_1C47C:				; XREF: AniArt_MZextra
0001D94E 2CA9 0008                  		move.l	8(a1),(a6)
0001D952 43E9 0010                  		lea	$10(a1),a1
0001D956 51C9 FFF6                  		dbf	d1,loc_1C47C
0001D95A 4E75                       		rts	
0001D95C                            ; ===========================================================================
0001D95C                            
0001D95C                            loc_1C48A:				; XREF: AniArt_MZextra
0001D95C 2029 000A                  		move.l	$A(a1),d0
0001D960 1029 0009                  		move.b	9(a1),d0
0001D964 E098                       		ror.l	#8,d0
0001D966 2C80                       		move.l	d0,(a6)
0001D968 43E9 0010                  		lea	$10(a1),a1
0001D96C 51C9 FFEE                  		dbf	d1,loc_1C48A
0001D970 4E75                       		rts	
0001D972                            ; ===========================================================================
0001D972                            
0001D972                            loc_1C4A0:				; XREF: AniArt_MZextra
0001D972 2CA9 000A                  		move.l	$A(a1),(a6)
0001D976 43E9 0010                  		lea	$10(a1),a1
0001D97A 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001D97E 4E75                       		rts	
0001D980                            ; ===========================================================================
0001D980                            
0001D980                            loc_1C4AE:				; XREF: AniArt_MZextra
0001D980 2029 000C                  		move.l	$C(a1),d0
0001D984 1029 000B                  		move.b	$B(a1),d0
0001D988 E098                       		ror.l	#8,d0
0001D98A 2C80                       		move.l	d0,(a6)
0001D98C 43E9 0010                  		lea	$10(a1),a1
0001D990 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001D994 4E75                       		rts	
0001D996                            ; ===========================================================================
0001D996                            
0001D996                            loc_1C4C4:				; XREF: AniArt_MZextra
0001D996 2CA9 000C                  		move.l	$C(a1),(a6)
0001D99A 43E9 0010                  		lea	$10(a1),a1
0001D99E 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001D9A2 4E75                       		rts	
0001D9A4                            ; ===========================================================================
0001D9A4                            
0001D9A4                            loc_1C4D2:				; XREF: AniArt_MZextra
0001D9A4 2029 000C                  		move.l	$C(a1),d0
0001D9A8 E198                       		rol.l	#8,d0
0001D9AA 1011                       		move.b	0(a1),d0
0001D9AC 2C80                       		move.l	d0,(a6)
0001D9AE 43E9 0010                  		lea	$10(a1),a1
0001D9B2 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001D9B6 4E75                       		rts	
0001D9B8                            ; ===========================================================================
0001D9B8                            
0001D9B8                            loc_1C4E8:				; XREF: AniArt_MZextra
0001D9B8 3CA9 000E                  		move.w	$E(a1),(a6)
0001D9BC 3C91                       		move.w	0(a1),(a6)
0001D9BE 43E9 0010                  		lea	$10(a1),a1
0001D9C2 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001D9C6 4E75                       		rts	
0001D9C8                            ; ===========================================================================
0001D9C8                            
0001D9C8                            loc_1C4FA:				; XREF: AniArt_MZextra
0001D9C8 2011                       		move.l	0(a1),d0
0001D9CA 1029 000F                  		move.b	$F(a1),d0
0001D9CE E098                       		ror.l	#8,d0
0001D9D0 2C80                       		move.l	d0,(a6)
0001D9D2 43E9 0010                  		lea	$10(a1),a1
0001D9D6 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001D9DA 4E75                       		rts	
0001D9DC                            
0001D9DC                            ; ---------------------------------------------------------------------------
0001D9DC                            ; Animated pattern routine - giant ring
0001D9DC                            ; ---------------------------------------------------------------------------
0001D9DC                            
0001D9DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D9DC                            
0001D9DC                            
0001D9DC                            AniArt_GiantRing:			; XREF: AniArt_Load
0001D9DC 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001D9E0 6600                       		bne.s	loc_1C518
0001D9E2 4E75                       		rts	
0001D9E4                            ; ===========================================================================
0001D9E4                            
0001D9E4                            loc_1C518:
0001D9E4 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001D9EA 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001D9F0 7000                       		moveq	#0,d0
0001D9F2 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001D9F6 43F1 0000                  		lea	(a1,d0.w),a1
0001D9FA 0640 8000                  		addi.w	#$8000,d0
0001D9FE E588                       		lsl.l	#2,d0
0001DA00 E448                       		lsr.w	#2,d0
0001DA02 0040 4000                  		ori.w	#$4000,d0
0001DA06 4840                       		swap	d0
0001DA08 2D40 0004                  		move.l	d0,4(a6)
0001DA0C 323C 000D                  		move.w	#$D,d1
0001DA10 6000 FE78                  		bra.w	LoadTiles
0001DA14                            ; End of function AniArt_GiantRing
0001DA14                            
0001DA14                            ; ===========================================================================
0001DA14                            ; ---------------------------------------------------------------------------
0001DA14                            ; Object 21 - SCORE, TIME, RINGS
0001DA14                            ; ---------------------------------------------------------------------------
0001DA14                            
0001DA14                            Obj21:					; XREF: Obj_Index
0001DA14 7000                       		moveq	#0,d0
0001DA16 1028 0024                  		move.b	$24(a0),d0
0001DA1A 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001DA1E 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001DA22                            ; ===========================================================================
0001DA22 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001DA24 0000                       		dc.w Obj21_Flash-Obj21_Index
0001DA26                            ; ===========================================================================
0001DA26                            
0001DA26                            Obj21_Main:				; XREF: Obj21_Main
0001DA26 5428 0024                  		addq.b	#2,$24(a0)
0001DA2A 317C 0090 0008             		move.w	#$90,8(a0)
0001DA30 317C 0108 000A             		move.w	#$108,$A(a0)
0001DA36 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001DA3E 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001DA44 117C 0000 0001             		move.b	#0,1(a0)
0001DA4A 117C 0000 0018             		move.b	#0,$18(a0)
0001DA50                            
0001DA50                            Obj21_Flash:				; XREF: Obj21_Main
0001DA50 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001DA54 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001DA56 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001DA5A 4EF9 0000 E742             		jmp	DisplaySprite
0001DA60                            ; ===========================================================================
0001DA60                            
0001DA60                            Obj21_Flash2:
0001DA60 7000                       		moveq	#0,d0
0001DA62 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001DA68 6600                       		bne.s	Obj21_Display
0001DA6A 5240                       		addq.w	#1,d0		; make ring counter flash red
0001DA6C 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001DA72 6600                       		bne.s	Obj21_Display	; if not, branch
0001DA74 5440                       		addq.w	#2,d0		; make time counter flash red
0001DA76                            
0001DA76                            Obj21_Display:
0001DA76 1140 001A                  		move.b	d0,$1A(a0)
0001DA7A 4EF9 0000 E742             		jmp	DisplaySprite
0001DA80                            ; ===========================================================================
0001DA80                            ; ---------------------------------------------------------------------------
0001DA80                            ; Sprite mappings - SCORE, TIME, RINGS
0001DA80                            ; ---------------------------------------------------------------------------
0001DA80                            Map_obj21:
0001DA80                            	include "_maps\obj21.asm"
0001DA80                            Map_549d:
0001DA80 0000                       Map_549d_0: 	dc.w Map_549d_8-Map_549d
0001DA82 0000                       Map_549d_2: 	dc.w Map_549d_36-Map_549d
0001DA84 0000                       Map_549d_4: 	dc.w Map_549d_64-Map_549d
0001DA86 0000                       Map_549d_6: 	dc.w Map_549d_92-Map_549d
0001DA88 09                         Map_549d_8: 	dc.b $9
0001DA89 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DA8E 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DA93 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DA98 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DA9D A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DAA2 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DAA7 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DAAC 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DAB1 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DAB6 09                         Map_549d_36: 	dc.b $9
0001DAB7 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DABC 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DAC1 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DAC6 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DACB A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DAD0 A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DAD5 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DADA 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DADF 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DAE4 09                         Map_549d_64: 	dc.b $9
0001DAE5 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DAEA 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DAEF 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DAF4 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DAF9 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DAFE A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB03 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB08 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB0D 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB12 09                         Map_549d_92: 	dc.b $9
0001DB13 800D 8000 00               	dc.b $80, $D, $80, $0, $0
0001DB18 800D 8018 20               	dc.b $80, $D, $80, $18, $20
0001DB1D 800D 8020 40               	dc.b $80, $D, $80, $20, $40
0001DB22 900D 8028 28               	dc.b $90, $D, $80, $28, $28
0001DB27 A001 8000 20               	dc.b $A0, $1, $80, $0, $20
0001DB2C A009 8030 30               	dc.b $A0, $9, $80, $30, $30
0001DB31 4005 810A 00               	dc.b $40, $5, $81, $A, $0
0001DB36 400D 810E 10               	dc.b $40, $D, $81, $E, $10
0001DB3B 900F 8008 00               	dc.b $90, $F, $80, $8, $0
0001DB40                            	even
0001DB40                            	even
0001DB40                            
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40                            ; Add points subroutine
0001DB40                            ; ---------------------------------------------------------------------------
0001DB40                            
0001DB40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB40                            
0001DB40                            
0001DB40                            AddPoints:
0001DB40 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001DB46 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001DB4A 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001DB4E D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001DB50 223C 000F 423F             		move.l	#999999,d1
0001DB56 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001DB58 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001DB5C 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001DB5E 2481                       		move.l	d1,(a2)
0001DB60                            
0001DB60                            loc_1C6AC:
0001DB60 2013                       		move.l	(a3),d0
0001DB62 B092                       		cmp.l	(a2),d0
0001DB64 6500 0000                  		bcs.w	locret_1C6B6
0001DB68 2480                       		move.l	d0,(a2)
0001DB6A                            
0001DB6A                            locret_1C6B6:
0001DB6A 4E75                       		rts	
0001DB6C                            ; End of function AddPoints
0001DB6C                            
0001DB6C                            ; ---------------------------------------------------------------------------
0001DB6C                            ; Subroutine to	update the HUD
0001DB6C                            ; ---------------------------------------------------------------------------
0001DB6C                            
0001DB6C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DB6C                            
0001DB6C                            
0001DB6C                            HudUpdate:
0001DB6C 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001DB70 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001DB74 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001DB78 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001DB7A 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001DB7E 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001DB84 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001DB88 6100 0000                  		bsr.w	Hud_Score
0001DB8C                            
0001DB8C                            Hud_ChkRings:
0001DB8C 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001DB90 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001DB92 6A00                       		bpl.s	loc_1C6E4
0001DB94 6100 0000                  		bsr.w	Hud_LoadZero
0001DB98                            
0001DB98                            loc_1C6E4:
0001DB98 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001DB9C 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001DBA2 7200                       		moveq	#0,d1
0001DBA4 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001DBA8 6100 0000                  		bsr.w	Hud_Rings
0001DBAC                            
0001DBAC                            Hud_ChkTime:
0001DBAC 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001DBB0 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001DBB2 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001DBB6 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001DBB8 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001DBBC 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001DBC2 6700                       		beq.s	TimeOver	; if yes, branch
0001DBC4 5221                       		addq.b	#1,-(a1)
0001DBC6 0C11 003C                  		cmpi.b	#60,(a1)
0001DBCA 6500                       		bcs.s	Hud_ChkLives
0001DBCC 12BC 0000                  		move.b	#0,(a1)
0001DBD0 5221                       		addq.b	#1,-(a1)
0001DBD2 0C11 003C                  		cmpi.b	#60,(a1)
0001DBD6 6500                       		bcs.s	loc_1C734
0001DBD8 12BC 0000                  		move.b	#0,(a1)
0001DBDC 5221                       		addq.b	#1,-(a1)
0001DBDE 0C11 0009                  		cmpi.b	#9,(a1)
0001DBE2 6500                       		bcs.s	loc_1C734
0001DBE4 12BC 0009                  		move.b	#9,(a1)
0001DBE8                            
0001DBE8                            loc_1C734:
0001DBE8 203C 5E40 0003             		move.l	#$5E400003,d0
0001DBEE 7200                       		moveq	#0,d1
0001DBF0 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001DBF4 6100 0000                  		bsr.w	Hud_Mins
0001DBF8 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001DBFE 7200                       		moveq	#0,d1
0001DC00 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001DC04 6100 0000                  		bsr.w	Hud_Secs
0001DC08                            
0001DC08                            Hud_ChkLives:
0001DC08 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001DC0C 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001DC0E 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001DC12 6100 0000                  		bsr.w	Hud_Lives
0001DC16                            
0001DC16                            Hud_ChkBonus:
0001DC16 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001DC1A 6700                       		beq.s	Hud_End		; if not, branch
0001DC1C 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001DC20 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001DC2A 7200                       		moveq	#0,d1
0001DC2C 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001DC30 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DC34 7200                       		moveq	#0,d1
0001DC36 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001DC3A 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DC3E                            
0001DC3E                            Hud_End:
0001DC3E 4E75                       		rts	
0001DC40                            ; ===========================================================================
0001DC40                            
0001DC40                            TimeOver:				; XREF: Hud_ChkTime
0001DC40 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001DC44 41F8 D000                  		lea	($FFFFD000).w,a0
0001DC48 2448                       		movea.l	a0,a2
0001DC4A 6100 E960                  		bsr.w	KillSonic
0001DC4E 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001DC54 4E75                       		rts	
0001DC56                            ; ===========================================================================
0001DC56                            
0001DC56                            HudDebug:				; XREF: HudUpdate
0001DC56 6100 0000                  		bsr.w	HudDb_XY
0001DC5A 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001DC5E 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001DC60 6A00                       		bpl.s	HudDb_Rings
0001DC62 6100 0000                  		bsr.w	Hud_LoadZero
0001DC66                            
0001DC66                            HudDb_Rings:
0001DC66 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001DC6A 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001DC70 7200                       		moveq	#0,d1
0001DC72 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001DC76 6100 0000                  		bsr.w	Hud_Rings
0001DC7A                            
0001DC7A                            HudDb_ObjCount:
0001DC7A 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001DC80 7200                       		moveq	#0,d1
0001DC82 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001DC86 6100 0000                  		bsr.w	Hud_Secs
0001DC8A 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001DC8E 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001DC90 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001DC94 6100 0000                  		bsr.w	Hud_Lives
0001DC98                            
0001DC98                            HudDb_ChkBonus:
0001DC98 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001DC9C 6700                       		beq.s	HudDb_End	; if not, branch
0001DC9E 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001DCA2 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001DCAC 7200                       		moveq	#0,d1
0001DCAE 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001DCB2 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DCB6 7200                       		moveq	#0,d1
0001DCB8 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001DCBC 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001DCC0                            
0001DCC0                            HudDb_End:
0001DCC0 4E75                       		rts	
0001DCC2                            ; End of function HudUpdate
0001DCC2                            
0001DCC2                            ; ---------------------------------------------------------------------------
0001DCC2                            ; Subroutine to	load "0" on the	HUD
0001DCC2                            ; ---------------------------------------------------------------------------
0001DCC2                            
0001DCC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCC2                            
0001DCC2                            
0001DCC2                            Hud_LoadZero:				; XREF: HudUpdate
0001DCC2 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001DCCC 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001DCD0 343C 0002                  		move.w	#2,d2
0001DCD4 6000                       		bra.s	loc_1C83E
0001DCD6                            ; End of function Hud_LoadZero
0001DCD6                            
0001DCD6                            ; ---------------------------------------------------------------------------
0001DCD6                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001DCD6                            ; ---------------------------------------------------------------------------
0001DCD6                            
0001DCD6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DCD6                            
0001DCD6                            
0001DCD6                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001DCD6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DCDC 6100 0000                  		bsr.w	Hud_Lives
0001DCE0 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001DCEA 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001DCEE 343C 000E                  		move.w	#$E,d2
0001DCF2                            
0001DCF2                            loc_1C83E:				; XREF: Hud_LoadZero
0001DCF2 43FA 0000                  		lea	Art_Hud(pc),a1
0001DCF6                            
0001DCF6                            loc_1C842:
0001DCF6 323C 000F                  		move.w	#$F,d1
0001DCFA 101A                       		move.b	(a2)+,d0
0001DCFC 6B00                       		bmi.s	loc_1C85E
0001DCFE 4880                       		ext.w	d0
0001DD00 EB48                       		lsl.w	#5,d0
0001DD02 47F1 0000                  		lea	(a1,d0.w),a3
0001DD06                            
0001DD06                            loc_1C852:
0001DD06 2C9B                       		move.l	(a3)+,(a6)
0001DD08 51C9 FFFC                  		dbf	d1,loc_1C852
0001DD0C                            
0001DD0C                            loc_1C858:
0001DD0C 51CA FFE8                  		dbf	d2,loc_1C842
0001DD10                            
0001DD10 4E75                       		rts	
0001DD12                            ; ===========================================================================
0001DD12                            
0001DD12                            loc_1C85E:
0001DD12 2CBC 0000 0000             		move.l	#0,(a6)
0001DD18 51C9 FFF8                  		dbf	d1,loc_1C85E
0001DD1C                            
0001DD1C 60EE                       		bra.s	loc_1C858
0001DD1E                            ; End of function Hud_Base
0001DD1E                            
0001DD1E                            ; ===========================================================================
0001DD1E 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001DD2A FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001DD2E                            ; ---------------------------------------------------------------------------
0001DD2E                            ; Subroutine to	load debug mode	numbers	patterns
0001DD2E                            ; ---------------------------------------------------------------------------
0001DD2E                            
0001DD2E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD2E                            
0001DD2E                            
0001DD2E                            HudDb_XY:				; XREF: HudDebug
0001DD2E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001DD38 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001DD3C 4841                       		swap	d1
0001DD3E 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001DD42 6100                       		bsr.s	HudDb_XY2
0001DD44 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001DD48 4841                       		swap	d1
0001DD4A 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001DD4E                            ; End of function HudDb_XY
0001DD4E                            
0001DD4E                            
0001DD4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD4E                            
0001DD4E                            
0001DD4E                            HudDb_XY2:
0001DD4E 7C07                       		moveq	#7,d6
0001DD50 43F9 0000 0D60             		lea	(Art_Text).l,a1
0001DD56                            
0001DD56                            HudDb_XYLoop:
0001DD56 E959                       		rol.w	#4,d1
0001DD58 3401                       		move.w	d1,d2
0001DD5A 0242 000F                  		andi.w	#$F,d2
0001DD5E 0C42 000A                  		cmpi.w	#$A,d2
0001DD62 6500                       		bcs.s	loc_1C8B2
0001DD64 5E42                       		addq.w	#7,d2
0001DD66                            
0001DD66                            loc_1C8B2:
0001DD66 EB4A                       		lsl.w	#5,d2
0001DD68 47F1 2000                  		lea	(a1,d2.w),a3
0001DD6C 2C9B                       		move.l	(a3)+,(a6)
0001DD6E 2C9B                       		move.l	(a3)+,(a6)
0001DD70 2C9B                       		move.l	(a3)+,(a6)
0001DD72 2C9B                       		move.l	(a3)+,(a6)
0001DD74 2C9B                       		move.l	(a3)+,(a6)
0001DD76 2C9B                       		move.l	(a3)+,(a6)
0001DD78 2C9B                       		move.l	(a3)+,(a6)
0001DD7A 2C9B                       		move.l	(a3)+,(a6)
0001DD7C 4841                       		swap	d1
0001DD7E 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001DD82                            
0001DD82 4E75                       		rts	
0001DD84                            ; End of function HudDb_XY2
0001DD84                            
0001DD84                            ; ---------------------------------------------------------------------------
0001DD84                            ; Subroutine to	load rings numbers patterns
0001DD84                            ; ---------------------------------------------------------------------------
0001DD84                            
0001DD84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD84                            
0001DD84                            
0001DD84                            Hud_Rings:				; XREF: HudUpdate
0001DD84 45F9 0000 0000             		lea	(Hud_100).l,a2
0001DD8A 7C02                       		moveq	#2,d6
0001DD8C 6000                       		bra.s	Hud_LoadArt
0001DD8E                            ; End of function Hud_Rings
0001DD8E                            
0001DD8E                            ; ---------------------------------------------------------------------------
0001DD8E                            ; Subroutine to	load score numbers patterns
0001DD8E                            ; ---------------------------------------------------------------------------
0001DD8E                            
0001DD8E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DD8E                            
0001DD8E                            
0001DD8E                            Hud_Score:				; XREF: HudUpdate
0001DD8E 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001DD94 7C05                       		moveq	#5,d6
0001DD96                            
0001DD96                            Hud_LoadArt:
0001DD96 7800                       		moveq	#0,d4
0001DD98 43FA 0000                  		lea	Art_Hud(pc),a1
0001DD9C                            
0001DD9C                            Hud_ScoreLoop:
0001DD9C 7400                       		moveq	#0,d2
0001DD9E 261A                       		move.l	(a2)+,d3
0001DDA0                            
0001DDA0                            loc_1C8EC:
0001DDA0 9283                       		sub.l	d3,d1
0001DDA2 6500                       		bcs.s	loc_1C8F4
0001DDA4 5242                       		addq.w	#1,d2
0001DDA6 60F8                       		bra.s	loc_1C8EC
0001DDA8                            ; ===========================================================================
0001DDA8                            
0001DDA8                            loc_1C8F4:
0001DDA8 D283                       		add.l	d3,d1
0001DDAA 4A42                       		tst.w	d2
0001DDAC 6700                       		beq.s	loc_1C8FE
0001DDAE 383C 0001                  		move.w	#1,d4
0001DDB2                            
0001DDB2                            loc_1C8FE:
0001DDB2 4A44                       		tst.w	d4
0001DDB4 6700                       		beq.s	loc_1C92C
0001DDB6 ED4A                       		lsl.w	#6,d2
0001DDB8 2D40 0004                  		move.l	d0,4(a6)
0001DDBC 47F1 2000                  		lea	(a1,d2.w),a3
0001DDC0 2C9B                       		move.l	(a3)+,(a6)
0001DDC2 2C9B                       		move.l	(a3)+,(a6)
0001DDC4 2C9B                       		move.l	(a3)+,(a6)
0001DDC6 2C9B                       		move.l	(a3)+,(a6)
0001DDC8 2C9B                       		move.l	(a3)+,(a6)
0001DDCA 2C9B                       		move.l	(a3)+,(a6)
0001DDCC 2C9B                       		move.l	(a3)+,(a6)
0001DDCE 2C9B                       		move.l	(a3)+,(a6)
0001DDD0 2C9B                       		move.l	(a3)+,(a6)
0001DDD2 2C9B                       		move.l	(a3)+,(a6)
0001DDD4 2C9B                       		move.l	(a3)+,(a6)
0001DDD6 2C9B                       		move.l	(a3)+,(a6)
0001DDD8 2C9B                       		move.l	(a3)+,(a6)
0001DDDA 2C9B                       		move.l	(a3)+,(a6)
0001DDDC 2C9B                       		move.l	(a3)+,(a6)
0001DDDE 2C9B                       		move.l	(a3)+,(a6)
0001DDE0                            
0001DDE0                            loc_1C92C:
0001DDE0 0680 0040 0000             		addi.l	#$400000,d0
0001DDE6 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001DDEA                            
0001DDEA 4E75                       		rts	
0001DDEC                            ; End of function Hud_Score
0001DDEC                            
0001DDEC                            ; ---------------------------------------------------------------------------
0001DDEC                            ; Subroutine to	load countdown numbers on the continue screen
0001DDEC                            ; ---------------------------------------------------------------------------
0001DDEC                            
0001DDEC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DDEC                            
0001DDEC                            
0001DDEC                            ContScrCounter:				; XREF: ContinueScreen
0001DDEC 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001DDF6 4DF9 00C0 0000             		lea	($C00000).l,a6
0001DDFC 45F9 0000 0000             		lea	(Hud_10).l,a2
0001DE02 7C01                       		moveq	#1,d6
0001DE04 7800                       		moveq	#0,d4
0001DE06 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001DE0A                            
0001DE0A                            ContScr_Loop:
0001DE0A 7400                       		moveq	#0,d2
0001DE0C 261A                       		move.l	(a2)+,d3
0001DE0E                            
0001DE0E                            loc_1C95A:
0001DE0E 9283                       		sub.l	d3,d1
0001DE10 6500                       		bcs.s	loc_1C962
0001DE12 5242                       		addq.w	#1,d2
0001DE14 60F8                       		bra.s	loc_1C95A
0001DE16                            ; ===========================================================================
0001DE16                            
0001DE16                            loc_1C962:
0001DE16 D283                       		add.l	d3,d1
0001DE18 ED4A                       		lsl.w	#6,d2
0001DE1A 47F1 2000                  		lea	(a1,d2.w),a3
0001DE1E 2C9B                       		move.l	(a3)+,(a6)
0001DE20 2C9B                       		move.l	(a3)+,(a6)
0001DE22 2C9B                       		move.l	(a3)+,(a6)
0001DE24 2C9B                       		move.l	(a3)+,(a6)
0001DE26 2C9B                       		move.l	(a3)+,(a6)
0001DE28 2C9B                       		move.l	(a3)+,(a6)
0001DE2A 2C9B                       		move.l	(a3)+,(a6)
0001DE2C 2C9B                       		move.l	(a3)+,(a6)
0001DE2E 2C9B                       		move.l	(a3)+,(a6)
0001DE30 2C9B                       		move.l	(a3)+,(a6)
0001DE32 2C9B                       		move.l	(a3)+,(a6)
0001DE34 2C9B                       		move.l	(a3)+,(a6)
0001DE36 2C9B                       		move.l	(a3)+,(a6)
0001DE38 2C9B                       		move.l	(a3)+,(a6)
0001DE3A 2C9B                       		move.l	(a3)+,(a6)
0001DE3C 2C9B                       		move.l	(a3)+,(a6)
0001DE3E 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001DE42                            
0001DE42 4E75                       		rts	
0001DE44                            ; End of function ContScrCounter
0001DE44                            
0001DE44                            ; ===========================================================================
0001DE44                            ; ---------------------------------------------------------------------------
0001DE44                            ; HUD counter sizes
0001DE44                            ; ---------------------------------------------------------------------------
0001DE44 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001DE48 0000 2710                  Hud_10000:	dc.l 10000
0001DE4C 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001DE50 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001DE54 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001DE58 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001DE5C                            
0001DE5C                            ; ---------------------------------------------------------------------------
0001DE5C                            ; Subroutine to	load time numbers patterns
0001DE5C                            ; ---------------------------------------------------------------------------
0001DE5C                            
0001DE5C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE5C                            
0001DE5C                            
0001DE5C                            Hud_Mins:				; XREF: Hud_ChkTime
0001DE5C 45F9 0001 DE58             		lea	(Hud_1).l,a2
0001DE62 7C00                       		moveq	#0,d6
0001DE64 6000                       		bra.s	loc_1C9BA
0001DE66                            ; End of function Hud_Mins
0001DE66                            
0001DE66                            
0001DE66                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DE66                            
0001DE66                            
0001DE66                            Hud_Secs:				; XREF: Hud_ChkTime
0001DE66 45F9 0001 DE54             		lea	(Hud_10).l,a2
0001DE6C 7C01                       		moveq	#1,d6
0001DE6E                            
0001DE6E                            loc_1C9BA:
0001DE6E 7800                       		moveq	#0,d4
0001DE70 43FA 0000                  		lea	Art_Hud(pc),a1
0001DE74                            
0001DE74                            Hud_TimeLoop:
0001DE74 7400                       		moveq	#0,d2
0001DE76 261A                       		move.l	(a2)+,d3
0001DE78                            
0001DE78                            loc_1C9C4:
0001DE78 9283                       		sub.l	d3,d1
0001DE7A 6500                       		bcs.s	loc_1C9CC
0001DE7C 5242                       		addq.w	#1,d2
0001DE7E 60F8                       		bra.s	loc_1C9C4
0001DE80                            ; ===========================================================================
0001DE80                            
0001DE80                            loc_1C9CC:
0001DE80 D283                       		add.l	d3,d1
0001DE82 4A42                       		tst.w	d2
0001DE84 6700                       		beq.s	loc_1C9D6
0001DE86 383C 0001                  		move.w	#1,d4
0001DE8A                            
0001DE8A                            loc_1C9D6:
0001DE8A ED4A                       		lsl.w	#6,d2
0001DE8C 2D40 0004                  		move.l	d0,4(a6)
0001DE90 47F1 2000                  		lea	(a1,d2.w),a3
0001DE94 2C9B                       		move.l	(a3)+,(a6)
0001DE96 2C9B                       		move.l	(a3)+,(a6)
0001DE98 2C9B                       		move.l	(a3)+,(a6)
0001DE9A 2C9B                       		move.l	(a3)+,(a6)
0001DE9C 2C9B                       		move.l	(a3)+,(a6)
0001DE9E 2C9B                       		move.l	(a3)+,(a6)
0001DEA0 2C9B                       		move.l	(a3)+,(a6)
0001DEA2 2C9B                       		move.l	(a3)+,(a6)
0001DEA4 2C9B                       		move.l	(a3)+,(a6)
0001DEA6 2C9B                       		move.l	(a3)+,(a6)
0001DEA8 2C9B                       		move.l	(a3)+,(a6)
0001DEAA 2C9B                       		move.l	(a3)+,(a6)
0001DEAC 2C9B                       		move.l	(a3)+,(a6)
0001DEAE 2C9B                       		move.l	(a3)+,(a6)
0001DEB0 2C9B                       		move.l	(a3)+,(a6)
0001DEB2 2C9B                       		move.l	(a3)+,(a6)
0001DEB4 0680 0040 0000             		addi.l	#$400000,d0
0001DEBA 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001DEBE                            
0001DEBE 4E75                       		rts	
0001DEC0                            ; End of function Hud_Secs
0001DEC0                            
0001DEC0                            ; ---------------------------------------------------------------------------
0001DEC0                            ; Subroutine to	load time/ring bonus numbers patterns
0001DEC0                            ; ---------------------------------------------------------------------------
0001DEC0                            
0001DEC0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DEC0                            
0001DEC0                            
0001DEC0                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001DEC0 45F9 0001 DE4C             		lea	(Hud_1000).l,a2
0001DEC6 7C03                       		moveq	#3,d6
0001DEC8 7800                       		moveq	#0,d4
0001DECA 43FA 0000                  		lea	Art_Hud(pc),a1
0001DECE                            
0001DECE                            Hud_BonusLoop:
0001DECE 7400                       		moveq	#0,d2
0001DED0 261A                       		move.l	(a2)+,d3
0001DED2                            
0001DED2                            loc_1CA1E:
0001DED2 9283                       		sub.l	d3,d1
0001DED4 6500                       		bcs.s	loc_1CA26
0001DED6 5242                       		addq.w	#1,d2
0001DED8 60F8                       		bra.s	loc_1CA1E
0001DEDA                            ; ===========================================================================
0001DEDA                            
0001DEDA                            loc_1CA26:
0001DEDA D283                       		add.l	d3,d1
0001DEDC 4A42                       		tst.w	d2
0001DEDE 6700                       		beq.s	loc_1CA30
0001DEE0 383C 0001                  		move.w	#1,d4
0001DEE4                            
0001DEE4                            loc_1CA30:
0001DEE4 4A44                       		tst.w	d4
0001DEE6 6700                       		beq.s	Hud_ClrBonus
0001DEE8 ED4A                       		lsl.w	#6,d2
0001DEEA 47F1 2000                  		lea	(a1,d2.w),a3
0001DEEE 2C9B                       		move.l	(a3)+,(a6)
0001DEF0 2C9B                       		move.l	(a3)+,(a6)
0001DEF2 2C9B                       		move.l	(a3)+,(a6)
0001DEF4 2C9B                       		move.l	(a3)+,(a6)
0001DEF6 2C9B                       		move.l	(a3)+,(a6)
0001DEF8 2C9B                       		move.l	(a3)+,(a6)
0001DEFA 2C9B                       		move.l	(a3)+,(a6)
0001DEFC 2C9B                       		move.l	(a3)+,(a6)
0001DEFE 2C9B                       		move.l	(a3)+,(a6)
0001DF00 2C9B                       		move.l	(a3)+,(a6)
0001DF02 2C9B                       		move.l	(a3)+,(a6)
0001DF04 2C9B                       		move.l	(a3)+,(a6)
0001DF06 2C9B                       		move.l	(a3)+,(a6)
0001DF08 2C9B                       		move.l	(a3)+,(a6)
0001DF0A 2C9B                       		move.l	(a3)+,(a6)
0001DF0C 2C9B                       		move.l	(a3)+,(a6)
0001DF0E                            
0001DF0E                            loc_1CA5A:
0001DF0E 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001DF12                            
0001DF12 4E75                       		rts	
0001DF14                            ; ===========================================================================
0001DF14                            
0001DF14                            Hud_ClrBonus:
0001DF14 7A0F                       		moveq	#$F,d5
0001DF16                            
0001DF16                            Hud_ClrBonusLoop:
0001DF16 2CBC 0000 0000             		move.l	#0,(a6)
0001DF1C 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001DF20                            
0001DF20 60EC                       		bra.s	loc_1CA5A
0001DF22                            ; End of function Hud_TimeRingBonus
0001DF22                            
0001DF22                            ; ---------------------------------------------------------------------------
0001DF22                            ; Subroutine to	load uncompressed lives	counter	patterns
0001DF22                            ; ---------------------------------------------------------------------------
0001DF22                            
0001DF22                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001DF22                            
0001DF22                            
0001DF22                            Hud_Lives:				; XREF: Hud_ChkLives
0001DF22 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001DF28 7200                       		moveq	#0,d1
0001DF2A 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001DF2E 45F9 0001 DE54             		lea	(Hud_10).l,a2
0001DF34 7C01                       		moveq	#1,d6
0001DF36 7800                       		moveq	#0,d4
0001DF38 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001DF3C                            
0001DF3C                            Hud_LivesLoop:
0001DF3C 2D40 0004                  		move.l	d0,4(a6)
0001DF40 7400                       		moveq	#0,d2
0001DF42 261A                       		move.l	(a2)+,d3
0001DF44                            
0001DF44                            loc_1CA90:
0001DF44 9283                       		sub.l	d3,d1
0001DF46 6500                       		bcs.s	loc_1CA98
0001DF48 5242                       		addq.w	#1,d2
0001DF4A 60F8                       		bra.s	loc_1CA90
0001DF4C                            ; ===========================================================================
0001DF4C                            
0001DF4C                            loc_1CA98:
0001DF4C D283                       		add.l	d3,d1
0001DF4E 4A42                       		tst.w	d2
0001DF50 6700                       		beq.s	loc_1CAA2
0001DF52 383C 0001                  		move.w	#1,d4
0001DF56                            
0001DF56                            loc_1CAA2:
0001DF56 4A44                       		tst.w	d4
0001DF58 6700                       		beq.s	Hud_ClrLives
0001DF5A                            
0001DF5A                            loc_1CAA6:
0001DF5A EB4A                       		lsl.w	#5,d2
0001DF5C 47F1 2000                  		lea	(a1,d2.w),a3
0001DF60 2C9B                       		move.l	(a3)+,(a6)
0001DF62 2C9B                       		move.l	(a3)+,(a6)
0001DF64 2C9B                       		move.l	(a3)+,(a6)
0001DF66 2C9B                       		move.l	(a3)+,(a6)
0001DF68 2C9B                       		move.l	(a3)+,(a6)
0001DF6A 2C9B                       		move.l	(a3)+,(a6)
0001DF6C 2C9B                       		move.l	(a3)+,(a6)
0001DF6E 2C9B                       		move.l	(a3)+,(a6)
0001DF70                            
0001DF70                            loc_1CABC:
0001DF70 0680 0040 0000             		addi.l	#$400000,d0
0001DF76 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001DF7A                            
0001DF7A 4E75                       		rts	
0001DF7C                            ; ===========================================================================
0001DF7C                            
0001DF7C                            Hud_ClrLives:
0001DF7C 4A46                       		tst.w	d6
0001DF7E 67DA                       		beq.s	loc_1CAA6
0001DF80 7A07                       		moveq	#7,d5
0001DF82                            
0001DF82                            Hud_ClrLivesLoop:
0001DF82 2CBC 0000 0000             		move.l	#0,(a6)
0001DF88 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001DF8C 60E2                       		bra.s	loc_1CABC
0001DF8E                            ; End of function Hud_Lives
0001DF8E                            
0001DF8E                            ; ===========================================================================
0001DF8E                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001E28E                            		even
0001E28E                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001E3CE                            		even
0001E3CE                            ; ===========================================================================
0001E3CE                            ; ---------------------------------------------------------------------------
0001E3CE                            ; When debug mode is currently in use
0001E3CE                            ; ---------------------------------------------------------------------------
0001E3CE                            
0001E3CE                            DebugMode:				; XREF: Obj01; Obj09
0001E3CE 7000                       		moveq	#0,d0
0001E3D0 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001E3D4 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001E3D8 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001E3DC                            ; ===========================================================================
0001E3DC 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001E3DE 0000                       		dc.w Debug_Skip-Debug_Index
0001E3E0                            ; ===========================================================================
0001E3E0                            
0001E3E0                            Debug_Main:				; XREF: Debug_Index
0001E3E0 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001E3E4 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001E3EA 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001E3F0 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001E3F6 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001E3FC 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001E402 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001E408 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001E40E 117C 0000 001A             		move.b	#0,$1A(a0)
0001E414 117C 0000 001C             		move.b	#0,$1C(a0)
0001E41A 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001E420 6600                       		bne.s	Debug_Zone	; if not, branch
0001E422 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001E428 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001E42E 7006                       		moveq	#6,d0		; use 6th debug	item list
0001E430 6000                       		bra.s	Debug_UseList
0001E432                            ; ===========================================================================
0001E432                            
0001E432                            Debug_Zone:
0001E432 7000                       		moveq	#0,d0
0001E434 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E438                            
0001E438                            Debug_UseList:
0001E438 45F9 0000 0000             		lea	(DebugList).l,a2
0001E43E D040                       		add.w	d0,d0
0001E440 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E444 3C1A                       		move.w	(a2)+,d6
0001E446 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E44A 6200                       		bhi.s	loc_1CF9E
0001E44C 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001E452                            
0001E452                            loc_1CF9E:
0001E452 6100 0000                  		bsr.w	Debug_ShowItem
0001E456 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E45C 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001E462                            
0001E462                            Debug_Skip:				; XREF: Debug_Index
0001E462 7006                       		moveq	#6,d0
0001E464 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001E46A 6700                       		beq.s	loc_1CFBE
0001E46C 7000                       		moveq	#0,d0
0001E46E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001E472                            
0001E472                            loc_1CFBE:
0001E472 45F9 0000 0000             		lea	(DebugList).l,a2
0001E478 D040                       		add.w	d0,d0
0001E47A D4F2 0000                  		adda.w	(a2,d0.w),a2
0001E47E 3C1A                       		move.w	(a2)+,d6
0001E480 6100 0000                  		bsr.w	Debug_Control
0001E484 4EF9 0000 E742             		jmp	DisplaySprite
0001E48A                            
0001E48A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E48A                            
0001E48A                            
0001E48A                            Debug_Control:
0001E48A 7800                       		moveq	#0,d4
0001E48C 323C 0001                  		move.w	#1,d1
0001E490 1838 F605                  		move.b	($FFFFF605).w,d4
0001E494 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001E498 6600                       		bne.s	loc_1D018	; if yes, branch
0001E49A 1038 F604                  		move.b	($FFFFF604).w,d0
0001E49E 0240 000F                  		andi.w	#$F,d0
0001E4A2 6600                       		bne.s	loc_1D000
0001E4A4 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001E4AA 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001E4B0 6000 0000                  		bra.w	Debug_BackItem
0001E4B4                            ; ===========================================================================
0001E4B4                            
0001E4B4                            loc_1D000:
0001E4B4 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001E4B8 6600                       		bne.s	loc_1D01C
0001E4BA 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001E4C0 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001E4C4 6600                       		bne.s	loc_1D018
0001E4C6 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001E4CC                            
0001E4CC                            loc_1D018:
0001E4CC 1838 F604                  		move.b	($FFFFF604).w,d4
0001E4D0                            
0001E4D0                            loc_1D01C:
0001E4D0 7200                       		moveq	#0,d1
0001E4D2 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001E4D6 5241                       		addq.w	#1,d1
0001E4D8 4841                       		swap	d1
0001E4DA E881                       		asr.l	#4,d1
0001E4DC 2428 000C                  		move.l	$C(a0),d2
0001E4E0 2628 0008                  		move.l	8(a0),d3
0001E4E4 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001E4E8 6700                       		beq.s	loc_1D03C	; if not, branch
0001E4EA 9481                       		sub.l	d1,d2
0001E4EC 6400                       		bcc.s	loc_1D03C
0001E4EE 7400                       		moveq	#0,d2
0001E4F0                            
0001E4F0                            loc_1D03C:
0001E4F0 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001E4F4 6700                       		beq.s	loc_1D052	; if not, branch
0001E4F6 D481                       		add.l	d1,d2
0001E4F8 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001E4FE 6500                       		bcs.s	loc_1D052
0001E500 243C 07FF 0000             		move.l	#$7FF0000,d2
0001E506                            
0001E506                            loc_1D052:
0001E506 0804 0002                  		btst	#2,d4
0001E50A 6700                       		beq.s	loc_1D05E
0001E50C 9681                       		sub.l	d1,d3
0001E50E 6400                       		bcc.s	loc_1D05E
0001E510 7600                       		moveq	#0,d3
0001E512                            
0001E512                            loc_1D05E:
0001E512 0804 0003                  		btst	#3,d4
0001E516 6700                       		beq.s	loc_1D066
0001E518 D681                       		add.l	d1,d3
0001E51A                            
0001E51A                            loc_1D066:
0001E51A 2142 000C                  		move.l	d2,$C(a0)
0001E51E 2143 0008                  		move.l	d3,8(a0)
0001E522                            
0001E522                            Debug_BackItem:
0001E522 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001E528 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E52A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E530 6700                       		beq.s	Debug_NextItem	; if not, branch
0001E532 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001E536 6400                       		bcc.s	Debug_NoLoop
0001E538 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001E53C 6000                       		bra.s	Debug_NoLoop
0001E53E                            ; ===========================================================================
0001E53E                            
0001E53E                            Debug_NextItem:
0001E53E 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001E544 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001E546 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001E54A BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001E54E 6200                       		bhi.s	Debug_NoLoop
0001E550 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001E556                            
0001E556                            Debug_NoLoop:
0001E556 6000 0000                  		bra.w	Debug_ShowItem
0001E55A                            ; ===========================================================================
0001E55A                            
0001E55A                            Debug_MakeItem:
0001E55A 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001E560 6700                       		beq.s	Debug_Exit	; if not, branch
0001E562 4EB9 0000 EBC8             		jsr	SingleObjLoad
0001E568 6600                       		bne.s	Debug_Exit
0001E56A 3368 0008 0008             		move.w	8(a0),8(a1)
0001E570 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001E576 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001E57A 1368 0001 0001             		move.b	1(a0),1(a1)
0001E580 1368 0001 0022             		move.b	1(a0),$22(a1)
0001E586 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001E58C 7000                       		moveq	#0,d0
0001E58E 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E592 E748                       		lsl.w	#3,d0
0001E594 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001E59A 4E75                       		rts	
0001E59C                            ; ===========================================================================
0001E59C                            
0001E59C                            Debug_Exit:
0001E59C 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001E5A2 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001E5A4 7000                       		moveq	#0,d0
0001E5A6 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001E5AA 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E5B2 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E5B8 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001E5BC 3140 000A                  		move.w	d0,$A(a0)
0001E5C0 3140 000E                  		move.w	d0,$E(a0)
0001E5C4 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001E5CA 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001E5D0 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001E5D6 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001E5D8 4278 F780                  		clr.w	($FFFFF780).w
0001E5DC 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001E5E2 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001E5EA 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001E5F0 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001E5F6 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001E5FC 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001E602                            
0001E602                            Debug_DoNothing:
0001E602 4E75                       		rts	
0001E604                            ; End of function Debug_Control
0001E604                            
0001E604                            
0001E604                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001E604                            
0001E604                            
0001E604                            Debug_ShowItem:				; XREF: Debug_Main
0001E604 7000                       		moveq	#0,d0
0001E606 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001E60A E748                       		lsl.w	#3,d0
0001E60C 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001E612 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001E618 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001E61E 4E75                       		rts	
0001E620                            ; End of function Debug_ShowItem
0001E620                            
0001E620                            ; ===========================================================================
0001E620                            ; ---------------------------------------------------------------------------
0001E620                            ; Debug	list pointers
0001E620                            ; ---------------------------------------------------------------------------
0001E620                            DebugList:
0001E620                            	include "_inc\Debug list pointers.asm"
0001E620                            ; ---------------------------------------------------------------------------
0001E620                            ; Debug	list pointers
0001E620                            ; ---------------------------------------------------------------------------
0001E620 0000                       	dc.w Debug_GHZ-DebugList
0001E622 0000                       	dc.w Debug_LZ-DebugList
0001E624 0000                       	dc.w Debug_MZ-DebugList
0001E626 0000                       	dc.w Debug_SLZ-DebugList
0001E628 0000                       	dc.w Debug_SYZ-DebugList
0001E62A 0000                       	dc.w Debug_SBZ-DebugList
0001E62C 0000                       	dc.w Debug_Ending-DebugList
0001E62E 0000                       	dc.w Debug_GHZ-DebugList
0001E62E 0000                       	dc.w Debug_GHZ-DebugList
0001E630                            
0001E630                            ; ---------------------------------------------------------------------------
0001E630                            ; Debug	list - Green Hill
0001E630                            ; ---------------------------------------------------------------------------
0001E630                            Debug_GHZ:
0001E630                            	include "_inc\Debug list - GHZ.asm"
0001E630                            ; ---------------------------------------------------------------------------
0001E630                            ; Debug	list - Green Hill
0001E630                            ; ---------------------------------------------------------------------------
0001E630 0010                       	dc.w $10			; number of items in list
0001E632 2500 AF2E                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001E636 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001E63A 2600 B534                  	dc.l Map_obj26+$26000000
0001E63E 0000 0680                  	dc.b 0,	0, 6, $80
0001E642 1F00 A726                  	dc.l Map_obj1F+$1F000000
0001E646 0000 0400                  	dc.b 0,	0, 4, 0
0001E64A 2200 A9E2                  	dc.l Map_obj22+$22000000
0001E64E 0000 0444                  	dc.b 0,	0, 4, $44
0001E652 2B00 BBA8                  	dc.l Map_obj2B+$2B000000
0001E656 0000 047B                  	dc.b 0,	0, 4, $7B
0001E65A 3600 E0E4                  	dc.l Map_obj36+$36000000
0001E65E 0000 051B                  	dc.b 0,	0, 5, $1B
0001E662 1800 9034                  	dc.l Map_obj18+$18000000
0001E666 0000 4000                  	dc.b 0,	0, $40,	0
0001E66A 3B00 E20A                  	dc.l Map_obj3B+$3B000000
0001E66E 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001E672 4001 08DC                  	dc.l Map_obj40+$40000000
0001E676 0000 04F0                  	dc.b 0,	0, 4, $F0
0001E67A 4100 EE56                  	dc.l Map_obj41+$41000000
0001E67E 0000 0523                  	dc.b 0,	0, 5, $23
0001E682 4200 F07C                  	dc.l Map_obj42+$42000000
0001E686 0000 249B                  	dc.b 0,	0, $24,	$9B
0001E68A 4400 F38A                  	dc.l Map_obj44+$44000000
0001E68E 0000 434C                  	dc.b 0,	0, $43,	$4C
0001E692 1900 9134                  	dc.l Map_obj48+$19000000
0001E696 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001E69A 7901 832E                  	dc.l Map_obj79+$79000000
0001E69E 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E6A2 4B00 AF6E                  	dc.l Map_obj4B+$4B000000
0001E6A6 0000 2400                  	dc.b 0,	0, $24,	0
0001E6AA 7D01 847E                  	dc.l Map_obj7D+$7D000000
0001E6AE 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001E6B2                            	even
0001E6B2                            	even
0001E6B2                            
0001E6B2                            ; ---------------------------------------------------------------------------
0001E6B2                            ; Debug	list - Labyrinth
0001E6B2                            ; ---------------------------------------------------------------------------
0001E6B2                            Debug_LZ:
0001E6B2                            	include "_inc\Debug list - LZ.asm"
0001E6B2                            ; ---------------------------------------------------------------------------
0001E6B2                            ; Debug	list - Labyrinth
0001E6B2                            ; ---------------------------------------------------------------------------
0001E6B2 0019                       	dc.w $19
0001E6B4 2500 AF2E                  	dc.l Map_obj25+$25000000
0001E6B8 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E6BC 2600 B534                  	dc.l Map_obj26+$26000000
0001E6C0 0000 0680                  	dc.b 0,	0, 6, $80
0001E6C4 4100 EE56                  	dc.l Map_obj41+$41000000
0001E6C8 0000 0523                  	dc.b 0,	0, 5, $23
0001E6CC 2C00 BC58                  	dc.l Map_obj2C+$2C000000
0001E6D0 0800 2486                  	dc.b 8,	0, $24,	$86
0001E6D4 2D00 BE4C                  	dc.l Map_obj2D+$2D000000
0001E6D8 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001E6DC 1601 30B6                  	dc.l Map_obj16+$16000000
0001E6E0 0000 03CC                  	dc.b 0,	0, 3, $CC
0001E6E4 1601 30B6                  	dc.l Map_obj16+$16000000
0001E6E8 0203 03CC                  	dc.b 2,	3, 3, $CC
0001E6EC 3300 D304                  	dc.l Map_obj33+$33000000
0001E6F0 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E6F4 3200 CEC4                  	dc.l Map_obj32+$32000000
0001E6F8 0000 0513                  	dc.b 0,	0, 5, $13
0001E6FC 3600 E0E4                  	dc.l Map_obj36+$36000000
0001E700 0000 051B                  	dc.b 0,	0, 5, $1B
0001E704 5201 11D8                  	dc.l Map_obj52a+$52000000
0001E708 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001E70C 6101 32DE                  	dc.l Map_obj61+$61000000
0001E710 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001E714 6101 32DE                  	dc.l Map_obj61+$61000000
0001E718 1301 43E6                  	dc.b $13, 1, $43, $E6
0001E71C 6101 32DE                  	dc.l Map_obj61+$61000000
0001E720 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001E724 6201 3432                  	dc.l Map_obj62+$62000000
0001E728 0000 443E                  	dc.b 0,	0, $44,	$3E
0001E72C 6101 32DE                  	dc.l Map_obj61+$61000000
0001E730 2702 43E6                  	dc.b $27, 2, $43, $E6
0001E734 6101 32DE                  	dc.l Map_obj61+$61000000
0001E738 3003 43E6                  	dc.b $30, 3, $43, $E6
0001E73C 6301 3790                  	dc.l Map_obj63+$63000000
0001E740 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001E744 6001 3000                  	dc.l Map_obj60+$60000000
0001E748 0000 0467                  	dc.b 0,	0, 4, $67
0001E74C 6401 3AD6                  	dc.l Map_obj64+$64000000
0001E750 8413 8348                  	dc.b $84, $13, $83, $48
0001E754 6501 3C5E                  	dc.l Map_obj65+$65000000
0001E758 0202 C259                  	dc.b 2,	2, $C2,	$59
0001E75C 6501 3C5E                  	dc.l Map_obj65+$65000000
0001E760 0909 C259                  	dc.b 9,	9, $C2,	$59
0001E764 0B01 2450                  	dc.l Map_obj0B+$B000000
0001E768 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001E76C 0C01 2520                  	dc.l Map_obj0C+$C000000
0001E770 0200 4328                  	dc.b 2,	0, $43,	$28
0001E774 7901 832E                  	dc.l Map_obj79+$79000000
0001E778 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E77C                            	even
0001E77C                            	even
0001E77C                            
0001E77C                            ; ---------------------------------------------------------------------------
0001E77C                            ; Debug	list - Marble
0001E77C                            ; ---------------------------------------------------------------------------
0001E77C                            Debug_MZ:
0001E77C                            	include "_inc\Debug list - MZ.asm"
0001E77C                            ; ---------------------------------------------------------------------------
0001E77C                            ; Debug	list - Marble
0001E77C                            ; ---------------------------------------------------------------------------
0001E77C 0012                       	dc.w $12
0001E77E 2500 AF2E                  	dc.l Map_obj25+$25000000
0001E782 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E786 2600 B534                  	dc.l Map_obj26+$26000000
0001E78A 0000 0680                  	dc.b 0,	0, 6, $80
0001E78E 2200 A9E2                  	dc.l Map_obj22+$22000000
0001E792 0000 0444                  	dc.b 0,	0, 4, $44
0001E796 3600 E0E4                  	dc.l Map_obj36+$36000000
0001E79A 0000 051B                  	dc.b 0,	0, 5, $1B
0001E79E 4100 EE56                  	dc.l Map_obj41+$41000000
0001E7A2 0000 0523                  	dc.b 0,	0, 5, $23
0001E7A6 1300 C38E                  	dc.l Map_obj14+$13000000
0001E7AA 0000 0345                  	dc.b 0,	0, 3, $45
0001E7AE 4600 FA3C                  	dc.l Map_obj46+$46000000
0001E7B2 0000 4000                  	dc.b 0,	0, $40,	0
0001E7B6 4C01 0388                  	dc.l Map_obj4C+$4C000000
0001E7BA 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E7BE 4E01 066C                  	dc.l Map_obj4E+$4E000000
0001E7C2 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001E7C6 3300 D304                  	dc.l Map_obj33+$33000000
0001E7CA 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E7CE 5001 0A6A                  	dc.l Map_obj50+$50000000
0001E7D2 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E7D6 5101 0F0C                  	dc.l Map_obj51+$51000000
0001E7DA 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001E7DE 5201 1182                  	dc.l Map_obj52+$52000000
0001E7E2 0000 02B8                  	dc.b 0,	0, 2, $B8
0001E7E6 5300 96CC                  	dc.l Map_obj53+$53000000
0001E7EA 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001E7EE 5401 034E                  	dc.l Map_obj54+$54000000
0001E7F2 0000 8680                  	dc.b 0,	0, $86,	$80
0001E7F6 5501 1376                  	dc.l Map_obj55+$55000000
0001E7FA 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E7FE 7801 7FA8                  	dc.l Map_obj78+$78000000
0001E802 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E806 7901 832E                  	dc.l Map_obj79+$79000000
0001E80A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E80E                            	even
0001E80E                            	even
0001E80E                            
0001E80E                            ; ---------------------------------------------------------------------------
0001E80E                            ; Debug	list - Star Light
0001E80E                            ; ---------------------------------------------------------------------------
0001E80E                            Debug_SLZ:
0001E80E                            	include "_inc\Debug list - SLZ.asm"
0001E80E                            ; ---------------------------------------------------------------------------
0001E80E                            ; Debug	list - Star Light
0001E80E                            ; ---------------------------------------------------------------------------
0001E80E 000F                       	dc.w $F
0001E810 2500 AF2E                  	dc.l Map_obj25+$25000000
0001E814 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E818 2600 B534                  	dc.l Map_obj26+$26000000
0001E81C 0000 0680                  	dc.b 0,	0, 6, $80
0001E820 5901 1E78                  	dc.l Map_obj59+$59000000
0001E824 0000 4000                  	dc.b 0,	0, $40,	0
0001E828 5300 96CC                  	dc.l Map_obj53+$53000000
0001E82C 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001E830 1800 9092                  	dc.l Map_obj18b+$18000000
0001E834 0000 4000                  	dc.b 0,	0, $40,	0
0001E838 5A01 1FB2                  	dc.l Map_obj5A+$5A000000
0001E83C 0000 4000                  	dc.b 0,	0, $40,	0
0001E840 5B01 216A                  	dc.l Map_obj5B+$5B000000
0001E844 0000 4000                  	dc.b 0,	0, $40,	0
0001E848 5D01 273A                  	dc.l Map_obj5D+$5D000000
0001E84C 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001E850 5E01 2ACC                  	dc.l Map_obj5E+$5E000000
0001E854 0000 0374                  	dc.b 0,	0, 3, $74
0001E858 4100 EE56                  	dc.l Map_obj41+$41000000
0001E85C 0000 0523                  	dc.b 0,	0, 5, $23
0001E860 1300 C38E                  	dc.l Map_obj14+$13000000
0001E864 0000 0480                  	dc.b 0,	0, 4, $80
0001E868 1C00 97DC                  	dc.l Map_obj1C+$1C000000
0001E86C 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001E870 5F01 2D4A                  	dc.l Map_obj5F+$5F000000
0001E874 0000 0400                  	dc.b 0,	0, 4, 0
0001E878 6001 3000                  	dc.l Map_obj60+$60000000
0001E87C 0000 2429                  	dc.b 0,	0, $24,	$29
0001E880 7901 832E                  	dc.l Map_obj79+$79000000
0001E884 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E888                            	even
0001E888                            	even
0001E888                            
0001E888                            ; ---------------------------------------------------------------------------
0001E888                            ; Debug	list - Spring Yard
0001E888                            ; ---------------------------------------------------------------------------
0001E888                            Debug_SYZ:
0001E888                            	include "_inc\Debug list - SYZ.asm"
0001E888                            ; ---------------------------------------------------------------------------
0001E888                            ; Debug	list - Spring Yard
0001E888                            ; ---------------------------------------------------------------------------
0001E888 000F                       	dc.w $F
0001E88A 2500 AF2E                  	dc.l Map_obj25+$25000000
0001E88E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E892 2600 B534                  	dc.l Map_obj26+$26000000
0001E896 0000 0680                  	dc.b 0,	0, 6, $80
0001E89A 3600 E0E4                  	dc.l Map_obj36+$36000000
0001E89E 0000 051B                  	dc.b 0,	0, 5, $1B
0001E8A2 4100 EE56                  	dc.l Map_obj41+$41000000
0001E8A6 0000 0523                  	dc.b 0,	0, 5, $23
0001E8AA 4300 F2DC                  	dc.l Map_obj43+$43000000
0001E8AE 0000 04B8                  	dc.b 0,	0, 4, $B8
0001E8B2 1200 FABA                  	dc.l Map_obj12+$12000000
0001E8B6 0000 0000                  	dc.b 0,	0, 0, 0
0001E8BA 4700 FC36                  	dc.l Map_obj47+$47000000
0001E8BE 0000 0380                  	dc.b 0,	0, 3, $80
0001E8C2 1F00 A726                  	dc.l Map_obj1F+$1F000000
0001E8C6 0000 0400                  	dc.b 0,	0, 4, 0
0001E8CA 2200 A9E2                  	dc.l Map_obj22+$22000000
0001E8CE 0000 0444                  	dc.b 0,	0, 4, $44
0001E8D2 5001 0A6A                  	dc.l Map_obj50+$50000000
0001E8D6 0000 247B                  	dc.b 0,	0, $24,	$7B
0001E8DA 1800 9080                  	dc.l Map_obj18a+$18000000
0001E8DE 0000 4000                  	dc.b 0,	0, $40,	0
0001E8E2 5601 1838                  	dc.l Map_obj56+$56000000
0001E8E6 0000 4000                  	dc.b 0,	0, $40,	0
0001E8EA 3200 CEC4                  	dc.l Map_obj32+$32000000
0001E8EE 0000 0513                  	dc.b 0,	0, 5, $13
0001E8F2 7801 7FA8                  	dc.l Map_obj78+$78000000
0001E8F6 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001E8FA 7901 832E                  	dc.l Map_obj79+$79000000
0001E8FE 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E902                            	even
0001E902                            	even
0001E902                            
0001E902                            ; ---------------------------------------------------------------------------
0001E902                            ; Debug	list - Scrap Brain
0001E902                            ; ---------------------------------------------------------------------------
0001E902                            Debug_SBZ:
0001E902                            	include "_inc\Debug list - SBZ.asm"
0001E902                            ; ---------------------------------------------------------------------------
0001E902                            ; Debug	list - Scrap Brain
0001E902                            ; ---------------------------------------------------------------------------
0001E902 001D                       	dc.w $1D
0001E904 2500 AF2E                  	dc.l Map_obj25+$25000000
0001E908 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E90C 2600 B534                  	dc.l Map_obj26+$26000000
0001E910 0000 0680                  	dc.b 0,	0, 6, $80
0001E914 5F01 2D4A                  	dc.l Map_obj5F+$5F000000
0001E918 0000 0400                  	dc.b 0,	0, 4, 0
0001E91C 6001 3000                  	dc.l Map_obj60+$60000000
0001E920 0000 0429                  	dc.b 0,	0, 4, $29
0001E924 7801 7FA8                  	dc.l Map_obj78+$78000000
0001E928 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001E92C 1501 1BD4                  	dc.l Map_obj15b+$15000000
0001E930 0702 4391                  	dc.b 7,	2, $43,	$91
0001E934 6701 68C0                  	dc.l Map_obj67+$67000000
0001E938 E000 C344                  	dc.b $E0, 0, $C3, $44
0001E93C 5201 1182                  	dc.l Map_obj52+$52000000
0001E940 2802 22C0                  	dc.b $28, 2, $22, $C0
0001E944 3200 CEC4                  	dc.l Map_obj32+$32000000
0001E948 0000 0513                  	dc.b 0,	0, 5, $13
0001E94C 6901 6B1A                  	dc.l Map_obj69+$69000000
0001E950 0300 4492                  	dc.b 3,	0, $44,	$92
0001E954 6901 6B74                  	dc.l Map_obj69a+$69000000
0001E958 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001E95C 6A01 6DD2                  	dc.l Map_obj6A+$6A000000
0001E960 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001E964 5300 96CC                  	dc.l Map_obj53+$53000000
0001E968 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001E96C 5201 1182                  	dc.l Map_obj52+$52000000
0001E970 3903 4460                  	dc.b $39, 3, $44, $60
0001E974 6B01 71A2                  	dc.l Map_obj6B+$6B000000
0001E978 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001E97C 2A00 9972                  	dc.l Map_obj2A+$2A000000
0001E980 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001E984 6B01 71A2                  	dc.l Map_obj6B+$6B000000
0001E988 1301 22C0                  	dc.b $13, 1, $22, $C0
0001E98C 6A01 6DD2                  	dc.l Map_obj6A+$6A000000
0001E990 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001E994 6B01 71A2                  	dc.l Map_obj6B+$6B000000
0001E998 2401 22C0                  	dc.b $24, 1, $22, $C0
0001E99C 6A01 6DD2                  	dc.l Map_obj6A+$6A000000
0001E9A0 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001E9A4 6B01 71A2                  	dc.l Map_obj6B+$6B000000
0001E9A8 3401 22C0                  	dc.b $34, 1, $22, $C0
0001E9AC 6C01 7364                  	dc.l Map_obj6C+$6C000000
0001E9B0 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001E9B4 6D00 F72C                  	dc.l Map_obj6D+$6D000000
0001E9B8 6400 83D9                  	dc.b $64, 0, $83, $D9
0001E9BC 6D00 F72C                  	dc.l Map_obj6D+$6D000000
0001E9C0 640B 83D9                  	dc.b $64, $B, $83, $D9
0001E9C4 6E01 741A                  	dc.l Map_obj6E+$6E000000
0001E9C8 0400 047E                  	dc.b 4,	0, 4, $7E
0001E9CC 7001 786C                  	dc.l Map_obj70+$70000000
0001E9D0 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001E9D4 7101 25E0                  	dc.l Map_obj71+$71000000
0001E9D8 1100 8680                  	dc.b $11, 0, $86, $80
0001E9DC 1E00 9E30                  	dc.l Map_obj1E+$1E000000
0001E9E0 0400 2302                  	dc.b 4,	0, $23,	2
0001E9E4 7901 832E                  	dc.l Map_obj79+$79000000
0001E9E8 0100 07A0                  	dc.b 1,	0, 7, $A0
0001E9EC                            	even
0001E9EC                            	even
0001E9EC                            
0001E9EC                            ; ---------------------------------------------------------------------------
0001E9EC                            ; Debug	list - ending sequence / special stage
0001E9EC                            ; ---------------------------------------------------------------------------
0001E9EC                            Debug_Ending:
0001E9EC                            	include "_inc\Debug list - Ending and SS.asm"
0001E9EC                            ; ---------------------------------------------------------------------------
0001E9EC                            ; Debug	list - ending sequence / special stage
0001E9EC                            ; ---------------------------------------------------------------------------
0001E9EC 000D                       	dc.w $D
0001E9EE 2500 AF2E                  	dc.l Map_obj25+$25000000
0001E9F2 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001E9F6 4700 FC36                  	dc.l Map_obj47+$47000000
0001E9FA 0000 0380                  	dc.b 0,	0, 3, $80
0001E9FE 2800 A458                  	dc.l Map_obj28a+$28000000
0001EA02 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001EA06 2800 A458                  	dc.l Map_obj28a+$28000000
0001EA0A 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001EA0E 2800 A458                  	dc.l Map_obj28a+$28000000
0001EA12 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001EA16 2800 A440                  	dc.l Map_obj28+$28000000
0001EA1A 0D00 0553                  	dc.b $D, 0, 5, $53
0001EA1E 2800 A440                  	dc.l Map_obj28+$28000000
0001EA22 0E00 0553                  	dc.b $E, 0, 5, $53
0001EA26 2800 A440                  	dc.l Map_obj28+$28000000
0001EA2A 0F00 0573                  	dc.b $F, 0, 5, $73
0001EA2E 2800 A440                  	dc.l Map_obj28+$28000000
0001EA32 1000 0573                  	dc.b $10, 0, 5,	$73
0001EA36 2800 A458                  	dc.l Map_obj28a+$28000000
0001EA3A 1100 0585                  	dc.b $11, 0, 5,	$85
0001EA3E 2800 A470                  	dc.l Map_obj28b+$28000000
0001EA42 1200 0593                  	dc.b $12, 0, 5,	$93
0001EA46 2800 A458                  	dc.l Map_obj28a+$28000000
0001EA4A 1300 0565                  	dc.b $13, 0, 5,	$65
0001EA4E 2800 A470                  	dc.l Map_obj28b+$28000000
0001EA52 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001EA56                            	even
0001EA56                            	even
0001EA56                            
0001EA56                            ; ---------------------------------------------------------------------------
0001EA56                            ; Main level load blocks
0001EA56                            ; ---------------------------------------------------------------------------
0001EA56                            MainLoadBlocks:
0001EA56                            	include "_inc\Main level load blocks.asm"
0001EA56                            ; ---------------------------------------------------------------------------
0001EA56                            ; Main level load blocks
0001EA56                            ;
0001EA56                            ; ===FORMAT===
0001EA56                            ; level	patterns + (1st	PLC num	* 10^6)
0001EA56                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001EA56                            ; 256x256 mappings
0001EA56                            ; blank, music (unused), pal index (unused), pal index
0001EA56                            ; ---------------------------------------------------------------------------
0001EA56 0000 0000                  	dc.l Nem_GHZ_2nd|4<<24
0001EA5A 0000 0000                  	dc.l Blk16_GHZ|5<<24
0001EA5E 0000 0000                  	dc.l Blk256_GHZ
0001EA62 0081 0404                  	dc.b 0,	$81, 4,	4
0001EA66 0000 0000                  	dc.l Nem_LZ|6<<24
0001EA6A 0000 0000                  	dc.l Blk16_LZ|7<<24
0001EA6E 0000 0000                  	dc.l Blk256_LZ
0001EA72 0082 0505                  	dc.b 0,	$82, 5,	5
0001EA76 0000 0000                  	dc.l Nem_MZ|8<<24
0001EA7A 0000 0000                  	dc.l Blk16_MZ|9<<24
0001EA7E 0000 0000                  	dc.l Blk256_MZ
0001EA82 0083 0606                  	dc.b 0,	$83, 6,	6
0001EA86 0000 0000                  	dc.l Nem_SLZ|$A<<24
0001EA8A 0000 0000                  	dc.l Blk16_SLZ|$B<<24
0001EA8E 0000 0000                  	dc.l Blk256_SLZ
0001EA92 0084 0707                  	dc.b 0,	$84, 7,	7
0001EA96 0000 0000                  	dc.l Nem_SYZ|$C<<24
0001EA9A 0000 0000                  	dc.l Blk16_SYZ|$D<<24
0001EA9E 0000 0000                  	dc.l Blk256_SYZ
0001EAA2 0085 0808                  	dc.b 0,	$85, 8,	8
0001EAA6 0000 0000                  	dc.l Nem_SBZ|$E<<24
0001EAAA 0000 0000                  	dc.l Blk16_SBZ|$F<<24
0001EAAE 0000 0000                  	dc.l Blk256_SBZ
0001EAB2 0086 0909                  	dc.b 0,	$86, 9,	9
0001EAB6 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001EABA 0000 0000                  	dc.l Blk16_GHZ
0001EABE 0000 0000                  	dc.l Blk256_GHZ
0001EAC2 0086 1313                  	dc.b 0,	$86, $13, $13
0001EAC6                            ; there you go lol
0001EAC6 0000 0000                  	dc.l Nem_BHZ|$20<<24 ; MAKOTO ZONE
0001EACA 0000 0000                  	dc.l Blk16_BHZ|$21<<24
0001EACE 0000 0000                  	dc.l Blk256_BHZ
0001EAD2 009E 1515                  	dc.b 0,	$9E, $15, $15
0001EAD6                            	even
0001EAD6                            	even
0001EAD6                            
0001EAD6                            ; ---------------------------------------------------------------------------
0001EAD6                            ; Pattern load cues
0001EAD6                            ; ---------------------------------------------------------------------------
0001EAD6                            ArtLoadCues:
0001EAD6                            	include "_inc\Pattern load cues.asm"
0001EAD6                            ; ---------------------------------------------------------------------------
0001EAD6                            ; Pattern load cues - index
0001EAD6                            ; ---------------------------------------------------------------------------
0001EAD6 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues	; 0
0001EADA 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues	; 2
0001EADE 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues		; 4
0001EAE2 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001EAE6 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001EAEA 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001EAEE 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001EAF2 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001EAF6 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues	; $10
0001EAFA 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001EAFE 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001EB02 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001EB06 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001EB0A 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001EB0E 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001EB12 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001EB16                            
0001EB16 0000 0000                  	dc.w PLC_BHZ-ArtLoadCues, PLC_BHZ2-ArtLoadCues		; $20
0001EB1A 0000                       	dc.w Plc_TetoBoss-ArtLoadCues
0001EB1C 0000                       	dc.w PLC_TruthNuke-ArtLoadCues	; GMZ
0001EB1E                            ; ---------------------------------------------------------------------------
0001EB1E                            ; Pattern load cues - standard block 1
0001EB1E                            ; ---------------------------------------------------------------------------
0001EB1E 0004                       PLC_Main:	dc.w 4
0001EB20 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001EB24 F400                       		dc.w $F400
0001EB26 0000 0000                  		dc.l Nem_Hud		; HUD
0001EB2A D940                       		dc.w $D940
0001EB2C 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001EB30 FA80                       		dc.w $FA80
0001EB32 0000 0000                  		dc.l Nem_Ring		; rings
0001EB36 F640                       		dc.w $F640
0001EB38 0000 0000                  		dc.l Nem_Points		; points from enemy
0001EB3C F2E0                       		dc.w $F2E0
0001EB3E                            ; ---------------------------------------------------------------------------
0001EB3E                            ; Pattern load cues - standard block 2
0001EB3E                            ; ---------------------------------------------------------------------------
0001EB3E 0002                       PLC_Main2:	dc.w 2
0001EB40 0000 0000                  		dc.l Nem_Monitors	; monitors
0001EB44 D000                       		dc.w $D000
0001EB46 0000 0000                  		dc.l Nem_Shield		; shield
0001EB4A A820                       		dc.w $A820
0001EB4C 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001EB50 AB80                       		dc.w $AB80
0001EB52                            ; ---------------------------------------------------------------------------
0001EB52                            ; Pattern load cues - explosion
0001EB52                            ; ---------------------------------------------------------------------------
0001EB52 0000                       PLC_Explode:	dc.w 0
0001EB54 0000 0000                  		dc.l Nem_Explode	; explosion
0001EB58 B400                       		dc.w $B400
0001EB5A                            ; ---------------------------------------------------------------------------
0001EB5A                            ; Pattern load cues - game/time	over
0001EB5A                            ; ---------------------------------------------------------------------------
0001EB5A 0000                       PLC_GameOver:	dc.w 0
0001EB5C 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001EB60 ABC0                       		dc.w $ABC0
0001EB62                            ; ---------------------------------------------------------------------------
0001EB62                            ; Pattern load cues - Green Hill
0001EB62                            ; ---------------------------------------------------------------------------
0001EB62 000B                       PLC_GHZ:	dc.w $B
0001EB64 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001EB68 0000                       		dc.w 0
0001EB6A 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001EB6E 39A0                       		dc.w $39A0
0001EB70 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EB74 6B00                       		dc.w $6B00
0001EB76 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EB7A 7A00                       		dc.w $7A00
0001EB7C 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EB80 8000                       		dc.w $8000
0001EB82 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EB86 8880                       		dc.w $8880
0001EB88 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EB8C 8F60                       		dc.w $8F60
0001EB8E 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EB92 9360                       		dc.w $9360
0001EB94 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EB98 9E00                       		dc.w $9E00
0001EB9A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EB9E A360                       		dc.w $A360
0001EBA0 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EBA4 A460                       		dc.w $A460
0001EBA6 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EBAA A660                       		dc.w $A660
0001EBAC 0005                       PLC_GHZ2:	dc.w 5
0001EBAE 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EBB2 7000                       		dc.w $7000
0001EBB4 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EBB8 71C0                       		dc.w $71C0
0001EBBA 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EBBE 7300                       		dc.w $7300
0001EBC0 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EBC4 7540                       		dc.w $7540
0001EBC6 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EBCA A1E0                       		dc.w $A1E0
0001EBCC 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EBD0 6980                       		dc.w $6980
0001EBD2                            ; ---------------------------------------------------------------------------
0001EBD2                            ; Pattern load cues - Labyrinth
0001EBD2                            ; ---------------------------------------------------------------------------
0001EBD2 000B                       PLC_LZ:		dc.w $B
0001EBD4 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001EBD8 0000                       		dc.w 0
0001EBDA 0000 0000                  		dc.l Nem_LzBlock1	; block
0001EBDE 3C00                       		dc.w $3C00
0001EBE0 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001EBE4 3E00                       		dc.w $3E00
0001EBE6 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001EBEA 4B20                       		dc.w $4B20
0001EBEC 0000 0000                  		dc.l Nem_Water		; water	surface
0001EBF0 6000                       		dc.w $6000
0001EBF2 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001EBF6 6200                       		dc.w $6200
0001EBF8 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001EBFC 6500                       		dc.w $6500
0001EBFE 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001EC02 6900                       		dc.w $6900
0001EC04 0000 0000                  		dc.l Nem_LzBlock3	; block
0001EC08 7780                       		dc.w $7780
0001EC0A 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001EC0E 7880                       		dc.w $7880
0001EC10 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001EC14 7980                       		dc.w $7980
0001EC16 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001EC1A 94C0                       		dc.w $94C0
0001EC1C 000C                       PLC_LZ2:	dc.w $C
0001EC1E 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001EC22 7BC0                       		dc.w $7BC0
0001EC24 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001EC28 7CC0                       		dc.w $7CC0
0001EC2A 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001EC2E 7EC0                       		dc.w $7EC0
0001EC30 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001EC34 5D20                       		dc.w $5D20
0001EC36 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001EC3A 8800                       		dc.w $8800
0001EC3C 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001EC40 89E0                       		dc.w $89E0
0001EC42 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001EC46 8CE0                       		dc.w $8CE0
0001EC48 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001EC4C 90C0                       		dc.w $90C0
0001EC4E 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EC52 A1E0                       		dc.w $A1E0
0001EC54 0000 0000                  		dc.l Nem_Cork		; cork block
0001EC58 A000                       		dc.w $A000
0001EC5A 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EC5E A360                       		dc.w $A360
0001EC60 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EC64 A460                       		dc.w $A460
0001EC66 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EC6A A660                       		dc.w $A660
0001EC6C                            ; ---------------------------------------------------------------------------
0001EC6C                            ; Pattern load cues - Marble
0001EC6C                            ; ---------------------------------------------------------------------------
0001EC6C 0009                       PLC_MZ:		dc.w 9
0001EC6E 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001EC72 0000                       		dc.w 0
0001EC74 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001EC78 6000                       		dc.w $6000
0001EC7A 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001EC7E 68A0                       		dc.w $68A0
0001EC80 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EC84 7000                       		dc.w $7000
0001EC86 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001EC8A 71C0                       		dc.w $71C0
0001EC8C 0000 0000                  		dc.l Nem_Lava		; lava
0001EC90 7500                       		dc.w $7500
0001EC92 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EC96 8880                       		dc.w $8880
0001EC98 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001EC9C 8F60                       		dc.w $8F60
0001EC9E 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001ECA2 9700                       		dc.w $9700
0001ECA4 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001ECA8 9FE0                       		dc.w $9FE0
0001ECAA 0004                       PLC_MZ2:	dc.w 4
0001ECAC 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001ECB0 A260                       		dc.w $A260
0001ECB2 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ECB6 A360                       		dc.w $A360
0001ECB8 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ECBC A460                       		dc.w $A460
0001ECBE 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ECC2 A660                       		dc.w $A660
0001ECC4 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001ECC8 5700                       		dc.w $5700
0001ECCA                            ; ---------------------------------------------------------------------------
0001ECCA                            ; Pattern load cues - Star Light
0001ECCA                            ; ---------------------------------------------------------------------------
0001ECCA 0008                       PLC_SLZ:	dc.w 8
0001ECCC 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001ECD0 0000                       		dc.w 0
0001ECD2 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001ECD6 8000                       		dc.w $8000
0001ECD8 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001ECDC 8520                       		dc.w $8520
0001ECDE 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001ECE2 9000                       		dc.w $9000
0001ECE4 0000 0000                  		dc.l Nem_SlzBlock	; block
0001ECE8 9C00                       		dc.w $9C00
0001ECEA 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001ECEE A260                       		dc.w $A260
0001ECF0 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ECF4 A360                       		dc.w $A360
0001ECF6 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ECFA A460                       		dc.w $A460
0001ECFC 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ED00 A660                       		dc.w $A660
0001ED02 0005                       PLC_SLZ2:	dc.w 5
0001ED04 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001ED08 6E80                       		dc.w $6E80
0001ED0A 0000 0000                  		dc.l Nem_Fan		; fan
0001ED0E 7400                       		dc.w $7400
0001ED10 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001ED14 7980                       		dc.w $7980
0001ED16 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001ED1A 7B80                       		dc.w $7B80
0001ED1C 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001ED20 9B00                       		dc.w $9B00
0001ED22 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001ED26 9E00                       		dc.w $9E00
0001ED28                            ; ---------------------------------------------------------------------------
0001ED28                            ; Pattern load cues - Spring Yard
0001ED28                            ; ---------------------------------------------------------------------------
0001ED28 0004                       PLC_SYZ:	dc.w 4
0001ED2A 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001ED2E 0000                       		dc.w 0
0001ED30 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001ED34 8000                       		dc.w $8000
0001ED36 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001ED3A 8880                       		dc.w $8880
0001ED3C 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001ED40 8F60                       		dc.w $8F60
0001ED42 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001ED46 9700                       		dc.w $9700
0001ED48 0007                       PLC_SYZ2:	dc.w 7
0001ED4A 0000 0000                  		dc.l Nem_Bumper		; bumper
0001ED4E 7000                       		dc.w $7000
0001ED50 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001ED54 72C0                       		dc.w $72C0
0001ED56 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001ED5A 7740                       		dc.w $7740
0001ED5C 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001ED60 9FE0                       		dc.w $9FE0
0001ED62 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001ED66 A1E0                       		dc.w $A1E0
0001ED68 0000 0000                  		dc.l Nem_Spikes		; spikes
0001ED6C A360                       		dc.w $A360
0001ED6E 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001ED72 A460                       		dc.w $A460
0001ED74 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001ED78 A660                       		dc.w $A660
0001ED7A                            ; ---------------------------------------------------------------------------
0001ED7A                            ; Pattern load cues - Scrap Brain
0001ED7A                            ; ---------------------------------------------------------------------------
0001ED7A 000B                       PLC_SBZ:	dc.w $B
0001ED7C 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001ED80 0000                       		dc.w 0
0001ED82 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001ED86 5800                       		dc.w $5800
0001ED88 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001ED8C 5D00                       		dc.w $5D00
0001ED8E 0000 0000                  		dc.l Nem_Girder		; girder
0001ED92 5E00                       		dc.w $5E00
0001ED94 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001ED98 6040                       		dc.w $6040
0001ED9A 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001ED9E 6880                       		dc.w $6880
0001EDA0 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001EDA4 6900                       		dc.w $6900
0001EDA6 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001EDAA 7220                       		dc.w $7220
0001EDAC 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001EDB0 76A0                       		dc.w $76A0
0001EDB2 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001EDB6 7B20                       		dc.w $7B20
0001EDB8 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001EDBC 7EA0                       		dc.w $7EA0
0001EDBE 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001EDC2 9860                       		dc.w $9860
0001EDC4 000C                       PLC_SBZ2:	dc.w $C
0001EDC6 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001EDCA 5600                       		dc.w $5600
0001EDCC 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001EDD0 8000                       		dc.w $8000
0001EDD2 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001EDD6 8520                       		dc.w $8520
0001EDD8 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001EDDC 8C00                       		dc.w $8C00
0001EDDE 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001EDE2 8DE0                       		dc.w $8DE0
0001EDE4 0000 0000                  		dc.l Nem_Electric	; electric orb
0001EDE8 8FC0                       		dc.w $8FC0
0001EDEA 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001EDEE 9240                       		dc.w $9240
0001EDF0 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001EDF4 7F20                       		dc.w $7F20
0001EDF6 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001EDFA 9BE0                       		dc.w $9BE0
0001EDFC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001EE00 A1E0                       		dc.w $A1E0
0001EE02 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EE06 A360                       		dc.w $A360
0001EE08 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EE0C A460                       		dc.w $A460
0001EE0E 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EE12 A660                       		dc.w $A660
0001EE14                            ; ---------------------------------------------------------------------------
0001EE14                            ; Pattern load cues - DR. Breen Hill
0001EE14                            ; ---------------------------------------------------------------------------
0001EE14 000A                       PLC_BHZ:	dc.w $A
0001EE16 0000 0000                  		dc.l Nem_BHZ	; GHZ main patterns
0001EE1A 0000                       		dc.w 0
0001EE1C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EE20 6B00                       		dc.w $6B00
0001EE22 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001EE26 7A00                       		dc.w $7A00
0001EE28 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001EE2C 8000                       		dc.w $8000
0001EE2E 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001EE32 8880                       		dc.w $8880
0001EE34 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001EE38 8F60                       		dc.w $8F60
0001EE3A 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001EE3E 9360                       		dc.w $9360
0001EE40 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001EE44 9E00                       		dc.w $9E00
0001EE46 0000 0000                  		dc.l Nem_Spikes		; spikes
0001EE4A A360                       		dc.w $A360
0001EE4C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001EE50 A460                       		dc.w $A460
0001EE52 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001EE56 A660                       		dc.w $A660
0001EE58 0005                       PLC_BHZ2:	dc.w 5
0001EE5A 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001EE5E 7000                       		dc.w $7000
0001EE60 0000 0000                  		dc.l Nem_Bridge		; bridge
0001EE64 71C0                       		dc.w $71C0
0001EE66 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001EE6A 7300                       		dc.w $7300
0001EE6C 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001EE70 7540                       		dc.w $7540
0001EE72 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001EE76 A1E0                       		dc.w $A1E0
0001EE78 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001EE7C 6980                       		dc.w $6980
0001EE7E                            ; ---------------------------------------------------------------------------
0001EE7E                            ; Pattern load cues - title card
0001EE7E                            ; ---------------------------------------------------------------------------
0001EE7E 0000                       PLC_TitleCard:	dc.w 0
0001EE80 0000 0000                  		dc.l Nem_TitleCard
0001EE84 B000                       		dc.w $B000
0001EE86                            ; ---------------------------------------------------------------------------
0001EE86                            ; Pattern load cues - act 3 boss
0001EE86                            ; ---------------------------------------------------------------------------
0001EE86 0005                       PLC_Boss:	dc.w 5
0001EE88 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001EE8C 8000                       		dc.w $8000
0001EE8E 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001EE92 8D80                       		dc.w $8D80
0001EE94 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001EE98 93A0                       		dc.w $93A0
0001EE9A 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001EE9E A300                       		dc.w $A300
0001EEA0 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001EEA4 A300                       		dc.w $A300
0001EEA6 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001EEAA A540                       		dc.w $A540
0001EEAC                            ; ---------------------------------------------------------------------------
0001EEAC                            ; Pattern load cues - act 1/2 signpost
0001EEAC                            ; ---------------------------------------------------------------------------
0001EEAC 0002                       PLC_Signpost:	dc.w 2
0001EEAE 0000 0000                  		dc.l Nem_SignPost	; signpost
0001EEB2 D000                       		dc.w $D000
0001EEB4 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001EEB8 96C0                       		dc.w $96C0
0001EEBA 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001EEBE 8C40                       		dc.w $8C40
0001EEC0                            ; ---------------------------------------------------------------------------
0001EEC0                            ; Pattern load cues - beta special stage warp effect
0001EEC0                            ; ---------------------------------------------------------------------------
0001EEC0 0000                       PLC_Warp:	dc.w 0
0001EEC2 0000 0000                  		dc.l Nem_Warp
0001EEC6 A820                       		dc.w $A820
0001EEC8                            ; ---------------------------------------------------------------------------
0001EEC8                            ; Pattern load cues - special stage
0001EEC8                            ; ---------------------------------------------------------------------------
0001EEC8 0010                       PLC_SpeStage:	dc.w $10
0001EECA 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001EECE 0000                       		dc.w 0
0001EED0 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001EED4 0A20                       		dc.w $A20
0001EED6 0000 0000                  		dc.l Nem_SSWalls	; walls
0001EEDA 2840                       		dc.w $2840
0001EEDC 0000 0000                  		dc.l Nem_Bumper		; bumper
0001EEE0 4760                       		dc.w $4760
0001EEE2 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001EEE6 4A20                       		dc.w $4A20
0001EEE8 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001EEEC 4C60                       		dc.w $4C60
0001EEEE 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001EEF2 5E00                       		dc.w $5E00
0001EEF4 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001EEF8 6E00                       		dc.w $6E00
0001EEFA 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001EEFE 7E00                       		dc.w $7E00
0001EF00 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001EF04 8E00                       		dc.w $8E00
0001EF06 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001EF0A 9E00                       		dc.w $9E00
0001EF0C 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001EF10 AE00                       		dc.w $AE00
0001EF12 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001EF16 BE00                       		dc.w $BE00
0001EF18 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001EF1C EE00                       		dc.w $EE00
0001EF1E 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001EF22 F2E0                       		dc.w $F2E0
0001EF24 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001EF28 F400                       		dc.w $F400
0001EF2A 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001EF2E F520                       		dc.w $F520
0001EF30 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001EF34 F2E0                       		dc.w $F2E0
0001EF36 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001EF3A F400                       		dc.w $F400
0001EF3C 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001EF40 F520                       		dc.w $F520
0001EF42                            ; ---------------------------------------------------------------------------
0001EF42                            ; Pattern load cues - GHZ animals
0001EF42                            ; ---------------------------------------------------------------------------
0001EF42 0001                       PLC_GHZAnimals:	dc.w 1
0001EF44 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EF48 B000                       		dc.w $B000
0001EF4A 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EF4E B240                       		dc.w $B240
0001EF50                            ; ---------------------------------------------------------------------------
0001EF50                            ; Pattern load cues - LZ animals
0001EF50                            ; ---------------------------------------------------------------------------
0001EF50 0001                       PLC_LZAnimals:	dc.w 1
0001EF52 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001EF56 B000                       		dc.w $B000
0001EF58 0000 0000                  		dc.l Nem_Seal		; seal
0001EF5C B240                       		dc.w $B240
0001EF5E                            ; ---------------------------------------------------------------------------
0001EF5E                            ; Pattern load cues - MZ animals
0001EF5E                            ; ---------------------------------------------------------------------------
0001EF5E 0001                       PLC_MZAnimals:	dc.w 1
0001EF60 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001EF64 B000                       		dc.w $B000
0001EF66 0000 0000                  		dc.l Nem_Seal		; seal
0001EF6A B240                       		dc.w $B240
0001EF6C                            ; ---------------------------------------------------------------------------
0001EF6C                            ; Pattern load cues - SLZ animals
0001EF6C                            ; ---------------------------------------------------------------------------
0001EF6C 0001                       PLC_SLZAnimals:	dc.w 1
0001EF6E 0000 0000                  		dc.l Nem_Pig		; pig
0001EF72 B000                       		dc.w $B000
0001EF74 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EF78 B240                       		dc.w $B240
0001EF7A                            ; ---------------------------------------------------------------------------
0001EF7A                            ; Pattern load cues - SYZ animals
0001EF7A                            ; ---------------------------------------------------------------------------
0001EF7A 0001                       PLC_SYZAnimals:	dc.w 1
0001EF7C 0000 0000                  		dc.l Nem_Pig		; pig
0001EF80 B000                       		dc.w $B000
0001EF82 0000 0000                  		dc.l Nem_Chicken	; chicken
0001EF86 B240                       		dc.w $B240
0001EF88                            ; ---------------------------------------------------------------------------
0001EF88                            ; Pattern load cues - SBZ animals
0001EF88                            ; ---------------------------------------------------------------------------
0001EF88 0001                       PLC_SBZAnimals:	dc.w 1
0001EF8A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EF8E B000                       		dc.w $B000
0001EF90 0000 0000                  		dc.l Nem_Chicken	; chicken
0001EF94 B240                       		dc.w $B240
0001EF96                            ; ---------------------------------------------------------------------------
0001EF96                            ; Pattern load cues - special stage results screen
0001EF96                            ; ---------------------------------------------------------------------------
0001EF96 0001                       PLC_SpeStResult:dc.w 1
0001EF98 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001EF9C A820                       		dc.w $A820
0001EF9E 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001EFA2 AA20                       		dc.w $AA20
0001EFA4                            ; ---------------------------------------------------------------------------
0001EFA4                            ; Pattern load cues - ending sequence
0001EFA4                            ; ---------------------------------------------------------------------------
0001EFA4 000E                       PLC_Ending:	dc.w $E
0001EFA6 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001EFAA 0000                       		dc.w 0
0001EFAC 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001EFB0 39A0                       		dc.w $39A0
0001EFB2 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001EFB6 6B00                       		dc.w $6B00
0001EFB8 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001EFBC 7400                       		dc.w $7400
0001EFBE 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001EFC2 78A0                       		dc.w $78A0
0001EFC4 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001EFC8 7C20                       		dc.w $7C20
0001EFCA 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001EFCE A480                       		dc.w $A480
0001EFD0 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001EFD4 AA60                       		dc.w $AA60
0001EFD6 0000 0000                  		dc.l Nem_Chicken	; chicken
0001EFDA ACA0                       		dc.w $ACA0
0001EFDC 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001EFE0 AE60                       		dc.w $AE60
0001EFE2 0000 0000                  		dc.l Nem_Seal		; seal
0001EFE6 B0A0                       		dc.w $B0A0
0001EFE8 0000 0000                  		dc.l Nem_Pig		; pig
0001EFEC B260                       		dc.w $B260
0001EFEE 0000 0000                  		dc.l Nem_Flicky		; flicky
0001EFF2 B4A0                       		dc.w $B4A0
0001EFF4 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001EFF8 B660                       		dc.w $B660
0001EFFA 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001EFFE B8A0                       		dc.w $B8A0
0001F000                            ; ---------------------------------------------------------------------------
0001F000                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001F000                            ; ---------------------------------------------------------------------------
0001F000 0002                       PLC_TryAgain:	dc.w 2
0001F002 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001F006 78A0                       		dc.w $78A0
0001F008 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001F00C 7C20                       		dc.w $7C20
0001F00E 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001F012 B400                       		dc.w $B400
0001F014                            ; ---------------------------------------------------------------------------
0001F014                            ; Pattern load cues - Eggman on SBZ 2
0001F014                            ; ---------------------------------------------------------------------------
0001F014 0002                       PLC_EggmanSBZ2:	dc.w 2
0001F016 0000 0000                  		dc.l Nem_SbzBlock	; block
0001F01A A300                       		dc.w $A300
0001F01C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001F020 8000                       		dc.w $8000
0001F022 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001F026 9400                       		dc.w $9400
0001F028                            ; ---------------------------------------------------------------------------
0001F028                            ; Pattern load cues - final boss
0001F028                            ; ---------------------------------------------------------------------------
0001F028 0004                       PLC_FZBoss:	dc.w 4
0001F02A 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001F02E 7400                       		dc.w $7400
0001F030 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001F034 6000                       		dc.w $6000
0001F036 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001F03A 8000                       		dc.w $8000
0001F03C 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001F040 8E00                       		dc.w $8E00
0001F042 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001F046 A540                       		dc.w $A540
0001F048                            ; ---------------------------------------------------------------------------
0001F048                            ; Pattern load cues - Teto boss
0001F048                            ; ---------------------------------------------------------------------------
0001F048 0002                       PLC_TetoBoss:	dc.w 2
0001F04A 0000 0000                  		dc.l Nem_Tetoboss		; Eggman main patterns
0001F04E 8000                       		dc.w $8000
0001F050 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001F054 93A0                       		dc.w $93A0
0001F056 0000 0000                  		dc.l Nem_Peartobomb		; bomb enemy (gets overwritten)
0001F05A 9000                       		dc.w $9000
0001F05C                            		; even
0001F05C                            ; ---------------------------------------------------------------------------
0001F05C                            ; Pattern load cues - Truth Nuke
0001F05C                            ; ---------------------------------------------------------------------------
0001F05C 0000                       PLC_TruthNuke:	dc.w 0
0001F05E 0000 0000                  		dc.l Nem_TruthNuke	; GMZ
0001F062 0000                       		dc.w 0
0001F064                            		even
0001F064                            		even
0001F064                            
0001F064                            		incbin	misc\padding.bin
0001F152                            		even
0001F152                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001F5A8                            		even
0001F5A8                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001F640                            		even
0001F640                            Nem_Gomer:	incbin	artnem\gomer.bin
0001F782                            		even
0001F782                            Eni_Gomer:	incbin	mapeni\gomer.bin
0001F7D0                            		even
0001F7D0                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001F8E4                            		even
0001F8E4                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
000207AE                            		even
000207AE                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
000248B4                            		even
000248B4                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
000248E8                            		even
000248E8                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
000249A6                            		even
000249A6                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
00024E4E                            		even
00024E4E                            Eni_Idiot:	incbin	mapeni\idiot.bin	; Idiot (mappings)
00024EAC                            		even
00024EAC                            Nem_Idiot:	incbin	artnem\idiot.bin	; Idiot
00025AB2                            		even
00025AB2                            Eni_TruthNuke:	incbin	mapeni\truthnuke.bin	; GMZ
00025B90                            		even
00025B90                            Nem_TruthNuke:	incbin	artnem\truthnuke.bin	; GMZ: TRVTH NVKE
0002905A                            		even
0002905A                            ; ---------------------------------------------------------------------------
0002905A                            ; Sprite mappings - Sonic
0002905A                            ; ---------------------------------------------------------------------------
0002905A                            Map_Sonic:
0002905A                            	include "_maps\Sonic.asm"
0002905A                            Map_a933:
0002905A 0000                       Map_a933_0: 	dc.w Map_a933_E0-Map_a933
0002905C 0000                       Map_a933_2: 	dc.w Map_a933_E1-Map_a933
0002905E 0000                       Map_a933_4: 	dc.w Map_a933_EC-Map_a933
00029060 0000                       Map_a933_6: 	dc.w Map_a933_FC-Map_a933
00029062 0000                       Map_a933_8: 	dc.w Map_a933_10C-Map_a933
00029064 0000                       Map_a933_A: 	dc.w Map_a933_11C-Map_a933
00029066 0000                       Map_a933_C: 	dc.w Map_a933_12C-Map_a933
00029068 0000                       Map_a933_E: 	dc.w Map_a933_141-Map_a933
0002906A 0000                       Map_a933_10: 	dc.w Map_a933_14C-Map_a933
0002906C 0000                       Map_a933_12: 	dc.w Map_a933_157-Map_a933
0002906E 0000                       Map_a933_14: 	dc.w Map_a933_16C-Map_a933
00029070 0000                       Map_a933_16: 	dc.w Map_a933_177-Map_a933
00029072 0000                       Map_a933_18: 	dc.w Map_a933_187-Map_a933
00029074 0000                       Map_a933_1A: 	dc.w Map_a933_1A1-Map_a933
00029076 0000                       Map_a933_1C: 	dc.w Map_a933_1C0-Map_a933
00029078 0000                       Map_a933_1E: 	dc.w Map_a933_1D5-Map_a933
0002907A 0000                       Map_a933_20: 	dc.w Map_a933_1EF-Map_a933
0002907C 0000                       Map_a933_22: 	dc.w Map_a933_204-Map_a933
0002907E 0000                       Map_a933_24: 	dc.w Map_a933_21E-Map_a933
00029080 0000                       Map_a933_26: 	dc.w Map_a933_233-Map_a933
00029082 0000                       Map_a933_28: 	dc.w Map_a933_23E-Map_a933
00029084 0000                       Map_a933_2A: 	dc.w Map_a933_249-Map_a933
00029086 0000                       Map_a933_2C: 	dc.w Map_a933_25E-Map_a933
00029088 0000                       Map_a933_2E: 	dc.w Map_a933_269-Map_a933
0002908A 0000                       Map_a933_30: 	dc.w Map_a933_279-Map_a933
0002908C 0000                       Map_a933_32: 	dc.w Map_a933_298-Map_a933
0002908E 0000                       Map_a933_34: 	dc.w Map_a933_2B7-Map_a933
00029090 0000                       Map_a933_36: 	dc.w Map_a933_2CC-Map_a933
00029092 0000                       Map_a933_38: 	dc.w Map_a933_2E6-Map_a933
00029094 0000                       Map_a933_3A: 	dc.w Map_a933_2FB-Map_a933
00029096 0000                       Map_a933_3C: 	dc.w Map_a933_315-Map_a933
00029098 0000                       Map_a933_3E: 	dc.w Map_a933_320-Map_a933
0002909A 0000                       Map_a933_40: 	dc.w Map_a933_32B-Map_a933
0002909C 0000                       Map_a933_42: 	dc.w Map_a933_336-Map_a933
0002909E 0000                       Map_a933_44: 	dc.w Map_a933_341-Map_a933
000290A0 0000                       Map_a933_46: 	dc.w Map_a933_356-Map_a933
000290A2 0000                       Map_a933_48: 	dc.w Map_a933_366-Map_a933
000290A4 0000                       Map_a933_4A: 	dc.w Map_a933_37B-Map_a933
000290A6 0000                       Map_a933_4C: 	dc.w Map_a933_38B-Map_a933
000290A8 0000                       Map_a933_4E: 	dc.w Map_a933_396-Map_a933
000290AA 0000                       Map_a933_50: 	dc.w Map_a933_3A1-Map_a933
000290AC 0000                       Map_a933_52: 	dc.w Map_a933_3AC-Map_a933
000290AE 0000                       Map_a933_54: 	dc.w Map_a933_3B7-Map_a933
000290B0 0000                       Map_a933_56: 	dc.w Map_a933_3CC-Map_a933
000290B2 0000                       Map_a933_58: 	dc.w Map_a933_3D7-Map_a933
000290B4 0000                       Map_a933_5A: 	dc.w Map_a933_3EC-Map_a933
000290B6 0000                       Map_a933_5C: 	dc.w Map_a933_3F7-Map_a933
000290B8 0000                       Map_a933_5E: 	dc.w Map_a933_3FD-Map_a933
000290BA 0000                       Map_a933_60: 	dc.w Map_a933_403-Map_a933
000290BC 0000                       Map_a933_62: 	dc.w Map_a933_409-Map_a933
000290BE 0000                       Map_a933_64: 	dc.w Map_a933_40F-Map_a933
000290C0 0000                       Map_a933_66: 	dc.w Map_a933_415-Map_a933
000290C2 0000                       Map_a933_68: 	dc.w Map_a933_420-Map_a933
000290C4 0000                       Map_a933_6A: 	dc.w Map_a933_426-Map_a933
000290C6 0000                       Map_a933_6C: 	dc.w Map_a933_431-Map_a933
000290C8 0000                       Map_a933_6E: 	dc.w Map_a933_437-Map_a933
000290CA 0000                       Map_a933_70: 	dc.w Map_a933_442-Map_a933
000290CC 0000                       Map_a933_72: 	dc.w Map_a933_457-Map_a933
000290CE 0000                       Map_a933_74: 	dc.w Map_a933_476-Map_a933
000290D0 0000                       Map_a933_76: 	dc.w Map_a933_481-Map_a933
000290D2 0000                       Map_a933_78: 	dc.w Map_a933_48C-Map_a933
000290D4 0000                       Map_a933_7A: 	dc.w Map_a933_4A1-Map_a933
000290D6 0000                       Map_a933_7C: 	dc.w Map_a933_4AC-Map_a933
000290D8 0000                       Map_a933_7E: 	dc.w Map_a933_4BC-Map_a933
000290DA 0000                       Map_a933_80: 	dc.w Map_a933_4D1-Map_a933
000290DC 0000                       Map_a933_82: 	dc.w Map_a933_4DC-Map_a933
000290DE 0000                       Map_a933_84: 	dc.w Map_a933_4F1-Map_a933
000290E0 0000                       Map_a933_86: 	dc.w Map_a933_506-Map_a933
000290E2 0000                       Map_a933_88: 	dc.w Map_a933_520-Map_a933
000290E4 0000                       Map_a933_8A: 	dc.w Map_a933_53A-Map_a933
000290E6 0000                       Map_a933_8C: 	dc.w Map_a933_545-Map_a933
000290E8 0000                       Map_a933_8E: 	dc.w Map_a933_555-Map_a933
000290EA 0000                       Map_a933_90: 	dc.w Map_a933_560-Map_a933
000290EC 0000                       Map_a933_92: 	dc.w Map_a933_570-Map_a933
000290EE 0000                       Map_a933_94: 	dc.w Map_a933_57B-Map_a933
000290F0 0000                       Map_a933_96: 	dc.w Map_a933_58B-Map_a933
000290F2 0000                       Map_a933_98: 	dc.w Map_a933_59B-Map_a933
000290F4 0000                       Map_a933_9A: 	dc.w Map_a933_5B5-Map_a933
000290F6 0000                       Map_a933_9C: 	dc.w Map_a933_5CF-Map_a933
000290F8 0000                       Map_a933_9E: 	dc.w Map_a933_5DA-Map_a933
000290FA 0000                       Map_a933_A0: 	dc.w Map_a933_5EA-Map_a933
000290FC 0000                       Map_a933_A2: 	dc.w Map_a933_5F0-Map_a933
000290FE 0000                       Map_a933_A4: 	dc.w Map_a933_5F6-Map_a933
00029100 0000                       Map_a933_A6: 	dc.w Map_a933_5FC-Map_a933
00029102 0000                       Map_a933_A8: 	dc.w Map_a933_611-Map_a933
00029104 0000                       Map_a933_AA: 	dc.w Map_a933_621-Map_a933
00029106 0000                       Map_a933_AC: 	dc.w Map_a933_631-Map_a933
00029108 0000                       Map_a933_AE: 	dc.w Map_a933_641-Map_a933
0002910A 0000                       Map_a933_B0: 	dc.w Map_a933_64C-Map_a933
0002910C 0000                       Map_a933_B2: 	dc.w Map_a933_657-Map_a933
0002910E 0000                       Map_a933_B4: 	dc.w Map_a933_667-Map_a933
00029110 0000                       Map_a933_B6: 	dc.w Map_a933_672-Map_a933
00029112 0000                       Map_a933_B8: 	dc.w Map_a933_687-Map_a933
00029114 0000                       Map_a933_BA: 	dc.w Map_a933_688-Map_a933
00029116 0000                       Map_a933_BC: 	dc.w Map_a933_689-Map_a933
00029118 0000                       Map_a933_BE: 	dc.w Map_a933_68A-Map_a933
0002911A 0000                       Map_a933_C0: 	dc.w Map_a933_68B-Map_a933
0002911C 0000                       Map_a933_C2: 	dc.w Map_a933_696-Map_a933
0002911E 0000                       Map_a933_C4: 	dc.w Map_a933_697-Map_a933
00029120 0000                       Map_a933_C6: 	dc.w Map_a933_6A2-Map_a933
00029122 0000                       Map_a933_C8: 	dc.w Map_a933_6A3-Map_a933
00029124 0000                       Map_a933_CA: 	dc.w Map_a933_6A4-Map_a933
00029126 0000                       Map_a933_CC: 	dc.w Map_a933_6A5-Map_a933
00029128 0000                       Map_a933_CE: 	dc.w Map_a933_6B0-Map_a933
0002912A 0000                       Map_a933_D0: 	dc.w Map_a933_6B1-Map_a933
0002912C 0000                       Map_a933_D2: 	dc.w Map_a933_6BC-Map_a933
0002912E 0000                       Map_a933_D4: 	dc.w Map_a933_6BD-Map_a933
00029130 0000                       Map_a933_D6: 	dc.w Map_a933_6BE-Map_a933
00029132 0000                       Map_a933_D8: 	dc.w Map_a933_6BF-Map_a933
00029134 0000                       Map_a933_DA: 	dc.w Map_a933_6CA-Map_a933
00029136 0000                       Map_a933_DC: 	dc.w Map_a933_6CB-Map_a933
00029138 0000                       Map_a933_DE: 	dc.w Map_a933_6D6-Map_a933
0002913A 00                         Map_a933_E0: 	dc.b $0
0002913B 02                         Map_a933_E1: 	dc.b $2
0002913C ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00029141 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
00029146 03                         Map_a933_EC: 	dc.b $3
00029147 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002914C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00029151 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029156 03                         Map_a933_FC: 	dc.b $3
00029157 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002915C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00029161 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029166 03                         Map_a933_10C: 	dc.b $3
00029167 EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
0002916C FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00029171 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029176 03                         Map_a933_11C: 	dc.b $3
00029177 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002917C 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
00029181 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
00029186 04                         Map_a933_12C: 	dc.b $4
00029187 EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
0002918C FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
00029191 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
00029196 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
0002919B 02                         Map_a933_141: 	dc.b $2
0002919C EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000291A1 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000291A6 02                         Map_a933_14C: 	dc.b $2
000291A7 ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000291AC FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000291B1 04                         Map_a933_157: 	dc.b $4
000291B2 EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000291B7 FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
000291BC FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
000291C1 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
000291C6 02                         Map_a933_16C: 	dc.b $2
000291C7 FC0E 0000 EB               	dc.b $FC, $E, $0, $0, $EB
000291CC EC09 000C F3               	dc.b $EC, $9, $0, $C, $F3
000291D1 03                         Map_a933_177: 	dc.b $3
000291D2 ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
000291D7 FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
000291DC 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
000291E1 05                         Map_a933_187: 	dc.b $5
000291E2 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
000291E7 EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
000291EC FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
000291F1 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
000291F6 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
000291FB 06                         Map_a933_1A1: 	dc.b $6
000291FC EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00029201 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00029206 FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
0002920B 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00029210 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
00029215 F400 0016 14               	dc.b $F4, $0, $0, $16, $14
0002921A 04                         Map_a933_1C0: 	dc.b $4
0002921B ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00029220 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00029225 FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
0002922A 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
0002922F 05                         Map_a933_1D5: 	dc.b $5
00029230 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
00029235 EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
0002923A FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
0002923F 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
00029244 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00029249 04                         Map_a933_1EF: 	dc.b $4
0002924A EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
0002924F EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
00029254 FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
00029259 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
0002925E 05                         Map_a933_204: 	dc.b $5
0002925F ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00029264 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
00029269 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
0002926E FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
00029273 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
00029278 04                         Map_a933_21E: 	dc.b $4
00029279 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
0002927E EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
00029283 FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
00029288 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
0002928D 02                         Map_a933_233: 	dc.b $2
0002928E F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
00029293 EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
00029298 02                         Map_a933_23E: 	dc.b $2
00029299 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
0002929E F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000292A3 04                         Map_a933_249: 	dc.b $4
000292A4 F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000292A9 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000292AE FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000292B3 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
000292B8 02                         Map_a933_25E: 	dc.b $2
000292B9 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
000292BE F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
000292C3 03                         Map_a933_269: 	dc.b $3
000292C4 F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
000292C9 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
000292CE F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
000292D3 06                         Map_a933_279: 	dc.b $6
000292D4 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
000292D9 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
000292DE F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
000292E3 F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
000292E8 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
000292ED FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
000292F2 06                         Map_a933_298: 	dc.b $6
000292F3 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
000292F8 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
000292FD EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
00029302 F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
00029307 F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
0002930C 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00029311 04                         Map_a933_2B7: 	dc.b $4
00029312 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
00029317 F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
0002931C EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00029321 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
00029326 05                         Map_a933_2CC: 	dc.b $5
00029327 FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
0002932C ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00029331 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
00029336 F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
0002933B 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00029340 04                         Map_a933_2E6: 	dc.b $4
00029341 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00029346 F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
0002934B EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00029350 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
00029355 05                         Map_a933_2FB: 	dc.b $5
00029356 FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002935B EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
00029360 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
00029365 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002936A 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
0002936F 02                         Map_a933_315: 	dc.b $2
00029370 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029375 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002937A 02                         Map_a933_320: 	dc.b $2
0002937B EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029380 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00029385 02                         Map_a933_32B: 	dc.b $2
00029386 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
0002938B FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
00029390 02                         Map_a933_336: 	dc.b $2
00029391 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
00029396 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
0002939B 04                         Map_a933_341: 	dc.b $4
0002939C EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000293A1 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000293A6 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000293AB FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000293B0 03                         Map_a933_356: 	dc.b $3
000293B1 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000293B6 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000293BB FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000293C0 04                         Map_a933_366: 	dc.b $4
000293C1 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000293C6 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000293CB FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000293D0 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000293D5 03                         Map_a933_37B: 	dc.b $3
000293D6 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000293DB EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000293E0 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000293E5 02                         Map_a933_38B: 	dc.b $2
000293E6 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000293EB F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000293F0 02                         Map_a933_396: 	dc.b $2
000293F1 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
000293F6 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
000293FB 02                         Map_a933_3A1: 	dc.b $2
000293FC F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00029401 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00029406 02                         Map_a933_3AC: 	dc.b $2
00029407 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002940C F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00029411 04                         Map_a933_3B7: 	dc.b $4
00029412 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00029417 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002941C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00029421 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00029426 02                         Map_a933_3CC: 	dc.b $2
00029427 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002942C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00029431 04                         Map_a933_3D7: 	dc.b $4
00029432 FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
00029437 F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
0002943C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00029441 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
00029446 02                         Map_a933_3EC: 	dc.b $2
00029447 F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
0002944C EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00029451 01                         Map_a933_3F7: 	dc.b $1
00029452 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029457 01                         Map_a933_3FD: 	dc.b $1
00029458 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002945D 01                         Map_a933_403: 	dc.b $1
0002945E F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029463 01                         Map_a933_409: 	dc.b $1
00029464 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029469 01                         Map_a933_40F: 	dc.b $1
0002946A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002946F 02                         Map_a933_415: 	dc.b $2
00029470 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
00029475 F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
0002947A 01                         Map_a933_420: 	dc.b $1
0002947B F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029480 02                         Map_a933_426: 	dc.b $2
00029481 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00029486 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
0002948B 01                         Map_a933_431: 	dc.b $1
0002948C F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
00029491 02                         Map_a933_437: 	dc.b $2
00029492 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
00029497 FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
0002949C 04                         Map_a933_442: 	dc.b $4
0002949D ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000294A2 FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000294A7 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000294AC 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000294B1 06                         Map_a933_457: 	dc.b $6
000294B2 F404 0000 F4               	dc.b $F4, $4, $0, $0, $F4
000294B7 FC0D 0002 EC               	dc.b $FC, $D, $0, $2, $EC
000294BC 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
000294C1 0C00 000D EC               	dc.b $C, $0, $0, $D, $EC
000294C6 FC02 000E 0C               	dc.b $FC, $2, $0, $E, $C
000294CB F400 0011 04               	dc.b $F4, $0, $0, $11, $4
000294D0 02                         Map_a933_476: 	dc.b $2
000294D1 040D 0000 E4               	dc.b $4, $D, $0, $0, $E4
000294D6 EC0A 0008 EC               	dc.b $EC, $A, $0, $8, $EC
000294DB 02                         Map_a933_481: 	dc.b $2
000294DC 040D 0000 E3               	dc.b $4, $D, $0, $0, $E3
000294E1 EC0A 0008 EB               	dc.b $EC, $A, $0, $8, $EB
000294E6 04                         Map_a933_48C: 	dc.b $4
000294E7 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
000294EC F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
000294F1 0408 000C 03               	dc.b $4, $8, $0, $C, $3
000294F6 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
000294FB 02                         Map_a933_4A1: 	dc.b $2
000294FC F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00029501 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00029506 03                         Map_a933_4AC: 	dc.b $3
00029507 F40D 0000 EB               	dc.b $F4, $D, $0, $0, $EB
0002950C FC00 0008 0B               	dc.b $FC, $0, $0, $8, $B
00029511 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00029516 04                         Map_a933_4BC: 	dc.b $4
00029517 F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002951C F705 0008 EC               	dc.b $F7, $5, $0, $8, $EC
00029521 0408 000C 02               	dc.b $4, $8, $0, $C, $2
00029526 0700 000F EC               	dc.b $7, $0, $0, $F, $EC
0002952B 02                         Map_a933_4D1: 	dc.b $2
0002952C EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
00029531 0C04 000C F4               	dc.b $C, $4, $0, $C, $F4
00029536 04                         Map_a933_4DC: 	dc.b $4
00029537 F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002953C 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00029541 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00029546 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002954B 04                         Map_a933_4F1: 	dc.b $4
0002954C F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00029551 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00029556 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002955B F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
00029560 05                         Map_a933_506: 	dc.b $5
00029561 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00029566 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
0002956B 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
00029570 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
00029575 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
0002957A 05                         Map_a933_520: 	dc.b $5
0002957B E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
00029580 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
00029585 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
0002958A 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
0002958F 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
00029594 02                         Map_a933_53A: 	dc.b $2
00029595 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
0002959A 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
0002959F 03                         Map_a933_545: 	dc.b $3
000295A0 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000295A5 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000295AA 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000295AF 02                         Map_a933_555: 	dc.b $2
000295B0 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000295B5 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000295BA 03                         Map_a933_560: 	dc.b $3
000295BB EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000295C0 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000295C5 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000295CA 02                         Map_a933_570: 	dc.b $2
000295CB EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000295D0 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
000295D5 03                         Map_a933_57B: 	dc.b $3
000295D6 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000295DB 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
000295E0 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
000295E5 03                         Map_a933_58B: 	dc.b $3
000295E6 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000295EB E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
000295F0 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
000295F5 05                         Map_a933_59B: 	dc.b $5
000295F6 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
000295FB E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00029600 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00029605 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002960A 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002960F 05                         Map_a933_5B5: 	dc.b $5
00029610 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00029615 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002961A F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
0002961F 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00029624 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00029629 02                         Map_a933_5CF: 	dc.b $2
0002962A EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002962F F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00029634 03                         Map_a933_5DA: 	dc.b $3
00029635 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002963A F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
0002963F 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00029644 01                         Map_a933_5EA: 	dc.b $1
00029645 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002964A 01                         Map_a933_5F0: 	dc.b $1
0002964B F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00029650 01                         Map_a933_5F6: 	dc.b $1
00029651 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00029656 04                         Map_a933_5FC: 	dc.b $4
00029657 F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002965C F705 0808 04               	dc.b $F7, $5, $8, $8, $4
00029661 0408 080C E5               	dc.b $4, $8, $8, $C, $E5
00029666 0700 080F 0C               	dc.b $7, $0, $8, $F, $C
0002966B 03                         Map_a933_611: 	dc.b $3
0002966C F40D 0800 F5               	dc.b $F4, $D, $8, $0, $F5
00029671 FC00 0808 ED               	dc.b $FC, $0, $8, $8, $ED
00029676 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
0002967B 03                         Map_a933_621: 	dc.b $3
0002967C F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
00029681 F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
00029686 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
0002968B 03                         Map_a933_631: 	dc.b $3
0002968C EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
00029691 FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
00029696 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
0002969B 02                         Map_a933_641: 	dc.b $2
0002969C F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000296A1 F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000296A6 02                         Map_a933_64C: 	dc.b $2
000296A7 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000296AC EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000296B1 03                         Map_a933_657: 	dc.b $3
000296B2 ED0F 0000 F3               	dc.b $ED, $F, $0, $0, $F3
000296B7 0D00 0010 F3               	dc.b $D, $0, $0, $10, $F3
000296BC 0D04 0011 03               	dc.b $D, $4, $0, $11, $3
000296C1 02                         Map_a933_667: 	dc.b $2
000296C2 F60F 0000 EE               	dc.b $F6, $F, $0, $0, $EE
000296C7 EE08 0010 F6               	dc.b $EE, $8, $0, $10, $F6
000296CC 04                         Map_a933_672: 	dc.b $4
000296CD ED08 0000 F3               	dc.b $ED, $8, $0, $0, $F3
000296D2 F50E 0003 EB               	dc.b $F5, $E, $0, $3, $EB
000296D7 F503 000F 0B               	dc.b $F5, $3, $0, $F, $B
000296DC 0D08 0013 F3               	dc.b $D, $8, $0, $13, $F3
000296E1 00                         Map_a933_687: 	dc.b $0
000296E2 00                         Map_a933_688: 	dc.b $0
000296E3 00                         Map_a933_689: 	dc.b $0
000296E4 00                         Map_a933_68A: 	dc.b $0
000296E5 02                         Map_a933_68B: 	dc.b $2
000296E6 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000296EB EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000296F0 00                         Map_a933_696: 	dc.b $0
000296F1 02                         Map_a933_697: 	dc.b $2
000296F2 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
000296F7 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
000296FC 00                         Map_a933_6A2: 	dc.b $0
000296FD 00                         Map_a933_6A3: 	dc.b $0
000296FE 00                         Map_a933_6A4: 	dc.b $0
000296FF 02                         Map_a933_6A5: 	dc.b $2
00029700 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029705 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
0002970A 00                         Map_a933_6B0: 	dc.b $0
0002970B 02                         Map_a933_6B1: 	dc.b $2
0002970C F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
00029711 EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029716 00                         Map_a933_6BC: 	dc.b $0
00029717 00                         Map_a933_6BD: 	dc.b $0
00029718 00                         Map_a933_6BE: 	dc.b $0
00029719 02                         Map_a933_6BF: 	dc.b $2
0002971A F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002971F EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029724 00                         Map_a933_6CA: 	dc.b $0
00029725 02                         Map_a933_6CB: 	dc.b $2
00029726 F40F 0000 F0               	dc.b $F4, $F, $0, $0, $F0
0002972B EC04 0010 F8               	dc.b $EC, $4, $0, $10, $F8
00029730 00                         Map_a933_6D6: 	dc.b $0
00029732 00                         	even
00029732 00                         	even
00029732                            
00029732                            ; ---------------------------------------------------------------------------
00029732                            ; Uncompressed graphics	loading	array for Sonic
00029732                            ; ---------------------------------------------------------------------------
00029732                            SonicDynPLC:
00029732                            	include "_inc\Sonic dynamic pattern load cues.asm"
00029732                            DPLC_33c5:
00029732 0000                       DPLC_33c5_0: 	dc.w DPLC_33c5_E0-DPLC_33c5
00029734 0000                       DPLC_33c5_2: 	dc.w DPLC_33c5_E1-DPLC_33c5
00029736 0000                       DPLC_33c5_4: 	dc.w DPLC_33c5_E6-DPLC_33c5
00029738 0000                       DPLC_33c5_6: 	dc.w DPLC_33c5_ED-DPLC_33c5
0002973A 0000                       DPLC_33c5_8: 	dc.w DPLC_33c5_F4-DPLC_33c5
0002973C 0000                       DPLC_33c5_A: 	dc.w DPLC_33c5_FB-DPLC_33c5
0002973E 0000                       DPLC_33c5_C: 	dc.w DPLC_33c5_102-DPLC_33c5
00029740 0000                       DPLC_33c5_E: 	dc.w DPLC_33c5_10B-DPLC_33c5
00029742 0000                       DPLC_33c5_10: 	dc.w DPLC_33c5_110-DPLC_33c5
00029744 0000                       DPLC_33c5_12: 	dc.w DPLC_33c5_115-DPLC_33c5
00029746 0000                       DPLC_33c5_14: 	dc.w DPLC_33c5_11E-DPLC_33c5
00029748 0000                       DPLC_33c5_16: 	dc.w DPLC_33c5_123-DPLC_33c5
0002974A 0000                       DPLC_33c5_18: 	dc.w DPLC_33c5_12A-DPLC_33c5
0002974C 0000                       DPLC_33c5_1A: 	dc.w DPLC_33c5_135-DPLC_33c5
0002974E 0000                       DPLC_33c5_1C: 	dc.w DPLC_33c5_142-DPLC_33c5
00029750 0000                       DPLC_33c5_1E: 	dc.w DPLC_33c5_14B-DPLC_33c5
00029752 0000                       DPLC_33c5_20: 	dc.w DPLC_33c5_156-DPLC_33c5
00029754 0000                       DPLC_33c5_22: 	dc.w DPLC_33c5_15F-DPLC_33c5
00029756 0000                       DPLC_33c5_24: 	dc.w DPLC_33c5_16A-DPLC_33c5
00029758 0000                       DPLC_33c5_26: 	dc.w DPLC_33c5_173-DPLC_33c5
0002975A 0000                       DPLC_33c5_28: 	dc.w DPLC_33c5_178-DPLC_33c5
0002975C 0000                       DPLC_33c5_2A: 	dc.w DPLC_33c5_17D-DPLC_33c5
0002975E 0000                       DPLC_33c5_2C: 	dc.w DPLC_33c5_186-DPLC_33c5
00029760 0000                       DPLC_33c5_2E: 	dc.w DPLC_33c5_18B-DPLC_33c5
00029762 0000                       DPLC_33c5_30: 	dc.w DPLC_33c5_192-DPLC_33c5
00029764 0000                       DPLC_33c5_32: 	dc.w DPLC_33c5_19F-DPLC_33c5
00029766 0000                       DPLC_33c5_34: 	dc.w DPLC_33c5_1AC-DPLC_33c5
00029768 0000                       DPLC_33c5_36: 	dc.w DPLC_33c5_1B5-DPLC_33c5
0002976A 0000                       DPLC_33c5_38: 	dc.w DPLC_33c5_1C0-DPLC_33c5
0002976C 0000                       DPLC_33c5_3A: 	dc.w DPLC_33c5_1C9-DPLC_33c5
0002976E 0000                       DPLC_33c5_3C: 	dc.w DPLC_33c5_1D4-DPLC_33c5
00029770 0000                       DPLC_33c5_3E: 	dc.w DPLC_33c5_1D9-DPLC_33c5
00029772 0000                       DPLC_33c5_40: 	dc.w DPLC_33c5_1DE-DPLC_33c5
00029774 0000                       DPLC_33c5_42: 	dc.w DPLC_33c5_1E3-DPLC_33c5
00029776 0000                       DPLC_33c5_44: 	dc.w DPLC_33c5_1E8-DPLC_33c5
00029778 0000                       DPLC_33c5_46: 	dc.w DPLC_33c5_1F1-DPLC_33c5
0002977A 0000                       DPLC_33c5_48: 	dc.w DPLC_33c5_1F8-DPLC_33c5
0002977C 0000                       DPLC_33c5_4A: 	dc.w DPLC_33c5_201-DPLC_33c5
0002977E 0000                       DPLC_33c5_4C: 	dc.w DPLC_33c5_208-DPLC_33c5
00029780 0000                       DPLC_33c5_4E: 	dc.w DPLC_33c5_20D-DPLC_33c5
00029782 0000                       DPLC_33c5_50: 	dc.w DPLC_33c5_212-DPLC_33c5
00029784 0000                       DPLC_33c5_52: 	dc.w DPLC_33c5_217-DPLC_33c5
00029786 0000                       DPLC_33c5_54: 	dc.w DPLC_33c5_21C-DPLC_33c5
00029788 0000                       DPLC_33c5_56: 	dc.w DPLC_33c5_225-DPLC_33c5
0002978A 0000                       DPLC_33c5_58: 	dc.w DPLC_33c5_22A-DPLC_33c5
0002978C 0000                       DPLC_33c5_5A: 	dc.w DPLC_33c5_233-DPLC_33c5
0002978E 0000                       DPLC_33c5_5C: 	dc.w DPLC_33c5_238-DPLC_33c5
00029790 0000                       DPLC_33c5_5E: 	dc.w DPLC_33c5_23B-DPLC_33c5
00029792 0000                       DPLC_33c5_60: 	dc.w DPLC_33c5_23E-DPLC_33c5
00029794 0000                       DPLC_33c5_62: 	dc.w DPLC_33c5_241-DPLC_33c5
00029796 0000                       DPLC_33c5_64: 	dc.w DPLC_33c5_244-DPLC_33c5
00029798 0000                       DPLC_33c5_66: 	dc.w DPLC_33c5_247-DPLC_33c5
0002979A 0000                       DPLC_33c5_68: 	dc.w DPLC_33c5_24C-DPLC_33c5
0002979C 0000                       DPLC_33c5_6A: 	dc.w DPLC_33c5_24F-DPLC_33c5
0002979E 0000                       DPLC_33c5_6C: 	dc.w DPLC_33c5_254-DPLC_33c5
000297A0 0000                       DPLC_33c5_6E: 	dc.w DPLC_33c5_257-DPLC_33c5
000297A2 0000                       DPLC_33c5_70: 	dc.w DPLC_33c5_25C-DPLC_33c5
000297A4 0000                       DPLC_33c5_72: 	dc.w DPLC_33c5_265-DPLC_33c5
000297A6 0000                       DPLC_33c5_74: 	dc.w DPLC_33c5_26A-DPLC_33c5
000297A8 0000                       DPLC_33c5_76: 	dc.w DPLC_33c5_26F-DPLC_33c5
000297AA 0000                       DPLC_33c5_78: 	dc.w DPLC_33c5_274-DPLC_33c5
000297AC 0000                       DPLC_33c5_7A: 	dc.w DPLC_33c5_279-DPLC_33c5
000297AE 0000                       DPLC_33c5_7C: 	dc.w DPLC_33c5_27C-DPLC_33c5
000297B0 0000                       DPLC_33c5_7E: 	dc.w DPLC_33c5_283-DPLC_33c5
000297B2 0000                       DPLC_33c5_80: 	dc.w DPLC_33c5_288-DPLC_33c5
000297B4 0000                       DPLC_33c5_82: 	dc.w DPLC_33c5_28B-DPLC_33c5
000297B6 0000                       DPLC_33c5_84: 	dc.w DPLC_33c5_294-DPLC_33c5
000297B8 0000                       DPLC_33c5_86: 	dc.w DPLC_33c5_29D-DPLC_33c5
000297BA 0000                       DPLC_33c5_88: 	dc.w DPLC_33c5_2A8-DPLC_33c5
000297BC 0000                       DPLC_33c5_8A: 	dc.w DPLC_33c5_2B3-DPLC_33c5
000297BE 0000                       DPLC_33c5_8C: 	dc.w DPLC_33c5_2B8-DPLC_33c5
000297C0 0000                       DPLC_33c5_8E: 	dc.w DPLC_33c5_2BF-DPLC_33c5
000297C2 0000                       DPLC_33c5_90: 	dc.w DPLC_33c5_2C4-DPLC_33c5
000297C4 0000                       DPLC_33c5_92: 	dc.w DPLC_33c5_2CB-DPLC_33c5
000297C6 0000                       DPLC_33c5_94: 	dc.w DPLC_33c5_2D0-DPLC_33c5
000297C8 0000                       DPLC_33c5_96: 	dc.w DPLC_33c5_2D7-DPLC_33c5
000297CA 0000                       DPLC_33c5_98: 	dc.w DPLC_33c5_2DE-DPLC_33c5
000297CC 0000                       DPLC_33c5_9A: 	dc.w DPLC_33c5_2E9-DPLC_33c5
000297CE 0000                       DPLC_33c5_9C: 	dc.w DPLC_33c5_2F4-DPLC_33c5
000297D0 0000                       DPLC_33c5_9E: 	dc.w DPLC_33c5_2F9-DPLC_33c5
000297D2 0000                       DPLC_33c5_A0: 	dc.w DPLC_33c5_300-DPLC_33c5
000297D4 0000                       DPLC_33c5_A2: 	dc.w DPLC_33c5_303-DPLC_33c5
000297D6 0000                       DPLC_33c5_A4: 	dc.w DPLC_33c5_306-DPLC_33c5
000297D8 0000                       DPLC_33c5_A6: 	dc.w DPLC_33c5_309-DPLC_33c5
000297DA 0000                       DPLC_33c5_A8: 	dc.w DPLC_33c5_30E-DPLC_33c5
000297DC 0000                       DPLC_33c5_AA: 	dc.w DPLC_33c5_315-DPLC_33c5
000297DE 0000                       DPLC_33c5_AC: 	dc.w DPLC_33c5_31C-DPLC_33c5
000297E0 0000                       DPLC_33c5_AE: 	dc.w DPLC_33c5_323-DPLC_33c5
000297E2 0000                       DPLC_33c5_B0: 	dc.w DPLC_33c5_328-DPLC_33c5
000297E4 0000                       DPLC_33c5_B2: 	dc.w DPLC_33c5_32D-DPLC_33c5
000297E6 0000                       DPLC_33c5_B4: 	dc.w DPLC_33c5_332-DPLC_33c5
000297E8 0000                       DPLC_33c5_B6: 	dc.w DPLC_33c5_337-DPLC_33c5
000297EA 0000                       DPLC_33c5_B8: 	dc.w DPLC_33c5_33C-DPLC_33c5
000297EC 0000                       DPLC_33c5_BA: 	dc.w DPLC_33c5_33D-DPLC_33c5
000297EE 0000                       DPLC_33c5_BC: 	dc.w DPLC_33c5_33E-DPLC_33c5
000297F0 0000                       DPLC_33c5_BE: 	dc.w DPLC_33c5_33F-DPLC_33c5
000297F2 0000                       DPLC_33c5_C0: 	dc.w DPLC_33c5_340-DPLC_33c5
000297F4 0000                       DPLC_33c5_C2: 	dc.w DPLC_33c5_345-DPLC_33c5
000297F6 0000                       DPLC_33c5_C4: 	dc.w DPLC_33c5_346-DPLC_33c5
000297F8 0000                       DPLC_33c5_C6: 	dc.w DPLC_33c5_34B-DPLC_33c5
000297FA 0000                       DPLC_33c5_C8: 	dc.w DPLC_33c5_34C-DPLC_33c5
000297FC 0000                       DPLC_33c5_CA: 	dc.w DPLC_33c5_34D-DPLC_33c5
000297FE 0000                       DPLC_33c5_CC: 	dc.w DPLC_33c5_34E-DPLC_33c5
00029800 0000                       DPLC_33c5_CE: 	dc.w DPLC_33c5_353-DPLC_33c5
00029802 0000                       DPLC_33c5_D0: 	dc.w DPLC_33c5_354-DPLC_33c5
00029804 0000                       DPLC_33c5_D2: 	dc.w DPLC_33c5_359-DPLC_33c5
00029806 0000                       DPLC_33c5_D4: 	dc.w DPLC_33c5_35A-DPLC_33c5
00029808 0000                       DPLC_33c5_D6: 	dc.w DPLC_33c5_35B-DPLC_33c5
0002980A 0000                       DPLC_33c5_D8: 	dc.w DPLC_33c5_35C-DPLC_33c5
0002980C 0000                       DPLC_33c5_DA: 	dc.w DPLC_33c5_361-DPLC_33c5
0002980E 0000                       DPLC_33c5_DC: 	dc.w DPLC_33c5_362-DPLC_33c5
00029810 0000                       DPLC_33c5_DE: 	dc.w DPLC_33c5_367-DPLC_33c5
00029812 00                         DPLC_33c5_E0: 	dc.b $0
00029813 02                         DPLC_33c5_E1: 	dc.b $2
00029814 F000                       	dc.b $F0, $0
00029816 1010                       	dc.b $10, $10
00029818 03                         DPLC_33c5_E6: 	dc.b $3
00029819 5012                       	dc.b $50, $12
0002981B 5018                       	dc.b $50, $18
0002981D 201E                       	dc.b $20, $1E
0002981F 03                         DPLC_33c5_ED: 	dc.b $3
00029820 5021                       	dc.b $50, $21
00029822 5018                       	dc.b $50, $18
00029824 201E                       	dc.b $20, $1E
00029826 03                         DPLC_33c5_F4: 	dc.b $3
00029827 5021                       	dc.b $50, $21
00029829 5018                       	dc.b $50, $18
0002982B 2027                       	dc.b $20, $27
0002982D 03                         DPLC_33c5_FB: 	dc.b $3
0002982E 802A                       	dc.b $80, $2A
00029830 2033                       	dc.b $20, $33
00029832 2036                       	dc.b $20, $36
00029834 04                         DPLC_33c5_102: 	dc.b $4
00029835 7039                       	dc.b $70, $39
00029837 5041                       	dc.b $50, $41
00029839 5047                       	dc.b $50, $47
0002983B 104D                       	dc.b $10, $4D
0002983D 02                         DPLC_33c5_10B: 	dc.b $2
0002983E 7039                       	dc.b $70, $39
00029840 B04F                       	dc.b $B0, $4F
00029842 02                         DPLC_33c5_110: 	dc.b $2
00029843 505B                       	dc.b $50, $5B
00029845 8061                       	dc.b $80, $61
00029847 04                         DPLC_33c5_115: 	dc.b $4
00029848 505B                       	dc.b $50, $5B
0002984A 506A                       	dc.b $50, $6A
0002984C 5070                       	dc.b $50, $70
0002984E 1076                       	dc.b $10, $76
00029850 02                         DPLC_33c5_11E: 	dc.b $2
00029851 F4F0                       	dc.b $F4, $F0
00029853 1500                       	dc.b $15, $0
00029855 03                         DPLC_33c5_123: 	dc.b $3
00029856 7039                       	dc.b $70, $39
00029858 3078                       	dc.b $30, $78
0002985A 507C                       	dc.b $50, $7C
0002985C 05                         DPLC_33c5_12A: 	dc.b $5
0002985D 5082                       	dc.b $50, $82
0002985F 5088                       	dc.b $50, $88
00029861 208E                       	dc.b $20, $8E
00029863 5091                       	dc.b $50, $91
00029865 0097                       	dc.b $0, $97
00029867 06                         DPLC_33c5_135: 	dc.b $6
00029868 5082                       	dc.b $50, $82
0002986A 1098                       	dc.b $10, $98
0002986C 309A                       	dc.b $30, $9A
0002986E 509E                       	dc.b $50, $9E
00029870 30A4                       	dc.b $30, $A4
00029872 00A8                       	dc.b $0, $A8
00029874 04                         DPLC_33c5_142: 	dc.b $4
00029875 50A9                       	dc.b $50, $A9
00029877 10AF                       	dc.b $10, $AF
00029879 70B1                       	dc.b $70, $B1
0002987B 20B9                       	dc.b $20, $B9
0002987D 05                         DPLC_33c5_14B: 	dc.b $5
0002987E 50BC                       	dc.b $50, $BC
00029880 30C2                       	dc.b $30, $C2
00029882 70C6                       	dc.b $70, $C6
00029884 20CE                       	dc.b $20, $CE
00029886 10D1                       	dc.b $10, $D1
00029888 04                         DPLC_33c5_156: 	dc.b $4
00029889 50BC                       	dc.b $50, $BC
0002988B 10D3                       	dc.b $10, $D3
0002988D 70D5                       	dc.b $70, $D5
0002988F 20DD                       	dc.b $20, $DD
00029891 05                         DPLC_33c5_15F: 	dc.b $5
00029892 5082                       	dc.b $50, $82
00029894 1098                       	dc.b $10, $98
00029896 008E                       	dc.b $0, $8E
00029898 70E0                       	dc.b $70, $E0
0002989A 20E8                       	dc.b $20, $E8
0002989C 04                         DPLC_33c5_16A: 	dc.b $4
0002989D 70EB                       	dc.b $70, $EB
0002989F 50F3                       	dc.b $50, $F3
000298A1 10F9                       	dc.b $10, $F9
000298A3 50FB                       	dc.b $50, $FB
000298A5 02                         DPLC_33c5_173: 	dc.b $2
000298A6 70EB                       	dc.b $70, $EB
000298A8 B101                       	dc.b $B1, $1
000298AA 02                         DPLC_33c5_178: 	dc.b $2
000298AB 510D                       	dc.b $51, $D
000298AD 8113                       	dc.b $81, $13
000298AF 04                         DPLC_33c5_17D: 	dc.b $4
000298B0 510D                       	dc.b $51, $D
000298B2 511C                       	dc.b $51, $1C
000298B4 1122                       	dc.b $11, $22
000298B6 5124                       	dc.b $51, $24
000298B8 02                         DPLC_33c5_186: 	dc.b $2
000298B9 510D                       	dc.b $51, $D
000298BB B12A                       	dc.b $B1, $2A
000298BD 03                         DPLC_33c5_18B: 	dc.b $3
000298BE 70EB                       	dc.b $70, $EB
000298C0 0101                       	dc.b $1, $1
000298C2 8136                       	dc.b $81, $36
000298C4 06                         DPLC_33c5_192: 	dc.b $6
000298C5 513F                       	dc.b $51, $3F
000298C7 1145                       	dc.b $11, $45
000298C9 1147                       	dc.b $11, $47
000298CB 8149                       	dc.b $81, $49
000298CD 0152                       	dc.b $1, $52
000298CF 0153                       	dc.b $1, $53
000298D1 06                         DPLC_33c5_19F: 	dc.b $6
000298D2 513F                       	dc.b $51, $3F
000298D4 2154                       	dc.b $21, $54
000298D6 1157                       	dc.b $11, $57
000298D8 1159                       	dc.b $11, $59
000298DA 815B                       	dc.b $81, $5B
000298DC 0152                       	dc.b $1, $52
000298DE 04                         DPLC_33c5_1AC: 	dc.b $4
000298DF 5164                       	dc.b $51, $64
000298E1 116A                       	dc.b $11, $6A
000298E3 816C                       	dc.b $81, $6C
000298E5 1175                       	dc.b $11, $75
000298E7 05                         DPLC_33c5_1B5: 	dc.b $5
000298E8 5177                       	dc.b $51, $77
000298EA 217D                       	dc.b $21, $7D
000298EC 1180                       	dc.b $11, $80
000298EE 7182                       	dc.b $71, $82
000298F0 218A                       	dc.b $21, $8A
000298F2 04                         DPLC_33c5_1C0: 	dc.b $4
000298F3 5177                       	dc.b $51, $77
000298F5 118D                       	dc.b $11, $8D
000298F7 818F                       	dc.b $81, $8F
000298F9 1198                       	dc.b $11, $98
000298FB 05                         DPLC_33c5_1C9: 	dc.b $5
000298FC 513F                       	dc.b $51, $3F
000298FE 819A                       	dc.b $81, $9A
00029900 1159                       	dc.b $11, $59
00029902 11A3                       	dc.b $11, $A3
00029904 0152                       	dc.b $1, $52
00029906 02                         DPLC_33c5_1D4: 	dc.b $2
00029907 51A5                       	dc.b $51, $A5
00029909 B1AB                       	dc.b $B1, $AB
0002990B 02                         DPLC_33c5_1D9: 	dc.b $2
0002990C 505B                       	dc.b $50, $5B
0002990E B1B7                       	dc.b $B1, $B7
00029910 02                         DPLC_33c5_1DE: 	dc.b $2
00029911 51A5                       	dc.b $51, $A5
00029913 B1C3                       	dc.b $B1, $C3
00029915 02                         DPLC_33c5_1E3: 	dc.b $2
00029916 505B                       	dc.b $50, $5B
00029918 B1CF                       	dc.b $B1, $CF
0002991A 04                         DPLC_33c5_1E8: 	dc.b $4
0002991B 51DB                       	dc.b $51, $DB
0002991D 11E1                       	dc.b $11, $E1
0002991F B1E3                       	dc.b $B1, $E3
00029921 01EF                       	dc.b $1, $EF
00029923 03                         DPLC_33c5_1F1: 	dc.b $3
00029924 51F0                       	dc.b $51, $F0
00029926 11F6                       	dc.b $11, $F6
00029928 B1F8                       	dc.b $B1, $F8
0002992A 04                         DPLC_33c5_1F8: 	dc.b $4
0002992B 51DB                       	dc.b $51, $DB
0002992D 1204                       	dc.b $12, $4
0002992F B206                       	dc.b $B2, $6
00029931 01EF                       	dc.b $1, $EF
00029933 03                         DPLC_33c5_201: 	dc.b $3
00029934 51F0                       	dc.b $51, $F0
00029936 11F6                       	dc.b $11, $F6
00029938 B212                       	dc.b $B2, $12
0002993A 02                         DPLC_33c5_208: 	dc.b $2
0002993B 521E                       	dc.b $52, $1E
0002993D B224                       	dc.b $B2, $24
0002993F 02                         DPLC_33c5_20D: 	dc.b $2
00029940 510D                       	dc.b $51, $D
00029942 B230                       	dc.b $B2, $30
00029944 02                         DPLC_33c5_212: 	dc.b $2
00029945 521E                       	dc.b $52, $1E
00029947 B23C                       	dc.b $B2, $3C
00029949 02                         DPLC_33c5_217: 	dc.b $2
0002994A 510D                       	dc.b $51, $D
0002994C B248                       	dc.b $B2, $48
0002994E 04                         DPLC_33c5_21C: 	dc.b $4
0002994F 5254                       	dc.b $52, $54
00029951 125A                       	dc.b $12, $5A
00029953 B25C                       	dc.b $B2, $5C
00029955 0268                       	dc.b $2, $68
00029957 02                         DPLC_33c5_225: 	dc.b $2
00029958 7269                       	dc.b $72, $69
0002995A B271                       	dc.b $B2, $71
0002995C 04                         DPLC_33c5_22A: 	dc.b $4
0002995D 5254                       	dc.b $52, $54
0002995F 127D                       	dc.b $12, $7D
00029961 B27F                       	dc.b $B2, $7F
00029963 0268                       	dc.b $2, $68
00029965 02                         DPLC_33c5_233: 	dc.b $2
00029966 7269                       	dc.b $72, $69
00029968 B28B                       	dc.b $B2, $8B
0002996A 01                         DPLC_33c5_238: 	dc.b $1
0002996B F297                       	dc.b $F2, $97
0002996D 01                         DPLC_33c5_23B: 	dc.b $1
0002996E F2A7                       	dc.b $F2, $A7
00029970 01                         DPLC_33c5_23E: 	dc.b $1
00029971 F2B7                       	dc.b $F2, $B7
00029973 01                         DPLC_33c5_241: 	dc.b $1
00029974 F2C7                       	dc.b $F2, $C7
00029976 01                         DPLC_33c5_244: 	dc.b $1
00029977 F2D7                       	dc.b $F2, $D7
00029979 02                         DPLC_33c5_247: 	dc.b $2
0002997A B2E7                       	dc.b $B2, $E7
0002997C 22F3                       	dc.b $22, $F3
0002997E 01                         DPLC_33c5_24C: 	dc.b $1
0002997F F2F6                       	dc.b $F2, $F6
00029981 02                         DPLC_33c5_24F: 	dc.b $2
00029982 B306                       	dc.b $B3, $6
00029984 2312                       	dc.b $23, $12
00029986 01                         DPLC_33c5_254: 	dc.b $1
00029987 F315                       	dc.b $F3, $15
00029989 02                         DPLC_33c5_257: 	dc.b $2
0002998A 5325                       	dc.b $53, $25
0002998C B32B                       	dc.b $B3, $2B
0002998E 04                         DPLC_33c5_25C: 	dc.b $4
0002998F 5337                       	dc.b $53, $37
00029991 733D                       	dc.b $73, $3D
00029993 1345                       	dc.b $13, $45
00029995 0347                       	dc.b $3, $47
00029997 02                         DPLC_33c5_265: 	dc.b $2
00029998 D348                       	dc.b $D3, $48
0002999A 34EC                       	dc.b $34, $EC
0002999C 02                         DPLC_33c5_26A: 	dc.b $2
0002999D F528                       	dc.b $F5, $28
0002999F 0538                       	dc.b $5, $38
000299A1 02                         DPLC_33c5_26F: 	dc.b $2
000299A2 F539                       	dc.b $F5, $39
000299A4 0549                       	dc.b $5, $49
000299A6 02                         DPLC_33c5_274: 	dc.b $2
000299A7 E356                       	dc.b $E3, $56
000299A9 054A                       	dc.b $5, $4A
000299AB 01                         DPLC_33c5_279: 	dc.b $1
000299AC 8365                       	dc.b $83, $65
000299AE 03                         DPLC_33c5_27C: 	dc.b $3
000299AF 736E                       	dc.b $73, $6E
000299B1 0376                       	dc.b $3, $76
000299B3 3377                       	dc.b $33, $77
000299B5 02                         DPLC_33c5_283: 	dc.b $2
000299B6 E37B                       	dc.b $E3, $7B
000299B8 054A                       	dc.b $5, $4A
000299BA 01                         DPLC_33c5_288: 	dc.b $1
000299BB D561                       	dc.b $D5, $61
000299BD 04                         DPLC_33c5_28B: 	dc.b $4
000299BE B399                       	dc.b $B3, $99
000299C0 33A5                       	dc.b $33, $A5
000299C2 03A9                       	dc.b $3, $A9
000299C4 03AA                       	dc.b $3, $AA
000299C6 04                         DPLC_33c5_294: 	dc.b $4
000299C7 B3AB                       	dc.b $B3, $AB
000299C9 33B7                       	dc.b $33, $B7
000299CB 03BB                       	dc.b $3, $BB
000299CD 03BC                       	dc.b $3, $BC
000299CF 05                         DPLC_33c5_29D: 	dc.b $5
000299D0 83BD                       	dc.b $83, $BD
000299D2 13C6                       	dc.b $13, $C6
000299D4 53C8                       	dc.b $53, $C8
000299D6 13CE                       	dc.b $13, $CE
000299D8 03D0                       	dc.b $3, $D0
000299DA 05                         DPLC_33c5_2A8: 	dc.b $5
000299DB 83D1                       	dc.b $83, $D1
000299DD 13DA                       	dc.b $13, $DA
000299DF 53C8                       	dc.b $53, $C8
000299E1 13CE                       	dc.b $13, $CE
000299E3 03D0                       	dc.b $3, $D0
000299E5 02                         DPLC_33c5_2B3: 	dc.b $2
000299E6 83DC                       	dc.b $83, $DC
000299E8 73E5                       	dc.b $73, $E5
000299EA 03                         DPLC_33c5_2B8: 	dc.b $3
000299EB 83ED                       	dc.b $83, $ED
000299ED 23F6                       	dc.b $23, $F6
000299EF 13F9                       	dc.b $13, $F9
000299F1 02                         DPLC_33c5_2BF: 	dc.b $2
000299F2 83FB                       	dc.b $83, $FB
000299F4 7404                       	dc.b $74, $4
000299F6 03                         DPLC_33c5_2C4: 	dc.b $3
000299F7 83ED                       	dc.b $83, $ED
000299F9 240C                       	dc.b $24, $C
000299FB 140F                       	dc.b $14, $F
000299FD 02                         DPLC_33c5_2CB: 	dc.b $2
000299FE 5411                       	dc.b $54, $11
00029A00 B417                       	dc.b $B4, $17
00029A02 03                         DPLC_33c5_2D0: 	dc.b $3
00029A03 8423                       	dc.b $84, $23
00029A05 342C                       	dc.b $34, $2C
00029A07 0430                       	dc.b $4, $30
00029A09 03                         DPLC_33c5_2D7: 	dc.b $3
00029A0A 7431                       	dc.b $74, $31
00029A0C 1439                       	dc.b $14, $39
00029A0E B43B                       	dc.b $B4, $3B
00029A10 05                         DPLC_33c5_2DE: 	dc.b $5
00029A11 7447                       	dc.b $74, $47
00029A13 144F                       	dc.b $14, $4F
00029A15 5451                       	dc.b $54, $51
00029A17 3457                       	dc.b $34, $57
00029A19 045B                       	dc.b $4, $5B
00029A1B 05                         DPLC_33c5_2E9: 	dc.b $5
00029A1C 745C                       	dc.b $74, $5C
00029A1E 144F                       	dc.b $14, $4F
00029A20 5464                       	dc.b $54, $64
00029A22 3457                       	dc.b $34, $57
00029A24 045B                       	dc.b $4, $5B
00029A26 02                         DPLC_33c5_2F4: 	dc.b $2
00029A27 246A                       	dc.b $24, $6A
00029A29 F46D                       	dc.b $F4, $6D
00029A2B 03                         DPLC_33c5_2F9: 	dc.b $3
00029A2C 247D                       	dc.b $24, $7D
00029A2E B480                       	dc.b $B4, $80
00029A30 248C                       	dc.b $24, $8C
00029A32 01                         DPLC_33c5_300: 	dc.b $1
00029A33 B48F                       	dc.b $B4, $8F
00029A35 01                         DPLC_33c5_303: 	dc.b $1
00029A36 549B                       	dc.b $54, $9B
00029A38 01                         DPLC_33c5_306: 	dc.b $1
00029A39 14A1                       	dc.b $14, $A1
00029A3B 02                         DPLC_33c5_309: 	dc.b $2
00029A3C E356                       	dc.b $E3, $56
00029A3E 054A                       	dc.b $5, $4A
00029A40 03                         DPLC_33c5_30E: 	dc.b $3
00029A41 736E                       	dc.b $73, $6E
00029A43 0376                       	dc.b $3, $76
00029A45 3377                       	dc.b $33, $77
00029A47 03                         DPLC_33c5_315: 	dc.b $3
00029A48 B4A3                       	dc.b $B4, $A3
00029A4A 14AF                       	dc.b $14, $AF
00029A4C 34B1                       	dc.b $34, $B1
00029A4E 03                         DPLC_33c5_31C: 	dc.b $3
00029A4F 54B5                       	dc.b $54, $B5
00029A51 B4BB                       	dc.b $B4, $BB
00029A53 1074                       	dc.b $10, $74
00029A55 02                         DPLC_33c5_323: 	dc.b $2
00029A56 F4C7                       	dc.b $F4, $C7
00029A58 24D7                       	dc.b $24, $D7
00029A5A 02                         DPLC_33c5_328: 	dc.b $2
00029A5B F4DA                       	dc.b $F4, $DA
00029A5D 14EA                       	dc.b $14, $EA
00029A5F 02                         DPLC_33c5_32D: 	dc.b $2
00029A60 F502                       	dc.b $F5, $2
00029A62 2512                       	dc.b $25, $12
00029A64 02                         DPLC_33c5_332: 	dc.b $2
00029A65 F515                       	dc.b $F5, $15
00029A67 2525                       	dc.b $25, $25
00029A69 02                         DPLC_33c5_337: 	dc.b $2
00029A6A F54B                       	dc.b $F5, $4B
00029A6C 755B                       	dc.b $75, $5B
00029A6E 00                         DPLC_33c5_33C: 	dc.b $0
00029A6F 00                         DPLC_33c5_33D: 	dc.b $0
00029A70 00                         DPLC_33c5_33E: 	dc.b $0
00029A71 00                         DPLC_33c5_33F: 	dc.b $0
00029A72 02                         DPLC_33c5_340: 	dc.b $2
00029A73 F4DA                       	dc.b $F4, $DA
00029A75 14EA                       	dc.b $14, $EA
00029A77 00                         DPLC_33c5_345: 	dc.b $0
00029A78 02                         DPLC_33c5_346: 	dc.b $2
00029A79 F4DA                       	dc.b $F4, $DA
00029A7B 14EA                       	dc.b $14, $EA
00029A7D 00                         DPLC_33c5_34B: 	dc.b $0
00029A7E 00                         DPLC_33c5_34C: 	dc.b $0
00029A7F 00                         DPLC_33c5_34D: 	dc.b $0
00029A80 02                         DPLC_33c5_34E: 	dc.b $2
00029A81 F4DA                       	dc.b $F4, $DA
00029A83 14EA                       	dc.b $14, $EA
00029A85 00                         DPLC_33c5_353: 	dc.b $0
00029A86 02                         DPLC_33c5_354: 	dc.b $2
00029A87 F4DA                       	dc.b $F4, $DA
00029A89 14EA                       	dc.b $14, $EA
00029A8B 00                         DPLC_33c5_359: 	dc.b $0
00029A8C 00                         DPLC_33c5_35A: 	dc.b $0
00029A8D 00                         DPLC_33c5_35B: 	dc.b $0
00029A8E 02                         DPLC_33c5_35C: 	dc.b $2
00029A8F F4DA                       	dc.b $F4, $DA
00029A91 14EA                       	dc.b $14, $EA
00029A93 00                         DPLC_33c5_361: 	dc.b $0
00029A94 02                         DPLC_33c5_362: 	dc.b $2
00029A95 F4DA                       	dc.b $F4, $DA
00029A97 14EA                       	dc.b $14, $EA
00029A99 00                         DPLC_33c5_367: 	dc.b $0
00029A9A                            	even
00029A9A                            	even
00029A9A                            
00029A9A                            ; ---------------------------------------------------------------------------
00029A9A                            ; Uncompressed graphics	- Sonic
00029A9A                            ; ---------------------------------------------------------------------------
00029A9A                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0003487A                            		even
0003487A                            ; ---------------------------------------------------------------------------
0003487A                            ; Compressed graphics - various
0003487A                            ; ---------------------------------------------------------------------------
0003487A                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0003497E                            		even
0003497E                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
000349B8                            		even
000349B8                            Nem_Shield:	incbin	artnem\shield.bin	; shield
00034B4E                            		even
00034B4E                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
00034C96                            		even
00034C96                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
00034DA0                            		even
00034DA0                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
00034DF2                            		even
00034DF2                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0003503A                            		even
0003503A                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
000351C0                            		even
000351C0                            ; ---------------------------------------------------------------------------
000351C0                            ; Sprite mappings - walls of the special stage
000351C0                            ; ---------------------------------------------------------------------------
000351C0                            Map_SSWalls:
000351C0                            	include "_maps\SSwalls.asm"
000351C0                            ; ---------------------------------------------------------------------------
000351C0                            ; Sprite mappings - walls of the special stage
000351C0                            ; ---------------------------------------------------------------------------
000351C0 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
000351C4 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
000351C8 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
000351CC 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
000351D0 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
000351D4 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
000351D8 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
000351DC 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
000351E0 01                         byte_2C584:	dc.b 1
000351E1 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
000351E6 01                         byte_2C58A:	dc.b 1
000351E7 F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
000351EC 01                         byte_2C590:	dc.b 1
000351ED F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
000351F2 01                         byte_2C596:	dc.b 1
000351F3 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
000351F8 01                         byte_2C59C:	dc.b 1
000351F9 F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
000351FE 01                         byte_2C5A2:	dc.b 1
000351FF F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
00035204 01                         byte_2C5A8:	dc.b 1
00035205 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0003520A 01                         byte_2C5AE:	dc.b 1
0003520B F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
00035210 01                         byte_2C5B4:	dc.b 1
00035211 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
00035216 01                         byte_2C5BA:	dc.b 1
00035217 F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0003521C 01                         byte_2C5C0:	dc.b 1
0003521D F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
00035222 01                         byte_2C5C6:	dc.b 1
00035223 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
00035228 01                         byte_2C5CC:	dc.b 1
00035229 F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0003522E 01                         byte_2C5D2:	dc.b 1
0003522F F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
00035234 01                         byte_2C5D8:	dc.b 1
00035235 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0003523A 01                         byte_2C5DE:	dc.b 1
0003523B F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
00035240                            		even
00035240                            		even
00035240                            ; ---------------------------------------------------------------------------
00035240                            ; Compressed graphics - special stage
00035240                            ; ---------------------------------------------------------------------------
00035240                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
00035B78                            		even
00035B78                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
00035CC6                            		even
00035CC6                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
00037158                            		even
00037158                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
00037458                            		even
00037458                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0003794C                            		even
0003794C                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
00037A3A                            		even
00037A3A                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
00037B0A                            		even
00037B0A                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
00037C00                            		even
00037C00                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
00037C5E                            		even
00037C5E                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
00037CF0                            		even
00037CF0                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
00037DB2                            		even
00037DB2                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
00037E80                            		even
00037E80                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
00037F4C                            		even
00037F4C                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
00038014                            		even
00038014                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
000380DE                            		even
000380DE                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
000381AE                            		even
000381AE                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
000383A2                            		even
000383A2                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0003850A                            		even
0003850A                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
000385BA                            		even
000385BA                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
00038694                            		even
00038694                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
00038718                            		even
00038718                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
00038896                            		even
00038896                            ; ---------------------------------------------------------------------------
00038896                            ; Compressed graphics - GHZ stuff
00038896                            ; ---------------------------------------------------------------------------
00038896                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
000388E0                            		even
000388E0                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
000389FA                            		even
000389FA                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
00038AE6                            		even
00038AE6                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
00038B2E                            		even
00038B2E                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
00038CCC                            		even
00038CCC                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
00038D88                            		even
00038D88                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
00038F9C                            		even
00038F9C                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
000390C8                            		even
000390C8                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
000391F6                            		even
000391F6                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
00039294                            		even
00039294                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
000392F4                            		even
000392F4                            ; ---------------------------------------------------------------------------
000392F4                            ; Compressed graphics - LZ stuff
000392F4                            ; ---------------------------------------------------------------------------
000392F4                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
00039418                            		even
00039418                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00039C0C                            		even
00039C0C                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
00039D8C                            		even
00039D8C                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00039EF6                            		even
00039EF6                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
0003A54C                            		even
0003A54C                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003A602                            		even
0003A602                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
0003A6A4                            		even
0003A6A4                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
0003A800                            		even
0003A800                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003A864                            		even
0003A864                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
0003A9B6                            		even
0003A9B6                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
0003AE98                            		even
0003AE98                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
0003B008                            		even
0003B008                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
0003B2C0                            		even
0003B2C0                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
0003B3F8                            		even
0003B3F8                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003B522                            		even
0003B522                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003B632                            		even
0003B632                            ; ---------------------------------------------------------------------------
0003B632                            ; Compressed graphics - MZ stuff
0003B632                            ; ---------------------------------------------------------------------------
0003B632                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
0003B8C0                            		even
0003B8C0                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
0003B97E                            		even
0003B97E                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003BA36                            		even
0003BA36                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
0003BA8A                            		even
0003BA8A                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
0003BD5C 00                         		even
0003BD5C                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
0003C672                            		even
0003C672                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
0003C7D6                            		even
0003C7D6                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
0003C85E                            		even
0003C85E                            ; ---------------------------------------------------------------------------
0003C85E                            ; Compressed graphics - SLZ stuff
0003C85E                            ; ---------------------------------------------------------------------------
0003C85E                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
0003CA9A                            		even
0003CA9A                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
0003CBE0                            		even
0003CBE0                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
0003CE24                            		even
0003CE24                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
0003CE86                            		even
0003CE86                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
0003CF68                            		even
0003CF68                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
0003D14A                            		even
0003D14A                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
0003D256                            		even
0003D256                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
0003D2FA                            		even
0003D2FA                            ; ---------------------------------------------------------------------------
0003D2FA                            ; Compressed graphics - SYZ stuff
0003D2FA                            ; ---------------------------------------------------------------------------
0003D2FA                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
0003D464                            		even
0003D464                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
0003D4C6                            		even
0003D4C6                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
0003D5A8                            		even
0003D5A8                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003D836                            		even
0003D836                            ; ---------------------------------------------------------------------------
0003D836                            ; Compressed graphics - SBZ stuff
0003D836                            ; ---------------------------------------------------------------------------
0003D836                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
0003D88A                            		even
0003D88A                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003DB26                            		even
0003DB26                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003DD2A                            		even
0003DD2A                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
0003DEC8                            		even
0003DEC8                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
0003E1F8                            		even
0003E1F8                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
0003E3D6                            		even
0003E3D6                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
0003E42E                            		even
0003E42E                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
0003E5F8 00                         		even
0003E5F8                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
0003E6F6                            		even
0003E6F6                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003E882                            		even
0003E882                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
0003E8D2                            		even
0003E8D2                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
0003E92A                            		even
0003E92A                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
0003EA26                            		even
0003EA26                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
0003EB3C                            		even
0003EB3C                            ; ---------------------------------------------------------------------------
0003EB3C                            ; Compressed graphics - enemies
0003EB3C                            ; ---------------------------------------------------------------------------
0003EB3C                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
0003EFAA 00                         		even
0003EFAA                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
0003F154 00                         		even
0003F154                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003F516 00                         		even
0003F516                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
0003F6FE                            		even
0003F6FE                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
0003F8B6 00                         		even
0003F8B6                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
0003FA00                            		even
0003FA00                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003FC8A                            		even
0003FC8A                            Nem_Roller:	incbin	artnem\roller.bin	; roller
000402AE                            		even
000402AE                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
000404A4                            		even
000404A4                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00040AC2                            		even
00040AC2                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
00040EC2 00                         		even
00040EC2                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000411BE                            		even
000411BE                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00041406                            		even
00041406                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
0004169E                            		even
0004169E                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
0004187C                            		even
0004187C                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00041A0A                            		even
00041A0A                            ; ---------------------------------------------------------------------------
00041A0A                            ; Compressed graphics - various
00041A0A                            ; ---------------------------------------------------------------------------
00041A0A                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00041F3A                            		even
00041F3A                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
00042030                            		even
00042030                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00042136                            		even
00042136                            Nem_Ring:	incbin	artnem\rings.bin	; rings
0004222A                            		even
0004222A                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
0004276E                            		even
0004276E                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
00042DD4                            		even
00042DD4                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
00042E84                            		even
00042E84                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
00043016                            		even
00043016                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0004312A                            		even
0004312A                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
000431FC                            		even
000431FC                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
00043678                            		even
00043678                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
00043738                            		even
00043738                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
000438AC                            		even
000438AC                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
00043BAE                            		even
00043BAE                            ; ---------------------------------------------------------------------------
00043BAE                            ; Compressed graphics - continue screen
00043BAE                            ; ---------------------------------------------------------------------------
00043BAE                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
00043E5E                            		even
00043E5E                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
00044098                            		even
00044098                            ; ---------------------------------------------------------------------------
00044098                            ; Compressed graphics - animals
00044098                            ; ---------------------------------------------------------------------------
00044098                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
000441F0                            		even
000441F0                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0004434C                            		even
0004434C                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
000444C8                            		even
000444C8                            Nem_Seal:	incbin	artnem\seal.bin		; seal
000445E4                            		even
000445E4                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0004471A                            		even
0004471A                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
00044854                            		even
00044854                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
000449B0                            		even
000449B0                            ; ---------------------------------------------------------------------------
000449B0                            ; Compressed graphics - primary patterns and block mappings
000449B0                            ; ---------------------------------------------------------------------------
000449B0                            Blk16_GHZ:	incbin	map16\ghz.bin
000452C4                            		even
000452C4                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
00046BD2                            		even
00046BD2                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
00047F52                            		even
00047F52                            Blk256_GHZ:	incbin	map256\ghz.bin
0004A38C                            		even
0004A38C                            Blk16_LZ:	incbin	map16\lz.bin
0004AAC6                            		even
0004AAC6                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
0004CF1A                            		even
0004CF1A                            Blk256_LZ:	incbin	map256\lz.bin
0004F89A                            		even
0004F89A                            Blk16_MZ:	incbin	map16\mz.bin
00050002                            		even
00050002                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0005293E                            		even
0005293E                            Blk256_MZ:	incbin	map256\mz.bin
00054154                            		even
00054154                            Blk16_SLZ:	incbin	map16\slz.bin
0005481E                            		even
0005481E                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
00056772                            		even
00056772                            Blk256_SLZ:	incbin	map256\slz.bin
00056DEC                            		even
00056DEC                            Blk16_SYZ:	incbin	map16\syz.bin
00057A12                            		even
00057A12                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
0005BFA4                            		even
0005BFA4                            Blk256_SYZ:	incbin	map256\syz.bin
0005E000                            		even
0005E000                            Blk16_SBZ:	incbin	map16\sbz.bin
0005EF48                            		even
0005EF48                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0006190C                            		even
0006190C                            Blk256_SBZ:	incbin	map256\sbz.bin
00064402                            		even
00064402                            Blk16_BHZ:	incbin	map16\bhz.bin
00064C90                            		even
00064C90                            Nem_BHZ:	incbin	artnem\8x8bhz.bin	; GHZ primary patterns
00067A8E                            		even
00067A8E                            Blk256_BHZ:	incbin	map256\bhz.bin
000696BC                            		even
000696BC                            ; ---------------------------------------------------------------------------
000696BC                            ; Compressed graphics - bosses and ending sequence
000696BC                            ; ---------------------------------------------------------------------------
000696BC                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
00069ED6 00                         		even
00069ED6                            Nem_Tetoboss:	incbin	artnem\TetoBoss.bin	; boss main patterns
0006A524                            		even
0006A524                            Nem_Peartobomb:	incbin	artnem\peartobomb.bin	; boss main patterns
0006A59E                            		even
0006A59E                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0006A888                            		even
0006A888                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0006B10C                            		even
0006B10C                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0006BE62 00                         		even
0006BE62                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0006C5CA                            		even
0006C5CA                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0006CB4A                            		even
0006CB4A                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0006CC6A                            		even
0006CC6A                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0006CE68                            		even
0006CE68                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
0006E046                            		even
0006E046                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
0006E98A                            		even
0006E98A                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006ED60                            		even
0006ED60                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
0006F2F0                            		even
0006F2F0                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
0006F578                            		even
0006F578                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
0006FB66 00                         		even
0006FB66                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
0006FDEE                            		even
0006FDEE                            		incbin	misc\padding2.bin
0006FEF2                            		even
0006FEF2                            ; ---------------------------------------------------------------------------
0006FEF2                            ; Collision data
0006FEF2                            ; ---------------------------------------------------------------------------
0006FEF2                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
0006FFF2                            		even
0006FFF2                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
00070FF2                            		even
00070FF2                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
00071FF2                            		even
00071FF2                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
000721AA 00                         		even
000721AA                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00072312                            		even
00072312                            Col_MZ:		incbin	collide\mz.bin		; MZ index
000724A2 00                         		even
000724A2                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00072696                            		even
00072696                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
0007289C                            		even
0007289C                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00072B3A                            		even
00072B3A                            Col_BHZ:	incbin	collide\bhz.bin		; GHZ index
00072CC6                            		even
00072CC6                            ; ---------------------------------------------------------------------------
00072CC6                            ; Special layouts
00072CC6                            ; ---------------------------------------------------------------------------
00072CC6                            SS_1:		incbin	sslayout\1.bin
00072F0E                            		even
00072F0E                            SS_2:		incbin	sslayout\2.bin
000732C6                            		even
000732C6                            SS_3:		incbin	sslayout\3.bin
00073622                            		even
00073622                            SS_4:		incbin	sslayout\4.bin
00073AFC                            		even
00073AFC                            SS_5:		incbin	sslayout\5.bin
00073FAC                            		even
00073FAC                            SS_6:		incbin	sslayout\6.bin
0007429E                            		even
0007429E                            ; ---------------------------------------------------------------------------
0007429E                            ; Animated uncompressed graphics
0007429E                            ; ---------------------------------------------------------------------------
0007429E                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
0007449E                            		even
0007449E                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
0007489E                            		even
0007489E                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00074D1E                            		even
00074D1E                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
0007501E                            		even
0007501E                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
0007561E                            		even
0007561E                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
0007591E                            		even
0007591E                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
0007639E                            		even
0007639E                            
0007639E                            ; ---------------------------------------------------------------------------
0007639E                            ; Level	layout index
0007639E                            ; ---------------------------------------------------------------------------
0007639E 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
000763A4 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
000763AA 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
000763B0 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
000763B6 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
000763BC 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
000763C2 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
000763C8 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
000763CE 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
000763D4 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
000763DA 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
000763E0 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
000763E6 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000763EC 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000763F2 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
000763F8 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
000763FE 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00076404 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
0007640A 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00076410 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00076416 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
0007641C 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00076422 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00076428 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
0007642E 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00076434 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
0007643A 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00076440 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00076446 0000 0000 0000             		dc.w Level_BHZ1-Level_Index, Level_BHZbg-Level_Index, byte_68D70-Level_Index
0007644C 0000 0000 0000             		dc.w Level_BHZ2-Level_Index, Level_BHZbg-Level_Index, byte_68E3C-Level_Index
00076452 0000 0000 0000             		dc.w Level_BHZ3-Level_Index, Level_BHZbg-Level_Index, byte_68F84-Level_Index
00076458 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
0007645E                            
0007645E                            Level_GHZ1:	incbin	levels\ghz1.bin
00076550                            		even
00076550 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00076554                            Level_GHZ2:	incbin	levels\ghz2.bin
0007661C                            		even
0007661C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00076620                            Level_GHZ3:	incbin	levels\ghz3.bin
00076742                            		even
00076742                            Level_GHZbg:	incbin	levels\ghzbg.bin
00076764                            		even
00076764 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00076768 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
0007676C                            
0007676C                            Level_LZ1:	incbin	levels\lz1.bin
0007686E                            		even
0007686E                            Level_LZbg:	incbin	levels\lzbg.bin
00076970                            		even
00076970 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00076974                            Level_LZ2:	incbin	levels\lz2.bin
00076A0E                            		even
00076A0E 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00076A12                            Level_LZ3:	incbin	levels\lz3.bin
00076B2C                            		even
00076B2C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00076B30                            Level_SBZ3:	incbin	levels\sbz3.bin
00076BEA                            		even
00076BEA 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
00076BEE                            
00076BEE                            Level_MZ1:	incbin	levels\mz1.bin
00076C8C                            		even
00076C8C                            Level_MZ1bg:	incbin	levels\mz1bg.bin
00076D06                            		even
00076D06                            Level_MZ2:	incbin	levels\mz2.bin
00076DAA                            		even
00076DAA                            Level_MZ2bg:	incbin	levels\mz2bg.bin
00076E3C                            		even
00076E3C 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00076E40                            Level_MZ3:	incbin	levels\mz3.bin
00076F22                            		even
00076F22                            Level_MZ3bg:	incbin	levels\mz3bg.bin
00076FC6 00                         		even
00076FC6 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
00076FCA 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
00076FCE                            
00076FCE                            Level_SLZ1:	incbin	levels\slz1.bin
000770E0                            		even
000770E0                            Level_SLZbg:	incbin	levels\slzbg.bin
000770FA                            		even
000770FA                            Level_SLZ2:	incbin	levels\slz2.bin
000771EA                            		even
000771EA                            Level_SLZ3:	incbin	levels\slz3.bin
00077304                            		even
00077304 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00077308                            
00077308                            Level_SYZ1:	incbin	levels\syz1.bin
000773C4 00                         		even
000773C4                            Level_SYZbg:	incbin	levels\syzbg.bin
000773FE                            		even
000773FE 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00077402                            Level_SYZ2:	incbin	levels\syz2.bin
00077506                            		even
00077506 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
0007750A                            Level_SYZ3:	incbin	levels\syz3.bin
00077664 00                         		even
00077664 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00077668 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
0007766C                            
0007766C                            Level_SBZ1:	incbin	levels\sbz1.bin
0007778E                            		even
0007778E                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
000777CC                            		even
000777CC                            Level_SBZ2:	incbin	levels\sbz2.bin
0007790E                            		even
0007790E                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
00077A78                            		even
00077A78 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
00077A7C 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
00077A80                            Level_End:	incbin	levels\ending.bin
00077AB0 00                         		even
00077AB0 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
00077AB4                            Level_BHZ1:	incbin	levels\bhz1.bin
00077BA6                            		even
00077BA6                            
00077BA6                            Level_BHZ2:	incbin	levels\bhz2.bin
00077C6E                            		even
00077C6E                            
00077C6E                            Level_BHZ3:	incbin	levels\bhz3.bin
00077D90                            		even
00077D90                            Level_BHZbg:	incbin	levels\bhzbg.bin
00077E92                            		even
00077E92                            ; ---------------------------------------------------------------------------
00077E92                            ; Animated uncompressed giant ring graphics
00077E92                            ; ---------------------------------------------------------------------------
00077E92                            Art_BigRing:	incbin	artunc\bigring.bin
00078AD2                            		even
00078AD2                            
00078AD2                            		incbin	misc\padding3.bin
00078B6E                            		even
00078B6E                            
00078B6E                            ; ---------------------------------------------------------------------------
00078B6E                            ; Sprite locations index
00078B6E                            ; ---------------------------------------------------------------------------
00078B6E 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B72 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B76 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B7A 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B7E 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B82 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B86 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B8A 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B8E 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B92 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B96 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B9A 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078B9E 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BA2 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BA6 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BAA 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BAE 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BB2 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BB6 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BBA 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BBE 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BC2 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BC6 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BCA 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BCE 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BD2 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BD6 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BDA 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BDE 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BE2 0000 0000                  		dc.w ObjPos_BHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BE6 0000 0000                  		dc.w ObjPos_BHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BEA 0000 0000                  		dc.w ObjPos_BHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
00078BEE                            ObjPos_LZxpf_Index:
00078BEE 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078BF2 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_LZxpf_Index, ObjPos_LZ2pf2-ObjPos_LZxpf_Index
00078BF6 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_LZxpf_Index, ObjPos_LZ3pf2-ObjPos_LZxpf_Index
00078BFA 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_LZxpf_Index, ObjPos_LZ1pf2-ObjPos_LZxpf_Index
00078BFE                            
00078BFE                            ObjPos_SBZ1pf_Index:
00078BFE 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078C02 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf4-ObjPos_SBZ1pf_Index
00078C06 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf6-ObjPos_SBZ1pf_Index
00078C0A 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_SBZ1pf_Index, ObjPos_SBZ1pf2-ObjPos_SBZ1pf_Index
00078C0E FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
00078C14                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
00079484                            		even
00079484                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
00079754                            		even
00079754                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0007A138                            		even
0007A138                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0007A4E0                            		even
0007A4E0                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0007A816                            		even
0007A816                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0007AD2C                            		even
0007AD2C                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0007B1C4                            		even
0007B1C4                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0007B1F6                            		even
0007B1F6                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0007B228                            		even
0007B228                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0007B25A                            		even
0007B25A                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0007B28C                            		even
0007B28C                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0007B2D6                            		even
0007B2D6                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0007B314                            		even
0007B314                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0007B620                            		even
0007B620                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0007BAE2                            		even
0007BAE2                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0007C06A                            		even
0007C06A                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0007C094                            		even
0007C094                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0007C4FC                            		even
0007C4FC                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0007CADE                            		even
0007CADE                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0007D150                            		even
0007D150                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0007D6BA                            		even
0007D6BA                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
0007DCC0                            		even
0007DCC0                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
0007E3FE                            		even
0007E3FE                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
0007EADC                            		even
0007EADC                            ObjPos_FZ:	incbin	objpos\fz.bin
0007EB24                            		even
0007EB24                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
0007EB56                            		even
0007EB56                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
0007EB88                            		even
0007EB88                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
0007EBBA                            		even
0007EBBA                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007EBEC                            		even
0007EBEC                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007EC1E                            		even
0007EC1E                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
0007EC56                            		even
0007EC56                            ObjPos_End:	incbin	objpos\ending.bin
0007EDB2                            		even
0007EDB2                            ObjPos_BHZ1:	incbin	objpos\bhz1.bin
0007F3C4                            		even
0007F3C4                            ObjPos_BHZ2:	incbin	objpos\bhz2.bin
0007F988                            		even
0007F988                            ObjPos_BHZ3:	incbin	objpos\bhz3.bin
00080042                            		even
00080042 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00080048                            ; ---------------------------------------------------------------------------
00080048                            		incbin	misc\padding4.bin
00080672                            		even
00080672                            
00080672                                            include "MegaPCM.asm"                   ; ++ ADD THIS LINE
00080672                            
00080672                            ; ==============================================================================
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Mega PCM 2.0 - DAC Sound Driver
00080672                            ;
00080672                            ; Documentation, examples and source code are available at:
00080672                            ; - https://github.com/vladikcomper/MegaPCM/tree/2.x
00080672                            ;
00080672                            ; (c) 2012-2024, Vladikcomper
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            ; ==============================================================================
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Constants
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Definitions for sample table
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672 =00000001                  FLAGS_SFX:		equ	$01		; sample is SFX, normal drums cannot interrupt it
00080672 =00000002                  FLAGS_LOOP:		equ	$02		; loop sample indefinitely
00080672                            
00080672 =00000000                  TYPE_NONE:		equ	$00
00080672 =00000050                  TYPE_PCM:		equ	'P'
00080672 =00000054                  TYPE_PCM_TURBO:	equ	'T'
00080672 =00000044                  TYPE_DPCM:		equ	'D'
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Maximum playback rates:
00080672 =00007D00                  TYPE_PCM_TURBO_MAX_RATE:	equ	32000 ; Hz
00080672 =0000620C                  TYPE_PCM_MAX_RATE:			equ	25100 ; Hz
00080672 =00005078                  TYPE_DPCM_MAX_RATE:			equ	20600 ; Hz
00080672                            
00080672                            ; Internal driver's base rates for pitched playback.
00080672                            ; NOTICE: Actual max rates are slightly lower,
00080672                            ; because the highest pitch is 255/256, not 256/256.
00080672 =00006278                  TYPE_PCM_BASE_RATE:			equ	25208 ; Hz
00080672 =000050D3                  TYPE_DPCM_BASE_RATE:		equ	20691 ; Hz
00080672                            
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Return error codes for `MegaPCM_LoadSampleTable`
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672 =00000001                  MPCM_ST_TOO_MANY_SAMPLES:			equ	$01
00080672 =00000002                  MPCM_ST_UNKNOWN_SAMPLE_TYPE:		equ	$02
00080672                            
00080672 =00000010                  MPCM_ST_PITCH_NOT_SET:				equ	$10
00080672                            
00080672 =00000020                  MPCM_ST_WAVE_INVALID_HEADER:		equ	$20
00080672 =00000021                  MPCM_ST_WAVE_BAD_AUDIO_FORMAT:		equ	$21
00080672 =00000022                  MPCM_ST_WAVE_NOT_MONO:				equ	$22
00080672 =00000023                  MPCM_ST_WAVE_NOT_8BIT:				equ	$23
00080672 =00000024                  MPCM_ST_WAVE_BAD_SAMPLE_RATE:		equ	$24
00080672 =00000025                  MPCM_ST_WAVE_MISSING_DATA_CHUNK:	equ	$25
00080672                            
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; System Ports used by Mega PCM
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672 =00A00000                  MPCM_Z80_RAM:		equ		$A00000
00080672 =00A11100                  MPCM_Z80_BUSREQ:	equ		$A11100
00080672 =00A11200                  MPCM_Z80_RESET:		equ		$A11200
00080672                            
00080672 =00A04000                  MPCM_YM2612_A0:		equ		$A04000
00080672 =00A04001                  MPCM_YM2612_D0:		equ		$A04001
00080672 =00A04002                  MPCM_YM2612_A1:		equ		$A04002
00080672 =00A04003                  MPCM_YM2612_D1:		equ		$A04003
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Z80 equates
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672 =00001FC3                  Z_MPCM_DriverReady:	equ $1fc3
00080672 =00001FC2                  Z_MPCM_CommandInput:	equ $1fc2
00080672 =00001FC4                  Z_MPCM_VolumeInput:	equ $1fc4
00080672 =00001FC5                  Z_MPCM_SFXVolumeInput:	equ $1fc5
00080672 =00001FC6                  Z_MPCM_PanInput:	equ $1fc6
00080672 =00001FC7                  Z_MPCM_SFXPanInput:	equ $1fc7
00080672 =00001FDD                  Z_MPCM_LoopId:	equ $1fdd
00080672 =00001FDC                  Z_MPCM_ActiveSamplePitch:	equ $1fdc
00080672 =00001FE2                  Z_MPCM_VBlankActive:	equ $1fe2
00080672 =00001FE3                  Z_MPCM_CalibrationApplied:	equ $1fe3
00080672 =00001FE4                  Z_MPCM_CalibrationScore_ROM:	equ $1fe4
00080672 =00001FE6                  Z_MPCM_CalibrationScore_RAM:	equ $1fe6
00080672 =00001FE8                  Z_MPCM_LastErrorCode:	equ $1fe8
00080672 =00001976                  Z_MPCM_SampleTable:	equ $1976
00080672 =00000001                  Z_MPCM_COMMAND_STOP:	equ $1
00080672 =00000002                  Z_MPCM_COMMAND_PAUSE:	equ $2
00080672 =00000001                  Z_MPCM_LOOP_IDLE:	equ $1
00080672 =00000002                  Z_MPCM_LOOP_PAUSE:	equ $2
00080672 =00000010                  Z_MPCM_LOOP_PCM:	equ $10
00080672 =00000018                  Z_MPCM_LOOP_PCM_TURBO:	equ $18
00080672 =00000020                  Z_MPCM_LOOP_DPCM:	equ $20
00080672 =00000080                  Z_MPCM_LOOP_CALIBRATION:	equ $80
00080672 =00000002                  Z_MPCM_ERROR__BAD_INTERRUPT:	equ $2
00080672 =00000001                  Z_MPCM_ERROR__BAD_SAMPLE_TYPE:	equ $1
00080672 =00000080                  Z_MPCM_ERROR__UNKNOWN_COMMAND:	equ $80
00080672                            
00080672                            ; ==============================================================================
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Macros
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Macro to generate sample record in a sample table
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; ARGUMENTS:
00080672                            ;	type - Sample type (TYPE_PCM, TYPE_DPCM, TYPE_PCM_TURBO or TYPE_NONE)
00080672                            ;	samplePtr - Sample pointer/name (assigned via `incdac` macro)
00080672                            ;	sampleRateHz? - (Optional) Playback rate in Hz, auto-detected for .WAV
00080672                            ;	flags? - (Optional) Additional flags (e.g. FLAGS_SFX or FLAGS_LOOP)
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            dcSample: macro	type, samplePtr, sampleRateHz, flags
00080672                            	if narg>4
00080672                            		inform 2, "Too many arguments. USAGE: dcSample type, samplePtr, sampleRateHz, flags"
00080672                            	endif
00080672                            	dc.b	\type					; $00	- type
00080672                            	if \type=TYPE_PCM
00080672                            		if \sampleRateHz+0>TYPE_PCM_MAX_RATE
00080672                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_PCM only supports sample rates <= \#TYPE_PCM_MAX_RATE Hz"
00080672                            		endif
00080672                            		dc.b	\flags+0								; $01	- flags (optional)
00080672                            		dc.b	(\sampleRateHz+0)*256/TYPE_PCM_BASE_RATE; $02	- pitch (optional for .WAV files)
00080672                            		dc.b	0										; $03	- <RESERVED>
00080672                            		dc.l	\samplePtr								; $04	- start offset
00080672                            		dc.l	\samplePtr\_End							; $08	- end offset
00080672                            	elseif \type=TYPE_PCM_TURBO
00080672                            		if (\sampleRateHz+0<>TYPE_PCM_TURBO_MAX_RATE)&(\sampleRateHz+0<>0)
00080672                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_PCM_TURBO only supports sample rate of \#TYPE_PCM_TURBO_MAX_RATE Hz"
00080672                            		endif
00080672                            		dc.b	\flags+0								; $01	- flags (optional)
00080672                            		dc.b	$FF										; $02	- pitch (optional for .WAV files)
00080672                            		dc.b	0										; $03	- <RESERVED>
00080672                            		dc.l	\samplePtr								; $04	- start offset
00080672                            		dc.l	\samplePtr\_End							; $08	- end offset
00080672                            	elseif \type=TYPE_DPCM
00080672                            		if \sampleRateHz>TYPE_DPCM_MAX_RATE
00080672                            			inform 2, "Invalid sample rate: \sampleRateHz\. TYPE_DPCM only supports sample rates <= \#TYPE_DPCM_MAX_RATE Hz"
00080672                            		endif
00080672                            		dc.b	\flags+0								; $01	- flags (optional)
00080672                            		dc.b	(\sampleRateHz)*256/TYPE_DPCM_BASE_RATE	; $02	- pitch
00080672                            		dc.b	0										; $03	- <RESERVED>
00080672                            		dc.l	\samplePtr								; $04	- start offset
00080672                            		dc.l	\samplePtr\_End							; $08	- end offset
00080672                            	elseif \type=TYPE_NONE
00080672                            		dc.b	0, 0, 0
00080672                            		dc.l	0, 0
00080672                            	else
00080672                            		inform 2, "Unknown sample type. Please use one of: TYPE_PCM, TYPE_DPCM, TYPE_PCM_TURBO, TYPE_NONE"
00080672                            	endif
00080672                            	endm
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Macro to include a sample file
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; ARGUMENTS:
00080672                            ;	name - Name assigned to the sample (label)
00080672                            ;	path - Sample's include path (string)
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            incdac:	macro name, path
00080672                            		even
00080672                            	\name:
00080672                            		incbin	\path
00080672                            	\name\_End:
00080672                            	endm
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Macro to stop Z80 and take over its bus
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; ARGUMENTS:
00080672                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            MPCM_stopZ80:	macro opBusReq
00080672                            	pusho
00080672                            	opt		l-		; make sure "@" marks local labels
00080672                            	if narg=1
00080672                            		move.w	#$100, \opBusReq
00080672                            		@wait\@:
00080672                            			btst	#0, \opBusReq
00080672                            			bne.s	@wait\@
00080672                            	else
00080672                            		move.w	#$100, MPCM_Z80_BUSREQ
00080672                            		@wait\@:
00080672                            			btst	#0, MPCM_Z80_BUSREQ
00080672                            			bne.s	@wait\@
00080672                            	endif
00080672                            	popo
00080672                            	endm
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Macro to start Z80 and release its bus
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; ARGUMENTS:
00080672                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            MPCM_startZ80:	macro opBusReq
00080672                            	if narg=1
00080672                            		move.w	#0, \opBusReq
00080672                            	else
00080672                            		move.w	#0, MPCM_Z80_BUSREQ
00080672                            	endif
00080672                            	endm
00080672                            
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Ensures Mega PCM 2 isn't busy writing to YM (other than DAC output obviously)
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; ARGUMENTS:
00080672                            ;	opBusReq? - (Optional) Custom operand for Z80_BUSREQ
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            MPCM_ensureYMWriteReady:	macro opBusReq
00080672                            	pusho
00080672                            	opt		l-		; make sure "@" marks local labels
00080672                            	@chk_ready\@:
00080672                            		tst.b	(MPCM_Z80_RAM+Z_MPCM_DriverReady).l
00080672                            		bne.s	@ready\@
00080672                            		MPCM_startZ80 \opBusReq
00080672                            		move.w	d0, -(sp)
00080672                            		moveq	#10, d0
00080672                            		dbf		d0, *						; waste 100+ cycles
00080672                            		move.w	(sp)+, d0
00080672                            		MPCM_stopZ80 \opBusReq
00080672                            		bra.s	@chk_ready\@
00080672                            	@ready\@:
00080672                            	popo
00080672                            	endm
00080672                            
00080672                            ; ==============================================================================
00080672                            ; ------------------------------------------------------------------------------
00080672                            ; Mega PCM library blob
00080672                            ; ------------------------------------------------------------------------------
00080672                            
00080672                            MegaPCMLibraryBlob:
00080672                            
00080672 40E7 46FC 2700 2F0B 47F9+  	dc.l	$40E746FC, $27002F0B, $47F900A1, $1100303C, $01003680, $37400100, $41FA0346, $43F900A0
00080692 0000 323C 1975 12D8 51C9+  	dc.l	$0000323C, $197512D8, $51C9FFFC, $72003741, $010041F9, $00A01FC3, $4E714E71, $37400100
000806B2 3681 6016 36BC 0100 0813+  	dc.l	$36816016, $36BC0100, $08130000, $66FA1210, $36BC0000, $0C010052, $670A303C, $0FFF51C8
000806D2 FFFE 60E0 265F 46DF 4E75+  	dc.l	$FFFE60E0, $265F46DF, $4E7548E7, $3C3847F9, $00A11100, $43F900A0, $1976594F, $747E1A18
000806F2 6700 0174 6B00 0160 1818+  	dc.l	$67000174, $6B000160, $18181618, $52482458, $28580C05, $00446700, $00F80C05, $00506708
00080712 0C05 0054 6600 0184 2012+  	dc.l	$0C050054, $66000184, $20120C80, $52494646, $67180C80, $41494646, $67000174, $0C804E49
00080732 5354 6600 00C4 6000 0166+  	dc.l	$53546600, $00C46000, $01660CAA, $57415645, $00086600, $015A45EA, $000C0C92, $666D7420
00080752 6600 014C 0C6A 0100 0008+  	dc.l	$6600014C, $0C6A0100, $00086700, $000C0C6A, $FEFF0008, $6600013C, $0C6A0100, $000A6600
00080772 0136 0C6A 0800 0016 6600+  	dc.l	$01360C6A, $08000016, $66000130, $4A036630, $1EAA000D, $1F6A000C, $00013017, $0C050054
00080792 660C 0C40 7D00 6600 0116+  	dc.l	$660C0C40, $7D006600, $011676FF, $60120C40, $620C6200, $010A48C0, $E18880FC, $62781600
000807B2 B5CC 6400 00FE 1EAA 0007+  	dc.l	$B5CC6400, $00FE1EAA, $00071F6A, $00060001, $1F6A0005, $00021F6A, $00040003, $201745F2
000807D2 0808 0C92 6461 7461 66D6+  	dc.l	$08080C92, $64617461, $66D61EAA, $00071F6A, $00060001, $1F6A0005, $00021F6A, $00040003
000807F2 2017 49F2 0808 504A 300C+  	dc.l	$201749F2, $0808504A, $300C0240, $000198C0, $4A036700, $00B2200A, $D0805240, $E2583E80
00080812 4840 220C D281 5241 E259+  	dc.l	$4840220C, $D2815241, $E2593F41, $00024841, $40E746FC, $270036BC, $01000813, $000066FA
00080832 12C5 12C4 12C3 12C0 12C1+  	dc.l	$12C512C4, $12C312C0, $12C112EF, $000312EF, $000212EF, $000512EF, $000436BC, $000046DF
00080852 51CA FE9C 6040 5348 7000+  	dc.l	$51CAFE9C, $60405348, $700041E8, $FFF4584F, $4CDF1C3C, $4E7540E7, $46FC2700, $36BC0100
00080872 0813 0000 66FA 12C5 12C5+  	dc.l	$08130000, $66FA12C5, $12C512C5, $12C512C5, $12C512C5, $12C512C5, $36BC0000, $46DF41E8
00080892 000B 51CA FE5A 7001 60C0+  	dc.l	$000B51CA, $FE5A7001, $60C07002, $60BC7020, $60B87021, $60B47022, $60B07023, $60AC7024
000808B2 60A8 7025 60A4 7010 60A0+  	dc.l	$60A87025, $60A47010, $60A033FC, $010000A1, $11000839, $000000A1, $110066F6, $13C000A0
000808D2 1FC2 33FC 0000 00A1 1100+  	dc.l	$1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000, $00A11100, $66F613FC
000808F2 0002 00A0 1FC2 33FC 0000+  	dc.l	$000200A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000, $00A11100
00080912 66F6 13FC 0000 00A0 1FC2+  	dc.l	$66F613FC, $000000A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100, $08390000
00080932 00A1 1100 66F6 13FC 0001+  	dc.l	$00A11100, $66F613FC, $000100A0, $1FC233FC, $000000A1, $11004E75, $33FC0100, $00A11100
00080952 0839 0000 00A1 1100 66F6+  	dc.l	$08390000, $00A11100, $66F613C0, $00A01FC4, $33FC0000, $00A11100, $4E7533FC, $010000A1
00080972 1100 0839 0000 00A1 1100+  	dc.l	$11000839, $000000A1, $110066F6, $13C000A0, $1FC533FC, $000000A1, $11004E75, $33FC0100
00080992 00A1 1100 0839 0000 00A1+  	dc.l	$00A11100, $08390000, $00A11100, $66F613C0, $00A01FC6, $33FC0000, $00A11100, $4E7533FC
000809B2 0100 00A1 1100 0839 0000+  	dc.l	$010000A1, $11000839, $000000A1, $110066F6, $13C000A0, $1FC733FC, $000000A1, $11004E75
000809D2 F3ED 56C3 D118 0000 FEFF+  	dc.l	$F3ED56C3, $D1180000, $FEFFC210, $00C90000, $320900E5, $21006077, $0F770F77, $0F770F77
000809F2 0F77 0F77 0F77 75E1 C94D+  	dc.l	$0F770F77, $0F7775E1, $C94D6567, $6150434D, $20762E32, $2E300000, $C33B00F5, $3E0232E8
00080A12 1FF1 C9F3 3E10 32DD 1F21+  	dc.l	$1FF1C9F3, $3E1032DD, $1F214301, $223900ED, $73DE1FDD, $F933F1C1, $E1D131DD, $1FF508CB
00080A32 FCCB 85E5 7AE6 7F57 CB83+  	dc.l	$FCCB85E5, $7AE67F57, $CB83B320, $03051680, $D578B920, $0BDA6919, $CBBCEBED, $52C38700
00080A52 AF95 5F9C 8557 EBE5 C521+  	dc.l	$AF955F9C, $8557EBE5, $C521C41F, $0830012C, $E5ED7BDE, $1FDD21D1, $1F3AD31F, $CFF32AD9
00080A72 1FED 4BD5 1F11 0003 D908+  	dc.l	$1FED4BD5, $1F110003, $D908AF08, $ED4BD11F, $0AE60FC6, $04473ADC, $1FFD6F21, $00031101
00080A92 40D9 FB00 3E00 F3ED A0ED+  	dc.l	$40D9FB00, $3E00F3ED, $A0EDA016, $03E2EE00, $D94E0A12, $08FD8530, $012C087D, $D9FB9392
00080AB2 D2C6 00F5 3E00 0000 0000+  	dc.l	$D2C600F5, $3E000000, $0000F1F3, $18E2FB3A, $0900DDBE, $032025F3, $7BD9BD28, $154E0A12
00080AD2 08FD 8530 012C 08D9 FBC5+  	dc.l	$08FD8530, $012C08D9, $FBC50303, $030303C1, $18E5D9FB, $DDCB0A4E, $C29900C9, $3A09003C
00080AF2 2100 8044 DDBE 0320 04ED+  	dc.l	$21008044, $DDBE0320, $04ED4BD7, $1FD7C3C6, $0021E100, $36C42336, $00C9D900, $030B030B
00080B12 0018 14F5 C506 8E7B D9BD+  	dc.l	$001814F5, $C5068E7B, $D9BD28EE, $4E0A1208, $FD853001, $2C08D93E, $FF32E21F, $E52329E1
00080B32 10E5 7BD9 BD28 0A4E 0A12+  	dc.l	$10E57BD9, $BD280A4E, $0A1208FD, $8530012C, $08D9D9ED, $4BD11F0A, $E60FC604, $47D9007B
00080B52 D9BD 280A 4E0A 1208 FD85+  	dc.l	$D9BD280A, $4E0A1208, $FD853001, $2C08D93A, $DC1FFD6F, $3AC21FB7, $280EF2BF, $01DDCB0A
00080B72 46CA F118 AF32 C21F 32E2+  	dc.l	$46CAF118, $AF32C21F, $32E21F7B, $D9BD280A, $4E0A1208, $FD853001, $2C08D9C1, $F1FBC93D
00080B92 CA69 193D 2005 FD2E 0018+  	dc.l	$CA69193D, $2005FD2E, $0018DD3E, $8032E81F, $18D2F33E, $1832DD1F, $21A00222, $3900ED73
00080BB2 DE1F DDF9 33F1 C1E1 D131+  	dc.l	$DE1FDDF9, $33F1C1E1, $D131DD1F, $F5CBFCCB, $85E57AE6, $7F57CB83, $B3200305, $1680D578
00080BD2 B920 0BDA 6919 CBBC EBED+  	dc.l	$B9200BDA, $6919CBBC, $EBED52C3, $1502AF95, $5F9C8557, $EBE5C5ED, $7BDE1FDD, $21D11F3A
00080BF2 D31F CFF3 1100 032A D91F+  	dc.l	$D31FCFF3, $1100032A, $D91FED4B, $D51FD921, $00031101, $40D93E00, $F3EDA0ED, $A01603E2
00080C12 5602 D97E 122C 7DD9 FB93+  	dc.l	$5602D97E, $122C7DD9, $FB9392D2, $3802E523, $2309E1F3, $18ECFB3A, $0900DDBE, $03201DF3
00080C32 7BD9 BD28 0D7E 122C D9FB+  	dc.l	$7BD9BD28, $0D7E122C, $D9FBE5C5, $09C1E1C3, $5F02D9FB, $DDCB0A4E, $C21F02C9, $3A09003C
00080C52 2100 8044 DDBE 0320 04ED+  	dc.l	$21008044, $DDBE0320, $04ED4BD7, $1FD7C338, $02214C02, $36362336, $02C9D93E, $00C3AD02
00080C72 F5C5 06BF 7BD9 BD28 F17E+  	dc.l	$F5C506BF, $7BD9BD28, $F17E122C, $D93EFF32, $E21F3E00, $C5010000, $C110E900, $7BD9BD28
00080C92 037E 122C D93A C21F B728+  	dc.l	$037E122C, $D93AC21F, $B7280EF2, $E002DDCB, $0A46CAF1, $18AF32C2, $1F32E21F, $C1F1FBC9
00080CB2 3DCA 6919 3D20 06CD 5C18+  	dc.l	$3DCA6919, $3D2006CD, $5C18AF18, $EC3E8032, $E81F18E1, $00000000, $00000000, $00000000
00080CD2 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080CF2 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D12 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D32 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D52 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D72 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080D92 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080DB2 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000, $00000000
00080DD2 0001 0203 0405 0607 0809+  	dc.l	$00010203, $04050607, $08090A0B, $0C0D0E0F, $10111213, $14151617, $18191A1B, $1C1D1E1F
00080DF2 2021 2223 2425 2627 2829+  	dc.l	$20212223, $24252627, $28292A2B, $2C2D2E2F, $30313233, $34353637, $38393A3B, $3C3D3E3F
00080E12 4041 4243 4445 4647 4849+  	dc.l	$40414243, $44454647, $48494A4B, $4C4D4E4F, $50515253, $54555657, $58595A5B, $5C5D5E5F
00080E32 6061 6263 6465 6667 6869+  	dc.l	$60616263, $64656667, $68696A6B, $6C6D6E6F, $70717273, $74757677, $78797A7B, $7C7D7E7F
00080E52 8081 8283 8485 8687 8889+  	dc.l	$80818283, $84858687, $88898A8B, $8C8D8E8F, $90919293, $94959697, $98999A9B, $9C9D9E9F
00080E72 A0A1 A2A3 A4A5 A6A7 A8A9+  	dc.l	$A0A1A2A3, $A4A5A6A7, $A8A9AAAB, $ACADAEAF, $B0B1B2B3, $B4B5B6B7, $B8B9BABB, $BCBDBEBF
00080E92 C0C1 C2C3 C4C5 C6C7 C8C9+  	dc.l	$C0C1C2C3, $C4C5C6C7, $C8C9CACB, $CCCDCECF, $D0D1D2D3, $D4D5D6D7, $D8D9DADB, $DCDDDEDF
00080EB2 E0E1 E2E3 E4E5 E6E7 E8E9+  	dc.l	$E0E1E2E3, $E4E5E6E7, $E8E9EAEB, $ECEDEEEF, $F0F1F2F3, $F4F5F6F7, $F8F9FAFB, $FCFDFEFF
00080ED2 0809 0A0B 0C0D 0E0F 1010+  	dc.l	$08090A0B, $0C0D0E0F, $10101112, $13141516, $1718191A, $1B1C1D1E, $1E1F2021, $22232425
00080EF2 2627 2829 2A2B 2C2C 2D2E+  	dc.l	$26272829, $2A2B2C2C, $2D2E2F30, $31323334, $35363738, $393A3A3B, $3C3D3E3F, $40414243
00080F12 4445 4647 4848 494A 4B4C+  	dc.l	$44454647, $4848494A, $4B4C4D4E, $4F505152, $53545556, $56575859, $5A5B5C5D, $5E5F6061
00080F32 6263 6464 6566 6768 696A+  	dc.l	$62636464, $65666768, $696A6B6C, $6D6E6F70, $71727273, $74757677, $78797A7B, $7C7D7E7F
00080F52 8080 8182 8384 8586 8788+  	dc.l	$80808182, $83848586, $8788898A, $8B8C8D8E, $8E8F9091, $92939495, $96979899, $9A9B9C9C
00080F72 9D9E 9FA0 A1A2 A3A4 A5A6+  	dc.l	$9D9E9FA0, $A1A2A3A4, $A5A6A7A8, $A9AAAAAB, $ACADAEAF, $B0B1B2B3, $B4B5B6B7, $B8B8B9BA
00080F92 BBBC BDBE BFC0 C1C2 C3C4+  	dc.l	$BBBCBDBE, $BFC0C1C2, $C3C4C5C6, $C6C7C8C9, $CACBCCCD, $CECFD0D1, $D2D3D4D4, $D5D6D7D8
00080FB2 D9DA DBDC DDDE DFE0 E1E2+  	dc.l	$D9DADBDC, $DDDEDFE0, $E1E2E2E3, $E4E5E6E7, $E8E9EAEB, $ECEDEEEF, $F0F0F1F2, $F3F4F5F6
00080FD2 1111 1213 1415 1617 1818+  	dc.l	$11111213, $14151617, $1818191A, $1B1C1D1E, $1E1F2021, $22232425, $25262728, $292A2B2B
00080FF2 2C2D 2E2F 3031 3232 3334+  	dc.l	$2C2D2E2F, $30313232, $33343536, $37383839, $3A3B3C3D, $3E3F3F40, $41424344, $45454647
00081012 4849 4A4B 4C4C 4D4E 4F50+  	dc.l	$48494A4B, $4C4C4D4E, $4F505152, $52535455, $56575859, $595A5B5C, $5D5E5F5F, $60616263
00081032 6465 6666 6768 696A 6B6C+  	dc.l	$64656666, $6768696A, $6B6C6C6D, $6E6F7071, $72737374, $75767778, $79797A7B, $7C7D7E7F
00081052 8080 8182 8384 8586 8687+  	dc.l	$80808182, $83848586, $86878889, $8A8B8C8D, $8D8E8F90, $91929393, $94959697, $98999A9A
00081072 9B9C 9D9E 9FA0 A0A1 A2A3+  	dc.l	$9B9C9D9E, $9FA0A0A1, $A2A3A4A5, $A6A7A7A8, $A9AAABAC, $ADADAEAF, $B0B1B2B3, $B4B4B5B6
00081092 B7B8 B9BA BABB BCBD BEBF+  	dc.l	$B7B8B9BA, $BABBBCBD, $BEBFC0C1, $C1C2C3C4, $C5C6C7C7, $C8C9CACB, $CCCDCECE, $CFD0D1D2
000810B2 D3D4 D4D5 D6D7 D8D9 DADB+  	dc.l	$D3D4D4D5, $D6D7D8D9, $DADBDBDC, $DDDEDFE0, $E1E1E2E3, $E4E5E6E7, $E8E8E9EA, $EBECEDEE
000810D2 191A 1B1C 1C1D 1E1F 2020+  	dc.l	$191A1B1C, $1C1D1E1F, $20202122, $23242425, $26272828, $292A2B2C, $2C2D2E2F, $30303132
000810F2 3334 3435 3637 3838 393A+  	dc.l	$33343435, $36373838, $393A3B3C, $3C3D3E3F, $40404142, $43444445, $46474848, $494A4B4C
00081112 4C4D 4E4F 5050 5152 5354+  	dc.l	$4C4D4E4F, $50505152, $53545455, $56575858, $595A5B5C, $5C5D5E5F, $60606162, $63646465
00081132 6667 6868 696A 6B6C 6C6D+  	dc.l	$66676868, $696A6B6C, $6C6D6E6F, $70707172, $73747475, $76777878, $797A7B7C, $7C7D7E7F
00081152 8080 8182 8384 8485 8687+  	dc.l	$80808182, $83848485, $86878888, $898A8B8C, $8C8D8E8F, $90909192, $93949495, $96979898
00081172 999A 9B9C 9C9D 9E9F A0A0+  	dc.l	$999A9B9C, $9C9D9E9F, $A0A0A1A2, $A3A4A4A5, $A6A7A8A8, $A9AAABAC, $ACADAEAF, $B0B0B1B2
00081192 B3B4 B4B5 B6B7 B8B8 B9BA+  	dc.l	$B3B4B4B5, $B6B7B8B8, $B9BABBBC, $BCBDBEBF, $C0C0C1C2, $C3C4C4C5, $C6C7C8C8, $C9CACBCC
000811B2 CCCD CECF D0D0 D1D2 D3D4+  	dc.l	$CCCDCECF, $D0D0D1D2, $D3D4D4D5, $D6D7D8D8, $D9DADBDC, $DCDDDEDF, $E0E0E1E2, $E3E4E4E5
000811D2 2222 2324 2525 2627 2828+  	dc.l	$22222324, $25252627, $2828292A, $2A2B2C2D, $2D2E2F30, $30313233, $33343535, $36373838
000811F2 393A 3B3B 3C3D 3E3E 3F40+  	dc.l	$393A3B3B, $3C3D3E3E, $3F404041, $42434344, $45464647, $4849494A, $4B4B4C4D, $4E4E4F50
00081212 5151 5253 5454 5556 5657+  	dc.l	$51515253, $54545556, $56575859, $595A5B5C, $5C5D5E5F, $5F606161, $62636464, $65666767
00081232 6869 6A6A 6B6C 6C6D 6E6F+  	dc.l	$68696A6A, $6B6C6C6D, $6E6F6F70, $71727273, $74757576, $77777879, $7A7A7B7C, $7D7D7E7F
00081252 8080 8182 8283 8485 8586+  	dc.l	$80808182, $82838485, $85868788, $88898A8B, $8B8C8D8D, $8E8F9090, $91929393, $94959696
00081272 9798 9899 9A9B 9B9C 9D9E+  	dc.l	$97989899, $9A9B9B9C, $9D9E9E9F, $A0A1A1A2, $A3A3A4A5, $A6A6A7A8, $A9A9AAAB, $ACACADAE
00081292 AEAF B0B1 B1B2 B3B4 B4B5+  	dc.l	$AEAFB0B1, $B1B2B3B4, $B4B5B6B7, $B7B8B9B9, $BABBBCBC, $BDBEBFBF, $C0C1C2C2, $C3C4C4C5
000812B2 C6C7 C7C8 C9CA CACB CCCD+  	dc.l	$C6C7C7C8, $C9CACACB, $CCCDCDCE, $CFCFD0D1, $D2D2D3D4, $D5D5D6D7, $D8D8D9DA, $DADBDCDD
000812D2 2A2B 2C2C 2D2E 2E2F 3030+  	dc.l	$2A2B2C2C, $2D2E2E2F, $30303132, $32333434, $35363637, $3838393A, $3A3B3C3C, $3D3E3E3F
000812F2 4040 4142 4243 4444 4546+  	dc.l	$40404142, $42434444, $45464647, $4848494A, $4A4B4C4C, $4D4E4E4F, $50505152, $52535454
00081312 5556 5657 5858 595A 5A5B+  	dc.l	$55565657, $5858595A, $5A5B5C5C, $5D5E5E5F, $60606162, $62636464, $65666667, $6868696A
00081332 6A6B 6C6C 6D6E 6E6F 7070+  	dc.l	$6A6B6C6C, $6D6E6E6F, $70707172, $72737474, $75767677, $7878797A, $7A7B7C7C, $7D7E7E7F
00081352 8080 8182 8283 8484 8586+  	dc.l	$80808182, $82838484, $85868687, $8888898A, $8A8B8C8C, $8D8E8E8F, $90909192, $92939494
00081372 9596 9697 9898 999A 9A9B+  	dc.l	$95969697, $9898999A, $9A9B9C9C, $9D9E9E9F, $A0A0A1A2, $A2A3A4A4, $A5A6A6A7, $A8A8A9AA
00081392 AAAB ACAC ADAE AEAF B0B0+  	dc.l	$AAABACAC, $ADAEAEAF, $B0B0B1B2, $B2B3B4B4, $B5B6B6B7, $B8B8B9BA, $BABBBCBC, $BDBEBEBF
000813B2 C0C0 C1C2 C2C3 C4C4 C5C6+  	dc.l	$C0C0C1C2, $C2C3C4C4, $C5C6C6C7, $C8C8C9CA, $CACBCCCC, $CDCECECF, $D0D0D1D2, $D2D3D4D4
000813D2 3333 3435 3536 3637 3838+  	dc.l	$33333435, $35363637, $38383939, $3A3B3B3C, $3C3D3E3E, $3F3F4041, $41424243, $44444545
000813F2 4647 4748 4849 4A4A 4B4B+  	dc.l	$46474748, $48494A4A, $4B4B4C4D, $4D4E4E4F, $50505151, $52535354, $54555656, $57575859
00081412 595A 5A5B 5C5C 5D5D 5E5F+  	dc.l	$595A5A5B, $5C5C5D5D, $5E5F5F60, $60616262, $63636465, $65666667, $68686969, $6A6B6B6C
00081432 6C6D 6E6E 6F6F 7071 7172+  	dc.l	$6C6D6E6E, $6F6F7071, $71727273, $74747575, $76777778, $78797A7A, $7B7B7C7D, $7D7E7E7F
00081452 8080 8181 8283 8384 8485+  	dc.l	$80808181, $82838384, $84858686, $87878889, $898A8A8B, $8C8C8D8D, $8E8F8F90, $90919292
00081472 9393 9495 9596 9697 9898+  	dc.l	$93939495, $95969697, $98989999, $9A9B9B9C, $9C9D9E9E, $9F9FA0A1, $A1A2A2A3, $A4A4A5A5
00081492 A6A7 A7A8 A8A9 AAAA ABAB+  	dc.l	$A6A7A7A8, $A8A9AAAA, $ABABACAD, $ADAEAEAF, $B0B0B1B1, $B2B3B3B4, $B4B5B6B6, $B7B7B8B9
000814B2 B9BA BABB BCBC BDBD BEBF+  	dc.l	$B9BABABB, $BCBCBDBD, $BEBFBFC0, $C0C1C2C2, $C3C3C4C5, $C5C6C6C7, $C8C8C9C9, $CACBCBCC
000814D2 3B3C 3C3D 3D3E 3E3F 4040+  	dc.l	$3B3C3C3D, $3D3E3E3F, $40404141, $42424343, $44444545, $46464748, $4849494A, $4A4B4B4C
000814F2 4C4D 4D4E 4E4F 5050 5151+  	dc.l	$4C4D4D4E, $4E4F5050, $51515252, $53535454, $55555656, $57585859, $595A5A5B, $5B5C5C5D
00081512 5D5E 5E5F 6060 6161 6262+  	dc.l	$5D5E5E5F, $60606161, $62626363, $64646565, $66666768, $6869696A, $6A6B6B6C, $6C6D6D6E
00081532 6E6F 7070 7171 7272 7373+  	dc.l	$6E6F7070, $71717272, $73737474, $75757676, $77787879, $797A7A7B, $7B7C7C7D, $7D7E7E7F
00081552 8080 8181 8282 8383 8484+  	dc.l	$80808181, $82828383, $84848585, $86868788, $8889898A, $8A8B8B8C, $8C8D8D8E, $8E8F9090
00081572 9191 9292 9393 9494 9595+  	dc.l	$91919292, $93939494, $95959696, $97989899, $999A9A9B, $9B9C9C9D, $9D9E9E9F, $A0A0A1A1
00081592 A2A2 A3A3 A4A4 A5A5 A6A6+  	dc.l	$A2A2A3A3, $A4A4A5A5, $A6A6A7A8, $A8A9A9AA, $AAABABAC, $ACADADAE, $AEAFB0B0, $B1B1B2B2
000815B2 B3B3 B4B4 B5B5 B6B6 B7B8+  	dc.l	$B3B3B4B4, $B5B5B6B6, $B7B8B8B9, $B9BABABB, $BBBCBCBD, $BDBEBEBF, $C0C0C1C1, $C2C2C3C3
000815D2 4444 4545 4646 4747 4848+  	dc.l	$44444545, $46464747, $48484849, $494A4A4B, $4B4C4C4D, $4D4E4E4F, $4F4F5050, $51515252
000815F2 5353 5454 5555 5656 5657+  	dc.l	$53535454, $55555656, $56575758, $5859595A, $5A5B5B5C, $5C5D5D5D, $5E5E5F5F, $60606161
00081612 6262 6363 6464 6465 6566+  	dc.l	$62626363, $64646465, $65666667, $67686869, $696A6A6B, $6B6B6C6C, $6D6D6E6E, $6F6F7070
00081632 7171 7272 7273 7374 7475+  	dc.l	$71717272, $72737374, $74757576, $76777778, $78797979, $7A7A7B7B, $7C7C7D7D, $7E7E7F7F
00081652 8080 8081 8182 8283 8384+  	dc.l	$80808081, $81828283, $83848485, $85868687, $87878888, $89898A8A, $8B8B8C8C, $8D8D8E8E
00081672 8E8F 8F90 9091 9192 9293+  	dc.l	$8E8F8F90, $90919192, $92939394, $94959595, $96969797, $98989999, $9A9A9B9B, $9C9C9C9D
00081692 9D9E 9E9F 9FA0 A0A1 A1A2+  	dc.l	$9D9E9E9F, $9FA0A0A1, $A1A2A2A3, $A3A3A4A4, $A5A5A6A6, $A7A7A8A8, $A9A9AAAA, $AAABABAC
000816B2 ACAD ADAE AEAF AFB0 B0B1+  	dc.l	$ACADADAE, $AEAFAFB0, $B0B1B1B1, $B2B2B3B3, $B4B4B5B5, $B6B6B7B7, $B8B8B8B9, $B9BABABB
000816D2 4C4D 4D4E 4E4E 4F4F 5050+  	dc.l	$4C4D4D4E, $4E4E4F4F, $50505051, $51525252, $53535454, $54555556, $56565757, $58585859
000816F2 595A 5A5A 5B5B 5C5C 5C5D+  	dc.l	$595A5A5A, $5B5B5C5C, $5C5D5D5E, $5E5E5F5F, $60606061, $61626262, $63636464, $64656566
00081712 6666 6767 6868 6869 696A+  	dc.l	$66666767, $68686869, $696A6A6A, $6B6B6C6C, $6C6D6D6E, $6E6E6F6F, $70707071, $71727272
00081732 7373 7474 7475 7576 7676+  	dc.l	$73737474, $74757576, $76767777, $78787879, $797A7A7A, $7B7B7C7C, $7C7D7D7E, $7E7E7F7F
00081752 8080 8081 8182 8282 8383+  	dc.l	$80808081, $81828282, $83838484, $84858586, $86868787, $88888889, $898A8A8A, $8B8B8C8C
00081772 8C8D 8D8E 8E8E 8F8F 9090+  	dc.l	$8C8D8D8E, $8E8E8F8F, $90909091, $91929292, $93939494, $94959596, $96969797, $98989899
00081792 999A 9A9A 9B9B 9C9C 9C9D+  	dc.l	$999A9A9A, $9B9B9C9C, $9C9D9D9E, $9E9E9F9F, $A0A0A0A1, $A1A2A2A2, $A3A3A4A4, $A4A5A5A6
000817B2 A6A6 A7A7 A8A8 A8A9 A9AA+  	dc.l	$A6A6A7A7, $A8A8A8A9, $A9AAAAAA, $ABABACAC, $ACADADAE, $AEAEAFAF, $B0B0B0B1, $B1B2B2B2
000817D2 5555 5656 5657 5757 5858+  	dc.l	$55555656, $56575757, $58585859, $59595A5A, $5A5B5B5B, $5C5C5C5D, $5D5D5E5E, $5E5F5F5F
000817F2 6060 6061 6161 6262 6263+  	dc.l	$60606061, $61616262, $62636363, $64646465, $65656666, $66676767, $68686869, $69696A6A
00081812 6A6B 6B6B 6C6C 6C6D 6D6D+  	dc.l	$6A6B6B6B, $6C6C6C6D, $6D6D6E6E, $6E6F6F6F, $70707071, $71717272, $72737373, $74747475
00081832 7575 7676 7677 7777 7878+  	dc.l	$75757676, $76777777, $78787879, $79797A7A, $7A7B7B7B, $7C7C7C7D, $7D7D7E7E, $7E7F7F7F
00081852 8080 8081 8181 8282 8283+  	dc.l	$80808081, $81818282, $82838383, $84848485, $85858686, $86878787, $88888889, $89898A8A
00081872 8A8B 8B8B 8C8C 8C8D 8D8D+  	dc.l	$8A8B8B8B, $8C8C8C8D, $8D8D8E8E, $8E8F8F8F, $90909091, $91919292, $92939393, $94949495
00081892 9595 9696 9697 9797 9898+  	dc.l	$95959696, $96979797, $98989899, $99999A9A, $9A9B9B9B, $9C9C9C9D, $9D9D9E9E, $9E9F9F9F
000818B2 A0A0 A0A1 A1A1 A2A2 A2A3+  	dc.l	$A0A0A0A1, $A1A1A2A2, $A2A3A3A3, $A4A4A4A5, $A5A5A6A6, $A6A7A7A7, $A8A8A8A9, $A9A9AAAA
000818D2 5D5E 5E5E 5E5F 5F5F 6060+  	dc.l	$5D5E5E5E, $5E5F5F5F, $60606060, $61616161, $62626262, $63636364, $64646465, $65656566
000818F2 6666 6667 6767 6868 6868+  	dc.l	$66666667, $67676868, $68686969, $69696A6A, $6A6A6B6B, $6B6C6C6C, $6C6D6D6D, $6D6E6E6E
00081912 6E6F 6F6F 7070 7070 7171+  	dc.l	$6E6F6F6F, $70707070, $71717171, $72727272, $73737374, $74747475, $75757576, $76767677
00081932 7777 7878 7878 7979 7979+  	dc.l	$77777878, $78787979, $79797A7A, $7A7A7B7B, $7B7C7C7C, $7C7D7D7D, $7D7E7E7E, $7E7F7F7F
00081952 8080 8080 8181 8181 8282+  	dc.l	$80808080, $81818181, $82828282, $83838384, $84848485, $85858586, $86868687, $87878888
00081972 8888 8989 8989 8A8A 8A8A+  	dc.l	$88888989, $89898A8A, $8A8A8B8B, $8B8C8C8C, $8C8D8D8D, $8D8E8E8E, $8E8F8F8F, $90909090
00081992 9191 9191 9292 9292 9393+  	dc.l	$91919191, $92929292, $93939394, $94949495, $95959596, $96969697, $97979898, $98989999
000819B2 9999 9A9A 9A9A 9B9B 9B9C+  	dc.l	$99999A9A, $9A9A9B9B, $9B9C9C9C, $9C9D9D9D, $9D9E9E9E, $9E9F9F9F, $A0A0A0A0, $A1A1A1A1
000819D2 6666 6667 6767 6767 6868+  	dc.l	$66666667, $67676767, $68686868, $68696969, $69696A6A, $6A6A6A6B, $6B6B6B6B, $6C6C6C6C
000819F2 6C6D 6D6D 6D6D 6E6E 6E6E+  	dc.l	$6C6D6D6D, $6D6D6E6E, $6E6E6E6F, $6F6F6F6F, $70707070, $70717171, $71717272, $72727273
00081A12 7373 7373 7474 7474 7475+  	dc.l	$73737373, $74747474, $74757575, $75757676, $76767677, $77777777, $78787878, $78797979
00081A32 7979 7A7A 7A7A 7A7B 7B7B+  	dc.l	$79797A7A, $7A7A7A7B, $7B7B7B7B, $7C7C7C7C, $7C7D7D7D, $7D7D7E7E, $7E7E7E7F, $7F7F7F7F
00081A52 8080 8080 8081 8181 8181+  	dc.l	$80808080, $80818181, $81818282, $82828283, $83838383, $84848484, $84858585, $85858686
00081A72 8686 8687 8787 8787 8888+  	dc.l	$86868687, $87878787, $88888888, $88898989, $89898A8A, $8A8A8A8B, $8B8B8B8B, $8C8C8C8C
00081A92 8C8D 8D8D 8D8D 8E8E 8E8E+  	dc.l	$8C8D8D8D, $8D8D8E8E, $8E8E8E8F, $8F8F8F8F, $90909090, $90919191, $91919292, $92929293
00081AB2 9393 9393 9494 9494 9495+  	dc.l	$93939393, $94949494, $94959595, $95959696, $96969697, $97979797, $98989898, $98999999
00081AD2 6E6F 6F6F 6F6F 6F6F 7070+  	dc.l	$6E6F6F6F, $6F6F6F6F, $70707070, $70707070, $71717171, $71717172, $72727272, $72727273
00081AF2 7373 7373 7373 7474 7474+  	dc.l	$73737373, $73737474, $74747474, $74747575, $75757575, $75767676, $76767676, $76777777
00081B12 7777 7777 7878 7878 7878+  	dc.l	$77777777, $78787878, $78787878, $79797979, $7979797A, $7A7A7A7A, $7A7A7A7B, $7B7B7B7B
00081B32 7B7B 7C7C 7C7C 7C7C 7C7C+  	dc.l	$7B7B7C7C, $7C7C7C7C, $7C7C7D7D, $7D7D7D7D, $7D7E7E7E, $7E7E7E7E, $7E7F7F7F, $7F7F7F7F
00081B52 8080 8080 8080 8080 8181+  	dc.l	$80808080, $80808080, $81818181, $81818182, $82828282, $82828283, $83838383, $83838484
00081B72 8484 8484 8484 8585 8585+  	dc.l	$84848484, $84848585, $85858585, $85868686, $86868686, $86878787, $87878787, $88888888
00081B92 8888 8888 8989 8989 8989+  	dc.l	$88888888, $89898989, $8989898A, $8A8A8A8A, $8A8A8A8B, $8B8B8B8B, $8B8B8C8C, $8C8C8C8C
00081BB2 8C8C 8D8D 8D8D 8D8D 8D8E+  	dc.l	$8C8C8D8D, $8D8D8D8D, $8D8E8E8E, $8E8E8E8E, $8E8F8F8F, $8F8F8F8F, $90909090, $90909090
00081BD2 7777 7777 7777 7777 7878+  	dc.l	$77777777, $77777777, $78787878, $78787878, $78787878, $78787879, $79797979, $79797979
00081BF2 7979 7979 7979 7A7A 7A7A+  	dc.l	$79797979, $79797A7A, $7A7A7A7A, $7A7A7A7A, $7A7A7A7A, $7A7B7B7B, $7B7B7B7B, $7B7B7B7B
00081C12 7B7B 7B7B 7C7C 7C7C 7C7C+  	dc.l	$7B7B7B7B, $7C7C7C7C, $7C7C7C7C, $7C7C7C7C, $7C7C7C7D, $7D7D7D7D, $7D7D7D7D, $7D7D7D7D
00081C32 7D7D 7E7E 7E7E 7E7E 7E7E+  	dc.l	$7D7D7E7E, $7E7E7E7E, $7E7E7E7E, $7E7E7E7E, $7E7F7F7F, $7F7F7F7F, $7F7F7F7F, $7F7F7F7F
00081C52 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808081, $81818181, $81818181, $81818181, $81818282
00081C72 8282 8282 8282 8282 8282+  	dc.l	$82828282, $82828282, $82828282, $82838383, $83838383, $83838383, $83838383, $84848484
00081C92 8484 8484 8484 8484 8484+  	dc.l	$84848484, $84848484, $84848485, $85858585, $85858585, $85858585, $85858686, $86868686
00081CB2 8686 8686 8686 8686 8687+  	dc.l	$86868686, $86868686, $86878787, $87878787, $87878787, $87878787, $88888888, $88888888
00081CD2 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081CF2 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D12 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D32 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D52 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D72 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081D92 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081DB2 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080, $80808080
00081DD2 0000 0000 0000 0000 0000+  	dc.l	$00000000, $00000000, $00000000, $00000000, $01010101, $01010101, $01010101, $01010101
00081DF2 0202 0202 0202 0202 0202+  	dc.l	$02020202, $02020202, $02020202, $02020202, $04040404, $04040404, $04040404, $04040404
00081E12 0808 0808 0808 0808 0808+  	dc.l	$08080808, $08080808, $08080808, $08080808, $10101010, $10101010, $10101010, $10101010
00081E32 2020 2020 2020 2020 2020+  	dc.l	$20202020, $20202020, $20202020, $20202020, $40404040, $40404040, $40404040, $40404040
00081E52 8080 8080 8080 8080 8080+  	dc.l	$80808080, $80808080, $80808080, $80808080, $FFFFFFFF, $FFFFFFFF, $FFFFFFFF, $FFFFFFFF
00081E72 FEFE FEFE FEFE FEFE FEFE+  	dc.l	$FEFEFEFE, $FEFEFEFE, $FEFEFEFE, $FEFEFEFE, $FCFCFCFC, $FCFCFCFC, $FCFCFCFC, $FCFCFCFC
00081E92 F8F8 F8F8 F8F8 F8F8 F8F8+  	dc.l	$F8F8F8F8, $F8F8F8F8, $F8F8F8F8, $F8F8F8F8, $F0F0F0F0, $F0F0F0F0, $F0F0F0F0, $F0F0F0F0
00081EB2 E0E0 E0E0 E0E0 E0E0 E0E0+  	dc.l	$E0E0E0E0, $E0E0E0E0, $E0E0E0E0, $E0E0E0E0, $C0C0C0C0, $C0C0C0C0, $C0C0C0C0, $C0C0C0C0
00081ED2 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081EF2 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F12 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F32 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F52 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F72 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081F92 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081FB2 0001 0204 0810 2040 80FF+  	dc.l	$00010204, $08102040, $80FFFEFC, $F8F0E0C0, $00010204, $08102040, $80FFFEFC, $F8F0E0C0
00081FD2 0000 0000 0000 00D1 C9D5+  	dc.l	$00000000, $000000D1, $C9D511A0, $00B7ED52, $112000ED, $52280FD2, $13167DED, $440F0FE6
00081FF2 0721 0016 6FE9 D1D5 1329+  	dc.l	$07210016, $6FE9D1D5, $132918D4, $F33E2032, $DD1F2140, $17223900, $ED73DE1F, $DDF933F1
00082012 C1E1 D131 DD1F F508 CBFC+  	dc.l	$C1E1D131, $DD1FF508, $CBFCE5CB, $BA1B7AA3, $3C200305, $167F141C, $D5151D78, $B9200BDA
00082032 6919 CBBC EBED 52C3 7216+  	dc.l	$6919CBBC, $EBED52C3, $7216AF95, $5F9C8557, $EB2B242C, $E5C521C4, $1F083001, $2CE5ED7B
00082052 DE1F 3AD3 1FCF F301 0003+  	dc.l	$DE1F3AD3, $1FCFF301, $00032614, $ED5BD91F, $DD2AD51F, $D908AF08, $ED4BD11F, $0AE60FC6
00082072 0447 3ADC 1FFD 6F21 0003+  	dc.l	$04473ADC, $1FFD6F21, $00031101, $40D9FB0D, $3E800200, $1A136F0A, $0C8624F3, $020C8625
00082092 02DD 2D28 1DD9 4E0A 1208+  	dc.l	$02DD2D28, $1DD94E0A, $1208FD85, $30012C08, $7DD9FB91, $90D2B416, $F5F1F5F1, $E509E1F3
000820B2 18E3 DD25 C2C5 16FB 3A09+  	dc.l	$18E3DD25, $C2C516FB, $3A090021, $D41FBE20, $28F379D9, $BD28174E, $0A1208FD, $8530012C
000820D2 08D9 FBF5 F1F5 F1E5 2323+  	dc.l	$08D9FBF5, $F1F5F1E5, $232323E1, $18E3D9FB, $3ADB1FE6, $02C28216, $C93C1100, $80DD2100
000820F2 80BE 2004 DD2A D71F 2614+  	dc.l	$80BE2004, $DD2AD71F, $2614D7C3, $B41621D6, $1636B323, $3616C9D9, $00030B03, $0B001814
00082112 F5C5 0672 79D9 BD28 EE4E+  	dc.l	$F5C50672, $79D9BD28, $EE4E0A12, $08FD8530, $012C08D9, $3EFF32E2, $1FC5C1E5, $2929E100
00082132 10E2 79D9 BD28 0A4E 0A12+  	dc.l	$10E279D9, $BD280A4E, $0A1208FD, $8530012C, $08D9D9ED, $4BD11F0A, $E60FC604, $47D93ADC
00082152 1FFD 6F3A C21F B728 0DF2+  	dc.l	$1FFD6F3A, $C21FB728, $0DF2AE17, $3ADB1F0F, $3028AF32, $C21F79D9, $BD280A4E, $0A1208FD
00082172 8530 012C 08D9 AF32 E21F+  	dc.l	$8530012C, $08D9AF32, $E21FC1F1, $FBC93DCA, $69193D20, $0BFD2E00, $18DC3AC2, $1FC3F118
00082192 3E80 32E8 1F18 CBF3 3E80+  	dc.l	$3E8032E8, $1F18CBF3, $3E8032DD, $1F21DC17, $223900D9, $0E00D9FB, $000018FC, $D921834D
000821B2 CD09 1621 F517 790C D1E6+  	dc.l	$CD091621, $F517790C, $D1E60387, $16005F19, $5E2356EB, $E9FB170B, $181B18D9, $010000ED
000821D2 43E4 1F11 0080 214B 18FB+  	dc.l	$43E41F11, $0080214B, $18FBE9D9, $ED43E41F, $01000011, $0000214B, $18FBE9D9, $ED43E61F
000821F2 6069 ED5B E41F AFED 52FA+  	dc.l	$6069ED5B, $E41FAFED, $52FA3C18, $7BCB2A1F, $CB2A1FCB, $2A1F5FAF, $ED52300E, $CD3101CD
00082212 9102 CD2E 173E 0132 E31F+  	dc.l	$9102CD2E, $173E0132, $E31FC91A, $031A031A, $031A031A, $031A031A, $031A03E9, $F33E0232
00082232 DD1F E52A 3900 22E0 1F21+  	dc.l	$DD1FE52A, $390022E0, $1F217518, $223900E1, $FB000018, $FCE52172, $4DCD0916, $E13AC21F
00082252 B728 23F2 9818 3ADB 1F0F+  	dc.l	$B72823F2, $98183ADB, $1F0F3006, $AF32C21F, $FBC93AC2, $1FC3F118, $3DCA6919, $3D28F13E
00082272 8032 E81F 18E6 E52A E01F+  	dc.l	$8032E81F, $18E6E52A, $E01F2239, $00E13333, $C9F33E01, $32DD1F21, $C2182239, $00FB0000
00082292 18FC 2187 4DCD 0916 3AC2+  	dc.l	$18FC2187, $4DCD0916, $3AC21FB7, $FAF118FB, $C931EA1F, $21000006, $15E510FD, $31C01FCD
000822B2 C717 21C6 1F3E C077 2C77+  	dc.l	$C71721C6, $1F3EC077, $2C773E52, $32C31F18, $C031C01F, $21C21F36, $00CDFF18, $C3B118D6
000822D2 8028 134F 0600 8760 6F29+  	dc.l	$8028134F, $06008760, $6F292909, $DD216D19, $EBDD19C3, $1A19DD21, $C81F21C6, $1FDDCB01
000822F2 4628 012C 4E21 C31F 1100+  	dc.l	$4628012C, $4E21C31F, $11004043, $3E5270EB, $362B2C36, $802C36B6, $2C716836, $2A12CD52
00082312 1921 C31F 1100 403E 5273+  	dc.l	$1921C31F, $1100403E, $5273EB36, $2B2C3600, $12C9DD7E, $00FE50CA, $4300FE54, $CAD201FE
00082332 44CA 2C16 3E01 32E8 1FAF+  	dc.l	$44CA2C16, $3E0132E8, $1FAF32C2, $1F31C01F, $CD4119C3
00082346 B118                       	dc.w	$B118
00082348                            
00082348                            ; ------------------------------------------------------------------------------
00082348                            ; Exported symbols
00082348                            ; ------------------------------------------------------------------------------
00082348                            
00082348 =00080672                  MegaPCM_LoadDriver:	equ	MegaPCMLibraryBlob+$0
00082348 =000806DC                  MegaPCM_LoadSampleTable:	equ	MegaPCMLibraryBlob+$6A
00082348 =000808BC                  MegaPCM_PlaySample:	equ	MegaPCMLibraryBlob+$24A
00082348 =000808DE                  MegaPCM_PausePlayback:	equ	MegaPCMLibraryBlob+$26C
00082348 =00080902                  MegaPCM_UnpausePlayback:	equ	MegaPCMLibraryBlob+$290
00082348 =00080926                  MegaPCM_StopPlayback:	equ	MegaPCMLibraryBlob+$2B4
00082348 =0008094A                  MegaPCM_SetVolume:	equ	MegaPCMLibraryBlob+$2D8
00082348 =0008096C                  MegaPCM_SetSFXVolume:	equ	MegaPCMLibraryBlob+$2FA
00082348 =0008098E                  MegaPCM_SetPan:	equ	MegaPCMLibraryBlob+$31C
00082348 =000809B0                  MegaPCM_SetSFXPan:	equ	MegaPCMLibraryBlob+$33E
00082348 =000809D2                  MegaPCM:	equ	MegaPCMLibraryBlob+$360
00082348 =00082348                  MegaPCM_End:	equ	MegaPCMLibraryBlob+$1CD6
00082348                            
00082348                            
00082348                            ; ------------------------------------------------------------------------------
00082348                            ; MIT License
00082348                            ;
00082348                            ; Copyright (c) 2012-2024 Vladikcomper
00082348                            ; 
00082348                            ; Permission is hereby granted, free of charge, to any person obtaining a copy
00082348                            ; of this software and associated documentation files (the "Software"), to deal
00082348                            ; in the Software without restriction, including without limitation the rights
00082348                            ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
00082348                            ; copies of the Software, and to permit persons to whom the Software is
00082348                            ; furnished to do so, subject to the following conditions:
00082348                            ; 
00082348                            ; The above copyright notice and this permission notice shall be included in all
00082348                            ; copies or substantial portions of the Software.
00082348                            ; 
00082348                            ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
00082348                            ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
00082348                            ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
00082348                            ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
00082348                            ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
00082348                            ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
00082348                            ; SOFTWARE.
00082348                            ; ------------------------------------------------------------------------------
00082348                            ; ------------------------------------------------------------------------------
00082348                                            include "SampleTable.asm"               ; ++ ADD THIS LINE
00082348                            
00082348                            ; ---------------------------------------------------------------
00082348                            SampleTable:
00082348                            	;			type			pointer		Hz
000823F0 FFFF                       	dc.w	-1	; end marker
000823F2                            
000823F2                            ; ---------------------------------------------------------------
000823F2                            	incdac	Kick, "sound/dac/kick.dpcm"
00082744                            	incdac	Snare, "sound/dac/snare.pcm"
00083624                            	incdac	Timpani, "sound/dac/timpani.dpcm"
0008463A                            	incdac	SegaPCM, "sound/dac/sega.wav"
0009E790                            	incdac	BeeBush1, "sound/dac/beebush_smp1.wav"
000ACDC2                            	incdac	BeeBush2, "sound/dac/beebush_smp2.wav"
000C6448                            	even
000C6448                            	even
000C6448                            
000C6448 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
000C644C 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0
000C6450 0000 0000                  Go_MusicIndex:	dc.l MusicIndex-4		; XREF: Sound_Music
000C6454 0000 0000                  Go_MusicIndex80:	dc.l MusicIndex80-4		; XREF: Sound_Music
000C6458 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_SFX
000C645C 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_Music
000C6460 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
000C6464                            ; ---------------------------------------------------------------------------
000C6464                            ; PSG instruments used in music
000C6464                            ; ---------------------------------------------------------------------------
000C6464 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
000C6470 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
000C647C 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
000C6488                            
000C6488 0000 0001 0101 0202 0203+  PSG1:		dc.b    0, 0, 0, 1, 1, 1, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5
000C6498 0505 0606 0607 80                      dc.b    5, 5, 6, 6, 6, 7, $80
000C649F                            
000C649F 0002 0406 0810 80          PSG2:		dc.b    0, 2, 4, 6, 8, $10, $80
000C64A6                            
000C64A6 0000 0101 0202 0303 0404+  PSG3:		dc.b    0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7
000C64B6 80                                     dc.b    $80
000C64B7                            
000C64B7 0000 0203 0404 0505 0506+  PSG4:		dc.b    0, 0, 2, 3, 4, 4, 5, 5, 5, 6, $80
000C64C2                            
000C64C2 0000 0000 0000 0000 0000+  PSG5:		dc.b    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1
000C64D2 0101 0101 0101 0101 0202+              dc.b    1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2
000C64E2 0303 0303 0303 0303 0480               dc.b    3, 3, 3, 3, 3, 3, 3, 3, 4, $80
000C64EC                            
000C64EC 0303 0302 0202 0201 0101+  PSG6:		dc.b    3, 3, 3, 2, 2, 2, 2, 1, 1, 1, 0, 0, 0, 0, $80
000C64FB                            
000C64FB 0000 0000 0000 0101 0101+  PSG7:		dc.b    0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2
000C650B 0303 0304 0404 0505 0506+              dc.b    3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 7, $80
000C6517                            
000C6517 0000 0000 0001 0101 0101+  PSG8:		dc.b    0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2
000C6527 0303 0303 0304 0404 0404+              dc.b    3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6
000C6537 0606 0606 0707 0780                    dc.b    6, 6, 6, 6, 7, 7, 7, $80
000C653F                            
000C653F 0001 0203 0405 0607 0809+  PSG9:		dc.b    0, 1, 2, 3, 4, 5, 6, 7, 8, 9, $A, $B, $C, $D, $E, $F
000C654F 80                                     dc.b    $80
000C6550                            
000C6550 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
000C6558                            ; ---------------------------------------------------------------------------
000C6558                            ; Music	Pointers
000C6558                            ; ---------------------------------------------------------------------------
000C6558                            MusicIndex:	
000C6558 0000 0000                  		dc.l Music9F ; test
000C655C 0000 0000                  		dc.l Music92 ; test
000C6560                            
000C6560                            MusicIndex80:
000C6560 0000 0000 0000 0000        		dc.l Music81, Music82
000C6568 0000 0000 0000 0000        		dc.l Music83, Music84
000C6570 0000 0000 0000 0000        		dc.l Music85, Music86
000C6578 0000 0000 0000 0000        		dc.l Music87, Music88
000C6580 0000 0000 0000 0000        		dc.l Music89, Music8A
000C6588 0000 0000 0000 0000        		dc.l Music8B, Music8C
000C6590 0000 0000 0000 0000        		dc.l Music8D, Music8E
000C6598 0000 0000 0000 0000        		dc.l Music8F, Music90
000C65A0 0000 0000 0000 0000        		dc.l Music91, Music92
000C65A8 0000 0000 0000 0000        		dc.l Music93, Music94
000C65B0 0000 0000 0000 0000        		dc.l Music95, Music96
000C65B8 0000 0000 0000 0000        		dc.l Music97, Music98
000C65C0 0000 0000 0000 0000        		dc.l Music99, Music9A
000C65C8 0000 0000 0000 0000        		dc.l Music9B, Music9C
000C65D0 0000 0000 0000 0000        		dc.l Music9D, Music9E
000C65D8 0000 0000                  		dc.l Music9F
000C65DC                            ; ---------------------------------------------------------------------------
000C65DC                            ; Type of sound	being played ($00 = music; $70 = normal	sound effect)
000C65DC                            ; ---------------------------------------------------------------------------
000C65DC                            SoundTypes:			
000C65DC 9090 9090 9090 9090 9090+  		dc.b     $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $01
000C65EB 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $10
000C65FB 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $20
000C660B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $30
000C661B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $40
000C662B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $50
000C663B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $60
000C664B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $70
000C665B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $80
000C666B 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $90
000C667B 8070 7070 7070 7070 7070+  		dc.b $80,$70,$70,$70,$70,$70,$70,$70,$70,$70,$68,$70,$70,$70,$60,$70	; $A0
000C668B 7060 7060 7070 7070 7070+  		dc.b $70,$60,$70,$60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$7F	; $B0
000C669B 6070 7070 7070 7070 7070+  		dc.b $60,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $C0
000C66AB 7070 7070 7070 7070 7070+  		dc.b $70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70,$70	; $D0
000C66BB 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $E0
000C66CB 9090 9090 9090 9090 9090+  		dc.b $90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90,$90	; $F0
000C66DA                            		even
000C66DA                            
000C66DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C66DA                            
000C66DA                            
000C66DA                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
000C66DA                            ; every 5th frame, update a second time (same technique as most SMPS versions, but more scuffed)
000C66DA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w	; if in an NTSC region(!), branch ; TODO: use the VDP pal value instead
000C66E0 6700                       		beq.s	@main
000C66E2 7000                       		moveq	#0,d0			; PAL song timer "optimization"
000C66E4 3038 FE0E                  		move.w	($FFFFFE0E).w,d0	; TODO: proper timer, this is prone to overflow and cause slight variations
000C66E8 80FC 0005                  		divu.w	#5,d0			;       also divisions are generally slow
000C66EC 4840                       		swap	d0
000C66EE 4A40                       		tst.w	d0
000C66F0 6600                       		bne.s	@main
000C66F2 6100 0000                  		bsr.w	@main
000C66F6                            @main:
000C66F6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000C66FE 4E71                       		nop
000C6700 4E71                       		nop
000C6702 4E71                       		nop
000C6704                            ; loc_71B5A:
000C6704                            @wait:
000C6704 0839 0000 00A1 1100        		btst	#0,($A11100).l
000C670C 66F6                       		bne.s	@wait
000C670E                            
000C670E 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
000C6716 6700                       		beq.s	loc_71B82
000C6718 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000C6720 4E71                       		nop
000C6722 4E71                       		nop
000C6724 4E71                       		nop
000C6726 4E71                       		nop
000C6728 4E71                       		nop
000C672A 60CA                       		bra.s	@main		; if you want really funky sound, use sub_71B4C instead ;)
000C672C                            ; ===========================================================================
000C672C                            
000C672C                            loc_71B82:
000C672C 4DF9 00FF F000             		lea	($FFF000).l,a6
000C6732 422E 000E                  		clr.b	$E(a6)
000C6736 4A2E 0003                  		tst.b	3(a6)		; is music paused?
000C673A 6600 0000                  		bne.w	loc_71E50	; if yes, branch
000C673E 532E 0001                  		subq.b	#1,1(a6)
000C6742 6600                       		bne.s	loc_71B9E
000C6744 4EBA 0000                  		jsr	sub_7260C(pc)
000C6748                            
000C6748                            loc_71B9E:
000C6748 102E 0004                  		move.b	4(a6),d0
000C674C 6700                       		beq.s	loc_71BA8
000C674E 4EBA 0000                  		jsr	sub_72504(pc)
000C6752                            
000C6752                            loc_71BA8:
000C6752 4A2E 0024                  		tst.b	$24(a6)
000C6756 6700                       		beq.s	loc_71BB2
000C6758 4EBA 0000                  		jsr	sub_7267C(pc)
000C675C                            
000C675C                            loc_71BB2:
000C675C 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
000C6760 6700                       		beq.s	loc_71BBC	; if not, branch
000C6762 4EBA 0000                  		jsr	Sound_Play(pc)
000C6766                            
000C6766                            loc_71BBC:
000C6766 4BEE 0040                  		lea	$40(a6),a5
000C676A 4A15                       		tst.b	(a5)
000C676C 6A00                       		bpl.s	loc_71BD4
000C676E 4EBA 0000                  		jsr	sub_71C4E(pc)
000C6772                            
000C6772                            loc_71BD4:
000C6772 422E 0008                  		clr.b	8(a6)
000C6776 7E05                       		moveq	#5,d7
000C6778                            
000C6778                            loc_71BDA:
000C6778 DAFC 0030                  		adda.w	#$30,a5
000C677C 4A15                       		tst.b	(a5)
000C677E 6A00                       		bpl.s	loc_71BE6
000C6780 4EBA 0000                  		jsr	sub_71CCA(pc)
000C6784                            
000C6784                            loc_71BE6:
000C6784 51CF FFF2                  		dbf	d7,loc_71BDA
000C6788                            
000C6788 7E02                       		moveq	#2,d7
000C678A                            
000C678A                            loc_71BEC:
000C678A DAFC 0030                  		adda.w	#$30,a5
000C678E 4A15                       		tst.b	(a5)
000C6790 6A00                       		bpl.s	loc_71BF8
000C6792 4EBA 0000                  		jsr	sub_72850(pc)
000C6796                            
000C6796                            loc_71BF8:
000C6796 51CF FFF2                  		dbf	d7,loc_71BEC
000C679A                            
000C679A 1D7C 0080 000E             		move.b	#$80,$E(a6)
000C67A0 7E02                       		moveq	#2,d7
000C67A2                            
000C67A2                            loc_71C04:
000C67A2 DAFC 0030                  		adda.w	#$30,a5
000C67A6 4A15                       		tst.b	(a5)
000C67A8 6A00                       		bpl.s	loc_71C10
000C67AA 4EBA 0000                  		jsr	sub_71CCA(pc)
000C67AE                            
000C67AE                            loc_71C10:
000C67AE 51CF FFF2                  		dbf	d7,loc_71C04
000C67B2                            
000C67B2 7E02                       		moveq	#2,d7
000C67B4                            
000C67B4                            loc_71C16:
000C67B4 DAFC 0030                  		adda.w	#$30,a5
000C67B8 4A15                       		tst.b	(a5)
000C67BA 6A00                       		bpl.s	loc_71C22
000C67BC 4EBA 0000                  		jsr	sub_72850(pc)
000C67C0                            
000C67C0                            loc_71C22:
000C67C0 51CF FFF2                  		dbf	d7,loc_71C16
000C67C4 1D7C 0040 000E             		move.b	#$40,$E(a6)
000C67CA DAFC 0030                  		adda.w	#$30,a5
000C67CE 4A15                       		tst.b	(a5)
000C67D0 6A00                       		bpl.s	loc_71C38
000C67D2 4EBA 0000                  		jsr	sub_71CCA(pc)
000C67D6                            
000C67D6                            loc_71C38:
000C67D6 DAFC 0030                  		adda.w	#$30,a5
000C67DA 4A15                       		tst.b	(a5)
000C67DC 6A00                       		bpl.s	loc_71C44
000C67DE 4EBA 0000                  		jsr	sub_72850(pc)
000C67E2                            
000C67E2                            loc_71C44:
000C67E2 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000C67EA 4E75                       		rts	
000C67EC                            ; End of function sub_71B4C
000C67EC                            
000C67EC                            
000C67EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C67EC                            
000C67EC                            
000C67EC                            sub_71C4E:				; XREF: sub_71B4C
000C67EC 532D 000E                  		subq.b	#1,$E(a5)
000C67F0 6600                       		bne.s	locret_71CAA
000C67F2 1D7C 0080 0008             		move.b	#$80,8(a6)
000C67F8 286D 0004                  		movea.l	4(a5),a4
000C67FC                            
000C67FC                            loc_71C5E:
000C67FC 7A00                       		moveq	#0,d5
000C67FE 1A1C                       		move.b	(a4)+,d5
000C6800 0C05 00E0                  		cmpi.b	#-$20,d5
000C6804 6500                       		bcs.s	loc_71C6E
000C6806 4EBA 0000                  		jsr	sub_72A5A(pc)
000C680A 60F0                       		bra.s	loc_71C5E
000C680C                            ; ===========================================================================
000C680C                            
000C680C                            loc_71C6E:
000C680C 4A05                       		tst.b	d5
000C680E 6A00                       		bpl.s	loc_71C84
000C6810 1B45 0010                  		move.b	d5,$10(a5)
000C6814 1A1C                       		move.b	(a4)+,d5
000C6816 6A00                       		bpl.s	loc_71C84
000C6818 534C                       		subq.w	#1,a4
000C681A 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000C6820 6000                       		bra.s	loc_71C88
000C6822                            ; ===========================================================================
000C6822                            
000C6822                            loc_71C84:
000C6822 4EBA 0000                  		jsr	sub_71D40(pc)
000C6826                            
000C6826                            loc_71C88:
000C6826 2B4C 0004                  		move.l	a4,4(a5)
000C682A 0815 0002                  		btst	#2,(a5)
000C682E 6600                       		bne.s	locret_71CAA
000C6830 7000                       		moveq	#0,d0
000C6832 102D 0010                  		move.b	$10(a5),d0
000C6836 0C00 0080                  		cmpi.b	#$80,d0
000C683A 6700                       		beq.s	locret_71CAA
000C683C                            		;btst	#3,d0
000C683C                            		;bne.s	loc_71CAC
000C683C                            		;move.b	d0,($A01FFF).l
000C684E 13C0 00A0 1FC2                             move.b  d0, $A00000+Z_MPCM_CommandInput ; ++ send DAC sample to Mega PCM
000C685C                            locret_71CAA:
000C685C 4E75                       		rts	
000C685E                            ; ===========================================================================
000C685E                            ; UNIMPLEMENTED --- MEGAPCM2 GUIDE
000C685E                            ;loc_71CAC:
000C685E                            ;		subi.b	#$88,d0
000C685E                            ;		move.b	byte_71CC4(pc,d0.w),d0
000C685E                            ;		move.b	d0,($A000EA).l
000C685E                            ;		move.b	#$83,($A01FFF).l
000C685E                            ;		rts	
000C685E                            ; End of function sub_71C4E
000C685E                            
000C685E                            ; ===========================================================================
000C685E 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
000C6864                            
000C6864                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6864                            
000C6864                            
000C6864                            sub_71CCA:				; XREF: sub_71B4C
000C6864 532D 000E                  		subq.b	#1,$E(a5)
000C6868 6600                       		bne.s	loc_71CE0
000C686A 0895 0004                  		bclr	#4,(a5)
000C686E 4EBA 0000                  		jsr	sub_71CEC(pc)
000C6872 4EBA 0000                  		jsr	sub_71E18(pc)
000C6876 6000 0000                  		bra.w	loc_726E2
000C687A                            ; ===========================================================================
000C687A                            
000C687A                            loc_71CE0:
000C687A 4EBA 0000                  		jsr	sub_71D9E(pc)
000C687E 4EBA 0000                  		jsr	sub_71DC6(pc)
000C6882 6000 0000                  		bra.w	loc_71E24
000C6886                            ; End of function sub_71CCA
000C6886                            
000C6886                            
000C6886                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6886                            
000C6886                            
000C6886                            sub_71CEC:				; XREF: sub_71CCA
000C6886 286D 0004                  		movea.l	4(a5),a4
000C688A 0895 0001                  		bclr	#1,(a5)
000C688E                            
000C688E                            loc_71CF4:
000C688E 7A00                       		moveq	#0,d5
000C6890 1A1C                       		move.b	(a4)+,d5
000C6892 0C05 00E0                  		cmpi.b	#-$20,d5
000C6896 6500                       		bcs.s	loc_71D04
000C6898 4EBA 0000                  		jsr	sub_72A5A(pc)
000C689C 60F0                       		bra.s	loc_71CF4
000C689E                            ; ===========================================================================
000C689E                            
000C689E                            loc_71D04:
000C689E 4EBA 0000                  		jsr	sub_726FE(pc)
000C68A2 4A05                       		tst.b	d5
000C68A4 6A00                       		bpl.s	loc_71D1A
000C68A6 4EBA 0000                  		jsr	sub_71D22(pc)
000C68AA 1A1C                       		move.b	(a4)+,d5
000C68AC 6A00                       		bpl.s	loc_71D1A
000C68AE 534C                       		subq.w	#1,a4
000C68B0 6000 0000                  		bra.w	sub_71D60
000C68B4                            ; ===========================================================================
000C68B4                            
000C68B4                            loc_71D1A:
000C68B4 4EBA 0000                  		jsr	sub_71D40(pc)
000C68B8 6000 0000                  		bra.w	sub_71D60
000C68BC                            ; End of function sub_71CEC
000C68BC                            
000C68BC                            
000C68BC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C68BC                            
000C68BC                            
000C68BC                            sub_71D22:				; XREF: sub_71CEC
000C68BC 0405 0080                  		subi.b	#$80,d5
000C68C0 6700                       		beq.s	loc_71D58
000C68C2 DA2D 0008                  		add.b	8(a5),d5
000C68C6 0245 007F                  		andi.w	#$7F,d5
000C68CA E34D                       		lsl.w	#1,d5
000C68CC 41FA 0000                  		lea	word_72790(pc),a0
000C68D0 3C30 5000                  		move.w	(a0,d5.w),d6
000C68D4 3B46 0010                  		move.w	d6,$10(a5)
000C68D8 4E75                       		rts	
000C68DA                            ; End of function sub_71D22
000C68DA                            
000C68DA                            
000C68DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C68DA                            
000C68DA                            
000C68DA                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000C68DA 1005                       		move.b	d5,d0
000C68DC 122D 0002                  		move.b	2(a5),d1
000C68E0                            
000C68E0                            loc_71D46:
000C68E0 5301                       		subq.b	#1,d1
000C68E2 6700                       		beq.s	loc_71D4E
000C68E4 D005                       		add.b	d5,d0
000C68E6 60F8                       		bra.s	loc_71D46
000C68E8                            ; ===========================================================================
000C68E8                            
000C68E8                            loc_71D4E:
000C68E8 1B40 000F                  		move.b	d0,$F(a5)
000C68EC 1B40 000E                  		move.b	d0,$E(a5)
000C68F0 4E75                       		rts	
000C68F2                            ; End of function sub_71D40
000C68F2                            
000C68F2                            ; ===========================================================================
000C68F2                            
000C68F2                            loc_71D58:				; XREF: sub_71D22
000C68F2 08D5 0001                  		bset	#1,(a5)
000C68F6 426D 0010                  		clr.w	$10(a5)
000C68FA                            
000C68FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C68FA                            
000C68FA                            
000C68FA                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
000C68FA 2B4C 0004                  		move.l	a4,4(a5)
000C68FE 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
000C6904 0815 0004                  		btst	#4,(a5)
000C6908 6600                       		bne.s	locret_71D9C
000C690A 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
000C6910 422D 000C                  		clr.b	$C(a5)
000C6914 0815 0003                  		btst	#3,(a5)
000C6918 6700                       		beq.s	locret_71D9C
000C691A 206D 0014                  		movea.l	$14(a5),a0
000C691E 1B58 0018                  		move.b	(a0)+,$18(a5)
000C6922 1B58 0019                  		move.b	(a0)+,$19(a5)
000C6926 1B58 001A                  		move.b	(a0)+,$1A(a5)
000C692A 1018                       		move.b	(a0)+,d0
000C692C E208                       		lsr.b	#1,d0
000C692E 1B40 001B                  		move.b	d0,$1B(a5)
000C6932 426D 001C                  		clr.w	$1C(a5)
000C6936                            
000C6936                            locret_71D9C:
000C6936 4E75                       		rts	
000C6938                            ; End of function sub_71D60
000C6938                            
000C6938                            
000C6938                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6938                            
000C6938                            
000C6938                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
000C6938 4A2D 0012                  		tst.b	$12(a5)
000C693C 6700                       		beq.s	locret_71DC4
000C693E 532D 0012                  		subq.b	#1,$12(a5)
000C6942 6600                       		bne.s	locret_71DC4
000C6944 08D5 0001                  		bset	#1,(a5)
000C6948 4A2D 0001                  		tst.b	1(a5)
000C694C 6B00 0000                  		bmi.w	loc_71DBE
000C6950 4EBA 0000                  		jsr	sub_726FE(pc)
000C6954 584F                       		addq.w	#4,sp
000C6956 4E75                       		rts	
000C6958                            ; ===========================================================================
000C6958                            
000C6958                            loc_71DBE:
000C6958 4EBA 0000                  		jsr	sub_729A0(pc)
000C695C 584F                       		addq.w	#4,sp
000C695E                            
000C695E                            locret_71DC4:
000C695E 4E75                       		rts	
000C6960                            ; End of function sub_71D9E
000C6960                            
000C6960                            
000C6960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6960                            
000C6960                            
000C6960                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
000C6960 584F                       		addq.w	#4,sp
000C6962 0815 0003                  		btst	#3,(a5)
000C6966 6700                       		beq.s	locret_71E16
000C6968 4A2D 0018                  		tst.b	$18(a5)
000C696C 6700                       		beq.s	loc_71DDA
000C696E 532D 0018                  		subq.b	#1,$18(a5)
000C6972 4E75                       		rts	
000C6974                            ; ===========================================================================
000C6974                            
000C6974                            loc_71DDA:
000C6974 532D 0019                  		subq.b	#1,$19(a5)
000C6978 6700                       		beq.s	loc_71DE2
000C697A 4E75                       		rts	
000C697C                            ; ===========================================================================
000C697C                            
000C697C                            loc_71DE2:
000C697C 206D 0014                  		movea.l	$14(a5),a0
000C6980 1B68 0001 0019             		move.b	1(a0),$19(a5)
000C6986 4A2D 001B                  		tst.b	$1B(a5)
000C698A 6600                       		bne.s	loc_71DFE
000C698C 1B68 0003 001B             		move.b	3(a0),$1B(a5)
000C6992 442D 001A                  		neg.b	$1A(a5)
000C6996 4E75                       		rts	
000C6998                            ; ===========================================================================
000C6998                            
000C6998                            loc_71DFE:
000C6998 532D 001B                  		subq.b	#1,$1B(a5)
000C699C 1C2D 001A                  		move.b	$1A(a5),d6
000C69A0 4886                       		ext.w	d6
000C69A2 DC6D 001C                  		add.w	$1C(a5),d6
000C69A6 3B46 001C                  		move.w	d6,$1C(a5)
000C69AA DC6D 0010                  		add.w	$10(a5),d6
000C69AE 594F                       		subq.w	#4,sp
000C69B0                            
000C69B0                            locret_71E16:
000C69B0 4E75                       		rts	
000C69B2                            ; End of function sub_71DC6
000C69B2                            
000C69B2                            
000C69B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C69B2                            
000C69B2                            
000C69B2                            sub_71E18:				; XREF: sub_71CCA
000C69B2 0815 0001                  		btst	#1,(a5)
000C69B6 6600                       		bne.s	locret_71E48
000C69B8 3C2D 0010                  		move.w	$10(a5),d6
000C69BC 6700                       		beq.s	loc_71E4A
000C69BE                            
000C69BE                            loc_71E24:				; XREF: sub_71CCA
000C69BE 102D 001E                  		move.b	$1E(a5),d0
000C69C2 4880                       		ext.w	d0
000C69C4 DC40                       		add.w	d0,d6
000C69C6 0815 0002                  		btst	#2,(a5)
000C69CA 6600                       		bne.s	locret_71E48
000C69CC 3206                       		move.w	d6,d1
000C69CE E049                       		lsr.w	#8,d1
000C69D0 103C 00A4                  		move.b	#-$5C,d0
000C69D4 4EBA 0000                  		jsr	sub_72722(pc)
000C69D8 1206                       		move.b	d6,d1
000C69DA 103C 00A0                  		move.b	#-$60,d0
000C69DE 4EBA 0000                  		jsr	sub_72722(pc)
000C69E2                            
000C69E2                            locret_71E48:
000C69E2 4E75                       		rts	
000C69E4                            ; ===========================================================================
000C69E4                            
000C69E4                            loc_71E4A:
000C69E4 08D5 0001                  		bset	#1,(a5)
000C69E8 4E75                       		rts	
000C69EA                            ; End of function sub_71E18
000C69EA                            
000C69EA                            ; ===========================================================================
000C69EA                            
000C69EA                            loc_71E50:				; XREF: sub_71B4C
000C69EA 6B00                       		bmi.s	loc_71E94
000C69EC 0C2E 0002 0003             		cmpi.b	#2,3(a6)
000C69F2 6700 0000                  		beq.w	loc_71EFE
000C69F6 1D7C 0002 0003             		move.b	#2,3(a6)
000C69FC 7602                       		moveq	#2,d3
000C69FE 103C 00B4                  		move.b	#-$4C,d0
000C6A02 7200                       		moveq	#0,d1
000C6A04                            
000C6A04                            loc_71E6A:
000C6A04 4EBA 0000                  		jsr	sub_7272E(pc)
000C6A08 4EBA 0000                  		jsr	sub_72764(pc)
000C6A0C 5200                       		addq.b	#1,d0
000C6A0E 51CB FFF4                  		dbf	d3,loc_71E6A
000C6A12                            
000C6A12 7602                       		moveq	#2,d3
000C6A14 7028                       		moveq	#$28,d0
000C6A16                            
000C6A16                            loc_71E7C:
000C6A16 1203                       		move.b	d3,d1
000C6A18 4EBA 0000                  		jsr	sub_7272E(pc)
000C6A1C 5801                       		addq.b	#4,d1
000C6A1E 4EBA 0000                  		jsr	sub_7272E(pc)
000C6A22 51CB FFF2                  		dbf	d3,loc_71E7C
000C6A26                            
000C6A26 4EBA 0000                  		jsr	sub_729B6(pc)
000C6A2A 6000 FDB6                  		bra.w	loc_71C44
000C6A2E                            ; ===========================================================================
000C6A2E                            
000C6A2E                            loc_71E94:				; XREF: loc_71E50
000C6A2E 422E 0003                  		clr.b	3(a6)
000C6A32 7630                       		moveq	#$30,d3
000C6A34 4BEE 0040                  		lea	$40(a6),a5
000C6A38 7806                       		moveq	#6,d4
000C6A3A                            
000C6A3A                            loc_71EA0:
000C6A3A 0815 0007                  		btst	#7,(a5)
000C6A3E 6700                       		beq.s	loc_71EB8
000C6A40 0815 0002                  		btst	#2,(a5)
000C6A44 6600                       		bne.s	loc_71EB8
000C6A46 103C 00B4                  		move.b	#-$4C,d0
000C6A4A 122D 000A                  		move.b	$A(a5),d1
000C6A4E 4EBA 0000                  		jsr	sub_72722(pc)
000C6A52                            
000C6A52                            loc_71EB8:
000C6A52 DAC3                       		adda.w	d3,a5
000C6A54 51CC FFE4                  		dbf	d4,loc_71EA0
000C6A58                            
000C6A58 4BEE 0220                  		lea	$220(a6),a5
000C6A5C 7802                       		moveq	#2,d4
000C6A5E                            
000C6A5E                            loc_71EC4:
000C6A5E 0815 0007                  		btst	#7,(a5)
000C6A62 6700                       		beq.s	loc_71EDC
000C6A64 0815 0002                  		btst	#2,(a5)
000C6A68 6600                       		bne.s	loc_71EDC
000C6A6A 103C 00B4                  		move.b	#-$4C,d0
000C6A6E 122D 000A                  		move.b	$A(a5),d1
000C6A72 4EBA 0000                  		jsr	sub_72722(pc)
000C6A76                            
000C6A76                            loc_71EDC:
000C6A76 DAC3                       		adda.w	d3,a5
000C6A78 51CC FFE4                  		dbf	d4,loc_71EC4
000C6A7C                            
000C6A7C 4BEE 0340                  		lea	$340(a6),a5
000C6A80 0815 0007                  		btst	#7,(a5)
000C6A84 6700                       		beq.s	loc_71EFE
000C6A86 0815 0002                  		btst	#2,(a5)
000C6A8A 6600                       		bne.s	loc_71EFE
000C6A8C 103C 00B4                  		move.b	#-$4C,d0
000C6A90 122D 000A                  		move.b	$A(a5),d1
000C6A94 4EBA 0000                  		jsr	sub_72722(pc)
000C6A98                            
000C6A98                            loc_71EFE:
000C6A98 6000 FD48                  		bra.w	loc_71C44
000C6A9C                            
000C6A9C                            ; ---------------------------------------------------------------------------
000C6A9C                            ; Subroutine to	play a sound or	music track
000C6A9C                            ; ---------------------------------------------------------------------------
000C6A9C                            
000C6A9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6A9C                            
000C6A9C                            
000C6A9C                            Sound_Play:				; XREF: sub_71B4C
000C6A9C 2079 000C 6448             		movea.l	(Go_SoundTypes).l,a0
000C6AA2 43EE 000A                  		lea	$A(a6),a1	; load music track number
000C6AA6 1616                       		move.b	0(a6),d3
000C6AA8 7802                       		moveq	#2,d4
000C6AAA                            
000C6AAA                            loc_71F12:
000C6AAA 1011                       		move.b	(a1),d0		; move track number to d0
000C6AAC 1200                       		move.b	d0,d1
000C6AAE 4219                       		clr.b	(a1)+
000C6AB0 0400 0081                  		subi.b	#$81,d0
000C6AB4 6500                       		bcs.s	loc_71F3E
000C6AB6                            ; ===========================================================================
000C6AB6                            
000C6AB6                            loc_71F2C:
000C6AB6 1430 0000                  		move.b	(a0,d0.w),d2
000C6ABA B403                       		cmp.b	d3,d2
000C6ABC 6500                       		bcs.s	loc_71F3E
000C6ABE 1602                       		move.b	d2,d3
000C6AC0 1D41 0009                  		move.b	d1,9(a6)	; set music flag
000C6AC4                            
000C6AC4                            loc_71F3E:
000C6AC4 51CC FFE4                  		dbf	d4,loc_71F12
000C6AC8                            
000C6AC8 4A03                       		tst.b	d3
000C6ACA 6B00                       		bmi.s	Sound_ChkValue
000C6ACC 1C83                       		move.b	d3,0(a6)
000C6ACE                            ; End of function Sound_Play
000C6ACE                            
000C6ACE                            
000C6ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C6ACE                            
000C6ACE                            ; no checks if you play something fucked up it's your fault
000C6ACE                            Sound_ChkValue:				; XREF: sub_71B4C
000C6ACE 7E00                       		moveq	#0,d7
000C6AD0 1E2E 0009                  		move.b	9(a6),d7
000C6AD4                            		
000C6AD4 6700 0000                  		beq.w	Sound_E4
000C6AD8 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
000C6ADE 0C07 00A0                  		cmpi.b	#$A0,d7
000C6AE2 6500 0000                  		blo.w	Sound_Music	; music	$81-$9F
000C6AE6                            		
000C6AE6 0C07 00D0                  		cmpi.b	#$D0,d7
000C6AEA 6700 0000                  		beq.w	Sound_D0
000C6AEE 0C07 00E0                  		cmpi.b	#$E0,d7
000C6AF2 6500 0000                  		blo.w	Sound_SFX	; sound	$A0-$CF
000C6AF6                            		
000C6AF6                            		; falls to command
000C6AF6                            ; ===========================================================================
000C6AF6                            
000C6AF6                            Sound_Command				; XREF: Sound_ChkValue
000C6AF6 0407 00E0                  		subi.b	#$E0,d7
000C6AFA E54F                       		lsl.w	#2,d7
000C6AFC 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
000C6B00                            ; ===========================================================================
000C6B00                            
000C6B00                            Sound_ExIndex:
000C6B00 6000 0000                  		bra.w	Sound_E0
000C6B04                            ; ===========================================================================
000C6B04 6000 0000                  		bra.w	Sound_E1
000C6B08                            ; ===========================================================================
000C6B08 6000 0000                  		bra.w	Sound_E2
000C6B0C                            ; ===========================================================================
000C6B0C 6000 0000                  		bra.w	Sound_E3
000C6B10                            ; ===========================================================================
000C6B10 6000 0000                  		bra.w	Sound_E4
000C6B14                            ; ===========================================================================
000C6B14 6000 0000                  		bra.w	Sound_E5
000C6B18                            ; ===========================================================================
000C6B18                            ; ---------------------------------------------------------------------------
000C6B18                            ; Play "Say-gaa" PCM sound
000C6B18                            ; ---------------------------------------------------------------------------
000C6B18                            
000C6B18                            Sound_E1:	
000C6B18                            
000C6B18 708C                                       moveq   #$FFFFFF8C, d0          ; ++ request SEGA PCM sample
000C6B1A 4EF9 0008 08BC                             jmp     MegaPCM_PlaySample      ; ++
000C6B20                            
000C6B20                            Sound_E1_old:               			  
000C6B20 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
000C6B28 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
000C6B30 303C 007F                  		move.w	#127,d0				; delay so the YM doesn't crap itself
000C6B34 51C8 FFFE                  		dbf	d0,*
000C6B38 45F9 0008 463A             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000C6B3E 263C 0001 A156             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
000C6B44 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
000C6B4C                            PlayPCM_Loop:	  
000C6B4C 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000C6B52 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
000C6B56 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
000C6B5A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
000C6B5C 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
000C6B5E 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
000C6B62 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
000C6B68 4EB8 1ABE                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
000C6B6C 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
000C6B72 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
000C6B74 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
000C6B76                            return_PlayPCM: 
000C6B76 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; silence PCM to avoid an awful sounding click
000C6B7E 584F                       		addq.w	#4,sp 
000C6B80 4E75                       		rts
000C6B82                            		
000C6B82                            ; ---------------------------------------------------------------------------
000C6B82                            ; Play you are an idiot pcm sound
000C6B82                            ; since the sfx already crashes the game forever load it here :V
000C6B82                            ; ---------------------------------------------------------------------------
000C6B82                            
000C6B82                            Sound_E5: 
000C6B82 4EB8 1B9A                  		jsr	ClearScreen
000C6B86 13FC 002B 00A0 4000        		move.b	#$2B,($A04000).l		; $A04000 = $2B -> Write to DAC enable
000C6B8E 13FC 0080 00A0 4001        		move.b	#$80,($A04001).l		; enable DAC
000C6B96                            
000C6B96                            		;control port on a5
000C6B96 2ABC 9401 9340             		move.l	#$94000000+((($280>>1)&$FF00)<<8)+$9300+(($280>>1)&$FF),(a5)
000C6B9C 2ABC 96FC 9500             		move.l	#$96000000+((($FFFFF800>>1)&$FF00)<<8)+$9500+(($FFFFF800>>1)&$FF),(a5)
000C6BA2 3ABC 977F                  		move.w	#$9700+(((($FFFFF800>>1)&$FF0000)>>16)&$7F),(a5)
000C6BA6 3ABC 7800                  		move.w	#$4000+($F800&$3FFF),(a5)
000C6BAA 3ABC 0083                  		move.w	#$80+(($F800&$C000)>>14),(a5) ; clear sprites
000C6BAE                            		
000C6BAE 3ABC 8700                  		move.w	#$8700,(a5) ; first colour is bg now
000C6BB2                            		
000C6BB2 2ABC 4000 0000             		move.l	#$40000000,(a5)
000C6BB8 41F9 0002 4EAC             		lea	(Nem_Idiot).l,a0 ;	load idiot sprites
000C6BBE 4EB8 1D18                  		jsr	NemDec
000C6BC2 43F9 00FF 0000             		lea	($FF0000).l,a1
000C6BC8 41F9 0002 4E4E             		lea	(Eni_Idiot).l,a0 ; load mappings for IDIOT
000C6BCE 303C 0000                  		move.w	#0,d0
000C6BD2 4EB8 1FF6                  		jsr	EniDec
000C6BD6 43F9 00FF 0000             		lea	($FF0000).l,a1
000C6BDC 203C 4304 0003             		move.l	#$43040003,d0
000C6BE2 7223                       		moveq	#35,d1
000C6BE4 740D                       		moveq	#13,d2
000C6BE6 4EB8 1CF8                  		jsr	ShowVDPGraphics
000C6BEA 7014                       		moveq	#20,d0
000C6BEC 4EB8 29C4                  		jsr	PalLoad2	; load pallet
000C6BF0                            
000C6BF0                            
000C6BF0 4BF9 00C0 0004             		lea	($C00004).l,a5
000C6BF6 50F8 FE25                  		st.b	($FFFFFE25).w			; start with -1, so the NOT makes it 0
000C6BFA 7600                       		moveq	#0,d3				; make @palett jump to @start when done
000C6BFC 6000                       		bra.s	@palett
000C6BFE                            @start:
000C6BFE 45F9 0000 0000             		lea	(IdiotPCM).l,a2			; Load the idiot PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
000C6C04 263C 0000 0000             		move.l	#IdiotPCM_End-IdiotPCM,d3	; Load the size of the idiot PCM sample into d3 
000C6C0A 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel
000C6C12                            @loop:
000C6C12 44D5                       		move.w	(a5),ccr
000C6C14 6B00                       		bmi.s	@vblank
000C6C16                            
000C6C16 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000C6C1C 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000C6C20 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000C6C24 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
000C6C26 66EA                       		bne.s	@loop				; if not zero, loop
000C6C28 60D4                       		bra.s	@start
000C6C2A                            @vblank:
000C6C2A 0C38 000F FE24             		cmp.b	#15,($FFFFFE24).w
000C6C30 6700                       		beq.s	@palett
000C6C32 5238 FE24                  		addq.b	#1,($FFFFFE24).w
000C6C36                            @loop_vblank:
000C6C36 44D5                       		move.w	(a5),ccr
000C6C38 6AD8                       		bpl.s	@loop
000C6C3A                            
000C6C3A 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
000C6C40 303C 0056                  		move.w	#$58-2,d0			; Write the pitch ($58 in this case) to d0  (-28 from the check before)
000C6C44 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)   (14 cycles)
000C6C48 5383                       		subq.l	#1,d3				; Subtract 1 from the PCM sample size 
000C6C4A 66EA                       		bne.s	@loop_vblank			; if not zero, loop
000C6C4C 60B0                       		bra.s	@start
000C6C4E                            @palett:
000C6C4E 2ABC 9400 9308             		move.l	#$94000000+((($10>>1)&$FF00)<<8)+$9300+(($10>>1)&$FF),(a5) ; len
000C6C54                            
000C6C54 4238 FE24                  		clr.b	($FFFFFE24).w
000C6C58 4638 FE25                  		not.b	($FFFFFE25).w
000C6C5C 6700                       		beq.s	@not_black
000C6C5E 2ABC 96FD 9598             		move.l	#$96000000+((($FFFFFB30>>1)&$FF00)<<8)+$9500+(($FFFFFB30>>1)&$FF),(a5)	; source	
000C6C64 6000                       		bra.s	@merge
000C6C66                            	@not_black:
000C6C66 2ABC 96FD 9590             		move.l	#$96000000+((($FFFFFB20>>1)&$FF00)<<8)+$9500+(($FFFFFB20>>1)&$FF),(a5)	; source
000C6C6C                            	@merge:
000C6C6C 3ABC 977F                  		move.w	#$9700+(((($FFFFFB20>>1)&$FF0000)>>16)&$7F),(a5) ; source
000C6C70 3ABC C000                  		move.w	#$C000+(0&$3FFF),(a5) ; dest
000C6C74 3F3C 0080                  		move.w	#$80+((0&$C000)>>14),-(sp) ;dest
000C6C78 3A9F                       		move.w	(sp)+,(a5)
000C6C7A                            		
000C6C7A 303C 004D                  		move.w	#$58-11,d0				; attempt at removing the little jumps
000C6C7E 51C8 FFFE                  		dbf	d0,*				; (14 cycles)
000C6C82 4A83                       		tst.l	d3
000C6C84 66B0                       		bne.s	@loop_vblank
000C6C86 6000 FF76                  		bra.w	@start
000C6C8A                            ; ===========================================================================
000C6C8A                            ; ---------------------------------------------------------------------------
000C6C8A                            ; Play music track $81-$9F
000C6C8A                            ; ---------------------------------------------------------------------------
000C6C8A                            
000C6C8A                            Sound_Music:				; XREF: Sound_ChkValue
000C6C8A 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
000C6C8E 6600                       		bne.s	loc_72024	; if not, branch
000C6C90 4A2E 0027                  		tst.b	$27(a6)
000C6C94 6600 0000                  		bne.w	loc_721B6
000C6C98 4BEE 0040                  		lea	$40(a6),a5
000C6C9C 7009                       		moveq	#9,d0
000C6C9E                            
000C6C9E                            loc_71FE6:
000C6C9E 0895 0002                  		bclr	#2,(a5)
000C6CA2 DAFC 0030                  		adda.w	#$30,a5
000C6CA6 51C8 FFF6                  		dbf	d0,loc_71FE6
000C6CAA                            
000C6CAA 4BEE 0220                  		lea	$220(a6),a5
000C6CAE 7005                       		moveq	#5,d0
000C6CB0                            
000C6CB0                            loc_71FF8:
000C6CB0 0895 0007                  		bclr	#7,(a5)
000C6CB4 DAFC 0030                  		adda.w	#$30,a5
000C6CB8 51C8 FFF6                  		dbf	d0,loc_71FF8
000C6CBC 4216                       		clr.b	0(a6)
000C6CBE 204E                       		movea.l	a6,a0
000C6CC0 43EE 03A0                  		lea	$3A0(a6),a1
000C6CC4 303C 0087                  		move.w	#$87,d0
000C6CC8                            
000C6CC8                            loc_72012:
000C6CC8 22D8                       		move.l	(a0)+,(a1)+
000C6CCA 51C8 FFFC                  		dbf	d0,loc_72012
000C6CCE                            
000C6CCE 1D7C 0080 0027             		move.b	#$80,$27(a6)
000C6CD4 4216                       		clr.b	0(a6)
000C6CD6 6000                       		bra.s	loc_7202C
000C6CD8                            ; ===========================================================================
000C6CD8                            
000C6CD8                            loc_72024:
000C6CD8 422E 0027                  		clr.b	$27(a6)
000C6CDC 422E 0026                  		clr.b	$26(a6)
000C6CE0                            
000C6CE0                            loc_7202C:
000C6CE0 4EBA 0000                  		jsr	sub_725CA(pc)
000C6CE4 2879 000C 645C             		movea.l	(off_719A0).l,a4
000C6CEA 0C07 0080                  		cmpi.b	#$80,d7
000C6CEE 6500                       		blo.s	@zeroindex
000C6CF0                            		
000C6CF0 0407 0080                  		subi.b	#$80,d7
000C6CF4 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000C6CFA 2879 000C 6454             		movea.l	(Go_MusicIndex80).l,a4
000C6D00 6000                       		bra.s @continue
000C6D02                            	@zeroindex:
000C6D02 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
000C6D08 2879 000C 6450             		movea.l	(Go_MusicIndex).l,a4
000C6D0E                            	@continue:
000C6D0E E54F                       		lsl.w	#2,d7
000C6D10 2874 7000                  		movea.l	(a4,d7.w),a4
000C6D14 7000                       		moveq	#0,d0
000C6D16 3014                       		move.w	(a4),d0
000C6D18 D08C                       		add.l	a4,d0
000C6D1A 2D40 0018                  		move.l	d0,$18(a6)
000C6D1E 102C 0005                  		move.b	5(a4),d0
000C6D22 1D40 0028                  		move.b	d0,$28(a6)
000C6D26 4A2E 002A                  		tst.b	$2A(a6)
000C6D2A 6700                       		beq.s	loc_72068
000C6D2C 102E 0029                  		move.b	$29(a6),d0
000C6D30                            
000C6D30                            loc_72068:
000C6D30 1D40 0002                  		move.b	d0,2(a6)
000C6D34 1D40 0001                  		move.b	d0,1(a6)
000C6D38 7200                       		moveq	#0,d1
000C6D3A 264C                       		movea.l	a4,a3
000C6D3C 5C4C                       		addq.w	#6,a4
000C6D3E 7E00                       		moveq	#0,d7
000C6D40 1E2B 0002                  		move.b	2(a3),d7
000C6D44 6700 0000                  		beq.w	loc_72114
000C6D48 5307                       		subq.b	#1,d7
000C6D4A 123C 00C0                  		move.b	#-$40,d1
000C6D4E 182B 0004                  		move.b	4(a3),d4
000C6D52 7C30                       		moveq	#$30,d6
000C6D54 1A3C 0001                  		move.b	#1,d5
000C6D58 43EE 0040                  		lea	$40(a6),a1
000C6D5C 45FA 0000                  		lea	byte_721BA(pc),a2
000C6D60                            
000C6D60                            loc_72098:
000C6D60 08D1 0007                  		bset	#7,(a1)
000C6D64 135A 0001                  		move.b	(a2)+,1(a1)
000C6D68 1344 0002                  		move.b	d4,2(a1)
000C6D6C 1346 000D                  		move.b	d6,$D(a1)
000C6D70 1341 000A                  		move.b	d1,$A(a1)
000C6D74 1345 000E                  		move.b	d5,$E(a1)
000C6D78 7000                       		moveq	#0,d0
000C6D7A 301C                       		move.w	(a4)+,d0
000C6D7C D08B                       		add.l	a3,d0
000C6D7E 2340 0004                  		move.l	d0,4(a1)
000C6D82 335C 0008                  		move.w	(a4)+,8(a1)
000C6D86 D2C6                       		adda.w	d6,a1
000C6D88 51CF FFD6                  		dbf	d7,loc_72098
000C6D8C 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000C6D92 6600                       		bne.s	loc_720D8
000C6D94 702B                       		moveq	#$2B,d0
000C6D96 7200                       		moveq	#0,d1
000C6D98 4EBA 0000                  		jsr	sub_7272E(pc)
000C6D9C 6000 0000                  		bra.w	loc_72114
000C6DA0                            ; ===========================================================================
000C6DA0                            
000C6DA0                            loc_720D8:
000C6DA0 7028                       		moveq	#$28,d0
000C6DA2 7206                       		moveq	#6,d1
000C6DA4 4EBA 0000                  		jsr	sub_7272E(pc)
000C6DA8 103C 0042                  		move.b	#$42,d0
000C6DAC 727F                       		moveq	#$7F,d1
000C6DAE 4EBA 0000                  		jsr	sub_72764(pc)
000C6DB2 103C 004A                  		move.b	#$4A,d0
000C6DB6 727F                       		moveq	#$7F,d1
000C6DB8 4EBA 0000                  		jsr	sub_72764(pc)
000C6DBC 103C 0046                  		move.b	#$46,d0
000C6DC0 727F                       		moveq	#$7F,d1
000C6DC2 4EBA 0000                  		jsr	sub_72764(pc)
000C6DC6 103C 004E                  		move.b	#$4E,d0
000C6DCA 727F                       		moveq	#$7F,d1
000C6DCC 4EBA 0000                  		jsr	sub_72764(pc)
000C6DD0 103C 00B6                  		move.b	#-$4A,d0
000C6DD4 123C 00C0                  		move.b	#-$40,d1
000C6DD8 4EBA 0000                  		jsr	sub_72764(pc)
000C6DDC                            
000C6DDC                            loc_72114:
000C6DDC 7E00                       		moveq	#0,d7
000C6DDE 1E2B 0003                  		move.b	3(a3),d7
000C6DE2 6700                       		beq.s	loc_72154
000C6DE4 5307                       		subq.b	#1,d7
000C6DE6 43EE 0190                  		lea	$190(a6),a1
000C6DEA 45FA 0000                  		lea	byte_721C2(pc),a2
000C6DEE                            
000C6DEE                            loc_72126:
000C6DEE 08D1 0007                  		bset	#7,(a1)
000C6DF2 135A 0001                  		move.b	(a2)+,1(a1)
000C6DF6 1344 0002                  		move.b	d4,2(a1)
000C6DFA 1346 000D                  		move.b	d6,$D(a1)
000C6DFE 1345 000E                  		move.b	d5,$E(a1)
000C6E02 7000                       		moveq	#0,d0
000C6E04 301C                       		move.w	(a4)+,d0
000C6E06 D08B                       		add.l	a3,d0
000C6E08 2340 0004                  		move.l	d0,4(a1)
000C6E0C 335C 0008                  		move.w	(a4)+,8(a1)
000C6E10 101C                       		move.b	(a4)+,d0
000C6E12 135C 000B                  		move.b	(a4)+,$B(a1)
000C6E16 D2C6                       		adda.w	d6,a1
000C6E18 51CF FFD4                  		dbf	d7,loc_72126
000C6E1C                            
000C6E1C                            loc_72154:
000C6E1C 43EE 0220                  		lea	$220(a6),a1
000C6E20 7E05                       		moveq	#5,d7
000C6E22                            
000C6E22                            loc_7215A:
000C6E22 4A11                       		tst.b	(a1)
000C6E24 6A00 0000                  		bpl.w	loc_7217C
000C6E28 7000                       		moveq	#0,d0
000C6E2A 1029 0001                  		move.b	1(a1),d0
000C6E2E 6B00                       		bmi.s	loc_7216E
000C6E30 5500                       		subq.b	#2,d0
000C6E32 E508                       		lsl.b	#2,d0
000C6E34 6000                       		bra.s	loc_72170
000C6E36                            ; ===========================================================================
000C6E36                            
000C6E36                            loc_7216E:
000C6E36 E608                       		lsr.b	#3,d0
000C6E38                            
000C6E38                            loc_72170:
000C6E38 41FA 0000                  		lea	dword_722CC(pc),a0
000C6E3C 2070 0000                  		movea.l	(a0,d0.w),a0
000C6E40 08D0 0002                  		bset	#2,(a0)
000C6E44                            
000C6E44                            loc_7217C:
000C6E44 D2C6                       		adda.w	d6,a1
000C6E46 51CF FFDA                  		dbf	d7,loc_7215A
000C6E4A                            
000C6E4A 4A6E 0340                  		tst.w	$340(a6)
000C6E4E 6A00                       		bpl.s	loc_7218E
000C6E50 08EE 0002 0100             		bset	#2,$100(a6)
000C6E56                            
000C6E56                            loc_7218E:
000C6E56 4A6E 0370                  		tst.w	$370(a6)
000C6E5A 6A00                       		bpl.s	loc_7219A
000C6E5C 08EE 0002 01F0             		bset	#2,$1F0(a6)
000C6E62                            
000C6E62                            loc_7219A:
000C6E62 4BEE 0070                  		lea	$70(a6),a5
000C6E66 7805                       		moveq	#5,d4
000C6E68                            
000C6E68                            loc_721A0:
000C6E68 4EBA 0000                  		jsr	sub_726FE(pc)
000C6E6C DAC6                       		adda.w	d6,a5
000C6E6E 51CC FFF8                  		dbf	d4,loc_721A0
000C6E72 7802                       		moveq	#2,d4
000C6E74                            
000C6E74                            loc_721AC:
000C6E74 4EBA 0000                  		jsr	sub_729A0(pc)
000C6E78 DAC6                       		adda.w	d6,a5
000C6E7A 51CC FFF8                  		dbf	d4,loc_721AC
000C6E7E                            
000C6E7E                            loc_721B6:
000C6E7E 584F                       		addq.w	#4,sp
000C6E80 4E75                       		rts	
000C6E82                            ; ===========================================================================
000C6E82 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000C6E8A                            		even
000C6E8A 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000C6E8E                            		even
000C6E8E                            ; ===========================================================================
000C6E8E                            ; ---------------------------------------------------------------------------
000C6E8E                            ; Play normal sound effect
000C6E8E                            ; ---------------------------------------------------------------------------
000C6E8E                            
000C6E8E                            Sound_SFX:				; XREF: Sound_ChkValue
000C6E8E 4A2E 0027                  		tst.b	$27(a6)
000C6E92 6600 0000                  		bne.w	loc_722C6
000C6E96 4A2E 0004                  		tst.b	4(a6)
000C6E9A 6600 0000                  		bne.w	loc_722C6
000C6E9E 4A2E 0024                  		tst.b	$24(a6)
000C6EA2 6600 0000                  		bne.w	loc_722C6
000C6EA6 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000C6EAA 6600                       		bne.s	Sound_notB5	; if not, branch
000C6EAC 4A2E 002B                  		tst.b	$2B(a6)
000C6EB0 6600                       		bne.s	loc_721EE
000C6EB2 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000C6EB6                            
000C6EB6                            loc_721EE:
000C6EB6 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000C6EBC                            
000C6EBC                            Sound_notB5:
000C6EBC 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000C6EC0 6600                       		bne.s	Sound_notA7	; if not, branch
000C6EC2 4A2E 002C                  		tst.b	$2C(a6)
000C6EC6 6600 0000                  		bne.w	locret_722C4
000C6ECA 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000C6ED0                            
000C6ED0                            Sound_notA7:
000C6ED0 2079 000C 6458             		movea.l	(Go_SoundIndex).l,a0
000C6ED6 0407 00A0                  		subi.b	#$A0,d7
000C6EDA E54F                       		lsl.w	#2,d7
000C6EDC 2670 7000                  		movea.l	(a0,d7.w),a3
000C6EE0 224B                       		movea.l	a3,a1
000C6EE2 7200                       		moveq	#0,d1
000C6EE4 3219                       		move.w	(a1)+,d1
000C6EE6 D28B                       		add.l	a3,d1
000C6EE8 1A19                       		move.b	(a1)+,d5
000C6EEA 1E19                       		move.b	(a1)+,d7
000C6EEC 5307                       		subq.b	#1,d7
000C6EEE 7C30                       		moveq	#$30,d6
000C6EF0                            
000C6EF0                            loc_72228:
000C6EF0 7600                       		moveq	#0,d3
000C6EF2 1629 0001                  		move.b	1(a1),d3
000C6EF6 1803                       		move.b	d3,d4
000C6EF8 6B00                       		bmi.s	loc_72244
000C6EFA 5543                       		subq.w	#2,d3
000C6EFC E54B                       		lsl.w	#2,d3
000C6EFE 4BFA 0000                  		lea	dword_722CC(pc),a5
000C6F02 2A75 3000                  		movea.l	(a5,d3.w),a5
000C6F06 08D5 0002                  		bset	#2,(a5)
000C6F0A 6000                       		bra.s	loc_7226E
000C6F0C                            ; ===========================================================================
000C6F0C                            
000C6F0C                            loc_72244:
000C6F0C E64B                       		lsr.w	#3,d3
000C6F0E 4BFA 0000                  		lea	dword_722CC(pc),a5
000C6F12 2A75 3000                  		movea.l	(a5,d3.w),a5
000C6F16 08D5 0002                  		bset	#2,(a5)
000C6F1A 0C04 00C0                  		cmpi.b	#$C0,d4
000C6F1E 6600                       		bne.s	loc_7226E
000C6F20 1004                       		move.b	d4,d0
000C6F22 0000 001F                  		ori.b	#$1F,d0
000C6F26 13C0 00C0 0011             		move.b	d0,($C00011).l
000C6F2C 0840 0005                  		bchg	#5,d0
000C6F30 13C0 00C0 0011             		move.b	d0,($C00011).l
000C6F36                            
000C6F36                            loc_7226E:
000C6F36 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
000C6F3A 244D                       		movea.l	a5,a2
000C6F3C 700B                       		moveq	#$B,d0
000C6F3E                            
000C6F3E                            loc_72276:
000C6F3E 429A                       		clr.l	(a2)+
000C6F40 51C8 FFFC                  		dbf	d0,loc_72276
000C6F44                            
000C6F44 3A99                       		move.w	(a1)+,(a5)
000C6F46 1B45 0002                  		move.b	d5,2(a5)
000C6F4A 7000                       		moveq	#0,d0
000C6F4C 3019                       		move.w	(a1)+,d0
000C6F4E D08B                       		add.l	a3,d0
000C6F50 2B40 0004                  		move.l	d0,4(a5)
000C6F54 3B59 0008                  		move.w	(a1)+,8(a5)
000C6F58 1B7C 0001 000E             		move.b	#1,$E(a5)
000C6F5E 1B46 000D                  		move.b	d6,$D(a5)
000C6F62 4A04                       		tst.b	d4
000C6F64 6B00                       		bmi.s	loc_722A8
000C6F66 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000C6F6C 2B41 0020                  		move.l	d1,$20(a5)
000C6F70                            
000C6F70                            loc_722A8:
000C6F70 51CF FF7E                  		dbf	d7,loc_72228
000C6F74                            
000C6F74 4A2E 0250                  		tst.b	$250(a6)
000C6F78 6A00                       		bpl.s	loc_722B8
000C6F7A 08EE 0002 0340             		bset	#2,$340(a6)
000C6F80                            
000C6F80                            loc_722B8:
000C6F80 4A2E 0310                  		tst.b	$310(a6)
000C6F84 6A00                       		bpl.s	locret_722C4
000C6F86 08EE 0002 0370             		bset	#2,$370(a6)
000C6F8C                            
000C6F8C                            locret_722C4:
000C6F8C 4E75                       		rts	
000C6F8E                            ; ===========================================================================
000C6F8E                            
000C6F8E                            loc_722C6:
000C6F8E 4216                       		clr.b	0(a6)
000C6F90 4E75                       		rts	
000C6F92                            ; ===========================================================================
000C6F92 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000C6F96 0000 0000                  		dc.l 0
000C6F9A 00FF F100                  		dc.l $FFF100
000C6F9E 00FF F130                  		dc.l $FFF130
000C6FA2 00FF F190                  		dc.l $FFF190
000C6FA6 00FF F1C0                  		dc.l $FFF1C0
000C6FAA 00FF F1F0                  		dc.l $FFF1F0
000C6FAE 00FF F1F0                  		dc.l $FFF1F0
000C6FB2 00FF F220                  dword_722EC:	dc.l $FFF220
000C6FB6 0000 0000                  		dc.l 0
000C6FBA 00FF F250                  		dc.l $FFF250
000C6FBE 00FF F280                  		dc.l $FFF280
000C6FC2 00FF F2B0                  		dc.l $FFF2B0
000C6FC6 00FF F2E0                  		dc.l $FFF2E0
000C6FCA 00FF F310                  		dc.l $FFF310
000C6FCE 00FF F310                  		dc.l $FFF310
000C6FD2                            ; ===========================================================================
000C6FD2                            ; ---------------------------------------------------------------------------
000C6FD2                            ; Play GHZ waterfall sound
000C6FD2                            ; ---------------------------------------------------------------------------
000C6FD2                            
000C6FD2                            Sound_D0:				; XREF: Sound_ChkValue
000C6FD2 4A2E 0027                  		tst.b	$27(a6)
000C6FD6 6600 0000                  		bne.w	locret_723C6
000C6FDA 4A2E 0004                  		tst.b	4(a6)
000C6FDE 6600 0000                  		bne.w	locret_723C6
000C6FE2 4A2E 0024                  		tst.b	$24(a6)
000C6FE6 6600 0000                  		bne.w	locret_723C6
000C6FEA 2079 000C 644C             		movea.l	(Go_SoundD0).l,a0
000C6FF0 0407 00D0                  		subi.b	#$D0,d7
000C6FF4 E54F                       		lsl.w	#2,d7
000C6FF6 2670 7000                  		movea.l	(a0,d7.w),a3
000C6FFA 224B                       		movea.l	a3,a1
000C6FFC 7000                       		moveq	#0,d0
000C6FFE 3019                       		move.w	(a1)+,d0
000C7000 D08B                       		add.l	a3,d0
000C7002 2D40 0020                  		move.l	d0,$20(a6)
000C7006 1A19                       		move.b	(a1)+,d5
000C7008 1E19                       		move.b	(a1)+,d7
000C700A 5307                       		subq.b	#1,d7
000C700C 7C30                       		moveq	#$30,d6
000C700E                            
000C700E                            loc_72348:
000C700E 1829 0001                  		move.b	1(a1),d4
000C7012 6B00                       		bmi.s	loc_7235A
000C7014 08EE 0002 0100             		bset	#2,$100(a6)
000C701A 4BEE 0340                  		lea	$340(a6),a5
000C701E 6000                       		bra.s	loc_72364
000C7020                            ; ===========================================================================
000C7020                            
000C7020                            loc_7235A:
000C7020 08EE 0002 01F0             		bset	#2,$1F0(a6)
000C7026 4BEE 0370                  		lea	$370(a6),a5
000C702A                            
000C702A                            loc_72364:
000C702A 244D                       		movea.l	a5,a2
000C702C 700B                       		moveq	#$B,d0
000C702E                            
000C702E                            loc_72368:
000C702E 429A                       		clr.l	(a2)+
000C7030 51C8 FFFC                  		dbf	d0,loc_72368
000C7034                            
000C7034 3A99                       		move.w	(a1)+,(a5)
000C7036 1B45 0002                  		move.b	d5,2(a5)
000C703A 7000                       		moveq	#0,d0
000C703C 3019                       		move.w	(a1)+,d0
000C703E D08B                       		add.l	a3,d0
000C7040 2B40 0004                  		move.l	d0,4(a5)
000C7044 3B59 0008                  		move.w	(a1)+,8(a5)
000C7048 1B7C 0001 000E             		move.b	#1,$E(a5)
000C704E 1B46 000D                  		move.b	d6,$D(a5)
000C7052 4A04                       		tst.b	d4
000C7054 6B00                       		bmi.s	loc_72396
000C7056 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
000C705C                            
000C705C                            loc_72396:
000C705C 51CF FFB0                  		dbf	d7,loc_72348
000C7060                            
000C7060 4A2E 0250                  		tst.b	$250(a6)
000C7064 6A00                       		bpl.s	loc_723A6
000C7066 08EE 0002 0340             		bset	#2,$340(a6)
000C706C                            
000C706C                            loc_723A6:
000C706C 4A2E 0310                  		tst.b	$310(a6)
000C7070 6A00                       		bpl.s	locret_723C6
000C7072 08EE 0002 0370             		bset	#2,$370(a6)
000C7078 0004 001F                  		ori.b	#$1F,d4
000C707C 13C4 00C0 0011             		move.b	d4,($C00011).l
000C7082 0844 0005                  		bchg	#5,d4
000C7086 13C4 00C0 0011             		move.b	d4,($C00011).l
000C708C                            
000C708C                            locret_723C6:
000C708C 4E75                       		rts	
000C708E                            ; End of function Sound_ChkValue
000C708E                            
000C708E                            ; ===========================================================================
000C708E 00FF F100                  		dc.l $FFF100
000C7092 00FF F1F0                  		dc.l $FFF1F0
000C7096 00FF F250                  		dc.l $FFF250
000C709A 00FF F310                  		dc.l $FFF310
000C709E 00FF F340                  		dc.l $FFF340
000C70A2 00FF F370                  		dc.l $FFF370
000C70A6                            
000C70A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C70A6                            
000C70A6                            
000C70A6                            Snd_FadeOut1:				; XREF: Sound_E0
000C70A6 4216                       		clr.b	0(a6)
000C70A8 4BEE 0220                  		lea	$220(a6),a5
000C70AC 7E05                       		moveq	#5,d7
000C70AE                            
000C70AE                            loc_723EA:
000C70AE 4A15                       		tst.b	(a5)
000C70B0 6A00 0000                  		bpl.w	loc_72472
000C70B4 0895 0007                  		bclr	#7,(a5)
000C70B8 7600                       		moveq	#0,d3
000C70BA 162D 0001                  		move.b	1(a5),d3
000C70BE 6B00                       		bmi.s	loc_7243C
000C70C0 4EBA 0000                  		jsr	sub_726FE(pc)
000C70C4 0C03 0004                  		cmpi.b	#4,d3
000C70C8 6600                       		bne.s	loc_72416
000C70CA 4A2E 0340                  		tst.b	$340(a6)
000C70CE 6A00                       		bpl.s	loc_72416
000C70D0 4BEE 0340                  		lea	$340(a6),a5
000C70D4 226E 0020                  		movea.l	$20(a6),a1
000C70D8 6000                       		bra.s	loc_72428
000C70DA                            ; ===========================================================================
000C70DA                            
000C70DA                            loc_72416:
000C70DA 5503                       		subq.b	#2,d3
000C70DC E50B                       		lsl.b	#2,d3
000C70DE 41FA FEB2                  		lea	dword_722CC(pc),a0
000C70E2 264D                       		movea.l	a5,a3
000C70E4 2A70 3000                  		movea.l	(a0,d3.w),a5
000C70E8 226E 0018                  		movea.l	$18(a6),a1
000C70EC                            
000C70EC                            loc_72428:
000C70EC 0895 0002                  		bclr	#2,(a5)
000C70F0 08D5 0001                  		bset	#1,(a5)
000C70F4 102D 000B                  		move.b	$B(a5),d0
000C70F8 4EBA 0000                  		jsr	sub_72C4E(pc)
000C70FC 2A4B                       		movea.l	a3,a5
000C70FE 6000                       		bra.s	loc_72472
000C7100                            ; ===========================================================================
000C7100                            
000C7100                            loc_7243C:
000C7100 4EBA 0000                  		jsr	sub_729A0(pc)
000C7104 41EE 0370                  		lea	$370(a6),a0
000C7108 0C03 00E0                  		cmpi.b	#$E0,d3
000C710C 6700                       		beq.s	loc_7245A
000C710E 0C03 00C0                  		cmpi.b	#$C0,d3
000C7112 6700                       		beq.s	loc_7245A
000C7114 E60B                       		lsr.b	#3,d3
000C7116 41FA FE7A                  		lea	dword_722CC(pc),a0
000C711A 2070 3000                  		movea.l	(a0,d3.w),a0
000C711E                            
000C711E                            loc_7245A:
000C711E 0890 0002                  		bclr	#2,(a0)
000C7122 08D0 0001                  		bset	#1,(a0)
000C7126 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000C712C 6600                       		bne.s	loc_72472
000C712E 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000C7136                            
000C7136                            loc_72472:
000C7136 DAFC 0030                  		adda.w	#$30,a5
000C713A 51CF FF72                  		dbf	d7,loc_723EA
000C713E                            
000C713E 4E75                       		rts	
000C7140                            ; End of function Snd_FadeOut1
000C7140                            
000C7140                            
000C7140                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7140                            
000C7140                            
000C7140                            Snd_FadeOut2:				; XREF: Sound_E0
000C7140 4BEE 0340                  		lea	$340(a6),a5
000C7144 4A15                       		tst.b	(a5)
000C7146 6A00                       		bpl.s	loc_724AE
000C7148 0895 0007                  		bclr	#7,(a5)
000C714C 0815 0002                  		btst	#2,(a5)
000C7150 6600                       		bne.s	loc_724AE
000C7152 4EBA 0000                  		jsr	loc_7270A(pc)
000C7156 4BEE 0100                  		lea	$100(a6),a5
000C715A 0895 0002                  		bclr	#2,(a5)
000C715E 08D5 0001                  		bset	#1,(a5)
000C7162 4A15                       		tst.b	(a5)
000C7164 6A00                       		bpl.s	loc_724AE
000C7166 226E 0018                  		movea.l	$18(a6),a1
000C716A 102D 000B                  		move.b	$B(a5),d0
000C716E 4EBA 0000                  		jsr	sub_72C4E(pc)
000C7172                            
000C7172                            loc_724AE:
000C7172 4BEE 0370                  		lea	$370(a6),a5
000C7176 4A15                       		tst.b	(a5)
000C7178 6A00                       		bpl.s	locret_724E4
000C717A 0895 0007                  		bclr	#7,(a5)
000C717E 0815 0002                  		btst	#2,(a5)
000C7182 6600                       		bne.s	locret_724E4
000C7184 4EBA 0000                  		jsr	loc_729A6(pc)
000C7188 4BEE 01F0                  		lea	$1F0(a6),a5
000C718C 0895 0002                  		bclr	#2,(a5)
000C7190 08D5 0001                  		bset	#1,(a5)
000C7194 4A15                       		tst.b	(a5)
000C7196 6A00                       		bpl.s	locret_724E4
000C7198 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000C719E 6600                       		bne.s	locret_724E4
000C71A0 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000C71A8                            
000C71A8                            locret_724E4:
000C71A8 4E75                       		rts	
000C71AA                            ; End of function Snd_FadeOut2
000C71AA                            
000C71AA                            ; ===========================================================================
000C71AA                            ; ---------------------------------------------------------------------------
000C71AA                            ; Fade out music
000C71AA                            ; ---------------------------------------------------------------------------
000C71AA                            
000C71AA                            Sound_E0:				; XREF: Sound_ExIndex
000C71AA 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000C71AE 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000C71B2 1D7C 0003 0006             		move.b	#3,6(a6)
000C71B8 1D7C 0028 0004             		move.b	#$28,4(a6)
000C71BE 422E 0040                  		clr.b	$40(a6)
000C71C2 422E 002A                  		clr.b	$2A(a6)
000C71C6 4E75                       		rts	
000C71C8                            
000C71C8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C71C8                            
000C71C8                            
000C71C8                            sub_72504:				; XREF: sub_71B4C
000C71C8 102E 0006                  		move.b	6(a6),d0
000C71CC 6700                       		beq.s	loc_72510
000C71CE 532E 0006                  		subq.b	#1,6(a6)
000C71D2 4E75                       		rts	
000C71D4                            ; ===========================================================================
000C71D4                            
000C71D4                            loc_72510:
000C71D4 532E 0004                  		subq.b	#1,4(a6)
000C71D8 6700 0000                  		beq.w	Sound_E4
000C71DC 1D7C 0003 0006             		move.b	#3,6(a6)
000C71E2 4BEE 0070                  		lea	$70(a6),a5
000C71E6 7E05                       		moveq	#5,d7
000C71E8                            
000C71E8                            loc_72524:
000C71E8 4A15                       		tst.b	(a5)
000C71EA 6A00                       		bpl.s	loc_72538
000C71EC 522D 0009                  		addq.b	#1,9(a5)
000C71F0 6A00                       		bpl.s	loc_72534
000C71F2 0895 0007                  		bclr	#7,(a5)
000C71F6 6000                       		bra.s	loc_72538
000C71F8                            ; ===========================================================================
000C71F8                            
000C71F8                            loc_72534:
000C71F8 4EBA 0000                  		jsr	sub_72CB4(pc)
000C71FC                            
000C71FC                            loc_72538:
000C71FC DAFC 0030                  		adda.w	#$30,a5
000C7200 51CF FFE6                  		dbf	d7,loc_72524
000C7204                            
000C7204 7E02                       		moveq	#2,d7
000C7206                            
000C7206                            loc_72542:
000C7206 4A15                       		tst.b	(a5)
000C7208 6A00                       		bpl.s	loc_72560
000C720A 522D 0009                  		addq.b	#1,9(a5)
000C720E 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
000C7214 6500                       		bcs.s	loc_72558
000C7216 0895 0007                  		bclr	#7,(a5)
000C721A 6000                       		bra.s	loc_72560
000C721C                            ; ===========================================================================
000C721C                            
000C721C                            loc_72558:
000C721C 1C2D 0009                  		move.b	9(a5),d6
000C7220 4EBA 0000                  		jsr	sub_7296A(pc)
000C7224                            
000C7224                            loc_72560:
000C7224 DAFC 0030                  		adda.w	#$30,a5
000C7228 51CF FFDC                  		dbf	d7,loc_72542
000C722C                            
000C722C 4E75                       		rts	
000C722E                            ; End of function sub_72504
000C722E                            
000C722E                            
000C722E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C722E                            
000C722E                            
000C722E                            sub_7256A:				; XREF: Sound_E4; sub_725CA
000C722E 7602                       		moveq	#2,d3
000C7230 7028                       		moveq	#$28,d0
000C7232                            
000C7232                            loc_7256E:
000C7232 1203                       		move.b	d3,d1
000C7234 4EBA 0000                  		jsr	sub_7272E(pc)
000C7238 5801                       		addq.b	#4,d1
000C723A 4EBA 0000                  		jsr	sub_7272E(pc)
000C723E 51CB FFF2                  		dbf	d3,loc_7256E
000C7242                            
000C7242 7040                       		moveq	#$40,d0
000C7244 727F                       		moveq	#$7F,d1
000C7246 7802                       		moveq	#2,d4
000C7248                            
000C7248                            loc_72584:
000C7248 7603                       		moveq	#3,d3
000C724A                            
000C724A                            loc_72586:
000C724A 4EBA 0000                  		jsr	sub_7272E(pc)
000C724E 4EBA 0000                  		jsr	sub_72764(pc)
000C7252 5840                       		addq.w	#4,d0
000C7254 51CB FFF4                  		dbf	d3,loc_72586
000C7258                            
000C7258 0400 000F                  		subi.b	#$F,d0
000C725C 51CC FFEA                  		dbf	d4,loc_72584
000C7260                            
000C7260 4E75                       		rts	
000C7262                            ; End of function sub_7256A
000C7262                            
000C7262                            ; ===========================================================================
000C7262                            ; ---------------------------------------------------------------------------
000C7262                            ; Stop music
000C7262                            ; ---------------------------------------------------------------------------
000C7262                            
000C7262                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
000C7262 702B                       		moveq	#$2B,d0
000C7264 123C 0080                  		move.b	#$80,d1
000C7268 4EBA 0000                  		jsr	sub_7272E(pc)
000C726C 7027                       		moveq	#$27,d0
000C726E 7200                       		moveq	#0,d1
000C7270 4EBA 0000                  		jsr	sub_7272E(pc)
000C7274 204E                       		movea.l	a6,a0
000C7276 303C 00E3                  		move.w	#$E3,d0
000C727A                            
000C727A                            loc_725B6:
000C727A 4298                       		clr.l	(a0)+
000C727C 51C8 FFFC                  		dbf	d0,loc_725B6
000C7280                            
000C7280 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000C7286 4EBA FFA6                  		jsr	sub_7256A(pc)
000C728A 6000 0000                  		bra.w	sub_729B6
000C728E                            
000C728E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C728E                            
000C728E                            
000C728E                            sub_725CA:				; XREF: Sound_ChkValue
000C728E 204E                       		movea.l	a6,a0
000C7290 1216                       		move.b	0(a6),d1
000C7292 142E 0027                  		move.b	$27(a6),d2
000C7296 162E 002A                  		move.b	$2A(a6),d3
000C729A 182E 0026                  		move.b	$26(a6),d4
000C729E 3A2E 000A                  		move.w	$A(a6),d5
000C72A2 303C 0087                  		move.w	#$87,d0
000C72A6                            
000C72A6                            loc_725E4:
000C72A6 4298                       		clr.l	(a0)+
000C72A8 51C8 FFFC                  		dbf	d0,loc_725E4
000C72AC                            
000C72AC 1C81                       		move.b	d1,0(a6)
000C72AE 1D42 0027                  		move.b	d2,$27(a6)
000C72B2 1D43 002A                  		move.b	d3,$2A(a6)
000C72B6 1D44 0026                  		move.b	d4,$26(a6)
000C72BA 3D45 000A                  		move.w	d5,$A(a6)
000C72BE 1D7C 0080 0009             		move.b	#$80,9(a6)
000C72C4 4EBA FF68                  		jsr	sub_7256A(pc)
000C72C8 6000 0000                  		bra.w	sub_729B6
000C72CC                            ; End of function sub_725CA
000C72CC                            
000C72CC                            
000C72CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C72CC                            
000C72CC                            
000C72CC                            sub_7260C:				; XREF: sub_71B4C
000C72CC 1D6E 0002 0001             		move.b	2(a6),1(a6)
000C72D2 41EE 004E                  		lea	$4E(a6),a0
000C72D6 7030                       		moveq	#$30,d0
000C72D8 7209                       		moveq	#9,d1
000C72DA                            
000C72DA                            loc_7261A:
000C72DA 5210                       		addq.b	#1,(a0)
000C72DC D0C0                       		adda.w	d0,a0
000C72DE 51C9 FFFA                  		dbf	d1,loc_7261A
000C72E2                            
000C72E2 4E75                       		rts	
000C72E4                            ; End of function sub_7260C
000C72E4                            
000C72E4                            ; ===========================================================================
000C72E4                            ; ---------------------------------------------------------------------------
000C72E4                            ; Speed	up music
000C72E4                            ; ---------------------------------------------------------------------------
000C72E4                            
000C72E4                            Sound_E2:				; XREF: Sound_ExIndex
000C72E4 4A2E 0027                  		tst.b	$27(a6)
000C72E8 6600                       		bne.s	loc_7263E
000C72EA 1D6E 0029 0002             		move.b	$29(a6),2(a6)
000C72F0 1D6E 0029 0001             		move.b	$29(a6),1(a6)
000C72F6 1D7C 0080 002A             		move.b	#$80,$2A(a6)
000C72FC 4E75                       		rts	
000C72FE                            ; ===========================================================================
000C72FE                            
000C72FE                            loc_7263E:
000C72FE 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
000C7304 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
000C730A 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
000C7310 4E75                       		rts	
000C7312                            ; ===========================================================================
000C7312                            ; ---------------------------------------------------------------------------
000C7312                            ; Change music back to normal speed
000C7312                            ; ---------------------------------------------------------------------------
000C7312                            
000C7312                            Sound_E3:				; XREF: Sound_ExIndex
000C7312 4A2E 0027                  		tst.b	$27(a6)
000C7316 6600                       		bne.s	loc_7266A
000C7318 1D6E 0028 0002             		move.b	$28(a6),2(a6)
000C731E 1D6E 0028 0001             		move.b	$28(a6),1(a6)
000C7324 422E 002A                  		clr.b	$2A(a6)
000C7328 4E75                       		rts	
000C732A                            ; ===========================================================================
000C732A                            
000C732A                            loc_7266A:
000C732A 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
000C7330 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
000C7336 422E 03CA                  		clr.b	$3CA(a6)
000C733A 4E75                       		rts	
000C733C                            
000C733C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C733C                            
000C733C                            
000C733C                            sub_7267C:				; XREF: sub_71B4C
000C733C 4A2E 0025                  		tst.b	$25(a6)
000C7340 6700                       		beq.s	loc_72688
000C7342 532E 0025                  		subq.b	#1,$25(a6)
000C7346 4E75                       		rts	
000C7348                            ; ===========================================================================
000C7348                            
000C7348                            loc_72688:
000C7348 4A2E 0026                  		tst.b	$26(a6)
000C734C 6700                       		beq.s	loc_726D6
000C734E 532E 0026                  		subq.b	#1,$26(a6)
000C7352 1D7C 0002 0025             		move.b	#2,$25(a6)
000C7358 4BEE 0070                  		lea	$70(a6),a5
000C735C 7E05                       		moveq	#5,d7
000C735E                            
000C735E                            loc_7269E:
000C735E 4A15                       		tst.b	(a5)
000C7360 6A00                       		bpl.s	loc_726AA
000C7362 532D 0009                  		subq.b	#1,9(a5)
000C7366 4EBA 0000                  		jsr	sub_72CB4(pc)
000C736A                            
000C736A                            loc_726AA:
000C736A DAFC 0030                  		adda.w	#$30,a5
000C736E 51CF FFEE                  		dbf	d7,loc_7269E
000C7372 7E02                       		moveq	#2,d7
000C7374                            
000C7374                            loc_726B4:
000C7374 4A15                       		tst.b	(a5)
000C7376 6A00                       		bpl.s	loc_726CC
000C7378 532D 0009                  		subq.b	#1,9(a5)
000C737C 1C2D 0009                  		move.b	9(a5),d6
000C7380 0C06 0010                  		cmpi.b	#$10,d6
000C7384 6500                       		bcs.s	loc_726C8
000C7386 7C0F                       		moveq	#$F,d6
000C7388                            
000C7388                            loc_726C8:
000C7388 4EBA 0000                  		jsr	sub_7296A(pc)
000C738C                            
000C738C                            loc_726CC:
000C738C DAFC 0030                  		adda.w	#$30,a5
000C7390 51CF FFE2                  		dbf	d7,loc_726B4
000C7394 4E75                       		rts	
000C7396                            ; ===========================================================================
000C7396                            
000C7396                            loc_726D6:
000C7396 08AE 0002 0040             		bclr	#2,$40(a6)
000C739C 422E 0024                  		clr.b	$24(a6)
000C73A0 4E75                       		rts	
000C73A2                            ; End of function sub_7267C
000C73A2                            
000C73A2                            ; ===========================================================================
000C73A2                            
000C73A2                            loc_726E2:				; XREF: sub_71CCA
000C73A2 0815 0001                  		btst	#1,(a5)
000C73A6 6600                       		bne.s	locret_726FC
000C73A8 0815 0002                  		btst	#2,(a5)
000C73AC 6600                       		bne.s	locret_726FC
000C73AE 7028                       		moveq	#$28,d0
000C73B0 122D 0001                  		move.b	1(a5),d1
000C73B4 0001 00F0                  		ori.b	#-$10,d1
000C73B8 6000 0000                  		bra.w	sub_7272E
000C73BC                            ; ===========================================================================
000C73BC                            
000C73BC                            locret_726FC:
000C73BC 4E75                       		rts	
000C73BE                            
000C73BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C73BE                            
000C73BE                            
000C73BE                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000C73BE 0815 0004                  		btst	#4,(a5)
000C73C2 6600                       		bne.s	locret_72714
000C73C4 0815 0002                  		btst	#2,(a5)
000C73C8 6600                       		bne.s	locret_72714
000C73CA                            
000C73CA                            loc_7270A:				; XREF: Snd_FadeOut2
000C73CA 7028                       		moveq	#$28,d0
000C73CC 122D 0001                  		move.b	1(a5),d1
000C73D0 6000 0000                  		bra.w	sub_7272E
000C73D4                            ; ===========================================================================
000C73D4                            
000C73D4                            locret_72714:
000C73D4 4E75                       		rts	
000C73D6                            ; End of function sub_726FE
000C73D6                            
000C73D6                            ; ===========================================================================
000C73D6                            ; ===========================================================================
000C73D6                            loc_72716:
000C73D6 0815 0002                                  btst    #2,(a5)                         ; Is track being overriden by sfx?
000C73DA 6600                                       bne.s   @locret                         ; Return if yes
000C73DC 6000 0000                                  bra.w   sub_72722
000C73E0                            ; ===========================================================================
000C73E0                            ; locret_72720:
000C73E0                            @locret:
000C73E0 4E75                                       rts     
000C73E2                            
000C73E2                            ; ||||||||||||||| S U B R O U T I N E |||||||||||||||||||||||||||||||||||||||
000C73E2                            
000C73E2                            sub_72722:
000C73E2 142D 0001                                  move.b  1(a5), d2
000C73E6 5902                                       subq.b  #4, d2                          ; Is this bound for part I or II?
000C73E8 6400                                       bcc.s   loc_7275A                       ; If part II, branch
000C73EA 5802                                       addq.b  #4, d2                          ; Add in voice control bits
000C73EC D002                                       add.b   d2, d0                          ;
000C73EE                            
000C73EE                            ; ---------------------------------------------------------------------------
000C73EE                            sub_7272E:
000C742E 4A39 00A0 4000             @waitLoop:      tst.b   ($A04000).l             ; is FM busy?
000C7434 6BF8                                       bmi.s   @waitLoop               ; branch if yes
000C7436 13C0 00A0 4000                             move.b  d0, ($A04000).l
000C743C 4E71                                       nop
000C743E 13C1 00A0 4001                             move.b  d1, ($A04001).l
000C7444 4E71                                       nop
000C7446 4E71                                       nop
000C7448 4A39 00A0 4000             @waitLoop2:     tst.b   ($A04000).l             ; is FM busy?
000C744E 6BF8                                       bmi.s   @waitLoop2              ; branch if yes
000C7450 13FC 002A 00A0 4000                        move.b  #$2A, ($A04000).l       ; restore DAC output for Mega PCM
000C7460 4E75                                       rts
000C7462                            ; End of function sub_7272E
000C7462                            
000C7462                            ; ===========================================================================
000C7462                            loc_7275A:
000C7462 D002                                       add.b   d2,d0                   ; Add in to destination register
000C7464                            
000C7464                            ; ---------------------------------------------------------------------------
000C7464                            sub_72764:
000C74A4 4A39 00A0 4000             @waitLoop:      tst.b   ($A04000).l             ; is FM busy?
000C74AA 6BF8                                       bmi.s   @waitLoop               ; branch if yes
000C74AC 13C0 00A0 4002                             move.b  d0, ($A04002).l
000C74B2 4E71                                       nop
000C74B4 13C1 00A0 4003                             move.b  d1, ($A04003).l
000C74BA 4E71                                       nop
000C74BC 4E71                                       nop
000C74BE 4A39 00A0 4000             @waitLoop2:     tst.b   ($A04000).l             ; is FM busy?
000C74C4 6BF8                                       bmi.s   @waitLoop2              ; branch if yes
000C74C6 13FC 002A 00A0 4000                        move.b  #$2A, ($A04000).l       ; restore DAC output for Mega PCM
000C74D6 4E75                                       rts
000C74D8                            ; End of function sub_72764
000C74D8                            ;loc_72716:				; XREF: sub_72A5A
000C74D8                            ;		btst	#2,(a5)
000C74D8                            ;		bne.s	locret_72720
000C74D8                            ;		bra.w	sub_72722
000C74D8                            ; ===========================================================================
000C74D8                            
000C74D8                            ;locret_72720:
000C74D8                            ;		rts	
000C74D8                            
000C74D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C74D8                            
000C74D8                            
000C74D8                            ;sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000C74D8                            ;		btst	#2,1(a5)
000C74D8                            ;		bne.s	loc_7275A
000C74D8                            ;		add.b	1(a5),d0
000C74D8                            ; End of function sub_72722
000C74D8                            
000C74D8                            
000C74D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C74D8                            
000C74D8                            
000C74D8                            ;sub_7272E:				; XREF: loc_71E6A
000C74D8                            ;		move.b	($A04000).l,d2
000C74D8                            ;		btst	#7,d2
000C74D8                            ;		bne.s	sub_7272E
000C74D8                            ;		move.b	d0,($A04000).l
000C74D8                            ;		nop	
000C74D8                            ;		nop	
000C74D8                            ;		nop	
000C74D8                            
000C74D8                            ;loc_72746:
000C74D8                            ;		move.b	($A04000).l,d2
000C74D8                            ;		btst	#7,d2
000C74D8                            ;		bne.s	loc_72746
000C74D8                            ;
000C74D8                            ;		move.b	d1,($A04001).l
000C74D8                            ;		rts	
000C74D8                            ; End of function sub_7272E
000C74D8                            
000C74D8                            ; ===========================================================================
000C74D8                            
000C74D8                            ;loc_7275A:				; XREF: sub_72722
000C74D8                            ;		move.b	1(a5),d2
000C74D8                            ;		bclr	#2,d2
000C74D8                            ;		add.b	d2,d0
000C74D8                            
000C74D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C74D8                            
000C74D8                            
000C74D8                            ;sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
000C74D8                            ;		move.b	($A04000).l,d2
000C74D8                            ;		btst	#7,d2
000C74D8                            ;		bne.s	sub_72764
000C74D8                            ;		move.b	d0,($A04002).l
000C74D8                            ;		nop	
000C74D8                            ;		nop	
000C74D8                            ;		nop	
000C74D8                            ;
000C74D8                            ;loc_7277C:
000C74D8                            ;		move.b	($A04000).l,d2
000C74D8                            ;		btst	#7,d2
000C74D8                            ;		bne.s	loc_7277C
000C74D8                            ;
000C74D8                            ;		move.b	d1,($A04003).l
000C74D8                            ;		rts	
000C74D8                            ; End of function sub_72764
000C74D8                            
000C74D8                            ; ===========================================================================
000C74D8 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
000C74EA 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
000C74FC 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000C750C 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000C751C 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000C752C 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000C753C 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000C754C 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000C755C 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
000C756C 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
000C757C 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
000C758C 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
000C7598                            
000C7598                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7598                            
000C7598                            
000C7598                            sub_72850:				; XREF: sub_71B4C
000C7598 532D 000E                  		subq.b	#1,$E(a5)
000C759C 6600                       		bne.s	loc_72866
000C759E 0895 0004                  		bclr	#4,(a5)
000C75A2 4EBA 0000                  		jsr	sub_72878(pc)
000C75A6 4EBA 0000                  		jsr	sub_728DC(pc)
000C75AA 6000 0000                  		bra.w	loc_7292E
000C75AE                            ; ===========================================================================
000C75AE                            
000C75AE                            loc_72866:
000C75AE 4EBA F388                  		jsr	sub_71D9E(pc)
000C75B2 4EBA 0000                  		jsr	sub_72926(pc)
000C75B6 4EBA F3A8                  		jsr	sub_71DC6(pc)
000C75BA 4EBA 0000                  		jsr	sub_728E2(pc)
000C75BE 4E75                       		rts	
000C75C0                            ; End of function sub_72850
000C75C0                            
000C75C0                            
000C75C0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C75C0                            
000C75C0                            
000C75C0                            sub_72878:				; XREF: sub_72850
000C75C0 0895 0001                  		bclr	#1,(a5)
000C75C4 286D 0004                  		movea.l	4(a5),a4
000C75C8                            
000C75C8                            loc_72880:
000C75C8 7A00                       		moveq	#0,d5
000C75CA 1A1C                       		move.b	(a4)+,d5
000C75CC 0C05 00E0                  		cmpi.b	#$E0,d5
000C75D0 6500                       		bcs.s	loc_72890
000C75D2 4EBA 0000                  		jsr	sub_72A5A(pc)
000C75D6 60F0                       		bra.s	loc_72880
000C75D8                            ; ===========================================================================
000C75D8                            
000C75D8                            loc_72890:
000C75D8 4A05                       		tst.b	d5
000C75DA 6A00                       		bpl.s	loc_728A4
000C75DC 4EBA 0000                  		jsr	sub_728AC(pc)
000C75E0 1A1C                       		move.b	(a4)+,d5
000C75E2 4A05                       		tst.b	d5
000C75E4 6A00                       		bpl.s	loc_728A4
000C75E6 534C                       		subq.w	#1,a4
000C75E8 6000 F310                  		bra.w	sub_71D60
000C75EC                            ; ===========================================================================
000C75EC                            
000C75EC                            loc_728A4:
000C75EC 4EBA F2EC                  		jsr	sub_71D40(pc)
000C75F0 6000 F308                  		bra.w	sub_71D60
000C75F4                            ; End of function sub_72878
000C75F4                            
000C75F4                            
000C75F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C75F4                            
000C75F4                            
000C75F4                            sub_728AC:				; XREF: sub_72878
000C75F4 0405 0081                  		subi.b	#$81,d5
000C75F8 6500                       		bcs.s	loc_728CA
000C75FA DA2D 0008                  		add.b	8(a5),d5
000C75FE 0245 007F                  		andi.w	#$7F,d5
000C7602 E34D                       		lsl.w	#1,d5
000C7604 41FA 0000                  		lea	word_729CE(pc),a0
000C7608 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000C760E 6000 F2EA                  		bra.w	sub_71D60
000C7612                            ; ===========================================================================
000C7612                            
000C7612                            loc_728CA:
000C7612 08D5 0001                  		bset	#1,(a5)
000C7616 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000C761C 4EBA F2DC                  		jsr	sub_71D60(pc)
000C7620 6000 0000                  		bra.w	sub_729A0
000C7624                            ; End of function sub_728AC
000C7624                            
000C7624                            
000C7624                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7624                            
000C7624                            
000C7624                            sub_728DC:				; XREF: sub_72850
000C7624 3C2D 0010                  		move.w	$10(a5),d6
000C7628 6B00                       		bmi.s	loc_72920
000C762A                            ; End of function sub_728DC
000C762A                            
000C762A                            
000C762A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C762A                            
000C762A                            
000C762A                            sub_728E2:				; XREF: sub_72850
000C762A 102D 001E                  		move.b	$1E(a5),d0
000C762E 4880                       		ext.w	d0
000C7630 DC40                       		add.w	d0,d6
000C7632 0815 0002                  		btst	#2,(a5)
000C7636 6600                       		bne.s	locret_7291E
000C7638 0815 0001                  		btst	#1,(a5)
000C763C 6600                       		bne.s	locret_7291E
000C763E 102D 0001                  		move.b	1(a5),d0
000C7642 0C00 00E0                  		cmpi.b	#$E0,d0
000C7646 6600                       		bne.s	loc_72904
000C7648 103C 00C0                  		move.b	#$C0,d0
000C764C                            
000C764C                            loc_72904:
000C764C 3206                       		move.w	d6,d1
000C764E 0201 000F                  		andi.b	#$F,d1
000C7652 8001                       		or.b	d1,d0
000C7654 E84E                       		lsr.w	#4,d6
000C7656 0206 003F                  		andi.b	#$3F,d6
000C765A 13C0 00C0 0011             		move.b	d0,($C00011).l
000C7660 13C6 00C0 0011             		move.b	d6,($C00011).l
000C7666                            
000C7666                            locret_7291E:
000C7666 4E75                       		rts	
000C7668                            ; End of function sub_728E2
000C7668                            
000C7668                            ; ===========================================================================
000C7668                            
000C7668                            loc_72920:				; XREF: sub_728DC
000C7668 08D5 0001                  		bset	#1,(a5)
000C766C 4E75                       		rts	
000C766E                            
000C766E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C766E                            
000C766E                            
000C766E                            sub_72926:				; XREF: sub_72850
000C766E 4A2D 000B                  		tst.b	$B(a5)
000C7672 6700 0000                  		beq.w	locret_7298A
000C7676                            
000C7676                            loc_7292E:				; XREF: sub_72850
000C7676 1C2D 0009                  		move.b	9(a5),d6
000C767A 7000                       		moveq	#0,d0
000C767C 102D 000B                  		move.b	$B(a5),d0
000C7680 6700                       		beq.s	sub_7296A
000C7682 2079 000C 6460             		movea.l	(Go_PSGIndex).l,a0
000C7688 5340                       		subq.w	#1,d0
000C768A E548                       		lsl.w	#2,d0
000C768C 2070 0000                  		movea.l	(a0,d0.w),a0
000C7690 102D 000C                  		move.b	$C(a5),d0
000C7694 1030 0000                  		move.b	(a0,d0.w),d0
000C7698 522D 000C                  		addq.b	#1,$C(a5)
000C769C 0800 0007                  		btst	#7,d0
000C76A0 6700                       		beq.s	loc_72960
000C76A2 0C00 0080                  		cmpi.b	#$80,d0
000C76A6 6700                       		beq.s	loc_7299A
000C76A8                            
000C76A8                            loc_72960:
000C76A8 DC40                       		add.w	d0,d6
000C76AA 0C06 0010                  		cmpi.b	#$10,d6
000C76AE 6500                       		bcs.s	sub_7296A
000C76B0 7C0F                       		moveq	#$F,d6
000C76B2                            ; End of function sub_72926
000C76B2                            
000C76B2                            
000C76B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C76B2                            
000C76B2                            
000C76B2                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
000C76B2 0815 0001                  		btst	#1,(a5)
000C76B6 6600                       		bne.s	locret_7298A
000C76B8 0815 0002                  		btst	#2,(a5)
000C76BC 6600                       		bne.s	locret_7298A
000C76BE 0815 0004                  		btst	#4,(a5)
000C76C2 6600                       		bne.s	loc_7298C
000C76C4                            
000C76C4                            loc_7297C:
000C76C4 8C2D 0001                  		or.b	1(a5),d6
000C76C8 0606 0010                  		addi.b	#$10,d6
000C76CC 13C6 00C0 0011             		move.b	d6,($C00011).l
000C76D2                            
000C76D2                            locret_7298A:
000C76D2 4E75                       		rts	
000C76D4                            ; ===========================================================================
000C76D4                            
000C76D4                            loc_7298C:
000C76D4 4A2D 0013                  		tst.b	$13(a5)
000C76D8 67EA                       		beq.s	loc_7297C
000C76DA 4A2D 0012                  		tst.b	$12(a5)
000C76DE 66E4                       		bne.s	loc_7297C
000C76E0 4E75                       		rts	
000C76E2                            ; End of function sub_7296A
000C76E2                            
000C76E2                            ; ===========================================================================
000C76E2                            
000C76E2                            loc_7299A:				; XREF: sub_72926
000C76E2 532D 000C                  		subq.b	#1,$C(a5)
000C76E6 4E75                       		rts	
000C76E8                            
000C76E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C76E8                            
000C76E8                            
000C76E8                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
000C76E8 0815 0002                  		btst	#2,(a5)
000C76EC 6600                       		bne.s	locret_729B4
000C76EE                            
000C76EE                            loc_729A6:				; XREF: Snd_FadeOut2
000C76EE 102D 0001                  		move.b	1(a5),d0
000C76F2 0000 001F                  		ori.b	#$1F,d0
000C76F6 13C0 00C0 0011             		move.b	d0,($C00011).l
000C76FC                            
000C76FC                            locret_729B4:
000C76FC 4E75                       		rts	
000C76FE                            ; End of function sub_729A0
000C76FE                            
000C76FE                            
000C76FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C76FE                            
000C76FE                            
000C76FE                            sub_729B6:				; XREF: loc_71E7C
000C76FE 41F9 00C0 0011             		lea	($C00011).l,a0
000C7704 10BC 009F                  		move.b	#$9F,(a0)
000C7708 10BC 00BF                  		move.b	#$BF,(a0)
000C770C 10BC 00DF                  		move.b	#$DF,(a0)
000C7710 10BC 00FF                  		move.b	#$FF,(a0)
000C7714 4E75                       		rts	
000C7716                            ; End of function sub_729B6
000C7716                            
000C7716                            ; ===========================================================================
000C7716 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000C7728 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000C773A 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000C774E 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000C7762 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
000C7776 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
000C778A 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
000C779E 0011 0000                  		dc.w $11, 0
000C77A2                            
000C77A2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C77A2                            
000C77A2                            
000C77A2                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
000C77A2 0445 00E0                  		subi.w	#$E0,d5
000C77A6 E54D                       		lsl.w	#2,d5
000C77A8 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
000C77AC                            ; End of function sub_72A5A
000C77AC                            
000C77AC                            ; ===========================================================================
000C77AC                            
000C77AC                            loc_72A64:
000C77AC 6000 0000                  		bra.w	loc_72ACC
000C77B0                            ; ===========================================================================
000C77B0 6000 0000                  		bra.w	loc_72AEC
000C77B4                            ; ===========================================================================
000C77B4 6000 0000                  		bra.w	loc_72AF2
000C77B8                            ; ===========================================================================
000C77B8 6000 0000                  		bra.w	loc_72AF8
000C77BC                            ; ===========================================================================
000C77BC 6000 0000                  		bra.w	loc_72B14
000C77C0                            ; ===========================================================================
000C77C0 6000 0000                  		bra.w	loc_72B9E
000C77C4                            ; ===========================================================================
000C77C4 6000 0000                  		bra.w	loc_72BA4
000C77C8                            ; ===========================================================================
000C77C8 6000 0000                  		bra.w	loc_72BAE
000C77CC                            ; ===========================================================================
000C77CC 6000 0000                  		bra.w	loc_72BB4
000C77D0                            ; ===========================================================================
000C77D0 6000 0000                  		bra.w	loc_72BBE
000C77D4                            ; ===========================================================================
000C77D4 6000 0000                  		bra.w	loc_72BC6
000C77D8                            ; ===========================================================================
000C77D8 6000 0000                  		bra.w	loc_72BD0
000C77DC                            ; ===========================================================================
000C77DC 6000 0000                  		bra.w	loc_72BE6
000C77E0                            ; ===========================================================================
000C77E0 6000 0000                  		bra.w	loc_72BEE
000C77E4                            ; ===========================================================================
000C77E4 6000 0000                  		bra.w	loc_72BF4
000C77E8                            ; ===========================================================================
000C77E8 6000 0000                  		bra.w	loc_72C26
000C77EC                            ; ===========================================================================
000C77EC 6000 0000                  		bra.w	loc_72D30
000C77F0                            ; ===========================================================================
000C77F0 6000 0000                  		bra.w	loc_72D52
000C77F4                            ; ===========================================================================
000C77F4 6000 0000                  		bra.w	loc_72D58
000C77F8                            ; ===========================================================================
000C77F8 6000 0000                  		bra.w	loc_72E06
000C77FC                            ; ===========================================================================
000C77FC 6000 0000                  		bra.w	loc_72E20
000C7800                            ; ===========================================================================
000C7800 6000 0000                  		bra.w	loc_72E26
000C7804                            ; ===========================================================================
000C7804 6000 0000                  		bra.w	loc_72E2C
000C7808                            ; ===========================================================================
000C7808 6000 0000                  		bra.w	loc_72E38
000C780C                            ; ===========================================================================
000C780C 6000 0000                  		bra.w	loc_72E52
000C7810                            ; ===========================================================================
000C7810 6000 0000                  		bra.w	loc_72E64
000C7814                            ; ===========================================================================
000C7814                            
000C7814                            loc_72ACC:				; XREF: loc_72A64
000C7814 121C                       		move.b	(a4)+,d1
000C7816 4A2D 0001                  		tst.b	1(a5)
000C781A 6B00                       		bmi.s	locret_72AEA
000C781C 102D 000A                  		move.b	$A(a5),d0
000C7820 0200 0037                  		andi.b	#$37,d0
000C7824 8200                       		or.b	d0,d1
000C7826 1B41 000A                  		move.b	d1,$A(a5)
000C782A 103C 00B4                  		move.b	#$B4,d0
000C782E 6000 FBA6                  		bra.w	loc_72716
000C7832                            ; ===========================================================================
000C7832                            
000C7832                            locret_72AEA:
000C7832 4E75                       		rts	
000C7834                            ; ===========================================================================
000C7834                            
000C7834                            loc_72AEC:				; XREF: loc_72A64
000C7834 1B5C 001E                  		move.b	(a4)+,$1E(a5)
000C7838 4E75                       		rts	
000C783A                            ; ===========================================================================
000C783A                            
000C783A                            loc_72AF2:				; XREF: loc_72A64
000C783A 1D5C 0007                  		move.b	(a4)+,7(a6)
000C783E 4E75                       		rts	
000C7840                            ; ===========================================================================
000C7840                            
000C7840                            loc_72AF8:				; XREF: loc_72A64
000C7840 7000                       		moveq	#0,d0
000C7842 102D 000D                  		move.b	$D(a5),d0
000C7846 2875 0000                  		movea.l	(a5,d0.w),a4
000C784A 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
000C7852 544C                       		addq.w	#2,a4
000C7854 5800                       		addq.b	#4,d0
000C7856 1B40 000D                  		move.b	d0,$D(a5)
000C785A 4E75                       		rts	
000C785C                            ; ===========================================================================
000C785C                            
000C785C                            loc_72B14:				; XREF: loc_72A64
000C785C 204E                       		movea.l	a6,a0
000C785E 43EE 03A0                  		lea	$3A0(a6),a1
000C7862 303C 0087                  		move.w	#$87,d0
000C7866                            
000C7866                            loc_72B1E:
000C7866 20D9                       		move.l	(a1)+,(a0)+
000C7868 51C8 FFFC                  		dbf	d0,loc_72B1E
000C786C                            
000C786C 08EE 0002 0040             		bset	#2,$40(a6)
000C7872 264D                       		movea.l	a5,a3
000C7874 1C3C 0028                  		move.b	#$28,d6
000C7878 9C2E 0026                  		sub.b	$26(a6),d6
000C787C 7E05                       		moveq	#5,d7
000C787E 4BEE 0070                  		lea	$70(a6),a5
000C7882                            
000C7882                            loc_72B3A:
000C7882 0815 0007                  		btst	#7,(a5)
000C7886 6700                       		beq.s	loc_72B5C
000C7888 08D5 0001                  		bset	#1,(a5)
000C788C DD2D 0009                  		add.b	d6,9(a5)
000C7890 0815 0002                  		btst	#2,(a5)
000C7894 6600                       		bne.s	loc_72B5C
000C7896 7000                       		moveq	#0,d0
000C7898 102D 000B                  		move.b	$B(a5),d0
000C789C 226E 0018                  		movea.l	$18(a6),a1
000C78A0 4EBA 0000                  		jsr	sub_72C4E(pc)
000C78A4                            
000C78A4                            loc_72B5C:
000C78A4 DAFC 0030                  		adda.w	#$30,a5
000C78A8 51CF FFD8                  		dbf	d7,loc_72B3A
000C78AC                            
000C78AC 7E02                       		moveq	#2,d7
000C78AE                            
000C78AE                            loc_72B66:
000C78AE 0815 0007                  		btst	#7,(a5)
000C78B2 6700                       		beq.s	loc_72B78
000C78B4 08D5 0001                  		bset	#1,(a5)
000C78B8 4EBA FE2E                  		jsr	sub_729A0(pc)
000C78BC DD2D 0009                  		add.b	d6,9(a5)
000C78C0                            
000C78C0                            loc_72B78:
000C78C0 DAFC 0030                  		adda.w	#$30,a5
000C78C4 51CF FFE8                  		dbf	d7,loc_72B66
000C78C8 2A4B                       		movea.l	a3,a5
000C78CA 1D7C 0080 0024             		move.b	#$80,$24(a6)
000C78D0 1D7C 0028 0026             		move.b	#$28,$26(a6)
000C78D6 422E 0027                  		clr.b	$27(a6)
000C78DA 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
000C78E2 504F                       		addq.w	#8,sp
000C78E4 4E75                       		rts	
000C78E6                            ; ===========================================================================
000C78E6                            
000C78E6                            loc_72B9E:				; XREF: loc_72A64
000C78E6 1B5C 0002                  		move.b	(a4)+,2(a5)
000C78EA 4E75                       		rts	
000C78EC                            ; ===========================================================================
000C78EC                            
000C78EC                            loc_72BA4:				; XREF: loc_72A64
000C78EC 101C                       		move.b	(a4)+,d0
000C78EE D12D 0009                  		add.b	d0,9(a5)
000C78F2 6000 0000                  		bra.w	sub_72CB4
000C78F6                            ; ===========================================================================
000C78F6                            
000C78F6                            loc_72BAE:				; XREF: loc_72A64
000C78F6 08D5 0004                  		bset	#4,(a5)
000C78FA 4E75                       		rts	
000C78FC                            ; ===========================================================================
000C78FC                            
000C78FC                            loc_72BB4:				; XREF: loc_72A64
000C78FC 1B54 0012                  		move.b	(a4),$12(a5)
000C7900 1B5C 0013                  		move.b	(a4)+,$13(a5)
000C7904 4E75                       		rts	
000C7906                            ; ===========================================================================
000C7906                            
000C7906                            loc_72BBE:				; XREF: loc_72A64
000C7906 101C                       		move.b	(a4)+,d0
000C7908 D12D 0008                  		add.b	d0,8(a5)
000C790C 4E75                       		rts	
000C790E                            ; ===========================================================================
000C790E                            
000C790E                            loc_72BC6:				; XREF: loc_72A64
000C790E 1D54 0002                  		move.b	(a4),2(a6)
000C7912 1D5C 0001                  		move.b	(a4)+,1(a6)
000C7916 4E75                       		rts	
000C7918                            ; ===========================================================================
000C7918                            
000C7918                            loc_72BD0:				; XREF: loc_72A64
000C7918 41EE 0040                  		lea	$40(a6),a0
000C791C 101C                       		move.b	(a4)+,d0
000C791E 7230                       		moveq	#$30,d1
000C7920 7409                       		moveq	#9,d2
000C7922                            
000C7922                            loc_72BDA:
000C7922 1140 0002                  		move.b	d0,2(a0)
000C7926 D0C1                       		adda.w	d1,a0
000C7928 51CA FFF8                  		dbf	d2,loc_72BDA
000C792C                            
000C792C 4E75                       		rts	
000C792E                            ; ===========================================================================
000C792E                            
000C792E                            loc_72BE6:				; XREF: loc_72A64
000C792E 101C                       		move.b	(a4)+,d0
000C7930 D12D 0009                  		add.b	d0,9(a5)
000C7934 4E75                       		rts	
000C7936                            ; ===========================================================================
000C7936                            
000C7936                            loc_72BEE:				; XREF: loc_72A64
000C7936 422E 002C                  		clr.b	$2C(a6)
000C793A 4E75                       		rts	
000C793C                            ; ===========================================================================
000C793C                            
000C793C                            loc_72BF4:				; XREF: loc_72A64
000C793C 0895 0007                  		bclr	#7,(a5)
000C7940 0895 0004                  		bclr	#4,(a5)
000C7944 4EBA FA78                  		jsr	sub_726FE(pc)
000C7948 4A2E 0250                  		tst.b	$250(a6)
000C794C 6B00                       		bmi.s	loc_72C22
000C794E 264D                       		movea.l	a5,a3
000C7950 4BEE 0100                  		lea	$100(a6),a5
000C7954 226E 0018                  		movea.l	$18(a6),a1
000C7958 0895 0002                  		bclr	#2,(a5)
000C795C 08D5 0001                  		bset	#1,(a5)
000C7960 102D 000B                  		move.b	$B(a5),d0
000C7964 4EBA 0000                  		jsr	sub_72C4E(pc)
000C7968 2A4B                       		movea.l	a3,a5
000C796A                            
000C796A                            loc_72C22:
000C796A 504F                       		addq.w	#8,sp
000C796C 4E75                       		rts	
000C796E                            ; ===========================================================================
000C796E                            
000C796E                            loc_72C26:				; XREF: loc_72A64
000C796E 7000                       		moveq	#0,d0
000C7970 101C                       		move.b	(a4)+,d0
000C7972 1B40 000B                  		move.b	d0,$B(a5)
000C7976 0815 0002                  		btst	#2,(a5)
000C797A 6600 0000                  		bne.w	locret_72CAA
000C797E 226E 0018                  		movea.l	$18(a6),a1
000C7982 4A2E 000E                  		tst.b	$E(a6)
000C7986 6700                       		beq.s	sub_72C4E
000C7988 226D 0020                  		movea.l	$20(a5),a1
000C798C 4A2E 000E                  		tst.b	$E(a6)
000C7990 6B00                       		bmi.s	sub_72C4E
000C7992 226E 0020                  		movea.l	$20(a6),a1
000C7996                            
000C7996                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C7996                            
000C7996                            
000C7996                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
000C7996 5340                       		subq.w	#1,d0
000C7998 6B00                       		bmi.s	loc_72C5C
000C799A 323C 0019                  		move.w	#$19,d1
000C799E                            
000C799E                            loc_72C56:
000C799E D2C1                       		adda.w	d1,a1
000C79A0 51C8 FFFC                  		dbf	d0,loc_72C56
000C79A4                            
000C79A4                            loc_72C5C:
000C79A4 1219                       		move.b	(a1)+,d1
000C79A6 1B41 001F                  		move.b	d1,$1F(a5)
000C79AA 1801                       		move.b	d1,d4
000C79AC 103C 00B0                  		move.b	#$B0,d0
000C79B0 4EBA FA30                  		jsr	sub_72722(pc)
000C79B4 45FA 0000                  		lea	byte_72D18(pc),a2
000C79B8 7613                       		moveq	#$13,d3
000C79BA                            
000C79BA                            loc_72C72:
000C79BA 101A                       		move.b	(a2)+,d0
000C79BC 1219                       		move.b	(a1)+,d1
000C79BE 4EBA FA22                  		jsr	sub_72722(pc)
000C79C2 51CB FFF6                  		dbf	d3,loc_72C72
000C79C6 7A03                       		moveq	#3,d5
000C79C8 0244 0007                  		andi.w	#7,d4
000C79CC 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
000C79D0 162D 0009                  		move.b	9(a5),d3
000C79D4                            
000C79D4                            loc_72C8C:
000C79D4 101A                       		move.b	(a2)+,d0
000C79D6 1219                       		move.b	(a1)+,d1
000C79D8 E20C                       		lsr.b	#1,d4
000C79DA 6400                       		bcc.s	loc_72C96
000C79DC D203                       		add.b	d3,d1
000C79DE                            
000C79DE                            loc_72C96:
000C79DE 4EBA FA02                  		jsr	sub_72722(pc)
000C79E2 51CD FFF0                  		dbf	d5,loc_72C8C
000C79E6 103C 00B4                  		move.b	#$B4,d0
000C79EA 122D 000A                  		move.b	$A(a5),d1
000C79EE 4EBA F9F2                  		jsr	sub_72722(pc)
000C79F2                            
000C79F2                            locret_72CAA:
000C79F2 4E75                       		rts	
000C79F4                            ; End of function sub_72C4E
000C79F4                            
000C79F4                            ; ===========================================================================
000C79F4 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
000C79FC                            
000C79FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000C79FC                            
000C79FC                            
000C79FC                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
000C79FC 0815 0002                  		btst	#2,(a5)
000C7A00 6600                       		bne.s	locret_72D16
000C7A02 7000                       		moveq	#0,d0
000C7A04 102D 000B                  		move.b	$B(a5),d0
000C7A08 226E 0018                  		movea.l	$18(a6),a1
000C7A0C 4A2E 000E                  		tst.b	$E(a6)
000C7A10 6700                       		beq.s	loc_72CD8
000C7A12 226E 0020                  		movea.l	$20(a6),a1
000C7A16 4A2E 000E                  		tst.b	$E(a6)
000C7A1A 6B00                       		bmi.s	loc_72CD8
000C7A1C 226E 0020                  		movea.l	$20(a6),a1
000C7A20                            
000C7A20                            loc_72CD8:
000C7A20 5340                       		subq.w	#1,d0
000C7A22 6B00                       		bmi.s	loc_72CE6
000C7A24 323C 0019                  		move.w	#$19,d1
000C7A28                            
000C7A28                            loc_72CE0:
000C7A28 D2C1                       		adda.w	d1,a1
000C7A2A 51C8 FFFC                  		dbf	d0,loc_72CE0
000C7A2E                            
000C7A2E                            loc_72CE6:
000C7A2E D2FC 0015                  		adda.w	#$15,a1
000C7A32 45FA 0000                  		lea	byte_72D2C(pc),a2
000C7A36 102D 001F                  		move.b	$1F(a5),d0
000C7A3A 0240 0007                  		andi.w	#7,d0
000C7A3E 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
000C7A42 162D 0009                  		move.b	9(a5),d3
000C7A46 6B00                       		bmi.s	locret_72D16
000C7A48 7A03                       		moveq	#3,d5
000C7A4A                            
000C7A4A                            loc_72D02:
000C7A4A 101A                       		move.b	(a2)+,d0
000C7A4C 1219                       		move.b	(a1)+,d1
000C7A4E E20C                       		lsr.b	#1,d4
000C7A50 6400                       		bcc.s	loc_72D12
000C7A52 D203                       		add.b	d3,d1
000C7A54 6500                       		bcs.s	loc_72D12
000C7A56 4EBA F98A                  		jsr	sub_72722(pc)
000C7A5A                            
000C7A5A                            loc_72D12:
000C7A5A 51CD FFEE                  		dbf	d5,loc_72D02
000C7A5E                            
000C7A5E                            locret_72D16:
000C7A5E 4E75                       		rts	
000C7A60                            ; End of function sub_72CB4
000C7A60                            
000C7A60                            ; ===========================================================================
000C7A60 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
000C7A6A 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
000C7A74 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
000C7A78                            ; ===========================================================================
000C7A78                            
000C7A78                            loc_72D30:				; XREF: loc_72A64
000C7A78 08D5 0003                  		bset	#3,(a5)
000C7A7C 2B4C 0014                  		move.l	a4,$14(a5)
000C7A80 1B5C 0018                  		move.b	(a4)+,$18(a5)
000C7A84 1B5C 0019                  		move.b	(a4)+,$19(a5)
000C7A88 1B5C 001A                  		move.b	(a4)+,$1A(a5)
000C7A8C 101C                       		move.b	(a4)+,d0
000C7A8E E208                       		lsr.b	#1,d0
000C7A90 1B40 001B                  		move.b	d0,$1B(a5)
000C7A94 426D 001C                  		clr.w	$1C(a5)
000C7A98 4E75                       		rts	
000C7A9A                            ; ===========================================================================
000C7A9A                            
000C7A9A                            loc_72D52:				; XREF: loc_72A64
000C7A9A 08D5 0003                  		bset	#3,(a5)
000C7A9E 4E75                       		rts	
000C7AA0                            ; ===========================================================================
000C7AA0                            
000C7AA0                            loc_72D58:				; XREF: loc_72A64
000C7AA0 0895 0007                  		bclr	#7,(a5)
000C7AA4 0895 0004                  		bclr	#4,(a5)
000C7AA8 4A2D 0001                  		tst.b	1(a5)
000C7AAC 6B00                       		bmi.s	loc_72D74
000C7AAE 4A2E 0008                  		tst.b	8(a6)
000C7AB2 6B00 0000                  		bmi.w	loc_72E02
000C7AB6 4EBA F906                  		jsr	sub_726FE(pc)
000C7ABA 6000                       		bra.s	loc_72D78
000C7ABC                            ; ===========================================================================
000C7ABC                            
000C7ABC                            loc_72D74:
000C7ABC 4EBA FC2A                  		jsr	sub_729A0(pc)
000C7AC0                            
000C7AC0                            loc_72D78:
000C7AC0 4A2E 000E                  		tst.b	$E(a6)
000C7AC4 6A00 0000                  		bpl.w	loc_72E02
000C7AC8 4216                       		clr.b	0(a6)
000C7ACA 7000                       		moveq	#0,d0
000C7ACC 102D 0001                  		move.b	1(a5),d0
000C7AD0 6B00                       		bmi.s	loc_72DCC
000C7AD2 41FA F4BE                  		lea	dword_722CC(pc),a0
000C7AD6 264D                       		movea.l	a5,a3
000C7AD8 0C00 0004                  		cmpi.b	#4,d0
000C7ADC 6600                       		bne.s	loc_72DA8
000C7ADE 4A2E 0340                  		tst.b	$340(a6)
000C7AE2 6A00                       		bpl.s	loc_72DA8
000C7AE4 4BEE 0340                  		lea	$340(a6),a5
000C7AE8 226E 0020                  		movea.l	$20(a6),a1
000C7AEC 6000                       		bra.s	loc_72DB8
000C7AEE                            ; ===========================================================================
000C7AEE                            
000C7AEE                            loc_72DA8:
000C7AEE 5500                       		subq.b	#2,d0
000C7AF0 E508                       		lsl.b	#2,d0
000C7AF2 2A70 0000                  		movea.l	(a0,d0.w),a5
000C7AF6 4A15                       		tst.b	(a5)
000C7AF8 6A00                       		bpl.s	loc_72DC8
000C7AFA 226E 0018                  		movea.l	$18(a6),a1
000C7AFE                            
000C7AFE                            loc_72DB8:
000C7AFE 0895 0002                  		bclr	#2,(a5)
000C7B02 08D5 0001                  		bset	#1,(a5)
000C7B06 102D 000B                  		move.b	$B(a5),d0
000C7B0A 4EBA FE8A                  		jsr	sub_72C4E(pc)
000C7B0E                            
000C7B0E                            loc_72DC8:
000C7B0E 2A4B                       		movea.l	a3,a5
000C7B10 6000                       		bra.s	loc_72E02
000C7B12                            ; ===========================================================================
000C7B12                            
000C7B12                            loc_72DCC:
000C7B12 41EE 0370                  		lea	$370(a6),a0
000C7B16 4A10                       		tst.b	(a0)
000C7B18 6A00                       		bpl.s	loc_72DE0
000C7B1A 0C00 00E0                  		cmpi.b	#$E0,d0
000C7B1E 6700                       		beq.s	loc_72DEA
000C7B20 0C00 00C0                  		cmpi.b	#$C0,d0
000C7B24 6700                       		beq.s	loc_72DEA
000C7B26                            
000C7B26                            loc_72DE0:
000C7B26 41FA F46A                  		lea	dword_722CC(pc),a0
000C7B2A E608                       		lsr.b	#3,d0
000C7B2C 2070 0000                  		movea.l	(a0,d0.w),a0
000C7B30                            
000C7B30                            loc_72DEA:
000C7B30 0890 0002                  		bclr	#2,(a0)
000C7B34 08D0 0001                  		bset	#1,(a0)
000C7B38 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
000C7B3E 6600                       		bne.s	loc_72E02
000C7B40 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
000C7B48                            
000C7B48                            loc_72E02:
000C7B48 504F                       		addq.w	#8,sp
000C7B4A 4E75                       		rts	
000C7B4C                            ; ===========================================================================
000C7B4C                            
000C7B4C                            loc_72E06:				; XREF: loc_72A64
000C7B4C 1B7C 00E0 0001             		move.b	#$E0,1(a5)
000C7B52 1B5C 001F                  		move.b	(a4)+,$1F(a5)
000C7B56 0815 0002                  		btst	#2,(a5)
000C7B5A 6600                       		bne.s	locret_72E1E
000C7B5C 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
000C7B64                            
000C7B64                            locret_72E1E:
000C7B64 4E75                       		rts	
000C7B66                            ; ===========================================================================
000C7B66                            
000C7B66                            loc_72E20:				; XREF: loc_72A64
000C7B66 0895 0003                  		bclr	#3,(a5)
000C7B6A 4E75                       		rts	
000C7B6C                            ; ===========================================================================
000C7B6C                            
000C7B6C                            loc_72E26:				; XREF: loc_72A64
000C7B6C 1B5C 000B                  		move.b	(a4)+,$B(a5)
000C7B70 4E75                       		rts	
000C7B72                            ; ===========================================================================
000C7B72                            
000C7B72                            loc_72E2C:				; XREF: loc_72A64
000C7B72 101C                       		move.b	(a4)+,d0
000C7B74 E148                       		lsl.w	#8,d0
000C7B76 101C                       		move.b	(a4)+,d0
000C7B78 D8C0                       		adda.w	d0,a4
000C7B7A 534C                       		subq.w	#1,a4
000C7B7C 4E75                       		rts	
000C7B7E                            ; ===========================================================================
000C7B7E                            
000C7B7E                            loc_72E38:				; XREF: loc_72A64
000C7B7E 7000                       		moveq	#0,d0
000C7B80 101C                       		move.b	(a4)+,d0
000C7B82 121C                       		move.b	(a4)+,d1
000C7B84 4A35 0024                  		tst.b	$24(a5,d0.w)
000C7B88 6600                       		bne.s	loc_72E48
000C7B8A 1B81 0024                  		move.b	d1,$24(a5,d0.w)
000C7B8E                            
000C7B8E                            loc_72E48:
000C7B8E 5335 0024                  		subq.b	#1,$24(a5,d0.w)
000C7B92 66DE                       		bne.s	loc_72E2C
000C7B94 544C                       		addq.w	#2,a4
000C7B96 4E75                       		rts	
000C7B98                            ; ===========================================================================
000C7B98                            
000C7B98                            loc_72E52:				; XREF: loc_72A64
000C7B98 7000                       		moveq	#0,d0
000C7B9A 102D 000D                  		move.b	$D(a5),d0
000C7B9E 5900                       		subq.b	#4,d0
000C7BA0 2B8C 0000                  		move.l	a4,(a5,d0.w)
000C7BA4 1B40 000D                  		move.b	d0,$D(a5)
000C7BA8 60C8                       		bra.s	loc_72E2C
000C7BAA                            ; ===========================================================================
000C7BAA                            
000C7BAA                            loc_72E64:				; XREF: loc_72A64
000C7BAA 103C 0088                  		move.b	#$88,d0
000C7BAE 123C 000F                  		move.b	#$F,d1
000C7BB2 4EBA F83A                  		jsr	sub_7272E(pc)
000C7BB6 103C 008C                  		move.b	#$8C,d0
000C7BBA 123C 000F                  		move.b	#$F,d1
000C7BBE 6000 F82E                  		bra.w	sub_7272E
000C7BC2                            ; ===========================================================================
000C7BC2                            Kos_Z80:	incbin	sound\z80_1.bin
000C7C72 3A46                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
000C7C74 21                         		dc.b $21
000C7C75 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
000C7C77                            		incbin	sound\z80_2.bin
000C9322                            		even
000C9322                            Music81:	incbin	sound\jahl.bin ; 	Green Hill Act 1
000CFB22                            		even
000CFB22                            Music82:	incbin	sound\music82.bin ; Labyrinth Act 1
000D93C0                            		even
000D93C0                            Music83:	incbin	sound\music83.bin ; Marble Act 1
000DCFE0 00                         		even
000DCFE0                            Music84:	include	sound\music84.asm ; Star Light Act 1
000DCFE0                            music84_Header:
000DCFE0 =00000001                  smpsHeaderStartSong = 1
000DCFE0 0000                       	smpsHeaderVoice     music84_Voices
000DCFE2 0603                       	smpsHeaderChan      $06, $03
000DCFE4 0205                       	smpsHeaderTempo     $02, $05
000DCFE6                            
000DCFEA 0000 0000                  	smpsHeaderFM        music84_FM1,	$00, $00
000DCFEE 0000 0000                  	smpsHeaderFM        music84_FM2,	$00, $00
000DCFF2 0000 0000                  	smpsHeaderFM        music84_FM3,	$00, $00
000DCFF6 0000 0000                  	smpsHeaderFM        music84_FM4,	$00, $00
000DCFFA 0000 0000                  	smpsHeaderFM        music84_FM5,	$00, $00
000DCFFE 0000 0000 0000             	smpsHeaderPSG       music84_PSG1,	$00, $00, $00, $00
000DD004 0000 0000 0000             	smpsHeaderPSG       music84_PSG2,	$00, $00, $00, $00
000DD00A 0000 0000 0000             	smpsHeaderPSG       music84_PSG3,	$00, $00, $00, $00
000DD010                            
000DD010                            ; FM1 Data
000DD010                            music84_FM1:
000DD010 E0C0                       	smpsPan             panCenter, $00
000DD014 E107                       	smpsAlterNote       $07
000DD016 9B03 8007                  	dc.b	nD2, $03, nRst, $07
000DD01A E106                       	smpsAlterNote       $06
000DD01C 9903 800B                  	dc.b	nC2, $03, nRst, $0B
000DD020 E10B                       	smpsAlterNote       $0B
000DD022 9606 800B A201             	dc.b	nA1, $06, nRst, $0B, nA2, $01
000DD028 E10C                       	smpsAlterNote       $0C
000DD02A E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD02D E10B                       	smpsAlterNote       $0B
000DD02F E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD032 E109                       	smpsAlterNote       $09
000DD034 E7A0 029E 01               	dc.b	smpsNoAttack, nG2, $02, nF2, $01
000DD039 E108                       	smpsAlterNote       $08
000DD03B 8001                       	dc.b	nRst, $01
000DD03D E10B                       	smpsAlterNote       $0B
000DD03F 9603 A203 8001             	dc.b	nA1, $03, nA2, $03, nRst, $01
000DD045 E107                       	smpsAlterNote       $07
000DD047 9B03                       	dc.b	nD2, $03
000DD049                            
000DD049                            music84_Jump04:
000DD049 E107                       	smpsAlterNote       $07
000DD04B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD04F E10B                       	smpsAlterNote       $0B
000DD051 A202 8001                  	dc.b	nA2, $02, nRst, $01
000DD055 E107                       	smpsAlterNote       $07
000DD057 9B03                       	dc.b	nD2, $03
000DD059 E11A                       	smpsAlterNote       $1A
000DD05B A301                       	dc.b	nBb2, $01
000DD05D E1F2                       	smpsAlterNote       $F2
000DD05F E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD062 E1FF                       	smpsAlterNote       $FF
000DD064 E701                       	dc.b	smpsNoAttack, $01
000DD066 E111                       	smpsAlterNote       $11
000DD068 E701                       	dc.b	smpsNoAttack, $01
000DD06A E106                       	smpsAlterNote       $06
000DD06C E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DD06F E107                       	smpsAlterNote       $07
000DD071 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD075 E108                       	smpsAlterNote       $08
000DD077 9C06 8001 9C02 8001        	dc.b	nEb2, $06, nRst, $01, nEb2, $02, nRst, $01
000DD07F E109                       	smpsAlterNote       $09
000DD081 A003                       	dc.b	nG2, $03
000DD083 E10C                       	smpsAlterNote       $0C
000DD085 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DD089 E1FD                       	smpsAlterNote       $FD
000DD08B A401                       	dc.b	nB2, $01
000DD08D E109                       	smpsAlterNote       $09
000DD08F E701                       	dc.b	smpsNoAttack, $01
000DD091 E106                       	smpsAlterNote       $06
000DD093 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD096 E109                       	smpsAlterNote       $09
000DD098 A007                       	dc.b	nG2, $07
000DD09A E108                       	smpsAlterNote       $08
000DD09C 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000DD0A0 E107                       	smpsAlterNote       $07
000DD0A2 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000DD0A8 E10B                       	smpsAlterNote       $0B
000DD0AA A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD0AE E107                       	smpsAlterNote       $07
000DD0B0 9B03                       	dc.b	nD2, $03
000DD0B2 E11A                       	smpsAlterNote       $1A
000DD0B4 A301                       	dc.b	nBb2, $01
000DD0B6 E1F9                       	smpsAlterNote       $F9
000DD0B8 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD0BB E107                       	smpsAlterNote       $07
000DD0BD E701                       	dc.b	smpsNoAttack, $01
000DD0BF E111                       	smpsAlterNote       $11
000DD0C1 E701                       	dc.b	smpsNoAttack, $01
000DD0C3 E106                       	smpsAlterNote       $06
000DD0C5 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000DD0CA E107                       	smpsAlterNote       $07
000DD0CC 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000DD0D4 E1EC                       	smpsAlterNote       $EC
000DD0D6 A101                       	dc.b	nAb2, $01
000DD0D8 E108                       	smpsAlterNote       $08
000DD0DA E701                       	dc.b	smpsNoAttack, $01
000DD0DC E116                       	smpsAlterNote       $16
000DD0DE E701                       	dc.b	smpsNoAttack, $01
000DD0E0 E1F5                       	smpsAlterNote       $F5
000DD0E2 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD0E5 E10B                       	smpsAlterNote       $0B
000DD0E7 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD0EB E107                       	smpsAlterNote       $07
000DD0ED 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000DD0F3 E109                       	smpsAlterNote       $09
000DD0F5 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000DD0F9 E10B                       	smpsAlterNote       $0B
000DD0FB 9603                       	dc.b	nA1, $03
000DD0FD E107                       	smpsAlterNote       $07
000DD0FF 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000DD105 E10B                       	smpsAlterNote       $0B
000DD107 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD10B E107                       	smpsAlterNote       $07
000DD10D 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD111 E11A                       	smpsAlterNote       $1A
000DD113 A301                       	dc.b	nBb2, $01
000DD115 E1F9                       	smpsAlterNote       $F9
000DD117 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD11A E107                       	smpsAlterNote       $07
000DD11C E701                       	dc.b	smpsNoAttack, $01
000DD11E E1FB                       	smpsAlterNote       $FB
000DD120 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD123 E106                       	smpsAlterNote       $06
000DD125 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD129 E107                       	smpsAlterNote       $07
000DD12B 9B03                       	dc.b	nD2, $03
000DD12D E108                       	smpsAlterNote       $08
000DD12F 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000DD135 E109                       	smpsAlterNote       $09
000DD137 A002 8001                  	dc.b	nG2, $02, nRst, $01
000DD13B E10C                       	smpsAlterNote       $0C
000DD13D A303                       	dc.b	nBb2, $03
000DD13F E1F0                       	smpsAlterNote       $F0
000DD141 A401                       	dc.b	nB2, $01
000DD143 E1FD                       	smpsAlterNote       $FD
000DD145 E701 E7A5 01               	dc.b	smpsNoAttack, $01, smpsNoAttack, nC3, $01
000DD14A E106                       	smpsAlterNote       $06
000DD14C 8001                       	dc.b	nRst, $01
000DD14E E109                       	smpsAlterNote       $09
000DD150 A006 8001                  	dc.b	nG2, $06, nRst, $01
000DD154 E108                       	smpsAlterNote       $08
000DD156 9C02 8001                  	dc.b	nEb2, $02, nRst, $01
000DD15A E107                       	smpsAlterNote       $07
000DD15C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD162 E10B                       	smpsAlterNote       $0B
000DD164 A203                       	dc.b	nA2, $03
000DD166 E107                       	smpsAlterNote       $07
000DD168 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD16C E1F2                       	smpsAlterNote       $F2
000DD16E A401                       	dc.b	nB2, $01
000DD170 E1FF                       	smpsAlterNote       $FF
000DD172 E701                       	dc.b	smpsNoAttack, $01
000DD174 E107                       	smpsAlterNote       $07
000DD176 E701                       	dc.b	smpsNoAttack, $01
000DD178 E1FB                       	smpsAlterNote       $FB
000DD17A E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD17D E106                       	smpsAlterNote       $06
000DD17F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD183 E107                       	smpsAlterNote       $07
000DD185 9B02 8001 A706 8001 9B03   	dc.b	nD2, $02, nRst, $01, nD3, $06, nRst, $01, nD2, $03
000DD18F E117                       	smpsAlterNote       $17
000DD191 A001                       	dc.b	nG2, $01
000DD193 E1FA                       	smpsAlterNote       $FA
000DD195 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD198 E108                       	smpsAlterNote       $08
000DD19A E701                       	dc.b	smpsNoAttack, $01
000DD19C E1E7                       	smpsAlterNote       $E7
000DD19E E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD1A1 E103                       	smpsAlterNote       $03
000DD1A3 E701                       	dc.b	smpsNoAttack, $01
000DD1A5 E10B                       	smpsAlterNote       $0B
000DD1A7 E702                       	dc.b	smpsNoAttack, $02
000DD1A9 E107                       	smpsAlterNote       $07
000DD1AB 9B03 8001 A702 8001        	dc.b	nD2, $03, nRst, $01, nD3, $02, nRst, $01
000DD1B3 E106                       	smpsAlterNote       $06
000DD1B5 9903 A503 8001             	dc.b	nC2, $03, nC3, $03, nRst, $01
000DD1BB E10C                       	smpsAlterNote       $0C
000DD1BD 9703 9703 8001             	dc.b	nBb1, $03, nBb1, $03, nRst, $01
000DD1C3 E109                       	smpsAlterNote       $09
000DD1C5 9E03                       	dc.b	nF2, $03
000DD1C7 E10C                       	smpsAlterNote       $0C
000DD1C9 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD1CD E1EA                       	smpsAlterNote       $EA
000DD1CF A201                       	dc.b	nA2, $01
000DD1D1 E106                       	smpsAlterNote       $06
000DD1D3 E701                       	dc.b	smpsNoAttack, $01
000DD1D5 E1E2                       	smpsAlterNote       $E2
000DD1D7 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD1DA E1F0                       	smpsAlterNote       $F0
000DD1DC E701                       	dc.b	smpsNoAttack, $01
000DD1DE E10C                       	smpsAlterNote       $0C
000DD1E0 E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000DD1EC E116                       	smpsAlterNote       $16
000DD1EE 9C01                       	dc.b	nEb2, $01
000DD1F0 E105                       	smpsAlterNote       $05
000DD1F2 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000DD1F5 E1F1                       	smpsAlterNote       $F1
000DD1F7 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD1FA E1FF                       	smpsAlterNote       $FF
000DD1FC E701                       	dc.b	smpsNoAttack, $01
000DD1FE E109                       	smpsAlterNote       $09
000DD200 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD204 E10C                       	smpsAlterNote       $0C
000DD206 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000DD212 9702 8001 9703             	dc.b	nBb1, $02, nRst, $01, nBb1, $03
000DD218 E109                       	smpsAlterNote       $09
000DD21A 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000DD21E E10C                       	smpsAlterNote       $0C
000DD220 9703                       	dc.b	nBb1, $03
000DD222 E11A                       	smpsAlterNote       $1A
000DD224 A101                       	dc.b	nAb2, $01
000DD226 E1FB                       	smpsAlterNote       $FB
000DD228 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD22B E10A                       	smpsAlterNote       $0A
000DD22D E701                       	dc.b	smpsNoAttack, $01
000DD22F E1E8                       	smpsAlterNote       $E8
000DD231 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD234 E106                       	smpsAlterNote       $06
000DD236 E701                       	dc.b	smpsNoAttack, $01
000DD238 E10C                       	smpsAlterNote       $0C
000DD23A E702 9703 8001 A306 9703+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nBb1, $03, nRst, $01
000DD246 E1F9                       	smpsAlterNote       $F9
000DD248 9D01                       	dc.b	nE2, $01
000DD24A E108                       	smpsAlterNote       $08
000DD24C E701                       	dc.b	smpsNoAttack, $01
000DD24E E1F6                       	smpsAlterNote       $F6
000DD250 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD253 E109                       	smpsAlterNote       $09
000DD255 E703 8001                  	dc.b	smpsNoAttack, $03, nRst, $01
000DD259 E10C                       	smpsAlterNote       $0C
000DD25B 9703 9703 8001 A302 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $02, nRst, $01, nBb1, $03
000DD267 E108                       	smpsAlterNote       $08
000DD269 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000DD26F E106                       	smpsAlterNote       $06
000DD271 A403 8001                  	dc.b	nB2, $03, nRst, $01
000DD275 E108                       	smpsAlterNote       $08
000DD277 9D03                       	dc.b	nE2, $03
000DD279 E1EB                       	smpsAlterNote       $EB
000DD27B A801                       	dc.b	nEb3, $01
000DD27D E109                       	smpsAlterNote       $09
000DD27F E701                       	dc.b	smpsNoAttack, $01
000DD281 E1FA                       	smpsAlterNote       $FA
000DD283 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000DD286 E108                       	smpsAlterNote       $08
000DD288 E703 8001 9D03 A907 9D03+  	dc.b	smpsNoAttack, $03, nRst, $01, nE2, $03, nE3, $07, nE2, $03, nRst, $01
000DD294 E1E9                       	smpsAlterNote       $E9
000DD296 A301                       	dc.b	nBb2, $01
000DD298 E107                       	smpsAlterNote       $07
000DD29A E701                       	dc.b	smpsNoAttack, $01
000DD29C E1F0                       	smpsAlterNote       $F0
000DD29E E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD2A1 E1F7                       	smpsAlterNote       $F7
000DD2A3 E701                       	dc.b	smpsNoAttack, $01
000DD2A5 E107                       	smpsAlterNote       $07
000DD2A7 E701                       	dc.b	smpsNoAttack, $01
000DD2A9 E106                       	smpsAlterNote       $06
000DD2AB E701                       	dc.b	smpsNoAttack, $01
000DD2AD E108                       	smpsAlterNote       $08
000DD2AF 9D03 8001 9D03             	dc.b	nE2, $03, nRst, $01, nE2, $03
000DD2B5 E106                       	smpsAlterNote       $06
000DD2B7 A403 8001                  	dc.b	nB2, $03, nRst, $01
000DD2BB E108                       	smpsAlterNote       $08
000DD2BD 9D03                       	dc.b	nE2, $03
000DD2BF E10B                       	smpsAlterNote       $0B
000DD2C1 9603 8001 9602 8001        	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01
000DD2C9 E108                       	smpsAlterNote       $08
000DD2CB 9D03                       	dc.b	nE2, $03
000DD2CD E10B                       	smpsAlterNote       $0B
000DD2CF 9603 8001                  	dc.b	nA1, $03, nRst, $01
000DD2D3 E113                       	smpsAlterNote       $13
000DD2D5 A001                       	dc.b	nG2, $01
000DD2D7 E118                       	smpsAlterNote       $18
000DD2D9 E701                       	dc.b	smpsNoAttack, $01
000DD2DB E1E9                       	smpsAlterNote       $E9
000DD2DD E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD2E0 E1F3                       	smpsAlterNote       $F3
000DD2E2 E701                       	dc.b	smpsNoAttack, $01
000DD2E4 E1FD                       	smpsAlterNote       $FD
000DD2E6 E701                       	dc.b	smpsNoAttack, $01
000DD2E8 E102                       	smpsAlterNote       $02
000DD2EA E701                       	dc.b	smpsNoAttack, $01
000DD2EC E107                       	smpsAlterNote       $07
000DD2EE 8001                       	dc.b	nRst, $01
000DD2F0 E10B                       	smpsAlterNote       $0B
000DD2F2 9603                       	dc.b	nA1, $03
000DD2F4 E10C                       	smpsAlterNote       $0C
000DD2F6 9706 8001 9703             	dc.b	nBb1, $06, nRst, $01, nBb1, $03
000DD2FC E10B                       	smpsAlterNote       $0B
000DD2FE 9603 8001 A206 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000DD30A 8001 9602 8001             	dc.b	nRst, $01, nA1, $02, nRst, $01
000DD310 E107                       	smpsAlterNote       $07
000DD312 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD318 E10B                       	smpsAlterNote       $0B
000DD31A A203                       	dc.b	nA2, $03
000DD31C E107                       	smpsAlterNote       $07
000DD31E 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD322 E1F2                       	smpsAlterNote       $F2
000DD324 A401                       	dc.b	nB2, $01
000DD326 E1FF                       	smpsAlterNote       $FF
000DD328 E701                       	dc.b	smpsNoAttack, $01
000DD32A E107                       	smpsAlterNote       $07
000DD32C E701                       	dc.b	smpsNoAttack, $01
000DD32E E1FB                       	smpsAlterNote       $FB
000DD330 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD333 E106                       	smpsAlterNote       $06
000DD335 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD339 E107                       	smpsAlterNote       $07
000DD33B 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD33F E108                       	smpsAlterNote       $08
000DD341 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000DD347 E109                       	smpsAlterNote       $09
000DD349 A003 8001                  	dc.b	nG2, $03, nRst, $01
000DD34D E10C                       	smpsAlterNote       $0C
000DD34F A302 8001                  	dc.b	nBb2, $02, nRst, $01
000DD353 E1F0                       	smpsAlterNote       $F0
000DD355 A401                       	dc.b	nB2, $01
000DD357 E109                       	smpsAlterNote       $09
000DD359 E701                       	dc.b	smpsNoAttack, $01
000DD35B E106                       	smpsAlterNote       $06
000DD35D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD360 E109                       	smpsAlterNote       $09
000DD362 A007                       	dc.b	nG2, $07
000DD364 E108                       	smpsAlterNote       $08
000DD366 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000DD36A E107                       	smpsAlterNote       $07
000DD36C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD372 E10B                       	smpsAlterNote       $0B
000DD374 A202 8001                  	dc.b	nA2, $02, nRst, $01
000DD378 E107                       	smpsAlterNote       $07
000DD37A 9B03                       	dc.b	nD2, $03
000DD37C E11A                       	smpsAlterNote       $1A
000DD37E A301                       	dc.b	nBb2, $01
000DD380 E1F2                       	smpsAlterNote       $F2
000DD382 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD385 E1FF                       	smpsAlterNote       $FF
000DD387 E701                       	dc.b	smpsNoAttack, $01
000DD389 E111                       	smpsAlterNote       $11
000DD38B E701                       	dc.b	smpsNoAttack, $01
000DD38D E106                       	smpsAlterNote       $06
000DD38F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DD392 E107                       	smpsAlterNote       $07
000DD394 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000DD3A0 E117                       	smpsAlterNote       $17
000DD3A2 A001                       	dc.b	nG2, $01
000DD3A4 E1FA                       	smpsAlterNote       $FA
000DD3A6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD3A9 E116                       	smpsAlterNote       $16
000DD3AB E701                       	dc.b	smpsNoAttack, $01
000DD3AD E1F5                       	smpsAlterNote       $F5
000DD3AF E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD3B2 E103                       	smpsAlterNote       $03
000DD3B4 E701                       	dc.b	smpsNoAttack, $01
000DD3B6 E10B                       	smpsAlterNote       $0B
000DD3B8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DD3BC E107                       	smpsAlterNote       $07
000DD3BE 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD3C4 E109                       	smpsAlterNote       $09
000DD3C6 9E03                       	dc.b	nF2, $03
000DD3C8 E10B                       	smpsAlterNote       $0B
000DD3CA 9603 8001                  	dc.b	nA1, $03, nRst, $01
000DD3CE E107                       	smpsAlterNote       $07
000DD3D0 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000DD3D6 E10B                       	smpsAlterNote       $0B
000DD3D8 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD3DC E107                       	smpsAlterNote       $07
000DD3DE 9B03                       	dc.b	nD2, $03
000DD3E0 E11A                       	smpsAlterNote       $1A
000DD3E2 A301                       	dc.b	nBb2, $01
000DD3E4 E1F9                       	smpsAlterNote       $F9
000DD3E6 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD3E9 E107                       	smpsAlterNote       $07
000DD3EB E701                       	dc.b	smpsNoAttack, $01
000DD3ED E111                       	smpsAlterNote       $11
000DD3EF E701                       	dc.b	smpsNoAttack, $01
000DD3F1 E106                       	smpsAlterNote       $06
000DD3F3 E7A5 0280 01               	dc.b	smpsNoAttack, nC3, $02, nRst, $01
000DD3F8 E107                       	smpsAlterNote       $07
000DD3FA 9B03                       	dc.b	nD2, $03
000DD3FC E108                       	smpsAlterNote       $08
000DD3FE 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000DD404 E109                       	smpsAlterNote       $09
000DD406 A003                       	dc.b	nG2, $03
000DD408 E10C                       	smpsAlterNote       $0C
000DD40A A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DD40E E1FD                       	smpsAlterNote       $FD
000DD410 A401 E7A5 01               	dc.b	nB2, $01, smpsNoAttack, nC3, $01
000DD415 E106                       	smpsAlterNote       $06
000DD417 8001                       	dc.b	nRst, $01
000DD419 E109                       	smpsAlterNote       $09
000DD41B A006 8001                  	dc.b	nG2, $06, nRst, $01
000DD41F E108                       	smpsAlterNote       $08
000DD421 9C03                       	dc.b	nEb2, $03
000DD423 E107                       	smpsAlterNote       $07
000DD425 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000DD42B E10B                       	smpsAlterNote       $0B
000DD42D A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD431 E107                       	smpsAlterNote       $07
000DD433 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD437 E11A                       	smpsAlterNote       $1A
000DD439 A301                       	dc.b	nBb2, $01
000DD43B E1F9                       	smpsAlterNote       $F9
000DD43D E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD440 E107                       	smpsAlterNote       $07
000DD442 E701                       	dc.b	smpsNoAttack, $01
000DD444 E1FB                       	smpsAlterNote       $FB
000DD446 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD449 E106                       	smpsAlterNote       $06
000DD44B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD44F E107                       	smpsAlterNote       $07
000DD451 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000DD459 E1EC                       	smpsAlterNote       $EC
000DD45B A101                       	dc.b	nAb2, $01
000DD45D E108                       	smpsAlterNote       $08
000DD45F E701                       	dc.b	smpsNoAttack, $01
000DD461 E1E7                       	smpsAlterNote       $E7
000DD463 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD466 E1F5                       	smpsAlterNote       $F5
000DD468 E701                       	dc.b	smpsNoAttack, $01
000DD46A E10B                       	smpsAlterNote       $0B
000DD46C E702                       	dc.b	smpsNoAttack, $02
000DD46E E107                       	smpsAlterNote       $07
000DD470 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000DD476 E106                       	smpsAlterNote       $06
000DD478 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000DD47E E10C                       	smpsAlterNote       $0C
000DD480 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000DD488 E109                       	smpsAlterNote       $09
000DD48A 9E03                       	dc.b	nF2, $03
000DD48C E10C                       	smpsAlterNote       $0C
000DD48E 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD492 E1EA                       	smpsAlterNote       $EA
000DD494 A201                       	dc.b	nA2, $01
000DD496 E106                       	smpsAlterNote       $06
000DD498 E701                       	dc.b	smpsNoAttack, $01
000DD49A E114                       	smpsAlterNote       $14
000DD49C E701                       	dc.b	smpsNoAttack, $01
000DD49E E1F0                       	smpsAlterNote       $F0
000DD4A0 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD4A3 E10C                       	smpsAlterNote       $0C
000DD4A5 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000DD4B1 9703                       	dc.b	nBb1, $03
000DD4B3 E116                       	smpsAlterNote       $16
000DD4B5 9C01                       	dc.b	nEb2, $01
000DD4B7 E105                       	smpsAlterNote       $05
000DD4B9 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000DD4BC E113                       	smpsAlterNote       $13
000DD4BE E701                       	dc.b	smpsNoAttack, $01
000DD4C0 E1FF                       	smpsAlterNote       $FF
000DD4C2 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD4C5 E109                       	smpsAlterNote       $09
000DD4C7 E703                       	dc.b	smpsNoAttack, $03
000DD4C9 E10C                       	smpsAlterNote       $0C
000DD4CB 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000DD4D7 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000DD4DF E109                       	smpsAlterNote       $09
000DD4E1 9E03                       	dc.b	nF2, $03
000DD4E3 E10C                       	smpsAlterNote       $0C
000DD4E5 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD4E9 E1EC                       	smpsAlterNote       $EC
000DD4EB A201                       	dc.b	nA2, $01
000DD4ED E10A                       	smpsAlterNote       $0A
000DD4EF E701                       	dc.b	smpsNoAttack, $01
000DD4F1 E1E8                       	smpsAlterNote       $E8
000DD4F3 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD4F6 E1F7                       	smpsAlterNote       $F7
000DD4F8 E701                       	dc.b	smpsNoAttack, $01
000DD4FA E10C                       	smpsAlterNote       $0C
000DD4FC E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000DD508 E1EA                       	smpsAlterNote       $EA
000DD50A 9D01                       	dc.b	nE2, $01
000DD50C E108                       	smpsAlterNote       $08
000DD50E E701                       	dc.b	smpsNoAttack, $01
000DD510 E1F6                       	smpsAlterNote       $F6
000DD512 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD515 E105                       	smpsAlterNote       $05
000DD517 E701                       	dc.b	smpsNoAttack, $01
000DD519 E109                       	smpsAlterNote       $09
000DD51B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD51F E10C                       	smpsAlterNote       $0C
000DD521 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $01
000DD52D E108                       	smpsAlterNote       $08
000DD52F 9D02 8001 9D03             	dc.b	nE2, $02, nRst, $01, nE2, $03
000DD535 E106                       	smpsAlterNote       $06
000DD537 A403 8001                  	dc.b	nB2, $03, nRst, $01
000DD53B E108                       	smpsAlterNote       $08
000DD53D 9D03                       	dc.b	nE2, $03
000DD53F E1EB                       	smpsAlterNote       $EB
000DD541 A801                       	dc.b	nEb3, $01
000DD543 E109                       	smpsAlterNote       $09
000DD545 E701                       	dc.b	smpsNoAttack, $01
000DD547 E1EB                       	smpsAlterNote       $EB
000DD549 E7A9 01                    	dc.b	smpsNoAttack, nE3, $01
000DD54C E108                       	smpsAlterNote       $08
000DD54E E704 9D03 8001 A906 9D03+  	dc.b	smpsNoAttack, $04, nE2, $03, nRst, $01, nE3, $06, nE2, $03, nRst, $01
000DD55A E1E9                       	smpsAlterNote       $E9
000DD55C A301                       	dc.b	nBb2, $01
000DD55E E1F8                       	smpsAlterNote       $F8
000DD560 E701                       	dc.b	smpsNoAttack, $01
000DD562 E116                       	smpsAlterNote       $16
000DD564 E701                       	dc.b	smpsNoAttack, $01
000DD566 E1F7                       	smpsAlterNote       $F7
000DD568 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD56B E107                       	smpsAlterNote       $07
000DD56D E701                       	dc.b	smpsNoAttack, $01
000DD56F E1EE                       	smpsAlterNote       $EE
000DD571 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD574 E106                       	smpsAlterNote       $06
000DD576 8001                       	dc.b	nRst, $01
000DD578 E108                       	smpsAlterNote       $08
000DD57A 9D03 9D03 8001             	dc.b	nE2, $03, nE2, $03, nRst, $01
000DD580 E106                       	smpsAlterNote       $06
000DD582 A402 8001                  	dc.b	nB2, $02, nRst, $01
000DD586 E108                       	smpsAlterNote       $08
000DD588 9D03                       	dc.b	nE2, $03
000DD58A E10B                       	smpsAlterNote       $0B
000DD58C 9603 8001 9603             	dc.b	nA1, $03, nRst, $01, nA1, $03
000DD592 E108                       	smpsAlterNote       $08
000DD594 9D03 8001                  	dc.b	nE2, $03, nRst, $01
000DD598 E10B                       	smpsAlterNote       $0B
000DD59A 9603                       	dc.b	nA1, $03
000DD59C E10E                       	smpsAlterNote       $0E
000DD59E A001                       	dc.b	nG2, $01
000DD5A0 E118                       	smpsAlterNote       $18
000DD5A2 E701                       	dc.b	smpsNoAttack, $01
000DD5A4 E1E9                       	smpsAlterNote       $E9
000DD5A6 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD5A9 E1EE                       	smpsAlterNote       $EE
000DD5AB E701                       	dc.b	smpsNoAttack, $01
000DD5AD E1F8                       	smpsAlterNote       $F8
000DD5AF E701                       	dc.b	smpsNoAttack, $01
000DD5B1 E102                       	smpsAlterNote       $02
000DD5B3 E701                       	dc.b	smpsNoAttack, $01
000DD5B5 E107                       	smpsAlterNote       $07
000DD5B7 8001                       	dc.b	nRst, $01
000DD5B9 E10B                       	smpsAlterNote       $0B
000DD5BB 9603                       	dc.b	nA1, $03
000DD5BD E10C                       	smpsAlterNote       $0C
000DD5BF 9707 9703 8001             	dc.b	nBb1, $07, nBb1, $03, nRst, $01
000DD5C5 E10B                       	smpsAlterNote       $0B
000DD5C7 9602 8001 A206 8001 9603+  	dc.b	nA1, $02, nRst, $01, nA2, $06, nRst, $01, nA1, $03, nA2, $03
000DD5D3 8001 9603                  	dc.b	nRst, $01, nA1, $03
000DD5D7 E10C                       	smpsAlterNote       $0C
000DD5D9 9706 800F 9703 9703 8019+  	dc.b	nBb1, $06, nRst, $0F, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $02
000DD5E5 8001                       	dc.b	nRst, $01
000DD5E7 E10B                       	smpsAlterNote       $0B
000DD5E9 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000DD5F1 E107                       	smpsAlterNote       $07
000DD5F3 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000DD5F7 E10B                       	smpsAlterNote       $0B
000DD5F9 9603                       	dc.b	nA1, $03
000DD5FB E109                       	smpsAlterNote       $09
000DD5FD 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000DD601 E108                       	smpsAlterNote       $08
000DD603 9D06                       	dc.b	nE2, $06
000DD605 E107                       	smpsAlterNote       $07
000DD607 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD60B E106                       	smpsAlterNote       $06
000DD60D 9903                       	dc.b	nC2, $03
000DD60F E10C                       	smpsAlterNote       $0C
000DD611 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD615 E10B                       	smpsAlterNote       $0B
000DD617 9603 9603 8001 9602 8001+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000DD623 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000DD62D E10C                       	smpsAlterNote       $0C
000DD62F 9706 8001 9702 8001 9703+  	dc.b	nBb1, $06, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03
000DD63B 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000DD647 8001                       	dc.b	nRst, $01
000DD649 E10B                       	smpsAlterNote       $0B
000DD64B 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000DD657 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $07
000DD663 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $02
000DD66F 8001 9603 9603 8001 9603   	dc.b	nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000DD679 E10C                       	smpsAlterNote       $0C
000DD67B 9707 800E 9703 9703 8019+  	dc.b	nBb1, $07, nRst, $0E, nBb1, $03, nBb1, $03, nRst, $19, nBb1, $03
000DD687 E10B                       	smpsAlterNote       $0B
000DD689 9606 800F 9602 8001        	dc.b	nA1, $06, nRst, $0F, nA1, $02, nRst, $01
000DD691 E107                       	smpsAlterNote       $07
000DD693 9B06 8001                  	dc.b	nD2, $06, nRst, $01
000DD697 E10B                       	smpsAlterNote       $0B
000DD699 9603                       	dc.b	nA1, $03
000DD69B E109                       	smpsAlterNote       $09
000DD69D 9E03 8001                  	dc.b	nF2, $03, nRst, $01
000DD6A1 E108                       	smpsAlterNote       $08
000DD6A3 9D06 8001                  	dc.b	nE2, $06, nRst, $01
000DD6A7 E107                       	smpsAlterNote       $07
000DD6A9 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD6AD E106                       	smpsAlterNote       $06
000DD6AF 9903                       	dc.b	nC2, $03
000DD6B1 E10C                       	smpsAlterNote       $0C
000DD6B3 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD6B7 E10B                       	smpsAlterNote       $0B
000DD6B9 9603 9603 8001 9603 9603+  	dc.b	nA1, $03, nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000DD6C5 9602 8001 9603 9603 8001   	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000DD6CF E10C                       	smpsAlterNote       $0C
000DD6D1 9706 8001 9703 9703 8001+  	dc.b	nBb1, $06, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02
000DD6DD 8001 9703 9703 8001 9703+  	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03
000DD6E9 8001                       	dc.b	nRst, $01
000DD6EB E10B                       	smpsAlterNote       $0B
000DD6ED 9602 8001 9603 9603 8001+  	dc.b	nA1, $02, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000DD6F9 9603 8001 9603 9603 8001   	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01
000DD703 E10C                       	smpsAlterNote       $0C
000DD705 9706 9703 8001 9703 9703+  	dc.b	nBb1, $06, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000DD711 9703 9703 8001 9702 8001+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb1, $03
000DD71D E10B                       	smpsAlterNote       $0B
000DD71F 9603 8001 9603 9603 8001+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nA1, $03, nRst, $01, nA1, $03
000DD72B 9603 8001 9602 8001 9603   	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03
000DD735 E10C                       	smpsAlterNote       $0C
000DD737 9707 9703 8001 9703 9703+  	dc.b	nBb1, $07, nBb1, $03, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000DD743 9702 8001 9703 9703 8001+  	dc.b	nBb1, $02, nRst, $01, nBb1, $03, nBb1, $03, nRst, $01, nBb1, $03
000DD74F E10B                       	smpsAlterNote       $0B
000DD751 9603 8001 9602 8001 9603+  	dc.b	nA1, $03, nRst, $01, nA1, $02, nRst, $01, nA1, $03, nA1, $03
000DD75D 8001                       	dc.b	nRst, $01
000DD75F E1EC                       	smpsAlterNote       $EC
000DD761 A101                       	dc.b	nAb2, $01
000DD763 E1FA                       	smpsAlterNote       $FA
000DD765 E701                       	dc.b	smpsNoAttack, $01
000DD767 E116                       	smpsAlterNote       $16
000DD769 E701                       	dc.b	smpsNoAttack, $01
000DD76B E1F5                       	smpsAlterNote       $F5
000DD76D E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD770 E10B                       	smpsAlterNote       $0B
000DD772 E702 8001 9603 9606 8001+  	dc.b	smpsNoAttack, $02, nRst, $01, nA1, $03, nA1, $06, nRst, $01, nA1, $03
000DD77E 9603 8001 9603 800B 9602+  	dc.b	nA1, $03, nRst, $01, nA1, $03, nRst, $0B, nA1, $02, nRst, $01
000DD78A E107                       	smpsAlterNote       $07
000DD78C 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD792 E10B                       	smpsAlterNote       $0B
000DD794 A203                       	dc.b	nA2, $03
000DD796 E107                       	smpsAlterNote       $07
000DD798 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD79C E1F3                       	smpsAlterNote       $F3
000DD79E A401                       	dc.b	nB2, $01
000DD7A0 E102                       	smpsAlterNote       $02
000DD7A2 E701                       	dc.b	smpsNoAttack, $01
000DD7A4 E109                       	smpsAlterNote       $09
000DD7A6 E701                       	dc.b	smpsNoAttack, $01
000DD7A8 E102                       	smpsAlterNote       $02
000DD7AA E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD7AD E106                       	smpsAlterNote       $06
000DD7AF E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD7B3 E107                       	smpsAlterNote       $07
000DD7B5 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD7B9 E108                       	smpsAlterNote       $08
000DD7BB 9C06 8001 9C03             	dc.b	nEb2, $06, nRst, $01, nEb2, $03
000DD7C1 E109                       	smpsAlterNote       $09
000DD7C3 A003 8001                  	dc.b	nG2, $03, nRst, $01
000DD7C7 E1F2                       	smpsAlterNote       $F2
000DD7C9 A401                       	dc.b	nB2, $01
000DD7CB E1FF                       	smpsAlterNote       $FF
000DD7CD E701                       	dc.b	smpsNoAttack, $01
000DD7CF E111                       	smpsAlterNote       $11
000DD7D1 E701                       	dc.b	smpsNoAttack, $01
000DD7D3 E1FB                       	smpsAlterNote       $FB
000DD7D5 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD7D8 E106                       	smpsAlterNote       $06
000DD7DA E702                       	dc.b	smpsNoAttack, $02
000DD7DC E109                       	smpsAlterNote       $09
000DD7DE A007                       	dc.b	nG2, $07
000DD7E0 E108                       	smpsAlterNote       $08
000DD7E2 9C03 8001                  	dc.b	nEb2, $03, nRst, $01
000DD7E6 E107                       	smpsAlterNote       $07
000DD7E8 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD7EE E10B                       	smpsAlterNote       $0B
000DD7F0 A202 8001                  	dc.b	nA2, $02, nRst, $01
000DD7F4 E107                       	smpsAlterNote       $07
000DD7F6 9B03                       	dc.b	nD2, $03
000DD7F8 E11A                       	smpsAlterNote       $1A
000DD7FA A301                       	dc.b	nBb2, $01
000DD7FC E1F2                       	smpsAlterNote       $F2
000DD7FE E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD801 E1FF                       	smpsAlterNote       $FF
000DD803 E701                       	dc.b	smpsNoAttack, $01
000DD805 E111                       	smpsAlterNote       $11
000DD807 E701                       	dc.b	smpsNoAttack, $01
000DD809 E106                       	smpsAlterNote       $06
000DD80B E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DD80E E107                       	smpsAlterNote       $07
000DD810 9B03 8001 A706 8001 9B02+  	dc.b	nD2, $03, nRst, $01, nD3, $06, nRst, $01, nD2, $02, nRst, $01
000DD81C E117                       	smpsAlterNote       $17
000DD81E A001                       	dc.b	nG2, $01
000DD820 E1FA                       	smpsAlterNote       $FA
000DD822 E7A1 01                    	dc.b	smpsNoAttack, nAb2, $01
000DD825 E116                       	smpsAlterNote       $16
000DD827 E701                       	dc.b	smpsNoAttack, $01
000DD829 E1F5                       	smpsAlterNote       $F5
000DD82B E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD82E E103                       	smpsAlterNote       $03
000DD830 E701                       	dc.b	smpsNoAttack, $01
000DD832 E10B                       	smpsAlterNote       $0B
000DD834 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DD838 E107                       	smpsAlterNote       $07
000DD83A 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DD840 E109                       	smpsAlterNote       $09
000DD842 9E03                       	dc.b	nF2, $03
000DD844 E10B                       	smpsAlterNote       $0B
000DD846 9603 8001                  	dc.b	nA1, $03, nRst, $01
000DD84A E107                       	smpsAlterNote       $07
000DD84C 9B02 8001 9B03             	dc.b	nD2, $02, nRst, $01, nD2, $03
000DD852 E10B                       	smpsAlterNote       $0B
000DD854 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD858 E107                       	smpsAlterNote       $07
000DD85A 9B03                       	dc.b	nD2, $03
000DD85C E11A                       	smpsAlterNote       $1A
000DD85E A301                       	dc.b	nBb2, $01
000DD860 E1F9                       	smpsAlterNote       $F9
000DD862 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD865 E1FF                       	smpsAlterNote       $FF
000DD867 E701                       	dc.b	smpsNoAttack, $01
000DD869 E111                       	smpsAlterNote       $11
000DD86B E701                       	dc.b	smpsNoAttack, $01
000DD86D E106                       	smpsAlterNote       $06
000DD86F E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DD872 E107                       	smpsAlterNote       $07
000DD874 9B03                       	dc.b	nD2, $03
000DD876 E108                       	smpsAlterNote       $08
000DD878 9C07 9C03 8001             	dc.b	nEb2, $07, nEb2, $03, nRst, $01
000DD87E E109                       	smpsAlterNote       $09
000DD880 A003                       	dc.b	nG2, $03
000DD882 E1F0                       	smpsAlterNote       $F0
000DD884 A501                       	dc.b	nC3, $01
000DD886 E106                       	smpsAlterNote       $06
000DD888 E705 8001                  	dc.b	smpsNoAttack, $05, nRst, $01
000DD88C E109                       	smpsAlterNote       $09
000DD88E A006 8001                  	dc.b	nG2, $06, nRst, $01
000DD892 E108                       	smpsAlterNote       $08
000DD894 9C03                       	dc.b	nEb2, $03
000DD896 E107                       	smpsAlterNote       $07
000DD898 9B03 8001 9B03             	dc.b	nD2, $03, nRst, $01, nD2, $03
000DD89E E10B                       	smpsAlterNote       $0B
000DD8A0 A203 8001                  	dc.b	nA2, $03, nRst, $01
000DD8A4 E107                       	smpsAlterNote       $07
000DD8A6 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DD8AA E11A                       	smpsAlterNote       $1A
000DD8AC A301                       	dc.b	nBb2, $01
000DD8AE E1F9                       	smpsAlterNote       $F9
000DD8B0 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD8B3 E107                       	smpsAlterNote       $07
000DD8B5 E701                       	dc.b	smpsNoAttack, $01
000DD8B7 E1FB                       	smpsAlterNote       $FB
000DD8B9 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DD8BC E106                       	smpsAlterNote       $06
000DD8BE E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD8C2 E107                       	smpsAlterNote       $07
000DD8C4 9B03 A707 9B03 8001        	dc.b	nD2, $03, nD3, $07, nD2, $03, nRst, $01
000DD8CC E1EC                       	smpsAlterNote       $EC
000DD8CE A101                       	dc.b	nAb2, $01
000DD8D0 E108                       	smpsAlterNote       $08
000DD8D2 E701                       	dc.b	smpsNoAttack, $01
000DD8D4 E1E7                       	smpsAlterNote       $E7
000DD8D6 E7A2 01                    	dc.b	smpsNoAttack, nA2, $01
000DD8D9 E1F5                       	smpsAlterNote       $F5
000DD8DB E701                       	dc.b	smpsNoAttack, $01
000DD8DD E10B                       	smpsAlterNote       $0B
000DD8DF E702                       	dc.b	smpsNoAttack, $02
000DD8E1 E107                       	smpsAlterNote       $07
000DD8E3 9B03 8001 A703             	dc.b	nD2, $03, nRst, $01, nD3, $03
000DD8E9 E106                       	smpsAlterNote       $06
000DD8EB 9903 8001 A503             	dc.b	nC2, $03, nRst, $01, nC3, $03
000DD8F1 E10C                       	smpsAlterNote       $0C
000DD8F3 9703 8001 9702 8001        	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01
000DD8FB E109                       	smpsAlterNote       $09
000DD8FD 9E03                       	dc.b	nF2, $03
000DD8FF E10C                       	smpsAlterNote       $0C
000DD901 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD905 E1EA                       	smpsAlterNote       $EA
000DD907 A201                       	dc.b	nA2, $01
000DD909 E106                       	smpsAlterNote       $06
000DD90B E701                       	dc.b	smpsNoAttack, $01
000DD90D E114                       	smpsAlterNote       $14
000DD90F E701                       	dc.b	smpsNoAttack, $01
000DD911 E1F0                       	smpsAlterNote       $F0
000DD913 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD916 E10C                       	smpsAlterNote       $0C
000DD918 E702 8001 9702 8001 A306+  	dc.b	smpsNoAttack, $02, nRst, $01, nBb1, $02, nRst, $01, nBb2, $06, nRst, $01
000DD924 9703                       	dc.b	nBb1, $03
000DD926 E116                       	smpsAlterNote       $16
000DD928 9C01                       	dc.b	nEb2, $01
000DD92A E105                       	smpsAlterNote       $05
000DD92C E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000DD92F E113                       	smpsAlterNote       $13
000DD931 E701                       	dc.b	smpsNoAttack, $01
000DD933 E1FF                       	smpsAlterNote       $FF
000DD935 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD938 E109                       	smpsAlterNote       $09
000DD93A E703                       	dc.b	smpsNoAttack, $03
000DD93C E10C                       	smpsAlterNote       $0C
000DD93E 9703 8001 9702 8001 A303+  	dc.b	nBb1, $03, nRst, $01, nBb1, $02, nRst, $01, nBb2, $03, nBb1, $03
000DD94A 8001 9703 9703 8001        	dc.b	nRst, $01, nBb1, $03, nBb1, $03, nRst, $01
000DD952 E109                       	smpsAlterNote       $09
000DD954 9E03                       	dc.b	nF2, $03
000DD956 E10C                       	smpsAlterNote       $0C
000DD958 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DD95C E1EA                       	smpsAlterNote       $EA
000DD95E A201                       	dc.b	nA2, $01
000DD960 E106                       	smpsAlterNote       $06
000DD962 E701                       	dc.b	smpsNoAttack, $01
000DD964 E1E2                       	smpsAlterNote       $E2
000DD966 E7A3 01                    	dc.b	smpsNoAttack, nBb2, $01
000DD969 E1F0                       	smpsAlterNote       $F0
000DD96B E701                       	dc.b	smpsNoAttack, $01
000DD96D E10C                       	smpsAlterNote       $0C
000DD96F E702 9703 8001 A306 8001+  	dc.b	smpsNoAttack, $02, nBb1, $03, nRst, $01, nBb2, $06, nRst, $01, nBb1, $03
000DD97B E116                       	smpsAlterNote       $16
000DD97D 9C01                       	dc.b	nEb2, $01
000DD97F E105                       	smpsAlterNote       $05
000DD981 E79D 01                    	dc.b	smpsNoAttack, nE2, $01
000DD984 E1F1                       	smpsAlterNote       $F1
000DD986 E79E 01                    	dc.b	smpsNoAttack, nF2, $01
000DD989 E1FF                       	smpsAlterNote       $FF
000DD98B E701                       	dc.b	smpsNoAttack, $01
000DD98D E109                       	smpsAlterNote       $09
000DD98F E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DD993 E10C                       	smpsAlterNote       $0C
000DD995 9703 9703 8001 A303 9703+  	dc.b	nBb1, $03, nBb1, $03, nRst, $01, nBb2, $03, nBb1, $03, nRst, $04
000DD9A1 E106                       	smpsAlterNote       $06
000DD9A3 9903                       	dc.b	nC2, $03
000DD9A5 E107                       	smpsAlterNote       $07
000DD9A7 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD9AB E109                       	smpsAlterNote       $09
000DD9AD 8003 940D 8004             	dc.b	nRst, $03, nG1, $0D, nRst, $04
000DD9B3 E107                       	smpsAlterNote       $07
000DD9B5 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DD9B9 E108                       	smpsAlterNote       $08
000DD9BB 9D03                       	dc.b	nE2, $03
000DD9BD E10B                       	smpsAlterNote       $0B
000DD9BF 8004 960D 8004             	dc.b	nRst, $04, nA1, $0D, nRst, $04
000DD9C5 E109                       	smpsAlterNote       $09
000DD9C7 9E03 A003 8001             	dc.b	nF2, $03, nG2, $03, nRst, $01
000DD9CD E10C                       	smpsAlterNote       $0C
000DD9CF 8003 970D 8001             	dc.b	nRst, $03, nBb1, $0D, nRst, $01
000DD9D5 E106                       	smpsAlterNote       $06
000DD9D7 9903                       	dc.b	nC2, $03
000DD9D9 E11A                       	smpsAlterNote       $1A
000DD9DB A301                       	dc.b	nBb2, $01
000DD9DD E1F9                       	smpsAlterNote       $F9
000DD9DF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DD9E2 E1FF                       	smpsAlterNote       $FF
000DD9E4 E701                       	dc.b	smpsNoAttack, $01
000DD9E6 E111                       	smpsAlterNote       $11
000DD9E8 E701                       	dc.b	smpsNoAttack, $01
000DD9EA E106                       	smpsAlterNote       $06
000DD9EC E7A5 0399 0380 04          	dc.b	smpsNoAttack, nC3, $03, nC2, $03, nRst, $04
000DD9F3 E109                       	smpsAlterNote       $09
000DD9F5 A003                       	dc.b	nG2, $03
000DD9F7 E106                       	smpsAlterNote       $06
000DD9F9 9907                       	dc.b	nC2, $07
000DD9FB E107                       	smpsAlterNote       $07
000DD9FD 9B03 8001 9B02 8001        	dc.b	nD2, $03, nRst, $01, nD2, $02, nRst, $01
000DDA05 E10B                       	smpsAlterNote       $0B
000DDA07 A203                       	dc.b	nA2, $03
000DDA09 E107                       	smpsAlterNote       $07
000DDA0B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DDA0F E1F2                       	smpsAlterNote       $F2
000DDA11 A401                       	dc.b	nB2, $01
000DDA13 E1F9                       	smpsAlterNote       $F9
000DDA15 E701                       	dc.b	smpsNoAttack, $01
000DDA17 E107                       	smpsAlterNote       $07
000DDA19 E701                       	dc.b	smpsNoAttack, $01
000DDA1B E1FB                       	smpsAlterNote       $FB
000DDA1D E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DDA20 E106                       	smpsAlterNote       $06
000DDA22 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DDA26 E107                       	smpsAlterNote       $07
000DDA28 9B03                       	dc.b	nD2, $03
000DDA2A E108                       	smpsAlterNote       $08
000DDA2C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000DDA32 E109                       	smpsAlterNote       $09
000DDA34 A003 8001                  	dc.b	nG2, $03, nRst, $01
000DDA38 E1F2                       	smpsAlterNote       $F2
000DDA3A A401                       	dc.b	nB2, $01
000DDA3C E1F9                       	smpsAlterNote       $F9
000DDA3E E701                       	dc.b	smpsNoAttack, $01
000DDA40 E107                       	smpsAlterNote       $07
000DDA42 E701                       	dc.b	smpsNoAttack, $01
000DDA44 E1FB                       	smpsAlterNote       $FB
000DDA46 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DDA49 E106                       	smpsAlterNote       $06
000DDA4B E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DDA4F E108                       	smpsAlterNote       $08
000DDA51 9C06 8001                  	dc.b	nEb2, $06, nRst, $01
000DDA55 E10C                       	smpsAlterNote       $0C
000DDA57 A302 8001                  	dc.b	nBb2, $02, nRst, $01
000DDA5B E107                       	smpsAlterNote       $07
000DDA5D 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DDA63 E10B                       	smpsAlterNote       $0B
000DDA65 A203                       	dc.b	nA2, $03
000DDA67 E107                       	smpsAlterNote       $07
000DDA69 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DDA6D E1F2                       	smpsAlterNote       $F2
000DDA6F A401                       	dc.b	nB2, $01
000DDA71 E1FF                       	smpsAlterNote       $FF
000DDA73 E701                       	dc.b	smpsNoAttack, $01
000DDA75 E107                       	smpsAlterNote       $07
000DDA77 E701                       	dc.b	smpsNoAttack, $01
000DDA79 E1FB                       	smpsAlterNote       $FB
000DDA7B E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DDA7E E106                       	smpsAlterNote       $06
000DDA80 E702 8001                  	dc.b	smpsNoAttack, $02, nRst, $01
000DDA84 E107                       	smpsAlterNote       $07
000DDA86 9B02 8001                  	dc.b	nD2, $02, nRst, $01
000DDA8A E108                       	smpsAlterNote       $08
000DDA8C 9C06 8001 A803             	dc.b	nEb2, $06, nRst, $01, nEb3, $03
000DDA92 E109                       	smpsAlterNote       $09
000DDA94 A003 8001                  	dc.b	nG2, $03, nRst, $01
000DDA98 E1F2                       	smpsAlterNote       $F2
000DDA9A A401                       	dc.b	nB2, $01
000DDA9C E1FF                       	smpsAlterNote       $FF
000DDA9E E701                       	dc.b	smpsNoAttack, $01
000DDAA0 E111                       	smpsAlterNote       $11
000DDAA2 E701                       	dc.b	smpsNoAttack, $01
000DDAA4 E1FB                       	smpsAlterNote       $FB
000DDAA6 E7A5 01                    	dc.b	smpsNoAttack, nC3, $01
000DDAA9 E106                       	smpsAlterNote       $06
000DDAAB E702                       	dc.b	smpsNoAttack, $02
000DDAAD E108                       	smpsAlterNote       $08
000DDAAF 9C07                       	dc.b	nEb2, $07
000DDAB1 E10C                       	smpsAlterNote       $0C
000DDAB3 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DDAB7 E107                       	smpsAlterNote       $07
000DDAB9 9B03 9B03 8001             	dc.b	nD2, $03, nD2, $03, nRst, $01
000DDABF E10B                       	smpsAlterNote       $0B
000DDAC1 A202 8001                  	dc.b	nA2, $02, nRst, $01
000DDAC5 E107                       	smpsAlterNote       $07
000DDAC7 9B03                       	dc.b	nD2, $03
000DDAC9 E11A                       	smpsAlterNote       $1A
000DDACB A301                       	dc.b	nBb2, $01
000DDACD E1F2                       	smpsAlterNote       $F2
000DDACF E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DDAD2 E1FF                       	smpsAlterNote       $FF
000DDAD4 E701                       	dc.b	smpsNoAttack, $01
000DDAD6 E111                       	smpsAlterNote       $11
000DDAD8 E701                       	dc.b	smpsNoAttack, $01
000DDADA E106                       	smpsAlterNote       $06
000DDADC E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DDADF E107                       	smpsAlterNote       $07
000DDAE1 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DDAE5 E108                       	smpsAlterNote       $08
000DDAE7 9C06 8001 A802 8001        	dc.b	nEb2, $06, nRst, $01, nEb3, $02, nRst, $01
000DDAEF E109                       	smpsAlterNote       $09
000DDAF1 A003                       	dc.b	nG2, $03
000DDAF3 E11A                       	smpsAlterNote       $1A
000DDAF5 A301                       	dc.b	nBb2, $01
000DDAF7 E1F2                       	smpsAlterNote       $F2
000DDAF9 E7A4 01                    	dc.b	smpsNoAttack, nB2, $01
000DDAFC E1FF                       	smpsAlterNote       $FF
000DDAFE E701                       	dc.b	smpsNoAttack, $01
000DDB00 E111                       	smpsAlterNote       $11
000DDB02 E701                       	dc.b	smpsNoAttack, $01
000DDB04 E106                       	smpsAlterNote       $06
000DDB06 E7A5 03                    	dc.b	smpsNoAttack, nC3, $03
000DDB09 E108                       	smpsAlterNote       $08
000DDB0B 9C07                       	dc.b	nEb2, $07
000DDB0D E10C                       	smpsAlterNote       $0C
000DDB0F A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DDB13 E107                       	smpsAlterNote       $07
000DDB15 9B02 8001 9B03 9B03 8001+  	dc.b	nD2, $02, nRst, $01, nD2, $03, nD2, $03, nRst, $01, nD2, $03
000DDB21 9B03 8001 9B03 9B03 8001   	dc.b	nD2, $03, nRst, $01, nD2, $03, nD2, $03, nRst, $01
000DDB2B E108                       	smpsAlterNote       $08
000DDB2D 9C06                       	dc.b	nEb2, $06
000DDB2F E10C                       	smpsAlterNote       $0C
000DDB31 9703 8001                  	dc.b	nBb1, $03, nRst, $01
000DDB35 E108                       	smpsAlterNote       $08
000DDB37 9C03                       	dc.b	nEb2, $03
000DDB39 E109                       	smpsAlterNote       $09
000DDB3B A003 8001                  	dc.b	nG2, $03, nRst, $01
000DDB3F E10C                       	smpsAlterNote       $0C
000DDB41 A302 8001 A303 8007        	dc.b	nBb2, $02, nRst, $01, nBb2, $03, nRst, $07
000DDB49 E107                       	smpsAlterNote       $07
000DDB4B 9B03 8001                  	dc.b	nD2, $03, nRst, $01
000DDB4F F6F4 F8                    	smpsJump            music84_Jump04
000DDB52                            
000DDB52                            ; FM2 Data
000DDB52                            music84_FM2:
000DDB52 E0C0                       	smpsPan             panCenter, $00
000DDB56 E10B                       	smpsAlterNote       $0B
000DDB58 C603 8007                  	dc.b	nA5, $03, nRst, $07
000DDB5C E109                       	smpsAlterNote       $09
000DDB5E C403 800B                  	dc.b	nG5, $03, nRst, $0B
000DDB62 E108                       	smpsAlterNote       $08
000DDB64 C103 8004                  	dc.b	nE5, $03, nRst, $04
000DDB6A E080                       	smpsPan             panLeft, $00
000DDB6C E10C                       	smpsAlterNote       $0C
000DDB6E E6F9                       	smpsAlterVol        $F9
000DDB70 C703                       	dc.b	nBb5, $03
000DDB72 E10B                       	smpsAlterNote       $0B
000DDB74 C603 8001                  	dc.b	nA5, $03, nRst, $01
000DDB78 E109                       	smpsAlterNote       $09
000DDB7A C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000DDB80 E108                       	smpsAlterNote       $08
000DDB82 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DDB86 E106                       	smpsAlterNote       $06
000DDB88 BD03                       	dc.b	nC5, $03
000DDB8A E10B                       	smpsAlterNote       $0B
000DDB8C BA03 8001                  	dc.b	nA4, $03, nRst, $01
000DDB92 E0C0                       	smpsPan             panCenter, $00
000DDB94 E107                       	smpsAlterNote       $07
000DDB96 E606                       	smpsAlterVol        $06
000DDB98 BF03                       	dc.b	nD5, $03
000DDB9A                            
000DDB9A                            music84_Jump03:
000DDB9A E108                       	smpsAlterNote       $08
000DDB9C C103 8001                  	dc.b	nE5, $03, nRst, $01
000DDBA0 E109                       	smpsAlterNote       $09
000DDBA2 C202 8001 C403             	dc.b	nF5, $02, nRst, $01, nG5, $03
000DDBA8 E10B                       	smpsAlterNote       $0B
000DDBAA C607                       	dc.b	nA5, $07
000DDBAC E107                       	smpsAlterNote       $07
000DDBAE BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DDBB2 E106                       	smpsAlterNote       $06
000DDBB4 C90D                       	dc.b	nC6, $0D
000DDBB6 E100                       	smpsAlterNote       $00
000DDBB8 E701                       	dc.b	smpsNoAttack, $01
000DDBBA E1FF                       	smpsAlterNote       $FF
000DDBBC E701                       	dc.b	smpsNoAttack, $01
000DDBBE E103                       	smpsAlterNote       $03
000DDBC0 E701                       	dc.b	smpsNoAttack, $01
000DDBC2 E109                       	smpsAlterNote       $09
000DDBC4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDBC8 E106                       	smpsAlterNote       $06
000DDBCA E701                       	dc.b	smpsNoAttack, $01
000DDBCC E100                       	smpsAlterNote       $00
000DDBCE E701                       	dc.b	smpsNoAttack, $01
000DDBD0 E10C                       	smpsAlterNote       $0C
000DDBD2 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DDBD6 E10B                       	smpsAlterNote       $0B
000DDBD8 C603                       	dc.b	nA5, $03
000DDBDA E109                       	smpsAlterNote       $09
000DDBDC C403 8001                  	dc.b	nG5, $03, nRst, $01
000DDBE0 E10B                       	smpsAlterNote       $0B
000DDBE2 C60D                       	dc.b	nA5, $0D
000DDBE4 E105                       	smpsAlterNote       $05
000DDBE6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDBEA E10B                       	smpsAlterNote       $0B
000DDBEC E701                       	dc.b	smpsNoAttack, $01
000DDBEE E10E                       	smpsAlterNote       $0E
000DDBF0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDBF4 E108                       	smpsAlterNote       $08
000DDBF6 E701                       	dc.b	smpsNoAttack, $01
000DDBF8 E104                       	smpsAlterNote       $04
000DDBFA E701                       	dc.b	smpsNoAttack, $01
000DDBFC E105                       	smpsAlterNote       $05
000DDBFE E701                       	dc.b	smpsNoAttack, $01
000DDC00 E10B                       	smpsAlterNote       $0B
000DDC02 E701                       	dc.b	smpsNoAttack, $01
000DDC04 E10F                       	smpsAlterNote       $0F
000DDC06 E701                       	dc.b	smpsNoAttack, $01
000DDC08 E10B                       	smpsAlterNote       $0B
000DDC0A E701                       	dc.b	smpsNoAttack, $01
000DDC0C E108                       	smpsAlterNote       $08
000DDC0E E701                       	dc.b	smpsNoAttack, $01
000DDC10 E104                       	smpsAlterNote       $04
000DDC12 E701                       	dc.b	smpsNoAttack, $01
000DDC14 E108                       	smpsAlterNote       $08
000DDC16 E701                       	dc.b	smpsNoAttack, $01
000DDC18 E10E                       	smpsAlterNote       $0E
000DDC1A E701                       	dc.b	smpsNoAttack, $01
000DDC1C E10F                       	smpsAlterNote       $0F
000DDC1E E701                       	dc.b	smpsNoAttack, $01
000DDC20 E10B                       	smpsAlterNote       $0B
000DDC22 E701                       	dc.b	smpsNoAttack, $01
000DDC24 E105                       	smpsAlterNote       $05
000DDC26 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC2A E108                       	smpsAlterNote       $08
000DDC2C E701                       	dc.b	smpsNoAttack, $01
000DDC2E E10E                       	smpsAlterNote       $0E
000DDC30 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC34 E108                       	smpsAlterNote       $08
000DDC36 E701                       	dc.b	smpsNoAttack, $01
000DDC38 E105                       	smpsAlterNote       $05
000DDC3A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDC3E E10B                       	smpsAlterNote       $0B
000DDC40 E701                       	dc.b	smpsNoAttack, $01
000DDC42 E10F                       	smpsAlterNote       $0F
000DDC44 E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000DDC48 E107                       	smpsAlterNote       $07
000DDC4A BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DDC4E E108                       	smpsAlterNote       $08
000DDC50 C103                       	dc.b	nE5, $03
000DDC52 E109                       	smpsAlterNote       $09
000DDC54 C203 8001 C402 8001        	dc.b	nF5, $03, nRst, $01, nG5, $02, nRst, $01
000DDC5C E10B                       	smpsAlterNote       $0B
000DDC5E C606 8001                  	dc.b	nA5, $06, nRst, $01
000DDC62 E107                       	smpsAlterNote       $07
000DDC64 BF03                       	dc.b	nD5, $03
000DDC66 E106                       	smpsAlterNote       $06
000DDC68 C90D 8001                  	dc.b	nC6, $0D, nRst, $01
000DDC6C E107                       	smpsAlterNote       $07
000DDC6E CB03                       	dc.b	nD6, $03
000DDC70 E10C                       	smpsAlterNote       $0C
000DDC72 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000DDC76 E10B                       	smpsAlterNote       $0B
000DDC78 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DDC7C E109                       	smpsAlterNote       $09
000DDC7E C404                       	dc.b	nG5, $04
000DDC80 E10B                       	smpsAlterNote       $0B
000DDC82 C60D                       	dc.b	nA5, $0D
000DDC84 E108                       	smpsAlterNote       $08
000DDC86 E701                       	dc.b	smpsNoAttack, $01
000DDC88 E104                       	smpsAlterNote       $04
000DDC8A E701                       	dc.b	smpsNoAttack, $01
000DDC8C E108                       	smpsAlterNote       $08
000DDC8E E701                       	dc.b	smpsNoAttack, $01
000DDC90 E10B                       	smpsAlterNote       $0B
000DDC92 E701                       	dc.b	smpsNoAttack, $01
000DDC94 E10F                       	smpsAlterNote       $0F
000DDC96 E701                       	dc.b	smpsNoAttack, $01
000DDC98 E10B                       	smpsAlterNote       $0B
000DDC9A E701                       	dc.b	smpsNoAttack, $01
000DDC9C E105                       	smpsAlterNote       $05
000DDC9E E701                       	dc.b	smpsNoAttack, $01
000DDCA0 E104                       	smpsAlterNote       $04
000DDCA2 E701                       	dc.b	smpsNoAttack, $01
000DDCA4 E108                       	smpsAlterNote       $08
000DDCA6 E701                       	dc.b	smpsNoAttack, $01
000DDCA8 E10E                       	smpsAlterNote       $0E
000DDCAA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDCAE E10B                       	smpsAlterNote       $0B
000DDCB0 E701                       	dc.b	smpsNoAttack, $01
000DDCB2 E105                       	smpsAlterNote       $05
000DDCB4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDCB8 E10B                       	smpsAlterNote       $0B
000DDCBA E701                       	dc.b	smpsNoAttack, $01
000DDCBC E10E                       	smpsAlterNote       $0E
000DDCBE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDCC2 E108                       	smpsAlterNote       $08
000DDCC4 E701                       	dc.b	smpsNoAttack, $01
000DDCC6 E104                       	smpsAlterNote       $04
000DDCC8 E701                       	dc.b	smpsNoAttack, $01
000DDCCA E105                       	smpsAlterNote       $05
000DDCCC E701                       	dc.b	smpsNoAttack, $01
000DDCCE E10B                       	smpsAlterNote       $0B
000DDCD0 E701                       	dc.b	smpsNoAttack, $01
000DDCD2 E10F                       	smpsAlterNote       $0F
000DDCD4 E701                       	dc.b	smpsNoAttack, $01
000DDCD6 E10B                       	smpsAlterNote       $0B
000DDCD8 E701                       	dc.b	smpsNoAttack, $01
000DDCDA E108                       	smpsAlterNote       $08
000DDCDC E701                       	dc.b	smpsNoAttack, $01
000DDCDE E105                       	smpsAlterNote       $05
000DDCE0 8001                       	dc.b	nRst, $01
000DDCE2 E109                       	smpsAlterNote       $09
000DDCE4 C401                       	dc.b	nG5, $01
000DDCE6 E10B                       	smpsAlterNote       $0B
000DDCE8 E7C5 02C6 0D80 01C6 04     	dc.b	smpsNoAttack, nAb5, $02, nA5, $0D, nRst, $01, nA5, $04
000DDCF1 E109                       	smpsAlterNote       $09
000DDCF3 C404 8001                  	dc.b	nG5, $04, nRst, $01
000DDCF7 E10B                       	smpsAlterNote       $0B
000DDCF9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DDCFD E107                       	smpsAlterNote       $07
000DDCFF BF0D                       	dc.b	nD5, $0D
000DDD01 E101                       	smpsAlterNote       $01
000DDD03 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD07 E104                       	smpsAlterNote       $04
000DDD09 E701                       	dc.b	smpsNoAttack, $01
000DDD0B E10A                       	smpsAlterNote       $0A
000DDD0D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD11 E104                       	smpsAlterNote       $04
000DDD13 E701                       	dc.b	smpsNoAttack, $01
000DDD15 E101                       	smpsAlterNote       $01
000DDD17 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD1B E107                       	smpsAlterNote       $07
000DDD1D E701                       	dc.b	smpsNoAttack, $01
000DDD1F E10B                       	smpsAlterNote       $0B
000DDD21 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DDD25 E108                       	smpsAlterNote       $08
000DDD27 C101                       	dc.b	nE5, $01
000DDD29 E109                       	smpsAlterNote       $09
000DDD2B E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000DDD30 E10B                       	smpsAlterNote       $0B
000DDD32 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000DDD3A E108                       	smpsAlterNote       $08
000DDD3C CD06                       	dc.b	nE6, $06
000DDD3E E109                       	smpsAlterNote       $09
000DDD40 CE07                       	dc.b	nF6, $07
000DDD42 E108                       	smpsAlterNote       $08
000DDD44 CD03 8001                  	dc.b	nE6, $03, nRst, $01
000DDD48 E106                       	smpsAlterNote       $06
000DDD4A C903                       	dc.b	nC6, $03
000DDD4C E109                       	smpsAlterNote       $09
000DDD4E C403 8001                  	dc.b	nG5, $03, nRst, $01
000DDD52 E10C                       	smpsAlterNote       $0C
000DDD54 C70D                       	dc.b	nBb5, $0D
000DDD56 E106                       	smpsAlterNote       $06
000DDD58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD5C E109                       	smpsAlterNote       $09
000DDD5E E701                       	dc.b	smpsNoAttack, $01
000DDD60 E10F                       	smpsAlterNote       $0F
000DDD62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD66 E109                       	smpsAlterNote       $09
000DDD68 E701                       	dc.b	smpsNoAttack, $01
000DDD6A E106                       	smpsAlterNote       $06
000DDD6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD70 E10C                       	smpsAlterNote       $0C
000DDD72 E701                       	dc.b	smpsNoAttack, $01
000DDD74 E110                       	smpsAlterNote       $10
000DDD76 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DDD7A E10B                       	smpsAlterNote       $0B
000DDD7C C606 C50E                  	dc.b	nA5, $06, nAb5, $0E
000DDD80 E105                       	smpsAlterNote       $05
000DDD82 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD86 E10B                       	smpsAlterNote       $0B
000DDD88 E701                       	dc.b	smpsNoAttack, $01
000DDD8A E10E                       	smpsAlterNote       $0E
000DDD8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDD90 E108                       	smpsAlterNote       $08
000DDD92 E701                       	dc.b	smpsNoAttack, $01
000DDD94 E104                       	smpsAlterNote       $04
000DDD96 E701                       	dc.b	smpsNoAttack, $01
000DDD98 E105                       	smpsAlterNote       $05
000DDD9A E701                       	dc.b	smpsNoAttack, $01
000DDD9C E10B                       	smpsAlterNote       $0B
000DDD9E E701                       	dc.b	smpsNoAttack, $01
000DDDA0 E10F                       	smpsAlterNote       $0F
000DDDA2 E701                       	dc.b	smpsNoAttack, $01
000DDDA4 E10B                       	smpsAlterNote       $0B
000DDDA6 E701                       	dc.b	smpsNoAttack, $01
000DDDA8 E108                       	smpsAlterNote       $08
000DDDAA E701                       	dc.b	smpsNoAttack, $01
000DDDAC E104                       	smpsAlterNote       $04
000DDDAE E701                       	dc.b	smpsNoAttack, $01
000DDDB0 E108                       	smpsAlterNote       $08
000DDDB2 E701                       	dc.b	smpsNoAttack, $01
000DDDB4 E10E                       	smpsAlterNote       $0E
000DDDB6 E701                       	dc.b	smpsNoAttack, $01
000DDDB8 E10F                       	smpsAlterNote       $0F
000DDDBA E701                       	dc.b	smpsNoAttack, $01
000DDDBC E10B                       	smpsAlterNote       $0B
000DDDBE E701                       	dc.b	smpsNoAttack, $01
000DDDC0 E105                       	smpsAlterNote       $05
000DDDC2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDDC6 E108                       	smpsAlterNote       $08
000DDDC8 E701                       	dc.b	smpsNoAttack, $01
000DDDCA E10E                       	smpsAlterNote       $0E
000DDDCC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDDD0 E108                       	smpsAlterNote       $08
000DDDD2 E701                       	dc.b	smpsNoAttack, $01
000DDDD4 E105                       	smpsAlterNote       $05
000DDDD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDDDA E10B                       	smpsAlterNote       $0B
000DDDDC E701                       	dc.b	smpsNoAttack, $01
000DDDDE E10F                       	smpsAlterNote       $0F
000DDDE0 E701                       	dc.b	smpsNoAttack, $01
000DDDE2 E10E                       	smpsAlterNote       $0E
000DDDE4 E701                       	dc.b	smpsNoAttack, $01
000DDDE6 E108                       	smpsAlterNote       $08
000DDDE8 E701                       	dc.b	smpsNoAttack, $01
000DDDEA E104                       	smpsAlterNote       $04
000DDDEC E701                       	dc.b	smpsNoAttack, $01
000DDDEE E108                       	smpsAlterNote       $08
000DDDF0 E701                       	dc.b	smpsNoAttack, $01
000DDDF2 E10E                       	smpsAlterNote       $0E
000DDDF4 E701                       	dc.b	smpsNoAttack, $01
000DDDF6 E10F                       	smpsAlterNote       $0F
000DDDF8 E701                       	dc.b	smpsNoAttack, $01
000DDDFA E10B                       	smpsAlterNote       $0B
000DDDFC E701                       	dc.b	smpsNoAttack, $01
000DDDFE E105                       	smpsAlterNote       $05
000DDE00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDE04 E108                       	smpsAlterNote       $08
000DDE06 E701                       	dc.b	smpsNoAttack, $01
000DDE08 E10E                       	smpsAlterNote       $0E
000DDE0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDE0E E108                       	smpsAlterNote       $08
000DDE10 E701                       	dc.b	smpsNoAttack, $01
000DDE12 E105                       	smpsAlterNote       $05
000DDE14 E701                       	dc.b	smpsNoAttack, $01
000DDE16 E10B                       	smpsAlterNote       $0B
000DDE18 C60D                       	dc.b	nA5, $0D
000DDE1A E108                       	smpsAlterNote       $08
000DDE1C E701                       	dc.b	smpsNoAttack, $01
000DDE1E E104                       	smpsAlterNote       $04
000DDE20 E701                       	dc.b	smpsNoAttack, $01
000DDE22 E105                       	smpsAlterNote       $05
000DDE24 E701                       	dc.b	smpsNoAttack, $01
000DDE26 E10B                       	smpsAlterNote       $0B
000DDE28 E701                       	dc.b	smpsNoAttack, $01
000DDE2A E10F                       	smpsAlterNote       $0F
000DDE2C E701                       	dc.b	smpsNoAttack, $01
000DDE2E E10B                       	smpsAlterNote       $0B
000DDE30 E701                       	dc.b	smpsNoAttack, $01
000DDE32 E108                       	smpsAlterNote       $08
000DDE34 E701                       	dc.b	smpsNoAttack, $01
000DDE36 E104                       	smpsAlterNote       $04
000DDE38 E701                       	dc.b	smpsNoAttack, $01
000DDE3A E108                       	smpsAlterNote       $08
000DDE3C E701                       	dc.b	smpsNoAttack, $01
000DDE3E E10E                       	smpsAlterNote       $0E
000DDE40 E701                       	dc.b	smpsNoAttack, $01
000DDE42 E10F                       	smpsAlterNote       $0F
000DDE44 E701                       	dc.b	smpsNoAttack, $01
000DDE48 E109                       	smpsAlterNote       $09
000DDE4A E6FF                       	smpsAlterVol        $FF
000DDE4C C206 8001 C203 C203 8001   	dc.b	nF5, $06, nRst, $01, nF5, $03, nF5, $03, nRst, $01
000DDE56 E108                       	smpsAlterNote       $08
000DDE58 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000DDE5E E107                       	smpsAlterNote       $07
000DDE60 E601                       	smpsAlterVol        $01
000DDE62 BF03                       	dc.b	nD5, $03
000DDE64 E108                       	smpsAlterNote       $08
000DDE66 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DDE6A E109                       	smpsAlterNote       $09
000DDE6C C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000DDE72 E10B                       	smpsAlterNote       $0B
000DDE74 C606 8001                  	dc.b	nA5, $06, nRst, $01
000DDE78 E107                       	smpsAlterNote       $07
000DDE7A BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DDE7E E106                       	smpsAlterNote       $06
000DDE80 C90D                       	dc.b	nC6, $0D
000DDE82 E103                       	smpsAlterNote       $03
000DDE84 E701                       	dc.b	smpsNoAttack, $01
000DDE86 E1FF                       	smpsAlterNote       $FF
000DDE88 E701                       	dc.b	smpsNoAttack, $01
000DDE8A E103                       	smpsAlterNote       $03
000DDE8C E701                       	dc.b	smpsNoAttack, $01
000DDE8E E109                       	smpsAlterNote       $09
000DDE90 E701                       	dc.b	smpsNoAttack, $01
000DDE92 E10A                       	smpsAlterNote       $0A
000DDE94 E701                       	dc.b	smpsNoAttack, $01
000DDE96 E106                       	smpsAlterNote       $06
000DDE98 E701                       	dc.b	smpsNoAttack, $01
000DDE9A E100                       	smpsAlterNote       $00
000DDE9C E701                       	dc.b	smpsNoAttack, $01
000DDE9E E10C                       	smpsAlterNote       $0C
000DDEA0 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DDEA4 E10B                       	smpsAlterNote       $0B
000DDEA6 C603                       	dc.b	nA5, $03
000DDEA8 E109                       	smpsAlterNote       $09
000DDEAA C403 8001                  	dc.b	nG5, $03, nRst, $01
000DDEAE E10B                       	smpsAlterNote       $0B
000DDEB0 C60D                       	dc.b	nA5, $0D
000DDEB2 E105                       	smpsAlterNote       $05
000DDEB4 E701                       	dc.b	smpsNoAttack, $01
000DDEB6 E104                       	smpsAlterNote       $04
000DDEB8 E701                       	dc.b	smpsNoAttack, $01
000DDEBA E108                       	smpsAlterNote       $08
000DDEBC E701                       	dc.b	smpsNoAttack, $01
000DDEBE E10E                       	smpsAlterNote       $0E
000DDEC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDEC4 E10B                       	smpsAlterNote       $0B
000DDEC6 E701                       	dc.b	smpsNoAttack, $01
000DDEC8 E105                       	smpsAlterNote       $05
000DDECA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDECE E10B                       	smpsAlterNote       $0B
000DDED0 E701                       	dc.b	smpsNoAttack, $01
000DDED2 E10E                       	smpsAlterNote       $0E
000DDED4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDED8 E108                       	smpsAlterNote       $08
000DDEDA E701                       	dc.b	smpsNoAttack, $01
000DDEDC E104                       	smpsAlterNote       $04
000DDEDE E701                       	dc.b	smpsNoAttack, $01
000DDEE0 E105                       	smpsAlterNote       $05
000DDEE2 E701                       	dc.b	smpsNoAttack, $01
000DDEE4 E10B                       	smpsAlterNote       $0B
000DDEE6 E701                       	dc.b	smpsNoAttack, $01
000DDEE8 E10F                       	smpsAlterNote       $0F
000DDEEA E701                       	dc.b	smpsNoAttack, $01
000DDEEC E10B                       	smpsAlterNote       $0B
000DDEEE E701                       	dc.b	smpsNoAttack, $01
000DDEF0 E108                       	smpsAlterNote       $08
000DDEF2 E701                       	dc.b	smpsNoAttack, $01
000DDEF4 E104                       	smpsAlterNote       $04
000DDEF6 E701                       	dc.b	smpsNoAttack, $01
000DDEF8 E108                       	smpsAlterNote       $08
000DDEFA E701                       	dc.b	smpsNoAttack, $01
000DDEFC E10E                       	smpsAlterNote       $0E
000DDEFE E701                       	dc.b	smpsNoAttack, $01
000DDF00 E10F                       	smpsAlterNote       $0F
000DDF02 E701                       	dc.b	smpsNoAttack, $01
000DDF04 E10B                       	smpsAlterNote       $0B
000DDF06 E701                       	dc.b	smpsNoAttack, $01
000DDF08 E105                       	smpsAlterNote       $05
000DDF0A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF0E E108                       	smpsAlterNote       $08
000DDF10 E701                       	dc.b	smpsNoAttack, $01
000DDF12 E10E                       	smpsAlterNote       $0E
000DDF14 E701                       	dc.b	smpsNoAttack, $01
000DDF16 E10F                       	smpsAlterNote       $0F
000DDF18 800F                       	dc.b	nRst, $0F
000DDF1A E107                       	smpsAlterNote       $07
000DDF1C BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DDF20 E108                       	smpsAlterNote       $08
000DDF22 C103                       	dc.b	nE5, $03
000DDF24 E109                       	smpsAlterNote       $09
000DDF26 C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000DDF2C E10B                       	smpsAlterNote       $0B
000DDF2E C606 8001                  	dc.b	nA5, $06, nRst, $01
000DDF32 E107                       	smpsAlterNote       $07
000DDF34 BF03                       	dc.b	nD5, $03
000DDF36 E106                       	smpsAlterNote       $06
000DDF38 C90E                       	dc.b	nC6, $0E
000DDF3A E107                       	smpsAlterNote       $07
000DDF3C CB03 8001                  	dc.b	nD6, $03, nRst, $01
000DDF40 E10C                       	smpsAlterNote       $0C
000DDF42 C704                       	dc.b	nBb5, $04
000DDF44 E10B                       	smpsAlterNote       $0B
000DDF46 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DDF4A E109                       	smpsAlterNote       $09
000DDF4C C404                       	dc.b	nG5, $04
000DDF4E E10B                       	smpsAlterNote       $0B
000DDF50 C60D                       	dc.b	nA5, $0D
000DDF52 E108                       	smpsAlterNote       $08
000DDF54 E701                       	dc.b	smpsNoAttack, $01
000DDF56 E105                       	smpsAlterNote       $05
000DDF58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF5C E10B                       	smpsAlterNote       $0B
000DDF5E E701                       	dc.b	smpsNoAttack, $01
000DDF60 E10F                       	smpsAlterNote       $0F
000DDF62 E701                       	dc.b	smpsNoAttack, $01
000DDF64 E10E                       	smpsAlterNote       $0E
000DDF66 E701                       	dc.b	smpsNoAttack, $01
000DDF68 E108                       	smpsAlterNote       $08
000DDF6A E701                       	dc.b	smpsNoAttack, $01
000DDF6C E104                       	smpsAlterNote       $04
000DDF6E E701                       	dc.b	smpsNoAttack, $01
000DDF70 E108                       	smpsAlterNote       $08
000DDF72 E701                       	dc.b	smpsNoAttack, $01
000DDF74 E10B                       	smpsAlterNote       $0B
000DDF76 E701                       	dc.b	smpsNoAttack, $01
000DDF78 E10F                       	smpsAlterNote       $0F
000DDF7A E701                       	dc.b	smpsNoAttack, $01
000DDF7C E10B                       	smpsAlterNote       $0B
000DDF7E E701                       	dc.b	smpsNoAttack, $01
000DDF80 E105                       	smpsAlterNote       $05
000DDF82 E701                       	dc.b	smpsNoAttack, $01
000DDF84 E104                       	smpsAlterNote       $04
000DDF86 E701                       	dc.b	smpsNoAttack, $01
000DDF88 E108                       	smpsAlterNote       $08
000DDF8A E701                       	dc.b	smpsNoAttack, $01
000DDF8C E10E                       	smpsAlterNote       $0E
000DDF8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF92 E10B                       	smpsAlterNote       $0B
000DDF94 E701                       	dc.b	smpsNoAttack, $01
000DDF96 E105                       	smpsAlterNote       $05
000DDF98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDF9C E10B                       	smpsAlterNote       $0B
000DDF9E E701                       	dc.b	smpsNoAttack, $01
000DDFA0 E10E                       	smpsAlterNote       $0E
000DDFA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDFA6 E108                       	smpsAlterNote       $08
000DDFA8 E701                       	dc.b	smpsNoAttack, $01
000DDFAA E105                       	smpsAlterNote       $05
000DDFAC 8001                       	dc.b	nRst, $01
000DDFAE E109                       	smpsAlterNote       $09
000DDFB0 C402                       	dc.b	nG5, $02
000DDFB2 E10B                       	smpsAlterNote       $0B
000DDFB4 E7C5 01C6 0EC6 0480 01     	dc.b	smpsNoAttack, nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000DDFBD E109                       	smpsAlterNote       $09
000DDFBF C404                       	dc.b	nG5, $04
000DDFC1 E10B                       	smpsAlterNote       $0B
000DDFC3 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DDFC7 E107                       	smpsAlterNote       $07
000DDFC9 BF0D                       	dc.b	nD5, $0D
000DDFCB E101                       	smpsAlterNote       $01
000DDFCD E701                       	dc.b	smpsNoAttack, $01
000DDFCF E100                       	smpsAlterNote       $00
000DDFD1 E701                       	dc.b	smpsNoAttack, $01
000DDFD3 E104                       	smpsAlterNote       $04
000DDFD5 E701                       	dc.b	smpsNoAttack, $01
000DDFD7 E10A                       	smpsAlterNote       $0A
000DDFD9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDFDD E107                       	smpsAlterNote       $07
000DDFDF E701                       	dc.b	smpsNoAttack, $01
000DDFE1 E101                       	smpsAlterNote       $01
000DDFE3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DDFE7 E107                       	smpsAlterNote       $07
000DDFE9 E701                       	dc.b	smpsNoAttack, $01
000DDFEB E10A                       	smpsAlterNote       $0A
000DDFED E701                       	dc.b	smpsNoAttack, $01
000DDFEF E10B                       	smpsAlterNote       $0B
000DDFF1 8001                       	dc.b	nRst, $01
000DDFF3 E108                       	smpsAlterNote       $08
000DDFF5 C101                       	dc.b	nE5, $01
000DDFF7 E109                       	smpsAlterNote       $09
000DDFF9 E7C2 01C4 01               	dc.b	smpsNoAttack, nF5, $01, nG5, $01
000DDFFE E10B                       	smpsAlterNote       $0B
000DE000 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000DE008 E108                       	smpsAlterNote       $08
000DE00A CD06 8001                  	dc.b	nE6, $06, nRst, $01
000DE00E E109                       	smpsAlterNote       $09
000DE010 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000DE014 E108                       	smpsAlterNote       $08
000DE016 CD02 8001                  	dc.b	nE6, $02, nRst, $01
000DE01A E106                       	smpsAlterNote       $06
000DE01C C903                       	dc.b	nC6, $03
000DE01E E109                       	smpsAlterNote       $09
000DE020 C403 8001                  	dc.b	nG5, $03, nRst, $01
000DE024 E10C                       	smpsAlterNote       $0C
000DE026 C70D                       	dc.b	nBb5, $0D
000DE028 E109                       	smpsAlterNote       $09
000DE02A E701                       	dc.b	smpsNoAttack, $01
000DE02C E105                       	smpsAlterNote       $05
000DE02E E701                       	dc.b	smpsNoAttack, $01
000DE030 E109                       	smpsAlterNote       $09
000DE032 E701                       	dc.b	smpsNoAttack, $01
000DE034 E10F                       	smpsAlterNote       $0F
000DE036 E701                       	dc.b	smpsNoAttack, $01
000DE038 E110                       	smpsAlterNote       $10
000DE03A E701                       	dc.b	smpsNoAttack, $01
000DE03C E10C                       	smpsAlterNote       $0C
000DE03E E701                       	dc.b	smpsNoAttack, $01
000DE040 E106                       	smpsAlterNote       $06
000DE042 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE046 E109                       	smpsAlterNote       $09
000DE048 E701                       	dc.b	smpsNoAttack, $01
000DE04A E10F                       	smpsAlterNote       $0F
000DE04C E701                       	dc.b	smpsNoAttack, $01
000DE04E E110                       	smpsAlterNote       $10
000DE050 8001                       	dc.b	nRst, $01
000DE052 E10B                       	smpsAlterNote       $0B
000DE054 C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000DE05A E105                       	smpsAlterNote       $05
000DE05C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE060 E108                       	smpsAlterNote       $08
000DE062 E701                       	dc.b	smpsNoAttack, $01
000DE064 E10E                       	smpsAlterNote       $0E
000DE066 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE06A E108                       	smpsAlterNote       $08
000DE06C E701                       	dc.b	smpsNoAttack, $01
000DE06E E105                       	smpsAlterNote       $05
000DE070 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE074 E10B                       	smpsAlterNote       $0B
000DE076 E701                       	dc.b	smpsNoAttack, $01
000DE078 E10F                       	smpsAlterNote       $0F
000DE07A E701                       	dc.b	smpsNoAttack, $01
000DE07C E10E                       	smpsAlterNote       $0E
000DE07E E701                       	dc.b	smpsNoAttack, $01
000DE080 E108                       	smpsAlterNote       $08
000DE082 E701                       	dc.b	smpsNoAttack, $01
000DE084 E104                       	smpsAlterNote       $04
000DE086 E701                       	dc.b	smpsNoAttack, $01
000DE088 E108                       	smpsAlterNote       $08
000DE08A E701                       	dc.b	smpsNoAttack, $01
000DE08C E10B                       	smpsAlterNote       $0B
000DE08E E701                       	dc.b	smpsNoAttack, $01
000DE090 E10F                       	smpsAlterNote       $0F
000DE092 E701                       	dc.b	smpsNoAttack, $01
000DE094 E10B                       	smpsAlterNote       $0B
000DE096 E701                       	dc.b	smpsNoAttack, $01
000DE098 E105                       	smpsAlterNote       $05
000DE09A E701                       	dc.b	smpsNoAttack, $01
000DE09C E104                       	smpsAlterNote       $04
000DE09E E701                       	dc.b	smpsNoAttack, $01
000DE0A0 E108                       	smpsAlterNote       $08
000DE0A2 E701                       	dc.b	smpsNoAttack, $01
000DE0A4 E10E                       	smpsAlterNote       $0E
000DE0A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0AA E10B                       	smpsAlterNote       $0B
000DE0AC E701                       	dc.b	smpsNoAttack, $01
000DE0AE E105                       	smpsAlterNote       $05
000DE0B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0B4 E10B                       	smpsAlterNote       $0B
000DE0B6 E701                       	dc.b	smpsNoAttack, $01
000DE0B8 E10E                       	smpsAlterNote       $0E
000DE0BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0BE E108                       	smpsAlterNote       $08
000DE0C0 E701                       	dc.b	smpsNoAttack, $01
000DE0C2 E104                       	smpsAlterNote       $04
000DE0C4 E701                       	dc.b	smpsNoAttack, $01
000DE0C6 E105                       	smpsAlterNote       $05
000DE0C8 E701                       	dc.b	smpsNoAttack, $01
000DE0CA E10B                       	smpsAlterNote       $0B
000DE0CC E701                       	dc.b	smpsNoAttack, $01
000DE0CE E10F                       	smpsAlterNote       $0F
000DE0D0 E701                       	dc.b	smpsNoAttack, $01
000DE0D2 E10B                       	smpsAlterNote       $0B
000DE0D4 E701                       	dc.b	smpsNoAttack, $01
000DE0D6 E108                       	smpsAlterNote       $08
000DE0D8 E701                       	dc.b	smpsNoAttack, $01
000DE0DA E104                       	smpsAlterNote       $04
000DE0DC E701                       	dc.b	smpsNoAttack, $01
000DE0DE E108                       	smpsAlterNote       $08
000DE0E0 E701                       	dc.b	smpsNoAttack, $01
000DE0E2 E10E                       	smpsAlterNote       $0E
000DE0E4 E701                       	dc.b	smpsNoAttack, $01
000DE0E6 E10F                       	smpsAlterNote       $0F
000DE0E8 E701                       	dc.b	smpsNoAttack, $01
000DE0EA E10B                       	smpsAlterNote       $0B
000DE0EC E701                       	dc.b	smpsNoAttack, $01
000DE0EE E105                       	smpsAlterNote       $05
000DE0F0 E701                       	dc.b	smpsNoAttack, $01
000DE0F2 E10B                       	smpsAlterNote       $0B
000DE0F4 C60E                       	dc.b	nA5, $0E
000DE0F6 E105                       	smpsAlterNote       $05
000DE0F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE0FC E10B                       	smpsAlterNote       $0B
000DE0FE E701                       	dc.b	smpsNoAttack, $01
000DE100 E10E                       	smpsAlterNote       $0E
000DE102 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE106 E108                       	smpsAlterNote       $08
000DE108 E701                       	dc.b	smpsNoAttack, $01
000DE10A E104                       	smpsAlterNote       $04
000DE10C E701                       	dc.b	smpsNoAttack, $01
000DE10E E105                       	smpsAlterNote       $05
000DE110 E701                       	dc.b	smpsNoAttack, $01
000DE112 E10B                       	smpsAlterNote       $0B
000DE114 E701                       	dc.b	smpsNoAttack, $01
000DE116 E10F                       	smpsAlterNote       $0F
000DE118 E701                       	dc.b	smpsNoAttack, $01
000DE11A E10B                       	smpsAlterNote       $0B
000DE11C E701                       	dc.b	smpsNoAttack, $01
000DE11E E108                       	smpsAlterNote       $08
000DE120 E701                       	dc.b	smpsNoAttack, $01
000DE122 E104                       	smpsAlterNote       $04
000DE124 E701                       	dc.b	smpsNoAttack, $01
000DE126 E108                       	smpsAlterNote       $08
000DE128 E701                       	dc.b	smpsNoAttack, $01
000DE12A E10E                       	smpsAlterNote       $0E
000DE12C E701                       	dc.b	smpsNoAttack, $01
000DE12E E10F                       	smpsAlterNote       $0F
000DE130 E701                       	dc.b	smpsNoAttack, $01
000DE132 E10B                       	smpsAlterNote       $0B
000DE134 E701                       	dc.b	smpsNoAttack, $01
000DE136 E105                       	smpsAlterNote       $05
000DE138 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE13C E108                       	smpsAlterNote       $08
000DE13E E701                       	dc.b	smpsNoAttack, $01
000DE140 E10E                       	smpsAlterNote       $0E
000DE142 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE146 E108                       	smpsAlterNote       $08
000DE148 E701                       	dc.b	smpsNoAttack, $01
000DE14A E105                       	smpsAlterNote       $05
000DE14C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE150 E10B                       	smpsAlterNote       $0B
000DE152 E701                       	dc.b	smpsNoAttack, $01
000DE154 E10F                       	smpsAlterNote       $0F
000DE156 E701                       	dc.b	smpsNoAttack, $01
000DE158 E10E                       	smpsAlterNote       $0E
000DE15A E701                       	dc.b	smpsNoAttack, $01
000DE15C E108                       	smpsAlterNote       $08
000DE15E E701                       	dc.b	smpsNoAttack, $01
000DE160 E104                       	smpsAlterNote       $04
000DE162 E701                       	dc.b	smpsNoAttack, $01
000DE164 E108                       	smpsAlterNote       $08
000DE166 E701                       	dc.b	smpsNoAttack, $01
000DE168 E10E                       	smpsAlterNote       $0E
000DE16A E701                       	dc.b	smpsNoAttack, $01
000DE16C E10F                       	smpsAlterNote       $0F
000DE16E E701                       	dc.b	smpsNoAttack, $01
000DE170 E10B                       	smpsAlterNote       $0B
000DE172 E701                       	dc.b	smpsNoAttack, $01
000DE174 E105                       	smpsAlterNote       $05
000DE176 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE17A E108                       	smpsAlterNote       $08
000DE17C E701                       	dc.b	smpsNoAttack, $01
000DE17E E10E                       	smpsAlterNote       $0E
000DE180 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE184 E108                       	smpsAlterNote       $08
000DE186 E701                       	dc.b	smpsNoAttack, $01
000DE188 E105                       	smpsAlterNote       $05
000DE18A E701                       	dc.b	smpsNoAttack, $01
000DE18E E10B                       	smpsAlterNote       $0B
000DE190 E6FD                       	smpsAlterVol        $FD
000DE192 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE196 E109                       	smpsAlterNote       $09
000DE198 C404                       	dc.b	nG5, $04
000DE19A E10B                       	smpsAlterNote       $0B
000DE19C C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE1A0 E107                       	smpsAlterNote       $07
000DE1A2 BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000DE1A8 E10B                       	smpsAlterNote       $0B
000DE1AA C604                       	dc.b	nA5, $04
000DE1AC E109                       	smpsAlterNote       $09
000DE1AE C404 8001                  	dc.b	nG5, $04, nRst, $01
000DE1B2 E10B                       	smpsAlterNote       $0B
000DE1B4 C604                       	dc.b	nA5, $04
000DE1B6 E108                       	smpsAlterNote       $08
000DE1B8 C10A 8001 C102 8001        	dc.b	nE5, $0A, nRst, $01, nE5, $02, nRst, $01
000DE1C0 E106                       	smpsAlterNote       $06
000DE1C2 C904 8001                  	dc.b	nC6, $04, nRst, $01
000DE1C6 E10C                       	smpsAlterNote       $0C
000DE1C8 C704                       	dc.b	nBb5, $04
000DE1CA E10B                       	smpsAlterNote       $0B
000DE1CC C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE1D0 E109                       	smpsAlterNote       $09
000DE1D2 C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000DE1DC E10B                       	smpsAlterNote       $0B
000DE1DE C60D                       	dc.b	nA5, $0D
000DE1E0 E108                       	smpsAlterNote       $08
000DE1E2 E701                       	dc.b	smpsNoAttack, $01
000DE1E4 E104                       	smpsAlterNote       $04
000DE1E6 E701                       	dc.b	smpsNoAttack, $01
000DE1E8 E108                       	smpsAlterNote       $08
000DE1EA E701                       	dc.b	smpsNoAttack, $01
000DE1EC E10E                       	smpsAlterNote       $0E
000DE1EE E701                       	dc.b	smpsNoAttack, $01
000DE1F0 E10F                       	smpsAlterNote       $0F
000DE1F2 E701                       	dc.b	smpsNoAttack, $01
000DE1F4 E10B                       	smpsAlterNote       $0B
000DE1F6 E701                       	dc.b	smpsNoAttack, $01
000DE1F8 E105                       	smpsAlterNote       $05
000DE1FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE1FE E108                       	smpsAlterNote       $08
000DE200 E701                       	dc.b	smpsNoAttack, $01
000DE202 E10E                       	smpsAlterNote       $0E
000DE204 E701                       	dc.b	smpsNoAttack, $01
000DE206 E10F                       	smpsAlterNote       $0F
000DE208 8001                       	dc.b	nRst, $01
000DE20A E109                       	smpsAlterNote       $09
000DE20C C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000DE212 E108                       	smpsAlterNote       $08
000DE214 C10D                       	dc.b	nE5, $0D
000DE216 E102                       	smpsAlterNote       $02
000DE218 E701                       	dc.b	smpsNoAttack, $01
000DE21A E101                       	smpsAlterNote       $01
000DE21C E701                       	dc.b	smpsNoAttack, $01
000DE21E E105                       	smpsAlterNote       $05
000DE220 E701                       	dc.b	smpsNoAttack, $01
000DE222 E10B                       	smpsAlterNote       $0B
000DE224 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE228 E108                       	smpsAlterNote       $08
000DE22A E701                       	dc.b	smpsNoAttack, $01
000DE22C E102                       	smpsAlterNote       $02
000DE22E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE232 E108                       	smpsAlterNote       $08
000DE234 E701                       	dc.b	smpsNoAttack, $01
000DE236 E10B                       	smpsAlterNote       $0B
000DE238 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE23C E105                       	smpsAlterNote       $05
000DE23E E701                       	dc.b	smpsNoAttack, $01
000DE240 E101                       	smpsAlterNote       $01
000DE242 E701                       	dc.b	smpsNoAttack, $01
000DE244 E102                       	smpsAlterNote       $02
000DE246 E701                       	dc.b	smpsNoAttack, $01
000DE248 E108                       	smpsAlterNote       $08
000DE24A E701                       	dc.b	smpsNoAttack, $01
000DE24C E10C                       	smpsAlterNote       $0C
000DE24E E701                       	dc.b	smpsNoAttack, $01
000DE250 E108                       	smpsAlterNote       $08
000DE252 E701                       	dc.b	smpsNoAttack, $01
000DE254 E105                       	smpsAlterNote       $05
000DE256 E701                       	dc.b	smpsNoAttack, $01
000DE258 E101                       	smpsAlterNote       $01
000DE25A E701                       	dc.b	smpsNoAttack, $01
000DE25C E105                       	smpsAlterNote       $05
000DE25E E701                       	dc.b	smpsNoAttack, $01
000DE260 E10B                       	smpsAlterNote       $0B
000DE262 E701                       	dc.b	smpsNoAttack, $01
000DE264 E10C                       	smpsAlterNote       $0C
000DE266 E701                       	dc.b	smpsNoAttack, $01
000DE268 E108                       	smpsAlterNote       $08
000DE26A E701                       	dc.b	smpsNoAttack, $01
000DE26C E102                       	smpsAlterNote       $02
000DE26E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE272 E105                       	smpsAlterNote       $05
000DE274 E701                       	dc.b	smpsNoAttack, $01
000DE276 E10B                       	smpsAlterNote       $0B
000DE278 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE27C E105                       	smpsAlterNote       $05
000DE27E E701                       	dc.b	smpsNoAttack, $01
000DE280 E102                       	smpsAlterNote       $02
000DE282 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE286 E108                       	smpsAlterNote       $08
000DE288 E701                       	dc.b	smpsNoAttack, $01
000DE28A E10C                       	smpsAlterNote       $0C
000DE28C E701                       	dc.b	smpsNoAttack, $01
000DE28E E10B                       	smpsAlterNote       $0B
000DE290 E701                       	dc.b	smpsNoAttack, $01
000DE292 E105                       	smpsAlterNote       $05
000DE294 E701                       	dc.b	smpsNoAttack, $01
000DE296 E101                       	smpsAlterNote       $01
000DE298 E701                       	dc.b	smpsNoAttack, $01
000DE29A E105                       	smpsAlterNote       $05
000DE29C E701                       	dc.b	smpsNoAttack, $01
000DE29E E108                       	smpsAlterNote       $08
000DE2A0 E701                       	dc.b	smpsNoAttack, $01
000DE2A2 E10C                       	smpsAlterNote       $0C
000DE2A4 E701                       	dc.b	smpsNoAttack, $01
000DE2A6 E108                       	smpsAlterNote       $08
000DE2A8 E701                       	dc.b	smpsNoAttack, $01
000DE2AA E102                       	smpsAlterNote       $02
000DE2AC E701                       	dc.b	smpsNoAttack, $01
000DE2AE E101                       	smpsAlterNote       $01
000DE2B0 E701                       	dc.b	smpsNoAttack, $01
000DE2B2 E105                       	smpsAlterNote       $05
000DE2B4 E701                       	dc.b	smpsNoAttack, $01
000DE2B6 E10B                       	smpsAlterNote       $0B
000DE2B8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE2BC E108                       	smpsAlterNote       $08
000DE2BE E701                       	dc.b	smpsNoAttack, $01
000DE2C0 E102                       	smpsAlterNote       $02
000DE2C2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE2C6 E108                       	smpsAlterNote       $08
000DE2C8 E701                       	dc.b	smpsNoAttack, $01
000DE2CA E10B                       	smpsAlterNote       $0B
000DE2CC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE2D0 E105                       	smpsAlterNote       $05
000DE2D2 E701                       	dc.b	smpsNoAttack, $01
000DE2D4 E101                       	smpsAlterNote       $01
000DE2D6 E701                       	dc.b	smpsNoAttack, $01
000DE2D8 E102                       	smpsAlterNote       $02
000DE2DA E701                       	dc.b	smpsNoAttack, $01
000DE2DC E108                       	smpsAlterNote       $08
000DE2DE E701                       	dc.b	smpsNoAttack, $01
000DE2E0 E10C                       	smpsAlterNote       $0C
000DE2E2 E701                       	dc.b	smpsNoAttack, $01
000DE2E4 E108                       	smpsAlterNote       $08
000DE2E6 E701                       	dc.b	smpsNoAttack, $01
000DE2E8 E105                       	smpsAlterNote       $05
000DE2EA E701                       	dc.b	smpsNoAttack, $01
000DE2EC E101                       	smpsAlterNote       $01
000DE2EE E701                       	dc.b	smpsNoAttack, $01
000DE2F0 E105                       	smpsAlterNote       $05
000DE2F2 E701                       	dc.b	smpsNoAttack, $01
000DE2F4 E10B                       	smpsAlterNote       $0B
000DE2F6 E701                       	dc.b	smpsNoAttack, $01
000DE2F8 E10C                       	smpsAlterNote       $0C
000DE2FA E701                       	dc.b	smpsNoAttack, $01
000DE2FC E108                       	smpsAlterNote       $08
000DE2FE E701                       	dc.b	smpsNoAttack, $01
000DE300 E102                       	smpsAlterNote       $02
000DE302 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE306 E105                       	smpsAlterNote       $05
000DE308 E701                       	dc.b	smpsNoAttack, $01
000DE30A E10B                       	smpsAlterNote       $0B
000DE30C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE310 E105                       	smpsAlterNote       $05
000DE312 E701                       	dc.b	smpsNoAttack, $01
000DE314 E101                       	smpsAlterNote       $01
000DE316 E701                       	dc.b	smpsNoAttack, $01
000DE318 E102                       	smpsAlterNote       $02
000DE31A E701                       	dc.b	smpsNoAttack, $01
000DE31C E108                       	smpsAlterNote       $08
000DE31E E701                       	dc.b	smpsNoAttack, $01
000DE320 E10C                       	smpsAlterNote       $0C
000DE322 E701                       	dc.b	smpsNoAttack, $01
000DE324 E108                       	smpsAlterNote       $08
000DE326 E701                       	dc.b	smpsNoAttack, $01
000DE328 E105                       	smpsAlterNote       $05
000DE32A E701                       	dc.b	smpsNoAttack, $01
000DE32C E101                       	smpsAlterNote       $01
000DE32E E701                       	dc.b	smpsNoAttack, $01
000DE330 E105                       	smpsAlterNote       $05
000DE332 E701                       	dc.b	smpsNoAttack, $01
000DE334 E10B                       	smpsAlterNote       $0B
000DE336 E701                       	dc.b	smpsNoAttack, $01
000DE338 E10C                       	smpsAlterNote       $0C
000DE33A E701                       	dc.b	smpsNoAttack, $01
000DE33C E108                       	smpsAlterNote       $08
000DE33E E701                       	dc.b	smpsNoAttack, $01
000DE340 E102                       	smpsAlterNote       $02
000DE342 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE346 E105                       	smpsAlterNote       $05
000DE348 E701                       	dc.b	smpsNoAttack, $01
000DE34A E10B                       	smpsAlterNote       $0B
000DE34C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE350 E105                       	smpsAlterNote       $05
000DE352 E701                       	dc.b	smpsNoAttack, $01
000DE354 E102                       	smpsAlterNote       $02
000DE356 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE35A E108                       	smpsAlterNote       $08
000DE35C E701                       	dc.b	smpsNoAttack, $01
000DE35E E10C                       	smpsAlterNote       $0C
000DE360 E701                       	dc.b	smpsNoAttack, $01
000DE362 E10B                       	smpsAlterNote       $0B
000DE364 E701                       	dc.b	smpsNoAttack, $01
000DE366 E105                       	smpsAlterNote       $05
000DE368 E701                       	dc.b	smpsNoAttack, $01
000DE36A E101                       	smpsAlterNote       $01
000DE36C E701                       	dc.b	smpsNoAttack, $01
000DE36E E105                       	smpsAlterNote       $05
000DE370 E701                       	dc.b	smpsNoAttack, $01
000DE372 E108                       	smpsAlterNote       $08
000DE374 E701                       	dc.b	smpsNoAttack, $01
000DE376 E10C                       	smpsAlterNote       $0C
000DE378 E701                       	dc.b	smpsNoAttack, $01
000DE37C E10B                       	smpsAlterNote       $0B
000DE37E C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE382 E109                       	smpsAlterNote       $09
000DE384 C404                       	dc.b	nG5, $04
000DE386 E10B                       	smpsAlterNote       $0B
000DE388 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE38C E107                       	smpsAlterNote       $07
000DE38E BF0A BF03 8001             	dc.b	nD5, $0A, nD5, $03, nRst, $01
000DE394 E10B                       	smpsAlterNote       $0B
000DE396 C604                       	dc.b	nA5, $04
000DE398 E109                       	smpsAlterNote       $09
000DE39A C404 8001                  	dc.b	nG5, $04, nRst, $01
000DE39E E10B                       	smpsAlterNote       $0B
000DE3A0 C604                       	dc.b	nA5, $04
000DE3A2 E108                       	smpsAlterNote       $08
000DE3A4 C10A 8001 C103             	dc.b	nE5, $0A, nRst, $01, nE5, $03
000DE3AA E106                       	smpsAlterNote       $06
000DE3AC C904 8001                  	dc.b	nC6, $04, nRst, $01
000DE3B0 E10C                       	smpsAlterNote       $0C
000DE3B2 C704                       	dc.b	nBb5, $04
000DE3B4 E10B                       	smpsAlterNote       $0B
000DE3B6 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE3BA E109                       	smpsAlterNote       $09
000DE3BC C403 C203 8001 C402 8001   	dc.b	nG5, $03, nF5, $03, nRst, $01, nG5, $02, nRst, $01
000DE3C6 E10B                       	smpsAlterNote       $0B
000DE3C8 C60D                       	dc.b	nA5, $0D
000DE3CA E108                       	smpsAlterNote       $08
000DE3CC E701                       	dc.b	smpsNoAttack, $01
000DE3CE E104                       	smpsAlterNote       $04
000DE3D0 E701                       	dc.b	smpsNoAttack, $01
000DE3D2 E108                       	smpsAlterNote       $08
000DE3D4 E701                       	dc.b	smpsNoAttack, $01
000DE3D6 E10B                       	smpsAlterNote       $0B
000DE3D8 E701                       	dc.b	smpsNoAttack, $01
000DE3DA E10F                       	smpsAlterNote       $0F
000DE3DC E701                       	dc.b	smpsNoAttack, $01
000DE3DE E10B                       	smpsAlterNote       $0B
000DE3E0 E701                       	dc.b	smpsNoAttack, $01
000DE3E2 E105                       	smpsAlterNote       $05
000DE3E4 E701                       	dc.b	smpsNoAttack, $01
000DE3E6 E104                       	smpsAlterNote       $04
000DE3E8 E701                       	dc.b	smpsNoAttack, $01
000DE3EA E108                       	smpsAlterNote       $08
000DE3EC E701                       	dc.b	smpsNoAttack, $01
000DE3EE E10E                       	smpsAlterNote       $0E
000DE3F0 E701                       	dc.b	smpsNoAttack, $01
000DE3F2 E10F                       	smpsAlterNote       $0F
000DE3F4 8001                       	dc.b	nRst, $01
000DE3F6 E109                       	smpsAlterNote       $09
000DE3F8 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000DE3FE E108                       	smpsAlterNote       $08
000DE400 C10D                       	dc.b	nE5, $0D
000DE402 E105                       	smpsAlterNote       $05
000DE404 E701                       	dc.b	smpsNoAttack, $01
000DE406 E101                       	smpsAlterNote       $01
000DE408 E701                       	dc.b	smpsNoAttack, $01
000DE40A E105                       	smpsAlterNote       $05
000DE40C E701                       	dc.b	smpsNoAttack, $01
000DE40E E10B                       	smpsAlterNote       $0B
000DE410 E701                       	dc.b	smpsNoAttack, $01
000DE412 E10C                       	smpsAlterNote       $0C
000DE414 E701                       	dc.b	smpsNoAttack, $01
000DE416 E108                       	smpsAlterNote       $08
000DE418 E701                       	dc.b	smpsNoAttack, $01
000DE41A E102                       	smpsAlterNote       $02
000DE41C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE420 E105                       	smpsAlterNote       $05
000DE422 E701                       	dc.b	smpsNoAttack, $01
000DE424 E10B                       	smpsAlterNote       $0B
000DE426 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE42A E105                       	smpsAlterNote       $05
000DE42C E701                       	dc.b	smpsNoAttack, $01
000DE42E E102                       	smpsAlterNote       $02
000DE430 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE434 E108                       	smpsAlterNote       $08
000DE436 E701                       	dc.b	smpsNoAttack, $01
000DE438 E10C                       	smpsAlterNote       $0C
000DE43A E701                       	dc.b	smpsNoAttack, $01
000DE43C E10B                       	smpsAlterNote       $0B
000DE43E E701                       	dc.b	smpsNoAttack, $01
000DE440 E105                       	smpsAlterNote       $05
000DE442 E701                       	dc.b	smpsNoAttack, $01
000DE444 E101                       	smpsAlterNote       $01
000DE446 E701                       	dc.b	smpsNoAttack, $01
000DE448 E105                       	smpsAlterNote       $05
000DE44A E701                       	dc.b	smpsNoAttack, $01
000DE44C E108                       	smpsAlterNote       $08
000DE44E E701                       	dc.b	smpsNoAttack, $01
000DE450 E10C                       	smpsAlterNote       $0C
000DE452 E701                       	dc.b	smpsNoAttack, $01
000DE454 E108                       	smpsAlterNote       $08
000DE456 E701                       	dc.b	smpsNoAttack, $01
000DE458 E102                       	smpsAlterNote       $02
000DE45A E701                       	dc.b	smpsNoAttack, $01
000DE45C E101                       	smpsAlterNote       $01
000DE45E E701                       	dc.b	smpsNoAttack, $01
000DE460 E105                       	smpsAlterNote       $05
000DE462 E701                       	dc.b	smpsNoAttack, $01
000DE464 E10B                       	smpsAlterNote       $0B
000DE466 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE46A E108                       	smpsAlterNote       $08
000DE46C E701                       	dc.b	smpsNoAttack, $01
000DE46E E102                       	smpsAlterNote       $02
000DE470 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE474 E108                       	smpsAlterNote       $08
000DE476 E701                       	dc.b	smpsNoAttack, $01
000DE478 E10B                       	smpsAlterNote       $0B
000DE47A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE47E E105                       	smpsAlterNote       $05
000DE480 E701                       	dc.b	smpsNoAttack, $01
000DE482 E101                       	smpsAlterNote       $01
000DE484 E701                       	dc.b	smpsNoAttack, $01
000DE486 E102                       	smpsAlterNote       $02
000DE488 E701                       	dc.b	smpsNoAttack, $01
000DE48A E108                       	smpsAlterNote       $08
000DE48C E701                       	dc.b	smpsNoAttack, $01
000DE48E E10C                       	smpsAlterNote       $0C
000DE490 E701                       	dc.b	smpsNoAttack, $01
000DE492 E108                       	smpsAlterNote       $08
000DE494 E701                       	dc.b	smpsNoAttack, $01
000DE496 E105                       	smpsAlterNote       $05
000DE498 E701                       	dc.b	smpsNoAttack, $01
000DE49A E101                       	smpsAlterNote       $01
000DE49C E701                       	dc.b	smpsNoAttack, $01
000DE49E E105                       	smpsAlterNote       $05
000DE4A0 E701                       	dc.b	smpsNoAttack, $01
000DE4A2 E10B                       	smpsAlterNote       $0B
000DE4A4 E701                       	dc.b	smpsNoAttack, $01
000DE4A6 E10C                       	smpsAlterNote       $0C
000DE4A8 E701                       	dc.b	smpsNoAttack, $01
000DE4AA E108                       	smpsAlterNote       $08
000DE4AC E701                       	dc.b	smpsNoAttack, $01
000DE4AE E102                       	smpsAlterNote       $02
000DE4B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4B4 E108                       	smpsAlterNote       $08
000DE4B6 E701                       	dc.b	smpsNoAttack, $01
000DE4B8 E10B                       	smpsAlterNote       $0B
000DE4BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4BE E105                       	smpsAlterNote       $05
000DE4C0 E701                       	dc.b	smpsNoAttack, $01
000DE4C2 E101                       	smpsAlterNote       $01
000DE4C4 E701                       	dc.b	smpsNoAttack, $01
000DE4C6 E102                       	smpsAlterNote       $02
000DE4C8 E701                       	dc.b	smpsNoAttack, $01
000DE4CA E108                       	smpsAlterNote       $08
000DE4CC E701                       	dc.b	smpsNoAttack, $01
000DE4CE E10C                       	smpsAlterNote       $0C
000DE4D0 E701                       	dc.b	smpsNoAttack, $01
000DE4D2 E108                       	smpsAlterNote       $08
000DE4D4 E701                       	dc.b	smpsNoAttack, $01
000DE4D6 E105                       	smpsAlterNote       $05
000DE4D8 E701                       	dc.b	smpsNoAttack, $01
000DE4DA E101                       	smpsAlterNote       $01
000DE4DC E701                       	dc.b	smpsNoAttack, $01
000DE4DE E105                       	smpsAlterNote       $05
000DE4E0 E701                       	dc.b	smpsNoAttack, $01
000DE4E2 E10B                       	smpsAlterNote       $0B
000DE4E4 E701                       	dc.b	smpsNoAttack, $01
000DE4E6 E10C                       	smpsAlterNote       $0C
000DE4E8 E701                       	dc.b	smpsNoAttack, $01
000DE4EA E108                       	smpsAlterNote       $08
000DE4EC E701                       	dc.b	smpsNoAttack, $01
000DE4EE E102                       	smpsAlterNote       $02
000DE4F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4F4 E105                       	smpsAlterNote       $05
000DE4F6 E701                       	dc.b	smpsNoAttack, $01
000DE4F8 E10B                       	smpsAlterNote       $0B
000DE4FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE4FE E105                       	smpsAlterNote       $05
000DE500 E701                       	dc.b	smpsNoAttack, $01
000DE502 E102                       	smpsAlterNote       $02
000DE504 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE508 E108                       	smpsAlterNote       $08
000DE50A E701                       	dc.b	smpsNoAttack, $01
000DE50C E10C                       	smpsAlterNote       $0C
000DE50E E701                       	dc.b	smpsNoAttack, $01
000DE510 E10B                       	smpsAlterNote       $0B
000DE512 E701                       	dc.b	smpsNoAttack, $01
000DE514 E105                       	smpsAlterNote       $05
000DE516 E701                       	dc.b	smpsNoAttack, $01
000DE518 E101                       	smpsAlterNote       $01
000DE51A E701                       	dc.b	smpsNoAttack, $01
000DE51C E105                       	smpsAlterNote       $05
000DE51E E701                       	dc.b	smpsNoAttack, $01
000DE520 E108                       	smpsAlterNote       $08
000DE522 E701                       	dc.b	smpsNoAttack, $01
000DE524 E10C                       	smpsAlterNote       $0C
000DE526 E701                       	dc.b	smpsNoAttack, $01
000DE528 E108                       	smpsAlterNote       $08
000DE52A E701                       	dc.b	smpsNoAttack, $01
000DE52C E102                       	smpsAlterNote       $02
000DE52E E701                       	dc.b	smpsNoAttack, $01
000DE530 E101                       	smpsAlterNote       $01
000DE532 E701                       	dc.b	smpsNoAttack, $01
000DE534 E105                       	smpsAlterNote       $05
000DE536 E701                       	dc.b	smpsNoAttack, $01
000DE538 E10B                       	smpsAlterNote       $0B
000DE53A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE53E E108                       	smpsAlterNote       $08
000DE540 E701                       	dc.b	smpsNoAttack, $01
000DE542 E102                       	smpsAlterNote       $02
000DE544 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE548 E108                       	smpsAlterNote       $08
000DE54A E701                       	dc.b	smpsNoAttack, $01
000DE54C E10B                       	smpsAlterNote       $0B
000DE54E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE552 E105                       	smpsAlterNote       $05
000DE554 E701                       	dc.b	smpsNoAttack, $01
000DE556 E102                       	smpsAlterNote       $02
000DE558 8001                       	dc.b	nRst, $01
000DE55A E107                       	smpsAlterNote       $07
000DE55C BF01 8001                  	dc.b	nD5, $01, nRst, $01
000DE560 E108                       	smpsAlterNote       $08
000DE562 C001 C10E                  	dc.b	nEb5, $01, nE5, $0E
000DE566 E102                       	smpsAlterNote       $02
000DE568 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE56C E108                       	smpsAlterNote       $08
000DE56E E701                       	dc.b	smpsNoAttack, $01
000DE570 E10B                       	smpsAlterNote       $0B
000DE572 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE576 E105                       	smpsAlterNote       $05
000DE578 E701                       	dc.b	smpsNoAttack, $01
000DE57A E101                       	smpsAlterNote       $01
000DE57C E701                       	dc.b	smpsNoAttack, $01
000DE57E E102                       	smpsAlterNote       $02
000DE580 E701                       	dc.b	smpsNoAttack, $01
000DE582 E108                       	smpsAlterNote       $08
000DE584 E701                       	dc.b	smpsNoAttack, $01
000DE586 E10C                       	smpsAlterNote       $0C
000DE588 E701                       	dc.b	smpsNoAttack, $01
000DE58A E108                       	smpsAlterNote       $08
000DE58C E701                       	dc.b	smpsNoAttack, $01
000DE58E E105                       	smpsAlterNote       $05
000DE590 E701                       	dc.b	smpsNoAttack, $01
000DE592 E101                       	smpsAlterNote       $01
000DE594 E701                       	dc.b	smpsNoAttack, $01
000DE596 E105                       	smpsAlterNote       $05
000DE598 E701                       	dc.b	smpsNoAttack, $01
000DE59A E10B                       	smpsAlterNote       $0B
000DE59C E701                       	dc.b	smpsNoAttack, $01
000DE59E E10C                       	smpsAlterNote       $0C
000DE5A0 E701                       	dc.b	smpsNoAttack, $01
000DE5A2 E108                       	smpsAlterNote       $08
000DE5A4 E701                       	dc.b	smpsNoAttack, $01
000DE5A6 E102                       	smpsAlterNote       $02
000DE5A8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE5AC E105                       	smpsAlterNote       $05
000DE5AE E701                       	dc.b	smpsNoAttack, $01
000DE5B0 E10B                       	smpsAlterNote       $0B
000DE5B2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE5B6 E105                       	smpsAlterNote       $05
000DE5B8 E701                       	dc.b	smpsNoAttack, $01
000DE5BA E102                       	smpsAlterNote       $02
000DE5BC E701                       	dc.b	smpsNoAttack, $01
000DE5BE E109                       	smpsAlterNote       $09
000DE5C0 C40A C207                  	dc.b	nG5, $0A, nF5, $07
000DE5C4 E108                       	smpsAlterNote       $08
000DE5C6 C10D                       	dc.b	nE5, $0D
000DE5C8 E105                       	smpsAlterNote       $05
000DE5CA E701                       	dc.b	smpsNoAttack, $01
000DE5CC E101                       	smpsAlterNote       $01
000DE5CE E701                       	dc.b	smpsNoAttack, $01
000DE5D0 E102                       	smpsAlterNote       $02
000DE5D2 E701                       	dc.b	smpsNoAttack, $01
000DE5D4 E108                       	smpsAlterNote       $08
000DE5D6 E701                       	dc.b	smpsNoAttack, $01
000DE5D8 E10C                       	smpsAlterNote       $0C
000DE5DA E701                       	dc.b	smpsNoAttack, $01
000DE5DC E108                       	smpsAlterNote       $08
000DE5DE E701                       	dc.b	smpsNoAttack, $01
000DE5E0 E105                       	smpsAlterNote       $05
000DE5E2 E701                       	dc.b	smpsNoAttack, $01
000DE5E4 E101                       	smpsAlterNote       $01
000DE5E6 E701                       	dc.b	smpsNoAttack, $01
000DE5E8 E105                       	smpsAlterNote       $05
000DE5EA E701                       	dc.b	smpsNoAttack, $01
000DE5EC E10B                       	smpsAlterNote       $0B
000DE5EE E701                       	dc.b	smpsNoAttack, $01
000DE5F0 E10C                       	smpsAlterNote       $0C
000DE5F2 E701                       	dc.b	smpsNoAttack, $01
000DE5F4 E108                       	smpsAlterNote       $08
000DE5F6 E701                       	dc.b	smpsNoAttack, $01
000DE5F8 E102                       	smpsAlterNote       $02
000DE5FA E701 E701 800E             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $0E
000DE602 E10B                       	smpsAlterNote       $0B
000DE604 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000DE608 E10C                       	smpsAlterNote       $0C
000DE60A BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000DE60E E10B                       	smpsAlterNote       $0B
000DE610 BA03 BA06 8001             	dc.b	nA4, $03, nA4, $06, nRst, $01
000DE616 E107                       	smpsAlterNote       $07
000DE618 BF03                       	dc.b	nD5, $03
000DE61A E108                       	smpsAlterNote       $08
000DE61C C103 8001                  	dc.b	nE5, $03, nRst, $01
000DE620 E109                       	smpsAlterNote       $09
000DE622 C203 C403 8001             	dc.b	nF5, $03, nG5, $03, nRst, $01
000DE628 E10B                       	smpsAlterNote       $0B
000DE62A C606 8001                  	dc.b	nA5, $06, nRst, $01
000DE62E E107                       	smpsAlterNote       $07
000DE630 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DE634 E106                       	smpsAlterNote       $06
000DE636 C90D                       	dc.b	nC6, $0D
000DE638 E103                       	smpsAlterNote       $03
000DE63A E701                       	dc.b	smpsNoAttack, $01
000DE63C E1FF                       	smpsAlterNote       $FF
000DE63E E701                       	dc.b	smpsNoAttack, $01
000DE640 E103                       	smpsAlterNote       $03
000DE642 E701                       	dc.b	smpsNoAttack, $01
000DE644 E109                       	smpsAlterNote       $09
000DE646 E701                       	dc.b	smpsNoAttack, $01
000DE648 E10A                       	smpsAlterNote       $0A
000DE64A E701                       	dc.b	smpsNoAttack, $01
000DE64C E106                       	smpsAlterNote       $06
000DE64E E701                       	dc.b	smpsNoAttack, $01
000DE650 E100                       	smpsAlterNote       $00
000DE652 E701                       	dc.b	smpsNoAttack, $01
000DE654 E10C                       	smpsAlterNote       $0C
000DE656 C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DE65A E10B                       	smpsAlterNote       $0B
000DE65C C603                       	dc.b	nA5, $03
000DE65E E109                       	smpsAlterNote       $09
000DE660 C403 8001                  	dc.b	nG5, $03, nRst, $01
000DE664 E10B                       	smpsAlterNote       $0B
000DE666 C60D                       	dc.b	nA5, $0D
000DE668 E105                       	smpsAlterNote       $05
000DE66A E701                       	dc.b	smpsNoAttack, $01
000DE66C E104                       	smpsAlterNote       $04
000DE66E E701                       	dc.b	smpsNoAttack, $01
000DE670 E108                       	smpsAlterNote       $08
000DE672 E701                       	dc.b	smpsNoAttack, $01
000DE674 E10E                       	smpsAlterNote       $0E
000DE676 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE67A E10B                       	smpsAlterNote       $0B
000DE67C E701                       	dc.b	smpsNoAttack, $01
000DE67E E105                       	smpsAlterNote       $05
000DE680 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE684 E10B                       	smpsAlterNote       $0B
000DE686 E701                       	dc.b	smpsNoAttack, $01
000DE688 E10E                       	smpsAlterNote       $0E
000DE68A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE68E E108                       	smpsAlterNote       $08
000DE690 E701                       	dc.b	smpsNoAttack, $01
000DE692 E104                       	smpsAlterNote       $04
000DE694 E701                       	dc.b	smpsNoAttack, $01
000DE696 E105                       	smpsAlterNote       $05
000DE698 E701                       	dc.b	smpsNoAttack, $01
000DE69A E10B                       	smpsAlterNote       $0B
000DE69C E701                       	dc.b	smpsNoAttack, $01
000DE69E E10F                       	smpsAlterNote       $0F
000DE6A0 E701                       	dc.b	smpsNoAttack, $01
000DE6A2 E10B                       	smpsAlterNote       $0B
000DE6A4 E701                       	dc.b	smpsNoAttack, $01
000DE6A6 E108                       	smpsAlterNote       $08
000DE6A8 E701                       	dc.b	smpsNoAttack, $01
000DE6AA E104                       	smpsAlterNote       $04
000DE6AC E701                       	dc.b	smpsNoAttack, $01
000DE6AE E108                       	smpsAlterNote       $08
000DE6B0 E701                       	dc.b	smpsNoAttack, $01
000DE6B2 E10E                       	smpsAlterNote       $0E
000DE6B4 E701                       	dc.b	smpsNoAttack, $01
000DE6B6 E10F                       	smpsAlterNote       $0F
000DE6B8 E701                       	dc.b	smpsNoAttack, $01
000DE6BA E10B                       	smpsAlterNote       $0B
000DE6BC E701                       	dc.b	smpsNoAttack, $01
000DE6BE E105                       	smpsAlterNote       $05
000DE6C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE6C4 E108                       	smpsAlterNote       $08
000DE6C6 E701                       	dc.b	smpsNoAttack, $01
000DE6C8 E10E                       	smpsAlterNote       $0E
000DE6CA E701                       	dc.b	smpsNoAttack, $01
000DE6CC E10F                       	smpsAlterNote       $0F
000DE6CE 800F                       	dc.b	nRst, $0F
000DE6D0 E107                       	smpsAlterNote       $07
000DE6D2 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DE6D6 E108                       	smpsAlterNote       $08
000DE6D8 C103                       	dc.b	nE5, $03
000DE6DA E109                       	smpsAlterNote       $09
000DE6DC C203 8001 C403             	dc.b	nF5, $03, nRst, $01, nG5, $03
000DE6E2 E10B                       	smpsAlterNote       $0B
000DE6E4 C607                       	dc.b	nA5, $07
000DE6E6 E107                       	smpsAlterNote       $07
000DE6E8 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DE6EC E106                       	smpsAlterNote       $06
000DE6EE C90D                       	dc.b	nC6, $0D
000DE6F0 E107                       	smpsAlterNote       $07
000DE6F2 CB03 8001                  	dc.b	nD6, $03, nRst, $01
000DE6F6 E10C                       	smpsAlterNote       $0C
000DE6F8 C704                       	dc.b	nBb5, $04
000DE6FA E10B                       	smpsAlterNote       $0B
000DE6FC C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE700 E109                       	smpsAlterNote       $09
000DE702 C404                       	dc.b	nG5, $04
000DE704 E10B                       	smpsAlterNote       $0B
000DE706 C60D                       	dc.b	nA5, $0D
000DE708 E108                       	smpsAlterNote       $08
000DE70A E701                       	dc.b	smpsNoAttack, $01
000DE70C E105                       	smpsAlterNote       $05
000DE70E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE712 E10B                       	smpsAlterNote       $0B
000DE714 E701                       	dc.b	smpsNoAttack, $01
000DE716 E10F                       	smpsAlterNote       $0F
000DE718 E701                       	dc.b	smpsNoAttack, $01
000DE71A E10E                       	smpsAlterNote       $0E
000DE71C E701                       	dc.b	smpsNoAttack, $01
000DE71E E108                       	smpsAlterNote       $08
000DE720 E701                       	dc.b	smpsNoAttack, $01
000DE722 E104                       	smpsAlterNote       $04
000DE724 E701                       	dc.b	smpsNoAttack, $01
000DE726 E108                       	smpsAlterNote       $08
000DE728 E701                       	dc.b	smpsNoAttack, $01
000DE72A E10B                       	smpsAlterNote       $0B
000DE72C E701                       	dc.b	smpsNoAttack, $01
000DE72E E10F                       	smpsAlterNote       $0F
000DE730 E701                       	dc.b	smpsNoAttack, $01
000DE732 E10B                       	smpsAlterNote       $0B
000DE734 E701                       	dc.b	smpsNoAttack, $01
000DE736 E105                       	smpsAlterNote       $05
000DE738 E701                       	dc.b	smpsNoAttack, $01
000DE73A E104                       	smpsAlterNote       $04
000DE73C E701                       	dc.b	smpsNoAttack, $01
000DE73E E108                       	smpsAlterNote       $08
000DE740 E701                       	dc.b	smpsNoAttack, $01
000DE742 E10E                       	smpsAlterNote       $0E
000DE744 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE748 E10B                       	smpsAlterNote       $0B
000DE74A E701                       	dc.b	smpsNoAttack, $01
000DE74C E105                       	smpsAlterNote       $05
000DE74E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE752 E10B                       	smpsAlterNote       $0B
000DE754 E701                       	dc.b	smpsNoAttack, $01
000DE756 E10E                       	smpsAlterNote       $0E
000DE758 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE75C E108                       	smpsAlterNote       $08
000DE75E E701                       	dc.b	smpsNoAttack, $01
000DE760 E105                       	smpsAlterNote       $05
000DE762 8001                       	dc.b	nRst, $01
000DE764 E109                       	smpsAlterNote       $09
000DE766 C401 8001                  	dc.b	nG5, $01, nRst, $01
000DE76A E10B                       	smpsAlterNote       $0B
000DE76C C501 C60E C604 8001        	dc.b	nAb5, $01, nA5, $0E, nA5, $04, nRst, $01
000DE774 E109                       	smpsAlterNote       $09
000DE776 C404                       	dc.b	nG5, $04
000DE778 E10B                       	smpsAlterNote       $0B
000DE77A C604 8001                  	dc.b	nA5, $04, nRst, $01
000DE77E E107                       	smpsAlterNote       $07
000DE780 BF0D                       	dc.b	nD5, $0D
000DE782 E101                       	smpsAlterNote       $01
000DE784 E701                       	dc.b	smpsNoAttack, $01
000DE786 E100                       	smpsAlterNote       $00
000DE788 E701                       	dc.b	smpsNoAttack, $01
000DE78A E104                       	smpsAlterNote       $04
000DE78C E701                       	dc.b	smpsNoAttack, $01
000DE78E E10A                       	smpsAlterNote       $0A
000DE790 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE794 E107                       	smpsAlterNote       $07
000DE796 E701                       	dc.b	smpsNoAttack, $01
000DE798 E101                       	smpsAlterNote       $01
000DE79A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE79E E107                       	smpsAlterNote       $07
000DE7A0 E701                       	dc.b	smpsNoAttack, $01
000DE7A2 E10A                       	smpsAlterNote       $0A
000DE7A4 E701                       	dc.b	smpsNoAttack, $01
000DE7A6 E10B                       	smpsAlterNote       $0B
000DE7A8 8001                       	dc.b	nRst, $01
000DE7AA E108                       	smpsAlterNote       $08
000DE7AC 8001                       	dc.b	nRst, $01
000DE7AE E109                       	smpsAlterNote       $09
000DE7B0 8001 C401                  	dc.b	nRst, $01, nG5, $01
000DE7B4 E10B                       	smpsAlterNote       $0B
000DE7B6 C606 8001 C606 8001        	dc.b	nA5, $06, nRst, $01, nA5, $06, nRst, $01
000DE7BE E108                       	smpsAlterNote       $08
000DE7C0 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000DE7C4 E109                       	smpsAlterNote       $09
000DE7C6 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000DE7CA E108                       	smpsAlterNote       $08
000DE7CC CD02 8001                  	dc.b	nE6, $02, nRst, $01
000DE7D0 E106                       	smpsAlterNote       $06
000DE7D2 C903                       	dc.b	nC6, $03
000DE7D4 E109                       	smpsAlterNote       $09
000DE7D6 C403 8001                  	dc.b	nG5, $03, nRst, $01
000DE7DA E10C                       	smpsAlterNote       $0C
000DE7DC C70D                       	dc.b	nBb5, $0D
000DE7DE E109                       	smpsAlterNote       $09
000DE7E0 E701                       	dc.b	smpsNoAttack, $01
000DE7E2 E105                       	smpsAlterNote       $05
000DE7E4 E701                       	dc.b	smpsNoAttack, $01
000DE7E6 E109                       	smpsAlterNote       $09
000DE7E8 E701                       	dc.b	smpsNoAttack, $01
000DE7EA E10F                       	smpsAlterNote       $0F
000DE7EC E701                       	dc.b	smpsNoAttack, $01
000DE7EE E110                       	smpsAlterNote       $10
000DE7F0 E701                       	dc.b	smpsNoAttack, $01
000DE7F2 E10C                       	smpsAlterNote       $0C
000DE7F4 E701                       	dc.b	smpsNoAttack, $01
000DE7F6 E106                       	smpsAlterNote       $06
000DE7F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE7FC E109                       	smpsAlterNote       $09
000DE7FE E701                       	dc.b	smpsNoAttack, $01
000DE800 E10F                       	smpsAlterNote       $0F
000DE802 E701                       	dc.b	smpsNoAttack, $01
000DE804 E110                       	smpsAlterNote       $10
000DE806 8001                       	dc.b	nRst, $01
000DE808 E10B                       	smpsAlterNote       $0B
000DE80A C606 8001                  	dc.b	nA5, $06, nRst, $01
000DE80E E109                       	smpsAlterNote       $09
000DE810 C40D                       	dc.b	nG5, $0D
000DE812 E103                       	smpsAlterNote       $03
000DE814 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE818 E106                       	smpsAlterNote       $06
000DE81A E701                       	dc.b	smpsNoAttack, $01
000DE81C E10C                       	smpsAlterNote       $0C
000DE81E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE822 E106                       	smpsAlterNote       $06
000DE824 E701                       	dc.b	smpsNoAttack, $01
000DE826 E103                       	smpsAlterNote       $03
000DE828 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE82C E109                       	smpsAlterNote       $09
000DE82E E701                       	dc.b	smpsNoAttack, $01
000DE830 E10D                       	smpsAlterNote       $0D
000DE832 E701                       	dc.b	smpsNoAttack, $01
000DE834 E10C                       	smpsAlterNote       $0C
000DE836 E701                       	dc.b	smpsNoAttack, $01
000DE838 E106                       	smpsAlterNote       $06
000DE83A E701                       	dc.b	smpsNoAttack, $01
000DE83C E102                       	smpsAlterNote       $02
000DE83E E701                       	dc.b	smpsNoAttack, $01
000DE840 E103                       	smpsAlterNote       $03
000DE842 8001                       	dc.b	nRst, $01
000DE844 E10B                       	smpsAlterNote       $0B
000DE846 C60D                       	dc.b	nA5, $0D
000DE848 E108                       	smpsAlterNote       $08
000DE84A E701                       	dc.b	smpsNoAttack, $01
000DE84C E104                       	smpsAlterNote       $04
000DE84E E701                       	dc.b	smpsNoAttack, $01
000DE850 E108                       	smpsAlterNote       $08
000DE852 E701                       	dc.b	smpsNoAttack, $01
000DE854 E10B                       	smpsAlterNote       $0B
000DE856 E701                       	dc.b	smpsNoAttack, $01
000DE858 E10F                       	smpsAlterNote       $0F
000DE85A E701                       	dc.b	smpsNoAttack, $01
000DE85C E10B                       	smpsAlterNote       $0B
000DE85E E701                       	dc.b	smpsNoAttack, $01
000DE860 E105                       	smpsAlterNote       $05
000DE862 E701                       	dc.b	smpsNoAttack, $01
000DE864 E104                       	smpsAlterNote       $04
000DE866 E701                       	dc.b	smpsNoAttack, $01
000DE868 E108                       	smpsAlterNote       $08
000DE86A E701                       	dc.b	smpsNoAttack, $01
000DE86C E10E                       	smpsAlterNote       $0E
000DE86E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE872 E10B                       	smpsAlterNote       $0B
000DE874 E701                       	dc.b	smpsNoAttack, $01
000DE876 E105                       	smpsAlterNote       $05
000DE878 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE87C E10C                       	smpsAlterNote       $0C
000DE87E C70E                       	dc.b	nBb5, $0E
000DE880 E106                       	smpsAlterNote       $06
000DE882 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE886 E10C                       	smpsAlterNote       $0C
000DE888 E701                       	dc.b	smpsNoAttack, $01
000DE88A E10F                       	smpsAlterNote       $0F
000DE88C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE890 E109                       	smpsAlterNote       $09
000DE892 E701                       	dc.b	smpsNoAttack, $01
000DE894 E105                       	smpsAlterNote       $05
000DE896 E701                       	dc.b	smpsNoAttack, $01
000DE898 E106                       	smpsAlterNote       $06
000DE89A E701                       	dc.b	smpsNoAttack, $01
000DE89C E10C                       	smpsAlterNote       $0C
000DE89E E701                       	dc.b	smpsNoAttack, $01
000DE8A0 E110                       	smpsAlterNote       $10
000DE8A2 E701                       	dc.b	smpsNoAttack, $01
000DE8A4 E10C                       	smpsAlterNote       $0C
000DE8A6 E701                       	dc.b	smpsNoAttack, $01
000DE8A8 E109                       	smpsAlterNote       $09
000DE8AA E701                       	dc.b	smpsNoAttack, $01
000DE8AC E105                       	smpsAlterNote       $05
000DE8AE E701                       	dc.b	smpsNoAttack, $01
000DE8B0 E106                       	smpsAlterNote       $06
000DE8B2 8001 C90C                  	dc.b	nRst, $01, nC6, $0C
000DE8B6 E107                       	smpsAlterNote       $07
000DE8B8 CA01 E7CB 01               	dc.b	nCs6, $01, smpsNoAttack, nD6, $01
000DE8BD E108                       	smpsAlterNote       $08
000DE8BF CD0D                       	dc.b	nE6, $0D
000DE8C1 E107                       	smpsAlterNote       $07
000DE8C3 CB0D                       	dc.b	nD6, $0D
000DE8C5 E104                       	smpsAlterNote       $04
000DE8C7 E701                       	dc.b	smpsNoAttack, $01
000DE8C9 E100                       	smpsAlterNote       $00
000DE8CB E701                       	dc.b	smpsNoAttack, $01
000DE8CD E101                       	smpsAlterNote       $01
000DE8CF E701                       	dc.b	smpsNoAttack, $01
000DE8D1 E107                       	smpsAlterNote       $07
000DE8D3 E701                       	dc.b	smpsNoAttack, $01
000DE8D5 E10B                       	smpsAlterNote       $0B
000DE8D7 E701                       	dc.b	smpsNoAttack, $01
000DE8D9 E107                       	smpsAlterNote       $07
000DE8DB E701                       	dc.b	smpsNoAttack, $01
000DE8DD E104                       	smpsAlterNote       $04
000DE8DF E701                       	dc.b	smpsNoAttack, $01
000DE8E1 E100                       	smpsAlterNote       $00
000DE8E3 E701                       	dc.b	smpsNoAttack, $01
000DE8E5 E104                       	smpsAlterNote       $04
000DE8E7 E701                       	dc.b	smpsNoAttack, $01
000DE8E9 E10A                       	smpsAlterNote       $0A
000DE8EB E701                       	dc.b	smpsNoAttack, $01
000DE8ED E10B                       	smpsAlterNote       $0B
000DE8EF E701                       	dc.b	smpsNoAttack, $01
000DE8F1 E108                       	smpsAlterNote       $08
000DE8F3 CC0D                       	dc.b	nEb6, $0D
000DE8F5 E105                       	smpsAlterNote       $05
000DE8F7 E701                       	dc.b	smpsNoAttack, $01
000DE8F9 E101                       	smpsAlterNote       $01
000DE8FB E701                       	dc.b	smpsNoAttack, $01
000DE8FD E102                       	smpsAlterNote       $02
000DE8FF E701                       	dc.b	smpsNoAttack, $01
000DE901 E108                       	smpsAlterNote       $08
000DE903 E701                       	dc.b	smpsNoAttack, $01
000DE905 E106                       	smpsAlterNote       $06
000DE907 C903 8004 C902 C902 8001+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nRst, $01, nC6, $01
000DE913 8001                       	dc.b	nRst, $01
000DE915 E107                       	smpsAlterNote       $07
000DE917 CB0D                       	dc.b	nD6, $0D
000DE919 E104                       	smpsAlterNote       $04
000DE91B E701                       	dc.b	smpsNoAttack, $01
000DE91D E100                       	smpsAlterNote       $00
000DE91F E701                       	dc.b	smpsNoAttack, $01
000DE921 E104                       	smpsAlterNote       $04
000DE923 E701                       	dc.b	smpsNoAttack, $01
000DE925 E107                       	smpsAlterNote       $07
000DE927 E701                       	dc.b	smpsNoAttack, $01
000DE929 E10B                       	smpsAlterNote       $0B
000DE92B E701                       	dc.b	smpsNoAttack, $01
000DE92D E107                       	smpsAlterNote       $07
000DE92F E701                       	dc.b	smpsNoAttack, $01
000DE931 E101                       	smpsAlterNote       $01
000DE933 E701                       	dc.b	smpsNoAttack, $01
000DE935 E100                       	smpsAlterNote       $00
000DE937 E701                       	dc.b	smpsNoAttack, $01
000DE939 E104                       	smpsAlterNote       $04
000DE93B E701                       	dc.b	smpsNoAttack, $01
000DE93D E10A                       	smpsAlterNote       $0A
000DE93F E701                       	dc.b	smpsNoAttack, $01
000DE941 E10B                       	smpsAlterNote       $0B
000DE943 8001                       	dc.b	nRst, $01
000DE945 E109                       	smpsAlterNote       $09
000DE947 CE0A                       	dc.b	nF6, $0A
000DE949 E108                       	smpsAlterNote       $08
000DE94B CC07                       	dc.b	nEb6, $07
000DE94D E106                       	smpsAlterNote       $06
000DE94F C903 8004 C902 C902 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $02, nC6, $02, nC6, $02, nRst, $01
000DE95B E107                       	smpsAlterNote       $07
000DE95D CB0D                       	dc.b	nD6, $0D
000DE95F E101                       	smpsAlterNote       $01
000DE961 E701                       	dc.b	smpsNoAttack, $01
000DE963 E100                       	smpsAlterNote       $00
000DE965 E701                       	dc.b	smpsNoAttack, $01
000DE967 E104                       	smpsAlterNote       $04
000DE969 E701                       	dc.b	smpsNoAttack, $01
000DE96B E10A                       	smpsAlterNote       $0A
000DE96D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE971 E107                       	smpsAlterNote       $07
000DE973 E701                       	dc.b	smpsNoAttack, $01
000DE975 E101                       	smpsAlterNote       $01
000DE977 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE97B E107                       	smpsAlterNote       $07
000DE97D E701                       	dc.b	smpsNoAttack, $01
000DE97F E10A                       	smpsAlterNote       $0A
000DE981 E701                       	dc.b	smpsNoAttack, $01
000DE983 E10B                       	smpsAlterNote       $0B
000DE985 8001                       	dc.b	nRst, $01
000DE987 E108                       	smpsAlterNote       $08
000DE989 CC0D                       	dc.b	nEb6, $0D
000DE98B E102                       	smpsAlterNote       $02
000DE98D E701                       	dc.b	smpsNoAttack, $01
000DE98F E101                       	smpsAlterNote       $01
000DE991 E701                       	dc.b	smpsNoAttack, $01
000DE993 E105                       	smpsAlterNote       $05
000DE995 E701                       	dc.b	smpsNoAttack, $01
000DE997 E108                       	smpsAlterNote       $08
000DE999 8001                       	dc.b	nRst, $01
000DE99B E106                       	smpsAlterNote       $06
000DE99D C903 8004 C901 8001 C902+  	dc.b	nC6, $03, nRst, $04, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000DE9A9 8001                       	dc.b	nRst, $01
000DE9AB E107                       	smpsAlterNote       $07
000DE9AD CB0D                       	dc.b	nD6, $0D
000DE9AF E101                       	smpsAlterNote       $01
000DE9B1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE9B5 E104                       	smpsAlterNote       $04
000DE9B7 E701                       	dc.b	smpsNoAttack, $01
000DE9B9 E10A                       	smpsAlterNote       $0A
000DE9BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE9BF E104                       	smpsAlterNote       $04
000DE9C1 E701                       	dc.b	smpsNoAttack, $01
000DE9C3 E101                       	smpsAlterNote       $01
000DE9C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DE9C9 E107                       	smpsAlterNote       $07
000DE9CB E701                       	dc.b	smpsNoAttack, $01
000DE9CD E10B                       	smpsAlterNote       $0B
000DE9CF E701                       	dc.b	smpsNoAttack, $01
000DE9D1 E10A                       	smpsAlterNote       $0A
000DE9D3 E701                       	dc.b	smpsNoAttack, $01
000DE9D5 E104                       	smpsAlterNote       $04
000DE9D7 E701                       	dc.b	smpsNoAttack, $01
000DE9D9 E100                       	smpsAlterNote       $00
000DE9DB E701                       	dc.b	smpsNoAttack, $01
000DE9DD E101                       	smpsAlterNote       $01
000DE9DF 801C                       	dc.b	nRst, $1C
000DE9E3 E107                       	smpsAlterNote       $07
000DE9E5 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DE9E9 E603                       	smpsAlterVol        $03
000DE9EB F6F1 AD                    	smpsJump            music84_Jump03
000DE9EE                            
000DE9EE                            ; FM3 Data
000DE9EE                            music84_FM3:
000DE9EE E0C0                       	smpsPan             panCenter, $00
000DE9F2 E109                       	smpsAlterNote       $09
000DE9F4 C203 8007                  	dc.b	nF5, $03, nRst, $07
000DE9F8 E108                       	smpsAlterNote       $08
000DE9FA C103 800B                  	dc.b	nE5, $03, nRst, $0B
000DE9FE E10B                       	smpsAlterNote       $0B
000DEA00 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000DEA06 E040                       	smpsPan             panRight, $00
000DEA08 E110                       	smpsAlterNote       $10
000DEA0A E6F9                       	smpsAlterVol        $F9
000DEA0C C702 8001                  	dc.b	nBb5, $02, nRst, $01
000DEA10 E10F                       	smpsAlterNote       $0F
000DEA12 C603                       	dc.b	nA5, $03
000DEA14 E10D                       	smpsAlterNote       $0D
000DEA16 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000DEA1C E10C                       	smpsAlterNote       $0C
000DEA1E C103 8001                  	dc.b	nE5, $03, nRst, $01
000DEA22 E10A                       	smpsAlterNote       $0A
000DEA24 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000DEA28 E10F                       	smpsAlterNote       $0F
000DEA2A BA01 8001                  	dc.b	nA4, $01, nRst, $01
000DEA2E E0C0                       	smpsPan             panCenter, $00
000DEA32 E109                       	smpsAlterNote       $09
000DEA34 E609                       	smpsAlterVol        $09
000DEA36 B603                       	dc.b	nF4, $03
000DEA38                            
000DEA38                            music84_Jump02:
000DEA38 E70A                       	dc.b	smpsNoAttack, $0A
000DEA3A E103                       	smpsAlterNote       $03
000DEA3C E701                       	dc.b	smpsNoAttack, $01
000DEA3E E102                       	smpsAlterNote       $02
000DEA40 E701                       	dc.b	smpsNoAttack, $01
000DEA42 E106                       	smpsAlterNote       $06
000DEA44 E701                       	dc.b	smpsNoAttack, $01
000DEA46 E10C                       	smpsAlterNote       $0C
000DEA48 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEA4C E109                       	smpsAlterNote       $09
000DEA4E E701                       	dc.b	smpsNoAttack, $01
000DEA50 E103                       	smpsAlterNote       $03
000DEA52 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEA56 E109                       	smpsAlterNote       $09
000DEA58 E701                       	dc.b	smpsNoAttack, $01
000DEA5A E10C                       	smpsAlterNote       $0C
000DEA5C E701                       	dc.b	smpsNoAttack, $01
000DEA5E E10D                       	smpsAlterNote       $0D
000DEA60 8001                       	dc.b	nRst, $01
000DEA62 E109                       	smpsAlterNote       $09
000DEA64 B80D                       	dc.b	nG4, $0D
000DEA66 E103                       	smpsAlterNote       $03
000DEA68 E701                       	dc.b	smpsNoAttack, $01
000DEA6A E102                       	smpsAlterNote       $02
000DEA6C E701                       	dc.b	smpsNoAttack, $01
000DEA6E E106                       	smpsAlterNote       $06
000DEA70 E701                       	dc.b	smpsNoAttack, $01
000DEA72 E10C                       	smpsAlterNote       $0C
000DEA74 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEA78 E109                       	smpsAlterNote       $09
000DEA7A E701                       	dc.b	smpsNoAttack, $01
000DEA7C E103                       	smpsAlterNote       $03
000DEA7E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEA82 E109                       	smpsAlterNote       $09
000DEA84 E701                       	dc.b	smpsNoAttack, $01
000DEA86 E10C                       	smpsAlterNote       $0C
000DEA88 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEA8C E106                       	smpsAlterNote       $06
000DEA8E E701                       	dc.b	smpsNoAttack, $01
000DEA90 E102                       	smpsAlterNote       $02
000DEA92 E701                       	dc.b	smpsNoAttack, $01
000DEA94 E103                       	smpsAlterNote       $03
000DEA96 E701                       	dc.b	smpsNoAttack, $01
000DEA98 E109                       	smpsAlterNote       $09
000DEA9A E701                       	dc.b	smpsNoAttack, $01
000DEA9C E10D                       	smpsAlterNote       $0D
000DEA9E E701                       	dc.b	smpsNoAttack, $01
000DEAA0 E109                       	smpsAlterNote       $09
000DEAA2 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DEAA6 E10B                       	smpsAlterNote       $0B
000DEAA8 BA0D                       	dc.b	nA4, $0D
000DEAAA E105                       	smpsAlterNote       $05
000DEAAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEAB0 E108                       	smpsAlterNote       $08
000DEAB2 E701                       	dc.b	smpsNoAttack, $01
000DEAB4 E10E                       	smpsAlterNote       $0E
000DEAB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEABA E108                       	smpsAlterNote       $08
000DEABC E701                       	dc.b	smpsNoAttack, $01
000DEABE E104                       	smpsAlterNote       $04
000DEAC0 E701                       	dc.b	smpsNoAttack, $01
000DEAC2 E105                       	smpsAlterNote       $05
000DEAC4 E701                       	dc.b	smpsNoAttack, $01
000DEAC6 E10B                       	smpsAlterNote       $0B
000DEAC8 E701                       	dc.b	smpsNoAttack, $01
000DEACA E10F                       	smpsAlterNote       $0F
000DEACC E701                       	dc.b	smpsNoAttack, $01
000DEACE E10B                       	smpsAlterNote       $0B
000DEAD0 E701                       	dc.b	smpsNoAttack, $01
000DEAD2 E108                       	smpsAlterNote       $08
000DEAD4 E701                       	dc.b	smpsNoAttack, $01
000DEAD6 E104                       	smpsAlterNote       $04
000DEAD8 E701                       	dc.b	smpsNoAttack, $01
000DEADA E108                       	smpsAlterNote       $08
000DEADC E701                       	dc.b	smpsNoAttack, $01
000DEADE E10E                       	smpsAlterNote       $0E
000DEAE0 E701                       	dc.b	smpsNoAttack, $01
000DEAE2 E10F                       	smpsAlterNote       $0F
000DEAE4 E701                       	dc.b	smpsNoAttack, $01
000DEAE6 E10B                       	smpsAlterNote       $0B
000DEAE8 E701                       	dc.b	smpsNoAttack, $01
000DEAEA E105                       	smpsAlterNote       $05
000DEAEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEAF0 E108                       	smpsAlterNote       $08
000DEAF2 E701                       	dc.b	smpsNoAttack, $01
000DEAF4 E10E                       	smpsAlterNote       $0E
000DEAF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEAFA E108                       	smpsAlterNote       $08
000DEAFC E701                       	dc.b	smpsNoAttack, $01
000DEAFE E105                       	smpsAlterNote       $05
000DEB00 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB04 E10B                       	smpsAlterNote       $0B
000DEB06 E701                       	dc.b	smpsNoAttack, $01
000DEB08 E10F                       	smpsAlterNote       $0F
000DEB0A E701                       	dc.b	smpsNoAttack, $01
000DEB0C E10E                       	smpsAlterNote       $0E
000DEB0E E701                       	dc.b	smpsNoAttack, $01
000DEB10 E108                       	smpsAlterNote       $08
000DEB12 E701                       	dc.b	smpsNoAttack, $01
000DEB14 E104                       	smpsAlterNote       $04
000DEB16 E701                       	dc.b	smpsNoAttack, $01
000DEB18 E105                       	smpsAlterNote       $05
000DEB1A 8001                       	dc.b	nRst, $01
000DEB1C E108                       	smpsAlterNote       $08
000DEB1E B50A                       	dc.b	nE4, $0A
000DEB20 E109                       	smpsAlterNote       $09
000DEB22 B60D                       	dc.b	nF4, $0D
000DEB24 E106                       	smpsAlterNote       $06
000DEB26 E701                       	dc.b	smpsNoAttack, $01
000DEB28 E103                       	smpsAlterNote       $03
000DEB2A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB2E E109                       	smpsAlterNote       $09
000DEB30 E701                       	dc.b	smpsNoAttack, $01
000DEB32 E10D                       	smpsAlterNote       $0D
000DEB34 E701                       	dc.b	smpsNoAttack, $01
000DEB36 E10C                       	smpsAlterNote       $0C
000DEB38 E701                       	dc.b	smpsNoAttack, $01
000DEB3A E106                       	smpsAlterNote       $06
000DEB3C E701                       	dc.b	smpsNoAttack, $01
000DEB3E E102                       	smpsAlterNote       $02
000DEB40 E701                       	dc.b	smpsNoAttack, $01
000DEB42 E106                       	smpsAlterNote       $06
000DEB44 E701                       	dc.b	smpsNoAttack, $01
000DEB46 E109                       	smpsAlterNote       $09
000DEB48 E701                       	dc.b	smpsNoAttack, $01
000DEB4A E10D                       	smpsAlterNote       $0D
000DEB4C E701                       	dc.b	smpsNoAttack, $01
000DEB4E E109                       	smpsAlterNote       $09
000DEB50 B80D                       	dc.b	nG4, $0D
000DEB52 E106                       	smpsAlterNote       $06
000DEB54 E701                       	dc.b	smpsNoAttack, $01
000DEB56 E103                       	smpsAlterNote       $03
000DEB58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB5C E109                       	smpsAlterNote       $09
000DEB5E E701                       	dc.b	smpsNoAttack, $01
000DEB60 E10D                       	smpsAlterNote       $0D
000DEB62 E701                       	dc.b	smpsNoAttack, $01
000DEB64 E10C                       	smpsAlterNote       $0C
000DEB66 E701                       	dc.b	smpsNoAttack, $01
000DEB68 E106                       	smpsAlterNote       $06
000DEB6A E701                       	dc.b	smpsNoAttack, $01
000DEB6C E102                       	smpsAlterNote       $02
000DEB6E E701                       	dc.b	smpsNoAttack, $01
000DEB70 E106                       	smpsAlterNote       $06
000DEB72 E701                       	dc.b	smpsNoAttack, $01
000DEB74 E109                       	smpsAlterNote       $09
000DEB76 E701                       	dc.b	smpsNoAttack, $01
000DEB78 E10D                       	smpsAlterNote       $0D
000DEB7A E701                       	dc.b	smpsNoAttack, $01
000DEB7C E109                       	smpsAlterNote       $09
000DEB7E E701                       	dc.b	smpsNoAttack, $01
000DEB80 E103                       	smpsAlterNote       $03
000DEB82 E701                       	dc.b	smpsNoAttack, $01
000DEB84 E102                       	smpsAlterNote       $02
000DEB86 E701                       	dc.b	smpsNoAttack, $01
000DEB88 E106                       	smpsAlterNote       $06
000DEB8A E701                       	dc.b	smpsNoAttack, $01
000DEB8C E10C                       	smpsAlterNote       $0C
000DEB8E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEB92 E109                       	smpsAlterNote       $09
000DEB94 E701                       	dc.b	smpsNoAttack, $01
000DEB96 E10B                       	smpsAlterNote       $0B
000DEB98 BA0D                       	dc.b	nA4, $0D
000DEB9A E108                       	smpsAlterNote       $08
000DEB9C E701                       	dc.b	smpsNoAttack, $01
000DEB9E E104                       	smpsAlterNote       $04
000DEBA0 E701                       	dc.b	smpsNoAttack, $01
000DEBA2 E108                       	smpsAlterNote       $08
000DEBA4 E701                       	dc.b	smpsNoAttack, $01
000DEBA6 E10B                       	smpsAlterNote       $0B
000DEBA8 E701                       	dc.b	smpsNoAttack, $01
000DEBAA E10F                       	smpsAlterNote       $0F
000DEBAC E701                       	dc.b	smpsNoAttack, $01
000DEBAE E10B                       	smpsAlterNote       $0B
000DEBB0 E701                       	dc.b	smpsNoAttack, $01
000DEBB2 E105                       	smpsAlterNote       $05
000DEBB4 E701                       	dc.b	smpsNoAttack, $01
000DEBB6 E104                       	smpsAlterNote       $04
000DEBB8 E701                       	dc.b	smpsNoAttack, $01
000DEBBA E108                       	smpsAlterNote       $08
000DEBBC E701                       	dc.b	smpsNoAttack, $01
000DEBBE E10E                       	smpsAlterNote       $0E
000DEBC0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEBC4 E10B                       	smpsAlterNote       $0B
000DEBC6 E701                       	dc.b	smpsNoAttack, $01
000DEBC8 E105                       	smpsAlterNote       $05
000DEBCA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEBCE E10B                       	smpsAlterNote       $0B
000DEBD0 E701                       	dc.b	smpsNoAttack, $01
000DEBD2 E10E                       	smpsAlterNote       $0E
000DEBD4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEBD8 E108                       	smpsAlterNote       $08
000DEBDA E701                       	dc.b	smpsNoAttack, $01
000DEBDC E104                       	smpsAlterNote       $04
000DEBDE E701                       	dc.b	smpsNoAttack, $01
000DEBE0 E105                       	smpsAlterNote       $05
000DEBE2 E701                       	dc.b	smpsNoAttack, $01
000DEBE4 E10B                       	smpsAlterNote       $0B
000DEBE6 E701                       	dc.b	smpsNoAttack, $01
000DEBE8 E10F                       	smpsAlterNote       $0F
000DEBEA E701                       	dc.b	smpsNoAttack, $01
000DEBEC E10B                       	smpsAlterNote       $0B
000DEBEE E701                       	dc.b	smpsNoAttack, $01
000DEBF0 E108                       	smpsAlterNote       $08
000DEBF2 E701                       	dc.b	smpsNoAttack, $01
000DEBF4 E105                       	smpsAlterNote       $05
000DEBF6 8001                       	dc.b	nRst, $01
000DEBF8 E109                       	smpsAlterNote       $09
000DEBFA B609 8001                  	dc.b	nF4, $09, nRst, $01
000DEBFE E108                       	smpsAlterNote       $08
000DEC00 B506 8001                  	dc.b	nE4, $06, nRst, $01
000DEC04 E107                       	smpsAlterNote       $07
000DEC06 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000DEC0A E108                       	smpsAlterNote       $08
000DEC0C B502 8001                  	dc.b	nE4, $02, nRst, $01
000DEC10 E109                       	smpsAlterNote       $09
000DEC12 B603 B803 8001             	dc.b	nF4, $03, nG4, $03, nRst, $01
000DEC18 E10B                       	smpsAlterNote       $0B
000DEC1A BA0D                       	dc.b	nA4, $0D
000DEC1C E108                       	smpsAlterNote       $08
000DEC1E E701                       	dc.b	smpsNoAttack, $01
000DEC20 E104                       	smpsAlterNote       $04
000DEC22 E701                       	dc.b	smpsNoAttack, $01
000DEC24 E108                       	smpsAlterNote       $08
000DEC26 E701                       	dc.b	smpsNoAttack, $01
000DEC28 E10E                       	smpsAlterNote       $0E
000DEC2A E701                       	dc.b	smpsNoAttack, $01
000DEC2C E10F                       	smpsAlterNote       $0F
000DEC2E E701                       	dc.b	smpsNoAttack, $01
000DEC30 E10B                       	smpsAlterNote       $0B
000DEC32 E701                       	dc.b	smpsNoAttack, $01
000DEC34 E105                       	smpsAlterNote       $05
000DEC36 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC3A E108                       	smpsAlterNote       $08
000DEC3C E701                       	dc.b	smpsNoAttack, $01
000DEC3E E10E                       	smpsAlterNote       $0E
000DEC40 E701                       	dc.b	smpsNoAttack, $01
000DEC42 E10F                       	smpsAlterNote       $0F
000DEC44 8001                       	dc.b	nRst, $01
000DEC46 E109                       	smpsAlterNote       $09
000DEC48 C20D                       	dc.b	nF5, $0D
000DEC4A E103                       	smpsAlterNote       $03
000DEC4C E701                       	dc.b	smpsNoAttack, $01
000DEC4E E102                       	smpsAlterNote       $02
000DEC50 E701                       	dc.b	smpsNoAttack, $01
000DEC52 E106                       	smpsAlterNote       $06
000DEC54 E701                       	dc.b	smpsNoAttack, $01
000DEC56 E10C                       	smpsAlterNote       $0C
000DEC58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC5C E109                       	smpsAlterNote       $09
000DEC5E E701                       	dc.b	smpsNoAttack, $01
000DEC60 E103                       	smpsAlterNote       $03
000DEC62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC66 E109                       	smpsAlterNote       $09
000DEC68 E701                       	dc.b	smpsNoAttack, $01
000DEC6A E10C                       	smpsAlterNote       $0C
000DEC6C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEC70 E106                       	smpsAlterNote       $06
000DEC72 E701                       	dc.b	smpsNoAttack, $01
000DEC74 E102                       	smpsAlterNote       $02
000DEC76 E701                       	dc.b	smpsNoAttack, $01
000DEC78 E103                       	smpsAlterNote       $03
000DEC7A E701                       	dc.b	smpsNoAttack, $01
000DEC7C E109                       	smpsAlterNote       $09
000DEC7E E701                       	dc.b	smpsNoAttack, $01
000DEC80 E10D                       	smpsAlterNote       $0D
000DEC82 E701                       	dc.b	smpsNoAttack, $01
000DEC84 E109                       	smpsAlterNote       $09
000DEC86 E701                       	dc.b	smpsNoAttack, $01
000DEC88 E106                       	smpsAlterNote       $06
000DEC8A E701                       	dc.b	smpsNoAttack, $01
000DEC8C E102                       	smpsAlterNote       $02
000DEC8E E701                       	dc.b	smpsNoAttack, $01
000DEC90 E106                       	smpsAlterNote       $06
000DEC92 E701                       	dc.b	smpsNoAttack, $01
000DEC94 E10C                       	smpsAlterNote       $0C
000DEC96 E701                       	dc.b	smpsNoAttack, $01
000DEC98 E10D                       	smpsAlterNote       $0D
000DEC9A E701                       	dc.b	smpsNoAttack, $01
000DEC9C E109                       	smpsAlterNote       $09
000DEC9E E701                       	dc.b	smpsNoAttack, $01
000DECA0 E103                       	smpsAlterNote       $03
000DECA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECA6 E106                       	smpsAlterNote       $06
000DECA8 E701                       	dc.b	smpsNoAttack, $01
000DECAA E10C                       	smpsAlterNote       $0C
000DECAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECB0 E106                       	smpsAlterNote       $06
000DECB2 E701                       	dc.b	smpsNoAttack, $01
000DECB4 E103                       	smpsAlterNote       $03
000DECB6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECBA E109                       	smpsAlterNote       $09
000DECBC E701                       	dc.b	smpsNoAttack, $01
000DECBE E10D                       	smpsAlterNote       $0D
000DECC0 E701                       	dc.b	smpsNoAttack, $01
000DECC2 E10C                       	smpsAlterNote       $0C
000DECC4 E701                       	dc.b	smpsNoAttack, $01
000DECC6 E106                       	smpsAlterNote       $06
000DECC8 E701                       	dc.b	smpsNoAttack, $01
000DECCA E102                       	smpsAlterNote       $02
000DECCC E701                       	dc.b	smpsNoAttack, $01
000DECCE E106                       	smpsAlterNote       $06
000DECD0 E701                       	dc.b	smpsNoAttack, $01
000DECD2 E109                       	smpsAlterNote       $09
000DECD4 E701                       	dc.b	smpsNoAttack, $01
000DECD6 E10D                       	smpsAlterNote       $0D
000DECD8 E701                       	dc.b	smpsNoAttack, $01
000DECDA E109                       	smpsAlterNote       $09
000DECDC E701                       	dc.b	smpsNoAttack, $01
000DECDE E103                       	smpsAlterNote       $03
000DECE0 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DECE4 E109                       	smpsAlterNote       $09
000DECE6 C206                       	dc.b	nF5, $06
000DECE8 E108                       	smpsAlterNote       $08
000DECEA C10E                       	dc.b	nE5, $0E
000DECEC E102                       	smpsAlterNote       $02
000DECEE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECF2 E108                       	smpsAlterNote       $08
000DECF4 E701                       	dc.b	smpsNoAttack, $01
000DECF6 E10B                       	smpsAlterNote       $0B
000DECF8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DECFC E105                       	smpsAlterNote       $05
000DECFE E701                       	dc.b	smpsNoAttack, $01
000DED00 E101                       	smpsAlterNote       $01
000DED02 E701                       	dc.b	smpsNoAttack, $01
000DED04 E102                       	smpsAlterNote       $02
000DED06 E701                       	dc.b	smpsNoAttack, $01
000DED08 E108                       	smpsAlterNote       $08
000DED0A E701                       	dc.b	smpsNoAttack, $01
000DED0C E10C                       	smpsAlterNote       $0C
000DED0E E701                       	dc.b	smpsNoAttack, $01
000DED10 E107                       	smpsAlterNote       $07
000DED12 BF0E                       	dc.b	nD5, $0E
000DED14 E101                       	smpsAlterNote       $01
000DED16 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED1A E107                       	smpsAlterNote       $07
000DED1C E701                       	dc.b	smpsNoAttack, $01
000DED1E E10A                       	smpsAlterNote       $0A
000DED20 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED24 E104                       	smpsAlterNote       $04
000DED26 E701                       	dc.b	smpsNoAttack, $01
000DED28 E100                       	smpsAlterNote       $00
000DED2A E701                       	dc.b	smpsNoAttack, $01
000DED2C E104                       	smpsAlterNote       $04
000DED2E E701                       	dc.b	smpsNoAttack, $01
000DED30 E107                       	smpsAlterNote       $07
000DED32 E701                       	dc.b	smpsNoAttack, $01
000DED34 E10B                       	smpsAlterNote       $0B
000DED36 E701                       	dc.b	smpsNoAttack, $01
000DED38 E107                       	smpsAlterNote       $07
000DED3A E701                       	dc.b	smpsNoAttack, $01
000DED3C E101                       	smpsAlterNote       $01
000DED3E E701                       	dc.b	smpsNoAttack, $01
000DED40 E100                       	smpsAlterNote       $00
000DED42 E701                       	dc.b	smpsNoAttack, $01
000DED44 E104                       	smpsAlterNote       $04
000DED46 E701                       	dc.b	smpsNoAttack, $01
000DED48 E10A                       	smpsAlterNote       $0A
000DED4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED4E E107                       	smpsAlterNote       $07
000DED50 E701                       	dc.b	smpsNoAttack, $01
000DED52 E101                       	smpsAlterNote       $01
000DED54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED58 E107                       	smpsAlterNote       $07
000DED5A E701                       	dc.b	smpsNoAttack, $01
000DED5C E10A                       	smpsAlterNote       $0A
000DED5E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED62 E104                       	smpsAlterNote       $04
000DED64 E701                       	dc.b	smpsNoAttack, $01
000DED66 E100                       	smpsAlterNote       $00
000DED68 E701                       	dc.b	smpsNoAttack, $01
000DED6A E101                       	smpsAlterNote       $01
000DED6C E701                       	dc.b	smpsNoAttack, $01
000DED6E E107                       	smpsAlterNote       $07
000DED70 E701                       	dc.b	smpsNoAttack, $01
000DED72 E10B                       	smpsAlterNote       $0B
000DED74 E701                       	dc.b	smpsNoAttack, $01
000DED76 E107                       	smpsAlterNote       $07
000DED78 E701                       	dc.b	smpsNoAttack, $01
000DED7A E104                       	smpsAlterNote       $04
000DED7C E701                       	dc.b	smpsNoAttack, $01
000DED7E E100                       	smpsAlterNote       $00
000DED80 E701                       	dc.b	smpsNoAttack, $01
000DED82 E104                       	smpsAlterNote       $04
000DED84 E701                       	dc.b	smpsNoAttack, $01
000DED86 E10A                       	smpsAlterNote       $0A
000DED88 E701                       	dc.b	smpsNoAttack, $01
000DED8A E10B                       	smpsAlterNote       $0B
000DED8C E701                       	dc.b	smpsNoAttack, $01
000DED8E E107                       	smpsAlterNote       $07
000DED90 E701                       	dc.b	smpsNoAttack, $01
000DED92 E101                       	smpsAlterNote       $01
000DED94 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DED98 E104                       	smpsAlterNote       $04
000DED9A E701                       	dc.b	smpsNoAttack, $01
000DED9C E10A                       	smpsAlterNote       $0A
000DED9E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEDA2 E104                       	smpsAlterNote       $04
000DEDA4 E701                       	dc.b	smpsNoAttack, $01
000DEDA6 E101                       	smpsAlterNote       $01
000DEDA8 E701                       	dc.b	smpsNoAttack, $01
000DEDAC E107                       	smpsAlterNote       $07
000DEDAE E6FF                       	smpsAlterVol        $FF
000DEDB0 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000DEDBC 8004                       	dc.b	nRst, $04
000DEDC0 E109                       	smpsAlterNote       $09
000DEDC2 E602                       	smpsAlterVol        $02
000DEDC4 B803 B603 8001             	dc.b	nG4, $03, nF4, $03, nRst, $01
000DEDCA E108                       	smpsAlterNote       $08
000DEDCC B502 8001                  	dc.b	nE4, $02, nRst, $01
000DEDD0 E109                       	smpsAlterNote       $09
000DEDD2 B60D                       	dc.b	nF4, $0D
000DEDD4 E106                       	smpsAlterNote       $06
000DEDD6 E701                       	dc.b	smpsNoAttack, $01
000DEDD8 E102                       	smpsAlterNote       $02
000DEDDA E701                       	dc.b	smpsNoAttack, $01
000DEDDC E106                       	smpsAlterNote       $06
000DEDDE E701                       	dc.b	smpsNoAttack, $01
000DEDE0 E109                       	smpsAlterNote       $09
000DEDE2 E701                       	dc.b	smpsNoAttack, $01
000DEDE4 E10D                       	smpsAlterNote       $0D
000DEDE6 E701                       	dc.b	smpsNoAttack, $01
000DEDE8 E109                       	smpsAlterNote       $09
000DEDEA E701                       	dc.b	smpsNoAttack, $01
000DEDEC E103                       	smpsAlterNote       $03
000DEDEE E701                       	dc.b	smpsNoAttack, $01
000DEDF0 E102                       	smpsAlterNote       $02
000DEDF2 E701                       	dc.b	smpsNoAttack, $01
000DEDF4 E106                       	smpsAlterNote       $06
000DEDF6 E701                       	dc.b	smpsNoAttack, $01
000DEDF8 E10C                       	smpsAlterNote       $0C
000DEDFA E701                       	dc.b	smpsNoAttack, $01
000DEDFC E10D                       	smpsAlterNote       $0D
000DEDFE 8001                       	dc.b	nRst, $01
000DEE00 E109                       	smpsAlterNote       $09
000DEE02 B80D                       	dc.b	nG4, $0D
000DEE04 E106                       	smpsAlterNote       $06
000DEE06 E701                       	dc.b	smpsNoAttack, $01
000DEE08 E102                       	smpsAlterNote       $02
000DEE0A E701                       	dc.b	smpsNoAttack, $01
000DEE0C E106                       	smpsAlterNote       $06
000DEE0E E701                       	dc.b	smpsNoAttack, $01
000DEE10 E10C                       	smpsAlterNote       $0C
000DEE12 E701                       	dc.b	smpsNoAttack, $01
000DEE14 E10D                       	smpsAlterNote       $0D
000DEE16 E701                       	dc.b	smpsNoAttack, $01
000DEE18 E109                       	smpsAlterNote       $09
000DEE1A E701                       	dc.b	smpsNoAttack, $01
000DEE1C E103                       	smpsAlterNote       $03
000DEE1E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEE22 E106                       	smpsAlterNote       $06
000DEE24 E701                       	dc.b	smpsNoAttack, $01
000DEE26 E10C                       	smpsAlterNote       $0C
000DEE28 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEE2C E106                       	smpsAlterNote       $06
000DEE2E E701                       	dc.b	smpsNoAttack, $01
000DEE30 E103                       	smpsAlterNote       $03
000DEE32 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEE36 E109                       	smpsAlterNote       $09
000DEE38 E701                       	dc.b	smpsNoAttack, $01
000DEE3A E10D                       	smpsAlterNote       $0D
000DEE3C E701                       	dc.b	smpsNoAttack, $01
000DEE3E E10C                       	smpsAlterNote       $0C
000DEE40 E701                       	dc.b	smpsNoAttack, $01
000DEE42 E109                       	smpsAlterNote       $09
000DEE44 8001                       	dc.b	nRst, $01
000DEE46 E10B                       	smpsAlterNote       $0B
000DEE48 BA03                       	dc.b	nA4, $03
000DEE4A E10C                       	smpsAlterNote       $0C
000DEE4C BB03 8001                  	dc.b	nBb4, $03, nRst, $01
000DEE50 E10B                       	smpsAlterNote       $0B
000DEE52 BA02 8001 C603             	dc.b	nA4, $02, nRst, $01, nA5, $03
000DEE58 E10C                       	smpsAlterNote       $0C
000DEE5A C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DEE5E E10B                       	smpsAlterNote       $0B
000DEE60 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000DEE66 E10C                       	smpsAlterNote       $0C
000DEE68 D303                       	dc.b	nBb6, $03
000DEE6A E10B                       	smpsAlterNote       $0B
000DEE6C D20D                       	dc.b	nA6, $0D
000DEE6E E108                       	smpsAlterNote       $08
000DEE70 E701                       	dc.b	smpsNoAttack, $01
000DEE72 E104                       	smpsAlterNote       $04
000DEE74 E701                       	dc.b	smpsNoAttack, $01
000DEE76 E105                       	smpsAlterNote       $05
000DEE78 E701                       	dc.b	smpsNoAttack, $01
000DEE7A E10B                       	smpsAlterNote       $0B
000DEE7C E701                       	dc.b	smpsNoAttack, $01
000DEE7E E10F                       	smpsAlterNote       $0F
000DEE80 E701                       	dc.b	smpsNoAttack, $01
000DEE82 E10B                       	smpsAlterNote       $0B
000DEE84 E701                       	dc.b	smpsNoAttack, $01
000DEE86 E108                       	smpsAlterNote       $08
000DEE88 E701                       	dc.b	smpsNoAttack, $01
000DEE8A E104                       	smpsAlterNote       $04
000DEE8C E701                       	dc.b	smpsNoAttack, $01
000DEE8E E108                       	smpsAlterNote       $08
000DEE90 E701                       	dc.b	smpsNoAttack, $01
000DEE92 E10E                       	smpsAlterNote       $0E
000DEE94 E701                       	dc.b	smpsNoAttack, $01
000DEE96 E10F                       	smpsAlterNote       $0F
000DEE98 E701                       	dc.b	smpsNoAttack, $01
000DEE9A E10B                       	smpsAlterNote       $0B
000DEE9C E701                       	dc.b	smpsNoAttack, $01
000DEE9E E105                       	smpsAlterNote       $05
000DEEA0 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000DEEA6 E109                       	smpsAlterNote       $09
000DEEA8 CE07                       	dc.b	nF6, $07
000DEEAA E108                       	smpsAlterNote       $08
000DEEAC CD06 8001                  	dc.b	nE6, $06, nRst, $01
000DEEB0 E109                       	smpsAlterNote       $09
000DEEB2 CE03 8001                  	dc.b	nF6, $03, nRst, $01
000DEEB6 E108                       	smpsAlterNote       $08
000DEEB8 CC0D                       	dc.b	nEb6, $0D
000DEEBA E102                       	smpsAlterNote       $02
000DEEBC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEEC0 E108                       	smpsAlterNote       $08
000DEEC2 E701                       	dc.b	smpsNoAttack, $01
000DEEC4 E10B                       	smpsAlterNote       $0B
000DEEC6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEECA E105                       	smpsAlterNote       $05
000DEECC E701                       	dc.b	smpsNoAttack, $01
000DEECE E101                       	smpsAlterNote       $01
000DEED0 E701                       	dc.b	smpsNoAttack, $01
000DEED2 E102                       	smpsAlterNote       $02
000DEED4 E701                       	dc.b	smpsNoAttack, $01
000DEED6 E108                       	smpsAlterNote       $08
000DEED8 E701                       	dc.b	smpsNoAttack, $01
000DEEDA E10C                       	smpsAlterNote       $0C
000DEEDC E701                       	dc.b	smpsNoAttack, $01
000DEEDE E108                       	smpsAlterNote       $08
000DEEE0 E701                       	dc.b	smpsNoAttack, $01
000DEEE2 E105                       	smpsAlterNote       $05
000DEEE4 E701                       	dc.b	smpsNoAttack, $01
000DEEE6 E101                       	smpsAlterNote       $01
000DEEE8 E701                       	dc.b	smpsNoAttack, $01
000DEEEA E105                       	smpsAlterNote       $05
000DEEEC E701                       	dc.b	smpsNoAttack, $01
000DEEEE E10B                       	smpsAlterNote       $0B
000DEEF0 E701                       	dc.b	smpsNoAttack, $01
000DEEF2 E10C                       	smpsAlterNote       $0C
000DEEF4 E701                       	dc.b	smpsNoAttack, $01
000DEEF6 E108                       	smpsAlterNote       $08
000DEEF8 E701                       	dc.b	smpsNoAttack, $01
000DEEFA E107                       	smpsAlterNote       $07
000DEEFC CB03 8001 CA03 CB03 8001   	dc.b	nD6, $03, nRst, $01, nCs6, $03, nD6, $03, nRst, $01
000DEF06 E10B                       	smpsAlterNote       $0B
000DEF08 C602 8001 C503 C603 8001   	dc.b	nA5, $02, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000DEF12 E109                       	smpsAlterNote       $09
000DEF14 C203                       	dc.b	nF5, $03
000DEF16 E108                       	smpsAlterNote       $08
000DEF18 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DEF1C E109                       	smpsAlterNote       $09
000DEF1E C20D                       	dc.b	nF5, $0D
000DEF20 E108                       	smpsAlterNote       $08
000DEF22 C10E                       	dc.b	nE5, $0E
000DEF24 E107                       	smpsAlterNote       $07
000DEF26 BF0D                       	dc.b	nD5, $0D
000DEF28 E104                       	smpsAlterNote       $04
000DEF2A E701                       	dc.b	smpsNoAttack, $01
000DEF2C E100                       	smpsAlterNote       $00
000DEF2E E701                       	dc.b	smpsNoAttack, $01
000DEF30 E104                       	smpsAlterNote       $04
000DEF32 E701                       	dc.b	smpsNoAttack, $01
000DEF34 E107                       	smpsAlterNote       $07
000DEF36 E701                       	dc.b	smpsNoAttack, $01
000DEF38 E10B                       	smpsAlterNote       $0B
000DEF3A E701                       	dc.b	smpsNoAttack, $01
000DEF3C E107                       	smpsAlterNote       $07
000DEF3E E701                       	dc.b	smpsNoAttack, $01
000DEF40 E101                       	smpsAlterNote       $01
000DEF42 E701                       	dc.b	smpsNoAttack, $01
000DEF44 E100                       	smpsAlterNote       $00
000DEF46 E701                       	dc.b	smpsNoAttack, $01
000DEF48 E104                       	smpsAlterNote       $04
000DEF4A E701                       	dc.b	smpsNoAttack, $01
000DEF4C E10A                       	smpsAlterNote       $0A
000DEF4E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEF52 E107                       	smpsAlterNote       $07
000DEF54 E701                       	dc.b	smpsNoAttack, $01
000DEF56 E101                       	smpsAlterNote       $01
000DEF58 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEF5C E107                       	smpsAlterNote       $07
000DEF5E E701                       	dc.b	smpsNoAttack, $01
000DEF60 E10A                       	smpsAlterNote       $0A
000DEF62 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEF66 E104                       	smpsAlterNote       $04
000DEF68 E701                       	dc.b	smpsNoAttack, $01
000DEF6A E100                       	smpsAlterNote       $00
000DEF6C E701                       	dc.b	smpsNoAttack, $01
000DEF6E E101                       	smpsAlterNote       $01
000DEF70 E701                       	dc.b	smpsNoAttack, $01
000DEF72 E107                       	smpsAlterNote       $07
000DEF74 E701                       	dc.b	smpsNoAttack, $01
000DEF76 E10B                       	smpsAlterNote       $0B
000DEF78 E701                       	dc.b	smpsNoAttack, $01
000DEF7A E107                       	smpsAlterNote       $07
000DEF7C E701                       	dc.b	smpsNoAttack, $01
000DEF7E E104                       	smpsAlterNote       $04
000DEF80 E701                       	dc.b	smpsNoAttack, $01
000DEF82 E100                       	smpsAlterNote       $00
000DEF84 E701                       	dc.b	smpsNoAttack, $01
000DEF86 E104                       	smpsAlterNote       $04
000DEF88 E701                       	dc.b	smpsNoAttack, $01
000DEF8A E10A                       	smpsAlterNote       $0A
000DEF8C E701                       	dc.b	smpsNoAttack, $01
000DEF8E E10B                       	smpsAlterNote       $0B
000DEF90 E701                       	dc.b	smpsNoAttack, $01
000DEF92 E107                       	smpsAlterNote       $07
000DEF94 E701                       	dc.b	smpsNoAttack, $01
000DEF96 E101                       	smpsAlterNote       $01
000DEF98 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEF9C E104                       	smpsAlterNote       $04
000DEF9E E701                       	dc.b	smpsNoAttack, $01
000DEFA0 E10A                       	smpsAlterNote       $0A
000DEFA2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFA6 E104                       	smpsAlterNote       $04
000DEFA8 E701                       	dc.b	smpsNoAttack, $01
000DEFAA E101                       	smpsAlterNote       $01
000DEFAC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFB0 E107                       	smpsAlterNote       $07
000DEFB2 E701                       	dc.b	smpsNoAttack, $01
000DEFB4 E10B                       	smpsAlterNote       $0B
000DEFB6 E701                       	dc.b	smpsNoAttack, $01
000DEFB8 E10A                       	smpsAlterNote       $0A
000DEFBA E701                       	dc.b	smpsNoAttack, $01
000DEFBC E104                       	smpsAlterNote       $04
000DEFBE E701                       	dc.b	smpsNoAttack, $01
000DEFC0 E100                       	smpsAlterNote       $00
000DEFC2 E701                       	dc.b	smpsNoAttack, $01
000DEFC4 E104                       	smpsAlterNote       $04
000DEFC6 E701                       	dc.b	smpsNoAttack, $01
000DEFC8 E107                       	smpsAlterNote       $07
000DEFCA E701                       	dc.b	smpsNoAttack, $01
000DEFCC E10B                       	smpsAlterNote       $0B
000DEFCE E701                       	dc.b	smpsNoAttack, $01
000DEFD0 E107                       	smpsAlterNote       $07
000DEFD2 E701                       	dc.b	smpsNoAttack, $01
000DEFD4 E101                       	smpsAlterNote       $01
000DEFD6 E701                       	dc.b	smpsNoAttack, $01
000DEFD8 E100                       	smpsAlterNote       $00
000DEFDA E701                       	dc.b	smpsNoAttack, $01
000DEFDC E104                       	smpsAlterNote       $04
000DEFDE E701                       	dc.b	smpsNoAttack, $01
000DEFE0 E10A                       	smpsAlterNote       $0A
000DEFE2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFE6 E107                       	smpsAlterNote       $07
000DEFE8 E701                       	dc.b	smpsNoAttack, $01
000DEFEA E101                       	smpsAlterNote       $01
000DEFEC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFF0 E107                       	smpsAlterNote       $07
000DEFF2 E701                       	dc.b	smpsNoAttack, $01
000DEFF4 E10A                       	smpsAlterNote       $0A
000DEFF6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DEFFA E104                       	smpsAlterNote       $04
000DEFFC E701                       	dc.b	smpsNoAttack, $01
000DEFFE E100                       	smpsAlterNote       $00
000DF000 E701                       	dc.b	smpsNoAttack, $01
000DF002 E101                       	smpsAlterNote       $01
000DF004 E701                       	dc.b	smpsNoAttack, $01
000DF006 E107                       	smpsAlterNote       $07
000DF008 E701                       	dc.b	smpsNoAttack, $01
000DF00A E10B                       	smpsAlterNote       $0B
000DF00C E701                       	dc.b	smpsNoAttack, $01
000DF00E E107                       	smpsAlterNote       $07
000DF010 E701                       	dc.b	smpsNoAttack, $01
000DF012 E104                       	smpsAlterNote       $04
000DF014 E701                       	dc.b	smpsNoAttack, $01
000DF016 E100                       	smpsAlterNote       $00
000DF018 E701                       	dc.b	smpsNoAttack, $01
000DF01A E101                       	smpsAlterNote       $01
000DF01C 8001                       	dc.b	nRst, $01
000DF01E E109                       	smpsAlterNote       $09
000DF020 C20D                       	dc.b	nF5, $0D
000DF022 E106                       	smpsAlterNote       $06
000DF024 E701                       	dc.b	smpsNoAttack, $01
000DF026 E102                       	smpsAlterNote       $02
000DF028 E701                       	dc.b	smpsNoAttack, $01
000DF02A E106                       	smpsAlterNote       $06
000DF02C E701                       	dc.b	smpsNoAttack, $01
000DF02E E10C                       	smpsAlterNote       $0C
000DF030 E701                       	dc.b	smpsNoAttack, $01
000DF032 E10D                       	smpsAlterNote       $0D
000DF034 E701                       	dc.b	smpsNoAttack, $01
000DF036 E109                       	smpsAlterNote       $09
000DF038 E701                       	dc.b	smpsNoAttack, $01
000DF03A E103                       	smpsAlterNote       $03
000DF03C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF040 E106                       	smpsAlterNote       $06
000DF042 E701                       	dc.b	smpsNoAttack, $01
000DF044 E10C                       	smpsAlterNote       $0C
000DF046 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF04A E106                       	smpsAlterNote       $06
000DF04C E701                       	dc.b	smpsNoAttack, $01
000DF04E E103                       	smpsAlterNote       $03
000DF050 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF054 E109                       	smpsAlterNote       $09
000DF056 E701                       	dc.b	smpsNoAttack, $01
000DF058 E10D                       	smpsAlterNote       $0D
000DF05A E701                       	dc.b	smpsNoAttack, $01
000DF05C E10C                       	smpsAlterNote       $0C
000DF05E E701                       	dc.b	smpsNoAttack, $01
000DF060 E109                       	smpsAlterNote       $09
000DF062 8001                       	dc.b	nRst, $01
000DF064 E108                       	smpsAlterNote       $08
000DF066 C10D                       	dc.b	nE5, $0D
000DF068 E109                       	smpsAlterNote       $09
000DF06A C20A 8001                  	dc.b	nF5, $0A, nRst, $01
000DF06E E108                       	smpsAlterNote       $08
000DF070 C10D                       	dc.b	nE5, $0D
000DF072 E102                       	smpsAlterNote       $02
000DF074 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF078 E105                       	smpsAlterNote       $05
000DF07A E701                       	dc.b	smpsNoAttack, $01
000DF07C E108                       	smpsAlterNote       $08
000DF07E 8001                       	dc.b	nRst, $01
000DF080 E107                       	smpsAlterNote       $07
000DF082 BF0D                       	dc.b	nD5, $0D
000DF084 E108                       	smpsAlterNote       $08
000DF086 C107                       	dc.b	nE5, $07
000DF088 E109                       	smpsAlterNote       $09
000DF08A C207 C406 8001             	dc.b	nF5, $07, nG5, $06, nRst, $01
000DF090 E10B                       	smpsAlterNote       $0B
000DF092 C603                       	dc.b	nA5, $03
000DF094 E10C                       	smpsAlterNote       $0C
000DF096 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000DF09C E10B                       	smpsAlterNote       $0B
000DF09E C603 D206 8001             	dc.b	nA5, $03, nA6, $06, nRst, $01
000DF0A4 E109                       	smpsAlterNote       $09
000DF0A6 D003                       	dc.b	nG6, $03
000DF0A8 E108                       	smpsAlterNote       $08
000DF0AA CD02 8001                  	dc.b	nE6, $02, nRst, $01
000DF0AE E10B                       	smpsAlterNote       $0B
000DF0B0 C601 8001                  	dc.b	nA5, $01, nRst, $01
000DF0B4 E108                       	smpsAlterNote       $08
000DF0B6 C102                       	dc.b	nE5, $02
000DF0BA E10C                       	smpsAlterNote       $0C
000DF0BC E6FB                       	smpsAlterVol        $FB
000DF0BE A306 800F A303 A303 8019+  	dc.b	nBb2, $06, nRst, $0F, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $02
000DF0CA 8001                       	dc.b	nRst, $01
000DF0CC E10B                       	smpsAlterNote       $0B
000DF0CE A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000DF0D6 E107                       	smpsAlterNote       $07
000DF0D8 A706 8001                  	dc.b	nD3, $06, nRst, $01
000DF0DC E10B                       	smpsAlterNote       $0B
000DF0DE A203                       	dc.b	nA2, $03
000DF0E0 E109                       	smpsAlterNote       $09
000DF0E2 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000DF0E6 E108                       	smpsAlterNote       $08
000DF0E8 A906                       	dc.b	nE3, $06
000DF0EA E107                       	smpsAlterNote       $07
000DF0EC A703 8001                  	dc.b	nD3, $03, nRst, $01
000DF0F0 E106                       	smpsAlterNote       $06
000DF0F2 A503                       	dc.b	nC3, $03
000DF0F4 E10C                       	smpsAlterNote       $0C
000DF0F6 A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DF0FA E10B                       	smpsAlterNote       $0B
000DF0FC A203 8004                  	dc.b	nA2, $03, nRst, $04
000DF100 E11B                       	smpsAlterNote       $1B
000DF102 C401                       	dc.b	nG5, $01
000DF104 E1F4                       	smpsAlterNote       $F4
000DF106 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000DF109 E106                       	smpsAlterNote       $06
000DF10B E701                       	dc.b	smpsNoAttack, $01
000DF10D E10F                       	smpsAlterNote       $0F
000DF10F E701                       	dc.b	smpsNoAttack, $01
000DF111 E1E4                       	smpsAlterNote       $E4
000DF113 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000DF116 E1F6                       	smpsAlterNote       $F6
000DF118 E701                       	dc.b	smpsNoAttack, $01
000DF11A E108                       	smpsAlterNote       $08
000DF11C E701                       	dc.b	smpsNoAttack, $01
000DF11E E10B                       	smpsAlterNote       $0B
000DF120 E706                       	dc.b	smpsNoAttack, $06
000DF122 E105                       	smpsAlterNote       $05
000DF124 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF128 E108                       	smpsAlterNote       $08
000DF12A E701                       	dc.b	smpsNoAttack, $01
000DF12C E10E                       	smpsAlterNote       $0E
000DF12E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF132 E108                       	smpsAlterNote       $08
000DF134 E701                       	dc.b	smpsNoAttack, $01
000DF136 E105                       	smpsAlterNote       $05
000DF138 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF13C E10B                       	smpsAlterNote       $0B
000DF13E E701                       	dc.b	smpsNoAttack, $01
000DF140 E10F                       	smpsAlterNote       $0F
000DF142 E701                       	dc.b	smpsNoAttack, $01
000DF144 E10E                       	smpsAlterNote       $0E
000DF146 E701                       	dc.b	smpsNoAttack, $01
000DF148 E108                       	smpsAlterNote       $08
000DF14A E701                       	dc.b	smpsNoAttack, $01
000DF14C E104                       	smpsAlterNote       $04
000DF14E E701                       	dc.b	smpsNoAttack, $01
000DF150 E108                       	smpsAlterNote       $08
000DF152 E701                       	dc.b	smpsNoAttack, $01
000DF154 E10B                       	smpsAlterNote       $0B
000DF156 E701                       	dc.b	smpsNoAttack, $01
000DF158 E10F                       	smpsAlterNote       $0F
000DF15A E701                       	dc.b	smpsNoAttack, $01
000DF15C E10B                       	smpsAlterNote       $0B
000DF15E E701                       	dc.b	smpsNoAttack, $01
000DF160 E105                       	smpsAlterNote       $05
000DF162 E701                       	dc.b	smpsNoAttack, $01
000DF164 E104                       	smpsAlterNote       $04
000DF166 E701                       	dc.b	smpsNoAttack, $01
000DF168 E108                       	smpsAlterNote       $08
000DF16A E701                       	dc.b	smpsNoAttack, $01
000DF16C E10E                       	smpsAlterNote       $0E
000DF16E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF172 E10B                       	smpsAlterNote       $0B
000DF174 E701                       	dc.b	smpsNoAttack, $01
000DF176 E105                       	smpsAlterNote       $05
000DF178 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF17C E10B                       	smpsAlterNote       $0B
000DF17E E701                       	dc.b	smpsNoAttack, $01
000DF180 E10E                       	smpsAlterNote       $0E
000DF182 E701                       	dc.b	smpsNoAttack, $01
000DF184 E10F                       	smpsAlterNote       $0F
000DF186 8001                       	dc.b	nRst, $01
000DF188 E109                       	smpsAlterNote       $09
000DF18A C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000DF190 E108                       	smpsAlterNote       $08
000DF192 C101 8001                  	dc.b	nE5, $01, nRst, $01
000DF196 E109                       	smpsAlterNote       $09
000DF198 C202                       	dc.b	nF5, $02
000DF19A E108                       	smpsAlterNote       $08
000DF19C C102                       	dc.b	nE5, $02
000DF19E E107                       	smpsAlterNote       $07
000DF1A0 BF02 8001                  	dc.b	nD5, $02, nRst, $01
000DF1A4 E108                       	smpsAlterNote       $08
000DF1A6 C101 8001                  	dc.b	nE5, $01, nRst, $01
000DF1AA E107                       	smpsAlterNote       $07
000DF1AC BF02                       	dc.b	nD5, $02
000DF1AE E106                       	smpsAlterNote       $06
000DF1B0 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000DF1B4 E107                       	smpsAlterNote       $07
000DF1B6 BF01 8001                  	dc.b	nD5, $01, nRst, $01
000DF1BA E106                       	smpsAlterNote       $06
000DF1BC BD02                       	dc.b	nC5, $02
000DF1BE E10C                       	smpsAlterNote       $0C
000DF1C0 BB02                       	dc.b	nBb4, $02
000DF1C2 E106                       	smpsAlterNote       $06
000DF1C4 BD02 8001                  	dc.b	nC5, $02, nRst, $01
000DF1C8 E10C                       	smpsAlterNote       $0C
000DF1CA BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000DF1CE E10B                       	smpsAlterNote       $0B
000DF1D0 BA02                       	dc.b	nA4, $02
000DF1D2 E10C                       	smpsAlterNote       $0C
000DF1D4 BB02                       	dc.b	nBb4, $02
000DF1D6 E10B                       	smpsAlterNote       $0B
000DF1D8 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000DF1E2 E108                       	smpsAlterNote       $08
000DF1E4 B502 8001 C101 8001        	dc.b	nE4, $02, nRst, $01, nE5, $01, nRst, $01
000DF1EC E107                       	smpsAlterNote       $07
000DF1EE BE02                       	dc.b	nCs5, $02
000DF1F0 E10B                       	smpsAlterNote       $0B
000DF1F2 BA02                       	dc.b	nA4, $02
000DF1F4 E109                       	smpsAlterNote       $09
000DF1F6 B802 8001                  	dc.b	nG4, $02, nRst, $01
000DF1FA E108                       	smpsAlterNote       $08
000DF1FC B501 8001                  	dc.b	nE4, $01, nRst, $01
000DF200 E10B                       	smpsAlterNote       $0B
000DF202 AE02                       	dc.b	nA3, $02
000DF204 E10C                       	smpsAlterNote       $0C
000DF206 A307 800E A303 A303 8019+  	dc.b	nBb2, $07, nRst, $0E, nBb2, $03, nBb2, $03, nRst, $19, nBb2, $03
000DF212 E10B                       	smpsAlterNote       $0B
000DF214 A206 800F A202 8001        	dc.b	nA2, $06, nRst, $0F, nA2, $02, nRst, $01
000DF21C E107                       	smpsAlterNote       $07
000DF21E A706 8001                  	dc.b	nD3, $06, nRst, $01
000DF222 E10B                       	smpsAlterNote       $0B
000DF224 A203                       	dc.b	nA2, $03
000DF226 E109                       	smpsAlterNote       $09
000DF228 AA03 8001                  	dc.b	nF3, $03, nRst, $01
000DF22C E108                       	smpsAlterNote       $08
000DF22E A906 8001                  	dc.b	nE3, $06, nRst, $01
000DF232 E107                       	smpsAlterNote       $07
000DF234 A702 8001                  	dc.b	nD3, $02, nRst, $01
000DF238 E106                       	smpsAlterNote       $06
000DF23A A503                       	dc.b	nC3, $03
000DF23C E10C                       	smpsAlterNote       $0C
000DF23E A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DF244 E107                       	smpsAlterNote       $07
000DF246 B20D                       	dc.b	nCs4, $0D
000DF248 E104                       	smpsAlterNote       $04
000DF24A E701                       	dc.b	smpsNoAttack, $01
000DF24C E100                       	smpsAlterNote       $00
000DF24E E701                       	dc.b	smpsNoAttack, $01
000DF250 E104                       	smpsAlterNote       $04
000DF252 E701                       	dc.b	smpsNoAttack, $01
000DF254 E10A                       	smpsAlterNote       $0A
000DF256 E701                       	dc.b	smpsNoAttack, $01
000DF258 E10B                       	smpsAlterNote       $0B
000DF25A E701                       	dc.b	smpsNoAttack, $01
000DF25C E107                       	smpsAlterNote       $07
000DF25E E701                       	dc.b	smpsNoAttack, $01
000DF260 E101                       	smpsAlterNote       $01
000DF262 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF266 E104                       	smpsAlterNote       $04
000DF268 E701                       	dc.b	smpsNoAttack, $01
000DF26A E10A                       	smpsAlterNote       $0A
000DF26C E701                       	dc.b	smpsNoAttack, $01
000DF26E E10B                       	smpsAlterNote       $0B
000DF270 8001                       	dc.b	nRst, $01
000DF272 E107                       	smpsAlterNote       $07
000DF274 B30D                       	dc.b	nD4, $0D
000DF276 E104                       	smpsAlterNote       $04
000DF278 E701                       	dc.b	smpsNoAttack, $01
000DF27A E100                       	smpsAlterNote       $00
000DF27C E701                       	dc.b	smpsNoAttack, $01
000DF27E E104                       	smpsAlterNote       $04
000DF280 E701                       	dc.b	smpsNoAttack, $01
000DF282 E10A                       	smpsAlterNote       $0A
000DF284 E701                       	dc.b	smpsNoAttack, $01
000DF286 E10B                       	smpsAlterNote       $0B
000DF288 E701                       	dc.b	smpsNoAttack, $01
000DF28A E107                       	smpsAlterNote       $07
000DF28C E701                       	dc.b	smpsNoAttack, $01
000DF28E E101                       	smpsAlterNote       $01
000DF290 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF294 E104                       	smpsAlterNote       $04
000DF296 E701                       	dc.b	smpsNoAttack, $01
000DF298 E10A                       	smpsAlterNote       $0A
000DF29A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF29E E104                       	smpsAlterNote       $04
000DF2A0 E701                       	dc.b	smpsNoAttack, $01
000DF2A2 E101                       	smpsAlterNote       $01
000DF2A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2A8 E107                       	smpsAlterNote       $07
000DF2AA E701                       	dc.b	smpsNoAttack, $01
000DF2AC E10B                       	smpsAlterNote       $0B
000DF2AE E701                       	dc.b	smpsNoAttack, $01
000DF2B0 E10A                       	smpsAlterNote       $0A
000DF2B2 E701                       	dc.b	smpsNoAttack, $01
000DF2B4 E107                       	smpsAlterNote       $07
000DF2B6 8001                       	dc.b	nRst, $01
000DF2B8 E108                       	smpsAlterNote       $08
000DF2BA B50D                       	dc.b	nE4, $0D
000DF2BC E102                       	smpsAlterNote       $02
000DF2BE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2C2 E105                       	smpsAlterNote       $05
000DF2C4 E701                       	dc.b	smpsNoAttack, $01
000DF2C6 E10B                       	smpsAlterNote       $0B
000DF2C8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2CC E105                       	smpsAlterNote       $05
000DF2CE E701                       	dc.b	smpsNoAttack, $01
000DF2D0 E102                       	smpsAlterNote       $02
000DF2D2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2D6 E108                       	smpsAlterNote       $08
000DF2D8 E701                       	dc.b	smpsNoAttack, $01
000DF2DA E10C                       	smpsAlterNote       $0C
000DF2DC E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DF2E0 E107                       	smpsAlterNote       $07
000DF2E2 B30D                       	dc.b	nD4, $0D
000DF2E4 E101                       	smpsAlterNote       $01
000DF2E6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2EA E104                       	smpsAlterNote       $04
000DF2EC E701                       	dc.b	smpsNoAttack, $01
000DF2EE E10A                       	smpsAlterNote       $0A
000DF2F0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2F4 E104                       	smpsAlterNote       $04
000DF2F6 E701                       	dc.b	smpsNoAttack, $01
000DF2F8 E101                       	smpsAlterNote       $01
000DF2FA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF2FE E107                       	smpsAlterNote       $07
000DF300 E701                       	dc.b	smpsNoAttack, $01
000DF302 E10B                       	smpsAlterNote       $0B
000DF304 E701                       	dc.b	smpsNoAttack, $01
000DF306 E10A                       	smpsAlterNote       $0A
000DF308 E701                       	dc.b	smpsNoAttack, $01
000DF30A E104                       	smpsAlterNote       $04
000DF30C E701                       	dc.b	smpsNoAttack, $01
000DF30E E100                       	smpsAlterNote       $00
000DF310 E701                       	dc.b	smpsNoAttack, $01
000DF312 E104                       	smpsAlterNote       $04
000DF314 E701                       	dc.b	smpsNoAttack, $01
000DF316 E107                       	smpsAlterNote       $07
000DF318 E701                       	dc.b	smpsNoAttack, $01
000DF31A E10B                       	smpsAlterNote       $0B
000DF31C E701                       	dc.b	smpsNoAttack, $01
000DF31E E107                       	smpsAlterNote       $07
000DF320 E701 B20E                  	dc.b	smpsNoAttack, $01, nCs4, $0E
000DF324 E101                       	smpsAlterNote       $01
000DF326 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF32A E107                       	smpsAlterNote       $07
000DF32C E701                       	dc.b	smpsNoAttack, $01
000DF32E E10A                       	smpsAlterNote       $0A
000DF330 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF334 E104                       	smpsAlterNote       $04
000DF336 E701                       	dc.b	smpsNoAttack, $01
000DF338 E100                       	smpsAlterNote       $00
000DF33A E701                       	dc.b	smpsNoAttack, $01
000DF33C E101                       	smpsAlterNote       $01
000DF33E E701                       	dc.b	smpsNoAttack, $01
000DF340 E107                       	smpsAlterNote       $07
000DF342 E701                       	dc.b	smpsNoAttack, $01
000DF344 E10B                       	smpsAlterNote       $0B
000DF346 E701                       	dc.b	smpsNoAttack, $01
000DF348 E107                       	smpsAlterNote       $07
000DF34A B30E                       	dc.b	nD4, $0E
000DF34C E101                       	smpsAlterNote       $01
000DF34E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF352 E107                       	smpsAlterNote       $07
000DF354 E701                       	dc.b	smpsNoAttack, $01
000DF356 E10A                       	smpsAlterNote       $0A
000DF358 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF35C E104                       	smpsAlterNote       $04
000DF35E E701                       	dc.b	smpsNoAttack, $01
000DF360 E100                       	smpsAlterNote       $00
000DF362 E701                       	dc.b	smpsNoAttack, $01
000DF364 E101                       	smpsAlterNote       $01
000DF366 E701                       	dc.b	smpsNoAttack, $01
000DF368 E107                       	smpsAlterNote       $07
000DF36A E701                       	dc.b	smpsNoAttack, $01
000DF36C E10B                       	smpsAlterNote       $0B
000DF36E E701                       	dc.b	smpsNoAttack, $01
000DF370 E107                       	smpsAlterNote       $07
000DF372 E701                       	dc.b	smpsNoAttack, $01
000DF374 E104                       	smpsAlterNote       $04
000DF376 E701                       	dc.b	smpsNoAttack, $01
000DF378 E100                       	smpsAlterNote       $00
000DF37A E701                       	dc.b	smpsNoAttack, $01
000DF37C E104                       	smpsAlterNote       $04
000DF37E E701                       	dc.b	smpsNoAttack, $01
000DF380 E10A                       	smpsAlterNote       $0A
000DF382 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF386 E107                       	smpsAlterNote       $07
000DF388 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000DF38C E104                       	smpsAlterNote       $04
000DF38E E701                       	dc.b	smpsNoAttack, $01
000DF390 E100                       	smpsAlterNote       $00
000DF392 E701                       	dc.b	smpsNoAttack, $01
000DF394 E101                       	smpsAlterNote       $01
000DF396 E701                       	dc.b	smpsNoAttack, $01
000DF398 E107                       	smpsAlterNote       $07
000DF39A E701                       	dc.b	smpsNoAttack, $01
000DF39C E10B                       	smpsAlterNote       $0B
000DF39E E701                       	dc.b	smpsNoAttack, $01
000DF3A0 E107                       	smpsAlterNote       $07
000DF3A2 E701                       	dc.b	smpsNoAttack, $01
000DF3A4 E104                       	smpsAlterNote       $04
000DF3A6 E701                       	dc.b	smpsNoAttack, $01
000DF3A8 E100                       	smpsAlterNote       $00
000DF3AA E701                       	dc.b	smpsNoAttack, $01
000DF3AC E104                       	smpsAlterNote       $04
000DF3AE E701                       	dc.b	smpsNoAttack, $01
000DF3B0 E10A                       	smpsAlterNote       $0A
000DF3B2 E701                       	dc.b	smpsNoAttack, $01
000DF3B4 E10B                       	smpsAlterNote       $0B
000DF3B6 E701                       	dc.b	smpsNoAttack, $01
000DF3BA E6FF                       	smpsAlterVol        $FF
000DF3BC A206 8001 A203 A203 8001+  	dc.b	nA2, $06, nRst, $01, nA2, $03, nA2, $03, nRst, $01, nA2, $03
000DF3C8 800B A202 8001             	dc.b	nRst, $0B, nA2, $02, nRst, $01
000DF3D0 E109                       	smpsAlterNote       $09
000DF3D2 E601                       	smpsAlterVol        $01
000DF3D4 B60D                       	dc.b	nF4, $0D
000DF3D6 E106                       	smpsAlterNote       $06
000DF3D8 E701                       	dc.b	smpsNoAttack, $01
000DF3DA E102                       	smpsAlterNote       $02
000DF3DC E701                       	dc.b	smpsNoAttack, $01
000DF3DE E106                       	smpsAlterNote       $06
000DF3E0 E701                       	dc.b	smpsNoAttack, $01
000DF3E2 E109                       	smpsAlterNote       $09
000DF3E4 E701                       	dc.b	smpsNoAttack, $01
000DF3E6 E10D                       	smpsAlterNote       $0D
000DF3E8 E701                       	dc.b	smpsNoAttack, $01
000DF3EA E109                       	smpsAlterNote       $09
000DF3EC E701                       	dc.b	smpsNoAttack, $01
000DF3EE E103                       	smpsAlterNote       $03
000DF3F0 E701                       	dc.b	smpsNoAttack, $01
000DF3F2 E102                       	smpsAlterNote       $02
000DF3F4 E701                       	dc.b	smpsNoAttack, $01
000DF3F6 E106                       	smpsAlterNote       $06
000DF3F8 E701                       	dc.b	smpsNoAttack, $01
000DF3FA E10C                       	smpsAlterNote       $0C
000DF3FC E701                       	dc.b	smpsNoAttack, $01
000DF3FE E10D                       	smpsAlterNote       $0D
000DF400 8001                       	dc.b	nRst, $01
000DF402 E109                       	smpsAlterNote       $09
000DF404 B80D                       	dc.b	nG4, $0D
000DF406 E106                       	smpsAlterNote       $06
000DF408 E701                       	dc.b	smpsNoAttack, $01
000DF40A E102                       	smpsAlterNote       $02
000DF40C E701                       	dc.b	smpsNoAttack, $01
000DF40E E106                       	smpsAlterNote       $06
000DF410 E701                       	dc.b	smpsNoAttack, $01
000DF412 E109                       	smpsAlterNote       $09
000DF414 E701                       	dc.b	smpsNoAttack, $01
000DF416 E10D                       	smpsAlterNote       $0D
000DF418 E701                       	dc.b	smpsNoAttack, $01
000DF41A E109                       	smpsAlterNote       $09
000DF41C E701                       	dc.b	smpsNoAttack, $01
000DF41E E103                       	smpsAlterNote       $03
000DF420 E701                       	dc.b	smpsNoAttack, $01
000DF422 E102                       	smpsAlterNote       $02
000DF424 E701                       	dc.b	smpsNoAttack, $01
000DF426 E106                       	smpsAlterNote       $06
000DF428 E701                       	dc.b	smpsNoAttack, $01
000DF42A E10C                       	smpsAlterNote       $0C
000DF42C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF430 E106                       	smpsAlterNote       $06
000DF432 E701                       	dc.b	smpsNoAttack, $01
000DF434 E103                       	smpsAlterNote       $03
000DF436 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF43A E109                       	smpsAlterNote       $09
000DF43C E701                       	dc.b	smpsNoAttack, $01
000DF43E E10D                       	smpsAlterNote       $0D
000DF440 E701                       	dc.b	smpsNoAttack, $01
000DF442 E10C                       	smpsAlterNote       $0C
000DF444 E701                       	dc.b	smpsNoAttack, $01
000DF446 E109                       	smpsAlterNote       $09
000DF448 8001                       	dc.b	nRst, $01
000DF44A E10B                       	smpsAlterNote       $0B
000DF44C BA0D                       	dc.b	nA4, $0D
000DF44E E105                       	smpsAlterNote       $05
000DF450 E701                       	dc.b	smpsNoAttack, $01
000DF452 E104                       	smpsAlterNote       $04
000DF454 E701                       	dc.b	smpsNoAttack, $01
000DF456 E108                       	smpsAlterNote       $08
000DF458 E701                       	dc.b	smpsNoAttack, $01
000DF45A E10E                       	smpsAlterNote       $0E
000DF45C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF460 E10B                       	smpsAlterNote       $0B
000DF462 E701                       	dc.b	smpsNoAttack, $01
000DF464 E105                       	smpsAlterNote       $05
000DF466 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF46A E10B                       	smpsAlterNote       $0B
000DF46C E701                       	dc.b	smpsNoAttack, $01
000DF46E E10E                       	smpsAlterNote       $0E
000DF470 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF474 E108                       	smpsAlterNote       $08
000DF476 E701                       	dc.b	smpsNoAttack, $01
000DF478 E104                       	smpsAlterNote       $04
000DF47A E701                       	dc.b	smpsNoAttack, $01
000DF47C E105                       	smpsAlterNote       $05
000DF47E E701                       	dc.b	smpsNoAttack, $01
000DF480 E10B                       	smpsAlterNote       $0B
000DF482 E701                       	dc.b	smpsNoAttack, $01
000DF484 E10F                       	smpsAlterNote       $0F
000DF486 E701                       	dc.b	smpsNoAttack, $01
000DF488 E10B                       	smpsAlterNote       $0B
000DF48A E701                       	dc.b	smpsNoAttack, $01
000DF48C E108                       	smpsAlterNote       $08
000DF48E E701                       	dc.b	smpsNoAttack, $01
000DF490 E104                       	smpsAlterNote       $04
000DF492 E701                       	dc.b	smpsNoAttack, $01
000DF494 E108                       	smpsAlterNote       $08
000DF496 E701                       	dc.b	smpsNoAttack, $01
000DF498 E10E                       	smpsAlterNote       $0E
000DF49A E701                       	dc.b	smpsNoAttack, $01
000DF49C E10F                       	smpsAlterNote       $0F
000DF49E E701                       	dc.b	smpsNoAttack, $01
000DF4A0 E10B                       	smpsAlterNote       $0B
000DF4A2 E701                       	dc.b	smpsNoAttack, $01
000DF4A4 E105                       	smpsAlterNote       $05
000DF4A6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4AA E108                       	smpsAlterNote       $08
000DF4AC E701                       	dc.b	smpsNoAttack, $01
000DF4AE E10E                       	smpsAlterNote       $0E
000DF4B0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4B4 E108                       	smpsAlterNote       $08
000DF4B6 E701                       	dc.b	smpsNoAttack, $01
000DF4B8 E105                       	smpsAlterNote       $05
000DF4BA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4BE E108                       	smpsAlterNote       $08
000DF4C0 B50A 8001                  	dc.b	nE4, $0A, nRst, $01
000DF4C4 E109                       	smpsAlterNote       $09
000DF4C6 B60D                       	dc.b	nF4, $0D
000DF4C8 E103                       	smpsAlterNote       $03
000DF4CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4CE E106                       	smpsAlterNote       $06
000DF4D0 E701                       	dc.b	smpsNoAttack, $01
000DF4D2 E10C                       	smpsAlterNote       $0C
000DF4D4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4D8 E106                       	smpsAlterNote       $06
000DF4DA E701                       	dc.b	smpsNoAttack, $01
000DF4DC E103                       	smpsAlterNote       $03
000DF4DE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4E2 E109                       	smpsAlterNote       $09
000DF4E4 E701                       	dc.b	smpsNoAttack, $01
000DF4E6 E10D                       	smpsAlterNote       $0D
000DF4E8 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DF4EC E109                       	smpsAlterNote       $09
000DF4EE B80D                       	dc.b	nG4, $0D
000DF4F0 E103                       	smpsAlterNote       $03
000DF4F2 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF4F6 E109                       	smpsAlterNote       $09
000DF4F8 E701                       	dc.b	smpsNoAttack, $01
000DF4FA E10C                       	smpsAlterNote       $0C
000DF4FC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF500 E106                       	smpsAlterNote       $06
000DF502 E701                       	dc.b	smpsNoAttack, $01
000DF504 E102                       	smpsAlterNote       $02
000DF506 E701                       	dc.b	smpsNoAttack, $01
000DF508 E103                       	smpsAlterNote       $03
000DF50A E701                       	dc.b	smpsNoAttack, $01
000DF50C E109                       	smpsAlterNote       $09
000DF50E E701                       	dc.b	smpsNoAttack, $01
000DF510 E10D                       	smpsAlterNote       $0D
000DF512 E701                       	dc.b	smpsNoAttack, $01
000DF514 E109                       	smpsAlterNote       $09
000DF516 E701                       	dc.b	smpsNoAttack, $01
000DF518 E106                       	smpsAlterNote       $06
000DF51A E701                       	dc.b	smpsNoAttack, $01
000DF51C E102                       	smpsAlterNote       $02
000DF51E E701                       	dc.b	smpsNoAttack, $01
000DF520 E106                       	smpsAlterNote       $06
000DF522 E701                       	dc.b	smpsNoAttack, $01
000DF524 E10C                       	smpsAlterNote       $0C
000DF526 E701                       	dc.b	smpsNoAttack, $01
000DF528 E10D                       	smpsAlterNote       $0D
000DF52A E701                       	dc.b	smpsNoAttack, $01
000DF52C E109                       	smpsAlterNote       $09
000DF52E E701                       	dc.b	smpsNoAttack, $01
000DF530 E10B                       	smpsAlterNote       $0B
000DF532 BA0D                       	dc.b	nA4, $0D
000DF534 E108                       	smpsAlterNote       $08
000DF536 E701                       	dc.b	smpsNoAttack, $01
000DF538 E105                       	smpsAlterNote       $05
000DF53A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF53E E10B                       	smpsAlterNote       $0B
000DF540 E701                       	dc.b	smpsNoAttack, $01
000DF542 E10F                       	smpsAlterNote       $0F
000DF544 E701                       	dc.b	smpsNoAttack, $01
000DF546 E10E                       	smpsAlterNote       $0E
000DF548 E701                       	dc.b	smpsNoAttack, $01
000DF54A E108                       	smpsAlterNote       $08
000DF54C E701                       	dc.b	smpsNoAttack, $01
000DF54E E104                       	smpsAlterNote       $04
000DF550 E701                       	dc.b	smpsNoAttack, $01
000DF552 E108                       	smpsAlterNote       $08
000DF554 E701                       	dc.b	smpsNoAttack, $01
000DF556 E10B                       	smpsAlterNote       $0B
000DF558 E701                       	dc.b	smpsNoAttack, $01
000DF55A E10F                       	smpsAlterNote       $0F
000DF55C E701                       	dc.b	smpsNoAttack, $01
000DF55E E10B                       	smpsAlterNote       $0B
000DF560 E701                       	dc.b	smpsNoAttack, $01
000DF562 E105                       	smpsAlterNote       $05
000DF564 E701                       	dc.b	smpsNoAttack, $01
000DF566 E104                       	smpsAlterNote       $04
000DF568 E701                       	dc.b	smpsNoAttack, $01
000DF56A E108                       	smpsAlterNote       $08
000DF56C E701                       	dc.b	smpsNoAttack, $01
000DF56E E10E                       	smpsAlterNote       $0E
000DF570 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF574 E10B                       	smpsAlterNote       $0B
000DF576 E701                       	dc.b	smpsNoAttack, $01
000DF578 E105                       	smpsAlterNote       $05
000DF57A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF57E E10B                       	smpsAlterNote       $0B
000DF580 E701                       	dc.b	smpsNoAttack, $01
000DF582 E10E                       	smpsAlterNote       $0E
000DF584 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF588 E108                       	smpsAlterNote       $08
000DF58A E701                       	dc.b	smpsNoAttack, $01
000DF58C E105                       	smpsAlterNote       $05
000DF58E 8001                       	dc.b	nRst, $01
000DF590 E109                       	smpsAlterNote       $09
000DF592 B60A                       	dc.b	nF4, $0A
000DF594 E108                       	smpsAlterNote       $08
000DF596 B507                       	dc.b	nE4, $07
000DF598 E107                       	smpsAlterNote       $07
000DF59A B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000DF59E E108                       	smpsAlterNote       $08
000DF5A0 B503                       	dc.b	nE4, $03
000DF5A2 E109                       	smpsAlterNote       $09
000DF5A4 B603 8001 B802 8001        	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01
000DF5AC E10B                       	smpsAlterNote       $0B
000DF5AE BA0D                       	dc.b	nA4, $0D
000DF5B0 E108                       	smpsAlterNote       $08
000DF5B2 E701                       	dc.b	smpsNoAttack, $01
000DF5B4 E104                       	smpsAlterNote       $04
000DF5B6 E701                       	dc.b	smpsNoAttack, $01
000DF5B8 E108                       	smpsAlterNote       $08
000DF5BA E701                       	dc.b	smpsNoAttack, $01
000DF5BC E10B                       	smpsAlterNote       $0B
000DF5BE E701                       	dc.b	smpsNoAttack, $01
000DF5C0 E10F                       	smpsAlterNote       $0F
000DF5C2 E701                       	dc.b	smpsNoAttack, $01
000DF5C4 E10B                       	smpsAlterNote       $0B
000DF5C6 E701                       	dc.b	smpsNoAttack, $01
000DF5C8 E105                       	smpsAlterNote       $05
000DF5CA E701                       	dc.b	smpsNoAttack, $01
000DF5CC E104                       	smpsAlterNote       $04
000DF5CE E701                       	dc.b	smpsNoAttack, $01
000DF5D0 E108                       	smpsAlterNote       $08
000DF5D2 E701                       	dc.b	smpsNoAttack, $01
000DF5D4 E10E                       	smpsAlterNote       $0E
000DF5D6 E701                       	dc.b	smpsNoAttack, $01
000DF5D8 E10F                       	smpsAlterNote       $0F
000DF5DA 8001                       	dc.b	nRst, $01
000DF5DC E109                       	smpsAlterNote       $09
000DF5DE C20D                       	dc.b	nF5, $0D
000DF5E0 E106                       	smpsAlterNote       $06
000DF5E2 E701                       	dc.b	smpsNoAttack, $01
000DF5E4 E102                       	smpsAlterNote       $02
000DF5E6 E701                       	dc.b	smpsNoAttack, $01
000DF5E8 E106                       	smpsAlterNote       $06
000DF5EA E701                       	dc.b	smpsNoAttack, $01
000DF5EC E109                       	smpsAlterNote       $09
000DF5EE E701                       	dc.b	smpsNoAttack, $01
000DF5F0 E10D                       	smpsAlterNote       $0D
000DF5F2 E701                       	dc.b	smpsNoAttack, $01
000DF5F4 E109                       	smpsAlterNote       $09
000DF5F6 E701                       	dc.b	smpsNoAttack, $01
000DF5F8 E103                       	smpsAlterNote       $03
000DF5FA E701                       	dc.b	smpsNoAttack, $01
000DF5FC E102                       	smpsAlterNote       $02
000DF5FE E701                       	dc.b	smpsNoAttack, $01
000DF600 E106                       	smpsAlterNote       $06
000DF602 E701                       	dc.b	smpsNoAttack, $01
000DF604 E10C                       	smpsAlterNote       $0C
000DF606 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF60A E109                       	smpsAlterNote       $09
000DF60C E701                       	dc.b	smpsNoAttack, $01
000DF60E E103                       	smpsAlterNote       $03
000DF610 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF614 E109                       	smpsAlterNote       $09
000DF616 E701                       	dc.b	smpsNoAttack, $01
000DF618 E10C                       	smpsAlterNote       $0C
000DF61A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF61E E106                       	smpsAlterNote       $06
000DF620 E701                       	dc.b	smpsNoAttack, $01
000DF622 E102                       	smpsAlterNote       $02
000DF624 E701                       	dc.b	smpsNoAttack, $01
000DF626 E103                       	smpsAlterNote       $03
000DF628 E701                       	dc.b	smpsNoAttack, $01
000DF62A E109                       	smpsAlterNote       $09
000DF62C E701                       	dc.b	smpsNoAttack, $01
000DF62E E10D                       	smpsAlterNote       $0D
000DF630 E701                       	dc.b	smpsNoAttack, $01
000DF632 E109                       	smpsAlterNote       $09
000DF634 E701                       	dc.b	smpsNoAttack, $01
000DF636 E106                       	smpsAlterNote       $06
000DF638 E701                       	dc.b	smpsNoAttack, $01
000DF63A E102                       	smpsAlterNote       $02
000DF63C E701                       	dc.b	smpsNoAttack, $01
000DF63E E106                       	smpsAlterNote       $06
000DF640 E701                       	dc.b	smpsNoAttack, $01
000DF642 E10C                       	smpsAlterNote       $0C
000DF644 E701                       	dc.b	smpsNoAttack, $01
000DF646 E10D                       	smpsAlterNote       $0D
000DF648 E701                       	dc.b	smpsNoAttack, $01
000DF64A E109                       	smpsAlterNote       $09
000DF64C E701                       	dc.b	smpsNoAttack, $01
000DF64E E103                       	smpsAlterNote       $03
000DF650 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF654 E106                       	smpsAlterNote       $06
000DF656 E701                       	dc.b	smpsNoAttack, $01
000DF658 E10C                       	smpsAlterNote       $0C
000DF65A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF65E E106                       	smpsAlterNote       $06
000DF660 E701                       	dc.b	smpsNoAttack, $01
000DF662 E103                       	smpsAlterNote       $03
000DF664 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF668 E109                       	smpsAlterNote       $09
000DF66A E701                       	dc.b	smpsNoAttack, $01
000DF66C E10D                       	smpsAlterNote       $0D
000DF66E E701                       	dc.b	smpsNoAttack, $01
000DF670 E10C                       	smpsAlterNote       $0C
000DF672 E701                       	dc.b	smpsNoAttack, $01
000DF674 E106                       	smpsAlterNote       $06
000DF676 E701                       	dc.b	smpsNoAttack, $01
000DF678 E103                       	smpsAlterNote       $03
000DF67A 8001                       	dc.b	nRst, $01
000DF67C E109                       	smpsAlterNote       $09
000DF67E C206 8001                  	dc.b	nF5, $06, nRst, $01
000DF684 E10C                       	smpsAlterNote       $0C
000DF686 E601                       	smpsAlterVol        $01
000DF688 BB0D                       	dc.b	nBb4, $0D
000DF68A E106                       	smpsAlterNote       $06
000DF68C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF690 E109                       	smpsAlterNote       $09
000DF692 E701                       	dc.b	smpsNoAttack, $01
000DF694 E10F                       	smpsAlterNote       $0F
000DF696 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF69A E109                       	smpsAlterNote       $09
000DF69C E701                       	dc.b	smpsNoAttack, $01
000DF69E E106                       	smpsAlterNote       $06
000DF6A0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF6A4 E10C                       	smpsAlterNote       $0C
000DF6A6 E701                       	dc.b	smpsNoAttack, $01
000DF6A8 E110                       	smpsAlterNote       $10
000DF6AA E701                       	dc.b	smpsNoAttack, $01
000DF6AC E10F                       	smpsAlterNote       $0F
000DF6AE E701                       	dc.b	smpsNoAttack, $01
000DF6B0 E109                       	smpsAlterNote       $09
000DF6B2 E701                       	dc.b	smpsNoAttack, $01
000DF6B4 E105                       	smpsAlterNote       $05
000DF6B6 E701                       	dc.b	smpsNoAttack, $01
000DF6B8 E106                       	smpsAlterNote       $06
000DF6BA 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000DF6BE E103                       	smpsAlterNote       $03
000DF6C0 E701                       	dc.b	smpsNoAttack, $01
000DF6C2 E1FF                       	smpsAlterNote       $FF
000DF6C4 E701                       	dc.b	smpsNoAttack, $01
000DF6C6 E103                       	smpsAlterNote       $03
000DF6C8 E701                       	dc.b	smpsNoAttack, $01
000DF6CA E106                       	smpsAlterNote       $06
000DF6CC E701                       	dc.b	smpsNoAttack, $01
000DF6CE E10A                       	smpsAlterNote       $0A
000DF6D0 E701                       	dc.b	smpsNoAttack, $01
000DF6D2 E106                       	smpsAlterNote       $06
000DF6D4 E701                       	dc.b	smpsNoAttack, $01
000DF6D6 E100                       	smpsAlterNote       $00
000DF6D8 E701                       	dc.b	smpsNoAttack, $01
000DF6DA E1FF                       	smpsAlterNote       $FF
000DF6DC E701                       	dc.b	smpsNoAttack, $01
000DF6DE E103                       	smpsAlterNote       $03
000DF6E0 E701                       	dc.b	smpsNoAttack, $01
000DF6E2 E109                       	smpsAlterNote       $09
000DF6E4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF6E8 E106                       	smpsAlterNote       $06
000DF6EA E701                       	dc.b	smpsNoAttack, $01
000DF6EC E100                       	smpsAlterNote       $00
000DF6EE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF6F2 E107                       	smpsAlterNote       $07
000DF6F4 BF0E                       	dc.b	nD5, $0E
000DF6F6 E101                       	smpsAlterNote       $01
000DF6F8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF6FC E107                       	smpsAlterNote       $07
000DF6FE E701                       	dc.b	smpsNoAttack, $01
000DF700 E10A                       	smpsAlterNote       $0A
000DF702 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF706 E104                       	smpsAlterNote       $04
000DF708 E701                       	dc.b	smpsNoAttack, $01
000DF70A E100                       	smpsAlterNote       $00
000DF70C E701                       	dc.b	smpsNoAttack, $01
000DF70E E101                       	smpsAlterNote       $01
000DF710 E701                       	dc.b	smpsNoAttack, $01
000DF712 E107                       	smpsAlterNote       $07
000DF714 E701                       	dc.b	smpsNoAttack, $01
000DF716 E10B                       	smpsAlterNote       $0B
000DF718 E701                       	dc.b	smpsNoAttack, $01
000DF71A E107                       	smpsAlterNote       $07
000DF71C E701                       	dc.b	smpsNoAttack, $01
000DF71E E104                       	smpsAlterNote       $04
000DF720 E701                       	dc.b	smpsNoAttack, $01
000DF722 E100                       	smpsAlterNote       $00
000DF724 E701                       	dc.b	smpsNoAttack, $01
000DF726 E101                       	smpsAlterNote       $01
000DF728 8001                       	dc.b	nRst, $01
000DF72A E108                       	smpsAlterNote       $08
000DF72C C10C                       	dc.b	nE5, $0C
000DF72E E109                       	smpsAlterNote       $09
000DF730 C201 8001                  	dc.b	nF5, $01, nRst, $01
000DF734 E10A                       	smpsAlterNote       $0A
000DF736 8001                       	dc.b	nRst, $01
000DF738 E109                       	smpsAlterNote       $09
000DF73A C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000DF73E E106                       	smpsAlterNote       $06
000DF740 E701                       	dc.b	smpsNoAttack, $01
000DF742 E102                       	smpsAlterNote       $02
000DF744 E701                       	dc.b	smpsNoAttack, $01
000DF746 E103                       	smpsAlterNote       $03
000DF748 E701                       	dc.b	smpsNoAttack, $01
000DF74A E109                       	smpsAlterNote       $09
000DF74C E701                       	dc.b	smpsNoAttack, $01
000DF74E E10D                       	smpsAlterNote       $0D
000DF750 E701                       	dc.b	smpsNoAttack, $01
000DF752 E109                       	smpsAlterNote       $09
000DF754 E701                       	dc.b	smpsNoAttack, $01
000DF756 E106                       	smpsAlterNote       $06
000DF758 E701                       	dc.b	smpsNoAttack, $01
000DF75A E102                       	smpsAlterNote       $02
000DF75C E701                       	dc.b	smpsNoAttack, $01
000DF75E E106                       	smpsAlterNote       $06
000DF760 E701                       	dc.b	smpsNoAttack, $01
000DF762 E10C                       	smpsAlterNote       $0C
000DF764 E701                       	dc.b	smpsNoAttack, $01
000DF766 E10D                       	smpsAlterNote       $0D
000DF768 E701                       	dc.b	smpsNoAttack, $01
000DF76A E109                       	smpsAlterNote       $09
000DF76C C40D                       	dc.b	nG5, $0D
000DF76E E106                       	smpsAlterNote       $06
000DF770 E701                       	dc.b	smpsNoAttack, $01
000DF772 E102                       	smpsAlterNote       $02
000DF774 E701                       	dc.b	smpsNoAttack, $01
000DF776 E103                       	smpsAlterNote       $03
000DF778 E701                       	dc.b	smpsNoAttack, $01
000DF77A E109                       	smpsAlterNote       $09
000DF77C E701                       	dc.b	smpsNoAttack, $01
000DF77E E108                       	smpsAlterNote       $08
000DF780 C007 C002 C002 8001 C001+  	dc.b	nEb5, $07, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01, nRst, $01
000DF78C E109                       	smpsAlterNote       $09
000DF78E C20D                       	dc.b	nF5, $0D
000DF790 E106                       	smpsAlterNote       $06
000DF792 E701                       	dc.b	smpsNoAttack, $01
000DF794 E102                       	smpsAlterNote       $02
000DF796 E701                       	dc.b	smpsNoAttack, $01
000DF798 E106                       	smpsAlterNote       $06
000DF79A E701                       	dc.b	smpsNoAttack, $01
000DF79C E109                       	smpsAlterNote       $09
000DF79E E701                       	dc.b	smpsNoAttack, $01
000DF7A0 E10D                       	smpsAlterNote       $0D
000DF7A2 E701                       	dc.b	smpsNoAttack, $01
000DF7A4 E109                       	smpsAlterNote       $09
000DF7A6 E701                       	dc.b	smpsNoAttack, $01
000DF7A8 E103                       	smpsAlterNote       $03
000DF7AA E701                       	dc.b	smpsNoAttack, $01
000DF7AC E102                       	smpsAlterNote       $02
000DF7AE E701                       	dc.b	smpsNoAttack, $01
000DF7B0 E106                       	smpsAlterNote       $06
000DF7B2 E701                       	dc.b	smpsNoAttack, $01
000DF7B4 E10C                       	smpsAlterNote       $0C
000DF7B6 E701                       	dc.b	smpsNoAttack, $01
000DF7B8 E10D                       	smpsAlterNote       $0D
000DF7BA 8001                       	dc.b	nRst, $01
000DF7BC E112                       	smpsAlterNote       $12
000DF7BE C401                       	dc.b	nG5, $01
000DF7C0 E1EB                       	smpsAlterNote       $EB
000DF7C2 E7C5 01                    	dc.b	smpsNoAttack, nAb5, $01
000DF7C5 E1FD                       	smpsAlterNote       $FD
000DF7C7 E701                       	dc.b	smpsNoAttack, $01
000DF7C9 E10F                       	smpsAlterNote       $0F
000DF7CB E701                       	dc.b	smpsNoAttack, $01
000DF7CD E118                       	smpsAlterNote       $18
000DF7CF E701                       	dc.b	smpsNoAttack, $01
000DF7D1 E1ED                       	smpsAlterNote       $ED
000DF7D3 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000DF7D6 E1FF                       	smpsAlterNote       $FF
000DF7D8 E701                       	dc.b	smpsNoAttack, $01
000DF7DA E10B                       	smpsAlterNote       $0B
000DF7DC E703                       	dc.b	smpsNoAttack, $03
000DF7DE E109                       	smpsAlterNote       $09
000DF7E0 C407                       	dc.b	nG5, $07
000DF7E2 E108                       	smpsAlterNote       $08
000DF7E4 C006 8001 C002 C002 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nEb5, $02, nRst, $01
000DF7F0 E109                       	smpsAlterNote       $09
000DF7F2 C20D                       	dc.b	nF5, $0D
000DF7F4 E103                       	smpsAlterNote       $03
000DF7F6 E701                       	dc.b	smpsNoAttack, $01
000DF7F8 E102                       	smpsAlterNote       $02
000DF7FA E701                       	dc.b	smpsNoAttack, $01
000DF7FC E106                       	smpsAlterNote       $06
000DF7FE E701                       	dc.b	smpsNoAttack, $01
000DF800 E10C                       	smpsAlterNote       $0C
000DF802 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF806 E109                       	smpsAlterNote       $09
000DF808 E701                       	dc.b	smpsNoAttack, $01
000DF80A E103                       	smpsAlterNote       $03
000DF80C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF810 E109                       	smpsAlterNote       $09
000DF812 E701                       	dc.b	smpsNoAttack, $01
000DF814 E10C                       	smpsAlterNote       $0C
000DF816 E701                       	dc.b	smpsNoAttack, $01
000DF818 E10D                       	smpsAlterNote       $0D
000DF81A 8001                       	dc.b	nRst, $01
000DF81C E10B                       	smpsAlterNote       $0B
000DF81E C609 8001                  	dc.b	nA5, $09, nRst, $01
000DF822 E109                       	smpsAlterNote       $09
000DF824 B806 8001                  	dc.b	nG4, $06, nRst, $01
000DF828 E108                       	smpsAlterNote       $08
000DF82A C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000DF836 8001                       	dc.b	nRst, $01
000DF838 E109                       	smpsAlterNote       $09
000DF83A C20D                       	dc.b	nF5, $0D
000DF83C E103                       	smpsAlterNote       $03
000DF83E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF842 E106                       	smpsAlterNote       $06
000DF844 E701                       	dc.b	smpsNoAttack, $01
000DF846 E10C                       	smpsAlterNote       $0C
000DF848 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF84C E106                       	smpsAlterNote       $06
000DF84E E701                       	dc.b	smpsNoAttack, $01
000DF850 E103                       	smpsAlterNote       $03
000DF852 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF856 E109                       	smpsAlterNote       $09
000DF858 E701                       	dc.b	smpsNoAttack, $01
000DF85A E10D                       	smpsAlterNote       $0D
000DF85C E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DF862 E108                       	smpsAlterNote       $08
000DF864 E6FF                       	smpsAlterVol        $FF
000DF866 A806                       	dc.b	nEb3, $06
000DF868 E10C                       	smpsAlterNote       $0C
000DF86A A303 8001                  	dc.b	nBb2, $03, nRst, $01
000DF86E E108                       	smpsAlterNote       $08
000DF870 A803                       	dc.b	nEb3, $03
000DF872 E109                       	smpsAlterNote       $09
000DF874 AC03 8001                  	dc.b	nG3, $03, nRst, $01
000DF878 E10C                       	smpsAlterNote       $0C
000DF87A AF02 8001 AF03 8007        	dc.b	nBb3, $02, nRst, $01, nBb3, $03, nRst, $07
000DF884 E109                       	smpsAlterNote       $09
000DF886 E602                       	smpsAlterVol        $02
000DF888 B604                       	dc.b	nF4, $04
000DF88A E602                       	smpsAlterVol        $02
000DF88C F6F1 AA                    	smpsJump            music84_Jump02
000DF88F                            
000DF88F                            ; FM4 Data
000DF88F                            music84_FM4:
000DF891 E040                       	smpsPan             panRight, $00
000DF893 8003                       	dc.b	nRst, $03
000DF895 E10F                       	smpsAlterNote       $0F
000DF897 C603 8008                  	dc.b	nA5, $03, nRst, $08
000DF89B E10D                       	smpsAlterNote       $0D
000DF89D C403 800A                  	dc.b	nG5, $03, nRst, $0A
000DF8A1 E10C                       	smpsAlterNote       $0C
000DF8A3 C103 8004                  	dc.b	nE5, $03, nRst, $04
000DF8A9 E6FE                       	smpsAlterVol        $FE
000DF8AB E110                       	smpsAlterNote       $10
000DF8AD C703 8001                  	dc.b	nBb5, $03, nRst, $01
000DF8B1 E10F                       	smpsAlterNote       $0F
000DF8B3 C602 8001                  	dc.b	nA5, $02, nRst, $01
000DF8B7 E10D                       	smpsAlterNote       $0D
000DF8B9 C403 C401 E7C2 0280 01     	dc.b	nG5, $03, nG5, $01, smpsNoAttack, nF5, $02, nRst, $01
000DF8C2 E10C                       	smpsAlterNote       $0C
000DF8C4 C103                       	dc.b	nE5, $03
000DF8C6 E10A                       	smpsAlterNote       $0A
000DF8C8 BD03 8001                  	dc.b	nC5, $03, nRst, $01
000DF8CE 03                         	dc.b	$03
000DF8CF                            
000DF8CF                            music84_Jump01:
000DF8CF E10B                       	smpsAlterNote       $0B
000DF8D1 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DF8D5 E10C                       	smpsAlterNote       $0C
000DF8D7 C102 8001                  	dc.b	nE5, $02, nRst, $01
000DF8DB E10D                       	smpsAlterNote       $0D
000DF8DD C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000DF8E7 E10B                       	smpsAlterNote       $0B
000DF8E9 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000DF8ED E107                       	smpsAlterNote       $07
000DF8EF E701                       	dc.b	smpsNoAttack, $01
000DF8F1 E103                       	smpsAlterNote       $03
000DF8F3 E701                       	dc.b	smpsNoAttack, $01
000DF8F5 E104                       	smpsAlterNote       $04
000DF8F7 E701                       	dc.b	smpsNoAttack, $01
000DF8F9 E10A                       	smpsAlterNote       $0A
000DF8FB E701                       	dc.b	smpsNoAttack, $01
000DF8FD E10E                       	smpsAlterNote       $0E
000DF8FF E701                       	dc.b	smpsNoAttack, $01
000DF901 E10A                       	smpsAlterNote       $0A
000DF903 E701                       	dc.b	smpsNoAttack, $01
000DF905 E107                       	smpsAlterNote       $07
000DF907 E701                       	dc.b	smpsNoAttack, $01
000DF909 E104                       	smpsAlterNote       $04
000DF90B 8001                       	dc.b	nRst, $01
000DF90D E110                       	smpsAlterNote       $10
000DF90F C703                       	dc.b	nBb5, $03
000DF911 E10F                       	smpsAlterNote       $0F
000DF913 C603 8001                  	dc.b	nA5, $03, nRst, $01
000DF917 E10D                       	smpsAlterNote       $0D
000DF919 C402 8001 C60D             	dc.b	nG5, $02, nRst, $01, nA5, $0D
000DF91F E10C                       	smpsAlterNote       $0C
000DF921 E701                       	dc.b	smpsNoAttack, $01
000DF923 E108                       	smpsAlterNote       $08
000DF925 E701                       	dc.b	smpsNoAttack, $01
000DF927 E10C                       	smpsAlterNote       $0C
000DF929 E701                       	dc.b	smpsNoAttack, $01
000DF92B E10F                       	smpsAlterNote       $0F
000DF92D E701                       	dc.b	smpsNoAttack, $01
000DF92F E113                       	smpsAlterNote       $13
000DF931 E701                       	dc.b	smpsNoAttack, $01
000DF933 E10F                       	smpsAlterNote       $0F
000DF935 E701                       	dc.b	smpsNoAttack, $01
000DF937 E109                       	smpsAlterNote       $09
000DF939 E701                       	dc.b	smpsNoAttack, $01
000DF93B E108                       	smpsAlterNote       $08
000DF93D E701                       	dc.b	smpsNoAttack, $01
000DF93F E10C                       	smpsAlterNote       $0C
000DF941 E701                       	dc.b	smpsNoAttack, $01
000DF943 E112                       	smpsAlterNote       $12
000DF945 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF949 E10C                       	smpsAlterNote       $0C
000DF94B E701                       	dc.b	smpsNoAttack, $01
000DF94D E109                       	smpsAlterNote       $09
000DF94F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF953 E10F                       	smpsAlterNote       $0F
000DF955 E701                       	dc.b	smpsNoAttack, $01
000DF957 E113                       	smpsAlterNote       $13
000DF959 E701                       	dc.b	smpsNoAttack, $01
000DF95B E112                       	smpsAlterNote       $12
000DF95D E701                       	dc.b	smpsNoAttack, $01
000DF95F E10C                       	smpsAlterNote       $0C
000DF961 E701                       	dc.b	smpsNoAttack, $01
000DF963 E108                       	smpsAlterNote       $08
000DF965 E701                       	dc.b	smpsNoAttack, $01
000DF967 E10C                       	smpsAlterNote       $0C
000DF969 E701                       	dc.b	smpsNoAttack, $01
000DF96B E10F                       	smpsAlterNote       $0F
000DF96D E701                       	dc.b	smpsNoAttack, $01
000DF96F E113                       	smpsAlterNote       $13
000DF971 E701                       	dc.b	smpsNoAttack, $01
000DF973 E10F                       	smpsAlterNote       $0F
000DF975 E701                       	dc.b	smpsNoAttack, $01
000DF977 E109                       	smpsAlterNote       $09
000DF979 E701                       	dc.b	smpsNoAttack, $01
000DF97B E108                       	smpsAlterNote       $08
000DF97D E701                       	dc.b	smpsNoAttack, $01
000DF97F E10C                       	smpsAlterNote       $0C
000DF981 E701                       	dc.b	smpsNoAttack, $01
000DF983 E112                       	smpsAlterNote       $12
000DF985 E701                       	dc.b	smpsNoAttack, $01
000DF987 E113                       	smpsAlterNote       $13
000DF989 800F                       	dc.b	nRst, $0F
000DF98B E10B                       	smpsAlterNote       $0B
000DF98D BF03                       	dc.b	nD5, $03
000DF98F E10C                       	smpsAlterNote       $0C
000DF991 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DF995 E10D                       	smpsAlterNote       $0D
000DF997 C202 8001 C403 C607        	dc.b	nF5, $02, nRst, $01, nG5, $03, nA5, $07
000DF99F E10B                       	smpsAlterNote       $0B
000DF9A1 BF03 8001 C90D CB03 8001   	dc.b	nD5, $03, nRst, $01, nC6, $0D, nD6, $03, nRst, $01
000DF9AB E110                       	smpsAlterNote       $10
000DF9AD C704                       	dc.b	nBb5, $04
000DF9AF E10F                       	smpsAlterNote       $0F
000DF9B1 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DF9B5 E10D                       	smpsAlterNote       $0D
000DF9B7 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000DF9BD E109                       	smpsAlterNote       $09
000DF9BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF9C3 E10F                       	smpsAlterNote       $0F
000DF9C5 E701                       	dc.b	smpsNoAttack, $01
000DF9C7 E112                       	smpsAlterNote       $12
000DF9C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DF9CD E10C                       	smpsAlterNote       $0C
000DF9CF E701                       	dc.b	smpsNoAttack, $01
000DF9D1 E108                       	smpsAlterNote       $08
000DF9D3 E701                       	dc.b	smpsNoAttack, $01
000DF9D5 E109                       	smpsAlterNote       $09
000DF9D7 E701                       	dc.b	smpsNoAttack, $01
000DF9D9 E10F                       	smpsAlterNote       $0F
000DF9DB E701                       	dc.b	smpsNoAttack, $01
000DF9DD E113                       	smpsAlterNote       $13
000DF9DF E701                       	dc.b	smpsNoAttack, $01
000DF9E1 E10F                       	smpsAlterNote       $0F
000DF9E3 E701                       	dc.b	smpsNoAttack, $01
000DF9E5 E10C                       	smpsAlterNote       $0C
000DF9E7 E701                       	dc.b	smpsNoAttack, $01
000DF9E9 E108                       	smpsAlterNote       $08
000DF9EB E701                       	dc.b	smpsNoAttack, $01
000DF9ED E10C                       	smpsAlterNote       $0C
000DF9EF E701                       	dc.b	smpsNoAttack, $01
000DF9F1 E112                       	smpsAlterNote       $12
000DF9F3 E701                       	dc.b	smpsNoAttack, $01
000DF9F5 E113                       	smpsAlterNote       $13
000DF9F7 E701                       	dc.b	smpsNoAttack, $01
000DF9F9 E10F                       	smpsAlterNote       $0F
000DF9FB E701                       	dc.b	smpsNoAttack, $01
000DF9FD E109                       	smpsAlterNote       $09
000DF9FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFA03 E10C                       	smpsAlterNote       $0C
000DFA05 E701                       	dc.b	smpsNoAttack, $01
000DFA07 E112                       	smpsAlterNote       $12
000DFA09 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFA0D E10C                       	smpsAlterNote       $0C
000DFA0F E701                       	dc.b	smpsNoAttack, $01
000DFA11 E109                       	smpsAlterNote       $09
000DFA13 E701                       	dc.b	smpsNoAttack, $01
000DFA15 E10D                       	smpsAlterNote       $0D
000DFA17 C401 8001                  	dc.b	nG5, $01, nRst, $01
000DFA1B E10F                       	smpsAlterNote       $0F
000DFA1D C501 8001 C60D C604 8001   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nA5, $04, nRst, $01
000DFA27 E10D                       	smpsAlterNote       $0D
000DFA29 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000DFA2F E10B                       	smpsAlterNote       $0B
000DFA31 BF0D                       	dc.b	nD5, $0D
000DFA33 E108                       	smpsAlterNote       $08
000DFA35 E701                       	dc.b	smpsNoAttack, $01
000DFA37 E104                       	smpsAlterNote       $04
000DFA39 E701                       	dc.b	smpsNoAttack, $01
000DFA3B E108                       	smpsAlterNote       $08
000DFA3D E701                       	dc.b	smpsNoAttack, $01
000DFA3F E10B                       	smpsAlterNote       $0B
000DFA41 E701                       	dc.b	smpsNoAttack, $01
000DFA43 E10F                       	smpsAlterNote       $0F
000DFA45 E701                       	dc.b	smpsNoAttack, $01
000DFA47 E10B                       	smpsAlterNote       $0B
000DFA49 E701                       	dc.b	smpsNoAttack, $01
000DFA4B E105                       	smpsAlterNote       $05
000DFA4D E701                       	dc.b	smpsNoAttack, $01
000DFA4F E104                       	smpsAlterNote       $04
000DFA51 E701                       	dc.b	smpsNoAttack, $01
000DFA53 E108                       	smpsAlterNote       $08
000DFA55 E701                       	dc.b	smpsNoAttack, $01
000DFA57 E10E                       	smpsAlterNote       $0E
000DFA59 E701                       	dc.b	smpsNoAttack, $01
000DFA5B E10F                       	smpsAlterNote       $0F
000DFA5D 8001                       	dc.b	nRst, $01
000DFA5F E10C                       	smpsAlterNote       $0C
000DFA61 C101                       	dc.b	nE5, $01
000DFA63 E10D                       	smpsAlterNote       $0D
000DFA65 C201 C401 C607             	dc.b	nF5, $01, nG5, $01, nA5, $07
000DFA6B E10F                       	smpsAlterNote       $0F
000DFA6D C606 8001                  	dc.b	nA5, $06, nRst, $01
000DFA71 E10C                       	smpsAlterNote       $0C
000DFA73 CD06 8001                  	dc.b	nE6, $06, nRst, $01
000DFA77 E10D                       	smpsAlterNote       $0D
000DFA79 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000DFA7D E10C                       	smpsAlterNote       $0C
000DFA7F CD03                       	dc.b	nE6, $03
000DFA81 E10A                       	smpsAlterNote       $0A
000DFA83 C903 8001                  	dc.b	nC6, $03, nRst, $01
000DFA87 E10D                       	smpsAlterNote       $0D
000DFA89 C402 8001 C70D E701        	dc.b	nG5, $02, nRst, $01, nBb5, $0D, smpsNoAttack, $01
000DFA91 E109                       	smpsAlterNote       $09
000DFA93 E701                       	dc.b	smpsNoAttack, $01
000DFA95 E10D                       	smpsAlterNote       $0D
000DFA97 E701                       	dc.b	smpsNoAttack, $01
000DFA99 E110                       	smpsAlterNote       $10
000DFA9B E701                       	dc.b	smpsNoAttack, $01
000DFA9D E114                       	smpsAlterNote       $14
000DFA9F E701                       	dc.b	smpsNoAttack, $01
000DFAA1 E110                       	smpsAlterNote       $10
000DFAA3 E701                       	dc.b	smpsNoAttack, $01
000DFAA5 E10A                       	smpsAlterNote       $0A
000DFAA7 E701                       	dc.b	smpsNoAttack, $01
000DFAA9 E109                       	smpsAlterNote       $09
000DFAAB E701                       	dc.b	smpsNoAttack, $01
000DFAAD E10D                       	smpsAlterNote       $0D
000DFAAF E701                       	dc.b	smpsNoAttack, $01
000DFAB1 E113                       	smpsAlterNote       $13
000DFAB3 E701                       	dc.b	smpsNoAttack, $01
000DFAB5 E114                       	smpsAlterNote       $14
000DFAB7 8001                       	dc.b	nRst, $01
000DFAB9 E10F                       	smpsAlterNote       $0F
000DFABB C606 8001 C50D             	dc.b	nA5, $06, nRst, $01, nAb5, $0D
000DFAC1 E10C                       	smpsAlterNote       $0C
000DFAC3 E701                       	dc.b	smpsNoAttack, $01
000DFAC5 E108                       	smpsAlterNote       $08
000DFAC7 E701                       	dc.b	smpsNoAttack, $01
000DFAC9 E10C                       	smpsAlterNote       $0C
000DFACB E701                       	dc.b	smpsNoAttack, $01
000DFACD E112                       	smpsAlterNote       $12
000DFACF E701                       	dc.b	smpsNoAttack, $01
000DFAD1 E113                       	smpsAlterNote       $13
000DFAD3 E701                       	dc.b	smpsNoAttack, $01
000DFAD5 E10F                       	smpsAlterNote       $0F
000DFAD7 E701                       	dc.b	smpsNoAttack, $01
000DFAD9 E109                       	smpsAlterNote       $09
000DFADB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFADF E10C                       	smpsAlterNote       $0C
000DFAE1 E701                       	dc.b	smpsNoAttack, $01
000DFAE3 E112                       	smpsAlterNote       $12
000DFAE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFAE9 E10C                       	smpsAlterNote       $0C
000DFAEB E701                       	dc.b	smpsNoAttack, $01
000DFAED E109                       	smpsAlterNote       $09
000DFAEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFAF3 E10F                       	smpsAlterNote       $0F
000DFAF5 E701                       	dc.b	smpsNoAttack, $01
000DFAF7 E113                       	smpsAlterNote       $13
000DFAF9 E701                       	dc.b	smpsNoAttack, $01
000DFAFB E112                       	smpsAlterNote       $12
000DFAFD E701                       	dc.b	smpsNoAttack, $01
000DFAFF E10C                       	smpsAlterNote       $0C
000DFB01 E701                       	dc.b	smpsNoAttack, $01
000DFB03 E108                       	smpsAlterNote       $08
000DFB05 E701                       	dc.b	smpsNoAttack, $01
000DFB07 E10C                       	smpsAlterNote       $0C
000DFB09 E701                       	dc.b	smpsNoAttack, $01
000DFB0B E10F                       	smpsAlterNote       $0F
000DFB0D E701                       	dc.b	smpsNoAttack, $01
000DFB0F E113                       	smpsAlterNote       $13
000DFB11 E701                       	dc.b	smpsNoAttack, $01
000DFB13 E10F                       	smpsAlterNote       $0F
000DFB15 E701                       	dc.b	smpsNoAttack, $01
000DFB17 E109                       	smpsAlterNote       $09
000DFB19 E701                       	dc.b	smpsNoAttack, $01
000DFB1B E108                       	smpsAlterNote       $08
000DFB1D E701                       	dc.b	smpsNoAttack, $01
000DFB1F E10C                       	smpsAlterNote       $0C
000DFB21 E701                       	dc.b	smpsNoAttack, $01
000DFB23 E112                       	smpsAlterNote       $12
000DFB25 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB29 E10F                       	smpsAlterNote       $0F
000DFB2B E701                       	dc.b	smpsNoAttack, $01
000DFB2D E109                       	smpsAlterNote       $09
000DFB2F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB33 E10F                       	smpsAlterNote       $0F
000DFB35 E701                       	dc.b	smpsNoAttack, $01
000DFB37 E113                       	smpsAlterNote       $13
000DFB39 E701                       	dc.b	smpsNoAttack, $01
000DFB3B E112                       	smpsAlterNote       $12
000DFB3D E701                       	dc.b	smpsNoAttack, $01
000DFB3F E10C                       	smpsAlterNote       $0C
000DFB41 E701                       	dc.b	smpsNoAttack, $01
000DFB43 E108                       	smpsAlterNote       $08
000DFB45 E701                       	dc.b	smpsNoAttack, $01
000DFB47 E10C                       	smpsAlterNote       $0C
000DFB49 E701                       	dc.b	smpsNoAttack, $01
000DFB4B E10F                       	smpsAlterNote       $0F
000DFB4D E701                       	dc.b	smpsNoAttack, $01
000DFB4F E113                       	smpsAlterNote       $13
000DFB51 E701                       	dc.b	smpsNoAttack, $01
000DFB53 E10F                       	smpsAlterNote       $0F
000DFB55 E701                       	dc.b	smpsNoAttack, $01
000DFB57 E109                       	smpsAlterNote       $09
000DFB59 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DFB5D E10F                       	smpsAlterNote       $0F
000DFB5F C60D                       	dc.b	nA5, $0D
000DFB61 E109                       	smpsAlterNote       $09
000DFB63 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB67 E10C                       	smpsAlterNote       $0C
000DFB69 E701                       	dc.b	smpsNoAttack, $01
000DFB6B E112                       	smpsAlterNote       $12
000DFB6D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB71 E10C                       	smpsAlterNote       $0C
000DFB73 E701                       	dc.b	smpsNoAttack, $01
000DFB75 E109                       	smpsAlterNote       $09
000DFB77 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFB7B E10F                       	smpsAlterNote       $0F
000DFB7D E701                       	dc.b	smpsNoAttack, $01
000DFB7F E113                       	smpsAlterNote       $13
000DFB81 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DFB87 E10D                       	smpsAlterNote       $0D
000DFB89 C206 C203 8001 C203        	dc.b	nF5, $06, nF5, $03, nRst, $01, nF5, $03
000DFB91 E10C                       	smpsAlterNote       $0C
000DFB93 C103 800E                  	dc.b	nE5, $03, nRst, $0E
000DFB99 E6FF                       	smpsAlterVol        $FF
000DFB9B E10B                       	smpsAlterNote       $0B
000DFB9D BF03 8001                  	dc.b	nD5, $03, nRst, $01
000DFBA1 E10C                       	smpsAlterNote       $0C
000DFBA3 C103                       	dc.b	nE5, $03
000DFBA5 E10D                       	smpsAlterNote       $0D
000DFBA7 C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000DFBB1 E10B                       	smpsAlterNote       $0B
000DFBB3 BF03 C90D                  	dc.b	nD5, $03, nC6, $0D
000DFBB7 E107                       	smpsAlterNote       $07
000DFBB9 E701                       	dc.b	smpsNoAttack, $01
000DFBBB E104                       	smpsAlterNote       $04
000DFBBD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFBC1 E10A                       	smpsAlterNote       $0A
000DFBC3 E701                       	dc.b	smpsNoAttack, $01
000DFBC5 E10D                       	smpsAlterNote       $0D
000DFBC7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFBCB E107                       	smpsAlterNote       $07
000DFBCD E701                       	dc.b	smpsNoAttack, $01
000DFBCF E104                       	smpsAlterNote       $04
000DFBD1 8001                       	dc.b	nRst, $01
000DFBD3 E110                       	smpsAlterNote       $10
000DFBD5 C703                       	dc.b	nBb5, $03
000DFBD7 E10F                       	smpsAlterNote       $0F
000DFBD9 C603 8001                  	dc.b	nA5, $03, nRst, $01
000DFBDD E10D                       	smpsAlterNote       $0D
000DFBDF C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000DFBE3 E10C                       	smpsAlterNote       $0C
000DFBE5 E701                       	dc.b	smpsNoAttack, $01
000DFBE7 E108                       	smpsAlterNote       $08
000DFBE9 E701                       	dc.b	smpsNoAttack, $01
000DFBEB E109                       	smpsAlterNote       $09
000DFBED E701                       	dc.b	smpsNoAttack, $01
000DFBEF E10F                       	smpsAlterNote       $0F
000DFBF1 E701                       	dc.b	smpsNoAttack, $01
000DFBF3 E113                       	smpsAlterNote       $13
000DFBF5 E701                       	dc.b	smpsNoAttack, $01
000DFBF7 E10F                       	smpsAlterNote       $0F
000DFBF9 E701                       	dc.b	smpsNoAttack, $01
000DFBFB E10C                       	smpsAlterNote       $0C
000DFBFD E701                       	dc.b	smpsNoAttack, $01
000DFBFF E108                       	smpsAlterNote       $08
000DFC01 E701                       	dc.b	smpsNoAttack, $01
000DFC03 E10C                       	smpsAlterNote       $0C
000DFC05 E701                       	dc.b	smpsNoAttack, $01
000DFC07 E112                       	smpsAlterNote       $12
000DFC09 E701                       	dc.b	smpsNoAttack, $01
000DFC0B E113                       	smpsAlterNote       $13
000DFC0D E701                       	dc.b	smpsNoAttack, $01
000DFC0F E10F                       	smpsAlterNote       $0F
000DFC11 E701                       	dc.b	smpsNoAttack, $01
000DFC13 E109                       	smpsAlterNote       $09
000DFC15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFC19 E10C                       	smpsAlterNote       $0C
000DFC1B E701                       	dc.b	smpsNoAttack, $01
000DFC1D E112                       	smpsAlterNote       $12
000DFC1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFC23 E10C                       	smpsAlterNote       $0C
000DFC25 E701                       	dc.b	smpsNoAttack, $01
000DFC27 E109                       	smpsAlterNote       $09
000DFC29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFC2D E10F                       	smpsAlterNote       $0F
000DFC2F E701                       	dc.b	smpsNoAttack, $01
000DFC31 E113                       	smpsAlterNote       $13
000DFC33 E701                       	dc.b	smpsNoAttack, $01
000DFC35 E112                       	smpsAlterNote       $12
000DFC37 E701                       	dc.b	smpsNoAttack, $01
000DFC39 E10C                       	smpsAlterNote       $0C
000DFC3B E701                       	dc.b	smpsNoAttack, $01
000DFC3D E108                       	smpsAlterNote       $08
000DFC3F E701                       	dc.b	smpsNoAttack, $01
000DFC41 E10C                       	smpsAlterNote       $0C
000DFC43 E701                       	dc.b	smpsNoAttack, $01
000DFC45 E10F                       	smpsAlterNote       $0F
000DFC47 E701                       	dc.b	smpsNoAttack, $01
000DFC49 E113                       	smpsAlterNote       $13
000DFC4B E701                       	dc.b	smpsNoAttack, $01
000DFC4D E10F                       	smpsAlterNote       $0F
000DFC4F BA03 8001                  	dc.b	nA4, $03, nRst, $01
000DFC53 E110                       	smpsAlterNote       $10
000DFC55 BB03                       	dc.b	nBb4, $03
000DFC57 E10F                       	smpsAlterNote       $0F
000DFC59 BA06 8001                  	dc.b	nA4, $06, nRst, $01
000DFC5D E10B                       	smpsAlterNote       $0B
000DFC5F BF03                       	dc.b	nD5, $03
000DFC61 E10C                       	smpsAlterNote       $0C
000DFC63 C103 8001                  	dc.b	nE5, $03, nRst, $01
000DFC67 E10D                       	smpsAlterNote       $0D
000DFC69 C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000DFC73 E10B                       	smpsAlterNote       $0B
000DFC75 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000DFC81 E110                       	smpsAlterNote       $10
000DFC83 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000DFC87 E10F                       	smpsAlterNote       $0F
000DFC89 C604                       	dc.b	nA5, $04
000DFC8B E10D                       	smpsAlterNote       $0D
000DFC8D C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000DFC93 E109                       	smpsAlterNote       $09
000DFC95 E701                       	dc.b	smpsNoAttack, $01
000DFC97 E108                       	smpsAlterNote       $08
000DFC99 E701                       	dc.b	smpsNoAttack, $01
000DFC9B E10C                       	smpsAlterNote       $0C
000DFC9D E701                       	dc.b	smpsNoAttack, $01
000DFC9F E112                       	smpsAlterNote       $12
000DFCA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFCA5 E10F                       	smpsAlterNote       $0F
000DFCA7 E701                       	dc.b	smpsNoAttack, $01
000DFCA9 E109                       	smpsAlterNote       $09
000DFCAB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFCAF E10F                       	smpsAlterNote       $0F
000DFCB1 E701                       	dc.b	smpsNoAttack, $01
000DFCB3 E112                       	smpsAlterNote       $12
000DFCB5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFCB9 E10C                       	smpsAlterNote       $0C
000DFCBB E701                       	dc.b	smpsNoAttack, $01
000DFCBD E108                       	smpsAlterNote       $08
000DFCBF E701                       	dc.b	smpsNoAttack, $01
000DFCC1 E109                       	smpsAlterNote       $09
000DFCC3 E701                       	dc.b	smpsNoAttack, $01
000DFCC5 E10F                       	smpsAlterNote       $0F
000DFCC7 E701                       	dc.b	smpsNoAttack, $01
000DFCC9 E113                       	smpsAlterNote       $13
000DFCCB E701                       	dc.b	smpsNoAttack, $01
000DFCCD E10F                       	smpsAlterNote       $0F
000DFCCF E701                       	dc.b	smpsNoAttack, $01
000DFCD1 E10C                       	smpsAlterNote       $0C
000DFCD3 E701                       	dc.b	smpsNoAttack, $01
000DFCD5 E108                       	smpsAlterNote       $08
000DFCD7 E701                       	dc.b	smpsNoAttack, $01
000DFCD9 E10C                       	smpsAlterNote       $0C
000DFCDB E701                       	dc.b	smpsNoAttack, $01
000DFCDD E112                       	smpsAlterNote       $12
000DFCDF E701                       	dc.b	smpsNoAttack, $01
000DFCE1 E113                       	smpsAlterNote       $13
000DFCE3 E701                       	dc.b	smpsNoAttack, $01
000DFCE5 E10F                       	smpsAlterNote       $0F
000DFCE7 E701                       	dc.b	smpsNoAttack, $01
000DFCE9 E109                       	smpsAlterNote       $09
000DFCEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFCEF E10C                       	smpsAlterNote       $0C
000DFCF1 E701                       	dc.b	smpsNoAttack, $01
000DFCF3 E112                       	smpsAlterNote       $12
000DFCF5 E701                       	dc.b	smpsNoAttack, $01
000DFCF7 E113                       	smpsAlterNote       $13
000DFCF9 8001                       	dc.b	nRst, $01
000DFCFB E10F                       	smpsAlterNote       $0F
000DFCFD C602 C602 C602 8001 C601+  	dc.b	nA5, $02, nA5, $02, nA5, $02, nRst, $01, nA5, $01, nRst, $01
000DFD09 C602 C602 8001 C604        	dc.b	nA5, $02, nA5, $02, nRst, $01, nA5, $04
000DFD11 E10D                       	smpsAlterNote       $0D
000DFD13 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000DFD19 E10B                       	smpsAlterNote       $0B
000DFD1B BF0D                       	dc.b	nD5, $0D
000DFD1D E108                       	smpsAlterNote       $08
000DFD1F E701                       	dc.b	smpsNoAttack, $01
000DFD21 E104                       	smpsAlterNote       $04
000DFD23 E701                       	dc.b	smpsNoAttack, $01
000DFD25 E105                       	smpsAlterNote       $05
000DFD27 E701                       	dc.b	smpsNoAttack, $01
000DFD29 E10B                       	smpsAlterNote       $0B
000DFD2B E701                       	dc.b	smpsNoAttack, $01
000DFD2D E10F                       	smpsAlterNote       $0F
000DFD2F E701                       	dc.b	smpsNoAttack, $01
000DFD31 E10B                       	smpsAlterNote       $0B
000DFD33 E701                       	dc.b	smpsNoAttack, $01
000DFD35 E108                       	smpsAlterNote       $08
000DFD37 E701                       	dc.b	smpsNoAttack, $01
000DFD39 E104                       	smpsAlterNote       $04
000DFD3B E701                       	dc.b	smpsNoAttack, $01
000DFD3D E108                       	smpsAlterNote       $08
000DFD3F E701                       	dc.b	smpsNoAttack, $01
000DFD41 E10E                       	smpsAlterNote       $0E
000DFD43 E701                       	dc.b	smpsNoAttack, $01
000DFD45 E10F                       	smpsAlterNote       $0F
000DFD47 E701                       	dc.b	smpsNoAttack, $01
000DFD49 E10C                       	smpsAlterNote       $0C
000DFD4B C101                       	dc.b	nE5, $01
000DFD4D E10D                       	smpsAlterNote       $0D
000DFD4F C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000DFD57 E10F                       	smpsAlterNote       $0F
000DFD59 C607                       	dc.b	nA5, $07
000DFD5B E10C                       	smpsAlterNote       $0C
000DFD5D CD07                       	dc.b	nE6, $07
000DFD5F E10D                       	smpsAlterNote       $0D
000DFD61 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000DFD65 E10C                       	smpsAlterNote       $0C
000DFD67 CD03                       	dc.b	nE6, $03
000DFD69 E10A                       	smpsAlterNote       $0A
000DFD6B C903 8001                  	dc.b	nC6, $03, nRst, $01
000DFD6F E10D                       	smpsAlterNote       $0D
000DFD71 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000DFD77 E10A                       	smpsAlterNote       $0A
000DFD79 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFD7D E110                       	smpsAlterNote       $10
000DFD7F E701                       	dc.b	smpsNoAttack, $01
000DFD81 E114                       	smpsAlterNote       $14
000DFD83 E701                       	dc.b	smpsNoAttack, $01
000DFD85 E113                       	smpsAlterNote       $13
000DFD87 E701                       	dc.b	smpsNoAttack, $01
000DFD89 E10D                       	smpsAlterNote       $0D
000DFD8B E701                       	dc.b	smpsNoAttack, $01
000DFD8D E109                       	smpsAlterNote       $09
000DFD8F E701                       	dc.b	smpsNoAttack, $01
000DFD91 E10D                       	smpsAlterNote       $0D
000DFD93 E701                       	dc.b	smpsNoAttack, $01
000DFD95 E110                       	smpsAlterNote       $10
000DFD97 E701                       	dc.b	smpsNoAttack, $01
000DFD99 E114                       	smpsAlterNote       $14
000DFD9B E701                       	dc.b	smpsNoAttack, $01
000DFD9D E10F                       	smpsAlterNote       $0F
000DFD9F C607 C50D                  	dc.b	nA5, $07, nAb5, $0D
000DFDA3 E10C                       	smpsAlterNote       $0C
000DFDA5 E701                       	dc.b	smpsNoAttack, $01
000DFDA7 E108                       	smpsAlterNote       $08
000DFDA9 E701                       	dc.b	smpsNoAttack, $01
000DFDAB E10C                       	smpsAlterNote       $0C
000DFDAD E701                       	dc.b	smpsNoAttack, $01
000DFDAF E10F                       	smpsAlterNote       $0F
000DFDB1 E701                       	dc.b	smpsNoAttack, $01
000DFDB3 E113                       	smpsAlterNote       $13
000DFDB5 E701                       	dc.b	smpsNoAttack, $01
000DFDB7 E10F                       	smpsAlterNote       $0F
000DFDB9 E701                       	dc.b	smpsNoAttack, $01
000DFDBB E109                       	smpsAlterNote       $09
000DFDBD E701                       	dc.b	smpsNoAttack, $01
000DFDBF E108                       	smpsAlterNote       $08
000DFDC1 E701                       	dc.b	smpsNoAttack, $01
000DFDC3 E10C                       	smpsAlterNote       $0C
000DFDC5 E701                       	dc.b	smpsNoAttack, $01
000DFDC7 E112                       	smpsAlterNote       $12
000DFDC9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFDCD E10F                       	smpsAlterNote       $0F
000DFDCF E701                       	dc.b	smpsNoAttack, $01
000DFDD1 E109                       	smpsAlterNote       $09
000DFDD3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFDD7 E10F                       	smpsAlterNote       $0F
000DFDD9 E701                       	dc.b	smpsNoAttack, $01
000DFDDB E112                       	smpsAlterNote       $12
000DFDDD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFDE1 E10C                       	smpsAlterNote       $0C
000DFDE3 E701                       	dc.b	smpsNoAttack, $01
000DFDE5 E108                       	smpsAlterNote       $08
000DFDE7 E701                       	dc.b	smpsNoAttack, $01
000DFDE9 E109                       	smpsAlterNote       $09
000DFDEB E701                       	dc.b	smpsNoAttack, $01
000DFDED E10F                       	smpsAlterNote       $0F
000DFDEF E701                       	dc.b	smpsNoAttack, $01
000DFDF1 E113                       	smpsAlterNote       $13
000DFDF3 E701                       	dc.b	smpsNoAttack, $01
000DFDF5 E10F                       	smpsAlterNote       $0F
000DFDF7 E701                       	dc.b	smpsNoAttack, $01
000DFDF9 E10C                       	smpsAlterNote       $0C
000DFDFB E701                       	dc.b	smpsNoAttack, $01
000DFDFD E108                       	smpsAlterNote       $08
000DFDFF E701                       	dc.b	smpsNoAttack, $01
000DFE01 E10C                       	smpsAlterNote       $0C
000DFE03 E701                       	dc.b	smpsNoAttack, $01
000DFE05 E112                       	smpsAlterNote       $12
000DFE07 E701                       	dc.b	smpsNoAttack, $01
000DFE09 E113                       	smpsAlterNote       $13
000DFE0B E701                       	dc.b	smpsNoAttack, $01
000DFE0D E10F                       	smpsAlterNote       $0F
000DFE0F E701                       	dc.b	smpsNoAttack, $01
000DFE11 E109                       	smpsAlterNote       $09
000DFE13 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE17 E10C                       	smpsAlterNote       $0C
000DFE19 E701                       	dc.b	smpsNoAttack, $01
000DFE1B E112                       	smpsAlterNote       $12
000DFE1D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE21 E10C                       	smpsAlterNote       $0C
000DFE23 E701                       	dc.b	smpsNoAttack, $01
000DFE25 E109                       	smpsAlterNote       $09
000DFE27 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE2B E10F                       	smpsAlterNote       $0F
000DFE2D E701                       	dc.b	smpsNoAttack, $01
000DFE2F E113                       	smpsAlterNote       $13
000DFE31 E701                       	dc.b	smpsNoAttack, $01
000DFE33 E112                       	smpsAlterNote       $12
000DFE35 E701                       	dc.b	smpsNoAttack, $01
000DFE37 E10C                       	smpsAlterNote       $0C
000DFE39 E701                       	dc.b	smpsNoAttack, $01
000DFE3B E109                       	smpsAlterNote       $09
000DFE3D 8001                       	dc.b	nRst, $01
000DFE3F E10F                       	smpsAlterNote       $0F
000DFE41 C60D                       	dc.b	nA5, $0D
000DFE43 E10C                       	smpsAlterNote       $0C
000DFE45 E701                       	dc.b	smpsNoAttack, $01
000DFE47 E108                       	smpsAlterNote       $08
000DFE49 E701                       	dc.b	smpsNoAttack, $01
000DFE4B E10C                       	smpsAlterNote       $0C
000DFE4D E701                       	dc.b	smpsNoAttack, $01
000DFE4F E112                       	smpsAlterNote       $12
000DFE51 E701                       	dc.b	smpsNoAttack, $01
000DFE53 E113                       	smpsAlterNote       $13
000DFE55 E701                       	dc.b	smpsNoAttack, $01
000DFE57 E10F                       	smpsAlterNote       $0F
000DFE59 E701                       	dc.b	smpsNoAttack, $01
000DFE5B E109                       	smpsAlterNote       $09
000DFE5D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE61 E10C                       	smpsAlterNote       $0C
000DFE63 E701                       	dc.b	smpsNoAttack, $01
000DFE65 E112                       	smpsAlterNote       $12
000DFE67 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE6B E10C                       	smpsAlterNote       $0C
000DFE6D E701                       	dc.b	smpsNoAttack, $01
000DFE6F E109                       	smpsAlterNote       $09
000DFE71 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFE75 E10F                       	smpsAlterNote       $0F
000DFE77 E701                       	dc.b	smpsNoAttack, $01
000DFE79 E113                       	smpsAlterNote       $13
000DFE7B E701                       	dc.b	smpsNoAttack, $01
000DFE7D E112                       	smpsAlterNote       $12
000DFE7F E701                       	dc.b	smpsNoAttack, $01
000DFE81 E10C                       	smpsAlterNote       $0C
000DFE83 E701                       	dc.b	smpsNoAttack, $01
000DFE85 E108                       	smpsAlterNote       $08
000DFE87 E701                       	dc.b	smpsNoAttack, $01
000DFE89 E10C                       	smpsAlterNote       $0C
000DFE8B E701                       	dc.b	smpsNoAttack, $01
000DFE8D E10F                       	smpsAlterNote       $0F
000DFE8F E701                       	dc.b	smpsNoAttack, $01
000DFE91 E113                       	smpsAlterNote       $13
000DFE93 E701                       	dc.b	smpsNoAttack, $01
000DFE95 E10F                       	smpsAlterNote       $0F
000DFE97 E701                       	dc.b	smpsNoAttack, $01
000DFE99 E109                       	smpsAlterNote       $09
000DFE9B E701                       	dc.b	smpsNoAttack, $01
000DFE9D E108                       	smpsAlterNote       $08
000DFE9F E701                       	dc.b	smpsNoAttack, $01
000DFEA1 E10C                       	smpsAlterNote       $0C
000DFEA3 E701                       	dc.b	smpsNoAttack, $01
000DFEA5 E112                       	smpsAlterNote       $12
000DFEA7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFEAB E10F                       	smpsAlterNote       $0F
000DFEAD E701                       	dc.b	smpsNoAttack, $01
000DFEAF E109                       	smpsAlterNote       $09
000DFEB1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFEB5 E10F                       	smpsAlterNote       $0F
000DFEB7 E701                       	dc.b	smpsNoAttack, $01
000DFEB9 E112                       	smpsAlterNote       $12
000DFEBB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFEBF E10C                       	smpsAlterNote       $0C
000DFEC1 E701                       	dc.b	smpsNoAttack, $01
000DFEC3 E108                       	smpsAlterNote       $08
000DFEC5 E701                       	dc.b	smpsNoAttack, $01
000DFEC7 E10C                       	smpsAlterNote       $0C
000DFEC9 E701                       	dc.b	smpsNoAttack, $01
000DFECB E10F                       	smpsAlterNote       $0F
000DFECD E701                       	dc.b	smpsNoAttack, $01
000DFECF E113                       	smpsAlterNote       $13
000DFED1 E701                       	dc.b	smpsNoAttack, $01
000DFED3 E10F                       	smpsAlterNote       $0F
000DFED5 E701                       	dc.b	smpsNoAttack, $01
000DFED7 E109                       	smpsAlterNote       $09
000DFED9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000DFEDF E601                       	smpsAlterVol        $01
000DFEE1 E10F                       	smpsAlterNote       $0F
000DFEE3 C604                       	dc.b	nA5, $04
000DFEE5 E10D                       	smpsAlterNote       $0D
000DFEE7 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000DFEED E10B                       	smpsAlterNote       $0B
000DFEEF BF0A 8001 BF02 8001        	dc.b	nD5, $0A, nRst, $01, nD5, $02, nRst, $01
000DFEF7 E10F                       	smpsAlterNote       $0F
000DFEF9 C604 8001                  	dc.b	nA5, $04, nRst, $01
000DFEFD E10D                       	smpsAlterNote       $0D
000DFEFF C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000DFF05 E10C                       	smpsAlterNote       $0C
000DFF07 C109 8001 C103             	dc.b	nE5, $09, nRst, $01, nE5, $03
000DFF0D E10A                       	smpsAlterNote       $0A
000DFF0F C904 8001                  	dc.b	nC6, $04, nRst, $01
000DFF13 E110                       	smpsAlterNote       $10
000DFF15 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000DFF19 E10F                       	smpsAlterNote       $0F
000DFF1B C604                       	dc.b	nA5, $04
000DFF1D E10D                       	smpsAlterNote       $0D
000DFF1F C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000DFF2B E109                       	smpsAlterNote       $09
000DFF2D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFF31 E10F                       	smpsAlterNote       $0F
000DFF33 E701                       	dc.b	smpsNoAttack, $01
000DFF35 E112                       	smpsAlterNote       $12
000DFF37 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFF3B E10C                       	smpsAlterNote       $0C
000DFF3D E701                       	dc.b	smpsNoAttack, $01
000DFF3F E108                       	smpsAlterNote       $08
000DFF41 E701                       	dc.b	smpsNoAttack, $01
000DFF43 E10C                       	smpsAlterNote       $0C
000DFF45 E701                       	dc.b	smpsNoAttack, $01
000DFF47 E10F                       	smpsAlterNote       $0F
000DFF49 E701                       	dc.b	smpsNoAttack, $01
000DFF4B E113                       	smpsAlterNote       $13
000DFF4D E701                       	dc.b	smpsNoAttack, $01
000DFF4F E10D                       	smpsAlterNote       $0D
000DFF51 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000DFF57 E10C                       	smpsAlterNote       $0C
000DFF59 C10D                       	dc.b	nE5, $0D
000DFF5B E109                       	smpsAlterNote       $09
000DFF5D E701                       	dc.b	smpsNoAttack, $01
000DFF5F E105                       	smpsAlterNote       $05
000DFF61 E701                       	dc.b	smpsNoAttack, $01
000DFF63 E106                       	smpsAlterNote       $06
000DFF65 E701                       	dc.b	smpsNoAttack, $01
000DFF67 E10C                       	smpsAlterNote       $0C
000DFF69 E701                       	dc.b	smpsNoAttack, $01
000DFF6B E110                       	smpsAlterNote       $10
000DFF6D E701                       	dc.b	smpsNoAttack, $01
000DFF6F E10C                       	smpsAlterNote       $0C
000DFF71 E701                       	dc.b	smpsNoAttack, $01
000DFF73 E109                       	smpsAlterNote       $09
000DFF75 E701                       	dc.b	smpsNoAttack, $01
000DFF77 E105                       	smpsAlterNote       $05
000DFF79 E701                       	dc.b	smpsNoAttack, $01
000DFF7B E109                       	smpsAlterNote       $09
000DFF7D E701                       	dc.b	smpsNoAttack, $01
000DFF7F E10F                       	smpsAlterNote       $0F
000DFF81 E701                       	dc.b	smpsNoAttack, $01
000DFF83 E110                       	smpsAlterNote       $10
000DFF85 E701                       	dc.b	smpsNoAttack, $01
000DFF87 E10C                       	smpsAlterNote       $0C
000DFF89 E701                       	dc.b	smpsNoAttack, $01
000DFF8B E106                       	smpsAlterNote       $06
000DFF8D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFF91 E109                       	smpsAlterNote       $09
000DFF93 E701                       	dc.b	smpsNoAttack, $01
000DFF95 E10F                       	smpsAlterNote       $0F
000DFF97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFF9B E109                       	smpsAlterNote       $09
000DFF9D E701                       	dc.b	smpsNoAttack, $01
000DFF9F E106                       	smpsAlterNote       $06
000DFFA1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFFA5 E10C                       	smpsAlterNote       $0C
000DFFA7 E701                       	dc.b	smpsNoAttack, $01
000DFFA9 E110                       	smpsAlterNote       $10
000DFFAB E701                       	dc.b	smpsNoAttack, $01
000DFFAD E10F                       	smpsAlterNote       $0F
000DFFAF E701                       	dc.b	smpsNoAttack, $01
000DFFB1 E109                       	smpsAlterNote       $09
000DFFB3 E701                       	dc.b	smpsNoAttack, $01
000DFFB5 E105                       	smpsAlterNote       $05
000DFFB7 E701                       	dc.b	smpsNoAttack, $01
000DFFB9 E109                       	smpsAlterNote       $09
000DFFBB E701                       	dc.b	smpsNoAttack, $01
000DFFBD E10C                       	smpsAlterNote       $0C
000DFFBF E701                       	dc.b	smpsNoAttack, $01
000DFFC1 E110                       	smpsAlterNote       $10
000DFFC3 E701                       	dc.b	smpsNoAttack, $01
000DFFC5 E10C                       	smpsAlterNote       $0C
000DFFC7 E701                       	dc.b	smpsNoAttack, $01
000DFFC9 E106                       	smpsAlterNote       $06
000DFFCB E701                       	dc.b	smpsNoAttack, $01
000DFFCD E105                       	smpsAlterNote       $05
000DFFCF E701                       	dc.b	smpsNoAttack, $01
000DFFD1 E109                       	smpsAlterNote       $09
000DFFD3 E701                       	dc.b	smpsNoAttack, $01
000DFFD5 E10F                       	smpsAlterNote       $0F
000DFFD7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFFDB E10C                       	smpsAlterNote       $0C
000DFFDD E701                       	dc.b	smpsNoAttack, $01
000DFFDF E106                       	smpsAlterNote       $06
000DFFE1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFFE5 E10C                       	smpsAlterNote       $0C
000DFFE7 E701                       	dc.b	smpsNoAttack, $01
000DFFE9 E10F                       	smpsAlterNote       $0F
000DFFEB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000DFFEF E109                       	smpsAlterNote       $09
000DFFF1 E701                       	dc.b	smpsNoAttack, $01
000DFFF3 E105                       	smpsAlterNote       $05
000DFFF5 E701                       	dc.b	smpsNoAttack, $01
000DFFF7 E106                       	smpsAlterNote       $06
000DFFF9 E701                       	dc.b	smpsNoAttack, $01
000DFFFB E10C                       	smpsAlterNote       $0C
000DFFFD E701                       	dc.b	smpsNoAttack, $01
000DFFFF E110                       	smpsAlterNote       $10
000E0001 E701                       	dc.b	smpsNoAttack, $01
000E0003 E10C                       	smpsAlterNote       $0C
000E0005 E701                       	dc.b	smpsNoAttack, $01
000E0007 E109                       	smpsAlterNote       $09
000E0009 E701                       	dc.b	smpsNoAttack, $01
000E000B E105                       	smpsAlterNote       $05
000E000D E701                       	dc.b	smpsNoAttack, $01
000E000F E109                       	smpsAlterNote       $09
000E0011 E701                       	dc.b	smpsNoAttack, $01
000E0013 E10F                       	smpsAlterNote       $0F
000E0015 E701                       	dc.b	smpsNoAttack, $01
000E0017 E110                       	smpsAlterNote       $10
000E0019 E701                       	dc.b	smpsNoAttack, $01
000E001B E10C                       	smpsAlterNote       $0C
000E001D E701                       	dc.b	smpsNoAttack, $01
000E001F E106                       	smpsAlterNote       $06
000E0021 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0025 E109                       	smpsAlterNote       $09
000E0027 E701                       	dc.b	smpsNoAttack, $01
000E0029 E10F                       	smpsAlterNote       $0F
000E002B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E002F E109                       	smpsAlterNote       $09
000E0031 E701                       	dc.b	smpsNoAttack, $01
000E0033 E106                       	smpsAlterNote       $06
000E0035 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0039 E10C                       	smpsAlterNote       $0C
000E003B E701                       	dc.b	smpsNoAttack, $01
000E003D E110                       	smpsAlterNote       $10
000E003F E701                       	dc.b	smpsNoAttack, $01
000E0041 E10F                       	smpsAlterNote       $0F
000E0043 E701                       	dc.b	smpsNoAttack, $01
000E0045 E109                       	smpsAlterNote       $09
000E0047 E701                       	dc.b	smpsNoAttack, $01
000E0049 E105                       	smpsAlterNote       $05
000E004B E701                       	dc.b	smpsNoAttack, $01
000E004D E109                       	smpsAlterNote       $09
000E004F E701                       	dc.b	smpsNoAttack, $01
000E0051 E10C                       	smpsAlterNote       $0C
000E0053 E701                       	dc.b	smpsNoAttack, $01
000E0055 E110                       	smpsAlterNote       $10
000E0057 E701                       	dc.b	smpsNoAttack, $01
000E0059 E10C                       	smpsAlterNote       $0C
000E005B E701                       	dc.b	smpsNoAttack, $01
000E005D E106                       	smpsAlterNote       $06
000E005F E701                       	dc.b	smpsNoAttack, $01
000E0061 E105                       	smpsAlterNote       $05
000E0063 E701                       	dc.b	smpsNoAttack, $01
000E0065 E109                       	smpsAlterNote       $09
000E0067 E701                       	dc.b	smpsNoAttack, $01
000E0069 E10F                       	smpsAlterNote       $0F
000E006B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E006F E109                       	smpsAlterNote       $09
000E0071 E701                       	dc.b	smpsNoAttack, $01
000E0073 E106                       	smpsAlterNote       $06
000E0075 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0079 E10C                       	smpsAlterNote       $0C
000E007B E701                       	dc.b	smpsNoAttack, $01
000E007D E110                       	smpsAlterNote       $10
000E007F E701                       	dc.b	smpsNoAttack, $01
000E0081 E10F                       	smpsAlterNote       $0F
000E0083 E701                       	dc.b	smpsNoAttack, $01
000E0085 E109                       	smpsAlterNote       $09
000E0087 E701                       	dc.b	smpsNoAttack, $01
000E0089 E105                       	smpsAlterNote       $05
000E008B E701                       	dc.b	smpsNoAttack, $01
000E008D E109                       	smpsAlterNote       $09
000E008F E701                       	dc.b	smpsNoAttack, $01
000E0091 E10C                       	smpsAlterNote       $0C
000E0093 E701                       	dc.b	smpsNoAttack, $01
000E0095 E110                       	smpsAlterNote       $10
000E0097 E701                       	dc.b	smpsNoAttack, $01
000E0099 E10C                       	smpsAlterNote       $0C
000E009B E701                       	dc.b	smpsNoAttack, $01
000E009D E106                       	smpsAlterNote       $06
000E009F E701                       	dc.b	smpsNoAttack, $01
000E00A1 E105                       	smpsAlterNote       $05
000E00A3 E701                       	dc.b	smpsNoAttack, $01
000E00A5 E109                       	smpsAlterNote       $09
000E00A7 E701                       	dc.b	smpsNoAttack, $01
000E00A9 E10F                       	smpsAlterNote       $0F
000E00AB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E00AF E10C                       	smpsAlterNote       $0C
000E00B1 E701                       	dc.b	smpsNoAttack, $01
000E00B3 E106                       	smpsAlterNote       $06
000E00B5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E00B9 E10C                       	smpsAlterNote       $0C
000E00BB E701                       	dc.b	smpsNoAttack, $01
000E00BD E10F                       	smpsAlterNote       $0F
000E00BF E701                       	dc.b	smpsNoAttack, $01
000E00C1 E110                       	smpsAlterNote       $10
000E00C3 8001                       	dc.b	nRst, $01
000E00C5 E10F                       	smpsAlterNote       $0F
000E00C7 C604                       	dc.b	nA5, $04
000E00C9 E10D                       	smpsAlterNote       $0D
000E00CB C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000E00D1 E10B                       	smpsAlterNote       $0B
000E00D3 BF0A 8001 BF03             	dc.b	nD5, $0A, nRst, $01, nD5, $03
000E00D9 E10F                       	smpsAlterNote       $0F
000E00DB C604 8001                  	dc.b	nA5, $04, nRst, $01
000E00DF E10D                       	smpsAlterNote       $0D
000E00E1 C404 C604 8001             	dc.b	nG5, $04, nA5, $04, nRst, $01
000E00E7 E10C                       	smpsAlterNote       $0C
000E00E9 C10A C103 8001             	dc.b	nE5, $0A, nE5, $03, nRst, $01
000E00EF E10A                       	smpsAlterNote       $0A
000E00F1 C904                       	dc.b	nC6, $04
000E00F3 E110                       	smpsAlterNote       $10
000E00F5 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000E00F9 E10F                       	smpsAlterNote       $0F
000E00FB C604                       	dc.b	nA5, $04
000E00FD E10D                       	smpsAlterNote       $0D
000E00FF C403 8001 C202 8001 C403+  	dc.b	nG5, $03, nRst, $01, nF5, $02, nRst, $01, nG5, $03, nA5, $0E
000E010B E109                       	smpsAlterNote       $09
000E010D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0111 E10F                       	smpsAlterNote       $0F
000E0113 E701                       	dc.b	smpsNoAttack, $01
000E0115 E112                       	smpsAlterNote       $12
000E0117 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E011B E10C                       	smpsAlterNote       $0C
000E011D E701                       	dc.b	smpsNoAttack, $01
000E011F E108                       	smpsAlterNote       $08
000E0121 E701                       	dc.b	smpsNoAttack, $01
000E0123 E109                       	smpsAlterNote       $09
000E0125 E701                       	dc.b	smpsNoAttack, $01
000E0127 E10F                       	smpsAlterNote       $0F
000E0129 E701                       	dc.b	smpsNoAttack, $01
000E012B E113                       	smpsAlterNote       $13
000E012D E701                       	dc.b	smpsNoAttack, $01
000E012F E10D                       	smpsAlterNote       $0D
000E0131 C403 8001 C203             	dc.b	nG5, $03, nRst, $01, nF5, $03
000E0137 E10C                       	smpsAlterNote       $0C
000E0139 C10D                       	dc.b	nE5, $0D
000E013B E109                       	smpsAlterNote       $09
000E013D E701                       	dc.b	smpsNoAttack, $01
000E013F E106                       	smpsAlterNote       $06
000E0141 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0145 E10C                       	smpsAlterNote       $0C
000E0147 E701                       	dc.b	smpsNoAttack, $01
000E0149 E110                       	smpsAlterNote       $10
000E014B E701                       	dc.b	smpsNoAttack, $01
000E014D E10F                       	smpsAlterNote       $0F
000E014F E701                       	dc.b	smpsNoAttack, $01
000E0151 E109                       	smpsAlterNote       $09
000E0153 E701                       	dc.b	smpsNoAttack, $01
000E0155 E105                       	smpsAlterNote       $05
000E0157 E701                       	dc.b	smpsNoAttack, $01
000E0159 E109                       	smpsAlterNote       $09
000E015B E701                       	dc.b	smpsNoAttack, $01
000E015D E10C                       	smpsAlterNote       $0C
000E015F E701                       	dc.b	smpsNoAttack, $01
000E0161 E110                       	smpsAlterNote       $10
000E0163 E701                       	dc.b	smpsNoAttack, $01
000E0165 E10C                       	smpsAlterNote       $0C
000E0167 E701                       	dc.b	smpsNoAttack, $01
000E0169 E106                       	smpsAlterNote       $06
000E016B E701                       	dc.b	smpsNoAttack, $01
000E016D E105                       	smpsAlterNote       $05
000E016F E701                       	dc.b	smpsNoAttack, $01
000E0171 E109                       	smpsAlterNote       $09
000E0173 E701                       	dc.b	smpsNoAttack, $01
000E0175 E10F                       	smpsAlterNote       $0F
000E0177 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E017B E10C                       	smpsAlterNote       $0C
000E017D E701                       	dc.b	smpsNoAttack, $01
000E017F E106                       	smpsAlterNote       $06
000E0181 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0185 E10C                       	smpsAlterNote       $0C
000E0187 E701                       	dc.b	smpsNoAttack, $01
000E0189 E10F                       	smpsAlterNote       $0F
000E018B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E018F E109                       	smpsAlterNote       $09
000E0191 E701                       	dc.b	smpsNoAttack, $01
000E0193 E105                       	smpsAlterNote       $05
000E0195 E701                       	dc.b	smpsNoAttack, $01
000E0197 E106                       	smpsAlterNote       $06
000E0199 E701                       	dc.b	smpsNoAttack, $01
000E019B E10C                       	smpsAlterNote       $0C
000E019D E701                       	dc.b	smpsNoAttack, $01
000E019F E110                       	smpsAlterNote       $10
000E01A1 E701                       	dc.b	smpsNoAttack, $01
000E01A3 E10C                       	smpsAlterNote       $0C
000E01A5 E701                       	dc.b	smpsNoAttack, $01
000E01A7 E109                       	smpsAlterNote       $09
000E01A9 E701                       	dc.b	smpsNoAttack, $01
000E01AB E105                       	smpsAlterNote       $05
000E01AD E701                       	dc.b	smpsNoAttack, $01
000E01AF E109                       	smpsAlterNote       $09
000E01B1 E701                       	dc.b	smpsNoAttack, $01
000E01B3 E10F                       	smpsAlterNote       $0F
000E01B5 E701                       	dc.b	smpsNoAttack, $01
000E01B7 E110                       	smpsAlterNote       $10
000E01B9 E701                       	dc.b	smpsNoAttack, $01
000E01BB E10C                       	smpsAlterNote       $0C
000E01BD E701                       	dc.b	smpsNoAttack, $01
000E01BF E106                       	smpsAlterNote       $06
000E01C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E01C5 E109                       	smpsAlterNote       $09
000E01C7 E701                       	dc.b	smpsNoAttack, $01
000E01C9 E10F                       	smpsAlterNote       $0F
000E01CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E01CF E109                       	smpsAlterNote       $09
000E01D1 E701                       	dc.b	smpsNoAttack, $01
000E01D3 E106                       	smpsAlterNote       $06
000E01D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E01D9 E10C                       	smpsAlterNote       $0C
000E01DB E701                       	dc.b	smpsNoAttack, $01
000E01DD E110                       	smpsAlterNote       $10
000E01DF E701                       	dc.b	smpsNoAttack, $01
000E01E1 E10F                       	smpsAlterNote       $0F
000E01E3 E701                       	dc.b	smpsNoAttack, $01
000E01E5 E109                       	smpsAlterNote       $09
000E01E7 E701                       	dc.b	smpsNoAttack, $01
000E01E9 E105                       	smpsAlterNote       $05
000E01EB E701                       	dc.b	smpsNoAttack, $01
000E01ED E109                       	smpsAlterNote       $09
000E01EF E701                       	dc.b	smpsNoAttack, $01
000E01F1 E10F                       	smpsAlterNote       $0F
000E01F3 E701                       	dc.b	smpsNoAttack, $01
000E01F5 E110                       	smpsAlterNote       $10
000E01F7 E701                       	dc.b	smpsNoAttack, $01
000E01F9 E10C                       	smpsAlterNote       $0C
000E01FB E701                       	dc.b	smpsNoAttack, $01
000E01FD E106                       	smpsAlterNote       $06
000E01FF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0203 E109                       	smpsAlterNote       $09
000E0205 E701                       	dc.b	smpsNoAttack, $01
000E0207 E10F                       	smpsAlterNote       $0F
000E0209 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E020D E109                       	smpsAlterNote       $09
000E020F E701                       	dc.b	smpsNoAttack, $01
000E0211 E106                       	smpsAlterNote       $06
000E0213 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0217 E10C                       	smpsAlterNote       $0C
000E0219 E701                       	dc.b	smpsNoAttack, $01
000E021B E110                       	smpsAlterNote       $10
000E021D E701                       	dc.b	smpsNoAttack, $01
000E021F E10F                       	smpsAlterNote       $0F
000E0221 E701                       	dc.b	smpsNoAttack, $01
000E0223 E109                       	smpsAlterNote       $09
000E0225 E701                       	dc.b	smpsNoAttack, $01
000E0227 E105                       	smpsAlterNote       $05
000E0229 E701                       	dc.b	smpsNoAttack, $01
000E022B E109                       	smpsAlterNote       $09
000E022D E701                       	dc.b	smpsNoAttack, $01
000E022F E10C                       	smpsAlterNote       $0C
000E0231 E701                       	dc.b	smpsNoAttack, $01
000E0233 E110                       	smpsAlterNote       $10
000E0235 E701                       	dc.b	smpsNoAttack, $01
000E0237 E10C                       	smpsAlterNote       $0C
000E0239 E701                       	dc.b	smpsNoAttack, $01
000E023B E106                       	smpsAlterNote       $06
000E023D E701                       	dc.b	smpsNoAttack, $01
000E023F E105                       	smpsAlterNote       $05
000E0241 E701                       	dc.b	smpsNoAttack, $01
000E0243 E109                       	smpsAlterNote       $09
000E0245 E701                       	dc.b	smpsNoAttack, $01
000E0247 E10F                       	smpsAlterNote       $0F
000E0249 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E024D E10C                       	smpsAlterNote       $0C
000E024F E701                       	dc.b	smpsNoAttack, $01
000E0251 E106                       	smpsAlterNote       $06
000E0253 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0257 E10C                       	smpsAlterNote       $0C
000E0259 E701                       	dc.b	smpsNoAttack, $01
000E025B E10F                       	smpsAlterNote       $0F
000E025D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0261 E109                       	smpsAlterNote       $09
000E0263 E701                       	dc.b	smpsNoAttack, $01
000E0265 E105                       	smpsAlterNote       $05
000E0267 E701                       	dc.b	smpsNoAttack, $01
000E0269 E106                       	smpsAlterNote       $06
000E026B E701                       	dc.b	smpsNoAttack, $01
000E026D E10C                       	smpsAlterNote       $0C
000E026F E701                       	dc.b	smpsNoAttack, $01
000E0271 E110                       	smpsAlterNote       $10
000E0273 E701                       	dc.b	smpsNoAttack, $01
000E0275 E10C                       	smpsAlterNote       $0C
000E0277 E701                       	dc.b	smpsNoAttack, $01
000E0279 E109                       	smpsAlterNote       $09
000E027B E701                       	dc.b	smpsNoAttack, $01
000E027D E105                       	smpsAlterNote       $05
000E027F E701                       	dc.b	smpsNoAttack, $01
000E0281 E109                       	smpsAlterNote       $09
000E0283 E701                       	dc.b	smpsNoAttack, $01
000E0285 E10F                       	smpsAlterNote       $0F
000E0287 E701                       	dc.b	smpsNoAttack, $01
000E0289 E110                       	smpsAlterNote       $10
000E028B E701                       	dc.b	smpsNoAttack, $01
000E028D E10C                       	smpsAlterNote       $0C
000E028F E701                       	dc.b	smpsNoAttack, $01
000E0291 E106                       	smpsAlterNote       $06
000E0293 E701                       	dc.b	smpsNoAttack, $01
000E0295 E10B                       	smpsAlterNote       $0B
000E0297 BF02                       	dc.b	nD5, $02
000E0299 E10C                       	smpsAlterNote       $0C
000E029B C001 8001 C10D             	dc.b	nEb5, $01, nRst, $01, nE5, $0D
000E02A1 E109                       	smpsAlterNote       $09
000E02A3 E701                       	dc.b	smpsNoAttack, $01
000E02A5 E105                       	smpsAlterNote       $05
000E02A7 E701                       	dc.b	smpsNoAttack, $01
000E02A9 E109                       	smpsAlterNote       $09
000E02AB E701                       	dc.b	smpsNoAttack, $01
000E02AD E10F                       	smpsAlterNote       $0F
000E02AF E701                       	dc.b	smpsNoAttack, $01
000E02B1 E110                       	smpsAlterNote       $10
000E02B3 E701                       	dc.b	smpsNoAttack, $01
000E02B5 E10C                       	smpsAlterNote       $0C
000E02B7 E701                       	dc.b	smpsNoAttack, $01
000E02B9 E106                       	smpsAlterNote       $06
000E02BB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E02BF E109                       	smpsAlterNote       $09
000E02C1 E701                       	dc.b	smpsNoAttack, $01
000E02C3 E10F                       	smpsAlterNote       $0F
000E02C5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E02C9 E109                       	smpsAlterNote       $09
000E02CB E701                       	dc.b	smpsNoAttack, $01
000E02CD E106                       	smpsAlterNote       $06
000E02CF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E02D3 E10C                       	smpsAlterNote       $0C
000E02D5 E701                       	dc.b	smpsNoAttack, $01
000E02D7 E110                       	smpsAlterNote       $10
000E02D9 E701                       	dc.b	smpsNoAttack, $01
000E02DB E10F                       	smpsAlterNote       $0F
000E02DD E701                       	dc.b	smpsNoAttack, $01
000E02DF E109                       	smpsAlterNote       $09
000E02E1 E701                       	dc.b	smpsNoAttack, $01
000E02E3 E105                       	smpsAlterNote       $05
000E02E5 E701                       	dc.b	smpsNoAttack, $01
000E02E7 E109                       	smpsAlterNote       $09
000E02E9 E701                       	dc.b	smpsNoAttack, $01
000E02EB E10C                       	smpsAlterNote       $0C
000E02ED E701                       	dc.b	smpsNoAttack, $01
000E02EF E110                       	smpsAlterNote       $10
000E02F1 E701                       	dc.b	smpsNoAttack, $01
000E02F3 E10C                       	smpsAlterNote       $0C
000E02F5 E701                       	dc.b	smpsNoAttack, $01
000E02F7 E106                       	smpsAlterNote       $06
000E02F9 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E02FD E10D                       	smpsAlterNote       $0D
000E02FF C409 8001 C206 8001        	dc.b	nG5, $09, nRst, $01, nF5, $06, nRst, $01
000E0307 E10C                       	smpsAlterNote       $0C
000E0309 C10D                       	dc.b	nE5, $0D
000E030B E106                       	smpsAlterNote       $06
000E030D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0311 E109                       	smpsAlterNote       $09
000E0313 E701                       	dc.b	smpsNoAttack, $01
000E0315 E10F                       	smpsAlterNote       $0F
000E0317 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E031B E109                       	smpsAlterNote       $09
000E031D E701                       	dc.b	smpsNoAttack, $01
000E031F E106                       	smpsAlterNote       $06
000E0321 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0325 E10C                       	smpsAlterNote       $0C
000E0327 E701                       	dc.b	smpsNoAttack, $01
000E0329 E110                       	smpsAlterNote       $10
000E032B E701                       	dc.b	smpsNoAttack, $01
000E032D E10F                       	smpsAlterNote       $0F
000E032F E701                       	dc.b	smpsNoAttack, $01
000E0331 E109                       	smpsAlterNote       $09
000E0333 E701                       	dc.b	smpsNoAttack, $01
000E0335 E105                       	smpsAlterNote       $05
000E0337 E701                       	dc.b	smpsNoAttack, $01
000E0339 E106                       	smpsAlterNote       $06
000E033B 800F                       	dc.b	nRst, $0F
000E033F E6FF                       	smpsAlterVol        $FF
000E0341 E10F                       	smpsAlterNote       $0F
000E0343 BA01                       	dc.b	nA4, $01
000E0345 E110                       	smpsAlterNote       $10
000E0347 BB02                       	dc.b	nBb4, $02
000E0349 E10F                       	smpsAlterNote       $0F
000E034B BA03 8001 BA06             	dc.b	nA4, $03, nRst, $01, nA4, $06
000E0351 E10B                       	smpsAlterNote       $0B
000E0353 BF03 8001                  	dc.b	nD5, $03, nRst, $01
000E0357 E10C                       	smpsAlterNote       $0C
000E0359 C103                       	dc.b	nE5, $03
000E035B E10D                       	smpsAlterNote       $0D
000E035D C203 8001 C403 C606 8001   	dc.b	nF5, $03, nRst, $01, nG5, $03, nA5, $06, nRst, $01
000E0367 E10B                       	smpsAlterNote       $0B
000E0369 BF03 C90E                  	dc.b	nD5, $03, nC6, $0E
000E036D E104                       	smpsAlterNote       $04
000E036F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0373 E10A                       	smpsAlterNote       $0A
000E0375 E701                       	dc.b	smpsNoAttack, $01
000E0377 E10D                       	smpsAlterNote       $0D
000E0379 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E037D E107                       	smpsAlterNote       $07
000E037F E701                       	dc.b	smpsNoAttack, $01
000E0381 E104                       	smpsAlterNote       $04
000E0383 8001                       	dc.b	nRst, $01
000E0385 E110                       	smpsAlterNote       $10
000E0387 C703                       	dc.b	nBb5, $03
000E0389 E10F                       	smpsAlterNote       $0F
000E038B C603 8001                  	dc.b	nA5, $03, nRst, $01
000E038F E10D                       	smpsAlterNote       $0D
000E0391 C403 C60D                  	dc.b	nG5, $03, nA5, $0D
000E0395 E10C                       	smpsAlterNote       $0C
000E0397 E701                       	dc.b	smpsNoAttack, $01
000E0399 E108                       	smpsAlterNote       $08
000E039B E701                       	dc.b	smpsNoAttack, $01
000E039D E109                       	smpsAlterNote       $09
000E039F E701                       	dc.b	smpsNoAttack, $01
000E03A1 E10F                       	smpsAlterNote       $0F
000E03A3 E701                       	dc.b	smpsNoAttack, $01
000E03A5 E113                       	smpsAlterNote       $13
000E03A7 E701                       	dc.b	smpsNoAttack, $01
000E03A9 E10F                       	smpsAlterNote       $0F
000E03AB E701                       	dc.b	smpsNoAttack, $01
000E03AD E10C                       	smpsAlterNote       $0C
000E03AF E701                       	dc.b	smpsNoAttack, $01
000E03B1 E108                       	smpsAlterNote       $08
000E03B3 E701                       	dc.b	smpsNoAttack, $01
000E03B5 E10C                       	smpsAlterNote       $0C
000E03B7 E701                       	dc.b	smpsNoAttack, $01
000E03B9 E112                       	smpsAlterNote       $12
000E03BB E701                       	dc.b	smpsNoAttack, $01
000E03BD E113                       	smpsAlterNote       $13
000E03BF E701                       	dc.b	smpsNoAttack, $01
000E03C1 E10F                       	smpsAlterNote       $0F
000E03C3 E701                       	dc.b	smpsNoAttack, $01
000E03C5 E109                       	smpsAlterNote       $09
000E03C7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E03CB E10C                       	smpsAlterNote       $0C
000E03CD E701                       	dc.b	smpsNoAttack, $01
000E03CF E112                       	smpsAlterNote       $12
000E03D1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E03D5 E10C                       	smpsAlterNote       $0C
000E03D7 E701                       	dc.b	smpsNoAttack, $01
000E03D9 E109                       	smpsAlterNote       $09
000E03DB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E03DF E10F                       	smpsAlterNote       $0F
000E03E1 E701                       	dc.b	smpsNoAttack, $01
000E03E3 E113                       	smpsAlterNote       $13
000E03E5 E701                       	dc.b	smpsNoAttack, $01
000E03E7 E112                       	smpsAlterNote       $12
000E03E9 E701                       	dc.b	smpsNoAttack, $01
000E03EB E10C                       	smpsAlterNote       $0C
000E03ED E701                       	dc.b	smpsNoAttack, $01
000E03EF E108                       	smpsAlterNote       $08
000E03F1 E701                       	dc.b	smpsNoAttack, $01
000E03F3 E10C                       	smpsAlterNote       $0C
000E03F5 E701                       	dc.b	smpsNoAttack, $01
000E03F7 E10F                       	smpsAlterNote       $0F
000E03F9 E701                       	dc.b	smpsNoAttack, $01
000E03FB E113                       	smpsAlterNote       $13
000E03FD E701 800E                  	dc.b	smpsNoAttack, $01, nRst, $0E
000E0401 E10B                       	smpsAlterNote       $0B
000E0403 BF03                       	dc.b	nD5, $03
000E0405 E10C                       	smpsAlterNote       $0C
000E0407 C103 8001                  	dc.b	nE5, $03, nRst, $01
000E040B E10D                       	smpsAlterNote       $0D
000E040D C203 C403 8001 C606 8001   	dc.b	nF5, $03, nG5, $03, nRst, $01, nA5, $06, nRst, $01
000E0417 E10B                       	smpsAlterNote       $0B
000E0419 BF02 8001 C90D 8001 CB02+  	dc.b	nD5, $02, nRst, $01, nC6, $0D, nRst, $01, nD6, $02, nRst, $01
000E0425 E110                       	smpsAlterNote       $10
000E0427 C704 8001                  	dc.b	nBb5, $04, nRst, $01
000E042B E10F                       	smpsAlterNote       $0F
000E042D C604                       	dc.b	nA5, $04
000E042F E10D                       	smpsAlterNote       $0D
000E0431 C404 8001 C60D             	dc.b	nG5, $04, nRst, $01, nA5, $0D
000E0437 E109                       	smpsAlterNote       $09
000E0439 E701                       	dc.b	smpsNoAttack, $01
000E043B E108                       	smpsAlterNote       $08
000E043D E701                       	dc.b	smpsNoAttack, $01
000E043F E10C                       	smpsAlterNote       $0C
000E0441 E701                       	dc.b	smpsNoAttack, $01
000E0443 E112                       	smpsAlterNote       $12
000E0445 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0449 E10F                       	smpsAlterNote       $0F
000E044B E701                       	dc.b	smpsNoAttack, $01
000E044D E109                       	smpsAlterNote       $09
000E044F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0453 E10F                       	smpsAlterNote       $0F
000E0455 E701                       	dc.b	smpsNoAttack, $01
000E0457 E112                       	smpsAlterNote       $12
000E0459 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E045D E10C                       	smpsAlterNote       $0C
000E045F E701                       	dc.b	smpsNoAttack, $01
000E0461 E108                       	smpsAlterNote       $08
000E0463 E701                       	dc.b	smpsNoAttack, $01
000E0465 E109                       	smpsAlterNote       $09
000E0467 E701                       	dc.b	smpsNoAttack, $01
000E0469 E10F                       	smpsAlterNote       $0F
000E046B E701                       	dc.b	smpsNoAttack, $01
000E046D E113                       	smpsAlterNote       $13
000E046F E701                       	dc.b	smpsNoAttack, $01
000E0471 E10F                       	smpsAlterNote       $0F
000E0473 E701                       	dc.b	smpsNoAttack, $01
000E0475 E10C                       	smpsAlterNote       $0C
000E0477 E701                       	dc.b	smpsNoAttack, $01
000E0479 E108                       	smpsAlterNote       $08
000E047B E701                       	dc.b	smpsNoAttack, $01
000E047D E10C                       	smpsAlterNote       $0C
000E047F E701                       	dc.b	smpsNoAttack, $01
000E0481 E112                       	smpsAlterNote       $12
000E0483 E701                       	dc.b	smpsNoAttack, $01
000E0485 E113                       	smpsAlterNote       $13
000E0487 E701                       	dc.b	smpsNoAttack, $01
000E0489 E10F                       	smpsAlterNote       $0F
000E048B E701                       	dc.b	smpsNoAttack, $01
000E048D E109                       	smpsAlterNote       $09
000E048F E701                       	dc.b	smpsNoAttack, $01
000E0491 E10D                       	smpsAlterNote       $0D
000E0493 C402                       	dc.b	nG5, $02
000E0495 E10F                       	smpsAlterNote       $0F
000E0497 C501 8001 C60D 8001 C604   	dc.b	nAb5, $01, nRst, $01, nA5, $0D, nRst, $01, nA5, $04
000E04A1 E10D                       	smpsAlterNote       $0D
000E04A3 C404 8001 C604             	dc.b	nG5, $04, nRst, $01, nA5, $04
000E04A9 E10B                       	smpsAlterNote       $0B
000E04AB BF0D                       	dc.b	nD5, $0D
000E04AD E108                       	smpsAlterNote       $08
000E04AF E701                       	dc.b	smpsNoAttack, $01
000E04B1 E104                       	smpsAlterNote       $04
000E04B3 E701                       	dc.b	smpsNoAttack, $01
000E04B5 E105                       	smpsAlterNote       $05
000E04B7 E701                       	dc.b	smpsNoAttack, $01
000E04B9 E10B                       	smpsAlterNote       $0B
000E04BB E701                       	dc.b	smpsNoAttack, $01
000E04BD E10F                       	smpsAlterNote       $0F
000E04BF E701                       	dc.b	smpsNoAttack, $01
000E04C1 E10B                       	smpsAlterNote       $0B
000E04C3 E701                       	dc.b	smpsNoAttack, $01
000E04C5 E108                       	smpsAlterNote       $08
000E04C7 E701                       	dc.b	smpsNoAttack, $01
000E04C9 E104                       	smpsAlterNote       $04
000E04CB E701                       	dc.b	smpsNoAttack, $01
000E04CD E108                       	smpsAlterNote       $08
000E04CF E701                       	dc.b	smpsNoAttack, $01
000E04D1 E10E                       	smpsAlterNote       $0E
000E04D3 E701                       	dc.b	smpsNoAttack, $01
000E04D5 E10F                       	smpsAlterNote       $0F
000E04D7 E701                       	dc.b	smpsNoAttack, $01
000E04D9 E10C                       	smpsAlterNote       $0C
000E04DB C101                       	dc.b	nE5, $01
000E04DD E10D                       	smpsAlterNote       $0D
000E04DF C201 C401 8001 C606        	dc.b	nF5, $01, nG5, $01, nRst, $01, nA5, $06
000E04E7 E10F                       	smpsAlterNote       $0F
000E04E9 C607                       	dc.b	nA5, $07
000E04EB E10C                       	smpsAlterNote       $0C
000E04ED CD07                       	dc.b	nE6, $07
000E04EF E10D                       	smpsAlterNote       $0D
000E04F1 CE06 8001                  	dc.b	nF6, $06, nRst, $01
000E04F5 E10C                       	smpsAlterNote       $0C
000E04F7 CD03                       	dc.b	nE6, $03
000E04F9 E10A                       	smpsAlterNote       $0A
000E04FB C903 8001                  	dc.b	nC6, $03, nRst, $01
000E04FF E10D                       	smpsAlterNote       $0D
000E0501 C403 C70D E701             	dc.b	nG5, $03, nBb5, $0D, smpsNoAttack, $01
000E0507 E10A                       	smpsAlterNote       $0A
000E0509 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E050D E110                       	smpsAlterNote       $10
000E050F E701                       	dc.b	smpsNoAttack, $01
000E0511 E114                       	smpsAlterNote       $14
000E0513 E701                       	dc.b	smpsNoAttack, $01
000E0515 E113                       	smpsAlterNote       $13
000E0517 E701                       	dc.b	smpsNoAttack, $01
000E0519 E10D                       	smpsAlterNote       $0D
000E051B E701                       	dc.b	smpsNoAttack, $01
000E051D E109                       	smpsAlterNote       $09
000E051F E701                       	dc.b	smpsNoAttack, $01
000E0521 E10D                       	smpsAlterNote       $0D
000E0523 E701                       	dc.b	smpsNoAttack, $01
000E0525 E110                       	smpsAlterNote       $10
000E0527 E701                       	dc.b	smpsNoAttack, $01
000E0529 E114                       	smpsAlterNote       $14
000E052B E701                       	dc.b	smpsNoAttack, $01
000E052D E10F                       	smpsAlterNote       $0F
000E052F C607                       	dc.b	nA5, $07
000E0531 E10D                       	smpsAlterNote       $0D
000E0533 C40D                       	dc.b	nG5, $0D
000E0535 E10A                       	smpsAlterNote       $0A
000E0537 E701                       	dc.b	smpsNoAttack, $01
000E0539 E106                       	smpsAlterNote       $06
000E053B E701                       	dc.b	smpsNoAttack, $01
000E053D E10A                       	smpsAlterNote       $0A
000E053F E701                       	dc.b	smpsNoAttack, $01
000E0541 E10D                       	smpsAlterNote       $0D
000E0543 E701                       	dc.b	smpsNoAttack, $01
000E0545 E111                       	smpsAlterNote       $11
000E0547 E701                       	dc.b	smpsNoAttack, $01
000E0549 E10D                       	smpsAlterNote       $0D
000E054B E701                       	dc.b	smpsNoAttack, $01
000E054D E107                       	smpsAlterNote       $07
000E054F E701                       	dc.b	smpsNoAttack, $01
000E0551 E106                       	smpsAlterNote       $06
000E0553 E701                       	dc.b	smpsNoAttack, $01
000E0555 E10A                       	smpsAlterNote       $0A
000E0557 E701                       	dc.b	smpsNoAttack, $01
000E0559 E110                       	smpsAlterNote       $10
000E055B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E055F E10D                       	smpsAlterNote       $0D
000E0561 E701                       	dc.b	smpsNoAttack, $01
000E0563 E107                       	smpsAlterNote       $07
000E0565 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0569 E10F                       	smpsAlterNote       $0F
000E056B C60E                       	dc.b	nA5, $0E
000E056D E109                       	smpsAlterNote       $09
000E056F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0573 E10F                       	smpsAlterNote       $0F
000E0575 E701                       	dc.b	smpsNoAttack, $01
000E0577 E112                       	smpsAlterNote       $12
000E0579 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E057D E10C                       	smpsAlterNote       $0C
000E057F E701                       	dc.b	smpsNoAttack, $01
000E0581 E108                       	smpsAlterNote       $08
000E0583 E701                       	dc.b	smpsNoAttack, $01
000E0585 E109                       	smpsAlterNote       $09
000E0587 E701                       	dc.b	smpsNoAttack, $01
000E0589 E10F                       	smpsAlterNote       $0F
000E058B E701                       	dc.b	smpsNoAttack, $01
000E058D E113                       	smpsAlterNote       $13
000E058F E701                       	dc.b	smpsNoAttack, $01
000E0591 E10F                       	smpsAlterNote       $0F
000E0593 E701                       	dc.b	smpsNoAttack, $01
000E0595 E10C                       	smpsAlterNote       $0C
000E0597 E701                       	dc.b	smpsNoAttack, $01
000E0599 E108                       	smpsAlterNote       $08
000E059B E701                       	dc.b	smpsNoAttack, $01
000E059D E109                       	smpsAlterNote       $09
000E059F 8001                       	dc.b	nRst, $01
000E05A1 E110                       	smpsAlterNote       $10
000E05A3 C70D                       	dc.b	nBb5, $0D
000E05A5 E10D                       	smpsAlterNote       $0D
000E05A7 E701                       	dc.b	smpsNoAttack, $01
000E05A9 E109                       	smpsAlterNote       $09
000E05AB E701                       	dc.b	smpsNoAttack, $01
000E05AD E10D                       	smpsAlterNote       $0D
000E05AF E701                       	dc.b	smpsNoAttack, $01
000E05B1 E113                       	smpsAlterNote       $13
000E05B3 E701                       	dc.b	smpsNoAttack, $01
000E05B5 E114                       	smpsAlterNote       $14
000E05B7 E701                       	dc.b	smpsNoAttack, $01
000E05B9 E110                       	smpsAlterNote       $10
000E05BB E701                       	dc.b	smpsNoAttack, $01
000E05BD E10A                       	smpsAlterNote       $0A
000E05BF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E05C3 E10D                       	smpsAlterNote       $0D
000E05C5 E701                       	dc.b	smpsNoAttack, $01
000E05C7 E113                       	smpsAlterNote       $13
000E05C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E05CD E10D                       	smpsAlterNote       $0D
000E05CF E701                       	dc.b	smpsNoAttack, $01
000E05D1 E10A                       	smpsAlterNote       $0A
000E05D3 E701 E701 C90C 8001 8001   	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nC6, $0C, nRst, $01, nRst, $01
000E05DD E10B                       	smpsAlterNote       $0B
000E05DF 8001                       	dc.b	nRst, $01
000E05E1 E10C                       	smpsAlterNote       $0C
000E05E3 CD0C 8001                  	dc.b	nE6, $0C, nRst, $01
000E05E7 E10B                       	smpsAlterNote       $0B
000E05E9 CB0D                       	dc.b	nD6, $0D
000E05EB E105                       	smpsAlterNote       $05
000E05ED E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E05F1 E108                       	smpsAlterNote       $08
000E05F3 E701                       	dc.b	smpsNoAttack, $01
000E05F5 E10E                       	smpsAlterNote       $0E
000E05F7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E05FB E108                       	smpsAlterNote       $08
000E05FD E701                       	dc.b	smpsNoAttack, $01
000E05FF E105                       	smpsAlterNote       $05
000E0601 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0605 E10B                       	smpsAlterNote       $0B
000E0607 E701                       	dc.b	smpsNoAttack, $01
000E0609 E10F                       	smpsAlterNote       $0F
000E060B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E060F E10C                       	smpsAlterNote       $0C
000E0611 CC0D                       	dc.b	nEb6, $0D
000E0613 E106                       	smpsAlterNote       $06
000E0615 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0619 E109                       	smpsAlterNote       $09
000E061B E701                       	dc.b	smpsNoAttack, $01
000E061D E10C                       	smpsAlterNote       $0C
000E061F 8001                       	dc.b	nRst, $01
000E0621 E10A                       	smpsAlterNote       $0A
000E0623 C906 8001 C901 8001 C902+  	dc.b	nC6, $06, nRst, $01, nC6, $01, nRst, $01, nC6, $02, nC6, $02
000E062F CB0E                       	dc.b	nD6, $0E
000E0631 E105                       	smpsAlterNote       $05
000E0633 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0637 E10B                       	smpsAlterNote       $0B
000E0639 E701                       	dc.b	smpsNoAttack, $01
000E063B E10E                       	smpsAlterNote       $0E
000E063D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0641 E108                       	smpsAlterNote       $08
000E0643 E701                       	dc.b	smpsNoAttack, $01
000E0645 E104                       	smpsAlterNote       $04
000E0647 E701                       	dc.b	smpsNoAttack, $01
000E0649 E105                       	smpsAlterNote       $05
000E064B E701                       	dc.b	smpsNoAttack, $01
000E064D E10B                       	smpsAlterNote       $0B
000E064F E701                       	dc.b	smpsNoAttack, $01
000E0651 E10F                       	smpsAlterNote       $0F
000E0653 E701                       	dc.b	smpsNoAttack, $01
000E0655 E10D                       	smpsAlterNote       $0D
000E0657 CE0A 8001                  	dc.b	nF6, $0A, nRst, $01
000E065B E10C                       	smpsAlterNote       $0C
000E065D CC06 8001                  	dc.b	nEb6, $06, nRst, $01
000E0661 E10A                       	smpsAlterNote       $0A
000E0663 C906 C902 8001 C901 8001+  	dc.b	nC6, $06, nC6, $02, nRst, $01, nC6, $01, nRst, $01, nC6, $02
000E066F CB0D                       	dc.b	nD6, $0D
000E0671 E108                       	smpsAlterNote       $08
000E0673 E701                       	dc.b	smpsNoAttack, $01
000E0675 E104                       	smpsAlterNote       $04
000E0677 E701                       	dc.b	smpsNoAttack, $01
000E0679 E105                       	smpsAlterNote       $05
000E067B E701                       	dc.b	smpsNoAttack, $01
000E067D E10B                       	smpsAlterNote       $0B
000E067F E701                       	dc.b	smpsNoAttack, $01
000E0681 E10F                       	smpsAlterNote       $0F
000E0683 E701                       	dc.b	smpsNoAttack, $01
000E0685 E10B                       	smpsAlterNote       $0B
000E0687 E701                       	dc.b	smpsNoAttack, $01
000E0689 E108                       	smpsAlterNote       $08
000E068B E701                       	dc.b	smpsNoAttack, $01
000E068D E104                       	smpsAlterNote       $04
000E068F E701                       	dc.b	smpsNoAttack, $01
000E0691 E108                       	smpsAlterNote       $08
000E0693 E701                       	dc.b	smpsNoAttack, $01
000E0695 E10E                       	smpsAlterNote       $0E
000E0697 E701                       	dc.b	smpsNoAttack, $01
000E0699 E10F                       	smpsAlterNote       $0F
000E069B E701                       	dc.b	smpsNoAttack, $01
000E069D E10C                       	smpsAlterNote       $0C
000E069F CC0D                       	dc.b	nEb6, $0D
000E06A1 E109                       	smpsAlterNote       $09
000E06A3 E701                       	dc.b	smpsNoAttack, $01
000E06A5 E105                       	smpsAlterNote       $05
000E06A7 E701                       	dc.b	smpsNoAttack, $01
000E06A9 E106                       	smpsAlterNote       $06
000E06AB E701                       	dc.b	smpsNoAttack, $01
000E06AD E10C                       	smpsAlterNote       $0C
000E06AF E701                       	dc.b	smpsNoAttack, $01
000E06B1 E10A                       	smpsAlterNote       $0A
000E06B3 C907 C902 C902 8001 C901+  	dc.b	nC6, $07, nC6, $02, nC6, $02, nRst, $01, nC6, $01, nRst, $01
000E06BF CB0D                       	dc.b	nD6, $0D
000E06C1 E108                       	smpsAlterNote       $08
000E06C3 E701                       	dc.b	smpsNoAttack, $01
000E06C5 E104                       	smpsAlterNote       $04
000E06C7 E701                       	dc.b	smpsNoAttack, $01
000E06C9 E108                       	smpsAlterNote       $08
000E06CB E701                       	dc.b	smpsNoAttack, $01
000E06CD E10B                       	smpsAlterNote       $0B
000E06CF E701                       	dc.b	smpsNoAttack, $01
000E06D1 E10F                       	smpsAlterNote       $0F
000E06D3 E701                       	dc.b	smpsNoAttack, $01
000E06D5 E10B                       	smpsAlterNote       $0B
000E06D7 E701                       	dc.b	smpsNoAttack, $01
000E06D9 E105                       	smpsAlterNote       $05
000E06DB E701                       	dc.b	smpsNoAttack, $01
000E06DD E104                       	smpsAlterNote       $04
000E06DF E701                       	dc.b	smpsNoAttack, $01
000E06E1 E108                       	smpsAlterNote       $08
000E06E3 E701                       	dc.b	smpsNoAttack, $01
000E06E5 E10E                       	smpsAlterNote       $0E
000E06E7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E06EB E10B                       	smpsAlterNote       $0B
000E06ED E701                       	dc.b	smpsNoAttack, $01
000E06EF E105                       	smpsAlterNote       $05
000E06F1 E701 E701 8019             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $19
000E06F9 03                         	dc.b	$03
000E06FA E601                       	smpsAlterVol        $01
000E06FC F6F1 D1                    	smpsJump            music84_Jump01
000E06FF                            
000E06FF                            ; FM5 Data
000E06FF                            music84_FM5:
000E0701 E080                       	smpsPan             panLeft, $00
000E0703 8003                       	dc.b	nRst, $03
000E0705 E10D                       	smpsAlterNote       $0D
000E0707 C203 8008                  	dc.b	nF5, $03, nRst, $08
000E070B E10C                       	smpsAlterNote       $0C
000E070D C103 800A                  	dc.b	nE5, $03, nRst, $0A
000E0711 E10F                       	smpsAlterNote       $0F
000E0713 BA03 8006                  	dc.b	nA4, $03, nRst, $06
000E0719 E6FE                       	smpsAlterVol        $FE
000E071B C703 C603 8001             	dc.b	nBb5, $03, nA5, $03, nRst, $01
000E0721 E10D                       	smpsAlterNote       $0D
000E0723 C403 C203 8001             	dc.b	nG5, $03, nF5, $03, nRst, $01
000E0729 E10C                       	smpsAlterNote       $0C
000E072B C102 8001                  	dc.b	nE5, $02, nRst, $01
000E072F E10A                       	smpsAlterNote       $0A
000E0731 BD01 8001                  	dc.b	nC5, $01, nRst, $01
000E0737 03                         	dc.b	$03
000E0738                            
000E0738                            music84_Jump00:
000E0738 8004                       	dc.b	nRst, $04
000E073A E602                       	smpsAlterVol        $02
000E073C E10D                       	smpsAlterNote       $0D
000E073E B60D                       	dc.b	nF4, $0D
000E0740 E107                       	smpsAlterNote       $07
000E0742 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0746 E10A                       	smpsAlterNote       $0A
000E0748 E701                       	dc.b	smpsNoAttack, $01
000E074A E110                       	smpsAlterNote       $10
000E074C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0750 E10A                       	smpsAlterNote       $0A
000E0752 E701                       	dc.b	smpsNoAttack, $01
000E0754 E107                       	smpsAlterNote       $07
000E0756 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E075A E10D                       	smpsAlterNote       $0D
000E075C E701                       	dc.b	smpsNoAttack, $01
000E075E E111                       	smpsAlterNote       $11
000E0760 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0764 E10D                       	smpsAlterNote       $0D
000E0766 B80D                       	dc.b	nG4, $0D
000E0768 E107                       	smpsAlterNote       $07
000E076A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E076E E10A                       	smpsAlterNote       $0A
000E0770 E701                       	dc.b	smpsNoAttack, $01
000E0772 E110                       	smpsAlterNote       $10
000E0774 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0778 E10A                       	smpsAlterNote       $0A
000E077A E701                       	dc.b	smpsNoAttack, $01
000E077C E107                       	smpsAlterNote       $07
000E077E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0782 E10D                       	smpsAlterNote       $0D
000E0784 E701                       	dc.b	smpsNoAttack, $01
000E0786 E111                       	smpsAlterNote       $11
000E0788 E701                       	dc.b	smpsNoAttack, $01
000E078A E110                       	smpsAlterNote       $10
000E078C E701                       	dc.b	smpsNoAttack, $01
000E078E E10A                       	smpsAlterNote       $0A
000E0790 E701                       	dc.b	smpsNoAttack, $01
000E0792 E106                       	smpsAlterNote       $06
000E0794 E701                       	dc.b	smpsNoAttack, $01
000E0796 E10A                       	smpsAlterNote       $0A
000E0798 E701                       	dc.b	smpsNoAttack, $01
000E079A E10D                       	smpsAlterNote       $0D
000E079C E701                       	dc.b	smpsNoAttack, $01
000E079E E111                       	smpsAlterNote       $11
000E07A0 E701                       	dc.b	smpsNoAttack, $01
000E07A2 E10D                       	smpsAlterNote       $0D
000E07A4 E701                       	dc.b	smpsNoAttack, $01
000E07A6 E10F                       	smpsAlterNote       $0F
000E07A8 BA0E                       	dc.b	nA4, $0E
000E07AA E109                       	smpsAlterNote       $09
000E07AC E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07B0 E10F                       	smpsAlterNote       $0F
000E07B2 E701                       	dc.b	smpsNoAttack, $01
000E07B4 E112                       	smpsAlterNote       $12
000E07B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07BA E10C                       	smpsAlterNote       $0C
000E07BC E701                       	dc.b	smpsNoAttack, $01
000E07BE E108                       	smpsAlterNote       $08
000E07C0 E701                       	dc.b	smpsNoAttack, $01
000E07C2 E109                       	smpsAlterNote       $09
000E07C4 E701                       	dc.b	smpsNoAttack, $01
000E07C6 E10F                       	smpsAlterNote       $0F
000E07C8 E701                       	dc.b	smpsNoAttack, $01
000E07CA E113                       	smpsAlterNote       $13
000E07CC E701                       	dc.b	smpsNoAttack, $01
000E07CE E10F                       	smpsAlterNote       $0F
000E07D0 E701                       	dc.b	smpsNoAttack, $01
000E07D2 E109                       	smpsAlterNote       $09
000E07D4 E701                       	dc.b	smpsNoAttack, $01
000E07D6 E108                       	smpsAlterNote       $08
000E07D8 E701                       	dc.b	smpsNoAttack, $01
000E07DA E10C                       	smpsAlterNote       $0C
000E07DC E701                       	dc.b	smpsNoAttack, $01
000E07DE E112                       	smpsAlterNote       $12
000E07E0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07E4 E10F                       	smpsAlterNote       $0F
000E07E6 E701                       	dc.b	smpsNoAttack, $01
000E07E8 E109                       	smpsAlterNote       $09
000E07EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07EE E10F                       	smpsAlterNote       $0F
000E07F0 E701                       	dc.b	smpsNoAttack, $01
000E07F2 E112                       	smpsAlterNote       $12
000E07F4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E07F8 E10C                       	smpsAlterNote       $0C
000E07FA E701                       	dc.b	smpsNoAttack, $01
000E07FC E108                       	smpsAlterNote       $08
000E07FE E701                       	dc.b	smpsNoAttack, $01
000E0800 E109                       	smpsAlterNote       $09
000E0802 E701                       	dc.b	smpsNoAttack, $01
000E0804 E10F                       	smpsAlterNote       $0F
000E0806 E701                       	dc.b	smpsNoAttack, $01
000E0808 E113                       	smpsAlterNote       $13
000E080A E701                       	dc.b	smpsNoAttack, $01
000E080C E10F                       	smpsAlterNote       $0F
000E080E E701                       	dc.b	smpsNoAttack, $01
000E0810 E10C                       	smpsAlterNote       $0C
000E0812 E701                       	dc.b	smpsNoAttack, $01
000E0814 E108                       	smpsAlterNote       $08
000E0816 E701                       	dc.b	smpsNoAttack, $01
000E0818 E109                       	smpsAlterNote       $09
000E081A 8001                       	dc.b	nRst, $01
000E081C E10C                       	smpsAlterNote       $0C
000E081E B50A                       	dc.b	nE4, $0A
000E0820 E10D                       	smpsAlterNote       $0D
000E0822 B60D                       	dc.b	nF4, $0D
000E0824 E10A                       	smpsAlterNote       $0A
000E0826 E701                       	dc.b	smpsNoAttack, $01
000E0828 E106                       	smpsAlterNote       $06
000E082A E701                       	dc.b	smpsNoAttack, $01
000E082C E107                       	smpsAlterNote       $07
000E082E E701                       	dc.b	smpsNoAttack, $01
000E0830 E10D                       	smpsAlterNote       $0D
000E0832 E701                       	dc.b	smpsNoAttack, $01
000E0834 E111                       	smpsAlterNote       $11
000E0836 E701                       	dc.b	smpsNoAttack, $01
000E0838 E10D                       	smpsAlterNote       $0D
000E083A E701                       	dc.b	smpsNoAttack, $01
000E083C E10A                       	smpsAlterNote       $0A
000E083E E701                       	dc.b	smpsNoAttack, $01
000E0840 E106                       	smpsAlterNote       $06
000E0842 E701                       	dc.b	smpsNoAttack, $01
000E0844 E10A                       	smpsAlterNote       $0A
000E0846 E701                       	dc.b	smpsNoAttack, $01
000E0848 E110                       	smpsAlterNote       $10
000E084A E701                       	dc.b	smpsNoAttack, $01
000E084C E111                       	smpsAlterNote       $11
000E084E E701                       	dc.b	smpsNoAttack, $01
000E0850 E10D                       	smpsAlterNote       $0D
000E0852 B80D                       	dc.b	nG4, $0D
000E0854 E10A                       	smpsAlterNote       $0A
000E0856 E701                       	dc.b	smpsNoAttack, $01
000E0858 E106                       	smpsAlterNote       $06
000E085A E701                       	dc.b	smpsNoAttack, $01
000E085C E107                       	smpsAlterNote       $07
000E085E E701                       	dc.b	smpsNoAttack, $01
000E0860 E10D                       	smpsAlterNote       $0D
000E0862 E701                       	dc.b	smpsNoAttack, $01
000E0864 E111                       	smpsAlterNote       $11
000E0866 E701                       	dc.b	smpsNoAttack, $01
000E0868 E10D                       	smpsAlterNote       $0D
000E086A E701                       	dc.b	smpsNoAttack, $01
000E086C E10A                       	smpsAlterNote       $0A
000E086E E701                       	dc.b	smpsNoAttack, $01
000E0870 E106                       	smpsAlterNote       $06
000E0872 E701                       	dc.b	smpsNoAttack, $01
000E0874 E10A                       	smpsAlterNote       $0A
000E0876 E701                       	dc.b	smpsNoAttack, $01
000E0878 E110                       	smpsAlterNote       $10
000E087A E701                       	dc.b	smpsNoAttack, $01
000E087C E111                       	smpsAlterNote       $11
000E087E E701                       	dc.b	smpsNoAttack, $01
000E0880 E10D                       	smpsAlterNote       $0D
000E0882 E701                       	dc.b	smpsNoAttack, $01
000E0884 E107                       	smpsAlterNote       $07
000E0886 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E088A E10A                       	smpsAlterNote       $0A
000E088C E701                       	dc.b	smpsNoAttack, $01
000E088E E110                       	smpsAlterNote       $10
000E0890 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0894 E10D                       	smpsAlterNote       $0D
000E0896 8001                       	dc.b	nRst, $01
000E0898 E10F                       	smpsAlterNote       $0F
000E089A BA0D                       	dc.b	nA4, $0D
000E089C E10C                       	smpsAlterNote       $0C
000E089E E701                       	dc.b	smpsNoAttack, $01
000E08A0 E108                       	smpsAlterNote       $08
000E08A2 E701                       	dc.b	smpsNoAttack, $01
000E08A4 E10C                       	smpsAlterNote       $0C
000E08A6 E701                       	dc.b	smpsNoAttack, $01
000E08A8 E112                       	smpsAlterNote       $12
000E08AA E701                       	dc.b	smpsNoAttack, $01
000E08AC E113                       	smpsAlterNote       $13
000E08AE E701                       	dc.b	smpsNoAttack, $01
000E08B0 E10F                       	smpsAlterNote       $0F
000E08B2 E701                       	dc.b	smpsNoAttack, $01
000E08B4 E109                       	smpsAlterNote       $09
000E08B6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E08BA E10C                       	smpsAlterNote       $0C
000E08BC E701                       	dc.b	smpsNoAttack, $01
000E08BE E112                       	smpsAlterNote       $12
000E08C0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E08C4 E10C                       	smpsAlterNote       $0C
000E08C6 E701                       	dc.b	smpsNoAttack, $01
000E08C8 E109                       	smpsAlterNote       $09
000E08CA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E08CE E10F                       	smpsAlterNote       $0F
000E08D0 E701                       	dc.b	smpsNoAttack, $01
000E08D2 E113                       	smpsAlterNote       $13
000E08D4 E701                       	dc.b	smpsNoAttack, $01
000E08D6 E112                       	smpsAlterNote       $12
000E08D8 E701                       	dc.b	smpsNoAttack, $01
000E08DA E10C                       	smpsAlterNote       $0C
000E08DC E701                       	dc.b	smpsNoAttack, $01
000E08DE E108                       	smpsAlterNote       $08
000E08E0 E701                       	dc.b	smpsNoAttack, $01
000E08E2 E10C                       	smpsAlterNote       $0C
000E08E4 E701                       	dc.b	smpsNoAttack, $01
000E08E6 E10F                       	smpsAlterNote       $0F
000E08E8 E701                       	dc.b	smpsNoAttack, $01
000E08EA E113                       	smpsAlterNote       $13
000E08EC E701                       	dc.b	smpsNoAttack, $01
000E08EE E10F                       	smpsAlterNote       $0F
000E08F0 E701                       	dc.b	smpsNoAttack, $01
000E08F2 E109                       	smpsAlterNote       $09
000E08F4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E08F8 E10D                       	smpsAlterNote       $0D
000E08FA B609 8001                  	dc.b	nF4, $09, nRst, $01
000E08FE E10C                       	smpsAlterNote       $0C
000E0900 B506 8001                  	dc.b	nE4, $06, nRst, $01
000E0904 E10B                       	smpsAlterNote       $0B
000E0906 B30D                       	dc.b	nD4, $0D
000E0908 E10C                       	smpsAlterNote       $0C
000E090A B503 8001                  	dc.b	nE4, $03, nRst, $01
000E090E E10D                       	smpsAlterNote       $0D
000E0910 B603 B803 8001 BA0D        	dc.b	nF4, $03, nG4, $03, nRst, $01, nA4, $0D
000E0918 E109                       	smpsAlterNote       $09
000E091A E701                       	dc.b	smpsNoAttack, $01
000E091C E108                       	smpsAlterNote       $08
000E091E E701                       	dc.b	smpsNoAttack, $01
000E0920 E10C                       	smpsAlterNote       $0C
000E0922 E701                       	dc.b	smpsNoAttack, $01
000E0924 E112                       	smpsAlterNote       $12
000E0926 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E092A E10F                       	smpsAlterNote       $0F
000E092C E701                       	dc.b	smpsNoAttack, $01
000E092E E109                       	smpsAlterNote       $09
000E0930 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0934 E10F                       	smpsAlterNote       $0F
000E0936 E701                       	dc.b	smpsNoAttack, $01
000E0938 E112                       	smpsAlterNote       $12
000E093A E701                       	dc.b	smpsNoAttack, $01
000E093C E113                       	smpsAlterNote       $13
000E093E 8001                       	dc.b	nRst, $01
000E0940 E10D                       	smpsAlterNote       $0D
000E0942 C20D                       	dc.b	nF5, $0D
000E0944 E107                       	smpsAlterNote       $07
000E0946 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E094A E10A                       	smpsAlterNote       $0A
000E094C E701                       	dc.b	smpsNoAttack, $01
000E094E E110                       	smpsAlterNote       $10
000E0950 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0954 E10A                       	smpsAlterNote       $0A
000E0956 E701                       	dc.b	smpsNoAttack, $01
000E0958 E107                       	smpsAlterNote       $07
000E095A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E095E E10D                       	smpsAlterNote       $0D
000E0960 E701                       	dc.b	smpsNoAttack, $01
000E0962 E111                       	smpsAlterNote       $11
000E0964 E701                       	dc.b	smpsNoAttack, $01
000E0966 E110                       	smpsAlterNote       $10
000E0968 E701                       	dc.b	smpsNoAttack, $01
000E096A E10A                       	smpsAlterNote       $0A
000E096C E701                       	dc.b	smpsNoAttack, $01
000E096E E106                       	smpsAlterNote       $06
000E0970 E701                       	dc.b	smpsNoAttack, $01
000E0972 E10A                       	smpsAlterNote       $0A
000E0974 E701                       	dc.b	smpsNoAttack, $01
000E0976 E10D                       	smpsAlterNote       $0D
000E0978 E701                       	dc.b	smpsNoAttack, $01
000E097A E111                       	smpsAlterNote       $11
000E097C E701                       	dc.b	smpsNoAttack, $01
000E097E E10D                       	smpsAlterNote       $0D
000E0980 E701                       	dc.b	smpsNoAttack, $01
000E0982 E107                       	smpsAlterNote       $07
000E0984 E701                       	dc.b	smpsNoAttack, $01
000E0986 E106                       	smpsAlterNote       $06
000E0988 E701                       	dc.b	smpsNoAttack, $01
000E098A E10A                       	smpsAlterNote       $0A
000E098C E701                       	dc.b	smpsNoAttack, $01
000E098E E110                       	smpsAlterNote       $10
000E0990 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0994 E10D                       	smpsAlterNote       $0D
000E0996 E701                       	dc.b	smpsNoAttack, $01
000E0998 E107                       	smpsAlterNote       $07
000E099A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E099E E10D                       	smpsAlterNote       $0D
000E09A0 E701                       	dc.b	smpsNoAttack, $01
000E09A2 E110                       	smpsAlterNote       $10
000E09A4 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E09A8 E10A                       	smpsAlterNote       $0A
000E09AA E701                       	dc.b	smpsNoAttack, $01
000E09AC E106                       	smpsAlterNote       $06
000E09AE E701                       	dc.b	smpsNoAttack, $01
000E09B0 E107                       	smpsAlterNote       $07
000E09B2 E701                       	dc.b	smpsNoAttack, $01
000E09B4 E10D                       	smpsAlterNote       $0D
000E09B6 E701                       	dc.b	smpsNoAttack, $01
000E09B8 E111                       	smpsAlterNote       $11
000E09BA E701                       	dc.b	smpsNoAttack, $01
000E09BC E10D                       	smpsAlterNote       $0D
000E09BE E701                       	dc.b	smpsNoAttack, $01
000E09C0 E10A                       	smpsAlterNote       $0A
000E09C2 E701                       	dc.b	smpsNoAttack, $01
000E09C4 E106                       	smpsAlterNote       $06
000E09C6 E701                       	dc.b	smpsNoAttack, $01
000E09C8 E10A                       	smpsAlterNote       $0A
000E09CA E701                       	dc.b	smpsNoAttack, $01
000E09CC E110                       	smpsAlterNote       $10
000E09CE E701                       	dc.b	smpsNoAttack, $01
000E09D0 E111                       	smpsAlterNote       $11
000E09D2 E701                       	dc.b	smpsNoAttack, $01
000E09D4 E10D                       	smpsAlterNote       $0D
000E09D6 E701                       	dc.b	smpsNoAttack, $01
000E09D8 E107                       	smpsAlterNote       $07
000E09DA E701                       	dc.b	smpsNoAttack, $01
000E09DC E10D                       	smpsAlterNote       $0D
000E09DE C207                       	dc.b	nF5, $07
000E09E0 E10C                       	smpsAlterNote       $0C
000E09E2 C10D                       	dc.b	nE5, $0D
000E09E4 E109                       	smpsAlterNote       $09
000E09E6 E701                       	dc.b	smpsNoAttack, $01
000E09E8 E106                       	smpsAlterNote       $06
000E09EA E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E09EE E10C                       	smpsAlterNote       $0C
000E09F0 E701                       	dc.b	smpsNoAttack, $01
000E09F2 E110                       	smpsAlterNote       $10
000E09F4 E701                       	dc.b	smpsNoAttack, $01
000E09F6 E10F                       	smpsAlterNote       $0F
000E09F8 E701                       	dc.b	smpsNoAttack, $01
000E09FA E109                       	smpsAlterNote       $09
000E09FC E701                       	dc.b	smpsNoAttack, $01
000E09FE E105                       	smpsAlterNote       $05
000E0A00 E701                       	dc.b	smpsNoAttack, $01
000E0A02 E109                       	smpsAlterNote       $09
000E0A04 E701                       	dc.b	smpsNoAttack, $01
000E0A06 E10C                       	smpsAlterNote       $0C
000E0A08 E701                       	dc.b	smpsNoAttack, $01
000E0A0A E110                       	smpsAlterNote       $10
000E0A0C E701                       	dc.b	smpsNoAttack, $01
000E0A0E E10B                       	smpsAlterNote       $0B
000E0A10 BF0D                       	dc.b	nD5, $0D
000E0A12 E108                       	smpsAlterNote       $08
000E0A14 E701                       	dc.b	smpsNoAttack, $01
000E0A16 E105                       	smpsAlterNote       $05
000E0A18 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A1C E10B                       	smpsAlterNote       $0B
000E0A1E E701                       	dc.b	smpsNoAttack, $01
000E0A20 E10F                       	smpsAlterNote       $0F
000E0A22 E701                       	dc.b	smpsNoAttack, $01
000E0A24 E10E                       	smpsAlterNote       $0E
000E0A26 E701                       	dc.b	smpsNoAttack, $01
000E0A28 E108                       	smpsAlterNote       $08
000E0A2A E701                       	dc.b	smpsNoAttack, $01
000E0A2C E104                       	smpsAlterNote       $04
000E0A2E E701                       	dc.b	smpsNoAttack, $01
000E0A30 E108                       	smpsAlterNote       $08
000E0A32 E701                       	dc.b	smpsNoAttack, $01
000E0A34 E10E                       	smpsAlterNote       $0E
000E0A36 E701                       	dc.b	smpsNoAttack, $01
000E0A38 E10F                       	smpsAlterNote       $0F
000E0A3A E701                       	dc.b	smpsNoAttack, $01
000E0A3C E10B                       	smpsAlterNote       $0B
000E0A3E E701                       	dc.b	smpsNoAttack, $01
000E0A40 E105                       	smpsAlterNote       $05
000E0A42 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A46 E108                       	smpsAlterNote       $08
000E0A48 E701                       	dc.b	smpsNoAttack, $01
000E0A4A E10E                       	smpsAlterNote       $0E
000E0A4C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A50 E108                       	smpsAlterNote       $08
000E0A52 E701                       	dc.b	smpsNoAttack, $01
000E0A54 E105                       	smpsAlterNote       $05
000E0A56 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A5A E10B                       	smpsAlterNote       $0B
000E0A5C E701                       	dc.b	smpsNoAttack, $01
000E0A5E E10F                       	smpsAlterNote       $0F
000E0A60 E701                       	dc.b	smpsNoAttack, $01
000E0A62 E10E                       	smpsAlterNote       $0E
000E0A64 E701                       	dc.b	smpsNoAttack, $01
000E0A66 E108                       	smpsAlterNote       $08
000E0A68 E701                       	dc.b	smpsNoAttack, $01
000E0A6A E104                       	smpsAlterNote       $04
000E0A6C E701                       	dc.b	smpsNoAttack, $01
000E0A6E E108                       	smpsAlterNote       $08
000E0A70 E701                       	dc.b	smpsNoAttack, $01
000E0A72 E10B                       	smpsAlterNote       $0B
000E0A74 E701                       	dc.b	smpsNoAttack, $01
000E0A76 E10F                       	smpsAlterNote       $0F
000E0A78 E701                       	dc.b	smpsNoAttack, $01
000E0A7A E10B                       	smpsAlterNote       $0B
000E0A7C E701                       	dc.b	smpsNoAttack, $01
000E0A7E E105                       	smpsAlterNote       $05
000E0A80 E701                       	dc.b	smpsNoAttack, $01
000E0A82 E104                       	smpsAlterNote       $04
000E0A84 E701                       	dc.b	smpsNoAttack, $01
000E0A86 E108                       	smpsAlterNote       $08
000E0A88 E701                       	dc.b	smpsNoAttack, $01
000E0A8A E10E                       	smpsAlterNote       $0E
000E0A8C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A90 E10B                       	smpsAlterNote       $0B
000E0A92 E701                       	dc.b	smpsNoAttack, $01
000E0A94 E105                       	smpsAlterNote       $05
000E0A96 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0A9A E10B                       	smpsAlterNote       $0B
000E0A9C E701                       	dc.b	smpsNoAttack, $01
000E0A9E E10E                       	smpsAlterNote       $0E
000E0AA0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0AA4 E108                       	smpsAlterNote       $08
000E0AA6 E701                       	dc.b	smpsNoAttack, $01
000E0AA8 E105                       	smpsAlterNote       $05
000E0AAA 8001                       	dc.b	nRst, $01
000E0AAE E601                       	smpsAlterVol        $01
000E0AB0 E10B                       	smpsAlterNote       $0B
000E0AB2 BF06 8001 BF03 BF03 8001+  	dc.b	nD5, $06, nRst, $01, nD5, $03, nD5, $03, nRst, $01, nCs5, $03
000E0ABE 8004                       	dc.b	nRst, $04
000E0AC2 E6FF                       	smpsAlterVol        $FF
000E0AC4 E10D                       	smpsAlterNote       $0D
000E0AC6 B802 8001 B603 B601        	dc.b	nG4, $02, nRst, $01, nF4, $03, nF4, $01
000E0ACE E10C                       	smpsAlterNote       $0C
000E0AD0 E7B5 0280 01               	dc.b	smpsNoAttack, nE4, $02, nRst, $01
000E0AD5 E10D                       	smpsAlterNote       $0D
000E0AD7 B60D                       	dc.b	nF4, $0D
000E0AD9 E10A                       	smpsAlterNote       $0A
000E0ADB E701                       	dc.b	smpsNoAttack, $01
000E0ADD E106                       	smpsAlterNote       $06
000E0ADF E701                       	dc.b	smpsNoAttack, $01
000E0AE1 E10A                       	smpsAlterNote       $0A
000E0AE3 E701                       	dc.b	smpsNoAttack, $01
000E0AE5 E110                       	smpsAlterNote       $10
000E0AE7 E701                       	dc.b	smpsNoAttack, $01
000E0AE9 E111                       	smpsAlterNote       $11
000E0AEB E701                       	dc.b	smpsNoAttack, $01
000E0AED E10D                       	smpsAlterNote       $0D
000E0AEF E701                       	dc.b	smpsNoAttack, $01
000E0AF1 E107                       	smpsAlterNote       $07
000E0AF3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0AF7 E10A                       	smpsAlterNote       $0A
000E0AF9 E701                       	dc.b	smpsNoAttack, $01
000E0AFB E110                       	smpsAlterNote       $10
000E0AFD E701                       	dc.b	smpsNoAttack, $01
000E0AFF E111                       	smpsAlterNote       $11
000E0B01 8001                       	dc.b	nRst, $01
000E0B03 E10D                       	smpsAlterNote       $0D
000E0B05 B80D                       	dc.b	nG4, $0D
000E0B07 E10A                       	smpsAlterNote       $0A
000E0B09 E701                       	dc.b	smpsNoAttack, $01
000E0B0B E106                       	smpsAlterNote       $06
000E0B0D E701                       	dc.b	smpsNoAttack, $01
000E0B0F E10A                       	smpsAlterNote       $0A
000E0B11 E701                       	dc.b	smpsNoAttack, $01
000E0B13 E110                       	smpsAlterNote       $10
000E0B15 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0B19 E10D                       	smpsAlterNote       $0D
000E0B1B E701                       	dc.b	smpsNoAttack, $01
000E0B1D E107                       	smpsAlterNote       $07
000E0B1F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0B23 E10D                       	smpsAlterNote       $0D
000E0B25 E701                       	dc.b	smpsNoAttack, $01
000E0B27 E110                       	smpsAlterNote       $10
000E0B29 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0B2D E10A                       	smpsAlterNote       $0A
000E0B2F E701                       	dc.b	smpsNoAttack, $01
000E0B31 E106                       	smpsAlterNote       $06
000E0B33 E701                       	dc.b	smpsNoAttack, $01
000E0B35 E107                       	smpsAlterNote       $07
000E0B37 E701                       	dc.b	smpsNoAttack, $01
000E0B39 E10D                       	smpsAlterNote       $0D
000E0B3B E701                       	dc.b	smpsNoAttack, $01
000E0B3D E111                       	smpsAlterNote       $11
000E0B3F E701                       	dc.b	smpsNoAttack, $01
000E0B41 E10D                       	smpsAlterNote       $0D
000E0B43 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0B47 E10F                       	smpsAlterNote       $0F
000E0B49 BA02 8001                  	dc.b	nA4, $02, nRst, $01
000E0B4D E110                       	smpsAlterNote       $10
000E0B4F BB03                       	dc.b	nBb4, $03
000E0B51 E10F                       	smpsAlterNote       $0F
000E0B53 BA03 8001 C603             	dc.b	nA4, $03, nRst, $01, nA5, $03
000E0B59 E110                       	smpsAlterNote       $10
000E0B5B C703 8001                  	dc.b	nBb5, $03, nRst, $01
000E0B5F E10F                       	smpsAlterNote       $0F
000E0B61 C603 D203 8001             	dc.b	nA5, $03, nA6, $03, nRst, $01
000E0B67 E110                       	smpsAlterNote       $10
000E0B69 D302 8001                  	dc.b	nBb6, $02, nRst, $01
000E0B6D E10F                       	smpsAlterNote       $0F
000E0B6F D20D                       	dc.b	nA6, $0D
000E0B71 E10C                       	smpsAlterNote       $0C
000E0B73 E701                       	dc.b	smpsNoAttack, $01
000E0B75 E108                       	smpsAlterNote       $08
000E0B77 E701                       	dc.b	smpsNoAttack, $01
000E0B79 E10C                       	smpsAlterNote       $0C
000E0B7B E701                       	dc.b	smpsNoAttack, $01
000E0B7D E10F                       	smpsAlterNote       $0F
000E0B7F E701                       	dc.b	smpsNoAttack, $01
000E0B81 E113                       	smpsAlterNote       $13
000E0B83 E701                       	dc.b	smpsNoAttack, $01
000E0B85 E10F                       	smpsAlterNote       $0F
000E0B87 E701                       	dc.b	smpsNoAttack, $01
000E0B89 E109                       	smpsAlterNote       $09
000E0B8B E701                       	dc.b	smpsNoAttack, $01
000E0B8D E108                       	smpsAlterNote       $08
000E0B8F E701                       	dc.b	smpsNoAttack, $01
000E0B91 E10C                       	smpsAlterNote       $0C
000E0B93 E701                       	dc.b	smpsNoAttack, $01
000E0B95 E112                       	smpsAlterNote       $12
000E0B97 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0B9B E10F                       	smpsAlterNote       $0F
000E0B9D E701                       	dc.b	smpsNoAttack, $01
000E0B9F E109                       	smpsAlterNote       $09
000E0BA1 E701 E701 8007             	dc.b	smpsNoAttack, $01, smpsNoAttack, $01, nRst, $07
000E0BA7 E10D                       	smpsAlterNote       $0D
000E0BA9 CE07                       	dc.b	nF6, $07
000E0BAB E10C                       	smpsAlterNote       $0C
000E0BAD CD06 8001                  	dc.b	nE6, $06, nRst, $01
000E0BB1 E10D                       	smpsAlterNote       $0D
000E0BB3 CE03                       	dc.b	nF6, $03
000E0BB5 E10C                       	smpsAlterNote       $0C
000E0BB7 CC0D                       	dc.b	nEb6, $0D
000E0BB9 E109                       	smpsAlterNote       $09
000E0BBB E701                       	dc.b	smpsNoAttack, $01
000E0BBD E106                       	smpsAlterNote       $06
000E0BBF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0BC3 E10C                       	smpsAlterNote       $0C
000E0BC5 E701                       	dc.b	smpsNoAttack, $01
000E0BC7 E110                       	smpsAlterNote       $10
000E0BC9 E701                       	dc.b	smpsNoAttack, $01
000E0BCB E10F                       	smpsAlterNote       $0F
000E0BCD E701                       	dc.b	smpsNoAttack, $01
000E0BCF E109                       	smpsAlterNote       $09
000E0BD1 E701                       	dc.b	smpsNoAttack, $01
000E0BD3 E105                       	smpsAlterNote       $05
000E0BD5 E701                       	dc.b	smpsNoAttack, $01
000E0BD7 E109                       	smpsAlterNote       $09
000E0BD9 E701                       	dc.b	smpsNoAttack, $01
000E0BDB E10C                       	smpsAlterNote       $0C
000E0BDD E701                       	dc.b	smpsNoAttack, $01
000E0BDF E110                       	smpsAlterNote       $10
000E0BE1 E701                       	dc.b	smpsNoAttack, $01
000E0BE3 E10C                       	smpsAlterNote       $0C
000E0BE5 E701                       	dc.b	smpsNoAttack, $01
000E0BE7 E106                       	smpsAlterNote       $06
000E0BE9 E701                       	dc.b	smpsNoAttack, $01
000E0BEB E105                       	smpsAlterNote       $05
000E0BED E701                       	dc.b	smpsNoAttack, $01
000E0BEF E109                       	smpsAlterNote       $09
000E0BF1 E701                       	dc.b	smpsNoAttack, $01
000E0BF3 E10F                       	smpsAlterNote       $0F
000E0BF5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0BF9 E10C                       	smpsAlterNote       $0C
000E0BFB E701                       	dc.b	smpsNoAttack, $01
000E0BFD E10B                       	smpsAlterNote       $0B
000E0BFF CB03 8001 CA02 8001 CB03   	dc.b	nD6, $03, nRst, $01, nCs6, $02, nRst, $01, nD6, $03
000E0C09 E10F                       	smpsAlterNote       $0F
000E0C0B C603 8001 C503 C603 8001   	dc.b	nA5, $03, nRst, $01, nAb5, $03, nA5, $03, nRst, $01
000E0C15 E10D                       	smpsAlterNote       $0D
000E0C17 C203                       	dc.b	nF5, $03
000E0C19 E10C                       	smpsAlterNote       $0C
000E0C1B C103 8001                  	dc.b	nE5, $03, nRst, $01
000E0C1F E10D                       	smpsAlterNote       $0D
000E0C21 C20D                       	dc.b	nF5, $0D
000E0C23 E10C                       	smpsAlterNote       $0C
000E0C25 C10D 8001                  	dc.b	nE5, $0D, nRst, $01
000E0C29 E10B                       	smpsAlterNote       $0B
000E0C2B BF0D                       	dc.b	nD5, $0D
000E0C2D E108                       	smpsAlterNote       $08
000E0C2F E701                       	dc.b	smpsNoAttack, $01
000E0C31 E104                       	smpsAlterNote       $04
000E0C33 E701                       	dc.b	smpsNoAttack, $01
000E0C35 E108                       	smpsAlterNote       $08
000E0C37 E701                       	dc.b	smpsNoAttack, $01
000E0C39 E10E                       	smpsAlterNote       $0E
000E0C3B E701                       	dc.b	smpsNoAttack, $01
000E0C3D E10F                       	smpsAlterNote       $0F
000E0C3F E701                       	dc.b	smpsNoAttack, $01
000E0C41 E10B                       	smpsAlterNote       $0B
000E0C43 E701                       	dc.b	smpsNoAttack, $01
000E0C45 E105                       	smpsAlterNote       $05
000E0C47 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C4B E108                       	smpsAlterNote       $08
000E0C4D E701                       	dc.b	smpsNoAttack, $01
000E0C4F E10E                       	smpsAlterNote       $0E
000E0C51 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C55 E108                       	smpsAlterNote       $08
000E0C57 E701                       	dc.b	smpsNoAttack, $01
000E0C59 E105                       	smpsAlterNote       $05
000E0C5B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C5F E10B                       	smpsAlterNote       $0B
000E0C61 E701                       	dc.b	smpsNoAttack, $01
000E0C63 E10F                       	smpsAlterNote       $0F
000E0C65 E701                       	dc.b	smpsNoAttack, $01
000E0C67 E10E                       	smpsAlterNote       $0E
000E0C69 E701                       	dc.b	smpsNoAttack, $01
000E0C6B E108                       	smpsAlterNote       $08
000E0C6D E701                       	dc.b	smpsNoAttack, $01
000E0C6F E104                       	smpsAlterNote       $04
000E0C71 E701                       	dc.b	smpsNoAttack, $01
000E0C73 E108                       	smpsAlterNote       $08
000E0C75 E701                       	dc.b	smpsNoAttack, $01
000E0C77 E10B                       	smpsAlterNote       $0B
000E0C79 E701                       	dc.b	smpsNoAttack, $01
000E0C7B E10F                       	smpsAlterNote       $0F
000E0C7D E701                       	dc.b	smpsNoAttack, $01
000E0C7F E10B                       	smpsAlterNote       $0B
000E0C81 E701                       	dc.b	smpsNoAttack, $01
000E0C83 E105                       	smpsAlterNote       $05
000E0C85 E701                       	dc.b	smpsNoAttack, $01
000E0C87 E104                       	smpsAlterNote       $04
000E0C89 E701                       	dc.b	smpsNoAttack, $01
000E0C8B E108                       	smpsAlterNote       $08
000E0C8D E701                       	dc.b	smpsNoAttack, $01
000E0C8F E10E                       	smpsAlterNote       $0E
000E0C91 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C95 E10B                       	smpsAlterNote       $0B
000E0C97 E701                       	dc.b	smpsNoAttack, $01
000E0C99 E105                       	smpsAlterNote       $05
000E0C9B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0C9F E10B                       	smpsAlterNote       $0B
000E0CA1 E701                       	dc.b	smpsNoAttack, $01
000E0CA3 E10E                       	smpsAlterNote       $0E
000E0CA5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0CA9 E108                       	smpsAlterNote       $08
000E0CAB E701                       	dc.b	smpsNoAttack, $01
000E0CAD E104                       	smpsAlterNote       $04
000E0CAF E701                       	dc.b	smpsNoAttack, $01
000E0CB1 E105                       	smpsAlterNote       $05
000E0CB3 E701                       	dc.b	smpsNoAttack, $01
000E0CB5 E10B                       	smpsAlterNote       $0B
000E0CB7 E701                       	dc.b	smpsNoAttack, $01
000E0CB9 E10F                       	smpsAlterNote       $0F
000E0CBB E701                       	dc.b	smpsNoAttack, $01
000E0CBD E10B                       	smpsAlterNote       $0B
000E0CBF E701                       	dc.b	smpsNoAttack, $01
000E0CC1 E108                       	smpsAlterNote       $08
000E0CC3 E701                       	dc.b	smpsNoAttack, $01
000E0CC5 E104                       	smpsAlterNote       $04
000E0CC7 E701                       	dc.b	smpsNoAttack, $01
000E0CC9 E108                       	smpsAlterNote       $08
000E0CCB E701                       	dc.b	smpsNoAttack, $01
000E0CCD E10E                       	smpsAlterNote       $0E
000E0CCF E701                       	dc.b	smpsNoAttack, $01
000E0CD1 E10F                       	smpsAlterNote       $0F
000E0CD3 E701                       	dc.b	smpsNoAttack, $01
000E0CD5 E10B                       	smpsAlterNote       $0B
000E0CD7 E701                       	dc.b	smpsNoAttack, $01
000E0CD9 E105                       	smpsAlterNote       $05
000E0CDB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0CDF E108                       	smpsAlterNote       $08
000E0CE1 E701                       	dc.b	smpsNoAttack, $01
000E0CE3 E10E                       	smpsAlterNote       $0E
000E0CE5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0CE9 E108                       	smpsAlterNote       $08
000E0CEB E701                       	dc.b	smpsNoAttack, $01
000E0CED E105                       	smpsAlterNote       $05
000E0CEF E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0CF3 E10B                       	smpsAlterNote       $0B
000E0CF5 E701                       	dc.b	smpsNoAttack, $01
000E0CF7 E10F                       	smpsAlterNote       $0F
000E0CF9 E701                       	dc.b	smpsNoAttack, $01
000E0CFB E10E                       	smpsAlterNote       $0E
000E0CFD E701                       	dc.b	smpsNoAttack, $01
000E0CFF E108                       	smpsAlterNote       $08
000E0D01 E701                       	dc.b	smpsNoAttack, $01
000E0D03 E104                       	smpsAlterNote       $04
000E0D05 E701                       	dc.b	smpsNoAttack, $01
000E0D07 E108                       	smpsAlterNote       $08
000E0D09 E701                       	dc.b	smpsNoAttack, $01
000E0D0B E10B                       	smpsAlterNote       $0B
000E0D0D E701                       	dc.b	smpsNoAttack, $01
000E0D0F E10F                       	smpsAlterNote       $0F
000E0D11 E701                       	dc.b	smpsNoAttack, $01
000E0D13 E10B                       	smpsAlterNote       $0B
000E0D15 E701                       	dc.b	smpsNoAttack, $01
000E0D17 E105                       	smpsAlterNote       $05
000E0D19 E701                       	dc.b	smpsNoAttack, $01
000E0D1B E104                       	smpsAlterNote       $04
000E0D1D E701                       	dc.b	smpsNoAttack, $01
000E0D1F E105                       	smpsAlterNote       $05
000E0D21 8001                       	dc.b	nRst, $01
000E0D23 E10D                       	smpsAlterNote       $0D
000E0D25 C20D                       	dc.b	nF5, $0D
000E0D27 E107                       	smpsAlterNote       $07
000E0D29 E701                       	dc.b	smpsNoAttack, $01
000E0D2B E106                       	smpsAlterNote       $06
000E0D2D E701                       	dc.b	smpsNoAttack, $01
000E0D2F E10A                       	smpsAlterNote       $0A
000E0D31 E701                       	dc.b	smpsNoAttack, $01
000E0D33 E110                       	smpsAlterNote       $10
000E0D35 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D39 E10D                       	smpsAlterNote       $0D
000E0D3B E701                       	dc.b	smpsNoAttack, $01
000E0D3D E107                       	smpsAlterNote       $07
000E0D3F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D43 E10D                       	smpsAlterNote       $0D
000E0D45 E701                       	dc.b	smpsNoAttack, $01
000E0D47 E110                       	smpsAlterNote       $10
000E0D49 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D4D E10A                       	smpsAlterNote       $0A
000E0D4F E701                       	dc.b	smpsNoAttack, $01
000E0D51 E106                       	smpsAlterNote       $06
000E0D53 E701                       	dc.b	smpsNoAttack, $01
000E0D55 E107                       	smpsAlterNote       $07
000E0D57 E701                       	dc.b	smpsNoAttack, $01
000E0D59 E10D                       	smpsAlterNote       $0D
000E0D5B E701                       	dc.b	smpsNoAttack, $01
000E0D5D E111                       	smpsAlterNote       $11
000E0D5F E701                       	dc.b	smpsNoAttack, $01
000E0D61 E10D                       	smpsAlterNote       $0D
000E0D63 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0D67 E10C                       	smpsAlterNote       $0C
000E0D69 C10D                       	dc.b	nE5, $0D
000E0D6B E10D                       	smpsAlterNote       $0D
000E0D6D C20A                       	dc.b	nF5, $0A
000E0D6F E10C                       	smpsAlterNote       $0C
000E0D71 C10E                       	dc.b	nE5, $0E
000E0D73 E106                       	smpsAlterNote       $06
000E0D75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0D79 E10C                       	smpsAlterNote       $0C
000E0D7B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0D7F E10B                       	smpsAlterNote       $0B
000E0D81 BF0D                       	dc.b	nD5, $0D
000E0D83 E10C                       	smpsAlterNote       $0C
000E0D85 C107                       	dc.b	nE5, $07
000E0D87 E10D                       	smpsAlterNote       $0D
000E0D89 C206 8001 C406 8001 C603   	dc.b	nF5, $06, nRst, $01, nG5, $06, nRst, $01, nA5, $03
000E0D93 E110                       	smpsAlterNote       $10
000E0D95 C707 C703 8001             	dc.b	nBb5, $07, nBb5, $03, nRst, $01
000E0D9B E10F                       	smpsAlterNote       $0F
000E0D9D C602 8001 D206 8001        	dc.b	nA5, $02, nRst, $01, nA6, $06, nRst, $01
000E0DA5 E10D                       	smpsAlterNote       $0D
000E0DA7 D003                       	dc.b	nG6, $03
000E0DAB E0C0                       	smpsPan             panCenter, $00
000E0DAD E6FF                       	smpsAlterVol        $FF
000E0DAF AA06 800F AA03 AA03 8019+  	dc.b	nF3, $06, nRst, $0F, nF3, $03, nF3, $03, nRst, $19, nF3, $02
000E0DBB 8001                       	dc.b	nRst, $01
000E0DBD E10C                       	smpsAlterNote       $0C
000E0DBF A906 800F A902 8001        	dc.b	nE3, $06, nRst, $0F, nE3, $02, nRst, $01
000E0DC9 E604                       	smpsAlterVol        $04
000E0DCB E10B                       	smpsAlterNote       $0B
000E0DCD B306 8001                  	dc.b	nD4, $06, nRst, $01
000E0DD1 E10F                       	smpsAlterNote       $0F
000E0DD3 AE03                       	dc.b	nA3, $03
000E0DD5 E10D                       	smpsAlterNote       $0D
000E0DD7 B603 8001                  	dc.b	nF4, $03, nRst, $01
000E0DDB E10C                       	smpsAlterNote       $0C
000E0DDD B506 8001                  	dc.b	nE4, $06, nRst, $01
000E0DE1 E10B                       	smpsAlterNote       $0B
000E0DE3 B302 8001                  	dc.b	nD4, $02, nRst, $01
000E0DE7 E10A                       	smpsAlterNote       $0A
000E0DE9 B103                       	dc.b	nC4, $03
000E0DEB E110                       	smpsAlterNote       $10
000E0DED AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000E0DF1 E10F                       	smpsAlterNote       $0F
000E0DF3 AE03 800A                  	dc.b	nA3, $03, nRst, $0A
000E0DF7 E080                       	smpsPan             panLeft, $00
000E0DF9 01                         	dc.b	$01
000E0DFC E6FB                       	smpsAlterVol        $FB
000E0DFE E1E4                       	smpsAlterNote       $E4
000E0E00 C501                       	dc.b	nAb5, $01
000E0E02 E1F4                       	smpsAlterNote       $F4
000E0E04 E701                       	dc.b	smpsNoAttack, $01
000E0E06 E104                       	smpsAlterNote       $04
000E0E08 E701                       	dc.b	smpsNoAttack, $01
000E0E0A E114                       	smpsAlterNote       $14
000E0E0C E701                       	dc.b	smpsNoAttack, $01
000E0E0E E11C                       	smpsAlterNote       $1C
000E0E10 E701                       	dc.b	smpsNoAttack, $01
000E0E12 E1EF                       	smpsAlterNote       $EF
000E0E14 E7C6 01                    	dc.b	smpsNoAttack, nA5, $01
000E0E17 E1FF                       	smpsAlterNote       $FF
000E0E19 E701                       	dc.b	smpsNoAttack, $01
000E0E1B E10F                       	smpsAlterNote       $0F
000E0E1D C606                       	dc.b	nA5, $06
000E0E1F E109                       	smpsAlterNote       $09
000E0E21 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0E25 E10F                       	smpsAlterNote       $0F
000E0E27 E701                       	dc.b	smpsNoAttack, $01
000E0E29 E112                       	smpsAlterNote       $12
000E0E2B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0E2F E10C                       	smpsAlterNote       $0C
000E0E31 E701                       	dc.b	smpsNoAttack, $01
000E0E33 E108                       	smpsAlterNote       $08
000E0E35 E701                       	dc.b	smpsNoAttack, $01
000E0E37 E109                       	smpsAlterNote       $09
000E0E39 E701                       	dc.b	smpsNoAttack, $01
000E0E3B E10F                       	smpsAlterNote       $0F
000E0E3D E701                       	dc.b	smpsNoAttack, $01
000E0E3F E113                       	smpsAlterNote       $13
000E0E41 E701                       	dc.b	smpsNoAttack, $01
000E0E43 E10F                       	smpsAlterNote       $0F
000E0E45 E701                       	dc.b	smpsNoAttack, $01
000E0E47 E10C                       	smpsAlterNote       $0C
000E0E49 E701                       	dc.b	smpsNoAttack, $01
000E0E4B E108                       	smpsAlterNote       $08
000E0E4D E701                       	dc.b	smpsNoAttack, $01
000E0E4F E10C                       	smpsAlterNote       $0C
000E0E51 E701                       	dc.b	smpsNoAttack, $01
000E0E53 E112                       	smpsAlterNote       $12
000E0E55 E701                       	dc.b	smpsNoAttack, $01
000E0E57 E113                       	smpsAlterNote       $13
000E0E59 E701                       	dc.b	smpsNoAttack, $01
000E0E5B E10F                       	smpsAlterNote       $0F
000E0E5D E701                       	dc.b	smpsNoAttack, $01
000E0E5F E109                       	smpsAlterNote       $09
000E0E61 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0E65 E10C                       	smpsAlterNote       $0C
000E0E67 E701                       	dc.b	smpsNoAttack, $01
000E0E69 E112                       	smpsAlterNote       $12
000E0E6B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0E6F E10C                       	smpsAlterNote       $0C
000E0E71 E701                       	dc.b	smpsNoAttack, $01
000E0E73 E109                       	smpsAlterNote       $09
000E0E75 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0E79 E10F                       	smpsAlterNote       $0F
000E0E7B E701                       	dc.b	smpsNoAttack, $01
000E0E7D E113                       	smpsAlterNote       $13
000E0E7F E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0E83 E10D                       	smpsAlterNote       $0D
000E0E85 C402 8001 C203             	dc.b	nG5, $02, nRst, $01, nF5, $03
000E0E8B E10C                       	smpsAlterNote       $0C
000E0E8D C102 8001                  	dc.b	nE5, $02, nRst, $01
000E0E91 E10D                       	smpsAlterNote       $0D
000E0E93 C201 8001                  	dc.b	nF5, $01, nRst, $01
000E0E97 E10C                       	smpsAlterNote       $0C
000E0E99 C102                       	dc.b	nE5, $02
000E0E9B E10B                       	smpsAlterNote       $0B
000E0E9D BF02 8001                  	dc.b	nD5, $02, nRst, $01
000E0EA1 E10C                       	smpsAlterNote       $0C
000E0EA3 C101 8001                  	dc.b	nE5, $01, nRst, $01
000E0EA7 E10B                       	smpsAlterNote       $0B
000E0EA9 BF02                       	dc.b	nD5, $02
000E0EAB E10A                       	smpsAlterNote       $0A
000E0EAD BD02 BF02 8001 BD01 8001   	dc.b	nC5, $02, nD5, $02, nRst, $01, nC5, $01, nRst, $01
000E0EB7 E110                       	smpsAlterNote       $10
000E0EB9 BB02                       	dc.b	nBb4, $02
000E0EBB E10A                       	smpsAlterNote       $0A
000E0EBD BD02 8001                  	dc.b	nC5, $02, nRst, $01
000E0EC1 E110                       	smpsAlterNote       $10
000E0EC3 BB01 8001                  	dc.b	nBb4, $01, nRst, $01
000E0EC7 E10F                       	smpsAlterNote       $0F
000E0EC9 BA01 8001                  	dc.b	nA4, $01, nRst, $01
000E0ECD E110                       	smpsAlterNote       $10
000E0ECF BB02                       	dc.b	nBb4, $02
000E0ED1 E10F                       	smpsAlterNote       $0F
000E0ED3 BA02 8001 B901 8001 BA02   	dc.b	nA4, $02, nRst, $01, nAb4, $01, nRst, $01, nA4, $02
000E0EDD E10C                       	smpsAlterNote       $0C
000E0EDF B502 B501 C101 8001        	dc.b	nE4, $02, nE4, $01, nE5, $01, nRst, $01
000E0EE7 E10B                       	smpsAlterNote       $0B
000E0EE9 BE01 8001                  	dc.b	nCs5, $01, nRst, $01
000E0EED E10F                       	smpsAlterNote       $0F
000E0EEF BA02                       	dc.b	nA4, $02
000E0EF3 E0C0                       	smpsPan             panCenter, $00
000E0EF5 E601                       	smpsAlterVol        $01
000E0EF7 E109                       	smpsAlterNote       $09
000E0EF9 AA07 800E AA03 AA07 8015+  	dc.b	nF3, $07, nRst, $0E, nF3, $03, nF3, $07, nRst, $15, nF3, $03
000E0F05 E108                       	smpsAlterNote       $08
000E0F07 A906 800F A903             	dc.b	nE3, $06, nRst, $0F, nE3, $03
000E0F0D E107                       	smpsAlterNote       $07
000E0F0F B306 8001 AE03             	dc.b	nD4, $06, nRst, $01, nA3, $03
000E0F15 E109                       	smpsAlterNote       $09
000E0F17 B603 8001                  	dc.b	nF4, $03, nRst, $01
000E0F1B E108                       	smpsAlterNote       $08
000E0F1D B506 8001                  	dc.b	nE4, $06, nRst, $01
000E0F21 E107                       	smpsAlterNote       $07
000E0F23 B302 8001                  	dc.b	nD4, $02, nRst, $01
000E0F27 E106                       	smpsAlterNote       $06
000E0F29 B103                       	dc.b	nC4, $03
000E0F2B E10C                       	smpsAlterNote       $0C
000E0F2D AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000E0F33 E080                       	smpsPan             panLeft, $00
000E0F35 07                         	dc.b	$07
000E0F36 E6FE                       	smpsAlterVol        $FE
000E0F38 E10B                       	smpsAlterNote       $0B
000E0F3A B20D                       	dc.b	nCs4, $0D
000E0F3C E105                       	smpsAlterNote       $05
000E0F3E E701                       	dc.b	smpsNoAttack, $01
000E0F40 E104                       	smpsAlterNote       $04
000E0F42 E701                       	dc.b	smpsNoAttack, $01
000E0F44 E108                       	smpsAlterNote       $08
000E0F46 E701                       	dc.b	smpsNoAttack, $01
000E0F48 E10E                       	smpsAlterNote       $0E
000E0F4A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0F4E E10B                       	smpsAlterNote       $0B
000E0F50 E701                       	dc.b	smpsNoAttack, $01
000E0F52 E105                       	smpsAlterNote       $05
000E0F54 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0F58 E10B                       	smpsAlterNote       $0B
000E0F5A E701                       	dc.b	smpsNoAttack, $01
000E0F5C E10E                       	smpsAlterNote       $0E
000E0F5E E701                       	dc.b	smpsNoAttack, $01
000E0F60 E10F                       	smpsAlterNote       $0F
000E0F62 8001                       	dc.b	nRst, $01
000E0F64 E10B                       	smpsAlterNote       $0B
000E0F66 B30D                       	dc.b	nD4, $0D
000E0F68 E105                       	smpsAlterNote       $05
000E0F6A E701                       	dc.b	smpsNoAttack, $01
000E0F6C E104                       	smpsAlterNote       $04
000E0F6E E701                       	dc.b	smpsNoAttack, $01
000E0F70 E108                       	smpsAlterNote       $08
000E0F72 E701                       	dc.b	smpsNoAttack, $01
000E0F74 E10E                       	smpsAlterNote       $0E
000E0F76 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0F7A E10B                       	smpsAlterNote       $0B
000E0F7C E701                       	dc.b	smpsNoAttack, $01
000E0F7E E105                       	smpsAlterNote       $05
000E0F80 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0F84 E10B                       	smpsAlterNote       $0B
000E0F86 E701                       	dc.b	smpsNoAttack, $01
000E0F88 E10E                       	smpsAlterNote       $0E
000E0F8A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0F8E E108                       	smpsAlterNote       $08
000E0F90 E701                       	dc.b	smpsNoAttack, $01
000E0F92 E104                       	smpsAlterNote       $04
000E0F94 E701                       	dc.b	smpsNoAttack, $01
000E0F96 E105                       	smpsAlterNote       $05
000E0F98 E701                       	dc.b	smpsNoAttack, $01
000E0F9A E10B                       	smpsAlterNote       $0B
000E0F9C E701                       	dc.b	smpsNoAttack, $01
000E0F9E E10F                       	smpsAlterNote       $0F
000E0FA0 E701                       	dc.b	smpsNoAttack, $01
000E0FA2 E10B                       	smpsAlterNote       $0B
000E0FA4 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E0FA8 E10C                       	smpsAlterNote       $0C
000E0FAA B50D                       	dc.b	nE4, $0D
000E0FAC E106                       	smpsAlterNote       $06
000E0FAE E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FB2 E10C                       	smpsAlterNote       $0C
000E0FB4 E701                       	dc.b	smpsNoAttack, $01
000E0FB6 E10F                       	smpsAlterNote       $0F
000E0FB8 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FBC E109                       	smpsAlterNote       $09
000E0FBE E701                       	dc.b	smpsNoAttack, $01
000E0FC0 E105                       	smpsAlterNote       $05
000E0FC2 E701                       	dc.b	smpsNoAttack, $01
000E0FC4 E106                       	smpsAlterNote       $06
000E0FC6 E701                       	dc.b	smpsNoAttack, $01
000E0FC8 E10C                       	smpsAlterNote       $0C
000E0FCA E701                       	dc.b	smpsNoAttack, $01
000E0FCC E110                       	smpsAlterNote       $10
000E0FCE E701                       	dc.b	smpsNoAttack, $01
000E0FD0 E10B                       	smpsAlterNote       $0B
000E0FD2 B30E                       	dc.b	nD4, $0E
000E0FD4 E105                       	smpsAlterNote       $05
000E0FD6 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FDA E10B                       	smpsAlterNote       $0B
000E0FDC E701                       	dc.b	smpsNoAttack, $01
000E0FDE E10E                       	smpsAlterNote       $0E
000E0FE0 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E0FE4 E108                       	smpsAlterNote       $08
000E0FE6 E701                       	dc.b	smpsNoAttack, $01
000E0FE8 E104                       	smpsAlterNote       $04
000E0FEA E701                       	dc.b	smpsNoAttack, $01
000E0FEC E105                       	smpsAlterNote       $05
000E0FEE E701                       	dc.b	smpsNoAttack, $01
000E0FF0 E10B                       	smpsAlterNote       $0B
000E0FF2 E701                       	dc.b	smpsNoAttack, $01
000E0FF4 E10F                       	smpsAlterNote       $0F
000E0FF6 E701                       	dc.b	smpsNoAttack, $01
000E0FF8 E10B                       	smpsAlterNote       $0B
000E0FFA E701                       	dc.b	smpsNoAttack, $01
000E0FFC E108                       	smpsAlterNote       $08
000E0FFE E701                       	dc.b	smpsNoAttack, $01
000E1000 E104                       	smpsAlterNote       $04
000E1002 E701                       	dc.b	smpsNoAttack, $01
000E1004 E108                       	smpsAlterNote       $08
000E1006 E701                       	dc.b	smpsNoAttack, $01
000E1008 E10E                       	smpsAlterNote       $0E
000E100A E701                       	dc.b	smpsNoAttack, $01
000E100C E10F                       	smpsAlterNote       $0F
000E100E E701                       	dc.b	smpsNoAttack, $01
000E1010 E10B                       	smpsAlterNote       $0B
000E1012 E701 B20D                  	dc.b	smpsNoAttack, $01, nCs4, $0D
000E1016 E108                       	smpsAlterNote       $08
000E1018 E701                       	dc.b	smpsNoAttack, $01
000E101A E105                       	smpsAlterNote       $05
000E101C E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1020 E10B                       	smpsAlterNote       $0B
000E1022 E701                       	dc.b	smpsNoAttack, $01
000E1024 E10F                       	smpsAlterNote       $0F
000E1026 E701                       	dc.b	smpsNoAttack, $01
000E1028 E10E                       	smpsAlterNote       $0E
000E102A E701                       	dc.b	smpsNoAttack, $01
000E102C E108                       	smpsAlterNote       $08
000E102E E701                       	dc.b	smpsNoAttack, $01
000E1030 E104                       	smpsAlterNote       $04
000E1032 E701                       	dc.b	smpsNoAttack, $01
000E1034 E108                       	smpsAlterNote       $08
000E1036 E701                       	dc.b	smpsNoAttack, $01
000E1038 E10B                       	smpsAlterNote       $0B
000E103A E701                       	dc.b	smpsNoAttack, $01
000E103C E10F                       	smpsAlterNote       $0F
000E103E E701                       	dc.b	smpsNoAttack, $01
000E1040 E10B                       	smpsAlterNote       $0B
000E1042 B30D                       	dc.b	nD4, $0D
000E1044 E108                       	smpsAlterNote       $08
000E1046 E701                       	dc.b	smpsNoAttack, $01
000E1048 E105                       	smpsAlterNote       $05
000E104A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E104E E10B                       	smpsAlterNote       $0B
000E1050 E701                       	dc.b	smpsNoAttack, $01
000E1052 E10F                       	smpsAlterNote       $0F
000E1054 E701                       	dc.b	smpsNoAttack, $01
000E1056 E10E                       	smpsAlterNote       $0E
000E1058 E701                       	dc.b	smpsNoAttack, $01
000E105A E108                       	smpsAlterNote       $08
000E105C E701                       	dc.b	smpsNoAttack, $01
000E105E E104                       	smpsAlterNote       $04
000E1060 E701                       	dc.b	smpsNoAttack, $01
000E1062 E108                       	smpsAlterNote       $08
000E1064 E701                       	dc.b	smpsNoAttack, $01
000E1066 E10B                       	smpsAlterNote       $0B
000E1068 E701                       	dc.b	smpsNoAttack, $01
000E106A E10F                       	smpsAlterNote       $0F
000E106C E701                       	dc.b	smpsNoAttack, $01
000E106E E10B                       	smpsAlterNote       $0B
000E1070 E701                       	dc.b	smpsNoAttack, $01
000E1072 E105                       	smpsAlterNote       $05
000E1074 E701                       	dc.b	smpsNoAttack, $01
000E1076 E104                       	smpsAlterNote       $04
000E1078 E701                       	dc.b	smpsNoAttack, $01
000E107A E108                       	smpsAlterNote       $08
000E107C E701                       	dc.b	smpsNoAttack, $01
000E107E E10E                       	smpsAlterNote       $0E
000E1080 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1084 E10B                       	smpsAlterNote       $0B
000E1086 8001 B20D                  	dc.b	nRst, $01, nCs4, $0D
000E108A E108                       	smpsAlterNote       $08
000E108C E701                       	dc.b	smpsNoAttack, $01
000E108E E104                       	smpsAlterNote       $04
000E1090 E701                       	dc.b	smpsNoAttack, $01
000E1092 E108                       	smpsAlterNote       $08
000E1094 E701                       	dc.b	smpsNoAttack, $01
000E1096 E10B                       	smpsAlterNote       $0B
000E1098 E701                       	dc.b	smpsNoAttack, $01
000E109C E0C0                       	smpsPan             panCenter, $00
000E109E E601                       	smpsAlterVol        $01
000E10A0 E108                       	smpsAlterNote       $08
000E10A2 A906 8001 A903 A903 8001+  	dc.b	nE3, $06, nRst, $01, nE3, $03, nE3, $03, nRst, $01, nE3, $06
000E10AE 8008 A902 8001             	dc.b	nRst, $08, nE3, $02, nRst, $01
000E10B6 E080                       	smpsPan             panLeft, $00
000E10B8 07                         	dc.b	$07
000E10B9 E6FF                       	smpsAlterVol        $FF
000E10BB E10D                       	smpsAlterNote       $0D
000E10BD B60D                       	dc.b	nF4, $0D
000E10BF E10A                       	smpsAlterNote       $0A
000E10C1 E701                       	dc.b	smpsNoAttack, $01
000E10C3 E106                       	smpsAlterNote       $06
000E10C5 E701                       	dc.b	smpsNoAttack, $01
000E10C7 E10A                       	smpsAlterNote       $0A
000E10C9 E701                       	dc.b	smpsNoAttack, $01
000E10CB E110                       	smpsAlterNote       $10
000E10CD E701                       	dc.b	smpsNoAttack, $01
000E10CF E111                       	smpsAlterNote       $11
000E10D1 E701                       	dc.b	smpsNoAttack, $01
000E10D3 E10D                       	smpsAlterNote       $0D
000E10D5 E701                       	dc.b	smpsNoAttack, $01
000E10D7 E107                       	smpsAlterNote       $07
000E10D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E10DD E10A                       	smpsAlterNote       $0A
000E10DF E701                       	dc.b	smpsNoAttack, $01
000E10E1 E110                       	smpsAlterNote       $10
000E10E3 E701                       	dc.b	smpsNoAttack, $01
000E10E5 E111                       	smpsAlterNote       $11
000E10E7 8001                       	dc.b	nRst, $01
000E10E9 E10D                       	smpsAlterNote       $0D
000E10EB B80D                       	dc.b	nG4, $0D
000E10ED E10A                       	smpsAlterNote       $0A
000E10EF E701                       	dc.b	smpsNoAttack, $01
000E10F1 E106                       	smpsAlterNote       $06
000E10F3 E701                       	dc.b	smpsNoAttack, $01
000E10F5 E10A                       	smpsAlterNote       $0A
000E10F7 E701                       	dc.b	smpsNoAttack, $01
000E10F9 E110                       	smpsAlterNote       $10
000E10FB E701                       	dc.b	smpsNoAttack, $01
000E10FD E111                       	smpsAlterNote       $11
000E10FF E701                       	dc.b	smpsNoAttack, $01
000E1101 E10D                       	smpsAlterNote       $0D
000E1103 E701                       	dc.b	smpsNoAttack, $01
000E1105 E107                       	smpsAlterNote       $07
000E1107 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E110B E10D                       	smpsAlterNote       $0D
000E110D E701                       	dc.b	smpsNoAttack, $01
000E110F E110                       	smpsAlterNote       $10
000E1111 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1115 E10A                       	smpsAlterNote       $0A
000E1117 E701                       	dc.b	smpsNoAttack, $01
000E1119 E106                       	smpsAlterNote       $06
000E111B E701                       	dc.b	smpsNoAttack, $01
000E111D E107                       	smpsAlterNote       $07
000E111F E701                       	dc.b	smpsNoAttack, $01
000E1121 E10D                       	smpsAlterNote       $0D
000E1123 E701                       	dc.b	smpsNoAttack, $01
000E1125 E111                       	smpsAlterNote       $11
000E1127 E701                       	dc.b	smpsNoAttack, $01
000E1129 E10D                       	smpsAlterNote       $0D
000E112B E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E112F E10F                       	smpsAlterNote       $0F
000E1131 BA0D                       	dc.b	nA4, $0D
000E1133 E109                       	smpsAlterNote       $09
000E1135 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1139 E10C                       	smpsAlterNote       $0C
000E113B E701                       	dc.b	smpsNoAttack, $01
000E113D E112                       	smpsAlterNote       $12
000E113F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1143 E10C                       	smpsAlterNote       $0C
000E1145 E701                       	dc.b	smpsNoAttack, $01
000E1147 E109                       	smpsAlterNote       $09
000E1149 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E114D E10F                       	smpsAlterNote       $0F
000E114F E701                       	dc.b	smpsNoAttack, $01
000E1151 E113                       	smpsAlterNote       $13
000E1153 E701                       	dc.b	smpsNoAttack, $01
000E1155 E112                       	smpsAlterNote       $12
000E1157 E701                       	dc.b	smpsNoAttack, $01
000E1159 E10C                       	smpsAlterNote       $0C
000E115B E701                       	dc.b	smpsNoAttack, $01
000E115D E108                       	smpsAlterNote       $08
000E115F E701                       	dc.b	smpsNoAttack, $01
000E1161 E10C                       	smpsAlterNote       $0C
000E1163 E701                       	dc.b	smpsNoAttack, $01
000E1165 E10F                       	smpsAlterNote       $0F
000E1167 E701                       	dc.b	smpsNoAttack, $01
000E1169 E113                       	smpsAlterNote       $13
000E116B E701                       	dc.b	smpsNoAttack, $01
000E116D E10F                       	smpsAlterNote       $0F
000E116F E701                       	dc.b	smpsNoAttack, $01
000E1171 E109                       	smpsAlterNote       $09
000E1173 E701                       	dc.b	smpsNoAttack, $01
000E1175 E108                       	smpsAlterNote       $08
000E1177 E701                       	dc.b	smpsNoAttack, $01
000E1179 E10C                       	smpsAlterNote       $0C
000E117B E701                       	dc.b	smpsNoAttack, $01
000E117D E112                       	smpsAlterNote       $12
000E117F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1183 E10F                       	smpsAlterNote       $0F
000E1185 E701                       	dc.b	smpsNoAttack, $01
000E1187 E109                       	smpsAlterNote       $09
000E1189 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E118D E10F                       	smpsAlterNote       $0F
000E118F E701                       	dc.b	smpsNoAttack, $01
000E1191 E112                       	smpsAlterNote       $12
000E1193 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1197 E10C                       	smpsAlterNote       $0C
000E1199 E701                       	dc.b	smpsNoAttack, $01
000E119B E108                       	smpsAlterNote       $08
000E119D E701                       	dc.b	smpsNoAttack, $01
000E119F E109                       	smpsAlterNote       $09
000E11A1 E701                       	dc.b	smpsNoAttack, $01
000E11A3 E10C                       	smpsAlterNote       $0C
000E11A5 B50A                       	dc.b	nE4, $0A
000E11A7 E10D                       	smpsAlterNote       $0D
000E11A9 B60E                       	dc.b	nF4, $0E
000E11AB E107                       	smpsAlterNote       $07
000E11AD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E11B1 E10D                       	smpsAlterNote       $0D
000E11B3 E701                       	dc.b	smpsNoAttack, $01
000E11B5 E110                       	smpsAlterNote       $10
000E11B7 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E11BB E10A                       	smpsAlterNote       $0A
000E11BD E701                       	dc.b	smpsNoAttack, $01
000E11BF E106                       	smpsAlterNote       $06
000E11C1 E701                       	dc.b	smpsNoAttack, $01
000E11C3 E107                       	smpsAlterNote       $07
000E11C5 E701                       	dc.b	smpsNoAttack, $01
000E11C7 E10D                       	smpsAlterNote       $0D
000E11C9 E701                       	dc.b	smpsNoAttack, $01
000E11CB E111                       	smpsAlterNote       $11
000E11CD E701                       	dc.b	smpsNoAttack, $01
000E11CF E10D                       	smpsAlterNote       $0D
000E11D1 B80D                       	dc.b	nG4, $0D
000E11D3 E10A                       	smpsAlterNote       $0A
000E11D5 E701                       	dc.b	smpsNoAttack, $01
000E11D7 E107                       	smpsAlterNote       $07
000E11D9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E11DD E10D                       	smpsAlterNote       $0D
000E11DF E701                       	dc.b	smpsNoAttack, $01
000E11E1 E111                       	smpsAlterNote       $11
000E11E3 E701                       	dc.b	smpsNoAttack, $01
000E11E5 E110                       	smpsAlterNote       $10
000E11E7 E701                       	dc.b	smpsNoAttack, $01
000E11E9 E10A                       	smpsAlterNote       $0A
000E11EB E701                       	dc.b	smpsNoAttack, $01
000E11ED E106                       	smpsAlterNote       $06
000E11EF E701                       	dc.b	smpsNoAttack, $01
000E11F1 E10A                       	smpsAlterNote       $0A
000E11F3 E701                       	dc.b	smpsNoAttack, $01
000E11F5 E10D                       	smpsAlterNote       $0D
000E11F7 E701                       	dc.b	smpsNoAttack, $01
000E11F9 E111                       	smpsAlterNote       $11
000E11FB E701                       	dc.b	smpsNoAttack, $01
000E11FD E10D                       	smpsAlterNote       $0D
000E11FF E701                       	dc.b	smpsNoAttack, $01
000E1201 E107                       	smpsAlterNote       $07
000E1203 E701                       	dc.b	smpsNoAttack, $01
000E1205 E106                       	smpsAlterNote       $06
000E1207 E701                       	dc.b	smpsNoAttack, $01
000E1209 E10A                       	smpsAlterNote       $0A
000E120B E701                       	dc.b	smpsNoAttack, $01
000E120D E110                       	smpsAlterNote       $10
000E120F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1213 E10D                       	smpsAlterNote       $0D
000E1215 E701                       	dc.b	smpsNoAttack, $01
000E1217 E10F                       	smpsAlterNote       $0F
000E1219 BA0D                       	dc.b	nA4, $0D
000E121B E10C                       	smpsAlterNote       $0C
000E121D E701                       	dc.b	smpsNoAttack, $01
000E121F E108                       	smpsAlterNote       $08
000E1221 E701                       	dc.b	smpsNoAttack, $01
000E1223 E109                       	smpsAlterNote       $09
000E1225 E701                       	dc.b	smpsNoAttack, $01
000E1227 E10F                       	smpsAlterNote       $0F
000E1229 E701                       	dc.b	smpsNoAttack, $01
000E122B E113                       	smpsAlterNote       $13
000E122D E701                       	dc.b	smpsNoAttack, $01
000E122F E10F                       	smpsAlterNote       $0F
000E1231 E701                       	dc.b	smpsNoAttack, $01
000E1233 E10C                       	smpsAlterNote       $0C
000E1235 E701                       	dc.b	smpsNoAttack, $01
000E1237 E108                       	smpsAlterNote       $08
000E1239 E701                       	dc.b	smpsNoAttack, $01
000E123B E10C                       	smpsAlterNote       $0C
000E123D E701                       	dc.b	smpsNoAttack, $01
000E123F E112                       	smpsAlterNote       $12
000E1241 E701                       	dc.b	smpsNoAttack, $01
000E1243 E113                       	smpsAlterNote       $13
000E1245 E701                       	dc.b	smpsNoAttack, $01
000E1247 E10F                       	smpsAlterNote       $0F
000E1249 E701                       	dc.b	smpsNoAttack, $01
000E124B E109                       	smpsAlterNote       $09
000E124D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1251 E10C                       	smpsAlterNote       $0C
000E1253 E701                       	dc.b	smpsNoAttack, $01
000E1255 E112                       	smpsAlterNote       $12
000E1257 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E125B E10C                       	smpsAlterNote       $0C
000E125D E701                       	dc.b	smpsNoAttack, $01
000E125F E109                       	smpsAlterNote       $09
000E1261 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1265 E10F                       	smpsAlterNote       $0F
000E1267 E701                       	dc.b	smpsNoAttack, $01
000E1269 E113                       	smpsAlterNote       $13
000E126B E701                       	dc.b	smpsNoAttack, $01
000E126D E112                       	smpsAlterNote       $12
000E126F E701                       	dc.b	smpsNoAttack, $01
000E1271 E10C                       	smpsAlterNote       $0C
000E1273 E701                       	dc.b	smpsNoAttack, $01
000E1275 E109                       	smpsAlterNote       $09
000E1277 8001                       	dc.b	nRst, $01
000E1279 E10D                       	smpsAlterNote       $0D
000E127B B60A                       	dc.b	nF4, $0A
000E127D E10C                       	smpsAlterNote       $0C
000E127F B506 8001                  	dc.b	nE4, $06, nRst, $01
000E1283 E10B                       	smpsAlterNote       $0B
000E1285 B30D 8001                  	dc.b	nD4, $0D, nRst, $01
000E1289 E10C                       	smpsAlterNote       $0C
000E128B B503                       	dc.b	nE4, $03
000E128D E10D                       	smpsAlterNote       $0D
000E128F B603 8001 B802 8001 BA0D   	dc.b	nF4, $03, nRst, $01, nG4, $02, nRst, $01, nA4, $0D
000E1299 E10C                       	smpsAlterNote       $0C
000E129B E701                       	dc.b	smpsNoAttack, $01
000E129D E108                       	smpsAlterNote       $08
000E129F E701                       	dc.b	smpsNoAttack, $01
000E12A1 E10C                       	smpsAlterNote       $0C
000E12A3 E701                       	dc.b	smpsNoAttack, $01
000E12A5 E112                       	smpsAlterNote       $12
000E12A7 E701                       	dc.b	smpsNoAttack, $01
000E12A9 E113                       	smpsAlterNote       $13
000E12AB E701                       	dc.b	smpsNoAttack, $01
000E12AD E10F                       	smpsAlterNote       $0F
000E12AF E701                       	dc.b	smpsNoAttack, $01
000E12B1 E109                       	smpsAlterNote       $09
000E12B3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E12B7 E10C                       	smpsAlterNote       $0C
000E12B9 E701                       	dc.b	smpsNoAttack, $01
000E12BB E112                       	smpsAlterNote       $12
000E12BD E701                       	dc.b	smpsNoAttack, $01
000E12BF E113                       	smpsAlterNote       $13
000E12C1 8001                       	dc.b	nRst, $01
000E12C3 E10D                       	smpsAlterNote       $0D
000E12C5 C20D                       	dc.b	nF5, $0D
000E12C7 E10A                       	smpsAlterNote       $0A
000E12C9 E701                       	dc.b	smpsNoAttack, $01
000E12CB E106                       	smpsAlterNote       $06
000E12CD E701                       	dc.b	smpsNoAttack, $01
000E12CF E10A                       	smpsAlterNote       $0A
000E12D1 E701                       	dc.b	smpsNoAttack, $01
000E12D3 E110                       	smpsAlterNote       $10
000E12D5 E701                       	dc.b	smpsNoAttack, $01
000E12D7 E111                       	smpsAlterNote       $11
000E12D9 E701                       	dc.b	smpsNoAttack, $01
000E12DB E10D                       	smpsAlterNote       $0D
000E12DD E701                       	dc.b	smpsNoAttack, $01
000E12DF E107                       	smpsAlterNote       $07
000E12E1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E12E5 E10A                       	smpsAlterNote       $0A
000E12E7 E701                       	dc.b	smpsNoAttack, $01
000E12E9 E110                       	smpsAlterNote       $10
000E12EB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E12EF E10A                       	smpsAlterNote       $0A
000E12F1 E701                       	dc.b	smpsNoAttack, $01
000E12F3 E107                       	smpsAlterNote       $07
000E12F5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E12F9 E10D                       	smpsAlterNote       $0D
000E12FB E701                       	dc.b	smpsNoAttack, $01
000E12FD E111                       	smpsAlterNote       $11
000E12FF E701                       	dc.b	smpsNoAttack, $01
000E1301 E110                       	smpsAlterNote       $10
000E1303 E701                       	dc.b	smpsNoAttack, $01
000E1305 E10A                       	smpsAlterNote       $0A
000E1307 E701                       	dc.b	smpsNoAttack, $01
000E1309 E106                       	smpsAlterNote       $06
000E130B E701                       	dc.b	smpsNoAttack, $01
000E130D E10A                       	smpsAlterNote       $0A
000E130F E701                       	dc.b	smpsNoAttack, $01
000E1311 E10D                       	smpsAlterNote       $0D
000E1313 E701                       	dc.b	smpsNoAttack, $01
000E1315 E111                       	smpsAlterNote       $11
000E1317 E701                       	dc.b	smpsNoAttack, $01
000E1319 E10D                       	smpsAlterNote       $0D
000E131B E701                       	dc.b	smpsNoAttack, $01
000E131D E107                       	smpsAlterNote       $07
000E131F E701                       	dc.b	smpsNoAttack, $01
000E1321 E106                       	smpsAlterNote       $06
000E1323 E701                       	dc.b	smpsNoAttack, $01
000E1325 E10A                       	smpsAlterNote       $0A
000E1327 E701                       	dc.b	smpsNoAttack, $01
000E1329 E110                       	smpsAlterNote       $10
000E132B E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E132F E10D                       	smpsAlterNote       $0D
000E1331 E701                       	dc.b	smpsNoAttack, $01
000E1333 E107                       	smpsAlterNote       $07
000E1335 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1339 E10D                       	smpsAlterNote       $0D
000E133B E701                       	dc.b	smpsNoAttack, $01
000E133D E110                       	smpsAlterNote       $10
000E133F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1343 E10A                       	smpsAlterNote       $0A
000E1345 E701                       	dc.b	smpsNoAttack, $01
000E1347 E106                       	smpsAlterNote       $06
000E1349 E701                       	dc.b	smpsNoAttack, $01
000E134B E107                       	smpsAlterNote       $07
000E134D E701                       	dc.b	smpsNoAttack, $01
000E134F E10D                       	smpsAlterNote       $0D
000E1351 E701                       	dc.b	smpsNoAttack, $01
000E1353 E111                       	smpsAlterNote       $11
000E1355 E701                       	dc.b	smpsNoAttack, $01
000E1357 E10D                       	smpsAlterNote       $0D
000E1359 E701                       	dc.b	smpsNoAttack, $01
000E135B E10A                       	smpsAlterNote       $0A
000E135D E701                       	dc.b	smpsNoAttack, $01
000E135F E107                       	smpsAlterNote       $07
000E1361 8001                       	dc.b	nRst, $01
000E1363 E10D                       	smpsAlterNote       $0D
000E1365 C206 8001                  	dc.b	nF5, $06, nRst, $01
000E136B E601                       	smpsAlterVol        $01
000E136D E110                       	smpsAlterNote       $10
000E136F BB0D                       	dc.b	nBb4, $0D
000E1371 E10A                       	smpsAlterNote       $0A
000E1373 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1377 E110                       	smpsAlterNote       $10
000E1379 E701                       	dc.b	smpsNoAttack, $01
000E137B E113                       	smpsAlterNote       $13
000E137D E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1381 E10D                       	smpsAlterNote       $0D
000E1383 E701                       	dc.b	smpsNoAttack, $01
000E1385 E109                       	smpsAlterNote       $09
000E1387 E701                       	dc.b	smpsNoAttack, $01
000E1389 E10A                       	smpsAlterNote       $0A
000E138B E701                       	dc.b	smpsNoAttack, $01
000E138D E110                       	smpsAlterNote       $10
000E138F E701                       	dc.b	smpsNoAttack, $01
000E1391 E114                       	smpsAlterNote       $14
000E1393 E701                       	dc.b	smpsNoAttack, $01
000E1395 E110                       	smpsAlterNote       $10
000E1397 E701                       	dc.b	smpsNoAttack, $01
000E1399 E10D                       	smpsAlterNote       $0D
000E139B E701                       	dc.b	smpsNoAttack, $01
000E139D E109                       	smpsAlterNote       $09
000E139F E701                       	dc.b	smpsNoAttack, $01
000E13A1 E10A                       	smpsAlterNote       $0A
000E13A3 8001 BD0D                  	dc.b	nRst, $01, nC5, $0D
000E13A7 E107                       	smpsAlterNote       $07
000E13A9 E701                       	dc.b	smpsNoAttack, $01
000E13AB E103                       	smpsAlterNote       $03
000E13AD E701                       	dc.b	smpsNoAttack, $01
000E13AF E107                       	smpsAlterNote       $07
000E13B1 E701                       	dc.b	smpsNoAttack, $01
000E13B3 E10D                       	smpsAlterNote       $0D
000E13B5 E701                       	dc.b	smpsNoAttack, $01
000E13B7 E10E                       	smpsAlterNote       $0E
000E13B9 E701                       	dc.b	smpsNoAttack, $01
000E13BB E10A                       	smpsAlterNote       $0A
000E13BD E701                       	dc.b	smpsNoAttack, $01
000E13BF E104                       	smpsAlterNote       $04
000E13C1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E13C5 E107                       	smpsAlterNote       $07
000E13C7 E701                       	dc.b	smpsNoAttack, $01
000E13C9 E10D                       	smpsAlterNote       $0D
000E13CB E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E13CF E107                       	smpsAlterNote       $07
000E13D1 E701                       	dc.b	smpsNoAttack, $01
000E13D3 E104                       	smpsAlterNote       $04
000E13D5 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E13D9 E10B                       	smpsAlterNote       $0B
000E13DB BF0D                       	dc.b	nD5, $0D
000E13DD E108                       	smpsAlterNote       $08
000E13DF E701                       	dc.b	smpsNoAttack, $01
000E13E1 E105                       	smpsAlterNote       $05
000E13E3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E13E7 E10B                       	smpsAlterNote       $0B
000E13E9 E701                       	dc.b	smpsNoAttack, $01
000E13EB E10F                       	smpsAlterNote       $0F
000E13ED E701                       	dc.b	smpsNoAttack, $01
000E13EF E10E                       	smpsAlterNote       $0E
000E13F1 E701                       	dc.b	smpsNoAttack, $01
000E13F3 E108                       	smpsAlterNote       $08
000E13F5 E701                       	dc.b	smpsNoAttack, $01
000E13F7 E104                       	smpsAlterNote       $04
000E13F9 E701                       	dc.b	smpsNoAttack, $01
000E13FB E108                       	smpsAlterNote       $08
000E13FD E701                       	dc.b	smpsNoAttack, $01
000E13FF E10B                       	smpsAlterNote       $0B
000E1401 E701                       	dc.b	smpsNoAttack, $01
000E1403 E10F                       	smpsAlterNote       $0F
000E1405 E701                       	dc.b	smpsNoAttack, $01
000E1407 E10B                       	smpsAlterNote       $0B
000E1409 E701                       	dc.b	smpsNoAttack, $01
000E140B E105                       	smpsAlterNote       $05
000E140D E701                       	dc.b	smpsNoAttack, $01
000E140F E104                       	smpsAlterNote       $04
000E1411 E701                       	dc.b	smpsNoAttack, $01
000E1413 E105                       	smpsAlterNote       $05
000E1415 8001                       	dc.b	nRst, $01
000E1417 E10C                       	smpsAlterNote       $0C
000E1419 C10C                       	dc.b	nE5, $0C
000E141B E10D                       	smpsAlterNote       $0D
000E141D C201                       	dc.b	nF5, $01
000E141F E10E                       	smpsAlterNote       $0E
000E1421 C301 8001                  	dc.b	nFs5, $01, nRst, $01
000E1425 E10D                       	smpsAlterNote       $0D
000E1427 C40C C20D                  	dc.b	nG5, $0C, nF5, $0D
000E142B E10A                       	smpsAlterNote       $0A
000E142D E701                       	dc.b	smpsNoAttack, $01
000E142F E106                       	smpsAlterNote       $06
000E1431 E701                       	dc.b	smpsNoAttack, $01
000E1433 E10A                       	smpsAlterNote       $0A
000E1435 E701                       	dc.b	smpsNoAttack, $01
000E1437 E10D                       	smpsAlterNote       $0D
000E1439 E701                       	dc.b	smpsNoAttack, $01
000E143B E111                       	smpsAlterNote       $11
000E143D E701                       	dc.b	smpsNoAttack, $01
000E143F E10D                       	smpsAlterNote       $0D
000E1441 E701                       	dc.b	smpsNoAttack, $01
000E1443 E107                       	smpsAlterNote       $07
000E1445 E701                       	dc.b	smpsNoAttack, $01
000E1447 E106                       	smpsAlterNote       $06
000E1449 E701                       	dc.b	smpsNoAttack, $01
000E144B E10A                       	smpsAlterNote       $0A
000E144D E701                       	dc.b	smpsNoAttack, $01
000E144F E110                       	smpsAlterNote       $10
000E1451 E701                       	dc.b	smpsNoAttack, $01
000E1453 E111                       	smpsAlterNote       $11
000E1455 8001                       	dc.b	nRst, $01
000E1457 E10D                       	smpsAlterNote       $0D
000E1459 C40D                       	dc.b	nG5, $0D
000E145B E10A                       	smpsAlterNote       $0A
000E145D E701                       	dc.b	smpsNoAttack, $01
000E145F E106                       	smpsAlterNote       $06
000E1461 E701                       	dc.b	smpsNoAttack, $01
000E1463 E10A                       	smpsAlterNote       $0A
000E1465 E701                       	dc.b	smpsNoAttack, $01
000E1467 E10D                       	smpsAlterNote       $0D
000E1469 E701                       	dc.b	smpsNoAttack, $01
000E146B E10C                       	smpsAlterNote       $0C
000E146D C006 8001 C002 C002 8001+  	dc.b	nEb5, $06, nRst, $01, nEb5, $02, nEb5, $02, nRst, $01, nEb5, $01
000E1479 8001                       	dc.b	nRst, $01
000E147B E10D                       	smpsAlterNote       $0D
000E147D C20D                       	dc.b	nF5, $0D
000E147F E10A                       	smpsAlterNote       $0A
000E1481 E701                       	dc.b	smpsNoAttack, $01
000E1483 E106                       	smpsAlterNote       $06
000E1485 E701                       	dc.b	smpsNoAttack, $01
000E1487 E10A                       	smpsAlterNote       $0A
000E1489 E701                       	dc.b	smpsNoAttack, $01
000E148B E110                       	smpsAlterNote       $10
000E148D E701                       	dc.b	smpsNoAttack, $01
000E148F E111                       	smpsAlterNote       $11
000E1491 E701                       	dc.b	smpsNoAttack, $01
000E1493 E10D                       	smpsAlterNote       $0D
000E1495 E701                       	dc.b	smpsNoAttack, $01
000E1497 E107                       	smpsAlterNote       $07
000E1499 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E149D E10A                       	smpsAlterNote       $0A
000E149F E701                       	dc.b	smpsNoAttack, $01
000E14A1 E110                       	smpsAlterNote       $10
000E14A3 E701                       	dc.b	smpsNoAttack, $01
000E14A5 E111                       	smpsAlterNote       $11
000E14A7 8001                       	dc.b	nRst, $01
000E14A9 E10F                       	smpsAlterNote       $0F
000E14AB C60A                       	dc.b	nA5, $0A
000E14AD E10D                       	smpsAlterNote       $0D
000E14AF C406 8001                  	dc.b	nG5, $06, nRst, $01
000E14B3 E10C                       	smpsAlterNote       $0C
000E14B5 C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000E14C1 8001                       	dc.b	nRst, $01
000E14C3 E10D                       	smpsAlterNote       $0D
000E14C5 C20D                       	dc.b	nF5, $0D
000E14C7 E107                       	smpsAlterNote       $07
000E14C9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E14CD E10A                       	smpsAlterNote       $0A
000E14CF E701                       	dc.b	smpsNoAttack, $01
000E14D1 E110                       	smpsAlterNote       $10
000E14D3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E14D7 E10A                       	smpsAlterNote       $0A
000E14D9 E701                       	dc.b	smpsNoAttack, $01
000E14DB E107                       	smpsAlterNote       $07
000E14DD E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E14E1 E10D                       	smpsAlterNote       $0D
000E14E3 E701                       	dc.b	smpsNoAttack, $01
000E14E5 E111                       	smpsAlterNote       $11
000E14E7 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E14EB E10D                       	smpsAlterNote       $0D
000E14ED C40D                       	dc.b	nG5, $0D
000E14EF E107                       	smpsAlterNote       $07
000E14F1 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E14F5 E10A                       	smpsAlterNote       $0A
000E14F7 E701                       	dc.b	smpsNoAttack, $01
000E14F9 E10D                       	smpsAlterNote       $0D
000E14FB 8001                       	dc.b	nRst, $01
000E14FD E10C                       	smpsAlterNote       $0C
000E14FF C006 8001 C001 8001 C002+  	dc.b	nEb5, $06, nRst, $01, nEb5, $01, nRst, $01, nEb5, $02, nEb5, $02
000E150B E10D                       	smpsAlterNote       $0D
000E150D C20E                       	dc.b	nF5, $0E
000E150F E107                       	smpsAlterNote       $07
000E1511 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1515 E10D                       	smpsAlterNote       $0D
000E1517 E701 8001                  	dc.b	smpsNoAttack, $01, nRst, $01
000E151D E0C0                       	smpsPan             panCenter, $00
000E151F E603                       	smpsAlterVol        $03
000E1521 E108                       	smpsAlterNote       $08
000E1523 B406                       	dc.b	nEb4, $06
000E1525 E10C                       	smpsAlterNote       $0C
000E1527 AF03 8001                  	dc.b	nBb3, $03, nRst, $01
000E152B E108                       	smpsAlterNote       $08
000E152D B403                       	dc.b	nEb4, $03
000E152F E109                       	smpsAlterNote       $09
000E1531 B803 8001                  	dc.b	nG4, $03, nRst, $01
000E1535 E10C                       	smpsAlterNote       $0C
000E1537 BB03 BB03 8008             	dc.b	nBb4, $03, nBb4, $03, nRst, $08
000E153F 03                         	dc.b	$03
000E1540 E6FD                       	smpsAlterVol        $FD
000E1542 F6F1 F4                    	smpsJump            music84_Jump00
000E1545                            
000E1545                            ; PSG1 Data
000E1545                            music84_PSG1:
000E1545 E1FD                       	smpsAlterNote       $FD
000E1547 EC04                       	smpsPSGAlterVol     $04
000E1549 9203                       	dc.b	nF1, $03
000E154B E1FE                       	smpsAlterNote       $FE
000E154D 9603                       	dc.b	nA1, $03
000E154F EC04                       	smpsPSGAlterVol     $04
000E1551 E701                       	dc.b	smpsNoAttack, $01
000E1553 E1FF                       	smpsAlterNote       $FF
000E1555 ECFC                       	smpsPSGAlterVol     $FC
000E1557 9B03                       	dc.b	nD2, $03
000E1559 E1FD                       	smpsAlterNote       $FD
000E155B 9403                       	dc.b	nG1, $03
000E155D EC04                       	smpsPSGAlterVol     $04
000E155F E701                       	dc.b	smpsNoAttack, $01
000E1561 E1FE                       	smpsAlterNote       $FE
000E1563 ECFC                       	smpsPSGAlterVol     $FC
000E1565 9703                       	dc.b	nBb1, $03
000E1567 E1FF                       	smpsAlterNote       $FF
000E1569 9B03                       	dc.b	nD2, $03
000E156B EC04                       	smpsPSGAlterVol     $04
000E156D E701                       	dc.b	smpsNoAttack, $01
000E156F E1FE                       	smpsAlterNote       $FE
000E1571 ECFC                       	smpsPSGAlterVol     $FC
000E1573 A002                       	dc.b	nG2, $02
000E1575 EC04                       	smpsPSGAlterVol     $04
000E1577 E701                       	dc.b	smpsNoAttack, $01
000E1579 E1FF                       	smpsAlterNote       $FF
000E157B ECFC                       	smpsPSGAlterVol     $FC
000E157D A203                       	dc.b	nA2, $03
000E157F EC0B                       	smpsPSGAlterVol     $0B
000E1581 800A                       	dc.b	nRst, $0A
000E1583 E105                       	smpsAlterNote       $05
000E1585 01                         	dc.b	$01
000E1586 E1FC                       	smpsAlterNote       $FC
000E1588 01                         	dc.b	$01
000E1589 E105                       	smpsAlterNote       $05
000E158B 01                         	dc.b	$01
000E158C E1FD                       	smpsAlterNote       $FD
000E158E 01                         	dc.b	$01
000E158F E105                       	smpsAlterNote       $05
000E1591 01                         	dc.b	$01
000E1592 E1FD                       	smpsAlterNote       $FD
000E1594 01                         	dc.b	$01
000E1595 E1FA                       	smpsAlterNote       $FA
000E1597 01                         	dc.b	$01
000E1598 E1FC                       	smpsAlterNote       $FC
000E159A 01                         	dc.b	$01
000E159B E105                       	smpsAlterNote       $05
000E159D 01                         	dc.b	$01
000E159E E108                       	smpsAlterNote       $08
000E15A0 0101                       	dc.b	$01, $01
000E15A2 E105                       	smpsAlterNote       $05
000E15A4 01                         	dc.b	$01
000E15A5 E1FA                       	smpsAlterNote       $FA
000E15A7 0101                       	dc.b	$01, $01
000E15A9 E1FD                       	smpsAlterNote       $FD
000E15AB 01                         	dc.b	$01
000E15AC E105                       	smpsAlterNote       $05
000E15AE 01                         	dc.b	$01
000E15AF E108                       	smpsAlterNote       $08
000E15B1 01                         	dc.b	$01
000E15B2 E105                       	smpsAlterNote       $05
000E15B4 01                         	dc.b	$01
000E15B5 E1FC                       	smpsAlterNote       $FC
000E15B7 01                         	dc.b	$01
000E15B8 E105                       	smpsAlterNote       $05
000E15BA 01                         	dc.b	$01
000E15BB E1FD                       	smpsAlterNote       $FD
000E15BD 01                         	dc.b	$01
000E15BE                            
000E15BE                            music84_Jump07:
000E15BE E105                       	smpsAlterNote       $05
000E15C0 8001                       	dc.b	nRst, $01
000E15C2 E1FD                       	smpsAlterNote       $FD
000E15C4 01                         	dc.b	$01
000E15C5 E1FA                       	smpsAlterNote       $FA
000E15C7 01                         	dc.b	$01
000E15C8 E1FC                       	smpsAlterNote       $FC
000E15CA 01                         	dc.b	$01
000E15CB E1FD                       	smpsAlterNote       $FD
000E15CD ECF5                       	smpsPSGAlterVol     $F5
000E15CF 9206                       	dc.b	nF1, $06
000E15D1 EC04                       	smpsPSGAlterVol     $04
000E15D3 E701                       	dc.b	smpsNoAttack, $01
000E15D5 EC07                       	smpsPSGAlterVol     $07
000E15D7 8003                       	dc.b	nRst, $03
000E15D9 ECF5                       	smpsPSGAlterVol     $F5
000E15DB 9206                       	dc.b	nF1, $06
000E15DD EC04                       	smpsPSGAlterVol     $04
000E15DF E701                       	dc.b	smpsNoAttack, $01
000E15E1 EC07                       	smpsPSGAlterVol     $07
000E15E3 8006                       	dc.b	nRst, $06
000E15E5 E100                       	smpsAlterNote       $00
000E15E7 01                         	dc.b	$01
000E15E8 E104                       	smpsAlterNote       $04
000E15EA 01                         	dc.b	$01
000E15EB E100                       	smpsAlterNote       $00
000E15ED 01                         	dc.b	$01
000E15EE E1FB                       	smpsAlterNote       $FB
000E15F0 01                         	dc.b	$01
000E15F1 E1FD                       	smpsAlterNote       $FD
000E15F3 ECF5                       	smpsPSGAlterVol     $F5
000E15F5 9406                       	dc.b	nG1, $06
000E15F7 EC04                       	smpsPSGAlterVol     $04
000E15F9 E701                       	dc.b	smpsNoAttack, $01
000E15FB EC07                       	smpsPSGAlterVol     $07
000E15FD 8003                       	dc.b	nRst, $03
000E15FF ECF5                       	smpsPSGAlterVol     $F5
000E1601 9407                       	dc.b	nG1, $07
000E1603 EC0B                       	smpsPSGAlterVol     $0B
000E1605 8006                       	dc.b	nRst, $06
000E1607 E100                       	smpsAlterNote       $00
000E1609 01                         	dc.b	$01
000E160A E103                       	smpsAlterNote       $03
000E160C 0101                       	dc.b	$01, $01
000E160E E1FD                       	smpsAlterNote       $FD
000E1610 01                         	dc.b	$01
000E1611 ECF5                       	smpsPSGAlterVol     $F5
000E1613 9207                       	dc.b	nF1, $07
000E1615 EC0B                       	smpsPSGAlterVol     $0B
000E1617 8004                       	dc.b	nRst, $04
000E1619 ECF5                       	smpsPSGAlterVol     $F5
000E161B 9206                       	dc.b	nF1, $06
000E161D EC04                       	smpsPSGAlterVol     $04
000E161F E701                       	dc.b	smpsNoAttack, $01
000E1621 EC07                       	smpsPSGAlterVol     $07
000E1623 8006                       	dc.b	nRst, $06
000E1625 E103                       	smpsAlterNote       $03
000E1627 01                         	dc.b	$01
000E1628 E104                       	smpsAlterNote       $04
000E162A 01                         	dc.b	$01
000E162B E100                       	smpsAlterNote       $00
000E162D 01                         	dc.b	$01
000E162E E1FA                       	smpsAlterNote       $FA
000E1630 01                         	dc.b	$01
000E1631 E1FD                       	smpsAlterNote       $FD
000E1633 ECF5                       	smpsPSGAlterVol     $F5
000E1635 9206                       	dc.b	nF1, $06
000E1637 EC04                       	smpsPSGAlterVol     $04
000E1639 E701                       	dc.b	smpsNoAttack, $01
000E163B EC07                       	smpsPSGAlterVol     $07
000E163D 8003                       	dc.b	nRst, $03
000E163F ECF5                       	smpsPSGAlterVol     $F5
000E1641 9106                       	dc.b	nE1, $06
000E1643 EC04                       	smpsPSGAlterVol     $04
000E1645 E701                       	dc.b	smpsNoAttack, $01
000E1647 EC07                       	smpsPSGAlterVol     $07
000E1649 8006                       	dc.b	nRst, $06
000E164B E100                       	smpsAlterNote       $00
000E164D 01                         	dc.b	$01
000E164E E104                       	smpsAlterNote       $04
000E1650 01                         	dc.b	$01
000E1651 E100                       	smpsAlterNote       $00
000E1653 01                         	dc.b	$01
000E1654 E1FD                       	smpsAlterNote       $FD
000E1656 01                         	dc.b	$01
000E1657 ECF5                       	smpsPSGAlterVol     $F5
000E1659 9206                       	dc.b	nF1, $06
000E165B EC04                       	smpsPSGAlterVol     $04
000E165D E701                       	dc.b	smpsNoAttack, $01
000E165F EC07                       	smpsPSGAlterVol     $07
000E1661 8003                       	dc.b	nRst, $03
000E1663 ECF5                       	smpsPSGAlterVol     $F5
000E1665 9207                       	dc.b	nF1, $07
000E1667 EC0B                       	smpsPSGAlterVol     $0B
000E1669 8007                       	dc.b	nRst, $07
000E166B E103                       	smpsAlterNote       $03
000E166D 0101                       	dc.b	$01, $01
000E166F E1FD                       	smpsAlterNote       $FD
000E1671 01                         	dc.b	$01
000E1672 E1FB                       	smpsAlterNote       $FB
000E1674 01                         	dc.b	$01
000E1675 E1FD                       	smpsAlterNote       $FD
000E1677 ECF5                       	smpsPSGAlterVol     $F5
000E1679 9406                       	dc.b	nG1, $06
000E167B EC0B                       	smpsPSGAlterVol     $0B
000E167D 8004                       	dc.b	nRst, $04
000E167F ECF5                       	smpsPSGAlterVol     $F5
000E1681 9406                       	dc.b	nG1, $06
000E1683 EC04                       	smpsPSGAlterVol     $04
000E1685 E701                       	dc.b	smpsNoAttack, $01
000E1687 EC07                       	smpsPSGAlterVol     $07
000E1689 8006                       	dc.b	nRst, $06
000E168B E100                       	smpsAlterNote       $00
000E168D 01                         	dc.b	$01
000E168E E104                       	smpsAlterNote       $04
000E1690 01                         	dc.b	$01
000E1691 E100                       	smpsAlterNote       $00
000E1693 01                         	dc.b	$01
000E1694 E1F9                       	smpsAlterNote       $F9
000E1696 01                         	dc.b	$01
000E1697 E1FD                       	smpsAlterNote       $FD
000E1699 ECF5                       	smpsPSGAlterVol     $F5
000E169B 9206                       	dc.b	nF1, $06
000E169D EC04                       	smpsPSGAlterVol     $04
000E169F E701                       	dc.b	smpsNoAttack, $01
000E16A1 EC07                       	smpsPSGAlterVol     $07
000E16A3 8003                       	dc.b	nRst, $03
000E16A5 ECF5                       	smpsPSGAlterVol     $F5
000E16A7 9207                       	dc.b	nF1, $07
000E16A9 EC0B                       	smpsPSGAlterVol     $0B
000E16AB 8006                       	dc.b	nRst, $06
000E16AD E100                       	smpsAlterNote       $00
000E16AF 01                         	dc.b	$01
000E16B0 E104                       	smpsAlterNote       $04
000E16B2 01                         	dc.b	$01
000E16B3 E103                       	smpsAlterNote       $03
000E16B5 01                         	dc.b	$01
000E16B6 E1FD                       	smpsAlterNote       $FD
000E16B8 01                         	dc.b	$01
000E16B9 ECF5                       	smpsPSGAlterVol     $F5
000E16BB 9207                       	dc.b	nF1, $07
000E16BD EC0B                       	smpsPSGAlterVol     $0B
000E16BF 8004                       	dc.b	nRst, $04
000E16C1 ECF5                       	smpsPSGAlterVol     $F5
000E16C3 9206                       	dc.b	nF1, $06
000E16C5 EC0B                       	smpsPSGAlterVol     $0B
000E16C7 8007                       	dc.b	nRst, $07
000E16C9 E103                       	smpsAlterNote       $03
000E16CB 0101                       	dc.b	$01, $01
000E16CD E100                       	smpsAlterNote       $00
000E16CF 01                         	dc.b	$01
000E16D0 E1FA                       	smpsAlterNote       $FA
000E16D2 01                         	dc.b	$01
000E16D3 E1FD                       	smpsAlterNote       $FD
000E16D5 ECF5                       	smpsPSGAlterVol     $F5
000E16D7 9206                       	dc.b	nF1, $06
000E16D9 EC04                       	smpsPSGAlterVol     $04
000E16DB E701                       	dc.b	smpsNoAttack, $01
000E16DD EC07                       	smpsPSGAlterVol     $07
000E16DF 8003                       	dc.b	nRst, $03
000E16E1 ECF5                       	smpsPSGAlterVol     $F5
000E16E3 9206                       	dc.b	nF1, $06
000E16E5 EC04                       	smpsPSGAlterVol     $04
000E16E7 E701                       	dc.b	smpsNoAttack, $01
000E16E9 EC07                       	smpsPSGAlterVol     $07
000E16EB 8006                       	dc.b	nRst, $06
000E16ED E100                       	smpsAlterNote       $00
000E16EF 01                         	dc.b	$01
000E16F0 E104                       	smpsAlterNote       $04
000E16F2 01                         	dc.b	$01
000E16F3 E100                       	smpsAlterNote       $00
000E16F5 01                         	dc.b	$01
000E16F6 E1FD                       	smpsAlterNote       $FD
000E16F8 01                         	dc.b	$01
000E16F9 ECF5                       	smpsPSGAlterVol     $F5
000E16FB 9206                       	dc.b	nF1, $06
000E16FD EC04                       	smpsPSGAlterVol     $04
000E16FF E701                       	dc.b	smpsNoAttack, $01
000E1701 EC07                       	smpsPSGAlterVol     $07
000E1703 8003                       	dc.b	nRst, $03
000E1705 ECF5                       	smpsPSGAlterVol     $F5
000E1707 9207                       	dc.b	nF1, $07
000E1709 EC0B                       	smpsPSGAlterVol     $0B
000E170B 8007                       	dc.b	nRst, $07
000E170D E103                       	smpsAlterNote       $03
000E170F 0101                       	dc.b	$01, $01
000E1711 E1FD                       	smpsAlterNote       $FD
000E1713 01                         	dc.b	$01
000E1714 E1FA                       	smpsAlterNote       $FA
000E1716 01                         	dc.b	$01
000E1717 E1FD                       	smpsAlterNote       $FD
000E1719 ECF5                       	smpsPSGAlterVol     $F5
000E171B 9206                       	dc.b	nF1, $06
000E171D EC0B                       	smpsPSGAlterVol     $0B
000E171F 8004                       	dc.b	nRst, $04
000E1721 ECF5                       	smpsPSGAlterVol     $F5
000E1723 9206                       	dc.b	nF1, $06
000E1725 EC04                       	smpsPSGAlterVol     $04
000E1727 E701                       	dc.b	smpsNoAttack, $01
000E1729 EC07                       	smpsPSGAlterVol     $07
000E172B 8006                       	dc.b	nRst, $06
000E172D E103                       	smpsAlterNote       $03
000E172F 01                         	dc.b	$01
000E1730 E104                       	smpsAlterNote       $04
000E1732 01                         	dc.b	$01
000E1733 E100                       	smpsAlterNote       $00
000E1735 01                         	dc.b	$01
000E1736 E1FA                       	smpsAlterNote       $FA
000E1738 01                         	dc.b	$01
000E1739 E1FD                       	smpsAlterNote       $FD
000E173B ECF5                       	smpsPSGAlterVol     $F5
000E173D 9206                       	dc.b	nF1, $06
000E173F EC04                       	smpsPSGAlterVol     $04
000E1741 E701                       	dc.b	smpsNoAttack, $01
000E1743 EC07                       	smpsPSGAlterVol     $07
000E1745 8003                       	dc.b	nRst, $03
000E1747 ECF5                       	smpsPSGAlterVol     $F5
000E1749 9206                       	dc.b	nF1, $06
000E174B EC04                       	smpsPSGAlterVol     $04
000E174D E701                       	dc.b	smpsNoAttack, $01
000E174F EC07                       	smpsPSGAlterVol     $07
000E1751 8006                       	dc.b	nRst, $06
000E1753 E100                       	smpsAlterNote       $00
000E1755 01                         	dc.b	$01
000E1756 E104                       	smpsAlterNote       $04
000E1758 01                         	dc.b	$01
000E1759 E103                       	smpsAlterNote       $03
000E175B 01                         	dc.b	$01
000E175C E1FD                       	smpsAlterNote       $FD
000E175E 01                         	dc.b	$01
000E175F ECF5                       	smpsPSGAlterVol     $F5
000E1761 9107                       	dc.b	nE1, $07
000E1763 EC0B                       	smpsPSGAlterVol     $0B
000E1765 8004                       	dc.b	nRst, $04
000E1767 ECF5                       	smpsPSGAlterVol     $F5
000E1769 9106                       	dc.b	nE1, $06
000E176B EC0B                       	smpsPSGAlterVol     $0B
000E176D 8007                       	dc.b	nRst, $07
000E176F E103                       	smpsAlterNote       $03
000E1771 0101                       	dc.b	$01, $01
000E1773 E100                       	smpsAlterNote       $00
000E1775 01                         	dc.b	$01
000E1776 E1FA                       	smpsAlterNote       $FA
000E1778 01                         	dc.b	$01
000E1779 E1FD                       	smpsAlterNote       $FD
000E177B ECF5                       	smpsPSGAlterVol     $F5
000E177D 9106                       	dc.b	nE1, $06
000E177F EC04                       	smpsPSGAlterVol     $04
000E1781 E701                       	dc.b	smpsNoAttack, $01
000E1783 EC07                       	smpsPSGAlterVol     $07
000E1785 8003                       	dc.b	nRst, $03
000E1787 ECF5                       	smpsPSGAlterVol     $F5
000E1789 9106                       	dc.b	nE1, $06
000E178B EC04                       	smpsPSGAlterVol     $04
000E178D E701                       	dc.b	smpsNoAttack, $01
000E178F EC07                       	smpsPSGAlterVol     $07
000E1791 8006                       	dc.b	nRst, $06
000E1793 E100                       	smpsAlterNote       $00
000E1795 01                         	dc.b	$01
000E1796 E104                       	smpsAlterNote       $04
000E1798 01                         	dc.b	$01
000E1799 E100                       	smpsAlterNote       $00
000E179B 01                         	dc.b	$01
000E179C E1FA                       	smpsAlterNote       $FA
000E179E 01                         	dc.b	$01
000E179F E1FD                       	smpsAlterNote       $FD
000E17A1 ECF5                       	smpsPSGAlterVol     $F5
000E17A3 9106                       	dc.b	nE1, $06
000E17A5 EC04                       	smpsPSGAlterVol     $04
000E17A7 E701                       	dc.b	smpsNoAttack, $01
000E17A9 EC07                       	smpsPSGAlterVol     $07
000E17AB 8003                       	dc.b	nRst, $03
000E17AD ECF5                       	smpsPSGAlterVol     $F5
000E17AF 9107 9106                  	dc.b	nE1, $07, nE1, $06
000E17B3 EC04                       	smpsPSGAlterVol     $04
000E17B5 E701                       	dc.b	smpsNoAttack, $01
000E17B7 ECFC                       	smpsPSGAlterVol     $FC
000E17B9 9103 9103                  	dc.b	nE1, $03, nE1, $03
000E17BD EC04                       	smpsPSGAlterVol     $04
000E17BF E701                       	dc.b	smpsNoAttack, $01
000E17C1 ECFC                       	smpsPSGAlterVol     $FC
000E17C3 9106                       	dc.b	nE1, $06
000E17C5 EC04                       	smpsPSGAlterVol     $04
000E17C7 E701                       	dc.b	smpsNoAttack, $01
000E17C9 EC07                       	smpsPSGAlterVol     $07
000E17CB 8006                       	dc.b	nRst, $06
000E17CD E100                       	smpsAlterNote       $00
000E17CF 01                         	dc.b	$01
000E17D0 E104                       	smpsAlterNote       $04
000E17D2 01                         	dc.b	$01
000E17D3 E100                       	smpsAlterNote       $00
000E17D5 01                         	dc.b	$01
000E17D6 E1FA                       	smpsAlterNote       $FA
000E17D8 01                         	dc.b	$01
000E17D9 E1F9                       	smpsAlterNote       $F9
000E17DB 01                         	dc.b	$01
000E17DC E1FD                       	smpsAlterNote       $FD
000E17DE 01                         	dc.b	$01
000E17DF E103                       	smpsAlterNote       $03
000E17E1 01                         	dc.b	$01
000E17E2 E104                       	smpsAlterNote       $04
000E17E4 01                         	dc.b	$01
000E17E5 E100                       	smpsAlterNote       $00
000E17E7 01                         	dc.b	$01
000E17E8 E1FA                       	smpsAlterNote       $FA
000E17EA 0101                       	dc.b	$01, $01
000E17EC E1FD                       	smpsAlterNote       $FD
000E17EE ECF5                       	smpsPSGAlterVol     $F5
000E17F0 9206                       	dc.b	nF1, $06
000E17F2 EC04                       	smpsPSGAlterVol     $04
000E17F4 E701                       	dc.b	smpsNoAttack, $01
000E17F6 EC07                       	smpsPSGAlterVol     $07
000E17F8 8003                       	dc.b	nRst, $03
000E17FA ECF5                       	smpsPSGAlterVol     $F5
000E17FC 9206                       	dc.b	nF1, $06
000E17FE EC04                       	smpsPSGAlterVol     $04
000E1800 E701                       	dc.b	smpsNoAttack, $01
000E1802 EC07                       	smpsPSGAlterVol     $07
000E1804 8006                       	dc.b	nRst, $06
000E1806 E100                       	smpsAlterNote       $00
000E1808 01                         	dc.b	$01
000E1809 E104                       	smpsAlterNote       $04
000E180B 01                         	dc.b	$01
000E180C E103                       	smpsAlterNote       $03
000E180E 01                         	dc.b	$01
000E180F E1FD                       	smpsAlterNote       $FD
000E1811 01                         	dc.b	$01
000E1812 ECF5                       	smpsPSGAlterVol     $F5
000E1814 9407                       	dc.b	nG1, $07
000E1816 EC0B                       	smpsPSGAlterVol     $0B
000E1818 8004                       	dc.b	nRst, $04
000E181A ECF5                       	smpsPSGAlterVol     $F5
000E181C 9406                       	dc.b	nG1, $06
000E181E EC0B                       	smpsPSGAlterVol     $0B
000E1820 8007                       	dc.b	nRst, $07
000E1822 E103                       	smpsAlterNote       $03
000E1824 0101                       	dc.b	$01, $01
000E1826 E1FD                       	smpsAlterNote       $FD
000E1828 01                         	dc.b	$01
000E1829 E1F9                       	smpsAlterNote       $F9
000E182B 01                         	dc.b	$01
000E182C E1FD                       	smpsAlterNote       $FD
000E182E ECF5                       	smpsPSGAlterVol     $F5
000E1830 9206                       	dc.b	nF1, $06
000E1832 EC04                       	smpsPSGAlterVol     $04
000E1834 E701                       	dc.b	smpsNoAttack, $01
000E1836 EC07                       	smpsPSGAlterVol     $07
000E1838 8003                       	dc.b	nRst, $03
000E183A ECF5                       	smpsPSGAlterVol     $F5
000E183C 9206                       	dc.b	nF1, $06
000E183E EC04                       	smpsPSGAlterVol     $04
000E1840 E701                       	dc.b	smpsNoAttack, $01
000E1842 EC07                       	smpsPSGAlterVol     $07
000E1844 8006                       	dc.b	nRst, $06
000E1846 E100                       	smpsAlterNote       $00
000E1848 01                         	dc.b	$01
000E1849 E104                       	smpsAlterNote       $04
000E184B 01                         	dc.b	$01
000E184C E100                       	smpsAlterNote       $00
000E184E 01                         	dc.b	$01
000E184F E1FA                       	smpsAlterNote       $FA
000E1851 01                         	dc.b	$01
000E1852 E1FD                       	smpsAlterNote       $FD
000E1854 ECF5                       	smpsPSGAlterVol     $F5
000E1856 9206                       	dc.b	nF1, $06
000E1858 EC04                       	smpsPSGAlterVol     $04
000E185A E701                       	dc.b	smpsNoAttack, $01
000E185C EC07                       	smpsPSGAlterVol     $07
000E185E 8003                       	dc.b	nRst, $03
000E1860 ECF5                       	smpsPSGAlterVol     $F5
000E1862 9107                       	dc.b	nE1, $07
000E1864 EC0B                       	smpsPSGAlterVol     $0B
000E1866 8006                       	dc.b	nRst, $06
000E1868 E100                       	smpsAlterNote       $00
000E186A 01                         	dc.b	$01
000E186B E103                       	smpsAlterNote       $03
000E186D 0101                       	dc.b	$01, $01
000E186F E1FD                       	smpsAlterNote       $FD
000E1871 01                         	dc.b	$01
000E1872 ECF5                       	smpsPSGAlterVol     $F5
000E1874 9207                       	dc.b	nF1, $07
000E1876 EC0B                       	smpsPSGAlterVol     $0B
000E1878 8004                       	dc.b	nRst, $04
000E187A ECF5                       	smpsPSGAlterVol     $F5
000E187C 9206                       	dc.b	nF1, $06
000E187E EC04                       	smpsPSGAlterVol     $04
000E1880 E701                       	dc.b	smpsNoAttack, $01
000E1882 EC07                       	smpsPSGAlterVol     $07
000E1884 8006                       	dc.b	nRst, $06
000E1886 E103                       	smpsAlterNote       $03
000E1888 01                         	dc.b	$01
000E1889 E104                       	smpsAlterNote       $04
000E188B 01                         	dc.b	$01
000E188C E100                       	smpsAlterNote       $00
000E188E 01                         	dc.b	$01
000E188F E1FB                       	smpsAlterNote       $FB
000E1891 01                         	dc.b	$01
000E1892 E1FD                       	smpsAlterNote       $FD
000E1894 ECF5                       	smpsPSGAlterVol     $F5
000E1896 9406                       	dc.b	nG1, $06
000E1898 EC04                       	smpsPSGAlterVol     $04
000E189A E701                       	dc.b	smpsNoAttack, $01
000E189C EC07                       	smpsPSGAlterVol     $07
000E189E 8003                       	dc.b	nRst, $03
000E18A0 ECF5                       	smpsPSGAlterVol     $F5
000E18A2 9406                       	dc.b	nG1, $06
000E18A4 EC04                       	smpsPSGAlterVol     $04
000E18A6 E701                       	dc.b	smpsNoAttack, $01
000E18A8 EC07                       	smpsPSGAlterVol     $07
000E18AA 8006                       	dc.b	nRst, $06
000E18AC E100                       	smpsAlterNote       $00
000E18AE 01                         	dc.b	$01
000E18AF E104                       	smpsAlterNote       $04
000E18B1 01                         	dc.b	$01
000E18B2 E100                       	smpsAlterNote       $00
000E18B4 01                         	dc.b	$01
000E18B5 E1FD                       	smpsAlterNote       $FD
000E18B7 01                         	dc.b	$01
000E18B8 ECF5                       	smpsPSGAlterVol     $F5
000E18BA 9206                       	dc.b	nF1, $06
000E18BC EC04                       	smpsPSGAlterVol     $04
000E18BE E701                       	dc.b	smpsNoAttack, $01
000E18C0 EC07                       	smpsPSGAlterVol     $07
000E18C2 8003                       	dc.b	nRst, $03
000E18C4 ECF5                       	smpsPSGAlterVol     $F5
000E18C6 9207                       	dc.b	nF1, $07
000E18C8 EC0B                       	smpsPSGAlterVol     $0B
000E18CA 8007                       	dc.b	nRst, $07
000E18CC E103                       	smpsAlterNote       $03
000E18CE 0101                       	dc.b	$01, $01
000E18D0 E1FD                       	smpsAlterNote       $FD
000E18D2 01                         	dc.b	$01
000E18D3 E1FA                       	smpsAlterNote       $FA
000E18D5 01                         	dc.b	$01
000E18D6 E1FD                       	smpsAlterNote       $FD
000E18D8 ECF5                       	smpsPSGAlterVol     $F5
000E18DA 9206                       	dc.b	nF1, $06
000E18DC EC0B                       	smpsPSGAlterVol     $0B
000E18DE 8004                       	dc.b	nRst, $04
000E18E0 ECF5                       	smpsPSGAlterVol     $F5
000E18E2 9206                       	dc.b	nF1, $06
000E18E4 EC04                       	smpsPSGAlterVol     $04
000E18E6 E701                       	dc.b	smpsNoAttack, $01
000E18E8 EC07                       	smpsPSGAlterVol     $07
000E18EA 8006                       	dc.b	nRst, $06
000E18EC E100                       	smpsAlterNote       $00
000E18EE 01                         	dc.b	$01
000E18EF E104                       	smpsAlterNote       $04
000E18F1 01                         	dc.b	$01
000E18F2 E100                       	smpsAlterNote       $00
000E18F4 01                         	dc.b	$01
000E18F5 E1FA                       	smpsAlterNote       $FA
000E18F7 01                         	dc.b	$01
000E18F8 E1FD                       	smpsAlterNote       $FD
000E18FA ECF5                       	smpsPSGAlterVol     $F5
000E18FC 9206                       	dc.b	nF1, $06
000E18FE EC04                       	smpsPSGAlterVol     $04
000E1900 E704                       	dc.b	smpsNoAttack, $04
000E1902 ECFC                       	smpsPSGAlterVol     $FC
000E1904 9207                       	dc.b	nF1, $07
000E1906 EC0B                       	smpsPSGAlterVol     $0B
000E1908 8006                       	dc.b	nRst, $06
000E190A E100                       	smpsAlterNote       $00
000E190C 01                         	dc.b	$01
000E190D E104                       	smpsAlterNote       $04
000E190F 01                         	dc.b	$01
000E1910 E103                       	smpsAlterNote       $03
000E1912 01                         	dc.b	$01
000E1913 E1FD                       	smpsAlterNote       $FD
000E1915 01                         	dc.b	$01
000E1916 ECF5                       	smpsPSGAlterVol     $F5
000E1918 9207                       	dc.b	nF1, $07
000E191A EC0B                       	smpsPSGAlterVol     $0B
000E191C 8004                       	dc.b	nRst, $04
000E191E ECF5                       	smpsPSGAlterVol     $F5
000E1920 9206                       	dc.b	nF1, $06
000E1922 EC0B                       	smpsPSGAlterVol     $0B
000E1924 8007                       	dc.b	nRst, $07
000E1926 E103                       	smpsAlterNote       $03
000E1928 0101                       	dc.b	$01, $01
000E192A E100                       	smpsAlterNote       $00
000E192C 01                         	dc.b	$01
000E192D E1FA                       	smpsAlterNote       $FA
000E192F 01                         	dc.b	$01
000E1930 E1FD                       	smpsAlterNote       $FD
000E1932 ECF5                       	smpsPSGAlterVol     $F5
000E1934 9206                       	dc.b	nF1, $06
000E1936 EC04                       	smpsPSGAlterVol     $04
000E1938 E704                       	dc.b	smpsNoAttack, $04
000E193A ECFC                       	smpsPSGAlterVol     $FC
000E193C 9206                       	dc.b	nF1, $06
000E193E EC04                       	smpsPSGAlterVol     $04
000E1940 E701                       	dc.b	smpsNoAttack, $01
000E1942 EC07                       	smpsPSGAlterVol     $07
000E1944 8006                       	dc.b	nRst, $06
000E1946 E100                       	smpsAlterNote       $00
000E1948 01                         	dc.b	$01
000E1949 E104                       	smpsAlterNote       $04
000E194B 01                         	dc.b	$01
000E194C E100                       	smpsAlterNote       $00
000E194E 01                         	dc.b	$01
000E194F E1FD                       	smpsAlterNote       $FD
000E1951 01                         	dc.b	$01
000E1952 ECF5                       	smpsPSGAlterVol     $F5
000E1954 9206                       	dc.b	nF1, $06
000E1956 EC04                       	smpsPSGAlterVol     $04
000E1958 E701                       	dc.b	smpsNoAttack, $01
000E195A EC07                       	smpsPSGAlterVol     $07
000E195C 8003                       	dc.b	nRst, $03
000E195E ECF5                       	smpsPSGAlterVol     $F5
000E1960 9207                       	dc.b	nF1, $07
000E1962 EC0B                       	smpsPSGAlterVol     $0B
000E1964 8007                       	dc.b	nRst, $07
000E1966 E103                       	smpsAlterNote       $03
000E1968 0101                       	dc.b	$01, $01
000E196A E1FD                       	smpsAlterNote       $FD
000E196C 01                         	dc.b	$01
000E196D E1FA                       	smpsAlterNote       $FA
000E196F 01                         	dc.b	$01
000E1970 E1FD                       	smpsAlterNote       $FD
000E1972 ECF5                       	smpsPSGAlterVol     $F5
000E1974 9106                       	dc.b	nE1, $06
000E1976 EC0B                       	smpsPSGAlterVol     $0B
000E1978 8004                       	dc.b	nRst, $04
000E197A ECF5                       	smpsPSGAlterVol     $F5
000E197C 9106                       	dc.b	nE1, $06
000E197E EC04                       	smpsPSGAlterVol     $04
000E1980 E701                       	dc.b	smpsNoAttack, $01
000E1982 EC07                       	smpsPSGAlterVol     $07
000E1984 8006                       	dc.b	nRst, $06
000E1986 E100                       	smpsAlterNote       $00
000E1988 01                         	dc.b	$01
000E1989 E104                       	smpsAlterNote       $04
000E198B 01                         	dc.b	$01
000E198C E100                       	smpsAlterNote       $00
000E198E 01                         	dc.b	$01
000E198F E1FA                       	smpsAlterNote       $FA
000E1991 01                         	dc.b	$01
000E1992 E1FD                       	smpsAlterNote       $FD
000E1994 ECF5                       	smpsPSGAlterVol     $F5
000E1996 9106                       	dc.b	nE1, $06
000E1998 EC04                       	smpsPSGAlterVol     $04
000E199A E701                       	dc.b	smpsNoAttack, $01
000E199C EC07                       	smpsPSGAlterVol     $07
000E199E 8003                       	dc.b	nRst, $03
000E19A0 ECF5                       	smpsPSGAlterVol     $F5
000E19A2 9106                       	dc.b	nE1, $06
000E19A4 EC04                       	smpsPSGAlterVol     $04
000E19A6 E701                       	dc.b	smpsNoAttack, $01
000E19A8 EC07                       	smpsPSGAlterVol     $07
000E19AA 8006                       	dc.b	nRst, $06
000E19AC E100                       	smpsAlterNote       $00
000E19AE 01                         	dc.b	$01
000E19AF E104                       	smpsAlterNote       $04
000E19B1 01                         	dc.b	$01
000E19B2 E103                       	smpsAlterNote       $03
000E19B4 01                         	dc.b	$01
000E19B5 E1FD                       	smpsAlterNote       $FD
000E19B7 01                         	dc.b	$01
000E19B8 ECF5                       	smpsPSGAlterVol     $F5
000E19BA 9107                       	dc.b	nE1, $07
000E19BC EC0B                       	smpsPSGAlterVol     $0B
000E19BE 8004                       	dc.b	nRst, $04
000E19C0 ECF5                       	smpsPSGAlterVol     $F5
000E19C2 9106                       	dc.b	nE1, $06
000E19C4 EC0B                       	smpsPSGAlterVol     $0B
000E19C6 8007                       	dc.b	nRst, $07
000E19C8 E103                       	smpsAlterNote       $03
000E19CA 0101                       	dc.b	$01, $01
000E19CC E100                       	smpsAlterNote       $00
000E19CE 01                         	dc.b	$01
000E19CF E1FA                       	smpsAlterNote       $FA
000E19D1 01                         	dc.b	$01
000E19D2 E1FD                       	smpsAlterNote       $FD
000E19D4 ECF5                       	smpsPSGAlterVol     $F5
000E19D6 9106                       	dc.b	nE1, $06
000E19D8 EC04                       	smpsPSGAlterVol     $04
000E19DA E701                       	dc.b	smpsNoAttack, $01
000E19DC EC07                       	smpsPSGAlterVol     $07
000E19DE 8003                       	dc.b	nRst, $03
000E19E0 ECF5                       	smpsPSGAlterVol     $F5
000E19E2 9106                       	dc.b	nE1, $06
000E19E4 EC04                       	smpsPSGAlterVol     $04
000E19E6 E701                       	dc.b	smpsNoAttack, $01
000E19E8 EC07                       	smpsPSGAlterVol     $07
000E19EA 8003                       	dc.b	nRst, $03
000E19EC ECF5                       	smpsPSGAlterVol     $F5
000E19EE 9207                       	dc.b	nF1, $07
000E19F0 EC0B                       	smpsPSGAlterVol     $0B
000E19F2 8006                       	dc.b	nRst, $06
000E19F4 E100                       	smpsAlterNote       $00
000E19F6 01                         	dc.b	$01
000E19F7 E104                       	smpsAlterNote       $04
000E19F9 01                         	dc.b	$01
000E19FA E103                       	smpsAlterNote       $03
000E19FC 01                         	dc.b	$01
000E19FD E1FD                       	smpsAlterNote       $FD
000E19FF 01                         	dc.b	$01
000E1A00 E1F9                       	smpsAlterNote       $F9
000E1A02 01                         	dc.b	$01
000E1A03 E1FD                       	smpsAlterNote       $FD
000E1A05 01                         	dc.b	$01
000E1A06 E100                       	smpsAlterNote       $00
000E1A08 01                         	dc.b	$01
000E1A09 E104                       	smpsAlterNote       $04
000E1A0B 01                         	dc.b	$01
000E1A0C E1FD                       	smpsAlterNote       $FD
000E1A0E ECF5                       	smpsPSGAlterVol     $F5
000E1A10 9203 9203                  	dc.b	nF1, $03, nF1, $03
000E1A14 EC04                       	smpsPSGAlterVol     $04
000E1A16 E701                       	dc.b	smpsNoAttack, $01
000E1A18 EC07                       	smpsPSGAlterVol     $07
000E1A1A 8009                       	dc.b	nRst, $09
000E1A1C E100                       	smpsAlterNote       $00
000E1A1E 01                         	dc.b	$01
000E1A1F E104                       	smpsAlterNote       $04
000E1A21 01                         	dc.b	$01
000E1A22 E103                       	smpsAlterNote       $03
000E1A24 01                         	dc.b	$01
000E1A25 E1FD                       	smpsAlterNote       $FD
000E1A27 01                         	dc.b	$01
000E1A28 E1F9                       	smpsAlterNote       $F9
000E1A2A 01                         	dc.b	$01
000E1A2B E1FD                       	smpsAlterNote       $FD
000E1A2D 01                         	dc.b	$01
000E1A2E E100                       	smpsAlterNote       $00
000E1A30 01                         	dc.b	$01
000E1A31 E104                       	smpsAlterNote       $04
000E1A33 01                         	dc.b	$01
000E1A34 E100                       	smpsAlterNote       $00
000E1A36 01                         	dc.b	$01
000E1A37 E1FA                       	smpsAlterNote       $FA
000E1A39 01                         	dc.b	$01
000E1A3A E1F9                       	smpsAlterNote       $F9
000E1A3C 01                         	dc.b	$01
000E1A3D E1FD                       	smpsAlterNote       $FD
000E1A3F 01                         	dc.b	$01
000E1A40 E103                       	smpsAlterNote       $03
000E1A42 0101                       	dc.b	$01, $01
000E1A44 E100                       	smpsAlterNote       $00
000E1A46 01                         	dc.b	$01
000E1A47 E1FD                       	smpsAlterNote       $FD
000E1A49 ECF5                       	smpsPSGAlterVol     $F5
000E1A4B 9202                       	dc.b	nF1, $02
000E1A4D EC04                       	smpsPSGAlterVol     $04
000E1A4F E701                       	dc.b	smpsNoAttack, $01
000E1A51 ECFC                       	smpsPSGAlterVol     $FC
000E1A53 9106                       	dc.b	nE1, $06
000E1A55 EC04                       	smpsPSGAlterVol     $04
000E1A57 E701                       	dc.b	smpsNoAttack, $01
000E1A59 EC07                       	smpsPSGAlterVol     $07
000E1A5B 8006                       	dc.b	nRst, $06
000E1A5D E100                       	smpsAlterNote       $00
000E1A5F 01                         	dc.b	$01
000E1A60 E104                       	smpsAlterNote       $04
000E1A62 01                         	dc.b	$01
000E1A63 E100                       	smpsAlterNote       $00
000E1A65 01                         	dc.b	$01
000E1A66 E1FD                       	smpsAlterNote       $FD
000E1A68 01                         	dc.b	$01
000E1A69 E1F9                       	smpsAlterNote       $F9
000E1A6B 01                         	dc.b	$01
000E1A6C E1FD                       	smpsAlterNote       $FD
000E1A6E 01                         	dc.b	$01
000E1A6F E103                       	smpsAlterNote       $03
000E1A71 01                         	dc.b	$01
000E1A72 E104                       	smpsAlterNote       $04
000E1A74 01                         	dc.b	$01
000E1A75 E1FD                       	smpsAlterNote       $FD
000E1A77 ECF5                       	smpsPSGAlterVol     $F5
000E1A79 9102                       	dc.b	nE1, $02
000E1A7B EC04                       	smpsPSGAlterVol     $04
000E1A7D E701                       	dc.b	smpsNoAttack, $01
000E1A7F ECFC                       	smpsPSGAlterVol     $FC
000E1A81 920D                       	dc.b	nF1, $0D
000E1A83 E100                       	smpsAlterNote       $00
000E1A85 E701                       	dc.b	smpsNoAttack, $01
000E1A87 E104                       	smpsAlterNote       $04
000E1A89 E701                       	dc.b	smpsNoAttack, $01
000E1A8B E100                       	smpsAlterNote       $00
000E1A8D E701                       	dc.b	smpsNoAttack, $01
000E1A8F E1FD                       	smpsAlterNote       $FD
000E1A91 E701                       	dc.b	smpsNoAttack, $01
000E1A93 E1F9                       	smpsAlterNote       $F9
000E1A95 E701                       	dc.b	smpsNoAttack, $01
000E1A97 E1FD                       	smpsAlterNote       $FD
000E1A99 E701                       	dc.b	smpsNoAttack, $01
000E1A9B E103                       	smpsAlterNote       $03
000E1A9D E701                       	dc.b	smpsNoAttack, $01
000E1A9F E104                       	smpsAlterNote       $04
000E1AA1 E701                       	dc.b	smpsNoAttack, $01
000E1AA3 E100                       	smpsAlterNote       $00
000E1AA5 E701                       	dc.b	smpsNoAttack, $01
000E1AA7 E1FA                       	smpsAlterNote       $FA
000E1AA9 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1AAD E1FD                       	smpsAlterNote       $FD
000E1AAF E701                       	dc.b	smpsNoAttack, $01
000E1AB1 E103                       	smpsAlterNote       $03
000E1AB3 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1AB7 E1FD                       	smpsAlterNote       $FD
000E1AB9 E701                       	dc.b	smpsNoAttack, $01
000E1ABB E1F9                       	smpsAlterNote       $F9
000E1ABD E701                       	dc.b	smpsNoAttack, $01
000E1ABF E1FA                       	smpsAlterNote       $FA
000E1AC1 E701                       	dc.b	smpsNoAttack, $01
000E1AC3 E100                       	smpsAlterNote       $00
000E1AC5 EC04                       	smpsPSGAlterVol     $04
000E1AC7 E701                       	dc.b	smpsNoAttack, $01
000E1AC9 EC07                       	smpsPSGAlterVol     $07
000E1ACB E104                       	smpsAlterNote       $04
000E1ACD 8001                       	dc.b	nRst, $01
000E1ACF E100                       	smpsAlterNote       $00
000E1AD1 01                         	dc.b	$01
000E1AD2 E1FD                       	smpsAlterNote       $FD
000E1AD4 01                         	dc.b	$01
000E1AD5 E1F9                       	smpsAlterNote       $F9
000E1AD7 01                         	dc.b	$01
000E1AD8 E1FD                       	smpsAlterNote       $FD
000E1ADA 01                         	dc.b	$01
000E1ADB E103                       	smpsAlterNote       $03
000E1ADD 01                         	dc.b	$01
000E1ADE E104                       	smpsAlterNote       $04
000E1AE0 01                         	dc.b	$01
000E1AE1 E1FD                       	smpsAlterNote       $FD
000E1AE3 ECF5                       	smpsPSGAlterVol     $F5
000E1AE5 9106                       	dc.b	nE1, $06
000E1AE7 EC04                       	smpsPSGAlterVol     $04
000E1AE9 E701                       	dc.b	smpsNoAttack, $01
000E1AEB EC07                       	smpsPSGAlterVol     $07
000E1AED 8003                       	dc.b	nRst, $03
000E1AEF ECF5                       	smpsPSGAlterVol     $F5
000E1AF1 9106                       	dc.b	nE1, $06
000E1AF3 EC04                       	smpsPSGAlterVol     $04
000E1AF5 E701                       	dc.b	smpsNoAttack, $01
000E1AF7 EC07                       	smpsPSGAlterVol     $07
000E1AF9 8006                       	dc.b	nRst, $06
000E1AFB E100                       	smpsAlterNote       $00
000E1AFD 01                         	dc.b	$01
000E1AFE E104                       	smpsAlterNote       $04
000E1B00 01                         	dc.b	$01
000E1B01 E100                       	smpsAlterNote       $00
000E1B03 01                         	dc.b	$01
000E1B04 E1FA                       	smpsAlterNote       $FA
000E1B06 01                         	dc.b	$01
000E1B07 E1FD                       	smpsAlterNote       $FD
000E1B09 ECF5                       	smpsPSGAlterVol     $F5
000E1B0B 9206                       	dc.b	nF1, $06
000E1B0D EC04                       	smpsPSGAlterVol     $04
000E1B0F E701                       	dc.b	smpsNoAttack, $01
000E1B11 EC07                       	smpsPSGAlterVol     $07
000E1B13 8003                       	dc.b	nRst, $03
000E1B15 ECF5                       	smpsPSGAlterVol     $F5
000E1B17 9207                       	dc.b	nF1, $07
000E1B19 EC0B                       	smpsPSGAlterVol     $0B
000E1B1B 8006                       	dc.b	nRst, $06
000E1B1D E100                       	smpsAlterNote       $00
000E1B1F 01                         	dc.b	$01
000E1B20 E103                       	smpsAlterNote       $03
000E1B22 0101                       	dc.b	$01, $01
000E1B24 E1FD                       	smpsAlterNote       $FD
000E1B26 01                         	dc.b	$01
000E1B27 ECF5                       	smpsPSGAlterVol     $F5
000E1B29 9107                       	dc.b	nE1, $07
000E1B2B EC0B                       	smpsPSGAlterVol     $0B
000E1B2D 8004                       	dc.b	nRst, $04
000E1B2F ECF5                       	smpsPSGAlterVol     $F5
000E1B31 9106                       	dc.b	nE1, $06
000E1B33 EC04                       	smpsPSGAlterVol     $04
000E1B35 E701                       	dc.b	smpsNoAttack, $01
000E1B37 EC07                       	smpsPSGAlterVol     $07
000E1B39 8006                       	dc.b	nRst, $06
000E1B3B E103                       	smpsAlterNote       $03
000E1B3D 01                         	dc.b	$01
000E1B3E E104                       	smpsAlterNote       $04
000E1B40 01                         	dc.b	$01
000E1B41 E100                       	smpsAlterNote       $00
000E1B43 01                         	dc.b	$01
000E1B44 E1FA                       	smpsAlterNote       $FA
000E1B46 01                         	dc.b	$01
000E1B47 E1FD                       	smpsAlterNote       $FD
000E1B49 ECF5                       	smpsPSGAlterVol     $F5
000E1B4B 9106                       	dc.b	nE1, $06
000E1B4D EC04                       	smpsPSGAlterVol     $04
000E1B4F E701                       	dc.b	smpsNoAttack, $01
000E1B51 EC07                       	smpsPSGAlterVol     $07
000E1B53 8003                       	dc.b	nRst, $03
000E1B55 ECF5                       	smpsPSGAlterVol     $F5
000E1B57 9106                       	dc.b	nE1, $06
000E1B59 EC04                       	smpsPSGAlterVol     $04
000E1B5B E701                       	dc.b	smpsNoAttack, $01
000E1B5D EC07                       	smpsPSGAlterVol     $07
000E1B5F 8003                       	dc.b	nRst, $03
000E1B61 ECF5                       	smpsPSGAlterVol     $F5
000E1B63 9207                       	dc.b	nF1, $07
000E1B65 EC0B                       	smpsPSGAlterVol     $0B
000E1B67 8006                       	dc.b	nRst, $06
000E1B69 E100                       	smpsAlterNote       $00
000E1B6B 01                         	dc.b	$01
000E1B6C E103                       	smpsAlterNote       $03
000E1B6E 0101                       	dc.b	$01, $01
000E1B70 E1FD                       	smpsAlterNote       $FD
000E1B72 01                         	dc.b	$01
000E1B73 E1F9                       	smpsAlterNote       $F9
000E1B75 01                         	dc.b	$01
000E1B76 E1FA                       	smpsAlterNote       $FA
000E1B78 01                         	dc.b	$01
000E1B79 E100                       	smpsAlterNote       $00
000E1B7B 01                         	dc.b	$01
000E1B7C E104                       	smpsAlterNote       $04
000E1B7E 01                         	dc.b	$01
000E1B7F E1FD                       	smpsAlterNote       $FD
000E1B81 ECF5                       	smpsPSGAlterVol     $F5
000E1B83 9203 9203                  	dc.b	nF1, $03, nF1, $03
000E1B87 EC04                       	smpsPSGAlterVol     $04
000E1B89 E701                       	dc.b	smpsNoAttack, $01
000E1B8B EC07                       	smpsPSGAlterVol     $07
000E1B8D 8009                       	dc.b	nRst, $09
000E1B8F E100                       	smpsAlterNote       $00
000E1B91 01                         	dc.b	$01
000E1B92 E103                       	smpsAlterNote       $03
000E1B94 0101                       	dc.b	$01, $01
000E1B96 E1FD                       	smpsAlterNote       $FD
000E1B98 01                         	dc.b	$01
000E1B99 E1F9                       	smpsAlterNote       $F9
000E1B9B 01                         	dc.b	$01
000E1B9C E1FA                       	smpsAlterNote       $FA
000E1B9E 01                         	dc.b	$01
000E1B9F E100                       	smpsAlterNote       $00
000E1BA1 01                         	dc.b	$01
000E1BA2 E104                       	smpsAlterNote       $04
000E1BA4 01                         	dc.b	$01
000E1BA5 E100                       	smpsAlterNote       $00
000E1BA7 01                         	dc.b	$01
000E1BA8 E1FD                       	smpsAlterNote       $FD
000E1BAA 01                         	dc.b	$01
000E1BAB E1F9                       	smpsAlterNote       $F9
000E1BAD 01                         	dc.b	$01
000E1BAE E1FD                       	smpsAlterNote       $FD
000E1BB0 01                         	dc.b	$01
000E1BB1 E103                       	smpsAlterNote       $03
000E1BB3 01                         	dc.b	$01
000E1BB4 E104                       	smpsAlterNote       $04
000E1BB6 01                         	dc.b	$01
000E1BB7 E100                       	smpsAlterNote       $00
000E1BB9 01                         	dc.b	$01
000E1BBA E1FD                       	smpsAlterNote       $FD
000E1BBC ECF5                       	smpsPSGAlterVol     $F5
000E1BBE 9203 9106                  	dc.b	nF1, $03, nE1, $06
000E1BC2 EC04                       	smpsPSGAlterVol     $04
000E1BC4 E701                       	dc.b	smpsNoAttack, $01
000E1BC6 EC07                       	smpsPSGAlterVol     $07
000E1BC8 8006                       	dc.b	nRst, $06
000E1BCA E100                       	smpsAlterNote       $00
000E1BCC 01                         	dc.b	$01
000E1BCD E104                       	smpsAlterNote       $04
000E1BCF 01                         	dc.b	$01
000E1BD0 E103                       	smpsAlterNote       $03
000E1BD2 01                         	dc.b	$01
000E1BD3 E1FD                       	smpsAlterNote       $FD
000E1BD5 01                         	dc.b	$01
000E1BD6 E1F9                       	smpsAlterNote       $F9
000E1BD8 01                         	dc.b	$01
000E1BD9 E1FD                       	smpsAlterNote       $FD
000E1BDB 01                         	dc.b	$01
000E1BDC E100                       	smpsAlterNote       $00
000E1BDE 01                         	dc.b	$01
000E1BDF E104                       	smpsAlterNote       $04
000E1BE1 01                         	dc.b	$01
000E1BE2 E1FD                       	smpsAlterNote       $FD
000E1BE4 ECF5                       	smpsPSGAlterVol     $F5
000E1BE6 9103 920D                  	dc.b	nE1, $03, nF1, $0D
000E1BEA E100                       	smpsAlterNote       $00
000E1BEC E701                       	dc.b	smpsNoAttack, $01
000E1BEE E104                       	smpsAlterNote       $04
000E1BF0 E701                       	dc.b	smpsNoAttack, $01
000E1BF2 E100                       	smpsAlterNote       $00
000E1BF4 E701                       	dc.b	smpsNoAttack, $01
000E1BF6 E1FD                       	smpsAlterNote       $FD
000E1BF8 E701                       	dc.b	smpsNoAttack, $01
000E1BFA E1F9                       	smpsAlterNote       $F9
000E1BFC E701                       	dc.b	smpsNoAttack, $01
000E1BFE E1FD                       	smpsAlterNote       $FD
000E1C00 E701                       	dc.b	smpsNoAttack, $01
000E1C02 E103                       	smpsAlterNote       $03
000E1C04 E701                       	dc.b	smpsNoAttack, $01
000E1C06 E104                       	smpsAlterNote       $04
000E1C08 E701                       	dc.b	smpsNoAttack, $01
000E1C0A E100                       	smpsAlterNote       $00
000E1C0C E701                       	dc.b	smpsNoAttack, $01
000E1C0E E1FA                       	smpsAlterNote       $FA
000E1C10 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1C14 E1FD                       	smpsAlterNote       $FD
000E1C16 E701                       	dc.b	smpsNoAttack, $01
000E1C18 E103                       	smpsAlterNote       $03
000E1C1A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1C1E E100                       	smpsAlterNote       $00
000E1C20 E701                       	dc.b	smpsNoAttack, $01
000E1C22 E1FA                       	smpsAlterNote       $FA
000E1C24 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E1C28 E100                       	smpsAlterNote       $00
000E1C2A EC04                       	smpsPSGAlterVol     $04
000E1C2C E701                       	dc.b	smpsNoAttack, $01
000E1C2E EC07                       	smpsPSGAlterVol     $07
000E1C30 E104                       	smpsAlterNote       $04
000E1C32 8001                       	dc.b	nRst, $01
000E1C34 E103                       	smpsAlterNote       $03
000E1C36 01                         	dc.b	$01
000E1C37 E1FD                       	smpsAlterNote       $FD
000E1C39 01                         	dc.b	$01
000E1C3A E1F9                       	smpsAlterNote       $F9
000E1C3C 01                         	dc.b	$01
000E1C3D E1FD                       	smpsAlterNote       $FD
000E1C3F 01                         	dc.b	$01
000E1C40 E100                       	smpsAlterNote       $00
000E1C42 01                         	dc.b	$01
000E1C43 E104                       	smpsAlterNote       $04
000E1C45 01                         	dc.b	$01
000E1C46 E1FD                       	smpsAlterNote       $FD
000E1C48 ECF5                       	smpsPSGAlterVol     $F5
000E1C4A 9106                       	dc.b	nE1, $06
000E1C4C EC04                       	smpsPSGAlterVol     $04
000E1C4E E701                       	dc.b	smpsNoAttack, $01
000E1C50 EC07                       	smpsPSGAlterVol     $07
000E1C52 8003                       	dc.b	nRst, $03
000E1C54 ECF5                       	smpsPSGAlterVol     $F5
000E1C56 9106                       	dc.b	nE1, $06
000E1C58 EC04                       	smpsPSGAlterVol     $04
000E1C5A E701                       	dc.b	smpsNoAttack, $01
000E1C5C EC07                       	smpsPSGAlterVol     $07
000E1C5E 8006                       	dc.b	nRst, $06
000E1C60 E100                       	smpsAlterNote       $00
000E1C62 01                         	dc.b	$01
000E1C63 E104                       	smpsAlterNote       $04
000E1C65 01                         	dc.b	$01
000E1C66 E100                       	smpsAlterNote       $00
000E1C68 01                         	dc.b	$01
000E1C69 E1FD                       	smpsAlterNote       $FD
000E1C6B 01                         	dc.b	$01
000E1C6C ECF5                       	smpsPSGAlterVol     $F5
000E1C6E 9206                       	dc.b	nF1, $06
000E1C70 EC04                       	smpsPSGAlterVol     $04
000E1C72 E701                       	dc.b	smpsNoAttack, $01
000E1C74 EC07                       	smpsPSGAlterVol     $07
000E1C76 8003                       	dc.b	nRst, $03
000E1C78 ECF5                       	smpsPSGAlterVol     $F5
000E1C7A 9207                       	dc.b	nF1, $07
000E1C7C EC0B                       	smpsPSGAlterVol     $0B
000E1C7E 8007                       	dc.b	nRst, $07
000E1C80 E103                       	smpsAlterNote       $03
000E1C82 0101                       	dc.b	$01, $01
000E1C84 E1FD                       	smpsAlterNote       $FD
000E1C86 01                         	dc.b	$01
000E1C87 E1FA                       	smpsAlterNote       $FA
000E1C89 01                         	dc.b	$01
000E1C8A E1FD                       	smpsAlterNote       $FD
000E1C8C ECF5                       	smpsPSGAlterVol     $F5
000E1C8E 9106                       	dc.b	nE1, $06
000E1C90 EC0B                       	smpsPSGAlterVol     $0B
000E1C92 8004                       	dc.b	nRst, $04
000E1C94 ECF5                       	smpsPSGAlterVol     $F5
000E1C96 9106                       	dc.b	nE1, $06
000E1C98 EC04                       	smpsPSGAlterVol     $04
000E1C9A E701                       	dc.b	smpsNoAttack, $01
000E1C9C EC07                       	smpsPSGAlterVol     $07
000E1C9E 8006                       	dc.b	nRst, $06
000E1CA0 E100                       	smpsAlterNote       $00
000E1CA2 01                         	dc.b	$01
000E1CA3 E104                       	smpsAlterNote       $04
000E1CA5 01                         	dc.b	$01
000E1CA6 E100                       	smpsAlterNote       $00
000E1CA8 01                         	dc.b	$01
000E1CA9 E1FA                       	smpsAlterNote       $FA
000E1CAB 01                         	dc.b	$01
000E1CAC E1FD                       	smpsAlterNote       $FD
000E1CAE ECF5                       	smpsPSGAlterVol     $F5
000E1CB0 9206                       	dc.b	nF1, $06
000E1CB2 EC04                       	smpsPSGAlterVol     $04
000E1CB4 E701                       	dc.b	smpsNoAttack, $01
000E1CB6 EC07                       	smpsPSGAlterVol     $07
000E1CB8 8003                       	dc.b	nRst, $03
000E1CBA ECF5                       	smpsPSGAlterVol     $F5
000E1CBC 9206                       	dc.b	nF1, $06
000E1CBE EC04                       	smpsPSGAlterVol     $04
000E1CC0 E701                       	dc.b	smpsNoAttack, $01
000E1CC2 EC07                       	smpsPSGAlterVol     $07
000E1CC4 8006                       	dc.b	nRst, $06
000E1CC6 E100                       	smpsAlterNote       $00
000E1CC8 01                         	dc.b	$01
000E1CC9 E104                       	smpsAlterNote       $04
000E1CCB 01                         	dc.b	$01
000E1CCC E103                       	smpsAlterNote       $03
000E1CCE 01                         	dc.b	$01
000E1CCF E1FD                       	smpsAlterNote       $FD
000E1CD1 01                         	dc.b	$01
000E1CD2 ECF5                       	smpsPSGAlterVol     $F5
000E1CD4 9107                       	dc.b	nE1, $07
000E1CD6 EC0B                       	smpsPSGAlterVol     $0B
000E1CD8 8004                       	dc.b	nRst, $04
000E1CDA ECF5                       	smpsPSGAlterVol     $F5
000E1CDC 9106                       	dc.b	nE1, $06
000E1CDE EC0B                       	smpsPSGAlterVol     $0B
000E1CE0 8007                       	dc.b	nRst, $07
000E1CE2 E103                       	smpsAlterNote       $03
000E1CE4 0101                       	dc.b	$01, $01
000E1CE6 E100                       	smpsAlterNote       $00
000E1CE8 01                         	dc.b	$01
000E1CE9 E1FA                       	smpsAlterNote       $FA
000E1CEB 01                         	dc.b	$01
000E1CEC E1FD                       	smpsAlterNote       $FD
000E1CEE ECF5                       	smpsPSGAlterVol     $F5
000E1CF0 9206                       	dc.b	nF1, $06
000E1CF2 EC04                       	smpsPSGAlterVol     $04
000E1CF4 E701                       	dc.b	smpsNoAttack, $01
000E1CF6 EC07                       	smpsPSGAlterVol     $07
000E1CF8 8003                       	dc.b	nRst, $03
000E1CFA ECF5                       	smpsPSGAlterVol     $F5
000E1CFC 9206                       	dc.b	nF1, $06
000E1CFE EC04                       	smpsPSGAlterVol     $04
000E1D00 E701                       	dc.b	smpsNoAttack, $01
000E1D02 EC07                       	smpsPSGAlterVol     $07
000E1D04 8006                       	dc.b	nRst, $06
000E1D06 E100                       	smpsAlterNote       $00
000E1D08 01                         	dc.b	$01
000E1D09 E104                       	smpsAlterNote       $04
000E1D0B 01                         	dc.b	$01
000E1D0C E100                       	smpsAlterNote       $00
000E1D0E 01                         	dc.b	$01
000E1D0F E1FD                       	smpsAlterNote       $FD
000E1D11 01                         	dc.b	$01
000E1D12 ECF5                       	smpsPSGAlterVol     $F5
000E1D14 9106                       	dc.b	nE1, $06
000E1D16 EC04                       	smpsPSGAlterVol     $04
000E1D18 E701                       	dc.b	smpsNoAttack, $01
000E1D1A EC07                       	smpsPSGAlterVol     $07
000E1D1C 8003                       	dc.b	nRst, $03
000E1D1E ECF5                       	smpsPSGAlterVol     $F5
000E1D20 9107 9106                  	dc.b	nE1, $07, nE1, $06
000E1D24 EC04                       	smpsPSGAlterVol     $04
000E1D26 E701                       	dc.b	smpsNoAttack, $01
000E1D28 ECFC                       	smpsPSGAlterVol     $FC
000E1D2A 9103                       	dc.b	nE1, $03
000E1D2C EC04                       	smpsPSGAlterVol     $04
000E1D2E E701                       	dc.b	smpsNoAttack, $01
000E1D30 ECFC                       	smpsPSGAlterVol     $FC
000E1D32 9102                       	dc.b	nE1, $02
000E1D34 EC04                       	smpsPSGAlterVol     $04
000E1D36 E701                       	dc.b	smpsNoAttack, $01
000E1D38 ECFC                       	smpsPSGAlterVol     $FC
000E1D3A 9103                       	dc.b	nE1, $03
000E1D3C EC0B                       	smpsPSGAlterVol     $0B
000E1D3E 800A                       	dc.b	nRst, $0A
000E1D40 E100                       	smpsAlterNote       $00
000E1D42 01                         	dc.b	$01
000E1D43 E104                       	smpsAlterNote       $04
000E1D45 01                         	dc.b	$01
000E1D46 E100                       	smpsAlterNote       $00
000E1D48 01                         	dc.b	$01
000E1D49 E1FA                       	smpsAlterNote       $FA
000E1D4B 01                         	dc.b	$01
000E1D4C E1F9                       	smpsAlterNote       $F9
000E1D4E 01                         	dc.b	$01
000E1D4F E1FD                       	smpsAlterNote       $FD
000E1D51 01                         	dc.b	$01
000E1D52 E103                       	smpsAlterNote       $03
000E1D54 0101                       	dc.b	$01, $01
000E1D56 E100                       	smpsAlterNote       $00
000E1D58 01                         	dc.b	$01
000E1D59 E1FA                       	smpsAlterNote       $FA
000E1D5B 0101                       	dc.b	$01, $01
000E1D5D E1FD                       	smpsAlterNote       $FD
000E1D5F ECF5                       	smpsPSGAlterVol     $F5
000E1D61 9206                       	dc.b	nF1, $06
000E1D63 EC04                       	smpsPSGAlterVol     $04
000E1D65 E704                       	dc.b	smpsNoAttack, $04
000E1D67 ECFC                       	smpsPSGAlterVol     $FC
000E1D69 9206                       	dc.b	nF1, $06
000E1D6B EC04                       	smpsPSGAlterVol     $04
000E1D6D E701                       	dc.b	smpsNoAttack, $01
000E1D6F EC07                       	smpsPSGAlterVol     $07
000E1D71 8006                       	dc.b	nRst, $06
000E1D73 E100                       	smpsAlterNote       $00
000E1D75 01                         	dc.b	$01
000E1D76 E104                       	smpsAlterNote       $04
000E1D78 01                         	dc.b	$01
000E1D79 E103                       	smpsAlterNote       $03
000E1D7B 01                         	dc.b	$01
000E1D7C E1FD                       	smpsAlterNote       $FD
000E1D7E 01                         	dc.b	$01
000E1D7F ECF5                       	smpsPSGAlterVol     $F5
000E1D81 9407                       	dc.b	nG1, $07
000E1D83 EC0B                       	smpsPSGAlterVol     $0B
000E1D85 8004                       	dc.b	nRst, $04
000E1D87 ECF5                       	smpsPSGAlterVol     $F5
000E1D89 9406                       	dc.b	nG1, $06
000E1D8B EC0B                       	smpsPSGAlterVol     $0B
000E1D8D 8007                       	dc.b	nRst, $07
000E1D8F E103                       	smpsAlterNote       $03
000E1D91 0101                       	dc.b	$01, $01
000E1D93 E1FD                       	smpsAlterNote       $FD
000E1D95 01                         	dc.b	$01
000E1D96 E1F9                       	smpsAlterNote       $F9
000E1D98 01                         	dc.b	$01
000E1D99 E1FD                       	smpsAlterNote       $FD
000E1D9B ECF5                       	smpsPSGAlterVol     $F5
000E1D9D 9206                       	dc.b	nF1, $06
000E1D9F EC04                       	smpsPSGAlterVol     $04
000E1DA1 E701                       	dc.b	smpsNoAttack, $01
000E1DA3 EC07                       	smpsPSGAlterVol     $07
000E1DA5 8003                       	dc.b	nRst, $03
000E1DA7 ECF5                       	smpsPSGAlterVol     $F5
000E1DA9 9206                       	dc.b	nF1, $06
000E1DAB EC04                       	smpsPSGAlterVol     $04
000E1DAD E701                       	dc.b	smpsNoAttack, $01
000E1DAF EC07                       	smpsPSGAlterVol     $07
000E1DB1 8006                       	dc.b	nRst, $06
000E1DB3 E100                       	smpsAlterNote       $00
000E1DB5 01                         	dc.b	$01
000E1DB6 E104                       	smpsAlterNote       $04
000E1DB8 01                         	dc.b	$01
000E1DB9 E100                       	smpsAlterNote       $00
000E1DBB 01                         	dc.b	$01
000E1DBC E1FA                       	smpsAlterNote       $FA
000E1DBE 01                         	dc.b	$01
000E1DBF E1FD                       	smpsAlterNote       $FD
000E1DC1 ECF5                       	smpsPSGAlterVol     $F5
000E1DC3 9206                       	dc.b	nF1, $06
000E1DC5 EC04                       	smpsPSGAlterVol     $04
000E1DC7 E701                       	dc.b	smpsNoAttack, $01
000E1DC9 EC07                       	smpsPSGAlterVol     $07
000E1DCB 8003                       	dc.b	nRst, $03
000E1DCD ECF5                       	smpsPSGAlterVol     $F5
000E1DCF 9107                       	dc.b	nE1, $07
000E1DD1 EC0B                       	smpsPSGAlterVol     $0B
000E1DD3 8006                       	dc.b	nRst, $06
000E1DD5 E100                       	smpsAlterNote       $00
000E1DD7 01                         	dc.b	$01
000E1DD8 E103                       	smpsAlterNote       $03
000E1DDA 0101                       	dc.b	$01, $01
000E1DDC E1FD                       	smpsAlterNote       $FD
000E1DDE 01                         	dc.b	$01
000E1DDF ECF5                       	smpsPSGAlterVol     $F5
000E1DE1 9207                       	dc.b	nF1, $07
000E1DE3 EC0B                       	smpsPSGAlterVol     $0B
000E1DE5 8004                       	dc.b	nRst, $04
000E1DE7 ECF5                       	smpsPSGAlterVol     $F5
000E1DE9 9206                       	dc.b	nF1, $06
000E1DEB EC04                       	smpsPSGAlterVol     $04
000E1DED E701                       	dc.b	smpsNoAttack, $01
000E1DEF EC07                       	smpsPSGAlterVol     $07
000E1DF1 8006                       	dc.b	nRst, $06
000E1DF3 E103                       	smpsAlterNote       $03
000E1DF5 01                         	dc.b	$01
000E1DF6 E104                       	smpsAlterNote       $04
000E1DF8 01                         	dc.b	$01
000E1DF9 E100                       	smpsAlterNote       $00
000E1DFB 01                         	dc.b	$01
000E1DFC E1FB                       	smpsAlterNote       $FB
000E1DFE 01                         	dc.b	$01
000E1DFF E1FD                       	smpsAlterNote       $FD
000E1E01 ECF5                       	smpsPSGAlterVol     $F5
000E1E03 9406                       	dc.b	nG1, $06
000E1E05 EC04                       	smpsPSGAlterVol     $04
000E1E07 E701                       	dc.b	smpsNoAttack, $01
000E1E09 EC07                       	smpsPSGAlterVol     $07
000E1E0B 8003                       	dc.b	nRst, $03
000E1E0D ECF5                       	smpsPSGAlterVol     $F5
000E1E0F 9406                       	dc.b	nG1, $06
000E1E11 EC04                       	smpsPSGAlterVol     $04
000E1E13 E701                       	dc.b	smpsNoAttack, $01
000E1E15 EC07                       	smpsPSGAlterVol     $07
000E1E17 8006                       	dc.b	nRst, $06
000E1E19 E100                       	smpsAlterNote       $00
000E1E1B 01                         	dc.b	$01
000E1E1C E104                       	smpsAlterNote       $04
000E1E1E 01                         	dc.b	$01
000E1E1F E100                       	smpsAlterNote       $00
000E1E21 01                         	dc.b	$01
000E1E22 E1FD                       	smpsAlterNote       $FD
000E1E24 01                         	dc.b	$01
000E1E25 ECF5                       	smpsPSGAlterVol     $F5
000E1E27 9206                       	dc.b	nF1, $06
000E1E29 EC04                       	smpsPSGAlterVol     $04
000E1E2B E701                       	dc.b	smpsNoAttack, $01
000E1E2D EC07                       	smpsPSGAlterVol     $07
000E1E2F 8003                       	dc.b	nRst, $03
000E1E31 ECF5                       	smpsPSGAlterVol     $F5
000E1E33 9207                       	dc.b	nF1, $07
000E1E35 EC0B                       	smpsPSGAlterVol     $0B
000E1E37 8007                       	dc.b	nRst, $07
000E1E39 E103                       	smpsAlterNote       $03
000E1E3B 0101                       	dc.b	$01, $01
000E1E3D E1FD                       	smpsAlterNote       $FD
000E1E3F 01                         	dc.b	$01
000E1E40 E1FA                       	smpsAlterNote       $FA
000E1E42 01                         	dc.b	$01
000E1E43 E1FD                       	smpsAlterNote       $FD
000E1E45 ECF5                       	smpsPSGAlterVol     $F5
000E1E47 9206                       	dc.b	nF1, $06
000E1E49 EC0B                       	smpsPSGAlterVol     $0B
000E1E4B 8004                       	dc.b	nRst, $04
000E1E4D ECF5                       	smpsPSGAlterVol     $F5
000E1E4F 9206                       	dc.b	nF1, $06
000E1E51 EC04                       	smpsPSGAlterVol     $04
000E1E53 E701                       	dc.b	smpsNoAttack, $01
000E1E55 EC07                       	smpsPSGAlterVol     $07
000E1E57 8006                       	dc.b	nRst, $06
000E1E59 E100                       	smpsAlterNote       $00
000E1E5B 01                         	dc.b	$01
000E1E5C E104                       	smpsAlterNote       $04
000E1E5E 01                         	dc.b	$01
000E1E5F E100                       	smpsAlterNote       $00
000E1E61 01                         	dc.b	$01
000E1E62 E1FA                       	smpsAlterNote       $FA
000E1E64 01                         	dc.b	$01
000E1E65 E1FD                       	smpsAlterNote       $FD
000E1E67 ECF5                       	smpsPSGAlterVol     $F5
000E1E69 9206                       	dc.b	nF1, $06
000E1E6B EC04                       	smpsPSGAlterVol     $04
000E1E6D E701                       	dc.b	smpsNoAttack, $01
000E1E6F EC07                       	smpsPSGAlterVol     $07
000E1E71 8003                       	dc.b	nRst, $03
000E1E73 ECF5                       	smpsPSGAlterVol     $F5
000E1E75 9207                       	dc.b	nF1, $07
000E1E77 EC0B                       	smpsPSGAlterVol     $0B
000E1E79 8006                       	dc.b	nRst, $06
000E1E7B E100                       	smpsAlterNote       $00
000E1E7D 01                         	dc.b	$01
000E1E7E E103                       	smpsAlterNote       $03
000E1E80 0101                       	dc.b	$01, $01
000E1E82 E1FD                       	smpsAlterNote       $FD
000E1E84 01                         	dc.b	$01
000E1E85 ECF5                       	smpsPSGAlterVol     $F5
000E1E87 9207                       	dc.b	nF1, $07
000E1E89 EC0B                       	smpsPSGAlterVol     $0B
000E1E8B 8004                       	dc.b	nRst, $04
000E1E8D ECF5                       	smpsPSGAlterVol     $F5
000E1E8F 9206                       	dc.b	nF1, $06
000E1E91 EC0B                       	smpsPSGAlterVol     $0B
000E1E93 8007                       	dc.b	nRst, $07
000E1E95 E103                       	smpsAlterNote       $03
000E1E97 0101                       	dc.b	$01, $01
000E1E99 E100                       	smpsAlterNote       $00
000E1E9B 01                         	dc.b	$01
000E1E9C E1FA                       	smpsAlterNote       $FA
000E1E9E 01                         	dc.b	$01
000E1E9F E1FD                       	smpsAlterNote       $FD
000E1EA1 ECF5                       	smpsPSGAlterVol     $F5
000E1EA3 9206                       	dc.b	nF1, $06
000E1EA5 EC04                       	smpsPSGAlterVol     $04
000E1EA7 E701                       	dc.b	smpsNoAttack, $01
000E1EA9 EC07                       	smpsPSGAlterVol     $07
000E1EAB 8003                       	dc.b	nRst, $03
000E1EAD ECF5                       	smpsPSGAlterVol     $F5
000E1EAF 9206                       	dc.b	nF1, $06
000E1EB1 EC04                       	smpsPSGAlterVol     $04
000E1EB3 E701                       	dc.b	smpsNoAttack, $01
000E1EB5 EC07                       	smpsPSGAlterVol     $07
000E1EB7 8006                       	dc.b	nRst, $06
000E1EB9 E100                       	smpsAlterNote       $00
000E1EBB 01                         	dc.b	$01
000E1EBC E104                       	smpsAlterNote       $04
000E1EBE 01                         	dc.b	$01
000E1EBF E100                       	smpsAlterNote       $00
000E1EC1 01                         	dc.b	$01
000E1EC2 E1FD                       	smpsAlterNote       $FD
000E1EC4 01                         	dc.b	$01
000E1EC5 ECF5                       	smpsPSGAlterVol     $F5
000E1EC7 9206                       	dc.b	nF1, $06
000E1EC9 EC04                       	smpsPSGAlterVol     $04
000E1ECB E701                       	dc.b	smpsNoAttack, $01
000E1ECD EC07                       	smpsPSGAlterVol     $07
000E1ECF 8003                       	dc.b	nRst, $03
000E1ED1 ECF5                       	smpsPSGAlterVol     $F5
000E1ED3 9207                       	dc.b	nF1, $07
000E1ED5 EC0B                       	smpsPSGAlterVol     $0B
000E1ED7 8007                       	dc.b	nRst, $07
000E1ED9 E104                       	smpsAlterNote       $04
000E1EDB 0101                       	dc.b	$01, $01
000E1EDD E1FB                       	smpsAlterNote       $FB
000E1EDF 01                         	dc.b	$01
000E1EE0 E1F6                       	smpsAlterNote       $F6
000E1EE2 0101                       	dc.b	$01, $01
000E1EE4 E1FF                       	smpsAlterNote       $FF
000E1EE6 01                         	dc.b	$01
000E1EE7 E105                       	smpsAlterNote       $05
000E1EE9 01                         	dc.b	$01
000E1EEA E104                       	smpsAlterNote       $04
000E1EEC 01                         	dc.b	$01
000E1EED E1FB                       	smpsAlterNote       $FB
000E1EEF 01                         	dc.b	$01
000E1EF0 E1F5                       	smpsAlterNote       $F5
000E1EF2 01                         	dc.b	$01
000E1EF3 E1FC                       	smpsAlterNote       $FC
000E1EF5 ECF5                       	smpsPSGAlterVol     $F5
000E1EF7 8B0E                       	dc.b	nBb0, $0E
000E1EF9 E102                       	smpsAlterNote       $02
000E1EFB EC0B                       	smpsPSGAlterVol     $0B
000E1EFD 8001                       	dc.b	nRst, $01
000E1EFF E101                       	smpsAlterNote       $01
000E1F01 01                         	dc.b	$01
000E1F02 E1FC                       	smpsAlterNote       $FC
000E1F04 01                         	dc.b	$01
000E1F05 E1F9                       	smpsAlterNote       $F9
000E1F07 0101                       	dc.b	$01, $01
000E1F09 E1FF                       	smpsAlterNote       $FF
000E1F0B 01                         	dc.b	$01
000E1F0C E102                       	smpsAlterNote       $02
000E1F0E 01                         	dc.b	$01
000E1F0F E1FF                       	smpsAlterNote       $FF
000E1F11 01                         	dc.b	$01
000E1F12 E1FC                       	smpsAlterNote       $FC
000E1F14 01                         	dc.b	$01
000E1F15 E1F8                       	smpsAlterNote       $F8
000E1F17 01                         	dc.b	$01
000E1F18 E1FC                       	smpsAlterNote       $FC
000E1F1A 01                         	dc.b	$01
000E1F1B E101                       	smpsAlterNote       $01
000E1F1D 01                         	dc.b	$01
000E1F1E E102                       	smpsAlterNote       $02
000E1F20 01                         	dc.b	$01
000E1F21 E1FF                       	smpsAlterNote       $FF
000E1F23 01                         	dc.b	$01
000E1F24 E1FB                       	smpsAlterNote       $FB
000E1F26 ECF5                       	smpsPSGAlterVol     $F5
000E1F28 8D0D                       	dc.b	nC1, $0D
000E1F2A E101                       	smpsAlterNote       $01
000E1F2C EC0B                       	smpsPSGAlterVol     $0B
000E1F2E 8001                       	dc.b	nRst, $01
000E1F30 E102                       	smpsAlterNote       $02
000E1F32 01                         	dc.b	$01
000E1F33 E1FF                       	smpsAlterNote       $FF
000E1F35 01                         	dc.b	$01
000E1F36 E1F9                       	smpsAlterNote       $F9
000E1F38 0101                       	dc.b	$01, $01
000E1F3A E1FC                       	smpsAlterNote       $FC
000E1F3C 01                         	dc.b	$01
000E1F3D E101                       	smpsAlterNote       $01
000E1F3F 0101                       	dc.b	$01, $01
000E1F41 E1FC                       	smpsAlterNote       $FC
000E1F43 01                         	dc.b	$01
000E1F44 E1F9                       	smpsAlterNote       $F9
000E1F46 0101                       	dc.b	$01, $01
000E1F48 E1FF                       	smpsAlterNote       $FF
000E1F4A 01                         	dc.b	$01
000E1F4B E102                       	smpsAlterNote       $02
000E1F4D 01                         	dc.b	$01
000E1F4E E101                       	smpsAlterNote       $01
000E1F50 01                         	dc.b	$01
000E1F51 E1FC                       	smpsAlterNote       $FC
000E1F53 ECF5                       	smpsPSGAlterVol     $F5
000E1F55 8F0D                       	dc.b	nD1, $0D
000E1F57 E1FF                       	smpsAlterNote       $FF
000E1F59 EC04                       	smpsPSGAlterVol     $04
000E1F5B E701                       	dc.b	smpsNoAttack, $01
000E1F5D EC07                       	smpsPSGAlterVol     $07
000E1F5F E103                       	smpsAlterNote       $03
000E1F61 8001                       	dc.b	nRst, $01
000E1F63 E102                       	smpsAlterNote       $02
000E1F65 01                         	dc.b	$01
000E1F66 E1FD                       	smpsAlterNote       $FD
000E1F68 01                         	dc.b	$01
000E1F69 E1F9                       	smpsAlterNote       $F9
000E1F6B 01                         	dc.b	$01
000E1F6C E1FD                       	smpsAlterNote       $FD
000E1F6E 01                         	dc.b	$01
000E1F6F E100                       	smpsAlterNote       $00
000E1F71 01                         	dc.b	$01
000E1F72 E103                       	smpsAlterNote       $03
000E1F74 01                         	dc.b	$01
000E1F75 E100                       	smpsAlterNote       $00
000E1F77 01                         	dc.b	$01
000E1F78 E1FA                       	smpsAlterNote       $FA
000E1F7A 01                         	dc.b	$01
000E1F7B E1F9                       	smpsAlterNote       $F9
000E1F7D 01                         	dc.b	$01
000E1F7E E1FD                       	smpsAlterNote       $FD
000E1F80 01                         	dc.b	$01
000E1F81 E102                       	smpsAlterNote       $02
000E1F83 0101                       	dc.b	$01, $01
000E1F85 E100                       	smpsAlterNote       $00
000E1F87 01                         	dc.b	$01
000E1F88 E1FD                       	smpsAlterNote       $FD
000E1F8A ECF5                       	smpsPSGAlterVol     $F5
000E1F8C 910D                       	dc.b	nE1, $0D
000E1F8E E103                       	smpsAlterNote       $03
000E1F90 EC0B                       	smpsPSGAlterVol     $0B
000E1F92 8001 01                    	dc.b	nRst, $01, $01
000E1F95 E100                       	smpsAlterNote       $00
000E1F97 01                         	dc.b	$01
000E1F98 E1FA                       	smpsAlterNote       $FA
000E1F9A 0101                       	dc.b	$01, $01
000E1F9C E100                       	smpsAlterNote       $00
000E1F9E 01                         	dc.b	$01
000E1F9F E103                       	smpsAlterNote       $03
000E1FA1 01                         	dc.b	$01
000E1FA2 E1FD                       	smpsAlterNote       $FD
000E1FA4 ECF5                       	smpsPSGAlterVol     $F5
000E1FA6 9206                       	dc.b	nF1, $06
000E1FA8 EC04                       	smpsPSGAlterVol     $04
000E1FAA E701                       	dc.b	smpsNoAttack, $01
000E1FAC EC07                       	smpsPSGAlterVol     $07
000E1FAE 8003                       	dc.b	nRst, $03
000E1FB0 ECF5                       	smpsPSGAlterVol     $F5
000E1FB2 9207                       	dc.b	nF1, $07
000E1FB4 EC0B                       	smpsPSGAlterVol     $0B
000E1FB6 8006                       	dc.b	nRst, $06
000E1FB8 E100                       	smpsAlterNote       $00
000E1FBA 01                         	dc.b	$01
000E1FBB E103                       	smpsAlterNote       $03
000E1FBD 0101                       	dc.b	$01, $01
000E1FBF E1FD                       	smpsAlterNote       $FD
000E1FC1 01                         	dc.b	$01
000E1FC2 ECF5                       	smpsPSGAlterVol     $F5
000E1FC4 9407                       	dc.b	nG1, $07
000E1FC6 EC0B                       	smpsPSGAlterVol     $0B
000E1FC8 8004                       	dc.b	nRst, $04
000E1FCA ECF5                       	smpsPSGAlterVol     $F5
000E1FCC 9406                       	dc.b	nG1, $06
000E1FCE EC04                       	smpsPSGAlterVol     $04
000E1FD0 E701                       	dc.b	smpsNoAttack, $01
000E1FD2 EC07                       	smpsPSGAlterVol     $07
000E1FD4 8006                       	dc.b	nRst, $06
000E1FD6 E103                       	smpsAlterNote       $03
000E1FD8 01                         	dc.b	$01
000E1FD9 E104                       	smpsAlterNote       $04
000E1FDB 01                         	dc.b	$01
000E1FDC E100                       	smpsAlterNote       $00
000E1FDE 01                         	dc.b	$01
000E1FDF E1F9                       	smpsAlterNote       $F9
000E1FE1 01                         	dc.b	$01
000E1FE2 E1FD                       	smpsAlterNote       $FD
000E1FE4 ECF5                       	smpsPSGAlterVol     $F5
000E1FE6 9206                       	dc.b	nF1, $06
000E1FE8 EC04                       	smpsPSGAlterVol     $04
000E1FEA E701                       	dc.b	smpsNoAttack, $01
000E1FEC EC07                       	smpsPSGAlterVol     $07
000E1FEE 8003                       	dc.b	nRst, $03
000E1FF0 ECF5                       	smpsPSGAlterVol     $F5
000E1FF2 9206                       	dc.b	nF1, $06
000E1FF4 EC04                       	smpsPSGAlterVol     $04
000E1FF6 E701                       	dc.b	smpsNoAttack, $01
000E1FF8 EC07                       	smpsPSGAlterVol     $07
000E1FFA 8006                       	dc.b	nRst, $06
000E1FFC E100                       	smpsAlterNote       $00
000E1FFE 01                         	dc.b	$01
000E1FFF E104                       	smpsAlterNote       $04
000E2001 01                         	dc.b	$01
000E2002 E103                       	smpsAlterNote       $03
000E2004 01                         	dc.b	$01
000E2005 E1FD                       	smpsAlterNote       $FD
000E2007 01                         	dc.b	$01
000E2008 ECF5                       	smpsPSGAlterVol     $F5
000E200A 9407                       	dc.b	nG1, $07
000E200C EC0B                       	smpsPSGAlterVol     $0B
000E200E 8004                       	dc.b	nRst, $04
000E2010 ECF5                       	smpsPSGAlterVol     $F5
000E2012 9406                       	dc.b	nG1, $06
000E2014 EC0B                       	smpsPSGAlterVol     $0B
000E2016 8007                       	dc.b	nRst, $07
000E2018 E103                       	smpsAlterNote       $03
000E201A 0101                       	dc.b	$01, $01
000E201C E100                       	smpsAlterNote       $00
000E201E 01                         	dc.b	$01
000E201F E1F9                       	smpsAlterNote       $F9
000E2021 01                         	dc.b	$01
000E2022 E1FD                       	smpsAlterNote       $FD
000E2024 ECF5                       	smpsPSGAlterVol     $F5
000E2026 9206                       	dc.b	nF1, $06
000E2028 EC04                       	smpsPSGAlterVol     $04
000E202A E701                       	dc.b	smpsNoAttack, $01
000E202C EC07                       	smpsPSGAlterVol     $07
000E202E 8003                       	dc.b	nRst, $03
000E2030 ECF5                       	smpsPSGAlterVol     $F5
000E2032 9206                       	dc.b	nF1, $06
000E2034 EC04                       	smpsPSGAlterVol     $04
000E2036 E701                       	dc.b	smpsNoAttack, $01
000E2038 EC07                       	smpsPSGAlterVol     $07
000E203A 8006                       	dc.b	nRst, $06
000E203C E100                       	smpsAlterNote       $00
000E203E 01                         	dc.b	$01
000E203F E104                       	smpsAlterNote       $04
000E2041 01                         	dc.b	$01
000E2042 E100                       	smpsAlterNote       $00
000E2044 01                         	dc.b	$01
000E2045 E1FB                       	smpsAlterNote       $FB
000E2047 01                         	dc.b	$01
000E2048 E1FD                       	smpsAlterNote       $FD
000E204A ECF5                       	smpsPSGAlterVol     $F5
000E204C 9406                       	dc.b	nG1, $06
000E204E EC04                       	smpsPSGAlterVol     $04
000E2050 E701                       	dc.b	smpsNoAttack, $01
000E2052 EC07                       	smpsPSGAlterVol     $07
000E2054 8003                       	dc.b	nRst, $03
000E2056 ECF5                       	smpsPSGAlterVol     $F5
000E2058 9407                       	dc.b	nG1, $07
000E205A EC0B                       	smpsPSGAlterVol     $0B
000E205C 8006                       	dc.b	nRst, $06
000E205E E100                       	smpsAlterNote       $00
000E2060 01                         	dc.b	$01
000E2061 E103                       	smpsAlterNote       $03
000E2063 0101                       	dc.b	$01, $01
000E2065 E1FD                       	smpsAlterNote       $FD
000E2067 01                         	dc.b	$01
000E2068 ECF5                       	smpsPSGAlterVol     $F5
000E206A 9207                       	dc.b	nF1, $07
000E206C EC0B                       	smpsPSGAlterVol     $0B
000E206E 8004                       	dc.b	nRst, $04
000E2070 ECF5                       	smpsPSGAlterVol     $F5
000E2072 9206                       	dc.b	nF1, $06
000E2074 EC04                       	smpsPSGAlterVol     $04
000E2076 E701                       	dc.b	smpsNoAttack, $01
000E2078 ECFC                       	smpsPSGAlterVol     $FC
000E207A E1FC                       	smpsAlterNote       $FC
000E207C 9006 8B03                  	dc.b	nEb1, $06, nBb0, $03
000E2080 EC04                       	smpsPSGAlterVol     $04
000E2082 E701                       	dc.b	smpsNoAttack, $01
000E2084 ECFC                       	smpsPSGAlterVol     $FC
000E2086 9003                       	dc.b	nEb1, $03
000E2088 E1FD                       	smpsAlterNote       $FD
000E208A 9403                       	dc.b	nG1, $03
000E208C EC04                       	smpsPSGAlterVol     $04
000E208E E701                       	dc.b	smpsNoAttack, $01
000E2090 E1FE                       	smpsAlterNote       $FE
000E2092 ECFC                       	smpsPSGAlterVol     $FC
000E2094 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000E2098 EC04                       	smpsPSGAlterVol     $04
000E209A E701                       	dc.b	smpsNoAttack, $01
000E209C EC07                       	smpsPSGAlterVol     $07
000E209E 8009                       	dc.b	nRst, $09
000E20A0 E100                       	smpsAlterNote       $00
000E20A2 01                         	dc.b	$01
000E20A3 F6F5 19                    	smpsJump            music84_Jump07
000E20A6                            
000E20A6                            ; PSG2 Data
000E20A6                            music84_PSG2:
000E20A6 E1FC                       	smpsAlterNote       $FC
000E20A8 EC04                       	smpsPSGAlterVol     $04
000E20AA 8F03                       	dc.b	nD1, $03
000E20AC E1FD                       	smpsAlterNote       $FD
000E20AE 9203                       	dc.b	nF1, $03
000E20B0 EC04                       	smpsPSGAlterVol     $04
000E20B2 E701                       	dc.b	smpsNoAttack, $01
000E20B4 E1FE                       	smpsAlterNote       $FE
000E20B6 ECFC                       	smpsPSGAlterVol     $FC
000E20B8 9603                       	dc.b	nA1, $03
000E20BA E1FD                       	smpsAlterNote       $FD
000E20BC 9103                       	dc.b	nE1, $03
000E20BE EC04                       	smpsPSGAlterVol     $04
000E20C0 E701                       	dc.b	smpsNoAttack, $01
000E20C2 ECFC                       	smpsPSGAlterVol     $FC
000E20C4 9403                       	dc.b	nG1, $03
000E20C6 E1FE                       	smpsAlterNote       $FE
000E20C8 9703                       	dc.b	nBb1, $03
000E20CA EC04                       	smpsPSGAlterVol     $04
000E20CC E701                       	dc.b	smpsNoAttack, $01
000E20CE E1FF                       	smpsAlterNote       $FF
000E20D0 ECFC                       	smpsPSGAlterVol     $FC
000E20D2 9B02                       	dc.b	nD2, $02
000E20D4 EC04                       	smpsPSGAlterVol     $04
000E20D6 E701                       	dc.b	smpsNoAttack, $01
000E20D8 ECFC                       	smpsPSGAlterVol     $FC
000E20DA E1FE                       	smpsAlterNote       $FE
000E20DC 9A03                       	dc.b	nCs2, $03
000E20DE EC0B                       	smpsPSGAlterVol     $0B
000E20E0 800A                       	dc.b	nRst, $0A
000E20E2 E102                       	smpsAlterNote       $02
000E20E4 01                         	dc.b	$01
000E20E5 E10A                       	smpsAlterNote       $0A
000E20E7 01                         	dc.b	$01
000E20E8 E102                       	smpsAlterNote       $02
000E20EA 01                         	dc.b	$01
000E20EB E1FC                       	smpsAlterNote       $FC
000E20ED 01                         	dc.b	$01
000E20EE E10A                       	smpsAlterNote       $0A
000E20F0 01                         	dc.b	$01
000E20F1 E1FC                       	smpsAlterNote       $FC
000E20F3 01                         	dc.b	$01
000E20F4 E108                       	smpsAlterNote       $08
000E20F6 01                         	dc.b	$01
000E20F7 E10A                       	smpsAlterNote       $0A
000E20F9 01                         	dc.b	$01
000E20FA E102                       	smpsAlterNote       $02
000E20FC 01                         	dc.b	$01
000E20FD E1F7                       	smpsAlterNote       $F7
000E20FF 0101                       	dc.b	$01, $01
000E2101 E102                       	smpsAlterNote       $02
000E2103 01                         	dc.b	$01
000E2104 E108                       	smpsAlterNote       $08
000E2106 0101                       	dc.b	$01, $01
000E2108 E1FC                       	smpsAlterNote       $FC
000E210A 01                         	dc.b	$01
000E210B E10A                       	smpsAlterNote       $0A
000E210D 01                         	dc.b	$01
000E210E E1F7                       	smpsAlterNote       $F7
000E2110 01                         	dc.b	$01
000E2111 E102                       	smpsAlterNote       $02
000E2113 01                         	dc.b	$01
000E2114 E10A                       	smpsAlterNote       $0A
000E2116 01                         	dc.b	$01
000E2117 E102                       	smpsAlterNote       $02
000E2119 01                         	dc.b	$01
000E211A E1FC                       	smpsAlterNote       $FC
000E211C 01                         	dc.b	$01
000E211D                            
000E211D                            music84_Jump06:
000E211D E10A                       	smpsAlterNote       $0A
000E211F 8001                       	dc.b	nRst, $01
000E2121 E1FC                       	smpsAlterNote       $FC
000E2123 01                         	dc.b	$01
000E2124 E108                       	smpsAlterNote       $08
000E2126 01                         	dc.b	$01
000E2127 E10A                       	smpsAlterNote       $0A
000E2129 01                         	dc.b	$01
000E212A E1FC                       	smpsAlterNote       $FC
000E212C ECF5                       	smpsPSGAlterVol     $F5
000E212E 8F06                       	dc.b	nD1, $06
000E2130 EC04                       	smpsPSGAlterVol     $04
000E2132 E701                       	dc.b	smpsNoAttack, $01
000E2134 EC07                       	smpsPSGAlterVol     $07
000E2136 8003                       	dc.b	nRst, $03
000E2138 ECF5                       	smpsPSGAlterVol     $F5
000E213A 8F06                       	dc.b	nD1, $06
000E213C EC04                       	smpsPSGAlterVol     $04
000E213E E701                       	dc.b	smpsNoAttack, $01
000E2140 EC07                       	smpsPSGAlterVol     $07
000E2142 8006                       	dc.b	nRst, $06
000E2144 E1FF                       	smpsAlterNote       $FF
000E2146 01                         	dc.b	$01
000E2147 E102                       	smpsAlterNote       $02
000E2149 01                         	dc.b	$01
000E214A E1FF                       	smpsAlterNote       $FF
000E214C 01                         	dc.b	$01
000E214D E1F9                       	smpsAlterNote       $F9
000E214F 01                         	dc.b	$01
000E2150 E1FC                       	smpsAlterNote       $FC
000E2152 ECF5                       	smpsPSGAlterVol     $F5
000E2154 9006                       	dc.b	nEb1, $06
000E2156 EC04                       	smpsPSGAlterVol     $04
000E2158 E701                       	dc.b	smpsNoAttack, $01
000E215A EC07                       	smpsPSGAlterVol     $07
000E215C 8003                       	dc.b	nRst, $03
000E215E ECF5                       	smpsPSGAlterVol     $F5
000E2160 9007                       	dc.b	nEb1, $07
000E2162 EC0B                       	smpsPSGAlterVol     $0B
000E2164 8006                       	dc.b	nRst, $06
000E2166 E1FF                       	smpsAlterNote       $FF
000E2168 01                         	dc.b	$01
000E2169 E103                       	smpsAlterNote       $03
000E216B 0101                       	dc.b	$01, $01
000E216D E1FC                       	smpsAlterNote       $FC
000E216F 01                         	dc.b	$01
000E2170 ECF5                       	smpsPSGAlterVol     $F5
000E2172 8F07                       	dc.b	nD1, $07
000E2174 EC0B                       	smpsPSGAlterVol     $0B
000E2176 8004                       	dc.b	nRst, $04
000E2178 ECF5                       	smpsPSGAlterVol     $F5
000E217A 8F06                       	dc.b	nD1, $06
000E217C EC04                       	smpsPSGAlterVol     $04
000E217E E701                       	dc.b	smpsNoAttack, $01
000E2180 EC07                       	smpsPSGAlterVol     $07
000E2182 8006                       	dc.b	nRst, $06
000E2184 E102                       	smpsAlterNote       $02
000E2186 01                         	dc.b	$01
000E2187 E103                       	smpsAlterNote       $03
000E2189 01                         	dc.b	$01
000E218A E1FF                       	smpsAlterNote       $FF
000E218C 01                         	dc.b	$01
000E218D E1F9                       	smpsAlterNote       $F9
000E218F 01                         	dc.b	$01
000E2190 E1FC                       	smpsAlterNote       $FC
000E2192 ECF5                       	smpsPSGAlterVol     $F5
000E2194 8F06                       	dc.b	nD1, $06
000E2196 EC04                       	smpsPSGAlterVol     $04
000E2198 E701                       	dc.b	smpsNoAttack, $01
000E219A EC07                       	smpsPSGAlterVol     $07
000E219C 8003                       	dc.b	nRst, $03
000E219E ECF5                       	smpsPSGAlterVol     $F5
000E21A0 8F06                       	dc.b	nD1, $06
000E21A2 EC04                       	smpsPSGAlterVol     $04
000E21A4 E701                       	dc.b	smpsNoAttack, $01
000E21A6 EC07                       	smpsPSGAlterVol     $07
000E21A8 8006                       	dc.b	nRst, $06
000E21AA E1FF                       	smpsAlterNote       $FF
000E21AC 01                         	dc.b	$01
000E21AD E103                       	smpsAlterNote       $03
000E21AF 01                         	dc.b	$01
000E21B0 E1FF                       	smpsAlterNote       $FF
000E21B2 01                         	dc.b	$01
000E21B3 E1FC                       	smpsAlterNote       $FC
000E21B5 01                         	dc.b	$01
000E21B6 ECF5                       	smpsPSGAlterVol     $F5
000E21B8 8F06                       	dc.b	nD1, $06
000E21BA EC04                       	smpsPSGAlterVol     $04
000E21BC E701                       	dc.b	smpsNoAttack, $01
000E21BE EC07                       	smpsPSGAlterVol     $07
000E21C0 8003                       	dc.b	nRst, $03
000E21C2 ECF5                       	smpsPSGAlterVol     $F5
000E21C4 8F07                       	dc.b	nD1, $07
000E21C6 EC0B                       	smpsPSGAlterVol     $0B
000E21C8 8007                       	dc.b	nRst, $07
000E21CA E101                       	smpsAlterNote       $01
000E21CC 0101                       	dc.b	$01, $01
000E21CE E1FC                       	smpsAlterNote       $FC
000E21D0 01                         	dc.b	$01
000E21D1 E1F9                       	smpsAlterNote       $F9
000E21D3 01                         	dc.b	$01
000E21D4 E1FC                       	smpsAlterNote       $FC
000E21D6 ECF5                       	smpsPSGAlterVol     $F5
000E21D8 9006                       	dc.b	nEb1, $06
000E21DA EC0B                       	smpsPSGAlterVol     $0B
000E21DC 8004                       	dc.b	nRst, $04
000E21DE ECF5                       	smpsPSGAlterVol     $F5
000E21E0 9006                       	dc.b	nEb1, $06
000E21E2 EC04                       	smpsPSGAlterVol     $04
000E21E4 E701                       	dc.b	smpsNoAttack, $01
000E21E6 EC07                       	smpsPSGAlterVol     $07
000E21E8 8006                       	dc.b	nRst, $06
000E21EA E100                       	smpsAlterNote       $00
000E21EC 01                         	dc.b	$01
000E21ED E102                       	smpsAlterNote       $02
000E21EF 01                         	dc.b	$01
000E21F0 E100                       	smpsAlterNote       $00
000E21F2 01                         	dc.b	$01
000E21F3 E1FD                       	smpsAlterNote       $FD
000E21F5 01                         	dc.b	$01
000E21F6 E1FF                       	smpsAlterNote       $FF
000E21F8 ECF5                       	smpsPSGAlterVol     $F5
000E21FA 9B06                       	dc.b	nD2, $06
000E21FC EC04                       	smpsPSGAlterVol     $04
000E21FE E701                       	dc.b	smpsNoAttack, $01
000E2200 EC07                       	smpsPSGAlterVol     $07
000E2202 8003                       	dc.b	nRst, $03
000E2204 ECF5                       	smpsPSGAlterVol     $F5
000E2206 9B07                       	dc.b	nD2, $07
000E2208 EC0B                       	smpsPSGAlterVol     $0B
000E220A 8006                       	dc.b	nRst, $06
000E220C E102                       	smpsAlterNote       $02
000E220E 01                         	dc.b	$01
000E220F E106                       	smpsAlterNote       $06
000E2211 01                         	dc.b	$01
000E2212 E105                       	smpsAlterNote       $05
000E2214 01                         	dc.b	$01
000E2215 E1FF                       	smpsAlterNote       $FF
000E2217 01                         	dc.b	$01
000E2218 ECF5                       	smpsPSGAlterVol     $F5
000E221A 9B07                       	dc.b	nD2, $07
000E221C EC0B                       	smpsPSGAlterVol     $0B
000E221E 8004                       	dc.b	nRst, $04
000E2220 ECF5                       	smpsPSGAlterVol     $F5
000E2222 9B06                       	dc.b	nD2, $06
000E2224 EC0B                       	smpsPSGAlterVol     $0B
000E2226 8007                       	dc.b	nRst, $07
000E2228 E105                       	smpsAlterNote       $05
000E222A 0101                       	dc.b	$01, $01
000E222C E102                       	smpsAlterNote       $02
000E222E 01                         	dc.b	$01
000E222F E1FC                       	smpsAlterNote       $FC
000E2231 01                         	dc.b	$01
000E2232 E1FF                       	smpsAlterNote       $FF
000E2234 ECF5                       	smpsPSGAlterVol     $F5
000E2236 9B06                       	dc.b	nD2, $06
000E2238 EC04                       	smpsPSGAlterVol     $04
000E223A E701                       	dc.b	smpsNoAttack, $01
000E223C EC07                       	smpsPSGAlterVol     $07
000E223E 8003                       	dc.b	nRst, $03
000E2240 ECF5                       	smpsPSGAlterVol     $F5
000E2242 9B06                       	dc.b	nD2, $06
000E2244 EC04                       	smpsPSGAlterVol     $04
000E2246 E701                       	dc.b	smpsNoAttack, $01
000E2248 EC07                       	smpsPSGAlterVol     $07
000E224A 8006                       	dc.b	nRst, $06
000E224C E102                       	smpsAlterNote       $02
000E224E 01                         	dc.b	$01
000E224F E106                       	smpsAlterNote       $06
000E2251 01                         	dc.b	$01
000E2252 E102                       	smpsAlterNote       $02
000E2254 01                         	dc.b	$01
000E2255 E1FF                       	smpsAlterNote       $FF
000E2257 01                         	dc.b	$01
000E2258 ECF5                       	smpsPSGAlterVol     $F5
000E225A 9B06                       	dc.b	nD2, $06
000E225C EC04                       	smpsPSGAlterVol     $04
000E225E E701                       	dc.b	smpsNoAttack, $01
000E2260 EC07                       	smpsPSGAlterVol     $07
000E2262 8003                       	dc.b	nRst, $03
000E2264 ECF5                       	smpsPSGAlterVol     $F5
000E2266 9B07                       	dc.b	nD2, $07
000E2268 EC0B                       	smpsPSGAlterVol     $0B
000E226A 8007                       	dc.b	nRst, $07
000E226C E105                       	smpsAlterNote       $05
000E226E 0101                       	dc.b	$01, $01
000E2270 E1FF                       	smpsAlterNote       $FF
000E2272 01                         	dc.b	$01
000E2273 E1FC                       	smpsAlterNote       $FC
000E2275 01                         	dc.b	$01
000E2276 E1FF                       	smpsAlterNote       $FF
000E2278 ECF5                       	smpsPSGAlterVol     $F5
000E227A 9B06                       	dc.b	nD2, $06
000E227C EC0B                       	smpsPSGAlterVol     $0B
000E227E 8004                       	dc.b	nRst, $04
000E2280 ECF5                       	smpsPSGAlterVol     $F5
000E2282 9B06                       	dc.b	nD2, $06
000E2284 EC04                       	smpsPSGAlterVol     $04
000E2286 E701                       	dc.b	smpsNoAttack, $01
000E2288 EC07                       	smpsPSGAlterVol     $07
000E228A 8006                       	dc.b	nRst, $06
000E228C E105                       	smpsAlterNote       $05
000E228E 01                         	dc.b	$01
000E228F E106                       	smpsAlterNote       $06
000E2291 01                         	dc.b	$01
000E2292 E102                       	smpsAlterNote       $02
000E2294 01                         	dc.b	$01
000E2295 E1FC                       	smpsAlterNote       $FC
000E2297 01                         	dc.b	$01
000E2298 E1FF                       	smpsAlterNote       $FF
000E229A ECF5                       	smpsPSGAlterVol     $F5
000E229C 9B06                       	dc.b	nD2, $06
000E229E EC04                       	smpsPSGAlterVol     $04
000E22A0 E701                       	dc.b	smpsNoAttack, $01
000E22A2 EC07                       	smpsPSGAlterVol     $07
000E22A4 8003                       	dc.b	nRst, $03
000E22A6 ECF5                       	smpsPSGAlterVol     $F5
000E22A8 9B06                       	dc.b	nD2, $06
000E22AA EC04                       	smpsPSGAlterVol     $04
000E22AC E701                       	dc.b	smpsNoAttack, $01
000E22AE EC07                       	smpsPSGAlterVol     $07
000E22B0 8006                       	dc.b	nRst, $06
000E22B2 E102                       	smpsAlterNote       $02
000E22B4 01                         	dc.b	$01
000E22B5 E106                       	smpsAlterNote       $06
000E22B7 01                         	dc.b	$01
000E22B8 E105                       	smpsAlterNote       $05
000E22BA 01                         	dc.b	$01
000E22BB E1FF                       	smpsAlterNote       $FF
000E22BD 01                         	dc.b	$01
000E22BE ECF5                       	smpsPSGAlterVol     $F5
000E22C0 9B07                       	dc.b	nD2, $07
000E22C2 EC0B                       	smpsPSGAlterVol     $0B
000E22C4 8004                       	dc.b	nRst, $04
000E22C6 ECF5                       	smpsPSGAlterVol     $F5
000E22C8 9B06                       	dc.b	nD2, $06
000E22CA EC0B                       	smpsPSGAlterVol     $0B
000E22CC 8007                       	dc.b	nRst, $07
000E22CE E105                       	smpsAlterNote       $05
000E22D0 0101                       	dc.b	$01, $01
000E22D2 E102                       	smpsAlterNote       $02
000E22D4 01                         	dc.b	$01
000E22D5 E1FC                       	smpsAlterNote       $FC
000E22D7 01                         	dc.b	$01
000E22D8 E1FF                       	smpsAlterNote       $FF
000E22DA ECF5                       	smpsPSGAlterVol     $F5
000E22DC 9B06                       	dc.b	nD2, $06
000E22DE EC04                       	smpsPSGAlterVol     $04
000E22E0 E701                       	dc.b	smpsNoAttack, $01
000E22E2 EC07                       	smpsPSGAlterVol     $07
000E22E4 8003                       	dc.b	nRst, $03
000E22E6 ECF5                       	smpsPSGAlterVol     $F5
000E22E8 9B06                       	dc.b	nD2, $06
000E22EA EC04                       	smpsPSGAlterVol     $04
000E22EC E701                       	dc.b	smpsNoAttack, $01
000E22EE EC07                       	smpsPSGAlterVol     $07
000E22F0 8006                       	dc.b	nRst, $06
000E22F2 E102                       	smpsAlterNote       $02
000E22F4 01                         	dc.b	$01
000E22F5 E106                       	smpsAlterNote       $06
000E22F7 01                         	dc.b	$01
000E22F8 E102                       	smpsAlterNote       $02
000E22FA 01                         	dc.b	$01
000E22FB E1FF                       	smpsAlterNote       $FF
000E22FD 01                         	dc.b	$01
000E22FE ECF5                       	smpsPSGAlterVol     $F5
000E2300 9B06                       	dc.b	nD2, $06
000E2302 EC04                       	smpsPSGAlterVol     $04
000E2304 E701                       	dc.b	smpsNoAttack, $01
000E2306 EC07                       	smpsPSGAlterVol     $07
000E2308 8003                       	dc.b	nRst, $03
000E230A ECF5                       	smpsPSGAlterVol     $F5
000E230C 9B07                       	dc.b	nD2, $07
000E230E E1FE                       	smpsAlterNote       $FE
000E2310 9706                       	dc.b	nBb1, $06
000E2312 EC04                       	smpsPSGAlterVol     $04
000E2314 E701                       	dc.b	smpsNoAttack, $01
000E2316 ECFC                       	smpsPSGAlterVol     $FC
000E2318 9703                       	dc.b	nBb1, $03
000E231A EC04                       	smpsPSGAlterVol     $04
000E231C E701                       	dc.b	smpsNoAttack, $01
000E231E ECFC                       	smpsPSGAlterVol     $FC
000E2320 9702                       	dc.b	nBb1, $02
000E2322 EC04                       	smpsPSGAlterVol     $04
000E2324 E701                       	dc.b	smpsNoAttack, $01
000E2326 ECFC                       	smpsPSGAlterVol     $FC
000E2328 9606                       	dc.b	nA1, $06
000E232A EC04                       	smpsPSGAlterVol     $04
000E232C E701                       	dc.b	smpsNoAttack, $01
000E232E EC07                       	smpsPSGAlterVol     $07
000E2330 8006                       	dc.b	nRst, $06
000E2332 E101                       	smpsAlterNote       $01
000E2334 01                         	dc.b	$01
000E2335 E107                       	smpsAlterNote       $07
000E2337 01                         	dc.b	$01
000E2338 E101                       	smpsAlterNote       $01
000E233A 01                         	dc.b	$01
000E233B E1F8                       	smpsAlterNote       $F8
000E233D 01                         	dc.b	$01
000E233E E1F7                       	smpsAlterNote       $F7
000E2340 01                         	dc.b	$01
000E2341 E1FC                       	smpsAlterNote       $FC
000E2343 01                         	dc.b	$01
000E2344 E106                       	smpsAlterNote       $06
000E2346 01                         	dc.b	$01
000E2347 E107                       	smpsAlterNote       $07
000E2349 01                         	dc.b	$01
000E234A E101                       	smpsAlterNote       $01
000E234C 01                         	dc.b	$01
000E234D E1F8                       	smpsAlterNote       $F8
000E234F 0101                       	dc.b	$01, $01
000E2351 E1FC                       	smpsAlterNote       $FC
000E2353 ECF5                       	smpsPSGAlterVol     $F5
000E2355 8F06                       	dc.b	nD1, $06
000E2357 EC04                       	smpsPSGAlterVol     $04
000E2359 E701                       	dc.b	smpsNoAttack, $01
000E235B EC07                       	smpsPSGAlterVol     $07
000E235D 8003                       	dc.b	nRst, $03
000E235F ECF5                       	smpsPSGAlterVol     $F5
000E2361 8F06                       	dc.b	nD1, $06
000E2363 EC04                       	smpsPSGAlterVol     $04
000E2365 E701                       	dc.b	smpsNoAttack, $01
000E2367 EC07                       	smpsPSGAlterVol     $07
000E2369 8006                       	dc.b	nRst, $06
000E236B E1FF                       	smpsAlterNote       $FF
000E236D 01                         	dc.b	$01
000E236E E102                       	smpsAlterNote       $02
000E2370 01                         	dc.b	$01
000E2371 E101                       	smpsAlterNote       $01
000E2373 01                         	dc.b	$01
000E2374 E1FC                       	smpsAlterNote       $FC
000E2376 01                         	dc.b	$01
000E2377 ECF5                       	smpsPSGAlterVol     $F5
000E2379 9007                       	dc.b	nEb1, $07
000E237B EC0B                       	smpsPSGAlterVol     $0B
000E237D 8004                       	dc.b	nRst, $04
000E237F ECF5                       	smpsPSGAlterVol     $F5
000E2381 9006                       	dc.b	nEb1, $06
000E2383 EC0B                       	smpsPSGAlterVol     $0B
000E2385 8007                       	dc.b	nRst, $07
000E2387 E103                       	smpsAlterNote       $03
000E2389 0101                       	dc.b	$01, $01
000E238B E1FC                       	smpsAlterNote       $FC
000E238D 01                         	dc.b	$01
000E238E E1F9                       	smpsAlterNote       $F9
000E2390 01                         	dc.b	$01
000E2391 E1FC                       	smpsAlterNote       $FC
000E2393 ECF5                       	smpsPSGAlterVol     $F5
000E2395 8F06                       	dc.b	nD1, $06
000E2397 EC04                       	smpsPSGAlterVol     $04
000E2399 E701                       	dc.b	smpsNoAttack, $01
000E239B EC07                       	smpsPSGAlterVol     $07
000E239D 8003                       	dc.b	nRst, $03
000E239F ECF5                       	smpsPSGAlterVol     $F5
000E23A1 8F06                       	dc.b	nD1, $06
000E23A3 EC04                       	smpsPSGAlterVol     $04
000E23A5 E701                       	dc.b	smpsNoAttack, $01
000E23A7 EC07                       	smpsPSGAlterVol     $07
000E23A9 8006                       	dc.b	nRst, $06
000E23AB E1FF                       	smpsAlterNote       $FF
000E23AD 01                         	dc.b	$01
000E23AE E103                       	smpsAlterNote       $03
000E23B0 01                         	dc.b	$01
000E23B1 E1FF                       	smpsAlterNote       $FF
000E23B3 01                         	dc.b	$01
000E23B4 E1F9                       	smpsAlterNote       $F9
000E23B6 01                         	dc.b	$01
000E23B7 E1FC                       	smpsAlterNote       $FC
000E23B9 ECF5                       	smpsPSGAlterVol     $F5
000E23BB 8F06                       	dc.b	nD1, $06
000E23BD EC04                       	smpsPSGAlterVol     $04
000E23BF E701                       	dc.b	smpsNoAttack, $01
000E23C1 EC07                       	smpsPSGAlterVol     $07
000E23C3 8003                       	dc.b	nRst, $03
000E23C5 ECF5                       	smpsPSGAlterVol     $F5
000E23C7 8F07                       	dc.b	nD1, $07
000E23C9 EC0B                       	smpsPSGAlterVol     $0B
000E23CB 8006                       	dc.b	nRst, $06
000E23CD E1FF                       	smpsAlterNote       $FF
000E23CF 01                         	dc.b	$01
000E23D0 E102                       	smpsAlterNote       $02
000E23D2 0101                       	dc.b	$01, $01
000E23D4 E1FC                       	smpsAlterNote       $FC
000E23D6 01                         	dc.b	$01
000E23D7 ECF5                       	smpsPSGAlterVol     $F5
000E23D9 8F07                       	dc.b	nD1, $07
000E23DB EC0B                       	smpsPSGAlterVol     $0B
000E23DD 8004                       	dc.b	nRst, $04
000E23DF ECF5                       	smpsPSGAlterVol     $F5
000E23E1 8F06                       	dc.b	nD1, $06
000E23E3 EC04                       	smpsPSGAlterVol     $04
000E23E5 E701                       	dc.b	smpsNoAttack, $01
000E23E7 EC07                       	smpsPSGAlterVol     $07
000E23E9 8006                       	dc.b	nRst, $06
000E23EB E101                       	smpsAlterNote       $01
000E23ED 01                         	dc.b	$01
000E23EE E102                       	smpsAlterNote       $02
000E23F0 01                         	dc.b	$01
000E23F1 E1FF                       	smpsAlterNote       $FF
000E23F3 01                         	dc.b	$01
000E23F4 E1F9                       	smpsAlterNote       $F9
000E23F6 01                         	dc.b	$01
000E23F7 E1FC                       	smpsAlterNote       $FC
000E23F9 ECF5                       	smpsPSGAlterVol     $F5
000E23FB 9006                       	dc.b	nEb1, $06
000E23FD EC04                       	smpsPSGAlterVol     $04
000E23FF E701                       	dc.b	smpsNoAttack, $01
000E2401 EC07                       	smpsPSGAlterVol     $07
000E2403 8003                       	dc.b	nRst, $03
000E2405 ECF5                       	smpsPSGAlterVol     $F5
000E2407 9006                       	dc.b	nEb1, $06
000E2409 EC04                       	smpsPSGAlterVol     $04
000E240B E701                       	dc.b	smpsNoAttack, $01
000E240D EC07                       	smpsPSGAlterVol     $07
000E240F 8006                       	dc.b	nRst, $06
000E2411 E100                       	smpsAlterNote       $00
000E2413 01                         	dc.b	$01
000E2414 E102                       	smpsAlterNote       $02
000E2416 01                         	dc.b	$01
000E2417 E100                       	smpsAlterNote       $00
000E2419 01                         	dc.b	$01
000E241A E1FF                       	smpsAlterNote       $FF
000E241C 01                         	dc.b	$01
000E241D ECF5                       	smpsPSGAlterVol     $F5
000E241F 9B06                       	dc.b	nD2, $06
000E2421 EC04                       	smpsPSGAlterVol     $04
000E2423 E701                       	dc.b	smpsNoAttack, $01
000E2425 EC07                       	smpsPSGAlterVol     $07
000E2427 8003                       	dc.b	nRst, $03
000E2429 ECF5                       	smpsPSGAlterVol     $F5
000E242B 9B07                       	dc.b	nD2, $07
000E242D EC0B                       	smpsPSGAlterVol     $0B
000E242F 8007                       	dc.b	nRst, $07
000E2431 E105                       	smpsAlterNote       $05
000E2433 0101                       	dc.b	$01, $01
000E2435 E1FF                       	smpsAlterNote       $FF
000E2437 01                         	dc.b	$01
000E2438 E1FC                       	smpsAlterNote       $FC
000E243A 01                         	dc.b	$01
000E243B E1FF                       	smpsAlterNote       $FF
000E243D ECF5                       	smpsPSGAlterVol     $F5
000E243F 9B06                       	dc.b	nD2, $06
000E2441 EC0B                       	smpsPSGAlterVol     $0B
000E2443 8004                       	dc.b	nRst, $04
000E2445 ECF5                       	smpsPSGAlterVol     $F5
000E2447 9B06                       	dc.b	nD2, $06
000E2449 EC04                       	smpsPSGAlterVol     $04
000E244B E701                       	dc.b	smpsNoAttack, $01
000E244D EC07                       	smpsPSGAlterVol     $07
000E244F 8006                       	dc.b	nRst, $06
000E2451 E102                       	smpsAlterNote       $02
000E2453 01                         	dc.b	$01
000E2454 E106                       	smpsAlterNote       $06
000E2456 01                         	dc.b	$01
000E2457 E102                       	smpsAlterNote       $02
000E2459 01                         	dc.b	$01
000E245A E1FC                       	smpsAlterNote       $FC
000E245C 01                         	dc.b	$01
000E245D E1FF                       	smpsAlterNote       $FF
000E245F ECF5                       	smpsPSGAlterVol     $F5
000E2461 9B06                       	dc.b	nD2, $06
000E2463 EC04                       	smpsPSGAlterVol     $04
000E2465 E701                       	dc.b	smpsNoAttack, $01
000E2467 EC07                       	smpsPSGAlterVol     $07
000E2469 8003                       	dc.b	nRst, $03
000E246B ECF5                       	smpsPSGAlterVol     $F5
000E246D 9B07                       	dc.b	nD2, $07
000E246F EC0B                       	smpsPSGAlterVol     $0B
000E2471 8006                       	dc.b	nRst, $06
000E2473 E102                       	smpsAlterNote       $02
000E2475 01                         	dc.b	$01
000E2476 E105                       	smpsAlterNote       $05
000E2478 0101                       	dc.b	$01, $01
000E247A E1FF                       	smpsAlterNote       $FF
000E247C 01                         	dc.b	$01
000E247D ECF5                       	smpsPSGAlterVol     $F5
000E247F 9B07                       	dc.b	nD2, $07
000E2481 EC0B                       	smpsPSGAlterVol     $0B
000E2483 8004                       	dc.b	nRst, $04
000E2485 ECF5                       	smpsPSGAlterVol     $F5
000E2487 9B06                       	dc.b	nD2, $06
000E2489 EC0B                       	smpsPSGAlterVol     $0B
000E248B 8007                       	dc.b	nRst, $07
000E248D E105                       	smpsAlterNote       $05
000E248F 0101                       	dc.b	$01, $01
000E2491 E102                       	smpsAlterNote       $02
000E2493 01                         	dc.b	$01
000E2494 E1FC                       	smpsAlterNote       $FC
000E2496 01                         	dc.b	$01
000E2497 E1FF                       	smpsAlterNote       $FF
000E2499 ECF5                       	smpsPSGAlterVol     $F5
000E249B 9B06                       	dc.b	nD2, $06
000E249D EC04                       	smpsPSGAlterVol     $04
000E249F E701                       	dc.b	smpsNoAttack, $01
000E24A1 EC07                       	smpsPSGAlterVol     $07
000E24A3 8003                       	dc.b	nRst, $03
000E24A5 ECF5                       	smpsPSGAlterVol     $F5
000E24A7 9B06                       	dc.b	nD2, $06
000E24A9 EC04                       	smpsPSGAlterVol     $04
000E24AB E701                       	dc.b	smpsNoAttack, $01
000E24AD EC07                       	smpsPSGAlterVol     $07
000E24AF 8006                       	dc.b	nRst, $06
000E24B1 E102                       	smpsAlterNote       $02
000E24B3 01                         	dc.b	$01
000E24B4 E106                       	smpsAlterNote       $06
000E24B6 01                         	dc.b	$01
000E24B7 E102                       	smpsAlterNote       $02
000E24B9 01                         	dc.b	$01
000E24BA E1FF                       	smpsAlterNote       $FF
000E24BC 01                         	dc.b	$01
000E24BD ECF5                       	smpsPSGAlterVol     $F5
000E24BF 9B06                       	dc.b	nD2, $06
000E24C1 EC04                       	smpsPSGAlterVol     $04
000E24C3 E701                       	dc.b	smpsNoAttack, $01
000E24C5 EC07                       	smpsPSGAlterVol     $07
000E24C7 8003                       	dc.b	nRst, $03
000E24C9 ECF5                       	smpsPSGAlterVol     $F5
000E24CB 9B07                       	dc.b	nD2, $07
000E24CD EC0B                       	smpsPSGAlterVol     $0B
000E24CF 8007                       	dc.b	nRst, $07
000E24D1 E105                       	smpsAlterNote       $05
000E24D3 0101                       	dc.b	$01, $01
000E24D5 E1FF                       	smpsAlterNote       $FF
000E24D7 01                         	dc.b	$01
000E24D8 E1FC                       	smpsAlterNote       $FC
000E24DA 01                         	dc.b	$01
000E24DB E1FF                       	smpsAlterNote       $FF
000E24DD ECF5                       	smpsPSGAlterVol     $F5
000E24DF 9B06                       	dc.b	nD2, $06
000E24E1 EC0B                       	smpsPSGAlterVol     $0B
000E24E3 8004                       	dc.b	nRst, $04
000E24E5 ECF5                       	smpsPSGAlterVol     $F5
000E24E7 9B06                       	dc.b	nD2, $06
000E24E9 EC04                       	smpsPSGAlterVol     $04
000E24EB E701                       	dc.b	smpsNoAttack, $01
000E24ED EC07                       	smpsPSGAlterVol     $07
000E24EF 8006                       	dc.b	nRst, $06
000E24F1 E102                       	smpsAlterNote       $02
000E24F3 01                         	dc.b	$01
000E24F4 E106                       	smpsAlterNote       $06
000E24F6 01                         	dc.b	$01
000E24F7 E102                       	smpsAlterNote       $02
000E24F9 01                         	dc.b	$01
000E24FA E1FC                       	smpsAlterNote       $FC
000E24FC 01                         	dc.b	$01
000E24FD E1FF                       	smpsAlterNote       $FF
000E24FF ECF5                       	smpsPSGAlterVol     $F5
000E2501 9B06                       	dc.b	nD2, $06
000E2503 EC04                       	smpsPSGAlterVol     $04
000E2505 E701                       	dc.b	smpsNoAttack, $01
000E2507 EC07                       	smpsPSGAlterVol     $07
000E2509 8003                       	dc.b	nRst, $03
000E250B ECF5                       	smpsPSGAlterVol     $F5
000E250D 9B06                       	dc.b	nD2, $06
000E250F EC04                       	smpsPSGAlterVol     $04
000E2511 E701                       	dc.b	smpsNoAttack, $01
000E2513 EC07                       	smpsPSGAlterVol     $07
000E2515 8006                       	dc.b	nRst, $06
000E2517 E102                       	smpsAlterNote       $02
000E2519 01                         	dc.b	$01
000E251A E106                       	smpsAlterNote       $06
000E251C 01                         	dc.b	$01
000E251D E105                       	smpsAlterNote       $05
000E251F 01                         	dc.b	$01
000E2520 E1FF                       	smpsAlterNote       $FF
000E2522 01                         	dc.b	$01
000E2523 ECF5                       	smpsPSGAlterVol     $F5
000E2525 9B07                       	dc.b	nD2, $07
000E2527 EC0B                       	smpsPSGAlterVol     $0B
000E2529 8004                       	dc.b	nRst, $04
000E252B ECF5                       	smpsPSGAlterVol     $F5
000E252D 9B06                       	dc.b	nD2, $06
000E252F EC0B                       	smpsPSGAlterVol     $0B
000E2531 8007                       	dc.b	nRst, $07
000E2533 E105                       	smpsAlterNote       $05
000E2535 0101                       	dc.b	$01, $01
000E2537 E101                       	smpsAlterNote       $01
000E2539 01                         	dc.b	$01
000E253A E1FB                       	smpsAlterNote       $FB
000E253C 01                         	dc.b	$01
000E253D E1FE                       	smpsAlterNote       $FE
000E253F ECF5                       	smpsPSGAlterVol     $F5
000E2541 9A06                       	dc.b	nCs2, $06
000E2543 EC04                       	smpsPSGAlterVol     $04
000E2545 E701                       	dc.b	smpsNoAttack, $01
000E2547 EC07                       	smpsPSGAlterVol     $07
000E2549 8003                       	dc.b	nRst, $03
000E254B ECF5                       	smpsPSGAlterVol     $F5
000E254D 9A06                       	dc.b	nCs2, $06
000E254F EC04                       	smpsPSGAlterVol     $04
000E2551 E701                       	dc.b	smpsNoAttack, $01
000E2553 EC07                       	smpsPSGAlterVol     $07
000E2555 8003                       	dc.b	nRst, $03
000E2557 E1FC                       	smpsAlterNote       $FC
000E2559 ECF5                       	smpsPSGAlterVol     $F5
000E255B 8F07                       	dc.b	nD1, $07
000E255D EC0B                       	smpsPSGAlterVol     $0B
000E255F 8006                       	dc.b	nRst, $06
000E2561 E1FF                       	smpsAlterNote       $FF
000E2563 01                         	dc.b	$01
000E2564 E103                       	smpsAlterNote       $03
000E2566 01                         	dc.b	$01
000E2567 E102                       	smpsAlterNote       $02
000E2569 01                         	dc.b	$01
000E256A E1FC                       	smpsAlterNote       $FC
000E256C 01                         	dc.b	$01
000E256D E1F8                       	smpsAlterNote       $F8
000E256F 01                         	dc.b	$01
000E2570 E1FC                       	smpsAlterNote       $FC
000E2572 01                         	dc.b	$01
000E2573 E1FF                       	smpsAlterNote       $FF
000E2575 01                         	dc.b	$01
000E2576 E103                       	smpsAlterNote       $03
000E2578 01                         	dc.b	$01
000E2579 E1FC                       	smpsAlterNote       $FC
000E257B ECF5                       	smpsPSGAlterVol     $F5
000E257D 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000E2581 EC04                       	smpsPSGAlterVol     $04
000E2583 E701                       	dc.b	smpsNoAttack, $01
000E2585 EC07                       	smpsPSGAlterVol     $07
000E2587 8009                       	dc.b	nRst, $09
000E2589 E1FF                       	smpsAlterNote       $FF
000E258B 01                         	dc.b	$01
000E258C E103                       	smpsAlterNote       $03
000E258E 01                         	dc.b	$01
000E258F E102                       	smpsAlterNote       $02
000E2591 01                         	dc.b	$01
000E2592 E1FC                       	smpsAlterNote       $FC
000E2594 01                         	dc.b	$01
000E2595 E1F8                       	smpsAlterNote       $F8
000E2597 01                         	dc.b	$01
000E2598 E1FC                       	smpsAlterNote       $FC
000E259A 01                         	dc.b	$01
000E259B E1FF                       	smpsAlterNote       $FF
000E259D 01                         	dc.b	$01
000E259E E103                       	smpsAlterNote       $03
000E25A0 01                         	dc.b	$01
000E25A1 E1FF                       	smpsAlterNote       $FF
000E25A3 01                         	dc.b	$01
000E25A4 E1F9                       	smpsAlterNote       $F9
000E25A6 01                         	dc.b	$01
000E25A7 E1F8                       	smpsAlterNote       $F8
000E25A9 01                         	dc.b	$01
000E25AA E1FC                       	smpsAlterNote       $FC
000E25AC 01                         	dc.b	$01
000E25AD E102                       	smpsAlterNote       $02
000E25AF 0101                       	dc.b	$01, $01
000E25B1 E1FF                       	smpsAlterNote       $FF
000E25B3 01                         	dc.b	$01
000E25B4 E1FC                       	smpsAlterNote       $FC
000E25B6 ECF5                       	smpsPSGAlterVol     $F5
000E25B8 8F02                       	dc.b	nD1, $02
000E25BA EC04                       	smpsPSGAlterVol     $04
000E25BC E701                       	dc.b	smpsNoAttack, $01
000E25BE ECFC                       	smpsPSGAlterVol     $FC
000E25C0 E1FB                       	smpsAlterNote       $FB
000E25C2 8D06                       	dc.b	nC1, $06
000E25C4 EC04                       	smpsPSGAlterVol     $04
000E25C6 E701                       	dc.b	smpsNoAttack, $01
000E25C8 EC07                       	smpsPSGAlterVol     $07
000E25CA 8006                       	dc.b	nRst, $06
000E25CC E1FE                       	smpsAlterNote       $FE
000E25CE 01                         	dc.b	$01
000E25CF E102                       	smpsAlterNote       $02
000E25D1 01                         	dc.b	$01
000E25D2 E1FE                       	smpsAlterNote       $FE
000E25D4 01                         	dc.b	$01
000E25D5 E1FB                       	smpsAlterNote       $FB
000E25D7 01                         	dc.b	$01
000E25D8 E1F7                       	smpsAlterNote       $F7
000E25DA 01                         	dc.b	$01
000E25DB E1FB                       	smpsAlterNote       $FB
000E25DD 01                         	dc.b	$01
000E25DE E101                       	smpsAlterNote       $01
000E25E0 01                         	dc.b	$01
000E25E1 E102                       	smpsAlterNote       $02
000E25E3 01                         	dc.b	$01
000E25E4 E1FB                       	smpsAlterNote       $FB
000E25E6 ECF5                       	smpsPSGAlterVol     $F5
000E25E8 8D02                       	dc.b	nC1, $02
000E25EA EC04                       	smpsPSGAlterVol     $04
000E25EC E701                       	dc.b	smpsNoAttack, $01
000E25EE E1FC                       	smpsAlterNote       $FC
000E25F0 ECFC                       	smpsPSGAlterVol     $FC
000E25F2 8F0D                       	dc.b	nD1, $0D
000E25F4 E1FF                       	smpsAlterNote       $FF
000E25F6 E701                       	dc.b	smpsNoAttack, $01
000E25F8 E103                       	smpsAlterNote       $03
000E25FA E701                       	dc.b	smpsNoAttack, $01
000E25FC E1FF                       	smpsAlterNote       $FF
000E25FE E701                       	dc.b	smpsNoAttack, $01
000E2600 E1FC                       	smpsAlterNote       $FC
000E2602 E701                       	dc.b	smpsNoAttack, $01
000E2604 E1F8                       	smpsAlterNote       $F8
000E2606 E701                       	dc.b	smpsNoAttack, $01
000E2608 E1FC                       	smpsAlterNote       $FC
000E260A E701                       	dc.b	smpsNoAttack, $01
000E260C E102                       	smpsAlterNote       $02
000E260E E701                       	dc.b	smpsNoAttack, $01
000E2610 E103                       	smpsAlterNote       $03
000E2612 E701                       	dc.b	smpsNoAttack, $01
000E2614 E1FF                       	smpsAlterNote       $FF
000E2616 E701                       	dc.b	smpsNoAttack, $01
000E2618 E1F9                       	smpsAlterNote       $F9
000E261A E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E261E E1FC                       	smpsAlterNote       $FC
000E2620 E701                       	dc.b	smpsNoAttack, $01
000E2622 E102                       	smpsAlterNote       $02
000E2624 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E2628 E1FC                       	smpsAlterNote       $FC
000E262A E701                       	dc.b	smpsNoAttack, $01
000E262C E1F9                       	smpsAlterNote       $F9
000E262E E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E2632 E1FF                       	smpsAlterNote       $FF
000E2634 EC04                       	smpsPSGAlterVol     $04
000E2636 E701                       	dc.b	smpsNoAttack, $01
000E2638 EC07                       	smpsPSGAlterVol     $07
000E263A E103                       	smpsAlterNote       $03
000E263C 8001                       	dc.b	nRst, $01
000E263E E102                       	smpsAlterNote       $02
000E2640 01                         	dc.b	$01
000E2641 E1FB                       	smpsAlterNote       $FB
000E2643 01                         	dc.b	$01
000E2644 E1F7                       	smpsAlterNote       $F7
000E2646 01                         	dc.b	$01
000E2647 E1FB                       	smpsAlterNote       $FB
000E2649 01                         	dc.b	$01
000E264A E102                       	smpsAlterNote       $02
000E264C 01                         	dc.b	$01
000E264D E103                       	smpsAlterNote       $03
000E264F 01                         	dc.b	$01
000E2650 E1FB                       	smpsAlterNote       $FB
000E2652 ECF5                       	smpsPSGAlterVol     $F5
000E2654 8E06                       	dc.b	nCs1, $06
000E2656 EC04                       	smpsPSGAlterVol     $04
000E2658 E701                       	dc.b	smpsNoAttack, $01
000E265A EC07                       	smpsPSGAlterVol     $07
000E265C 8003                       	dc.b	nRst, $03
000E265E ECF5                       	smpsPSGAlterVol     $F5
000E2660 8E06                       	dc.b	nCs1, $06
000E2662 EC04                       	smpsPSGAlterVol     $04
000E2664 E701                       	dc.b	smpsNoAttack, $01
000E2666 EC07                       	smpsPSGAlterVol     $07
000E2668 8006                       	dc.b	nRst, $06
000E266A E1FE                       	smpsAlterNote       $FE
000E266C 01                         	dc.b	$01
000E266D E102                       	smpsAlterNote       $02
000E266F 01                         	dc.b	$01
000E2670 E1FE                       	smpsAlterNote       $FE
000E2672 01                         	dc.b	$01
000E2673 E1F9                       	smpsAlterNote       $F9
000E2675 01                         	dc.b	$01
000E2676 E1FC                       	smpsAlterNote       $FC
000E2678 ECF5                       	smpsPSGAlterVol     $F5
000E267A 8F06                       	dc.b	nD1, $06
000E267C EC04                       	smpsPSGAlterVol     $04
000E267E E701                       	dc.b	smpsNoAttack, $01
000E2680 EC07                       	smpsPSGAlterVol     $07
000E2682 8003                       	dc.b	nRst, $03
000E2684 ECF5                       	smpsPSGAlterVol     $F5
000E2686 8F07                       	dc.b	nD1, $07
000E2688 EC0B                       	smpsPSGAlterVol     $0B
000E268A 8006                       	dc.b	nRst, $06
000E268C E1FF                       	smpsAlterNote       $FF
000E268E 01                         	dc.b	$01
000E268F E102                       	smpsAlterNote       $02
000E2691 0101                       	dc.b	$01, $01
000E2693 E1FB                       	smpsAlterNote       $FB
000E2695 01                         	dc.b	$01
000E2696 ECF5                       	smpsPSGAlterVol     $F5
000E2698 8E07                       	dc.b	nCs1, $07
000E269A EC0B                       	smpsPSGAlterVol     $0B
000E269C 8004                       	dc.b	nRst, $04
000E269E ECF5                       	smpsPSGAlterVol     $F5
000E26A0 8E06                       	dc.b	nCs1, $06
000E26A2 EC04                       	smpsPSGAlterVol     $04
000E26A4 E701                       	dc.b	smpsNoAttack, $01
000E26A6 EC07                       	smpsPSGAlterVol     $07
000E26A8 8006                       	dc.b	nRst, $06
000E26AA E101                       	smpsAlterNote       $01
000E26AC 01                         	dc.b	$01
000E26AD E102                       	smpsAlterNote       $02
000E26AF 01                         	dc.b	$01
000E26B0 E1FE                       	smpsAlterNote       $FE
000E26B2 01                         	dc.b	$01
000E26B3 E1F8                       	smpsAlterNote       $F8
000E26B5 01                         	dc.b	$01
000E26B6 E1FB                       	smpsAlterNote       $FB
000E26B8 ECF5                       	smpsPSGAlterVol     $F5
000E26BA 8E06                       	dc.b	nCs1, $06
000E26BC EC04                       	smpsPSGAlterVol     $04
000E26BE E701                       	dc.b	smpsNoAttack, $01
000E26C0 EC07                       	smpsPSGAlterVol     $07
000E26C2 8003                       	dc.b	nRst, $03
000E26C4 ECF5                       	smpsPSGAlterVol     $F5
000E26C6 8E06                       	dc.b	nCs1, $06
000E26C8 EC04                       	smpsPSGAlterVol     $04
000E26CA E701                       	dc.b	smpsNoAttack, $01
000E26CC EC07                       	smpsPSGAlterVol     $07
000E26CE 8004                       	dc.b	nRst, $04
000E26D0 E1FC                       	smpsAlterNote       $FC
000E26D2 ECF5                       	smpsPSGAlterVol     $F5
000E26D4 8F06                       	dc.b	nD1, $06
000E26D6 EC0B                       	smpsPSGAlterVol     $0B
000E26D8 8006                       	dc.b	nRst, $06
000E26DA E1FF                       	smpsAlterNote       $FF
000E26DC 01                         	dc.b	$01
000E26DD E102                       	smpsAlterNote       $02
000E26DF 0101                       	dc.b	$01, $01
000E26E1 E1FC                       	smpsAlterNote       $FC
000E26E3 01                         	dc.b	$01
000E26E4 E1F8                       	smpsAlterNote       $F8
000E26E6 01                         	dc.b	$01
000E26E7 E1F9                       	smpsAlterNote       $F9
000E26E9 01                         	dc.b	$01
000E26EA E1FF                       	smpsAlterNote       $FF
000E26EC 01                         	dc.b	$01
000E26ED E103                       	smpsAlterNote       $03
000E26EF 01                         	dc.b	$01
000E26F0 E1FC                       	smpsAlterNote       $FC
000E26F2 ECF5                       	smpsPSGAlterVol     $F5
000E26F4 8F03 8F03                  	dc.b	nD1, $03, nD1, $03
000E26F8 EC04                       	smpsPSGAlterVol     $04
000E26FA E701                       	dc.b	smpsNoAttack, $01
000E26FC EC07                       	smpsPSGAlterVol     $07
000E26FE 8009                       	dc.b	nRst, $09
000E2700 E1FF                       	smpsAlterNote       $FF
000E2702 01                         	dc.b	$01
000E2703 E102                       	smpsAlterNote       $02
000E2705 0101                       	dc.b	$01, $01
000E2707 E1FC                       	smpsAlterNote       $FC
000E2709 01                         	dc.b	$01
000E270A E1F8                       	smpsAlterNote       $F8
000E270C 01                         	dc.b	$01
000E270D E1F9                       	smpsAlterNote       $F9
000E270F 01                         	dc.b	$01
000E2710 E1FF                       	smpsAlterNote       $FF
000E2712 01                         	dc.b	$01
000E2713 E103                       	smpsAlterNote       $03
000E2715 01                         	dc.b	$01
000E2716 E1FF                       	smpsAlterNote       $FF
000E2718 01                         	dc.b	$01
000E2719 E1FC                       	smpsAlterNote       $FC
000E271B 01                         	dc.b	$01
000E271C E1F8                       	smpsAlterNote       $F8
000E271E 01                         	dc.b	$01
000E271F E1FC                       	smpsAlterNote       $FC
000E2721 01                         	dc.b	$01
000E2722 E102                       	smpsAlterNote       $02
000E2724 01                         	dc.b	$01
000E2725 E103                       	smpsAlterNote       $03
000E2727 01                         	dc.b	$01
000E2728 E1FF                       	smpsAlterNote       $FF
000E272A 01                         	dc.b	$01
000E272B E1FC                       	smpsAlterNote       $FC
000E272D ECF5                       	smpsPSGAlterVol     $F5
000E272F 8F03                       	dc.b	nD1, $03
000E2731 E1FB                       	smpsAlterNote       $FB
000E2733 8D06                       	dc.b	nC1, $06
000E2735 EC04                       	smpsPSGAlterVol     $04
000E2737 E701                       	dc.b	smpsNoAttack, $01
000E2739 EC07                       	smpsPSGAlterVol     $07
000E273B 8006                       	dc.b	nRst, $06
000E273D E1FE                       	smpsAlterNote       $FE
000E273F 01                         	dc.b	$01
000E2740 E102                       	smpsAlterNote       $02
000E2742 01                         	dc.b	$01
000E2743 E101                       	smpsAlterNote       $01
000E2745 01                         	dc.b	$01
000E2746 E1FB                       	smpsAlterNote       $FB
000E2748 01                         	dc.b	$01
000E2749 E1F7                       	smpsAlterNote       $F7
000E274B 01                         	dc.b	$01
000E274C E1FB                       	smpsAlterNote       $FB
000E274E 01                         	dc.b	$01
000E274F E1FE                       	smpsAlterNote       $FE
000E2751 01                         	dc.b	$01
000E2752 E102                       	smpsAlterNote       $02
000E2754 01                         	dc.b	$01
000E2755 E1FB                       	smpsAlterNote       $FB
000E2757 ECF5                       	smpsPSGAlterVol     $F5
000E2759 8D03                       	dc.b	nC1, $03
000E275B E1FC                       	smpsAlterNote       $FC
000E275D 8F0D                       	dc.b	nD1, $0D
000E275F E1FF                       	smpsAlterNote       $FF
000E2761 E701                       	dc.b	smpsNoAttack, $01
000E2763 E103                       	smpsAlterNote       $03
000E2765 E701                       	dc.b	smpsNoAttack, $01
000E2767 E1FF                       	smpsAlterNote       $FF
000E2769 E701                       	dc.b	smpsNoAttack, $01
000E276B E1FC                       	smpsAlterNote       $FC
000E276D E701                       	dc.b	smpsNoAttack, $01
000E276F E1F8                       	smpsAlterNote       $F8
000E2771 E701                       	dc.b	smpsNoAttack, $01
000E2773 E1FC                       	smpsAlterNote       $FC
000E2775 E701                       	dc.b	smpsNoAttack, $01
000E2777 E102                       	smpsAlterNote       $02
000E2779 E701                       	dc.b	smpsNoAttack, $01
000E277B E103                       	smpsAlterNote       $03
000E277D E701                       	dc.b	smpsNoAttack, $01
000E277F E1FF                       	smpsAlterNote       $FF
000E2781 E701                       	dc.b	smpsNoAttack, $01
000E2783 E1F9                       	smpsAlterNote       $F9
000E2785 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E2789 E1FC                       	smpsAlterNote       $FC
000E278B E701                       	dc.b	smpsNoAttack, $01
000E278D E102                       	smpsAlterNote       $02
000E278F E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E2793 E1FF                       	smpsAlterNote       $FF
000E2795 E701                       	dc.b	smpsNoAttack, $01
000E2797 E1F9                       	smpsAlterNote       $F9
000E2799 E701 E701                  	dc.b	smpsNoAttack, $01, smpsNoAttack, $01
000E279D E1FF                       	smpsAlterNote       $FF
000E279F EC04                       	smpsPSGAlterVol     $04
000E27A1 E701                       	dc.b	smpsNoAttack, $01
000E27A3 EC07                       	smpsPSGAlterVol     $07
000E27A5 E103                       	smpsAlterNote       $03
000E27A7 8001                       	dc.b	nRst, $01
000E27A9 E102                       	smpsAlterNote       $02
000E27AB 01                         	dc.b	$01
000E27AC E1FB                       	smpsAlterNote       $FB
000E27AE 01                         	dc.b	$01
000E27AF E1F7                       	smpsAlterNote       $F7
000E27B1 01                         	dc.b	$01
000E27B2 E1FB                       	smpsAlterNote       $FB
000E27B4 01                         	dc.b	$01
000E27B5 E1FF                       	smpsAlterNote       $FF
000E27B7 01                         	dc.b	$01
000E27B8 E103                       	smpsAlterNote       $03
000E27BA 01                         	dc.b	$01
000E27BB E1FB                       	smpsAlterNote       $FB
000E27BD ECF5                       	smpsPSGAlterVol     $F5
000E27BF 8E06                       	dc.b	nCs1, $06
000E27C1 EC04                       	smpsPSGAlterVol     $04
000E27C3 E701                       	dc.b	smpsNoAttack, $01
000E27C5 EC07                       	smpsPSGAlterVol     $07
000E27C7 8003                       	dc.b	nRst, $03
000E27C9 ECF5                       	smpsPSGAlterVol     $F5
000E27CB 8E06                       	dc.b	nCs1, $06
000E27CD EC04                       	smpsPSGAlterVol     $04
000E27CF E701                       	dc.b	smpsNoAttack, $01
000E27D1 EC07                       	smpsPSGAlterVol     $07
000E27D3 8006                       	dc.b	nRst, $06
000E27D5 E1FE                       	smpsAlterNote       $FE
000E27D7 01                         	dc.b	$01
000E27D8 E102                       	smpsAlterNote       $02
000E27DA 01                         	dc.b	$01
000E27DB E1FE                       	smpsAlterNote       $FE
000E27DD 01                         	dc.b	$01
000E27DE E1FC                       	smpsAlterNote       $FC
000E27E0 01                         	dc.b	$01
000E27E1 ECF5                       	smpsPSGAlterVol     $F5
000E27E3 8F06                       	dc.b	nD1, $06
000E27E5 EC04                       	smpsPSGAlterVol     $04
000E27E7 E701                       	dc.b	smpsNoAttack, $01
000E27E9 EC07                       	smpsPSGAlterVol     $07
000E27EB 8003                       	dc.b	nRst, $03
000E27ED ECF5                       	smpsPSGAlterVol     $F5
000E27EF 8F07                       	dc.b	nD1, $07
000E27F1 EC0B                       	smpsPSGAlterVol     $0B
000E27F3 8007                       	dc.b	nRst, $07
000E27F5 E102                       	smpsAlterNote       $02
000E27F7 0101                       	dc.b	$01, $01
000E27F9 E1FB                       	smpsAlterNote       $FB
000E27FB 01                         	dc.b	$01
000E27FC E1F8                       	smpsAlterNote       $F8
000E27FE 01                         	dc.b	$01
000E27FF E1FB                       	smpsAlterNote       $FB
000E2801 ECF5                       	smpsPSGAlterVol     $F5
000E2803 8E06                       	dc.b	nCs1, $06
000E2805 EC0B                       	smpsPSGAlterVol     $0B
000E2807 8004                       	dc.b	nRst, $04
000E2809 ECF5                       	smpsPSGAlterVol     $F5
000E280B 8E06                       	dc.b	nCs1, $06
000E280D EC04                       	smpsPSGAlterVol     $04
000E280F E701                       	dc.b	smpsNoAttack, $01
000E2811 EC07                       	smpsPSGAlterVol     $07
000E2813 8006                       	dc.b	nRst, $06
000E2815 E1FE                       	smpsAlterNote       $FE
000E2817 01                         	dc.b	$01
000E2818 E102                       	smpsAlterNote       $02
000E281A 01                         	dc.b	$01
000E281B E1FE                       	smpsAlterNote       $FE
000E281D 01                         	dc.b	$01
000E281E E1F9                       	smpsAlterNote       $F9
000E2820 01                         	dc.b	$01
000E2821 E1FC                       	smpsAlterNote       $FC
000E2823 ECF5                       	smpsPSGAlterVol     $F5
000E2825 8F06                       	dc.b	nD1, $06
000E2827 EC04                       	smpsPSGAlterVol     $04
000E2829 E701                       	dc.b	smpsNoAttack, $01
000E282B EC07                       	smpsPSGAlterVol     $07
000E282D 8003                       	dc.b	nRst, $03
000E282F ECF5                       	smpsPSGAlterVol     $F5
000E2831 8F06                       	dc.b	nD1, $06
000E2833 EC04                       	smpsPSGAlterVol     $04
000E2835 E701                       	dc.b	smpsNoAttack, $01
000E2837 EC07                       	smpsPSGAlterVol     $07
000E2839 8006                       	dc.b	nRst, $06
000E283B E1FF                       	smpsAlterNote       $FF
000E283D 01                         	dc.b	$01
000E283E E103                       	smpsAlterNote       $03
000E2840 01                         	dc.b	$01
000E2841 E102                       	smpsAlterNote       $02
000E2843 01                         	dc.b	$01
000E2844 E1FB                       	smpsAlterNote       $FB
000E2846 01                         	dc.b	$01
000E2847 ECF5                       	smpsPSGAlterVol     $F5
000E2849 8E07                       	dc.b	nCs1, $07
000E284B EC0B                       	smpsPSGAlterVol     $0B
000E284D 8004                       	dc.b	nRst, $04
000E284F ECF5                       	smpsPSGAlterVol     $F5
000E2851 8E06                       	dc.b	nCs1, $06
000E2853 EC0B                       	smpsPSGAlterVol     $0B
000E2855 8007                       	dc.b	nRst, $07
000E2857 E101                       	smpsAlterNote       $01
000E2859 0101                       	dc.b	$01, $01
000E285B E1FE                       	smpsAlterNote       $FE
000E285D 01                         	dc.b	$01
000E285E E1F9                       	smpsAlterNote       $F9
000E2860 01                         	dc.b	$01
000E2861 E1FC                       	smpsAlterNote       $FC
000E2863 ECF5                       	smpsPSGAlterVol     $F5
000E2865 8F06                       	dc.b	nD1, $06
000E2867 EC04                       	smpsPSGAlterVol     $04
000E2869 E701                       	dc.b	smpsNoAttack, $01
000E286B EC07                       	smpsPSGAlterVol     $07
000E286D 8003                       	dc.b	nRst, $03
000E286F ECF5                       	smpsPSGAlterVol     $F5
000E2871 8F06                       	dc.b	nD1, $06
000E2873 EC04                       	smpsPSGAlterVol     $04
000E2875 E701                       	dc.b	smpsNoAttack, $01
000E2877 EC07                       	smpsPSGAlterVol     $07
000E2879 8006                       	dc.b	nRst, $06
000E287B E1FF                       	smpsAlterNote       $FF
000E287D 01                         	dc.b	$01
000E287E E103                       	smpsAlterNote       $03
000E2880 01                         	dc.b	$01
000E2881 E1FF                       	smpsAlterNote       $FF
000E2883 01                         	dc.b	$01
000E2884 E1FB                       	smpsAlterNote       $FB
000E2886 01                         	dc.b	$01
000E2887 ECF5                       	smpsPSGAlterVol     $F5
000E2889 8E06                       	dc.b	nCs1, $06
000E288B EC04                       	smpsPSGAlterVol     $04
000E288D E701                       	dc.b	smpsNoAttack, $01
000E288F EC07                       	smpsPSGAlterVol     $07
000E2891 8003                       	dc.b	nRst, $03
000E2893 ECF5                       	smpsPSGAlterVol     $F5
000E2895 8E07                       	dc.b	nCs1, $07
000E2897 E1FF                       	smpsAlterNote       $FF
000E2899 9B06                       	dc.b	nD2, $06
000E289B EC04                       	smpsPSGAlterVol     $04
000E289D E701                       	dc.b	smpsNoAttack, $01
000E289F ECFC                       	smpsPSGAlterVol     $FC
000E28A1 9B03                       	dc.b	nD2, $03
000E28A3 EC04                       	smpsPSGAlterVol     $04
000E28A5 E701                       	dc.b	smpsNoAttack, $01
000E28A7 ECFC                       	smpsPSGAlterVol     $FC
000E28A9 9B02                       	dc.b	nD2, $02
000E28AB EC04                       	smpsPSGAlterVol     $04
000E28AD E701                       	dc.b	smpsNoAttack, $01
000E28AF ECFC                       	smpsPSGAlterVol     $FC
000E28B1 E1FE                       	smpsAlterNote       $FE
000E28B3 9A03                       	dc.b	nCs2, $03
000E28B5 EC0B                       	smpsPSGAlterVol     $0B
000E28B7 800A                       	dc.b	nRst, $0A
000E28B9 E102                       	smpsAlterNote       $02
000E28BB 01                         	dc.b	$01
000E28BC E10A                       	smpsAlterNote       $0A
000E28BE 01                         	dc.b	$01
000E28BF E102                       	smpsAlterNote       $02
000E28C1 01                         	dc.b	$01
000E28C2 E1F7                       	smpsAlterNote       $F7
000E28C4 01                         	dc.b	$01
000E28C5 E10A                       	smpsAlterNote       $0A
000E28C7 01                         	dc.b	$01
000E28C8 E1FC                       	smpsAlterNote       $FC
000E28CA 01                         	dc.b	$01
000E28CB E108                       	smpsAlterNote       $08
000E28CD 0101                       	dc.b	$01, $01
000E28CF E102                       	smpsAlterNote       $02
000E28D1 01                         	dc.b	$01
000E28D2 E1F7                       	smpsAlterNote       $F7
000E28D4 0101                       	dc.b	$01, $01
000E28D6 E1FC                       	smpsAlterNote       $FC
000E28D8 ECF5                       	smpsPSGAlterVol     $F5
000E28DA 8F06                       	dc.b	nD1, $06
000E28DC EC04                       	smpsPSGAlterVol     $04
000E28DE E701                       	dc.b	smpsNoAttack, $01
000E28E0 EC07                       	smpsPSGAlterVol     $07
000E28E2 8003                       	dc.b	nRst, $03
000E28E4 ECF5                       	smpsPSGAlterVol     $F5
000E28E6 8F06                       	dc.b	nD1, $06
000E28E8 EC04                       	smpsPSGAlterVol     $04
000E28EA E701                       	dc.b	smpsNoAttack, $01
000E28EC EC07                       	smpsPSGAlterVol     $07
000E28EE 8006                       	dc.b	nRst, $06
000E28F0 E1FF                       	smpsAlterNote       $FF
000E28F2 01                         	dc.b	$01
000E28F3 E102                       	smpsAlterNote       $02
000E28F5 01                         	dc.b	$01
000E28F6 E101                       	smpsAlterNote       $01
000E28F8 01                         	dc.b	$01
000E28F9 E1FC                       	smpsAlterNote       $FC
000E28FB 01                         	dc.b	$01
000E28FC ECF5                       	smpsPSGAlterVol     $F5
000E28FE 9007                       	dc.b	nEb1, $07
000E2900 EC0B                       	smpsPSGAlterVol     $0B
000E2902 8004                       	dc.b	nRst, $04
000E2904 ECF5                       	smpsPSGAlterVol     $F5
000E2906 9006                       	dc.b	nEb1, $06
000E2908 EC0B                       	smpsPSGAlterVol     $0B
000E290A 8007                       	dc.b	nRst, $07
000E290C E103                       	smpsAlterNote       $03
000E290E 0101                       	dc.b	$01, $01
000E2910 E1FF                       	smpsAlterNote       $FF
000E2912 01                         	dc.b	$01
000E2913 E1F9                       	smpsAlterNote       $F9
000E2915 01                         	dc.b	$01
000E2916 E1FC                       	smpsAlterNote       $FC
000E2918 ECF5                       	smpsPSGAlterVol     $F5
000E291A 8F06                       	dc.b	nD1, $06
000E291C EC04                       	smpsPSGAlterVol     $04
000E291E E701                       	dc.b	smpsNoAttack, $01
000E2920 EC07                       	smpsPSGAlterVol     $07
000E2922 8003                       	dc.b	nRst, $03
000E2924 ECF5                       	smpsPSGAlterVol     $F5
000E2926 8F06                       	dc.b	nD1, $06
000E2928 EC04                       	smpsPSGAlterVol     $04
000E292A E701                       	dc.b	smpsNoAttack, $01
000E292C EC07                       	smpsPSGAlterVol     $07
000E292E 8006                       	dc.b	nRst, $06
000E2930 E1FF                       	smpsAlterNote       $FF
000E2932 01                         	dc.b	$01
000E2933 E103                       	smpsAlterNote       $03
000E2935 01                         	dc.b	$01
000E2936 E1FF                       	smpsAlterNote       $FF
000E2938 01                         	dc.b	$01
000E2939 E1F9                       	smpsAlterNote       $F9
000E293B 01                         	dc.b	$01
000E293C E1FC                       	smpsAlterNote       $FC
000E293E ECF5                       	smpsPSGAlterVol     $F5
000E2940 8F06                       	dc.b	nD1, $06
000E2942 EC04                       	smpsPSGAlterVol     $04
000E2944 E701                       	dc.b	smpsNoAttack, $01
000E2946 EC07                       	smpsPSGAlterVol     $07
000E2948 8003                       	dc.b	nRst, $03
000E294A ECF5                       	smpsPSGAlterVol     $F5
000E294C 8F07                       	dc.b	nD1, $07
000E294E EC0B                       	smpsPSGAlterVol     $0B
000E2950 8006                       	dc.b	nRst, $06
000E2952 E1FF                       	smpsAlterNote       $FF
000E2954 01                         	dc.b	$01
000E2955 E102                       	smpsAlterNote       $02
000E2957 0101                       	dc.b	$01, $01
000E2959 E1FC                       	smpsAlterNote       $FC
000E295B 01                         	dc.b	$01
000E295C ECF5                       	smpsPSGAlterVol     $F5
000E295E 8F07                       	dc.b	nD1, $07
000E2960 EC0B                       	smpsPSGAlterVol     $0B
000E2962 8004                       	dc.b	nRst, $04
000E2964 ECF5                       	smpsPSGAlterVol     $F5
000E2966 8F06                       	dc.b	nD1, $06
000E2968 EC04                       	smpsPSGAlterVol     $04
000E296A E701                       	dc.b	smpsNoAttack, $01
000E296C EC07                       	smpsPSGAlterVol     $07
000E296E 8006                       	dc.b	nRst, $06
000E2970 E101                       	smpsAlterNote       $01
000E2972 01                         	dc.b	$01
000E2973 E102                       	smpsAlterNote       $02
000E2975 01                         	dc.b	$01
000E2976 E1FF                       	smpsAlterNote       $FF
000E2978 01                         	dc.b	$01
000E2979 E1F9                       	smpsAlterNote       $F9
000E297B 01                         	dc.b	$01
000E297C E1FC                       	smpsAlterNote       $FC
000E297E ECF5                       	smpsPSGAlterVol     $F5
000E2980 9006                       	dc.b	nEb1, $06
000E2982 EC04                       	smpsPSGAlterVol     $04
000E2984 E701                       	dc.b	smpsNoAttack, $01
000E2986 EC07                       	smpsPSGAlterVol     $07
000E2988 8003                       	dc.b	nRst, $03
000E298A ECF5                       	smpsPSGAlterVol     $F5
000E298C 9006                       	dc.b	nEb1, $06
000E298E EC04                       	smpsPSGAlterVol     $04
000E2990 E701                       	dc.b	smpsNoAttack, $01
000E2992 EC07                       	smpsPSGAlterVol     $07
000E2994 8006                       	dc.b	nRst, $06
000E2996 E100                       	smpsAlterNote       $00
000E2998 01                         	dc.b	$01
000E2999 E102                       	smpsAlterNote       $02
000E299B 01                         	dc.b	$01
000E299C E100                       	smpsAlterNote       $00
000E299E 01                         	dc.b	$01
000E299F E1FF                       	smpsAlterNote       $FF
000E29A1 01                         	dc.b	$01
000E29A2 ECF5                       	smpsPSGAlterVol     $F5
000E29A4 9B06                       	dc.b	nD2, $06
000E29A6 EC04                       	smpsPSGAlterVol     $04
000E29A8 E701                       	dc.b	smpsNoAttack, $01
000E29AA EC07                       	smpsPSGAlterVol     $07
000E29AC 8003                       	dc.b	nRst, $03
000E29AE ECF5                       	smpsPSGAlterVol     $F5
000E29B0 9B07                       	dc.b	nD2, $07
000E29B2 EC0B                       	smpsPSGAlterVol     $0B
000E29B4 8007                       	dc.b	nRst, $07
000E29B6 E105                       	smpsAlterNote       $05
000E29B8 0101                       	dc.b	$01, $01
000E29BA E1FF                       	smpsAlterNote       $FF
000E29BC 01                         	dc.b	$01
000E29BD E1FC                       	smpsAlterNote       $FC
000E29BF 01                         	dc.b	$01
000E29C0 E1FF                       	smpsAlterNote       $FF
000E29C2 ECF5                       	smpsPSGAlterVol     $F5
000E29C4 9B06                       	dc.b	nD2, $06
000E29C6 EC0B                       	smpsPSGAlterVol     $0B
000E29C8 8004                       	dc.b	nRst, $04
000E29CA ECF5                       	smpsPSGAlterVol     $F5
000E29CC 9B06                       	dc.b	nD2, $06
000E29CE EC04                       	smpsPSGAlterVol     $04
000E29D0 E701                       	dc.b	smpsNoAttack, $01
000E29D2 EC07                       	smpsPSGAlterVol     $07
000E29D4 8006                       	dc.b	nRst, $06
000E29D6 E102                       	smpsAlterNote       $02
000E29D8 01                         	dc.b	$01
000E29D9 E106                       	smpsAlterNote       $06
000E29DB 01                         	dc.b	$01
000E29DC E102                       	smpsAlterNote       $02
000E29DE 01                         	dc.b	$01
000E29DF E1FC                       	smpsAlterNote       $FC
000E29E1 01                         	dc.b	$01
000E29E2 E1FF                       	smpsAlterNote       $FF
000E29E4 ECF5                       	smpsPSGAlterVol     $F5
000E29E6 9B06                       	dc.b	nD2, $06
000E29E8 EC04                       	smpsPSGAlterVol     $04
000E29EA E701                       	dc.b	smpsNoAttack, $01
000E29EC EC07                       	smpsPSGAlterVol     $07
000E29EE 8003                       	dc.b	nRst, $03
000E29F0 ECF5                       	smpsPSGAlterVol     $F5
000E29F2 9B07                       	dc.b	nD2, $07
000E29F4 EC0B                       	smpsPSGAlterVol     $0B
000E29F6 8006                       	dc.b	nRst, $06
000E29F8 E102                       	smpsAlterNote       $02
000E29FA 01                         	dc.b	$01
000E29FB E105                       	smpsAlterNote       $05
000E29FD 0101                       	dc.b	$01, $01
000E29FF E1FF                       	smpsAlterNote       $FF
000E2A01 01                         	dc.b	$01
000E2A02 ECF5                       	smpsPSGAlterVol     $F5
000E2A04 9B07                       	dc.b	nD2, $07
000E2A06 EC0B                       	smpsPSGAlterVol     $0B
000E2A08 8004                       	dc.b	nRst, $04
000E2A0A ECF5                       	smpsPSGAlterVol     $F5
000E2A0C 9B06                       	dc.b	nD2, $06
000E2A0E EC04                       	smpsPSGAlterVol     $04
000E2A10 E701                       	dc.b	smpsNoAttack, $01
000E2A12 EC07                       	smpsPSGAlterVol     $07
000E2A14 8006                       	dc.b	nRst, $06
000E2A16 E105                       	smpsAlterNote       $05
000E2A18 0101                       	dc.b	$01, $01
000E2A1A E102                       	smpsAlterNote       $02
000E2A1C 01                         	dc.b	$01
000E2A1D E1FC                       	smpsAlterNote       $FC
000E2A1F 01                         	dc.b	$01
000E2A20 E1FF                       	smpsAlterNote       $FF
000E2A22 ECF5                       	smpsPSGAlterVol     $F5
000E2A24 9B06                       	dc.b	nD2, $06
000E2A26 EC04                       	smpsPSGAlterVol     $04
000E2A28 E701                       	dc.b	smpsNoAttack, $01
000E2A2A EC07                       	smpsPSGAlterVol     $07
000E2A2C 8003                       	dc.b	nRst, $03
000E2A2E ECF5                       	smpsPSGAlterVol     $F5
000E2A30 9B06                       	dc.b	nD2, $06
000E2A32 EC04                       	smpsPSGAlterVol     $04
000E2A34 E701                       	dc.b	smpsNoAttack, $01
000E2A36 EC07                       	smpsPSGAlterVol     $07
000E2A38 8006                       	dc.b	nRst, $06
000E2A3A E102                       	smpsAlterNote       $02
000E2A3C 01                         	dc.b	$01
000E2A3D E106                       	smpsAlterNote       $06
000E2A3F 01                         	dc.b	$01
000E2A40 E102                       	smpsAlterNote       $02
000E2A42 01                         	dc.b	$01
000E2A43 E1FF                       	smpsAlterNote       $FF
000E2A45 01                         	dc.b	$01
000E2A46 ECF5                       	smpsPSGAlterVol     $F5
000E2A48 9B06                       	dc.b	nD2, $06
000E2A4A EC04                       	smpsPSGAlterVol     $04
000E2A4C E701                       	dc.b	smpsNoAttack, $01
000E2A4E EC07                       	smpsPSGAlterVol     $07
000E2A50 8003                       	dc.b	nRst, $03
000E2A52 ECF5                       	smpsPSGAlterVol     $F5
000E2A54 9B07                       	dc.b	nD2, $07
000E2A56 EC0B                       	smpsPSGAlterVol     $0B
000E2A58 8007                       	dc.b	nRst, $07
000E2A5A E107                       	smpsAlterNote       $07
000E2A5C 0101                       	dc.b	$01, $01
000E2A5E E1FE                       	smpsAlterNote       $FE
000E2A60 01                         	dc.b	$01
000E2A61 E1FA                       	smpsAlterNote       $FA
000E2A63 0101                       	dc.b	$01, $01
000E2A65 E103                       	smpsAlterNote       $03
000E2A67 01                         	dc.b	$01
000E2A68 E109                       	smpsAlterNote       $09
000E2A6A 01                         	dc.b	$01
000E2A6B E107                       	smpsAlterNote       $07
000E2A6D 01                         	dc.b	$01
000E2A6E E1FE                       	smpsAlterNote       $FE
000E2A70 01                         	dc.b	$01
000E2A71 E108                       	smpsAlterNote       $08
000E2A73 01                         	dc.b	$01
000E2A74 E1FD                       	smpsAlterNote       $FD
000E2A76 ECF5                       	smpsPSGAlterVol     $F5
000E2A78 940E                       	dc.b	nG1, $0E
000E2A7A E103                       	smpsAlterNote       $03
000E2A7C EC0B                       	smpsPSGAlterVol     $0B
000E2A7E 8001 01                    	dc.b	nRst, $01, $01
000E2A81 E1FD                       	smpsAlterNote       $FD
000E2A83 01                         	dc.b	$01
000E2A84 E1FB                       	smpsAlterNote       $FB
000E2A86 0101                       	dc.b	$01, $01
000E2A88 E100                       	smpsAlterNote       $00
000E2A8A 01                         	dc.b	$01
000E2A8B E103                       	smpsAlterNote       $03
000E2A8D 01                         	dc.b	$01
000E2A8E E100                       	smpsAlterNote       $00
000E2A90 01                         	dc.b	$01
000E2A91 E1FD                       	smpsAlterNote       $FD
000E2A93 01                         	dc.b	$01
000E2A94 E1FA                       	smpsAlterNote       $FA
000E2A96 01                         	dc.b	$01
000E2A97 E1FD                       	smpsAlterNote       $FD
000E2A99 01                         	dc.b	$01
000E2A9A E103                       	smpsAlterNote       $03
000E2A9C 0101                       	dc.b	$01, $01
000E2A9E E100                       	smpsAlterNote       $00
000E2AA0 01                         	dc.b	$01
000E2AA1 E1FE                       	smpsAlterNote       $FE
000E2AA3 ECF5                       	smpsPSGAlterVol     $F5
000E2AA5 960D                       	dc.b	nA1, $0D
000E2AA7 E104                       	smpsAlterNote       $04
000E2AA9 EC0B                       	smpsPSGAlterVol     $0B
000E2AAB 8001 01                    	dc.b	nRst, $01, $01
000E2AAE E101                       	smpsAlterNote       $01
000E2AB0 01                         	dc.b	$01
000E2AB1 E1FB                       	smpsAlterNote       $FB
000E2AB3 0101                       	dc.b	$01, $01
000E2AB5 E1FE                       	smpsAlterNote       $FE
000E2AB7 01                         	dc.b	$01
000E2AB8 E104                       	smpsAlterNote       $04
000E2ABA 0101                       	dc.b	$01, $01
000E2ABC E1FE                       	smpsAlterNote       $FE
000E2ABE 01                         	dc.b	$01
000E2ABF E1FB                       	smpsAlterNote       $FB
000E2AC1 0101                       	dc.b	$01, $01
000E2AC3 E101                       	smpsAlterNote       $01
000E2AC5 01                         	dc.b	$01
000E2AC6 E104                       	smpsAlterNote       $04
000E2AC8 0101                       	dc.b	$01, $01
000E2ACA E1FE                       	smpsAlterNote       $FE
000E2ACC ECF5                       	smpsPSGAlterVol     $F5
000E2ACE 970D                       	dc.b	nBb1, $0D
000E2AD0 E101                       	smpsAlterNote       $01
000E2AD2 EC04                       	smpsPSGAlterVol     $04
000E2AD4 E701                       	dc.b	smpsNoAttack, $01
000E2AD6 EC07                       	smpsPSGAlterVol     $07
000E2AD8 E104                       	smpsAlterNote       $04
000E2ADA 8001                       	dc.b	nRst, $01
000E2ADC E103                       	smpsAlterNote       $03
000E2ADE 01                         	dc.b	$01
000E2ADF E1FE                       	smpsAlterNote       $FE
000E2AE1 01                         	dc.b	$01
000E2AE2 E1FA                       	smpsAlterNote       $FA
000E2AE4 01                         	dc.b	$01
000E2AE5 E1FE                       	smpsAlterNote       $FE
000E2AE7 01                         	dc.b	$01
000E2AE8 E101                       	smpsAlterNote       $01
000E2AEA 01                         	dc.b	$01
000E2AEB E104                       	smpsAlterNote       $04
000E2AED 01                         	dc.b	$01
000E2AEE E101                       	smpsAlterNote       $01
000E2AF0 01                         	dc.b	$01
000E2AF1 E1FB                       	smpsAlterNote       $FB
000E2AF3 01                         	dc.b	$01
000E2AF4 E1FA                       	smpsAlterNote       $FA
000E2AF6 01                         	dc.b	$01
000E2AF7 E1FE                       	smpsAlterNote       $FE
000E2AF9 01                         	dc.b	$01
000E2AFA E103                       	smpsAlterNote       $03
000E2AFC 0101                       	dc.b	$01, $01
000E2AFE E101                       	smpsAlterNote       $01
000E2B00 01                         	dc.b	$01
000E2B01 E1FE                       	smpsAlterNote       $FE
000E2B03 ECF5                       	smpsPSGAlterVol     $F5
000E2B05 990D                       	dc.b	nC2, $0D
000E2B07 E104                       	smpsAlterNote       $04
000E2B09 EC0B                       	smpsPSGAlterVol     $0B
000E2B0B 8001 01                    	dc.b	nRst, $01, $01
000E2B0E E102                       	smpsAlterNote       $02
000E2B10 01                         	dc.b	$01
000E2B11 E1FC                       	smpsAlterNote       $FC
000E2B13 0101                       	dc.b	$01, $01
000E2B15 E102                       	smpsAlterNote       $02
000E2B17 01                         	dc.b	$01
000E2B18 E104                       	smpsAlterNote       $04
000E2B1A 01                         	dc.b	$01
000E2B1B E1FF                       	smpsAlterNote       $FF
000E2B1D ECF5                       	smpsPSGAlterVol     $F5
000E2B1F 9B06                       	dc.b	nD2, $06
000E2B21 EC04                       	smpsPSGAlterVol     $04
000E2B23 E701                       	dc.b	smpsNoAttack, $01
000E2B25 EC07                       	smpsPSGAlterVol     $07
000E2B27 8003                       	dc.b	nRst, $03
000E2B29 ECF5                       	smpsPSGAlterVol     $F5
000E2B2B 9B07                       	dc.b	nD2, $07
000E2B2D EC0B                       	smpsPSGAlterVol     $0B
000E2B2F 8006                       	dc.b	nRst, $06
000E2B31 E101                       	smpsAlterNote       $01
000E2B33 01                         	dc.b	$01
000E2B34 E104                       	smpsAlterNote       $04
000E2B36 0101                       	dc.b	$01, $01
000E2B38 E1FE                       	smpsAlterNote       $FE
000E2B3A 01                         	dc.b	$01
000E2B3B E1FC                       	smpsAlterNote       $FC
000E2B3D 01                         	dc.b	$01
000E2B3E E1FE                       	smpsAlterNote       $FE
000E2B40 ECF5                       	smpsPSGAlterVol     $F5
000E2B42 9C06                       	dc.b	nEb2, $06
000E2B44 EC0B                       	smpsPSGAlterVol     $0B
000E2B46 8004                       	dc.b	nRst, $04
000E2B48 ECF5                       	smpsPSGAlterVol     $F5
000E2B4A 9C06                       	dc.b	nEb2, $06
000E2B4C EC04                       	smpsPSGAlterVol     $04
000E2B4E E701                       	dc.b	smpsNoAttack, $01
000E2B50 EC07                       	smpsPSGAlterVol     $07
000E2B52 8006                       	dc.b	nRst, $06
000E2B54 E105                       	smpsAlterNote       $05
000E2B56 01                         	dc.b	$01
000E2B57 E106                       	smpsAlterNote       $06
000E2B59 01                         	dc.b	$01
000E2B5A E102                       	smpsAlterNote       $02
000E2B5C 01                         	dc.b	$01
000E2B5D E1FB                       	smpsAlterNote       $FB
000E2B5F 01                         	dc.b	$01
000E2B60 E1FF                       	smpsAlterNote       $FF
000E2B62 ECF5                       	smpsPSGAlterVol     $F5
000E2B64 9B06                       	dc.b	nD2, $06
000E2B66 EC04                       	smpsPSGAlterVol     $04
000E2B68 E701                       	dc.b	smpsNoAttack, $01
000E2B6A EC07                       	smpsPSGAlterVol     $07
000E2B6C 8003                       	dc.b	nRst, $03
000E2B6E ECF5                       	smpsPSGAlterVol     $F5
000E2B70 9B06                       	dc.b	nD2, $06
000E2B72 EC04                       	smpsPSGAlterVol     $04
000E2B74 E701                       	dc.b	smpsNoAttack, $01
000E2B76 EC07                       	smpsPSGAlterVol     $07
000E2B78 8006                       	dc.b	nRst, $06
000E2B7A E101                       	smpsAlterNote       $01
000E2B7C 01                         	dc.b	$01
000E2B7D E105                       	smpsAlterNote       $05
000E2B7F 01                         	dc.b	$01
000E2B80 E104                       	smpsAlterNote       $04
000E2B82 01                         	dc.b	$01
000E2B83 E1FE                       	smpsAlterNote       $FE
000E2B85 01                         	dc.b	$01
000E2B86 ECF5                       	smpsPSGAlterVol     $F5
000E2B88 9C07                       	dc.b	nEb2, $07
000E2B8A EC0B                       	smpsPSGAlterVol     $0B
000E2B8C 8004                       	dc.b	nRst, $04
000E2B8E ECF5                       	smpsPSGAlterVol     $F5
000E2B90 9C06                       	dc.b	nEb2, $06
000E2B92 EC0B                       	smpsPSGAlterVol     $0B
000E2B94 8007                       	dc.b	nRst, $07
000E2B96 E105                       	smpsAlterNote       $05
000E2B98 0101                       	dc.b	$01, $01
000E2B9A E102                       	smpsAlterNote       $02
000E2B9C 01                         	dc.b	$01
000E2B9D E1FB                       	smpsAlterNote       $FB
000E2B9F 01                         	dc.b	$01
000E2BA0 E1FF                       	smpsAlterNote       $FF
000E2BA2 ECF5                       	smpsPSGAlterVol     $F5
000E2BA4 9B06                       	dc.b	nD2, $06
000E2BA6 EC04                       	smpsPSGAlterVol     $04
000E2BA8 E701                       	dc.b	smpsNoAttack, $01
000E2BAA EC07                       	smpsPSGAlterVol     $07
000E2BAC 8003                       	dc.b	nRst, $03
000E2BAE ECF5                       	smpsPSGAlterVol     $F5
000E2BB0 9B06                       	dc.b	nD2, $06
000E2BB2 EC04                       	smpsPSGAlterVol     $04
000E2BB4 E701                       	dc.b	smpsNoAttack, $01
000E2BB6 EC07                       	smpsPSGAlterVol     $07
000E2BB8 8006                       	dc.b	nRst, $06
000E2BBA E101                       	smpsAlterNote       $01
000E2BBC 01                         	dc.b	$01
000E2BBD E105                       	smpsAlterNote       $05
000E2BBF 01                         	dc.b	$01
000E2BC0 E101                       	smpsAlterNote       $01
000E2BC2 01                         	dc.b	$01
000E2BC3 E1FC                       	smpsAlterNote       $FC
000E2BC5 01                         	dc.b	$01
000E2BC6 E1FE                       	smpsAlterNote       $FE
000E2BC8 ECF5                       	smpsPSGAlterVol     $F5
000E2BCA 9C06                       	dc.b	nEb2, $06
000E2BCC EC04                       	smpsPSGAlterVol     $04
000E2BCE E701                       	dc.b	smpsNoAttack, $01
000E2BD0 EC07                       	smpsPSGAlterVol     $07
000E2BD2 8003                       	dc.b	nRst, $03
000E2BD4 ECF5                       	smpsPSGAlterVol     $F5
000E2BD6 9C07                       	dc.b	nEb2, $07
000E2BD8 EC0B                       	smpsPSGAlterVol     $0B
000E2BDA 8006                       	dc.b	nRst, $06
000E2BDC E102                       	smpsAlterNote       $02
000E2BDE 01                         	dc.b	$01
000E2BDF E105                       	smpsAlterNote       $05
000E2BE1 0101                       	dc.b	$01, $01
000E2BE3 E1FF                       	smpsAlterNote       $FF
000E2BE5 01                         	dc.b	$01
000E2BE6 ECF5                       	smpsPSGAlterVol     $F5
000E2BE8 9B07                       	dc.b	nD2, $07
000E2BEA EC0B                       	smpsPSGAlterVol     $0B
000E2BEC 8004                       	dc.b	nRst, $04
000E2BEE ECF5                       	smpsPSGAlterVol     $F5
000E2BF0 9B06                       	dc.b	nD2, $06
000E2BF2 EC04                       	smpsPSGAlterVol     $04
000E2BF4 E701                       	dc.b	smpsNoAttack, $01
000E2BF6 EC07                       	smpsPSGAlterVol     $07
000E2BF8 8002                       	dc.b	nRst, $02
000E2BFA E1FC                       	smpsAlterNote       $FC
000E2BFC ECF5                       	smpsPSGAlterVol     $F5
000E2BFE 9006                       	dc.b	nEb1, $06
000E2C00 EC04                       	smpsPSGAlterVol     $04
000E2C02 E701                       	dc.b	smpsNoAttack, $01
000E2C04 ECFC                       	smpsPSGAlterVol     $FC
000E2C06 8B03 9003                  	dc.b	nBb0, $03, nEb1, $03
000E2C0A EC04                       	smpsPSGAlterVol     $04
000E2C0C E701                       	dc.b	smpsNoAttack, $01
000E2C0E E1FD                       	smpsAlterNote       $FD
000E2C10 ECFC                       	smpsPSGAlterVol     $FC
000E2C12 9402                       	dc.b	nG1, $02
000E2C14 EC04                       	smpsPSGAlterVol     $04
000E2C16 E701                       	dc.b	smpsNoAttack, $01
000E2C18 E1FE                       	smpsAlterNote       $FE
000E2C1A ECFC                       	smpsPSGAlterVol     $FC
000E2C1C 9703 9703                  	dc.b	nBb1, $03, nBb1, $03
000E2C20 EC04                       	smpsPSGAlterVol     $04
000E2C22 E701                       	dc.b	smpsNoAttack, $01
000E2C24 EC07                       	smpsPSGAlterVol     $07
000E2C26 8008                       	dc.b	nRst, $08
000E2C28 F6F4 F3                    	smpsJump            music84_Jump06
000E2C2B                            
000E2C2B                            ; PSG3 Data
000E2C2B                            music84_PSG3:
000E2C2B F500                       	smpsPSGvoice        $00
000E2C2D E1FF                       	smpsAlterNote       $FF
000E2C2F EC0F                       	smpsPSGAlterVol     $0F
000E2C31 803A                       	dc.b	nRst, $3A
000E2C33                            
000E2C33                            music84_Jump05:
000E2C33 8068 6868 6868 6868 6868+  	dc.b	nRst, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68, $68
000E2C3F 6868 6868 6868 6868 6802   	dc.b	$68, $68, $68, $68, $68, $68, $68, $68, $68, $02
000E2C49 F6FF E8                    	smpsJump            music84_Jump05
000E2C4C                            
000E2C4C                            ; DAC Data
000E2C4C                            music84_DAC:
000E2C4C E0C0                       	smpsPan             panCenter, $00
000E2C4E 8001 8203 8102 8101 8103+  	dc.b	nRst, $01, dSnare, $03, dKick, $02, dKick, $01, dKick, $03, dKick, $01
000E2C5A 8203 8102 8101 8204 8103+  	dc.b	dSnare, $03, dKick, $02, dKick, $01, dSnare, $04, dKick, $03, dSnare, $07
000E2C66 8104 8103 8104 8103 8104+  	dc.b	dKick, $04, dKick, $03, dKick, $04, dKick, $03, dKick, $04, dKick, $03
000E2C72 8203 8107 8207 8106 8101+  	dc.b	dSnare, $03, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000E2C7E 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000E2C8A 8107 8206 8107 8204 8107+  	dc.b	dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03
000E2C96 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000E2CA2 8206 8107 8204 8106 8104+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $06, dKick, $04, dSnare, $07
000E2CAE 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000E2CBA 8107 8203 8107 8104 8206+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06, dKick, $04
000E2CC6 8103 8207 8107 8207 8107+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000E2CD2 8107 8103 8101 8206 8104+  	dc.b	dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03
000E2CDE 8207 8107 8207 8106 8101+  	dc.b	dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03
000E2CEA 8107 8103 8207 8103 8104+  	dc.b	dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04, dSnare, $07
000E2CF6 8106 8101 8206 8107 8204+  	dc.b	dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04, dKick, $06
000E2D02 8104 8207 8103 8104 8206+  	dc.b	dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06, dKick, $07
000E2D0E 8207 8107 8203 8107 8202+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dSnare, $02, dKick, $02
000E2D1A 8103 8207 8101 8101 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $01, dKick, $01, dKick, $01, dKick, $01
000E2D26 8206 8107 8207 8107 8203+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07
000E2D32 8103 8101 8206 8104 8103+  	dc.b	dKick, $03, dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000E2D3E 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000E2D4A 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000E2D56 8206 8101 8106 8204 8107+  	dc.b	dSnare, $06, dKick, $01, dKick, $06, dSnare, $04, dKick, $07, dKick, $03
000E2D62 8207 8103 8104 8207 8106+  	dc.b	dSnare, $07, dKick, $03, dKick, $04, dSnare, $07, dKick, $06, dKick, $01
000E2D6E 8206 8107 8203 8101 8106+  	dc.b	dSnare, $06, dKick, $07, dSnare, $03, dKick, $01, dKick, $06, dKick, $04
000E2D7A 8207 8103 8103 8101 8206+  	dc.b	dSnare, $07, dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07
000E2D86 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $06
000E2D92 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000E2D9E 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000E2DAA 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000E2DB6 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000E2DC2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000E2DCE 8106 8104 8207 8104 8103+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $04, dKick, $03, dSnare, $07
000E2DDA 8106 8207 8107 8203 8107+  	dc.b	dKick, $06, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04
000E2DE6 8206 8101 8103 8103 8101+  	dc.b	dSnare, $06, dKick, $01, dKick, $03, dKick, $03, dKick, $01, dSnare, $06
000E2DF2 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000E2DFE 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07
000E2E0A 8207 8106 8101 8203 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07, dKick, $03
000E2E16 8207 8103 8101 8103 8207+  	dc.b	dSnare, $07, dKick, $03, dKick, $01, dKick, $03, dSnare, $07, dKick, $07
000E2E22 8206 8107 8204 8107 8103+  	dc.b	dSnare, $06, dKick, $07, dSnare, $04, dKick, $07, dKick, $03, dSnare, $07
000E2E2E 8103 8104 8207 8214 8204+  	dc.b	dKick, $03, dKick, $04, dSnare, $07, dSnare, $14, dSnare, $04, dSnare, $1B
000E2E3A 8203 8101 8214 8203 8207+  	dc.b	dSnare, $03, dKick, $01, dSnare, $14, dSnare, $03, dSnare, $07, dKick, $04
000E2E46 8206 8107 8207 8107 8207+  	dc.b	dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000E2E52 8203 8107 8103 8101 8206+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06, dKick, $04
000E2E5E 8103 8207 8107 8207 8106+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $06, dKick, $01
000E2E6A 8203 8107 8103 8207 8103+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000E2E76 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $04
000E2E82 8106 8104 8207 8103 8104+  	dc.b	dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $04, dSnare, $06
000E2E8E 8107 8207 8107 8204 8207+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $04, dSnare, $07, dKick, $01
000E2E9A 8102 8104 8109 8101 8206+  	dc.b	dKick, $02, dKick, $04, dKick, $09, dKick, $01, dSnare, $06, dKick, $07
000E2EA6 8207 8107 8203 8107 8103+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01
000E2EB2 8206 8104 8103 8207 8107+  	dc.b	dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07
000E2EBE 8107 8203 8107 8103 8207+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04
000E2ECA 8103 8207 8107 8206 8101+  	dc.b	dKick, $03, dSnare, $07, dKick, $07, dSnare, $06, dKick, $01, dKick, $06
000E2ED6 8204 8107 8103 8207 8103+  	dc.b	dSnare, $04, dKick, $07, dKick, $03, dSnare, $07, dKick, $03, dKick, $04
000E2EE2 8207 8106 8101 8206 8107+  	dc.b	dSnare, $07, dKick, $06, dKick, $01, dSnare, $06, dKick, $07, dSnare, $03
000E2EEE 8101 8106 8104 8207 8103+  	dc.b	dKick, $01, dKick, $06, dKick, $04, dSnare, $07, dKick, $03, dKick, $03
000E2EFA 8101 8206 8107 8207 8107+  	dc.b	dKick, $01, dSnare, $06, dKick, $07, dSnare, $07, dKick, $07, dSnare, $03
000E2F06 8107 8104 8206 8104 8103+  	dc.b	dKick, $07, dKick, $04, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07
000E2F12 8107 8207 8107 8203 8107+  	dc.b	dKick, $07, dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $03
000E2F1E 8101 8206 8104 8103 8207+  	dc.b	dKick, $01, dSnare, $06, dKick, $04, dKick, $03, dSnare, $07, dKick, $03
000E2F2A 8104 8207 8106 8101 8203+  	dc.b	dKick, $04, dSnare, $07, dKick, $06, dKick, $01, dSnare, $03, dKick, $07
000E2F36 8103 8208 8102 8104 8203+  	dc.b	dKick, $03, dSnare, $08, dKick, $02, dKick, $04, dSnare, $03, dKick, $04
000E2F42 8103 8103 8101 8203 8103+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $03, dKick, $03, dKick, $01
000E2F4E 8203 8103 8202 8101 8202+  	dc.b	dSnare, $03, dKick, $03, dSnare, $02, dKick, $01, dSnare, $02, dSnare, $02
000E2F5A 8202 8201 8101 8201 8102+  	dc.b	dSnare, $02, dSnare, $01, dKick, $01, dSnare, $01, dKick, $02, dKick, $02
000E2F66 8102 8101 8102 8102 8102+  	dc.b	dKick, $02, dKick, $01, dKick, $02, dKick, $02, dKick, $02, dKick, $01
000E2F72 8102 8202 8102 8101 8101+  	dc.b	dKick, $02, dSnare, $02, dKick, $02, dKick, $01, dKick, $01, dKick, $07
000E2F7E 8207 8107 8203 8107 8104+  	dc.b	dSnare, $07, dKick, $07, dSnare, $03, dKick, $07, dKick, $04, dSnare, $07
000E2F8A 8103 8103 8101 8206 8107+  	dc.b	dKick, $03, dKick, $03, dKick, $01, dSnare, $06, dKick, $07, dSnare, $07
000E2F96 8107 8203 8107 8103 8101+  	dc.b	dKick, $07, dSnare, $03, dKick, $07, dKick, $03, dKick, $01, dSnare, $06
000E2FA2 8104 8103 8207 8107 8207+  	dc.b	dKick, $04, dKick, $03, dSnare, $07, dKick, $07, dSnare, $07, dKick, $07
000E2FAE 8203 8107 8103 8207 8104+  	dc.b	dSnare, $03, dKick, $07, dKick, $03, dSnare, $07, dKick, $04, dKick, $03
000E2FBA 8207 8107 8206 8107 8204+  	dc.b	dSnare, $07, dKick, $07, dSnare, $06, dKick, $07, dSnare, $04, dKick, $07
000E2FC6 8103 8207 8203 8204 8107+  	dc.b	dKick, $03, dSnare, $07, dSnare, $03, dSnare, $04, dKick, $07, dKick, $17
000E2FD2 E0C0                       	smpsPan             panCenter, $00
000E2FD4 F2                         	smpsStop
000E2FD5                            
000E2FD5                            music84_Voices:
000E2FD5                            ;	Voice $00
000E2FD5                            ;	$3D
000E2FD5                            ;	$41, $31, $41, $51, 	$11, $11, $11, $11, 	$0A, $00, $00, $00
000E2FD5                            ;	$0B, $00, $00, $00, 	$F7, $F8, $F8, $F8, 	$1A, $14, $20, $14
000E2FD5                            	smpsVcAlgorithm     $05
000E2FD5                            	smpsVcFeedback      $07
000E2FD5                            	smpsVcUnusedBits    $00
000E2FD5                            	smpsVcDetune        $05, $04, $03, $04
000E2FD5                            	smpsVcCoarseFreq    $01, $01, $01, $01
000E2FD5                            	smpsVcRateScale     $00, $00, $00, $00
000E2FD5                            	smpsVcAttackRate    $11, $11, $11, $11
000E2FD5                            	smpsVcAmpMod        $00, $00, $00, $00
000E2FD5                            	smpsVcDecayRate1    $00, $00, $00, $0A
000E2FD5                            	smpsVcDecayRate2    $00, $00, $00, $0B
000E2FD5                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000E2FD5                            	smpsVcReleaseRate   $08, $08, $08, $07
000E2FD5 3D41 3141 5111 1111 110A+  	smpsVcTotalLevel    $14, $20, $14, $1A
000E2FEE                            
000E2FEE                            ;	Voice $01
000E2FEE                            ;	$04
000E2FEE                            ;	$5A, $41, $3A, $41, 	$5F, $1F, $5F, $1F, 	$00, $0E, $00, $0E
000E2FEE                            ;	$00, $05, $00, $05, 	$E6, $86, $E6, $86, 	$19, $10, $19, $10
000E2FEE                            	smpsVcAlgorithm     $04
000E2FEE                            	smpsVcFeedback      $00
000E2FEE                            	smpsVcUnusedBits    $00
000E2FEE                            	smpsVcDetune        $04, $03, $04, $05
000E2FEE                            	smpsVcCoarseFreq    $01, $0A, $01, $0A
000E2FEE                            	smpsVcRateScale     $00, $01, $00, $01
000E2FEE                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000E2FEE                            	smpsVcAmpMod        $00, $00, $00, $00
000E2FEE                            	smpsVcDecayRate1    $0E, $00, $0E, $00
000E2FEE                            	smpsVcDecayRate2    $05, $00, $05, $00
000E2FEE                            	smpsVcDecayLevel    $08, $0E, $08, $0E
000E2FEE                            	smpsVcReleaseRate   $06, $06, $06, $06
000E2FEE 045A 413A 415F 1F5F 1F00+  	smpsVcTotalLevel    $10, $19, $10, $19
000E3007                            
000E3007                            ;	Voice $02
000E3007                            ;	$30
000E3007                            ;	$6C, $03, $21, $41, 	$14, $1F, $1F, $1F, 	$0D, $0C, $0E, $01
000E3007                            ;	$01, $01, $01, $01, 	$FF, $C8, $BB, $89, 	$24, $27, $14, $10
000E3007                            	smpsVcAlgorithm     $00
000E3007                            	smpsVcFeedback      $06
000E3007                            	smpsVcUnusedBits    $00
000E3007                            	smpsVcDetune        $04, $02, $00, $06
000E3007                            	smpsVcCoarseFreq    $01, $01, $03, $0C
000E3007                            	smpsVcRateScale     $00, $00, $00, $00
000E3007                            	smpsVcAttackRate    $1F, $1F, $1F, $14
000E3007                            	smpsVcAmpMod        $00, $00, $00, $00
000E3007                            	smpsVcDecayRate1    $01, $0E, $0C, $0D
000E3007                            	smpsVcDecayRate2    $01, $01, $01, $01
000E3007                            	smpsVcDecayLevel    $08, $0B, $0C, $0F
000E3007                            	smpsVcReleaseRate   $09, $0B, $08, $0F
000E3007 306C 0321 4114 1F1F 1F0D+  	smpsVcTotalLevel    $10, $14, $27, $24
000E3020                            
000E3020                            ;	Voice $03
000E3020                            ;	$3A
000E3020                            ;	$01, $21, $61, $41, 	$14, $14, $19, $18, 	$09, $09, $0D, $09
000E3020                            ;	$00, $00, $00, $00, 	$F7, $BF, $FF, $E8, 	$26, $16, $1E, $10
000E3020                            	smpsVcAlgorithm     $02
000E3020                            	smpsVcFeedback      $07
000E3020                            	smpsVcUnusedBits    $00
000E3020                            	smpsVcDetune        $04, $06, $02, $00
000E3020                            	smpsVcCoarseFreq    $01, $01, $01, $01
000E3020                            	smpsVcRateScale     $00, $00, $00, $00
000E3020                            	smpsVcAttackRate    $18, $19, $14, $14
000E3020                            	smpsVcAmpMod        $00, $00, $00, $00
000E3020                            	smpsVcDecayRate1    $09, $0D, $09, $09
000E3020                            	smpsVcDecayRate2    $00, $00, $00, $00
000E3020                            	smpsVcDecayLevel    $0E, $0F, $0B, $0F
000E3020                            	smpsVcReleaseRate   $08, $0F, $0F, $07
000E3020 3A01 2161 4114 1419 1809+  	smpsVcTotalLevel    $10, $1E, $16, $26
000E3039                            
000E3039                            ;	Voice $04
000E3039                            ;	$3C
000E3039                            ;	$3A, $02, $00, $70, 	$1F, $10, $1F, $10, 	$00, $00, $00, $00
000E3039                            ;	$00, $00, $00, $00, 	$F2, $FA, $F2, $FA, 	$30, $1F, $24, $18
000E3039                            	smpsVcAlgorithm     $04
000E3039                            	smpsVcFeedback      $07
000E3039                            	smpsVcUnusedBits    $00
000E3039                            	smpsVcDetune        $07, $00, $00, $03
000E3039                            	smpsVcCoarseFreq    $00, $00, $02, $0A
000E3039                            	smpsVcRateScale     $00, $00, $00, $00
000E3039                            	smpsVcAttackRate    $10, $1F, $10, $1F
000E3039                            	smpsVcAmpMod        $00, $00, $00, $00
000E3039                            	smpsVcDecayRate1    $00, $00, $00, $00
000E3039                            	smpsVcDecayRate2    $00, $00, $00, $00
000E3039                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000E3039                            	smpsVcReleaseRate   $0A, $02, $0A, $02
000E3039 3C3A 0200 701F 101F 1000+  	smpsVcTotalLevel    $18, $24, $1F, $30
000E3052                            
000E3052                            ;	Voice $05
000E3052                            ;	$38
000E3052                            ;	$00, $21, $61, $41, 	$10, $1F, $1F, $1F, 	$17, $00, $03, $00
000E3052                            ;	$0B, $08, $08, $00, 	$A5, $F5, $F5, $F8, 	$1D, $10, $11, $14
000E3052                            	smpsVcAlgorithm     $00
000E3052                            	smpsVcFeedback      $07
000E3052                            	smpsVcUnusedBits    $00
000E3052                            	smpsVcDetune        $04, $06, $02, $00
000E3052                            	smpsVcCoarseFreq    $01, $01, $01, $00
000E3052                            	smpsVcRateScale     $00, $00, $00, $00
000E3052                            	smpsVcAttackRate    $1F, $1F, $1F, $10
000E3052                            	smpsVcAmpMod        $00, $00, $00, $00
000E3052                            	smpsVcDecayRate1    $00, $03, $00, $17
000E3052                            	smpsVcDecayRate2    $00, $08, $08, $0B
000E3052                            	smpsVcDecayLevel    $0F, $0F, $0F, $0A
000E3052                            	smpsVcReleaseRate   $08, $05, $05, $05
000E3052 3800 2161 4110 1F1F 1F17+  	smpsVcTotalLevel    $14, $11, $10, $1D
000E306B                            
000E306B                            
000E306C 00                         		even
000E306C                            Music85:	incbin	sound\glass2.bin ; Spring Yard Act 1
000E727C                            		even
000E727C                            Music86:	incbin	sound\music86.bin; Scrap Brain Act 1
000EADD4 00                         		even
000EADD4                            Music87:	include	sound\music87.asm; Invincibility
000EADD4                            triple_Header:
000EADD4 =00000001                  smpsHeaderStartSong = 1
000EADD4 0000                       	smpsHeaderVoice     triple_Voices
000EADD6 0501                       	smpsHeaderChan      $05, $01
000EADD8 0200                       	smpsHeaderTempo     $02, $00
000EADDA                            
000EADDE 0000 F40A                  	smpsHeaderFM        triple_FM1,	$F4, $0A
000EADE2 0000 000F                  	smpsHeaderFM        triple_FM2,	$00, $0F
000EADE6 0000 000B                  	smpsHeaderFM        triple_FM3,	$00, $0B
000EADEA 0000 0013                  	smpsHeaderFM        triple_FM4,	$00, $13
000EADEE 0000 0C01 0000             	smpsHeaderPSG       triple_PSG1,	$0C, $01, $00, $00
000EADF4                            
000EADF4                            ; DAC Data
000EADF4                            triple_DAC:
000EADF4 E0C0                       	smpsPan             panCenter, $00
000EADF6 8203 0381 8182             	dc.b	dSnare, $03, $03, dKick, dKick, dSnare
000EADFC                            
000EADFC                            triple_Loop01:
000EADFC 8282 82                    	dc.b	dSnare, dSnare, dSnare
000EADFF                            
000EADFF                            triple_Loop00:
000EADFF 8106 8281 8281 8203 8106+  	dc.b	dKick, $06, dSnare, dKick, dSnare, dKick, dSnare, $03, dKick, $06, $03, dSnare
000EAE0B 06                         	dc.b	$06
000EAE0C F700 08FF EF               	smpsLoop            $00, $08, triple_Loop00
000EAE11 810C 8209 0981 0682 0903+  	dc.b	dKick, $0C, dSnare, $09, $09, dKick, $06, dSnare, $09, $03, dKick, $0C
000EAE1D 8209 0981 0682 03          	dc.b	dSnare, $09, $09, dKick, $06, dSnare, $03
000EAE24 F701 02FF D4               	smpsLoop            $01, $02, triple_Loop01
000EAE29 0303 1B                    	dc.b	$03, $03, $1B
000EAE2C E0C0                       	smpsPan             panCenter, $00
000EAE2E F6FF C4                    	smpsJump triple_DAC
000EAE31                            
000EAE31                            ; FM1 Data
000EAE31                            triple_FM1:
000EAE31 E0C0                       	smpsPan             panCenter, $00
000EAE35 8018                       	dc.b	nRst, $18
000EAE37                            
000EAE37                            triple_Loop0B:
000EAE37 AC06 B8                    	dc.b	nG3, $06, nG4
000EAE3A F700 04FF F9               	smpsLoop            $00, $04, triple_Loop0B
000EAE3F                            
000EAE3F                            triple_Loop0C:
000EAE3F A7B3                       	dc.b	nD3, nD4
000EAE41 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0C
000EAE46                            
000EAE46                            triple_Loop0D:
000EAE46 A9B5                       	dc.b	nE3, nE4
000EAE48 F700 04FF FA               	smpsLoop            $00, $04, triple_Loop0D
000EAE4D A5B1 A5B1 A7B3 A7B3        	dc.b	nC3, nC4, nC3, nC4, nD3, nD4, nD3, nD4
000EAE55 F701 02FF DE               	smpsLoop            $01, $02, triple_Loop0B
000EAE5A A4B0 A4B0 A0AC A0AC A203+  	dc.b	nB2, nB3, nB2, nB3, nG2, nG3, nG2, nG3, nA2, $03, nRst, nA3
000EAE66 80A6 80B2 80A4 A6A7 A9A6+  	dc.b	nRst, nCs3, nRst, nCs4, nRst, nB2, nCs3, nD3, nE3, nCs3, nEb3, nF3
000EAE72 AD                         	dc.b	nAb3
000EAE73 F702 02FF C0               	smpsLoop            $02, $02, triple_Loop0B
000EAE78 8018                       	dc.b	nRst, $18
000EAE7A E0C0                       	smpsPan             panCenter, $00
000EAE7E F6FF B1                    	smpsJump triple_FM1
000EAE81                            
000EAE81                            ; FM2 Data
000EAE81                            triple_FM2:
000EAE81 E0C0                       	smpsPan             panCenter, $00
000EAE85 8018                       	dc.b	nRst, $18
000EAE87                            
000EAE87                            triple_Loop07:
000EAE87 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000EAE93 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000EAE9F F700 02FF E4               	smpsLoop            $00, $02, triple_Loop07
000EAEA4 8003                       	dc.b	nRst, $03
000EAEA6                            
000EAEA6                            triple_Loop08:
000EAEA6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000EAEAC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop08
000EAEB1 B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000EAEB7                            
000EAEB7                            triple_Loop09:
000EAEB7 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000EAEC3 C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000EAECF F700 02FF E4               	smpsLoop            $00, $02, triple_Loop09
000EAED4 8003                       	dc.b	nRst, $03
000EAED6                            
000EAED6                            triple_Loop0A:
000EAED6 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000EAEDC F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0A
000EAEE1 B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000EAEE7 E0C0                       	smpsPan             panCenter, $00
000EAEEB F6FF 94                    	smpsJump triple_FM2
000EAEEE                            
000EAEEE                            ; FM3 Data
000EAEEE                            triple_FM3:
000EAEEE E0C0                       	smpsPan             panCenter, $00
000EAEF2 8018                       	dc.b	nRst, $18
000EAEF4                            
000EAEF4                            triple_Loop06:
000EAEF4 B830 B7B8 36B3 2A          	dc.b	nG4, $30, nFs4, nG4, $36, nD4, $2A
000EAEFB F700 02FF F5               	smpsLoop            $00, $02, triple_Loop06
000EAF00 8030 B802 BABC BDBF C1BA+  	dc.b	nRst, $30, nG4, $02, nA4, nB4, nC5, nD5, nE5, nA4, nB4, nCs5
000EAF0C BFC1 C3BC BEC0 C1C3 C5BE+  	dc.b	nD5, nE5, nFs5, nB4, nCs5, nEb5, nE5, nFs5, nAb5, nCs5, nEb5, nF5
000EAF18 C3C5 C7                    	dc.b	nFs5, nAb5, nBb5
000EAF1B F701 02FF D5               	smpsLoop            $01, $02, triple_Loop06
000EAF20 8018                       	dc.b	nRst, $18
000EAF22 E0C0                       	smpsPan             panCenter, $00
000EAF26 F6FF C6                    	smpsJump triple_FM3
000EAF29                            
000EAF29                            ; FM4 Data
000EAF29                            triple_FM4:
000EAF29 E103                       	smpsAlterNote       $03
000EAF2D E0C0                       	smpsPan             panCenter, $00
000EAF2F 8018                       	dc.b	nRst, $18
000EAF31                            
000EAF31                            triple_Loop02:
000EAF31 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000EAF3D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000EAF49 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop02
000EAF4E 8003                       	dc.b	nRst, $03
000EAF50                            
000EAF50                            triple_Loop03:
000EAF50 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000EAF56 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop03
000EAF5B B809 BC03 8009             	dc.b	nG4, $09, nB4, $03, nRst, $09
000EAF61                            
000EAF61                            triple_Loop04:
000EAF61 C430 C311 8001 C612 C30B+  	dc.b	nG5, $30, nFs5, $11, nRst, $01, nA5, $12, nFs5, $0B, nRst, $01
000EAF6D C436 C303 C4C3 06C1 BFBD+  	dc.b	nG5, $36, nFs5, $03, nG5, nFs5, $06, nE5, nD5, nC5, nB4, nA4
000EAF79 F700 02FF E4               	smpsLoop            $00, $02, triple_Loop04
000EAF7E 8003                       	dc.b	nRst, $03
000EAF80                            
000EAF80                            triple_Loop05:
000EAF80 B809 BC03 800C             	dc.b	nG4, $09, nB4, $03, nRst, $0C
000EAF86 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop05
000EAF8B B809 BC03 8021             	dc.b	nG4, $09, nB4, $03, nRst, $21
000EAF91 E0C0                       	smpsPan             panCenter, $00
000EAF93 F6FF 94                    	smpsJump triple_FM4
000EAF96                            
000EAF96                            ; PSG1 Data
000EAF96                            triple_PSG1:
000EAF96 8018                       	dc.b	nRst, $18
000EAF98                            
000EAF98                            triple_Loop0E:
000EAF98 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000EAFA4 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000EAFB0 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000EAFBC 9402 8004                  	dc.b	nG1, $02, nRst, $04
000EAFC0 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop0E
000EAFC5 A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000EAFD1 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000EAFDD 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000EAFE9 9402 8007                  	dc.b	nG1, $02, nRst, $07
000EAFED                            
000EAFED                            triple_Loop0F:
000EAFED 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000EAFF3 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop0F
000EAFF8 9109 9403 8009             	dc.b	nE1, $09, nG1, $03, nRst, $09
000EAFFE                            
000EAFFE                            triple_Loop10:
000EAFFE A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000EB00A 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000EB016 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000EB022 9402 8004                  	dc.b	nG1, $02, nRst, $04
000EB026 F700 07FF D4               	smpsLoop            $00, $07, triple_Loop10
000EB02B A002 8001 9B02 8001 9B02+  	dc.b	nG2, $02, nRst, $01, nD2, $02, nRst, $01, nD2, $02, nRst, $04
000EB037 9B02 8004 9902 8004 9802+  	dc.b	nD2, $02, nRst, $04, nC2, $02, nRst, $04, nB1, $02, nRst, $01
000EB043 9902 8001 9B02 8004 9B02+  	dc.b	nC2, $02, nRst, $01, nD2, $02, nRst, $04, nD2, $02, nRst, $04
000EB04F 9402 8007                  	dc.b	nG1, $02, nRst, $07
000EB053                            
000EB053                            triple_Loop11:
000EB053 9109 9403 800C             	dc.b	nE1, $09, nG1, $03, nRst, $0C
000EB059 F700 03FF F6               	smpsLoop            $00, $03, triple_Loop11
000EB05E 9109 9403 8021             	dc.b	nE1, $09, nG1, $03, nRst, $21
000EB064 F500                       	smpsPSGvoice        $00
000EB066 F6FF 2E                    	smpsJump triple_PSG1
000EB069                            
000EB069                            triple_Voices:
000EB069                            ;	Voice $00
000EB069                            ;	$3A
000EB069                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000EB069                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000EB069                            	smpsVcAlgorithm     $02
000EB069                            	smpsVcFeedback      $07
000EB069                            	smpsVcUnusedBits    $00
000EB069                            	smpsVcDetune        $00, $00, $00, $00
000EB069                            	smpsVcCoarseFreq    $01, $01, $07, $01
000EB069                            	smpsVcRateScale     $01, $02, $02, $02
000EB069                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000EB069                            	smpsVcAmpMod        $00, $00, $00, $00
000EB069                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000EB069                            	smpsVcDecayRate2    $00, $00, $00, $00
000EB069                            	smpsVcDecayLevel    $00, $01, $0F, $01
000EB069                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000EB069 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000EB082                            
000EB082                            ;	Voice $01
000EB082                            ;	$20
000EB082                            ;	$7A, $31, $00, $00, 	$9F, $D8, $DC, $DF, 	$10, $0A, $04, $04
000EB082                            ;	$0F, $08, $08, $08, 	$5F, $5F, $BF, $BF, 	$14, $2B, $17, $80
000EB082                            	smpsVcAlgorithm     $00
000EB082                            	smpsVcFeedback      $04
000EB082                            	smpsVcUnusedBits    $00
000EB082                            	smpsVcDetune        $00, $00, $03, $07
000EB082                            	smpsVcCoarseFreq    $00, $00, $01, $0A
000EB082                            	smpsVcRateScale     $03, $03, $03, $02
000EB082                            	smpsVcAttackRate    $1F, $1C, $18, $1F
000EB082                            	smpsVcAmpMod        $00, $00, $00, $00
000EB082                            	smpsVcDecayRate1    $04, $04, $0A, $10
000EB082                            	smpsVcDecayRate2    $08, $08, $08, $0F
000EB082                            	smpsVcDecayLevel    $0B, $0B, $05, $05
000EB082                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000EB082 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000EB082 207A 3100 009F D8DC DF10+  	smpsVcTotalLevel    $00, $17, $2B, $14
000EB09C 00                         		even
000EB09C                            Music88:	incbin	sound\music88.bin; Extra Life
000EB18A                            		even
000EB18A                            Music89:	incbin	sound\music89.bin; Special Stage
000EF052 00                         		even
000EF052                            Music8A:	incbin	sound\music8A.bin; Title Screen
000EF21C                            		even
000EF21C                            Music8B:	incbin	sound\music8B.bin; Ending Theme
000EF4B6                            		even
000EF4B6                            Music8C:	incbin	sound\music8C.bin; VS Boss
000EF754                            		even
000EF754                            Music8D:	incbin	sound\music8D.bin; Final Zone
000F59CC 00                         		even
000F59CC                            Music8E:	include	sound\merry.asm ; Act Clear
000F59CC =0000008B                  dMerryWtf1 = dVLowTimpani ; $87
000F59CC =0000008A                  dMerryWtf2 = dLowTimpani  ; $85
000F59CC =0000008B                  dMerryWtf3 = dVLowTimpani ; $84
000F59CC =0000008A                  dMerryClap = dLowTimpani
000F59CC                            
000F59CC                            MerrysLittleLamb_Header:
000F59CC 0000                       	smpsHeaderVoice     MerrysLittleLamb_Voices
000F59CE 0603                       	smpsHeaderChan      $06, $03
000F59D0 0100                       	smpsHeaderTempo     $01, $00
000F59D2                            
000F59D6 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM1,	$00, $00
000F59DA 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM2,	$00, $00
000F59DE 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM3,	$00, $00
000F59E2 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM4,	$00, $00
000F59E6 0000 0000                  	smpsHeaderFM        MerrysLittleLamb_FM5,	$00, $00
000F59EA 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG1,	$00, $00, $00, $00
000F59F0 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG2,	$00, $00, $00, $00
000F59F6 0000 0000 0000             	smpsHeaderPSG       MerrysLittleLamb_PSG3,	$00, $00, $00, $00
000F59FC                            
000F59FC                            MerrysLittleLamb_FM1:
000F59FC E0C0                       	smpsPan             panCenter, $00
000F59FE 807F 7F7F 20               	dc.b	nRst, $7F, $7F, $7F, $20
000F5A05 E60F                       	smpsAlterVol        $0F
000F5A07 A704                       	dc.b	nD3, $04
000F5A09 E606                       	smpsAlterVol        $06
000F5A0B A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5A10 E6FA                       	smpsAlterVol        $FA
000F5A12 A705                       	dc.b	nD3, $05
000F5A14 E606                       	smpsAlterVol        $06
000F5A16 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5A1B E6FA                       	smpsAlterVol        $FA
000F5A1D A704                       	dc.b	nD3, $04
000F5A1F E606                       	smpsAlterVol        $06
000F5A21 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5A27 E6FA                       	smpsAlterVol        $FA
000F5A29 A7                         	dc.b	nD3
000F5A2A E606                       	smpsAlterVol        $06
000F5A2C A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5A31 E6FA                       	smpsAlterVol        $FA
000F5A33 A704                       	dc.b	nD3, $04
000F5A35 E606                       	smpsAlterVol        $06
000F5A37 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5A3D E6FA                       	smpsAlterVol        $FA
000F5A3F A7                         	dc.b	nD3
000F5A40 E606                       	smpsAlterVol        $06
000F5A42 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5A48 E6FA                       	smpsAlterVol        $FA
000F5A4A A705                       	dc.b	nD3, $05
000F5A4C E606                       	smpsAlterVol        $06
000F5A4E A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5A53 E6FA                       	smpsAlterVol        $FA
000F5A55 A7                         	dc.b	nD3
000F5A56 E606                       	smpsAlterVol        $06
000F5A58 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5A5E E6FA                       	smpsAlterVol        $FA
000F5A60 A705                       	dc.b	nD3, $05
000F5A62 E606                       	smpsAlterVol        $06
000F5A64 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5A69 E6FA                       	smpsAlterVol        $FA
000F5A6B A704                       	dc.b	nD3, $04
000F5A6D E606                       	smpsAlterVol        $06
000F5A6F A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5A74 E6FA                       	smpsAlterVol        $FA
000F5A76 A705                       	dc.b	nD3, $05
000F5A78 E606                       	smpsAlterVol        $06
000F5A7A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5A7F E6FA                       	smpsAlterVol        $FA
000F5A81 A704                       	dc.b	nD3, $04
000F5A83 E606                       	smpsAlterVol        $06
000F5A85 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5A8A E6FA                       	smpsAlterVol        $FA
000F5A8C A705                       	dc.b	nD3, $05
000F5A8E E606                       	smpsAlterVol        $06
000F5A90 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5A95 E6FA                       	smpsAlterVol        $FA
000F5A97 A704                       	dc.b	nD3, $04
000F5A99 E606                       	smpsAlterVol        $06
000F5A9B A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5AA1 E6FA                       	smpsAlterVol        $FA
000F5AA3 A7                         	dc.b	nD3
000F5AA4 E606                       	smpsAlterVol        $06
000F5AA6 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5AAC E6FA                       	smpsAlterVol        $FA
000F5AAE A705                       	dc.b	nD3, $05
000F5AB0 E606                       	smpsAlterVol        $06
000F5AB2 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5AB7 E6FA                       	smpsAlterVol        $FA
000F5AB9 A7                         	dc.b	nD3
000F5ABA E606                       	smpsAlterVol        $06
000F5ABC A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5AC2 E6FA                       	smpsAlterVol        $FA
000F5AC4 A705                       	dc.b	nD3, $05
000F5AC6 E606                       	smpsAlterVol        $06
000F5AC8 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5ACD E6FA                       	smpsAlterVol        $FA
000F5ACF A704                       	dc.b	nD3, $04
000F5AD1 E606                       	smpsAlterVol        $06
000F5AD3 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5AD8 E6FA                       	smpsAlterVol        $FA
000F5ADA A705                       	dc.b	nD3, $05
000F5ADC E606                       	smpsAlterVol        $06
000F5ADE A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5AE3 E6FA                       	smpsAlterVol        $FA
000F5AE5 A704                       	dc.b	nD3, $04
000F5AE7 E606                       	smpsAlterVol        $06
000F5AE9 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5AEE E6FA                       	smpsAlterVol        $FA
000F5AF0 A705                       	dc.b	nD3, $05
000F5AF2 E606                       	smpsAlterVol        $06
000F5AF4 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5AF9 E6FA                       	smpsAlterVol        $FA
000F5AFB A704                       	dc.b	nD3, $04
000F5AFD E606                       	smpsAlterVol        $06
000F5AFF A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5B05 E6FA                       	smpsAlterVol        $FA
000F5B07 A7                         	dc.b	nD3
000F5B08 E606                       	smpsAlterVol        $06
000F5B0A A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5B0F E6FA                       	smpsAlterVol        $FA
000F5B11 A704                       	dc.b	nD3, $04
000F5B13 E606                       	smpsAlterVol        $06
000F5B15 A705 A704 A705             	dc.b	nD3, $05, nD3, $04, nD3, $05
000F5B1B E6FA                       	smpsAlterVol        $FA
000F5B1D A7                         	dc.b	nD3
000F5B1E E606                       	smpsAlterVol        $06
000F5B20 A704 A705 A704             	dc.b	nD3, $04, nD3, $05, nD3, $04
000F5B26 E6FA                       	smpsAlterVol        $FA
000F5B28 A705                       	dc.b	nD3, $05
000F5B2A E606                       	smpsAlterVol        $06
000F5B2C A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5B31 E6FA                       	smpsAlterVol        $FA
000F5B33 A704                       	dc.b	nD3, $04
000F5B35 E606                       	smpsAlterVol        $06
000F5B37 A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5B3C E6FA                       	smpsAlterVol        $FA
000F5B3E A705                       	dc.b	nD3, $05
000F5B40 E606                       	smpsAlterVol        $06
000F5B42 A7A7 04A7 05               	dc.b	nD3, nD3, $04, nD3, $05
000F5B47 E6FA                       	smpsAlterVol        $FA
000F5B49 A704                       	dc.b	nD3, $04
000F5B4B E606                       	smpsAlterVol        $06
000F5B4D A705 A7A7 04               	dc.b	nD3, $05, nD3, nD3, $04
000F5B52 E6FA                       	smpsAlterVol        $FA
000F5B54 A705                       	dc.b	nD3, $05
000F5B56 E606                       	smpsAlterVol        $06
000F5B58 A704 A705 A7               	dc.b	nD3, $04, nD3, $05, nD3
000F5B5D E6FA                       	smpsAlterVol        $FA
000F5B5F A704                       	dc.b	nD3, $04
000F5B61 E606                       	smpsAlterVol        $06
000F5B63 A705 A7A7 7FE7 19          	dc.b	nD3, $05, nD3, nD3, $7F, smpsNoAttack, $19
000F5B6A F2                         	smpsStop
000F5B6B                            
000F5B6B                            MerrysLittleLamb_FM2:
000F5B6B E0C0                       	smpsPan             panCenter, $00
000F5B6D 807F 7F7F 7F30             	dc.b	nRst, $7F, $7F, $7F, $7F, $30
000F5B75 E610                       	smpsAlterVol        $10
000F5B77 A87F E719 807F 7F7F 3E     	dc.b	nEb3, $7F, smpsNoAttack, $19, nRst, $7F, $7F, $7F, $3E
000F5B80                            
000F5B80                            MerrysLittleLamb_FM3:
000F5B80                            MerrysLittleLamb_FM4:
000F5B80                            MerrysLittleLamb_FM5:
000F5B80 F2                         	smpsStop
000F5B81                            
000F5B81                            MerrysLittleLamb_PSG1:
000F5B81 807F 7F7F 7F06 B701        	dc.b	nRst, $7F, $7F, $7F, $7F, $06, nFs4, $01
000F5B89 EC02                       	smpsPSGAlterVol     $02
000F5B8B B7                         	dc.b	nFs4
000F5B8C EC03                       	smpsPSGAlterVol     $03
000F5B8E B7                         	dc.b	nFs4
000F5B8F EC03                       	smpsPSGAlterVol     $03
000F5B91 B7                         	dc.b	nFs4
000F5B92 EC03                       	smpsPSGAlterVol     $03
000F5B94 B7                         	dc.b	nFs4
000F5B95 ECF5                       	smpsPSGAlterVol     $F5
000F5B97 B7                         	dc.b	nFs4
000F5B98 EC02                       	smpsPSGAlterVol     $02
000F5B9A B7                         	dc.b	nFs4
000F5B9B EC03                       	smpsPSGAlterVol     $03
000F5B9D B7                         	dc.b	nFs4
000F5B9E EC03                       	smpsPSGAlterVol     $03
000F5BA0 B7                         	dc.b	nFs4
000F5BA1 ECF8                       	smpsPSGAlterVol     $F8
000F5BA3 B7                         	dc.b	nFs4
000F5BA4 EC02                       	smpsPSGAlterVol     $02
000F5BA6 B7                         	dc.b	nFs4
000F5BA7 EC03                       	smpsPSGAlterVol     $03
000F5BA9 B7                         	dc.b	nFs4
000F5BAA EC03                       	smpsPSGAlterVol     $03
000F5BAC B7                         	dc.b	nFs4
000F5BAD EC03                       	smpsPSGAlterVol     $03
000F5BAF B7                         	dc.b	nFs4
000F5BB0 ECF5                       	smpsPSGAlterVol     $F5
000F5BB2 B7                         	dc.b	nFs4
000F5BB3 EC02                       	smpsPSGAlterVol     $02
000F5BB5 B7                         	dc.b	nFs4
000F5BB6 EC03                       	smpsPSGAlterVol     $03
000F5BB8 B7                         	dc.b	nFs4
000F5BB9 EC03                       	smpsPSGAlterVol     $03
000F5BBB B7                         	dc.b	nFs4
000F5BBC EC03                       	smpsPSGAlterVol     $03
000F5BBE B7                         	dc.b	nFs4
000F5BBF ECF5                       	smpsPSGAlterVol     $F5
000F5BC1 B7                         	dc.b	nFs4
000F5BC2 EC02                       	smpsPSGAlterVol     $02
000F5BC4 B7                         	dc.b	nFs4
000F5BC5 EC06                       	smpsPSGAlterVol     $06
000F5BC7 B7                         	dc.b	nFs4
000F5BC8 EC03                       	smpsPSGAlterVol     $03
000F5BCA B7                         	dc.b	nFs4
000F5BCB ECF5                       	smpsPSGAlterVol     $F5
000F5BCD B7                         	dc.b	nFs4
000F5BCE EC02                       	smpsPSGAlterVol     $02
000F5BD0 B7                         	dc.b	nFs4
000F5BD1 EC03                       	smpsPSGAlterVol     $03
000F5BD3 B7                         	dc.b	nFs4
000F5BD4 EC03                       	smpsPSGAlterVol     $03
000F5BD6 B7                         	dc.b	nFs4
000F5BD7 EC03                       	smpsPSGAlterVol     $03
000F5BD9 B7                         	dc.b	nFs4
000F5BDA ECF5                       	smpsPSGAlterVol     $F5
000F5BDC B7                         	dc.b	nFs4
000F5BDD EC02                       	smpsPSGAlterVol     $02
000F5BDF B7                         	dc.b	nFs4
000F5BE0 EC03                       	smpsPSGAlterVol     $03
000F5BE2 B7                         	dc.b	nFs4
000F5BE3 EC03                       	smpsPSGAlterVol     $03
000F5BE5 B7                         	dc.b	nFs4
000F5BE6 EC03                       	smpsPSGAlterVol     $03
000F5BE8 B780 7F2B                  	dc.b	nFs4, nRst, $7F, $2B
000F5BEC ECF7                       	smpsPSGAlterVol     $F7
000F5BEE A008 8006 9E08 8006 A308+  	dc.b	nG2, $08, nRst, $06, nF2, $08, nRst, $06, nBb2, $08, nRst, $0A
000F5BFA A006 8004 A005 8004 A205+  	dc.b	nG2, $06, nRst, $04, nG2, $05, nRst, $04, nA2, $05, nRst, $04
000F5C06 A005 8004 A208 8001 A305+  	dc.b	nG2, $05, nRst, $04, nA2, $08, nRst, $01, nBb2, $05, nRst, $01
000F5C12 A305 8003 A305 8001 A304+  	dc.b	nBb2, $05, nRst, $03, nBb2, $05, nRst, $01, nBb2, $04, nRst, nBb2
000F5C1E 0580 01A3 0480 A308 807F+  	dc.b	$05, nRst, $01, nBb2, $04, nRst, nBb2, $08, nRst, $7F, $7F, $26
000F5C2A F2                         	smpsStop
000F5C2B                            
000F5C2B                            MerrysLittleLamb_PSG2:
000F5C2B 807F 7F7F 7F7F 52          	dc.b	nRst, $7F, $7F, $7F, $7F, $7F, $52
000F5C32 EC02                       	smpsPSGAlterVol     $02
000F5C34 A708 8006 A908 8006 A908+  	dc.b	nD3, $08, nRst, $06, nE3, $08, nRst, $06, nE3, $08, nRst, $0A
000F5C40 E101                       	smpsAlterNote       $01
000F5C42 AB06 8004                  	dc.b	nFs3, $06, nRst, $04
000F5C46 E101                       	smpsAlterNote       $01
000F5C48 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000F5C4C E101                       	smpsAlterNote       $01
000F5C4E AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000F5C52 E101                       	smpsAlterNote       $01
000F5C54 AB05 8004                  	dc.b	nFs3, $05, nRst, $04
000F5C58 E101                       	smpsAlterNote       $01
000F5C5A AB08 8001                  	dc.b	nFs3, $08, nRst, $01
000F5C5E E101                       	smpsAlterNote       $01
000F5C60 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000F5C64 E101                       	smpsAlterNote       $01
000F5C66 AB05 8003                  	dc.b	nFs3, $05, nRst, $03
000F5C6A E101                       	smpsAlterNote       $01
000F5C6C AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000F5C70 E101                       	smpsAlterNote       $01
000F5C72 AB04 80                    	dc.b	nFs3, $04, nRst
000F5C75 E101                       	smpsAlterNote       $01
000F5C77 AB05 8001                  	dc.b	nFs3, $05, nRst, $01
000F5C7B E101                       	smpsAlterNote       $01
000F5C7D AB04 80                    	dc.b	nFs3, $04, nRst
000F5C80 E101                       	smpsAlterNote       $01
000F5C82 AB08 807F 7F26             	dc.b	nFs3, $08, nRst, $7F, $7F, $26
000F5C88 F2                         	smpsStop
000F5C89                            
000F5C89                            MerrysLittleLamb_PSG3:
000F5C89 807F 7F7F 7F39             	dc.b	nRst, $7F, $7F, $7F, $7F, $39
000F5C8F F3E7                       	smpsPSGform         $E7
000F5C91 E108                       	smpsAlterNote       $08
000F5C93 0002                       	dc.b	nMaxPSG, $02
000F5C95 EC01                       	smpsPSGAlterVol     $01
000F5C97 E108                       	smpsAlterNote       $08
000F5C99 0005                       	dc.b	nMaxPSG, $05
000F5C9B EC01                       	smpsPSGAlterVol     $01
000F5C9D E108                       	smpsAlterNote       $08
000F5C9F 0008                       	dc.b	nMaxPSG, $08
000F5CA1 EC01                       	smpsPSGAlterVol     $01
000F5CA3 E108                       	smpsAlterNote       $08
000F5CA5 00                         	dc.b	nMaxPSG
000F5CA6 EC01                       	smpsPSGAlterVol     $01
000F5CA8 E108                       	smpsAlterNote       $08
000F5CAA 00                         	dc.b	nMaxPSG
000F5CAB EC01                       	smpsPSGAlterVol     $01
000F5CAD E108                       	smpsAlterNote       $08
000F5CAF 0007                       	dc.b	nMaxPSG, $07
000F5CB1 EC01                       	smpsPSGAlterVol     $01
000F5CB3 E108                       	smpsAlterNote       $08
000F5CB5 0005                       	dc.b	nMaxPSG, $05
000F5CB7 EC01                       	smpsPSGAlterVol     $01
000F5CB9 E108                       	smpsAlterNote       $08
000F5CBB 0007                       	dc.b	nMaxPSG, $07
000F5CBD EC01                       	smpsPSGAlterVol     $01
000F5CBF E108                       	smpsAlterNote       $08
000F5CC1 0004                       	dc.b	nMaxPSG, $04
000F5CC3 EC01                       	smpsPSGAlterVol     $01
000F5CC5 E108                       	smpsAlterNote       $08
000F5CC7 0007                       	dc.b	nMaxPSG, $07
000F5CC9 EC01                       	smpsPSGAlterVol     $01
000F5CCB E108                       	smpsAlterNote       $08
000F5CCD 0006                       	dc.b	nMaxPSG, $06
000F5CCF EC01                       	smpsPSGAlterVol     $01
000F5CD1 E108                       	smpsAlterNote       $08
000F5CD3 0009                       	dc.b	nMaxPSG, $09
000F5CD5 EC01                       	smpsPSGAlterVol     $01
000F5CD7 E108                       	smpsAlterNote       $08
000F5CD9 0007                       	dc.b	nMaxPSG, $07
000F5CDB EC01                       	smpsPSGAlterVol     $01
000F5CDD E108                       	smpsAlterNote       $08
000F5CDF 0001                       	dc.b	nMaxPSG, $01
000F5CE1 ECFF                       	smpsPSGAlterVol     $FF
000F5CE3 E108                       	smpsAlterNote       $08
000F5CE5 00                         	dc.b	nMaxPSG
000F5CE6 EC01                       	smpsPSGAlterVol     $01
000F5CE8 E108                       	smpsAlterNote       $08
000F5CEA 0009                       	dc.b	nMaxPSG, $09
000F5CEC EC01                       	smpsPSGAlterVol     $01
000F5CEE E108                       	smpsAlterNote       $08
000F5CF0 0007 807F 7F7F 68          	dc.b	nMaxPSG, $07, nRst, $7F, $7F, $7F, $68
000F5CF7 F2                         	smpsStop
000F5CF8                            
000F5CF8                            MerrysLittleLamb_DAC:
000F5CF8 8913 8A06 8B0D 8A89 8989+  	dc.b	dMidTimpani, $13, dLowTimpani, $06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, $1A, dLowTimpani
000F5D04 0D8A 8A19 890D 8888 1A89+  	dc.b	$0D, dLowTimpani, dLowTimpani, $19, dMidTimpani, $0D, dHiTimpani, dHiTimpani, $1A, dMidTimpani, $14, dLowTimpani
000F5D10 068B 0D8A 8989 898A 0C8A+  	dc.b	$06, dVLowTimpani, $0D, dLowTimpani, dMidTimpani, dMidTimpani, dMidTimpani, dLowTimpani, $0C, dLowTimpani, $0D, dLowTimpani
000F5D1C 898A 8B34 890E 8A04 8B09+  	dc.b	dMidTimpani, dLowTimpani, dMerryWtf1, $34, dMidTimpani, $0E, dLowTimpani, $04, dVLowTimpani, $09, dLowTimpani, $0A
000F5D28 8909 8989 8A0A 8A09 8A8A+  	dc.b	dMidTimpani, $09, dMidTimpani, dMidTimpani, dMerryWtf2, $0A, dLowTimpani, $09, dLowTimpani, dLowTimpani, dMerryWtf3, dMidTimpani
000F5D34 0A88 0988 8289 0581 098A+  	dc.b	$0A, dHiTimpani, $09, dHiTimpani, dSnare, dMidTimpani, $05, dKick, $09, dLowTimpani, $05, dVLowTimpani
000F5D40 098A 8989 0A89 098A 8805+  	dc.b	$09, dLowTimpani, dMidTimpani, dMidTimpani, $0A, dMidTimpani, $09, dLowTimpani, dHiTimpani, $05, dMidTimpani, $04
000F5D4C 8A0A 8909 8A82 0182 0482+  	dc.b	dLowTimpani, $0A, dMidTimpani, $09, dLowTimpani, dSnare, $01, dSnare, $04, dSnare, $01, dSnare
000F5D58 0382 0181 0481 0182 0382+  	dc.b	$03, dSnare, $01, dKick, $04, dKick, $01, dSnare, $03, dSnare, $01, dKick
000F5D64 0481 0182 0482 0181 0381+  	dc.b	$04, dKick, $01, dSnare, $04, dSnare, $01, dKick, $03, dKick, $01, dSnare
000F5D70 0489 0582 0482 058A 048B+  	dc.b	$04, dMidTimpani, $05, dSnare, $04, dSnare, $05, dLowTimpani, $04, dVLowTimpani, $05, dSnare
000F5D7C 8A04 8205 8904 8205 8982+  	dc.b	dLowTimpani, $04, dSnare, $05, dMidTimpani, $04, dSnare, $05, dMidTimpani, dSnare, $04, dMidTimpani
000F5D88 0582 8A04 8205 8A04 8205+  	dc.b	$05, dSnare, dMerryWtf2, $04, dSnare, $05, dLowTimpani, $04, dSnare, $05, dLowTimpani, dSnare
000F5D94 048A 0582 0486 0582 8904+  	dc.b	$04, dLowTimpani, $05, dSnare, $04, $86, $05, dSnare, dMidTimpani, $04, dSnare, $05
000F5DA0 8804 8205 8882 0482 0582+  	dc.b	dHiTimpani, $04, dSnare, $05, dHiTimpani, dSnare, $04, dSnare, $05, dSnare, dMidTimpani, $04
000F5DAC 8205 8204 8A05 8B82 048A+  	dc.b	dSnare, $05, dSnare, $04, dLowTimpani, $05, dVLowTimpani, dSnare, $04, dLowTimpani, $05, dSnare
000F5DB8 0489 0582 8909 8904 8205+  	dc.b	$04, dMidTimpani, $05, dSnare, dMidTimpani, $09, dMidTimpani, $04, dSnare, $05, dLowTimpani, $09
000F5DC4 8801 8804 8801 8904 8988+  	dc.b	dHiTimpani, $01, dHiTimpani, $04, dHiTimpani, $01, dMidTimpani, $04, dMidTimpani, dHiTimpani, $01, dHiTimpani
000F5DD0 0488 0189 0389 0189 0488+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dHiTimpani, $01, dHiTimpani
000F5DDC 0488 0189 0389 0189 048A+  	dc.b	$04, dHiTimpani, $01, dMidTimpani, $03, dMidTimpani, $01, dMidTimpani, $04, dMerryClap, $01, dMerryClap
000F5DE8 038A 018B 048B 018B 0482+  	dc.b	$03, dMerryClap, $01, dVLowTimpani, $04, dVLowTimpani, $01, dVLowTimpani, $04, dSnare, $01, dKick
000F5DF4 0381 0182 0482 0181 0482+  	dc.b	$03, dKick, $01, dSnare, $04, dSnare, $01, dKick, $04, dSnare, $7F, nRst
000F5E00 F2                         	smpsStop
000F5E01                            
000F5E01                            MerrysLittleLamb_Voices:
000F5E01                            ;	Voice $00
000F5E01                            ;	$00
000F5E01                            ;	$70, $70, $70, $70, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $1F
000F5E01                            ;	$00, $00, $00, $12, 	$F0, $F0, $F0, $0F, 	$00, $00, $00, $00
000F5E01                            	smpsVcAlgorithm     $00
000F5E01                            	smpsVcFeedback      $00
000F5E01                            	smpsVcUnusedBits    $00
000F5E01                            	smpsVcDetune        $07, $07, $07, $07
000F5E01                            	smpsVcCoarseFreq    $00, $00, $00, $00
000F5E01                            	smpsVcRateScale     $00, $00, $00, $00
000F5E01                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F5E01                            	smpsVcAmpMod        $00, $00, $00, $00
000F5E01                            	smpsVcDecayRate1    $1F, $00, $00, $00
000F5E01                            	smpsVcDecayRate2    $12, $00, $00, $00
000F5E01                            	smpsVcDecayLevel    $00, $0F, $0F, $0F
000F5E01                            	smpsVcReleaseRate   $0F, $00, $00, $00
000F5E01 0070 7070 701F 1F1F 1F00+  	smpsVcTotalLevel    $00, $00, $00, $00
000F5E1A                            
000F5E1A                            ;	Voice $01
000F5E1A                            ;	$25
000F5E1A                            ;	$01, $01, $01, $71, 	$1E, $1E, $1E, $1E, 	$08, $06, $0B, $03
000F5E1A                            ;	$00, $00, $00, $00, 	$4F, $4F, $AF, $0F, 	$08, $16, $06, $00
000F5E1A                            	smpsVcAlgorithm     $05
000F5E1A                            	smpsVcFeedback      $04
000F5E1A                            	smpsVcUnusedBits    $00
000F5E1A                            	smpsVcDetune        $07, $00, $00, $00
000F5E1A                            	smpsVcCoarseFreq    $01, $01, $01, $01
000F5E1A                            	smpsVcRateScale     $00, $00, $00, $00
000F5E1A                            	smpsVcAttackRate    $1E, $1E, $1E, $1E
000F5E1A                            	smpsVcAmpMod        $00, $00, $00, $00
000F5E1A                            	smpsVcDecayRate1    $03, $0B, $06, $08
000F5E1A                            	smpsVcDecayRate2    $00, $00, $00, $00
000F5E1A                            	smpsVcDecayLevel    $00, $0A, $04, $04
000F5E1A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F5E1A 2501 0101 711E 1E1E 1E08+  	smpsVcTotalLevel    $00, $06, $16, $08
000F5E33                            
000F5E33                            
000F5E34 00                         		even
000F5E34                            Music8F:	incbin	sound\music8F.bin ; Game Over
000F6474 00                         		even
000F6474                            Music90:	incbin	sound\music90.bin ; Continue
000F680E 00                         		even
000F680E                            Music91:	include	sound\mus91.asm ; Megurine Luka I mean Credits
000F680E                            Mus91_Credits_Header:
000F680E =00000001                  smpsHeaderStartSong = 1
000F680E 0000                       	smpsHeaderVoice     Mus91_Credits_Voices
000F6810 0603                       	smpsHeaderChan      $06, $03
000F6812 0133                       	smpsHeaderTempo     $01, $33
000F6814                            
000F6818 0000 F412                  	smpsHeaderFM        Mus91_Credits_FM1,	$F4, $12
000F681C 0000 000B                  	smpsHeaderFM        Mus91_Credits_FM2,	$00, $0B
000F6820 0000 F414                  	smpsHeaderFM        Mus91_Credits_FM3,	$F4, $14
000F6824 0000 F408                  	smpsHeaderFM        Mus91_Credits_FM4,	$F4, $08
000F6828 0000 F420                  	smpsHeaderFM        Mus91_Credits_FM5,	$F4, $20
000F682C 0000 D001 0000             	smpsHeaderPSG       Mus91_Credits_PSG1,	$D0, $01, $00, $00
000F6832 0000 D003 0000             	smpsHeaderPSG       Mus91_Credits_PSG2,	$D0, $03, $00, $00
000F6838 0000 0003 0004             	smpsHeaderPSG       Mus91_Credits_PSG3,	$00, $03, $00, fTone_04
000F683E                            ;	this is just a rip of the track
000F683E                            ;	ripper, 	part,		joke
000F683E                            ;	undecided, 	intro,		undecided
000F683E                            ;	coninight, 	ghz,		luka luka night fever -FM1 done
000F683E                            ;	coninight, 	lz,		the cleveland show (callback) - COMPLETE!
000F683E                            ;	undecided, 	mz,		undecided
000F683E                            ;	carlos, 	slz,		meltdown
000F683E                            ;	undecided, 	sbz,		undecided
000F683E                            ;	undecided, 	ccz,		undecided
000F683E                            ;	undecided, 	ending,		undecided
000F683E                            
000F683E                            ; FM1 Data
000F683E                            Mus91_Credits_FM1:
000F683E E201                       	smpsNop             $01
000F6840 8060                       	dc.b	nRst, $60
000F6844 E6F8                       	smpsAlterVol        $F8
000F6846 E806                       	smpsNoteFill        $06
000F6848 F800 00                    	smpsCall            Mus91_Credits_Call11
000F684B E0C0                       	smpsPan             panCenter, $00
000F684D E800                       	smpsNoteFill        $00
000F6851 F00D 0107 04               	smpsModSet          $0D, $01, $07, $04
000F6856                            ; conis turn
000F6856 F800 00                    	smpsCall            Mus91_Credits_Call12	;ruka ruka
000F6859 C40C C5C7 18C5 30          	dc.b	nG5, $0C, nAb5, nBb5, $18, nAb5, $30	;โ naito fiibaa
000F6860                            
000F6860 F800 00                    	smpsCall            Mus91_Credits_Call12	;watashi wa 
000F6863 CC0C CAC9 CA               	dc.b	nEb6, $0C, nCs6, nC6, nCs6		;koko ni
000F6868 C9C9 C7C5 80               	dc.b	nC6, nC6, nBb5, nAb5, nRst		;iru kara
000F686D                            
000F686D C2C2 C4C5 C718             	dc.b	nF5, nF5, nG5, nAb5, nBb5, $18		;sukoshi de mo
000F6873 C4C5 0CC7 18C5 80          	dc.b	nG5, nAb5, $0C, nBb5, $18, nAb5, nRst	;shisen o
000F687A                            
000F687A C2C4 C5C7 0C               	dc.b	nF5, nG5, nAb5, nBb5, $0C		;sorashicha
000F687F F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000F6882 8060 6060 18               	dc.b	nRst, $60, $60, $60, $18
000F6887 F800 00                    	smpsCall           Mus91_Credits_DameDameYo	;dame dame yo
000F688A                            ;	dc.b	nRst, $30
000F688A                            ; conis turn again
000F688A F4                         	smpsModOff
000F688B E201                       	smpsNop             $01
000F688F E602                       	smpsAlterVol        $02
000F6891 C10C C4C1                  	dc.b	nE5, $0C, nG5, nE5			;My name is
000F6895                            ;cut for tempo change
000F6895 EA0F                       	smpsSetTempoMod     $0F
000F6897                            ;perfect now continue
000F6897 C409 C4C6 0C               	dc.b	nG5, $09, nG5, nA5, $0C			;Cleveland Brown
000F689C                            
000F689C C106 C103 BFBD 06          	dc.b	nE5, $06, nE5, $03, nD5, nC5, $06	;and I am
000F68A3 BD09 BDBA 0680             	dc.b	nC5, $09, nC5, nA4, $06, nRst		;proud to be
000F68A9                            
000F68A9 CD06 CBC8                  	dc.b	nE6, $06, nD6, nB5			; and silence
000F68AD CB09 C9C6 0C               	dc.b	nD6, $09, nC6, nA5, $0C
000F68B2                            
000F68B2 C806 C603 C4C6 06          	dc.b	nB5, $06, nA5, $03, nG5, nA5, $06
000F68B9 C609 C6C8 0680 0C          	dc.b	nA5, $09, nA5, nB5, $06, nRst, $0C
000F68C0                            
000F68C0 C9CB 04C9 CBC9 24          	dc.b	nC6, nD6, $04, nC6, nD6, nC6, $24	;welcome back to labyrinth zone from sonic 1
000F68C7 E9F4                       	smpsAlterPitch      $F4
000F68C9 E609                       	smpsAlterVol        $09
000F68CD 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000F68D4 F800 00                    	smpsCall            Mus91_Credits_Call0C
000F68D9 E6EB                       	smpsAlterVol        $EB
000F68DB 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000F68E0 F800 00                    	smpsCall            Mus91_Credits_Call0D
000F68E3 CD1E D906 D518 8024        	dc.b	nE6, $1E, nE7, $06, nC7, $18, nRst, $24
000F68EB E201                       	smpsNop             $01
000F68ED EA0A                       	smpsSetTempoMod     $0A
000F68F1 E90C                       	smpsAlterPitch      $0C
000F68F3 E60B                       	smpsAlterVol        $0B
000F68F5 F800 00                    	smpsCall            Mus91_Credits_Call0E
000F68F8 E201                       	smpsNop             $01
000F68FA EA07                       	smpsSetTempoMod     $07
000F68FC 8060                       	dc.b	nRst, $60
000F68FE E201                       	smpsNop             $01
000F6900 EA03                       	smpsSetTempoMod     $03
000F6902 8030                       	dc.b	nRst, $30
000F6906 E60E                       	smpsAlterVol        $0E
000F6908 8004 CE08 CD03 80CB 80C9+  	dc.b	nRst, $04, nF6, $08, nE6, $03, nRst, nD6, nRst, nC6, nRst, nD6
000F6914 80C9 04C6 8002 C780 04C7+  	dc.b	nRst, nC6, $04, nA5, nRst, $02, nBb5, nRst, $04, nBb5, $08, nC6
000F6920 0380 C780 C604 C780 02C9+  	dc.b	$03, nRst, nBb5, nRst, nA5, $04, nBb5, nRst, $02, nC6, $0E, nRst
000F692C 06CD 0280 04CD 0CCE CD0A+  	dc.b	$06, nE6, $02, nRst, $04, nE6, $0C, nF6, nE6, $0A, nD6, $02
000F6938 E201                       	smpsNop             $01
000F693A EA04                       	smpsSetTempoMod     $04
000F693C E6F5                       	smpsAlterVol        $F5
000F6940 8060                       	dc.b	nRst, $60
000F6942 F800 00                    	smpsCall            Mus91_Credits_Call07
000F6945 E609                       	smpsAlterVol        $09
000F6947 E103                       	smpsAlterNote       $03
000F694B F000 0106 04               	smpsModSet          $00, $01, $06, $04
000F6950 F800 00                    	smpsCall            Mus91_Credits_Call0B
000F6953 E6EF                       	smpsAlterVol        $EF
000F6957 E102                       	smpsAlterNote       $02
000F6959 966C E760                  	dc.b	nA1, $6C, smpsNoAttack, $60
000F695D E201                       	smpsNop             $01
000F695F F2                         	smpsStop
000F6960                            
000F6960                            Mus91_Credits_Call12:
000F6960                            	;whats the name of the pink haired vocaloid just askin'
000F6960                            	;and twice as well
000F6960                            	;them:
000F6960 C218 C9C2 C9               	dc.b	nF5, $18, nC6, nF5, nC6
000F6965 E3                         	smpsReturn
000F6966                            
000F6966                            Mus91_Credits_DameDameYo:
000F6966 C418 C50C C4C5 C2          	dc.b	nG5, $18, nAb5, $0C, nG5, nAb5, nF5	
000F696D E3                         	smpsReturn
000F696E                            
000F696E                            Mus91_Credits_Call07:
000F696E 800C CA15 8003 CA06 80CB+  	dc.b	nRst, $0C, nCs6, $15, nRst, $03, nCs6, $06, nRst, nD6, $0F, nRst
000F697A 03C8 1880 06CA 0680 CA80+  	dc.b	$03, nB5, $18, nRst, $06, nCs6, $06, nRst, nCs6, nRst, nCs6, nRst
000F6986 C680 C40F 8003 C818 8006   	dc.b	nA5, nRst, nG5, $0F, nRst, $03, nB5, $18, nRst, $06
000F6990 F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Call07
000F6995 E3                         	smpsReturn
000F6996                            
000F6996                            ; FM2 Data
000F6996                            Mus91_Credits_FM2:
000F6996 8060                       	dc.b	nRst, $60
000F699A                            
000F699A                            Mus91_Credits_Loop0F:
000F699A A70C A7B0 B0AC ACAE AEA7+  	dc.b	nD3, $0C, nD3, nB3, nB3, nG3, nG3, nA3, nA3, nD3, nD3, nA3
000F69A6 AEAB ABAC ACA5 A5AC ACAB+  	dc.b	nA3, nFs3, nFs3, nG3, nG3, nC3, nC3, nG3, nG3, nFs3, nFs3, nG3
000F69B2 ACA2 A2A2 A2A7 A7A7 A9     	dc.b	nG3, nA2, nA2, nA2, nA2, nD3, nD3, nD3, nE3
000F69BB F700 02FF DB               	smpsLoop            $00, $02, Mus91_Credits_Loop0F
000F69C2                            
000F69C2                            Mus91_Credits_Loop10:
000F69C2 E805                       	smpsNoteFill        $05
000F69C4 AA0C                       	dc.b	nF3, $0C
000F69C6 F800 00                    	smpsCall            Mus91_Credits_Call0F
000F69C9 E805                       	smpsNoteFill        $05
000F69CB A90C 0C0C 0C0C             	dc.b	nE3, $0C, $0C, $0C, $0C, $0C
000F69D1 E800                       	smpsNoteFill        $00
000F69D3 A5A7 A9                    	dc.b	nC3, nD3, nE3
000F69D6 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop10
000F69DB E805                       	smpsNoteFill        $05
000F69DD AA                         	dc.b	nF3
000F69DE F800 00                    	smpsCall            Mus91_Credits_Call0F
000F69E1 E805                       	smpsNoteFill        $05
000F69E3 A9                         	dc.b	nE3
000F69E4 F800 00                    	smpsCall            Mus91_Credits_Call0F
000F69E7 E805                       	smpsNoteFill        $05
000F69E9 A7                         	dc.b	nD3
000F69EA F800 00                    	smpsCall            Mus91_Credits_Call0F
000F69ED E805                       	smpsNoteFill        $05
000F69EF A50C 0C0C 0C0C             	dc.b	nC3, $0C, $0C, $0C, $0C, $0C
000F69F5 E800                       	smpsNoteFill        $00
000F69F7 A0A2 A4                    	dc.b	nG2, nA2, nB2
000F69FA E805                       	smpsNoteFill        $05
000F69FC                            
000F69FC                            Mus91_Credits_Loop11:
000F69FC A5                         	dc.b	nC3
000F69FD F700 18FF FB               	smpsLoop            $00, $18, Mus91_Credits_Loop11
000F6A02 E800                       	smpsNoteFill        $00
000F6A04 A506 80A5 0CA2 0680 A20C+  	dc.b	nC3, $06, nRst, nC3, $0C, nA2, $06, nRst, nA2, $0C, nBb2, $06
000F6A10 80A3 0CA4 0680 A40C        	dc.b	nRst, nBb2, $0C, nB2, $06, nRst, nB2, $0C
000F6A1A E9E8                       	smpsAlterPitch      $E8
000F6A1C E602                       	smpsAlterVol        $02
000F6A1E                            
000F6A1E                            Mus91_Credits_Loop12:
000F6A1E B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nA4, $09
000F6A2A 8003 BC0F 8003 BA80 B809+  	dc.b	nRst, $03, nB4, $0F, nRst, $03, nA4, nRst, nG4, $09, nRst, $03
000F6A36 B509 8003                  	dc.b	nE4, $09, nRst, $03
000F6A3A E905                       	smpsAlterPitch      $05
000F6A3C F700 02FF DE               	smpsLoop            $00, $02, Mus91_Credits_Loop12
000F6A41 E9F6                       	smpsAlterPitch      $F6
000F6A43 B10F 8003 B580 B809 8003+  	dc.b	nC4, $0F, nRst, $03, nE4, nRst, nG4, $09, nRst, $03, nE4, $09
000F6A4F 8003 B106 8012 B518        	dc.b	nRst, $03, nC4, $06, nRst, $12, nE4, $18
000F6A57 E601                       	smpsAlterVol        $01
000F6A5B                            
000F6A5B                            Mus91_Credits_Loop13:
000F6A5B AE03 80AE 06B5 0380 B506+  	dc.b	nA3, $03, nRst, nA3, $06, nE4, $03, nRst, nE4, $06, nD4, $03
000F6A67 80B3 06B5 0380 B506        	dc.b	nRst, nD4, $06, nE4, $03, nRst, nE4, $06
000F6A6F F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop13
000F6A74                            
000F6A74                            Mus91_Credits_Loop14:
000F6A74 B303 80B3 06BA 0380 BA06+  	dc.b	nD4, $03, nRst, nD4, $06, nA4, $03, nRst, nA4, $06, nF4, $03
000F6A80 80B6 06BA 0380 BA06        	dc.b	nRst, nF4, $06, nA4, $03, nRst, nA4, $06
000F6A88 F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop14
000F6A8D B003 80B0 06B6 0380 B606+  	dc.b	nB3, $03, nRst, nB3, $06, nF4, $03, nRst, nF4, $06, nD4, $03
000F6A99 80B3 06B6 0380 B606 B503+  	dc.b	nRst, nD4, $06, nF4, $03, nRst, nF4, $06, nE4, $03, nRst, nE4
000F6AA5 06BC 0380 BC06 B903 80B9+  	dc.b	$06, nB4, $03, nRst, nB4, $06, nAb4, $03, nRst, nAb4, $06, nB4
000F6AB1 0380 BC06 AE03 80AE 06B5+  	dc.b	$03, nRst, nB4, $06, nA3, $03, nRst, nA3, $06, nE4, $03, nRst
000F6ABD B506 B103 80B1 06B5 0380+  	dc.b	nE4, $06, nC4, $03, nRst, nC4, $06, nE4, $03, nRst, nE4, $06
000F6AC9 AE03 8009 8024             	dc.b	nA3, $03, nRst, $09, nRst, $24
000F6ACF E6F8                       	smpsAlterVol        $F8
000F6AD1 B106 8003 B180 06B1 1280+  	dc.b	nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst, $06, nC4
000F6ADD 0280 01B1 0280 01AF 0680+  	dc.b	$02, nRst, $01, nC4, $02, nRst, $01, nBb3, $06, nRst, $03, nBb3
000F6AE9 0380 06AE 1280 06AE 0280+  	dc.b	$03, nRst, $06, nA3, $12, nRst, $06, nA3, $02, nRst, $01, nA3
000F6AF5 0280 01                    	dc.b	$02, nRst, $01
000F6AF8                            
000F6AF8                            Mus91_Credits_Loop15:
000F6AF8 B306 8003 B306 8003 B302+  	dc.b	nD4, $06, nRst, $03, nD4, $06, nRst, $03, nD4, $02, nRst, $01
000F6B04 B302 8001                  	dc.b	nD4, $02, nRst, $01
000F6B08 E9FF                       	smpsAlterPitch      $FF
000F6B0A F700 04FF EA               	smpsLoop            $00, $04, Mus91_Credits_Loop15
000F6B0F E904                       	smpsAlterPitch      $04
000F6B11 AC06 8003 AC80 06AC 1280+  	dc.b	nG3, $06, nRst, $03, nG3, nRst, $06, nG3, $12, nRst, $06, nG3
000F6B1D 0280 01AC 0280 01B0 0680+  	dc.b	$02, nRst, $01, nG3, $02, nRst, $01, nB3, $06, nRst, $03, nB3
000F6B29 8006 B012 8006 B302 8001+  	dc.b	nRst, $06, nB3, $12, nRst, $06, nD4, $02, nRst, $01, nB3, $02
000F6B35 8001 B106 8003 B180 06B1+  	dc.b	nRst, $01, nC4, $06, nRst, $03, nC4, nRst, $06, nC4, $12, nRst
000F6B41 06B5 0280 01B6 0280 01B8+  	dc.b	$06, nE4, $02, nRst, $01, nF4, $02, nRst, $01, nG4, $06, nRst
000F6B4D AC24                       	dc.b	nG3, $24
000F6B51 E90C                       	smpsAlterPitch      $0C
000F6B53 E607                       	smpsAlterVol        $07
000F6B55 E806                       	smpsNoteFill        $06
000F6B57                            
000F6B57                            Mus91_Credits_Loop16:
000F6B57 F800 00                    	smpsCall            Mus91_Credits_Call10
000F6B5A E906                       	smpsAlterPitch      $06
000F6B5C F800 00                    	smpsCall            Mus91_Credits_Call10
000F6B5F E9FF                       	smpsAlterPitch      $FF
000F6B61 F800 00                    	smpsCall            Mus91_Credits_Call10
000F6B64 E902                       	smpsAlterPitch      $02
000F6B66 F800 00                    	smpsCall            Mus91_Credits_Call10
000F6B69 E9F9                       	smpsAlterPitch      $F9
000F6B6B F702 02FF E8               	smpsLoop            $02, $02, Mus91_Credits_Loop16
000F6B70 E800                       	smpsNoteFill        $00
000F6B72 E9F4                       	smpsAlterPitch      $F4
000F6B74 E6FC                       	smpsAlterVol        $FC
000F6B78 8030 8030 BA03 80BA 80B8+  	dc.b	nRst, $30, nRst, $30, nA4, $03, nRst, nA4, nRst, nG4, nRst, nG4
000F6B84 80B6 80B6 80B5 80B5 0280+  	dc.b	nRst, nF4, nRst, nF4, nRst, nE4, nRst, nE4, $02, nRst, nBb4
000F6B8F E602                       	smpsAlterVol        $02
000F6B91 8004 BB08 BD03 80BB 80BA+  	dc.b	nRst, $04, nBb4, $08, nC5, $03, nRst, nBb4, nRst, nA4, $06, nRst
000F6B9D BB04 BA80 02B8 8004 B808+  	dc.b	nBb4, $04, nA4, nRst, $02, nG4, nRst, $04, nG4, $08, nA4, $03
000F6BA9 80B8 80B6 80B6 80B8 04B6+  	dc.b	nRst, nG4, nRst, nF4, nRst, nF4, nRst, nG4, $04, nF4, nRst, $02
000F6BB5 B580 04B5 08B5 0380 B580+  	dc.b	nE4, nRst, $04, nE4, $08, nE4, $03, nRst, nE4, nRst, nA4, $09
000F6BC1 8003 BA0A B302             	dc.b	nRst, $03, nA4, $0A, nD4, $02
000F6BC7 E90C                       	smpsAlterPitch      $0C
000F6BC9 E6FE                       	smpsAlterVol        $FE
000F6BCD 8060                       	dc.b	nRst, $60
000F6BCF                            
000F6BCF                            Mus91_Credits_Loop17:
000F6BCF AE06 80AE 80A9 80A9 80AC+  	dc.b	nA3, $06, nRst, nA3, nRst, nE3, nRst, nE3, nRst, nG3, $12, nFs3
000F6BDB 0CAC 06AB 0CAE 0680 AE80+  	dc.b	$0C, nG3, $06, nFs3, $0C, nA3, $06, nRst, nA3, nRst, nE3, nRst
000F6BE7 A980 B312 B20C B306 B20C   	dc.b	nE3, nRst, nD4, $12, nCs4, $0C, nD4, $06, nCs4, $0C
000F6BF1 F700 02FF DA               	smpsLoop            $00, $02, Mus91_Credits_Loop17
000F6BF6 AC06 80A9 80AA 80AB 80AC+  	dc.b	nG3, $06, nRst, nE3, nRst, nF3, nRst, nFs3, nRst, nG3, $06, nG3
000F6C02 06A9 0680 AA80 AC80 A906+  	dc.b	$06, nE3, $06, nRst, nF3, nRst, nG3, nRst, nE3, $06, nRst, nE3
000F6C0E 80AD 80AD 80B0 0680 B080+  	dc.b	nRst, nAb3, nRst, nAb3, nRst, nB3, $06, nRst, nB3, nRst, nD4, nRst
000F6C1A B380 800C AE12 8006 AE12+  	dc.b	nD4, nRst, nRst, $0C, nA3, $12, nRst, $06, nA3, $12, nAb3, $12
000F6C26 AE06 80                    	dc.b	nA3, $06, nRst
000F6C29 E6FD                       	smpsAlterVol        $FD
000F6C2B A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000F6C2F F2                         	smpsStop
000F6C30                            
000F6C30                            	; Unused data
000F6C30                            	; Could this be a blanked-out 'smpsNop $01'? It's near an smpsStop.
000F6C30 0001                       	dc.b	$00, $01
000F6C32                            
000F6C32                            Mus91_Credits_Call0F:
000F6C32 0C0C 0C0C 0C0C             	dc.b	$0C, $0C, $0C, $0C, $0C, $0C
000F6C38 E800                       	smpsNoteFill        $00
000F6C3A 0C                         	dc.b	$0C
000F6C3B E3                         	smpsReturn
000F6C3C                            
000F6C3C                            Mus91_Credits_Call10:
000F6C3C B103 B1AC ACAE AEAC AC     	dc.b	nC4, $03, nC4, nG3, nG3, nA3, nA3, nG3, nG3
000F6C45 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Call10
000F6C4A E3                         	smpsReturn
000F6C4B                            
000F6C4B                            ; FM3 Data
000F6C4B                            Mus91_Credits_FM3:
000F6C4B 8060                       	dc.b	nRst, $60
000F6C4D F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_FM3
000F6C54 E601                       	smpsAlterVol        $01
000F6C56 E040                       	smpsPan             panRight, $00
000F6C58 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000F6C64 D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000F6C69                            
000F6C69                            Mus91_Credits_Loop0C:
000F6C69 E080                       	smpsPan             panLeft, $00
000F6C6B D9                         	dc.b	nE7
000F6C6C E040                       	smpsPan             panRight, $00
000F6C6E D5                         	dc.b	nC7
000F6C6F E602                       	smpsAlterVol        $02
000F6C71 F700 0DFF F4               	smpsLoop            $00, $0D, Mus91_Credits_Loop0C
000F6C76 E0C0                       	smpsPan             panCenter, $00
000F6C7A E6E5                       	smpsAlterVol        $E5
000F6C7C E9E8                       	smpsAlterPitch      $E8
000F6C7E D006 D2D5 0CD2 804E 80D0+  	dc.b	nG6, $06, nA6, nC7, $0C, nA6, nRst, $4E, nRst, nG6, $06, nA6
000F6C8A D50C D980 4E80 D006 D2D5+  	dc.b	nC7, $0C, nE7, nRst, $4E, nRst, nG6, $06, nA6, nC7, $0C, nA6
000F6C96 8036 80D5 0680 12D2 18D0+  	dc.b	nRst, $36, nRst, nC7, $06, nRst, $12, nA6, $18, nG6, $06, nRst
000F6CA2 D280 D580                  	dc.b	nA6, nRst, nC7, nRst
000F6CA6 F4                         	smpsModOff
000F6CA9 E6FE                       	smpsAlterVol        $FE
000F6CAB                            
000F6CAB                            Mus91_Credits_Loop0D:
000F6CAB C901 E7C8 1B80 08C7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $1B, nRst, $08, nBb5, $01, smpsNoAttack, nA5, $1B
000F6CB7 8008                       	dc.b	nRst, $08
000F6CB9 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop0D
000F6CBE C901 E7C8 0B80 0CC7 01E7+  	dc.b	nC6, $01, smpsNoAttack, nB5, $0B, nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $0B
000F6CCA 800C CA01 E7C9 1B80 08C9+  	dc.b	nRst, $0C, nCs6, $01, smpsNoAttack, nC6, $1B, nRst, $08, nC6, $01, smpsNoAttack
000F6CD6 C824 E718 E75A 8006        	dc.b	nB5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000F6CDE E918                       	smpsAlterPitch      $18
000F6CE0 8060 8080 30               	dc.b	nRst, $60, nRst, nRst, $30
000F6CE5 E9E8                       	smpsAlterPitch      $E8
000F6CE9 E90C                       	smpsAlterPitch      $0C
000F6CEB E603                       	smpsAlterVol        $03
000F6CED E102                       	smpsAlterNote       $02
000F6CEF 8018 C606 C8C9 CD          	dc.b	nRst, $18, nA5, $06, nB5, nC6, nE6
000F6CF6 F800 00                    	smpsCall            Mus91_Credits_Call0C
000F6CFB E90C                       	smpsAlterPitch      $0C
000F6CFD E60B                       	smpsAlterVol        $0B
000F6CFF 800C C4C6 D0               	dc.b	nRst, $0C, nG5, nA5, nG6
000F6D04 F800 00                    	smpsCall            Mus91_Credits_Call0D
000F6D09 E6EC                       	smpsAlterVol        $EC
000F6D0B 8006                       	dc.b	nRst, $06
000F6D0D E114                       	smpsAlterNote       $14
000F6D0F C401 E7                    	dc.b	nG5, $01, smpsNoAttack
000F6D12 E100                       	smpsAlterNote       $00
000F6D14 02C6 03                    	dc.b	$02, nA5, $03
000F6D17 E805                       	smpsNoteFill        $05
000F6D19 C903 C906 C603 C9          	dc.b	nC6, $03, nC6, $06, nA5, $03, nC6
000F6D20 E800                       	smpsNoteFill        $00
000F6D22 C9                         	dc.b	nC6
000F6D23 E6FC                       	smpsAlterVol        $FC
000F6D25 E933                       	smpsAlterPitch      $33
000F6D29 B403                       	dc.b	nEb4, $03
000F6D2B E607                       	smpsAlterVol        $07
000F6D2D B4                         	dc.b	nEb4
000F6D2E E607                       	smpsAlterVol        $07
000F6D30 B4                         	dc.b	nEb4
000F6D31 E607                       	smpsAlterVol        $07
000F6D33 B4                         	dc.b	nEb4
000F6D36 E6EF                       	smpsAlterVol        $EF
000F6D38 E9CD                       	smpsAlterPitch      $CD
000F6D3A CD03 CED0 8009             	dc.b	nE6, $03, nF6, nG6, nRst, $09
000F6D40 E1EC                       	smpsAlterNote       $EC
000F6D42 D501 E7                    	dc.b	nC7, $01, smpsNoAttack
000F6D45 E100                       	smpsAlterNote       $00
000F6D47 F02C 0104 04               	smpsModSet          $2C, $01, $04, $04
000F6D4C D523                       	dc.b	nC7, $23
000F6D4E F4                         	smpsModOff
000F6D51 E6FF                       	smpsAlterVol        $FF
000F6D53 E103                       	smpsAlterNote       $03
000F6D55 F800 00                    	smpsCall            Mus91_Credits_Call0E
000F6D58 E100                       	smpsAlterNote       $00
000F6D5C E609                       	smpsAlterVol        $09
000F6D5E 8030 8030 802E C202 8004+  	dc.b	nRst, $30, nRst, $30, nRst, $2E, nF5, $02, nRst, $04, nF5, $08
000F6D6A C203 80C2 80C1 0380 13BF+  	dc.b	nF5, $03, nRst, nF5, nRst, nE5, $03, nRst, $13, nD5, $02, nRst
000F6D76 04BF 08BF 0380 BF80 BD03+  	dc.b	$04, nD5, $08, nD5, $03, nRst, nD5, nRst, nC5, $03, nRst, $15
000F6D82 8004 D208 D003 80D0 80CE+  	dc.b	nRst, $04, nA6, $08, nG6, $03, nRst, nG6, nRst, nF6, nRst, nF6
000F6D8E 80CD 04CE 02CD 04CB 02     	dc.b	nRst, nE6, $04, nF6, $02, nE6, $04, nD6, $02
000F6D99 E6F9                       	smpsAlterVol        $F9
000F6D9B 8060                       	dc.b	nRst, $60
000F6D9D                            
000F6D9D                            Mus91_Credits_Loop0E:
000F6D9D CD06 80CD 80CA 80CA 80CB+  	dc.b	nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nD6, $12, nD6
000F6DA9 1ECD 0680 CD80 CA80 CA80+  	dc.b	$1E, nE6, $06, nRst, nE6, nRst, nCs6, nRst, nCs6, nRst, nG6, $12
000F6DB5 D01E                       	dc.b	nG6, $1E
000F6DB7 F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0E
000F6DBC 800C CB12 8006 CB80 CA12+  	dc.b	nRst, $0C, nD6, $12, nRst, $06, nD6, nRst, nCs6, $12, nD6, nCs6
000F6DC8 0CC5 18C8 CBD1 800C CD80+  	dc.b	$0C, nAb5, $18, nB5, nD6, nAb6, nRst, $0C, nE6, nRst, nE6, $12
000F6DD4 CCCD 0680                  	dc.b	nEb6, nE6, $06, nRst
000F6DDA E6F8                       	smpsAlterVol        $F8
000F6DDC E103                       	smpsAlterNote       $03
000F6DDE A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000F6DE2 F2                         	smpsStop
000F6DE3                            
000F6DE3                            Mus91_Credits_Call14:
000F6DE3 CB06 CDCF D0CD CFD0 D2CF+  	dc.b	nD6, $06, nE6, nFs6, nG6, nE6, nFs6, nG6, nA6, nFs6, nG6, nA6
000F6DEF D4D2 D4D5 D7               	dc.b	nB6, nA6, nB6, nC7, nD7
000F6DF4 E3                         	smpsReturn
000F6DF5                            
000F6DF5                            ; FM4 Data
000F6DF5                            Mus91_Credits_FM4:
000F6DF7 8060                       	dc.b	nRst, $60
000F6DF9 E608                       	smpsAlterVol        $08
000F6DFB F800 00                    	smpsCall            Mus91_Credits_Call08
000F6DFE C30C C380 80C6 C680 80     	dc.b	nFs5, $0C, nFs5, nRst, nRst, nA5, nA5, nRst, nRst
000F6E07 F800 00                    	smpsCall            Mus91_Credits_Call08
000F6E0A C624 2418                  	dc.b	nA5, $24, $24, $18
000F6E0E E080                       	smpsPan             panLeft, $00
000F6E10 F800 00                    	smpsCall            Mus91_Credits_Call03
000F6E13 E6F2                       	smpsAlterVol        $F2
000F6E15                            
000F6E15                            Mus91_Credits_Loop09:
000F6E15 C501 E7C4 1B80 08C3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $1B, nRst, $08, nFs5, $01, smpsNoAttack, nF5, $1B
000F6E21 8008                       	dc.b	nRst, $08
000F6E23 F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop09
000F6E28 C501 E7C4 0B80 0CC3 01E7+  	dc.b	nAb5, $01, smpsNoAttack, nG5, $0B, nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $0B
000F6E34 800C C701 E7C6 1B80 08C5+  	dc.b	nRst, $0C, nBb5, $01, smpsNoAttack, nA5, $1B, nRst, $08, nAb5, $01, smpsNoAttack
000F6E40 C424 E718 E75A 8006        	dc.b	nG5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000F6E48 E918                       	smpsAlterPitch      $18
000F6E4A 8060 8080 5A               	dc.b	nRst, $60, nRst, nRst, $5A
000F6E4F E0C0                       	smpsPan             panCenter, $00
000F6E53 E9F4                       	smpsAlterPitch      $F4
000F6E55 E605                       	smpsAlterVol        $05
000F6E57                            
000F6E57                            Mus91_Credits_Loop0A:
000F6E57 D409 8003 D480 D506 80D4+  	dc.b	nB6, $09, nRst, $03, nB6, nRst, nC7, $06, nRst, nB6, $0C, nRst
000F6E63 06                         	dc.b	$06
000F6E64 F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop0A
000F6E69 8012 D503 800F D503 801B+  	dc.b	nRst, $12, nC7, $03, nRst, $0F, nC7, $03, nRst, $1B, nC7, $03
000F6E75 800F D503 8009 CE09 8003+  	dc.b	nRst, $0F, nC7, $03, nRst, $09, nF6, $09, nRst, $03, nF6, nRst
000F6E81 D206 80CE 0C80 06D1 0980+  	dc.b	nA6, $06, nRst, nF6, $0C, nRst, $06, nAb6, $09, nRst, $03, nAb6
000F6E8D 80D4 0680 D10C 8006 8080+  	dc.b	nRst, nB6, $06, nRst, nAb6, $0C, nRst, $06, nRst, nRst, $0C, nC7
000F6E99 0380 0FD5 0380 0FD5 0380+  	dc.b	$03, nRst, $0F, nC7, $03, nRst, $0F, nC7, $03, nRst, $2D
000F6EA4 E9F4                       	smpsAlterPitch      $F4
000F6EA6 E603                       	smpsAlterVol        $03
000F6EAA E080                       	smpsPan             panLeft, $00
000F6EAC F800 00                    	smpsCall            Mus91_Credits_Call09
000F6EB1 E6F6                       	smpsAlterVol        $F6
000F6EB3 E918                       	smpsAlterPitch      $18
000F6EB5 F800 00                    	smpsCall            Mus91_Credits_Call0A
000F6EB8 800C                       	dc.b	nRst, $0C
000F6EBA E1EC                       	smpsAlterNote       $EC
000F6EBC C602                       	dc.b	nA5, $02
000F6EBE E100                       	smpsAlterNote       $00
000F6EC0 E70A 8003 C680 80C6 8009   	dc.b	smpsNoAttack, $0A, nRst, $03, nA5, nRst, nRst, nA5, nRst, $09
000F6ECA F800 00                    	smpsCall            Mus91_Credits_Call0A
000F6ECD E1EC                       	smpsAlterNote       $EC
000F6ECF C602                       	dc.b	nA5, $02
000F6ED1 E100                       	smpsAlterNote       $00
000F6ED3 0A80 06                    	dc.b	$0A, nRst, $06
000F6ED6 F018 0107 04               	smpsModSet          $18, $01, $07, $04
000F6EDB E1E2                       	smpsAlterNote       $E2
000F6EDD C602 E7                    	dc.b	nA5, $02, smpsNoAttack
000F6EE0 E100                       	smpsAlterNote       $00
000F6EE2 1C                         	dc.b	$1C
000F6EE3 E100                       	smpsAlterNote       $00
000F6EE5 E103                       	smpsAlterNote       $03
000F6EE7 F800 00                    	smpsCall            Mus91_Credits_Call06
000F6EEA E100                       	smpsAlterNote       $00
000F6EEC E0C0                       	smpsPan             panCenter, $00
000F6EF0 E6F5                       	smpsAlterVol        $F5
000F6EF2 8060                       	dc.b	nRst, $60
000F6EF4                            
000F6EF4                            Mus91_Credits_Loop0B:
000F6EF4 CA06 80CA 80C6 80C6 80C8+  	dc.b	nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nB5, $12, nB5
000F6F00 1ECA 0680 CA80 C680 C680+  	dc.b	$1E, nCs6, $06, nRst, nCs6, nRst, nA5, nRst, nA5, nRst, nD6, $12
000F6F0C CB1E                       	dc.b	nD6, $1E
000F6F0E F700 02FF E2               	smpsLoop            $00, $02, Mus91_Credits_Loop0B
000F6F15 E103                       	smpsAlterNote       $03
000F6F17 E608                       	smpsAlterVol        $08
000F6F19 F800 00                    	smpsCall            Mus91_Credits_Call0B
000F6F1E E6F0                       	smpsAlterVol        $F0
000F6F20 F000 0106 04               	smpsModSet          $00, $01, $06, $04
000F6F25 A26C E760                  	dc.b	nA2, $6C, smpsNoAttack, $60
000F6F29 F2                         	smpsStop
000F6F2A                            
000F6F2A                            Mus91_Credits_Call08:
000F6F2A C824 2418 C624 2418 C424+  	dc.b	nB5, $24, $24, $18, nA5, $24, $24, $18, nG5, $24, $24, $18
000F6F36 E3                         	smpsReturn
000F6F37                            
000F6F37                            Mus91_Credits_Call03:
000F6F39 E9E8                       	smpsAlterPitch      $E8
000F6F3B E60D                       	smpsAlterVol        $0D
000F6F3D                            
000F6F3D                            Mus91_Credits_Loop2D:
000F6F3D F800 00                    	smpsCall            Mus91_Credits_Call1B
000F6F40 BFBF                       	dc.b	nD5, nD5
000F6F42 F700 02FF F7               	smpsLoop            $00, $02, Mus91_Credits_Loop2D
000F6F47 F800 00                    	smpsCall            Mus91_Credits_Call1B
000F6F4A B5B5 BDBD BABA B6B6 B3B3+  	dc.b	nE4, nE4, nC5, nC5, nA4, nA4, nF4, nF4, nD4, nD4, nB4, nB4
000F6F56 E603                       	smpsAlterVol        $03
000F6F58 E90C                       	smpsAlterPitch      $0C
000F6F5C D018 D2D4                  	dc.b	nG6, $18, nA6, nB6
000F6F60 E9F4                       	smpsAlterPitch      $F4
000F6F64 E3                         	smpsReturn
000F6F65                            
000F6F65                            Mus91_Credits_Call1B:
000F6F65 C10C C1BD BDBA BAB6 B6BF+  	dc.b	nE5, $0C, nE5, nC5, nC5, nA4, nA4, nF4, nF4, nD5, nD5, nB4
000F6F71 BCB8 B8                    	dc.b	nB4, nG4, nG4
000F6F74 E3                         	smpsReturn
000F6F75                            
000F6F75                            Mus91_Credits_Call0A:
000F6F75 800C                       	dc.b	nRst, $0C
000F6F77 E1EC                       	smpsAlterNote       $EC
000F6F79 C402                       	dc.b	nG5, $02
000F6F7B E100                       	smpsAlterNote       $00
000F6F7D E706 8001 C403 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nG5, $03, nRst, $18, nRst, $0C
000F6F87 E1EC                       	smpsAlterNote       $EC
000F6F89 CA02                       	dc.b	nCs6, $02
000F6F8B E100                       	smpsAlterNote       $00
000F6F8D E706 8001 CA03 8018 800C   	dc.b	smpsNoAttack, $06, nRst, $01, nCs6, $03, nRst, $18, nRst, $0C
000F6F97 E1EC                       	smpsAlterNote       $EC
000F6F99 C902                       	dc.b	nC6, $02
000F6F9B E100                       	smpsAlterNote       $00
000F6F9D E706 8001 C903 8018        	dc.b	smpsNoAttack, $06, nRst, $01, nC6, $03, nRst, $18
000F6FA5 E3                         	smpsReturn
000F6FA6                            
000F6FA6                            Mus91_Credits_Call06:
000F6FA6 E608                       	smpsAlterVol        $08
000F6FAA 8030 8030                  	dc.b	nRst, $30, nRst, $30
000F6FAE E501                       	smpsChanTempoDiv    $01
000F6FB0 F800 00                    	smpsCall            Mus91_Credits_Call17
000F6FB3 E502                       	smpsChanTempoDiv    $02
000F6FB7 F001 0101 04               	smpsModSet          $01, $01, $01, $04
000F6FBC CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000F6FC8 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000F6FD4 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000F6FE0 0CCD D60A D702             	dc.b	$0C, nE6, nCs7, $0A, nD7, $02
000F6FE6 E3                         	smpsReturn
000F6FE7                            
000F6FE7                            Mus91_Credits_Call17:
000F6FE7 AF01 E7AE 0480 07AF 01E7+  	dc.b	nBb3, $01, smpsNoAttack, nA3, $04, nRst, $07, nBb3, $01, smpsNoAttack, nA3, $04
000F6FF3 8007 B101 E7B0 0480 07B1+  	dc.b	nRst, $07, nC4, $01, smpsNoAttack, nB3, $04, nRst, $07, nC4, $01, smpsNoAttack
000F6FFF B004 8007 B201 E7B1 0480+  	dc.b	nB3, $04, nRst, $07, nCs4, $01, smpsNoAttack, nC4, $04, nRst, $07, nCs4
000F700B 01E7 B104 8007 B301 E7B2+  	dc.b	$01, smpsNoAttack, nC4, $04, nRst, $07, nD4, $01, smpsNoAttack, nCs4, $04, nRst
000F7017 07B3 01E7 B204 8003        	dc.b	$07, nD4, $01, smpsNoAttack, nCs4, $04, nRst, $03
000F701F E3                         	smpsReturn
000F7020                            
000F7020                            Mus91_Credits_Call0B:
000F7020 800C D0D4 D7DB 8006 DB0C+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, nRst, $06, nFs7, $0C, nG7, $06
000F702C DB0C DD54 800C DE80 DE80+  	dc.b	nFs7, $0C, nAb7, $54, nRst, $0C, nA7, nRst, nA7, nRst, $12, nAb7
000F7038 DE0C                       	dc.b	nA7, $0C
000F703A E3                         	smpsReturn
000F703B                            
000F703B                            ; FM5 Data
000F703B                            Mus91_Credits_FM5:
000F703D 8060                       	dc.b	nRst, $60
000F703F E6F0                       	smpsAlterVol        $F0
000F7041 F800 00                    	smpsCall            Mus91_Credits_Call02
000F7044 BF0C 0C80 18C3 0C0C 8018   	dc.b	nD5, $0C, $0C, nRst, $18, nFs5, $0C, $0C, nRst, $18
000F704E F800 00                    	smpsCall            Mus91_Credits_Call02
000F7051 C324 2418                  	dc.b	nFs5, $24, $24, $18
000F7055 E040                       	smpsPan             panRight, $00
000F7057 F8FE DE                    	smpsCall            Mus91_Credits_Call03
000F705A E6F2                       	smpsAlterVol        $F2
000F705C                            
000F705C                            Mus91_Credits_Loop07:
000F705C C201 E7C1 1B80 08C0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $1B, nRst, $08, nEb5, $01, smpsNoAttack, nD5, $1B
000F7068 8008                       	dc.b	nRst, $08
000F706A F700 02FF EE               	smpsLoop            $00, $02, Mus91_Credits_Loop07
000F706F C201 E7C1 0B80 0CC0 01E7+  	dc.b	nF5, $01, smpsNoAttack, nE5, $0B, nRst, $0C, nEb5, $01, smpsNoAttack, nD5, $0B
000F707B 800C C301 E7C2 1B80 08C2+  	dc.b	nRst, $0C, nFs5, $01, smpsNoAttack, nF5, $1B, nRst, $08, nF5, $01, smpsNoAttack
000F7087 C124 E718 E75A 8006        	dc.b	nE5, $24, smpsNoAttack, $18, smpsNoAttack, $5A, nRst, $06
000F708F E918                       	smpsAlterPitch      $18
000F7091 E0C0                       	smpsPan             panCenter, $00
000F7093 E603                       	smpsAlterVol        $03
000F7095 E90C                       	smpsAlterPitch      $0C
000F7099 804E B803 BABD 80BA 8051+  	dc.b	nRst, $4E, nG4, $03, nA4, nC5, nRst, nA4, nRst, $51, nA5, $03
000F70A5 C2BD 80C2 805D             	dc.b	nF5, nC5, nRst, nF5, nRst, $5D
000F70AD E9E8                       	smpsAlterPitch      $E8
000F70AF E602                       	smpsAlterVol        $02
000F70B1                            
000F70B1                            Mus91_Credits_Loop08:
000F70B1 D009 8003 D080 D206 80D0+  	dc.b	nG6, $09, nRst, $03, nG6, nRst, nA6, $06, nRst, nG6, $0C, nRst
000F70BD 06                         	dc.b	$06
000F70BE F700 02FF EF               	smpsLoop            $00, $02, Mus91_Credits_Loop08
000F70C3 8012 D203 800F D203 801B+  	dc.b	nRst, $12, nA6, $03, nRst, $0F, nA6, $03, nRst, $1B, nA6, $03
000F70CF 800F D203 8009 CB09 8003+  	dc.b	nRst, $0F, nA6, $03, nRst, $09, nD6, $09, nRst, $03, nD6, nRst
000F70DB CE06 80CB 0C80 06CD 0980+  	dc.b	nF6, $06, nRst, nD6, $0C, nRst, $06, nE6, $09, nRst, $03, nE6
000F70E7 80D1 0680 CD0C 8018 D203+  	dc.b	nRst, nAb6, $06, nRst, nE6, $0C, nRst, $18, nA6, $03, nRst, $0F
000F70F3 D203 800F D203 802D        	dc.b	nA6, $03, nRst, $0F, nA6, $03, nRst, $2D
000F70FD E040                       	smpsPan             panRight, $00
000F70FF E9F4                       	smpsAlterPitch      $F4
000F7101 E603                       	smpsAlterVol        $03
000F7103 F800 00                    	smpsCall            Mus91_Credits_Call04
000F7108 E924                       	smpsAlterPitch      $24
000F710A E6F4                       	smpsAlterVol        $F4
000F710C F800 00                    	smpsCall            Mus91_Credits_Call05
000F710F CDCE D0                    	dc.b	nE6, nF6, nG6
000F7112 F800 00                    	smpsCall            Mus91_Credits_Call05
000F7115 D0CE CD                    	dc.b	nG6, nF6, nE6
000F7118 E9F4                       	smpsAlterPitch      $F4
000F711A F8FE 8A                    	smpsCall            Mus91_Credits_Call06
000F711D E0C0                       	smpsPan             panCenter, $00
000F7121 E103                       	smpsAlterNote       $03
000F7123 E6F8                       	smpsAlterVol        $F8
000F7125 8060                       	dc.b	nRst, $60
000F7127 F8F8 45                    	smpsCall            Mus91_Credits_Call07
000F712A E600                       	smpsAlterVol        $00
000F712E 8060 800C CD06 80D4 CD06+  	dc.b	nRst, $60, nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C
000F713A CD06 80D4 CD06 8018        	dc.b	nE6, $06, nRst, nB6, nE6, $06, nRst, $18
000F7142 E605                       	smpsAlterVol        $05
000F7144 800C AE80 AE               	dc.b	nRst, $0C, nA3, nRst, nA3
000F7149 F2                         	smpsStop
000F714A                            
000F714A                            Mus91_Credits_Call02:
000F714A C424 2418 C324 2418 C124+  	dc.b	nG5, $24, $24, $18, nFs5, $24, $24, $18, nE5, $24, $24, $18
000F7156 E3                         	smpsReturn
000F7157                            
000F7157                            ; PSG1 Data
000F7157                            Mus91_Credits_PSG1:
000F7157 8060                       	dc.b	nRst, $60
000F7159 F508                       	smpsPSGvoice        fTone_08
000F715B EC03                       	smpsPSGAlterVol     $03
000F715D E806                       	smpsNoteFill        $06
000F715F F800 00                    	smpsCall            Mus91_Credits_Call11
000F7162 F501                       	smpsPSGvoice        fTone_01
000F7164 E800                       	smpsNoteFill        $00
000F7166 ECFD                       	smpsPSGAlterVol     $FD
000F7168                            
000F7168                            Mus91_Credits_Loop2A:
000F7168 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000F7174 C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000F717C F700 03FF E8               	smpsLoop            $00, $03, Mus91_Credits_Loop2A
000F7181 8018 C606 801E C60C 8018+  	dc.b	nRst, $18, nA5, $06, nRst, $1E, nA5, $0C, nRst, $18, nRst, $18
000F718D C406 801E C40C 8018        	dc.b	nG5, $06, nRst, $1E, nG5, $0C, nRst, $18
000F7195 F505                       	smpsPSGvoice        fTone_05
000F7197 F00E 0101 03               	smpsModSet          $0E, $01, $01, $03
000F719C E810                       	smpsNoteFill        $10
000F719E C124 BFC1 BFC1 0C80 BF80+  	dc.b	nE5, $24, nD5, nE5, nD5, nE5, $0C, nRst, nD5, nRst, nF5, $24
000F71AA E800                       	smpsNoteFill        $00
000F71AC C160 E73C                  	dc.b	nE5, $60, smpsNoAttack, $3C
000F71B0 F4                         	smpsModOff
000F71B1 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000F71B3 EC01                       	smpsPSGAlterVol     $01
000F71B5                            
000F71B5                            Mus91_Credits_Loop2B:
000F71B5 8006 CD0C CDCD CD06 80CD+  	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, nE6, $0C, nE6
000F71C1 CD03 0906                  	dc.b	nE6, $03, $09, $06
000F71C5 E905                       	smpsAlterPitch      $05
000F71C7 F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop2B
000F71CC E9F6                       	smpsAlterPitch      $F6
000F71CE 8006 CD0C CDCD CD06 8030   	dc.b	nRst, $06, nE6, $0C, nE6, nE6, nE6, $06, nRst, $30
000F71D8 F508                       	smpsPSGvoice        fTone_08
000F71DA EC01                       	smpsPSGAlterVol     $01
000F71DC F800 00                    	smpsCall            Mus91_Credits_Call15
000F71DF 8002 8030                  	dc.b	nRst, $02, nRst, $30
000F71E3 EC03                       	smpsPSGAlterVol     $03
000F71E5 E9F4                       	smpsAlterPitch      $F4
000F71E7 F505                       	smpsPSGvoice        fTone_05
000F71E9 F800 00                    	smpsCall            Mus91_Credits_Call09
000F71EC E90C                       	smpsAlterPitch      $0C
000F71EE ECFC                       	smpsPSGAlterVol     $FC
000F71F0 F500                       	smpsPSGvoice        $00
000F71F2 F800 00                    	smpsCall            Mus91_Credits_Call16
000F71F5 800C C280 03C2 8080 C280+  	dc.b	nRst, $0C, nF5, nRst, $03, nF5, nRst, nRst, nF5, nRst, $09
000F7200 F800 00                    	smpsCall            Mus91_Credits_Call16
000F7203 C20C 8006 C21E             	dc.b	nF5, $0C, nRst, $06, nF5, $1E
000F7209 F506                       	smpsPSGvoice        fTone_06
000F720B EC04                       	smpsPSGAlterVol     $04
000F720D 8030 8030                  	dc.b	nRst, $30, nRst, $30
000F7211 E501                       	smpsChanTempoDiv    $01
000F7213 F8FD D2                    	smpsCall            Mus91_Credits_Call17
000F7216 E502                       	smpsChanTempoDiv    $02
000F7218 CB02 8004 CB08 CB03 80CB+  	dc.b	nD6, $02, nRst, $04, nD6, $08, nD6, $03, nRst, nD6, nRst, nC6
000F7224 80D2 80CE 8007 C702 8004+  	dc.b	nRst, nA6, nRst, nF6, nRst, $07, nBb5, $02, nRst, $04, nBb5, $08
000F7230 C703 80C7 80C6 0380 13C6+  	dc.b	nBb5, $03, nRst, nBb5, nRst, nA5, $03, nRst, $13, nA5, $0E, nCs6
000F723C 0CCD D60A D702 8060 8080+  	dc.b	$0C, nE6, nCs7, $0A, nD7, $02, nRst, $60, nRst, nRst, nRst, nRst
000F7248 ECFF                       	smpsPSGAlterVol     $FF
000F724A 800C C812 8006 C880 C612+  	dc.b	nRst, $0C, nB5, $12, nRst, $06, nB5, nRst, nA5, $12, nB5, nA5
000F7256 0CC1 18C5 C8CB 800C CA80+  	dc.b	$0C, nE5, $18, nAb5, nB5, nD6, nRst, $0C, nCs6, nRst, nCs6, $12
000F7262 C9CA 06                    	dc.b	nC6, nCs6, $06
000F7265 F2                         	smpsStop
000F7266                            
000F7266                            Mus91_Credits_Call16:
000F7266 800C C107 8002 C103 8018+  	dc.b	nRst, $0C, nE5, $07, nRst, $02, nE5, $03, nRst, $18, nRst, $0C
000F7272 C707 8002 C703 8018 800C+  	dc.b	nBb5, $07, nRst, $02, nBb5, $03, nRst, $18, nRst, $0C, nA5, $07
000F727E 8002 C603 8018             	dc.b	nRst, $02, nA5, $03, nRst, $18
000F7284 E3                         	smpsReturn
000F7285                            
000F7285                            ; PSG2 Data
000F7285                            Mus91_Credits_PSG2:
000F7285 8060                       	dc.b	nRst, $60
000F7287 F700 08FF FA               	smpsLoop            $00, $08, Mus91_Credits_PSG2
000F728C 8002                       	dc.b	nRst, $02
000F728E F8FB 53                    	smpsCall            Mus91_Credits_Call14
000F7291 ECFE                       	smpsPSGAlterVol     $FE
000F7293 F501                       	smpsPSGvoice        fTone_01
000F7295 8016 CD06 801E CD0C 8018+  	dc.b	nRst, $16, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000F72A1 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000F72A9                            Mus91_Credits_Loop24:
000F72A9 8018 CD06 801E CD0C 8018+  	dc.b	nRst, $18, nE6, $06, nRst, $1E, nE6, $0C, nRst, $18, nRst, $18
000F72B5 CB06 801E CB0C 8018        	dc.b	nD6, $06, nRst, $1E, nD6, $0C, nRst, $18
000F72BD F700 02FF E8               	smpsLoop            $00, $02, Mus91_Credits_Loop24
000F72C2 8018 C906 801E C90C 8018+  	dc.b	nRst, $18, nC6, $06, nRst, $1E, nC6, $0C, nRst, $18, nRst, $18
000F72CE C806 801E C80C 8018        	dc.b	nB5, $06, nRst, $1E, nB5, $0C, nRst, $18
000F72D6 E806                       	smpsNoteFill        $06
000F72D8 F506                       	smpsPSGvoice        fTone_06
000F72DA                            
000F72DA                            Mus91_Credits_Loop25:
000F72DA D50C D4D2 D0               	dc.b	nC7, $0C, nB6, nA6, nG6
000F72DF F700 08FF F7               	smpsLoop            $00, $08, Mus91_Credits_Loop25
000F72E4 E800                       	smpsNoteFill        $00
000F72E6 F508                       	smpsPSGvoice        fTone_08 ; changed from 9 to 8 for cleveland rip
000F72E8 EC01                       	smpsPSGAlterVol     $01
000F72EA                            
000F72EA                            Mus91_Credits_Loop26:
000F72EA 8006 D00C D0D0 D006 80D0+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, nG6, $0C, nG6
000F72F6 D003 0906                  	dc.b	nG6, $03, $09, $06
000F72FA E905                       	smpsAlterPitch      $05
000F72FC F700 02FF EA               	smpsLoop            $00, $02, Mus91_Credits_Loop26
000F7301 E9F6                       	smpsAlterPitch      $F6
000F7303 8006 D00C D0D0 D006 8030+  	dc.b	nRst, $06, nG6, $0C, nG6, nG6, nG6, $06, nRst, $30, nRst, $02
000F730F E101                       	smpsAlterNote       $01
000F7311 EC03                       	smpsPSGAlterVol     $03
000F7313 F800 00                    	smpsCall            Mus91_Credits_Call15
000F7316 E100                       	smpsAlterNote       $00
000F7318 8030                       	dc.b	nRst, $30
000F731A EC01                       	smpsPSGAlterVol     $01
000F731C E9F4                       	smpsAlterPitch      $F4
000F731E F505                       	smpsPSGvoice        fTone_05
000F7320 F800 00                    	smpsCall            Mus91_Credits_Call04
000F7323 E90C                       	smpsAlterPitch      $0C
000F7325 ECFD                       	smpsPSGAlterVol     $FD
000F7327 E803                       	smpsNoteFill        $03
000F7329                            
000F7329                            Mus91_Credits_Loop27:
000F7329 D503 D5DC D5DA D5D9 D5     	dc.b	nC7, $03, nC7, nG7, nC7, nF7, nC7, nE7, nC7
000F7332 F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop27
000F7337                            
000F7337                            Mus91_Credits_Loop28:
000F7337 D3D3 DAD3 D8D3 D6D3        	dc.b	nBb6, nBb6, nF7, nBb6, nEb7, nBb6, nCs7, nBb6
000F733F F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop28
000F7344                            
000F7344                            Mus91_Credits_Loop29:
000F7344 D2D2 D9D2 D7D2 D5D2        	dc.b	nA6, nA6, nE7, nA6, nD7, nA6, nC7, nA6
000F734C F700 04FF F4               	smpsLoop            $00, $04, Mus91_Credits_Loop29
000F7351 F701 02FF D4               	smpsLoop            $01, $02, Mus91_Credits_Loop27
000F7356 8060 8080 8080 80          	dc.b	nRst, $60, nRst, nRst, nRst, nRst, nRst
000F735D                            ;	; These rests are unnecessary, and cause the following notes to play way too late.
000F735D                            ;	; Delete these three notes to fix this.
000F735D                            ;	dc.b	nRst, nRst, nRst
000F735D                            ;	; This erroneous FM-only command causes the following notes to be inaudible.
000F735D                            ;	smpsAlterVol        $0C
000F735D                            ; there we go i fixed it - coni
000F735D E102                       	smpsAlterNote       $02
000F735F EC02                       	smpsPSGAlterVol     $02
000F7361 800C CD06 80D4 CD06 800C+  	dc.b	nRst, $0C, nE6, $06, nRst, nB6, nE6, $06, nRst, $0C, nE6, $06
000F736D 80D4 CD                    	dc.b	nRst, nB6, nE6
000F7370 F2                         	smpsStop
000F7371                            
000F7371                            ; PSG3 Data
000F7371                            Mus91_Credits_PSG3:
000F7371 F3E7                       	smpsPSGform         $E7
000F7373 E804                       	smpsNoteFill        $04
000F7375                            
000F7375                            Mus91_Credits_Loop18:
000F7375 000C                       	dc.b	nMaxPSG, $0C
000F7377 F700 48FF FA               	smpsLoop            $00, $48, Mus91_Credits_Loop18
000F737C E806                       	smpsNoteFill        $06
000F737E                            
000F737E                            Mus91_Credits_Loop19:
000F737E 0C                         	dc.b	$0C
000F737F F700 60FF FB               	smpsLoop            $00, $60, Mus91_Credits_Loop19
000F7384 ECFF                       	smpsPSGAlterVol     $FF
000F7386 F800 00                    	smpsCall            Mus91_Credits_Call13
000F7389 E80E                       	smpsNoteFill        $0E
000F738B 0C                         	dc.b	$0C
000F738C E803                       	smpsNoteFill        $03
000F738E 0606 0303 0603 0306        	dc.b	$06, $06, $03, $03, $06, $03, $03, $06
000F7396                            
000F7396                            Mus91_Credits_Loop1A:
000F7396 F800 00                    	smpsCall            Mus91_Credits_Call13
000F7399 F700 04FF F9               	smpsLoop            $00, $04, Mus91_Credits_Loop1A
000F739E F509                       	smpsPSGvoice        fTone_09
000F73A0 EC01                       	smpsPSGAlterVol     $01
000F73A2 E90B                       	smpsAlterPitch      $0B
000F73A4                            
000F73A4                            Mus91_Credits_Loop1B:
000F73A4 AE06 AEB5 B5B3 B3B5 B5     	dc.b	nA3, $06, nA3, nE4, nE4, nD4, nD4, nE4, nE4
000F73AD F700 02FF F3               	smpsLoop            $00, $02, Mus91_Credits_Loop1B
000F73B2                            
000F73B2                            Mus91_Credits_Loop1C:
000F73B2 B3B3 BABA B6B6 BABA        	dc.b	nD4, nD4, nA4, nA4, nF4, nF4, nA4, nA4
000F73BA F700 02FF F4               	smpsLoop            $00, $02, Mus91_Credits_Loop1C
000F73BF B0B0 B6B6 B3B3 B6B6 B5B5+  	dc.b	nB3, nB3, nF4, nF4, nD4, nD4, nF4, nF4, nE4, nE4, nB4, nB4
000F73CB B9B9 BCBC AEAE B5B5 B1B1+  	dc.b	nAb4, nAb4, nB4, nB4, nA3, nA3, nE4, nE4, nC4, nC4, nE4, nE4
000F73D7 AE06 801E                  	dc.b	nA3, $06, nRst, $1E
000F73DB E802                       	smpsNoteFill        $02
000F73DD E9F5                       	smpsAlterPitch      $F5
000F73DF                            
000F73DF                            Mus91_Credits_Loop1D:
000F73DF F504                       	smpsPSGvoice        fTone_04
000F73E1 0003 03                    	dc.b	nMaxPSG, $03, $03
000F73E4 EC02                       	smpsPSGAlterVol     $02
000F73E6 F508                       	smpsPSGvoice        fTone_08
000F73E8 E808                       	smpsNoteFill        $08
000F73EA 06                         	dc.b	$06
000F73EB E803                       	smpsNoteFill        $03
000F73ED ECFE                       	smpsPSGAlterVol     $FE
000F73EF F700 1EFF EC               	smpsLoop            $00, $1E, Mus91_Credits_Loop1D
000F73F4 8024                       	dc.b	nRst, $24
000F73F6                            
000F73F6                            Mus91_Credits_Loop1E:
000F73F6 F504                       	smpsPSGvoice        fTone_04
000F73F8 0303                       	dc.b	$03, $03
000F73FA EC02                       	smpsPSGAlterVol     $02
000F73FC F508                       	smpsPSGvoice        fTone_08
000F73FE E808                       	smpsNoteFill        $08
000F7400 06                         	dc.b	$06
000F7401 E803                       	smpsNoteFill        $03
000F7403 ECFE                       	smpsPSGAlterVol     $FE
000F7405 F700 20FF ED               	smpsLoop            $00, $20, Mus91_Credits_Loop1E
000F740A 8030                       	dc.b	nRst, $30
000F740C E801                       	smpsNoteFill        $01
000F740E F504                       	smpsPSGvoice        fTone_04
000F7410 EC03                       	smpsPSGAlterVol     $03
000F7412                            
000F7412                            Mus91_Credits_Loop1F:
000F7412 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000F7416 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop1F
000F741B                            
000F741B                            Mus91_Credits_Loop20:
000F741B 8004 0002                  	dc.b	nRst, $04, nMaxPSG, $02
000F741F F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop20
000F7424 ECFF                       	smpsPSGAlterVol     $FF
000F7426                            
000F7426                            Mus91_Credits_Loop21:
000F7426 0002 8000                  	dc.b	nMaxPSG, $02, nRst, nMaxPSG
000F742A F700 18FF F8               	smpsLoop            $00, $18, Mus91_Credits_Loop21
000F742F ECFE                       	smpsPSGAlterVol     $FE
000F7431                            
000F7431                            Mus91_Credits_Loop22:
000F7431 0004 8000                  	dc.b	nMaxPSG, $04, nRst, nMaxPSG
000F7435 F700 08FF F8               	smpsLoop            $00, $08, Mus91_Credits_Loop22
000F743A                            
000F743A                            Mus91_Credits_Loop23:
000F743A E803                       	smpsNoteFill        $03
000F743C 0C                         	dc.b	$0C
000F743D E80C                       	smpsNoteFill        $0C
000F743F 0C                         	dc.b	$0C
000F7440 E803                       	smpsNoteFill        $03
000F7442 0C                         	dc.b	$0C
000F7443 E80C                       	smpsNoteFill        $0C
000F7445 0C                         	dc.b	$0C
000F7446 F700 0DFF F0               	smpsLoop            $00, $0D, Mus91_Credits_Loop23
000F744B E803                       	smpsNoteFill        $03
000F744D 06                         	dc.b	$06
000F744E E80E                       	smpsNoteFill        $0E
000F7450 12                         	dc.b	$12
000F7451 E803                       	smpsNoteFill        $03
000F7453 0C                         	dc.b	$0C
000F7454 E80F                       	smpsNoteFill        $0F
000F7456 0C                         	dc.b	$0C
000F7457 F2                         	smpsStop
000F7458                            
000F7458                            ; DAC Data
000F7458                            Mus91_Credits_DAC:
000F7458 8206 8282 8282 0C06 0C06+  	dc.b	dSnare, $06, dSnare, dSnare, dSnare, dSnare, $0C, $06, $0C, $06, $0C, $0C
000F7464 0C                         	dc.b	$0C
000F7465 F800 00                    	smpsCall            Mus91_Credits_Call00
000F7468 8118 820C 8281 1882 0C82   	dc.b	dKick, $18, dSnare, $0C, dSnare, dKick, $18, dSnare, $0C, dSnare
000F7472 F800 00                    	smpsCall            Mus91_Credits_Call00
000F7475 810C 8282 8282 8282 82     	dc.b	dKick, $0C, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000F747E                            
000F747E                            Mus91_Credits_Loop00:
000F747E 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000F7487 F700 07FF F3               	smpsLoop            $00, $07, Mus91_Credits_Loop00
000F748C 8118 820C 8118 820C 0C0C   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, $0C, $0C
000F7496                            
000F7496                            Mus91_Credits_Loop01:
000F7496 8118 820C 8118 0C82 18     	dc.b	dKick, $18, dSnare, $0C, dKick, $18, $0C, dSnare, $18
000F749F F700 03FF F3               	smpsLoop            $00, $03, Mus91_Credits_Loop01
000F74A4 8118 820C 8118 820C 8282   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dSnare, $0C, dSnare, dSnare
000F74AE EB02                       	smpsSetTempoDiv     $02
000F74B0                            
000F74B0                            Mus91_Credits_Loop02:
000F74B0 8112 8106 810C 82          	dc.b	dKick, $12, dKick, $06, dKick, $0C, dSnare
000F74B7 F700 05FF F5               	smpsLoop            $00, $05, Mus91_Credits_Loop02
000F74BC 8112 8106 8106 8282 82     	dc.b	dKick, $12, dKick, $06, dKick, $06, dSnare, dSnare, dSnare
000F74C5                            
000F74C5                            Mus91_Credits_Loop03:
000F74C5 810C                       	dc.b	dKick, $0C
000F74C7 F700 18FF FA               	smpsLoop            $00, $18, Mus91_Credits_Loop03
000F74CC 810C 8181 8106 8102 8182+  	dc.b	dKick, $0C, dKick, dKick, dKick, $06, dKick, $02, dKick, dSnare, dSnare, $0C
000F74D8 8024                       	dc.b	nRst, $24
000F74DA                            
000F74DA                            Mus91_Credits_Loop04:
000F74DA 810C 8181 81               	dc.b	dKick, $0C, dKick, dKick, dKick
000F74DF F700 07FF F7               	smpsLoop            $00, $07, Mus91_Credits_Loop04
000F74E4 810C 8182 0382 8282 8282+  	dc.b	dKick, $0C, dKick, dSnare, $03, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare, dSnare
000F74F0 F800 00                    	smpsCall            Mus91_Credits_Call01
000F74F3 8802 8101 8905 8201 8805+  	dc.b	dHiTimpani, $02, dKick, $01, dMidTimpani, $05, dSnare, $01, dHiTimpani, $05, dMidTimpani, $06
000F74FF F800 00                    	smpsCall            Mus91_Credits_Call01
000F7502 8902 8201 8805 8201 8905+  	dc.b	dMidTimpani, $02, dSnare, $01, dHiTimpani, $05, dSnare, $01, dMidTimpani, $05, dSnare, $01
000F750E 8802 8203 8203 8281 8182+  	dc.b	dHiTimpani, $02, dSnare, $03, dSnare, $03, dSnare, dKick, dKick, dSnare, dSnare, dKick
000F751A 8181 8209 8206 0303 8109+  	dc.b	dKick, dKick, dSnare, $09, dSnare, $06, $03, $03, dKick, $09, $03, dSnare
000F7526 0981 0606 0382 0603 0382+  	dc.b	$09, dKick, $06, $06, $03, dSnare, $06, $03, $03, dSnare, $06, dSnare
000F7532 8282 8282 8204 0204 8102   	dc.b	dSnare, dSnare, dSnare, dSnare, dSnare, $04, $02, $04, dKick, $02
000F753C                            
000F753C                            Mus91_Credits_Loop05:
000F753C 8004 8108 8206 8181 0C82+  	dc.b	nRst, $04, dKick, $08, dSnare, $06, dKick, dKick, $0C, dSnare, $0A, dKick
000F7548 02                         	dc.b	$02
000F7549 F700 03FF EF               	smpsLoop            $00, $03, Mus91_Credits_Loop05
000F754E EB01                       	smpsSetTempoDiv     $01
000F7550 8018 8214 8104 820C 8282+  	dc.b	nRst, $18, dSnare, $14, dKick, $04, dSnare, $0C, dSnare, dSnare, $0C, $08
000F755C 8104                       	dc.b	dKick, $04
000F755E                            
000F755E                            Mus91_Credits_Loop06:
000F755E 810C 8281 82               	dc.b	dKick, $0C, dSnare, dKick, dSnare
000F7563 F701 03FF F7               	smpsLoop            $01, $03, Mus91_Credits_Loop06
000F7568 810C 8281 0680 0282 8282+  	dc.b	dKick, $0C, dSnare, dKick, $06, nRst, $02, dSnare, dSnare, dSnare, $09, dSnare
000F7574 03                         	dc.b	$03
000F7575 F700 03FF E5               	smpsLoop            $00, $03, Mus91_Credits_Loop06
000F757A 810C 8281 8281 0682 1282+  	dc.b	dKick, $0C, dSnare, dKick, dSnare, dKick, $06, dSnare, $12, dSnare, $0C, dKick
000F7586 F2                         	smpsStop
000F7587                            
000F7587                            Mus91_Credits_Call00:
000F7587 8118 820C 8118 810C 8281   	dc.b	dKick, $18, dSnare, $0C, dKick, $18, dKick, $0C, dSnare, dKick
000F7591 F700 03FF F2               	smpsLoop            $00, $03, Mus91_Credits_Call00
000F7596 E3                         	smpsReturn
000F7597                            
000F7597                            Mus91_Credits_Call01:
000F7597 810C 8209 8106 0381 0188+  	dc.b	dKick, $0C, dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani
000F75A3 0382 0188 0B81 0C82 0981+  	dc.b	$03, dSnare, $01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, $03
000F75AF 8101 8802 8903 8201 880B+  	dc.b	dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare, $01, dHiTimpani, $0B, dKick, $0C
000F75BB 8209 8106 0381 0188 0289+  	dc.b	dSnare, $09, dKick, $06, $03, dKick, $01, dHiTimpani, $02, dMidTimpani, $03, dSnare
000F75C7 0188 0B81 0C82 0981 0682+  	dc.b	$01, dHiTimpani, $0B, dKick, $0C, dSnare, $09, dKick, $06, dSnare, $01
000F75D2 E3                         	smpsReturn
000F75D3                            
000F75D3                            Mus91_Credits_Call11:
000F75D3 F800 00                    	smpsCall            Mus91_Credits_Call1A
000F75D6 C3BF C1C3 BF               	dc.b	nFs5, nD5, nE5, nFs5, nD5
000F75DB F800 00                    	smpsCall            Mus91_Credits_Call1A
000F75DE C8C6 C8C9 CB               	dc.b	nB5, nA5, nB5, nC6, nD6
000F75E3 E3                         	smpsReturn
000F75E4                            
000F75E4                            Mus91_Credits_Call1A:
000F75E4 C80C C4C8 CBC9 C8C6 C8C6+  	dc.b	nB5, $0C, nG5, nB5, nD6, nC6, nB5, nA5, nB5, nA5, nFs5, nA5
000F75F0 C9C8 C6C4 C6C4 C1C4 C8C6+  	dc.b	nC6, nB5, nA5, nG5, nA5, nG5, nE5, nG5, nB5, nA5, nG5, nFs5
000F75FC C4C3 C4C6                  	dc.b	nG5, nFs5, nG5, nA5
000F7600 E3                         	smpsReturn
000F7601                            
000F7601                            ; Unused alternate version of Mus91_Credits_Call0B
000F7601                            ; Mus91_Credits_CallUnk:
000F7601 800C D0D4 D7DB 0C80 06DB+  	dc.b	nRst, $0C, nG6, nB6, nD7, nFs7, $0C, nRst, $06, nFs7, $0C, nG7
000F760D 06DB 0CD9 6080 0CD0 D4D7+  	dc.b	$06, nFs7, $0C, nE7, $60, nRst, $0C, nG6, nB6, nD7, nFs7, $0C
000F7619 8006 DB0C DC06 DB0C DD5D+  	dc.b	nRst, $06, nFs7, $0C, nG7, $06, nFs7, $0C, nAb7, $5D, nRst, $03
000F7625 DE12 8006 DE12 8006 8006+  	dc.b	nA7, $12, nRst, $06, nA7, $12, nRst, $06, nRst, $06, nAb7, $12
000F7631 DE06 8012                  	dc.b	nA7, $06, nRst, $12
000F7635 E3                         	smpsReturn
000F7636                            
000F7636                            Mus91_Credits_Call13:
000F7636 E80E                       	smpsNoteFill        $0E
000F7638 0C                         	dc.b	$0C
000F7639 E803                       	smpsNoteFill        $03
000F763B 0606 0606 0606             	dc.b	$06, $06, $06, $06, $06, $06
000F7641 E3                         	smpsReturn
000F7642                            
000F7642                            Mus91_Credits_Call0C:
000F7642 D409 8003 D406 D2          	dc.b	nB6, $09, nRst, $03, nB6, $06, nA6
000F7649 F700 03FF F5               	smpsLoop            $00, $03, Mus91_Credits_Call0C
000F764E D4D2 CDC9 D00C D206 E7CE+  	dc.b	nB6, nA6, nE6, nC6, nG6, $0C, nA6, $06, smpsNoAttack, nF6, $4D, nRst
000F765A 01D2 24D4 0CD1 24D4 0980+  	dc.b	$01, nA6, $24, nB6, $0C, nAb6, $24, nB6, $09, nRst, $03, nB6
000F7666 12D2 1E                    	dc.b	$12, nA6, $1E
000F7669 E3                         	smpsReturn
000F766A                            
000F766A                            Mus91_Credits_Call15:
000F766A 8030 8080 DA03 D7D2 CED7+  	dc.b	nRst, $30, nRst, nRst, nF7, $03, nD7, nA6, nF6, nD7, nA6, nF6
000F7676 CBD2 CECB C6CE CBC6 C233+  	dc.b	nD6, nA6, nF6, nD6, nA5, nF6, nD6, nA5, nF5, $33, nRst, $5E
000F7682 E3                         	smpsReturn
000F7683                            
000F7683                            Mus91_Credits_Call0D:
000F7683 CD2A CD03 CED0 09D2 D306+  	dc.b	nE6, $2A, nE6, $03, nF6, nG6, $09, nA6, nBb6, $06, nA6, $0C
000F768F D0CE 1ECE 06CD CE1E CB0C+  	dc.b	nG6, nF6, $1E, nF6, $06, nE6, nF6, $1E, nD6, $0C, nE6, nF6
000F769B 2ACB 03CD CE09 D0D1 06D0+  	dc.b	$2A, nD6, $03, nE6, nF6, $09, nG6, nAb6, $06, nG6, $0C, nF6
000F76A7 E3                         	smpsReturn
000F76A8                            
000F76A8                            Mus91_Credits_Call04:
000F76A8 F800 00                    	smpsCall            Mus91_Credits_Call19
000F76AB CB06 8003 CB80 06CA 1880+  	dc.b	nD6, $06, nRst, $03, nD6, nRst, $06, nCs6, $18, nRst, $06
000F76B6                            
000F76B6                            Mus91_Credits_Loop2C:
000F76B6 CE06 8003 CD06 8003 CB80   	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, nRst
000F76C0 F700 02FF F2               	smpsLoop            $00, $02, Mus91_Credits_Loop2C
000F76C5 CE06 8003 CD06 8003 CB18+  	dc.b	nF6, $06, nRst, $03, nE6, $06, nRst, $03, nD6, $18, nRst, $06
000F76D1 E9FE                       	smpsAlterPitch      $FE
000F76D3 F800 00                    	smpsCall            Mus91_Credits_Call19
000F76D6 E903                       	smpsAlterPitch      $03
000F76D8 F800 00                    	smpsCall            Mus91_Credits_Call19
000F76DB E9FF                       	smpsAlterPitch      $FF
000F76DD 8006                       	dc.b	nRst, $06
000F76DF E808                       	smpsNoteFill        $08
000F76E1 D009 0909 09               	dc.b	nG6, $09, $09, $09, $09
000F76E6 E805                       	smpsNoteFill        $05
000F76E8 0303                       	dc.b	$03, $03
000F76EA E800                       	smpsNoteFill        $00
000F76EC 800C CE24                  	dc.b	nRst, $0C, nF6, $24
000F76F0 E3                         	smpsReturn
000F76F1                            
000F76F1                            Mus91_Credits_Call19:
000F76F1 CD06 8003 CD80 06CD 1880+  	dc.b	nE6, $06, nRst, $03, nE6, nRst, $06, nE6, $18, nRst, $06
000F76FC E3                         	smpsReturn
000F76FD                            
000F76FD                            Mus91_Credits_Call09:
000F76FD D006 8003 D080 06D0 1880+  	dc.b	nG6, $06, nRst, $03, nG6, nRst, $06, nG6, $18, nRst, $06, nF6
000F7709 0680 03CE 8006 CD18 8006+  	dc.b	$06, nRst, $03, nF6, nRst, $06, nE6, $18, nRst, $06, nA6, $06
000F7715 8003 D006 8003 CE80 D206+  	dc.b	nRst, $03, nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03
000F7721 D006 8003 CE80 D206 8003+  	dc.b	nG6, $06, nRst, $03, nF6, nRst, nA6, $06, nRst, $03, nG6, $06
000F772D 8003 CE18 8006 CE06 8003+  	dc.b	nRst, $03, nF6, $18, nRst, $06, nF6, $06, nRst, $03, nF6, nRst
000F7739 06CE 1880 06D1 0680 03D1+  	dc.b	$06, nF6, $18, nRst, $06, nAb6, $06, nRst, $03, nAb6, nRst, $06
000F7745 D118 8006 8006             	dc.b	nAb6, $18, nRst, $06, nRst, $06
000F774B E808                       	smpsNoteFill        $08
000F774D D409 0909 09               	dc.b	nB6, $09, $09, $09, $09
000F7752 E805                       	smpsNoteFill        $05
000F7754 0303                       	dc.b	$03, $03
000F7756 E800                       	smpsNoteFill        $00
000F7758 800C D224                  	dc.b	nRst, $0C, nA6, $24
000F775C E3                         	smpsReturn
000F775D                            
000F775D                            Mus91_Credits_Call0E:
000F775D F800 00                    	smpsCall            Mus91_Credits_Call18
000F7760 D012 D206 D012 CD0C        	dc.b	nG6, $12, nA6, $06, nG6, $12, nE6, $0C
000F7768 F800 00                    	smpsCall            Mus91_Credits_Call18
000F776B D030 8006                  	dc.b	nG6, $30, nRst, $06
000F776F E3                         	smpsReturn
000F7770                            
000F7770                            Mus91_Credits_Call18:
000F7770 D01E CD06 C9D5 D30C D506+  	dc.b	nG6, $1E, nE6, $06, nC6, nC7, nBb6, $0C, nC7, $06, nBb6, $0C
000F777C D006 D3D2 24CD 06CE        	dc.b	nG6, $06, nBb6, nA6, $24, nE6, $06, nF6
000F7784 E3                         	smpsReturn
000F7785                            
000F7785                            Mus91_Credits_Call05:
000F7785 8003 CDC9 0606 C4C9 09CD+  	dc.b	nRst, $03, nE6, nC6, $06, $06, nG5, nC6, $09, nE6, $09, nRst
000F7791 0680 03CE CA06 06C7 CA09+  	dc.b	$06, nRst, $03, nF6, nCs6, $06, $06, nBb5, nCs6, $09, nF6, $09
000F779D 8006 8003 CDC9 0606 C6C9+  	dc.b	nRst, $06, nRst, $03, nE6, nC6, $06, $06, nA5, nC6, $09, nE6
000F77A9 0FCB 0C                    	dc.b	$0F, nD6, $0C
000F77AC E3                         	smpsReturn
000F77AD                            
000F77AD                            Mus91_Credits_Voices:
000F77AD                            ;	Voice $00
000F77AD                            ;	$20
000F77AD                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000F77AD                            ;	$07, $06, $06, $08, 	$20, $10, $10, $F8, 	$19, $37, $13, $80
000F77AD                            	smpsVcAlgorithm     $00
000F77AD                            	smpsVcFeedback      $04
000F77AD                            	smpsVcUnusedBits    $00
000F77AD                            	smpsVcDetune        $03, $03, $03, $03
000F77AD                            	smpsVcCoarseFreq    $01, $00, $05, $06
000F77AD                            	smpsVcRateScale     $02, $02, $03, $03
000F77AD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F77AD                            	smpsVcAmpMod        $00, $00, $00, $00
000F77AD                            	smpsVcDecayRate1    $06, $09, $06, $07
000F77AD                            	smpsVcDecayRate2    $08, $06, $06, $07
000F77AD                            	smpsVcDecayLevel    $0F, $01, $01, $02
000F77AD                            	smpsVcReleaseRate   $08, $00, $00, $00
000F77AD 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000F77C6                            
000F77C6                            ;	Voice $01
000F77C6                            ;	$2C
000F77C6                            ;	$72, $78, $34, $34, 	$1F, $12, $1F, $12, 	$00, $0A, $00, $0A
000F77C6                            ;	$00, $00, $00, $00, 	$0F, $1F, $0F, $1F, 	$16, $80, $17, $80
000F77C6                            	smpsVcAlgorithm     $04
000F77C6                            	smpsVcFeedback      $05
000F77C6                            	smpsVcUnusedBits    $00
000F77C6                            	smpsVcDetune        $03, $03, $07, $07
000F77C6                            	smpsVcCoarseFreq    $04, $04, $08, $02
000F77C6                            	smpsVcRateScale     $00, $00, $00, $00
000F77C6                            	smpsVcAttackRate    $12, $1F, $12, $1F
000F77C6                            	smpsVcAmpMod        $00, $00, $00, $00
000F77C6                            	smpsVcDecayRate1    $0A, $00, $0A, $00
000F77C6                            	smpsVcDecayRate2    $00, $00, $00, $00
000F77C6                            	smpsVcDecayLevel    $01, $00, $01, $00
000F77C6                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F77C6 2C72 7834 341F 121F 1200+  	smpsVcTotalLevel    $00, $17, $00, $16
000F77DF                            
000F77DF                            ;	Voice $02
000F77DF                            ;	$2C
000F77DF                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $00, $00, $00
000F77DF                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000F77DF                            	smpsVcAlgorithm     $04
000F77DF                            	smpsVcFeedback      $05
000F77DF                            	smpsVcUnusedBits    $00
000F77DF                            	smpsVcDetune        $03, $03, $07, $07
000F77DF                            	smpsVcCoarseFreq    $04, $04, $04, $04
000F77DF                            	smpsVcRateScale     $00, $00, $00, $00
000F77DF                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000F77DF                            	smpsVcAmpMod        $00, $00, $00, $00
000F77DF                            	smpsVcDecayRate1    $00, $00, $00, $00
000F77DF                            	smpsVcDecayRate2    $01, $00, $01, $00
000F77DF                            	smpsVcDecayLevel    $03, $00, $03, $00
000F77DF                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F77DF 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000F77F8                            
000F77F8                            ;	Voice $03
000F77F8                            ;	$04
000F77F8                            ;	$72, $42, $32, $32, 	$12, $12, $12, $12, 	$00, $08, $00, $08
000F77F8                            ;	$00, $08, $00, $08, 	$0F, $1F, $0F, $1F, 	$23, $80, $23, $80
000F77F8                            	smpsVcAlgorithm     $04
000F77F8                            	smpsVcFeedback      $00
000F77F8                            	smpsVcUnusedBits    $00
000F77F8                            	smpsVcDetune        $03, $03, $04, $07
000F77F8                            	smpsVcCoarseFreq    $02, $02, $02, $02
000F77F8                            	smpsVcRateScale     $00, $00, $00, $00
000F77F8                            	smpsVcAttackRate    $12, $12, $12, $12
000F77F8                            	smpsVcAmpMod        $00, $00, $00, $00
000F77F8                            	smpsVcDecayRate1    $08, $00, $08, $00
000F77F8                            	smpsVcDecayRate2    $08, $00, $08, $00
000F77F8                            	smpsVcDecayLevel    $01, $00, $01, $00
000F77F8                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F77F8 0472 4232 3212 1212 1200+  	smpsVcTotalLevel    $00, $23, $00, $23
000F7811                            
000F7811                            ;	Voice $04
000F7811                            ;	$2C
000F7811                            ;	$74, $74, $34, $34, 	$1F, $12, $1F, $1F, 	$00, $07, $00, $07
000F7811                            ;	$00, $07, $00, $07, 	$00, $38, $00, $38, 	$16, $80, $17, $80
000F7811                            	smpsVcAlgorithm     $04
000F7811                            	smpsVcFeedback      $05
000F7811                            	smpsVcUnusedBits    $00
000F7811                            	smpsVcDetune        $03, $03, $07, $07
000F7811                            	smpsVcCoarseFreq    $04, $04, $04, $04
000F7811                            	smpsVcRateScale     $00, $00, $00, $00
000F7811                            	smpsVcAttackRate    $1F, $1F, $12, $1F
000F7811                            	smpsVcAmpMod        $00, $00, $00, $00
000F7811                            	smpsVcDecayRate1    $07, $00, $07, $00
000F7811                            	smpsVcDecayRate2    $07, $00, $07, $00
000F7811                            	smpsVcDecayLevel    $03, $00, $03, $00
000F7811                            	smpsVcReleaseRate   $08, $00, $08, $00
000F7811 2C74 7434 341F 121F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000F782A                            
000F782A                            ;	Voice $05
000F782A                            ;	$31
000F782A                            ;	$34, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$0C, $07, $0C, $09
000F782A                            ;	$07, $07, $07, $08, 	$2F, $1F, $1F, $2F, 	$17, $32, $14, $80
000F782A                            	smpsVcAlgorithm     $01
000F782A                            	smpsVcFeedback      $06
000F782A                            	smpsVcUnusedBits    $00
000F782A                            	smpsVcDetune        $03, $03, $03, $03
000F782A                            	smpsVcCoarseFreq    $01, $00, $05, $04
000F782A                            	smpsVcRateScale     $02, $02, $03, $03
000F782A                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F782A                            	smpsVcAmpMod        $00, $00, $00, $00
000F782A                            	smpsVcDecayRate1    $09, $0C, $07, $0C
000F782A                            	smpsVcDecayRate2    $08, $07, $07, $07
000F782A                            	smpsVcDecayLevel    $02, $01, $01, $02
000F782A                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F782A 3134 3530 31DF DF9F 9F0C+  	smpsVcTotalLevel    $00, $14, $32, $17
000F7843                            
000F7843                            ;	Voice $06
000F7843                            ;	$18
000F7843                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000F7843                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$2C, $22, $14, $80
000F7843                            	smpsVcAlgorithm     $00
000F7843                            	smpsVcFeedback      $03
000F7843                            	smpsVcUnusedBits    $00
000F7843                            	smpsVcDetune        $03, $03, $03, $03
000F7843                            	smpsVcCoarseFreq    $01, $00, $00, $07
000F7843                            	smpsVcRateScale     $02, $00, $03, $02
000F7843                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000F7843                            	smpsVcAmpMod        $00, $00, $00, $00
000F7843                            	smpsVcDecayRate1    $01, $04, $06, $0D
000F7843                            	smpsVcDecayRate2    $05, $03, $0A, $08
000F7843                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000F7843                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7843 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $2C
000F785C                            
000F785C                            ;	Voice $07
000F785C                            ;	$3C
000F785C                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000F785C                            ;	$04, $00, $04, $00, 	$1F, $0F, $1F, $0F, 	$1A, $80, $16, $80
000F785C                            	smpsVcAlgorithm     $04
000F785C                            	smpsVcFeedback      $07
000F785C                            	smpsVcUnusedBits    $00
000F785C                            	smpsVcDetune        $03, $05, $05, $03
000F785C                            	smpsVcCoarseFreq    $00, $00, $02, $01
000F785C                            	smpsVcRateScale     $01, $01, $01, $01
000F785C                            	smpsVcAttackRate    $13, $12, $13, $12
000F785C                            	smpsVcAmpMod        $00, $00, $00, $00
000F785C                            	smpsVcDecayRate1    $00, $08, $00, $08
000F785C                            	smpsVcDecayRate2    $00, $04, $00, $04
000F785C                            	smpsVcDecayLevel    $00, $01, $00, $01
000F785C                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F785C 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000F7875                            
000F7875                            ;	Voice $08
000F7875                            ;	$22
000F7875                            ;	$0A, $13, $05, $11, 	$03, $12, $12, $11, 	$00, $13, $13, $00
000F7875                            ;	$03, $02, $02, $01, 	$1F, $1F, $0F, $0F, 	$1E, $18, $26, $81
000F7875                            	smpsVcAlgorithm     $02
000F7875                            	smpsVcFeedback      $04
000F7875                            	smpsVcUnusedBits    $00
000F7875                            	smpsVcDetune        $01, $00, $01, $00
000F7875                            	smpsVcCoarseFreq    $01, $05, $03, $0A
000F7875                            	smpsVcRateScale     $00, $00, $00, $00
000F7875                            	smpsVcAttackRate    $11, $12, $12, $03
000F7875                            	smpsVcAmpMod        $00, $00, $00, $00
000F7875                            	smpsVcDecayRate1    $00, $13, $13, $00
000F7875                            	smpsVcDecayRate2    $01, $02, $02, $03
000F7875                            	smpsVcDecayLevel    $00, $00, $01, $01
000F7875                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7875 220A 1305 1103 1212 1100+  	smpsVcTotalLevel    $01, $26, $18, $1E
000F788E                            
000F788E                            ;	Voice $09
000F788E                            ;	$3A
000F788E                            ;	$61, $3C, $14, $31, 	$9C, $DB, $9C, $DA, 	$04, $09, $04, $03
000F788E                            ;	$03, $01, $03, $00, 	$1F, $0F, $0F, $AF, 	$21, $47, $31, $80
000F788E                            	smpsVcAlgorithm     $02
000F788E                            	smpsVcFeedback      $07
000F788E                            	smpsVcUnusedBits    $00
000F788E                            	smpsVcDetune        $03, $01, $03, $06
000F788E                            	smpsVcCoarseFreq    $01, $04, $0C, $01
000F788E                            	smpsVcRateScale     $03, $02, $03, $02
000F788E                            	smpsVcAttackRate    $1A, $1C, $1B, $1C
000F788E                            	smpsVcAmpMod        $00, $00, $00, $00
000F788E                            	smpsVcDecayRate1    $03, $04, $09, $04
000F788E                            	smpsVcDecayRate2    $00, $03, $01, $03
000F788E                            	smpsVcDecayLevel    $0A, $00, $00, $01
000F788E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F788E 3A61 3C14 319C DB9C DA04+  	smpsVcTotalLevel    $00, $31, $47, $21
000F78A7                            
000F78A7                            ;	Voice $0A
000F78A7                            ;	$3A
000F78A7                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000F78A7                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000F78A7                            	smpsVcAlgorithm     $02
000F78A7                            	smpsVcFeedback      $07
000F78A7                            	smpsVcUnusedBits    $00
000F78A7                            	smpsVcDetune        $00, $00, $00, $00
000F78A7                            	smpsVcCoarseFreq    $01, $01, $07, $01
000F78A7                            	smpsVcRateScale     $01, $02, $02, $02
000F78A7                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000F78A7                            	smpsVcAmpMod        $00, $00, $00, $00
000F78A7                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000F78A7                            	smpsVcDecayRate2    $00, $00, $00, $00
000F78A7                            	smpsVcDecayLevel    $00, $01, $0F, $01
000F78A7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F78A7 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000F78C0                            
000F78C0                            ;	Voice $0B
000F78C0                            ;	$34
000F78C0                            ;	$33, $41, $7E, $74, 	$5B, $9F, $5F, $1F, 	$04, $07, $07, $08
000F78C0                            ;	$00, $00, $00, $00, 	$FF, $FF, $EF, $FF, 	$23, $90, $29, $97
000F78C0                            	smpsVcAlgorithm     $04
000F78C0                            	smpsVcFeedback      $06
000F78C0                            	smpsVcUnusedBits    $00
000F78C0                            	smpsVcDetune        $07, $07, $04, $03
000F78C0                            	smpsVcCoarseFreq    $04, $0E, $01, $03
000F78C0                            	smpsVcRateScale     $00, $01, $02, $01
000F78C0                            	smpsVcAttackRate    $1F, $1F, $1F, $1B
000F78C0                            	smpsVcAmpMod        $00, $00, $00, $00
000F78C0                            	smpsVcDecayRate1    $08, $07, $07, $04
000F78C0                            	smpsVcDecayRate2    $00, $00, $00, $00
000F78C0                            	smpsVcDecayLevel    $0F, $0E, $0F, $0F
000F78C0                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F78C0 3433 417E 745B 9F5F 1F04+  	smpsVcTotalLevel    $17, $29, $10, $23
000F78D9                            
000F78D9                            ;	Voice $0C
000F78D9                            ;	$04
000F78D9                            ;	$72, $42, $32, $32, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000F78D9                            ;	$00, $00, $00, $00, 	$00, $07, $00, $07, 	$23, $80, $23, $80
000F78D9                            	smpsVcAlgorithm     $04
000F78D9                            	smpsVcFeedback      $00
000F78D9                            	smpsVcUnusedBits    $00
000F78D9                            	smpsVcDetune        $03, $03, $04, $07
000F78D9                            	smpsVcCoarseFreq    $02, $02, $02, $02
000F78D9                            	smpsVcRateScale     $00, $00, $00, $00
000F78D9                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F78D9                            	smpsVcAmpMod        $00, $00, $00, $00
000F78D9                            	smpsVcDecayRate1    $00, $00, $00, $00
000F78D9                            	smpsVcDecayRate2    $00, $00, $00, $00
000F78D9                            	smpsVcDecayLevel    $00, $00, $00, $00
000F78D9                            	smpsVcReleaseRate   $07, $00, $07, $00
000F78D9 0472 4232 321F 1F1F 1F00+  	smpsVcTotalLevel    $00, $23, $00, $23
000F78F2                            
000F78F2                            ;	Voice $0D
000F78F2                            ;	$3C
000F78F2                            ;	$38, $74, $76, $33, 	$10, $10, $10, $10, 	$02, $07, $04, $07
000F78F2                            ;	$03, $09, $03, $09, 	$2F, $2F, $2F, $2F, 	$1E, $80, $1E, $80
000F78F2                            	smpsVcAlgorithm     $04
000F78F2                            	smpsVcFeedback      $07
000F78F2                            	smpsVcUnusedBits    $00
000F78F2                            	smpsVcDetune        $03, $07, $07, $03
000F78F2                            	smpsVcCoarseFreq    $03, $06, $04, $08
000F78F2                            	smpsVcRateScale     $00, $00, $00, $00
000F78F2                            	smpsVcAttackRate    $10, $10, $10, $10
000F78F2                            	smpsVcAmpMod        $00, $00, $00, $00
000F78F2                            	smpsVcDecayRate1    $07, $04, $07, $02
000F78F2                            	smpsVcDecayRate2    $09, $03, $09, $03
000F78F2                            	smpsVcDecayLevel    $02, $02, $02, $02
000F78F2                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F78F2 3C38 7476 3310 1010 1002+  	smpsVcTotalLevel    $00, $1E, $00, $1E
000F790B                            
000F790B                            ;	Voice $0E
000F790B                            ;	$F4
000F790B                            ;	$06, $04, $0F, $0E, 	$1F, $1F, $1F, $1F, 	$00, $00, $0B, $0B
000F790B                            ;	$00, $00, $05, $08, 	$0F, $0F, $FF, $FF, 	$15, $85, $02, $8A
000F790B                            	smpsVcAlgorithm     $04
000F790B                            	smpsVcFeedback      $06
000F790B                            	smpsVcUnusedBits    $03
000F790B                            	smpsVcDetune        $00, $00, $00, $00
000F790B                            	smpsVcCoarseFreq    $0E, $0F, $04, $06
000F790B                            	smpsVcRateScale     $00, $00, $00, $00
000F790B                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F790B                            	smpsVcAmpMod        $00, $00, $00, $00
000F790B                            	smpsVcDecayRate1    $0B, $0B, $00, $00
000F790B                            	smpsVcDecayRate2    $08, $05, $00, $00
000F790B                            	smpsVcDecayLevel    $0F, $0F, $00, $00
000F790B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F790B F406 040F 0E1F 1F1F 1F00+  	smpsVcTotalLevel    $0A, $02, $05, $15
000F7924                            
000F7924                            ;	Voice $0F
000F7924                            ;	$29
000F7924                            ;	$36, $74, $71, $31, 	$04, $04, $05, $1D, 	$12, $0E, $1F, $1F
000F7924                            ;	$04, $06, $03, $01, 	$5F, $6F, $0F, $0F, 	$27, $27, $2E, $80
000F7924                            	smpsVcAlgorithm     $01
000F7924                            	smpsVcFeedback      $05
000F7924                            	smpsVcUnusedBits    $00
000F7924                            	smpsVcDetune        $03, $07, $07, $03
000F7924                            	smpsVcCoarseFreq    $01, $01, $04, $06
000F7924                            	smpsVcRateScale     $00, $00, $00, $00
000F7924                            	smpsVcAttackRate    $1D, $05, $04, $04
000F7924                            	smpsVcAmpMod        $00, $00, $00, $00
000F7924                            	smpsVcDecayRate1    $1F, $1F, $0E, $12
000F7924                            	smpsVcDecayRate2    $01, $03, $06, $04
000F7924                            	smpsVcDecayLevel    $00, $00, $06, $05
000F7924                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7924 2936 7471 3104 0405 1D12+  	smpsVcTotalLevel    $00, $2E, $27, $27
000F793D                            
000F793D                            ;	Voice $10
000F793D                            ;	$08
000F793D                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000F793D                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000F793D                            	smpsVcAlgorithm     $00
000F793D                            	smpsVcFeedback      $01
000F793D                            	smpsVcUnusedBits    $00
000F793D                            	smpsVcDetune        $00, $03, $07, $00
000F793D                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000F793D                            	smpsVcRateScale     $01, $01, $00, $00
000F793D                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F793D                            	smpsVcAmpMod        $00, $00, $00, $00
000F793D                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000F793D                            	smpsVcDecayRate2    $03, $04, $04, $00
000F793D                            	smpsVcDecayLevel    $02, $02, $02, $02
000F793D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F793D 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000F7956                            
000F7956                            ;	Voice $11
000F7956                            ;	$3D
000F7956                            ;	$01, $01, $01, $01, 	$8E, $52, $14, $4C, 	$08, $08, $0E, $03
000F7956                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1B, $80, $80, $9B
000F7956                            	smpsVcAlgorithm     $05
000F7956                            	smpsVcFeedback      $07
000F7956                            	smpsVcUnusedBits    $00
000F7956                            	smpsVcDetune        $00, $00, $00, $00
000F7956                            	smpsVcCoarseFreq    $01, $01, $01, $01
000F7956                            	smpsVcRateScale     $01, $00, $01, $02
000F7956                            	smpsVcAttackRate    $0C, $14, $12, $0E
000F7956                            	smpsVcAmpMod        $00, $00, $00, $00
000F7956                            	smpsVcDecayRate1    $03, $0E, $08, $08
000F7956                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7956                            	smpsVcDecayLevel    $01, $01, $01, $01
000F7956                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7956 3D01 0101 018E 5214 4C08+  	smpsVcTotalLevel    $1B, $00, $00, $1B
000F796F                            
000F796F                            ;	Voice $12
000F796F                            ;	$3D
000F796F                            ;	$01, $02, $00, $01, 	$1F, $0E, $0E, $0E, 	$07, $1F, $1F, $1F
000F796F                            ;	$00, $00, $00, $00, 	$1F, $0F, $0F, $0F, 	$17, $8D, $8C, $8C
000F796F                            	smpsVcAlgorithm     $05
000F796F                            	smpsVcFeedback      $07
000F796F                            	smpsVcUnusedBits    $00
000F796F                            	smpsVcDetune        $00, $00, $00, $00
000F796F                            	smpsVcCoarseFreq    $01, $00, $02, $01
000F796F                            	smpsVcRateScale     $00, $00, $00, $00
000F796F                            	smpsVcAttackRate    $0E, $0E, $0E, $1F
000F796F                            	smpsVcAmpMod        $00, $00, $00, $00
000F796F                            	smpsVcDecayRate1    $1F, $1F, $1F, $07
000F796F                            	smpsVcDecayRate2    $00, $00, $00, $00
000F796F                            	smpsVcDecayLevel    $00, $00, $00, $01
000F796F                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F796F 3D01 0200 011F 0E0E 0E07+  	smpsVcTotalLevel    $0C, $0C, $0D, $17
000F7988                            
000F7988                            ;	Voice $13
000F7988                            ;	$3C
000F7988                            ;	$31, $52, $50, $30, 	$52, $53, $52, $53, 	$08, $00, $08, $00
000F7988                            ;	$04, $00, $04, $00, 	$10, $07, $10, $07, 	$1A, $80, $16, $80
000F7988                            	smpsVcAlgorithm     $04
000F7988                            	smpsVcFeedback      $07
000F7988                            	smpsVcUnusedBits    $00
000F7988                            	smpsVcDetune        $03, $05, $05, $03
000F7988                            	smpsVcCoarseFreq    $00, $00, $02, $01
000F7988                            	smpsVcRateScale     $01, $01, $01, $01
000F7988                            	smpsVcAttackRate    $13, $12, $13, $12
000F7988                            	smpsVcAmpMod        $00, $00, $00, $00
000F7988                            	smpsVcDecayRate1    $00, $08, $00, $08
000F7988                            	smpsVcDecayRate2    $00, $04, $00, $04
000F7988                            	smpsVcDecayLevel    $00, $01, $00, $01
000F7988                            	smpsVcReleaseRate   $07, $00, $07, $00
000F7988 3C31 5250 3052 5352 5308+  	smpsVcTotalLevel    $00, $16, $00, $1A
000F79A1                            
000F79A1                            ;	Voice $14
000F79A1                            ;	$18
000F79A1                            ;	$37, $30, $30, $31, 	$9E, $DC, $1C, $9C, 	$0D, $06, $04, $01
000F79A1                            ;	$08, $0A, $03, $05, 	$BF, $BF, $3F, $2F, 	$32, $22, $14, $80
000F79A1                            	smpsVcAlgorithm     $00
000F79A1                            	smpsVcFeedback      $03
000F79A1                            	smpsVcUnusedBits    $00
000F79A1                            	smpsVcDetune        $03, $03, $03, $03
000F79A1                            	smpsVcCoarseFreq    $01, $00, $00, $07
000F79A1                            	smpsVcRateScale     $02, $00, $03, $02
000F79A1                            	smpsVcAttackRate    $1C, $1C, $1C, $1E
000F79A1                            	smpsVcAmpMod        $00, $00, $00, $00
000F79A1                            	smpsVcDecayRate1    $01, $04, $06, $0D
000F79A1                            	smpsVcDecayRate2    $05, $03, $0A, $08
000F79A1                            	smpsVcDecayLevel    $02, $03, $0B, $0B
000F79A1                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F79A1 1837 3030 319E DC1C 9C0D+  	smpsVcTotalLevel    $00, $14, $22, $32
000F79BA                            
000F79BA                            ;	Voice $15
000F79BA                            ;	$3A
000F79BA                            ;	$01, $01, $01, $02, 	$8D, $07, $07, $52, 	$09, $00, $00, $03
000F79BA                            ;	$01, $02, $02, $00, 	$5F, $0F, $0F, $2F, 	$18, $22, $18, $80
000F79BA                            	smpsVcAlgorithm     $02
000F79BA                            	smpsVcFeedback      $07
000F79BA                            	smpsVcUnusedBits    $00
000F79BA                            	smpsVcDetune        $00, $00, $00, $00
000F79BA                            	smpsVcCoarseFreq    $02, $01, $01, $01
000F79BA                            	smpsVcRateScale     $01, $00, $00, $02
000F79BA                            	smpsVcAttackRate    $12, $07, $07, $0D
000F79BA                            	smpsVcAmpMod        $00, $00, $00, $00
000F79BA                            	smpsVcDecayRate1    $03, $00, $00, $09
000F79BA                            	smpsVcDecayRate2    $00, $02, $02, $01
000F79BA                            	smpsVcDecayLevel    $02, $00, $00, $05
000F79BA                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F79BA 3A01 0101 028D 0707 5209+  	smpsVcTotalLevel    $00, $18, $22, $18
000F79D3                            
000F79D3                            ;	Voice $16
000F79D3                            ;	$2C
000F79D3                            ;	$74, $74, $34, $34, 	$1F, $1F, $1F, $1F, 	$00, $00, $00, $00
000F79D3                            ;	$00, $01, $00, $01, 	$0F, $3F, $0F, $3F, 	$16, $80, $17, $80
000F79D3                            	smpsVcAlgorithm     $04
000F79D3                            	smpsVcFeedback      $05
000F79D3                            	smpsVcUnusedBits    $00
000F79D3                            	smpsVcDetune        $03, $03, $07, $07
000F79D3                            	smpsVcCoarseFreq    $04, $04, $04, $04
000F79D3                            	smpsVcRateScale     $00, $00, $00, $00
000F79D3                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F79D3                            	smpsVcAmpMod        $00, $00, $00, $00
000F79D3                            	smpsVcDecayRate1    $00, $00, $00, $00
000F79D3                            	smpsVcDecayRate2    $01, $00, $01, $00
000F79D3                            	smpsVcDecayLevel    $03, $00, $03, $00
000F79D3                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F79D3 2C74 7434 341F 1F1F 1F00+  	smpsVcTotalLevel    $00, $17, $00, $16
000F79EC                            
000F79EC                            ;	Voice $17
000F79EC                            ;	$04
000F79EC                            ;	$37, $72, $77, $49, 	$1F, $1F, $1F, $1F, 	$07, $0A, $07, $0D
000F79EC                            ;	$00, $00, $00, $00, 	$10, $07, $10, $07, 	$23, $80, $23, $80
000F79EC                            	smpsVcAlgorithm     $04
000F79EC                            	smpsVcFeedback      $00
000F79EC                            	smpsVcUnusedBits    $00
000F79EC                            	smpsVcDetune        $04, $07, $07, $03
000F79EC                            	smpsVcCoarseFreq    $09, $07, $02, $07
000F79EC                            	smpsVcRateScale     $00, $00, $00, $00
000F79EC                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F79EC                            	smpsVcAmpMod        $00, $00, $00, $00
000F79EC                            	smpsVcDecayRate1    $0D, $07, $0A, $07
000F79EC                            	smpsVcDecayRate2    $00, $00, $00, $00
000F79EC                            	smpsVcDecayLevel    $00, $01, $00, $01
000F79EC                            	smpsVcReleaseRate   $07, $00, $07, $00
000F79EC 0437 7277 491F 1F1F 1F07+  	smpsVcTotalLevel    $00, $23, $00, $23
000F7A05                            
000F7A05                            ;	Voice $18
000F7A05                            ;	$3D
000F7A05                            ;	$01, $02, $02, $02, 	$14, $0E, $8C, $0E, 	$08, $05, $02, $05
000F7A05                            ;	$00, $00, $00, $00, 	$1F, $1F, $1F, $1F, 	$1A, $80, $80, $80
000F7A05                            	smpsVcAlgorithm     $05
000F7A05                            	smpsVcFeedback      $07
000F7A05                            	smpsVcUnusedBits    $00
000F7A05                            	smpsVcDetune        $00, $00, $00, $00
000F7A05                            	smpsVcCoarseFreq    $02, $02, $02, $01
000F7A05                            	smpsVcRateScale     $00, $02, $00, $00
000F7A05                            	smpsVcAttackRate    $0E, $0C, $0E, $14
000F7A05                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A05                            	smpsVcDecayRate1    $05, $02, $05, $08
000F7A05                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7A05                            	smpsVcDecayLevel    $01, $01, $01, $01
000F7A05                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A05 3D01 0202 0214 0E8C 0E08+  	smpsVcTotalLevel    $00, $00, $00, $1A
000F7A1E                            
000F7A1E                            ;	Voice $19
000F7A1E                            ;	$20
000F7A1E                            ;	$36, $35, $30, $31, 	$DF, $DF, $9F, $9F, 	$07, $06, $09, $06
000F7A1E                            ;	$07, $06, $06, $08, 	$2F, $1F, $1F, $FF, 	$19, $37, $13, $80
000F7A1E                            	smpsVcAlgorithm     $00
000F7A1E                            	smpsVcFeedback      $04
000F7A1E                            	smpsVcUnusedBits    $00
000F7A1E                            	smpsVcDetune        $03, $03, $03, $03
000F7A1E                            	smpsVcCoarseFreq    $01, $00, $05, $06
000F7A1E                            	smpsVcRateScale     $02, $02, $03, $03
000F7A1E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7A1E                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A1E                            	smpsVcDecayRate1    $06, $09, $06, $07
000F7A1E                            	smpsVcDecayRate2    $08, $06, $06, $07
000F7A1E                            	smpsVcDecayLevel    $0F, $01, $01, $02
000F7A1E                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A1E 2036 3530 31DF DF9F 9F07+  	smpsVcTotalLevel    $00, $13, $37, $19
000F7A37                            
000F7A37                            ;	Voice $1A
000F7A37                            ;	$3A
000F7A37                            ;	$51, $08, $51, $02, 	$1E, $1E, $1E, $10, 	$1F, $1F, $1F, $0F
000F7A37                            ;	$00, $00, $00, $02, 	$0F, $0F, $0F, $1F, 	$18, $24, $22, $81
000F7A37                            	smpsVcAlgorithm     $02
000F7A37                            	smpsVcFeedback      $07
000F7A37                            	smpsVcUnusedBits    $00
000F7A37                            	smpsVcDetune        $00, $05, $00, $05
000F7A37                            	smpsVcCoarseFreq    $02, $01, $08, $01
000F7A37                            	smpsVcRateScale     $00, $00, $00, $00
000F7A37                            	smpsVcAttackRate    $10, $1E, $1E, $1E
000F7A37                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A37                            	smpsVcDecayRate1    $0F, $1F, $1F, $1F
000F7A37                            	smpsVcDecayRate2    $02, $00, $00, $00
000F7A37                            	smpsVcDecayLevel    $01, $00, $00, $00
000F7A37                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A37 3A51 0851 021E 1E1E 101F+  	smpsVcTotalLevel    $01, $22, $24, $18
000F7A50                            
000F7A50                            ;	Voice $1B
000F7A50                            ;	$3A
000F7A50                            ;	$32, $56, $32, $42, 	$8D, $4F, $15, $52, 	$06, $08, $07, $04
000F7A50                            ;	$02, $00, $00, $00, 	$1F, $1F, $2F, $2F, 	$19, $20, $2A, $80
000F7A50                            	smpsVcAlgorithm     $02
000F7A50                            	smpsVcFeedback      $07
000F7A50                            	smpsVcUnusedBits    $00
000F7A50                            	smpsVcDetune        $04, $03, $05, $03
000F7A50                            	smpsVcCoarseFreq    $02, $02, $06, $02
000F7A50                            	smpsVcRateScale     $01, $00, $01, $02
000F7A50                            	smpsVcAttackRate    $12, $15, $0F, $0D
000F7A50                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A50                            	smpsVcDecayRate1    $04, $07, $08, $06
000F7A50                            	smpsVcDecayRate2    $00, $00, $00, $02
000F7A50                            	smpsVcDecayLevel    $02, $02, $01, $01
000F7A50                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A50 3A32 5632 428D 4F15 5206+  	smpsVcTotalLevel    $00, $2A, $20, $19
000F7A69                            
000F7A69                            ;	Voice $1C
000F7A69                            ;	$3A
000F7A69                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000F7A69                            ;	$00, $00, $00, $00, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000F7A69                            	smpsVcAlgorithm     $02
000F7A69                            	smpsVcFeedback      $07
000F7A69                            	smpsVcUnusedBits    $00
000F7A69                            	smpsVcDetune        $00, $00, $00, $00
000F7A69                            	smpsVcCoarseFreq    $01, $01, $07, $01
000F7A69                            	smpsVcRateScale     $01, $02, $02, $02
000F7A69                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000F7A69                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A69                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000F7A69                            	smpsVcDecayRate2    $00, $00, $00, $00
000F7A69                            	smpsVcDecayLevel    $00, $01, $0F, $01
000F7A69                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A69 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000F7A82                            
000F7A82                            ;	Voice $1D
000F7A82                            ;	$08
000F7A82                            ;	$0A, $70, $30, $00, 	$1F, $1F, $5F, $5F, 	$12, $0E, $0A, $0A
000F7A82                            ;	$00, $04, $04, $03, 	$2F, $2F, $2F, $2F, 	$24, $2D, $13, $80
000F7A82                            	smpsVcAlgorithm     $00
000F7A82                            	smpsVcFeedback      $01
000F7A82                            	smpsVcUnusedBits    $00
000F7A82                            	smpsVcDetune        $00, $03, $07, $00
000F7A82                            	smpsVcCoarseFreq    $00, $00, $00, $0A
000F7A82                            	smpsVcRateScale     $01, $01, $00, $00
000F7A82                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7A82                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A82                            	smpsVcDecayRate1    $0A, $0A, $0E, $12
000F7A82                            	smpsVcDecayRate2    $03, $04, $04, $00
000F7A82                            	smpsVcDecayLevel    $02, $02, $02, $02
000F7A82                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A82 080A 7030 001F 1F5F 5F12+  	smpsVcTotalLevel    $00, $13, $2D, $24
000F7A9B                            
000F7A9B                            ;	Voice $1E
000F7A9B                            ;	$3A
000F7A9B                            ;	$01, $07, $01, $01, 	$8E, $8E, $8D, $53, 	$0E, $0E, $0E, $03
000F7A9B                            ;	$00, $00, $00, $07, 	$1F, $FF, $1F, $0F, 	$18, $28, $27, $80
000F7A9B                            	smpsVcAlgorithm     $02
000F7A9B                            	smpsVcFeedback      $07
000F7A9B                            	smpsVcUnusedBits    $00
000F7A9B                            	smpsVcDetune        $00, $00, $00, $00
000F7A9B                            	smpsVcCoarseFreq    $01, $01, $07, $01
000F7A9B                            	smpsVcRateScale     $01, $02, $02, $02
000F7A9B                            	smpsVcAttackRate    $13, $0D, $0E, $0E
000F7A9B                            	smpsVcAmpMod        $00, $00, $00, $00
000F7A9B                            	smpsVcDecayRate1    $03, $0E, $0E, $0E
000F7A9B                            	smpsVcDecayRate2    $07, $00, $00, $00
000F7A9B                            	smpsVcDecayLevel    $00, $01, $0F, $01
000F7A9B                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7A9B 3A01 0701 018E 8E8D 530E+  	smpsVcTotalLevel    $00, $27, $28, $18
000F7AB4                            
000F7AB4                            ;	Voice $1F
000F7AB4                            ;	$36
000F7AB4                            ;	$0F, $01, $01, $01, 	$1F, $1F, $1F, $1F, 	$12, $11, $0E, $00
000F7AB4                            ;	$00, $0A, $07, $09, 	$FF, $0F, $1F, $0F, 	$18, $80, $80, $80
000F7AB4                            	smpsVcAlgorithm     $06
000F7AB4                            	smpsVcFeedback      $06
000F7AB4                            	smpsVcUnusedBits    $00
000F7AB4                            	smpsVcDetune        $00, $00, $00, $00
000F7AB4                            	smpsVcCoarseFreq    $01, $01, $01, $0F
000F7AB4                            	smpsVcRateScale     $00, $00, $00, $00
000F7AB4                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7AB4                            	smpsVcAmpMod        $00, $00, $00, $00
000F7AB4                            	smpsVcDecayRate1    $00, $0E, $11, $12
000F7AB4                            	smpsVcDecayRate2    $09, $07, $0A, $00
000F7AB4                            	smpsVcDecayLevel    $00, $01, $00, $0F
000F7AB4                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7AB4 360F 0101 011F 1F1F 1F12+  	smpsVcTotalLevel    $00, $00, $00, $18
000F7ACD                            
000F7ACD                            ;	Voice $20
000F7ACD                            ;	$3A
000F7ACD                            ;	$03, $19, $01, $53, 	$1F, $DF, $1F, $9F, 	$0C, $02, $0C, $05
000F7ACD                            ;	$04, $04, $04, $07, 	$1F, $FF, $0F, $2F, 	$1D, $36, $1B, $80
000F7ACD                            	smpsVcAlgorithm     $02
000F7ACD                            	smpsVcFeedback      $07
000F7ACD                            	smpsVcUnusedBits    $00
000F7ACD                            	smpsVcDetune        $05, $00, $01, $00
000F7ACD                            	smpsVcCoarseFreq    $03, $01, $09, $03
000F7ACD                            	smpsVcRateScale     $02, $00, $03, $00
000F7ACD                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F7ACD                            	smpsVcAmpMod        $00, $00, $00, $00
000F7ACD                            	smpsVcDecayRate1    $05, $0C, $02, $0C
000F7ACD                            	smpsVcDecayRate2    $07, $04, $04, $04
000F7ACD                            	smpsVcDecayLevel    $02, $00, $0F, $01
000F7ACD                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F7ACD 3A03 1901 531F DF1F 9F0C+  	smpsVcTotalLevel    $00, $1B, $36, $1D
000F7AE6                            
000F7AE6                            
000F7AE6                            		even
000F7AE6                            Music92:	incbin	sound\music92.bin ; Drowning
000F7E28 00                         		even
000F7E28                            Music93:	incbin	sound\music93.bin ; Chaos Emerald
000F7EF8                            		even
000F7EF8                            Music94:	incbin	sound\music94.bin ; Green Hill Act 2
000F8BCE 00                         		even
000F8BCE                            Music95:	incbin	sound\music95.bin ; Green Hill Act 3
000F8D1E 00                         		even
000F8D1E                            Music96:	incbin	sound\music96.bin ; Labyrinth Act 2
000F8D58 00                         		even
000F8D58                            Music97:	incbin	sound\music97.bin ; Labyrinth Act 3
000F90C0                            		even
000F90C0                            Music98:	incbin	sound\music98.bin ; Marble Act 2
000F90FA 00                         		even
000F90FA                            Music99:	incbin	sound\music99.bin ; Marble Act 3
000F9134 00                         		even
000F9134                            Music9A:	incbin	sound\music9A.bin ; Star Light Act 2
000F916E 00                         		even
000F916E                            Music9B:	incbin	sound\music9B.bin ; Star Light Act 3
000F91A8 00                         		even
000F91A8                            Music9C:	incbin	sound\music9C.bin ; Spring Yard Act 2
000F91E2 00                         		even
000F91E2                            Music9D:	incbin	sound\music9D.bin ; Spring Yard Act 3
000F921C 00                         		even
000F921C                            Music9E:	incbin	sound\music9E.bin ; Scrap Brain Act 2
000F970C                            		even
000F970C                            Music9F:	include	sound\music9F.asm ; Scrap Brain Act 3
000F970C                            GentleBreeze_Header:
000F970C =00000001                  smpsHeaderStartSong = 1
000F970C 0000                       	smpsHeaderVoice     GentleBreeze_Voices
000F970E 0603                       	smpsHeaderChan      $06, $03
000F9710 0100                       	smpsHeaderTempo     $01, $00
000F9712                            
000F9716 0000 0000                  	smpsHeaderFM        GentleBreeze_FM1,	$00, $00
000F971A 0000 0000                  	smpsHeaderFM        GentleBreeze_FM2,	$00, $00
000F971E 0000 0000                  	smpsHeaderFM        GentleBreeze_FM3,	$00, $00
000F9722 0000 0000                  	smpsHeaderFM        GentleBreeze_FM4,	$00, $00
000F9726 0000 0000                  	smpsHeaderFM        GentleBreeze_FM5,	$00, $00
000F972A 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG1,	$00, $00, $00, $00
000F9730 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG2,	$00, $00, $00, $00
000F9736 0000 0000 0000             	smpsHeaderPSG       GentleBreeze_PSG3,	$00, $00, $00, $00
000F973C                            
000F973C                            ; PSG3 Data
000F973C                            GentleBreeze_PSG3:
000F973C F2                         	smpsStop
000F973D                            
000F973D                            ; FM1 Data
000F973D                            GentleBreeze_FM1:
000F973F E0C0                       	smpsPan             panCenter, $00
000F9741 E1FF                       	smpsAlterNote       $FF
000F9743 C410                       	dc.b	nG5, $10
000F9745 E60F                       	smpsAlterVol        $0F
000F9747 C4                         	dc.b	nG5
000F9748 E6F1                       	smpsAlterVol        $F1
000F974A E100                       	smpsAlterNote       $00
000F974C C2                         	dc.b	nF5
000F974D E60F                       	smpsAlterVol        $0F
000F974F 08                         	dc.b	$08
000F9750 E6F1                       	smpsAlterVol        $F1
000F9752 C010                       	dc.b	nEb5, $10
000F9754 E60F                       	smpsAlterVol        $0F
000F9756 C0                         	dc.b	nEb5
000F9757 E6F1                       	smpsAlterVol        $F1
000F9759 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000F975F E60F                       	smpsAlterVol        $0F
000F9761 C9                         	dc.b	nC6
000F9762 E6F1                       	smpsAlterVol        $F1
000F9764 C5                         	dc.b	nAb5
000F9765 E60F                       	smpsAlterVol        $0F
000F9767 08                         	dc.b	$08
000F9768 E6F1                       	smpsAlterVol        $F1
000F976A C010                       	dc.b	nEb5, $10
000F976C E60F                       	smpsAlterVol        $0F
000F976E C0                         	dc.b	nEb5
000F976F E6F1                       	smpsAlterVol        $F1
000F9771 C208                       	dc.b	nF5, $08
000F9773 E1FF                       	smpsAlterNote       $FF
000F9775 C410                       	dc.b	nG5, $10
000F9777 E100                       	smpsAlterNote       $00
000F9779 C5C7                       	dc.b	nAb5, nBb5
000F977B E60F                       	smpsAlterVol        $0F
000F977D C7                         	dc.b	nBb5
000F977E E6F1                       	smpsAlterVol        $F1
000F9780 C5                         	dc.b	nAb5
000F9781 E60F                       	smpsAlterVol        $0F
000F9783 08                         	dc.b	$08
000F9784 E6F1                       	smpsAlterVol        $F1
000F9786 E1FF                       	smpsAlterNote       $FF
000F9788 C410                       	dc.b	nG5, $10
000F978A E60F                       	smpsAlterVol        $0F
000F978C C4                         	dc.b	nG5
000F978D E6F1                       	smpsAlterVol        $F1
000F978F C4                         	dc.b	nG5
000F9790 E100                       	smpsAlterNote       $00
000F9792 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000F9797 E60F                       	smpsAlterVol        $0F
000F9799 C2                         	dc.b	nF5
000F979A E6F1                       	smpsAlterVol        $F1
000F979C E1FF                       	smpsAlterNote       $FF
000F979E C4                         	dc.b	nG5
000F979F E60F                       	smpsAlterVol        $0F
000F97A1 08                         	dc.b	$08
000F97A2 E6F1                       	smpsAlterVol        $F1
000F97A4 10                         	dc.b	$10
000F97A5 E60F                       	smpsAlterVol        $0F
000F97A7 38                         	dc.b	$38
000F97A8 E6F1                       	smpsAlterVol        $F1
000F97AA 10                         	dc.b	$10
000F97AB E60F                       	smpsAlterVol        $0F
000F97AD C4                         	dc.b	nG5
000F97AE E6F1                       	smpsAlterVol        $F1
000F97B0 E100                       	smpsAlterNote       $00
000F97B2 C2                         	dc.b	nF5
000F97B3 E60F                       	smpsAlterVol        $0F
000F97B5 08                         	dc.b	$08
000F97B6 E6F1                       	smpsAlterVol        $F1
000F97B8 C010                       	dc.b	nEb5, $10
000F97BA E60F                       	smpsAlterVol        $0F
000F97BC C0                         	dc.b	nEb5
000F97BD E6F1                       	smpsAlterVol        $F1
000F97BF BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000F97C5 E60F                       	smpsAlterVol        $0F
000F97C7 C9                         	dc.b	nC6
000F97C8 E6F1                       	smpsAlterVol        $F1
000F97CA C5                         	dc.b	nAb5
000F97CB E60F                       	smpsAlterVol        $0F
000F97CD 08                         	dc.b	$08
000F97CE E6F1                       	smpsAlterVol        $F1
000F97D0 C010                       	dc.b	nEb5, $10
000F97D2 E60F                       	smpsAlterVol        $0F
000F97D4 C0                         	dc.b	nEb5
000F97D5 E6F1                       	smpsAlterVol        $F1
000F97D7 C208                       	dc.b	nF5, $08
000F97D9 E1FF                       	smpsAlterNote       $FF
000F97DB C410                       	dc.b	nG5, $10
000F97DD E100                       	smpsAlterNote       $00
000F97DF C5C7                       	dc.b	nAb5, nBb5
000F97E1 E60F                       	smpsAlterVol        $0F
000F97E3 C7                         	dc.b	nBb5
000F97E4 E6F1                       	smpsAlterVol        $F1
000F97E6 C5                         	dc.b	nAb5
000F97E7 E60F                       	smpsAlterVol        $0F
000F97E9 08                         	dc.b	$08
000F97EA E6F1                       	smpsAlterVol        $F1
000F97EC E1FF                       	smpsAlterNote       $FF
000F97EE C410                       	dc.b	nG5, $10
000F97F0 E60F                       	smpsAlterVol        $0F
000F97F2 C4                         	dc.b	nG5
000F97F3 E6F1                       	smpsAlterVol        $F1
000F97F5 C4                         	dc.b	nG5
000F97F6 E100                       	smpsAlterNote       $00
000F97F8 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000F97FD E60F                       	smpsAlterVol        $0F
000F97FF 28                         	dc.b	$28
000F9800 E6F1                       	smpsAlterVol        $F1
000F9802 C008 10                    	dc.b	nEb5, $08, $10
000F9805 E60F                       	smpsAlterVol        $0F
000F9807 21                         	dc.b	$21
000F9808                            
000F9808                            GentleBreeze_Loop12:
000F9808 E7C0 7F                    	dc.b	smpsNoAttack, nEb5, $7F
000F980B F700 08FF F9               	smpsLoop            $00, $08, GentleBreeze_Loop12
000F9810 E717                       	dc.b	smpsNoAttack, $17
000F9812 E6F1                       	smpsAlterVol        $F1
000F9814 E1FF                       	smpsAlterNote       $FF
000F9816 C410                       	dc.b	nG5, $10
000F9818 E60F                       	smpsAlterVol        $0F
000F981A C4                         	dc.b	nG5
000F981B E6F1                       	smpsAlterVol        $F1
000F981D E100                       	smpsAlterNote       $00
000F981F C2                         	dc.b	nF5
000F9820 E60F                       	smpsAlterVol        $0F
000F9822 08                         	dc.b	$08
000F9823 E6F1                       	smpsAlterVol        $F1
000F9825 C010                       	dc.b	nEb5, $10
000F9827 E60F                       	smpsAlterVol        $0F
000F9829 C0                         	dc.b	nEb5
000F982A E6F1                       	smpsAlterVol        $F1
000F982C BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000F9832 E60F                       	smpsAlterVol        $0F
000F9834 C9                         	dc.b	nC6
000F9835 E6F1                       	smpsAlterVol        $F1
000F9837 C5                         	dc.b	nAb5
000F9838 E60F                       	smpsAlterVol        $0F
000F983A 08                         	dc.b	$08
000F983B E6F1                       	smpsAlterVol        $F1
000F983D C010                       	dc.b	nEb5, $10
000F983F E60F                       	smpsAlterVol        $0F
000F9841 C0                         	dc.b	nEb5
000F9842 E6F1                       	smpsAlterVol        $F1
000F9844 C208                       	dc.b	nF5, $08
000F9846 E1FF                       	smpsAlterNote       $FF
000F9848 C410                       	dc.b	nG5, $10
000F984A E100                       	smpsAlterNote       $00
000F984C C5C7                       	dc.b	nAb5, nBb5
000F984E E60F                       	smpsAlterVol        $0F
000F9850 C7                         	dc.b	nBb5
000F9851 E6F1                       	smpsAlterVol        $F1
000F9853 C5                         	dc.b	nAb5
000F9854 E60F                       	smpsAlterVol        $0F
000F9856 08                         	dc.b	$08
000F9857 E6F1                       	smpsAlterVol        $F1
000F9859 E1FF                       	smpsAlterNote       $FF
000F985B C410                       	dc.b	nG5, $10
000F985D E60F                       	smpsAlterVol        $0F
000F985F C4                         	dc.b	nG5
000F9860 E6F1                       	smpsAlterVol        $F1
000F9862 C4                         	dc.b	nG5
000F9863 E100                       	smpsAlterNote       $00
000F9865 C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000F986A E60F                       	smpsAlterVol        $0F
000F986C C2                         	dc.b	nF5
000F986D E6F1                       	smpsAlterVol        $F1
000F986F E1FF                       	smpsAlterNote       $FF
000F9871 C4                         	dc.b	nG5
000F9872 E60F                       	smpsAlterVol        $0F
000F9874 08                         	dc.b	$08
000F9875 E6F1                       	smpsAlterVol        $F1
000F9877 10                         	dc.b	$10
000F9878 E60F                       	smpsAlterVol        $0F
000F987A 38                         	dc.b	$38
000F987B E6F1                       	smpsAlterVol        $F1
000F987D 10                         	dc.b	$10
000F987E E60F                       	smpsAlterVol        $0F
000F9880 C4                         	dc.b	nG5
000F9881 E6F1                       	smpsAlterVol        $F1
000F9883 E100                       	smpsAlterNote       $00
000F9885 C2                         	dc.b	nF5
000F9886 E60F                       	smpsAlterVol        $0F
000F9888 08                         	dc.b	$08
000F9889 E6F1                       	smpsAlterVol        $F1
000F988B C010                       	dc.b	nEb5, $10
000F988D E60F                       	smpsAlterVol        $0F
000F988F C0                         	dc.b	nEb5
000F9890 E6F1                       	smpsAlterVol        $F1
000F9892 BDC0 C208 C910             	dc.b	nC5, nEb5, nF5, $08, nC6, $10
000F9898 E60F                       	smpsAlterVol        $0F
000F989A C9                         	dc.b	nC6
000F989B E6F1                       	smpsAlterVol        $F1
000F989D C5                         	dc.b	nAb5
000F989E E60F                       	smpsAlterVol        $0F
000F98A0 08                         	dc.b	$08
000F98A1 E6F1                       	smpsAlterVol        $F1
000F98A3 C010                       	dc.b	nEb5, $10
000F98A5 E60F                       	smpsAlterVol        $0F
000F98A7 C0                         	dc.b	nEb5
000F98A8 E6F1                       	smpsAlterVol        $F1
000F98AA C208                       	dc.b	nF5, $08
000F98AC E1FF                       	smpsAlterNote       $FF
000F98AE C410                       	dc.b	nG5, $10
000F98B0 E100                       	smpsAlterNote       $00
000F98B2 C5C7                       	dc.b	nAb5, nBb5
000F98B4 E60F                       	smpsAlterVol        $0F
000F98B6 C7                         	dc.b	nBb5
000F98B7 E6F1                       	smpsAlterVol        $F1
000F98B9 C5                         	dc.b	nAb5
000F98BA E60F                       	smpsAlterVol        $0F
000F98BC 08                         	dc.b	$08
000F98BD E6F1                       	smpsAlterVol        $F1
000F98BF E1FF                       	smpsAlterNote       $FF
000F98C1 C410                       	dc.b	nG5, $10
000F98C3 E60F                       	smpsAlterVol        $0F
000F98C5 C4                         	dc.b	nG5
000F98C6 E6F1                       	smpsAlterVol        $F1
000F98C8 C4                         	dc.b	nG5
000F98C9 E100                       	smpsAlterNote       $00
000F98CB C208 C010 C2               	dc.b	nF5, $08, nEb5, $10, nF5
000F98D0 E60F                       	smpsAlterVol        $0F
000F98D2 28                         	dc.b	$28
000F98D3 E6F1                       	smpsAlterVol        $F1
000F98D5 C008 10                    	dc.b	nEb5, $08, $10
000F98D8 E60F                       	smpsAlterVol        $0F
000F98DA 21                         	dc.b	$21
000F98DB E0C0                       	smpsPan             panCenter, $00
000F98DD F6FF 29                    	smpsJump            GentleBreeze_Loop12
000F98E0                            
000F98E0                            ; FM2 Data
000F98E0                            GentleBreeze_FM2:
000F98E2 E60C                       	smpsAlterVol        $0C
000F98E4 E0C0                       	smpsPan             panCenter, $00
000F98E6 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000F98F2 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000F98FE 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000F990A 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000F9916 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000F9922 A039                       	dc.b	nG2, $39
000F9924                            
000F9924                            GentleBreeze_Jump04:
000F9924 E7A0 0F                    	dc.b	smpsNoAttack, nG2, $0F
000F9927                            
000F9927                            GentleBreeze_Loop11:
000F9927 A118 0880 10A1 2008 A09E+  	dc.b	nAb2, $18, $08, nRst, $10, nAb2, $20, $08, nG2, nF2, nFs2, nG2
000F9933 A1A0 1808 8010 A020 0880+  	dc.b	nAb2, nG2, $18, $08, nRst, $10, nG2, $20, $08, nRst, nG2, nC3
000F993F 189E A020 A510 A008 A518+  	dc.b	$18, nF2, nG2, $20, nC3, $10, nG2, $08, nC3, $18, nG2, $08
000F994B 9FA0 9C18 979C 2008 9EA2+  	dc.b	nFs2, nG2, nEb2, $18, nBb1, nEb2, $20, $08, nF2, nA2, nEb3, nB2
000F9957 A3                         	dc.b	nBb2
000F9958 F700 02FF CB               	smpsLoop            $00, $02, GentleBreeze_Loop11
000F995D 9E20 A018 A508 8040 A020+  	dc.b	nF2, $20, nG2, $18, nC3, $08, nRst, $40, nG2, $20, nF2, $18
000F9969 A508 8020 A010 9E9E 20A0+  	dc.b	nC3, $08, nRst, $20, nG2, $10, nF2, nF2, $20, nG2, $18, nC3
000F9975 0880 409E 38A0 489E 20A0+  	dc.b	$08, nRst, $40, nF2, $38, nG2, $48, nF2, $20, nG2, $18, nC3
000F9981 0880 40A0 209E 18A5 0880+  	dc.b	$08, nRst, $40, nG2, $20, nF2, $18, nC3, $08, nRst, $20, nG2
000F998D 109E 9E20 A018 A508 8040+  	dc.b	$10, nF2, nF2, $20, nG2, $18, nC3, $08, nRst, $40, nF2, $38
000F9999 A039                       	dc.b	nG2, $39
000F999B E0C0                       	smpsPan             panCenter, $00
000F999D F6FF 85                    	smpsJump            GentleBreeze_Jump04
000F99A0                            
000F99A0                            ; FM3 Data
000F99A0                            GentleBreeze_FM3:
000F99A2 E0C0                       	smpsPan             panCenter, $00
000F99A4 807F 7F7F 7F04             	dc.b	nRst, $7F, $7F, $7F, $7F, $04
000F99AC E616                       	smpsAlterVol        $16
000F99AE F000 0207 03               	smpsModSet          $00, $02, $07, $03
000F99B3                            
000F99B3                            GentleBreeze_Loop0F:
000F99B3 C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000F99B7 E1FF                       	smpsAlterNote       $FF
000F99B9 C4                         	dc.b	nG5
000F99BA E100                       	smpsAlterNote       $00
000F99BC C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000F99C1 E608                       	smpsAlterVol        $08
000F99C3 C080 08                    	dc.b	nEb5, nRst, $08
000F99C6 E6F8                       	smpsAlterVol        $F8
000F99C8 C7                         	dc.b	nBb5
000F99C9 E1FF                       	smpsAlterNote       $FF
000F99CB C4                         	dc.b	nG5
000F99CC E100                       	smpsAlterNote       $00
000F99CE C0BB                       	dc.b	nEb5, nBb4
000F99D0 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop0F
000F99D5 C0BD C9                    	dc.b	nEb5, nC5, nC6
000F99D8 E1FF                       	smpsAlterNote       $FF
000F99DA C4                         	dc.b	nG5
000F99DB E100                       	smpsAlterNote       $00
000F99DD C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000F99E2 E608                       	smpsAlterVol        $08
000F99E4 C080 08                    	dc.b	nEb5, nRst, $08
000F99E7 E6F8                       	smpsAlterVol        $F8
000F99E9 E1FF                       	smpsAlterNote       $FF
000F99EB C4                         	dc.b	nG5
000F99EC E100                       	smpsAlterNote       $00
000F99EE C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000F99F5 E1FF                       	smpsAlterNote       $FF
000F99F7 C4                         	dc.b	nG5
000F99F8 E100                       	smpsAlterNote       $00
000F99FA C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000F99FF E1FF                       	smpsAlterNote       $FF
000F9A01 C4                         	dc.b	nG5
000F9A02 E100                       	smpsAlterNote       $00
000F9A04 C7                         	dc.b	nBb5
000F9A05 E1FF                       	smpsAlterNote       $FF
000F9A07 C4                         	dc.b	nG5
000F9A08 E100                       	smpsAlterNote       $00
000F9A0A C2C0 01                    	dc.b	nF5, nEb5, $01
000F9A0D                            
000F9A0D                            GentleBreeze_Jump03:
000F9A0D E7C0 07BB 08               	dc.b	smpsNoAttack, nEb5, $07, nBb4, $08
000F9A14 E6FA                       	smpsAlterVol        $FA
000F9A16 F4                         	smpsModOff
000F9A17 E1FF                       	smpsAlterNote       $FF
000F9A19 B850                       	dc.b	nG4, $50
000F9A1B E100                       	smpsAlterNote       $00
000F9A1D B408 B1B4 B5B6 AF18 B510+  	dc.b	nEb4, $08, nC4, nEb4, nE4, nF4, nBb3, $18, nE4, $10, nF4, $08
000F9A29 E1FF                       	smpsAlterNote       $FF
000F9A2B B810                       	dc.b	nG4, $10
000F9A2D E100                       	smpsAlterNote       $00
000F9A2F BB18 B908 80               	dc.b	nBb4, $18, nAb4, $08, nRst
000F9A34 E1FF                       	smpsAlterNote       $FF
000F9A36 B8                         	dc.b	nG4
000F9A37 E100                       	smpsAlterNote       $00
000F9A39 B610                       	dc.b	nF4, $10
000F9A3B E1FF                       	smpsAlterNote       $FF
000F9A3D B850                       	dc.b	nG4, $50
000F9A3F E100                       	smpsAlterNote       $00
000F9A41 B608 B410 08B6 AF60        	dc.b	nF4, $08, nEb4, $10, $08, nF4, nBb3, $60
000F9A49 E1FF                       	smpsAlterNote       $FF
000F9A4B AC08                       	dc.b	nG3, $08
000F9A4D E100                       	smpsAlterNote       $00
000F9A4F AFB3 B4B6 B7               	dc.b	nBb3, nD4, nEb4, nF4, nFs4
000F9A54 E1FF                       	smpsAlterNote       $FF
000F9A56 B850                       	dc.b	nG4, $50
000F9A58 E100                       	smpsAlterNote       $00
000F9A5A BB08                       	dc.b	nBb4, $08
000F9A5C E1FF                       	smpsAlterNote       $FF
000F9A5E B8                         	dc.b	nG4
000F9A5F E100                       	smpsAlterNote       $00
000F9A61 BDBB B6                    	dc.b	nC5, nBb4, nF4
000F9A64 E1FF                       	smpsAlterNote       $FF
000F9A66 B810 08                    	dc.b	nG4, $10, $08
000F9A69 E100                       	smpsAlterNote       $00
000F9A6B B6                         	dc.b	nF4
000F9A6C E1FF                       	smpsAlterNote       $FF
000F9A6E B880                       	dc.b	nG4, nRst
000F9A70 E100                       	smpsAlterNote       $00
000F9A72 BBB9 BB                    	dc.b	nBb4, nAb4, nBb4
000F9A75 E1FF                       	smpsAlterNote       $FF
000F9A77 B810                       	dc.b	nG4, $10
000F9A79 E100                       	smpsAlterNote       $00
000F9A7B B308 B4B1 AFB4 B5          	dc.b	nD4, $08, nEb4, nC4, nBb3, nEb4, nE4
000F9A82 E1FF                       	smpsAlterNote       $FF
000F9A84 B87F E77F E702 807F 7F7F+  	dc.b	nG4, $7F, smpsNoAttack, $7F, smpsNoAttack, $02, nRst, $7F, $7F, $7F, $7F, $04
000F9A92 E606                       	smpsAlterVol        $06
000F9A94 F000 0207 03               	smpsModSet          $00, $02, $07, $03
000F9A99 E100                       	smpsAlterNote       $00
000F9A9B                            
000F9A9B                            GentleBreeze_Loop10:
000F9A9B C008 BDC9                  	dc.b	nEb5, $08, nC5, nC6
000F9A9F E1FF                       	smpsAlterNote       $FF
000F9AA1 C4                         	dc.b	nG5
000F9AA2 E100                       	smpsAlterNote       $00
000F9AA4 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000F9AA9 E608                       	smpsAlterVol        $08
000F9AAB C080 08                    	dc.b	nEb5, nRst, $08
000F9AAE E6F8                       	smpsAlterVol        $F8
000F9AB0 C7                         	dc.b	nBb5
000F9AB1 E1FF                       	smpsAlterNote       $FF
000F9AB3 C4                         	dc.b	nG5
000F9AB4 E100                       	smpsAlterNote       $00
000F9AB6 C0BB                       	dc.b	nEb5, nBb4
000F9AB8 F700 02FF DF               	smpsLoop            $00, $02, GentleBreeze_Loop10
000F9ABD C0BD C9                    	dc.b	nEb5, nC5, nC6
000F9AC0 E1FF                       	smpsAlterNote       $FF
000F9AC2 C4                         	dc.b	nG5
000F9AC3 E100                       	smpsAlterNote       $00
000F9AC5 C0BB BDC0 10               	dc.b	nEb5, nBb4, nC5, nEb5, $10
000F9ACA E608                       	smpsAlterVol        $08
000F9ACC C080 08                    	dc.b	nEb5, nRst, $08
000F9ACF E6F8                       	smpsAlterVol        $F8
000F9AD1 E1FF                       	smpsAlterNote       $FF
000F9AD3 C4                         	dc.b	nG5
000F9AD4 E100                       	smpsAlterNote       $00
000F9AD6 C2C0 BBC0 BBC7 C5          	dc.b	nF5, nEb5, nBb4, nEb5, nBb4, nBb5, nAb5
000F9ADD E1FF                       	smpsAlterNote       $FF
000F9ADF C4                         	dc.b	nG5
000F9AE0 E100                       	smpsAlterNote       $00
000F9AE2 C2C0 BBBB C0               	dc.b	nF5, nEb5, nBb4, nBb4, nEb5
000F9AE7 E1FF                       	smpsAlterNote       $FF
000F9AE9 C4                         	dc.b	nG5
000F9AEA E100                       	smpsAlterNote       $00
000F9AEC C7                         	dc.b	nBb5
000F9AED E1FF                       	smpsAlterNote       $FF
000F9AEF C4                         	dc.b	nG5
000F9AF0 E100                       	smpsAlterNote       $00
000F9AF2 C2C0 01                    	dc.b	nF5, nEb5, $01
000F9AF5 E0C0                       	smpsPan             panCenter, $00
000F9AF7 F1                         	smpsModOn
000F9AF8 F6FF 13                    	smpsJump            GentleBreeze_Jump03
000F9AFB                            
000F9AFB                            ; FM4 Data
000F9AFB                            GentleBreeze_FM4:
000F9AFD E0C0                       	smpsPan             panCenter, $00
000F9AFF 80                         	dc.b	nRst
000F9B00                            
000F9B00                            GentleBreeze_Loop0D:
000F9B00 7F                         	dc.b	$7F
000F9B01 F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0D
000F9B06 77                         	dc.b	$77
000F9B09 E609                       	smpsAlterVol        $09
000F9B0B C001                       	dc.b	nEb5, $01
000F9B0D                            
000F9B0D                            GentleBreeze_Jump02:
000F9B0D E7C0 07C2 08               	dc.b	smpsNoAttack, nEb5, $07, nF5, $08
000F9B12 E607                       	smpsAlterVol        $07
000F9B14 E1FF                       	smpsAlterNote       $FF
000F9B16 C450                       	dc.b	nG5, $50
000F9B18 E100                       	smpsAlterNote       $00
000F9B1A C008 BDC0 C1C2 BB18 C110+  	dc.b	nEb5, $08, nC5, nEb5, nE5, nF5, nBb4, $18, nE5, $10, nF5, $08
000F9B26 E1FF                       	smpsAlterNote       $FF
000F9B28 C410                       	dc.b	nG5, $10
000F9B2A E100                       	smpsAlterNote       $00
000F9B2C C718 C508 80               	dc.b	nBb5, $18, nAb5, $08, nRst
000F9B31 E1FF                       	smpsAlterNote       $FF
000F9B33 C4                         	dc.b	nG5
000F9B34 E100                       	smpsAlterNote       $00
000F9B36 C210                       	dc.b	nF5, $10
000F9B38 E1FF                       	smpsAlterNote       $FF
000F9B3A C450                       	dc.b	nG5, $50
000F9B3C E100                       	smpsAlterNote       $00
000F9B3E C208 C010 08C2 BB60        	dc.b	nF5, $08, nEb5, $10, $08, nF5, nBb4, $60
000F9B46 E1FF                       	smpsAlterNote       $FF
000F9B48 B808                       	dc.b	nG4, $08
000F9B4A E100                       	smpsAlterNote       $00
000F9B4C BBBF C0C2 C3               	dc.b	nBb4, nD5, nEb5, nF5, nFs5
000F9B51 E1FF                       	smpsAlterNote       $FF
000F9B53 C450                       	dc.b	nG5, $50
000F9B55 E100                       	smpsAlterNote       $00
000F9B57 C708                       	dc.b	nBb5, $08
000F9B59 E1FF                       	smpsAlterNote       $FF
000F9B5B C4                         	dc.b	nG5
000F9B5C E100                       	smpsAlterNote       $00
000F9B5E C9C7 C2                    	dc.b	nC6, nBb5, nF5
000F9B61 E1FF                       	smpsAlterNote       $FF
000F9B63 C410 08                    	dc.b	nG5, $10, $08
000F9B66 E100                       	smpsAlterNote       $00
000F9B68 C2                         	dc.b	nF5
000F9B69 E1FF                       	smpsAlterNote       $FF
000F9B6B C480                       	dc.b	nG5, nRst
000F9B6D E100                       	smpsAlterNote       $00
000F9B6F C7C5 C7                    	dc.b	nBb5, nAb5, nBb5
000F9B72 E1FF                       	smpsAlterNote       $FF
000F9B74 C410                       	dc.b	nG5, $10
000F9B76 E100                       	smpsAlterNote       $00
000F9B78 BF08 C0BD BBC0 C1          	dc.b	nD5, $08, nEb5, nC5, nBb4, nEb5, nE5
000F9B7F E1FF                       	smpsAlterNote       $FF
000F9B81 C47F E701 7FE7 0180        	dc.b	nG5, $7F, smpsNoAttack, $01, $7F, smpsNoAttack, $01, nRst
000F9B89                            
000F9B89                            GentleBreeze_Loop0E:
000F9B89 7F                         	dc.b	$7F
000F9B8A F700 07FF FB               	smpsLoop            $00, $07, GentleBreeze_Loop0E
000F9B8F 77                         	dc.b	$77
000F9B90 E100                       	smpsAlterNote       $00
000F9B92 C001                       	dc.b	nEb5, $01
000F9B94 E6F9                       	smpsAlterVol        $F9
000F9B96 E0C0                       	smpsPan             panCenter, $00
000F9B98 E100                       	smpsAlterNote       $00
000F9B9A F6FF 71                    	smpsJump            GentleBreeze_Jump02
000F9B9D                            
000F9B9D                            ; FM5 Data
000F9B9D                            GentleBreeze_FM5:
000F9B9F E0C0                       	smpsPan             panCenter, $00
000F9BA1 A5                         	dc.b	nC3
000F9BA2                            
000F9BA2                            GentleBreeze_Loop06:
000F9BA2 10                         	dc.b	$10
000F9BA3 E607                       	smpsAlterVol        $07
000F9BA5 A5                         	dc.b	nC3
000F9BA6 E6F9                       	smpsAlterVol        $F9
000F9BA8 08                         	dc.b	$08
000F9BA9 E607                       	smpsAlterVol        $07
000F9BAB A5                         	dc.b	nC3
000F9BAC E608                       	smpsAlterVol        $08
000F9BAE A5                         	dc.b	nC3
000F9BAF E6F1                       	smpsAlterVol        $F1
000F9BB1 18                         	dc.b	$18
000F9BB2 E607                       	smpsAlterVol        $07
000F9BB4 10                         	dc.b	$10
000F9BB5 E608                       	smpsAlterVol        $08
000F9BB7 A5                         	dc.b	nC3
000F9BB8 E6F1                       	smpsAlterVol        $F1
000F9BBA A5                         	dc.b	nC3
000F9BBB F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop06
000F9BC0 A5                         	dc.b	nC3
000F9BC1                            
000F9BC1                            GentleBreeze_Loop07:
000F9BC1 E607                       	smpsAlterVol        $07
000F9BC3 A5                         	dc.b	nC3
000F9BC4 E6F9                       	smpsAlterVol        $F9
000F9BC6 08                         	dc.b	$08
000F9BC7 E607                       	smpsAlterVol        $07
000F9BC9 A5                         	dc.b	nC3
000F9BCA E608                       	smpsAlterVol        $08
000F9BCC A5                         	dc.b	nC3
000F9BCD E6F1                       	smpsAlterVol        $F1
000F9BCF 10                         	dc.b	$10
000F9BD0 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop07
000F9BD5                            
000F9BD5                            GentleBreeze_Loop08:
000F9BD5 A5                         	dc.b	nC3
000F9BD6 E607                       	smpsAlterVol        $07
000F9BD8 A5                         	dc.b	nC3
000F9BD9 E6F9                       	smpsAlterVol        $F9
000F9BDB 08                         	dc.b	$08
000F9BDC E607                       	smpsAlterVol        $07
000F9BDE A5                         	dc.b	nC3
000F9BDF E608                       	smpsAlterVol        $08
000F9BE1 A5                         	dc.b	nC3
000F9BE2 E6F1                       	smpsAlterVol        $F1
000F9BE4 18                         	dc.b	$18
000F9BE5 E607                       	smpsAlterVol        $07
000F9BE7 10                         	dc.b	$10
000F9BE8 E608                       	smpsAlterVol        $08
000F9BEA A5                         	dc.b	nC3
000F9BEB E6F1                       	smpsAlterVol        $F1
000F9BED A5                         	dc.b	nC3
000F9BEE F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop08
000F9BF3 A5                         	dc.b	nC3
000F9BF4 E607                       	smpsAlterVol        $07
000F9BF6 A5                         	dc.b	nC3
000F9BF7 E6F9                       	smpsAlterVol        $F9
000F9BF9 08                         	dc.b	$08
000F9BFA E607                       	smpsAlterVol        $07
000F9BFC A5                         	dc.b	nC3
000F9BFD E608                       	smpsAlterVol        $08
000F9BFF A5                         	dc.b	nC3
000F9C00 E6F1                       	smpsAlterVol        $F1
000F9C02 10                         	dc.b	$10
000F9C03 E607                       	smpsAlterVol        $07
000F9C05 A5                         	dc.b	nC3
000F9C06 E6F9                       	smpsAlterVol        $F9
000F9C08 08                         	dc.b	$08
000F9C09 E607                       	smpsAlterVol        $07
000F9C0B A5                         	dc.b	nC3
000F9C0C E608                       	smpsAlterVol        $08
000F9C0E A5                         	dc.b	nC3
000F9C0F E6F1                       	smpsAlterVol        $F1
000F9C11 01                         	dc.b	$01
000F9C12                            
000F9C12                            GentleBreeze_Jump01:
000F9C12 E7A5 0F                    	dc.b	smpsNoAttack, nC3, $0F
000F9C15 E607                       	smpsAlterVol        $07
000F9C17                            
000F9C17                            GentleBreeze_Loop09:
000F9C17 10                         	dc.b	$10
000F9C18 E608                       	smpsAlterVol        $08
000F9C1A A5                         	dc.b	nC3
000F9C1B E6F1                       	smpsAlterVol        $F1
000F9C1D 08                         	dc.b	$08
000F9C1E E60F                       	smpsAlterVol        $0F
000F9C20 18                         	dc.b	$18
000F9C21 E6F8                       	smpsAlterVol        $F8
000F9C23 F700 0FFF F0               	smpsLoop            $00, $0F, GentleBreeze_Loop09
000F9C28 10                         	dc.b	$10
000F9C29 E608                       	smpsAlterVol        $08
000F9C2B A5                         	dc.b	nC3
000F9C2C E6F1                       	smpsAlterVol        $F1
000F9C2E 08                         	dc.b	$08
000F9C2F E60F                       	smpsAlterVol        $0F
000F9C31 18                         	dc.b	$18
000F9C32 E6F1                       	smpsAlterVol        $F1
000F9C34                            
000F9C34                            GentleBreeze_Loop0A:
000F9C34 10                         	dc.b	$10
000F9C35 E607                       	smpsAlterVol        $07
000F9C37 A5                         	dc.b	nC3
000F9C38 E6F9                       	smpsAlterVol        $F9
000F9C3A 08                         	dc.b	$08
000F9C3B E607                       	smpsAlterVol        $07
000F9C3D A5                         	dc.b	nC3
000F9C3E E608                       	smpsAlterVol        $08
000F9C40 A5                         	dc.b	nC3
000F9C41 E6F1                       	smpsAlterVol        $F1
000F9C43 18                         	dc.b	$18
000F9C44 E607                       	smpsAlterVol        $07
000F9C46 10                         	dc.b	$10
000F9C47 E608                       	smpsAlterVol        $08
000F9C49 A5                         	dc.b	nC3
000F9C4A E6F1                       	smpsAlterVol        $F1
000F9C4C A5                         	dc.b	nC3
000F9C4D F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0A
000F9C52 A5                         	dc.b	nC3
000F9C53                            
000F9C53                            GentleBreeze_Loop0B:
000F9C53 E607                       	smpsAlterVol        $07
000F9C55 A5                         	dc.b	nC3
000F9C56 E6F9                       	smpsAlterVol        $F9
000F9C58 08                         	dc.b	$08
000F9C59 E607                       	smpsAlterVol        $07
000F9C5B A5                         	dc.b	nC3
000F9C5C E608                       	smpsAlterVol        $08
000F9C5E A5                         	dc.b	nC3
000F9C5F E6F1                       	smpsAlterVol        $F1
000F9C61 10                         	dc.b	$10
000F9C62 F700 02FF ED               	smpsLoop            $00, $02, GentleBreeze_Loop0B
000F9C67                            
000F9C67                            GentleBreeze_Loop0C:
000F9C67 A5                         	dc.b	nC3
000F9C68 E607                       	smpsAlterVol        $07
000F9C6A A5                         	dc.b	nC3
000F9C6B E6F9                       	smpsAlterVol        $F9
000F9C6D 08                         	dc.b	$08
000F9C6E E607                       	smpsAlterVol        $07
000F9C70 A5                         	dc.b	nC3
000F9C71 E608                       	smpsAlterVol        $08
000F9C73 A5                         	dc.b	nC3
000F9C74 E6F1                       	smpsAlterVol        $F1
000F9C76 18                         	dc.b	$18
000F9C77 E607                       	smpsAlterVol        $07
000F9C79 10                         	dc.b	$10
000F9C7A E608                       	smpsAlterVol        $08
000F9C7C A5                         	dc.b	nC3
000F9C7D E6F1                       	smpsAlterVol        $F1
000F9C7F A5                         	dc.b	nC3
000F9C80 F700 03FF E3               	smpsLoop            $00, $03, GentleBreeze_Loop0C
000F9C85 A5                         	dc.b	nC3
000F9C86 E607                       	smpsAlterVol        $07
000F9C88 A5                         	dc.b	nC3
000F9C89 E6F9                       	smpsAlterVol        $F9
000F9C8B 08                         	dc.b	$08
000F9C8C E607                       	smpsAlterVol        $07
000F9C8E A5                         	dc.b	nC3
000F9C8F E608                       	smpsAlterVol        $08
000F9C91 A5                         	dc.b	nC3
000F9C92 E6F1                       	smpsAlterVol        $F1
000F9C94 10                         	dc.b	$10
000F9C95 E607                       	smpsAlterVol        $07
000F9C97 A5                         	dc.b	nC3
000F9C98 E6F9                       	smpsAlterVol        $F9
000F9C9A 08                         	dc.b	$08
000F9C9B E607                       	smpsAlterVol        $07
000F9C9D A5                         	dc.b	nC3
000F9C9E E608                       	smpsAlterVol        $08
000F9CA0 A5                         	dc.b	nC3
000F9CA1 E6F1                       	smpsAlterVol        $F1
000F9CA3 01                         	dc.b	$01
000F9CA4 E0C0                       	smpsPan             panCenter, $00
000F9CA6 F6FF 6A                    	smpsJump            GentleBreeze_Jump01
000F9CA9                            
000F9CA9                            ; DAC Data
000F9CA9                            GentleBreeze_DAC:
000F9CA9 81                         	dc.b	dKick
000F9CAA                            
000F9CAA                            GentleBreeze_Loop00:
000F9CAA 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000F9CB0 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop00
000F9CB5 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000F9CC0                            
000F9CC0                            GentleBreeze_Loop01:
000F9CC0 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000F9CC6 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop01
000F9CCB 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000F9CD5                            
000F9CD5                            GentleBreeze_Jump00:
000F9CD5 8007 8B08                  	dc.b	nRst, $07, dVLowTimpani, $08
000F9CD9                            
000F9CD9                            GentleBreeze_Loop02:
000F9CD9 81                         	dc.b	dKick
000F9CDA                            
000F9CDA                            GentleBreeze_Loop03:
000F9CDA 1008 8182 2081 1008 8182+  	dc.b	$10, $08, dKick, dSnare, $20, dKick, $10, $08, dKick, dSnare, $10, dMidTimpani
000F9CE6 088A                       	dc.b	$08, dLowTimpani
000F9CE8 F700 03FF ED               	smpsLoop            $00, $03, GentleBreeze_Loop02
000F9CED 8110 0881 8210 8808 8982+  	dc.b	dKick, $10, $08, dKick, dSnare, $10, dHiTimpani, $08, dMidTimpani, dSnare, dLowTimpani, dVLowTimpani
000F9CF9 1082 0881 18               	dc.b	$10, dSnare, $08, dKick, $18
000F9CFE F701 02FF D8               	smpsLoop            $01, $02, GentleBreeze_Loop03
000F9D03                            
000F9D03                            GentleBreeze_Loop04:
000F9D03 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000F9D09 F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop04
000F9D0E 2018 7F80 2988 0889 8A8B+  	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, dVLowTimpani, dKick
000F9D19                            
000F9D19                            GentleBreeze_Loop05:
000F9D19 2018 2810 0881             	dc.b	$20, $18, $28, $10, $08, dKick
000F9D1F F700 02FF F6               	smpsLoop            $00, $02, GentleBreeze_Loop05
000F9D24 2018 7F80 2988 0889 8A01   	dc.b	$20, $18, $7F, nRst, $29, dHiTimpani, $08, dMidTimpani, dLowTimpani, $01
000F9D2E F6FF A5                    	smpsJump            GentleBreeze_Jump00
000F9D31                            
000F9D31                            ; PSG 1 Data
000F9D31                            GentleBreeze_PSG1:
000F9D31 80                         	dc.b	nRst
000F9D32                            
000F9D32                            GentleBreeze_LoopPSG02:
000F9D32 7F                         	dc.b	$7F
000F9D33 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG02
000F9D38 08                         	dc.b	$08
000F9D39 EC04                       	smpsPSGAlterVol     $04
000F9D3B                            
000F9D3B                            GentleBreeze_JumpPSG01:
000F9D3B A37F A07F 019E 7F7F 02A3+  	dc.b	nBb2, $7F, nG2, $7F, $01, nF2, $7F, $7F, $02, nBb2, $7F, $01
000F9D47 A07F 019E 7F7F 0280        	dc.b	nG2, $7F, $01, nF2, $7F, $7F, $02, nRst
000F9D4F                            
000F9D4F                            GentleBreeze_LoopPSG03:
000F9D4F 7F                         	dc.b	$7F
000F9D50 F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG03
000F9D55 08A3 01                    	dc.b	$08, nBb2, $01
000F9D58 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG01
000F9D5B                            
000F9D5B                            ; PSG2 Data
000F9D5B                            GentleBreeze_PSG2:
000F9D5B 80                         	dc.b	nRst
000F9D5C                            
000F9D5C                            GentleBreeze_LoopPSG00:
000F9D5C 7F                         	dc.b	$7F
000F9D5D F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG00
000F9D62 08                         	dc.b	$08
000F9D63 EC04                       	smpsPSGAlterVol     $04
000F9D65                            
000F9D65                            GentleBreeze_JumpPSG00:
000F9D65 A87F A77F 01A5 7F7F 02A8+  	dc.b	nEb3, $7F, nD3, $7F, $01, nC3, $7F, $7F, $02, nEb3, $7F, $01
000F9D71 A77F 01A5 7F7F 0280        	dc.b	nD3, $7F, $01, nC3, $7F, $7F, $02, nRst
000F9D79                            
000F9D79                            GentleBreeze_LoopPSG01:
000F9D79 7F                         	dc.b	$7F
000F9D7A F700 08FF FB               	smpsLoop            $00, $08, GentleBreeze_LoopPSG01
000F9D7F 08A8 01                    	dc.b	$08, nEb3, $01
000F9D82 F6FF E1                    	smpsJump            GentleBreeze_JumpPSG00
000F9D85                            
000F9D85                            GentleBreeze_Voices:
000F9D85                            ;	Voice $00
000F9D85                            ;	$0C
000F9D85                            ;	$2A, $70, $2A, $71, 	$1F, $1F, $1F, $1F, 	$0D, $04, $11, $0C
000F9D85                            ;	$00, $00, $00, $01, 	$F3, $F4, $F1, $89, 	$7F, $7F, $18, $00
000F9D85                            	smpsVcAlgorithm     $04
000F9D85                            	smpsVcFeedback      $01
000F9D85                            	smpsVcUnusedBits    $00
000F9D85                            	smpsVcDetune        $07, $02, $07, $02
000F9D85                            	smpsVcCoarseFreq    $01, $0A, $00, $0A
000F9D85                            	smpsVcRateScale     $00, $00, $00, $00
000F9D85                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F9D85                            	smpsVcAmpMod        $00, $00, $00, $00
000F9D85                            	smpsVcDecayRate1    $0C, $11, $04, $0D
000F9D85                            	smpsVcDecayRate2    $01, $00, $00, $00
000F9D85                            	smpsVcDecayLevel    $08, $0F, $0F, $0F
000F9D85                            	smpsVcReleaseRate   $09, $01, $04, $03
000F9D85 0C2A 702A 711F 1F1F 1F0D+  	smpsVcTotalLevel    $00, $18, $7F, $7F
000F9D9E                            
000F9D9E                            ;	Voice $01
000F9D9E                            ;	$38
000F9D9E                            ;	$54, $17, $70, $30, 	$9F, $1F, $9F, $1F, 	$12, $02, $0A, $0A
000F9D9E                            ;	$00, $10, $00, $00, 	$05, $05, $05, $08, 	$21, $35, $10, $00
000F9D9E                            	smpsVcAlgorithm     $00
000F9D9E                            	smpsVcFeedback      $07
000F9D9E                            	smpsVcUnusedBits    $00
000F9D9E                            	smpsVcDetune        $03, $07, $01, $05
000F9D9E                            	smpsVcCoarseFreq    $00, $00, $07, $04
000F9D9E                            	smpsVcRateScale     $00, $02, $00, $02
000F9D9E                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000F9D9E                            	smpsVcAmpMod        $00, $00, $00, $00
000F9D9E                            	smpsVcDecayRate1    $0A, $0A, $02, $12
000F9D9E                            	smpsVcDecayRate2    $00, $00, $10, $00
000F9D9E                            	smpsVcDecayLevel    $00, $00, $00, $00
000F9D9E                            	smpsVcReleaseRate   $08, $05, $05, $05
000F9D9E 3854 1770 309F 1F9F 1F12+  	smpsVcTotalLevel    $00, $10, $35, $21
000F9DB7                            
000F9DB7                            ;	Voice $02
000F9DB7                            ;	$00
000F9DB7                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000F9DB7                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000F9DB7                            	smpsVcAlgorithm     $00
000F9DB7                            	smpsVcFeedback      $00
000F9DB7                            	smpsVcUnusedBits    $00
000F9DB7                            	smpsVcDetune        $00, $00, $00, $00
000F9DB7                            	smpsVcCoarseFreq    $00, $00, $00, $00
000F9DB7                            	smpsVcRateScale     $00, $00, $00, $00
000F9DB7                            	smpsVcAttackRate    $00, $00, $00, $00
000F9DB7                            	smpsVcAmpMod        $00, $00, $00, $00
000F9DB7                            	smpsVcDecayRate1    $00, $00, $00, $00
000F9DB7                            	smpsVcDecayRate2    $00, $00, $00, $00
000F9DB7                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000F9DB7                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000F9DB7 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000F9DD0                            
000F9DD0                            ;	Voice $03
000F9DD0                            ;	$36
000F9DD0                            ;	$0F, $0F, $08, $09, 	$16, $18, $00, $1F, 	$0F, $16, $0C, $0B
000F9DD0                            ;	$00, $12, $00, $00, 	$06, $2F, $4F, $4F, 	$00, $00, $65, $53
000F9DD0                            	smpsVcAlgorithm     $06
000F9DD0                            	smpsVcFeedback      $06
000F9DD0                            	smpsVcUnusedBits    $00
000F9DD0                            	smpsVcDetune        $00, $00, $00, $00
000F9DD0                            	smpsVcCoarseFreq    $09, $08, $0F, $0F
000F9DD0                            	smpsVcRateScale     $00, $00, $00, $00
000F9DD0                            	smpsVcAttackRate    $1F, $00, $18, $16
000F9DD0                            	smpsVcAmpMod        $00, $00, $00, $00
000F9DD0                            	smpsVcDecayRate1    $0B, $0C, $16, $0F
000F9DD0                            	smpsVcDecayRate2    $00, $00, $12, $00
000F9DD0                            	smpsVcDecayLevel    $04, $04, $02, $00
000F9DD0                            	smpsVcReleaseRate   $0F, $0F, $0F, $06
000F9DD0 360F 0F08 0916 1800 1F0F+  	smpsVcTotalLevel    $53, $65, $00, $00
000F9DE9                            
000F9DE9                            ;	Voice $04
000F9DE9                            ;	$07
000F9DE9                            ;	$05, $53, $64, $75, 	$5C, $5C, $5C, $1C, 	$17, $17, $17, $17
000F9DE9                            ;	$00, $00, $00, $00, 	$26, $26, $26, $26, 	$00, $00, $00, $00
000F9DE9                            	smpsVcAlgorithm     $07
000F9DE9                            	smpsVcFeedback      $00
000F9DE9                            	smpsVcUnusedBits    $00
000F9DE9                            	smpsVcDetune        $07, $06, $05, $00
000F9DE9                            	smpsVcCoarseFreq    $05, $04, $03, $05
000F9DE9                            	smpsVcRateScale     $00, $01, $01, $01
000F9DE9                            	smpsVcAttackRate    $1C, $1C, $1C, $1C
000F9DE9                            	smpsVcAmpMod        $00, $00, $00, $00
000F9DE9                            	smpsVcDecayRate1    $17, $17, $17, $17
000F9DE9                            	smpsVcDecayRate2    $00, $00, $00, $00
000F9DE9                            	smpsVcDecayLevel    $02, $02, $02, $02
000F9DE9                            	smpsVcReleaseRate   $06, $06, $06, $06
000F9DE9 0705 5364 755C 5C5C 1C17+  	smpsVcTotalLevel    $00, $00, $00, $00
000F9E02                            
000F9E02                            ;	Voice $05
000F9E02                            ;	$3C
000F9E02                            ;	$21, $21, $63, $61, 	$13, $10, $14, $0E, 	$09, $0B, $0B, $10
000F9E02                            ;	$04, $04, $04, $04, 	$17, $17, $17, $27, 	$1C, $02, $1B, $00
000F9E02                            	smpsVcAlgorithm     $04
000F9E02                            	smpsVcFeedback      $07
000F9E02                            	smpsVcUnusedBits    $00
000F9E02                            	smpsVcDetune        $06, $06, $02, $02
000F9E02                            	smpsVcCoarseFreq    $01, $03, $01, $01
000F9E02                            	smpsVcRateScale     $00, $00, $00, $00
000F9E02                            	smpsVcAttackRate    $0E, $14, $10, $13
000F9E02                            	smpsVcAmpMod        $00, $00, $00, $00
000F9E02                            	smpsVcDecayRate1    $10, $0B, $0B, $09
000F9E02                            	smpsVcDecayRate2    $04, $04, $04, $04
000F9E02                            	smpsVcDecayLevel    $02, $01, $01, $01
000F9E02                            	smpsVcReleaseRate   $07, $07, $07, $07
000F9E02 3C21 2163 6113 1014 0E09+  	smpsVcTotalLevel    $00, $1B, $02, $1C
000F9E1B                            
000F9E1B                            
000F9E1C 00                         		even
000F9E1C                            ; ---------------------------------------------------------------------------
000F9E1C                            ; Sound	effect pointers
000F9E1C                            ; ---------------------------------------------------------------------------
000F9E1C 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
000F9E28 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
000F9E34 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
000F9E40 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
000F9E4C 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
000F9E58 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
000F9E64 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
000F9E70 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
000F9E7C 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
000F9E88 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
000F9E94 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
000F9EA0 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
000F9EAC 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
000F9EB8 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
000F9EC4 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
000F9ED0 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
000F9EDC 0000 0000                  SoundD0Index:	dc.l SoundD0
000F9EE0 0000 0000 0000 0000        		dc.l SoundD1, SoundD2
000F9EE8                            SoundA0:	include	sound\jump.asm
000F9EE8                            SndA0_Jump_Header:
000F9EE8 =00000001                  smpsHeaderStartSong = 1
000F9EE8 0000                       	smpsHeaderVoice     SndA0_Jump_Voices
000F9EEA 01                         	smpsHeaderTempoSFX  $01
000F9EEB 01                         	smpsHeaderChanSFX   $01
000F9EEC                            
000F9EF2                            
000F9EF2                            ; PSG1 Data
000F9EF2                            SndA0_Jump_PSG1:
000F9EF2 F500                       	smpsPSGvoice        $00
000F9EF4 A201                       	dc.b	nA2, $01
000F9EF6 F002 01F8 65               	smpsModSet          $02, $01, $F8, $65
000F9EFB 9C15                       	dc.b	nEb2, $15
000F9EFD F2                         	smpsStop
000F9EFE                            
000F9EFE                            ; Song seems to not use any FM voices
000F9EFE                            SndA0_Jump_Voices:
000F9EFE                            SndA0_Jump_Voices:
000F9EFE                            		even
000F9EFE                            SoundA1:	incbin	sound\soundA1.bin
000F9F28                            		even
000F9F28                            SoundA2:	incbin	sound\soundA2.bin
000F9F48                            		even
000F9F48                            SoundA3:	incbin	sound\soundA3.bin
000F9F7A                            		even
000F9F7A                            SoundA4:	incbin	sound\soundA4.bin
000F9FB0                            		even
000F9FB0                            SoundA5:	include	sound\fart.asm
000F9FB0                            Fart_Header:
000F9FB0 =00000001                  smpsHeaderStartSong = 1
000F9FB0 0000                       	smpsHeaderVoice     Fart_Voices
000F9FB2 01                         	smpsHeaderTempoSFX  $01
000F9FB3 04                         	smpsHeaderChanSFX   $04
000F9FB4                            
000F9FCC                            
000F9FCC                            Fart_FM3:
000F9FCE E607                       	smpsAlterVol        $07
000F9FD0 E0C0                       	smpsPan             panCenter, $00
000F9FD2 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000F9FD7 A003 E7                    	dc.b	nG2, $03, smpsNoAttack
000F9FDA E1FE                       	smpsAlterNote       $FE
000F9FDC A201 E7                    	dc.b	nA2, $01, smpsNoAttack
000F9FDF E100                       	smpsAlterNote       $00
000F9FE1 A211 807F 2C               	dc.b	nA2, $11, nRst, $7F, $2C
000F9FE6 F2                         	smpsStop
000F9FE7                            
000F9FE7                            ; FM4 Data
000F9FE7                            Fart_FM4:
000F9FE9 E0C0                       	smpsPan             panCenter, $00
000F9FEB 8006                       	dc.b	nRst, $06
000F9FEF E616                       	smpsAlterVol        $16
000F9FF1 E080                       	smpsPan             panLeft, $00
000F9FF3 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000F9FF8 A212                       	dc.b	nA2, $12
000F9FFA E60A                       	smpsAlterVol        $0A
000F9FFC E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000F9FFF E603                       	smpsAlterVol        $03
000FA001 E7A2                       	dc.b	smpsNoAttack, nA2
000FA003 E603                       	smpsAlterVol        $03
000FA005 E7A2                       	dc.b	smpsNoAttack, nA2
000FA007 E604                       	smpsAlterVol        $04
000FA009 E7A2                       	dc.b	smpsNoAttack, nA2
000FA00B E606                       	smpsAlterVol        $06
000FA00D E7A2 18                    	dc.b	smpsNoAttack, nA2, $18
000FA010 E610                       	smpsAlterVol        $10
000FA012 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000FA015 E610                       	smpsAlterVol        $10
000FA017 E7A2 1280 42               	dc.b	smpsNoAttack, nA2, $12, nRst, $42
000FA01C F2                         	smpsStop
000FA01D                            
000FA01D                            ; FM5 Data
000FA01D                            Fart_FM5:
000FA01F E0C0                       	smpsPan             panCenter, $00
000FA021 8009                       	dc.b	nRst, $09
000FA025 E616                       	smpsAlterVol        $16
000FA027 E040                       	smpsPan             panRight, $00
000FA029 F000 0210 03               	smpsModSet          $00, $02, $10, $03
000FA02E A215                       	dc.b	nA2, $15
000FA030 E60A                       	smpsAlterVol        $0A
000FA032 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000FA035 E603                       	smpsAlterVol        $03
000FA037 E7A2                       	dc.b	smpsNoAttack, nA2
000FA039 E603                       	smpsAlterVol        $03
000FA03B E7A2                       	dc.b	smpsNoAttack, nA2
000FA03D E604                       	smpsAlterVol        $04
000FA03F E7A2                       	dc.b	smpsNoAttack, nA2
000FA041 E606                       	smpsAlterVol        $06
000FA043 E7A2 15                    	dc.b	smpsNoAttack, nA2, $15
000FA046 E610                       	smpsAlterVol        $10
000FA048 E7A2 0C                    	dc.b	smpsNoAttack, nA2, $0C
000FA04B E610                       	smpsAlterVol        $10
000FA04D E7A2 1280 3F               	dc.b	smpsNoAttack, nA2, $12, nRst, $3F
000FA052 F2                         	smpsStop
000FA053                            
000FA053                            ; PSG3 Data
000FA053                            Fart_PSG3:
000FA053 F2                         	smpsStop
000FA054                            
000FA054                            ; FM Voices
000FA054                            Fart_Voices:
000FA054                            ;	Voice $00
000FA054                            ;	$39
000FA054                            ;	$70, $32, $71, $01, 	$DF, $DF, $DF, $1F, 	$04, $00, $00, $00
000FA054                            ;	$1F, $16, $00, $00, 	$E0, $00, $09, $FA, 	$12, $00, $00, $00
000FA054                            	smpsVcAlgorithm     $01
000FA054                            	smpsVcFeedback      $07
000FA054                            	smpsVcUnusedBits    $00
000FA054                            	smpsVcDetune        $00, $07, $03, $07
000FA054                            	smpsVcCoarseFreq    $01, $01, $02, $00
000FA054                            	smpsVcRateScale     $00, $03, $03, $03
000FA054                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000FA054                            	smpsVcAmpMod        $00, $00, $00, $00
000FA054                            	smpsVcDecayRate1    $00, $00, $00, $04
000FA054                            	smpsVcDecayRate2    $00, $00, $16, $1F
000FA054                            	smpsVcDecayLevel    $0F, $00, $00, $0E
000FA054                            	smpsVcReleaseRate   $0A, $09, $00, $00
000FA054 3970 3271 01DF DFDF 1F04+  	smpsVcTotalLevel    $00, $00, $00, $12
000FA06D                            
000FA06D                            ;	Voice $01
000FA06D                            ;	$00
000FA06D                            ;	$00, $00, $00, $00, 	$00, $00, $00, $00, 	$00, $00, $00, $00
000FA06D                            ;	$00, $00, $00, $00, 	$FF, $FF, $FF, $FF, 	$00, $00, $00, $00
000FA06D                            	smpsVcAlgorithm     $00
000FA06D                            	smpsVcFeedback      $00
000FA06D                            	smpsVcUnusedBits    $00
000FA06D                            	smpsVcDetune        $00, $00, $00, $00
000FA06D                            	smpsVcCoarseFreq    $00, $00, $00, $00
000FA06D                            	smpsVcRateScale     $00, $00, $00, $00
000FA06D                            	smpsVcAttackRate    $00, $00, $00, $00
000FA06D                            	smpsVcAmpMod        $00, $00, $00, $00
000FA06D                            	smpsVcDecayRate1    $00, $00, $00, $00
000FA06D                            	smpsVcDecayRate2    $00, $00, $00, $00
000FA06D                            	smpsVcDecayLevel    $0F, $0F, $0F, $0F
000FA06D                            	smpsVcReleaseRate   $0F, $0F, $0F, $0F
000FA06D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000FA06D 0000 0000 0000 0000 0000+  	smpsVcTotalLevel    $00, $00, $00, $00
000FA086                            		even
000FA086                            SoundA6:	incbin	sound\soundA6.bin
000FA0B6                            		even
000FA0B6                            SoundA7:	incbin	sound\soundA7.bin
000FA0E6                            		even
000FA0E6                            SoundA8:	incbin	sound\soundA8.bin
000FA11A                            		even
000FA11A                            SoundA9:	incbin	sound\soundA9.bin
000FA12C                            		even
000FA12C                            SoundAA:	incbin	sound\soundAA.bin
000FA16E                            		even
000FA16E                            SoundAB:	incbin	sound\soundAB.bin
000FA18E                            		even
000FA18E                            SoundAC:	incbin	sound\soundAC.bin
000FA1C2                            		even
000FA1C2                            SoundAD:	incbin	sound\soundAD.bin
000FA1F8                            		even
000FA1F8                            SoundAE:	incbin	sound\soundAE.bin
000FA242                            		even
000FA242                            SoundAF:	incbin	sound\soundAF.bin
000FA270                            		even
000FA270                            SoundB0:	incbin	sound\soundB0.bin
000FA2A2                            		even
000FA2A2                            SoundB1:	incbin	sound\soundB1.bin
000FA2CE                            		even
000FA2CE                            SoundB2:	incbin	sound\soundB2.bin
000FA31E                            		even
000FA31E                            SoundB3:	incbin	sound\soundB3.bin
000FA368                            		even
000FA368                            SoundB4:	include	sound\soundB4.asm
000FA368                            SndB4_Bumper_Header:
000FA368 =00000001                  smpsHeaderStartSong = 1
000FA368 0000                       	smpsHeaderVoice     SndB4_Bumper_Voices
000FA36A 01                         	smpsHeaderTempoSFX  $01
000FA36B 03                         	smpsHeaderChanSFX   $03
000FA36C                            
000FA37E                            
000FA37E                            ; FM5 Data
000FA37E                            SndB4_Bumper_FM5:
000FA380 F600 00                    	smpsJump            SndB4_Bumper_Jump00
000FA383                            
000FA383                            ; FM4 Data
000FA383                            SndB4_Bumper_FM4:
000FA383 F2                         	smpsStop
000FA384                            
000FA384                            SndB4_Bumper_Jump00:
000FA384 A020                       	dc.b	nG2, $20
000FA386 F2                         	smpsStop
000FA387                            
000FA387                            ; FM3 Data
000FA387                            SndB4_Bumper_FM3:
000FA387 F2                         	smpsStop
000FA388                            
000FA388                            SndB4_Bumper_Voices:
000FA388                            ;	Voice $00
000FA388                            ;	$32
000FA388                            ;	$04, $20, $70, $70, 	$1F, $1F, $1F, $1F, 	$09, $00, $00, $08
000FA388                            ;	$09, $00, $00, $0B, 	$00, $00, $00, $0F, 	$0C, $00, $30, $00
000FA388                            	smpsVcAlgorithm     $02
000FA388                            	smpsVcFeedback      $06
000FA388                            	smpsVcUnusedBits    $00
000FA388                            	smpsVcDetune        $07, $07, $02, $00
000FA388                            	smpsVcCoarseFreq    $00, $00, $00, $04
000FA388                            	smpsVcRateScale     $00, $00, $00, $00
000FA388                            	smpsVcAttackRate    $1F, $1F, $1F, $1F
000FA388                            	smpsVcAmpMod        $00, $00, $00, $00
000FA388                            	smpsVcDecayRate1    $08, $00, $00, $09
000FA388                            	smpsVcDecayRate2    $0B, $00, $00, $09
000FA388                            	smpsVcDecayLevel    $00, $00, $00, $00
000FA388                            	smpsVcReleaseRate   $0F, $00, $00, $00
000FA388 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000FA388 3204 2070 701F 1F1F 1F09+  	smpsVcTotalLevel    $00, $30, $00, $0C
000FA3A2 00                         		even
000FA3A2                            SoundB5:	incbin	sound\soundB5.bin
000FA3C0 00                         		even
000FA3C0                            SoundB6:	incbin	sound\soundB6.bin
000FA3DE                            		even
000FA3DE                            SoundB7:	incbin	sound\soundB7.bin
000FA41A                            		even
000FA41A                            SoundB8:	incbin	sound\soundB8.bin
000FA438                            		even
000FA438                            SoundB9:	incbin	sound\soundB9.bin
000FA49C                            		even
000FA49C                            SoundBA:	incbin	sound\soundBA.bin
000FA500                            		even
000FA500                            SoundBB:	incbin	sound\soundBB.bin
000FA52C                            		even
000FA52C                            SoundBC:	incbin	sound\soundBC.bin
000FA56E                            		even
000FA56E                            SoundBD:	incbin	sound\soundBD.bin
000FA5C2                            		even
000FA5C2                            SoundBE:	incbin	sound\soundBE.bin
000FA5FC                            		even
000FA5FC                            SoundBF:	incbin	sound\soundBF.bin
000FA66E                            		even
000FA66E                            SoundC0:	incbin	sound\soundC0.bin
000FA69C                            		even
000FA69C                            SoundC1:	incbin	sound\soundC1.bin
000FA6F6                            		even
000FA6F6                            SoundC2:	incbin	sound\soundC2.bin
000FA720                            		even
000FA720                            SoundC3:	incbin	sound\soundC3.bin
000FA79A                            		even
000FA79A                            SoundC4:	incbin	sound\soundC4.bin
000FA898                            		even
000FA898                            SoundC5:	incbin	sound\soundC5.bin
000FA900                            		even
000FA900                            SoundC6:	incbin	sound\soundC6.bin
000FA942                            		even
000FA942                            SoundC7:	incbin	sound\soundC7.bin
000FA970                            		even
000FA970                            SoundC8:	incbin	sound\soundC8.bin
000FA982                            		even
000FA982                            SoundC9:	incbin	sound\soundC9.bin
000FA9B0                            		even
000FA9B0                            SoundCA:	incbin	sound\soundCA.bin
000FA9DE                            		even
000FA9DE                            SoundCB:	incbin	sound\soundCB.bin
000FAA2A                            		even
000FAA2A                            SoundCC:	incbin	sound\C9.ssf
000FAA58                            		even
000FAA58                            SoundCD:	incbin	sound\soundCD.bin
000FAA84                            		even
000FAA84                            SoundCE:	incbin	sound\soundCE.bin
000FAAA2 00                         		even
000FAAA2                            SoundCF:	incbin	sound\soundCF.bin
000FAADA                            		even
000FAADA                            SoundD0:	incbin	sound\soundD0.bin
000FAB14                            		even
000FAB14                            SoundD1:	incbin	sound\MenuBIT.bin
000FAB22                            		even
000FAB22                            SoundD2:	incbin	sound\MenuAffirm.bin
000FAB8A 00                         		even
000FAB8A                            
000FAB8A                            IdiotPCM:	incbin	sound\youare.bin
00104C5B                            IdiotPCM_end:
00104C5C 00                         	even
00104C5C                            GM_AntiTMSS:	include _inc\GM_AntiTMSS.asm
00104C5C                            ;GM_AntiTMSS:
00104C5C 4EB8 1B9A                  		jsr	ClearScreen
00104C60                            
00104C60 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00104C6A 41FA 0000                  		lea	@nem(pc),a0		; load Gomer patterns
00104C6E 4EB8 1D18                  		jsr	NemDec
00104C72 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00104C7C 41F9 0006 F578             		lea	(Nem_CreditText).l,a0	; load alphabet
00104C82 4EB8 1D18                  		jsr	NemDec
00104C86 43F9 00FF 0000             		lea	($FF0000).l,a1
00104C8C 41FA 0000                  		lea	@eni(pc),a0		; load mappings for Gomer credits
00104C90 7000                       		moveq	#0,d0
00104C92 4EB8 1FF6                  		jsr	EniDec
00104C96 43F9 00FF 0000             		lea	($FF0000).l,a1
00104C9C 203C 4000 0003             		move.l	#$40000003,d0
00104CA2 7227                       		moveq	#$27,d1
00104CA4 741B                       		moveq	#$1B,d2
00104CA6 4EB8 1CF8                  		jsr	ShowVDPGraphics
00104CAA 41FA 0000                  		lea	@pal(pc),a0
00104CAE 43F8 FB80                  		lea	($FFFFFB80).w,a1
00104CB2 701F                       		moveq	#$1F,d0
00104CB4                            @palset:
00104CB4 22D8                       		move.l	(a0)+,(a1)+
00104CB6 51C8 FFFC                  		dbf	d0,@palset
00104CBA                            
00104CBA 33FC 8C8B 00C0 0004        		move.w	#$8C8B,($C00004).l	; S/H mode, single res interlace
00104CC2 1E38 F600                  		move.b	($FFFFF600).w,d7	; save game mode
00104CC6 11FC 0000 F600             		move.b	#0,($FFFFF600).w	; make sure it's not using title screen code
00104CCC 31FC 000B FFF4             		move.w	#$B,($FFFFFFF4).w	; set frame
00104CD2 41F8 D080                  		lea	($FFFFD080).w,a0
00104CD6 10BC 0001                  		move.b	#1,(a0)
00104CDA 4EB9 0001 849A             		jsr	Obj8A
00104CE0 11C7 F600                  		move.b	d7,($FFFFF600).w	; restore game mode
00104CE4 0068 E000 0002             		or.w	#$E000,2(a0)		; S/H brightness, palette 4
00104CEA 4EB9 0000 E79C             		jsr	BuildSprites
00104CF0                            
00104CF0 3038 F60C                  		move.w	($FFFFF60C).w,d0
00104CF4 0000 0040                  		ori.b	#$40,d0
00104CF8 0880 0003                  		bclr	#3,d0
00104CFC 33C0 00C0 0004             		move.w	d0,($C00004).l
00104D02 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w	; SMPS needs a frame to init
00104D08 4EB8 33E4                  		jsr	DelayProgram
00104D0C 303C 0086                  		move.w	#$86,d0			; play title screen music
00104D10 4EB8 1C6E                  		jsr	PlaySound
00104D14                            
00104D14 4EB8 2654                  		jsr	Pal_FadeTo
00104D18 31FC 00B4 F614             		move.w	#180,($FFFFF614).w
00104D1E                            @mainloop:
00104D1E 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00104D24 4EB8 33E4                  		jsr	DelayProgram
00104D28 4A78 F614                  		tst.w	($FFFFF614).w		; if timer isn't up, loop
00104D2C 66F0                       		bne.s	@mainloop
00104D2E 303C 0080                  		move.w	#$80,d0			; if player is holding start, exit
00104D32 C038 F604                  		and.b	($FFFFF604).w,d0
00104D36 67E6                       		beq.s	@mainloop
00104D38 4E75                       		rts
00104D3A                            @nem:	incbin artnem\tmss.bin
001068CA                            	even
001068CA                            @eni:	incbin mapeni\tmss.bin
001069D2                            	even
001069D2                            @pal:	incbin pallet\tmss.bin
00106A52                            	even
00106A52                            	even
00106A52                            
00106A52                            Minecraft:	include	minecraft\code\main.asm
00106A52                            ; Minecraft: Very Legacy Console Edition
00106A52                            ; Main file
00106A52                            
00106A52                            ;	align	$20000
00106A52                            	opt	l.
00106A52                            	include	"minecraft\code\variables.asm"
00106A52                            ; Minecraft: Very Legacy Console Edition
00106A52                            ; Variable Definitions
00106A52                            
00106A52 =00000040                  MAP_HEIGHT	equ	64
00106A52 =00000100                  MAP_WIDTH	equ	256
00106A52                            
00106A52                            		rsset	$FF0000
00106A52 =00FF0000                  mcRAM		rs.b	0
00106A52 =00FF0000                  mapCollBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; collision layer layout data
00106A52 =00FF4000                  mapWallBlocks	rs.b	MAP_HEIGHT*MAP_WIDTH	; wall layer layout data
00106A52                            
00106A52                            		rsset	$FFFF8000
00106A52 =FFFF8000                  planeBuffer	rs.w	29*64			; foreground plane buffer
00106A52 =FFFF8E80                  planeBuffer_End	rs.b	0
00106A52 =00000E80                  PLANE_BUFF_SIZE	equ	planeBuffer_End-planeBuffer
00106A52                            
00106A52 =FFFF8E80                  scrollBuffer	rs.l	256
00106A52                            
00106A52 =FFFF9280                  camXPosFG	rs.w	1			; camera foreground layout x position
00106A52 =FFFF9282                  camYposFG	rs.w	1			; camera foreground layout y position
00106A52 =FFFF9284                  camXPosBG	rs.w	1			; camera background layout x position
00106A52 =FFFF9286                  camYposBG	rs.w	1			; camera background layout y position
00106A52                            
00106A52 =FFFF9288                  vblankWait	rs.w	1
00106A52 =FFFF928A                  cloudFrameCnt	rs.w	1
00106A52 =FFFF928C                  cloudSkew	rs.l	36
00106A52                            
00106A52                            
00106A52                            		rsset	__rs&$FFFFFF
00106A52 =00FF931C                  mcRAM_End	rs.b	0
00106A52                            
00106A52                            ; VRAM Definitions
00106A52 =00000020                  TILE		equ	32			; number of bytes a single tile occupies in VRAM
00106A52                            
00106A52                            		rsreset
00106A52 =00000000                  vramEmptyTile	rs.b	TILE
00106A52 =00000020                  vramTerrain	rs.b	255*TILE
00106A52 =00002000                  vramBackground	rs.b	408*TILE
00106A52                            
00106A52 =0000C000                  VRAM_PLANE_A	equ	$C000
00106A52 =0000D000                  VRAM_PLANE_W	equ	$D000
00106A52 =0000E000                  VRAM_PLANE_B	equ	$E000
00106A52                            
00106A52 =0000F800                  VRAM_SPR_LIST	equ	$F800
00106A52 =0000FC00                  VRAM_HSCROLL	equ	$FC00
00106A52 =0000FC00                  VRAM_HSCROLL	equ	$FC00
00106A52                            	include	"minecraft\code\macros.asm"
00106A52                            ; =========================================================================================================================================================
00106A52                            ; MegaDrive macros
00106A52                            ; =========================================================================================================================================================
00106A52                            clrRAM		macro	starta, enda
00106A52                            		local	endaddr
00106A52                            		if narg<2
00106A52                            endaddr			EQUS	"\starta\_End"
00106A52                            		else
00106A52                            endaddr			EQUS	"\enda"
00106A52                            		endif
00106A52                            		moveq	#0,d0
00106A52                            		if ((\starta)&$8000)=0
00106A52                            			lea	\starta,a1
00106A52                            		else
00106A52                            			lea	(\starta).w,a1
00106A52                            		endif
00106A52                            		if (\starta)&1
00106A52                            			move.b	d0,(a1)+
00106A52                            		endif
00106A52                            		move.w	#(((\endaddr)-(\starta))-((\starta)&1))>>2-1,d1
00106A52                            .Clear\@:	move.l	d0,(a1)+
00106A52                            		dbf	d1,.Clear\@
00106A52                            		if (((\endaddr)-(\starta))-((\starta)&1))&2
00106A52                            			move.w	d0,(a1)+
00106A52                            		endif
00106A52                            		if (((\endaddr)-(\starta))-((\starta)&1))&1
00106A52                            			move.b	d0,(a1)+
00106A52                            		endif
00106A52                            		endm
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; Disable interrupts
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; ARGUMENTS:
00106A52                            ;	Nothing
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; RETURNS:
00106A52                            ;	Nothing
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            intsOff		macros
00106A52                            		ori	#$700,sr
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; Enable interrupts
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; ARGUMENTS:
00106A52                            ;	Nothing
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; RETURNS:
00106A52                            ;	Nothing
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            intsOn		macros
00106A52                            		andi	#$F8FF,sr
00106A52                            
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; VDP command instruction
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; ARGUMENTS:
00106A52                            ;	addr	- Address in VDP memory
00106A52                            ;	type	- Type of VDP memory
00106A52                            ;	rwd	- VDP command
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; RETURNS:
00106A52                            ;	Nothing
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52 =00000021                  VRAM		EQU	%100001		; VRAM
00106A52 =0000002B                  CRAM		EQU	%101011		; CRAM
00106A52 =00000025                  VSRAM		EQU	%100101		; VSRAM
00106A52 =0000000C                  READ		EQU	%001100		; VDP read
00106A52 =00000007                  WRITE		EQU	%000111		; VDP write
00106A52 =00000027                  DMA		EQU	%100111		; VDP DMA
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            vdpCmd		macro	ins, addr, type, rwd, end, end2
00106A52                            		if narg=5
00106A52                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14)), \end
00106A52                            		elseif narg>=6
00106A52                            			\ins	#((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))\end, \end2
00106A52                            		else
00106A52                            			\ins	((((\type&\rwd)&3)<<30)|((\addr&$3FFF)<<16)|(((\type&\rwd)&$FC)<<2)|((\addr&$C000)>>14))
00106A52                            		endif
00106A52                            		endm
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; VDP DMA from 68000 memory to VDP memory
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; ARGUMENTS:
00106A52                            ;	src	- Source address in 68000 memory
00106A52                            ;	dest	- Destination address in VDP memory
00106A52                            ;	len	- Length of data in bytes
00106A52                            ;	type	- Type of VDP memory
00106A52                            ;	a6.l	- VDP control port
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; RETURNS:
00106A52                            ;	Nothing
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            dma68k		macro	src, dest, len, type
00106A52                            		move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(a6)
00106A52                            		move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(a6)
00106A52                            		move.w	#$9700|(((\src)>>17)&$7F),(a6)
00106A52                            		vdpCmd	move.w, \dest, \type, DMA, >>16, (a6)
00106A52                            		vdpCmd	move.w, \dest, \type, DMA, &$FFFF, -(sp)
00106A52                            		move.w	(sp)+,(a6)
00106A52                            		endm
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            ; ---------------------------------------------------------------------------------------------------------------------------------------------------------
00106A52                            
00106A52                            MC_Init:
00106A52 007C 0700                  		intsOff						; disable CPU interrupts
00106A56 21FC 0000 0000 FFC6        		move.l	#MC_VInt,(vBlankAdress).w
00106A5E                            
00106A5E 4DF9 00C0 0004             		lea	($C00004).l,a6				; load the address of the VDP control port into a6
00106A64 3CBC 8134                  		move.w	#$8134,(a6)				; disable display
00106A68                            
00106A68 3CBC 8230                  		move.w	#$8200+(VRAM_PLANE_A>>10),(a6)		; set plane A address
00106A6C 3CBC 8334                  		move.w	#$8300+(VRAM_PLANE_W>>10),(a6)		; set plane W address
00106A70 3CBC 8407                  		move.w	#$8400+(VRAM_PLANE_B>>13),(a6)		; set plane B address
00106A74 3CBC 857C                  		move.w	#$8500+(VRAM_SPR_LIST>>9),(a6)		; set sprite table address
00106A78                            		
00106A78 3CBC 8B03                  		move.w	#$8B03,(a6)				; EXT-INT off, VScroll by screen, HScroll by line
00106A7C 3CBC 8D3F                  		move.w	#$8D00+(VRAM_HSCROLL>>10),(a6)		; set HScroll table address
00106A80 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
00106A84 3CBC 9001                  		move.w	#$9001,(a6)				; set plane size 64x32
00106A88                            
00106A9A 6100 0000                  		bsr.w	MC_ClearScreen				; clear VRAM, CRAM, and VSRAM
00106A9E                            
00106A9E                            .waitVBlank:	
00106A9E 44D6                       		move.w	(a6),ccr				; is v-blank active?
00106AA0 6AFC                       		bpl.s	.waitVBlank				; if not, wait for it to start
00106AA2                            
00106AD6 6100 0000                  		bsr.w	MC_LoadBackground
00106ADA 6100 0000                  		bsr.w	MC_LoadWorld
00106ADE                            
00106ADE 3CBC 8C89                  		move.w	#$8C89,(a6)				; set screen size and enable shadow/highlight mode
00106AE2 3CBC 8174                  		move.w	#$8174,(a6)				; enable display
00106AE6 027C F8FF                  		intsOn						; enable CPU interrupts
00106AEA                            
00106AEA 4278 928A                  		clr.w	(cloudFrameCnt).w		
00106AEE                            
00106AEE                            .gameLoop:
00106AEE 50F8 9288                  		st.b	(vblankWait).w
00106AF2 6100 0000                  		bsr.w	MC_UpdateScrollBuffer
00106AF6 6100                       		bsr.s	MC_RenderBlocks
00106AF8                            
00106AF8                            .spin:
00106AF8 4A38 9288                  		tst.b	(vblankWait).w
00106AFC 67F0                       		beq.s	.gameLoop
00106AFE 60F8                       		bra.s	.spin
00106B00                            ; ---------------------------------------------------------------------------
00106B00                            
00106B00                            ; ===========================================================================
00106B00                            ; ---------------------------------------------------------------------------
00106B00                            ; Render the Visible Portion of the World to the Screen
00106B00                            ; ---------------------------------------------------------------------------
00106B00                            MC_RenderBlocks:
00106B00 3038 9280                  		move.w	(camXPosFG).w,d0	; Get the camera's x coordinate
00106B04 E648                       		lsr.w	#3,d0			; Divide by 8 to get the index of the tile within the row
00106B06 0240 00FF                  		andi.w	#$FF,d0			; Cap to a maximum index value of 0xFF
00106B0A                            
00106B0A 3238 9282                  		move.w	(camYPosFG).w,d1	; Get the camera's y coordinate
00106B0E EB49                       		lsl.w	#5,d1			; Make into row offset
00106B10 0241 3F00                  		andi.w	#$3F00,d1		; ^
00106B14                            
00106B14 41F9 00FF 0000             		lea	(mapCollBlocks).l,a0	; Load the world map collision layer into a0
00106B1A 43F9 00FF 0000             		lea	(mapCollBlocks).l,a1	; Load the world map wall layer into a1
00106B20 45F8 8000                  		lea	(planeBuffer).w,a2	; Load the plane A buffer into a2
00106B24 7600                       		moveq	#0,d3			; Clear d3
00106B26 7C1C                       		moveq	#28,d6			; Load the number of rows as the outer loop counter
00106B28                            
00106B28                            .renderScreen:
00106B28 7E28                       		moveq	#40,d7			; Load the number of blocks in each row as the inner loop counter
00106B2A 3401                       		move.w	d1,d2			; Load the offset into the current row into d2
00106B2C 1400                       		move.b	d0,d2			; ^
00106B2E                            
00106B2E                            .renderRow:
00106B2E 1630 2000                  		move.b	(a0,d2.w),d3		; Get the block ID at the current main layout coordinates
00106B32 6700                       		beq.s	.renderWall
00106B34                            
00106B34 383C 8000                  		move.w	#$8000,d4			; Set the priority bit
00106B38 D643                       		add.w	d3,d3				; Turn tile ID into index
00106B3A 887B 3000                  		or.w	.renderProperties(pc,d3.w),d4	; Combine with the tile render properties
00106B3E 34C4                       		move.w	d4,(a2)+			; Load the corresponding tile to the plane A buffer
00106B40                            		
00106B40 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
00106B42 51CF FFEA                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
00106B46 6000                       		bra.s	.endRenderRow		; Branch
00106B48                            
00106B48                            .renderWall:
00106B48 1631 2000                  		move.b	(a1,d2.w),d3				; Get the block ID at the current wall layout coordinates
00106B4C D643                       		add.w	d3,d3					; Turn tile ID into index
00106B4E 34FB 3000                  		move.w	.renderProperties(pc,d3.w),(a2)+	; Load the corresponding tile to the plane A buffer
00106B52                            
00106B52 5202                       		addq.b	#1,d2			; Increment the index with wrap-around within the current row
00106B54 51CF FFD8                  		dbf	d7,.renderRow		; Loop until the entire visible row is rendered
00106B58                            
00106B58                            .endRenderRow:
00106B58 D4FC 002E                  		adda.w	#(64-41)*2,a2		; Skip the rest of the row in the plane buffer
00106B5C 0641 0100                  		add.w	#$100,d1		; Increment to the next row
00106B60 0C41 3F00                  		cmpi.w	#$3F00,d1		; Check to make sure we're still in bounds
00106B64 6200                       		bhi.s	.inBounds		; If so, branch
00106B66 323C 3F00                  		move.w	#$3F00,d1		; If not, render the last row for the rest of the screen (Bedrock)
00106B6A                            
00106B6A                            .inBounds:	
00106B6A 51CE FFBC                  		dbf	d6,.renderScreen	; Loop until the entire screen is rendered
00106B6E 4E75                       		rts
00106B70                            
00106B70                            ; ---------------------------------------------------------------------------
00106B70                            block_entry	macro	tileID, palLine, priority
00106B70                            	if (narg<3)
00106B70                            		dc.w	(palLine<<13)|tileID
00106B70                            	else
00106B70                            		dc.w	$8000|(palLine<<13)|tileID
00106B70                            	endif
00106B70                            		endm
00106B70                            
00106B70                            .renderProperties:
00106BB0                            
00106BCE                            ; ---------------------------------------------------------------------------
00106BCE                            
00106BCE                            ; ===========================================================================
00106BCE                            ; ---------------------------------------------------------------------------
00106BCE                            ; Update Foreground and Background Scrolling
00106BCE                            ; ---------------------------------------------------------------------------
00106BCE =00000500                  CLOUD_SCROLL_RATE	equ	1280
00106BCE                            
00106BCE                            MC_UpdateScrollBuffer:
00106BCE 41F8 8E80                  		lea	(scrollBuffer).w,a0
00106BD2 7E13                       		moveq	#20-1,d7
00106BD4 3038 9280                  		move.w	(camXPosFG).w,d0			; update scrolling
00106BD8 0240 0007                  		andi.w	#7,d0					; ^
00106BDC 4440                       		neg.w	d0					; ^
00106BDE 4840                       		swap	d0					; ^
00106BE0 4240                       		clr.w	d0
00106BE2                            
00106BE2                            .blankBGSegment:
00106BE2 20C0                       		move.l	d0,(a0)+
00106BE4 51CF FFFC                  		dbf	d7,.blankBGSegment
00106BE8                            
00106BE8 43F8 928C                  		lea	(cloudSkew).w,a1
00106BEC 7200                       		moveq	#0,d1
00106BEE 7E23                       		moveq	#36-1,d7
00106BF0                            
00106BF0 5378 928A                  		subq.w	#1,(cloudFrameCnt).w
00106BF4 6A00                       		bpl.s	.cloudBGSegment
00106BF6                            	
00106BF6 31FC 04FF 928A             		move.w	#CLOUD_SCROLL_RATE-1,(cloudFrameCnt).w
00106BFC                            
00106BFC                            .resetClouds:
00106BFC 20C0                       		move.l	d0,(a0)+
00106BFE 4299                       		clr.l	(a1)+
00106C00 51CF FFFA                  		dbf	d7,.resetClouds
00106C04 6000                       		bra.s	.return
00106C06                            
00106C06                            .cloudBGSegment:
00106C06 2411                       		move.l	(a1),d2
00106C08 D4BB 1000                  		add.l	.cloudSkewFactor(pc,d1.w),d2
00106C0C 22C2                       		move.l	d2,(a1)+
00106C0E                            
00106C0E 4842                       		swap	d2
00106C10 3002                       		move.w	d2,d0
00106C12 4440                       		neg.w	d0
00106C14 20C0                       		move.l	d0,(a0)+
00106C16                            		
00106C16 5841                       		addq.w	#4,d1
00106C18 51CF FFEC                  		dbf	d7,.cloudBGSegment
00106C1C                            
00106C1C                            .return:
00106C1C 4E75                       		rts
00106C1E                            ; ---------------------------------------------------------------------------
00106C1E                            .cloudSkewFactor:
00106C1E =00000080                  	.i: = 128
00106C1E                            
00106C1E                            	rept	36
00106C1E                            	dc.l	(.i<<16)/CLOUD_SCROLL_RATE
00106C1E                            	.i: = .i-2
00106C1E 0000 1999 0000 1933 0000+  	endr
00106CAE                            
00106CAE                            ; ===========================================================================
00106CAE                            ; ---------------------------------------------------------------------------
00106CAE                            ; Clear The Screen
00106CAE                            ; ---------------------------------------------------------------------------
00106CAE                            MC_ClearScreen:
00106CAE 3CBC 8F01                  		move.w	#$8F01,(a6)				; set auto-incremement size to byte
00106CB2                            
00106CB2 2CBC 94FF 93FF             		move.l	#$94FF93FF,(a6)				; clear the VRAM
00106CB8 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00106CBC 2CBC 4000 0080             		move.l	#$40000080,(a6)				; ^
00106CC2 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00106CC8                            
00106CC8 44D6                       .waitVRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00106CCA 69FC                       		bvs.s	.waitVRAMClr				; if so, loop until DMA is complete
00106CCC                            
00106CCC 2CBC 9400 937F             		move.l	#$9400937F,(a6)				; clear the CRAM
00106CD2 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00106CD6 2CBC C000 0080             		move.l	#$C0000080,(a6)				; ^
00106CDC 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00106CE2                            
00106CE2 44D6                       .waitCRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00106CE4 69FC                       		bvs.s	.waitCRAMClr				; if so, loop until DMA is complete
00106CE6                            
00106CE6 2CBC 9400 935F             		move.l	#$9400935F,(a6)				; clear the VSRAM
00106CEC 3CBC 9780                  		move.w	#$9780,(a6)				; ^
00106CF0 2CBC 4000 0090             		move.l	#$40000090,(a6)				; ^
00106CF6 3D7C 0000 FFFC             		move.w	#0,-4(a6)				; ^
00106CFC                            
00106CFC 44D6                       .waitVSRAMClr:	move.w	(a6),ccr				; is a DMA in progress?
00106CFE 69FC                       		bvs.s	.waitVSRAMClr				; if so, loop until DMA is complete
00106D00                            
00106D00 3CBC 8F02                  		move.w	#$8F02,(a6)				; set auto-incremement size to word
00106D04 4E75                       		rts						; return
00106D06                            ; ---------------------------------------------------------------------------
00106D06                            
00106D06                            ; ===========================================================================
00106D06                            ; ---------------------------------------------------------------------------
00106D06                            ; Load the Background
00106D06                            ; ---------------------------------------------------------------------------
00106D06                            MC_LoadBackground:
00106D20                            
00106D26 41F9 0000 0000             		lea	MC_BGMap,a0
00106D2C 3E3C 07FF                  		move.w	#(32*64)-1,d7				; Set loop count to plane size - 1
00106D30                            
00106D30                            .loop:
00106D30 3018                       		move.w	(a0)+,d0
00106D32 6700                       		beq.s	.empty
00106D34 0640 0100                  		add.w	#(vramBackground>>5),d0
00106D38 0040 6000                  		ori.w	#(3<<13),d0
00106D3C                            
00106D3C                            .empty:
00106D3C 3D40 FFFC                  		move.w	d0,-4(a6)
00106D40 51CF FFEE                  		dbf	d7,.loop
00106D44 4E75                       		rts						; return
00106D46                            ; ---------------------------------------------------------------------------
00106D46                            
00106D46                            ; ===========================================================================
00106D46                            ; ---------------------------------------------------------------------------
00106D46                            ; Load the World
00106D46                            ; ---------------------------------------------------------------------------
00106D46                            MC_LoadWorld:
00106D46 41F9 0000 0000             		lea	MC_TestMap,a0
00106D4C 43F9 00FF 4000             		lea	mapWallBlocks,a1
00106D52 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
00106D56                            
00106D56                            .loadWalls:
00106D56 22D8                       		move.l	(a0)+,(a1)+
00106D58 51CF FFFC                  		dbf	d7,.loadWalls
00106D5C                            
00106D5C 41F9 0000 0000             		lea	MC_TestMap,a0
00106D62 43F9 00FF 0000             		lea	mapCollBlocks,a1
00106D68 3E3C 0000                  		move.w	#((MC_TestMap_End-MC_TestMap)>>2)-1,d7
00106D6C                            
00106D6C                            .loadBlocks:
00106D6C 22D8                       		move.l	(a0)+,(a1)+
00106D6E 51CF FFFC                  		dbf	d7,.loadBlocks
00106D72 4E75                       		rts						; return
00106D74                            ; ---------------------------------------------------------------------------
00106D74                            
00106D74                            ; ===========================================================================
00106D74                            ; ---------------------------------------------------------------------------
00106D74                            ; VBlank Interrupt
00106D74                            ; ---------------------------------------------------------------------------
00106D74                            MC_VInt:
00106DA8                            
00106DA8                            ;		move.w	(camXPosFG).w,d0			; update scrolling
00106DA8                            ;		andi.w	#7,d0					; ^
00106DA8                            ;		neg.w	d0					; ^
00106DA8                            ;	vdpCmd	move.l, VRAM_HSCROLL, VRAM, WRITE, (a6)		; ^
00106DA8                            ;		move.w	d0,-4(a6)				; ^
00106DA8                            
00106DA8                            ;		addq.w	#1,(camXPosFG).w			
00106DA8 51F8 9288                  		sf.b	(vblankWait).w
00106DAC 4E73                       		rte						; return
00106DAE                            ; ---------------------------------------------------------------------------
00106DAE                            
00106DAE                            ; ---------------------------------------------------------------------------
00106DAE                            MC_Palette:
00106DAE 0E84 08AE 068E 046C 0EE0+  	dc.w	$E84, $8AE, $68E, $46C, $EE0, $CC0, $AA0, $E68, $C46, $824, $444, $222, $000, $EEE, $246, $024
00106DCE 0000 0CCC 0AAA 0888 0666+  	dc.w	$000, $CCC, $AAA, $888, $666, $444, $222, $4E6, $2C4, $0A2, $080, $6AE, $48C, $26A, $048, $026
00106DEE 0000 0EEE 0CCC 0AAA 04CE+  	dc.w	$000, $EEE, $CCC, $AAA, $4CE, $2AC, $08A, $E6C, $C4A, $A08, $44E, $22C, $00A, $EE0, $888, $666
00106E0E 0000 0EEE 0CAA 0A88 0866+  	dc.w	$000, $EEE, $CAA, $A88, $866, $644, $422, $46A, $448, $226, $6C4, $680, $8CE, $6AC, $EA6, $E44
00106E2E                            ; ---------------------------------------------------------------------------
00106E2E                            MC_Terrain:
00106E2E                            	incbin	"minecraft\assets\bin\terrain.bin"
001072AE                            MC_Terrain_End:
001072AE                            	even
001072AE                            ; ---------------------------------------------------------------------------
001072AE                            MC_BGArt:
001072AE                            	incbin	"minecraft\assets\bin\bgArt.bin"
0010A5AE                            MC_BGArt_End:
0010A5AE                            	even
0010A5AE                            ; ---------------------------------------------------------------------------
0010A5AE                            MC_BGMap:
0010A5AE                            	incbin	"minecraft\assets\bin\bgMap.bin"
0010B5AE                            MC_BGMap_End:
0010B5AE                            	even
0010B5AE                            ; ---------------------------------------------------------------------------
0010B5AE                            MC_TestMap:
0010B5AE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 00
0010B6AE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 01
0010B7AE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 02
0010B8AE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 03
0010B9AE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 04
0010BAAE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 05
0010BBAE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 06
0010BCAE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 07
0010BDAE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 09
0010BEAE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0A
0010BFAE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0B
0010C0AE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0C
0010C1AE 0000 0000 0000 0000 0000+  	dcb.b	256,$00	; Row 0E
0010C2AE                            	
0010C2AE                            ;	dcb.b	32,$01	; Row 0F
0010C2AE                            ;	dcb.b	32,$02	; Row 0F
0010C2AE                            ;	dcb.b	32,$03	; Row 0F
0010C2AE                            ;	dcb.b	32,$04	; Row 0F
0010C2AE                            ;	dcb.b	32,$05	; Row 0F
0010C2AE                            ;	dcb.b	32,$06	; Row 0F
0010C2AE                            ;	dcb.b	32,$07	; Row 0F
0010C2AE                            ;	dcb.b	32,$08	; Row 0F
0010C2AE                            
0010C2AE                            ;	dcb.b	256,$03	; Row 10
0010C2AE                            ;	dcb.b	256,$02	; Row 11
0010C2AE                            ;	dcb.b	256,$02	; Row 12
0010C2AE                            ;	dcb.b	256,$02	; Row 13
0010C2AE                            ;	dcb.b	256,$01	; Row 14
0010C2AE                            ;	dcb.b	256,$01	; Row 15
0010C2AE                            ;	dcb.b	256,$01	; Row 16
0010C2AE                            ;	dcb.b	256,$01	; Row 17
0010C2AE                            ;	dcb.b	256,$01	; Row 19
0010C2AE                            ;	dcb.b	256,$01	; Row 1A
0010C2AE                            ;	dcb.b	256,$01	; Row 1B
0010C2AE                            ;	dcb.b	256,$01	; Row 1C
0010C2AE                            ;	dcb.b	256,$01	; Row 1E
0010C2AE                            ;	dcb.b	256,$01	; Row 1F
0010C2AE                            MC_TestMap_End:
0010C2AE                            MC_TestMap_End:
0010C2AE                            		
0010C2AE                            		include beebush\_BEEBUSH.68k
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; I'm Glenn Quagmire, and this is Code Bush.
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                                    include "beebush/Mega Drive.inc"
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; Basic system memory location equates
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE =00000000                  CARTRIDGE       EQU     $0                    
0010C2AE =00080000                  CARTRIDGEE      EQU     $80000
0010C2AE =00080000                  CARTRIDGESZ     EQU     CARTRIDGEE-CARTRIDGE
0010C2AE                            
0010C2AE =00FF0000                  WORKRAM         EQU     $FF0000
0010C2AE =01000000                  WORKRAME        EQU     $1000000
0010C2AE =00010000                  WORKRAMSZ       EQU     WORKRAME-WORKRAM
0010C2AE                            
0010C2AE =00A00000                  Z80RAM          EQU     $A00000
0010C2AE =00A02000                  Z80RAME		EQU	$A02000
0010C2AE =00002000                  Z80RAMSZ	EQU	Z80RAME-Z80RAM
0010C2AE =00A11100                  Z80BUS		EQU	$A11100
0010C2AE =00A11200                  Z80RES	        EQU	$A11200
0010C2AE                            
0010C2AE =00080000                  CARTRAM         EQU     CARTRIDGEE	
0010C2AE                            	
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; System and VDP registers 
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            ; I/O
0010C2AE                            
0010C2AE                            ; Word
0010C2AE =00A10000                  VERSION_	EQU	$A10000		; Hardware version
0010C2AE =00A10002                  IODATA1_	EQU	$A10002		; Pad 1 Data
0010C2AE =00A10004                  IODATA2_	EQU	$A10004         ; Pad 2 Data
0010C2AE =00A10006                  IODATA3_	EQU	$A10006         ; EXT Data
0010C2AE =00A10008                  IOCTRL1_	EQU	$A10008         ; Pad 1 Ctrl
0010C2AE =00A1000A                  IOCTRL2_	EQU	$A1000A         ; Pad 2 Ctrl
0010C2AE =00A1000C                  IOCTRL3_	EQU	$A1000C         ; EXT Ctrl
0010C2AE                            
0010C2AE                            ; Byte
0010C2AE =00A10001                  VERSION         EQU     VERSION_+1
0010C2AE =00A10003                  IODATA1         EQU     IODATA1_+1
0010C2AE =00A10005                  IODATA2         EQU     IODATA2_+1
0010C2AE =00A10007                  IODATA3         EQU     IODATA3_+1
0010C2AE =00A10009                  IOCTRL1         EQU     IOCTRL1_+1
0010C2AE =00A1000B                  IOCTRL2         EQU     IOCTRL2_+1
0010C2AE =00A1000D                  IOCTRL3         EQU     IOCTRL3_+1
0010C2AE                            
0010C2AE                            ; Sound
0010C2AE =00A04000                  YMADDR0		EQU	$A04000		; YM2612 address port 0
0010C2AE =00A04001                  YMDATA0		EQU	$A04001		; YM2612 data port 0
0010C2AE =00A04002                  YMADDR1		EQU	$A04002		; YM2612 address port 1
0010C2AE =00A04003                  YMDATA1		EQU	$A04003		; YM2612 data port 1
0010C2AE =00C00011                  PSGCTRL		EQU	$C00011		; PSG control port
0010C2AE                            
0010C2AE                            ; VDP
0010C2AE =00C00000                  VDPDATA		EQU	$C00000		; VDP data port
0010C2AE =00C00004                  VDPCTRL		EQU	$C00004		; VDP control port
0010C2AE =00C00008                  VDPHVCNT	EQU	$C00008		; VDP H/V counter
0010C2AE =00C0001C                  VDPDEBUG	EQU	$C0001C		; VDP debug register
0010C2AE                            
0010C2AE                            ; TMSS
0010C2AE =00A14000                  TMSSSEGA	EQU	$A14000		; TMSS "SEGA" register
0010C2AE =00A14100                  TMSSMODE	EQU	$A14100		; TMSS bus mode
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; VDP operation codes
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE =40000000                  VRAMWRITE	EQU	$40000000		; VRAM write
0010C2AE =C0000000                  CRAMWRITE	EQU	$C0000000		; CRAM write
0010C2AE =40000010                  VSRAMWRITE	EQU	$40000010		; VSRAM write
0010C2AE =00000000                  VRAMREAD	EQU	$00000000		; VRAM read
0010C2AE =00000020                  CRAMREAD	EQU	$00000020		; CRAM read
0010C2AE =00000010                  VSRAMREAD	EQU	$00000010		; VSRAM read
0010C2AE =40000080                  VRAMDMA		EQU	$40000080		; VRAM DMA
0010C2AE =C0000080                  CRAMDMA		EQU	$C0000080		; CRAM DMA
0010C2AE =40000090                  VSRAMDMA	EQU	$40000090		; VSRAM DMA
0010C2AE =000000C0                  VRAMCOPY	EQU	$000000C0		; VRAM DMA copy
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; VDP status codes
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE =00000000                  PAL_CLOCK:          EQU 0
0010C2AE =00000001                  DMA_RUNNING:        EQU 1 
0010C2AE =00000002                  HBLANKING:       	EQU 2
0010C2AE =00000003                  VBLANKING:       	EQU 3
0010C2AE =00000004                  ODDFRAME:        	EQU 4
0010C2AE =00000005                  SPRITE_COLLIDE:		EQU 5
0010C2AE =00000006                  SPRITE_OVERFLOW: 	EQU 6
0010C2AE =00000007                  VBLANK_PENDING:  	EQU 7
0010C2AE =00000008                  FIFO_FULL:       	EQU 8
0010C2AE =00000009                  FIFO_EMPTY:      	EQU 9
0010C2AE                            
0010C2AE                            
0010C2AE                            
0010C2AE                                    include "beebush/Macros.inc"
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; General purpose macros for defining pointer data
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            dclww	macro	long, word1, word2
0010C2AE                            	dc.l 	\long
0010C2AE                            	dc.w 	\word1
0010C2AE                            	dc.w 	\word2
0010C2AE                            	endm
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; Stop the Z80
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            Z80STOP macro
0010C2AE                            	move.w	#$100,Z80BUS			; Request Z80 bus access
0010C2AE                            .Wait\@:
0010C2AE                            	btst	#0,Z80BUS			; Was the request acknowledged?
0010C2AE                            	bne.s	.Wait\@				; If not, wait
0010C2AE                            	endm
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; Stop the Z80
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            Z80START macro
0010C2AE                            	move.w	#0,Z80BUS
0010C2AE                            	endm
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; VDP command set
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            VDPCMD macro ins, addr, type, rwd, end, end2
0010C2AE                            	local	cmd
0010C2AE                            cmd	= (\type\\rwd\)|(((\addr)&$3FFF)<<16)|((\addr)/$4000)
0010C2AE                            	if narg=5
0010C2AE                            		\ins	#\#cmd,\end
0010C2AE                            	elseif narg>=6
0010C2AE                            		\ins	#(\#cmd)\end,\end2
0010C2AE                            	else
0010C2AE                            		\ins	cmd
0010C2AE                            	endif
0010C2AE                            	endm
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; Wait for DMA
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            DMAWAIT macro ctrl
0010C2AE                            .Wait\@:
0010C2AE                            	if narg>0
0010C2AE                            		btst	#1,1(\ctrl)		; Is DMA active?
0010C2AE                            	else
0010C2AE                            		move.w	VDPCTRL,d0		; Is DMA active?
0010C2AE                            		btst	#1,d0
0010C2AE                            	endif
0010C2AE                            	bne.s	.Wait\@				; If so, wait
0010C2AE                            	endm
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; VDP DMA from 68000 memory to VDP memory
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; PARAMETERS:
0010C2AE                            ;	src  - Source address in 68000 memory
0010C2AE                            ;	dest - Destination address in VDP memory
0010C2AE                            ;	len  - Length of data in bytes
0010C2AE                            ;	type - Type of VDP memory
0010C2AE                            ;	port - Address register for the VDP port
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; kys
0010C2AE =FFFFF644                  vdpIntBuffer = $FFFFF644
0010C2AE                            
0010C2AE                            VDPDMA  macro src, dest, len, type, port
0010C2AE                            	; DMA data
0010C2AE                            	lea	VDPCTRL,\port
0010C2AE                            	move.l	#$94009300|((((\len)/2)&$FF00)<<8)|(((\len)/2)&$FF),(\port)
0010C2AE                            	move.l	#$96009500|((((\src)/2)&$FF00)<<8)|(((\src)/2)&$FF),(\port)
0010C2AE                            	move.w	#$9700|(((\src)>>17)&$7F),(\port)
0010C2AE                            	VDPCMD	move.w,\dest,\type,DMA,>>16,(\port)
0010C2AE                            	VDPCMD	move.w,\dest,\type,DMA,&$FFFF,vdpIntBuffer.w
0010C2AE                            	move.w	vdpIntBuffer.w,(\port)
0010C2AE                            	endm
0010C2AE                            
0010C2AE                            ; -------------------------------------------------------------------------
0010C2AE                            ; VDP DMA fill VRAM with byte
0010C2AE                            ; -------------------------------------------------------------------------
0010C2AE                            ; PARAMETERS:
0010C2AE                            ;	addr - Address in VRAM
0010C2AE                            ;	len  - Length of fill in bytes
0010C2AE                            ;	byte - Byte to fill VRAM with
0010C2AE                            ;	inc  - VDP autoincrement value
0010C2AE                            ;	port - Control port address register
0010C2AE                            ; -------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            VDPFILL macro addr, len, byte, inc, port
0010C2AE                            	; DMA fill
0010C2AE                            	lea	VDPCTRL,\port
0010C2AE                            	move.w	#$8F00+\inc,(\port)
0010C2AE                            	move.l	#$93009400|((((\len)-1)&$FF00)>>8)|((((\len)-1)&$FF)<<16),(\port)
0010C2AE                            	move.w	#$9780,(\port)
0010C2AE                            	VDPCMD	move.l,\addr,VRAM,DMA,(\port)
0010C2AE                            	move.w	#(\byte)<<8,VDPDATA
0010C2AE                            	DMAWAIT	\port
0010C2AE                            	endm
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; Macro to create ids from objects
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            OBJDEF      macro   addr, id
0010C2AE                                    dc.l    \addr
0010C2AE                            \id     rs.b    1
0010C2AE                                    endm
0010C2AE                                    endm
0010C2AE                            
0010C2AE                                    opt     l.
0010C2AE =FFFFCC00                  hscroll =       $FFFFCC00
0010C2AE =FFFFF800                  vdpSprites =    $FFFFF800
0010C2AE =FFFFFB00                  palette =       $FFFFFB00
0010C2AE =FFFFFE04                  frameCntr =     $FFFFFE04
0010C2AE                                    rsset   $FFFFF600
0010C2AE                            
0010C2AE =FFFFF600                  gamemode:               rs.b 1  
0010C2AE =FFFFF601                  submode                 rs.b 1
0010C2AE =FFFFF602                  joypadMirr:             rs.b 1    
0010C2AE =FFFFF603                  joypadPressMirr:        rs.b 1  
0010C2AE =FFFFF604                  joypad:                 rs.b 1    
0010C2AE =FFFFF605                  joypadPress:            rs.b 1  
0010C2AE                                                    rs.b 2  
0010C2AE =FFFFF608                  distance:               rs.b 4
0010C2AE =FFFFF60C                  displayMode:            rs.b 2    
0010C2AE                                                    rs.b 6
0010C2AE =FFFFF614                  genericTimer:           rs.b 2    
0010C2AE =FFFFF616                  mainAPosY:              rs.b 2    
0010C2AE =FFFFF618                  mainBPosY:              rs.b 2    
0010C2AE =FFFFF61A                  mainAPosX:              rs.b 2    
0010C2AE =FFFFF61C                  mainBPosX:              rs.b 2    
0010C2AE =FFFFF61E                  mainZPosY:              rs.b 2    
0010C2AE =FFFFF620                  mainZPosX:              rs.b 2    
0010C2AE =FFFFF622                  mainCPosX:              rs.b 2    
0010C2AE =FFFFF624                  mainCPosY:              rs.b 2    
0010C2AE =FFFFF626                  palFadeArgs:            rs.b 0
0010C2AE =FFFFF626                  palFadeOff:             rs.b 1    
0010C2AE =FFFFF627                  palFadeSize:            rs.b 1    
0010C2AE =FFFFF628                  vblankUnk1:             rs.b 1    
0010C2AE =FFFFF629                  vblankUnk2:             rs.b 1    
0010C2AE =FFFFF62A                  vblankCmd:              rs.b 1   
0010C2AE                                    rsset   $FFFFF700
0010C2AE =FFFFF700                  cameraAPosX:            rs.b 4                  
0010C2AE =FFFFF704                  cameraAPosY:            rs.b 4                  
0010C2AE =FFFFF708                  cameraBPosX:            rs.b 4                  
0010C2AE =FFFFF70C                  cameraBPosY:            rs.b 4                  
0010C2AE =FFFFF710                  cameraCPosX:            rs.b 4                  
0010C2AE =FFFFF714                  cameraCPosY:            rs.b 4                  
0010C2AE =FFFFF718                  cameraZPosX:            rs.b 4                  
0010C2AE =FFFFF71C                  cameraZPosY:            rs.b 4  
0010C2AE                            
0010C2AE =FFFFD000                  OBJECTRAM               EQU $FFFFD000 
0010C2AE =00000040                  OBJSZ                   EQU 64
0010C2AE                            OBJECTRAMSZ             EQU OBJECTRAME-OBJECTRAM    
0010C2AE                            
0010C2AE                                    rsset           $FFFFD000 
0010C2AE =FFFFD000                  objSlot00:      rs.b    OBJSZ
0010C2AE =FFFFD040                  objSlot01:      rs.b    OBJSZ
0010C2AE =FFFFD080                  objSlot02:      rs.b    OBJSZ
0010C2AE =FFFFD0C0                  objSlot03:      rs.b    OBJSZ
0010C2AE =FFFFD100                  objSlot04:      rs.b    OBJSZ
0010C2AE =FFFFD140                  objSlot05:      rs.b    OBJSZ
0010C2AE =FFFFD180                  objSlot06:      rs.b    OBJSZ
0010C2AE =FFFFD1C0                  objSlot07:      rs.b    OBJSZ  
0010C2AE =FFFFD200                  objSlot08:      rs.b    OBJSZ  
0010C2AE =FFFFD240                  objSlot09:      rs.b    OBJSZ  
0010C2AE =FFFFD280                  objSlot0A:      rs.b    OBJSZ  
0010C2AE =FFFFD2C0                  objSlot0B:      rs.b    OBJSZ  
0010C2AE =FFFFD300                  objSlot0C:      rs.b    OBJSZ
0010C2AE =FFFFD340                  objSlot0D:      rs.b    OBJSZ
0010C2AE =FFFFD380                  objSlot0E:      rs.b    OBJSZ
0010C2AE =FFFFD3C0                  objSlot0F:      rs.b    OBJSZ
0010C2AE =FFFFD400                  objSlot10:      rs.b    OBJSZ  
0010C2AE =FFFFD440                  objSlot11:      rs.b    OBJSZ
0010C2AE =FFFFD480                  objSlot12:      rs.b    OBJSZ
0010C2AE =FFFFD4C0                  objSlot13:      rs.b    OBJSZ
0010C2AE =FFFFD500                  objSlot14:      rs.b    OBJSZ  
0010C2AE =FFFFD540                  objSlot15:      rs.b    OBJSZ
0010C2AE =FFFFD580                  objSlot16:      rs.b    OBJSZ
0010C2AE =FFFFD5C0                  objSlot17:      rs.b    OBJSZ
0010C2AE =FFFFD600                  objSlot18:      rs.b    OBJSZ  
0010C2AE =FFFFD640                  objSlot19:      rs.b    OBJSZ
0010C2AE =FFFFD680                  objSlot1A:      rs.b    OBJSZ
0010C2AE =FFFFD6C0                  objSlot1B:      rs.b    OBJSZ
0010C2AE =FFFFD700                  objSlot1C:      rs.b    OBJSZ
0010C2AE =FFFFD740                  objSlot1D:      rs.b    OBJSZ
0010C2AE =FFFFD780                  objSlot1E:      rs.b    OBJSZ
0010C2AE =FFFFD7C0                  objSlot1F:      rs.b    OBJSZ
0010C2AE =FFFFD800                  objsAlloc:              rs.b    OBJSZ*96
0010C2AE                            OBJECTRAME:
0010C2AE                            
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            ; Start of main "beebush" program
0010C2AE                            ; ---------------------------------------------------------------------------
0010C2AE                            
0010C2AE                            GM_BEEBUSH:  
0010C2AE 1038 F601                        	move.b  submode.w,d0
0010C2B2 0240 001C                          andi.w  #$1C,d0
0010C2B6 4EBB 0000                          jsr     .Index(pc,d0.w)
0010C2BA 4E75                               rts
0010C2BC                            
0010C2BC                            ; ---------------------------------------------------------------------------
0010C2BC                            
0010C2BC =00000000                  SMNO_BEEBUSH_INIT       = 0*4   ; Init 
0010C2BC =00000004                  SMNO_BEEBUSH_INTRO      = 1*4   ; Intro seq.
0010C2BC =00000008                  SMNO_BEEBUSH_STATIC     = 2*4   ; Static scr.
0010C2BC =0000000C                  SMNO_BEEBUSH_INITMAIN   = 3*4   ; Main Init
0010C2BC =00000010                  SMNO_BEEBUSH_MAIN       = 4*4   ; Main game
0010C2BC                            
0010C2BC                            .Index:      
0010C2BC 6000 0000                          bra.w   BEEBUSH_INIT
0010C2C0 6000 0000                          bra.w   BEEBUSH_INTRO
0010C2C4 6000 0000                          bra.w   BEEBUSH_STATIC
0010C2C8 6000 0000                          bra.w   BEEBUSH_INITMAIN
0010C2CC 6000 0000                          bra.w   BEEBUSH_MAIN
0010C2D0                            .Null:
0010C2D0 4E75                               rts 
0010C2D2                            
0010C2D2                            ; ---------------------------------------------------------------------------
0010C2D2                            ; Initialization
0010C2D2                            ; ---------------------------------------------------------------------------
0010C2D2                            
0010C2D2                            BEEBUSH_INIT:   
0010C2D2 46FC 2700                  	move    #$2700,sr  		; interrupt disable               
0010C2D6 4EB8 1EB6                          jsr     ClearArtListQueue	; clr art lists, we're not using them
0010C2DA 4EB8 26FE                          jsr     PalFadeOut		; fade palette out
0010C2DE 4EB8 1B9A                          jsr     InitScreen		
0010C2E2 4DF9 00C0 0004                     lea     VDPCTRL,a6		; init regs
0010C2E8 3038 F60C                          move.w  displayMode.w,d0	; Get mode reg. 1 info
0010C2EC 0200 00BF                          andi.b  #%10111111,d0           ; Mask display enable bit
0010C2F0 33C0 00C0 0004                     move.w  d0,VDPCTRL              ; Set mode reg. 1 
0010C2F6 3CBC 8004                          move.w  #$8000+%00000100,(a6)
0010C2FA 3CBC 8230                          move.w  #$8230,(a6)
0010C2FE 3CBC 8407                          move.w  #$8407,(a6)
0010C302 3CBC 857C                          move.w  #$857C,(a6)
0010C306 3CBC 8720                          move.w  #$8720,(a6)
0010C30A 3CBC 8B00                          move.w  #$8B00+%00000000,(a6)
0010C30E 43F8 D000                          lea     OBJECTRAM.w,a1
0010C312 7000                               moveq   #0,d0
0010C314 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
0010C318                            
0010C318                            .ClearObjects:                         
0010C318 22C0                               move.l  d0,(a1)+
0010C31A 51C9 FFFC                          dbf     d1,.ClearObjects
0010C31E 43F8 F700                          lea     cameraAPosX.w,a1
0010C322 7000                               moveq   #0,d0
0010C324 323C 0007                          move.w  #$8-1,d1
0010C328                            
0010C328                            .ClearCams:                            
0010C328 22C0                               move.l  d0,(a1)+
0010C32A 51C9 FFFC                          dbf     d1,.ClearCams
0010C32E                            
0010C32E 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
0010C334 4EB8 33E4                          jsr     VSync
0010C338                            
0010C338 11FC 0000 D0C0                     move.b  #BBUSH_OBJNO_BODY,objSlot03.w        
0010C33E 11FC 0000 D080                     move.b  #BBUSH_OBJNO_HEAD,objSlot02.w      
0010C344 11FC 0000 D040                     move.b  #BBUSH_OBJNO_EYES,objSlot01.w     
0010C34A 11FC 0000 D000                     move.b  #BBUSH_OBJNO_MOUTH,objSlot00.w   
0010C350                            
0010C350 =FFFFD0C0                  membushBody  = objSlot03
0010C350 =FFFFD080                  membushHead  = objSlot02       
0010C350 =FFFFD040                  membushEyes  = objSlot01
0010C350 =FFFFD000                  membushMouth = objSlot00    
0010C350                                                    
0010C350 31FC 0000 F602                     move.w  #0,joypadMirr.w
0010C356 31FC 0000 F604                     move.w  #0,joypad.w
0010C35C                            
0010C35C                                    ; Load art direct
0010C35C                            
0010C366 41F9 0000 0000                     lea     ArtNem_BEEBUSH,a0                       ; Get compressed bitstream
0010C36C 4EB8 1D18                          jsr     NemDec
0010C370                            
0010C37A 41F9 0000 0000                     lea     ArtNem_QUAGMIRE,a0                      ; Get compressed bitstream
0010C380 4EB8 1D18                          jsr     NemDec
0010C384                            
0010C38E 3E3C 01FF                          move.w  #(8*64)-1,d7
0010C392                            
0010C392                            .FillStatic:
0010C392 4EB8 33F0                          jsr     CalcRandom
0010C396 23C0 00C0 0000                     move.l  d0,VDPDATA
0010C39C D280                               add.l   d0,d1
0010C39E 23C1 00C0 0000                     move.l  d1,VDPDATA
0010C3A4                            
0010C3A4 51CF FFEC                          dbf     d7,.FillStatic
0010C3A8                            
0010C3A8                                    ; Load screen A tilemap
0010C3A8                            
0010C3A8 43F9 0000 0000                     lea     MapScrA_BEEBUSH,a1
0010C3B4 7227                               moveq   #40-1,d1                     ; Set Width
0010C3B6 741B                               moveq   #28-1,d2                     ; Set Height
0010C3B8 4EB8 1CF8                          jsr     DrawTileMap                  ; Draw Tilemap to location
0010C3BC                            
0010C3BC                                    ; Load screen B tilemap
0010C3BC                            
0010C3BC 43F9 0000 0000                     lea     MapScrB_BEEBUSH,a1
0010C3C8 7227                               moveq   #40-1,d1                     ; Set Width
0010C3CA 741B                               moveq   #28-1,d2                     ; Set Height
0010C3CC 4EB8 1CF8                          jsr     DrawTileMap                  ; Draw Tilemap to location
0010C3D0                            
0010C3D0                                    ; Load palette into buffer directly
0010C3D0                            
0010C3D0 7E3F                               moveq   #64-1,d7
0010C3D2 45F9 0000 0000                     lea     Pal_BEEBUSH,a2
0010C3D8 47F8 FB00                          lea     palette,a3
0010C3DC                            
0010C3DC                            .LoadToBuffer:                         
0010C3DC 26DA                               move.l  (a2)+,(a3)+
0010C3DE 51CF FFFC                          dbf     d7,.LoadToBuffer
0010C3E2                            
0010C3E2 3038 F60C                          move.w  displayMode.w,d0          
0010C3E6 0000 0040                          ori.b   #%1000000,d0
0010C3EA 33C0 00C0 0004                     move.w  d0,VDPCTRL		     ; Enable display when ready
0010C3F0 11FC 0004 F601                     move.b  #SMNO_BEEBUSH_INTRO,submode.w ; Move to next mode
0010C3F6 708D                               moveq   #$FFFFFF8D, d0          ; request SEGA PCM sample
0010C3F8 4EB9 0008 08BC                     jsr     MegaPCM_PlaySample
0010C3FE 4E75                               rts
0010C400                            
0010C400                            ; ---------------------------------------------------------------------------
0010C400                            ; Main cutscene loop
0010C400                            ; ---------------------------------------------------------------------------
0010C400                            
0010C400                            BEEBUSH_INTRO:                              
0010C400 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
0010C406 4EB8 33E4                          jsr     VSync
0010C40A 5278 FE04                          addq.w  #1,frameCntr.w
0010C40E 6100 0000                          bsr.w   _beebushCamShake
0010C412 6100 0000                          bsr.w   _beebushRunObjects    
0010C416 4EB9 0000 E79C                     jsr     DrawObjects
0010C41C                            
0010C41C 4A38 D0B0                          tst.b   membushHead+$30
0010C420 6700                               beq.s   .NoChg
0010C422 11FC 0008 F601                     move.b  #SMNO_BEEBUSH_STATIC,submode.w ; Move to next mode
0010C428 31FC 003C F614                     move.w  #60,genericTimer.w
0010C42E 6100 0000                          bsr.w   _beebushClrSprites
0010C432                            
0010C432                            .NoChg: 
0010C432 4E75                               rts 
0010C434                            
0010C434                            ; ---------------------------------------------------------------------------
0010C434                            ; Static Transition sequence
0010C434                            ; ---------------------------------------------------------------------------
0010C434                            
0010C434                            BEEBUSH_STATIC:                              
0010C434 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
0010C43A 4EB8 33E4                          jsr     VSync
0010C43E 5278 FE04                          addq.w  #1,frameCntr.w
0010C442 6100 0000                          bsr.w   _beebushDrawStatic
0010C446 5378 F614                          subq.w  #1,genericTimer.w
0010C44A 6600 0000                          bne.w   .Exit
0010C44E 11FC 000C F601                     move.b  #SMNO_BEEBUSH_INITMAIN,submode.w ; Move to next mode
0010C454 4E75                               rts
0010C456                            .Exit:
0010C456                            
0010C456 4E75                               rts
0010C458                            
0010C458                            ; ---------------------------------------------------------------------------
0010C458                            ; Initialize main sequence
0010C458                            ; ---------------------------------------------------------------------------
0010C458                            
0010C458 =FFFFD000                  membushPlayer = objSlot00
0010C458                            
0010C458                            BEEBUSH_INITMAIN:                              
0010C458 11FC 001A F62A                     move.b  #VBLNO_BEEBUSH,vblankCmd.w
0010C45E 4EB8 33E4                          jsr     VSync
0010C462 43F9 0000 0000                     lea     MapScrB_BEEBUSHMAIN,a1
0010C468 33FC 8B00 00C0 0004                move.w  #$8B00+%00000000,VDPCTRL
0010C476 723F                               moveq   #64-1,d1                     ; Set Width
0010C478 741B                               moveq   #28-1,d2                     ; Set Height
0010C47A 4EB8 1CF8                          jsr     DrawTileMap                  ; Draw Tilemap to location
0010C47E 43F8 D000                          lea     OBJECTRAM.w,a1
0010C482 7000                               moveq   #0,d0
0010C484 323C 013F                          move.w  #((OBJSZ*20)/4)-1,d1
0010C488                            
0010C488                            .ClearObjects:                         
0010C488 22C0                               move.l  d0,(a1)+
0010C48A 51C9 FFFC                          dbf     d1,.ClearObjects
0010C48E 11FC 0000 D000                     move.b  #BBUSH_OBJNO_PLAYER,objSlot00.w
0010C494 21FC 0000 0100 F608                move.l  #$100,distance
0010C49C 11FC 0010 F601                     move.b  #SMNO_BEEBUSH_MAIN,submode.w ; Move to next mode
0010C4A2 708E                              moveq   #$FFFFFF8E, d0          ; request SEGA PCM sample
0010C4A4 4EB9 0008 08BC                     jsr     MegaPCM_PlaySample
0010C4AA 4E75                               rts
0010C4AC                            
0010C4AC                            ; ---------------------------------------------------------------------------
0010C4AC                            ; Main    lGod wfyuck ioff
0010C4AC                            ; ---------------------------------------------------------------------------
0010C4AC                            
0010C4AC                            BEEBUSH_MAIN:                              
0010C4AC 11FC 001C F62A                     move.b  #VBLNO_BEEBUSHSCR,vblankCmd.w
0010C4B2 4EB8 33E4                          jsr     VSync
0010C4B6 5278 FE04                          addq.w  #1,frameCntr.w
0010C4BA 6100 0000                          bsr.w   _beebushScroll
0010C4BE 6100 0000                          bsr.w   _beebushRunObjects    
0010C4C2 4EB9 0000 E79C                     jsr     DrawObjects
0010C4C8 4E75                               rts
0010C4CA                            
0010C4CA                            ; ---------------------------------------------------------------------------
0010C4CA                            
0010C4CA                            Pal_BEEBUSH:
0010C4CA                                    incbin	"beebush/Data/BEEBUSH.PAL"
0010C54A                                    even
0010C54A                            
0010C54A                            MapScrA_BEEBUSH:
0010C54A                                    incbin  "beebush/Data/BEEBUSH_SCR_A.MAP"
0010CE0A                                    even
0010CE0A                            
0010CE0A                            MapScrB_BEEBUSH:
0010CE0A                                    incbin  "beebush/Data/BEEBUSH_SCR_B.MAP"
0010D6CA                                    even
0010D6CA                            
0010D6CA                            MapScrB_BEEBUSHMAIN:
0010D6CA                                    incbin  "beebush/Data/BEEBUSH_MAIN_B.MAP"
0010E4CA                                    even
0010E4CA                            
0010E4CA                            ArtNem_BEEBUSH:
0010E4CA                                    incbin  "beebush/Data/BEEBUSH_ART.NEM"
0010E82E                                    even
0010E82E                            
0010E82E                            ArtNem_QUAGMIRE:
0010E82E                                    incbin  "beebush/Data/QUAGMIRE_ART.NEM"
0010F806                                    even
0010F806                            
0010F806                            ; ---------------------------------------------------------------------------
0010F806                            ; Do camera unsteadiness movement
0010F806                            ;
0010F806                            ; camera A = REC. and camera overlay
0010F806                            ; camera B = background (moves)
0010F806                            ; ---------------------------------------------------------------------------
0010F806                            
0010F806 =FFFFF760                  beeSinCntr = $FFFFF760
0010F806 =FFFFF762                  beeSin     = $FFFFF762      
0010F806 =FFFFF764                  beeCos     = $FFFFF764
0010F806                            
0010F806                            _beebushCamShake:
0010F806 5438 F760                          add.b   #2,beeSinCntr.w
0010F80A 1038 F760                          move.b  beeSinCntr.w,d0
0010F80E 4EB8 3416                          jsr     CalcSinCos
0010F812 31C0 F764                          move.w  d0,beeCos.w
0010F816 31C1 F762                          move.w  d1,beeSin.w
0010F81A EE40                               asr.w   #7,d0
0010F81C EC41                               asr.w   #6,d1
0010F81E                            
0010F81E                                    
0010F81E 31C0 F61C                          move.w  d0,mainBPosX
0010F822 4440                               neg.w   d0
0010F824 31C0 F708                          move.w  d0,cameraBPosX
0010F828                            
0010F828 31C1 F618                          move.w  d1,mainBPosY
0010F82C 31C1 F70C                          move.w  d1,cameraBPosY
0010F830 4E75                               rts
0010F832                            
0010F832                            ; ---------------------------------------------------------------------------
0010F832                            ; Main scrolling for gameplay
0010F832                            ; ---------------------------------------------------------------------------
0010F832                            
0010F832                            
0010F832                            _beebushScroll:                    
0010F832 43F8 CC00                          lea     hscroll.w,a1
0010F836                            
0010F836 3238 F700                          move.w  cameraAPosX.w,d1
0010F83A E241                               asr.w   #1,d1
0010F83C 31C1 F708                          move.w  d1,cameraBPosX
0010F840                            
0010F840 3238 F710                          move.w  cameraCPosX.w,d1
0010F844 D241                               add.w   d1,d1
0010F846 31C1 F718                          move.w  d1,cameraZPosX.w
0010F84A                            
0010F84A 3038 F708                          move.w  cameraBPosX.w,d0
0010F84E                            
0010F84E                                    ; Far away BG segment
0010F84E                            
0010F84E 323C 0047                          move.w  #72-1,d1
0010F852 E480                               asr.l   #2,d0
0010F854                            .FarBG:                         
0010F854 22C0                               move.l  d0,(a1)+
0010F856 51C9 FFFC                          dbf     d1,.FarBG
0010F85A                            
0010F85A                                    ; Sidewalk perspective effect
0010F85A                            
0010F85A 3038 F710                          move.w  cameraCPosX.w,d0
0010F85E E440                               asr.w   #2,d0
0010F860 31C0 F622                          move.w  d0,mainCPosX.w
0010F864 0C40 0021                          cmp.w   #32+1,d0
0010F868 6600                               bne.s   .SkipBRes
0010F86A 31FC 0000 F710                     move.w  #0,cameraCPosX.w
0010F870 31FC 0000 F718                     move.w  #0,cameraZPosX.w
0010F876 303C 0000                          move.w  #0,d0
0010F87A                            .SkipBRes
0010F87A 4440                               neg     d0
0010F87C 3438 F718                          move.w  cameraZPosX.w,d2
0010F880 E442                               asr.w   #2,d2
0010F882 31C2 F620                          move.w  d2,mainZPosX.w
0010F886 4442                               neg     d2
0010F888 9440                               sub.w   d0,d2
0010F88A 48C2                               ext.l   d2
0010F88C E182                               asl.l   #8,d2
0010F88E 85FC 0068                          divs.w  #$68,d2
0010F892 48C2                               ext.l   d2
0010F894 E182                               asl.l   #8,d2
0010F896 3600                               move.w  d0,d3
0010F898 323C 001F                          move.w  #32-1,d1
0010F89C                            
0010F89C                            .Road:                                                    
0010F89C 3003                               move.w  d3,d0
0010F89E 4440                               neg.w   d0
0010F8A0 22C0                               move.l  d0,(a1)+
0010F8A2 4843                               swap    d3
0010F8A4 D682                               add.l   d2,d3
0010F8A6 4843                               swap    d3
0010F8A8 51C9 FFF2                          dbf     d1,.Road
0010F8AC                            
0010F8AC                                    ; Grass (far away)
0010F8AC                            
0010F8AC 3038 F708                          move.w  cameraBPosX.w,d0
0010F8B0 2400                               move.l  d0,d2
0010F8B2 E482                               asr.l   #2,d2
0010F8B4 9082                               sub.l   d2,d0
0010F8B6 323C 001F                          move.w  #32-1,d1
0010F8BA                            
0010F8BA                            .GrassFar
0010F8BA                            
0010F8BA 22C0                               move.l  d0,(a1)+
0010F8BC 51C9 FFFC                          dbf     d1,.GrassFar
0010F8C0                            
0010F8C0 3038 F708                          move.w  cameraBPosX.w,d0
0010F8C4 323C 001F                          move.w  #32-1,d1
0010F8C8                                    
0010F8C8                            .GrassMid
0010F8C8                            
0010F8C8 22C0                               move.l  d0,(a1)+
0010F8CA 51C9 FFFC                          dbf     d1,.GrassMid
0010F8CE                            
0010F8CE 3038 F708                          move.w  cameraBPosX.w,d0
0010F8D2 2400                               move.l  d0,d2
0010F8D4 E482                               asr.l   #2,d2
0010F8D6 D082                               add.l   d2,d0
0010F8D8 323C 001F                          move.w  #32-1,d1
0010F8DC                            
0010F8DC                            .GrassClose
0010F8DC                            
0010F8DC 22C0                               move.l  d0,(a1)+
0010F8DE 51C9 FFFC                          dbf     d1,.GrassClose
0010F8E2 31F8 F700 F61A                     move.w  cameraAPosX.w,mainAPosX
0010F8E8 31F8 F708 F61C                     move.w  cameraBPosX.w,mainBPosX
0010F8EE 4E75                               rts
0010F8F0                            
0010F8F0                            ; ---------------------------------------------------------------------------
0010F8F0                            ; Clear screen sprites
0010F8F0                            ; ---------------------------------------------------------------------------
0010F8F0                            
0010F8F0                            _beebushClrSprites:
0010F8F0 21FC 0000 0000 F616                move.l  #0,mainAPosY.w
0010F8F8 21FC 0000 0000 F61A                move.l  #0,mainAPosX.w
0010F900                            
0010F900 43F8 F800                          lea     vdpSprites.w,a1
0010F904 7000                               moveq   #0,d0
0010F906 323C 009F                          move.w  #$A0-1,d1               ; Clear all sprites
0010F90A                            
0010F90A                            .ClearSprites:
0010F90A 22C0                               move.l  d0,(a1)+
0010F90C 51C9 FFFC                          dbf     d1,.ClearSprites
0010F910 43F8 CC00                          lea     hscroll.w,a1
0010F914 7000                               moveq   #0,d0
0010F916 323C 0100                          move.w  #$100,d1
0010F91A                            
0010F91A                            .ClearHScroll:
0010F91A 22C0                               move.l  d0,(a1)+
0010F91C 51C9 FFFC                          dbf     d1,.ClearHScroll
0010F920 4E75                               rts
0010F922                            
0010F922                            ; ---------------------------------------------------------------------------
0010F922                            ; Draw tilemap static for transitory sequences
0010F922                            ; Draws 2 "random" tiles out of a memory space location (document later idk)
0010F922                            ; ---------------------------------------------------------------------------
0010F922                            
0010F922                            _beebushDrawStatic:
0010F922 4DF9 00C0 0000                     lea     VDPDATA,a6                      ; a6 = VDPDATA        
0010F92E 383C 000E                          move.w  #(30/2)-1,d4                    ; d4 = width / 2
0010F932 3A3C 0013                          move.w  #20-1,d5                        ; d5 = height
0010F936 2C3C 0080 0000                     move.l  #$800000,d6                     ; d6 = cmd row delta 
0010F93C                            
0010F93C                            .LoopRow:                              
0010F93C 2D43 0004                          move.l  d3,VDPCTRL-VDPDATA(a6)          ; set addr
0010F940 3E04                               move.w  d4,d7                           ; copy width to d7
0010F942                            
0010F942                            .LoopColumn:            
0010F942 4EB8 33F0                          jsr     CalcRandom                      ; get rand
0010F946 0240 003F                          andi.w  #$003F,d0                       ; mask high bits of tile no.
0010F94A 0040 2200                          ori.w   #$2200,d0                       ; set line 2 and id $1XX
0010F94E 3C80                               move.w  d0,(a6)                         ; write 1 tile
0010F950 D007                               add.b   d7,d0                           ; add whatever d7 is to d0
0010F952 0240 003F                          andi.w  #$003F,d0                       ; do the same to it
0010F956 0040 2200                          ori.w   #$2200,d0
0010F95A 3C80                               move.w  d0,(a6)                         ; write 1 tile
0010F95C                            
0010F95C 51CF FFE4                          dbf     d7,.LoopColumn                  ; loop for width
0010F960 D686                               add.l   d6,d3                           ; move to next row
0010F962 51CD FFD8                          dbf     d5,.LoopRow                     ; loop for height
0010F966 4E75                               rts
0010F968                            
0010F968                            ; ---------------------------------------------------------------------------
0010F968                            ; local memory usage derived from global (this sucks)
0010F968                            
0010F968                            
0010F968                                    include 'beebush/Objects.asm'
0010F968                            ; ---------------------------------------------------------------------------
0010F968                            ; Bee Bush Screen objects library
0010F968                            ; Depends on Stock Sonic 1 object library and sprite renderer
0010F968                            ; ---------------------------------------------------------------------------
0010F968                            
0010F968 =00000038                  OBJ.GRAVITY    EQU     56              ; Gravity delta
0010F968                            
0010F968                                                rsreset
0010F968 =00000000                  obj.No:             rs.b 1                  
0010F968 =00000001                  obj.Render:         rs.b 1                  
0010F968 =00000002                  obj.Tile:           rs.b 2                  
0010F968 =00000004                  obj.Map:            rs.b 4                  
0010F968 =00000008                  obj.X:              rs.b 2                  
0010F968 =0000000A                  obj.YScr:           rs.b 2                  
0010F968 =0000000C                  obj.Y:              rs.b 2                  
0010F968 =0000000E                  obj.YSub:           rs.b 2                  
0010F968 =00000010                  obj.XSpeed:         rs.b 2                  
0010F968 =00000012                  obj.YSpeed:         rs.b 2                  
0010F968 =00000014                  obj.Momentum:       rs.b 2                  
0010F968 =00000016                  obj.YRad:           rs.b 1                  
0010F968 =00000017                  obj.XRad:           rs.b 1                  
0010F968 =00000018                  obj.XDraw:          rs.b 1                  
0010F968 =00000019                  obj.Priority:       rs.b 1                  
0010F968 =0000001A                  obj.Frame:          rs.b 1                  
0010F968 =0000001B                  obj.AnimFrame:      rs.b 1                  
0010F968 =0000001C                  obj.Anim:           rs.b 1                  
0010F968 =0000001D                  obj.LastAnim:       rs.b 1                  
0010F968 =0000001E                  obj.FrameTimer:     rs.b 1                  
0010F968 =0000001F                  obj.FrameMirr:      rs.b 1                  
0010F968 =00000020                  obj.Collision:      rs.b 1                  
0010F968 =00000021                  obj.ColliCnt:       rs.b 1                  
0010F968 =00000022                  obj.Status:         rs.b 1                  
0010F968 =00000023                  obj.Respawn:        rs.b 1                  
0010F968 =00000024                  obj.Action:         rs.b 1                  
0010F968 =00000025                  obj.SubAction:      rs.b 1                  
0010F968 =00000026                  obj.Angle:          rs.b 2                  
0010F968 =00000028                  obj.Arg:            rs.b 1                   
0010F968                            
0010F968                            ; --------------------------------------------------------------------------- 
0010F968                            
0010F968 =00000000                  STAT.XDIR:       equ 0
0010F968 =00000001                  STAT.YDIR:       equ 1                  
0010F968 =00000003                  STAT.HOISTING:   equ 3                  
0010F968 =00000005                  STAT.PUSHED:     equ 5                  
0010F968 =00000007                  STAT.FLAG:       equ 7
0010F968                            
0010F968                            ; ---------------------------------------------------------------------------
0010F968                            
0010F968 =00000000                  PHYS.DIR:        equ 0                  
0010F968 =00000001                  PHYS.AIRBORNE:   equ 1                  
0010F968 =00000002                  PHYS.ROLLING:    equ 2                  
0010F968 =00000003                  PHYS.HOISTED:    equ 3                  
0010F968 =00000004                  PHYS.ROLLJUMP:   equ 4                  
0010F968 =00000005                  PHYS.PUSH:       equ 5                  
0010F968 =00000006                  PHYS.WATER:      equ 6
0010F968 =00000007                  PHYS.FLAG:       equ 7
0010F968                            
0010F968                            ; ---------------------------------------------------------------------------
0010F968                            
0010F968 =00000000                  REND.XMIRR:      equ 0
0010F968 =00000001                  REND.YMIRR:      equ 1
0010F968 =00000002                  REND.CAMOFF:     equ 2
0010F968 =00000003                  REND.CAMOFF2:    equ 3
0010F968 =00000004                  REND.HEIGHT:     equ 4
0010F968 =00000005                  REND.SPTYPE:     equ 5
0010F968 =00000006                  REND.BEHIND:     equ 6                  
0010F968 =00000007                  REND.ONSCREEN:   equ 7
0010F968                            
0010F968                            ; ---------------------------------------------------------------------------
0010F968                            
0010F968                            _beebushRunObjects:                             
0010F968 41F8 D000                          lea     OBJECTRAM.w,a0
0010F96C 7E5F                               moveq   #96-1,d7
0010F96E 7000                               moveq   #0,d0
0010F970                            
0010F970                            .RunObjLoop:                       
0010F970 1010                               move.b  obj.No(a0),d0
0010F972 6700                               beq.s   .EmptySlot
0010F974 D040                               add.w   d0,d0
0010F976 D040                               add.w   d0,d0
0010F978 227B 0000                          movea.l .ObjectIndex-4(pc,d0.w),a1       ; No zero offset - start at 1
0010F97C 4E91                               jsr     (a1)
0010F97E 7000                               moveq   #0,d0
0010F980                            
0010F980                            .EmptySlot:                            
0010F980 41E8 0040                          lea     OBJSZ(a0),a0            ; Move into next object memory space
0010F984 51CF FFEA                          dbf     d7,.RunObjLoop
0010F988 4E75                               rts
0010F98A                            
0010F98A                            ; ---------------------------------------------------------------------------
0010F98A                            ; Object Index for Bee Bush
0010F98A                            ; ---------------------------------------------------------------------------
0010F98A =00000001                  BBUSH_OBJNO_PLAYER      = 1
0010F98A =00000002                  BBUSH_OBJNO_BODY        = 2
0010F98A =00000003                  BBUSH_OBJNO_HEAD        = 3
0010F98A =00000004                  BBUSH_OBJNO_EYES        = 4
0010F98A =00000005                  BBUSH_OBJNO_MOUTH       = 5
0010F98A =00000006                  BBUSH_OBJNO_DBUG        = 6
0010F98A                            
0010F98A                            
0010F98A                            .ObjectIndex:    
0010F98A 0000 0000                          dc.l BbushObj_Player
0010F98E 0000 0000                          dc.l BbushObj_QuagmireBody
0010F992 0000 0000                          dc.l BbushObj_QuagmireHead
0010F996 0000 0000                          dc.l BbushObj_QuagmireEyes
0010F99A 0000 0000                          dc.l BbushObj_QuagmireMouth
0010F99E 0000 0000                          dc.l BbushObj_Dbug
0010F9A2                            .Null:
0010F9A2 4E75                               rts 
0010F9A4                            
0010F9A4                                    include  "beebush/Objects/OBJ_QUAGMIRE.asm"
0010F9A4                            ; ---------------------------------------------------------------------------
0010F9A4                            ; Body
0010F9A4                            ; ---------------------------------------------------------------------------
0010F9A4                            
0010F9A4 =00000030                  bbush.Flag  = $30
0010F9A4 =00000032                  bbush.orgX  = $32
0010F9A4 =00000034                  bbush.orgY  = $34
0010F9A4 =00000036                  bbush.Cntr  = $36
0010F9A4 =00000038                  bbush.Timer = $38
0010F9A4 =00000039                  bbush.MvChk = $39
0010F9A4                            
0010F9A4                            
0010F9A4 =00000300                  QUAGTILE = $300
0010F9A4                            
0010F9A4                            BbushObj_QuagmireBody:                          
0010F9A4 7000                               moveq   #0,d0
0010F9A6 1028 0024                          move.b  obj.Action(a0),d0
0010F9AA 323B 0000                          move.w  .Index(pc,d0.w),d1
0010F9AE 4EFB 1000                          jmp     .Index(pc,d1.w)
0010F9B2                            
0010F9B2                            ; ---------------------------------------------------------------------------
0010F9B2                            .Index:                                
0010F9B2 0000                               dc.w QuagmireBody_Init-.Index
0010F9B4 0000                               dc.w QuagmireBody_Display-.Index
0010F9B6                            ; ---------------------------------------------------------------------------
0010F9B6                            
0010F9B6                            QuagmireBody_Init:                         
0010F9B6 5428 0024                          addq.b  #2,obj.Action(a0)
0010F9BA 317C 00A8 0008                     move.w  #168,obj.X(a0)
0010F9C0 317C 00A0 000C                     move.w  #160,obj.Y(a0)
0010F9C6 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
0010F9CE 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
0010F9D4 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
0010F9DA 117C 0007 0019                     move.b  #7,obj.Priority(a0)
0010F9E0 117C 0002 001A                     move.b  #2,obj.Frame(a0)
0010F9E6 43F8 D080                          lea     membushHead,a1
0010F9EA 3368 0008 0008                     move.w  obj.X(a0),obj.X(a1)
0010F9F0 3368 000C 000C                     move.w  obj.Y(a0),obj.Y(a1)
0010F9F6 0469 003C 000C                     sub.w   #60,obj.Y(a1)
0010F9FC 5169 0008                          sub.w   #8,obj.X(a1)    
0010FA00 3369 0008 0032                     move.w  obj.X(a1),bbush.orgX(a1)
0010FA06 3369 000C 0034                     move.w  obj.Y(a1),bbush.orgY(a1)
0010FA0C                                  
0010FA0C                            
0010FA0C                            QuagmireBody_Display:                           
0010FA0C 4EB9 0000 E742                     jsr     _objectDraw  
0010FA12 4E75                               rts
0010FA14                            
0010FA14                            ; ---------------------------------------------------------------------------
0010FA14                            ; Head
0010FA14                            ; ---------------------------------------------------------------------------
0010FA14                            
0010FA14                            BbushObj_QuagmireHead:                          
0010FA14 7000                               moveq   #0,d0
0010FA16 1028 0024                          move.b  obj.Action(a0),d0
0010FA1A 323B 0000                          move.w  .Index(pc,d0.w),d1
0010FA1E 4EFB 1000                          jmp     .Index(pc,d1.w)
0010FA22                            
0010FA22                            ; ---------------------------------------------------------------------------
0010FA22                            .Index:                                
0010FA22 0000                               dc.w QuagmireHead_Init-.Index
0010FA24 0000                               dc.w QuagmireHead_Display-.Index
0010FA26 0000                               dc.w QuagmireHead_InitBck-.Index
0010FA28 0000                               dc.w QuagmireHead_MoveBck-.Index
0010FA2A 0000                               dc.w QuagmireHead_WaitInit-.Index
0010FA2C 0000                               dc.w QuagmireHead_Wait-.Index
0010FA2E                            ; ---------------------------------------------------------------------------
0010FA2E                            
0010FA2E                            QuagmireHead_Init:                         
0010FA2E 5428 0024                          addq.b  #2,obj.Action(a0)
0010FA32 117C 0012 0016                     move.b  #18,obj.YRad(a0)
0010FA38 117C 0009 0017                     move.b  #9,obj.XRad(a0)
0010FA3E 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
0010FA46 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
0010FA4C 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
0010FA52 117C 0006 0019                     move.b  #6,obj.Priority(a0)
0010FA58 117C 0001 001A                     move.b  #1,obj.Frame(a0)
0010FA5E                            
0010FA5E                            QuagmireHead_Display:  
0010FA5E 11FC 0003 D05A                     move.b  #3,(membushEyes+obj.Frame)
0010FA64 3168 0032 0008                     move.w  bbush.orgX(a0),obj.X(a0)
0010FA6A 3168 0034 000C                     move.w  bbush.orgY(a0),obj.Y(a0)                    
0010FA70 4EB9 0000 E742                     jsr     _objectDraw  
0010FA76 4E75                               rts
0010FA78                            
0010FA78                            QuagmireHead_InitBck:
0010FA78 117C 009A 0036                     move.b  #$9A,bbush.Cntr(a0)     ; set initial "phase" of sine
0010FA7E 117C 003C 0038                     move.b  #60,bbush.Timer(a0)  
0010FA84 5428 0024                          addq.b  #2,obj.Action(a0)   
0010FA88 11FC 0004 D05A                     move.b  #4,(membushEyes+obj.Frame)
0010FA8E                                
0010FA8E                            QuagmireHead_MoveBck:
0010FA8E 1028 0036                          move.b  bbush.Cntr(a0),d0
0010FA92 5028 0036                          add.b   #8,bbush.Cntr(a0)
0010FA96 4EB8 3416                          jsr     CalcSinCos              ; note: d0 yshift div. needs to be 6 so adj.
0010FA9A                            
0010FA9A                            
0010FA9A E840                               asr.w   #4,d0
0010FA9C 0C68 00B0 0008                     cmpi.w  #$B0,obj.X(a0)
0010FAA2                            
0010FAA2 3428 0032                          move.w  bbush.orgX(a0),d2
0010FAA6 9440                               sub.w   d0,d2
0010FAA8                            
0010FAA8 0C42 00B0                          cmpi.w  #$B0,d2
0010FAAC 6200                               bhi.s   .SkipSet
0010FAAE 0C42 0091                          cmpi.w  #$91,d2
0010FAB2 6500                               blo.s   .SkipSet
0010FAB4                            
0010FAB4 3142 0008                          move.w  d2,obj.X(a0)
0010FAB8                            
0010FAB8                            
0010FAB8 E640                               asr.w   #3,d0        
0010FABA 3628 0034                          move.w  bbush.orgY(a0),d3
0010FABE D640                               add.w   d0,d3
0010FAC0 3143 000C                          move.w  d3,obj.Y(a0) 
0010FAC4                            
0010FAC4                            .SkipSet:
0010FAC4 4EB9 0000 E742                     jsr     _objectDraw 
0010FACA 5328 0038                          sub.b   #1,bbush.Timer(a0) 
0010FACE 6700                               beq.s   .Exit
0010FAD0 4E75                               rts
0010FAD2                            .Exit:
0010FAD2 5428 0024                          addq.b  #2,obj.Action(a0)
0010FAD6 4E75                               rts  
0010FAD8                            
0010FAD8                            QuagmireHead_WaitInit:  
0010FAD8 5428 0024                          addq.b  #2,obj.Action(a0)     
0010FADC 117C 001E 0038                     move.b  #30,bbush.Timer(a0) 
0010FAE2                            
0010FAE2                            QuagmireHead_Wait:
0010FAE2 4EB9 0000 E742                     jsr     _objectDraw                    
0010FAE8 5328 0038                          sub.b   #1,bbush.Timer(a0) 
0010FAEC 6600                               bne.s   .Exit
0010FAEE 50E8 0030                          st      bbush.Flag(a0)
0010FAF2                            
0010FAF2                            .Exit:
0010FAF2 4E75                               rts
0010FAF4                            
0010FAF4                            ; ---------------------------------------------------------------------------
0010FAF4                            ; Eyes
0010FAF4                            ; ---------------------------------------------------------------------------
0010FAF4                            
0010FAF4                            BbushObj_QuagmireEyes:                          
0010FAF4 7000                               moveq   #0,d0
0010FAF6 1028 0024                          move.b  obj.Action(a0),d0
0010FAFA 323B 0000                          move.w  .Index(pc,d0.w),d1
0010FAFE 4EFB 1000                          jmp     .Index(pc,d1.w)
0010FB02                            
0010FB02                            ; ---------------------------------------------------------------------------
0010FB02                            .Index:                                
0010FB02 0000                               dc.w QuagmireEyes_Init-.Index
0010FB04 0000                               dc.w QuagmireEyes_Display-.Index
0010FB06                            ; ---------------------------------------------------------------------------
0010FB06                            
0010FB06                            QuagmireEyes_Init:                         
0010FB06 5428 0024                          addq.b  #2,obj.Action(a0)
0010FB0A 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
0010FB12 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
0010FB18 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
0010FB1E 117C 0005 0019                     move.b  #5,obj.Priority(a0)
0010FB24 117C 0003 001A                     move.b  #3,obj.Frame(a0)
0010FB2A                            
0010FB2A                            QuagmireEyes_Display:   
0010FB2A 43F8 D080                          lea     membushHead,a1
0010FB2E 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
0010FB34 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
0010FB3A 0468 0016 000C                     sub.w   #22,obj.Y(a0)                        
0010FB40 4EB9 0000 E742                     jsr     _objectDraw  
0010FB46 4E75                               rts
0010FB48                            
0010FB48                            ; ---------------------------------------------------------------------------
0010FB48                            ; Mouth
0010FB48                            ; ---------------------------------------------------------------------------
0010FB48                            
0010FB48                            BbushObj_QuagmireMouth:
0010FB48 7000                               moveq   #0,d0
0010FB4A 1028 0024                          move.b  obj.Action(a0),d0
0010FB4E 323B 0000                          move.w  .Index(pc,d0.w),d1
0010FB52 4EFB 1000                          jmp     .Index(pc,d1.w)
0010FB56                            
0010FB56                            ; ---------------------------------------------------------------------------
0010FB56                            .Index:                                
0010FB56 0000                               dc.w QuagmireMouth_Init1-.Index
0010FB58 0000                               dc.w QuagmireMouth_Speak1-.Index
0010FB5A 0000                               dc.w QuagmireMouth_Init2-.Index
0010FB5C 0000                               dc.w QuagmireMouth_Speak2-.Index
0010FB5E                            ; ---------------------------------------------------------------------------
0010FB5E                            
0010FB5E                            QuagmireMouth_Init1:                         
0010FB5E 5428 0024                          addq.b  #2,obj.Action(a0)
0010FB62 217C 0000 0000 0004                move.l  #SprPat_Quagmire,obj.Map(a0)
0010FB6A 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
0010FB70 117C 0008 0001                     move.b  #%00001000,obj.Render(a0)
0010FB76 117C 0005 0019                     move.b  #5,obj.Priority(a0)
0010FB7C 117C 0008 001A                     move.b  #8,obj.Frame(a0)
0010FB82                            
0010FB82                            QuagmireMouth_Speak1:   
0010FB82 6100 0000                          bsr.w   _quagEyeAdjToHead
0010FB86 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
0010FB8C 6100 0000                          bsr.w   _objectAnimate
0010FB90 4EB9 0000 E742                     jsr     _objectDraw  
0010FB96 4E75                               rts
0010FB98                            
0010FB98                            QuagmireMouth_Init2:   
0010FB98 5228 001C                          addq.b  #1,obj.Anim(a0)
0010FB9C 5428 0024                          addq.b  #2,obj.Action(a0)
0010FBA0 5438 D0A4                          add.b   #2,(membushHead+obj.Action)
0010FBA4                            
0010FBA4                            QuagmireMouth_Speak2:
0010FBA4 6100 0000                          bsr.w   _quagEyeAdjToHead
0010FBA8 43F9 0000 0000                     lea     AniSpr_QuagmireMouth,a1
0010FBAE 6100 0000                          bsr.w   _objectAnimate
0010FBB2 4EB9 0000 E742                     jsr     _objectDraw  
0010FBB8 4E75                               rts        
0010FBBA                            
0010FBBA                            _quagEyeAdjToHead:
0010FBBA 43F8 D080                          lea     membushHead,a1
0010FBBE 3169 0008 0008                     move.w  obj.X(a1),obj.X(a0)
0010FBC4 3169 000C 000C                     move.w  obj.Y(a1),obj.Y(a0)
0010FBCA 0668 000A 000C                     add.w   #10,obj.Y(a0)   
0010FBD0 4E75                               rts
0010FBD2                            
0010FBD2                            ; ---------------------------------------------------------------------------
0010FBD2                            AniSpr_QuagmireMouth:
0010FBD2                            .tbl
0010FBD2 0000                               dc.w quagvocal_imglennqua-.tbl
0010FBD4 0000                               dc.w quagvocal_beebush-.tbl
0010FBD6                            
0010FBD6                            quagvocal_imglennqua: 
0010FBD6                            
0010FBD6                                    ; playback speed delta (wait time)
0010FBD6 04                                 dc.b   4
0010FBD7                            
0010FBD7                                    ; "...im glenn quagmire"
0010FBD7 0808 0808 0806 0807 0506+          dc.b   8, 8, 8, 8, 8, 6, 8, 7, 5, 6, 8, 5, 6, 7, 8, 6, 5
0010FBE8                            
0010FBE8                                    ; "...and this is-"
0010FBE8 0808 0808 0806 0706 0706+          dc.b   8, 8, 8, 8, 8, 6, 7, 6, 7, 6, 7
0010FBF3                            
0010FBF3                                    ; routine chg
0010FBF3 FC                                 dc.b   $FC
0010FBF4                            
0010FBF4                                    even
0010FBF4                            
0010FBF4                            quagvocal_beebush:
0010FBF4                            
0010FBF4                                    ; playback speed delta (wait time)
0010FBF4 04                                 dc.b   4
0010FBF5                            
0010FBF5                                    ; "bee bush"
0010FBF5 0708 0806 0608 0805 0507+          dc.b   7, 8, 8, 6, 6, 8, 8, 5, 5, 7, 7, 8, 8, 8, 8
0010FC04                            
0010FC04                                    ; loop 8 forever
0010FC04 FE01                               dc.b   $FE, 1
0010FC06                                    even
0010FC06                            
0010FC06                            ; ---------------------------------------------------------------------------      
0010FC06                            ; !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
0010FC06                            ; DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG DEBUG 
0010FC06                            ; ---------------------------------------------------------------------------  
0010FC06                            
0010FC06                            BbushObj_Dbug:                          
0010FC06 4E75                               rts
0010FC08                            
0010FC08                            SprPat_Quagmire:
0010FC08                                    include "beebush/Objects/SPRPAT_QUAGMIRE.asm"
0010FC08                            Map_879c:
0010FC08 0000                       Map_879c_0: 	dc.w Map_879c_12-Map_879c
0010FC0A 0000                       Map_879c_2: 	dc.w Map_879c_13-Map_879c
0010FC0C 0000                       Map_879c_4: 	dc.w Map_879c_3C-Map_879c
0010FC0E 0000                       Map_879c_6: 	dc.w Map_879c_56-Map_879c
0010FC10 0000                       Map_879c_8: 	dc.w Map_879c_61-Map_879c
0010FC12 0000                       Map_879c_A: 	dc.w Map_879c_6C-Map_879c
0010FC14 0000                       Map_879c_C: 	dc.w Map_879c_72-Map_879c
0010FC16 0000                       Map_879c_E: 	dc.w Map_879c_7D-Map_879c
0010FC18 0000                       Map_879c_10: 	dc.w Map_879c_88-Map_879c
0010FC1A 00                         Map_879c_12: 	dc.b $0
0010FC1B 08                         Map_879c_13: 	dc.b $8
0010FC1C D20F 0000 E7               	dc.b $D2, $F, $0, $0, $E7
0010FC21 D20F 0010 07               	dc.b $D2, $F, $0, $10, $7
0010FC26 F20F 0020 D7               	dc.b $F2, $F, $0, $20, $D7
0010FC2B F20F 0030 F7               	dc.b $F2, $F, $0, $30, $F7
0010FC30 F207 0040 17               	dc.b $F2, $7, $0, $40, $17
0010FC35 120E 0048 D7               	dc.b $12, $E, $0, $48, $D7
0010FC3A 120E 0054 F7               	dc.b $12, $E, $0, $54, $F7
0010FC3F 1205 0060 17               	dc.b $12, $5, $0, $60, $17
0010FC44 05                         Map_879c_3C: 	dc.b $5
0010FC45 E70F 0064 E7               	dc.b $E7, $F, $0, $64, $E7
0010FC4A 070F 0074 E7               	dc.b $7, $F, $0, $74, $E7
0010FC4F E70B 0084 07               	dc.b $E7, $B, $0, $84, $7
0010FC54 070B 0090 07               	dc.b $7, $B, $0, $90, $7
0010FC59 D709 00DD EF               	dc.b $D7, $9, $0, $DD, $EF
0010FC5E 02                         Map_879c_56: 	dc.b $2
0010FC5F F306 00A8 ED               	dc.b $F3, $6, $0, $A8, $ED
0010FC64 F306 00AE 01               	dc.b $F3, $6, $0, $AE, $1
0010FC69 02                         Map_879c_61: 	dc.b $2
0010FC6A F306 009C ED               	dc.b $F3, $6, $0, $9C, $ED
0010FC6F F306 00A2 01               	dc.b $F3, $6, $0, $A2, $1
0010FC74 01                         Map_879c_6C: 	dc.b $1
0010FC75 FD09 00B4 F2               	dc.b $FD, $9, $0, $B4, $F2
0010FC7A 02                         Map_879c_72: 	dc.b $2
0010FC7B F70E 00BA F0               	dc.b $F7, $E, $0, $BA, $F0
0010FC80 EF00 00C6 08               	dc.b $EF, $0, $0, $C6, $8
0010FC85 02                         Map_879c_7D: 	dc.b $2
0010FC86 F306 00C7 00               	dc.b $F3, $6, $0, $C7, $0
0010FC8B FB06 00CD F0               	dc.b $FB, $6, $0, $CD, $F0
0010FC90 02                         Map_879c_88: 	dc.b $2
0010FC91 FC0D 00D3 EC               	dc.b $FC, $D, $0, $D3, $EC
0010FC96 F404 00DB 04               	dc.b $F4, $4, $0, $DB, $4
0010FC9C 00                         	even
0010FC9C 00                         	even
0010FC9C 00                         	even
0010FC9C                                    include  "beebush/Objects/OBJ_PLAYER.asm"
0010FC9C                                   
0010FC9C =00000030                  bbplay.WindowSz        equ     $30
0010FC9C =00000031                  bbplay.WindowCnt       equ     $31
0010FC9C =00000034                  bbplay.Xorg            equ     $34
0010FC9C =00000036                  bbplay.Yorg            equ     $36
0010FC9C                            
0010FC9C                            BbushObj_Player:                          
0010FC9C 7000                               moveq   #0,d0
0010FC9E 1028 0024                          move.b  obj.Action(a0),d0
0010FCA2 323B 0000                          move.w  .Index(pc,d0.w),d1
0010FCA6 4EFB 1000                          jmp     .Index(pc,d1.w)
0010FCAA                            ; ---------------------------------------------------------------------------
0010FCAA                            .Index:                                
0010FCAA 0000                               dc.w BbushPlayer_InitMain-.Index
0010FCAC 0000                               dc.w BbushPlayer_Main-.Index
0010FCAE                            ; ---------------------------------------------------------------------------
0010FCAE                            
0010FCAE                            BbushPlayer_InitMain:                         
0010FCAE 5428 0024                          addq.b  #2,obj.Action(a0)
0010FCB2 117C 0012 0016                     move.b  #18,obj.YRad(a0)
0010FCB8 117C 0009 0017                     move.b  #9,obj.XRad(a0)
0010FCBE 217C 0000 0000 0004                move.l  #SprPat_BBushPlayer,obj.Map(a0)
0010FCC6 317C 0300 0002                     move.w  #QUAGTILE,obj.Tile(a0)
0010FCCC 117C 0000 0001                     move.b  #0,obj.Render(a0)
0010FCD2 317C 014A 0008                     move.w  #160+42+128,obj.X(a0)
0010FCD8 317C 00E4 000A                     move.w  #100+128,obj.YScr(a0)
0010FCDE 117C 0002 0019                     move.b  #2,obj.Priority(a0)
0010FCE4 117C 0003 001A                     move.b  #3,obj.Frame(a0)
0010FCEA 317C 9204 0030                     move.w  #$9204,bbplay.WindowSz(a0)
0010FCF0 6000                               bra.s   BbushPlayer_Main
0010FCF2                            
0010FCF2                            .strCams:
0010FCF2 2070 6C61 7920 6361 6D42+          dc.b    ' play camB camC camZ   dist                 ', -1
0010FD20 00                                 even
0010FD20                            
0010FD20                            ; ---------------------------------------------------------------------------
0010FD20                            
0010FD20                            BbushPlayer_Main:                           
0010FD20 1838 F604                          move.b  joypad.w,d4         ;SACBRLDU
0010FD24 1A38 F605                          move.b  joypadPress.w,d5    
0010FD28 6100 0000                          bsr.w   _bbplayNormalCtrl 
0010FD2C 4EF9 0000 E742                     jmp     _objectDraw   
0010FD32                            
0010FD32                            ; ---------------------------------------------------------------------------
0010FD32                            ; Control window vertical location  (VDPREG $12)
0010FD32                            ; ---------------------------------------------------------------------------
0010FD32                            
0010FD32                            _bbplayNormalCtrl:                                                 
0010FD32 0804 0002                          btst    #2,d4
0010FD36 6700                               beq.s   .NoLeft
0010FD38 5278 F700                          addi.w  #1,cameraAPosX
0010FD3C 5278 F710                          addi.w  #1,cameraCPosX
0010FD40 53B8 F608                          subi.l  #1,distance
0010FD44 43F9 0000 0000                     lea     AniSpr_QuagmirePlayer,a1
0010FD4A 4EF9 0000 0000                     jmp    _objectAnimate
0010FD50                            .NoLeft:                                             
0010FD50 4E75                               rts
0010FD52                            
0010FD52                            AniSpr_QuagmirePlayer:
0010FD52                            .tbl
0010FD52 0000                               dc.w .qaugplaywalk-.tbl
0010FD54                            
0010FD54                            .qaugplaywalk: 
0010FD54 08                                 dc.b   8
0010FD55 0102 0304 0506 07FF                dc.b   1, 2, 3, 4, 5, 6, 7, $FF
0010FD5E 00                                 even 
0010FD5E                            
0010FD5E                            ; ---------------------------------------------------------------------------
0010FD5E                            
0010FD5E                            _bbplayPrintCams:
0010FD5E 4E75                               rts
0010FD60                            
0010FD60                            ; ---------------------------------------------------------------------------
0010FD60                            
0010FD60                            SprPat_BBushPlayer:
0010FD60                                    include "beebush/Objects/SPRPAT_PLAYER.asm"
0010FD60                            Map_ffc1:
0010FD60 0000                       Map_ffc1_0: 	dc.w Map_ffc1_14-Map_ffc1
0010FD62 0000                       Map_ffc1_2: 	dc.w Map_ffc1_15-Map_ffc1
0010FD64 0000                       Map_ffc1_4: 	dc.w Map_ffc1_43-Map_ffc1
0010FD66 0000                       Map_ffc1_6: 	dc.w Map_ffc1_71-Map_ffc1
0010FD68 0000                       Map_ffc1_8: 	dc.w Map_ffc1_9F-Map_ffc1
0010FD6A 0000                       Map_ffc1_A: 	dc.w Map_ffc1_CD-Map_ffc1
0010FD6C 0000                       Map_ffc1_C: 	dc.w Map_ffc1_FB-Map_ffc1
0010FD6E 0000                       Map_ffc1_E: 	dc.w Map_ffc1_129-Map_ffc1
0010FD70 0000                       Map_ffc1_10: 	dc.w Map_ffc1_157-Map_ffc1
0010FD72 0000                       Map_ffc1_12: 	dc.w Map_ffc1_15D-Map_ffc1
0010FD74 00                         Map_ffc1_14: 	dc.b $0
0010FD75 09                         Map_ffc1_15: 	dc.b $9
0010FD76 D10F 0103 EF               	dc.b $D1, $F, $1, $3, $EF
0010FD7B F309 0113 FB               	dc.b $F3, $9, $1, $13, $FB
0010FD80 E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
0010FD85 E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
0010FD8A EE04 007E FC               	dc.b $EE, $4, $0, $7E, $FC
0010FD8F 000A 0165 ED               	dc.b $0, $A, $1, $65, $ED
0010FD94 1806 016E ED               	dc.b $18, $6, $1, $6E, $ED
0010FD99 000E 0931 04               	dc.b $0, $E, $9, $31, $4
0010FD9E 160A 093D 0C               	dc.b $16, $A, $9, $3D, $C
0010FDA3 09                         Map_ffc1_43: 	dc.b $9
0010FDA4 D00F 00E3 F1               	dc.b $D0, $F, $0, $E3, $F1
0010FDA9 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
0010FDAE E40E 0119 0B               	dc.b $E4, $E, $1, $19, $B
0010FDB3 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
0010FDB8 EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
0010FDBD 000A 0165 EE               	dc.b $0, $A, $1, $65, $EE
0010FDC2 1806 016E EE               	dc.b $18, $6, $1, $6E, $EE
0010FDC7 000A 0956 04               	dc.b $0, $A, $9, $56, $4
0010FDCC 1806 095F 0C               	dc.b $18, $6, $9, $5F, $C
0010FDD1 09                         Map_ffc1_71: 	dc.b $9
0010FDD2 D00F 00E3 F3               	dc.b $D0, $F, $0, $E3, $F3
0010FDD7 F309 0113 FC               	dc.b $F3, $9, $1, $13, $FC
0010FDDC E40E 0119 0C               	dc.b $E4, $E, $1, $19, $C
0010FDE1 E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
0010FDE6 EE04 007E FE               	dc.b $EE, $4, $0, $7E, $FE
0010FDEB FF0A 0156 EE               	dc.b $FF, $A, $1, $56, $EE
0010FDF0 1706 015F EE               	dc.b $17, $6, $1, $5F, $EE
0010FDF5 000A 0956 05               	dc.b $0, $A, $9, $56, $5
0010FDFA 1806 095F 0D               	dc.b $18, $6, $9, $5F, $D
0010FDFF 09                         Map_ffc1_9F: 	dc.b $9
0010FE00 D00F 00E3 F5               	dc.b $D0, $F, $0, $E3, $F5
0010FE05 F309 0113 FD               	dc.b $F3, $9, $1, $13, $FD
0010FE0A E40E 0119 0D               	dc.b $E4, $E, $1, $19, $D
0010FE0F E40E 0919 E0               	dc.b $E4, $E, $9, $19, $E0
0010FE14 EE04 007E FF               	dc.b $EE, $4, $0, $7E, $FF
0010FE19 FF0A 0174 EF               	dc.b $FF, $A, $1, $74, $EF
0010FE1E 1706 017D EF               	dc.b $17, $6, $1, $7D, $EF
0010FE23 000A 0956 06               	dc.b $0, $A, $9, $56, $6
0010FE28 1806 095F 0E               	dc.b $18, $6, $9, $5F, $E
0010FE2D 09                         Map_ffc1_CD: 	dc.b $9
0010FE2E D10F 00F3 F7               	dc.b $D1, $F, $0, $F3, $F7
0010FE33 F309 0113 FE               	dc.b $F3, $9, $1, $13, $FE
0010FE38 E40E 0119 0E               	dc.b $E4, $E, $1, $19, $E
0010FE3D E40E 0919 E1               	dc.b $E4, $E, $9, $19, $E1
0010FE42 EE04 007E 00               	dc.b $EE, $4, $0, $7E, $0
0010FE47 FF0E 0131 E8               	dc.b $FF, $E, $1, $31, $E8
0010FE4C 1706 013D E8               	dc.b $17, $6, $1, $3D, $E8
0010FE51 000A 0956 07               	dc.b $0, $A, $9, $56, $7
0010FE56 1806 095F 0F               	dc.b $18, $6, $9, $5F, $F
0010FE5B 09                         Map_ffc1_FB: 	dc.b $9
0010FE5C D10F 00E3 F3               	dc.b $D1, $F, $0, $E3, $F3
0010FE61 F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
0010FE66 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
0010FE6B E40E 0919 DF               	dc.b $E4, $E, $9, $19, $DF
0010FE70 EE04 007E FB               	dc.b $EE, $4, $0, $7E, $FB
0010FE75 000A 0156 EC               	dc.b $0, $A, $1, $56, $EC
0010FE7A 1806 015F EC               	dc.b $18, $6, $1, $5F, $EC
0010FE7F 100B 0943 0B               	dc.b $10, $B, $9, $43, $B
0010FE84 0009 094F 04               	dc.b $0, $9, $9, $4F, $4
0010FE89 09                         Map_ffc1_129: 	dc.b $9
0010FE8A D00F 00E3 F2               	dc.b $D0, $F, $0, $E3, $F2
0010FE8F F309 0113 FA               	dc.b $F3, $9, $1, $13, $FA
0010FE94 E40E 0119 0A               	dc.b $E4, $E, $1, $19, $A
0010FE99 E40E 0919 DE               	dc.b $E4, $E, $9, $19, $DE
0010FE9E EE04 007E FD               	dc.b $EE, $4, $0, $7E, $FD
0010FEA3 000A 0165 EC               	dc.b $0, $A, $1, $65, $EC
0010FEA8 1806 016E EC               	dc.b $18, $6, $1, $6E, $EC
0010FEAD 000A 0974 04               	dc.b $0, $A, $9, $74, $4
0010FEB2 1806 097D 0C               	dc.b $18, $6, $9, $7D, $C
0010FEB7 01                         Map_ffc1_157: 	dc.b $1
0010FEB8 F00F 0183 F0               	dc.b $F0, $F, $1, $83, $F0
0010FEBD 01                         Map_ffc1_15D: 	dc.b $1
0010FEBE F00F 0193 F0               	dc.b $F0, $F, $1, $93, $F0
0010FEC4 00                         	even
0010FEC4 00                         	even
0010FEC4 00                         	even
0010FEC4                            
0010FEC4                            ; ---------------------------------------------------------------------------
0010FEC4                            ; Animate an object based on an animation script
0010FEC4                            ; !!!TODO: document script
0010FEC4                            ; ---------------------------------------------------------------------------
0010FEC4                            
0010FEC4                            _objectAnimate:                         
0010FEC4 7000                               moveq   #0,d0
0010FEC6 1028 001C                          move.b  obj.Anim(a0),d0
0010FECA B028 001D                          cmp.b   obj.LastAnim(a0),d0
0010FECE 6700                               beq.s   .DoAnim
0010FED0 1140 001D                          move.b  d0,obj.LastAnim(a0)
0010FED4 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
0010FEDA 117C 0000 001E                     move.b  #0,obj.FrameTimer(a0)
0010FEE0                            
0010FEE0                            .DoAnim:                               
0010FEE0 D040                               add.w   d0,d0
0010FEE2 D2F1 0000                          adda.w  (a1,d0.w),a1
0010FEE6 5328 001E                          subq.b  #1,obj.FrameTimer(a0)
0010FEEA 6A00                               bpl.s   .Exit
0010FEEC 1151 001E                          move.b  (a1),obj.FrameTimer(a0)
0010FEF0 7200                               moveq   #0,d1
0010FEF2 1228 001B                          move.b  obj.AnimFrame(a0),d1
0010FEF6 1031 1001                          move.b  1(a1,d1.w),d0
0010FEFA 6B00                               bmi.s   .HandleFlags
0010FEFC                            
0010FEFC                            .Finish:                               
0010FEFC 1200                               move.b  d0,d1
0010FEFE 0200 001F                          andi.b  #$1F,d0
0010FF02 1140 001A                          move.b  d0,obj.Frame(a0)
0010FF06 1028 0022                          move.b  obj.Status(a0),d0
0010FF0A 0200 0003                          andi.b  #3,d0
0010FF0E 0228 00FC 0001                     andi.b  #$FC,obj.Render(a0)
0010FF14 EA09                               lsr.b   #5,d1
0010FF16 B101                               eor.b   d0,d1
0010FF18 8328 0001                          or.b    d1,obj.Render(a0)
0010FF1C 5228 001B                          addq.b  #1,obj.AnimFrame(a0)
0010FF20                            
0010FF20                            .Exit:                                 
0010FF20 4E75                               rts
0010FF22                            
0010FF22                            .HandleFlags:                          
0010FF22 5200                               addq.b  #1,d0
0010FF24 6600                               bne.s   .NotLoop
0010FF26 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
0010FF2C 1029 0001                          move.b  1(a1),d0
0010FF30 60CA                               bra.s   .Finish
0010FF32                            
0010FF32                            .NotLoop:                              
0010FF32 5200                               addq.b  #1,d0
0010FF34 6600                               bne.s   .NotBack
0010FF36 1031 1002                          move.b  2(a1,d1.w),d0
0010FF3A 9128 001B                          sub.b   d0,obj.AnimFrame(a0)
0010FF3E 9200                               sub.b   d0,d1
0010FF40 1031 1001                          move.b  1(a1,d1.w),d0
0010FF44 60B6                               bra.s   .Finish
0010FF46                            
0010FF46                            .NotBack:                              
0010FF46 5200                               addq.b  #1,d0
0010FF48 6600                               bne.s   .NotChgAni
0010FF4A 1171 1002 001C                     move.b  2(a1,d1.w),obj.Anim(a0)
0010FF50                            
0010FF50                            .NotChgAni:                            
0010FF50 5200                               addq.b  #1,d0
0010FF52 6600                               bne.s   .NotRoutine
0010FF54 5428 0024                          addq.b  #2,obj.Action(a0)
0010FF58                            
0010FF58                            .NotRoutine:                           
0010FF58 5200                               addq.b  #1,d0
0010FF5A 6600                               bne.s   .NotReset
0010FF5C 117C 0000 001B                     move.b  #0,obj.AnimFrame(a0)
0010FF62 4228 0025                          clr.b   obj.SubAction(a0)
0010FF66                            
0010FF66                            .NotReset:                             
0010FF66 4E75                               rts
0010FF66 4E75                               rts
0010FF68                            
0010FF68                            ; ---------------------------------------------------------------------------
0010FF68                            
0010FF68                            _beebushDbugLoad:
0010FF68 4E75                               rts
0010FF6A                            ; ---------------------------------------------------------------------------   
0010FF6A                            ; VBlank code relocation from main file (called from Jmptos)
0010FF6A                            ; ---------------------------------------------------------------------------
0010FF6A                            
0010FF6A                            VBLANK_BEEBUSH:                               
0010FF6A 4EB8 1AB0                          jsr   ReadJoypads
0010FF6E                            
0010FF6E 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
0010FF76                            .WaitZ80:                              
0010FF76 0839 0000 00A1 1100                btst    #0,Z80BUS
0010FF7E 66F6                               bne.s   .WaitZ80
0010FF80                            
0010FF80 33FC 8B00 00C0 0004                move.w  #$8B00+%0000,VDPCTRL
0010FFDA 23F8 F61A 00C0 0000                move.l  mainAPosX.w,VDPDATA
0010FFE2                            
0010FFE2 33FC 0000 00A1 1100                move.w  #0,Z80BUS
0010FFEA 4E75                               rts
0010FFEC                            
0010FFEC                            ; ---------------------------------------------------------------------------
0010FFEC                            
0010FFEC                            VBLANK_BEEBUSHSCR:                               
0010FFEC 4EB8 1AB0                          jsr  ReadJoypads
0010FFF0                            
0010FFF0 33FC 0100 00A1 1100                move.w  #$100,Z80BUS
0010FFF8                            .WaitZ80:                              
0010FFF8 0839 0000 00A1 1100                btst    #0,Z80BUS
00110000 66F6                               bne.s   .WaitZ80
00110002                            
00110002 33FC 8B03 00C0 0004                move.w  #$8B00+%0011,VDPCTRL
00110076                            
00110076 33FC 0000 00A1 1100                move.w  #0,Z80BUS
0011007E 4E75                               rts
0011007E 4E75                               rts
00110080                            ; end of 'ROM'
00110080                            EndOfRom:
00110080                            
00110080                            
