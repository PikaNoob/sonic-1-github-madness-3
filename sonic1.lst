00000000                            ; /=========================================================================\
00000000                            ; ยบ	This file is generated by The Interactive Disassembler (IDA)	    ยบ
00000000                            ; ยบ	Copyright (c) 2003 by DataRescue sa/nv,	<ida@datarescue.com>	    ยบ
00000000                            ; \=========================================================================/
00000000                            ;
00000000                            ; Disassembly created by Hivebrain
00000000                            ; thanks to drx and Stealth
00000000                            
00000000                            ; Processor:	    68000
00000000                            ; Target Assembler: 680x0 Assembler in MRI compatible mode
00000000                            ; This file should be compiled with "as	-M"
00000000                            
00000000                            ; ===========================================================================
00000000                            align macro
00000000                            	cnop 0,\1
00000000                            	endm
00000000                            		include	"sound/smps2asm_inc.asm"
00000000                            ; =============================================================================================
00000000                            ; Created by Flamewing, based on S1SMPS2ASM version 1.1 by Marc Gordon (AKA Cinossu)
00000000                            ; =============================================================================================
00000000 =00000005                  SonicDriverVer:	equ	5
00000000                            align0	macro	val
00000000                            	cnop	0,\val
00000000                                endm
00000000                            	
00000000                            smpsWeirdD1LRR macro
00000000                            		dc.b	$F9
00000000                            	endm
00000000                            nMaxPSG		EQU nA5
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Standard Octave Pitch Equates
00000000 =FFFFFF88                  smpsPitch10lo:	EQU -120	; $88
00000000 =FFFFFF94                  smpsPitch09lo:	EQU -108	; $94
00000000 =FFFFFFA0                  smpsPitch08lo:	EQU  -96	; $A0
00000000 =FFFFFFAC                  smpsPitch07lo:	EQU  -84	; $AC
00000000 =FFFFFFB8                  smpsPitch06lo:	EQU  -72	; $B8
00000000 =FFFFFFC4                  smpsPitch05lo:	EQU  -60	; $C4
00000000 =FFFFFFD0                  smpsPitch04lo:	EQU  -48	; $D0
00000000 =FFFFFFDC                  smpsPitch03lo:	EQU  -36	; $DC
00000000 =FFFFFFE8                  smpsPitch02lo:	EQU  -24	; $E8
00000000 =FFFFFFF4                  smpsPitch01lo:	EQU  -12	; $F4
00000000 =00000000                  smpsPitch00:	EQU    0	; $00
00000000 =0000000C                  smpsPitch01hi:	EQU  +12	; $0C
00000000 =00000018                  smpsPitch02hi:	EQU  +24	; $18
00000000 =00000024                  smpsPitch03hi:	EQU  +36	; $24
00000000 =00000030                  smpsPitch04hi:	EQU  +48	; $30
00000000 =0000003C                  smpsPitch05hi:	EQU  +60	; $3C
00000000 =00000048                  smpsPitch06hi:	EQU  +72	; $48
00000000 =00000054                  smpsPitch07hi:	EQU  +84	; $54
00000000 =00000060                  smpsPitch08hi:	EQU  +96	; $60
00000000 =0000006C                  smpsPitch09hi:	EQU +108	; $6C
00000000 =00000078                  smpsPitch10hi:	EQU +120	; $78
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Note Equates
00000000 =00000080                  nRst:	EQU $80		; $80
00000000 =00000081                  nC0:	EQU $81		; $81
00000000 =00000082                  nCs0:	EQU nC0+1	; $82
00000000 =00000083                  nD0:	EQU nCs0+1	; $83
00000000 =00000084                  nEb0:	EQU nD0+1	; $84
00000000 =00000085                  nE0:	EQU nEb0+1	; $85
00000000 =00000086                  nF0:	EQU nE0+1	; $86
00000000 =00000087                  nFs0:	EQU nF0+1	; $87
00000000 =00000088                  nG0:	EQU nFs0+1	; $88
00000000 =00000089                  nAb0:	EQU nG0+1	; $89
00000000 =0000008A                  nA0:	EQU nAb0+1	; $8A
00000000 =0000008B                  nBb0:	EQU nA0+1	; $8B
00000000 =0000008C                  nB0:	EQU nBb0+1	; $8C
00000000 =0000008D                  nC1:	EQU nB0+1	; $8D
00000000 =0000008E                  nCs1:	EQU nC1+1	; $8E
00000000 =0000008F                  nD1:	EQU nCs1+1	; $8F
00000000 =00000090                  nEb1:	EQU nD1+1	; $90
00000000 =00000091                  nE1:	EQU nEb1+1	; $91
00000000 =00000092                  nF1:	EQU nE1+1	; $92
00000000 =00000093                  nFs1:	EQU nF1+1	; $93
00000000 =00000094                  nG1:	EQU nFs1+1	; $94
00000000 =00000095                  nAb1:	EQU nG1+1	; $95
00000000 =00000096                  nA1:	EQU nAb1+1	; $96
00000000 =00000097                  nBb1:	EQU nA1+1	; $97
00000000 =00000098                  nB1:	EQU nBb1+1	; $98
00000000 =00000099                  nC2:	EQU nB1+1	; $99
00000000 =0000009A                  nCs2:	EQU nC2+1	; $9A
00000000 =0000009B                  nD2:	EQU nCs2+1	; $9B
00000000 =0000009C                  nEb2:	EQU nD2+1	; $9C
00000000 =0000009D                  nE2:	EQU nEb2+1	; $9D
00000000 =0000009E                  nF2:	EQU nE2+1	; $9E
00000000 =0000009F                  nFs2:	EQU nF2+1	; $9F
00000000 =000000A0                  nG2:	EQU nFs2+1	; $A0
00000000 =000000A1                  nAb2:	EQU nG2+1	; $A1
00000000 =000000A2                  nA2:	EQU nAb2+1	; $A2
00000000 =000000A3                  nBb2:	EQU nA2+1	; $A3
00000000 =000000A4                  nB2:	EQU nBb2+1	; $A4
00000000 =000000A5                  nC3:	EQU nB2+1	; $A5
00000000 =000000A6                  nCs3:	EQU nC3+1	; $A6
00000000 =000000A7                  nD3:	EQU nCs3+1	; $A7
00000000 =000000A8                  nEb3:	EQU nD3+1	; $A8
00000000 =000000A9                  nE3:	EQU nEb3+1	; $A9
00000000 =000000AA                  nF3:	EQU nE3+1	; $AA
00000000 =000000AB                  nFs3:	EQU nF3+1	; $AB
00000000 =000000AC                  nG3:	EQU nFs3+1	; $AC
00000000 =000000AD                  nAb3:	EQU nG3+1	; $AD
00000000 =000000AE                  nA3:	EQU nAb3+1	; $AE
00000000 =000000AF                  nBb3:	EQU nA3+1	; $AF
00000000 =000000B0                  nB3:	EQU nBb3+1	; $B0
00000000 =000000B1                  nC4:	EQU nB3+1	; $B1
00000000 =000000B2                  nCs4:	EQU nC4+1	; $B2
00000000 =000000B3                  nD4:	EQU nCs4+1	; $B3
00000000 =000000B4                  nEb4:	EQU nD4+1	; $B4
00000000 =000000B5                  nE4:	EQU nEb4+1	; $B5
00000000 =000000B6                  nF4:	EQU nE4+1	; $B6
00000000 =000000B7                  nFs4:	EQU nF4+1	; $B7
00000000 =000000B8                  nG4:	EQU nFs4+1	; $B8
00000000 =000000B9                  nAb4:	EQU nG4+1	; $B9
00000000 =000000BA                  nA4:	EQU nAb4+1	; $BA
00000000 =000000BB                  nBb4:	EQU nA4+1	; $BB
00000000 =000000BC                  nB4:	EQU nBb4+1	; $BC
00000000 =000000BD                  nC5:	EQU nB4+1	; $BD
00000000 =000000BE                  nCs5:	EQU nC5+1	; $BE
00000000 =000000BF                  nD5:	EQU nCs5+1	; $BF
00000000 =000000C0                  nEb5:	EQU nD5+1	; $C0
00000000 =000000C1                  nE5:	EQU nEb5+1	; $C1
00000000 =000000C2                  nF5:	EQU nE5+1	; $C2
00000000 =000000C3                  nFs5:	EQU nF5+1	; $C3
00000000 =000000C4                  nG5:	EQU nFs5+1	; $C4
00000000 =000000C5                  nAb5:	EQU nG5+1	; $C5
00000000 =000000C6                  nA5:	EQU nAb5+1	; $C6
00000000 =000000C7                  nBb5:	EQU nA5+1	; $C7
00000000 =000000C8                  nB5:	EQU nBb5+1	; $C8
00000000 =000000C9                  nC6:	EQU nB5+1	; $C9
00000000 =000000CA                  nCs6:	EQU nC6+1	; $CA
00000000 =000000CB                  nD6:	EQU nCs6+1	; $CB
00000000 =000000CC                  nEb6:	EQU nD6+1	; $CC
00000000 =000000CD                  nE6:	EQU nEb6+1	; $CD
00000000 =000000CE                  nF6:	EQU nE6+1	; $CE
00000000 =000000CF                  nFs6:	EQU nF6+1	; $CF
00000000 =000000D0                  nG6:	EQU nFs6+1	; $D0
00000000 =000000D1                  nAb6:	EQU nG6+1	; $D1
00000000 =000000D2                  nA6:	EQU nAb6+1	; $D2
00000000 =000000D3                  nBb6:	EQU nA6+1	; $D3
00000000 =000000D4                  nB6:	EQU nBb6+1	; $D4
00000000 =000000D5                  nC7:	EQU nB6+1	; $D5
00000000 =000000D6                  nCs7:	EQU nC7+1	; $D6
00000000 =000000D7                  nD7:	EQU nCs7+1	; $D7
00000000 =000000D8                  nEb7:	EQU nD7+1	; $D8
00000000 =000000D9                  nE7:	EQU nEb7+1	; $D9
00000000 =000000DA                  nF7:	EQU nE7+1	; $DA
00000000 =000000DB                  nFs7:	EQU nF7+1	; $DB
00000000 =000000DC                  nG7:	EQU nFs7+1	; $DC
00000000 =000000DD                  nAb7:	EQU nG7+1	; $DD
00000000 =000000DE                  nA7:	EQU nAb7+1	; $DE
00000000 =000000DF                  nBb7:	EQU nA7+1	; $DF
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG envelope equates
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000 =0000000D                  fTone_0D:	EQU fTone_0C+1
00000000 =0000000E                  fTone_0E:	EQU fTone_0D+1
00000000 =0000000F                  fTone_0F:	EQU fTone_0E+1
00000000 =00000010                  fTone_10:	EQU fTone_0F+1
00000000 =00000011                  fTone_11:	EQU fTone_10+1
00000000 =00000012                  fTone_12:	EQU fTone_11+1
00000000 =00000013                  fTone_13:	EQU fTone_12+1
00000000 =00000014                  fTone_14:	EQU fTone_13+1
00000000 =00000015                  fTone_15:	EQU fTone_14+1
00000000 =00000016                  fTone_16:	EQU fTone_15+1
00000000 =00000017                  fTone_17:	EQU fTone_16+1
00000000 =00000018                  fTone_18:	EQU fTone_17+1
00000000 =00000019                  fTone_19:	EQU fTone_18+1
00000000 =0000001A                  fTone_1A:	EQU fTone_19+1
00000000 =0000001B                  fTone_1B:	EQU fTone_1A+1
00000000 =0000001C                  fTone_1C:	EQU fTone_1B+1
00000000 =0000001D                  fTone_1D:	EQU fTone_1C+1
00000000 =0000001E                  fTone_1E:	EQU fTone_1D+1
00000000 =0000001F                  fTone_1F:	EQU fTone_1E+1
00000000 =00000020                  fTone_20:	EQU fTone_1F+1
00000000 =00000021                  fTone_21:	EQU fTone_20+1
00000000 =00000022                  fTone_22:	EQU fTone_21+1
00000000 =00000023                  fTone_23:	EQU fTone_22+1
00000000 =00000024                  fTone_24:	EQU fTone_23+1
00000000 =00000025                  fTone_25:	EQU fTone_24+1
00000000 =00000026                  fTone_26:	EQU fTone_25+1
00000000 =00000027                  fTone_27:	EQU fTone_26+1
00000000 =00000028                  fTone_28:	EQU fTone_27+1
00000000 =00000029                  fTone_29:	EQU fTone_28+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; DAC Equates
00000000 =00000081                  dKick			EQU	$81
00000000 =00000082                  dSnare			EQU	$82
00000000 =00000082                  dMuffledSnare			EQU	$82
00000000 =00000083                  dTimpani		EQU	$83
00000000 =00000088                  dHiTimpani		EQU	$88
00000000 =00000089                  dMidTimpani		EQU	$89
00000000 =0000008A                  dLowTimpani		EQU	$8A
00000000 =0000008B                  dVLowTimpani		EQU	$8B
00000000 =00000083                  dCrashCymbal	EQU $83
00000000 =00000081                  dKickS3			EQU	$81
00000000 =00000082                  dSnareS3			EQU	$82
00000000 =0000008A                  delectriclowtom	EQU	$8A
00000000 =0000008B                  delectricfloortom	EQU	$8B
00000000 =00000088                  delectrichightom	EQU	$88
00000000 =00000089                  delectricmidtom	EQU	$89
00000000 =00000082                  dClapS3			EQU	$82
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Channel IDs for SFX
00000000 =00000080                  cPSG1				EQU $80
00000000 =000000A0                  cPSG2				EQU $A0
00000000 =000000C0                  cPSG3				EQU $C0
00000000 =000000E0                  cNoise				EQU $E0	; Not for use in S3/S&K/S3D
00000000 =00000002                  cFM3				EQU $02
00000000 =00000004                  cFM4				EQU $04
00000000 =00000005                  cFM5				EQU $05
00000000 =00000006                  cFM6				EQU $06	; Only in S3/S&K/S3D, overrides DAC
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ;---------------------------------------------
00000000                            ; SMPS F_Tone Equates 
00000000                            ;---------------------------------------------	
00000000 =00000000                  fTone_00:	EQU $00
00000000 =00000001                  fTone_01:	EQU fTone_00+1
00000000 =00000002                  fTone_02:	EQU fTone_01+1
00000000 =00000003                  fTone_03:	EQU fTone_02+1
00000000 =00000004                  fTone_04:	EQU fTone_03+1
00000000 =00000005                  fTone_05:	EQU fTone_04+1
00000000 =00000006                  fTone_06:	EQU fTone_05+1
00000000 =00000007                  fTone_07:	EQU fTone_06+1
00000000 =00000008                  fTone_08:	EQU fTone_07+1
00000000 =00000009                  fTone_09:	EQU fTone_08+1
00000000 =0000000A                  fTone_0A:	EQU fTone_09+1
00000000 =0000000B                  fTone_0B:	EQU fTone_0A+1
00000000 =0000000C                  fTone_0C:	EQU fTone_0B+1
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; PSG conversion to S3/S&K/S3D drivers require a tone shift of 12 semi-tones.
00000000                            conv0To256  macro val 
00000000                            	if val<$01
00000000                            		dc.b (256-val+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-val)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            SMPSModFix:	macro steps
00000000                            	dc.b (steps/(speed-1))
00000000                            	endm	
00000000 =0000000C                  psgdelta	EQU $0C
00000000                            PSGPitch macro pitch
00000000                            		dc.b	(pitch+psgdelta)&$FF
00000000                            	endm
00000000                            
00000000                            s1TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b ((($FF+tmod-1)*256+($FF+tmod/2))/$FF+tmod)&$FF 	
00000000                            	else
00000000                            		dc.b (((tmod-1)*256+(tmod/2))/tmod)&$FF
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            s3TempotoS2 macro tmod
00000000                            	if tmod<$01
00000000                            		dc.b (256-tmod+$FF)&$FF
00000000                            	else	
00000000                            		dc.b (256-tmod)&$FF	
00000000                            	endc
00000000                            	endm
00000000                            	
00000000                            convertMainTempoMod	macro tmod
00000000                            	if 		smpsHeaderStartSong=2
00000000                            		dc.b tmod
00000000                            	elseif 		smpsHeaderStartSong<2
00000000                            		s1TempotoS2 	\tmod
00000000                            	elseif	smpsHeaderStartSong>2
00000000                            		s3TempotoS2  	\tmod
00000000                            	endc
00000000                            	endm	
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Header Macros
00000000 =00000000                  smpsHeaderStartSong = 0
00000000                            
00000000                            smpsHeaderVoiceNull macro
00000000                            	dc.w	$0000
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoice macro loc
00000000                            songStart set *
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Voice Location as S3's Universal Voice Bank
00000000                            ; Common to music and SFX
00000000                            smpsHeaderVoiceUVB macro
00000000                            	if songStart<>*
00000000                            		fail "Missing smpsHeaderStartSong or smpsHeaderStartSongConvert"
00000000                            	endc
00000000                            	;dc.w	little_endian(z80_UniVoiceBank)
00000000                            	z80_ptr	z80_UniVoiceBank
00000000                            	endm
00000000                            
00000000                            ; Header macros for music (not for SFX)
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChan macro fm,psg
00000000                            	dc.b	fm,psg
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempo macro tdiv,tmod
00000000                            	dc.b	tdiv,tmod
00000000                            	endm
00000000                            
00000000                            ; Header - Set up DAC Channel
00000000                            smpsHeaderDAC macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	if narg>=2
00000000                            		dc.b	\pitch
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	if narg>=3
00000000                            		dc.b	\vol
00000000                            	else
00000000                            		dc.b	$00
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderFM macro loc,pitch,vol
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol
00000000                            	endm
00000000                            
00000000                            ; Header - Set up PSG Channel
00000000                            smpsHeaderPSG macro loc,pitch,vol,mod,voice
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch,vol,mod,voice
00000000                            	endm
00000000                            
00000000                            ; Header macros for SFX (not for music)
00000000                            ; Header - Set up Tempo
00000000                            smpsHeaderTempoSFX macro div
00000000                            	dc.b	div
00000000                            	endm
00000000                            
00000000                            ; Header - Set up Channel Usage
00000000                            smpsHeaderChanSFX macro chan
00000000                            	dc.b	chan
00000000                            	endm
00000000                            
00000000                            ; Header - Set up FM Channel
00000000                            smpsHeaderSFXChannel macro chanid,loc,pitch,vol
00000000                            	if (chanid=cNoise)
00000000                            		fail "Using channel ID of cNoise ($E0) in Sonic 3 driver is dangerous. Fix the song so that it turns into a noise channel instead."
00000000                            	endc
00000000                            	dc.b	$80,chanid
00000000                            	dc.w	loc-songStart
00000000                            	dc.b	pitch, vol
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Co-ord Flag Macros and Equates
00000000                            ; E0xx - Panning, AMS, FMS
00000000                            smpsPan macro direction,amsfms
00000000                            panNone set $00
00000000                            panRight set $40
00000000                            panLeft set $80
00000000                            panCentre set $C0
00000000                            panCenter set $C0 ; silly Americans :U
00000000                            	dc.b $E0,direction+amsfms
00000000                            	endm
00000000                            
00000000                            ; E1xx - Set channel frequency displacement to xx
00000000                            smpsAlterNote macro val
00000000                            	dc.b	$E1,val
00000000                            	endm
00000000                            
00000000                            ; E2xx - Useless
00000000                            smpsNop macro val
00000000                            	dc.b	$E2,val
00000000                            	endm
00000000                            ; Return (used after smpsCall)
00000000                            smpsReturn macro val
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Fade in previous song (ie. 1-Up)
00000000                            smpsFade macro val
00000000                            	dc.b	$E4
00000000                            	endm
00000000                            
00000000                            ; E5xx - Set channel tempo divider to xx
00000000                            smpsChanTempoDiv macro val
00000000                            	dc.b	$E5,val
00000000                            ;	endc
00000000                            	endm
00000000                            
00000000                            ; E6xx - Alter Volume by xx
00000000                            smpsAlterVol macro val
00000000                            	dc.b	$E6,val
00000000                            	endm
00000000                            
00000000                            sVol  macro val
00000000                            	$E6,val
00000000                            	endm
00000000                            ; E7 - Prevent attack of next note
00000000 =000000E7                  smpsNoAttack	EQU $E7
00000000                            
00000000                            ; E8xx - Set note fill to xx
00000000                            smpsNoteFill macro val
00000000                            		dc.b	$E8,val
00000000                            ;	endc
00000000                            	endm
00000000                            smpsAlterPitch 	macro	value
00000000                            	dc.b $E9,value
00000000                            	endm
00000000                            
00000000                            
00000000                            ; Set music tempo modifier to xx
00000000                            smpsSetTempoMod macro mod
00000000                            	dc.b	$EA,mod
00000000                            	endm
00000000                            
00000000                            ; Set music tempo divider to xx
00000000                            smpsSetTempoDiv macro val
00000000                            	dc.b	$EB,val
00000000                            	endm
00000000                            
00000000                            ; ECxx - Set Volume to xx
00000000                            smpsSetVol macro val
00000000                            	dc.b	$EC,val
00000000                            	endm
00000000                            
00000000                            ; Works on all drivers
00000000                            smpsPSGAlterVol macro vol
00000000                            	dc.b	$EC,vol
00000000                            	endm
00000000                            
00000000                            ; Clears pushing sound flag in S1
00000000                            smpsClearPush macro	
00000000                            	dc.b	$ED
00000000                            	endm
00000000                            
00000000                            ; Stops special SFX (S1 only) and restarts overridden music track
00000000                            smpsStopSpecial macro
00000000                            		dc.b	$EE
00000000                            	endm
00000000                            
00000000                            ; EFxx[yy] - Set Voice of FM channel to xx; xx < 0 means yy present
00000000                            smpsSetvoice macro voice,songID
00000000                            	if narg<=1
00000000                            		dc.b	$EF,voice
00000000                            	else
00000000                            		dc.b	$EF,voice|$80,songID+$81
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; F0wwxxyyzz - Modulation - ww: wait time - xx: modulation speed - yy: change per step - zz: number of steps
00000000                            smpsModSet macro wait,speed,change,step
00000000                            	dc.b	$F0
00000000                            	dc.b	wait,speed,change,step
00000000                            	endm
00000000                            
00000000                            ; Turn on Modulation
00000000                            smpsModOn macro
00000000                            	dc.b	$F1
00000000                            	endm
00000000                            
00000000                            ; F2 - End of channel
00000000                            smpsStop macro
00000000                            	dc.b	$F2
00000000                            	endm
00000000                            
00000000                            ; F3xx - PSG waveform to xx
00000000                            smpsPSGform macro form
00000000                            	dc.b	$F3,form
00000000                            	endm
00000000                            
00000000                            ; Turn off Modulation
00000000                            smpsModOff macro
00000000                            	dc.b	$F4
00000000                            	endm
00000000                            
00000000                            ; F5xx - PSG voice to xx
00000000                            smpsPSGvoice macro voice
00000000                            	dc.b	$F5,voice
00000000                            	endm
00000000                            
00000000                            ; F6xxxx - Jump to xxxx
00000000                            smpsJump macro loc
00000000                            	dc.b	$F6
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F7xxyyzzzz - Loop back to zzzz yy times, xx being the loop index for loop recursion fixing
00000000                            smpsLoop macro index,loops,loc
00000000                            	dc.b	$F7
00000000                            	dc.b	index,loops
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; F8xxxx - Call pattern at xxxx, saving return point
00000000                            smpsCall macro loc
00000000                            	dc.b	$F8
00000000                            	dc.w	loc-*-1
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Alter Volume
00000000                            smpsFMAlterVol macro val1,val2
00000000                            	if narg<=1
00000000                            		dc.b	$E6,val1
00000000                            	else
00000000                            		dc.b	$E5,val1,val2
00000000                            	endc
00000000                            	endm
00000000                            
00000000                            ; S3/S&K/S3D-only coordination flags
00000000                            ; Silences FM channel then stops as per smpsStop
00000000                            smpsStopFM macro
00000000                            	dc.b	$E3
00000000                            	endm
00000000                            
00000000                            ; Spindash Rev
00000000                            smpsSpindashRev macro
00000000                            	dc.b	$E9
00000000                            	endm
00000000                            	
00000000                            smpsPlayDACSample macro sample
00000000                            	dc.b	$EA,sample
00000000                            	endm
00000000                            	
00000000                            smpsConditionalJump macro index,loc
00000000                            	dc.b	$EB
00000000                            	dc.b	index
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            ; Set note values to xx-$40
00000000                            smpsSetNote macro val
00000000                            	dc.b	$ED,val
00000000                            	endm
00000000                            
00000000                            smpsFMICommand macro reg,val
00000000                            	dc.b	$EE,reg,val
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange2 macro fmmod,psgmod
00000000                            	dc.b	$F1,fmmod,psgmod
00000000                            	endm
00000000                            
00000000                            ; Set Modulation
00000000                            smpsModChange macro val
00000000                            	dc.b	$F4,val
00000000                            	endm
00000000                            
00000000                            ; FCxxxx - Jump to xxxx
00000000                            smpsContinuousLoop macro loc
00000000                            	dc.b	$FC
00000000                            	dc.w	loc-songStart
00000000                            	endm
00000000                            
00000000                            smpsAlternateSMPS macro flag
00000000                            	dc.b	$FD,flag
00000000                            	endm
00000000                            
00000000                            smpsFM3SpecialMode macro ind1,ind2,ind3,ind4
00000000                            	dc.b	$FE,ind1,ind2,ind3,ind4
00000000                            	endm
00000000                            
00000000                            smpsPlaySound macro index
00000000                            	dc.b	$FF,$01,index
00000000                            	endm
00000000                            
00000000                            smpsHaltMusic macro flag
00000000                            	dc.b	$FF,$02,flag
00000000                            	endm
00000000                            
00000000                            smpsCopyData macro data,len
00000000                            	fail "Coord. Flag to copy data should not be used. Complain to Flamewing if any music uses it."
00000000                            	dc.b	$FF,$03
00000000                            	;dc.w	little_endian(data)
00000000                            	z80_ptr	data
00000000                            	dc.b	len
00000000                            	endm
00000000                            
00000000                            smpsSSGEG macro op1,op2,op3,op4
00000000                            	dc.b	$FF,$05,op1,op2,op3,op4
00000000                            	endm
00000000                            
00000000                            smpsFMFlutter macro tone,mask
00000000                            	dc.b	$FF,$06,tone,mask
00000000                            	endm
00000000                            
00000000                            smpsResetSpindashRev macro val
00000000                            	dc.b	$FF,$07
00000000                            	endm
00000000                            
00000000                            ; ---------------------------------------------------------------------------------------------
00000000                            ; Macros for FM instruments
00000000                            ; Voices - Feedback
00000000                            smpsVcFeedback macro val
00000000                            vcFeedback set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Algorithm
00000000                            smpsVcAlgorithm macro val
00000000                            vcAlgorithm set \val
00000000                            	endm
00000000                            
00000000                            smpsVcUnusedBits macro val
00000000                            vcUnusedBits set \val
00000000                            	endm
00000000                            
00000000                            ; Voices - Detune
00000000                            smpsVcDetune macro op1,op2,op3,op4
00000000                            vcDT1 set \op1
00000000                            vcDT2 set \op2
00000000                            vcDT3 set \op3
00000000                            vcDT4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Coarse-Frequency
00000000                            smpsVcCoarseFreq macro op1,op2,op3,op4
00000000                            vcCF1 set \op1
00000000                            vcCF2 set \op2
00000000                            vcCF3 set \op3
00000000                            vcCF4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Rate Scale
00000000                            smpsVcRateScale macro op1,op2,op3,op4
00000000                            vcRS1 set \op1
00000000                            vcRS2 set \op2
00000000                            vcRS3 set \op3
00000000                            vcRS4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Attack Rate
00000000                            smpsVcAttackRate macro op1,op2,op3,op4
00000000                            vcAR1 set \op1
00000000                            vcAR2 set \op2
00000000                            vcAR3 set \op3
00000000                            vcAR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Amplitude Modulation
00000000                            smpsVcAmpMod macro op1,op2,op3,op4
00000000                            vcAM1 set \op1
00000000                            vcAM2 set \op2
00000000                            vcAM3 set \op3
00000000                            vcAM4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - First Decay Rate
00000000                            smpsVcDecayRate1 macro op1,op2,op3,op4
00000000                            vcD1R1 set \op1
00000000                            vcD1R2 set \op2
00000000                            vcD1R3 set \op3
00000000                            vcD1R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Second Decay Rate
00000000                            smpsVcDecayRate2 macro op1,op2,op3,op4
00000000                            vcD2R1 set \op1
00000000                            vcD2R2 set \op2
00000000                            vcD2R3 set \op3
00000000                            vcD2R4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Decay Level
00000000                            smpsVcDecayLevel macro op1,op2,op3,op4
00000000                            vcDL1 set \op1
00000000                            vcDL2 set \op2
00000000                            vcDL3 set \op3
00000000                            vcDL4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Release Rate
00000000                            smpsVcReleaseRate macro op1,op2,op3,op4
00000000                            vcRR1 set \op1
00000000                            vcRR2 set \op2
00000000                            vcRR3 set \op3
00000000                            vcRR4 set \op4
00000000                            	endm
00000000                            
00000000                            ; Voices - Total Level
00000000                            smpsVcTotalLevel macro op1,op2,op3,op4
00000000                            vcTL1 set \op1
00000000                            vcTL2 set \op2
00000000                            vcTL3 set \op3
00000000                            vcTL4 set \op4
00000000                            	dc.b	(vcUnusedBits<<6)+(vcFeedback<<3)+vcAlgorithm
00000000                            ;   0     1     2     3     4     5     6     7
00000000                            ;%1000,%1000,%1000,%1000,%1010,%1110,%1110,%1111
00000000                            vcTLMask4 set ((vcAlgorithm=7)<<7)
00000000                            vcTLMask3 set ((vcAlgorithm>=4)<<7)
00000000                            vcTLMask2 set ((vcAlgorithm>=5)<<7)
00000000                            vcTLMask1 set $80
00000000                            ;	dc.b	(vcDT4<<4)+vcCF4 ,(vcDT3<<4)+vcCF3 ,(vcDT2<<4)+vcCF2 ,(vcDT1<<4)+vcCF1
00000000                            ;	dc.b	(vcRS4<<6)+vcAR4 ,(vcRS3<<6)+vcAR3 ,(vcRS2<<6)+vcAR2 ,(vcRS1<<6)+vcAR1
00000000                            ;	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            ;	dc.b	vcD2R4           ,vcD2R3           ,vcD2R2           ,vcD2R1
00000000                            ;	dc.b	(vcDL4<<4)+vcRR4 ,(vcDL3<<4)+vcRR3 ,(vcDL2<<4)+vcRR2 ,(vcDL1<<4)+vcRR1
00000000                            ;	dc.b	vcTL4|vcTLMask4  ,vcTL3|vcTLMask3  ,vcTL2|vcTLMask2  ,vcTL1|vcTLMask1
00000000                            	dc.b	(vcDT4<<4)+vcCF4,(vcDT3<<4)+vcCF3,(vcDT2<<4)+vcCF2,(vcDT1<<4)+vcCF1
00000000                            	dc.b	(vcRS4<<6)+vcAR4,(vcRS3<<6)+vcAR3,(vcRS2<<6)+vcAR2,(vcRS1<<6)+vcAR1
00000000                            	dc.b	(vcAM4<<5)+vcD1R4,(vcAM3<<5)+vcD1R3,(vcAM2<<5)+vcD1R2,(vcAM1<<5)+vcD1R1
00000000                            	dc.b	vcD2R4,vcD2R3,vcD2R2,vcD2R1
00000000                            	dc.b	(vcDL4<<4)+vcRR4,(vcDL3<<4)+vcRR3,(vcDL2<<4)+vcRR2,(vcDL1<<4)+vcRR1
00000000                            	dc.b	vcTL4|vcTLMask4,vcTL3|vcTLMask3,vcTL2|vcTLMask2,vcTL1|vcTLMask1
00000000                            	endm
00000000                            
00000000                            
00000000                            StartOfRom:
00000000 00FF FE00 0000 0000 0000+  Vectors:	dc.l $FFFE00, EntryPoint, BusError, AddressError
00000010 0000 0000 0000 0000 0000+  		dc.l IllegalInstr, ZeroDivide, ChkInstr, TrapvInstr
00000020 0000 0000 0000 0000 0000+  		dc.l PrivilegeViol, Trace, Line1010Emu,	Line1111Emu
00000030 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000040 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000050 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorExcept, ErrorExcept, ErrorExcept
00000060 0000 0000 0000 0000 0000+  		dc.l ErrorExcept, ErrorTrap, ErrorTrap,	ErrorTrap
00000070 0000 0000 0000 0000 0000+  		dc.l PalToCRAM,	ErrorTrap, loc_B10, ErrorTrap
00000080 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000090 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000A0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000B0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000C0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000D0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000E0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
000000F0 0000 0000 0000 0000 0000+  		dc.l ErrorTrap,	ErrorTrap, ErrorTrap, ErrorTrap
00000100 5345 4741 204D 4547 4120+  Console:	dc.b 'SEGA MEGA DRIVE ' ; Hardware system ID
00000110 2843 2953 4547 4120 3139+  Date:		dc.b '(C)SEGA 1991.APR' ; Release date
00000120 534F 4E49 4320 5448 4520+  Title_Local:	dc.b 'SONIC THE               HEDGEHOG                ' ; Domestic name
00000150 534F 4E49 4320 5448 4520+  Title_Int:	dc.b 'SONIC THE               HEDGEHOG                ' ; International name
00000180 474D 2030 3030 3031 3030+  Serial:		dc.b 'GM 00001009-00'   ; Serial/version number
0000018E 0000                       Checksum:	dc.w 0
00000190 4A20 2020 2020 2020 2020+  		dc.b 'J               ' ; I/O support
000001A0 0000 0000                  RomStartLoc:	dc.l StartOfRom		; ROM start
000001A4 0000 0000                  RomEndLoc:	dc.l EndOfRom-1		; ROM end
000001A8 00FF 0000                  RamStartLoc:	dc.l $FF0000		; RAM start
000001AC 00FF FFFF                  RamEndLoc:	dc.l $FFFFFF		; RAM end
000001B0 2020 2020                  SRAMSupport:	dc.l $20202020		; change to $5241E020 to create	SRAM
000001B4 2020 2020                  		dc.l $20202020		; SRAM start
000001B8 2020 2020                  		dc.l $20202020		; SRAM end
000001BC 2020 2020 2020 2020 2020+  Notes:		dc.b '                                                    '
000001F0 4A55 4520 2020 2020 2020+  Region:		dc.b 'JUE             ' ; Region
00000200                            
00000200                            ; ===========================================================================
00000200                            
00000200                            ErrorTrap:
00000200 4E71                       		nop	
00000202 4E71                       		nop	
00000204 60FA                       		bra.s	ErrorTrap
00000206                            ; ===========================================================================
00000206                            
00000206                            EntryPoint:
00000206 4AB9 00A1 0008             		tst.l	($A10008).l	; test port A control
0000020C 6600                       		bne.s	PortA_Ok
0000020E 4A79 00A1 000C             		tst.w	($A1000C).l	; test port C control
00000214                            
00000214                            PortA_Ok:
00000214 6600                       		bne.s	PortC_Ok
00000216 4BFA 0000                  		lea	SetupValues(pc),a5
0000021A 4C9D 00E0                  		movem.w	(a5)+,d5-d7
0000021E 4CDD 1F00                  		movem.l	(a5)+,a0-a4
00000222 1029 EF01                  		move.b	-$10FF(a1),d0	; get hardware version
00000226 0200 000F                  		andi.b	#$F,d0
0000022A 6700                       		beq.s	SkipSecurity
0000022C 237C 5345 4741 2F00        		move.l	#'SEGA',$2F00(a1)
00000234                            
00000234                            SkipSecurity:
00000234 3014                       		move.w	(a4),d0		; check	if VDP works
00000236 7000                       		moveq	#0,d0
00000238 2C40                       		movea.l	d0,a6
0000023A 4E66                       		move.l	a6,usp		; set usp to $0
0000023C 7217                       		moveq	#$17,d1
0000023E                            
0000023E                            VDPInitLoop:
0000023E 1A1D                       		move.b	(a5)+,d5	; add $8000 to value
00000240 3885                       		move.w	d5,(a4)		; move value to	VDP register
00000242 DA47                       		add.w	d7,d5		; next register
00000244 51C9 FFF8                  		dbf	d1,VDPInitLoop
00000248 289D                       		move.l	(a5)+,(a4)
0000024A 3680                       		move.w	d0,(a3)		; clear	the screen
0000024C 3287                       		move.w	d7,(a1)		; stop the Z80
0000024E 3487                       		move.w	d7,(a2)		; reset	the Z80
00000250                            
00000250                            WaitForZ80:
00000250 0111                       		btst	d0,(a1)		; has the Z80 stopped?
00000252 66FC                       		bne.s	WaitForZ80	; if not, branch
00000254 7425                       		moveq	#$25,d2
00000256                            
00000256                            Z80InitLoop:
00000256 10DD                       		move.b	(a5)+,(a0)+
00000258 51CA FFFC                  		dbf	d2,Z80InitLoop
0000025C 3480                       		move.w	d0,(a2)
0000025E 3280                       		move.w	d0,(a1)		; start	the Z80
00000260 3487                       		move.w	d7,(a2)		; reset	the Z80
00000262                            
00000262                            ClrRAMLoop:
00000262 2D00                       		move.l	d0,-(a6)
00000264 51CE FFFC                  		dbf	d6,ClrRAMLoop	; clear	the entire RAM
00000268 289D                       		move.l	(a5)+,(a4)	; set VDP display mode and increment
0000026A 289D                       		move.l	(a5)+,(a4)	; set VDP to CRAM write
0000026C 761F                       		moveq	#$1F,d3
0000026E                            
0000026E                            ClrCRAMLoop:
0000026E 2680                       		move.l	d0,(a3)
00000270 51CB FFFC                  		dbf	d3,ClrCRAMLoop	; clear	the CRAM
00000274 289D                       		move.l	(a5)+,(a4)
00000276 7813                       		moveq	#$13,d4
00000278                            
00000278                            ClrVDPStuff:
00000278 2680                       		move.l	d0,(a3)
0000027A 51CC FFFC                  		dbf	d4,ClrVDPStuff
0000027E 7A03                       		moveq	#3,d5
00000280                            
00000280                            PSGInitLoop:
00000280 175D 0011                  		move.b	(a5)+,$11(a3)	; reset	the PSG
00000284 51CD FFFA                  		dbf	d5,PSGInitLoop
00000288 3480                       		move.w	d0,(a2)
0000028A 4CD6 7FFF                  		movem.l	(a6),d0-a6	; clear	all registers
0000028E 46FC 2700                  		move	#$2700,sr	; set the sr
00000292                            
00000292                            PortC_Ok:
00000292 6000                       		bra.s	GameProgram
00000294                            ; ===========================================================================
00000294 8000                       SetupValues:	dc.w $8000		; XREF: PortA_Ok
00000296 3FFF                       		dc.w $3FFF
00000298 0100                       		dc.w $100
0000029A                            
0000029A 00A0 0000                  		dc.l $A00000		; start	of Z80 RAM
0000029E 00A1 1100                  		dc.l $A11100		; Z80 bus request
000002A2 00A1 1200                  		dc.l $A11200		; Z80 reset
000002A6 00C0 0000                  		dc.l $C00000
000002AA 00C0 0004                  		dc.l $C00004		; address for VDP registers
000002AE                            
000002AE 0414 303C                  		dc.b 4,	$14, $30, $3C	; values for VDP registers
000002B2 076C 0000                  		dc.b 7,	$6C, 0,	0
000002B6 0000 FF00                  		dc.b 0,	0, $FF,	0
000002BA 8137 0001                  		dc.b $81, $37, 0, 1
000002BE 0100 00FF                  		dc.b 1,	0, 0, $FF
000002C2 FF00 0080                  		dc.b $FF, 0, 0,	$80
000002C6                            
000002C6 4000 0080                  		dc.l $40000080
000002CA                            
000002CA AF01 D91F 1127 0021 2600+  		dc.b $AF, 1, $D9, $1F, $11, $27, 0, $21, $26, 0, $F9, $77 ; Z80	instructions
000002D6 EDB0 DDE1 FDE1 ED47 ED4F   		dc.b $ED, $B0, $DD, $E1, $FD, $E1, $ED,	$47, $ED, $4F
000002E0 D1E1 F108 D9C1 D1E1 F1F9+  		dc.b $D1, $E1, $F1, 8, $D9, $C1, $D1, $E1, $F1,	$F9, $F3
000002EB ED56 36E9 E9               		dc.b $ED, $56, $36, $E9, $E9
000002F0                            
000002F0 8104                       		dc.w $8104		; value	for VDP	display	mode
000002F2 8F02                       		dc.w $8F02		; value	for VDP	increment
000002F4 C000 0000                  		dc.l $C0000000		; value	for CRAM write mode
000002F8 4000 0010                  		dc.l $40000010
000002FC                            
000002FC 9FBF DFFF                  		dc.b $9F, $BF, $DF, $FF	; values for PSG channel volumes
00000300                            ; ===========================================================================
00000300                            
00000300                            GameProgram:
00000300 4A79 00C0 0004             		tst.w	($C00004).l
00000306 0839 0006 00A1 000D        		btst	#6,($A1000D).l
0000030E 6700                       		beq.s	CheckSumCheck
00000310 0CB8 696E 6974 FFFC        		cmpi.l	#'init',($FFFFFFFC).w ; has checksum routine already run?
00000318 6700 0000                  		beq.w	GameInit	; if yes, branch
0000031C                            
0000031C                            CheckSumCheck:
0000031C 207C 0000 0200             		movea.l	#ErrorTrap,a0	; start	checking bytes after the header	($200)
00000322 227C 0000 01A4             		movea.l	#RomEndLoc,a1	; stop at end of ROM
00000328 2011                       		move.l	(a1),d0
0000032A 7200                       		moveq	#0,d1
0000032C                            
0000032C                            loc_32C:
0000032C D258                       		add.w	(a0)+,d1
0000032E B088                       		cmp.l	a0,d0
00000330 64FA                       		bcc.s	loc_32C
00000332 227C 0000 018E             		movea.l	#Checksum,a1	; read the checksum
00000338 B251                       		cmp.w	(a1),d1		; compare correct checksum to the one in ROM
0000033A 6600 0000                  		bne.w	CheckSumError	; if they don't match, branch
0000033E 4DF8 FE00                  		lea	($FFFFFE00).w,a6
00000342 7E00                       		moveq	#0,d7
00000344 3C3C 007F                  		move.w	#$7F,d6
00000348                            
00000348                            loc_348:
00000348 2CC7                       		move.l	d7,(a6)+
0000034A 51CE FFFC                  		dbf	d6,loc_348
0000034E 1039 00A1 0001             		move.b	($A10001).l,d0
00000354 0200 00C0                  		andi.b	#$C0,d0
00000358 11C0 FFF8                  		move.b	d0,($FFFFFFF8).w
0000035C 21FC 696E 6974 FFFC        		move.l	#'init',($FFFFFFFC).w ; set flag so checksum won't be run again
00000364                            
00000364                            GameInit:
00000364 4DF9 00FF 0000             		lea	($FF0000).l,a6
0000036A 7E00                       		moveq	#0,d7
0000036C 3C3C 3F7F                  		move.w	#$3F7F,d6
00000370                            
00000370                            GameClrRAM:
00000370 2CC7                       		move.l	d7,(a6)+
00000372 51CE FFFC                  		dbf	d6,GameClrRAM	; fill RAM ($0000-$FDFF) with $0
00000376 6100 0000                  		bsr.w	VDPSetupGame
0000037A 6100 0000                  		bsr.w	SoundDriverLoad
0000037E 6100 0000                  		bsr.w	JoypadInit
00000382 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set Game Mode to Sega Screen
00000388                            
00000388                            MainGameLoop:
00000388 1038 F600                  		move.b	($FFFFF600).w,d0 ; load	Game Mode
0000038C 0240 001C                  		andi.w	#$1C,d0
00000390 4EBB 0000                  		jsr	GameModeArray(pc,d0.w) ; jump to apt location in ROM
00000394 60F2                       		bra.s	MainGameLoop
00000396                            ; ===========================================================================
00000396                            ; ---------------------------------------------------------------------------
00000396                            ; Main game mode array
00000396                            ; ---------------------------------------------------------------------------
00000396                            
00000396                            GameModeArray:
00000396 6000 0000                  		bra.w	SegaScreen	; Sega Screen ($00)
0000039A                            ; ===========================================================================
0000039A 6000 0000                  		bra.w	TitleScreen	; Title	Screen ($04)
0000039E                            ; ===========================================================================
0000039E 6000 0000                  		bra.w	Level		; Demo Mode ($08)
000003A2                            ; ===========================================================================
000003A2 6000 0000                  		bra.w	Level		; Normal Level ($0C)
000003A6                            ; ===========================================================================
000003A6 6000 0000                  		bra.w	SpecialStage	; Special Stage	($10)
000003AA                            ; ===========================================================================
000003AA 6000 0000                  		bra.w	ContinueScreen	; Continue Screen ($14)
000003AE                            ; ===========================================================================
000003AE 6000 0000                  		bra.w	EndingSequence	; End of game sequence ($18)
000003B2                            ; ===========================================================================
000003B2 6000 0000                  		bra.w	Credits		; Credits ($1C)
000003B6                            ; ===========================================================================
000003B6 4E75                       		rts	
000003B8                            ; ===========================================================================
000003B8                            
000003B8                            CheckSumError:
000003B8 6100 0000                  		bsr.w	VDPSetupGame
000003BC 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
000003C6 7E3F                       		moveq	#$3F,d7
000003C8                            
000003C8                            CheckSum_Red:
000003C8 33FC 000E 00C0 0000        		move.w	#$E,($C00000).l	; fill screen with colour red
000003D0 51CF FFF6                  		dbf	d7,CheckSum_Red	; repeat $3F more times
000003D4                            
000003D4                            CheckSum_Loop:
000003D4 60FE                       		bra.s	CheckSum_Loop
000003D6                            ; ===========================================================================
000003D6                            
000003D6                            BusError:
000003D6 11FC 0002 FC44             		move.b	#2,($FFFFFC44).w
000003DC 6000                       		bra.s	loc_43A
000003DE                            ; ===========================================================================
000003DE                            
000003DE                            AddressError:
000003DE 11FC 0004 FC44             		move.b	#4,($FFFFFC44).w
000003E4 6000                       		bra.s	loc_43A
000003E6                            ; ===========================================================================
000003E6                            
000003E6                            IllegalInstr:
000003E6 11FC 0006 FC44             		move.b	#6,($FFFFFC44).w
000003EC 54AF 0002                  		addq.l	#2,2(sp)
000003F0 6000                       		bra.s	loc_462
000003F2                            ; ===========================================================================
000003F2                            
000003F2                            ZeroDivide:
000003F2 11FC 0008 FC44             		move.b	#8,($FFFFFC44).w
000003F8 6000                       		bra.s	loc_462
000003FA                            ; ===========================================================================
000003FA                            
000003FA                            ChkInstr:
000003FA 11FC 000A FC44             		move.b	#$A,($FFFFFC44).w
00000400 6000                       		bra.s	loc_462
00000402                            ; ===========================================================================
00000402                            
00000402                            TrapvInstr:
00000402 11FC 000C FC44             		move.b	#$C,($FFFFFC44).w
00000408 6000                       		bra.s	loc_462
0000040A                            ; ===========================================================================
0000040A                            
0000040A                            PrivilegeViol:
0000040A 11FC 000E FC44             		move.b	#$E,($FFFFFC44).w
00000410 6000                       		bra.s	loc_462
00000412                            ; ===========================================================================
00000412                            
00000412                            Trace:
00000412 11FC 0010 FC44             		move.b	#$10,($FFFFFC44).w
00000418 6000                       		bra.s	loc_462
0000041A                            ; ===========================================================================
0000041A                            
0000041A                            Line1010Emu:
0000041A 11FC 0012 FC44             		move.b	#$12,($FFFFFC44).w
00000420 54AF 0002                  		addq.l	#2,2(sp)
00000424 6000                       		bra.s	loc_462
00000426                            ; ===========================================================================
00000426                            
00000426                            Line1111Emu:
00000426 11FC 0014 FC44             		move.b	#$14,($FFFFFC44).w
0000042C 54AF 0002                  		addq.l	#2,2(sp)
00000430 6000                       		bra.s	loc_462
00000432                            ; ===========================================================================
00000432                            
00000432                            ErrorExcept:
00000432 11FC 0000 FC44             		move.b	#0,($FFFFFC44).w
00000438 6000                       		bra.s	loc_462
0000043A                            ; ===========================================================================
0000043A                            
0000043A                            loc_43A:
0000043A 46FC 2700                  		move	#$2700,sr
0000043E 544F                       		addq.w	#2,sp
00000440 21DF FC40                  		move.l	(sp)+,($FFFFFC40).w
00000444 544F                       		addq.w	#2,sp
00000446 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000044C 6100 0000                  		bsr.w	ShowErrorMsg
00000450 202F 0002                  		move.l	2(sp),d0
00000454 6100 0000                  		bsr.w	sub_5BA
00000458 2038 FC40                  		move.l	($FFFFFC40).w,d0
0000045C 6100 0000                  		bsr.w	sub_5BA
00000460 6000                       		bra.s	loc_478
00000462                            ; ===========================================================================
00000462                            
00000462                            loc_462:
00000462 46FC 2700                  		move	#$2700,sr
00000466 48F8 FFFF FC00             		movem.l	d0-a7,($FFFFFC00).w
0000046C 6100 0000                  		bsr.w	ShowErrorMsg
00000470 202F 0002                  		move.l	2(sp),d0
00000474 6100 0000                  		bsr.w	sub_5BA
00000478                            
00000478                            loc_478:
00000478 6100 0000                  		bsr.w	ErrorWaitForC
0000047C 4CF8 FFFF FC00             		movem.l	($FFFFFC00).w,d0-a7
00000482 46FC 2300                  		move	#$2300,sr
00000486 4E73                       		rte	
00000488                            
00000488                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000488                            
00000488                            
00000488                            ShowErrorMsg:				; XREF: loc_43A; loc_462
00000488 4DF9 00C0 0000             		lea	($C00000).l,a6
0000048E 23FC 7800 0003 00C0 0004   		move.l	#$78000003,($C00004).l
00000498 41F9 0000 0000             		lea	(Art_Text).l,a0
0000049E 323C 027F                  		move.w	#$27F,d1
000004A2                            
000004A2                            Error_LoadGfx:
000004A2 3C98                       		move.w	(a0)+,(a6)
000004A4 51C9 FFFC                  		dbf	d1,Error_LoadGfx
000004A8 7000                       		moveq	#0,d0		; clear	d0
000004AA 1038 FC44                  		move.b	($FFFFFC44).w,d0 ; load	error code
000004AE 303B 0000                  		move.w	ErrorText(pc,d0.w),d0
000004B2 41FB 0000                  		lea	ErrorText(pc,d0.w),a0
000004B6 23FC 4604 0003 00C0 0004   		move.l	#$46040003,($C00004).l ; position
000004C0 7212                       		moveq	#$12,d1		; number of characters
000004C2                            
000004C2                            Error_LoopChars:
000004C2 7000                       		moveq	#0,d0
000004C4 1018                       		move.b	(a0)+,d0
000004C6 0640 0790                  		addi.w	#$790,d0
000004CA 3C80                       		move.w	d0,(a6)
000004CC 51C9 FFF4                  		dbf	d1,Error_LoopChars ; repeat for	number of characters
000004D0 4E75                       		rts	
000004D2                            ; End of function ShowErrorMsg
000004D2                            
000004D2                            ; ===========================================================================
000004D2 0000 0000                  ErrorText:	dc.w asc_4E8-ErrorText,	asc_4FB-ErrorText ; XREF: ShowErrorMsg
000004D6 0000 0000                  		dc.w asc_50E-ErrorText,	asc_521-ErrorText
000004DA 0000 0000                  		dc.w asc_534-ErrorText,	asc_547-ErrorText
000004DE 0000 0000                  		dc.w asc_55A-ErrorText,	asc_56D-ErrorText
000004E2 0000 0000                  		dc.w asc_580-ErrorText,	asc_593-ErrorText
000004E6 0000                       		dc.w asc_5A6-ErrorText
000004E8 4552 524F 5220 4558 4345+  asc_4E8:	dc.b 'ERROR EXCEPTION    '
000004FB 4255 5320 4552 524F 5220+  asc_4FB:	dc.b 'BUS ERROR          '
0000050E 4144 4452 4553 5320 4552+  asc_50E:	dc.b 'ADDRESS ERROR      '
00000521 494C 4C45 4741 4C20 494E+  asc_521:	dc.b 'ILLEGAL INSTRUCTION'
00000534 4045 524F 2044 4956 4944+  asc_534:	dc.b '@ERO DIVIDE        '
00000547 4348 4B20 494E 5354 5255+  asc_547:	dc.b 'CHK INSTRUCTION    '
0000055A 5452 4150 5620 494E 5354+  asc_55A:	dc.b 'TRAPV INSTRUCTION  '
0000056D 5052 4956 494C 4547 4520+  asc_56D:	dc.b 'PRIVILEGE VIOLATION'
00000580 5452 4143 4520 2020 2020+  asc_580:	dc.b 'TRACE              '
00000593 4C49 4E45 2031 3031 3020+  asc_593:	dc.b 'LINE 1010 EMULATOR '
000005A6 4C49 4E45 2031 3131 3120+  asc_5A6:	dc.b 'LINE 1111 EMULATOR '
000005BA 00                         		even
000005BA                            
000005BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005BA                            
000005BA                            
000005BA                            sub_5BA:				; XREF: loc_43A; loc_462
000005BA 3CBC 07CA                  		move.w	#$7CA,(a6)
000005BE 7407                       		moveq	#7,d2
000005C0                            
000005C0                            loc_5C0:
000005C0 E998                       		rol.l	#4,d0
000005C2 6100                       		bsr.s	sub_5CA
000005C4 51CA FFFA                  		dbf	d2,loc_5C0
000005C8 4E75                       		rts	
000005CA                            ; End of function sub_5BA
000005CA                            
000005CA                            
000005CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005CA                            
000005CA                            
000005CA                            sub_5CA:				; XREF: sub_5BA
000005CA 3200                       		move.w	d0,d1
000005CC 0241 000F                  		andi.w	#$F,d1
000005D0 0C41 000A                  		cmpi.w	#$A,d1
000005D4 6500                       		bcs.s	loc_5D8
000005D6 5E41                       		addq.w	#7,d1
000005D8                            
000005D8                            loc_5D8:
000005D8 0641 07C0                  		addi.w	#$7C0,d1
000005DC 3C81                       		move.w	d1,(a6)
000005DE 4E75                       		rts	
000005E0                            ; End of function sub_5CA
000005E0                            
000005E0                            
000005E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000005E0                            
000005E0                            
000005E0                            ErrorWaitForC:				; XREF: loc_478
000005E0 6100 0000                  		bsr.w	ReadJoypads
000005E4 0C38 0020 F605             		cmpi.b	#$20,($FFFFF605).w ; is	button C pressed?
000005EA 6600 FFF4                  		bne.w	ErrorWaitForC	; if not, branch
000005EE 4E75                       		rts	
000005F0                            ; End of function ErrorWaitForC
000005F0                            
000005F0                            ; ===========================================================================
000005F0                            
000005F0                            Art_Text:	incbin	artunc\menutext.bin	; text used in level select and debug mode
00000B10                            		even
00000B10                            
00000B10                            ; ===========================================================================
00000B10                            
00000B10                            loc_B10:				; XREF: Vectors
00000B10 48E7 FFFE                  		movem.l	d0-a6,-(sp)
00000B14 4A38 F62A                  		tst.b	($FFFFF62A).w
00000B18 6700                       		beq.s	loc_B88
00000B1A 3039 00C0 0004             		move.w	($C00004).l,d0
00000B20 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
00000B2A 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
00000B32 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000B38 6700                       		beq.s	loc_B42
00000B3A 303C 0700                  		move.w	#$700,d0
00000B3E                            
00000B3E                            loc_B3E:
00000B3E 51C8 FFFE                  		dbf	d0,loc_B3E
00000B42                            
00000B42                            loc_B42:
00000B42 1038 F62A                  		move.b	($FFFFF62A).w,d0
00000B46 11FC 0000 F62A             		move.b	#0,($FFFFF62A).w
00000B4C 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000B52 0240 003E                  		andi.w	#$3E,d0
00000B56 303B 0000                  		move.w	off_B6E(pc,d0.w),d0
00000B5A 4EBB 0000                  		jsr	off_B6E(pc,d0.w)
00000B5E                            
00000B5E                            loc_B5E:				; XREF: loc_B88
00000B5E 4EB9 0000 0000             		jsr	sub_71B4C
00000B64                            
00000B64                            loc_B64:				; XREF: loc_D50
00000B64 52B8 FE0C                  		addq.l	#1,($FFFFFE0C).w
00000B68 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
00000B6C 4E73                       		rte	
00000B6E                            ; ===========================================================================
00000B6E 0000 0000                  off_B6E:	dc.w loc_B88-off_B6E, loc_C32-off_B6E
00000B72 0000 0000                  		dc.w loc_C44-off_B6E, loc_C5E-off_B6E
00000B76 0000 0000                  		dc.w loc_C6E-off_B6E, loc_DA6-off_B6E
00000B7A 0000 0000                  		dc.w loc_E72-off_B6E, loc_F8A-off_B6E
00000B7E 0000 0000                  		dc.w loc_C64-off_B6E, loc_F9A-off_B6E
00000B82 0000 0000                  		dc.w loc_C36-off_B6E, loc_FA6-off_B6E
00000B86 0000                       		dc.w loc_E72-off_B6E
00000B88                            ; ===========================================================================
00000B88                            
00000B88                            loc_B88:				; XREF: loc_B10; off_B6E
00000B88 0C38 008C F600             		cmpi.b	#$8C,($FFFFF600).w
00000B8E 6700                       		beq.s	loc_B9A
00000B90 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00000B96 6600 FFC6                  		bne.w	loc_B5E
00000B9A                            
00000B9A                            loc_B9A:
00000B9A 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ ?
00000BA0 6600 FFBC                  		bne.w	loc_B5E		; if not, branch
00000BA4 3039 00C0 0004             		move.w	($C00004).l,d0
00000BAA 0838 0006 FFF8             		btst	#6,($FFFFFFF8).w
00000BB0 6700                       		beq.s	loc_BBA
00000BB2 303C 0700                  		move.w	#$700,d0
00000BB6                            
00000BB6                            loc_BB6:
00000BB6 51C8 FFFE                  		dbf	d0,loc_BB6
00000BBA                            
00000BBA                            loc_BBA:
00000BBA 31FC 0001 F644             		move.w	#1,($FFFFF644).w
00000BC0 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l
00000BC8                            
00000BC8                            loc_BC8:
00000BC8 0839 0000 00A1 1100        		btst	#0,($A11100).l
00000BD0 66F6                       		bne.s	loc_BC8
00000BD2 4A38 F64E                  		tst.b	($FFFFF64E).w
00000BD6 6600                       		bne.s	loc_BFE
00000BD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000BDE 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000BE4 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000BEA 3ABC 977F                  		move.w	#$977F,(a5)
00000BEE 3ABC C000                  		move.w	#$C000,(a5)
00000BF2 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000BF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000BFC 6000                       		bra.s	loc_C22
00000BFE                            ; ===========================================================================
00000BFE                            
00000BFE                            loc_BFE:				; XREF: loc_BC8
00000BFE 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C04 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C0A 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000C10 3ABC 977F                  		move.w	#$977F,(a5)
00000C14 3ABC C000                  		move.w	#$C000,(a5)
00000C18 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000C1E 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000C22                            
00000C22                            loc_C22:				; XREF: loc_BC8
00000C22 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000C26 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000C2E 6000 FF2E                  		bra.w	loc_B5E
00000C32                            ; ===========================================================================
00000C32                            
00000C32                            loc_C32:				; XREF: off_B6E
00000C32 6100 0000                  		bsr.w	sub_106E
00000C36                            
00000C36                            loc_C36:				; XREF: off_B6E
00000C36 4A78 F614                  		tst.w	($FFFFF614).w
00000C3A 6700 0000                  		beq.w	locret_C42
00000C3E 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C42                            
00000C42                            locret_C42:
00000C42 4E75                       		rts	
00000C44                            ; ===========================================================================
00000C44                            
00000C44                            loc_C44:				; XREF: off_B6E
00000C44 6100 0000                  		bsr.w	sub_106E
00000C48 6100 0000                  		bsr.w	sub_6886
00000C4C 6100 0000                  		bsr.w	sub_1642
00000C50 4A78 F614                  		tst.w	($FFFFF614).w
00000C54 6700 0000                  		beq.w	locret_C5C
00000C58 5378 F614                  		subq.w	#1,($FFFFF614).w
00000C5C                            
00000C5C                            locret_C5C:
00000C5C 4E75                       		rts	
00000C5E                            ; ===========================================================================
00000C5E                            
00000C5E                            loc_C5E:				; XREF: off_B6E
00000C5E 6100 0000                  		bsr.w	sub_106E
00000C62 4E75                       		rts	
00000C64                            ; ===========================================================================
00000C64                            
00000C64                            loc_C64:				; XREF: off_B6E
00000C64 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)	?
00000C6A 6700 0000                  		beq.w	loc_DA6		; if yes, branch
00000C6E                            
00000C6E                            loc_C6E:				; XREF: off_B6E
00000C6E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000C76                            
00000C76                            loc_C76:
00000C76 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000C7E 66F6                       		bne.s	loc_C76		; if not, branch
00000C80 6100 0000                  		bsr.w	ReadJoypads
00000C84 4A38 F64E                  		tst.b	($FFFFF64E).w
00000C88 6600                       		bne.s	loc_CB0
00000C8A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000C90 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000C96 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000C9C 3ABC 977F                  		move.w	#$977F,(a5)
00000CA0 3ABC C000                  		move.w	#$C000,(a5)
00000CA4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CAA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CAE 6000                       		bra.s	loc_CD4
00000CB0                            ; ===========================================================================
00000CB0                            
00000CB0                            loc_CB0:				; XREF: loc_C76
00000CB0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CB6 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000CBC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000CC2 3ABC 977F                  		move.w	#$977F,(a5)
00000CC6 3ABC C000                  		move.w	#$C000,(a5)
00000CCA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000CD0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CD4                            
00000CD4                            loc_CD4:				; XREF: loc_C76
00000CD4 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000CD8 4BF9 00C0 0004             		lea	($C00004).l,a5
00000CDE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000CE4 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000CEA 3ABC 977F                  		move.w	#$977F,(a5)
00000CEE 3ABC 7C00                  		move.w	#$7C00,(a5)
00000CF2 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000CF8 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000CFC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D02 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000D08 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000D0E 3ABC 977F                  		move.w	#$977F,(a5)
00000D12 3ABC 7800                  		move.w	#$7800,(a5)
00000D16 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D1C 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D20 4A38 F767                  		tst.b	($FFFFF767).w
00000D24 6700                       		beq.s	loc_D50
00000D26 4BF9 00C0 0004             		lea	($C00004).l,a5
00000D2C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000D32 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000D38 3ABC 977F                  		move.w	#$977F,(a5)
00000D3C 3ABC 7000                  		move.w	#$7000,(a5)
00000D40 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000D46 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000D4A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000D50                            
00000D50                            loc_D50:
00000D50 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000D58 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000D5E 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000D64 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000D6A 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000D70 0C38 0060 F625             		cmpi.b	#$60,($FFFFF625).w
00000D76 6400                       		bcc.s	Demo_Time
00000D78 11FC 0001 F64F             		move.b	#1,($FFFFF64F).w
00000D7E 588F                       		addq.l	#4,sp
00000D80 6000 FDE2                  		bra.w	loc_B64
00000D84                            
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            ; Subroutine to	run a demo for an amount of time
00000D84                            ; ---------------------------------------------------------------------------
00000D84                            
00000D84                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00000D84                            
00000D84                            
00000D84                            Demo_Time:				; XREF: loc_D50; PalToCRAM
00000D84 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000D88 4EB9 0000 0000             		jsr	AniArt_Load
00000D8E 4EB9 0000 0000             		jsr	HudUpdate
00000D94 6100 0000                  		bsr.w	sub_165E
00000D98 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00000D9C 6700 0000                  		beq.w	Demo_TimeEnd	; if not, branch
00000DA0 5378 F614                  		subq.w	#1,($FFFFF614).w ; subtract 1 from time	left
00000DA4                            
00000DA4                            Demo_TimeEnd:
00000DA4 4E75                       		rts	
00000DA6                            ; End of function Demo_Time
00000DA6                            
00000DA6                            ; ===========================================================================
00000DA6                            
00000DA6                            loc_DA6:				; XREF: off_B6E
00000DA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000DAE                            
00000DAE                            loc_DAE:
00000DAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000DB6 66F6                       		bne.s	loc_DAE		; if not, branch
00000DB8 6100 0000                  		bsr.w	ReadJoypads
00000DBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000DC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000DCE 3ABC 977F                  		move.w	#$977F,(a5)
00000DD2 3ABC C000                  		move.w	#$C000,(a5)
00000DD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000DDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000DE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000DE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000DEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000DF2 3ABC 977F                  		move.w	#$977F,(a5)
00000DF6 3ABC 7800                  		move.w	#$7800,(a5)
00000DFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E00 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E04 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E0A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000E10 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000E16 3ABC 977F                  		move.w	#$977F,(a5)
00000E1A 3ABC 7C00                  		move.w	#$7C00,(a5)
00000E1E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E24 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E28 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00000E30 6100 0000                  		bsr.w	PalCycle_SS
00000E34 4A38 F767                  		tst.b	($FFFFF767).w
00000E38 6700                       		beq.s	loc_E64
00000E3A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E40 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000E46 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000E4C 3ABC 977F                  		move.w	#$977F,(a5)
00000E50 3ABC 7000                  		move.w	#$7000,(a5)
00000E54 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000E5A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000E5E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000E64                            
00000E64                            loc_E64:
00000E64 4A78 F614                  		tst.w	($FFFFF614).w
00000E68 6700 0000                  		beq.w	locret_E70
00000E6C 5378 F614                  		subq.w	#1,($FFFFF614).w
00000E70                            
00000E70                            locret_E70:
00000E70 4E75                       		rts	
00000E72                            ; ===========================================================================
00000E72                            
00000E72                            loc_E72:				; XREF: off_B6E
00000E72 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000E7A                            
00000E7A                            loc_E7A:
00000E7A 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000E82 66F6                       		bne.s	loc_E7A		; if not, branch
00000E84 6100 0000                  		bsr.w	ReadJoypads
00000E88 4A38 F64E                  		tst.b	($FFFFF64E).w
00000E8C 6600                       		bne.s	loc_EB4
00000E8E 4BF9 00C0 0004             		lea	($C00004).l,a5
00000E94 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000E9A 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000EA0 3ABC 977F                  		move.w	#$977F,(a5)
00000EA4 3ABC C000                  		move.w	#$C000,(a5)
00000EA8 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000EAE 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000EB2 6000                       		bra.s	loc_ED8
00000EB4                            ; ===========================================================================
00000EB4                            
00000EB4                            loc_EB4:				; XREF: loc_E7A
00000EB4 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EBA 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000EC0 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
00000EC6 3ABC 977F                  		move.w	#$977F,(a5)
00000ECA 3ABC C000                  		move.w	#$C000,(a5)
00000ECE 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000ED4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000ED8                            
00000ED8                            loc_ED8:				; XREF: loc_E7A
00000ED8 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000EDC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000EE2 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00000EE8 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00000EEE                            
00000EEE                            loc_EEE:
00000EEE 3ABC 977F                  		move.w	#$977F,(a5)
00000EF2 3ABC 7C00                  		move.w	#$7C00,(a5)
00000EF6 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000EFC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F00 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F06 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000F0C 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000F12 3ABC 977F                  		move.w	#$977F,(a5)
00000F16 3ABC 7800                  		move.w	#$7800,(a5)
00000F1A 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F20 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F24 4A38 F767                  		tst.b	($FFFFF767).w
00000F28 6700                       		beq.s	loc_F54
00000F2A 4BF9 00C0 0004             		lea	($C00004).l,a5
00000F30 2ABC 9401 9370             		move.l	#$94019370,(a5)
00000F36 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00000F3C 3ABC 977F                  		move.w	#$977F,(a5)
00000F40 3ABC 7000                  		move.w	#$7000,(a5)
00000F44 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00000F4A 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000F4E 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00000F54                            
00000F54                            loc_F54:
00000F54 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00000F5C 4CF8 00FF F700             		movem.l	($FFFFF700).w,d0-d7
00000F62 48F8 00FF FF10             		movem.l	d0-d7,($FFFFFF10).w
00000F68 4CF8 0003 F754             		movem.l	($FFFFF754).w,d0-d1
00000F6E 48F8 0003 FF30             		movem.l	d0-d1,($FFFFFF30).w
00000F74 6100 0000                  		bsr.w	LoadTilesAsYouMove
00000F78 4EB9 0000 0000             		jsr	AniArt_Load
00000F7E 4EB9 0000 0000             		jsr	HudUpdate
00000F84 6100 0000                  		bsr.w	sub_1642
00000F88 4E75                       		rts	
00000F8A                            ; ===========================================================================
00000F8A                            
00000F8A                            loc_F8A:				; XREF: off_B6E
00000F8A 6100 0000                  		bsr.w	sub_106E
00000F8E 5238 F628                  		addq.b	#1,($FFFFF628).w
00000F92 11FC 000E F62A             		move.b	#$E,($FFFFF62A).w
00000F98 4E75                       		rts	
00000F9A                            ; ===========================================================================
00000F9A                            
00000F9A                            loc_F9A:				; XREF: off_B6E
00000F9A 6100 0000                  		bsr.w	sub_106E
00000F9E 3AB8 F624                  		move.w	($FFFFF624).w,(a5)
00000FA2 6000 0000                  		bra.w	sub_1642
00000FA6                            ; ===========================================================================
00000FA6                            
00000FA6                            loc_FA6:				; XREF: off_B6E
00000FA6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00000FAE                            
00000FAE                            loc_FAE:
00000FAE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
00000FB6 66F6                       		bne.s	loc_FAE		; if not, branch
00000FB8 6100 0000                  		bsr.w	ReadJoypads
00000FBC 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FC2 2ABC 9400 9340             		move.l	#$94009340,(a5)
00000FC8 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
00000FCE 3ABC 977F                  		move.w	#$977F,(a5)
00000FD2 3ABC C000                  		move.w	#$C000,(a5)
00000FD6 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
00000FDC 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00000FE0 4BF9 00C0 0004             		lea	($C00004).l,a5
00000FE6 2ABC 9401 9340             		move.l	#$94019340,(a5)
00000FEC 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
00000FF2 3ABC 977F                  		move.w	#$977F,(a5)
00000FF6 3ABC 7800                  		move.w	#$7800,(a5)
00000FFA 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001000 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001004 4BF9 00C0 0004             		lea	($C00004).l,a5
0000100A 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001010 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
00001016 3ABC 977F                  		move.w	#$977F,(a5)
0000101A 3ABC 7C00                  		move.w	#$7C00,(a5)
0000101E 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001024 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
00001028 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001030 4A38 F767                  		tst.b	($FFFFF767).w
00001034 6700                       		beq.s	loc_1060
00001036 4BF9 00C0 0004             		lea	($C00004).l,a5
0000103C 2ABC 9401 9370             		move.l	#$94019370,(a5)
00001042 2ABC 96E4 9500             		move.l	#$96E49500,(a5)
00001048 3ABC 977F                  		move.w	#$977F,(a5)
0000104C 3ABC 7000                  		move.w	#$7000,(a5)
00001050 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001056 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000105A 11FC 0000 F767             		move.b	#0,($FFFFF767).w
00001060                            
00001060                            loc_1060:
00001060 4A78 F614                  		tst.w	($FFFFF614).w
00001064 6700 0000                  		beq.w	locret_106C
00001068 5378 F614                  		subq.w	#1,($FFFFF614).w
0000106C                            
0000106C                            locret_106C:
0000106C 4E75                       		rts	
0000106E                            
0000106E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000106E                            
0000106E                            
0000106E                            sub_106E:				; XREF: loc_C32; et al
0000106E 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00001076                            
00001076                            loc_1076:
00001076 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has Z80 stopped?
0000107E 66F6                       		bne.s	loc_1076	; if not, branch
00001080 6100 0000                  		bsr.w	ReadJoypads
00001084 4A38 F64E                  		tst.b	($FFFFF64E).w
00001088 6600                       		bne.s	loc_10B0
0000108A 4BF9 00C0 0004             		lea	($C00004).l,a5
00001090 2ABC 9400 9340             		move.l	#$94009340,(a5)
00001096 2ABC 96FD 9580             		move.l	#$96FD9580,(a5)
0000109C 3ABC 977F                  		move.w	#$977F,(a5)
000010A0 3ABC C000                  		move.w	#$C000,(a5)
000010A4 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010AA 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010AE 6000                       		bra.s	loc_10D4
000010B0                            ; ===========================================================================
000010B0                            
000010B0                            loc_10B0:				; XREF: sub_106E
000010B0 4BF9 00C0 0004             		lea	($C00004).l,a5
000010B6 2ABC 9400 9340             		move.l	#$94009340,(a5)
000010BC 2ABC 96FD 9540             		move.l	#$96FD9540,(a5)
000010C2 3ABC 977F                  		move.w	#$977F,(a5)
000010C6 3ABC C000                  		move.w	#$C000,(a5)
000010CA 31FC 0080 F640             		move.w	#$80,($FFFFF640).w
000010D0 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010D4                            
000010D4                            loc_10D4:				; XREF: sub_106E
000010D4 4BF9 00C0 0004             		lea	($C00004).l,a5
000010DA 2ABC 9401 9340             		move.l	#$94019340,(a5)
000010E0 2ABC 96FC 9500             		move.l	#$96FC9500,(a5)
000010E6 3ABC 977F                  		move.w	#$977F,(a5)
000010EA 3ABC 7800                  		move.w	#$7800,(a5)
000010EE 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
000010F4 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
000010F8 4BF9 00C0 0004             		lea	($C00004).l,a5
000010FE 2ABC 9401 93C0             		move.l	#$940193C0,(a5)
00001104 2ABC 96E6 9500             		move.l	#$96E69500,(a5)
0000110A 3ABC 977F                  		move.w	#$977F,(a5)
0000110E 3ABC 7C00                  		move.w	#$7C00,(a5)
00001112 31FC 0083 F640             		move.w	#$83,($FFFFF640).w
00001118 3AB8 F640                  		move.w	($FFFFF640).w,(a5)
0000111C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001124 4E75                       		rts	
00001126                            ; End of function sub_106E
00001126                            
00001126                            ; ---------------------------------------------------------------------------
00001126                            ; Subroutine to	move pallets from the RAM to CRAM
00001126                            ; ---------------------------------------------------------------------------
00001126                            
00001126                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001126                            
00001126                            
00001126                            PalToCRAM:
00001126 46FC 2700                  		move	#$2700,sr
0000112A 4A78 F644                  		tst.w	($FFFFF644).w
0000112E 6700                       		beq.s	locret_119C
00001130 31FC 0000 F644             		move.w	#0,($FFFFF644).w
00001136 48E7 00C0                  		movem.l	a0-a1,-(sp)
0000113A 43F9 00C0 0000             		lea	($C00000).l,a1
00001140 41F8 FA80                  		lea	($FFFFFA80).w,a0 ; load	pallet from RAM
00001144 237C C000 0000 0004        		move.l	#$C0000000,4(a1) ; set VDP to CRAM write
0000114C 2298                       		move.l	(a0)+,(a1)	; move pallet to CRAM
0000114E 2298                       		move.l	(a0)+,(a1)
00001150 2298                       		move.l	(a0)+,(a1)
00001152 2298                       		move.l	(a0)+,(a1)
00001154 2298                       		move.l	(a0)+,(a1)
00001156 2298                       		move.l	(a0)+,(a1)
00001158 2298                       		move.l	(a0)+,(a1)
0000115A 2298                       		move.l	(a0)+,(a1)
0000115C 2298                       		move.l	(a0)+,(a1)
0000115E 2298                       		move.l	(a0)+,(a1)
00001160 2298                       		move.l	(a0)+,(a1)
00001162 2298                       		move.l	(a0)+,(a1)
00001164 2298                       		move.l	(a0)+,(a1)
00001166 2298                       		move.l	(a0)+,(a1)
00001168 2298                       		move.l	(a0)+,(a1)
0000116A 2298                       		move.l	(a0)+,(a1)
0000116C 2298                       		move.l	(a0)+,(a1)
0000116E 2298                       		move.l	(a0)+,(a1)
00001170 2298                       		move.l	(a0)+,(a1)
00001172 2298                       		move.l	(a0)+,(a1)
00001174 2298                       		move.l	(a0)+,(a1)
00001176 2298                       		move.l	(a0)+,(a1)
00001178 2298                       		move.l	(a0)+,(a1)
0000117A 2298                       		move.l	(a0)+,(a1)
0000117C 2298                       		move.l	(a0)+,(a1)
0000117E 2298                       		move.l	(a0)+,(a1)
00001180 2298                       		move.l	(a0)+,(a1)
00001182 2298                       		move.l	(a0)+,(a1)
00001184 2298                       		move.l	(a0)+,(a1)
00001186 2298                       		move.l	(a0)+,(a1)
00001188 2298                       		move.l	(a0)+,(a1)
0000118A 2298                       		move.l	(a0)+,(a1)
0000118C 337C 8ADF 0004             		move.w	#$8ADF,4(a1)
00001192 4CDF 0300                  		movem.l	(sp)+,a0-a1
00001196 4A38 F64F                  		tst.b	($FFFFF64F).w
0000119A 6600                       		bne.s	loc_119E
0000119C                            
0000119C                            locret_119C:
0000119C 4E73                       		rte	
0000119E                            ; ===========================================================================
0000119E                            
0000119E                            loc_119E:				; XREF: PalToCRAM
0000119E 4238 F64F                  		clr.b	($FFFFF64F).w
000011A2 48E7 FFFE                  		movem.l	d0-a6,-(sp)
000011A6 6100 FBDC                  		bsr.w	Demo_Time
000011AA 4EB9 0000 0000             		jsr	sub_71B4C
000011B0 4CDF 7FFF                  		movem.l	(sp)+,d0-a6
000011B4 4E73                       		rte	
000011B6                            ; End of function PalToCRAM
000011B6                            
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            ; Subroutine to	initialise joypads
000011B6                            ; ---------------------------------------------------------------------------
000011B6                            
000011B6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011B6                            
000011B6                            
000011B6                            JoypadInit:				; XREF: GameClrRAM
000011B6 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
000011BE                            
000011BE                            Joypad_WaitZ80:
000011BE 0839 0000 00A1 1100        		btst	#0,($A11100).l	; has the Z80 stopped?
000011C6 66F6                       		bne.s	Joypad_WaitZ80	; if not, branch
000011C8 7040                       		moveq	#$40,d0
000011CA 13C0 00A1 0009             		move.b	d0,($A10009).l	; init port 1 (joypad 1)
000011D0 13C0 00A1 000B             		move.b	d0,($A1000B).l	; init port 2 (joypad 2)
000011D6 13C0 00A1 000D             		move.b	d0,($A1000D).l	; init port 3 (extra)
000011DC 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
000011E4 4E75                       		rts	
000011E6                            ; End of function JoypadInit
000011E6                            
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            ; Subroutine to	read joypad input, and send it to the RAM
000011E6                            ; ---------------------------------------------------------------------------
000011E6                            
000011E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000011E6                            
000011E6                            
000011E6                            ReadJoypads:
000011E6 41F8 F604                  		lea	($FFFFF604).w,a0 ; address where joypad	states are written
000011EA 43F9 00A1 0003             		lea	($A10003).l,a1	; first	joypad port
000011F0 6100                       		bsr.s	Joypad_Read	; do the first joypad
000011F2 5449                       		addq.w	#2,a1		; do the second	joypad
000011F4                            
000011F4                            Joypad_Read:
000011F4 12BC 0000                  		move.b	#0,(a1)
000011F8 4E71                       		nop	
000011FA 4E71                       		nop	
000011FC 1011                       		move.b	(a1),d0
000011FE E508                       		lsl.b	#2,d0
00001200 0200 00C0                  		andi.b	#$C0,d0
00001204 12BC 0040                  		move.b	#$40,(a1)
00001208 4E71                       		nop	
0000120A 4E71                       		nop	
0000120C 1211                       		move.b	(a1),d1
0000120E 0201 003F                  		andi.b	#$3F,d1
00001212 8001                       		or.b	d1,d0
00001214 4600                       		not.b	d0
00001216 1210                       		move.b	(a0),d1
00001218 B101                       		eor.b	d0,d1
0000121A 10C0                       		move.b	d0,(a0)+
0000121C C200                       		and.b	d0,d1
0000121E 10C1                       		move.b	d1,(a0)+
00001220 4E75                       		rts	
00001222                            ; End of function ReadJoypads
00001222                            
00001222                            
00001222                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001222                            
00001222                            
00001222                            VDPSetupGame:				; XREF: GameClrRAM; ChecksumError
00001222 41F9 00C0 0004             		lea	($C00004).l,a0
00001228 43F9 00C0 0000             		lea	($C00000).l,a1
0000122E 45F9 0000 0000             		lea	(VDPSetupArray).l,a2
00001234 7E12                       		moveq	#$12,d7
00001236                            
00001236                            VDP_Loop:
00001236 309A                       		move.w	(a2)+,(a0)
00001238 51CF FFFC                  		dbf	d7,VDP_Loop	; set the VDP registers
0000123C                            
0000123C 3039 0000 0000             		move.w	(VDPSetupArray+2).l,d0
00001242 31C0 F60C                  		move.w	d0,($FFFFF60C).w
00001246 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
0000124C 7000                       		moveq	#0,d0
0000124E 23FC C000 0000 00C0 0004   		move.l	#$C0000000,($C00004).l ; set VDP to CRAM write
00001258 3E3C 003F                  		move.w	#$3F,d7
0000125C                            
0000125C                            VDP_ClrCRAM:
0000125C 3280                       		move.w	d0,(a1)
0000125E 51CF FFFC                  		dbf	d7,VDP_ClrCRAM	; clear	the CRAM
00001262                            
00001262 42B8 F616                  		clr.l	($FFFFF616).w
00001266 42B8 F61A                  		clr.l	($FFFFF61A).w
0000126A 2F01                       		move.l	d1,-(sp)
0000126C 4BF9 00C0 0004             		lea	($C00004).l,a5
00001272 3ABC 8F01                  		move.w	#$8F01,(a5)
00001276 2ABC 94FF 93FF             		move.l	#$94FF93FF,(a5)
0000127C 3ABC 9780                  		move.w	#$9780,(a5)
00001280 2ABC 4000 0080             		move.l	#$40000080,(a5)
00001286 33FC 0000 00C0 0000        		move.w	#0,($C00000).l	; clear	the screen
0000128E                            
0000128E                            loc_128E:
0000128E 3215                       		move.w	(a5),d1
00001290 0801 0001                  		btst	#1,d1
00001294 66F8                       		bne.s	loc_128E
00001296                            
00001296 3ABC 8F02                  		move.w	#$8F02,(a5)
0000129A 221F                       		move.l	(sp)+,d1
0000129C 4E75                       		rts	
0000129E                            ; End of function VDPSetupGame
0000129E                            
0000129E                            ; ===========================================================================
0000129E 8004 8134 8230 8328        VDPSetupArray:	dc.w $8004, $8134, $8230, $8328	; XREF: VDPSetupGame
000012A6 8407 857C 8600 8700        		dc.w $8407, $857C, $8600, $8700
000012AE 8800 8900 8A00 8B00        		dc.w $8800, $8900, $8A00, $8B00
000012B6 8C81 8D3F 8E00 8F02        		dc.w $8C81, $8D3F, $8E00, $8F02
000012BE 9001 9100 9200             		dc.w $9001, $9100, $9200
000012C4                            
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            ; Subroutine to	clear the screen
000012C4                            ; ---------------------------------------------------------------------------
000012C4                            
000012C4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000012C4                            
000012C4                            
000012C4                            ClearScreen:
000012C4 4BF9 00C0 0004             		lea	($C00004).l,a5
000012CA 3ABC 8F01                  		move.w	#$8F01,(a5)
000012CE 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
000012D4 3ABC 9780                  		move.w	#$9780,(a5)
000012D8 2ABC 4000 0083             		move.l	#$40000083,(a5)
000012DE 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
000012E6                            
000012E6                            loc_12E6:
000012E6 3215                       		move.w	(a5),d1
000012E8 0801 0001                  		btst	#1,d1
000012EC 66F8                       		bne.s	loc_12E6
000012EE                            
000012EE 3ABC 8F02                  		move.w	#$8F02,(a5)
000012F2 4BF9 00C0 0004             		lea	($C00004).l,a5
000012F8 3ABC 8F01                  		move.w	#$8F01,(a5)
000012FC 2ABC 940F 93FF             		move.l	#$940F93FF,(a5)
00001302 3ABC 9780                  		move.w	#$9780,(a5)
00001306 2ABC 6000 0083             		move.l	#$60000083,(a5)
0000130C 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00001314                            
00001314                            loc_1314:
00001314 3215                       		move.w	(a5),d1
00001316 0801 0001                  		btst	#1,d1
0000131A 66F8                       		bne.s	loc_1314
0000131C                            
0000131C 3ABC 8F02                  		move.w	#$8F02,(a5)
00001320 21FC 0000 0000 F616        		move.l	#0,($FFFFF616).w
00001328 21FC 0000 0000 F61A        		move.l	#0,($FFFFF61A).w
00001330 43F8 F800                  		lea	($FFFFF800).w,a1
00001334 7000                       		moveq	#0,d0
00001336 323C 00A0                  		move.w	#$A0,d1
0000133A                            
0000133A                            loc_133A:
0000133A 22C0                       		move.l	d0,(a1)+
0000133C 51C9 FFFC                  		dbf	d1,loc_133A
00001340                            
00001340 43F8 CC00                  		lea	($FFFFCC00).w,a1
00001344 7000                       		moveq	#0,d0
00001346 323C 0100                  		move.w	#$100,d1
0000134A                            
0000134A                            loc_134A:
0000134A 22C0                       		move.l	d0,(a1)+
0000134C 51C9 FFFC                  		dbf	d1,loc_134A
00001350 4E75                       		rts	
00001352                            ; End of function ClearScreen
00001352                            
00001352                            ; ---------------------------------------------------------------------------
00001352                            ; Subroutine to	load the sound driver
00001352                            ; ---------------------------------------------------------------------------
00001352                            
00001352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001352                            
00001352                            
00001352                            SoundDriverLoad:			; XREF: GameClrRAM; TitleScreen
00001352 4E71                       		nop	
00001354 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
0000135C 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
00001364 41F9 0000 0000             		lea	(Kos_Z80).l,a0	; load sound driver
0000136A 43F9 00A0 0000             		lea	($A00000).l,a1
00001370 6100 0000                  		bsr.w	KosDec		; decompress
00001374 33FC 0000 00A1 1200        		move.w	#0,($A11200).l
0000137C 4E71                       		nop	
0000137E 4E71                       		nop	
00001380 4E71                       		nop	
00001382 4E71                       		nop	
00001384 33FC 0100 00A1 1200        		move.w	#$100,($A11200).l ; reset the Z80
0000138C 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00001394 4E75                       		rts	
00001396                            ; End of function SoundDriverLoad
00001396                            
00001396                            ; ---------------------------------------------------------------------------
00001396                            ; Subroutine to	play a sound or	music track
00001396                            ; ---------------------------------------------------------------------------
00001396                            
00001396                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001396                            
00001396                            
00001396                            PlaySound:
00001396 11C0 F00A                  		move.b	d0,($FFFFF00A).w
0000139A 4E75                       		rts	
0000139C                            ; End of function PlaySound
0000139C                            
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            ; Subroutine to	play a special sound/music (E0-E4)
0000139C                            ;
0000139C                            ; E0 - Fade out
0000139C                            ; E1 - Sega
0000139C                            ; E2 - Speed up
0000139C                            ; E3 - Normal speed
0000139C                            ; E4 - Stop
0000139C                            ; ---------------------------------------------------------------------------
0000139C                            
0000139C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000139C                            
0000139C                            
0000139C                            PlaySound_Special:
0000139C 11C0 F00B                  		move.b	d0,($FFFFF00B).w
000013A0 4E75                       		rts	
000013A2                            ; End of function PlaySound_Special
000013A2                            
000013A2                            ; ===========================================================================
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            ; Unused sound/music subroutine
000013A2                            ; ---------------------------------------------------------------------------
000013A2                            
000013A2                            PlaySound_Unk:
000013A2 11C0 F00C                  		move.b	d0,($FFFFF00C).w
000013A6 4E75                       		rts	
000013A8                            
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            ; Subroutine to	pause the game
000013A8                            ; ---------------------------------------------------------------------------
000013A8                            
000013A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000013A8                            
000013A8                            
000013A8                            PauseGame:				; XREF: Level_MainLoop; et al
000013A8 4E71                       		nop	
000013AA 4A38 FE12                  		tst.b	($FFFFFE12).w	; do you have any lives	left?
000013AE 6700                       		beq.s	Unpause		; if not, branch
000013B0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is game already paused?
000013B4 6600                       		bne.s	loc_13BE	; if yes, branch
000013B6 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000013BC 6700                       		beq.s	Pause_DoNothing	; if not, branch
000013BE                            
000013BE                            loc_13BE:
000013BE 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w ; freeze time
000013C4 11FC 0001 F003             		move.b	#1,($FFFFF003).w ; pause music
000013CA                            
000013CA                            loc_13CA:
000013CA 11FC 0010 F62A             		move.b	#$10,($FFFFF62A).w
000013D0 6100 0000                  		bsr.w	DelayProgram
000013D4 4A38 FFE1                  		tst.b	($FFFFFFE1).w	; is slow-motion cheat on?
000013D8 6700                       		beq.s	Pause_ChkStart	; if not, branch
000013DA 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
000013E0 6700                       		beq.s	Pause_ChkBC	; if not, branch
000013E2 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; set game mode to 4 (title screen)
000013E8 4E71                       		nop	
000013EA 6000                       		bra.s	loc_1404
000013EC                            ; ===========================================================================
000013EC                            
000013EC                            Pause_ChkBC:				; XREF: PauseGame
000013EC 0838 0004 F604             		btst	#4,($FFFFF604).w ; is button B pressed?
000013F2 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013F4 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
000013FA 6600                       		bne.s	Pause_SlowMo	; if yes, branch
000013FC                            
000013FC                            Pause_ChkStart:				; XREF: PauseGame
000013FC 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
00001402 67C6                       		beq.s	loc_13CA	; if not, branch
00001404                            
00001404                            loc_1404:				; XREF: PauseGame
00001404 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000140A                            
0000140A                            Unpause:				; XREF: PauseGame
0000140A 31FC 0000 F63A             		move.w	#0,($FFFFF63A).w ; unpause the game
00001410                            
00001410                            Pause_DoNothing:			; XREF: PauseGame
00001410 4E75                       		rts	
00001412                            ; ===========================================================================
00001412                            
00001412                            Pause_SlowMo:				; XREF: PauseGame
00001412 31FC 0001 F63A             		move.w	#1,($FFFFF63A).w
00001418 11FC 0080 F003             		move.b	#$80,($FFFFF003).w
0000141E 4E75                       		rts	
00001420                            ; End of function PauseGame
00001420                            
00001420                            ; ---------------------------------------------------------------------------
00001420                            ; Subroutine to	display	patterns via the VDP
00001420                            ; ---------------------------------------------------------------------------
00001420                            
00001420                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001420                            
00001420                            
00001420                            ShowVDPGraphics:			; XREF: SegaScreen; TitleScreen; SS_BGLoad
00001420 4DF9 00C0 0000             		lea	($C00000).l,a6
00001426 283C 0080 0000             		move.l	#$800000,d4
0000142C                            
0000142C                            loc_142C:
0000142C 2D40 0004                  		move.l	d0,4(a6)
00001430 3601                       		move.w	d1,d3
00001432                            
00001432                            loc_1432:
00001432 3C99                       		move.w	(a1)+,(a6)
00001434 51CB FFFC                  		dbf	d3,loc_1432
00001438 D084                       		add.l	d4,d0
0000143A 51CA FFF0                  		dbf	d2,loc_142C
0000143E 4E75                       		rts	
00001440                            ; End of function ShowVDPGraphics
00001440                            
00001440                            ; ---------------------------------------------------------------------------
00001440                            ; Nemesis decompression	algorithm
00001440                            ; ---------------------------------------------------------------------------
00001440                            
00001440                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001440                            
00001440                            
00001440                            NemDec:
00001440 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001444 47F9 0000 0000             		lea	(loc_1502).l,a3
0000144A 49F9 00C0 0000             		lea	($C00000).l,a4
00001450 6000                       		bra.s	loc_145C
00001452                            ; ===========================================================================
00001452 48E7 FFDC                  		movem.l	d0-a1/a3-a5,-(sp)
00001456 47F9 0000 0000             		lea	(loc_1518).l,a3
0000145C                            
0000145C                            loc_145C:				; XREF: NemDec
0000145C 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001460 3418                       		move.w	(a0)+,d2
00001462 E34A                       		lsl.w	#1,d2
00001464 6400                       		bcc.s	loc_146A
00001466 D6FC 000A                  		adda.w	#$A,a3
0000146A                            
0000146A                            loc_146A:
0000146A E54A                       		lsl.w	#2,d2
0000146C 3A42                       		movea.w	d2,a5
0000146E 7608                       		moveq	#8,d3
00001470 7400                       		moveq	#0,d2
00001472 7800                       		moveq	#0,d4
00001474 6100 0000                  		bsr.w	NemDec4
00001478 1A18                       		move.b	(a0)+,d5
0000147A E145                       		asl.w	#8,d5
0000147C 1A18                       		move.b	(a0)+,d5
0000147E 3C3C 0010                  		move.w	#$10,d6
00001482 6100                       		bsr.s	NemDec2
00001484 4CDF 3BFF                  		movem.l	(sp)+,d0-a1/a3-a5
00001488 4E75                       		rts	
0000148A                            ; End of function NemDec
0000148A                            
0000148A                            
0000148A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000148A                            
0000148A                            
0000148A                            NemDec2:				; XREF: NemDec
0000148A 3E06                       		move.w	d6,d7
0000148C 5147                       		subq.w	#8,d7
0000148E 3205                       		move.w	d5,d1
00001490 EE69                       		lsr.w	d7,d1
00001492 0C01 00FC                  		cmpi.b	#-4,d1
00001496 6400                       		bcc.s	loc_14D6
00001498 0241 00FF                  		andi.w	#$FF,d1
0000149C D241                       		add.w	d1,d1
0000149E 1031 1000                  		move.b	(a1,d1.w),d0
000014A2 4880                       		ext.w	d0
000014A4 9C40                       		sub.w	d0,d6
000014A6 0C46 0009                  		cmpi.w	#9,d6
000014AA 6400                       		bcc.s	loc_14B2
000014AC 5046                       		addq.w	#8,d6
000014AE E145                       		asl.w	#8,d5
000014B0 1A18                       		move.b	(a0)+,d5
000014B2                            
000014B2                            loc_14B2:
000014B2 1231 1001                  		move.b	1(a1,d1.w),d1
000014B6 3001                       		move.w	d1,d0
000014B8 0241 000F                  		andi.w	#$F,d1
000014BC 0240 00F0                  		andi.w	#$F0,d0
000014C0                            
000014C0                            loc_14C0:				; XREF: NemDec3
000014C0 E848                       		lsr.w	#4,d0
000014C2                            
000014C2                            loc_14C2:				; XREF: NemDec3
000014C2 E98C                       		lsl.l	#4,d4
000014C4 8801                       		or.b	d1,d4
000014C6 5343                       		subq.w	#1,d3
000014C8 6600                       		bne.s	loc_14D0
000014CA 4ED3                       		jmp	(a3)
000014CC                            ; End of function NemDec2
000014CC                            
000014CC                            
000014CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000014CC                            
000014CC                            
000014CC                            NemDec3:				; XREF: loc_1502
000014CC 7800                       		moveq	#0,d4
000014CE 7608                       		moveq	#8,d3
000014D0                            
000014D0                            loc_14D0:				; XREF: NemDec2
000014D0 51C8 FFF0                  		dbf	d0,loc_14C2
000014D4 60B4                       		bra.s	NemDec2
000014D6                            ; ===========================================================================
000014D6                            
000014D6                            loc_14D6:				; XREF: NemDec2
000014D6 5D46                       		subq.w	#6,d6
000014D8 0C46 0009                  		cmpi.w	#9,d6
000014DC 6400                       		bcc.s	loc_14E4
000014DE 5046                       		addq.w	#8,d6
000014E0 E145                       		asl.w	#8,d5
000014E2 1A18                       		move.b	(a0)+,d5
000014E4                            
000014E4                            loc_14E4:				; XREF: NemDec3
000014E4 5F46                       		subq.w	#7,d6
000014E6 3205                       		move.w	d5,d1
000014E8 EC69                       		lsr.w	d6,d1
000014EA 3001                       		move.w	d1,d0
000014EC 0241 000F                  		andi.w	#$F,d1
000014F0 0240 0070                  		andi.w	#$70,d0
000014F4 0C46 0009                  		cmpi.w	#9,d6
000014F8 64C6                       		bcc.s	loc_14C0
000014FA 5046                       		addq.w	#8,d6
000014FC E145                       		asl.w	#8,d5
000014FE 1A18                       		move.b	(a0)+,d5
00001500 60BE                       		bra.s	loc_14C0
00001502                            ; End of function NemDec3
00001502                            
00001502                            ; ===========================================================================
00001502                            
00001502                            loc_1502:				; XREF: NemDec
00001502 2884                       		move.l	d4,(a4)
00001504 534D                       		subq.w	#1,a5
00001506 380D                       		move.w	a5,d4
00001508 66C2                       		bne.s	NemDec3
0000150A 4E75                       		rts	
0000150C                            ; ===========================================================================
0000150C B982                       		eor.l	d4,d2
0000150E 2882                       		move.l	d2,(a4)
00001510 534D                       		subq.w	#1,a5
00001512 380D                       		move.w	a5,d4
00001514 66B6                       		bne.s	NemDec3
00001516 4E75                       		rts	
00001518                            ; ===========================================================================
00001518                            
00001518                            loc_1518:				; XREF: NemDec
00001518 28C4                       		move.l	d4,(a4)+
0000151A 534D                       		subq.w	#1,a5
0000151C 380D                       		move.w	a5,d4
0000151E 66AC                       		bne.s	NemDec3
00001520 4E75                       		rts	
00001522                            ; ===========================================================================
00001522 B982                       		eor.l	d4,d2
00001524 28C2                       		move.l	d2,(a4)+
00001526 534D                       		subq.w	#1,a5
00001528 380D                       		move.w	a5,d4
0000152A 66A0                       		bne.s	NemDec3
0000152C 4E75                       		rts	
0000152E                            
0000152E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000152E                            
0000152E                            
0000152E                            NemDec4:				; XREF: NemDec
0000152E 1018                       		move.b	(a0)+,d0
00001530                            
00001530                            loc_1530:
00001530 0C00 00FF                  		cmpi.b	#-1,d0
00001534 6600                       		bne.s	loc_1538
00001536 4E75                       		rts	
00001538                            ; ===========================================================================
00001538                            
00001538                            loc_1538:				; XREF: NemDec4
00001538 3E00                       		move.w	d0,d7
0000153A                            
0000153A                            loc_153A:
0000153A 1018                       		move.b	(a0)+,d0
0000153C 0C00 0080                  		cmpi.b	#$80,d0
00001540 64EE                       		bcc.s	loc_1530
00001542 1200                       		move.b	d0,d1
00001544 0247 000F                  		andi.w	#$F,d7
00001548 0241 0070                  		andi.w	#$70,d1
0000154C 8E41                       		or.w	d1,d7
0000154E 0240 000F                  		andi.w	#$F,d0
00001552 1200                       		move.b	d0,d1
00001554 E149                       		lsl.w	#8,d1
00001556 8E41                       		or.w	d1,d7
00001558 7208                       		moveq	#8,d1
0000155A 9240                       		sub.w	d0,d1
0000155C 6600                       		bne.s	loc_1568
0000155E 1018                       		move.b	(a0)+,d0
00001560 D040                       		add.w	d0,d0
00001562 3387 0000                  		move.w	d7,(a1,d0.w)
00001566 60D2                       		bra.s	loc_153A
00001568                            ; ===========================================================================
00001568                            
00001568                            loc_1568:				; XREF: NemDec4
00001568 1018                       		move.b	(a0)+,d0
0000156A E368                       		lsl.w	d1,d0
0000156C D040                       		add.w	d0,d0
0000156E 7A01                       		moveq	#1,d5
00001570 E36D                       		lsl.w	d1,d5
00001572 5345                       		subq.w	#1,d5
00001574                            
00001574                            loc_1574:
00001574 3387 0000                  		move.w	d7,(a1,d0.w)
00001578 5440                       		addq.w	#2,d0
0000157A 51CD FFF8                  		dbf	d5,loc_1574
0000157E 60BA                       		bra.s	loc_153A
00001580                            ; End of function NemDec4
00001580                            
00001580                            ; ---------------------------------------------------------------------------
00001580                            ; Subroutine to	load pattern load cues
00001580                            ; ---------------------------------------------------------------------------
00001580                            
00001580                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001580                            
00001580                            
00001580                            LoadPLC:
00001580 48E7 0060                  		movem.l	a1-a2,-(sp)
00001584 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
0000158A D040                       		add.w	d0,d0
0000158C 3031 0000                  		move.w	(a1,d0.w),d0
00001590 43F1 0000                  		lea	(a1,d0.w),a1
00001594 45F8 F680                  		lea	($FFFFF680).w,a2
00001598                            
00001598                            loc_1598:
00001598 4A92                       		tst.l	(a2)
0000159A 6700                       		beq.s	loc_15A0
0000159C 5C4A                       		addq.w	#6,a2
0000159E 60F8                       		bra.s	loc_1598
000015A0                            ; ===========================================================================
000015A0                            
000015A0                            loc_15A0:				; XREF: LoadPLC
000015A0 3019                       		move.w	(a1)+,d0
000015A2 6B00                       		bmi.s	loc_15AC
000015A4                            
000015A4                            loc_15A4:
000015A4 24D9                       		move.l	(a1)+,(a2)+
000015A6 34D9                       		move.w	(a1)+,(a2)+
000015A8 51C8 FFFA                  		dbf	d0,loc_15A4
000015AC                            
000015AC                            loc_15AC:
000015AC 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015B0 4E75                       		rts	
000015B2                            ; End of function LoadPLC
000015B2                            
000015B2                            
000015B2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015B2                            
000015B2                            
000015B2                            LoadPLC2:
000015B2 48E7 0060                  		movem.l	a1-a2,-(sp)
000015B6 43F9 0000 0000             		lea	(ArtLoadCues).l,a1
000015BC D040                       		add.w	d0,d0
000015BE 3031 0000                  		move.w	(a1,d0.w),d0
000015C2 43F1 0000                  		lea	(a1,d0.w),a1
000015C6 6100                       		bsr.s	ClearPLC
000015C8 45F8 F680                  		lea	($FFFFF680).w,a2
000015CC 3019                       		move.w	(a1)+,d0
000015CE 6B00                       		bmi.s	loc_15D8
000015D0                            
000015D0                            loc_15D0:
000015D0 24D9                       		move.l	(a1)+,(a2)+
000015D2 34D9                       		move.w	(a1)+,(a2)+
000015D4 51C8 FFFA                  		dbf	d0,loc_15D0
000015D8                            
000015D8                            loc_15D8:
000015D8 4CDF 0600                  		movem.l	(sp)+,a1-a2
000015DC 4E75                       		rts	
000015DE                            ; End of function LoadPLC2
000015DE                            
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            ; Subroutine to	clear the pattern load cues
000015DE                            ; ---------------------------------------------------------------------------
000015DE                            
000015DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015DE                            
000015DE                            
000015DE                            ClearPLC:				; XREF: LoadPLC2
000015DE 45F8 F680                  		lea	($FFFFF680).w,a2
000015E2 701F                       		moveq	#$1F,d0
000015E4                            
000015E4                            ClearPLC_Loop:
000015E4 429A                       		clr.l	(a2)+
000015E6 51C8 FFFC                  		dbf	d0,ClearPLC_Loop
000015EA 4E75                       		rts	
000015EC                            ; End of function ClearPLC
000015EC                            
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            ; Subroutine to	use graphics listed in a pattern load cue
000015EC                            ; ---------------------------------------------------------------------------
000015EC                            
000015EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000015EC                            
000015EC                            
000015EC                            RunPLC_RAM:				; XREF: Pal_FadeTo
000015EC 4AB8 F680                  		tst.l	($FFFFF680).w
000015F0 6700                       		beq.s	locret_1640
000015F2 4A78 F6F8                  		tst.w	($FFFFF6F8).w
000015F6 6600                       		bne.s	locret_1640
000015F8 2078 F680                  		movea.l	($FFFFF680).w,a0
000015FC 47F9 0000 1502             		lea	(loc_1502).l,a3
00001602 43F8 AA00                  		lea	($FFFFAA00).w,a1
00001606 3418                       		move.w	(a0)+,d2
00001608 6A00                       		bpl.s	loc_160E
0000160A D6FC 000A                  		adda.w	#$A,a3
0000160E                            
0000160E                            loc_160E:
0000160E 0242 7FFF                  		andi.w	#$7FFF,d2
00001612 31C2 F6F8                  		move.w	d2,($FFFFF6F8).w
00001616 6100 FF16                  		bsr.w	NemDec4
0000161A 1A18                       		move.b	(a0)+,d5
0000161C E145                       		asl.w	#8,d5
0000161E 1A18                       		move.b	(a0)+,d5
00001620 7C10                       		moveq	#$10,d6
00001622 7000                       		moveq	#0,d0
00001624 21C8 F680                  		move.l	a0,($FFFFF680).w
00001628 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
0000162C 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
00001630 21C0 F6E8                  		move.l	d0,($FFFFF6E8).w
00001634 21C0 F6EC                  		move.l	d0,($FFFFF6EC).w
00001638 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
0000163C 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
00001640                            
00001640                            locret_1640:
00001640 4E75                       		rts	
00001642                            ; End of function RunPLC_RAM
00001642                            
00001642                            
00001642                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001642                            
00001642                            
00001642                            sub_1642:				; XREF: loc_C44; loc_F54; loc_F9A
00001642 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001646 6700 0000                  		beq.w	locret_16DA
0000164A 31FC 0009 F6FA             		move.w	#9,($FFFFF6FA).w
00001650 7000                       		moveq	#0,d0
00001652 3038 F684                  		move.w	($FFFFF684).w,d0
00001656 0678 0120 F684             		addi.w	#$120,($FFFFF684).w
0000165C 6000                       		bra.s	loc_1676
0000165E                            ; End of function sub_1642
0000165E                            
0000165E                            
0000165E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000165E                            
0000165E                            
0000165E                            sub_165E:				; XREF: Demo_Time
0000165E 4A78 F6F8                  		tst.w	($FFFFF6F8).w
00001662 6700                       		beq.s	locret_16DA
00001664 31FC 0003 F6FA             		move.w	#3,($FFFFF6FA).w
0000166A 7000                       		moveq	#0,d0
0000166C 3038 F684                  		move.w	($FFFFF684).w,d0
00001670 0678 0060 F684             		addi.w	#$60,($FFFFF684).w
00001676                            
00001676                            loc_1676:				; XREF: sub_1642
00001676 49F9 00C0 0004             		lea	($C00004).l,a4
0000167C E588                       		lsl.l	#2,d0
0000167E E448                       		lsr.w	#2,d0
00001680 0040 4000                  		ori.w	#$4000,d0
00001684 4840                       		swap	d0
00001686 2880                       		move.l	d0,(a4)
00001688 594C                       		subq.w	#4,a4
0000168A 2078 F680                  		movea.l	($FFFFF680).w,a0
0000168E 2678 F6E0                  		movea.l	($FFFFF6E0).w,a3
00001692 2038 F6E4                  		move.l	($FFFFF6E4).w,d0
00001696 2238 F6E8                  		move.l	($FFFFF6E8).w,d1
0000169A 2438 F6EC                  		move.l	($FFFFF6EC).w,d2
0000169E 2A38 F6F0                  		move.l	($FFFFF6F0).w,d5
000016A2 2C38 F6F4                  		move.l	($FFFFF6F4).w,d6
000016A6 43F8 AA00                  		lea	($FFFFAA00).w,a1
000016AA                            
000016AA                            loc_16AA:				; XREF: sub_165E
000016AA 3A7C 0008                  		movea.w	#8,a5
000016AE 6100 FE1C                  		bsr.w	NemDec3
000016B2 5378 F6F8                  		subq.w	#1,($FFFFF6F8).w
000016B6 6700                       		beq.s	loc_16DC
000016B8 5378 F6FA                  		subq.w	#1,($FFFFF6FA).w
000016BC 66EC                       		bne.s	loc_16AA
000016BE 21C8 F680                  		move.l	a0,($FFFFF680).w
000016C2 21CB F6E0                  		move.l	a3,($FFFFF6E0).w
000016C6 21C0 F6E4                  		move.l	d0,($FFFFF6E4).w
000016CA 21C1 F6E8                  		move.l	d1,($FFFFF6E8).w
000016CE 21C2 F6EC                  		move.l	d2,($FFFFF6EC).w
000016D2 21C5 F6F0                  		move.l	d5,($FFFFF6F0).w
000016D6 21C6 F6F4                  		move.l	d6,($FFFFF6F4).w
000016DA                            
000016DA                            locret_16DA:				; XREF: sub_1642
000016DA 4E75                       		rts	
000016DC                            ; ===========================================================================
000016DC                            
000016DC                            loc_16DC:				; XREF: sub_165E
000016DC 41F8 F680                  		lea	($FFFFF680).w,a0
000016E0 7015                       		moveq	#$15,d0
000016E2                            
000016E2                            loc_16E2:				; XREF: sub_165E
000016E2 20E8 0006                  		move.l	6(a0),(a0)+
000016E6 51C8 FFFA                  		dbf	d0,loc_16E2
000016EA 4E75                       		rts	
000016EC                            ; End of function sub_165E
000016EC                            
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            ; Subroutine to	execute	the pattern load cue
000016EC                            ; ---------------------------------------------------------------------------
000016EC                            
000016EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000016EC                            
000016EC                            
000016EC                            RunPLC_ROM:
000016EC 43F9 0000 0000             		lea	(ArtLoadCues).l,a1 ; load the PLC index
000016F2 D040                       		add.w	d0,d0
000016F4 3031 0000                  		move.w	(a1,d0.w),d0
000016F8 43F1 0000                  		lea	(a1,d0.w),a1
000016FC 3219                       		move.w	(a1)+,d1	; load number of entries in the	PLC
000016FE                            
000016FE                            RunPLC_Loop:
000016FE 2059                       		movea.l	(a1)+,a0	; get art pointer
00001700 7000                       		moveq	#0,d0
00001702 3019                       		move.w	(a1)+,d0	; get VRAM address
00001704 E588                       		lsl.l	#2,d0		; divide address by $20
00001706 E448                       		lsr.w	#2,d0
00001708 0040 4000                  		ori.w	#$4000,d0
0000170C 4840                       		swap	d0
0000170E 23C0 00C0 0004             		move.l	d0,($C00004).l	; put the VRAM address into VDP
00001714 6100 FD2A                  		bsr.w	NemDec		; decompress
00001718 51C9 FFE4                  		dbf	d1,RunPLC_Loop	; loop for number of entries
0000171C 4E75                       		rts	
0000171E                            ; End of function RunPLC_ROM
0000171E                            
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            ; Enigma decompression algorithm
0000171E                            ; ---------------------------------------------------------------------------
0000171E                            
0000171E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000171E                            
0000171E                            
0000171E                            EniDec:
0000171E 48E7 FF7C                  		movem.l	d0-d7/a1-a5,-(sp)
00001722 3640                       		movea.w	d0,a3
00001724 1018                       		move.b	(a0)+,d0
00001726 4880                       		ext.w	d0
00001728 3A40                       		movea.w	d0,a5
0000172A 1818                       		move.b	(a0)+,d4
0000172C E70C                       		lsl.b	#3,d4
0000172E 3458                       		movea.w	(a0)+,a2
00001730 D4CB                       		adda.w	a3,a2
00001732 3858                       		movea.w	(a0)+,a4
00001734 D8CB                       		adda.w	a3,a4
00001736 1A18                       		move.b	(a0)+,d5
00001738 E145                       		asl.w	#8,d5
0000173A 1A18                       		move.b	(a0)+,d5
0000173C 7C10                       		moveq	#$10,d6
0000173E                            
0000173E                            loc_173E:				; XREF: loc_1768
0000173E 7007                       		moveq	#7,d0
00001740 3E06                       		move.w	d6,d7
00001742 9E40                       		sub.w	d0,d7
00001744 3205                       		move.w	d5,d1
00001746 EE69                       		lsr.w	d7,d1
00001748 0241 007F                  		andi.w	#$7F,d1
0000174C 3401                       		move.w	d1,d2
0000174E 0C41 0040                  		cmpi.w	#$40,d1
00001752 6400                       		bcc.s	loc_1758
00001754 7006                       		moveq	#6,d0
00001756 E24A                       		lsr.w	#1,d2
00001758                            
00001758                            loc_1758:
00001758 6100 0000                  		bsr.w	sub_188C
0000175C 0242 000F                  		andi.w	#$F,d2
00001760 E849                       		lsr.w	#4,d1
00001762 D241                       		add.w	d1,d1
00001764 4EFB 1000                  		jmp	loc_17B4(pc,d1.w)
00001768                            ; End of function EniDec
00001768                            
00001768                            ; ===========================================================================
00001768                            
00001768                            loc_1768:				; XREF: loc_17B4
00001768 32CA                       		move.w	a2,(a1)+
0000176A 524A                       		addq.w	#1,a2
0000176C 51CA FFFA                  		dbf	d2,loc_1768
00001770 60CC                       		bra.s	loc_173E
00001772                            ; ===========================================================================
00001772                            
00001772                            loc_1772:				; XREF: loc_17B4
00001772 32CC                       		move.w	a4,(a1)+
00001774 51CA FFFC                  		dbf	d2,loc_1772
00001778 60C4                       		bra.s	loc_173E
0000177A                            ; ===========================================================================
0000177A                            
0000177A                            loc_177A:				; XREF: loc_17B4
0000177A 6100 0000                  		bsr.w	loc_17DC
0000177E                            
0000177E                            loc_177E:
0000177E 32C1                       		move.w	d1,(a1)+
00001780 51CA FFFC                  		dbf	d2,loc_177E
00001784 60B8                       		bra.s	loc_173E
00001786                            ; ===========================================================================
00001786                            
00001786                            loc_1786:				; XREF: loc_17B4
00001786 6100 0000                  		bsr.w	loc_17DC
0000178A                            
0000178A                            loc_178A:
0000178A 32C1                       		move.w	d1,(a1)+
0000178C 5241                       		addq.w	#1,d1
0000178E 51CA FFFA                  		dbf	d2,loc_178A
00001792 60AA                       		bra.s	loc_173E
00001794                            ; ===========================================================================
00001794                            
00001794                            loc_1794:				; XREF: loc_17B4
00001794 6100 0000                  		bsr.w	loc_17DC
00001798                            
00001798                            loc_1798:
00001798 32C1                       		move.w	d1,(a1)+
0000179A 5341                       		subq.w	#1,d1
0000179C 51CA FFFA                  		dbf	d2,loc_1798
000017A0 609C                       		bra.s	loc_173E
000017A2                            ; ===========================================================================
000017A2                            
000017A2                            loc_17A2:				; XREF: loc_17B4
000017A2 0C42 000F                  		cmpi.w	#$F,d2
000017A6 6700                       		beq.s	loc_17C4
000017A8                            
000017A8                            loc_17A8:
000017A8 6100 0000                  		bsr.w	loc_17DC
000017AC 32C1                       		move.w	d1,(a1)+
000017AE 51CA FFF8                  		dbf	d2,loc_17A8
000017B2 608A                       		bra.s	loc_173E
000017B4                            ; ===========================================================================
000017B4                            
000017B4                            loc_17B4:				; XREF: EniDec
000017B4 60B2                       		bra.s	loc_1768
000017B6                            ; ===========================================================================
000017B6 60B0                       		bra.s	loc_1768
000017B8                            ; ===========================================================================
000017B8 60B8                       		bra.s	loc_1772
000017BA                            ; ===========================================================================
000017BA 60B6                       		bra.s	loc_1772
000017BC                            ; ===========================================================================
000017BC 60BC                       		bra.s	loc_177A
000017BE                            ; ===========================================================================
000017BE 60C6                       		bra.s	loc_1786
000017C0                            ; ===========================================================================
000017C0 60D2                       		bra.s	loc_1794
000017C2                            ; ===========================================================================
000017C2 60DE                       		bra.s	loc_17A2
000017C4                            ; ===========================================================================
000017C4                            
000017C4                            loc_17C4:				; XREF: loc_17A2
000017C4 5348                       		subq.w	#1,a0
000017C6 0C46 0010                  		cmpi.w	#$10,d6
000017CA 6600                       		bne.s	loc_17CE
000017CC 5348                       		subq.w	#1,a0
000017CE                            
000017CE                            loc_17CE:
000017CE 3008                       		move.w	a0,d0
000017D0 E248                       		lsr.w	#1,d0
000017D2 6400                       		bcc.s	loc_17D6
000017D4 5248                       		addq.w	#1,a0
000017D6                            
000017D6                            loc_17D6:
000017D6 4CDF 3EFF                  		movem.l	(sp)+,d0-d7/a1-a5
000017DA 4E75                       		rts	
000017DC                            ; ===========================================================================
000017DC                            
000017DC                            loc_17DC:				; XREF: loc_17A2
000017DC 360B                       		move.w	a3,d3
000017DE 1204                       		move.b	d4,d1
000017E0 D201                       		add.b	d1,d1
000017E2 6400                       		bcc.s	loc_17EE
000017E4 5346                       		subq.w	#1,d6
000017E6 0D05                       		btst	d6,d5
000017E8 6700                       		beq.s	loc_17EE
000017EA 0043 8000                  		ori.w	#-$8000,d3
000017EE                            
000017EE                            loc_17EE:
000017EE D201                       		add.b	d1,d1
000017F0 6400                       		bcc.s	loc_17FC
000017F2 5346                       		subq.w	#1,d6
000017F4 0D05                       		btst	d6,d5
000017F6 6700                       		beq.s	loc_17FC
000017F8 0643 4000                  		addi.w	#$4000,d3
000017FC                            
000017FC                            loc_17FC:
000017FC D201                       		add.b	d1,d1
000017FE 6400                       		bcc.s	loc_180A
00001800 5346                       		subq.w	#1,d6
00001802 0D05                       		btst	d6,d5
00001804 6700                       		beq.s	loc_180A
00001806 0643 2000                  		addi.w	#$2000,d3
0000180A                            
0000180A                            loc_180A:
0000180A D201                       		add.b	d1,d1
0000180C 6400                       		bcc.s	loc_1818
0000180E 5346                       		subq.w	#1,d6
00001810 0D05                       		btst	d6,d5
00001812 6700                       		beq.s	loc_1818
00001814 0043 1000                  		ori.w	#$1000,d3
00001818                            
00001818                            loc_1818:
00001818 D201                       		add.b	d1,d1
0000181A 6400                       		bcc.s	loc_1826
0000181C 5346                       		subq.w	#1,d6
0000181E 0D05                       		btst	d6,d5
00001820 6700                       		beq.s	loc_1826
00001822 0043 0800                  		ori.w	#$800,d3
00001826                            
00001826                            loc_1826:
00001826 3205                       		move.w	d5,d1
00001828 3E06                       		move.w	d6,d7
0000182A 9E4D                       		sub.w	a5,d7
0000182C 6400                       		bcc.s	loc_1856
0000182E 3C07                       		move.w	d7,d6
00001830 0646 0010                  		addi.w	#$10,d6
00001834 4447                       		neg.w	d7
00001836 EF69                       		lsl.w	d7,d1
00001838 1A10                       		move.b	(a0),d5
0000183A EF3D                       		rol.b	d7,d5
0000183C DE47                       		add.w	d7,d7
0000183E CA7B 7000                  		and.w	word_186C-2(pc,d7.w),d5
00001842 D245                       		add.w	d5,d1
00001844                            
00001844                            loc_1844:				; XREF: loc_1868
00001844 300D                       		move.w	a5,d0
00001846 D040                       		add.w	d0,d0
00001848 C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
0000184C D243                       		add.w	d3,d1
0000184E 1A18                       		move.b	(a0)+,d5
00001850 E14D                       		lsl.w	#8,d5
00001852 1A18                       		move.b	(a0)+,d5
00001854 4E75                       		rts	
00001856                            ; ===========================================================================
00001856                            
00001856                            loc_1856:				; XREF: loc_1826
00001856 6700                       		beq.s	loc_1868
00001858 EE69                       		lsr.w	d7,d1
0000185A 300D                       		move.w	a5,d0
0000185C D040                       		add.w	d0,d0
0000185E C27B 0000                  		and.w	word_186C-2(pc,d0.w),d1
00001862 D243                       		add.w	d3,d1
00001864 300D                       		move.w	a5,d0
00001866 6000                       		bra.s	sub_188C
00001868                            ; ===========================================================================
00001868                            
00001868                            loc_1868:				; XREF: loc_1856
00001868 7C10                       		moveq	#$10,d6
0000186A                            
0000186A                            loc_186A:
0000186A 60D8                       		bra.s	loc_1844
0000186C                            ; ===========================================================================
0000186C 0001 0003 0007 000F 001F+  word_186C:	dc.w 1,	3, 7, $F, $1F, $3F, $7F, $FF, $1FF, $3FF, $7FF
00001882 0FFF 1FFF 3FFF 7FFF FFFF   		dc.w $FFF, $1FFF, $3FFF, $7FFF,	$FFFF	; XREF: loc_1856
0000188C                            
0000188C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000188C                            
0000188C                            
0000188C                            sub_188C:				; XREF: EniDec
0000188C 9C40                       		sub.w	d0,d6
0000188E 0C46 0009                  		cmpi.w	#9,d6
00001892 6400                       		bcc.s	locret_189A
00001894 5046                       		addq.w	#8,d6
00001896 E145                       		asl.w	#8,d5
00001898 1A18                       		move.b	(a0)+,d5
0000189A                            
0000189A                            locret_189A:
0000189A 4E75                       		rts	
0000189C                            ; End of function sub_188C
0000189C                            
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            ; Kosinski decompression algorithm
0000189C                            ; ---------------------------------------------------------------------------
0000189C                            
0000189C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000189C                            
0000189C                            
0000189C                            KosDec:
0000189C                            
0000189C =FFFFFFFE                  var_2		= -2
0000189C =FFFFFFFF                  var_1		= -1
0000189C                            
0000189C 558F                       		subq.l	#2,sp
0000189E 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018A2 1E98                       		move.b	(a0)+,(sp)
000018A4 3A17                       		move.w	(sp),d5
000018A6 780F                       		moveq	#$F,d4
000018A8                            
000018A8                            loc_18A8:
000018A8 E24D                       		lsr.w	#1,d5
000018AA 40C6                       		move	sr,d6
000018AC 51CC 0000                  		dbf	d4,loc_18BA
000018B0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018B4 1E98                       		move.b	(a0)+,(sp)
000018B6 3A17                       		move.w	(sp),d5
000018B8 780F                       		moveq	#$F,d4
000018BA                            
000018BA                            loc_18BA:
000018BA 44C6                       		move	d6,ccr
000018BC 6400                       		bcc.s	loc_18C2
000018BE 12D8                       		move.b	(a0)+,(a1)+
000018C0 60E6                       		bra.s	loc_18A8
000018C2                            ; ===========================================================================
000018C2                            
000018C2                            loc_18C2:				; XREF: KosDec
000018C2 7600                       		moveq	#0,d3
000018C4 E24D                       		lsr.w	#1,d5
000018C6 40C6                       		move	sr,d6
000018C8 51CC 0000                  		dbf	d4,loc_18D6
000018CC 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018D0 1E98                       		move.b	(a0)+,(sp)
000018D2 3A17                       		move.w	(sp),d5
000018D4 780F                       		moveq	#$F,d4
000018D6                            
000018D6                            loc_18D6:
000018D6 44C6                       		move	d6,ccr
000018D8 6500                       		bcs.s	loc_1906
000018DA E24D                       		lsr.w	#1,d5
000018DC 51CC 0000                  		dbf	d4,loc_18EA
000018E0 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018E4 1E98                       		move.b	(a0)+,(sp)
000018E6 3A17                       		move.w	(sp),d5
000018E8 780F                       		moveq	#$F,d4
000018EA                            
000018EA                            loc_18EA:
000018EA E353                       		roxl.w	#1,d3
000018EC E24D                       		lsr.w	#1,d5
000018EE 51CC 0000                  		dbf	d4,loc_18FC
000018F2 1F58 0001                  		move.b	(a0)+,2+var_1(sp)
000018F6 1E98                       		move.b	(a0)+,(sp)
000018F8 3A17                       		move.w	(sp),d5
000018FA 780F                       		moveq	#$F,d4
000018FC                            
000018FC                            loc_18FC:
000018FC E353                       		roxl.w	#1,d3
000018FE 5243                       		addq.w	#1,d3
00001900 74FF                       		moveq	#-1,d2
00001902 1418                       		move.b	(a0)+,d2
00001904 6000                       		bra.s	loc_191C
00001906                            ; ===========================================================================
00001906                            
00001906                            loc_1906:				; XREF: loc_18C2
00001906 1018                       		move.b	(a0)+,d0
00001908 1218                       		move.b	(a0)+,d1
0000190A 74FF                       		moveq	#-1,d2
0000190C 1401                       		move.b	d1,d2
0000190E EB4A                       		lsl.w	#5,d2
00001910 1400                       		move.b	d0,d2
00001912 0241 0007                  		andi.w	#7,d1
00001916 6700                       		beq.s	loc_1928
00001918 1601                       		move.b	d1,d3
0000191A 5243                       		addq.w	#1,d3
0000191C                            
0000191C                            loc_191C:
0000191C 1031 2000                  		move.b	(a1,d2.w),d0
00001920 12C0                       		move.b	d0,(a1)+
00001922 51CB FFF8                  		dbf	d3,loc_191C
00001926 6080                       		bra.s	loc_18A8
00001928                            ; ===========================================================================
00001928                            
00001928                            loc_1928:				; XREF: loc_1906
00001928 1218                       		move.b	(a0)+,d1
0000192A 6700                       		beq.s	loc_1938
0000192C 0C01 0001                  		cmpi.b	#1,d1
00001930 6700 FF76                  		beq.w	loc_18A8
00001934 1601                       		move.b	d1,d3
00001936 60E4                       		bra.s	loc_191C
00001938                            ; ===========================================================================
00001938                            
00001938                            loc_1938:				; XREF: loc_1928
00001938 548F                       		addq.l	#2,sp
0000193A 4E75                       		rts	
0000193C                            ; End of function KosDec
0000193C                            
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            ; Pallet cycling routine loading subroutine
0000193C                            ; ---------------------------------------------------------------------------
0000193C                            
0000193C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000193C                            
0000193C                            
0000193C                            PalCycle_Load:				; XREF: Demo; Level_MainLoop; End_MainLoop
0000193C 7400                       		moveq	#0,d2
0000193E 7000                       		moveq	#0,d0
00001940 1038 FE10                  		move.b	($FFFFFE10).w,d0 ; get level number
00001944 D040                       		add.w	d0,d0		; multiply by 2
00001946 303B 0000                  		move.w	PalCycle(pc,d0.w),d0 ; load animated pallets offset index into d0
0000194A 4EFB 0000                  		jmp	PalCycle(pc,d0.w) ; jump to PalCycle + offset index
0000194E                            ; End of function PalCycle_Load
0000194E                            
0000194E                            ; ===========================================================================
0000194E                            ; ---------------------------------------------------------------------------
0000194E                            ; Pallet cycling routines
0000194E                            ; ---------------------------------------------------------------------------
0000194E 0000                       PalCycle:	dc.w PalCycle_GHZ-PalCycle
00001950 0000                       		dc.w PalCycle_LZ-PalCycle
00001952 0000                       		dc.w PalCycle_MZ-PalCycle
00001954 0000                       		dc.w PalCycle_SLZ-PalCycle
00001956 0000                       		dc.w PalCycle_SYZ-PalCycle
00001958 0000                       		dc.w PalCycle_SBZ-PalCycle
0000195A 0000                       		dc.w PalCycle_GHZ-PalCycle
0000195C                            
0000195C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000195C                            
0000195C                            
0000195C                            PalCycle_Title:				; XREF: TitleScreen
0000195C 41F9 0000 0000             		lea	(Pal_TitleCyc).l,a0
00001962 6000                       		bra.s	loc_196A
00001964                            ; ===========================================================================
00001964                            
00001964                            PalCycle_GHZ:				; XREF: PalCycle
00001964 41F9 0000 0000             		lea	(Pal_GHZCyc).l,a0
0000196A                            
0000196A                            loc_196A:				; XREF: PalCycle_Title
0000196A 5378 F634                  		subq.w	#1,($FFFFF634).w
0000196E 6A00                       		bpl.s	locret_1990
00001970 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001976 3038 F632                  		move.w	($FFFFF632).w,d0
0000197A 5278 F632                  		addq.w	#1,($FFFFF632).w
0000197E 0240 0003                  		andi.w	#3,d0
00001982 E748                       		lsl.w	#3,d0
00001984 43F8 FB50                  		lea	($FFFFFB50).w,a1
00001988 22F0 0000                  		move.l	(a0,d0.w),(a1)+
0000198C 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001990                            
00001990                            locret_1990:
00001990 4E75                       		rts	
00001992                            ; End of function PalCycle_Title
00001992                            
00001992                            
00001992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001992                            
00001992                            
00001992                            PalCycle_LZ:				; XREF: PalCycle
00001992 5378 F634                  		subq.w	#1,($FFFFF634).w
00001996 6A00                       		bpl.s	loc_19D8
00001998 31FC 0002 F634             		move.w	#2,($FFFFF634).w
0000199E 3038 F632                  		move.w	($FFFFF632).w,d0
000019A2 5278 F632                  		addq.w	#1,($FFFFF632).w
000019A6 0240 0003                  		andi.w	#3,d0
000019AA E748                       		lsl.w	#3,d0
000019AC 41F9 0000 0000             		lea	(Pal_LZCyc1).l,a0
000019B2 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; check if level is SBZ3
000019B8 6600                       		bne.s	loc_19C0
000019BA 41F9 0000 0000             		lea	(Pal_SBZ3Cyc1).l,a0 ; load SBZ3	pallet instead
000019C0                            
000019C0                            loc_19C0:
000019C0 43F8 FB56                  		lea	($FFFFFB56).w,a1
000019C4 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019C8 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019CC 43F8 FAD6                  		lea	($FFFFFAD6).w,a1
000019D0 22F0 0000                  		move.l	(a0,d0.w),(a1)+
000019D4 22B0 0004                  		move.l	4(a0,d0.w),(a1)
000019D8                            
000019D8                            loc_19D8:
000019D8 3038 FE04                  		move.w	($FFFFFE04).w,d0
000019DC 0240 0007                  		andi.w	#7,d0
000019E0 103B 0000                  		move.b	byte_1A3C(pc,d0.w),d0
000019E4 6700                       		beq.s	locret_1A3A
000019E6 7201                       		moveq	#1,d1
000019E8 4A38 F7C0                  		tst.b	($FFFFF7C0).w
000019EC 6700                       		beq.s	loc_19F0
000019EE 4441                       		neg.w	d1
000019F0                            
000019F0                            loc_19F0:
000019F0 3038 F650                  		move.w	($FFFFF650).w,d0
000019F4 0240 0003                  		andi.w	#3,d0
000019F8 D041                       		add.w	d1,d0
000019FA 0C40 0003                  		cmpi.w	#3,d0
000019FE 6500                       		bcs.s	loc_1A0A
00001A00 3200                       		move.w	d0,d1
00001A02 7000                       		moveq	#0,d0
00001A04 4A41                       		tst.w	d1
00001A06 6A00                       		bpl.s	loc_1A0A
00001A08 7002                       		moveq	#2,d0
00001A0A                            
00001A0A                            loc_1A0A:
00001A0A 31C0 F650                  		move.w	d0,($FFFFF650).w
00001A0E D040                       		add.w	d0,d0
00001A10 3200                       		move.w	d0,d1
00001A12 D040                       		add.w	d0,d0
00001A14 D041                       		add.w	d1,d0
00001A16 41F9 0000 0000             		lea	(Pal_LZCyc2).l,a0
00001A1C 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001A20 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A24 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A28 41F9 0000 0000             		lea	(Pal_LZCyc3).l,a0
00001A2E 43F8 FAF6                  		lea	($FFFFFAF6).w,a1
00001A32 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001A36 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001A3A                            
00001A3A                            locret_1A3A:
00001A3A 4E75                       		rts	
00001A3C                            ; End of function PalCycle_LZ
00001A3C                            
00001A3C                            ; ===========================================================================
00001A3C 0100 0001 0000 0100        byte_1A3C:	dc.b 1,	0, 0, 1, 0, 0, 1, 0
00001A44                            ; ===========================================================================
00001A44                            
00001A44                            PalCycle_MZ:				; XREF: PalCycle
00001A44 4E75                       		rts	
00001A46                            
00001A46                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A46                            
00001A46                            
00001A46                            PalCycle_SLZ:				; XREF: PalCycle
00001A46 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A4A 6A00                       		bpl.s	locret_1A80
00001A4C 31FC 0007 F634             		move.w	#7,($FFFFF634).w
00001A52 3038 F632                  		move.w	($FFFFF632).w,d0
00001A56 5240                       		addq.w	#1,d0
00001A58 0C40 0006                  		cmpi.w	#6,d0
00001A5C 6500                       		bcs.s	loc_1A60
00001A5E 7000                       		moveq	#0,d0
00001A60                            
00001A60                            loc_1A60:
00001A60 31C0 F632                  		move.w	d0,($FFFFF632).w
00001A64 3200                       		move.w	d0,d1
00001A66 D241                       		add.w	d1,d1
00001A68 D041                       		add.w	d1,d0
00001A6A D040                       		add.w	d0,d0
00001A6C 41F9 0000 0000             		lea	(Pal_SLZCyc).l,a0
00001A72 43F8 FB56                  		lea	($FFFFFB56).w,a1
00001A76 32B0 0000                  		move.w	(a0,d0.w),(a1)
00001A7A 2370 0002 0004             		move.l	2(a0,d0.w),4(a1)
00001A80                            
00001A80                            locret_1A80:
00001A80 4E75                       		rts	
00001A82                            ; End of function PalCycle_SLZ
00001A82                            
00001A82                            
00001A82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001A82                            
00001A82                            
00001A82                            PalCycle_SYZ:				; XREF: PalCycle
00001A82 5378 F634                  		subq.w	#1,($FFFFF634).w
00001A86 6A00                       		bpl.s	locret_1AC6
00001A88 31FC 0005 F634             		move.w	#5,($FFFFF634).w
00001A8E 3038 F632                  		move.w	($FFFFF632).w,d0
00001A92 5278 F632                  		addq.w	#1,($FFFFF632).w
00001A96 0240 0003                  		andi.w	#3,d0
00001A9A E548                       		lsl.w	#2,d0
00001A9C 3200                       		move.w	d0,d1
00001A9E D040                       		add.w	d0,d0
00001AA0 41F9 0000 0000             		lea	(Pal_SYZCyc1).l,a0
00001AA6 43F8 FB6E                  		lea	($FFFFFB6E).w,a1
00001AAA 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001AAE 22B0 0004                  		move.l	4(a0,d0.w),(a1)
00001AB2 41F9 0000 0000             		lea	(Pal_SYZCyc2).l,a0
00001AB8 43F8 FB76                  		lea	($FFFFFB76).w,a1
00001ABC 32B0 1000                  		move.w	(a0,d1.w),(a1)
00001AC0 3370 1002 0004             		move.w	2(a0,d1.w),4(a1)
00001AC6                            
00001AC6                            locret_1AC6:
00001AC6 4E75                       		rts	
00001AC8                            ; End of function PalCycle_SYZ
00001AC8                            
00001AC8                            
00001AC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001AC8                            
00001AC8                            
00001AC8                            PalCycle_SBZ:				; XREF: PalCycle
00001AC8 45F9 0000 0000             		lea	(Pal_SBZCycList).l,a2
00001ACE 4A38 FE11                  		tst.b	($FFFFFE11).w
00001AD2 6700                       		beq.s	loc_1ADA
00001AD4 45F9 0000 0000             		lea	(Pal_SBZCycList2).l,a2
00001ADA                            
00001ADA                            loc_1ADA:
00001ADA 43F8 F650                  		lea	($FFFFF650).w,a1
00001ADE 321A                       		move.w	(a2)+,d1
00001AE0                            
00001AE0                            loc_1AE0:
00001AE0 5311                       		subq.b	#1,(a1)
00001AE2 6B00                       		bmi.s	loc_1AEA
00001AE4 5489                       		addq.l	#2,a1
00001AE6 5C8A                       		addq.l	#6,a2
00001AE8 6000                       		bra.s	loc_1B06
00001AEA                            ; ===========================================================================
00001AEA                            
00001AEA                            loc_1AEA:				; XREF: PalCycle_SBZ
00001AEA 12DA                       		move.b	(a2)+,(a1)+
00001AEC 1011                       		move.b	(a1),d0
00001AEE 5200                       		addq.b	#1,d0
00001AF0 B01A                       		cmp.b	(a2)+,d0
00001AF2 6500                       		bcs.s	loc_1AF6
00001AF4 7000                       		moveq	#0,d0
00001AF6                            
00001AF6                            loc_1AF6:
00001AF6 12C0                       		move.b	d0,(a1)+
00001AF8 0240 000F                  		andi.w	#$F,d0
00001AFC D040                       		add.w	d0,d0
00001AFE 305A                       		movea.w	(a2)+,a0
00001B00 365A                       		movea.w	(a2)+,a3
00001B02 36B0 0000                  		move.w	(a0,d0.w),(a3)
00001B06                            
00001B06                            loc_1B06:				; XREF: PalCycle_SBZ
00001B06 51C9 FFD8                  		dbf	d1,loc_1AE0
00001B0A 5378 F634                  		subq.w	#1,($FFFFF634).w
00001B0E 6A00                       		bpl.s	locret_1B64
00001B10 41F9 0000 0000             		lea	(Pal_SBZCyc4).l,a0
00001B16 31FC 0001 F634             		move.w	#1,($FFFFF634).w
00001B1C 4A38 FE11                  		tst.b	($FFFFFE11).w
00001B20 6700                       		beq.s	loc_1B2E
00001B22 41F9 0000 0000             		lea	(Pal_SBZCyc10).l,a0
00001B28 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00001B2E                            
00001B2E                            loc_1B2E:
00001B2E 72FF                       		moveq	#-1,d1
00001B30 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00001B34 6700                       		beq.s	loc_1B38
00001B36 4441                       		neg.w	d1
00001B38                            
00001B38                            loc_1B38:
00001B38 3038 F632                  		move.w	($FFFFF632).w,d0
00001B3C 0240 0003                  		andi.w	#3,d0
00001B40 D041                       		add.w	d1,d0
00001B42 0C40 0003                  		cmpi.w	#3,d0
00001B46 6500                       		bcs.s	loc_1B52
00001B48 3200                       		move.w	d0,d1
00001B4A 7000                       		moveq	#0,d0
00001B4C 4A41                       		tst.w	d1
00001B4E 6A00                       		bpl.s	loc_1B52
00001B50 7002                       		moveq	#2,d0
00001B52                            
00001B52                            loc_1B52:
00001B52 31C0 F632                  		move.w	d0,($FFFFF632).w
00001B56 D040                       		add.w	d0,d0
00001B58 43F8 FB58                  		lea	($FFFFFB58).w,a1
00001B5C 22F0 0000                  		move.l	(a0,d0.w),(a1)+
00001B60 32B0 0004                  		move.w	4(a0,d0.w),(a1)
00001B64                            
00001B64                            locret_1B64:
00001B64 4E75                       		rts	
00001B66                            ; End of function PalCycle_SBZ
00001B66                            
00001B66                            ; ===========================================================================
00001B66                            Pal_TitleCyc:	incbin	pallet\c_title.bin
00001B86                            Pal_GHZCyc:	incbin	pallet\c_ghz.bin
00001BA6                            Pal_LZCyc1:	incbin	pallet\c_lz_wat.bin	; waterfalls pallet
00001BC6                            Pal_LZCyc2:	incbin	pallet\c_lz_bel.bin	; conveyor belt pallet
00001BD8                            Pal_LZCyc3:	incbin	pallet\c_lz_buw.bin	; conveyor belt (underwater) pallet
00001BEA                            Pal_SBZ3Cyc1:	incbin	pallet\c_sbz3_w.bin	; waterfalls pallet
00001C52                            Pal_SLZCyc:	incbin	pallet\c_slz.bin
00001C76                            Pal_SYZCyc1:	incbin	pallet\c_syz_1.bin
00001C96                            Pal_SYZCyc2:	incbin	pallet\c_syz_2.bin
00001CA6                            
00001CA6                            Pal_SBZCycList:
00001CA6                            	include "_inc\SBZ pallet script 1.asm"
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6                            ; Scrap Brain Zone 1 pallet cycling script
00001CA6                            ; ---------------------------------------------------------------------------
00001CA6 0008                       	dc.w 8			; number of entries - 1
00001CA8 0708                       	dc.b 7,	8		; duration in frames, number of	colours
00001CAA 0000                       	dc.w Pal_SBZCyc1	; pallet pointer
00001CAC FB50                       	dc.w $FB50		; RAM address
00001CAE 0D08                       	dc.b $D, 8
00001CB0 0000                       	dc.w Pal_SBZCyc2
00001CB2 FB52                       	dc.w $FB52
00001CB4 0E08                       	dc.b $E, 8
00001CB6 0000                       	dc.w Pal_SBZCyc3
00001CB8 FB6E                       	dc.w $FB6E
00001CBA 0B08                       	dc.b $B, 8
00001CBC 0000                       	dc.w Pal_SBZCyc5
00001CBE FB70                       	dc.w $FB70
00001CC0 0708                       	dc.b 7,	8
00001CC2 0000                       	dc.w Pal_SBZCyc6
00001CC4 FB72                       	dc.w $FB72
00001CC6 1C10                       	dc.b $1C, $10
00001CC8 0000                       	dc.w Pal_SBZCyc7
00001CCA FB7E                       	dc.w $FB7E
00001CCC 0303                       	dc.b 3,	3
00001CCE 0000                       	dc.w Pal_SBZCyc8
00001CD0 FB78                       	dc.w $FB78
00001CD2 0303                       	dc.b 3,	3
00001CD4 0000                       	dc.w Pal_SBZCyc8+2
00001CD6 FB7A                       	dc.w $FB7A
00001CD8 0303                       	dc.b 3,	3
00001CDA 0000                       	dc.w Pal_SBZCyc8+4
00001CDC FB7C                       	dc.w $FB7C
00001CDE                            	even
00001CDE                            	even
00001CDE                            
00001CDE                            Pal_SBZCycList2:
00001CDE                            	include "_inc\SBZ pallet script 2.asm"
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE                            ; Scrap Brain Zone 2 pallet cycling script
00001CDE                            ; ---------------------------------------------------------------------------
00001CDE 0006                       	dc.w 6
00001CE0 0708                       	dc.b 7,	8
00001CE2 0000                       	dc.w Pal_SBZCyc1
00001CE4 FB50                       	dc.w $FB50
00001CE6 0D08                       	dc.b $D, 8
00001CE8 0000                       	dc.w Pal_SBZCyc2
00001CEA FB52                       	dc.w $FB52
00001CEC 0908                       	dc.b 9,	8
00001CEE 0000                       	dc.w Pal_SBZCyc9
00001CF0 FB70                       	dc.w $FB70
00001CF2 0708                       	dc.b 7,	8
00001CF4 0000                       	dc.w Pal_SBZCyc6
00001CF6 FB72                       	dc.w $FB72
00001CF8 0303                       	dc.b 3,	3
00001CFA 0000                       	dc.w Pal_SBZCyc8
00001CFC FB78                       	dc.w $FB78
00001CFE 0303                       	dc.b 3,	3
00001D00 0000                       	dc.w Pal_SBZCyc8+2
00001D02 FB7A                       	dc.w $FB7A
00001D04 0303                       	dc.b 3,	3
00001D06 0000                       	dc.w Pal_SBZCyc8+4
00001D08 FB7C                       	dc.w $FB7C
00001D0A                            	even
00001D0A                            	even
00001D0A                            
00001D0A                            Pal_SBZCyc1:	incbin	pallet\c_sbz_1.bin
00001D1A                            Pal_SBZCyc2:	incbin	pallet\c_sbz_2.bin
00001D2A                            Pal_SBZCyc3:	incbin	pallet\c_sbz_3.bin
00001D3A                            Pal_SBZCyc4:	incbin	pallet\c_sbz_4.bin
00001D46                            Pal_SBZCyc5:	incbin	pallet\c_sbz_5.bin
00001D56                            Pal_SBZCyc6:	incbin	pallet\c_sbz_6.bin
00001D66                            Pal_SBZCyc7:	incbin	pallet\c_sbz_7.bin
00001D86                            Pal_SBZCyc8:	incbin	pallet\c_sbz_8.bin
00001D90                            Pal_SBZCyc9:	incbin	pallet\c_sbz_9.bin
00001DA0                            Pal_SBZCyc10:	incbin	pallet\c_sbz_10.bin
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            ; Subroutine to	fade out and fade in
00001DAC                            ; ---------------------------------------------------------------------------
00001DAC                            
00001DAC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DAC                            
00001DAC                            
00001DAC                            Pal_FadeTo:
00001DAC 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001DB2                            
00001DB2                            Pal_FadeTo2:
00001DB2 7000                       		moveq	#0,d0
00001DB4 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001DBC D0C0                       		adda.w	d0,a0
00001DBE 7200                       		moveq	#0,d1
00001DC0 1038 F627                  		move.b	($FFFFF627).w,d0
00001DC4                            
00001DC4                            Pal_ToBlack:
00001DC4 30C1                       		move.w	d1,(a0)+
00001DC6 51C8 FFFC                  		dbf	d0,Pal_ToBlack	; fill pallet with $000	(black)
00001DCA                            
00001DCA 383C 0015                  		move.w	#$15,d4
00001DCE                            
00001DCE                            loc_1DCE:
00001DCE 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001DD4 6100 0000                  		bsr.w	DelayProgram
00001DD8 6100                       		bsr.s	Pal_FadeIn
00001DDA 6100 F810                  		bsr.w	RunPLC_RAM
00001DDE 51CC FFEE                  		dbf	d4,loc_1DCE
00001DE2 4E75                       		rts	
00001DE4                            ; End of function Pal_FadeTo
00001DE4                            
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            ; Pallet fade-in subroutine
00001DE4                            ; ---------------------------------------------------------------------------
00001DE4                            
00001DE4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001DE4                            
00001DE4                            
00001DE4                            Pal_FadeIn:				; XREF: Pal_FadeTo
00001DE4 7000                       		moveq	#0,d0
00001DE6 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001DEA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001DEE 1038 F626                  		move.b	($FFFFF626).w,d0
00001DF2 D0C0                       		adda.w	d0,a0
00001DF4 D2C0                       		adda.w	d0,a1
00001DF6 1038 F627                  		move.b	($FFFFF627).w,d0
00001DFA                            
00001DFA                            loc_1DFA:
00001DFA 6100                       		bsr.s	Pal_AddColor
00001DFC 51C8 FFFC                  		dbf	d0,loc_1DFA
00001E00 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001E06 6600                       		bne.s	locret_1E24
00001E08 7000                       		moveq	#0,d0
00001E0A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E0E 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001E12 1038 F626                  		move.b	($FFFFF626).w,d0
00001E16 D0C0                       		adda.w	d0,a0
00001E18 D2C0                       		adda.w	d0,a1
00001E1A 1038 F627                  		move.b	($FFFFF627).w,d0
00001E1E                            
00001E1E                            loc_1E1E:
00001E1E 6100                       		bsr.s	Pal_AddColor
00001E20 51C8 FFFC                  		dbf	d0,loc_1E1E
00001E24                            
00001E24                            locret_1E24:
00001E24 4E75                       		rts	
00001E26                            ; End of function Pal_FadeIn
00001E26                            
00001E26                            
00001E26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E26                            
00001E26                            
00001E26                            Pal_AddColor:				; XREF: Pal_FadeIn
00001E26 3419                       		move.w	(a1)+,d2
00001E28 3610                       		move.w	(a0),d3
00001E2A B642                       		cmp.w	d2,d3
00001E2C 6700                       		beq.s	loc_1E4E
00001E2E 3203                       		move.w	d3,d1
00001E30 0641 0200                  		addi.w	#$200,d1	; increase blue	value
00001E34 B242                       		cmp.w	d2,d1		; has blue reached threshold level?
00001E36 6200                       		bhi.s	Pal_AddGreen	; if yes, branch
00001E38 30C1                       		move.w	d1,(a0)+	; update pallet
00001E3A 4E75                       		rts	
00001E3C                            ; ===========================================================================
00001E3C                            
00001E3C                            Pal_AddGreen:				; XREF: Pal_AddColor
00001E3C 3203                       		move.w	d3,d1
00001E3E 0641 0020                  		addi.w	#$20,d1		; increase green value
00001E42 B242                       		cmp.w	d2,d1
00001E44 6200                       		bhi.s	Pal_AddRed
00001E46 30C1                       		move.w	d1,(a0)+	; update pallet
00001E48 4E75                       		rts	
00001E4A                            ; ===========================================================================
00001E4A                            
00001E4A                            Pal_AddRed:				; XREF: Pal_AddGreen
00001E4A 5458                       		addq.w	#2,(a0)+	; increase red value
00001E4C 4E75                       		rts	
00001E4E                            ; ===========================================================================
00001E4E                            
00001E4E                            loc_1E4E:				; XREF: Pal_AddColor
00001E4E 5448                       		addq.w	#2,a0
00001E50 4E75                       		rts	
00001E52                            ; End of function Pal_AddColor
00001E52                            
00001E52                            
00001E52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E52                            
00001E52                            
00001E52                            Pal_FadeFrom:
00001E52 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001E58 383C 0015                  		move.w	#$15,d4
00001E5C                            
00001E5C                            loc_1E5C:
00001E5C 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001E62 6100 0000                  		bsr.w	DelayProgram
00001E66 6100                       		bsr.s	Pal_FadeOut
00001E68 6100 F782                  		bsr.w	RunPLC_RAM
00001E6C 51CC FFEE                  		dbf	d4,loc_1E5C
00001E70 4E75                       		rts	
00001E72                            ; End of function Pal_FadeFrom
00001E72                            
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            ; Pallet fade-out subroutine
00001E72                            ; ---------------------------------------------------------------------------
00001E72                            
00001E72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001E72                            
00001E72                            
00001E72                            Pal_FadeOut:				; XREF: Pal_FadeFrom
00001E72 7000                       		moveq	#0,d0
00001E74 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001E78 1038 F626                  		move.b	($FFFFF626).w,d0
00001E7C D0C0                       		adda.w	d0,a0
00001E7E 1038 F627                  		move.b	($FFFFF627).w,d0
00001E82                            
00001E82                            loc_1E82:
00001E82 6100                       		bsr.s	Pal_DecColor
00001E84 51C8 FFFC                  		dbf	d0,loc_1E82
00001E88                            
00001E88 7000                       		moveq	#0,d0
00001E8A 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001E8E 1038 F626                  		move.b	($FFFFF626).w,d0
00001E92 D0C0                       		adda.w	d0,a0
00001E94 1038 F627                  		move.b	($FFFFF627).w,d0
00001E98                            
00001E98                            loc_1E98:
00001E98 6100                       		bsr.s	Pal_DecColor
00001E9A 51C8 FFFC                  		dbf	d0,loc_1E98
00001E9E 4E75                       		rts	
00001EA0                            ; End of function Pal_FadeOut
00001EA0                            
00001EA0                            
00001EA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001EA0                            
00001EA0                            
00001EA0                            Pal_DecColor:				; XREF: Pal_FadeOut
00001EA0 3410                       		move.w	(a0),d2
00001EA2 6700                       		beq.s	loc_1ECC
00001EA4 3202                       		move.w	d2,d1
00001EA6 0241 000E                  		andi.w	#$E,d1
00001EAA 6700                       		beq.s	Pal_DecGreen
00001EAC 5558                       		subq.w	#2,(a0)+	; decrease red value
00001EAE 4E75                       		rts	
00001EB0                            ; ===========================================================================
00001EB0                            
00001EB0                            Pal_DecGreen:				; XREF: Pal_DecColor
00001EB0 3202                       		move.w	d2,d1
00001EB2 0241 00E0                  		andi.w	#$E0,d1
00001EB6 6700                       		beq.s	Pal_DecBlue
00001EB8 0458 0020                  		subi.w	#$20,(a0)+	; decrease green value
00001EBC 4E75                       		rts	
00001EBE                            ; ===========================================================================
00001EBE                            
00001EBE                            Pal_DecBlue:				; XREF: Pal_DecGreen
00001EBE 3202                       		move.w	d2,d1
00001EC0 0241 0E00                  		andi.w	#$E00,d1
00001EC4 6700                       		beq.s	loc_1ECC
00001EC6 0458 0200                  		subi.w	#$200,(a0)+	; decrease blue	value
00001ECA 4E75                       		rts	
00001ECC                            ; ===========================================================================
00001ECC                            
00001ECC                            loc_1ECC:				; XREF: Pal_DecColor
00001ECC 5448                       		addq.w	#2,a0
00001ECE 4E75                       		rts	
00001ED0                            ; End of function Pal_DecColor
00001ED0                            
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            ; Subroutine to	fill the pallet	with white (special stage)
00001ED0                            ; ---------------------------------------------------------------------------
00001ED0                            
00001ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001ED0                            
00001ED0                            
00001ED0                            Pal_MakeWhite:				; XREF: SpecialStage
00001ED0 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001ED6 7000                       		moveq	#0,d0
00001ED8 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001EDC 1038 F626                  		move.b	($FFFFF626).w,d0
00001EE0 D0C0                       		adda.w	d0,a0
00001EE2 323C 0EEE                  		move.w	#$EEE,d1
00001EE6 1038 F627                  		move.b	($FFFFF627).w,d0
00001EEA                            
00001EEA                            PalWhite_Loop:
00001EEA 30C1                       		move.w	d1,(a0)+
00001EEC 51C8 FFFC                  		dbf	d0,PalWhite_Loop
00001EF0 383C 0015                  		move.w	#$15,d4
00001EF4                            
00001EF4                            loc_1EF4:
00001EF4 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001EFA 6100 0000                  		bsr.w	DelayProgram
00001EFE 6100                       		bsr.s	Pal_WhiteToBlack
00001F00 6100 F6EA                  		bsr.w	RunPLC_RAM
00001F04 51CC FFEE                  		dbf	d4,loc_1EF4
00001F08 4E75                       		rts	
00001F0A                            ; End of function Pal_MakeWhite
00001F0A                            
00001F0A                            
00001F0A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F0A                            
00001F0A                            
00001F0A                            Pal_WhiteToBlack:			; XREF: Pal_MakeWhite
00001F0A 7000                       		moveq	#0,d0
00001F0C 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001F10 43F8 FB80                  		lea	($FFFFFB80).w,a1
00001F14 1038 F626                  		move.b	($FFFFF626).w,d0
00001F18 D0C0                       		adda.w	d0,a0
00001F1A D2C0                       		adda.w	d0,a1
00001F1C 1038 F627                  		move.b	($FFFFF627).w,d0
00001F20                            
00001F20                            loc_1F20:
00001F20 6100                       		bsr.s	Pal_DecColor2
00001F22 51C8 FFFC                  		dbf	d0,loc_1F20
00001F26                            
00001F26 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00001F2C 6600                       		bne.s	locret_1F4A
00001F2E 7000                       		moveq	#0,d0
00001F30 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001F34 43F8 FA00                  		lea	($FFFFFA00).w,a1
00001F38 1038 F626                  		move.b	($FFFFF626).w,d0
00001F3C D0C0                       		adda.w	d0,a0
00001F3E D2C0                       		adda.w	d0,a1
00001F40 1038 F627                  		move.b	($FFFFF627).w,d0
00001F44                            
00001F44                            loc_1F44:
00001F44 6100                       		bsr.s	Pal_DecColor2
00001F46 51C8 FFFC                  		dbf	d0,loc_1F44
00001F4A                            
00001F4A                            locret_1F4A:
00001F4A 4E75                       		rts	
00001F4C                            ; End of function Pal_WhiteToBlack
00001F4C                            
00001F4C                            
00001F4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F4C                            
00001F4C                            
00001F4C                            Pal_DecColor2:				; XREF: Pal_WhiteToBlack
00001F4C 3419                       		move.w	(a1)+,d2
00001F4E 3610                       		move.w	(a0),d3
00001F50 B642                       		cmp.w	d2,d3
00001F52 6700                       		beq.s	loc_1F78
00001F54 3203                       		move.w	d3,d1
00001F56 0441 0200                  		subi.w	#$200,d1	; decrease blue	value
00001F5A 6500                       		bcs.s	loc_1F64
00001F5C B242                       		cmp.w	d2,d1
00001F5E 6500                       		bcs.s	loc_1F64
00001F60 30C1                       		move.w	d1,(a0)+
00001F62 4E75                       		rts	
00001F64                            ; ===========================================================================
00001F64                            
00001F64                            loc_1F64:				; XREF: Pal_DecColor2
00001F64 3203                       		move.w	d3,d1
00001F66 0441 0020                  		subi.w	#$20,d1		; decrease green value
00001F6A 6500                       		bcs.s	loc_1F74
00001F6C B242                       		cmp.w	d2,d1
00001F6E 6500                       		bcs.s	loc_1F74
00001F70 30C1                       		move.w	d1,(a0)+
00001F72 4E75                       		rts	
00001F74                            ; ===========================================================================
00001F74                            
00001F74                            loc_1F74:				; XREF: loc_1F64
00001F74 5558                       		subq.w	#2,(a0)+	; decrease red value
00001F76 4E75                       		rts	
00001F78                            ; ===========================================================================
00001F78                            
00001F78                            loc_1F78:				; XREF: Pal_DecColor2
00001F78 5448                       		addq.w	#2,a0
00001F7A 4E75                       		rts	
00001F7C                            ; End of function Pal_DecColor2
00001F7C                            
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            ; Subroutine to	make a white flash when	you enter a special stage
00001F7C                            ; ---------------------------------------------------------------------------
00001F7C                            
00001F7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F7C                            
00001F7C                            
00001F7C                            Pal_MakeFlash:				; XREF: SpecialStage
00001F7C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00001F82 383C 0015                  		move.w	#$15,d4
00001F86                            
00001F86                            loc_1F86:
00001F86 11FC 0012 F62A             		move.b	#$12,($FFFFF62A).w
00001F8C 6100 0000                  		bsr.w	DelayProgram
00001F90 6100                       		bsr.s	Pal_ToWhite
00001F92 6100 F658                  		bsr.w	RunPLC_RAM
00001F96 51CC FFEE                  		dbf	d4,loc_1F86
00001F9A 4E75                       		rts	
00001F9C                            ; End of function Pal_MakeFlash
00001F9C                            
00001F9C                            
00001F9C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001F9C                            
00001F9C                            
00001F9C                            Pal_ToWhite:				; XREF: Pal_MakeFlash
00001F9C 7000                       		moveq	#0,d0
00001F9E 41F8 FB00                  		lea	($FFFFFB00).w,a0
00001FA2 1038 F626                  		move.b	($FFFFF626).w,d0
00001FA6 D0C0                       		adda.w	d0,a0
00001FA8 1038 F627                  		move.b	($FFFFF627).w,d0
00001FAC                            
00001FAC                            loc_1FAC:
00001FAC 6100                       		bsr.s	Pal_AddColor2
00001FAE 51C8 FFFC                  		dbf	d0,loc_1FAC
00001FB2 7000                       		moveq	#0,d0
00001FB4 41F8 FA80                  		lea	($FFFFFA80).w,a0
00001FB8 1038 F626                  		move.b	($FFFFF626).w,d0
00001FBC D0C0                       		adda.w	d0,a0
00001FBE 1038 F627                  		move.b	($FFFFF627).w,d0
00001FC2                            
00001FC2                            loc_1FC2:
00001FC2 6100                       		bsr.s	Pal_AddColor2
00001FC4 51C8 FFFC                  		dbf	d0,loc_1FC2
00001FC8 4E75                       		rts	
00001FCA                            ; End of function Pal_ToWhite
00001FCA                            
00001FCA                            
00001FCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00001FCA                            
00001FCA                            
00001FCA                            Pal_AddColor2:				; XREF: Pal_ToWhite
00001FCA 3410                       		move.w	(a0),d2
00001FCC 0C42 0EEE                  		cmpi.w	#$EEE,d2
00001FD0 6700                       		beq.s	loc_2006
00001FD2 3202                       		move.w	d2,d1
00001FD4 0241 000E                  		andi.w	#$E,d1
00001FD8 0C41 000E                  		cmpi.w	#$E,d1
00001FDC 6700                       		beq.s	loc_1FE2
00001FDE 5458                       		addq.w	#2,(a0)+	; increase red value
00001FE0 4E75                       		rts	
00001FE2                            ; ===========================================================================
00001FE2                            
00001FE2                            loc_1FE2:				; XREF: Pal_AddColor2
00001FE2 3202                       		move.w	d2,d1
00001FE4 0241 00E0                  		andi.w	#$E0,d1
00001FE8 0C41 00E0                  		cmpi.w	#$E0,d1
00001FEC 6700                       		beq.s	loc_1FF4
00001FEE 0658 0020                  		addi.w	#$20,(a0)+	; increase green value
00001FF2 4E75                       		rts	
00001FF4                            ; ===========================================================================
00001FF4                            
00001FF4                            loc_1FF4:				; XREF: loc_1FE2
00001FF4 3202                       		move.w	d2,d1
00001FF6 0241 0E00                  		andi.w	#$E00,d1
00001FFA 0C41 0E00                  		cmpi.w	#$E00,d1
00001FFE 6700                       		beq.s	loc_2006
00002000 0658 0200                  		addi.w	#$200,(a0)+	; increase blue	value
00002004 4E75                       		rts	
00002006                            ; ===========================================================================
00002006                            
00002006                            loc_2006:				; XREF: Pal_AddColor2
00002006 5448                       		addq.w	#2,a0
00002008 4E75                       		rts	
0000200A                            ; End of function Pal_AddColor2
0000200A                            
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            ; Pallet cycling routine - Sega	logo
0000200A                            ; ---------------------------------------------------------------------------
0000200A                            
0000200A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000200A                            
0000200A                            
0000200A                            PalCycle_Sega:				; XREF: SegaScreen
0000200A 4A38 F635                  		tst.b	($FFFFF635).w
0000200E 6600                       		bne.s	loc_206A
00002010 43F8 FB20                  		lea	($FFFFFB20).w,a1
00002014 41F9 0000 0000             		lea	(Pal_Sega1).l,a0
0000201A 7205                       		moveq	#5,d1
0000201C 3038 F632                  		move.w	($FFFFF632).w,d0
00002020                            
00002020                            loc_2020:
00002020 6A00                       		bpl.s	loc_202A
00002022 5448                       		addq.w	#2,a0
00002024 5341                       		subq.w	#1,d1
00002026 5440                       		addq.w	#2,d0
00002028 60F6                       		bra.s	loc_2020
0000202A                            ; ===========================================================================
0000202A                            
0000202A                            loc_202A:				; XREF: PalCycle_Sega
0000202A 3400                       		move.w	d0,d2
0000202C 0242 001E                  		andi.w	#$1E,d2
00002030 6600                       		bne.s	loc_2034
00002032 5440                       		addq.w	#2,d0
00002034                            
00002034                            loc_2034:
00002034 0C40 0060                  		cmpi.w	#$60,d0
00002038 6400                       		bcc.s	loc_203E
0000203A 3398 0000                  		move.w	(a0)+,(a1,d0.w)
0000203E                            
0000203E                            loc_203E:
0000203E 5440                       		addq.w	#2,d0
00002040 51C9 FFE8                  		dbf	d1,loc_202A
00002044 3038 F632                  		move.w	($FFFFF632).w,d0
00002048 5440                       		addq.w	#2,d0
0000204A 3400                       		move.w	d0,d2
0000204C 0242 001E                  		andi.w	#$1E,d2
00002050 6600                       		bne.s	loc_2054
00002052 5440                       		addq.w	#2,d0
00002054                            
00002054                            loc_2054:
00002054 0C40 0064                  		cmpi.w	#$64,d0
00002058 6D00                       		blt.s	loc_2062
0000205A 31FC 0401 F634             		move.w	#$401,($FFFFF634).w
00002060 70F4                       		moveq	#-$C,d0
00002062                            
00002062                            loc_2062:
00002062 31C0 F632                  		move.w	d0,($FFFFF632).w
00002066 7001                       		moveq	#1,d0
00002068 4E75                       		rts	
0000206A                            ; ===========================================================================
0000206A                            
0000206A                            loc_206A:				; XREF: loc_202A
0000206A 5338 F634                  		subq.b	#1,($FFFFF634).w
0000206E 6A00                       		bpl.s	loc_20BC
00002070 11FC 0004 F634             		move.b	#4,($FFFFF634).w
00002076 3038 F632                  		move.w	($FFFFF632).w,d0
0000207A 0640 000C                  		addi.w	#$C,d0
0000207E 0C40 0030                  		cmpi.w	#$30,d0
00002082 6500                       		bcs.s	loc_2088
00002084 7000                       		moveq	#0,d0
00002086 4E75                       		rts	
00002088                            ; ===========================================================================
00002088                            
00002088                            loc_2088:				; XREF: loc_206A
00002088 31C0 F632                  		move.w	d0,($FFFFF632).w
0000208C 41F9 0000 0000             		lea	(Pal_Sega2).l,a0
00002092 41F0 0000                  		lea	(a0,d0.w),a0
00002096 43F8 FB04                  		lea	($FFFFFB04).w,a1
0000209A 22D8                       		move.l	(a0)+,(a1)+
0000209C 22D8                       		move.l	(a0)+,(a1)+
0000209E 3298                       		move.w	(a0)+,(a1)
000020A0 43F8 FB20                  		lea	($FFFFFB20).w,a1
000020A4 7000                       		moveq	#0,d0
000020A6 722C                       		moveq	#$2C,d1
000020A8                            
000020A8                            loc_20A8:
000020A8 3400                       		move.w	d0,d2
000020AA 0242 001E                  		andi.w	#$1E,d2
000020AE 6600                       		bne.s	loc_20B2
000020B0 5440                       		addq.w	#2,d0
000020B2                            
000020B2                            loc_20B2:
000020B2 3390 0000                  		move.w	(a0),(a1,d0.w)
000020B6 5440                       		addq.w	#2,d0
000020B8 51C9 FFEE                  		dbf	d1,loc_20A8
000020BC                            
000020BC                            loc_20BC:
000020BC 7001                       		moveq	#1,d0
000020BE 4E75                       		rts	
000020C0                            ; End of function PalCycle_Sega
000020C0                            
000020C0                            ; ===========================================================================
000020C0                            
000020C0                            Pal_Sega1:	incbin	pallet\sega1.bin
000020CC                            Pal_Sega2:	incbin	pallet\sega2.bin
000020FC                            
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            ; Subroutines to load pallets
000020FC                            ; ---------------------------------------------------------------------------
000020FC                            
000020FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000020FC                            
000020FC                            
000020FC                            PalLoad1:
000020FC 43F9 0000 0000             		lea	(PalPointers).l,a1
00002102 E748                       		lsl.w	#3,d0
00002104 D2C0                       		adda.w	d0,a1
00002106 2459                       		movea.l	(a1)+,a2
00002108 3659                       		movea.w	(a1)+,a3
0000210A D6FC 0080                  		adda.w	#$80,a3
0000210E 3E19                       		move.w	(a1)+,d7
00002110                            
00002110                            loc_2110:
00002110 26DA                       		move.l	(a2)+,(a3)+
00002112 51CF FFFC                  		dbf	d7,loc_2110
00002116 4E75                       		rts	
00002118                            ; End of function PalLoad1
00002118                            
00002118                            
00002118                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002118                            
00002118                            
00002118                            PalLoad2:
00002118 43F9 0000 0000             		lea	(PalPointers).l,a1
0000211E E748                       		lsl.w	#3,d0
00002120 D2C0                       		adda.w	d0,a1
00002122 2459                       		movea.l	(a1)+,a2
00002124 3659                       		movea.w	(a1)+,a3
00002126 3E19                       		move.w	(a1)+,d7
00002128                            
00002128                            loc_2128:
00002128 26DA                       		move.l	(a2)+,(a3)+
0000212A 51CF FFFC                  		dbf	d7,loc_2128
0000212E 4E75                       		rts	
00002130                            ; End of function PalLoad2
00002130                            
00002130                            ; ---------------------------------------------------------------------------
00002130                            ; Underwater pallet loading subroutine
00002130                            ; ---------------------------------------------------------------------------
00002130                            
00002130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002130                            
00002130                            
00002130                            PalLoad3_Water:
00002130 43F9 0000 0000             		lea	(PalPointers).l,a1
00002136 E748                       		lsl.w	#3,d0
00002138 D2C0                       		adda.w	d0,a1
0000213A 2459                       		movea.l	(a1)+,a2
0000213C 3659                       		movea.w	(a1)+,a3
0000213E 96FC 0080                  		suba.w	#$80,a3
00002142 3E19                       		move.w	(a1)+,d7
00002144                            
00002144                            loc_2144:
00002144 26DA                       		move.l	(a2)+,(a3)+
00002146 51CF FFFC                  		dbf	d7,loc_2144
0000214A 4E75                       		rts	
0000214C                            ; End of function PalLoad3_Water
0000214C                            
0000214C                            
0000214C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000214C                            
0000214C                            
0000214C                            PalLoad4_Water:
0000214C 43F9 0000 0000             		lea	(PalPointers).l,a1
00002152 E748                       		lsl.w	#3,d0
00002154 D2C0                       		adda.w	d0,a1
00002156 2459                       		movea.l	(a1)+,a2
00002158 3659                       		movea.w	(a1)+,a3
0000215A 96FC 0100                  		suba.w	#$100,a3
0000215E 3E19                       		move.w	(a1)+,d7
00002160                            
00002160                            loc_2160:
00002160 26DA                       		move.l	(a2)+,(a3)+
00002162 51CF FFFC                  		dbf	d7,loc_2160
00002166 4E75                       		rts	
00002168                            ; End of function PalLoad4_Water
00002168                            
00002168                            ; ===========================================================================
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168                            PalPointers:
00002168                            	include "_inc\Pallet pointers.asm"
00002168                            ; ---------------------------------------------------------------------------
00002168                            ; Pallet pointers
00002168                            ; ---------------------------------------------------------------------------
00002168 0000 0000                  	dc.l Pal_SegaBG		; pallet address
0000216C FB00                       	dc.w $FB00		; RAM address
0000216E 001F                       	dc.w $1F		; (pallet length / 2) - 1
00002170 0000 0000                  	dc.l Pal_Title
00002174 FB00                       	dc.w $FB00
00002176 001F                       	dc.w $1F
00002178 0000 0000                  	dc.l Pal_LevelSel
0000217C FB00                       	dc.w $FB00
0000217E 001F                       	dc.w $1F
00002180 0000 0000                  	dc.l Pal_Sonic
00002184 FB00                       	dc.w $FB00
00002186 0007                       	dc.w 7
00002188 0000 0000                  	dc.l Pal_GHZ
0000218C FB20                       	dc.w $FB20
0000218E 0017                       	dc.w $17
00002190 0000 0000                  	dc.l Pal_LZ
00002194 FB20                       	dc.w $FB20
00002196 0017                       	dc.w $17
00002198 0000 0000                  	dc.l Pal_MZ
0000219C FB20                       	dc.w $FB20
0000219E 0017                       	dc.w $17
000021A0 0000 0000                  	dc.l Pal_SLZ
000021A4 FB20                       	dc.w $FB20
000021A6 0017                       	dc.w $17
000021A8 0000 0000                  	dc.l Pal_SYZ
000021AC FB20                       	dc.w $FB20
000021AE 0017                       	dc.w $17
000021B0 0000 0000                  	dc.l Pal_SBZ1
000021B4 FB20                       	dc.w $FB20
000021B6 0017                       	dc.w $17
000021B8 0000 0000                  	dc.l Pal_Special
000021BC FB00                       	dc.w $FB00
000021BE 001F                       	dc.w $1F
000021C0 0000 0000                  	dc.l Pal_LZWater
000021C4 FB00                       	dc.w $FB00
000021C6 001F                       	dc.w $1F
000021C8 0000 0000                  	dc.l Pal_SBZ3
000021CC FB20                       	dc.w $FB20
000021CE 0017                       	dc.w $17
000021D0 0000 0000                  	dc.l Pal_SBZ3Water
000021D4 FB00                       	dc.w $FB00
000021D6 001F                       	dc.w $1F
000021D8 0000 0000                  	dc.l Pal_SBZ2
000021DC FB20                       	dc.w $FB20
000021DE 0017                       	dc.w $17
000021E0 0000 0000                  	dc.l Pal_LZSonWater
000021E4 FB00                       	dc.w $FB00
000021E6 0007                       	dc.w 7
000021E8 0000 0000                  	dc.l Pal_SBZ3SonWat
000021EC FB00                       	dc.w $FB00
000021EE 0007                       	dc.w 7
000021F0 0000 0000                  	dc.l Pal_SpeResult
000021F4 FB00                       	dc.w $FB00
000021F6 001F                       	dc.w $1F
000021F8 0000 0000                  	dc.l Pal_SpeContinue
000021FC FB00                       	dc.w $FB00
000021FE 000F                       	dc.w $F
00002200 0000 0000                  	dc.l Pal_Ending
00002204 FB00                       	dc.w $FB00
00002206 001F                       	dc.w $1F
00002206 001F                       	dc.w $1F
00002208                            
00002208                            ; ---------------------------------------------------------------------------
00002208                            ; Pallet data
00002208                            ; ---------------------------------------------------------------------------
00002208                            Pal_SegaBG:	incbin	pallet\sega_bg.bin
00002288                            Pal_Title:	incbin	pallet\title.bin
00002308                            Pal_LevelSel:	incbin	pallet\levelsel.bin
00002388                            Pal_Sonic:	incbin	pallet\sonic.bin
000023A8                            Pal_GHZ:	incbin	pallet\ghz.bin
00002408                            Pal_LZ:		incbin	pallet\lz.bin
00002468                            Pal_LZWater:	incbin	pallet\lz_uw.bin	; LZ underwater pallets
000024E8                            Pal_MZ:		incbin	pallet\mz.bin
00002548                            Pal_SLZ:	incbin	pallet\slz.bin
000025A8                            Pal_SYZ:	incbin	pallet\syz.bin
00002608                            Pal_SBZ1:	incbin	pallet\sbz_act1.bin	; SBZ act 1 pallets
00002668                            Pal_SBZ2:	incbin	pallet\sbz_act2.bin	; SBZ act 2 & Final Zone pallets
000026C8                            Pal_Special:	incbin	pallet\special.bin	; special stage pallets
00002748                            Pal_SBZ3:	incbin	pallet\sbz_act3.bin	; SBZ act 3 pallets
000027A8                            Pal_SBZ3Water:	incbin	pallet\sbz_a3uw.bin	; SBZ act 3 (underwater) pallets
00002828                            Pal_LZSonWater:	incbin	pallet\son_lzuw.bin	; Sonic (underwater in LZ) pallet
00002848                            Pal_SBZ3SonWat:	incbin	pallet\son_sbzu.bin	; Sonic (underwater in SBZ act 3) pallet
00002868                            Pal_SpeResult:	incbin	pallet\ssresult.bin	; special stage results screen pallets
000028E8                            Pal_SpeContinue:incbin	pallet\sscontin.bin	; special stage results screen continue pallet
00002928                            Pal_Ending:	incbin	pallet\ending.bin	; ending sequence pallets
000029A8                            
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            ; Subroutine to	delay the program by ($FFFFF62A) frames
000029A8                            ; ---------------------------------------------------------------------------
000029A8                            
000029A8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029A8                            
000029A8                            
000029A8                            DelayProgram:				; XREF: PauseGame
000029A8 46FC 2300                  		move	#$2300,sr
000029AC                            
000029AC                            loc_29AC:
000029AC 4A38 F62A                  		tst.b	($FFFFF62A).w
000029B0 66FA                       		bne.s	loc_29AC
000029B2 4E75                       		rts	
000029B4                            ; End of function DelayProgram
000029B4                            
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            ; Subroutine to	generate a pseudo-random number	in d0
000029B4                            ; ---------------------------------------------------------------------------
000029B4                            
000029B4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029B4                            
000029B4                            
000029B4                            RandomNumber:
000029B4 2238 F636                  		move.l	($FFFFF636).w,d1
000029B8 6600                       		bne.s	loc_29C0
000029BA 223C 2A6D 365A             		move.l	#$2A6D365A,d1
000029C0                            
000029C0                            loc_29C0:
000029C0 2001                       		move.l	d1,d0
000029C2 E581                       		asl.l	#2,d1
000029C4 D280                       		add.l	d0,d1
000029C6 E781                       		asl.l	#3,d1
000029C8 D280                       		add.l	d0,d1
000029CA 3001                       		move.w	d1,d0
000029CC 4841                       		swap	d1
000029CE D041                       		add.w	d1,d0
000029D0 3200                       		move.w	d0,d1
000029D2 4841                       		swap	d1
000029D4 21C1 F636                  		move.l	d1,($FFFFF636).w
000029D8 4E75                       		rts	
000029DA                            ; End of function RandomNumber
000029DA                            
000029DA                            
000029DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000029DA                            
000029DA                            
000029DA                            CalcSine:				; XREF: SS_BGAnimate; et al
000029DA 0240 00FF                  		andi.w	#$FF,d0
000029DE D040                       		add.w	d0,d0
000029E0 0640 0080                  		addi.w	#$80,d0
000029E4 323B 0000                  		move.w	Sine_Data(pc,d0.w),d1
000029E8 0440 0080                  		subi.w	#$80,d0
000029EC 303B 0000                  		move.w	Sine_Data(pc,d0.w),d0
000029F0 4E75                       		rts	
000029F2                            ; End of function CalcSine
000029F2                            
000029F2                            ; ===========================================================================
000029F2                            
000029F2                            Sine_Data:	incbin	misc\sinewave.bin	; values for a 360ยบ sine wave
00002C72                            
00002C72                            ; ===========================================================================
00002C72 48E7 6000                  		movem.l	d1-d2,-(sp)
00002C76 3200                       		move.w	d0,d1
00002C78 4841                       		swap	d1
00002C7A 7000                       		moveq	#0,d0
00002C7C 3200                       		move.w	d0,d1
00002C7E 7407                       		moveq	#7,d2
00002C80                            
00002C80                            loc_2C80:
00002C80 E599                       		rol.l	#2,d1
00002C82 D040                       		add.w	d0,d0
00002C84 5240                       		addq.w	#1,d0
00002C86 9240                       		sub.w	d0,d1
00002C88 6400                       		bcc.s	loc_2C9A
00002C8A D240                       		add.w	d0,d1
00002C8C 5340                       		subq.w	#1,d0
00002C8E 51CA FFF0                  		dbf	d2,loc_2C80
00002C92 E248                       		lsr.w	#1,d0
00002C94 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002C98 4E75                       		rts	
00002C9A                            ; ===========================================================================
00002C9A                            
00002C9A                            loc_2C9A:
00002C9A 5240                       		addq.w	#1,d0
00002C9C 51CA FFE2                  		dbf	d2,loc_2C80
00002CA0 E248                       		lsr.w	#1,d0
00002CA2 4CDF 0006                  		movem.l	(sp)+,d1-d2
00002CA6 4E75                       		rts	
00002CA8                            
00002CA8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00002CA8                            
00002CA8                            
00002CA8                            CalcAngle:
00002CA8 48E7 1800                  		movem.l	d3-d4,-(sp)
00002CAC 7600                       		moveq	#0,d3
00002CAE 7800                       		moveq	#0,d4
00002CB0 3601                       		move.w	d1,d3
00002CB2 3802                       		move.w	d2,d4
00002CB4 8843                       		or.w	d3,d4
00002CB6 6700                       		beq.s	loc_2D04
00002CB8 3802                       		move.w	d2,d4
00002CBA 4A43                       		tst.w	d3
00002CBC 6A00 0000                  		bpl.w	loc_2CC2
00002CC0 4443                       		neg.w	d3
00002CC2                            
00002CC2                            loc_2CC2:
00002CC2 4A44                       		tst.w	d4
00002CC4 6A00 0000                  		bpl.w	loc_2CCA
00002CC8 4444                       		neg.w	d4
00002CCA                            
00002CCA                            loc_2CCA:
00002CCA B843                       		cmp.w	d3,d4
00002CCC 6400 0000                  		bcc.w	loc_2CDC
00002CD0 E18C                       		lsl.l	#8,d4
00002CD2 88C3                       		divu.w	d3,d4
00002CD4 7000                       		moveq	#0,d0
00002CD6 103B 4000                  		move.b	Angle_Data(pc,d4.w),d0
00002CDA 6000                       		bra.s	loc_2CE6
00002CDC                            ; ===========================================================================
00002CDC                            
00002CDC                            loc_2CDC:				; XREF: CalcAngle
00002CDC E18B                       		lsl.l	#8,d3
00002CDE 86C4                       		divu.w	d4,d3
00002CE0 7040                       		moveq	#$40,d0
00002CE2 903B 3000                  		sub.b	Angle_Data(pc,d3.w),d0
00002CE6                            
00002CE6                            loc_2CE6:
00002CE6 4A41                       		tst.w	d1
00002CE8 6A00 0000                  		bpl.w	loc_2CF2
00002CEC 4440                       		neg.w	d0
00002CEE 0640 0080                  		addi.w	#$80,d0
00002CF2                            
00002CF2                            loc_2CF2:
00002CF2 4A42                       		tst.w	d2
00002CF4 6A00 0000                  		bpl.w	loc_2CFE
00002CF8 4440                       		neg.w	d0
00002CFA 0640 0100                  		addi.w	#$100,d0
00002CFE                            
00002CFE                            loc_2CFE:
00002CFE 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D02 4E75                       		rts	
00002D04                            ; ===========================================================================
00002D04                            
00002D04                            loc_2D04:				; XREF: CalcAngle
00002D04 303C 0040                  		move.w	#$40,d0
00002D08 4CDF 0018                  		movem.l	(sp)+,d3-d4
00002D0C 4E75                       		rts	
00002D0E                            ; End of function CalcAngle
00002D0E                            
00002D0E                            ; ===========================================================================
00002D0E                            
00002D0E                            Angle_Data:	incbin	misc\angles.bin
00002E10                            
00002E10                            ; ===========================================================================
00002E10                            
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            ; Sega screen
00002E10                            ; ---------------------------------------------------------------------------
00002E10                            
00002E10                            SegaScreen:				; XREF: GameModeArray
00002E10 103C 00E4                  		move.b	#$E4,d0
00002E14 6100 E586                  		bsr.w	PlaySound_Special ; stop music
00002E18 6100 E7C4                  		bsr.w	ClearPLC
00002E1C 6100 F034                  		bsr.w	Pal_FadeFrom
00002E20 4DF9 00C0 0004             		lea	($C00004).l,a6
00002E26 3CBC 8004                  		move.w	#$8004,(a6)
00002E2A 3CBC 8230                  		move.w	#$8230,(a6)
00002E2E 3CBC 8407                  		move.w	#$8407,(a6)
00002E32 3CBC 8700                  		move.w	#$8700,(a6)
00002E36 3CBC 8B00                  		move.w	#$8B00,(a6)
00002E3A 4238 F64E                  		clr.b	($FFFFF64E).w
00002E3E 46FC 2700                  		move	#$2700,sr
00002E42 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002E46 0200 00BF                  		andi.b	#$BF,d0
00002E4A 33C0 00C0 0004             		move.w	d0,($C00004).l
00002E50 6100 E472                  		bsr.w	ClearScreen
00002E54 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002E5E 41F9 0000 0000             		lea	(Nem_SegaLogo).l,a0 ; load Sega	logo patterns
00002E64 6100 E5DA                  		bsr.w	NemDec
00002E68 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E6E 41F9 0000 0000             		lea	(Eni_SegaLogo).l,a0 ; load Sega	logo mappings
00002E74 303C 0000                  		move.w	#0,d0
00002E78 6100 E8A4                  		bsr.w	EniDec
00002E7C 43F9 00FF 0000             		lea	($FF0000).l,a1
00002E82 203C 6510 0003             		move.l	#$65100003,d0
00002E88 7217                       		moveq	#$17,d1
00002E8A 7407                       		moveq	#7,d2
00002E8C 6100 E592                  		bsr.w	ShowVDPGraphics
00002E90 43F9 00FF 0180             		lea	($FF0180).l,a1
00002E96 203C 4000 0003             		move.l	#$40000003,d0
00002E9C 7227                       		moveq	#$27,d1
00002E9E 741B                       		moveq	#$1B,d2
00002EA0 6100 E57E                  		bsr.w	ShowVDPGraphics
00002EA4 7000                       		moveq	#0,d0
00002EA6 6100 F270                  		bsr.w	PalLoad2	; load Sega logo pallet
00002EAA 31FC FFF6 F632             		move.w	#-$A,($FFFFF632).w
00002EB0 31FC 0000 F634             		move.w	#0,($FFFFF634).w
00002EB6 31FC 0000 F662             		move.w	#0,($FFFFF662).w
00002EBC 31FC 0000 F660             		move.w	#0,($FFFFF660).w
00002EC2 3038 F60C                  		move.w	($FFFFF60C).w,d0
00002EC6 0000 0040                  		ori.b	#$40,d0
00002ECA 33C0 00C0 0004             		move.w	d0,($C00004).l
00002ED0                            
00002ED0                            Sega_WaitPallet:
00002ED0 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002ED6 6100 FAD0                  		bsr.w	DelayProgram
00002EDA 6100 F12E                  		bsr.w	PalCycle_Sega
00002EDE 66F0                       		bne.s	Sega_WaitPallet
00002EE0                            
00002EE0 103C 00E1                  		move.b	#$E1,d0
00002EE4 6100 E4B6                  		bsr.w	PlaySound_Special ; play "SEGA"	sound
00002EE8 11FC 0014 F62A             		move.b	#$14,($FFFFF62A).w
00002EEE 6100 FAB8                  		bsr.w	DelayProgram
00002EF2 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
00002EF8                            
00002EF8                            Sega_WaitEnd:
00002EF8 11FC 0002 F62A             		move.b	#2,($FFFFF62A).w
00002EFE 6100 FAA8                  		bsr.w	DelayProgram
00002F02 4A78 F614                  		tst.w	($FFFFF614).w
00002F06 6700                       		beq.s	Sega_GotoTitle
00002F08 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
00002F0E 67E8                       		beq.s	Sega_WaitEnd	; if not, branch
00002F10                            
00002F10                            Sega_GotoTitle:
00002F10 11FC 0004 F600             		move.b	#4,($FFFFF600).w ; go to title screen
00002F16 4E75                       		rts	
00002F18                            ; ===========================================================================
00002F18                            
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            ; Title	screen
00002F18                            ; ---------------------------------------------------------------------------
00002F18                            
00002F18                            TitleScreen:				; XREF: GameModeArray
00002F18 103C 00E4                  		move.b	#$E4,d0
00002F1C 6100 E47E                  		bsr.w	PlaySound_Special ; stop music
00002F20 6100 E6BC                  		bsr.w	ClearPLC
00002F24 6100 EF2C                  		bsr.w	Pal_FadeFrom
00002F28 46FC 2700                  		move	#$2700,sr
00002F2C 6100 E424                  		bsr.w	SoundDriverLoad
00002F30 4DF9 00C0 0004             		lea	($C00004).l,a6
00002F36 3CBC 8004                  		move.w	#$8004,(a6)
00002F3A 3CBC 8230                  		move.w	#$8230,(a6)
00002F3E 3CBC 8407                  		move.w	#$8407,(a6)
00002F42 3CBC 9001                  		move.w	#$9001,(a6)
00002F46 3CBC 9200                  		move.w	#$9200,(a6)
00002F4A 3CBC 8B03                  		move.w	#$8B03,(a6)
00002F4E 3CBC 8720                  		move.w	#$8720,(a6)
00002F52 4238 F64E                  		clr.b	($FFFFF64E).w
00002F56 6100 E36C                  		bsr.w	ClearScreen
00002F5A 43F8 D000                  		lea	($FFFFD000).w,a1
00002F5E 7000                       		moveq	#0,d0
00002F60 323C 07FF                  		move.w	#$7FF,d1
00002F64                            
00002F64                            Title_ClrObjRam:
00002F64 22C0                       		move.l	d0,(a1)+
00002F66 51C9 FFFC                  		dbf	d1,Title_ClrObjRam ; fill object RAM ($D000-$EFFF) with	$0
00002F6A                            
00002F6A 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
00002F74 41F9 0000 0000             		lea	(Nem_JapNames).l,a0 ; load Japanese credits
00002F7A 6100 E4C4                  		bsr.w	NemDec
00002F7E 23FC 54C0 0000 00C0 0004   		move.l	#$54C00000,($C00004).l
00002F88 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load alphabet
00002F8E 6100 E4B0                  		bsr.w	NemDec
00002F92 43F9 00FF 0000             		lea	($FF0000).l,a1
00002F98 41F9 0000 0000             		lea	(Eni_JapNames).l,a0 ; load mappings for	Japanese credits
00002F9E 303C 0000                  		move.w	#0,d0
00002FA2 6100 E77A                  		bsr.w	EniDec
00002FA6 43F9 00FF 0000             		lea	($FF0000).l,a1
00002FAC 203C 4000 0003             		move.l	#$40000003,d0
00002FB2 7227                       		moveq	#$27,d1
00002FB4 741B                       		moveq	#$1B,d2
00002FB6 6100 E468                  		bsr.w	ShowVDPGraphics
00002FBA 43F8 FB80                  		lea	($FFFFFB80).w,a1
00002FBE 7000                       		moveq	#0,d0
00002FC0 323C 001F                  		move.w	#$1F,d1
00002FC4                            
00002FC4                            Title_ClrPallet:
00002FC4 22C0                       		move.l	d0,(a1)+
00002FC6 51C9 FFFC                  		dbf	d1,Title_ClrPallet ; fill pallet with 0	(black)
00002FCA                            
00002FCA 7003                       		moveq	#3,d0		; load Sonic's pallet
00002FCC 6100 F12E                  		bsr.w	PalLoad1
00002FD0 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load "SONIC TEAM PRESENTS"	object
00002FD6 4EB9 0000 0000             		jsr	ObjectsLoad
00002FDC 4EB9 0000 0000             		jsr	BuildSprites
00002FE2 6100 EDC8                  		bsr.w	Pal_FadeTo
00002FE6 46FC 2700                  		move	#$2700,sr
00002FEA 23FC 4000 0001 00C0 0004   		move.l	#$40000001,($C00004).l
00002FF4 41F9 0000 0000             		lea	(Nem_TitleFg).l,a0 ; load title	screen patterns
00002FFA 6100 E444                  		bsr.w	NemDec
00002FFE 23FC 6000 0001 00C0 0004   		move.l	#$60000001,($C00004).l
00003008 41F9 0000 0000             		lea	(Nem_TitleSonic).l,a0 ;	load Sonic title screen	patterns
0000300E 6100 E430                  		bsr.w	NemDec
00003012 23FC 6200 0002 00C0 0004   		move.l	#$62000002,($C00004).l
0000301C 41F9 0000 0000             		lea	(Nem_TitleTM).l,a0 ; load "TM" patterns
00003022 6100 E41C                  		bsr.w	NemDec
00003026 4DF9 00C0 0000             		lea	($C00000).l,a6
0000302C 2D7C 5000 0003 0004        		move.l	#$50000003,4(a6)
00003034 4BF9 0000 05F0             		lea	(Art_Text).l,a5
0000303A 323C 028F                  		move.w	#$28F,d1
0000303E                            
0000303E                            Title_LoadText:
0000303E 3C9D                       		move.w	(a5)+,(a6)
00003040 51C9 FFFC                  		dbf	d1,Title_LoadText ; load uncompressed text patterns
00003044                            
00003044 11FC 0000 FE30             		move.b	#0,($FFFFFE30).w ; clear lamppost counter
0000304A 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w ; disable debug item placement	mode
00003050 31FC 0000 FFF0             		move.w	#0,($FFFFFFF0).w ; disable debug mode
00003056 31FC 0000 FFEA             		move.w	#0,($FFFFFFEA).w
0000305C 31FC 0000 FE10             		move.w	#0,($FFFFFE10).w ; set level to	GHZ (00)
00003062 31FC 0000 F634             		move.w	#0,($FFFFF634).w ; disable pallet cycling
00003068 6100 0000                  		bsr.w	LevelSizeLoad
0000306C 6100 0000                  		bsr.w	DeformBgLayer
00003070 43F8 B000                  		lea	($FFFFB000).w,a1
00003074 41F9 0000 0000             		lea	(Blk16_GHZ).l,a0 ; load	GHZ 16x16 mappings
0000307A 303C 0000                  		move.w	#0,d0
0000307E 6100 E69E                  		bsr.w	EniDec
00003082 41F9 0000 0000             		lea	(Blk256_GHZ).l,a0 ; load GHZ 256x256 mappings
00003088 43F9 00FF 0000             		lea	($FF0000).l,a1
0000308E 6100 E80C                  		bsr.w	KosDec
00003092 6100 0000                  		bsr.w	LevelLayoutLoad
00003096 6100 EDBA                  		bsr.w	Pal_FadeFrom
0000309A 46FC 2700                  		move	#$2700,sr
0000309E 6100 E224                  		bsr.w	ClearScreen
000030A2 4BF9 00C0 0004             		lea	($C00004).l,a5
000030A8 4DF9 00C0 0000             		lea	($C00000).l,a6
000030AE 47F8 F708                  		lea	($FFFFF708).w,a3
000030B2 49F8 A440                  		lea	($FFFFA440).w,a4
000030B6 343C 6000                  		move.w	#$6000,d2
000030BA 6100 0000                  		bsr.w	LoadTilesFromStart2
000030BE 43F9 00FF 0000             		lea	($FF0000).l,a1
000030C4 41F9 0000 0000             		lea	(Eni_Title).l,a0 ; load	title screen mappings
000030CA 303C 0000                  		move.w	#0,d0
000030CE 6100 E64E                  		bsr.w	EniDec
000030D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000030D8 203C 4206 0003             		move.l	#$42060003,d0
000030DE 7221                       		moveq	#$21,d1
000030E0 7415                       		moveq	#$15,d2
000030E2 6100 E33C                  		bsr.w	ShowVDPGraphics
000030E6 23FC 4000 0000 00C0 0004   		move.l	#$40000000,($C00004).l
000030F0 41F9 0000 0000             		lea	(Nem_GHZ_1st).l,a0 ; load GHZ patterns
000030F6 6100 E348                  		bsr.w	NemDec
000030FA 7001                       		moveq	#1,d0		; load title screen pallet
000030FC 6100 EFFE                  		bsr.w	PalLoad1
00003100 103C 008A                  		move.b	#$8A,d0		; play title screen music
00003104 6100 E296                  		bsr.w	PlaySound_Special
00003108 11FC 0000 FFFA             		move.b	#0,($FFFFFFFA).w ; disable debug mode
0000310E 31FC 0178 F614             		move.w	#$178,($FFFFF614).w ; run title	screen for $178	frames
00003114 43F8 D080                  		lea	($FFFFD080).w,a1
00003118 7000                       		moveq	#0,d0
0000311A 323C 0007                  		move.w	#7,d1
0000311E                            
0000311E                            Title_ClrObjRam2:
0000311E 22C0                       		move.l	d0,(a1)+
00003120 51C9 FFFC                  		dbf	d1,Title_ClrObjRam2
00003124                            
00003124 11FC 000E D040             		move.b	#$E,($FFFFD040).w ; load big Sonic object
0000312A 11FC 000F D080             		move.b	#$F,($FFFFD080).w ; load "PRESS	START BUTTON" object
00003130 11FC 000F D0C0             		move.b	#$F,($FFFFD0C0).w ; load "TM" object
00003136 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
0000313C 11FC 000F D100             		move.b	#$F,($FFFFD100).w
00003142 11FC 0002 D11A             		move.b	#2,($FFFFD11A).w
00003148 4EB9 0000 0000             		jsr	ObjectsLoad
0000314E 6100 0000                  		bsr.w	DeformBgLayer
00003152 4EB9 0000 0000             		jsr	BuildSprites
00003158 7000                       		moveq	#0,d0
0000315A 6100 E456                  		bsr.w	LoadPLC2
0000315E 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003164 31FC 0000 FFE6             		move.w	#0,($FFFFFFE6).w
0000316A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000316E 0000 0040                  		ori.b	#$40,d0
00003172 33C0 00C0 0004             		move.w	d0,($C00004).l
00003178 6100 EC32                  		bsr.w	Pal_FadeTo
0000317C                            
0000317C                            loc_317C:
0000317C 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003182 6100 F824                  		bsr.w	DelayProgram
00003186 4EB9 0000 0000             		jsr	ObjectsLoad
0000318C 6100 0000                  		bsr.w	DeformBgLayer
00003190 4EB9 0000 0000             		jsr	BuildSprites
00003196 6100 E7C4                  		bsr.w	PalCycle_Title
0000319A 6100 E450                  		bsr.w	RunPLC_RAM
0000319E 3038 D008                  		move.w	($FFFFD008).w,d0
000031A2 5440                       		addq.w	#2,d0
000031A4 31C0 D008                  		move.w	d0,($FFFFD008).w ; move	Sonic to the right
000031A8 0C40 1C00                  		cmpi.w	#$1C00,d0	; has Sonic object passed x-position $1C00?
000031AC 6500                       		bcs.s	Title_ChkRegion	; if not, branch
000031AE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000031B4 4E75                       		rts	
000031B6                            ; ===========================================================================
000031B6                            
000031B6                            Title_ChkRegion:
000031B6 4A38 FFF8                  		tst.b	($FFFFFFF8).w	; check	if the machine is US or	Japanese
000031BA 6A00                       		bpl.s	Title_RegionJ	; if Japanese, branch
000031BC 41F9 0000 0000             		lea	(LevelSelectCode_US).l,a0 ; load US code
000031C2 6000                       		bra.s	Title_EnterCheat
000031C4                            ; ===========================================================================
000031C4                            
000031C4                            Title_RegionJ:				; XREF: Title_ChkRegion
000031C4 41F9 0000 0000             		lea	(LevelSelectCode_J).l,a0 ; load	J code
000031CA                            
000031CA                            Title_EnterCheat:			; XREF: Title_ChkRegion
000031CA 3038 FFE4                  		move.w	($FFFFFFE4).w,d0
000031CE D0C0                       		adda.w	d0,a0
000031D0 1038 F605                  		move.b	($FFFFF605).w,d0 ; get button press
000031D4 0200 000F                  		andi.b	#$F,d0		; read only up/down/left/right buttons
000031D8 B010                       		cmp.b	(a0),d0		; does button press match the cheat code?
000031DA 6600                       		bne.s	loc_3210	; if not, branch
000031DC 5278 FFE4                  		addq.w	#1,($FFFFFFE4).w ; next	button press
000031E0 4A00                       		tst.b	d0
000031E2 6600                       		bne.s	Title_CountC
000031E4 41F8 FFE0                  		lea	($FFFFFFE0).w,a0
000031E8 3238 FFE6                  		move.w	($FFFFFFE6).w,d1
000031EC E249                       		lsr.w	#1,d1
000031EE 0241 0003                  		andi.w	#3,d1
000031F2 6700                       		beq.s	Title_PlayRing
000031F4 4A38 FFF8                  		tst.b	($FFFFFFF8).w
000031F8 6A00                       		bpl.s	Title_PlayRing
000031FA 7201                       		moveq	#1,d1
000031FC 1181 1001                  		move.b	d1,1(a0,d1.w)
00003200                            
00003200                            Title_PlayRing:
00003200 11BC 0001 1000             		move.b	#1,(a0,d1.w)	; activate cheat
00003206 103C 00B5                  		move.b	#$B5,d0		; play ring sound when code is entered
0000320A 6100 E190                  		bsr.w	PlaySound_Special
0000320E 6000                       		bra.s	Title_CountC
00003210                            ; ===========================================================================
00003210                            
00003210                            loc_3210:				; XREF: Title_EnterCheat
00003210 4A00                       		tst.b	d0
00003212 6700                       		beq.s	Title_CountC
00003214 0C78 0009 FFE4             		cmpi.w	#9,($FFFFFFE4).w
0000321A 6700                       		beq.s	Title_CountC
0000321C 31FC 0000 FFE4             		move.w	#0,($FFFFFFE4).w
00003222                            
00003222                            Title_CountC:
00003222 1038 F605                  		move.b	($FFFFF605).w,d0
00003226 0200 0020                  		andi.b	#$20,d0		; is C button pressed?
0000322A 6700                       		beq.s	loc_3230	; if not, branch
0000322C 5278 FFE6                  		addq.w	#1,($FFFFFFE6).w ; increment C button counter
00003230                            
00003230                            loc_3230:
00003230 4A78 F614                  		tst.w	($FFFFF614).w
00003234 6700 0000                  		beq.w	Demo
00003238 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; check if Start is pressed
0000323E 6700 FF3C                  		beq.w	loc_317C	; if not, branch
00003242                            
00003242                            Title_ChkLevSel:
00003242 4A38 FFE0                  		tst.b	($FFFFFFE0).w	; check	if level select	code is	on
00003246 6700 0000                  		beq.w	PlayLevel	; if not, play level
0000324A 0838 0006 F604             		btst	#6,($FFFFF604).w ; check if A is pressed
00003250 6700 0000                  		beq.w	PlayLevel	; if not, play level
00003254 7002                       		moveq	#2,d0
00003256 6100 EEC0                  		bsr.w	PalLoad2	; load level select pallet
0000325A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000325E 7000                       		moveq	#0,d0
00003260 323C 00DF                  		move.w	#$DF,d1
00003264                            
00003264                            Title_ClrScroll:
00003264 22C0                       		move.l	d0,(a1)+
00003266 51C9 FFFC                  		dbf	d1,Title_ClrScroll ; fill scroll data with 0
0000326A                            
0000326A 21C0 F616                  		move.l	d0,($FFFFF616).w
0000326E 46FC 2700                  		move	#$2700,sr
00003272 4DF9 00C0 0000             		lea	($C00000).l,a6
00003278 23FC 6000 0003 00C0 0004   		move.l	#$60000003,($C00004).l
00003282 323C 03FF                  		move.w	#$3FF,d1
00003286                            
00003286                            Title_ClrVram:
00003286 2C80                       		move.l	d0,(a6)
00003288 51C9 FFFC                  		dbf	d1,Title_ClrVram ; fill	VRAM with 0
0000328C                            
0000328C 6100 0000                  		bsr.w	LevSelTextLoad
00003290                            
00003290                            ; ---------------------------------------------------------------------------
00003290                            ; Level	Select
00003290                            ; ---------------------------------------------------------------------------
00003290                            
00003290                            LevelSelect:
00003290 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
00003296 6100 F710                  		bsr.w	DelayProgram
0000329A 6100 0000                  		bsr.w	LevSelControls
0000329E 6100 E34C                  		bsr.w	RunPLC_RAM
000032A2 4AB8 F680                  		tst.l	($FFFFF680).w
000032A6 66E8                       		bne.s	LevelSelect
000032A8 0238 00F0 F605             		andi.b	#$F0,($FFFFF605).w ; is	A, B, C, or Start pressed?
000032AE 67E0                       		beq.s	LevelSelect	; if not, branch
000032B0 3038 FF82                  		move.w	($FFFFFF82).w,d0
000032B4 0C40 0014                  		cmpi.w	#$14,d0		; have you selected item $14 (sound test)?
000032B8 6600                       		bne.s	LevSel_Level_SS	; if not, go to	Level/SS subroutine
000032BA 3038 FF84                  		move.w	($FFFFFF84).w,d0
000032BE 0640 0080                  		addi.w	#$80,d0
000032C2 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is Japanese Credits cheat on?
000032C6 6700                       		beq.s	LevSel_NoCheat	; if not, branch
000032C8 0C40 009F                  		cmpi.w	#$9F,d0		; is sound $9F being played?
000032CC 6700                       		beq.s	LevSel_Ending	; if yes, branch
000032CE 0C40 009E                  		cmpi.w	#$9E,d0		; is sound $9E being played?
000032D2 6700                       		beq.s	LevSel_Credits	; if yes, branch
000032D4                            
000032D4                            LevSel_NoCheat:
000032D4 0C40 0094                  		cmpi.w	#$94,d0		; is sound $80-$94 being played?
000032D8 6500                       		bcs.s	LevSel_PlaySnd	; if yes, branch
000032DA 0C40 00A0                  		cmpi.w	#$A0,d0		; is sound $95-$A0 being played?
000032DE 65B0                       		bcs.s	LevelSelect	; if yes, branch
000032E0                            
000032E0                            LevSel_PlaySnd:
000032E0 6100 E0BA                  		bsr.w	PlaySound_Special
000032E4 60AA                       		bra.s	LevelSelect
000032E6                            ; ===========================================================================
000032E6                            
000032E6                            LevSel_Ending:				; XREF: LevelSelect
000032E6 11FC 0018 F600             		move.b	#$18,($FFFFF600).w ; set screen	mode to	$18 (Ending)
000032EC 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	to 0600	(Ending)
000032F2 4E75                       		rts	
000032F4                            ; ===========================================================================
000032F4                            
000032F4                            LevSel_Credits:				; XREF: LevelSelect
000032F4 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set screen	mode to	$1C (Credits)
000032FA 103C 0091                  		move.b	#$91,d0
000032FE 6100 E09C                  		bsr.w	PlaySound_Special ; play credits music
00003302 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w
00003308 4E75                       		rts	
0000330A                            ; ===========================================================================
0000330A                            
0000330A                            LevSel_Level_SS:			; XREF: LevelSelect
0000330A D040                       		add.w	d0,d0
0000330C 303B 0000                  		move.w	LSelectPointers(pc,d0.w),d0 ; load level number
00003310 6B00 FF7E                  		bmi.w	LevelSelect
00003314 0C40 0700                  		cmpi.w	#$700,d0	; check	if level is 0700 (Special Stage)
00003318 6600                       		bne.s	LevSel_Level	; if not, branch
0000331A 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
00003320 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level
00003324 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000332A 7000                       		moveq	#0,d0
0000332C 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003330 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003334 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003338 4E75                       		rts	
0000333A                            ; ===========================================================================
0000333A                            
0000333A                            LevSel_Level:				; XREF: LevSel_Level_SS
0000333A 0240 3FFF                  		andi.w	#$3FFF,d0
0000333E 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
00003342                            
00003342                            PlayLevel:				; XREF: ROM:00003246j ...
00003342 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00003348 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
0000334E 7000                       		moveq	#0,d0
00003350 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00003354 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003358 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
0000335C 11C0 FE16                  		move.b	d0,($FFFFFE16).w ; clear special stage number
00003360 11C0 FE57                  		move.b	d0,($FFFFFE57).w ; clear emeralds
00003364 21C0 FE58                  		move.l	d0,($FFFFFE58).w ; clear emeralds
00003368 21C0 FE5C                  		move.l	d0,($FFFFFE5C).w ; clear emeralds
0000336C 11C0 FE18                  		move.b	d0,($FFFFFE18).w ; clear continues
00003370 103C 00E0                  		move.b	#$E0,d0
00003374 6100 E026                  		bsr.w	PlaySound_Special ; fade out music
00003378 4E75                       		rts	
0000337A                            ; ===========================================================================
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            ; Level	select - level pointers
0000337A                            ; ---------------------------------------------------------------------------
0000337A                            LSelectPointers:
0000337A                            		incbin	misc\ls_point.bin
000033A4                            		even
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            ; Level	select codes
000033A4                            ; ---------------------------------------------------------------------------
000033A4                            LevelSelectCode_J:
000033A4                            		incbin	misc\ls_jcode.bin
000033AA                            		even
000033AA                            
000033AA                            LevelSelectCode_US:
000033AA                            		incbin	misc\ls_ucode.bin
000033B0                            		even
000033B0                            ; ===========================================================================
000033B0                            
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            ; Demo mode
000033B0                            ; ---------------------------------------------------------------------------
000033B0                            
000033B0                            Demo:					; XREF: TitleScreen
000033B0 31FC 001E F614             		move.w	#$1E,($FFFFF614).w
000033B6                            
000033B6                            loc_33B6:				; XREF: loc_33E4
000033B6 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000033BC 6100 F5EA                  		bsr.w	DelayProgram
000033C0 6100 0000                  		bsr.w	DeformBgLayer
000033C4 6100 E576                  		bsr.w	PalCycle_Load
000033C8 6100 E222                  		bsr.w	RunPLC_RAM
000033CC 3038 D008                  		move.w	($FFFFD008).w,d0
000033D0 5440                       		addq.w	#2,d0
000033D2 31C0 D008                  		move.w	d0,($FFFFD008).w
000033D6 0C40 1C00                  		cmpi.w	#$1C00,d0
000033DA 6500                       		bcs.s	loc_33E4
000033DC 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (level)
000033E2 4E75                       		rts	
000033E4                            ; ===========================================================================
000033E4                            
000033E4                            loc_33E4:				; XREF: Demo
000033E4 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000033EA 6600 FE56                  		bne.w	Title_ChkLevSel	; if yes, branch
000033EE 4A78 F614                  		tst.w	($FFFFF614).w
000033F2 6600 FFC2                  		bne.w	loc_33B6
000033F6 103C 00E0                  		move.b	#$E0,d0
000033FA 6100 DFA0                  		bsr.w	PlaySound_Special ; fade out music
000033FE 3038 FFF2                  		move.w	($FFFFFFF2).w,d0 ; load	demo number
00003402 0240 0007                  		andi.w	#7,d0
00003406 D040                       		add.w	d0,d0
00003408 303B 0000                  		move.w	Demo_Levels(pc,d0.w),d0	; load level number for	demo
0000340C 31C0 FE10                  		move.w	d0,($FFFFFE10).w
00003410 5278 FFF2                  		addq.w	#1,($FFFFFFF2).w ; add 1 to demo number
00003414 0C78 0004 FFF2             		cmpi.w	#4,($FFFFFFF2).w ; is demo number less than 4?
0000341A 6500                       		bcs.s	loc_3422	; if yes, branch
0000341C 31FC 0000 FFF2             		move.w	#0,($FFFFFFF2).w ; reset demo number to	0
00003422                            
00003422                            loc_3422:
00003422 31FC 0001 FFF0             		move.w	#1,($FFFFFFF0).w ; turn	demo mode on
00003428 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set screen mode to 08 (demo)
0000342E 0C40 0600                  		cmpi.w	#$600,d0	; is level number 0600 (special	stage)?
00003432 6600                       		bne.s	Demo_Level	; if not, branch
00003434 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set screen	mode to	$10 (Special Stage)
0000343A 4278 FE10                  		clr.w	($FFFFFE10).w	; clear	level number
0000343E 4238 FE16                  		clr.b	($FFFFFE16).w	; clear	special	stage number
00003442                            
00003442                            Demo_Level:
00003442 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00003448 7000                       		moveq	#0,d0
0000344A 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
0000344E 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00003452 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00003456 4E75                       		rts	
00003458                            ; ===========================================================================
00003458                            ; ---------------------------------------------------------------------------
00003458                            ; Levels used in demos
00003458                            ; ---------------------------------------------------------------------------
00003458                            Demo_Levels:	incbin	misc\dm_ord1.bin
00003460                            		even
00003460                            
00003460                            ; ---------------------------------------------------------------------------
00003460                            ; Subroutine to	change what you're selecting in the level select
00003460                            ; ---------------------------------------------------------------------------
00003460                            
00003460                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003460                            
00003460                            
00003460                            LevSelControls:				; XREF: LevelSelect
00003460 1238 F605                  		move.b	($FFFFF605).w,d1
00003464 0201 0003                  		andi.b	#3,d1		; is up/down pressed and held?
00003468 6600                       		bne.s	LevSel_UpDown	; if yes, branch
0000346A 5378 FF80                  		subq.w	#1,($FFFFFF80).w ; subtract 1 from time	to next	move
0000346E 6A00                       		bpl.s	LevSel_SndTest	; if time remains, branch
00003470                            
00003470                            LevSel_UpDown:
00003470 31FC 000B FF80             		move.w	#$B,($FFFFFF80).w ; reset time delay
00003476 1238 F604                  		move.b	($FFFFF604).w,d1
0000347A 0201 0003                  		andi.b	#3,d1		; is up/down pressed?
0000347E 6700                       		beq.s	LevSel_SndTest	; if not, branch
00003480 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003484 0801 0000                  		btst	#0,d1		; is up	pressed?
00003488 6700                       		beq.s	LevSel_Down	; if not, branch
0000348A 5340                       		subq.w	#1,d0		; move up 1 selection
0000348C 6400                       		bcc.s	LevSel_Down
0000348E 7014                       		moveq	#$14,d0		; if selection moves below 0, jump to selection	$14
00003490                            
00003490                            LevSel_Down:
00003490 0801 0001                  		btst	#1,d1		; is down pressed?
00003494 6700                       		beq.s	LevSel_Refresh	; if not, branch
00003496 5240                       		addq.w	#1,d0		; move down 1 selection
00003498 0C40 0015                  		cmpi.w	#$15,d0
0000349C 6500                       		bcs.s	LevSel_Refresh
0000349E 7000                       		moveq	#0,d0		; if selection moves above $14,	jump to	selection 0
000034A0                            
000034A0                            LevSel_Refresh:
000034A0 31C0 FF82                  		move.w	d0,($FFFFFF82).w ; set new selection
000034A4 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034A8 4E75                       		rts	
000034AA                            ; ===========================================================================
000034AA                            
000034AA                            LevSel_SndTest:				; XREF: LevSelControls
000034AA 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w ; is	item $14 selected?
000034B0 6600                       		bne.s	LevSel_NoMove	; if not, branch
000034B2 1238 F605                  		move.b	($FFFFF605).w,d1
000034B6 0201 000C                  		andi.b	#$C,d1		; is left/right	pressed?
000034BA 6700                       		beq.s	LevSel_NoMove	; if not, branch
000034BC 3038 FF84                  		move.w	($FFFFFF84).w,d0
000034C0 0801 0002                  		btst	#2,d1		; is left pressed?
000034C4 6700                       		beq.s	LevSel_Right	; if not, branch
000034C6 5340                       		subq.w	#1,d0		; subtract 1 from sound	test
000034C8 6400                       		bcc.s	LevSel_Right
000034CA 704F                       		moveq	#$4F,d0		; if sound test	moves below 0, set to $4F
000034CC                            
000034CC                            LevSel_Right:
000034CC 0801 0003                  		btst	#3,d1		; is right pressed?
000034D0 6700                       		beq.s	LevSel_Refresh2	; if not, branch
000034D2 5240                       		addq.w	#1,d0		; add 1	to sound test
000034D4 0C40 0050                  		cmpi.w	#$50,d0
000034D8 6500                       		bcs.s	LevSel_Refresh2
000034DA 7000                       		moveq	#0,d0		; if sound test	moves above $4F, set to	0
000034DC                            
000034DC                            LevSel_Refresh2:
000034DC 31C0 FF84                  		move.w	d0,($FFFFFF84).w ; set sound test number
000034E0 6100 0000                  		bsr.w	LevSelTextLoad	; refresh text
000034E4                            
000034E4                            LevSel_NoMove:
000034E4 4E75                       		rts	
000034E6                            ; End of function LevSelControls
000034E6                            
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            ; Subroutine to load level select text
000034E6                            ; ---------------------------------------------------------------------------
000034E6                            
000034E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000034E6                            
000034E6                            
000034E6                            LevSelTextLoad:				; XREF: TitleScreen
000034E6 43F9 0000 0000             		lea	(LevelMenuText).l,a1
000034EC 4DF9 00C0 0000             		lea	($C00000).l,a6
000034F2 283C 6210 0003             		move.l	#$62100003,d4	; screen position (text)
000034F8 363C E680                  		move.w	#$E680,d3	; VRAM setting
000034FC 7214                       		moveq	#$14,d1		; number of lines of text
000034FE                            
000034FE                            loc_34FE:				; XREF: LevSelTextLoad+26j
000034FE 2D44 0004                  		move.l	d4,4(a6)
00003502 6100 0000                  		bsr.w	LevSel_ChgLine
00003506 0684 0080 0000             		addi.l	#$800000,d4
0000350C 51C9 FFF0                  		dbf	d1,loc_34FE
00003510 7000                       		moveq	#0,d0
00003512 3038 FF82                  		move.w	($FFFFFF82).w,d0
00003516 3200                       		move.w	d0,d1
00003518 283C 6210 0003             		move.l	#$62100003,d4
0000351E EF48                       		lsl.w	#7,d0
00003520 4840                       		swap	d0
00003522 D880                       		add.l	d0,d4
00003524 43F9 0000 0000             		lea	(LevelMenuText).l,a1
0000352A E749                       		lsl.w	#3,d1
0000352C 3001                       		move.w	d1,d0
0000352E D241                       		add.w	d1,d1
00003530 D240                       		add.w	d0,d1
00003532 D2C1                       		adda.w	d1,a1
00003534 363C C680                  		move.w	#$C680,d3
00003538 2D44 0004                  		move.l	d4,4(a6)
0000353C 6100 0000                  		bsr.w	LevSel_ChgLine
00003540 363C E680                  		move.w	#$E680,d3
00003544 0C78 0014 FF82             		cmpi.w	#$14,($FFFFFF82).w
0000354A 6600                       		bne.s	loc_3550
0000354C 363C C680                  		move.w	#$C680,d3
00003550                            
00003550                            loc_3550:
00003550 23FC 6C30 0003 00C0 0004   		move.l	#$6C300003,($C00004).l ; screen	position (sound	test)
0000355A 3038 FF84                  		move.w	($FFFFFF84).w,d0
0000355E 0640 0080                  		addi.w	#$80,d0
00003562 1400                       		move.b	d0,d2
00003564 E808                       		lsr.b	#4,d0
00003566 6100 0000                  		bsr.w	LevSel_ChgSnd
0000356A 1002                       		move.b	d2,d0
0000356C 6100 0000                  		bsr.w	LevSel_ChgSnd
00003570 4E75                       		rts	
00003572                            ; End of function LevSelTextLoad
00003572                            
00003572                            
00003572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003572                            
00003572                            
00003572                            LevSel_ChgSnd:				; XREF: LevSelTextLoad
00003572 0240 000F                  		andi.w	#$F,d0
00003576 0C00 000A                  		cmpi.b	#$A,d0
0000357A 6500                       		bcs.s	loc_3580
0000357C 5E00                       		addi.b	#7,d0
0000357E                            
0000357E                            loc_3580:
0000357E D043                       		add.w	d3,d0
00003580 3C80                       		move.w	d0,(a6)
00003582 4E75                       		rts	
00003584                            ; End of function LevSel_ChgSnd
00003584                            
00003584                            
00003584                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003584                            
00003584                            
00003584                            LevSel_ChgLine:				; XREF: LevSelTextLoad
00003584 7417                       		moveq	#$17,d2		; number of characters per line
00003586                            
00003586                            loc_3588:
00003586 7000                       		moveq	#0,d0
00003588 1019                       		move.b	(a1)+,d0
0000358A 6A00                       		bpl.s	loc_3598
0000358C 3CBC 0000                  		move.w	#0,(a6)
00003590 51CA FFF4                  		dbf	d2,loc_3588
00003594 4E75                       		rts	
00003596                            ; ===========================================================================
00003596                            
00003596                            loc_3598:				; XREF: LevSel_ChgLine
00003596 D043                       		add.w	d3,d0
00003598 3C80                       		move.w	d0,(a6)
0000359A 51CA FFEA                  		dbf	d2,loc_3588
0000359E 4E75                       		rts	
000035A0                            ; End of function LevSel_ChgLine
000035A0                            
000035A0                            ; ===========================================================================
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            ; Level	select menu text
000035A0                            ; ---------------------------------------------------------------------------
000035A0                            LevelMenuText:	incbin	misc\menutext.bin
00003798                            		even
00003798                            ; ---------------------------------------------------------------------------
00003798                            ; Music	playlist
00003798                            ; ---------------------------------------------------------------------------
00003798                            MusicList:	incbin	misc\muslist1.bin
000037A0                            		even
000037A0                            ; ===========================================================================
000037A0                            
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            ; Level
000037A0                            ; ---------------------------------------------------------------------------
000037A0                            
000037A0                            Level:					; XREF: GameModeArray
000037A0 08F8 0007 F600             		bset	#7,($FFFFF600).w ; add $80 to screen mode (for pre level sequence)
000037A6 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037AA 6B00                       		bmi.s	loc_37B6
000037AC 103C 00E0                  		move.b	#$E0,d0
000037B0 6100 DBEA                  		bsr.w	PlaySound_Special ; fade out music
000037B4                            
000037B4                            loc_37B6:
000037B4 6100 DE28                  		bsr.w	ClearPLC
000037B8 6100 E698                  		bsr.w	Pal_FadeFrom
000037BC 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000037C0 6B00                       		bmi.s	Level_ClrRam
000037C2 46FC 2700                  		move	#$2700,sr
000037C6 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000037D0 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000037D6 6100 DC68                  		bsr.w	NemDec
000037DA 46FC 2300                  		move	#$2300,sr
000037DE 7000                       		moveq	#0,d0
000037E0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000037E4 E948                       		lsl.w	#4,d0
000037E6 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
000037EC 45F2 0000                  		lea	(a2,d0.w),a2
000037F0 7000                       		moveq	#0,d0
000037F2 1012                       		move.b	(a2),d0
000037F4 6700                       		beq.s	loc_37FC
000037F6 6100 DD88                  		bsr.w	LoadPLC		; load level patterns
000037FA                            
000037FA                            loc_37FC:
000037FA 7001                       		moveq	#1,d0
000037FC 6100 DD82                  		bsr.w	LoadPLC		; load standard	patterns
00003800                            
00003800                            Level_ClrRam:
00003800 43F8 D000                  		lea	($FFFFD000).w,a1
00003804 7000                       		moveq	#0,d0
00003806 323C 07FF                  		move.w	#$7FF,d1
0000380A                            
0000380A                            Level_ClrObjRam:
0000380A 22C0                       		move.l	d0,(a1)+
0000380C 51C9 FFFC                  		dbf	d1,Level_ClrObjRam ; clear object RAM
00003810                            
00003810 43F8 F628                  		lea	($FFFFF628).w,a1
00003814 7000                       		moveq	#0,d0
00003816 323C 0015                  		move.w	#$15,d1
0000381A                            
0000381A                            Level_ClrVars:
0000381A 22C0                       		move.l	d0,(a1)+
0000381C 51C9 FFFC                  		dbf	d1,Level_ClrVars ; clear misc variables
00003820                            
00003820 43F8 F700                  		lea	($FFFFF700).w,a1
00003824 7000                       		moveq	#0,d0
00003826 323C 003F                  		move.w	#$3F,d1
0000382A                            
0000382A                            Level_ClrVars2:
0000382A 22C0                       		move.l	d0,(a1)+
0000382C 51C9 FFFC                  		dbf	d1,Level_ClrVars2 ; clear misc variables
00003830                            
00003830 43F8 FE60                  		lea	($FFFFFE60).w,a1
00003834 7000                       		moveq	#0,d0
00003836 323C 0047                  		move.w	#$47,d1
0000383A                            
0000383A                            Level_ClrVars3:
0000383A 22C0                       		move.l	d0,(a1)+
0000383C 51C9 FFFC                  		dbf	d1,Level_ClrVars3 ; clear object variables
00003840                            
00003840 46FC 2700                  		move	#$2700,sr
00003844 6100 DA7E                  		bsr.w	ClearScreen
00003848 4DF9 00C0 0004             		lea	($C00004).l,a6
0000384E 3CBC 8B03                  		move.w	#$8B03,(a6)
00003852 3CBC 8230                  		move.w	#$8230,(a6)
00003856 3CBC 8407                  		move.w	#$8407,(a6)
0000385A 3CBC 857C                  		move.w	#$857C,(a6)
0000385E 3CBC 9001                  		move.w	#$9001,(a6)
00003862 3CBC 8004                  		move.w	#$8004,(a6)
00003866 3CBC 8720                  		move.w	#$8720,(a6)
0000386A 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00003870 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00003874 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
0000387A 6600                       		bne.s	Level_LoadPal	; if not, branch
0000387C 3CBC 8014                  		move.w	#$8014,(a6)
00003880 7000                       		moveq	#0,d0
00003882 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003886 D040                       		add.w	d0,d0
00003888 43F9 0000 0000             		lea	(WaterHeight).l,a1 ; load water	height array
0000388E 3031 0000                  		move.w	(a1,d0.w),d0
00003892 31C0 F646                  		move.w	d0,($FFFFF646).w ; set water heights
00003896 31C0 F648                  		move.w	d0,($FFFFF648).w
0000389A 31C0 F64A                  		move.w	d0,($FFFFF64A).w
0000389E 4238 F64D                  		clr.b	($FFFFF64D).w	; clear	water routine counter
000038A2 4238 F64E                  		clr.b	($FFFFF64E).w	; clear	water movement
000038A6 11FC 0001 F64C             		move.b	#1,($FFFFF64C).w ; enable water
000038AC                            
000038AC                            Level_LoadPal:
000038AC 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
000038B2 46FC 2300                  		move	#$2300,sr
000038B6 7003                       		moveq	#3,d0
000038B8 6100 E85E                  		bsr.w	PalLoad2	; load Sonic's pallet line
000038BC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000038C2 6600                       		bne.s	Level_GetBgm	; if not, branch
000038C4 700F                       		moveq	#$F,d0		; pallet number	$0F (LZ)
000038C6 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is act number 3?
000038CC 6600                       		bne.s	Level_WaterPal	; if not, branch
000038CE 7010                       		moveq	#$10,d0		; pallet number	$10 (SBZ3)
000038D0                            
000038D0                            Level_WaterPal:
000038D0 6100 E85E                  		bsr.w	PalLoad3_Water	; load underwater pallet (see d0)
000038D4 4A38 FE30                  		tst.b	($FFFFFE30).w
000038D8 6700                       		beq.s	Level_GetBgm
000038DA 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
000038E0                            
000038E0                            Level_GetBgm:
000038E0 4A78 FFF0                  		tst.w	($FFFFFFF0).w
000038E4 6B00                       		bmi.s	loc_3946
000038E6 7000                       		moveq	#0,d0
000038E8 1038 FE10                  		move.b	($FFFFFE10).w,d0
000038EC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3?
000038F2 6600                       		bne.s	Level_BgmNotLZ4	; if not, branch
000038F4 7005                       		moveq	#5,d0		; move 5 to d0
000038F6                            
000038F6                            Level_BgmNotLZ4:
000038F6 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
000038FC 6600                       		bne.s	Level_PlayBgm	; if not, branch
000038FE 7006                       		moveq	#6,d0		; move 6 to d0
00003900                            
00003900                            Level_PlayBgm:
00003900 43F9 0000 3798             		lea	(MusicList).l,a1 ; load	music playlist
00003906 1031 0000                  		move.b	(a1,d0.w),d0	; add d0 to a1
0000390A 6100 DA8A                  		bsr.w	PlaySound	; play music
0000390E 11FC 0034 D080             		move.b	#$34,($FFFFD080).w ; load title	card object
00003914                            
00003914                            Level_TtlCard:
00003914 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000391A 6100 F08C                  		bsr.w	DelayProgram
0000391E 4EB9 0000 0000             		jsr	ObjectsLoad
00003924 4EB9 0000 0000             		jsr	BuildSprites
0000392A 6100 DCC0                  		bsr.w	RunPLC_RAM
0000392E 3038 D108                  		move.w	($FFFFD108).w,d0
00003932 B078 D130                  		cmp.w	($FFFFD130).w,d0 ; has title card sequence finished?
00003936 66DC                       		bne.s	Level_TtlCard	; if not, branch
00003938 4AB8 F680                  		tst.l	($FFFFF680).w	; are there any	items in the pattern load cue?
0000393C 66D6                       		bne.s	Level_TtlCard	; if yes, branch
0000393E 4EB9 0000 0000             		jsr	Hud_Base
00003944                            
00003944                            loc_3946:
00003944 7003                       		moveq	#3,d0
00003946 6100 E7B4                  		bsr.w	PalLoad1	; load Sonic's pallet line
0000394A 6100 0000                  		bsr.w	LevelSizeLoad
0000394E 6100 0000                  		bsr.w	DeformBgLayer
00003952 08F8 0002 F754             		bset	#2,($FFFFF754).w
00003958 6100 0000                  		bsr.w	MainLoadBlockLoad ; load block mappings	and pallets
0000395C 6100 0000                  		bsr.w	LoadTilesFromStart
00003960 4EB9 0000 0000             		jsr	FloorLog_Unk
00003966 6100 0000                  		bsr.w	ColIndexLoad
0000396A 6100 0000                  		bsr.w	LZWaterEffects
0000396E 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00003974 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003978 6B00                       		bmi.s	Level_ChkDebug
0000397A 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
00003980                            
00003980                            Level_ChkDebug:
00003980 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
00003984 6700                       		beq.s	Level_ChkWater	; if not, branch
00003986 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
0000398C 6700                       		beq.s	Level_ChkWater	; if not, branch
0000398E 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
00003994                            
00003994                            Level_ChkWater:
00003994 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0000399A 31FC 0000 F604             		move.w	#0,($FFFFF604).w
000039A0 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
000039A6 6600                       		bne.s	Level_LoadObj	; if not, branch
000039A8 11FC 001B D780             		move.b	#$1B,($FFFFD780).w ; load water	surface	object
000039AE 31FC 0060 D788             		move.w	#$60,($FFFFD788).w
000039B4 11FC 001B D7C0             		move.b	#$1B,($FFFFD7C0).w
000039BA 31FC 0120 D7C8             		move.w	#$120,($FFFFD7C8).w
000039C0                            
000039C0                            Level_LoadObj:
000039C0 4EB9 0000 0000             		jsr	ObjPosLoad
000039C6 4EB9 0000 0000             		jsr	ObjectsLoad
000039CC 4EB9 0000 0000             		jsr	BuildSprites
000039D2 7000                       		moveq	#0,d0
000039D4 4A38 FE30                  		tst.b	($FFFFFE30).w	; are you starting from	a lamppost?
000039D8 6600                       		bne.s	loc_39E8	; if yes, branch
000039DA 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000039DE 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000039E2 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w ; clear lives counter
000039E6                            
000039E6                            loc_39E8:
000039E6 11C0 FE1A                  		move.b	d0,($FFFFFE1A).w
000039EA 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w ; clear shield
000039EE 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w ; clear invincibility
000039F2 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w ; clear speed shoes
000039F6 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
000039FA 31C0 FE08                  		move.w	d0,($FFFFFE08).w
000039FE 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00003A02 31C0 FE04                  		move.w	d0,($FFFFFE04).w
00003A06 6100 0000                  		bsr.w	OscillateNumInit
00003A0A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00003A10 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w ; update rings	counter
00003A16 11FC 0001 FE1E             		move.b	#1,($FFFFFE1E).w ; update time counter
00003A1C 31FC 0000 F790             		move.w	#0,($FFFFF790).w
00003A22 43F9 0000 0000             		lea	(Demo_Index).l,a1 ; load demo data
00003A28 7000                       		moveq	#0,d0
00003A2A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003A2E E548                       		lsl.w	#2,d0
00003A30 2271 0000                  		movea.l	(a1,d0.w),a1
00003A34 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003A38 6A00                       		bpl.s	Level_Demo	; if yes, branch
00003A3A 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1 ; load ending demo	data
00003A40 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00003A44 5340                       		subq.w	#1,d0
00003A46 E548                       		lsl.w	#2,d0
00003A48 2271 0000                  		movea.l	(a1,d0.w),a1
00003A4C                            
00003A4C                            Level_Demo:
00003A4C 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w ; load key press duration
00003A52 5338 F792                  		subq.b	#1,($FFFFF792).w ; subtract 1 from duration
00003A56 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00003A5C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003A60 6A00                       		bpl.s	Level_ChkWaterPal
00003A62 31FC 021C F614             		move.w	#540,($FFFFF614).w
00003A68 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w
00003A6E 6600                       		bne.s	Level_ChkWaterPal
00003A70 31FC 01FE F614             		move.w	#510,($FFFFF614).w
00003A76                            
00003A76                            Level_ChkWaterPal:
00003A76 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ/SBZ3?
00003A7C 6600                       		bne.s	Level_Delay	; if not, branch
00003A7E 700B                       		moveq	#$B,d0		; pallet $0B (LZ underwater)
00003A80 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w ; is level SBZ3?
00003A86 6600                       		bne.s	Level_WaterPal2	; if not, branch
00003A88 700D                       		moveq	#$D,d0		; pallet $0D (SBZ3 underwater)
00003A8A                            
00003A8A                            Level_WaterPal2:
00003A8A 6100 E6C0                  		bsr.w	PalLoad4_Water
00003A8E                            
00003A8E                            Level_Delay:
00003A8E 323C 0003                  		move.w	#3,d1
00003A92                            
00003A92                            Level_DelayLoop:
00003A92 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003A98 6100 EF0E                  		bsr.w	DelayProgram
00003A9C 51C9 FFF4                  		dbf	d1,Level_DelayLoop
00003AA0                            
00003AA0 31FC 202F F626             		move.w	#$202F,($FFFFF626).w
00003AA6 6100 E30A                  		bsr.w	Pal_FadeTo2
00003AAA 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00003AAE 6B00                       		bmi.s	Level_ClrCardArt
00003AB0 5438 D0A4                  		addq.b	#2,($FFFFD0A4).w ; make	title card move
00003AB4 5838 D0E4                  		addq.b	#4,($FFFFD0E4).w
00003AB8 5838 D124                  		addq.b	#4,($FFFFD124).w
00003ABC 5838 D164                  		addq.b	#4,($FFFFD164).w
00003AC0 6000                       		bra.s	Level_StartGame
00003AC2                            ; ===========================================================================
00003AC2                            
00003AC2                            Level_ClrCardArt:
00003AC2 7002                       		moveq	#2,d0
00003AC4 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
00003ACA 7000                       		moveq	#0,d0
00003ACC 1038 FE10                  		move.b	($FFFFFE10).w,d0
00003AD0 0640 0015                  		addi.w	#$15,d0
00003AD4 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns (level no. + $15)
00003ADA                            
00003ADA                            Level_StartGame:
00003ADA 08B8 0007 F600             		bclr	#7,($FFFFF600).w ; subtract 80 from screen mode
00003AE0                            
00003AE0                            ; ---------------------------------------------------------------------------
00003AE0                            ; Main level loop (when	all title card and loading sequences are finished)
00003AE0                            ; ---------------------------------------------------------------------------
00003AE0                            
00003AE0                            Level_MainLoop:
00003AE0 6100 D8C6                  		bsr.w	PauseGame
00003AE4 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003AEA 6100 EEBC                  		bsr.w	DelayProgram
00003AEE 5278 FE04                  		addq.w	#1,($FFFFFE04).w ; add 1 to level timer
00003AF2 6100 0000                  		bsr.w	MoveSonicInDemo
00003AF6 6100 0000                  		bsr.w	LZWaterEffects
00003AFA 4EB9 0000 0000             		jsr	ObjectsLoad
00003B00 4A78 FE08                  		tst.w	($FFFFFE08).w
00003B04 6600                       		bne.s	loc_3B10
00003B06 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003B0C 6400                       		bcc.s	loc_3B14
00003B0E                            
00003B0E                            loc_3B10:
00003B0E 6100 0000                  		bsr.w	DeformBgLayer
00003B12                            
00003B12                            loc_3B14:
00003B12 4EB9 0000 0000             		jsr	BuildSprites
00003B18 4EB9 0000 0000             		jsr	ObjPosLoad
00003B1E 6100 DE1C                  		bsr.w	PalCycle_Load
00003B22 6100 DAC8                  		bsr.w	RunPLC_RAM
00003B26 6100 0000                  		bsr.w	OscillateNumDo
00003B2A 6100 0000                  		bsr.w	ChangeRingFrame
00003B2E 6100 0000                  		bsr.w	SignpostArtLoad
00003B32 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B38 6700                       		beq.s	Level_ChkDemo	; if screen mode is 08 (demo), branch
00003B3A 4A78 FE02                  		tst.w	($FFFFFE02).w	; is the level set to restart?
00003B3E 6600 FC60                  		bne.w	Level		; if yes, branch
00003B42 0C38 000C F600             		cmpi.b	#$C,($FFFFF600).w
00003B48 6700 FF96                  		beq.w	Level_MainLoop	; if screen mode is $0C	(level), branch
00003B4C 4E75                       		rts	
00003B4E                            ; ===========================================================================
00003B4E                            
00003B4E                            Level_ChkDemo:				; XREF: Level_MainLoop
00003B4E 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
00003B52 6600                       		bne.s	Level_EndDemo	; if yes, branch
00003B54 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00003B58 6700                       		beq.s	Level_EndDemo	; if not, branch
00003B5A 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w
00003B60 6700 FF7E                  		beq.w	Level_MainLoop	; if screen mode is 08 (demo), branch
00003B64 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B6A 4E75                       		rts	
00003B6C                            ; ===========================================================================
00003B6C                            
00003B6C                            Level_EndDemo:				; XREF: Level_ChkDemo
00003B6C 0C38 0008 F600             		cmpi.b	#8,($FFFFF600).w ; is screen mode 08 (demo)?
00003B72 6600                       		bne.s	loc_3B88	; if not, branch
00003B74 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00003B7A 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003B7E 6A00                       		bpl.s	loc_3B88	; if yes, branch
00003B80 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; go	to credits
00003B86                            
00003B86                            loc_3B88:
00003B86 31FC 003C F614             		move.w	#$3C,($FFFFF614).w
00003B8C 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00003B92 4278 F794                  		clr.w	($FFFFF794).w
00003B96                            
00003B96                            loc_3B98:
00003B96 11FC 0008 F62A             		move.b	#8,($FFFFF62A).w
00003B9C 6100 EE0A                  		bsr.w	DelayProgram
00003BA0 6100 0000                  		bsr.w	MoveSonicInDemo
00003BA4 4EB9 0000 0000             		jsr	ObjectsLoad
00003BAA 4EB9 0000 0000             		jsr	BuildSprites
00003BB0 4EB9 0000 0000             		jsr	ObjPosLoad
00003BB6 5378 F794                  		subq.w	#1,($FFFFF794).w
00003BBA 6A00                       		bpl.s	loc_3BC8
00003BBC 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00003BC2 6100 E2AE                  		bsr.w	Pal_FadeOut
00003BC6                            
00003BC6                            loc_3BC8:
00003BC6 4A78 F614                  		tst.w	($FFFFF614).w
00003BCA 66CA                       		bne.s	loc_3B98
00003BCC 4E75                       		rts	
00003BCE                            ; ===========================================================================
00003BCE                            ; ---------------------------------------------------------------------------
00003BCE                            ; Subroutine to	do special water effects in Labyrinth Zone
00003BCE                            ; ---------------------------------------------------------------------------
00003BCE                            
00003BCE                            LZWaterEffects:				; XREF: Level
00003BCE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00003BD4 6600                       		bne.s	locret_3C28	; if not, branch
00003BD6 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00003BDC 6400                       		bcc.s	LZMoveWater
00003BDE 6100 0000                  		bsr.w	LZWindTunnels
00003BE2 6100 0000                  		bsr.w	LZWaterSlides
00003BE6 6100 0000                  		bsr.w	LZDynamicWater
00003BEA                            
00003BEA                            LZMoveWater:
00003BEA 4238 F64E                  		clr.b	($FFFFF64E).w
00003BEE 7000                       		moveq	#0,d0
00003BF0 1038 FE60                  		move.b	($FFFFFE60).w,d0
00003BF4 E248                       		lsr.w	#1,d0
00003BF6 D078 F648                  		add.w	($FFFFF648).w,d0
00003BFA 31C0 F646                  		move.w	d0,($FFFFF646).w
00003BFE 3038 F646                  		move.w	($FFFFF646).w,d0
00003C02 9078 F704                  		sub.w	($FFFFF704).w,d0
00003C06 6400                       		bcc.s	loc_3C1A
00003C08 4A40                       		tst.w	d0
00003C0A 6A00                       		bpl.s	loc_3C1A
00003C0C 11FC 00DF F625             		move.b	#-$21,($FFFFF625).w
00003C12 11FC 0001 F64E             		move.b	#1,($FFFFF64E).w
00003C18                            
00003C18                            loc_3C1A:
00003C18 0C40 00DF                  		cmpi.w	#$DF,d0
00003C1C 6500                       		bcs.s	loc_3C24
00003C1E 303C 00DF                  		move.w	#$DF,d0
00003C22                            
00003C22                            loc_3C24:
00003C22 11C0 F625                  		move.b	d0,($FFFFF625).w
00003C26                            
00003C26                            locret_3C28:
00003C26 4E75                       		rts	
00003C28                            ; ===========================================================================
00003C28                            ; ---------------------------------------------------------------------------
00003C28                            ; Labyrinth default water heights
00003C28                            ; ---------------------------------------------------------------------------
00003C28                            WaterHeight:	incbin	misc\lz_heigh.bin
00003C30                            		even
00003C30                            ; ===========================================================================
00003C30                            
00003C30                            ; ---------------------------------------------------------------------------
00003C30                            ; Labyrinth dynamic water routines
00003C30                            ; ---------------------------------------------------------------------------
00003C30                            
00003C30                            LZDynamicWater:				; XREF: LZWaterEffects
00003C30 7000                       		moveq	#0,d0
00003C32 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003C36 D040                       		add.w	d0,d0
00003C38 303B 0000                  		move.w	DynWater_Index(pc,d0.w),d0
00003C3C 4EBB 0000                  		jsr	DynWater_Index(pc,d0.w)
00003C40 7200                       		moveq	#0,d1
00003C42 1238 F64C                  		move.b	($FFFFF64C).w,d1
00003C46 3038 F64A                  		move.w	($FFFFF64A).w,d0
00003C4A 9078 F648                  		sub.w	($FFFFF648).w,d0
00003C4E 6700                       		beq.s	locret_3C5A
00003C50 6400                       		bcc.s	loc_3C56
00003C52 4441                       		neg.w	d1
00003C54                            
00003C54                            loc_3C56:
00003C54 D378 F648                  		add.w	d1,($FFFFF648).w
00003C58                            
00003C58                            locret_3C5A:
00003C58 4E75                       		rts	
00003C5A                            ; ===========================================================================
00003C5A 0000                       DynWater_Index:	dc.w DynWater_LZ1-DynWater_Index
00003C5C 0000                       		dc.w DynWater_LZ2-DynWater_Index
00003C5E 0000                       		dc.w DynWater_LZ3-DynWater_Index
00003C60 0000                       		dc.w DynWater_SBZ3-DynWater_Index
00003C62                            ; ===========================================================================
00003C62                            
00003C62                            DynWater_LZ1:				; XREF: DynWater_Index
00003C62 3038 F700                  		move.w	($FFFFF700).w,d0
00003C66 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003C6A 6600                       		bne.s	loc_3CD0
00003C6C 323C 00B8                  		move.w	#$B8,d1
00003C70 0C40 0600                  		cmpi.w	#$600,d0
00003C74 6500                       		bcs.s	loc_3CB4
00003C76 323C 0108                  		move.w	#$108,d1
00003C7A 0C78 0200 D00C             		cmpi.w	#$200,($FFFFD00C).w
00003C80 6500                       		bcs.s	loc_3CBA
00003C82 0C40 0C00                  		cmpi.w	#$C00,d0
00003C86 6500                       		bcs.s	loc_3CB4
00003C88 323C 0318                  		move.w	#$318,d1
00003C8C 0C40 1080                  		cmpi.w	#$1080,d0
00003C90 6500                       		bcs.s	loc_3CB4
00003C92 11FC 0080 F7E5             		move.b	#-$80,($FFFFF7E5).w
00003C98 323C 05C8                  		move.w	#$5C8,d1
00003C9C 0C40 1380                  		cmpi.w	#$1380,d0
00003CA0 6500                       		bcs.s	loc_3CB4
00003CA2 323C 03A8                  		move.w	#$3A8,d1
00003CA6 B278 F648                  		cmp.w	($FFFFF648).w,d1
00003CAA 6600                       		bne.s	loc_3CB4
00003CAC 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003CB2                            
00003CB2                            loc_3CB4:
00003CB2 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CB6 4E75                       		rts	
00003CB8                            ; ===========================================================================
00003CB8                            
00003CB8                            loc_3CBA:				; XREF: DynWater_LZ1
00003CB8 0C40 0C80                  		cmpi.w	#$C80,d0
00003CBC 65F4                       		bcs.s	loc_3CB4
00003CBE 323C 00E8                  		move.w	#$E8,d1
00003CC2 0C40 1500                  		cmpi.w	#$1500,d0
00003CC6 65EA                       		bcs.s	loc_3CB4
00003CC8 323C 0108                  		move.w	#$108,d1
00003CCC 60E4                       		bra.s	loc_3CB4
00003CCE                            ; ===========================================================================
00003CCE                            
00003CCE                            loc_3CD0:				; XREF: DynWater_LZ1
00003CCE 5302                       		subq.b	#1,d2
00003CD0 6600                       		bne.s	locret_3CF4
00003CD2 0C78 02E0 D00C             		cmpi.w	#$2E0,($FFFFD00C).w
00003CD8 6400                       		bcc.s	locret_3CF4
00003CDA 323C 03A8                  		move.w	#$3A8,d1
00003CDE 0C40 1300                  		cmpi.w	#$1300,d0
00003CE2 6500                       		bcs.s	loc_3CF0
00003CE4 323C 0108                  		move.w	#$108,d1
00003CE8 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003CEE                            
00003CEE                            loc_3CF0:
00003CEE 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003CF2                            
00003CF2                            locret_3CF4:
00003CF2 4E75                       		rts	
00003CF4                            ; ===========================================================================
00003CF4                            
00003CF4                            DynWater_LZ2:				; XREF: DynWater_Index
00003CF4 3038 F700                  		move.w	($FFFFF700).w,d0
00003CF8 323C 0328                  		move.w	#$328,d1
00003CFC 0C40 0500                  		cmpi.w	#$500,d0
00003D00 6500                       		bcs.s	loc_3D12
00003D02 323C 03C8                  		move.w	#$3C8,d1
00003D06 0C40 0B00                  		cmpi.w	#$B00,d0
00003D0A 6500                       		bcs.s	loc_3D12
00003D0C 323C 0428                  		move.w	#$428,d1
00003D10                            
00003D10                            loc_3D12:
00003D10 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D14 4E75                       		rts	
00003D16                            ; ===========================================================================
00003D16                            
00003D16                            DynWater_LZ3:				; XREF: DynWater_Index
00003D16 3038 F700                  		move.w	($FFFFF700).w,d0
00003D1A 1438 F64D                  		move.b	($FFFFF64D).w,d2
00003D1E 6600                       		bne.s	loc_3D5E
00003D20 323C 0900                  		move.w	#$900,d1
00003D24 0C40 0600                  		cmpi.w	#$600,d0
00003D28 6500                       		bcs.s	loc_3D54
00003D2A 0C78 03C0 D00C             		cmpi.w	#$3C0,($FFFFD00C).w
00003D30 6500                       		bcs.s	loc_3D54
00003D32 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D38 6400                       		bcc.s	loc_3D54
00003D3A 323C 04C8                  		move.w	#$4C8,d1
00003D3E 11FC 004B A506             		move.b	#$4B,($FFFFA506).w ; change level layout
00003D44 11FC 0001 F64D             		move.b	#1,($FFFFF64D).w
00003D4A 303C 00B7                  		move.w	#$B7,d0
00003D4E 6100 D64C                  		bsr.w	PlaySound_Special ; play sound $B7 (rumbling)
00003D52                            
00003D52                            loc_3D54:
00003D52 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003D56 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D5A 4E75                       		rts	
00003D5C                            ; ===========================================================================
00003D5C                            
00003D5C                            loc_3D5E:				; XREF: DynWater_LZ3
00003D5C 5302                       		subq.b	#1,d2
00003D5E 6600                       		bne.s	loc_3DA8
00003D60 323C 04C8                  		move.w	#$4C8,d1
00003D64 0C40 0770                  		cmpi.w	#$770,d0
00003D68 6500                       		bcs.s	loc_3DA2
00003D6A 323C 0308                  		move.w	#$308,d1
00003D6E 0C40 1400                  		cmpi.w	#$1400,d0
00003D72 6500                       		bcs.s	loc_3DA2
00003D74 0C78 0508 F64A             		cmpi.w	#$508,($FFFFF64A).w
00003D7A 6700                       		beq.s	loc_3D8E
00003D7C 0C78 0600 D00C             		cmpi.w	#$600,($FFFFD00C).w
00003D82 6400                       		bcc.s	loc_3D8E
00003D84 0C78 0280 D00C             		cmpi.w	#$280,($FFFFD00C).w
00003D8A 6400                       		bcc.s	loc_3DA2
00003D8C                            
00003D8C                            loc_3D8E:
00003D8C 323C 0508                  		move.w	#$508,d1
00003D90 31C1 F648                  		move.w	d1,($FFFFF648).w
00003D94 0C40 1770                  		cmpi.w	#$1770,d0
00003D98 6500                       		bcs.s	loc_3DA2
00003D9A 11FC 0002 F64D             		move.b	#2,($FFFFF64D).w
00003DA0                            
00003DA0                            loc_3DA2:
00003DA0 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DA4 4E75                       		rts	
00003DA6                            ; ===========================================================================
00003DA6                            
00003DA6                            loc_3DA8:
00003DA6 5302                       		subq.b	#1,d2
00003DA8 6600                       		bne.s	loc_3DD2
00003DAA 323C 0508                  		move.w	#$508,d1
00003DAE 0C40 1860                  		cmpi.w	#$1860,d0
00003DB2 6500                       		bcs.s	loc_3DCC
00003DB4 323C 0188                  		move.w	#$188,d1
00003DB8 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DBC 6400                       		bcc.s	loc_3DC6
00003DBE B278 F648                  		cmp.w	($FFFFF648).w,d1
00003DC2 6600                       		bne.s	loc_3DCC
00003DC4                            
00003DC4                            loc_3DC6:
00003DC4 11FC 0003 F64D             		move.b	#3,($FFFFF64D).w
00003DCA                            
00003DCA                            loc_3DCC:
00003DCA 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003DCE 4E75                       		rts	
00003DD0                            ; ===========================================================================
00003DD0                            
00003DD0                            loc_3DD2:
00003DD0 5302                       		subq.b	#1,d2
00003DD2 6600                       		bne.s	loc_3E0E
00003DD4 323C 0188                  		move.w	#$188,d1
00003DD8 0C40 1AF0                  		cmpi.w	#$1AF0,d0
00003DDC 6500                       		bcs.s	loc_3E04
00003DDE 323C 0900                  		move.w	#$900,d1
00003DE2 0C40 1BC0                  		cmpi.w	#$1BC0,d0
00003DE6 6500                       		bcs.s	loc_3E04
00003DE8 11FC 0004 F64D             		move.b	#4,($FFFFF64D).w
00003DEE 31FC 0608 F64A             		move.w	#$608,($FFFFF64A).w
00003DF4 31FC 07C0 F648             		move.w	#$7C0,($FFFFF648).w
00003DFA 11FC 0001 F7E8             		move.b	#1,($FFFFF7E8).w
00003E00 4E75                       		rts	
00003E02                            ; ===========================================================================
00003E02                            
00003E02                            loc_3E04:
00003E02 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E06 31C1 F648                  		move.w	d1,($FFFFF648).w
00003E0A 4E75                       		rts	
00003E0C                            ; ===========================================================================
00003E0C                            
00003E0C                            loc_3E0E:
00003E0C 0C40 1E00                  		cmpi.w	#$1E00,d0
00003E10 6500                       		bcs.s	locret_3E1A
00003E12 31FC 0128 F64A             		move.w	#$128,($FFFFF64A).w
00003E18                            
00003E18                            locret_3E1A:
00003E18 4E75                       		rts	
00003E1A                            ; ===========================================================================
00003E1A                            
00003E1A                            DynWater_SBZ3:				; XREF: DynWater_Index
00003E1A 323C 0228                  		move.w	#$228,d1
00003E1E 0C78 0F00 F700             		cmpi.w	#$F00,($FFFFF700).w
00003E24 6500                       		bcs.s	loc_3E2C
00003E26 323C 04C8                  		move.w	#$4C8,d1
00003E2A                            
00003E2A                            loc_3E2C:
00003E2A 31C1 F64A                  		move.w	d1,($FFFFF64A).w
00003E2E 4E75                       		rts
00003E30                            
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            ; Labyrinth Zone "wind tunnels"	subroutine
00003E30                            ; ---------------------------------------------------------------------------
00003E30                            
00003E30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003E30                            
00003E30                            
00003E30                            LZWindTunnels:				; XREF: LZWaterEffects
00003E30 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00003E34 6600 0000                  		bne.w	locret_3F0A	; if yes, branch
00003E38 45F9 0000 0000             		lea	(LZWind_Data).l,a2
00003E3E 7000                       		moveq	#0,d0
00003E40 1038 FE11                  		move.b	($FFFFFE11).w,d0
00003E44 E748                       		lsl.w	#3,d0
00003E46 D4C0                       		adda.w	d0,a2
00003E48 7200                       		moveq	#0,d1
00003E4A 4A38 FE11                  		tst.b	($FFFFFE11).w
00003E4E 6600                       		bne.s	loc_3E56
00003E50 7201                       		moveq	#1,d1
00003E52 514A                       		subq.w	#8,a2
00003E54                            
00003E54                            loc_3E56:
00003E54 43F8 D000                  		lea	($FFFFD000).w,a1
00003E58                            
00003E58                            LZWind_Loop:
00003E58 3029 0008                  		move.w	8(a1),d0
00003E5C B052                       		cmp.w	(a2),d0
00003E5E 6500 0000                  		bcs.w	loc_3EF4
00003E62 B06A 0004                  		cmp.w	4(a2),d0
00003E66 6400 0000                  		bcc.w	loc_3EF4
00003E6A 3429 000C                  		move.w	$C(a1),d2
00003E6E B46A 0002                  		cmp.w	2(a2),d2
00003E72 6500                       		bcs.s	loc_3EF4
00003E74 B46A 0006                  		cmp.w	6(a2),d2
00003E78 6400                       		bcc.s	loc_3EF4
00003E7A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003E7E 0200 003F                  		andi.b	#$3F,d0
00003E82 6600                       		bne.s	loc_3E90
00003E84 303C 00D0                  		move.w	#$D0,d0
00003E88 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rushing water sound
00003E8E                            
00003E8E                            loc_3E90:
00003E8E 4A38 F7C9                  		tst.b	($FFFFF7C9).w
00003E92 6600 0000                  		bne.w	locret_3F0A
00003E96 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00003E9C 6400                       		bcc.s	loc_3F06
00003E9E 11FC 0001 F7C7             		move.b	#1,($FFFFF7C7).w
00003EA4 0440 0080                  		subi.w	#$80,d0
00003EA8 B052                       		cmp.w	(a2),d0
00003EAA 6400                       		bcc.s	LZWind_Move
00003EAC 7002                       		moveq	#2,d0
00003EAE 0C38 0001 FE11             		cmpi.b	#1,($FFFFFE11).w
00003EB4 6600                       		bne.s	loc_3EBA
00003EB6 4440                       		neg.w	d0
00003EB8                            
00003EB8                            loc_3EBA:
00003EB8 D169 000C                  		add.w	d0,$C(a1)
00003EBC                            
00003EBC                            LZWind_Move:
00003EBC 5869 0008                  		addq.w	#4,8(a1)
00003EC0 337C 0400 0010             		move.w	#$400,$10(a1)	; move Sonic horizontally
00003EC6 337C 0000 0012             		move.w	#0,$12(a1)
00003ECC 137C 000F 001C             		move.b	#$F,$1C(a1)	; use floating animation
00003ED2 08E9 0001 0022             		bset	#1,$22(a1)
00003ED8 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up pressed?
00003EDE 6700                       		beq.s	LZWind_MoveDown	; if not, branch
00003EE0 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
00003EE4                            
00003EE4                            LZWind_MoveDown:
00003EE4 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00003EEA 6700                       		beq.s	locret_3EF2	; if not, branch
00003EEC 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00003EF0                            
00003EF0                            locret_3EF2:
00003EF0 4E75                       		rts	
00003EF2                            ; ===========================================================================
00003EF2                            
00003EF2                            loc_3EF4:				; XREF: LZWindTunnels
00003EF2 504A                       		addq.w	#8,a2
00003EF4 51C9 FF62                  		dbf	d1,LZWind_Loop
00003EF8 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00003EFC 6700                       		beq.s	locret_3F0A
00003EFE 137C 0000 001C             		move.b	#0,$1C(a1)
00003F04                            
00003F04                            loc_3F06:
00003F04 4238 F7C7                  		clr.b	($FFFFF7C7).w
00003F08                            
00003F08                            locret_3F0A:
00003F08 4E75                       		rts	
00003F0A                            ; End of function LZWindTunnels
00003F0A                            
00003F0A                            ; ===========================================================================
00003F0A 0A80 0300 0C10 0380        		dc.w $A80, $300, $C10, $380
00003F12 0F80 0100 1410 0180 0460+  LZWind_Data:	dc.w $F80, $100, $1410,	$180, $460, $400, $710,	$480, $A20
00003F24 0600 1610 06E0 0C80 0600+  		dc.w $600, $1610, $6E0,	$C80, $600, $13D0, $680
00003F32                            					; XREF: LZWindTunnels
00003F32                            		even
00003F32                            
00003F32                            ; ---------------------------------------------------------------------------
00003F32                            ; Labyrinth Zone water slide subroutine
00003F32                            ; ---------------------------------------------------------------------------
00003F32                            
00003F32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003F32                            
00003F32                            
00003F32                            LZWaterSlides:				; XREF: LZWaterEffects
00003F32 43F8 D000                  		lea	($FFFFD000).w,a1
00003F36 0829 0001 0022             		btst	#1,$22(a1)
00003F3C 6600                       		bne.s	loc_3F6A
00003F3E 3029 000C                  		move.w	$C(a1),d0
00003F42 E248                       		lsr.w	#1,d0
00003F44 0240 0380                  		andi.w	#$380,d0
00003F48 1229 0008                  		move.b	8(a1),d1
00003F4C 0241 007F                  		andi.w	#$7F,d1
00003F50 D041                       		add.w	d1,d0
00003F52 45F8 A400                  		lea	($FFFFA400).w,a2
00003F56 1032 0000                  		move.b	(a2,d0.w),d0
00003F5A 45FA 0000                  		lea	byte_3FCF(pc),a2
00003F5E 7206                       		moveq	#6,d1
00003F60                            
00003F60                            loc_3F62:
00003F60 B022                       		cmp.b	-(a2),d0
00003F62 57C9 FFFC                  		dbeq	d1,loc_3F62
00003F66 6700                       		beq.s	LZSlide_Move
00003F68                            
00003F68                            loc_3F6A:
00003F68 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00003F6C 6700                       		beq.s	locret_3F7A
00003F6E 337C 0005 003E             		move.w	#5,$3E(a1)
00003F74 4238 F7CA                  		clr.b	($FFFFF7CA).w
00003F78                            
00003F78                            locret_3F7A:
00003F78 4E75                       		rts	
00003F7A                            ; ===========================================================================
00003F7A                            
00003F7A                            LZSlide_Move:				; XREF: LZWaterSlides
00003F7A 0C41 0003                  		cmpi.w	#3,d1
00003F7E 6400                       		bcc.s	loc_3F84
00003F80 4E71                       		nop	
00003F82                            
00003F82                            loc_3F84:
00003F82 08A9 0000 0022             		bclr	#0,$22(a1)
00003F88 103B 1000                  		move.b	byte_3FC0(pc,d1.w),d0
00003F8C 1340 0014                  		move.b	d0,$14(a1)
00003F90 6A00                       		bpl.s	loc_3F9A
00003F92 08E9 0000 0022             		bset	#0,$22(a1)
00003F98                            
00003F98                            loc_3F9A:
00003F98 4229 0015                  		clr.b	$15(a1)
00003F9C 137C 001B 001C             		move.b	#$1B,$1C(a1)	; use Sonic's "sliding" animation
00003FA2 11FC 0001 F7CA             		move.b	#1,($FFFFF7CA).w ; lock	controls (except jumping)
00003FA8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00003FAC 0200 001F                  		andi.b	#$1F,d0
00003FB0 6600                       		bne.s	locret_3FBE
00003FB2 303C 00D0                  		move.w	#$D0,d0
00003FB6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play water sound
00003FBC                            
00003FBC                            locret_3FBE:
00003FBC 4E75                       		rts	
00003FBE                            ; End of function LZWaterSlides
00003FBE                            
00003FBE                            ; ===========================================================================
00003FBE 0AF5 0AF6 F5F4 0B00 0207+  byte_3FC0:	dc.b $A, $F5, $A, $F6, $F5, $F4, $B, 0,	2, 7, 3, $4C, $4B, 8, 4
00003FCD 00                         byte_3FCF:	dc.b 0			; XREF: LZWaterSlides
00003FCE                            		even
00003FCE                            
00003FCE                            ; ---------------------------------------------------------------------------
00003FCE                            ; Subroutine to	move Sonic in demo mode
00003FCE                            ; ---------------------------------------------------------------------------
00003FCE                            
00003FCE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00003FCE                            
00003FCE                            
00003FCE                            MoveSonicInDemo:			; XREF: Level_MainLoop; et al
00003FCE 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00003FD2 6600                       		bne.s	MoveDemo_On	; if yes, branch
00003FD4 4E75                       		rts	
00003FD6                            ; ===========================================================================
00003FD6                            
00003FD6                            ; This is an unused subroutine for recording a demo
00003FD6                            
00003FD6                            MoveDemo_Record:
00003FD6 43F9 0008 0000             		lea	($80000).l,a1
00003FDC 3038 F790                  		move.w	($FFFFF790).w,d0
00003FE0 D2C0                       		adda.w	d0,a1
00003FE2 1038 F604                  		move.b	($FFFFF604).w,d0
00003FE6 B011                       		cmp.b	(a1),d0
00003FE8 6600                       		bne.s	loc_3FFA
00003FEA 5229 0001                  		addq.b	#1,1(a1)
00003FEE 0C29 00FF 0001             		cmpi.b	#$FF,1(a1)
00003FF4 6700                       		beq.s	loc_3FFA
00003FF6 4E75                       		rts	
00003FF8                            ; ===========================================================================
00003FF8                            
00003FF8                            loc_3FFA:				; XREF: MoveDemo_Record
00003FF8 1340 0002                  		move.b	d0,2(a1)
00003FFC 137C 0000 0003             		move.b	#0,3(a1)
00004002 5478 F790                  		addq.w	#2,($FFFFF790).w
00004006 0278 03FF F790             		andi.w	#$3FF,($FFFFF790).w
0000400C 4E75                       		rts	
0000400E                            ; ===========================================================================
0000400E                            
0000400E                            MoveDemo_On:				; XREF: MoveSonicInDemo
0000400E 4A38 F604                  		tst.b	($FFFFF604).w
00004012 6A00                       		bpl.s	loc_4022
00004014 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004018 6B00                       		bmi.s	loc_4022
0000401A 11FC 0004 F600             		move.b	#4,($FFFFF600).w
00004020                            
00004020                            loc_4022:
00004020 43F9 0000 0000             		lea	(Demo_Index).l,a1
00004026 7000                       		moveq	#0,d0
00004028 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000402C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
00004032 6600                       		bne.s	loc_4038
00004034 7006                       		moveq	#6,d0
00004036                            
00004036                            loc_4038:
00004036 E548                       		lsl.w	#2,d0
00004038 2271 0000                  		movea.l	(a1,d0.w),a1
0000403C 4A78 FFF0                  		tst.w	($FFFFFFF0).w
00004040 6A00                       		bpl.s	loc_4056
00004042 43F9 0000 0000             		lea	(Demo_EndIndex).l,a1
00004048 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
0000404C 5340                       		subq.w	#1,d0
0000404E E548                       		lsl.w	#2,d0
00004050 2271 0000                  		movea.l	(a1,d0.w),a1
00004054                            
00004054                            loc_4056:
00004054 3038 F790                  		move.w	($FFFFF790).w,d0
00004058 D2C0                       		adda.w	d0,a1
0000405A 1011                       		move.b	(a1),d0
0000405C 41F8 F604                  		lea	($FFFFF604).w,a0
00004060 1200                       		move.b	d0,d1
00004062 1410                       		move.b	(a0),d2
00004064 B500                       		eor.b	d2,d0
00004066 10C1                       		move.b	d1,(a0)+
00004068 C001                       		and.b	d1,d0
0000406A 10C0                       		move.b	d0,(a0)+
0000406C 5338 F792                  		subq.b	#1,($FFFFF792).w
00004070 6400                       		bcc.s	locret_407E
00004072 11E9 0003 F792             		move.b	3(a1),($FFFFF792).w
00004078 5478 F790                  		addq.w	#2,($FFFFF790).w
0000407C                            
0000407C                            locret_407E:
0000407C 4E75                       		rts	
0000407E                            ; End of function MoveSonicInDemo
0000407E                            
0000407E                            ; ===========================================================================
0000407E                            ; ---------------------------------------------------------------------------
0000407E                            ; Demo sequence	pointers
0000407E                            ; ---------------------------------------------------------------------------
0000407E                            Demo_Index:
0000407E                            	include "_inc\Demo pointers for intro.asm"
0000407E                            ; ---------------------------------------------------------------------------
0000407E                            ; Demo sequence	pointers
0000407E                            ; ---------------------------------------------------------------------------
0000407E 0000 0000                  	dc.l Demo_GHZ
00004082 0000 0000                  	dc.l Demo_GHZ
00004086 0000 0000                  	dc.l Demo_MZ
0000408A 0000 0000                  	dc.l Demo_MZ
0000408E 0000 0000                  	dc.l Demo_SYZ
00004092 0000 0000                  	dc.l Demo_SYZ
00004096 0000 0000                  	dc.l Demo_SS
0000409A 0000 0000                  	dc.l Demo_SS
0000409A 0000 0000                  	dc.l Demo_SS
0000409E                            
0000409E                            Demo_EndIndex:
0000409E                            	include "_inc\Demo pointers for ending.asm"
0000409E                            ; ---------------------------------------------------------------------------
0000409E                            ; Demo (ending) sequence pointers
0000409E                            ; ---------------------------------------------------------------------------
0000409E 0000 0000                  	dc.l Demo_EndGHZ1
000040A2 0000 0000                  	dc.l Demo_EndMZ
000040A6 0000 0000                  	dc.l Demo_EndSYZ
000040AA 0000 0000                  	dc.l Demo_EndLZ
000040AE 0000 0000                  	dc.l Demo_EndSLZ
000040B2 0000 0000                  	dc.l Demo_EndSBZ1
000040B6 0000 0000                  	dc.l Demo_EndSBZ2
000040BA 0000 0000                  	dc.l Demo_EndGHZ2
000040BA 0000 0000                  	dc.l Demo_EndGHZ2
000040BE                            
000040BE 008B 0837 0042 085C 006A+  		dc.b 0,	$8B, 8,	$37, 0,	$42, 8,	$5C, 0,	$6A, 8,	$5F, 0,	$2F, 8,	$2C
000040CE 0021 0803 2830 0808 002E+  		dc.b 0,	$21, 8,	3, $28,	$30, 8,	8, 0, $2E, 8, $15, 0, $F, 8, $46
000040DE 001A 08FF 08CA 0000 0000+  		dc.b 0,	$1A, 8,	$FF, 8,	$CA, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0
000040EE                            		even
000040EE                            
000040EE                            ; ---------------------------------------------------------------------------
000040EE                            ; Collision index loading subroutine
000040EE                            ; ---------------------------------------------------------------------------
000040EE                            
000040EE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000040EE                            
000040EE                            
000040EE                            ColIndexLoad:				; XREF: Level
000040EE 7000                       		moveq	#0,d0
000040F0 1038 FE10                  		move.b	($FFFFFE10).w,d0
000040F4 E548                       		lsl.w	#2,d0
000040F6 21FB 0000 F796             		move.l	ColPointers(pc,d0.w),($FFFFF796).w
000040FC 4E75                       		rts	
000040FE                            ; End of function ColIndexLoad
000040FE                            
000040FE                            ; ===========================================================================
000040FE                            ; ---------------------------------------------------------------------------
000040FE                            ; Collision index pointers
000040FE                            ; ---------------------------------------------------------------------------
000040FE                            ColPointers:
000040FE                            	include "_inc\Collision index pointers.asm"
000040FE                            ; ---------------------------------------------------------------------------
000040FE                            ; Collision index pointers
000040FE                            ; ---------------------------------------------------------------------------
000040FE 0000 0000                  	dc.l Col_GHZ
00004102 0000 0000                  	dc.l Col_LZ
00004106 0000 0000                  	dc.l Col_MZ
0000410A 0000 0000                  	dc.l Col_SLZ
0000410E 0000 0000                  	dc.l Col_SYZ
00004112 0000 0000                  	dc.l Col_SBZ
00004112 0000 0000                  	dc.l Col_SBZ
00004116                            
00004116                            ; ---------------------------------------------------------------------------
00004116                            ; Oscillating number subroutine
00004116                            ; ---------------------------------------------------------------------------
00004116                            
00004116                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004116                            
00004116                            
00004116                            OscillateNumInit:			; XREF: Level
00004116 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
0000411A 45F9 0000 0000             		lea	(Osc_Data).l,a2
00004120 7220                       		moveq	#$20,d1
00004122                            
00004122                            Osc_Loop:
00004122 32DA                       		move.w	(a2)+,(a1)+
00004124 51C9 FFFC                  		dbf	d1,Osc_Loop
00004128 4E75                       		rts	
0000412A                            ; End of function OscillateNumInit
0000412A                            
0000412A                            ; ===========================================================================
0000412A 007C 0080                  Osc_Data:	dc.w $7C, $80		; baseline values
0000412E 0000 0080                  		dc.w 0,	$80
00004132 0000 0080                  		dc.w 0,	$80
00004136 0000 0080                  		dc.w 0,	$80
0000413A 0000 0080                  		dc.w 0,	$80
0000413E 0000 0080                  		dc.w 0,	$80
00004142 0000 0080                  		dc.w 0,	$80
00004146 0000 0080                  		dc.w 0,	$80
0000414A 0000 0080                  		dc.w 0,	$80
0000414E 0000 50F0                  		dc.w 0,	$50F0
00004152 011E 2080                  		dc.w $11E, $2080
00004156 00B4 3080                  		dc.w $B4, $3080
0000415A 010E 5080                  		dc.w $10E, $5080
0000415E 01C2 7080                  		dc.w $1C2, $7080
00004162 0276 0080                  		dc.w $276, $80
00004166 0000 0080                  		dc.w 0,	$80
0000416A 0000                       		dc.w 0
0000416C                            		even
0000416C                            
0000416C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000416C                            
0000416C                            
0000416C                            OscillateNumDo:				; XREF: Level
0000416C 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004172 6400                       		bcc.s	locret_41C4
00004174 43F8 FE5E                  		lea	($FFFFFE5E).w,a1
00004178 45F9 0000 0000             		lea	(Osc_Data2).l,a2
0000417E 3619                       		move.w	(a1)+,d3
00004180 720F                       		moveq	#$F,d1
00004182                            
00004182                            loc_4184:
00004182 341A                       		move.w	(a2)+,d2
00004184 381A                       		move.w	(a2)+,d4
00004186 0303                       		btst	d1,d3
00004188 6600                       		bne.s	loc_41A4
0000418A 3029 0002                  		move.w	2(a1),d0
0000418E D042                       		add.w	d2,d0
00004190 3340 0002                  		move.w	d0,2(a1)
00004194 D151                       		add.w	d0,0(a1)
00004196 B811                       		cmp.b	0(a1),d4
00004198 6200                       		bhi.s	loc_41BA
0000419A 03C3                       		bset	d1,d3
0000419C 6000                       		bra.s	loc_41BA
0000419E                            ; ===========================================================================
0000419E                            
0000419E                            loc_41A4:				; XREF: OscillateNumDo
0000419E 3029 0002                  		move.w	2(a1),d0
000041A2 9042                       		sub.w	d2,d0
000041A4 3340 0002                  		move.w	d0,2(a1)
000041A8 D151                       		add.w	d0,0(a1)
000041AA B811                       		cmp.b	0(a1),d4
000041AC 6300                       		bls.s	loc_41BA
000041AE 0383                       		bclr	d1,d3
000041B0                            
000041B0                            loc_41BA:
000041B0 5849                       		addq.w	#4,a1
000041B2 51C9 FFCE                  		dbf	d1,loc_4184
000041B6 31C3 FE5E                  		move.w	d3,($FFFFFE5E).w
000041BA                            
000041BA                            locret_41C4:
000041BA 4E75                       		rts	
000041BC                            ; End of function OscillateNumDo
000041BC                            
000041BC                            ; ===========================================================================
000041BC 0002 0010                  Osc_Data2:	dc.w 2,	$10		; XREF: OscillateNumDo
000041C0 0002 0018                  		dc.w 2,	$18
000041C4 0002 0020                  		dc.w 2,	$20
000041C8 0002 0030                  		dc.w 2,	$30
000041CC 0004 0020                  		dc.w 4,	$20
000041D0 0008 0008                  		dc.w 8,	8
000041D4 0008 0040                  		dc.w 8,	$40
000041D8 0004 0040                  		dc.w 4,	$40
000041DC 0002 0050                  		dc.w 2,	$50
000041E0 0002 0050                  		dc.w 2,	$50
000041E4 0002 0020                  		dc.w 2,	$20
000041E8 0003 0030                  		dc.w 3,	$30
000041EC 0005 0050                  		dc.w 5,	$50
000041F0 0007 0070                  		dc.w 7,	$70
000041F4 0002 0010                  		dc.w 2,	$10
000041F8 0002 0010                  		dc.w 2,	$10
000041FC                            		even
000041FC                            
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            ; Subroutine to	change object animation	variables (rings, giant	rings)
000041FC                            ; ---------------------------------------------------------------------------
000041FC                            
000041FC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000041FC                            
000041FC                            
000041FC                            ChangeRingFrame:			; XREF: Level
000041FC 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
00004200 6A00                       		bpl.s	loc_421C
00004202 11FC 000B FEC0             		move.b	#$B,($FFFFFEC0).w
00004208 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0000420C 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
00004212                            
00004212                            loc_421C:
00004212 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
00004216 6A00                       		bpl.s	loc_4232
00004218 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0000421E 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
00004222 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
00004228                            
00004228                            loc_4232:
00004228 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0000422C 6A00                       		bpl.s	loc_4250
0000422E 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
00004234 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
00004238 0C38 0006 FEC5             		cmpi.b	#6,($FFFFFEC5).w
0000423E 6500                       		bcs.s	loc_4250
00004240 11FC 0000 FEC5             		move.b	#0,($FFFFFEC5).w
00004246                            
00004246                            loc_4250:
00004246 4A38 FEC6                  		tst.b	($FFFFFEC6).w
0000424A 6700                       		beq.s	locret_4272
0000424C 7000                       		moveq	#0,d0
0000424E 1038 FEC6                  		move.b	($FFFFFEC6).w,d0
00004252 D078 FEC8                  		add.w	($FFFFFEC8).w,d0
00004256 31C0 FEC8                  		move.w	d0,($FFFFFEC8).w
0000425A EF58                       		rol.w	#7,d0
0000425C 0240 0003                  		andi.w	#3,d0
00004260 11C0 FEC7                  		move.b	d0,($FFFFFEC7).w
00004264 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
00004268                            
00004268                            locret_4272:
00004268 4E75                       		rts	
0000426A                            ; End of function ChangeRingFrame
0000426A                            
0000426A                            ; ---------------------------------------------------------------------------
0000426A                            ; End-of-act signpost pattern loading subroutine
0000426A                            ; ---------------------------------------------------------------------------
0000426A                            
0000426A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000426A                            
0000426A                            
0000426A                            SignpostArtLoad:			; XREF: Level
0000426A 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0000426E 6600 0000                  		bne.w	Signpost_Exit	; if yes, branch
00004272 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; is act number 02 (act 3)?
00004278 6700                       		beq.s	Signpost_Exit	; if yes, branch
0000427A 3038 F700                  		move.w	($FFFFF700).w,d0
0000427E 3238 F72A                  		move.w	($FFFFF72A).w,d1
00004282 0441 0100                  		subi.w	#$100,d1
00004286 B041                       		cmp.w	d1,d0		; has Sonic reached the	edge of	the level?
00004288 6D00                       		blt.s	Signpost_Exit	; if not, branch
0000428A 4A38 FE1E                  		tst.b	($FFFFFE1E).w
0000428E 6700                       		beq.s	Signpost_Exit
00004290 B278 F728                  		cmp.w	($FFFFF728).w,d1
00004294 6700                       		beq.s	Signpost_Exit
00004296 31C1 F728                  		move.w	d1,($FFFFF728).w ; move	left boundary to current screen	position
0000429A 7012                       		moveq	#$12,d0
0000429C 6000 D314                  		bra.w	LoadPLC2	; load signpost	patterns
000042A0                            ; ===========================================================================
000042A0                            
000042A0                            Signpost_Exit:
000042A0 4E75                       		rts	
000042A2                            ; End of function SignpostArtLoad
000042A2                            
000042A2                            ; ===========================================================================
000042A2                            Demo_GHZ:	incbin	demodata\i_ghz.bin
00004322                            Demo_MZ:	incbin	demodata\i_mz.bin
00004452                            Demo_SYZ:	incbin	demodata\i_syz.bin
000044D2                            Demo_SS:	incbin	demodata\i_ss.bin
000045D2                            ; ===========================================================================
000045D2                            
000045D2                            ; ---------------------------------------------------------------------------
000045D2                            ; Special Stage
000045D2                            ; ---------------------------------------------------------------------------
000045D2                            
000045D2                            SpecialStage:				; XREF: GameModeArray
000045D2 303C 00CA                  		move.w	#$CA,d0
000045D6 6100 CDC4                  		bsr.w	PlaySound_Special ; play special stage entry sound
000045DA 6100 D9A0                  		bsr.w	Pal_MakeFlash
000045DE 46FC 2700                  		move	#$2700,sr
000045E2 4DF9 00C0 0004             		lea	($C00004).l,a6
000045E8 3CBC 8B03                  		move.w	#$8B03,(a6)
000045EC 3CBC 8004                  		move.w	#$8004,(a6)
000045F0 31FC 8AAF F624             		move.w	#$8AAF,($FFFFF624).w
000045F6 3CBC 9011                  		move.w	#$9011,(a6)
000045FA 3038 F60C                  		move.w	($FFFFF60C).w,d0
000045FE 0200 00BF                  		andi.b	#$BF,d0
00004602 33C0 00C0 0004             		move.w	d0,($C00004).l
00004608 6100 CCBA                  		bsr.w	ClearScreen
0000460C 46FC 2300                  		move	#$2300,sr
00004610 4BF9 00C0 0004             		lea	($C00004).l,a5
00004616 3ABC 8F01                  		move.w	#$8F01,(a5)
0000461A 2ABC 946F 93FF             		move.l	#$946F93FF,(a5)
00004620 3ABC 9780                  		move.w	#$9780,(a5)
00004624 2ABC 5000 0081             		move.l	#$50000081,(a5)
0000462A 33FC 0000 00C0 0000        		move.w	#0,($C00000).l
00004632                            
00004632                            loc_463C:
00004632 3215                       		move.w	(a5),d1
00004634 0801 0001                  		btst	#1,d1
00004638 66F8                       		bne.s	loc_463C
0000463A 3ABC 8F02                  		move.w	#$8F02,(a5)
0000463E 6100 0000                  		bsr.w	SS_BGLoad
00004642 7014                       		moveq	#$14,d0
00004644 6100 D0A6                  		bsr.w	RunPLC_ROM	; load special stage patterns
00004648 43F8 D000                  		lea	($FFFFD000).w,a1
0000464C 7000                       		moveq	#0,d0
0000464E 323C 07FF                  		move.w	#$7FF,d1
00004652                            
00004652                            SS_ClrObjRam:
00004652 22C0                       		move.l	d0,(a1)+
00004654 51C9 FFFC                  		dbf	d1,SS_ClrObjRam	; clear	the object RAM
00004658                            
00004658 43F8 F700                  		lea	($FFFFF700).w,a1
0000465C 7000                       		moveq	#0,d0
0000465E 323C 003F                  		move.w	#$3F,d1
00004662                            
00004662                            SS_ClrRam:
00004662 22C0                       		move.l	d0,(a1)+
00004664 51C9 FFFC                  		dbf	d1,SS_ClrRam	; clear	variables
00004668                            
00004668 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000466C 7000                       		moveq	#0,d0
0000466E 323C 0027                  		move.w	#$27,d1
00004672                            
00004672                            SS_ClrRam2:
00004672 22C0                       		move.l	d0,(a1)+
00004674 51C9 FFFC                  		dbf	d1,SS_ClrRam2	; clear	variables
00004678                            
00004678 43F8 AA00                  		lea	($FFFFAA00).w,a1
0000467C 7000                       		moveq	#0,d0
0000467E 323C 007F                  		move.w	#$7F,d1
00004682                            
00004682                            SS_ClrNemRam:
00004682 22C0                       		move.l	d0,(a1)+
00004684 51C9 FFFC                  		dbf	d1,SS_ClrNemRam	; clear	Nemesis	buffer
00004688                            
00004688 4238 F64E                  		clr.b	($FFFFF64E).w
0000468C 4278 FE02                  		clr.w	($FFFFFE02).w
00004690 700A                       		moveq	#$A,d0
00004692 6100 DA68                  		bsr.w	PalLoad1	; load special stage pallet
00004696 4EB9 0000 0000             		jsr	SS_Load
0000469C 21FC 0000 0000 F700        		move.l	#0,($FFFFF700).w
000046A4 21FC 0000 0000 F704        		move.l	#0,($FFFFF704).w
000046AC 11FC 0009 D000             		move.b	#9,($FFFFD000).w ; load	special	stage Sonic object
000046B2 6100 0000                  		bsr.w	PalCycle_SS
000046B6 4278 F780                  		clr.w	($FFFFF780).w	; set stage angle to "upright"
000046BA 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set stage rotation	speed
000046C0 303C 0089                  		move.w	#$89,d0
000046C4 6100 CCD0                  		bsr.w	PlaySound	; play special stage BG	music
000046C8 31FC 0000 F790             		move.w	#0,($FFFFF790).w
000046CE 43F9 0000 407E             		lea	(Demo_Index).l,a1
000046D4 7006                       		moveq	#6,d0
000046D6 E548                       		lsl.w	#2,d0
000046D8 2271 0000                  		movea.l	(a1,d0.w),a1
000046DC 11E9 0001 F792             		move.b	1(a1),($FFFFF792).w
000046E2 5338 F792                  		subq.b	#1,($FFFFF792).w
000046E6 4278 FE20                  		clr.w	($FFFFFE20).w
000046EA 4238 FE1B                  		clr.b	($FFFFFE1B).w
000046EE 31FC 0000 FE08             		move.w	#0,($FFFFFE08).w
000046F4 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
000046FA 4A38 FFE2                  		tst.b	($FFFFFFE2).w	; has debug cheat been entered?
000046FE 6700                       		beq.s	SS_NoDebug	; if not, branch
00004700 0838 0006 F604             		btst	#6,($FFFFF604).w ; is A	button pressed?
00004706 6700                       		beq.s	SS_NoDebug	; if not, branch
00004708 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
0000470E                            
0000470E                            SS_NoDebug:
0000470E 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004712 0000 0040                  		ori.b	#$40,d0
00004716 33C0 00C0 0004             		move.w	d0,($C00004).l
0000471C 6100 D7B2                  		bsr.w	Pal_MakeWhite
00004720                            
00004720                            ; ---------------------------------------------------------------------------
00004720                            ; Main Special Stage loop
00004720                            ; ---------------------------------------------------------------------------
00004720                            
00004720                            SS_MainLoop:
00004720 6100 CC86                  		bsr.w	PauseGame
00004724 11FC 000A F62A             		move.b	#$A,($FFFFF62A).w
0000472A 6100 E27C                  		bsr.w	DelayProgram
0000472E 6100 F89E                  		bsr.w	MoveSonicInDemo
00004732 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
00004738 4EB9 0000 0000             		jsr	ObjectsLoad
0000473E 4EB9 0000 0000             		jsr	BuildSprites
00004744 4EB9 0000 0000             		jsr	SS_ShowLayout
0000474A 6100 0000                  		bsr.w	SS_BGAnimate
0000474E 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
00004752 6700                       		beq.s	SS_ChkEnd	; if not, branch
00004754 4A78 F614                  		tst.w	($FFFFF614).w	; is there time	left on	the demo?
00004758 6700 0000                  		beq.w	SS_ToSegaScreen	; if not, branch
0000475C                            
0000475C                            SS_ChkEnd:
0000475C 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode $10 (special stage)?
00004762 6700 FFBC                  		beq.w	SS_MainLoop	; if yes, branch
00004766                            
00004766 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
0000476A 6600 0000                  		bne.w	SS_ToSegaScreen	; if yes, branch
0000476E 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004774 0C78 0503 FE10             		cmpi.w	#$503,($FFFFFE10).w ; is level number higher than FZ?
0000477A 6500                       		bcs.s	SS_End		; if not, branch
0000477C 4278 FE10                  		clr.w	($FFFFFE10).w	; set to GHZ1
00004780                            
00004780                            SS_End:
00004780 31FC 003C F614             		move.w	#60,($FFFFF614).w ; set	delay time to 1	second
00004786 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
0000478C 4278 F794                  		clr.w	($FFFFF794).w
00004790                            
00004790                            SS_EndLoop:
00004790 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004796 6100 E210                  		bsr.w	DelayProgram
0000479A 6100 F832                  		bsr.w	MoveSonicInDemo
0000479E 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w
000047A4 4EB9 0000 0000             		jsr	ObjectsLoad
000047AA 4EB9 0000 0000             		jsr	BuildSprites
000047B0 4EB9 0000 0000             		jsr	SS_ShowLayout
000047B6 6100 0000                  		bsr.w	SS_BGAnimate
000047BA 5378 F794                  		subq.w	#1,($FFFFF794).w
000047BE 6A00                       		bpl.s	loc_47D4
000047C0 31FC 0002 F794             		move.w	#2,($FFFFF794).w
000047C6 6100 D7D4                  		bsr.w	Pal_ToWhite
000047CA                            
000047CA                            loc_47D4:
000047CA 4A78 F614                  		tst.w	($FFFFF614).w
000047CE 66C0                       		bne.s	SS_EndLoop
000047D0                            
000047D0 46FC 2700                  		move	#$2700,sr
000047D4 4DF9 00C0 0004             		lea	($C00004).l,a6
000047DA 3CBC 8230                  		move.w	#$8230,(a6)
000047DE 3CBC 8407                  		move.w	#$8407,(a6)
000047E2 3CBC 9001                  		move.w	#$9001,(a6)
000047E6 6100 CADC                  		bsr.w	ClearScreen
000047EA 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
000047F4 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
000047FA 6100 CC44                  		bsr.w	NemDec
000047FE 4EB9 0000 0000             		jsr	Hud_Base
00004804 46FC 2300                  		move	#$2300,sr
00004808 7011                       		moveq	#$11,d0
0000480A 6100 D90C                  		bsr.w	PalLoad2	; load results screen pallet
0000480E 7000                       		moveq	#0,d0
00004810 6100 CDA0                  		bsr.w	LoadPLC2
00004814 701B                       		moveq	#$1B,d0
00004816 6100 CD68                  		bsr.w	LoadPLC		; load results screen patterns
0000481A 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; update score	counter
00004820 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; update ring bonus counter
00004826 3038 FE20                  		move.w	($FFFFFE20).w,d0
0000482A C0FC 000A                  		mulu.w	#10,d0		; multiply rings by 10
0000482E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set rings bonus
00004832 303C 008E                  		move.w	#$8E,d0
00004836 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play end-of-level music
0000483C 43F8 D000                  		lea	($FFFFD000).w,a1
00004840 7000                       		moveq	#0,d0
00004842 323C 07FF                  		move.w	#$7FF,d1
00004846                            
00004846                            SS_EndClrObjRam:
00004846 22C0                       		move.l	d0,(a1)+
00004848 51C9 FFFC                  		dbf	d1,SS_EndClrObjRam ; clear object RAM
0000484C                            
0000484C 11FC 007E D5C0             		move.b	#$7E,($FFFFD5C0).w ; load results screen object
00004852                            
00004852                            SS_NormalExit:
00004852 6100 CB54                  		bsr.w	PauseGame
00004856 11FC 000C F62A             		move.b	#$C,($FFFFF62A).w
0000485C 6100 E14A                  		bsr.w	DelayProgram
00004860 4EB9 0000 0000             		jsr	ObjectsLoad
00004866 4EB9 0000 0000             		jsr	BuildSprites
0000486C 6100 CD7E                  		bsr.w	RunPLC_RAM
00004870 4A78 FE02                  		tst.w	($FFFFFE02).w
00004874 67DC                       		beq.s	SS_NormalExit
00004876 4AB8 F680                  		tst.l	($FFFFF680).w
0000487A 66D6                       		bne.s	SS_NormalExit
0000487C 303C 00CA                  		move.w	#$CA,d0
00004880 6100 CB1A                  		bsr.w	PlaySound_Special ; play special stage exit sound
00004884 6100 D6F6                  		bsr.w	Pal_MakeFlash
00004888 4E75                       		rts	
0000488A                            ; ===========================================================================
0000488A                            
0000488A                            SS_ToSegaScreen:
0000488A 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set screen mode to 00 (Sega screen)
00004890 4E75                       		rts
00004892                            
00004892                            ; ---------------------------------------------------------------------------
00004892                            ; Special stage	background loading subroutine
00004892                            ; ---------------------------------------------------------------------------
00004892                            
00004892                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004892                            
00004892                            
00004892                            SS_BGLoad:				; XREF: SpecialStage
00004892 43F9 00FF 0000             		lea	($FF0000).l,a1
00004898 41F9 0000 0000             		lea	(Eni_SSBg1).l,a0 ; load	mappings for the birds and fish
0000489E 303C 4051                  		move.w	#$4051,d0
000048A2 6100 CE7A                  		bsr.w	EniDec
000048A6 263C 5000 0001             		move.l	#$50000001,d3
000048AC 45F9 00FF 0080             		lea	($FF0080).l,a2
000048B2 7E06                       		moveq	#6,d7
000048B4                            
000048B4                            loc_48BE:
000048B4 2003                       		move.l	d3,d0
000048B6 7C03                       		moveq	#3,d6
000048B8 7800                       		moveq	#0,d4
000048BA 0C47 0003                  		cmpi.w	#3,d7
000048BE 6400                       		bcc.s	loc_48CC
000048C0 7801                       		moveq	#1,d4
000048C2                            
000048C2                            loc_48CC:
000048C2 7A07                       		moveq	#7,d5
000048C4                            
000048C4                            loc_48CE:
000048C4 224A                       		movea.l	a2,a1
000048C6 0A04 0001                  		eori.b	#1,d4
000048CA 6600                       		bne.s	loc_48E2
000048CC 0C47 0006                  		cmpi.w	#6,d7
000048D0 6600                       		bne.s	loc_48F2
000048D2 43F9 00FF 0000             		lea	($FF0000).l,a1
000048D8                            
000048D8                            loc_48E2:
000048D8 48E7 F800                  		movem.l	d0-d4,-(sp)
000048DC 7207                       		moveq	#7,d1
000048DE 7407                       		moveq	#7,d2
000048E0 6100 CB3E                  		bsr.w	ShowVDPGraphics
000048E4 4CDF 001F                  		movem.l	(sp)+,d0-d4
000048E8                            
000048E8                            loc_48F2:
000048E8 0680 0010 0000             		addi.l	#$100000,d0
000048EE 51CD FFD4                  		dbf	d5,loc_48CE
000048F2 0680 0380 0000             		addi.l	#$3800000,d0
000048F8 0A04 0001                  		eori.b	#1,d4
000048FC 51CE FFC4                  		dbf	d6,loc_48CC
00004900 0683 1000 0000             		addi.l	#$10000000,d3
00004906 6A00                       		bpl.s	loc_491C
00004908 4843                       		swap	d3
0000490A 0683 0000 C000             		addi.l	#$C000,d3
00004910 4843                       		swap	d3
00004912                            
00004912                            loc_491C:
00004912 D4FC 0080                  		adda.w	#$80,a2
00004916 51CF FF9C                  		dbf	d7,loc_48BE
0000491A 43F9 00FF 0000             		lea	($FF0000).l,a1
00004920 41F9 0000 0000             		lea	(Eni_SSBg2).l,a0 ; load	mappings for the clouds
00004926 303C 4000                  		move.w	#$4000,d0
0000492A 6100 CDF2                  		bsr.w	EniDec
0000492E 43F9 00FF 0000             		lea	($FF0000).l,a1
00004934 203C 4000 0003             		move.l	#$40000003,d0
0000493A 723F                       		moveq	#$3F,d1
0000493C 741F                       		moveq	#$1F,d2
0000493E 6100 CAE0                  		bsr.w	ShowVDPGraphics
00004942 43F9 00FF 0000             		lea	($FF0000).l,a1
00004948 203C 5000 0003             		move.l	#$50000003,d0
0000494E 723F                       		moveq	#$3F,d1
00004950 743F                       		moveq	#$3F,d2
00004952 6100 CACC                  		bsr.w	ShowVDPGraphics
00004956 4E75                       		rts	
00004958                            ; End of function SS_BGLoad
00004958                            
00004958                            ; ---------------------------------------------------------------------------
00004958                            ; Pallet cycling routine - special stage
00004958                            ; ---------------------------------------------------------------------------
00004958                            
00004958                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004958                            
00004958                            
00004958                            PalCycle_SS:				; XREF: loc_DA6; SpecialStage
00004958 4A78 F63A                  		tst.w	($FFFFF63A).w
0000495C 6600                       		bne.s	locret_49E6
0000495E 5378 F79C                  		subq.w	#1,($FFFFF79C).w
00004962 6A00                       		bpl.s	locret_49E6
00004964 4DF9 00C0 0004             		lea	($C00004).l,a6
0000496A 3038 F79A                  		move.w	($FFFFF79A).w,d0
0000496E 5278 F79A                  		addq.w	#1,($FFFFF79A).w
00004972 0240 001F                  		andi.w	#$1F,d0
00004976 E548                       		lsl.w	#2,d0
00004978 41F9 0000 0000             		lea	(byte_4A3C).l,a0
0000497E D0C0                       		adda.w	d0,a0
00004980 1018                       		move.b	(a0)+,d0
00004982 6A00                       		bpl.s	loc_4992
00004984 303C 01FF                  		move.w	#$1FF,d0
00004988                            
00004988                            loc_4992:
00004988 31C0 F79C                  		move.w	d0,($FFFFF79C).w
0000498C 7000                       		moveq	#0,d0
0000498E 1018                       		move.b	(a0)+,d0
00004990 31C0 F7A0                  		move.w	d0,($FFFFF7A0).w
00004994 43F9 0000 0000             		lea	(byte_4ABC).l,a1
0000499A 43F1 0000                  		lea	(a1,d0.w),a1
0000499E 303C 8200                  		move.w	#-$7E00,d0
000049A2 1019                       		move.b	(a1)+,d0
000049A4 3C80                       		move.w	d0,(a6)
000049A6 11D1 F616                  		move.b	(a1),($FFFFF616).w
000049AA 303C 8400                  		move.w	#-$7C00,d0
000049AE 1018                       		move.b	(a0)+,d0
000049B0 3C80                       		move.w	d0,(a6)
000049B2 23FC 4000 0010 00C0 0004   		move.l	#$40000010,($C00004).l
000049BC 23F8 F616 00C0 0000        		move.l	($FFFFF616).w,($C00000).l
000049C4 7000                       		moveq	#0,d0
000049C6 1018                       		move.b	(a0)+,d0
000049C8 6B00                       		bmi.s	loc_49E8
000049CA 43F9 0000 0000             		lea	(Pal_SSCyc1).l,a1
000049D0 D2C0                       		adda.w	d0,a1
000049D2 45F8 FB4E                  		lea	($FFFFFB4E).w,a2
000049D6 24D9                       		move.l	(a1)+,(a2)+
000049D8 24D9                       		move.l	(a1)+,(a2)+
000049DA 24D9                       		move.l	(a1)+,(a2)+
000049DC                            
000049DC                            locret_49E6:
000049DC 4E75                       		rts	
000049DE                            ; ===========================================================================
000049DE                            
000049DE                            loc_49E8:				; XREF: PalCycle_SS
000049DE 3238 F79E                  		move.w	($FFFFF79E).w,d1
000049E2 0C40 008A                  		cmpi.w	#$8A,d0
000049E6 6500                       		bcs.s	loc_49F4
000049E8 5241                       		addq.w	#1,d1
000049EA                            
000049EA                            loc_49F4:
000049EA C2FC 002A                  		mulu.w	#$2A,d1
000049EE 43F9 0000 0000             		lea	(Pal_SSCyc2).l,a1
000049F4 D2C1                       		adda.w	d1,a1
000049F6 0240 007F                  		andi.w	#$7F,d0
000049FA 0880 0000                  		bclr	#0,d0
000049FE 6700                       		beq.s	loc_4A18
00004A00 45F8 FB6E                  		lea	($FFFFFB6E).w,a2
00004A04 24D1                       		move.l	(a1),(a2)+
00004A06 24E9 0004                  		move.l	4(a1),(a2)+
00004A0A 24E9 0008                  		move.l	8(a1),(a2)+
00004A0E                            
00004A0E                            loc_4A18:
00004A0E D2FC 000C                  		adda.w	#$C,a1
00004A12 45F8 FB5A                  		lea	($FFFFFB5A).w,a2
00004A16 0C40 000A                  		cmpi.w	#$A,d0
00004A1A 6500                       		bcs.s	loc_4A2E
00004A1C 0440 000A                  		subi.w	#$A,d0
00004A20 45F8 FB7A                  		lea	($FFFFFB7A).w,a2
00004A24                            
00004A24                            loc_4A2E:
00004A24 3200                       		move.w	d0,d1
00004A26 D040                       		add.w	d0,d0
00004A28 D041                       		add.w	d1,d0
00004A2A D2C0                       		adda.w	d0,a1
00004A2C 24D9                       		move.l	(a1)+,(a2)+
00004A2E 34D9                       		move.w	(a1)+,(a2)+
00004A30 4E75                       		rts	
00004A32                            ; End of function PalCycle_SS
00004A32                            
00004A32                            ; ===========================================================================
00004A32 0300 0792 0300 0790 0300+  byte_4A3C:	dc.b 3,	0, 7, $92, 3, 0, 7, $90, 3, 0, 7, $8E, 3, 0, 7,	$8C
00004A42                            					; XREF: PalCycle_SS
00004A42 0300 078B 0300 0780 0300+  		dc.b 3,	0, 7, $8B, 3, 0, 7, $80, 3, 0, 7, $82, 3, 0, 7,	$84
00004A52 0300 0786 0300 0788 0708+  		dc.b 3,	0, 7, $86, 3, 0, 7, $88, 7, 8, 7, 0, 7,	$A, 7, $C
00004A62 FF0C 0718 FF0C 0718 070A+  		dc.b $FF, $C, 7, $18, $FF, $C, 7, $18, 7, $A, 7, $C, 7,	8, 7, 0
00004A72 0300 0688 0300 0686 0300+  		dc.b 3,	0, 6, $88, 3, 0, 6, $86, 3, 0, 6, $84, 3, 0, 6,	$82
00004A82 0300 0681 0300 068A 0300+  		dc.b 3,	0, 6, $81, 3, 0, 6, $8A, 3, 0, 6, $8C, 3, 0, 6,	$8E
00004A92 0300 0690 0300 0692 0702+  		dc.b 3,	0, 6, $90, 3, 0, 6, $92, 7, 2, 6, $24, 7, 4, 6,	$30
00004AA2 FF06 063C FF06 063C 0704+  		dc.b $FF, 6, 6,	$3C, $FF, 6, 6,	$3C, 7,	4, 6, $30, 7, 2, 6, $24
00004AB2                            		even
00004AB2 1001 1800 1801 2000 2001+  byte_4ABC:	dc.b $10, 1, $18, 0, $18, 1, $20, 0, $20, 1, $28, 0, $28, 1
00004AC0                            					; XREF: PalCycle_SS
00004AC0                            		even
00004AC0                            
00004AC0                            Pal_SSCyc1:	incbin	pallet\c_ss_1.bin
00004B08                            		even
00004B08                            Pal_SSCyc2:	incbin	pallet\c_ss_2.bin
00004BDA                            		even
00004BDA                            
00004BDA                            ; ---------------------------------------------------------------------------
00004BDA                            ; Subroutine to	make the special stage background animated
00004BDA                            ; ---------------------------------------------------------------------------
00004BDA                            
00004BDA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00004BDA                            
00004BDA                            
00004BDA                            SS_BGAnimate:				; XREF: SpecialStage
00004BDA 3038 F7A0                  		move.w	($FFFFF7A0).w,d0
00004BDE 6600                       		bne.s	loc_4BF6
00004BE0 31FC 0000 F70C             		move.w	#0,($FFFFF70C).w
00004BE6 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004BEC                            
00004BEC                            loc_4BF6:
00004BEC 0C40 0008                  		cmpi.w	#8,d0
00004BF0 6400                       		bcc.s	loc_4C4E
00004BF2 0C40 0006                  		cmpi.w	#6,d0
00004BF6 6600                       		bne.s	loc_4C10
00004BF8 5278 F718                  		addq.w	#1,($FFFFF718).w
00004BFC 5278 F70C                  		addq.w	#1,($FFFFF70C).w
00004C00 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00004C06                            
00004C06                            loc_4C10:
00004C06 7000                       		moveq	#0,d0
00004C08 3038 F708                  		move.w	($FFFFF708).w,d0
00004C0C 4440                       		neg.w	d0
00004C0E 4840                       		swap	d0
00004C10 43F9 0000 0000             		lea	(byte_4CCC).l,a1
00004C16 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C1A 7609                       		moveq	#9,d3
00004C1C                            
00004C1C                            loc_4C26:
00004C1C 302B 0002                  		move.w	2(a3),d0
00004C20 6100 DDB8                  		bsr.w	CalcSine
00004C24 7400                       		moveq	#0,d2
00004C26 1419                       		move.b	(a1)+,d2
00004C28 C1C2                       		muls.w	d2,d0
00004C2A E080                       		asr.l	#8,d0
00004C2C 36C0                       		move.w	d0,(a3)+
00004C2E 1419                       		move.b	(a1)+,d2
00004C30 4882                       		ext.w	d2
00004C32 D55B                       		add.w	d2,(a3)+
00004C34 51CB FFE6                  		dbf	d3,loc_4C26
00004C38 47F8 AA00                  		lea	($FFFFAA00).w,a3
00004C3C 45F9 0000 0000             		lea	(byte_4CB8).l,a2
00004C42 6000                       		bra.s	loc_4C7E
00004C44                            ; ===========================================================================
00004C44                            
00004C44                            loc_4C4E:				; XREF: SS_BGAnimate
00004C44 0C40 000C                  		cmpi.w	#$C,d0
00004C48 6600                       		bne.s	loc_4C74
00004C4A 5378 F718                  		subq.w	#1,($FFFFF718).w
00004C4E 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C52 243C 0001 8000             		move.l	#$18000,d2
00004C58 7206                       		moveq	#6,d1
00004C5A                            
00004C5A                            loc_4C64:
00004C5A 2013                       		move.l	(a3),d0
00004C5C 9082                       		sub.l	d2,d0
00004C5E 26C0                       		move.l	d0,(a3)+
00004C60 0482 0000 2000             		subi.l	#$2000,d2
00004C66 51C9 FFF2                  		dbf	d1,loc_4C64
00004C6A                            
00004C6A                            loc_4C74:
00004C6A 47F8 AB00                  		lea	($FFFFAB00).w,a3
00004C6E 45F9 0000 0000             		lea	(byte_4CC4).l,a2
00004C74                            
00004C74                            loc_4C7E:
00004C74 43F8 CC00                  		lea	($FFFFCC00).w,a1
00004C78 3038 F718                  		move.w	($FFFFF718).w,d0
00004C7C 4440                       		neg.w	d0
00004C7E 4840                       		swap	d0
00004C80 7600                       		moveq	#0,d3
00004C82 161A                       		move.b	(a2)+,d3
00004C84 3438 F70C                  		move.w	($FFFFF70C).w,d2
00004C88 4442                       		neg.w	d2
00004C8A 0242 00FF                  		andi.w	#$FF,d2
00004C8E E54A                       		lsl.w	#2,d2
00004C90                            
00004C90                            loc_4C9A:
00004C90 301B                       		move.w	(a3)+,d0
00004C92 544B                       		addq.w	#2,a3
00004C94 7200                       		moveq	#0,d1
00004C96 121A                       		move.b	(a2)+,d1
00004C98 5341                       		subq.w	#1,d1
00004C9A                            
00004C9A                            loc_4CA4:
00004C9A 2380 2000                  		move.l	d0,(a1,d2.w)
00004C9E 5842                       		addq.w	#4,d2
00004CA0 0242 03FC                  		andi.w	#$3FC,d2
00004CA4 51C9 FFF4                  		dbf	d1,loc_4CA4
00004CA8 51CB FFE6                  		dbf	d3,loc_4C9A
00004CAC 4E75                       		rts	
00004CAE                            ; End of function SS_BGAnimate
00004CAE                            
00004CAE                            ; ===========================================================================
00004CAE 0928 1810 2818 1030 1808+  byte_4CB8:	dc.b 9,	$28, $18, $10, $28, $18, $10, $30, $18,	8, $10,	0
00004CBA                            		even
00004CBA 0630 3030 2818 1818        byte_4CC4:	dc.b 6,	$30, $30, $30, $28, $18, $18, $18
00004CC2                            		even
00004CC2 0802 04FF 0203 08FF 0402+  byte_4CCC:	dc.b 8,	2, 4, $FF, 2, 3, 8, $FF, 4, 2, 2, 3, 8,	$FD, 4,	2, 2, 3, 2, $FF
00004CD6                            		even
00004CD6                            					; XREF: SS_BGAnimate
00004CD6                            ; ===========================================================================
00004CD6                            
00004CD6                            ; ---------------------------------------------------------------------------
00004CD6                            ; Continue screen
00004CD6                            ; ---------------------------------------------------------------------------
00004CD6                            
00004CD6                            ContinueScreen:				; XREF: GameModeArray
00004CD6 6100 D17A                  		bsr.w	Pal_FadeFrom
00004CDA 46FC 2700                  		move	#$2700,sr
00004CDE 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004CE2 0200 00BF                  		andi.b	#$BF,d0
00004CE6 33C0 00C0 0004             		move.w	d0,($C00004).l
00004CEC 4DF9 00C0 0004             		lea	($C00004).l,a6
00004CF2 3CBC 8004                  		move.w	#$8004,(a6)
00004CF6 3CBC 8700                  		move.w	#$8700,(a6)
00004CFA 6100 C5C8                  		bsr.w	ClearScreen
00004CFE 43F8 D000                  		lea	($FFFFD000).w,a1
00004D02 7000                       		moveq	#0,d0
00004D04 323C 07FF                  		move.w	#$7FF,d1
00004D08                            
00004D08                            Cont_ClrObjRam:
00004D08 22C0                       		move.l	d0,(a1)+
00004D0A 51C9 FFFC                  		dbf	d1,Cont_ClrObjRam ; clear object RAM
00004D0E                            
00004D0E 23FC 7000 0002 00C0 0004   		move.l	#$70000002,($C00004).l
00004D18 41F9 0000 0000             		lea	(Nem_TitleCard).l,a0 ; load title card patterns
00004D1E 6100 C720                  		bsr.w	NemDec
00004D22 23FC 6000 0002 00C0 0004   		move.l	#$60000002,($C00004).l
00004D2C 41F9 0000 0000             		lea	(Nem_ContSonic).l,a0 ; load Sonic patterns
00004D32 6100 C70C                  		bsr.w	NemDec
00004D36 23FC 6A20 0002 00C0 0004   		move.l	#$6A200002,($C00004).l
00004D40 41F9 0000 0000             		lea	(Nem_MiniSonic).l,a0 ; load continue screen patterns
00004D46 6100 C6F8                  		bsr.w	NemDec
00004D4A 720A                       		moveq	#10,d1
00004D4C 4EB9 0000 0000             		jsr	ContScrCounter	; run countdown	(start from 10)
00004D52 7012                       		moveq	#$12,d0
00004D54 6100 D3A6                  		bsr.w	PalLoad1	; load continue	screen pallet
00004D58 103C 0090                  		move.b	#$90,d0
00004D5C 6100 C638                  		bsr.w	PlaySound	; play continue	music
00004D60 31FC 0293 F614             		move.w	#659,($FFFFF614).w ; set time delay to 11 seconds
00004D66 42B8 F700                  		clr.l	($FFFFF700).w
00004D6A 21FC 0100 0000 F704        		move.l	#$1000000,($FFFFF704).w
00004D72 11FC 0081 D000             		move.b	#$81,($FFFFD000).w ; load Sonic	object
00004D78 11FC 0080 D040             		move.b	#$80,($FFFFD040).w ; load continue screen objects
00004D7E 11FC 0080 D080             		move.b	#$80,($FFFFD080).w
00004D84 11FC 0003 D098             		move.b	#3,($FFFFD098).w
00004D8A 11FC 0004 D09A             		move.b	#4,($FFFFD09A).w
00004D90 11FC 0080 D0C0             		move.b	#$80,($FFFFD0C0).w
00004D96 11FC 0004 D0E4             		move.b	#4,($FFFFD0E4).w
00004D9C 4EB9 0000 0000             		jsr	ObjectsLoad
00004DA2 4EB9 0000 0000             		jsr	BuildSprites
00004DA8 3038 F60C                  		move.w	($FFFFF60C).w,d0
00004DAC 0000 0040                  		ori.b	#$40,d0
00004DB0 33C0 00C0 0004             		move.w	d0,($C00004).l
00004DB6 6100 CFF4                  		bsr.w	Pal_FadeTo
00004DBA                            
00004DBA                            ; ---------------------------------------------------------------------------
00004DBA                            ; Continue screen main loop
00004DBA                            ; ---------------------------------------------------------------------------
00004DBA                            
00004DBA                            Cont_MainLoop:
00004DBA 11FC 0016 F62A             		move.b	#$16,($FFFFF62A).w
00004DC0 6100 DBE6                  		bsr.w	DelayProgram
00004DC4 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004DCA 6400                       		bcc.s	loc_4DF2
00004DCC 46FC 2700                  		move	#$2700,sr
00004DD0 3238 F614                  		move.w	($FFFFF614).w,d1
00004DD4 82FC 003C                  		divu.w	#$3C,d1
00004DD8 0281 0000 000F             		andi.l	#$F,d1
00004DDE 4EB9 0000 0000             		jsr	ContScrCounter
00004DE4 46FC 2300                  		move	#$2300,sr
00004DE8                            
00004DE8                            loc_4DF2:
00004DE8 4EB9 0000 0000             		jsr	ObjectsLoad
00004DEE 4EB9 0000 0000             		jsr	BuildSprites
00004DF4 0C78 0180 D008             		cmpi.w	#$180,($FFFFD008).w ; has Sonic	run off	screen?
00004DFA 6400                       		bcc.s	Cont_GotoLevel	; if yes, branch
00004DFC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004E02 64B6                       		bcc.s	Cont_MainLoop
00004E04 4A78 F614                  		tst.w	($FFFFF614).w
00004E08 6600 FFB0                  		bne.w	Cont_MainLoop
00004E0C 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
00004E12 4E75                       		rts	
00004E14                            ; ===========================================================================
00004E14                            
00004E14                            Cont_GotoLevel:				; XREF: Cont_MainLoop
00004E14 11FC 000C F600             		move.b	#$C,($FFFFF600).w ; set	screen mode to $0C (level)
00004E1A 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
00004E20 7000                       		moveq	#0,d0
00004E22 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
00004E26 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
00004E2A 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
00004E2E 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost count
00004E32 5338 FE18                  		subq.b	#1,($FFFFFE18).w ; subtract 1 from continues
00004E36 4E75                       		rts	
00004E38                            ; ===========================================================================
00004E38                            
00004E38                            ; ---------------------------------------------------------------------------
00004E38                            ; Object 80 - Continue screen elements
00004E38                            ; ---------------------------------------------------------------------------
00004E38                            
00004E38                            Obj80:					; XREF: Obj_Index
00004E38 7000                       		moveq	#0,d0
00004E3A 1028 0024                  		move.b	$24(a0),d0
00004E3E 323B 0000                  		move.w	Obj80_Index(pc,d0.w),d1
00004E42 4EFB 1000                  		jmp	Obj80_Index(pc,d1.w)
00004E46                            ; ===========================================================================
00004E46 0000                       Obj80_Index:	dc.w Obj80_Main-Obj80_Index
00004E48 0000                       		dc.w Obj80_Display-Obj80_Index
00004E4A 0000                       		dc.w Obj80_MakeMiniSonic-Obj80_Index
00004E4C 0000                       		dc.w Obj80_ChkType-Obj80_Index
00004E4E                            ; ===========================================================================
00004E4E                            
00004E4E                            Obj80_Main:				; XREF: Obj80_Index
00004E4E 5428 0024                  		addq.b	#2,$24(a0)
00004E52 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004E5A 317C 8500 0002             		move.w	#$8500,2(a0)
00004E60 117C 0000 0001             		move.b	#0,1(a0)
00004E66 117C 003C 0019             		move.b	#$3C,$19(a0)
00004E6C 317C 0120 0008             		move.w	#$120,8(a0)
00004E72 317C 00C0 000A             		move.w	#$C0,$A(a0)
00004E78 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; clear rings
00004E7E                            
00004E7E                            Obj80_Display:				; XREF: Obj80_Index
00004E7E 4EF9 0000 0000             		jmp	DisplaySprite
00004E84                            ; ===========================================================================
00004E84                            Obj80_MiniSonicPos:
00004E84 0116 012A 0102 013E 00EE+  		dc.w $116, $12A, $102, $13E, $EE, $152, $DA, $166, $C6
00004E96 017A 00B2 018E 009E 01A2+  		dc.w $17A, $B2,	$18E, $9E, $1A2, $8A
00004EA2                            ; ===========================================================================
00004EA2                            
00004EA2                            Obj80_MakeMiniSonic:			; XREF: Obj80_Index
00004EA2 2248                       		movea.l	a0,a1
00004EA4 45F9 0000 4E84             		lea	(Obj80_MiniSonicPos).l,a2
00004EAA 7200                       		moveq	#0,d1
00004EAC 1238 FE18                  		move.b	($FFFFFE18).w,d1
00004EB0 5501                       		subq.b	#2,d1
00004EB2 6400                       		bcc.s	loc_4EC4
00004EB4 4EF9 0000 0000             		jmp	DeleteObject
00004EBA                            ; ===========================================================================
00004EBA                            
00004EBA                            loc_4EC4:				; XREF: Obj80_MakeMiniSonic
00004EBA 7601                       		moveq	#1,d3
00004EBC 0C01 000E                  		cmpi.b	#$E,d1
00004EC0 6500                       		bcs.s	loc_4ED0
00004EC2 7600                       		moveq	#0,d3
00004EC4 720E                       		moveq	#$E,d1
00004EC6                            
00004EC6                            loc_4ED0:
00004EC6 1401                       		move.b	d1,d2
00004EC8 0202 0001                  		andi.b	#1,d2
00004ECC                            
00004ECC                            Obj80_MiniSonLoop:
00004ECC 12BC 0080                  		move.b	#$80,0(a1)	; load mini Sonic object
00004ED0 335A 0008                  		move.w	(a2)+,8(a1)
00004ED4 4A02                       		tst.b	d2
00004ED6 6700                       		beq.s	loc_4EEA
00004ED8 0469 000A 0008             		subi.w	#$A,8(a1)
00004EDE                            
00004EDE                            loc_4EEA:
00004EDE 337C 00D0 000A             		move.w	#$D0,$A(a1)
00004EE4 137C 0006 001A             		move.b	#6,$1A(a1)
00004EEA 137C 0006 0024             		move.b	#6,$24(a1)
00004EF0 237C 0000 0000 0004        		move.l	#Map_obj80,4(a1)
00004EF8 337C 8551 0002             		move.w	#$8551,2(a1)
00004EFE 137C 0000 0001             		move.b	#0,1(a1)
00004F04 43E9 0040                  		lea	$40(a1),a1
00004F08 51C9 FFC2                  		dbf	d1,Obj80_MiniSonLoop ; repeat for number of continues
00004F0C 43E9 FFC0                  		lea	-$40(a1),a1
00004F10 1343 0028                  		move.b	d3,$28(a1)
00004F14                            
00004F14                            Obj80_ChkType:				; XREF: Obj80_Index
00004F14 4A28 0028                  		tst.b	$28(a0)
00004F18 6700                       		beq.s	loc_4F40
00004F1A 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00004F20 6500                       		bcs.s	loc_4F40
00004F22 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F26 0200 0001                  		andi.b	#1,d0
00004F2A 6600                       		bne.s	loc_4F40
00004F2C 4A78 D010                  		tst.w	($FFFFD010).w
00004F30 6600                       		bne.s	Obj80_Delete
00004F32 4E75                       		rts	
00004F34                            ; ===========================================================================
00004F34                            
00004F34                            loc_4F40:				; XREF: Obj80_ChkType
00004F34 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00004F38 0200 000F                  		andi.b	#$F,d0
00004F3C 6600                       		bne.s	Obj80_Display2
00004F3E 0868 0000 001A             		bchg	#0,$1A(a0)
00004F44                            
00004F44                            Obj80_Display2:
00004F44 4EF9 0000 0000             		jmp	DisplaySprite
00004F4A                            ; ===========================================================================
00004F4A                            
00004F4A                            Obj80_Delete:				; XREF: Obj80_ChkType
00004F4A 4EF9 0000 0000             		jmp	DeleteObject
00004F50                            ; ===========================================================================
00004F50                            
00004F50                            ; ---------------------------------------------------------------------------
00004F50                            ; Object 81 - Sonic on the continue screen
00004F50                            ; ---------------------------------------------------------------------------
00004F50                            
00004F50                            Obj81:					; XREF: Obj_Index
00004F50 7000                       		moveq	#0,d0
00004F52 1028 0024                  		move.b	$24(a0),d0
00004F56 323B 0000                  		move.w	Obj81_Index(pc,d0.w),d1
00004F5A 4EBB 1000                  		jsr	Obj81_Index(pc,d1.w)
00004F5E 4EF9 0000 0000             		jmp	DisplaySprite
00004F64                            ; ===========================================================================
00004F64 0000                       Obj81_Index:	dc.w Obj81_Main-Obj81_Index
00004F66 0000                       		dc.w Obj81_ChkLand-Obj81_Index
00004F68 0000                       		dc.w Obj81_Animate-Obj81_Index
00004F6A 0000                       		dc.w Obj81_Run-Obj81_Index
00004F6C                            ; ===========================================================================
00004F6C                            
00004F6C                            Obj81_Main:				; XREF: Obj81_Index
00004F6C 5428 0024                  		addq.b	#2,$24(a0)
00004F70 317C 00A0 0008             		move.w	#$A0,8(a0)
00004F76 317C 00C0 000C             		move.w	#$C0,$C(a0)
00004F7C 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004F84 317C 0780 0002             		move.w	#$780,2(a0)
00004F8A 117C 0004 0001             		move.b	#4,1(a0)
00004F90 117C 0002 0018             		move.b	#2,$18(a0)
00004F96 117C 001D 001C             		move.b	#$1D,$1C(a0)	; use "floating" animation
00004F9C 317C 0400 0012             		move.w	#$400,$12(a0)	; make Sonic fall from above
00004FA2                            
00004FA2                            Obj81_ChkLand:				; XREF: Obj81_Index
00004FA2 0C68 01A0 000C             		cmpi.w	#$1A0,$C(a0)	; has Sonic landed yet?
00004FA8 6600                       		bne.s	Obj81_ShowFall	; if not, branch
00004FAA 5428 0024                  		addq.b	#2,$24(a0)
00004FAE 4268 0012                  		clr.w	$12(a0)		; stop Sonic falling
00004FB2 217C 0000 0000 0004        		move.l	#Map_obj80,4(a0)
00004FBA 317C 8500 0002             		move.w	#$8500,2(a0)
00004FC0 117C 0000 001C             		move.b	#0,$1C(a0)
00004FC6 6000                       		bra.s	Obj81_Animate
00004FC8                            ; ===========================================================================
00004FC8                            
00004FC8                            Obj81_ShowFall:				; XREF: Obj81_ChkLand
00004FC8 4EB9 0000 0000             		jsr	SpeedToPos
00004FCE 4EB9 0000 0000             		jsr	Sonic_Animate
00004FD4 4EF9 0000 0000             		jmp	LoadSonicDynPLC
00004FDA                            ; ===========================================================================
00004FDA                            
00004FDA                            Obj81_Animate:				; XREF: Obj81_Index
00004FDA 4A38 F605                  		tst.b	($FFFFF605).w	; is any button	pressed?
00004FDE 6B00                       		bmi.s	Obj81_GetUp	; if yes, branch
00004FE0 43F9 0000 0000             		lea	(Ani_obj81).l,a1
00004FE6 4EF9 0000 0000             		jmp	AnimateSprite
00004FEC                            ; ===========================================================================
00004FEC                            
00004FEC                            Obj81_GetUp:				; XREF: Obj81_Animate
00004FEC 5428 0024                  		addq.b	#2,$24(a0)
00004FF0 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00004FF8 317C 0780 0002             		move.w	#$780,2(a0)
00004FFE 117C 001E 001C             		move.b	#$1E,$1C(a0)	; use "getting up" animation
00005004 4268 0014                  		clr.w	$14(a0)
00005008 5168 000C                  		subq.w	#8,$C(a0)
0000500C 103C 00E0                  		move.b	#$E0,d0
00005010 6100 C38A                  		bsr.w	PlaySound_Special ; fade out music
00005014                            
00005014                            Obj81_Run:				; XREF: Obj81_Index
00005014 0C68 0800 0014             		cmpi.w	#$800,$14(a0)	; check	Sonic's "run speed" (not moving)
0000501A 6600                       		bne.s	Obj81_AddSpeed	; if too low, branch
0000501C 317C 1000 0010             		move.w	#$1000,$10(a0)	; move Sonic to	the right
00005022 6000                       		bra.s	Obj81_ShowRun
00005024                            ; ===========================================================================
00005024                            
00005024                            Obj81_AddSpeed:				; XREF: Obj81_Run
00005024 0668 0020 0014             		addi.w	#$20,$14(a0)	; increase "run	speed"
0000502A                            
0000502A                            Obj81_ShowRun:				; XREF: Obj81_Run
0000502A 4EB9 0000 0000             		jsr	SpeedToPos
00005030 4EB9 0000 0000             		jsr	Sonic_Animate
00005036 4EF9 0000 0000             		jmp	LoadSonicDynPLC
0000503C                            ; ===========================================================================
0000503C                            Ani_obj81:
0000503C                            	include "_anim\obj81.asm"
0000503C                            ; ---------------------------------------------------------------------------
0000503C                            ; Animation script - Sonic on the continue screen
0000503C                            ; ---------------------------------------------------------------------------
0000503C 0000                       		dc.w byte_504A-Ani_obj81
0000503E 0401 0101 0102 0202 0303+  byte_504A:	dc.b 4,	1, 1, 1, 1, 2, 2, 2, 3,	3, $FF
0000504A 00                         		even
0000504A 00                         		even
0000504A                            
0000504A                            ; ---------------------------------------------------------------------------
0000504A                            ; Sprite mappings - Continue screen
0000504A                            ; ---------------------------------------------------------------------------
0000504A                            Map_obj80:
0000504A                            	include "_maps\obj80.asm"
0000504A                            ; ---------------------------------------------------------------------------
0000504A                            ; Sprite mappings - Continue screen
0000504A                            ; ---------------------------------------------------------------------------
0000504A 0000 0000                  		dc.w byte_5066-Map_obj80, byte_509E-Map_obj80
0000504E 0000 0000                  		dc.w byte_50AE-Map_obj80, byte_50BE-Map_obj80
00005052 0000 0000                  		dc.w byte_50CE-Map_obj80, byte_50D9-Map_obj80
00005056 0000 0000                  		dc.w byte_50D9-Map_obj80, byte_50DF-Map_obj80
0000505A 0B                         byte_5066:	dc.b $B
0000505B F805 0088 C4               		dc.b $F8, 5, 0,	$88, $C4 ; "CONTINUE", stars and countdown
00005060 F805 00B2 D4               		dc.b $F8, 5, 0,	$B2, $D4
00005065 F805 00AE E4               		dc.b $F8, 5, 0,	$AE, $E4
0000506A F805 00C2 F4               		dc.b $F8, 5, 0,	$C2, $F4
0000506F F801 00A0 04               		dc.b $F8, 1, 0,	$A0, 4
00005074 F805 00AE 0C               		dc.b $F8, 5, 0,	$AE, $C
00005079 F805 00C6 1C               		dc.b $F8, 5, 0,	$C6, $1C
0000507E F805 0090 2C               		dc.b $F8, 5, 0,	$90, $2C
00005083 3805 2021 E8               		dc.b $38, 5, $20, $21, $E8
00005088 3805 2021 08               		dc.b $38, 5, $20, $21, 8
0000508D 3605 01FC F8               		dc.b $36, 5, 1,	$FC, $F8
00005092 03                         byte_509E:	dc.b 3
00005093 0405 0015 FC               		dc.b 4,	5, 0, $15, $FC	; Sonic	on floor
00005098 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
0000509D F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050A2 03                         byte_50AE:	dc.b 3
000050A3 0405 0019 FC               		dc.b 4,	5, 0, $19, $FC	; Sonic	on floor #2
000050A8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050AD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050B2 03                         byte_50BE:	dc.b 3
000050B3 0405 001D FC               		dc.b 4,	5, 0, $1D, $FC	; Sonic	on floor #3
000050B8 F40A 0006 EC               		dc.b $F4, $A, 0, 6, $EC
000050BD F406 000F 04               		dc.b $F4, 6, 0,	$F, 4
000050C2 02                         byte_50CE:	dc.b 2
000050C3 6009 2000 E8               		dc.b $60, 9, $20, 0, $E8 ; circle on the floor
000050C8 6009 2800 00               		dc.b $60, 9, $28, 0, 0
000050CD 01                         byte_50D9:	dc.b 1
000050CE 0006 0012 00               		dc.b 0,	6, 0, $12, 0	; mini Sonic
000050D3 01                         byte_50DF:	dc.b 1
000050D4 0006 0018 00               		dc.b 0,	6, 0, $18, 0	; mini Sonic #2
000050DA 00                         		even
000050DA 00                         		even
000050DA                            
000050DA                            ; ===========================================================================
000050DA                            ; ---------------------------------------------------------------------------
000050DA                            ; Ending sequence in Green Hill	Zone
000050DA                            ; ---------------------------------------------------------------------------
000050DA                            
000050DA                            EndingSequence:				; XREF: GameModeArray
000050DA 103C 00E4                  		move.b	#$E4,d0
000050DE 6100 C2BC                  		bsr.w	PlaySound_Special ; stop music
000050E2 6100 CD6E                  		bsr.w	Pal_FadeFrom
000050E6 43F8 D000                  		lea	($FFFFD000).w,a1
000050EA 7000                       		moveq	#0,d0
000050EC 323C 07FF                  		move.w	#$7FF,d1
000050F0                            
000050F0                            End_ClrObjRam:
000050F0 22C0                       		move.l	d0,(a1)+
000050F2 51C9 FFFC                  		dbf	d1,End_ClrObjRam ; clear object	RAM
000050F6                            
000050F6 43F8 F628                  		lea	($FFFFF628).w,a1
000050FA 7000                       		moveq	#0,d0
000050FC 323C 0015                  		move.w	#$15,d1
00005100                            
00005100                            End_ClrRam:
00005100 22C0                       		move.l	d0,(a1)+
00005102 51C9 FFFC                  		dbf	d1,End_ClrRam	; clear	variables
00005106                            
00005106 43F8 F700                  		lea	($FFFFF700).w,a1
0000510A 7000                       		moveq	#0,d0
0000510C 323C 003F                  		move.w	#$3F,d1
00005110                            
00005110                            End_ClrRam2:
00005110 22C0                       		move.l	d0,(a1)+
00005112 51C9 FFFC                  		dbf	d1,End_ClrRam2	; clear	variables
00005116                            
00005116 43F8 FE60                  		lea	($FFFFFE60).w,a1
0000511A 7000                       		moveq	#0,d0
0000511C 323C 0047                  		move.w	#$47,d1
00005120                            
00005120                            End_ClrRam3:
00005120 22C0                       		move.l	d0,(a1)+
00005122 51C9 FFFC                  		dbf	d1,End_ClrRam3	; clear	variables
00005126                            
00005126 46FC 2700                  		move	#$2700,sr
0000512A 3038 F60C                  		move.w	($FFFFF60C).w,d0
0000512E 0200 00BF                  		andi.b	#$BF,d0
00005132 33C0 00C0 0004             		move.w	d0,($C00004).l
00005138 6100 C18A                  		bsr.w	ClearScreen
0000513C 4DF9 00C0 0004             		lea	($C00004).l,a6
00005142 3CBC 8B03                  		move.w	#$8B03,(a6)
00005146 3CBC 8230                  		move.w	#$8230,(a6)
0000514A 3CBC 8407                  		move.w	#$8407,(a6)
0000514E 3CBC 857C                  		move.w	#$857C,(a6)
00005152 3CBC 9001                  		move.w	#$9001,(a6)
00005156 3CBC 8004                  		move.w	#$8004,(a6)
0000515A 3CBC 8720                  		move.w	#$8720,(a6)
0000515E 31FC 8ADF F624             		move.w	#$8ADF,($FFFFF624).w
00005164 3CB8 F624                  		move.w	($FFFFF624).w,(a6)
00005168 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
0000516E 31FC 0600 FE10             		move.w	#$600,($FFFFFE10).w ; set level	number to 0600 (extra flowers)
00005174 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
0000517A 6700                       		beq.s	End_LoadData	; if yes, branch
0000517C 31FC 0601 FE10             		move.w	#$601,($FFFFFE10).w ; set level	number to 0601 (no flowers)
00005182                            
00005182                            End_LoadData:
00005182 701C                       		moveq	#$1C,d0
00005184 6100 C566                  		bsr.w	RunPLC_ROM	; load ending sequence patterns
00005188 4EB9 0000 0000             		jsr	Hud_Base
0000518E 6100 0000                  		bsr.w	LevelSizeLoad
00005192 6100 0000                  		bsr.w	DeformBgLayer
00005196 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000519C 6100 0000                  		bsr.w	MainLoadBlockLoad
000051A0 6100 0000                  		bsr.w	LoadTilesFromStart
000051A4 21FC 0000 0000 F796        		move.l	#Col_GHZ,($FFFFF796).w ; load collision	index
000051AC 46FC 2300                  		move	#$2300,sr
000051B0 41F9 0000 0000             		lea	(Kos_EndFlowers).l,a0 ;	load extra flower patterns
000051B6 43F8 9400                  		lea	($FFFF9400).w,a1 ; RAM address to buffer the patterns
000051BA 6100 C6E0                  		bsr.w	KosDec
000051BE 7003                       		moveq	#3,d0
000051C0 6100 CF3A                  		bsr.w	PalLoad1	; load Sonic's pallet
000051C4 303C 008B                  		move.w	#$8B,d0
000051C8 6100 C1CC                  		bsr.w	PlaySound	; play ending sequence music
000051CC 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
000051D2 6700                       		beq.s	End_LoadSonic	; if not, branch
000051D4 11FC 0001 FFFA             		move.b	#1,($FFFFFFFA).w ; enable debug	mode
000051DA                            
000051DA                            End_LoadSonic:
000051DA 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
000051E0 08F8 0000 D022             		bset	#0,($FFFFD022).w ; make	Sonic face left
000051E6 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
000051EC 31FC 0400 F602             		move.w	#$400,($FFFFF602).w ; move Sonic to the	left
000051F2 31FC F800 D014             		move.w	#$F800,($FFFFD014).w ; set Sonic's speed
000051F8 11FC 0021 D040             		move.b	#$21,($FFFFD040).w ; load HUD object
000051FE 4EB9 0000 0000             		jsr	ObjPosLoad
00005204 4EB9 0000 0000             		jsr	ObjectsLoad
0000520A 4EB9 0000 0000             		jsr	BuildSprites
00005210 7000                       		moveq	#0,d0
00005212 31C0 FE20                  		move.w	d0,($FFFFFE20).w
00005216 21C0 FE22                  		move.l	d0,($FFFFFE22).w
0000521A 11C0 FE1B                  		move.b	d0,($FFFFFE1B).w
0000521E 11C0 FE2C                  		move.b	d0,($FFFFFE2C).w
00005222 11C0 FE2D                  		move.b	d0,($FFFFFE2D).w
00005226 11C0 FE2E                  		move.b	d0,($FFFFFE2E).w
0000522A 11C0 FE2F                  		move.b	d0,($FFFFFE2F).w
0000522E 31C0 FE08                  		move.w	d0,($FFFFFE08).w
00005232 31C0 FE02                  		move.w	d0,($FFFFFE02).w
00005236 31C0 FE04                  		move.w	d0,($FFFFFE04).w
0000523A 6100 EEDA                  		bsr.w	OscillateNumInit
0000523E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w
00005244 11FC 0001 FE1D             		move.b	#1,($FFFFFE1D).w
0000524A 11FC 0000 FE1E             		move.b	#0,($FFFFFE1E).w
00005250 31FC 0708 F614             		move.w	#1800,($FFFFF614).w
00005256 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
0000525C 6100 D74A                  		bsr.w	DelayProgram
00005260 3038 F60C                  		move.w	($FFFFF60C).w,d0
00005264 0000 0040                  		ori.b	#$40,d0
00005268 33C0 00C0 0004             		move.w	d0,($C00004).l
0000526E 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
00005274 6100 CB36                  		bsr.w	Pal_FadeTo
00005278                            
00005278                            ; ---------------------------------------------------------------------------
00005278                            ; Main ending sequence loop
00005278                            ; ---------------------------------------------------------------------------
00005278                            
00005278                            End_MainLoop:
00005278 6100 C12E                  		bsr.w	PauseGame
0000527C 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
00005282 6100 D724                  		bsr.w	DelayProgram
00005286 5278 FE04                  		addq.w	#1,($FFFFFE04).w
0000528A 6100 0000                  		bsr.w	End_MoveSonic
0000528E 4EB9 0000 0000             		jsr	ObjectsLoad
00005294 6100 0000                  		bsr.w	DeformBgLayer
00005298 4EB9 0000 0000             		jsr	BuildSprites
0000529E 4EB9 0000 0000             		jsr	ObjPosLoad
000052A4 6100 C696                  		bsr.w	PalCycle_Load
000052A8 6100 EEC2                  		bsr.w	OscillateNumDo
000052AC 6100 EF4E                  		bsr.w	ChangeRingFrame
000052B0 0C38 0018 F600             		cmpi.b	#$18,($FFFFF600).w ; is	scene number $18 (ending)?
000052B6 6700                       		beq.s	loc_52DA	; if yes, branch
000052B8 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; set scene to $1C (credits)
000052BE 103C 0091                  		move.b	#$91,d0
000052C2 6100 C0D8                  		bsr.w	PlaySound_Special ; play credits music
000052C6 31FC 0000 FFF4             		move.w	#0,($FFFFFFF4).w ; set credits index number to 0
000052CC 4E75                       		rts	
000052CE                            ; ===========================================================================
000052CE                            
000052CE                            loc_52DA:
000052CE 4A78 FE02                  		tst.w	($FFFFFE02).w	; is level set to restart?
000052D2 6700 FFA4                  		beq.w	End_MainLoop	; if not, branch
000052D6                            
000052D6 4278 FE02                  		clr.w	($FFFFFE02).w
000052DA 31FC 003F F626             		move.w	#$3F,($FFFFF626).w
000052E0 4278 F794                  		clr.w	($FFFFF794).w
000052E4                            
000052E4                            End_AllEmlds:				; XREF: loc_5334
000052E4 6100 C0C2                  		bsr.w	PauseGame
000052E8 11FC 0018 F62A             		move.b	#$18,($FFFFF62A).w
000052EE 6100 D6B8                  		bsr.w	DelayProgram
000052F2 5278 FE04                  		addq.w	#1,($FFFFFE04).w
000052F6 6100 0000                  		bsr.w	End_MoveSonic
000052FA 4EB9 0000 0000             		jsr	ObjectsLoad
00005300 6100 0000                  		bsr.w	DeformBgLayer
00005304 4EB9 0000 0000             		jsr	BuildSprites
0000530A 4EB9 0000 0000             		jsr	ObjPosLoad
00005310 6100 EE5A                  		bsr.w	OscillateNumDo
00005314 6100 EEE6                  		bsr.w	ChangeRingFrame
00005318 5378 F794                  		subq.w	#1,($FFFFF794).w
0000531C 6A00                       		bpl.s	loc_5334
0000531E 31FC 0002 F794             		move.w	#2,($FFFFF794).w
00005324 6100 CC76                  		bsr.w	Pal_ToWhite
00005328                            
00005328                            loc_5334:
00005328 4A78 FE02                  		tst.w	($FFFFFE02).w
0000532C 6700 FFB6                  		beq.w	End_AllEmlds
00005330 4278 FE02                  		clr.w	($FFFFFE02).w
00005334 31FC 2E2F A480             		move.w	#$2E2F,($FFFFA480).w ; modify level layout
0000533A 4BF9 00C0 0004             		lea	($C00004).l,a5
00005340 4DF9 00C0 0000             		lea	($C00000).l,a6
00005346 47F8 F700                  		lea	($FFFFF700).w,a3
0000534A 49F8 A400                  		lea	($FFFFA400).w,a4
0000534E 343C 4000                  		move.w	#$4000,d2
00005352 6100 0000                  		bsr.w	LoadTilesFromStart2
00005356 7013                       		moveq	#$13,d0
00005358 6100 CDA2                  		bsr.w	PalLoad1	; load ending pallet
0000535C 6100 CB72                  		bsr.w	Pal_MakeWhite
00005360 6000 FF16                  		bra.w	End_MainLoop
00005364                            
00005364                            ; ---------------------------------------------------------------------------
00005364                            ; Subroutine controlling Sonic on the ending sequence
00005364                            ; ---------------------------------------------------------------------------
00005364                            
00005364                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005364                            
00005364                            
00005364                            End_MoveSonic:				; XREF: End_MainLoop
00005364 1038 F7D7                  		move.b	($FFFFF7D7).w,d0
00005368 6600                       		bne.s	End_MoveSonic2
0000536A 0C78 0090 D008             		cmpi.w	#$90,($FFFFD008).w ; has Sonic passed $90 on y-axis?
00005370 6400                       		bcc.s	End_MoveSonExit	; if not, branch
00005372 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005376 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	player's controls
0000537C 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; move Sonic to the	right
00005382 4E75                       		rts	
00005384                            ; ===========================================================================
00005384                            
00005384                            End_MoveSonic2:				; XREF: End_MoveSonic
00005384 5500                       		subq.b	#2,d0
00005386 6600                       		bne.s	End_MoveSonic3
00005388 0C78 00A0 D008             		cmpi.w	#$A0,($FFFFD008).w ; has Sonic passed $A0 on y-axis?
0000538E 6500                       		bcs.s	End_MoveSonExit	; if not, branch
00005390 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
00005394 7000                       		moveq	#0,d0
00005396 11C0 F7CC                  		move.b	d0,($FFFFF7CC).w
0000539A 31C0 F602                  		move.w	d0,($FFFFF602).w ; stop	Sonic moving
0000539E 31C0 D014                  		move.w	d0,($FFFFD014).w
000053A2 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w
000053A8 11FC 0003 D01A             		move.b	#3,($FFFFD01A).w
000053AE 31FC 0505 D01C             		move.w	#$505,($FFFFD01C).w ; use "standing" animation
000053B4 11FC 0003 D01E             		move.b	#3,($FFFFD01E).w
000053BA 4E75                       		rts	
000053BC                            ; ===========================================================================
000053BC                            
000053BC                            End_MoveSonic3:				; XREF: End_MoveSonic
000053BC 5500                       		subq.b	#2,d0
000053BE 6600                       		bne.s	End_MoveSonExit
000053C0 5438 F7D7                  		addq.b	#2,($FFFFF7D7).w
000053C4 31FC 00A0 D008             		move.w	#$A0,($FFFFD008).w
000053CA 11FC 0087 D000             		move.b	#$87,($FFFFD000).w ; load Sonic	ending sequence	object
000053D0 4278 D024                  		clr.w	($FFFFD024).w
000053D4                            
000053D4                            End_MoveSonExit:
000053D4 4E75                       		rts	
000053D6                            ; End of function End_MoveSonic
000053D6                            
000053D6                            ; ===========================================================================
000053D6                            ; ---------------------------------------------------------------------------
000053D6                            ; Object 87 - Sonic on ending sequence
000053D6                            ; ---------------------------------------------------------------------------
000053D6                            
000053D6                            Obj87:					; XREF: Obj_Index
000053D6 7000                       		moveq	#0,d0
000053D8 1028 0025                  		move.b	$25(a0),d0
000053DC 323B 0000                  		move.w	Obj87_Index(pc,d0.w),d1
000053E0 4EBB 1000                  		jsr	Obj87_Index(pc,d1.w)
000053E4 4EF9 0000 0000             		jmp	DisplaySprite
000053EA                            ; ===========================================================================
000053EA 0000 0000                  Obj87_Index:	dc.w Obj87_Main-Obj87_Index, Obj87_MakeEmlds-Obj87_Index
000053EE 0000 0000                  		dc.w Obj87_Animate-Obj87_Index,	Obj87_LookUp-Obj87_Index
000053F2 0000 0000                  		dc.w Obj87_ClrObjRam-Obj87_Index, Obj87_Animate-Obj87_Index
000053F6 0000 0000                  		dc.w Obj87_MakeLogo-Obj87_Index, Obj87_Animate-Obj87_Index
000053FA 0000 0000                  		dc.w Obj87_Leap-Obj87_Index, Obj87_Animate-Obj87_Index
000053FE                            ; ===========================================================================
000053FE                            
000053FE                            Obj87_Main:				; XREF: Obj87_Index
000053FE 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005404 6700                       		beq.s	Obj87_Main2	; if yes, branch
00005406 0628 0010 0025             		addi.b	#$10,$25(a0)	; else,	skip emerald sequence
0000540C 317C 00D8 0030             		move.w	#$D8,$30(a0)
00005412 4E75                       		rts	
00005414                            ; ===========================================================================
00005414                            
00005414                            Obj87_Main2:				; XREF: Obj87_Main
00005414 5428 0025                  		addq.b	#2,$25(a0)
00005418 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
00005420 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005426 117C 0004 0001             		move.b	#4,1(a0)
0000542C 4228 0022                  		clr.b	$22(a0)
00005430 117C 0002 0018             		move.b	#2,$18(a0)
00005436 117C 0000 001A             		move.b	#0,$1A(a0)
0000543C 317C 0050 0030             		move.w	#$50,$30(a0)	; set duration for Sonic to pause
00005442                            
00005442                            Obj87_MakeEmlds:			; XREF: Obj87_Index
00005442 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005446 6600                       		bne.s	Obj87_Wait
00005448 5428 0025                  		addq.b	#2,$25(a0)
0000544C 317C 0001 001C             		move.w	#1,$1C(a0)
00005452 11FC 0088 D400             		move.b	#$88,($FFFFD400).w ; load chaos	emeralds objects
00005458                            
00005458                            Obj87_Wait:
00005458 4E75                       		rts	
0000545A                            ; ===========================================================================
0000545A                            
0000545A                            Obj87_LookUp:				; XREF: Obj87_Index
0000545A 0C79 2000 00FF D43C        		cmpi.w	#$2000,($FFD43C).l
00005462 6600                       		bne.s	locret_5480
00005464 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; set level to	restart	(causes	flash)
0000546A 317C 005A 0030             		move.w	#$5A,$30(a0)
00005470 5428 0025                  		addq.b	#2,$25(a0)
00005474                            
00005474                            locret_5480:
00005474 4E75                       		rts	
00005476                            ; ===========================================================================
00005476                            
00005476                            Obj87_ClrObjRam:			; XREF: Obj87_Index
00005476 5368 0030                  		subq.w	#1,$30(a0)
0000547A 6600                       		bne.s	Obj87_Wait2
0000547C 43F8 D400                  		lea	($FFFFD400).w,a1
00005480 323C 00FF                  		move.w	#$FF,d1
00005484                            
00005484                            Obj87_ClrLoop:
00005484 4299                       		clr.l	(a1)+
00005486 51C9 FFFC                  		dbf	d1,Obj87_ClrLoop ; clear the object RAM
0000548A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w
00005490 5428 0025                  		addq.b	#2,$25(a0)
00005494 117C 0001 001C             		move.b	#1,$1C(a0)
0000549A 317C 003C 0030             		move.w	#$3C,$30(a0)
000054A0                            
000054A0                            Obj87_Wait2:
000054A0 4E75                       		rts	
000054A2                            ; ===========================================================================
000054A2                            
000054A2                            Obj87_MakeLogo:				; XREF: Obj87_Index
000054A2 5368 0030                  		subq.w	#1,$30(a0)
000054A6 6600                       		bne.s	Obj87_Wait3
000054A8 5428 0025                  		addq.b	#2,$25(a0)
000054AC 317C 00B4 0030             		move.w	#$B4,$30(a0)
000054B2 117C 0002 001C             		move.b	#2,$1C(a0)
000054B8 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
000054BE                            
000054BE                            Obj87_Wait3:
000054BE 4E75                       		rts	
000054C0                            ; ===========================================================================
000054C0                            
000054C0                            Obj87_Animate:				; XREF: Obj87_Index
000054C0 43F9 0000 0000             		lea	(Ani_obj87).l,a1
000054C6 4EF9 0000 0000             		jmp	AnimateSprite
000054CC                            ; ===========================================================================
000054CC                            
000054CC                            Obj87_Leap:				; XREF: Obj87_Index
000054CC 5368 0030                  		subq.w	#1,$30(a0)
000054D0 6600                       		bne.s	Obj87_Wait4
000054D2 5428 0025                  		addq.b	#2,$25(a0)
000054D6 217C 0000 0000 0004        		move.l	#Map_obj87,4(a0)
000054DE 317C 03E1 0002             		move.w	#$3E1,2(a0)
000054E4 117C 0004 0001             		move.b	#4,1(a0)
000054EA 4228 0022                  		clr.b	$22(a0)
000054EE 117C 0002 0018             		move.b	#2,$18(a0)
000054F4 117C 0005 001A             		move.b	#5,$1A(a0)
000054FA 117C 0002 001C             		move.b	#2,$1C(a0)	; use "leaping"	animation
00005500 11FC 0089 D400             		move.b	#$89,($FFFFD400).w ; load "SONIC THE HEDGEHOG" object
00005506 60B8                       		bra.s	Obj87_Animate
00005508                            ; ===========================================================================
00005508                            
00005508                            Obj87_Wait4:				; XREF: Obj87_Leap
00005508 4E75                       		rts	
0000550A                            ; ===========================================================================
0000550A                            Ani_obj87:
0000550A                            	include "_anim\obj87.asm"
0000550A                            ; ---------------------------------------------------------------------------
0000550A                            ; Animation script - Sonic on the ending sequence
0000550A                            ; ---------------------------------------------------------------------------
0000550A 0000                       		dc.w byte_551C-Ani_obj87
0000550C 0000                       		dc.w byte_552A-Ani_obj87
0000550E 0000                       		dc.w byte_5534-Ani_obj87
00005510 0301 0001 0001 0001 0001+  byte_551C:	dc.b 3,	1, 0, 1, 0, 1, 0, 1, 0,	1, 0, 1, 2, $FA
0000551E 0503 0403 0403 0403 FA00   byte_552A:	dc.b 5,	3, 4, 3, 4, 3, 4, 3, $FA, 0
00005528 0305 0505 0607 FE01        byte_5534:	dc.b 3,	5, 5, 5, 6, 7, $FE, 1
00005530                            		even
00005530                            		even
00005530                            
00005530                            ; ===========================================================================
00005530                            ; ---------------------------------------------------------------------------
00005530                            ; Object 88 - chaos emeralds on	the ending sequence
00005530                            ; ---------------------------------------------------------------------------
00005530                            
00005530                            Obj88:					; XREF: Obj_Index
00005530 7000                       		moveq	#0,d0
00005532 1028 0024                  		move.b	$24(a0),d0
00005536 323B 0000                  		move.w	Obj88_Index(pc,d0.w),d1
0000553A 4EBB 1000                  		jsr	Obj88_Index(pc,d1.w)
0000553E 4EF9 0000 0000             		jmp	DisplaySprite
00005544                            ; ===========================================================================
00005544 0000                       Obj88_Index:	dc.w Obj88_Main-Obj88_Index
00005546 0000                       		dc.w Obj88_Move-Obj88_Index
00005548                            ; ===========================================================================
00005548                            
00005548                            Obj88_Main:				; XREF: Obj88_Index
00005548 0C38 0002 D01A             		cmpi.b	#2,($FFFFD01A).w
0000554E 6700                       		beq.s	Obj88_Main2
00005550 588F                       		addq.l	#4,sp
00005552 4E75                       		rts	
00005554                            ; ===========================================================================
00005554                            
00005554                            Obj88_Main2:				; XREF: Obj88_Main
00005554 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; match X position with Sonic
0000555A 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0) ; match Y position	with Sonic
00005560 2248                       		movea.l	a0,a1
00005562 7600                       		moveq	#0,d3
00005564 7401                       		moveq	#1,d2
00005566 7205                       		moveq	#5,d1
00005568                            
00005568                            Obj88_MainLoop:
00005568 12BC 0088                  		move.b	#$88,(a1)	; load chaos emerald object
0000556C 5429 0024                  		addq.b	#2,$24(a1)
00005570 237C 0000 0000 0004        		move.l	#Map_obj88,4(a1)
00005578 337C 03C5 0002             		move.w	#$3C5,2(a1)
0000557E 137C 0004 0001             		move.b	#4,1(a1)
00005584 137C 0001 0018             		move.b	#1,$18(a1)
0000558A 3368 0008 0038             		move.w	8(a0),$38(a1)
00005590 3368 000C 003A             		move.w	$C(a0),$3A(a1)
00005596 1342 001C                  		move.b	d2,$1C(a1)
0000559A 1342 001A                  		move.b	d2,$1A(a1)
0000559E 5202                       		addq.b	#1,d2
000055A0 1343 0026                  		move.b	d3,$26(a1)
000055A4 0603 002A                  		addi.b	#$2A,d3
000055A8 43E9 0040                  		lea	$40(a1),a1
000055AC 51C9 FFBA                  		dbf	d1,Obj88_MainLoop ; repeat 5 more times
000055B0                            
000055B0                            Obj88_Move:				; XREF: Obj88_Index
000055B0 3028 003E                  		move.w	$3E(a0),d0
000055B4 D168 0026                  		add.w	d0,$26(a0)
000055B8 1028 0026                  		move.b	$26(a0),d0
000055BC 4EB9 0000 29DA             		jsr	(CalcSine).l
000055C2 7800                       		moveq	#0,d4
000055C4 1828 003C                  		move.b	$3C(a0),d4
000055C8 C3C4                       		muls.w	d4,d1
000055CA E081                       		asr.l	#8,d1
000055CC C1C4                       		muls.w	d4,d0
000055CE E080                       		asr.l	#8,d0
000055D0 D268 0038                  		add.w	$38(a0),d1
000055D4 D068 003A                  		add.w	$3A(a0),d0
000055D8 3141 0008                  		move.w	d1,8(a0)
000055DC 3140 000C                  		move.w	d0,$C(a0)
000055E0 0C68 2000 003C             		cmpi.w	#$2000,$3C(a0)
000055E6 6700                       		beq.s	loc_55FA
000055E8 0668 0020 003C             		addi.w	#$20,$3C(a0)
000055EE                            
000055EE                            loc_55FA:
000055EE 0C68 2000 003E             		cmpi.w	#$2000,$3E(a0)
000055F4 6700                       		beq.s	loc_5608
000055F6 0668 0020 003E             		addi.w	#$20,$3E(a0)
000055FC                            
000055FC                            loc_5608:
000055FC 0C68 0140 003A             		cmpi.w	#$140,$3A(a0)
00005602 6700                       		beq.s	locret_5614
00005604 5368 003A                  		subq.w	#1,$3A(a0)
00005608                            
00005608                            locret_5614:
00005608 4E75                       		rts	
0000560A                            ; ===========================================================================
0000560A                            ; ---------------------------------------------------------------------------
0000560A                            ; Object 89 - "SONIC THE HEDGEHOG" text	on the ending sequence
0000560A                            ; ---------------------------------------------------------------------------
0000560A                            
0000560A                            Obj89:					; XREF: Obj_Index
0000560A 7000                       		moveq	#0,d0
0000560C 1028 0024                  		move.b	$24(a0),d0
00005610 323B 0000                  		move.w	Obj89_Index(pc,d0.w),d1
00005614 4EFB 1000                  		jmp	Obj89_Index(pc,d1.w)
00005618                            ; ===========================================================================
00005618 0000                       Obj89_Index:	dc.w Obj89_Main-Obj89_Index
0000561A 0000                       		dc.w Obj89_Move-Obj89_Index
0000561C 0000                       		dc.w Obj89_GotoCredits-Obj89_Index
0000561E                            ; ===========================================================================
0000561E                            
0000561E                            Obj89_Main:				; XREF: Obj89_Index
0000561E 5428 0024                  		addq.b	#2,$24(a0)
00005622 317C FFE0 0008             		move.w	#-$20,8(a0)	; object starts	outside	the level boundary
00005628 317C 00D8 000A             		move.w	#$D8,$A(a0)
0000562E 217C 0000 0000 0004        		move.l	#Map_obj89,4(a0)
00005636 317C 05C5 0002             		move.w	#$5C5,2(a0)
0000563C 117C 0000 0001             		move.b	#0,1(a0)
00005642 117C 0000 0018             		move.b	#0,$18(a0)
00005648                            
00005648                            Obj89_Move:				; XREF: Obj89_Index
00005648 0C68 00C0 0008             		cmpi.w	#$C0,8(a0)	; has object reached $C0?
0000564E 6700                       		beq.s	Obj89_Delay	; if yes, branch
00005650 0668 0010 0008             		addi.w	#$10,8(a0)	; move object to the right
00005656 6000 0000                  		bra.w	DisplaySprite
0000565A                            ; ===========================================================================
0000565A                            
0000565A                            Obj89_Delay:				; XREF: Obj89_Move
0000565A 5428 0024                  		addq.b	#2,$24(a0)
0000565E 317C 0078 0030             		move.w	#120,$30(a0)	; set duration for delay (2 seconds)
00005664                            
00005664                            Obj89_GotoCredits:			; XREF: Obj89_Index
00005664 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from duration
00005668 6A00                       		bpl.s	Obj89_Display
0000566A 11FC 001C F600             		move.b	#$1C,($FFFFF600).w ; exit to credits
00005670                            
00005670                            Obj89_Display:
00005670 6000 0000                  		bra.w	DisplaySprite
00005674                            ; ===========================================================================
00005674                            ; ---------------------------------------------------------------------------
00005674                            ; Sprite mappings - Sonic on the ending	sequence
00005674                            ; ---------------------------------------------------------------------------
00005674                            Map_obj87:
00005674                            	include "_maps\obj87.asm"
00005674                            ; ---------------------------------------------------------------------------
00005674                            ; Sprite mappings - Sonic on the ending	sequence
00005674                            ; ---------------------------------------------------------------------------
00005674 0000 0000                  		dc.w byte_5690-Map_obj87, byte_569B-Map_obj87
00005678 0000 0000                  		dc.w byte_56AB-Map_obj87, byte_56B6-Map_obj87
0000567C 0000 0000                  		dc.w byte_56C1-Map_obj87, byte_56CC-Map_obj87
00005680 0000 0000                  		dc.w byte_56DC-Map_obj87, byte_5700-Map_obj87
00005684 02                         byte_5690:	dc.b 2
00005685 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8	; holding emeralds
0000568A 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000568F 03                         byte_569B:	dc.b 3
00005690 FC0D 0010 F0               		dc.b $FC, $D, 0, $10, $F0 ; holding emeralds (glowing)
00005695 EC0B 0000 F8               		dc.b $EC, $B, 0, 0, $F8
0000569A 0C0C 000C F0               		dc.b $C, $C, 0,	$C, $F0
0000569F 02                         byte_56AB:	dc.b 2
000056A0 EC09 0018 F8               		dc.b $EC, 9, 0,	$18, $F8 ; looking up
000056A5 FC0E 001E F0               		dc.b $FC, $E, 0, $1E, $F0
000056AA 02                         byte_56B6:	dc.b 2
000056AB EC09 002A F8               		dc.b $EC, 9, 0,	$2A, $F8 ; confused
000056B0 FC0E 0030 F0               		dc.b $FC, $E, 0, $30, $F0
000056B5 02                         byte_56C1:	dc.b 2
000056B6 EC09 082A F0               		dc.b $EC, 9, 8,	$2A, $F0 ; confused #2
000056BB FC0E 0830 F0               		dc.b $FC, $E, 8, $30, $F0
000056C0 03                         byte_56CC:	dc.b 3
000056C1 EC06 003C F0               		dc.b $EC, 6, 0,	$3C, $F0 ; leaping
000056C6 EC06 083C 00               		dc.b $EC, 6, 8,	$3C, 0
000056CB 040D 0042 F0               		dc.b 4,	$D, 0, $42, $F0
000056D0 07                         byte_56DC:	dc.b 7
000056D1 B20C 004A F8               		dc.b $B2, $C, 0, $4A, $F8 ; leaping #2
000056D6 BA0F 004E F0               		dc.b $BA, $F, 0, $4E, $F0
000056DB BA05 005E 10               		dc.b $BA, 5, 0,	$5E, $10
000056E0 CA02 0062 10               		dc.b $CA, 2, 0,	$62, $10
000056E5 DA0C 0065 F0               		dc.b $DA, $C, 0, $65, $F0
000056EA E208 0069 F8               		dc.b $E2, 8, 0,	$69, $F8
000056EF EA05 006C F8               		dc.b $EA, 5, 0,	$6C, $F8
000056F4 18                         byte_5700:	dc.b $18
000056F5 800F 0070 F8               		dc.b $80, $F, 0, $70, $F8 ; leaping #3
000056FA 900B 0080 E0               		dc.b $90, $B, 0, $80, $E0
000056FF 900B 008C 18               		dc.b $90, $B, 0, $8C, $18
00005704 980B 0098 30               		dc.b $98, $B, 0, $98, $30
00005709 A00F 00A4 58               		dc.b $A0, $F, 0, $A4, $58
0000570E 8800 00B4 F0               		dc.b $88, 0, 0,	$B4, $F0
00005713 8005 00B5 18               		dc.b $80, 5, 0,	$B5, $18
00005718 A00F 00B9 F8               		dc.b $A0, $F, 0, $B9, $F8
0000571D B00B 00C9 E0               		dc.b $B0, $B, 0, $C9, $E0
00005722 B80F 00D5 38               		dc.b $B8, $F, 0, $D5, $38
00005727 A805 00E5 48               		dc.b $A8, 5, 0,	$E5, $48
0000572C C002 00E9 58               		dc.b $C0, 2, 0,	$E9, $58
00005731 C00F 00EC F8               		dc.b $C0, $F, 0, $EC, $F8
00005736 B80F 00FC 18               		dc.b $B8, $F, 0, $FC, $18
0000573B B008 010C 18               		dc.b $B0, 8, 1,	$C, $18
00005740 D80D 010F 30               		dc.b $D8, $D, 1, $F, $30
00005745 D808 0117 18               		dc.b $D8, 8, 1,	$17, $18
0000574A D80F 011A D8               		dc.b $D8, $F, 1, $1A, $D8
0000574F E00D 012A F8               		dc.b $E0, $D, 1, $2A, $F8
00005754 E000 0132 28               		dc.b $E0, 0, 1,	$32, $28
00005759 D004 0133 E0               		dc.b $D0, 4, 1,	$33, $E0
0000575E E805 0135 C8               		dc.b $E8, 5, 1,	$35, $C8
00005763 F80C 0139 C8               		dc.b $F8, $C, 1, $39, $C8
00005768 F006 013D F8               		dc.b $F0, 6, 1,	$3D, $F8
0000576E 00                         		even
0000576E 00                         		even
0000576E                            
0000576E                            ; ---------------------------------------------------------------------------
0000576E                            ; Sprite mappings - chaos emeralds on the ending sequence
0000576E                            ; ---------------------------------------------------------------------------
0000576E                            Map_obj88:
0000576E                            	include "_maps\obj88.asm"
0000576E                            ; ---------------------------------------------------------------------------
0000576E                            ; Sprite mappings - chaos emeralds on the ending sequence
0000576E                            ; ---------------------------------------------------------------------------
0000576E 0000 0000                  		dc.w byte_5788-Map_obj88, byte_578E-Map_obj88
00005772 0000 0000                  		dc.w byte_5794-Map_obj88, byte_579A-Map_obj88
00005776 0000 0000                  		dc.w byte_57A0-Map_obj88, byte_57A6-Map_obj88
0000577A 0000                       		dc.w byte_57AC-Map_obj88
0000577C 01                         byte_5788:	dc.b 1
0000577D F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00005782 01                         byte_578E:	dc.b 1
00005783 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00005788 01                         byte_5794:	dc.b 1
00005789 F805 4010 F8               		dc.b $F8, 5, $40, $10, $F8
0000578E 01                         byte_579A:	dc.b 1
0000578F F805 2018 F8               		dc.b $F8, 5, $20, $18, $F8
00005794 01                         byte_57A0:	dc.b 1
00005795 F805 4014 F8               		dc.b $F8, 5, $40, $14, $F8
0000579A 01                         byte_57A6:	dc.b 1
0000579B F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
000057A0 01                         byte_57AC:	dc.b 1
000057A1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
000057A6                            		even
000057A6                            		even
000057A6                            
000057A6                            ; ---------------------------------------------------------------------------
000057A6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057A6                            ; ---------------------------------------------------------------------------
000057A6                            Map_obj89:
000057A6                            	include "_maps\obj89.asm"
000057A6                            ; ---------------------------------------------------------------------------
000057A6                            ; Sprite mappings - "SONIC THE HEDGEHOG" text on the ending sequence
000057A6                            ; ---------------------------------------------------------------------------
000057A6 0000                       		dc.w byte_57B4-Map_obj89
000057A8 03                         byte_57B4:	dc.b 3
000057A9 F00F 0000 D0               		dc.b $F0, $F, 0, 0, $D0
000057AE F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
000057B3 F00F 0020 10               		dc.b $F0, $F, 0, $20, $10
000057B8                            		even
000057B8                            		even
000057B8                            
000057B8                            ; ===========================================================================
000057B8                            ; ---------------------------------------------------------------------------
000057B8                            ; Credits ending sequence
000057B8                            ; ---------------------------------------------------------------------------
000057B8                            
000057B8                            Credits:				; XREF: GameModeArray
000057B8 6100 BE24                  		bsr.w	ClearPLC
000057BC 6100 C694                  		bsr.w	Pal_FadeFrom
000057C0 4DF9 00C0 0004             		lea	($C00004).l,a6
000057C6 3CBC 8004                  		move.w	#$8004,(a6)
000057CA 3CBC 8230                  		move.w	#$8230,(a6)
000057CE 3CBC 8407                  		move.w	#$8407,(a6)
000057D2 3CBC 9001                  		move.w	#$9001,(a6)
000057D6 3CBC 9200                  		move.w	#$9200,(a6)
000057DA 3CBC 8B03                  		move.w	#$8B03,(a6)
000057DE 3CBC 8720                  		move.w	#$8720,(a6)
000057E2 4238 F64E                  		clr.b	($FFFFF64E).w
000057E6 6100 BADC                  		bsr.w	ClearScreen
000057EA 43F8 D000                  		lea	($FFFFD000).w,a1
000057EE 7000                       		moveq	#0,d0
000057F0 323C 07FF                  		move.w	#$7FF,d1
000057F4                            
000057F4                            Cred_ClrObjRam:
000057F4 22C0                       		move.l	d0,(a1)+
000057F6 51C9 FFFC                  		dbf	d1,Cred_ClrObjRam ; clear object RAM
000057FA                            
000057FA 23FC 7400 0002 00C0 0004   		move.l	#$74000002,($C00004).l
00005804 41F9 0000 0000             		lea	(Nem_CreditText).l,a0 ;	load credits alphabet patterns
0000580A 6100 BC34                  		bsr.w	NemDec
0000580E 43F8 FB80                  		lea	($FFFFFB80).w,a1
00005812 7000                       		moveq	#0,d0
00005814 323C 001F                  		move.w	#$1F,d1
00005818                            
00005818                            Cred_ClrPallet:
00005818 22C0                       		move.l	d0,(a1)+
0000581A 51C9 FFFC                  		dbf	d1,Cred_ClrPallet ; fill pallet	with black ($0000)
0000581E                            
0000581E 7003                       		moveq	#3,d0
00005820 6100 C8DA                  		bsr.w	PalLoad1	; load Sonic's pallet
00005824 11FC 008A D080             		move.b	#$8A,($FFFFD080).w ; load credits object
0000582A 4EB9 0000 0000             		jsr	ObjectsLoad
00005830 4EB9 0000 0000             		jsr	BuildSprites
00005836 6100 0000                  		bsr.w	EndingDemoLoad
0000583A 7000                       		moveq	#0,d0
0000583C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00005840 E948                       		lsl.w	#4,d0
00005842 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2 ;	load block mappings etc
00005848 45F2 0000                  		lea	(a2,d0.w),a2
0000584C 7000                       		moveq	#0,d0
0000584E 1012                       		move.b	(a2),d0
00005850 6700                       		beq.s	loc_5862
00005852 6100 BD2C                  		bsr.w	LoadPLC		; load level patterns
00005856                            
00005856                            loc_5862:
00005856 7001                       		moveq	#1,d0
00005858 6100 BD26                  		bsr.w	LoadPLC		; load standard	level patterns
0000585C 31FC 0078 F614             		move.w	#120,($FFFFF614).w ; display a credit for 2 seconds
00005862 6100 C548                  		bsr.w	Pal_FadeTo
00005866                            
00005866                            Cred_WaitLoop:
00005866 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
0000586C 6100 D13A                  		bsr.w	DelayProgram
00005870 6100 BD7A                  		bsr.w	RunPLC_RAM
00005874 4A78 F614                  		tst.w	($FFFFF614).w	; have 2 seconds elapsed?
00005878 66EC                       		bne.s	Cred_WaitLoop	; if not, branch
0000587A 4AB8 F680                  		tst.l	($FFFFF680).w	; have level gfx finished decompressing?
0000587E 66E6                       		bne.s	Cred_WaitLoop	; if not, branch
00005880 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	the credits finished?
00005886 6700 0000                  		beq.w	TryAgainEnd	; if yes, branch
0000588A 4E75                       		rts	
0000588C                            
0000588C                            ; ---------------------------------------------------------------------------
0000588C                            ; Ending sequence demo loading subroutine
0000588C                            ; ---------------------------------------------------------------------------
0000588C                            
0000588C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000588C                            
0000588C                            
0000588C                            EndingDemoLoad:				; XREF: Credits
0000588C 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
00005890 0240 000F                  		andi.w	#$F,d0
00005894 D040                       		add.w	d0,d0
00005896 303B 0000                  		move.w	EndDemo_Levels(pc,d0.w),d0 ; load level	array
0000589A 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level from level	array
0000589E 5278 FFF4                  		addq.w	#1,($FFFFFFF4).w
000058A2 0C78 0009 FFF4             		cmpi.w	#9,($FFFFFFF4).w ; have	credits	finished?
000058A8 6400                       		bcc.s	EndDemo_Exit	; if yes, branch
000058AA 31FC 8001 FFF0             		move.w	#$8001,($FFFFFFF0).w ; force demo mode
000058B0 11FC 0008 F600             		move.b	#8,($FFFFF600).w ; set game mode to 08 (demo)
000058B6 11FC 0003 FE12             		move.b	#3,($FFFFFE12).w ; set lives to	3
000058BC 7000                       		moveq	#0,d0
000058BE 31C0 FE20                  		move.w	d0,($FFFFFE20).w ; clear rings
000058C2 21C0 FE22                  		move.l	d0,($FFFFFE22).w ; clear time
000058C6 21C0 FE26                  		move.l	d0,($FFFFFE26).w ; clear score
000058CA 11C0 FE30                  		move.b	d0,($FFFFFE30).w ; clear lamppost counter
000058CE 0C78 0004 FFF4             		cmpi.w	#4,($FFFFFFF4).w ; is SLZ demo running?
000058D4 6600                       		bne.s	EndDemo_Exit	; if not, branch
000058D6 43F9 0000 0000             		lea	(EndDemo_LampVar).l,a1 ; load lamppost variables
000058DC 45F8 FE30                  		lea	($FFFFFE30).w,a2
000058E0 303C 0008                  		move.w	#8,d0
000058E4                            
000058E4                            EndDemo_LampLoad:
000058E4 24D9                       		move.l	(a1)+,(a2)+
000058E6 51C8 FFFC                  		dbf	d0,EndDemo_LampLoad
000058EA                            
000058EA                            EndDemo_Exit:
000058EA 4E75                       		rts	
000058EC                            ; End of function EndingDemoLoad
000058EC                            
000058EC                            ; ===========================================================================
000058EC                            ; ---------------------------------------------------------------------------
000058EC                            ; Levels used in the end sequence demos
000058EC                            ; ---------------------------------------------------------------------------
000058EC                            EndDemo_Levels:	incbin	misc\dm_ord2.bin
000058FC                            
000058FC                            ; ---------------------------------------------------------------------------
000058FC                            ; Lamppost variables in the end sequence demo (Star Light Zone)
000058FC                            ; ---------------------------------------------------------------------------
000058FC                            EndDemo_LampVar:
000058FC 0101                       		dc.b 1,	1		; XREF: EndingDemoLoad
000058FE 0A00 062C 000D             		dc.w $A00, $62C, $D
00005904 0000 0000                  		dc.l 0
00005908 0000                       		dc.b 0,	0
0000590A 0800 0957 05CC 04AB 03A6+  		dc.w $800, $957, $5CC, $4AB, $3A6, 0, $28C, 0, 0, $308
0000591E 0101                       		dc.b 1,	1
00005920                            ; ===========================================================================
00005920                            ; ---------------------------------------------------------------------------
00005920                            ; "TRY AGAIN" and "END"	screens
00005920                            ; ---------------------------------------------------------------------------
00005920                            
00005920                            TryAgainEnd:				; XREF: Credits
00005920 6100 BCBC                  		bsr.w	ClearPLC
00005924 6100 C52C                  		bsr.w	Pal_FadeFrom
00005928 4DF9 00C0 0004             		lea	($C00004).l,a6
0000592E 3CBC 8004                  		move.w	#$8004,(a6)
00005932 3CBC 8230                  		move.w	#$8230,(a6)
00005936 3CBC 8407                  		move.w	#$8407,(a6)
0000593A 3CBC 9001                  		move.w	#$9001,(a6)
0000593E 3CBC 9200                  		move.w	#$9200,(a6)
00005942 3CBC 8B03                  		move.w	#$8B03,(a6)
00005946 3CBC 8720                  		move.w	#$8720,(a6)
0000594A 4238 F64E                  		clr.b	($FFFFF64E).w
0000594E 6100 B974                  		bsr.w	ClearScreen
00005952 43F8 D000                  		lea	($FFFFD000).w,a1
00005956 7000                       		moveq	#0,d0
00005958 323C 07FF                  		move.w	#$7FF,d1
0000595C                            
0000595C                            TryAg_ClrObjRam:
0000595C 22C0                       		move.l	d0,(a1)+
0000595E 51C9 FFFC                  		dbf	d1,TryAg_ClrObjRam ; clear object RAM
00005962                            
00005962 701D                       		moveq	#$1D,d0
00005964 6100 BD86                  		bsr.w	RunPLC_ROM	; load "TRY AGAIN" or "END" patterns
00005968 43F8 FB80                  		lea	($FFFFFB80).w,a1
0000596C 7000                       		moveq	#0,d0
0000596E 323C 001F                  		move.w	#$1F,d1
00005972                            
00005972                            TryAg_ClrPallet:
00005972 22C0                       		move.l	d0,(a1)+
00005974 51C9 FFFC                  		dbf	d1,TryAg_ClrPallet ; fill pallet with black ($0000)
00005978                            
00005978 7013                       		moveq	#$13,d0
0000597A 6100 C780                  		bsr.w	PalLoad1	; load ending pallet
0000597E 4278 FBC0                  		clr.w	($FFFFFBC0).w
00005982 11FC 008B D080             		move.b	#$8B,($FFFFD080).w ; load Eggman object
00005988 4EB9 0000 0000             		jsr	ObjectsLoad
0000598E 4EB9 0000 0000             		jsr	BuildSprites
00005994 31FC 0708 F614             		move.w	#1800,($FFFFF614).w ; show screen for 30 seconds
0000599A 6100 C410                  		bsr.w	Pal_FadeTo
0000599E                            
0000599E                            ; ---------------------------------------------------------------------------
0000599E                            ; "TRY AGAIN" and "END"	screen main loop
0000599E                            ; ---------------------------------------------------------------------------
0000599E                            TryAg_MainLoop:
0000599E 6100 BA08                  		bsr.w	PauseGame
000059A2 11FC 0004 F62A             		move.b	#4,($FFFFF62A).w
000059A8 6100 CFFE                  		bsr.w	DelayProgram
000059AC 4EB9 0000 0000             		jsr	ObjectsLoad
000059B2 4EB9 0000 0000             		jsr	BuildSprites
000059B8 0238 0080 F605             		andi.b	#$80,($FFFFF605).w ; is	Start button pressed?
000059BE 6600                       		bne.s	TryAg_Exit	; if yes, branch
000059C0 4A78 F614                  		tst.w	($FFFFF614).w	; has 30 seconds elapsed?
000059C4 6700                       		beq.s	TryAg_Exit	; if yes, branch
000059C6 0C38 001C F600             		cmpi.b	#$1C,($FFFFF600).w
000059CC 67D0                       		beq.s	TryAg_MainLoop
000059CE                            
000059CE                            TryAg_Exit:
000059CE 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; go to Sega screen
000059D4 4E75                       		rts	
000059D6                            
000059D6                            ; ===========================================================================
000059D6                            ; ---------------------------------------------------------------------------
000059D6                            ; Object 8B - Eggman on "TRY AGAIN" and "END"	screens
000059D6                            ; ---------------------------------------------------------------------------
000059D6                            
000059D6                            Obj8B:					; XREF: Obj_Index
000059D6 7000                       		moveq	#0,d0
000059D8 1028 0024                  		move.b	$24(a0),d0
000059DC 323B 0000                  		move.w	Obj8B_Index(pc,d0.w),d1
000059E0 4EBB 1000                  		jsr	Obj8B_Index(pc,d1.w)
000059E4 4EF9 0000 0000             		jmp	DisplaySprite
000059EA                            ; ===========================================================================
000059EA 0000                       Obj8B_Index:	dc.w Obj8B_Main-Obj8B_Index
000059EC 0000                       		dc.w Obj8B_Animate-Obj8B_Index
000059EE 0000                       		dc.w Obj8B_Juggle-Obj8B_Index
000059F0 0000                       		dc.w loc_5A8E-Obj8B_Index
000059F2                            ; ===========================================================================
000059F2                            
000059F2                            Obj8B_Main:				; XREF: Obj8B_Index
000059F2 5428 0024                  		addq.b	#2,$24(a0)
000059F6 317C 0120 0008             		move.w	#$120,8(a0)
000059FC 317C 00F4 000A             		move.w	#$F4,$A(a0)
00005A02 217C 0000 0000 0004        		move.l	#Map_obj8B,4(a0)
00005A0A 317C 03E1 0002             		move.w	#$3E1,2(a0)
00005A10 117C 0000 0001             		move.b	#0,1(a0)
00005A16 117C 0002 0018             		move.b	#2,$18(a0)
00005A1C 117C 0002 001C             		move.b	#2,$1C(a0)	; use "END" animation
00005A22 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all 6 emeralds?
00005A28 6700                       		beq.s	Obj8B_Animate	; if yes, branch
00005A2A 11FC 008A D0C0             		move.b	#$8A,($FFFFD0C0).w ; load credits object
00005A30 31FC 0009 FFF4             		move.w	#9,($FFFFFFF4).w ; use "TRY AGAIN" text
00005A36 11FC 008C D800             		move.b	#$8C,($FFFFD800).w ; load emeralds object on "TRY AGAIN" screen
00005A3C 117C 0000 001C             		move.b	#0,$1C(a0)	; use "TRY AGAIN" animation
00005A42                            
00005A42                            Obj8B_Animate:				; XREF: Obj8B_Index
00005A42 43F9 0000 0000             		lea	(Ani_obj8B).l,a1
00005A48 4EF9 0000 0000             		jmp	AnimateSprite
00005A4E                            ; ===========================================================================
00005A4E                            
00005A4E                            Obj8B_Juggle:				; XREF: Obj8B_Index
00005A4E 5428 0024                  		addq.b	#2,$24(a0)
00005A52 7002                       		moveq	#2,d0
00005A54 0828 0000 001C             		btst	#0,$1C(a0)
00005A5A 6700                       		beq.s	loc_5A6A
00005A5C 4440                       		neg.w	d0
00005A5E                            
00005A5E                            loc_5A6A:
00005A5E 43F8 D800                  		lea	($FFFFD800).w,a1
00005A62 7205                       		moveq	#5,d1
00005A64                            
00005A64                            loc_5A70:
00005A64 1340 003E                  		move.b	d0,$3E(a1)
00005A68 3400                       		move.w	d0,d2
00005A6A E742                       		asl.w	#3,d2
00005A6C D529 0026                  		add.b	d2,$26(a1)
00005A70 43E9 0040                  		lea	$40(a1),a1
00005A74 51C9 FFEE                  		dbf	d1,loc_5A70
00005A78 5228 001A                  		addq.b	#1,$1A(a0)
00005A7C 317C 0070 0030             		move.w	#112,$30(a0)
00005A82                            
00005A82                            loc_5A8E:				; XREF: Obj8B_Index
00005A82 5368 0030                  		subq.w	#1,$30(a0)
00005A86 6A00                       		bpl.s	locret_5AA0
00005A88 0868 0000 001C             		bchg	#0,$1C(a0)
00005A8E 117C 0002 0024             		move.b	#2,$24(a0)
00005A94                            
00005A94                            locret_5AA0:
00005A94 4E75                       		rts	
00005A96                            ; ===========================================================================
00005A96                            Ani_obj8B:
00005A96                            	include "_anim\obj8B.asm"
00005A96                            ; ---------------------------------------------------------------------------
00005A96                            ; Animation script - Eggman on the "TRY AGAIN" and "END" screens
00005A96                            ; ---------------------------------------------------------------------------
00005A96 0000                       		dc.w byte_5AA8-Ani_obj8B
00005A98 0000                       		dc.w byte_5AAC-Ani_obj8B
00005A9A 0000                       		dc.w byte_5AB0-Ani_obj8B
00005A9C 0500 FC01                  byte_5AA8:	dc.b 5,	0, $FC,	1
00005AA0 0502 FC03                  byte_5AAC:	dc.b 5,	2, $FC,	3
00005AA4 0704 0506 0504 0506 0504+  byte_5AB0:	dc.b 7,	4, 5, 6, 5, 4, 5, 6, 5,	4, 5, 6, 5, 7, 5, 6, 5,	$FF
00005AB6                            		even
00005AB6                            		even
00005AB6                            
00005AB6                            ; ===========================================================================
00005AB6                            ; ---------------------------------------------------------------------------
00005AB6                            ; Object 8C - chaos emeralds on	the "TRY AGAIN"	screen
00005AB6                            ; ---------------------------------------------------------------------------
00005AB6                            
00005AB6                            Obj8C:					; XREF: Obj_Index
00005AB6 7000                       		moveq	#0,d0
00005AB8 1028 0024                  		move.b	$24(a0),d0
00005ABC 323B 0000                  		move.w	Obj8C_Index(pc,d0.w),d1
00005AC0 4EBB 1000                  		jsr	Obj8C_Index(pc,d1.w)
00005AC4 4EF9 0000 0000             		jmp	DisplaySprite
00005ACA                            ; ===========================================================================
00005ACA 0000                       Obj8C_Index:	dc.w Obj8C_Main-Obj8C_Index
00005ACC 0000                       		dc.w Obj8C_Move-Obj8C_Index
00005ACE                            ; ===========================================================================
00005ACE                            
00005ACE                            Obj8C_Main:				; XREF: Obj8C_Index
00005ACE 2248                       		movea.l	a0,a1
00005AD0 7400                       		moveq	#0,d2
00005AD2 7600                       		moveq	#0,d3
00005AD4 7205                       		moveq	#5,d1
00005AD6 9238 FE57                  		sub.b	($FFFFFE57).w,d1
00005ADA                            
00005ADA                            Obj8C_MakeEms:				; XREF: loc_5B42
00005ADA 12BC 008C                  		move.b	#$8C,(a1)	; load emerald object
00005ADE 5429 0024                  		addq.b	#2,$24(a1)
00005AE2 237C 0000 576E 0004        		move.l	#Map_obj88,4(a1)
00005AEA 337C 03C5 0002             		move.w	#$3C5,2(a1)
00005AF0 137C 0000 0001             		move.b	#0,1(a1)
00005AF6 137C 0001 0018             		move.b	#1,$18(a1)
00005AFC 337C 0104 0008             		move.w	#$104,8(a1)
00005B02 337C 0120 0038             		move.w	#$120,$38(a1)
00005B08 337C 00EC 000A             		move.w	#$EC,$A(a1)
00005B0E 3369 000A 003A             		move.w	$A(a1),$3A(a1)
00005B14 137C 001C 003C             		move.b	#$1C,$3C(a1)
00005B1A 47F8 FE58                  		lea	($FFFFFE58).w,a3
00005B1E                            
00005B1E                            Obj8C_ChkEms:
00005B1E 7000                       		moveq	#0,d0
00005B20 1038 FE57                  		move.b	($FFFFFE57).w,d0
00005B24 5340                       		subq.w	#1,d0
00005B26 6500                       		bcs.s	loc_5B42
00005B28                            
00005B28                            Obj8C_ChkEmLoop:
00005B28 B433 0000                  		cmp.b	(a3,d0.w),d2
00005B2C 6600                       		bne.s	loc_5B3E
00005B2E 5202                       		addq.b	#1,d2
00005B30 60EC                       		bra.s	Obj8C_ChkEms
00005B32                            ; ===========================================================================
00005B32                            
00005B32                            loc_5B3E:
00005B32 51C8 FFF4                  		dbf	d0,Obj8C_ChkEmLoop ; checks which emeralds you have
00005B36                            
00005B36                            loc_5B42:
00005B36 1342 001A                  		move.b	d2,$1A(a1)
00005B3A 5229 001A                  		addq.b	#1,$1A(a1)
00005B3E 5202                       		addq.b	#1,d2
00005B40 137C 0080 0026             		move.b	#$80,$26(a1)
00005B46 1343 001E                  		move.b	d3,$1E(a1)
00005B4A 1343 001F                  		move.b	d3,$1F(a1)
00005B4E 0643 000A                  		addi.w	#$A,d3
00005B52 43E9 0040                  		lea	$40(a1),a1
00005B56 51C9 FF82                  		dbf	d1,Obj8C_MakeEms
00005B5A                            
00005B5A                            Obj8C_Move:				; XREF: Obj8C_Index
00005B5A 4A68 003E                  		tst.w	$3E(a0)
00005B5E 6700                       		beq.s	locret_5BBA
00005B60 4A28 001E                  		tst.b	$1E(a0)
00005B64 6700                       		beq.s	loc_5B78
00005B66 5328 001E                  		subq.b	#1,$1E(a0)
00005B6A 6600                       		bne.s	loc_5B80
00005B6C                            
00005B6C                            loc_5B78:
00005B6C 3028 003E                  		move.w	$3E(a0),d0
00005B70 D168 0026                  		add.w	d0,$26(a0)
00005B74                            
00005B74                            loc_5B80:
00005B74 1028 0026                  		move.b	$26(a0),d0
00005B78 6700                       		beq.s	loc_5B8C
00005B7A 0C00 0080                  		cmpi.b	#$80,d0
00005B7E 6600                       		bne.s	loc_5B96
00005B80                            
00005B80                            loc_5B8C:
00005B80 4268 003E                  		clr.w	$3E(a0)
00005B84 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00005B8A                            
00005B8A                            loc_5B96:
00005B8A 4EB9 0000 29DA             		jsr	(CalcSine).l
00005B90 7800                       		moveq	#0,d4
00005B92 1828 003C                  		move.b	$3C(a0),d4
00005B96 C3C4                       		muls.w	d4,d1
00005B98 E081                       		asr.l	#8,d1
00005B9A C1C4                       		muls.w	d4,d0
00005B9C E080                       		asr.l	#8,d0
00005B9E D268 0038                  		add.w	$38(a0),d1
00005BA2 D068 003A                  		add.w	$3A(a0),d0
00005BA6 3141 0008                  		move.w	d1,8(a0)
00005BAA 3140 000A                  		move.w	d0,$A(a0)
00005BAE                            
00005BAE                            locret_5BBA:
00005BAE 4E75                       		rts	
00005BB0                            ; ===========================================================================
00005BB0                            ; ---------------------------------------------------------------------------
00005BB0                            ; Sprite mappings - Eggman on	the "TRY AGAIN"	and "END" screens
00005BB0                            ; ---------------------------------------------------------------------------
00005BB0                            Map_obj8B:
00005BB0                            	include "_maps\obj8B.asm"
00005BB0                            ; ---------------------------------------------------------------------------
00005BB0                            ; Sprite mappings - Robotnik on	the "TRY AGAIN"	and "END" screens
00005BB0                            ; ---------------------------------------------------------------------------
00005BB0 0000 0000                  		dc.w byte_5BCC-Map_obj8B, byte_5BF5-Map_obj8B
00005BB4 0000 0000                  		dc.w byte_5C1E-Map_obj8B, byte_5C47-Map_obj8B
00005BB8 0000 0000                  		dc.w byte_5C70-Map_obj8B, byte_5CAD-Map_obj8B
00005BBC 0000 0000                  		dc.w byte_5CE0-Map_obj8B, byte_5D13-Map_obj8B
00005BC0 08                         byte_5BCC:	dc.b 8
00005BC1 E905 0000 F0               		dc.b $E9, 5, 0,	0, $F0
00005BC6 F90C 0004 E0               		dc.b $F9, $C, 0, 4, $E0
00005BCB E904 0008 00               		dc.b $E9, 4, 0,	8, 0
00005BD0 F10D 000A 00               		dc.b $F1, $D, 0, $A, 0
00005BD5 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005BDA 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005BDF 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005BE4 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005BE9 08                         byte_5BF5:	dc.b 8
00005BEA E80D 0012 E0               		dc.b $E8, $D, 0, $12, $E0
00005BEF F808 001A E8               		dc.b $F8, 8, 0,	$1A, $E8
00005BF4 E805 0800 00               		dc.b $E8, 5, 8,	0, 0
00005BF9 F80C 0804 00               		dc.b $F8, $C, 8, 4, 0
00005BFE 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C03 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C08 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C0D 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C12 08                         byte_5C1E:	dc.b 8
00005C13 E904 0808 F0               		dc.b $E9, 4, 8,	8, $F0
00005C18 F10D 080A E0               		dc.b $F1, $D, 8, $A, $E0
00005C1D E905 0800 00               		dc.b $E9, 5, 8,	0, 0
00005C22 F90C 0804 00               		dc.b $F9, $C, 8, 4, 0
00005C27 0106 0023 F0               		dc.b 1,	6, 0, $23, $F0
00005C2C 0106 0823 00               		dc.b 1,	6, 8, $23, 0
00005C31 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C36 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C3B 08                         byte_5C47:	dc.b 8
00005C3C E805 0000 F0               		dc.b $E8, 5, 0,	0, $F0
00005C41 F80C 0004 E0               		dc.b $F8, $C, 0, 4, $E0
00005C46 E80D 0812 00               		dc.b $E8, $D, 8, $12, 0
00005C4B F808 081A 00               		dc.b $F8, 8, 8,	$1A, 0
00005C50 0006 001D F0               		dc.b 0,	6, 0, $1D, $F0
00005C55 0006 081D 00               		dc.b 0,	6, 8, $1D, 0
00005C5A 1804 0029 EC               		dc.b $18, 4, 0,	$29, $EC
00005C5F 1804 0829 04               		dc.b $18, 4, 8,	$29, 4
00005C64 0C                         byte_5C70:	dc.b $C
00005C65 ED0A 002B E8               		dc.b $ED, $A, 0, $2B, $E8
00005C6A F500 0034 E0               		dc.b $F5, 0, 0,	$34, $E0
00005C6F 0504 0035 F0               		dc.b 5,	4, 0, $35, $F0
00005C74 0D08 0037 E8               		dc.b $D, 8, 0, $37, $E8
00005C79 ED0A 082B 00               		dc.b $ED, $A, 8, $2B, 0
00005C7E F500 0834 18               		dc.b $F5, 0, 8,	$34, $18
00005C83 0504 0835 00               		dc.b 5,	4, 8, $35, 0
00005C88 0D08 0837 00               		dc.b $D, 8, 8, $37, 0
00005C8D 100D 0073 E0               		dc.b $10, $D, 0, $73, $E0
00005C92 100D 007B 00               		dc.b $10, $D, 0, $7B, 0
00005C97 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005C9C 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005CA1 0A                         byte_5CAD:	dc.b $A
00005CA2 D207 003A F0               		dc.b $D2, 7, 0,	$3A, $F0
00005CA7 DA00 0042 E8               		dc.b $DA, 0, 0,	$42, $E8
00005CAC F207 0043 F0               		dc.b $F2, 7, 0,	$43, $F0
00005CB1 D207 083A 00               		dc.b $D2, 7, 8,	$3A, 0
00005CB6 DA00 0842 10               		dc.b $DA, 0, 8,	$42, $10
00005CBB F207 0843 00               		dc.b $F2, 7, 8,	$43, 0
00005CC0 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CC5 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CCA 1C0C 005F E0               		dc.b $1C, $C, 0, $5F, $E0
00005CCF 1C0C 085F 00               		dc.b $1C, $C, 8, $5F, 0
00005CD4 0A                         byte_5CE0:	dc.b $A
00005CD5 C40B 004B E8               		dc.b $C4, $B, 0, $4B, $E8
00005CDA E408 0057 E8               		dc.b $E4, 8, 0,	$57, $E8
00005CDF EC00 005A F0               		dc.b $EC, 0, 0,	$5A, $F0
00005CE4 C40B 084B 00               		dc.b $C4, $B, 8, $4B, 0
00005CE9 E408 0857 00               		dc.b $E4, 8, 8,	$57, 0
00005CEE EC00 085A 08               		dc.b $EC, 0, 8,	$5A, 8
00005CF3 100D 0067 E8               		dc.b $10, $D, 0, $67, $E8
00005CF8 1005 006F 08               		dc.b $10, 5, 0,	$6F, 8
00005CFD 1C0C 0063 E0               		dc.b $1C, $C, 0, $63, $E0
00005D02 1C0C 0863 00               		dc.b $1C, $C, 8, $63, 0
00005D07 0C                         byte_5D13:	dc.b $C
00005D08 F40A 002B E8               		dc.b $F4, $A, 0, $2B, $E8
00005D0D FC00 0034 E0               		dc.b $FC, 0, 0,	$34, $E0
00005D12 0C04 0035 F0               		dc.b $C, 4, 0, $35, $F0
00005D17 1408 0037 E8               		dc.b $14, 8, 0,	$37, $E8
00005D1C F40A 082B 00               		dc.b $F4, $A, 8, $2B, 0
00005D21 FC00 0834 18               		dc.b $FC, 0, 8,	$34, $18
00005D26 0C04 0835 00               		dc.b $C, 4, 8, $35, 0
00005D2B 1408 0837 00               		dc.b $14, 8, 8,	$37, 0
00005D30 180C 0083 E0               		dc.b $18, $C, 0, $83, $E0
00005D35 180C 0087 00               		dc.b $18, $C, 0, $87, 0
00005D3A 1C0C 005B E0               		dc.b $1C, $C, 0, $5B, $E0
00005D3F 1C0C 085B 00               		dc.b $1C, $C, 8, $5B, 0
00005D44                            		even
00005D44                            		even
00005D44                            
00005D44                            ; ---------------------------------------------------------------------------
00005D44                            ; Ending sequence demos
00005D44                            ; ---------------------------------------------------------------------------
00005D44                            Demo_EndGHZ1:	incbin	demodata\e_ghz1.bin
00005D72                            		even
00005D72                            Demo_EndMZ:	incbin	demodata\e_mz.bin
00005DB2                            		even
00005DB2                            Demo_EndSYZ:	incbin	demodata\e_syz.bin
00005DE2                            		even
00005DE2                            Demo_EndLZ:	incbin	demodata\e_lz.bin
00005E12                            		even
00005E12                            Demo_EndSLZ:	incbin	demodata\e_slz.bin
00005E32                            		even
00005E32                            Demo_EndSBZ1:	incbin	demodata\e_sbz1.bin
00005E52                            		even
00005E52                            Demo_EndSBZ2:	incbin	demodata\e_sbz2.bin
00005E82                            		even
00005E82                            Demo_EndGHZ2:	incbin	demodata\e_ghz2.bin
00005EB2                            		even
00005EB2                            
00005EB2                            ; ---------------------------------------------------------------------------
00005EB2                            ; Subroutine to	load level boundaries and start	locations
00005EB2                            ; ---------------------------------------------------------------------------
00005EB2                            
00005EB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00005EB2                            
00005EB2                            
00005EB2                            LevelSizeLoad:				; XREF: TitleScreen; Level; EndingSequence
00005EB2 7000                       		moveq	#0,d0
00005EB4 11C0 F740                  		move.b	d0,($FFFFF740).w
00005EB8 11C0 F741                  		move.b	d0,($FFFFF741).w
00005EBC 11C0 F746                  		move.b	d0,($FFFFF746).w
00005EC0 11C0 F748                  		move.b	d0,($FFFFF748).w
00005EC4 11C0 F742                  		move.b	d0,($FFFFF742).w
00005EC8 3038 FE10                  		move.w	($FFFFFE10).w,d0
00005ECC ED08                       		lsl.b	#6,d0
00005ECE E848                       		lsr.w	#4,d0
00005ED0 3200                       		move.w	d0,d1
00005ED2 D040                       		add.w	d0,d0
00005ED4 D041                       		add.w	d1,d0
00005ED6 41FB 0000                  		lea	LevelSizeArray(pc,d0.w),a0 ; load level	boundaries
00005EDA 3018                       		move.w	(a0)+,d0
00005EDC 31C0 F730                  		move.w	d0,($FFFFF730).w
00005EE0 2018                       		move.l	(a0)+,d0
00005EE2 21C0 F728                  		move.l	d0,($FFFFF728).w
00005EE6 21C0 F720                  		move.l	d0,($FFFFF720).w
00005EEA 2018                       		move.l	(a0)+,d0
00005EEC 21C0 F72C                  		move.l	d0,($FFFFF72C).w
00005EF0 21C0 F724                  		move.l	d0,($FFFFF724).w
00005EF4 3038 F728                  		move.w	($FFFFF728).w,d0
00005EF8 0640 0240                  		addi.w	#$240,d0
00005EFC 31C0 F732                  		move.w	d0,($FFFFF732).w
00005F00 31FC 1010 F74A             		move.w	#$1010,($FFFFF74A).w
00005F06 3018                       		move.w	(a0)+,d0
00005F08 31C0 F73E                  		move.w	d0,($FFFFF73E).w
00005F0C 6000 0000                  		bra.w	LevSz_ChkLamp
00005F10                            ; ===========================================================================
00005F10                            ; ---------------------------------------------------------------------------
00005F10                            ; Level size array and ending start location array
00005F10                            ; ---------------------------------------------------------------------------
00005F10                            LevelSizeArray:	incbin	misc\lvl_size.bin
00006060                            		even
00006060                            
00006060                            EndingStLocArray:
00006060                            		incbin	misc\sloc_end.bin
00006080                            		even
00006080                            
00006080                            ; ===========================================================================
00006080                            
00006080                            LevSz_ChkLamp:				; XREF: LevelSizeLoad
00006080 4A38 FE30                  		tst.b	($FFFFFE30).w	; have any lampposts been hit?
00006084 6700                       		beq.s	LevSz_StartLoc	; if not, branch
00006086 4EB9 0000 0000             		jsr	Obj79_LoadInfo
0000608C 3238 D008                  		move.w	($FFFFD008).w,d1
00006090 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006094 6000                       		bra.s	loc_60D0
00006096                            ; ===========================================================================
00006096                            
00006096                            LevSz_StartLoc:				; XREF: LevelSizeLoad
00006096 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000609A ED08                       		lsl.b	#6,d0
0000609C E848                       		lsr.w	#4,d0
0000609E 43FB 0000                  		lea	StartLocArray(pc,d0.w),a1 ; load Sonic's start location
000060A2 4A78 FFF0                  		tst.w	($FFFFFFF0).w	; is demo mode on?
000060A6 6A00                       		bpl.s	LevSz_SonicPos	; if not, branch
000060A8 3038 FFF4                  		move.w	($FFFFFFF4).w,d0
000060AC 5340                       		subq.w	#1,d0
000060AE E548                       		lsl.w	#2,d0
000060B0 43FB 00AE                  		lea	EndingStLocArray(pc,d0.w),a1 ; load Sonic's start location
000060B4                            
000060B4                            LevSz_SonicPos:
000060B4 7200                       		moveq	#0,d1
000060B6 3219                       		move.w	(a1)+,d1
000060B8 31C1 D008                  		move.w	d1,($FFFFD008).w ; set Sonic's position on x-axis
000060BC 7000                       		moveq	#0,d0
000060BE 3011                       		move.w	(a1),d0
000060C0 31C0 D00C                  		move.w	d0,($FFFFD00C).w ; set Sonic's position on y-axis
000060C4                            
000060C4                            loc_60D0:				; XREF: LevSz_ChkLamp
000060C4 0441 00A0                  		subi.w	#$A0,d1
000060C8 6400                       		bcc.s	loc_60D8
000060CA 7200                       		moveq	#0,d1
000060CC                            
000060CC                            loc_60D8:
000060CC 3438 F72A                  		move.w	($FFFFF72A).w,d2
000060D0 B242                       		cmp.w	d2,d1
000060D2 6500                       		bcs.s	loc_60E2
000060D4 3202                       		move.w	d2,d1
000060D6                            
000060D6                            loc_60E2:
000060D6 31C1 F700                  		move.w	d1,($FFFFF700).w
000060DA 0440 0060                  		subi.w	#$60,d0
000060DE 6400                       		bcc.s	loc_60EE
000060E0 7000                       		moveq	#0,d0
000060E2                            
000060E2                            loc_60EE:
000060E2 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
000060E6 6D00                       		blt.s	loc_60F8
000060E8 3038 F72E                  		move.w	($FFFFF72E).w,d0
000060EC                            
000060EC                            loc_60F8:
000060EC 31C0 F704                  		move.w	d0,($FFFFF704).w
000060F0 6100 0000                  		bsr.w	BgScrollSpeed
000060F4 7000                       		moveq	#0,d0
000060F6 1038 FE10                  		move.b	($FFFFFE10).w,d0
000060FA E508                       		lsl.b	#2,d0
000060FC 21FB 0000 F7AC             		move.l	LoopTileNums(pc,d0.w),($FFFFF7AC).w
00006102 6000 0000                  		bra.w	LevSz_Unk
00006106                            ; ===========================================================================
00006106                            ; ---------------------------------------------------------------------------
00006106                            ; Sonic	start location array
00006106                            ; ---------------------------------------------------------------------------
00006106                            StartLocArray:	incbin	misc\sloc_lev.bin
00006176                            		even
00006176                            
00006176                            ; ---------------------------------------------------------------------------
00006176                            ; Which	256x256	tiles contain loops or roll-tunnels
00006176                            ; ---------------------------------------------------------------------------
00006176                            ; Format - 4 bytes per zone, referring to which 256x256 evoke special events:
00006176                            ; loop,	loop, tunnel, tunnel
00006176                            ; ---------------------------------------------------------------------------
00006176                            LoopTileNums:	incbin	misc\loopnums.bin
00006192                            		even
00006192                            
00006192                            ; ===========================================================================
00006192                            
00006192                            LevSz_Unk:				; XREF: LevelSizeLoad
00006192 7000                       		moveq	#0,d0
00006194 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006198 E748                       		lsl.w	#3,d0
0000619A 43FB 0000                  		lea	dword_61B4(pc,d0.w),a1
0000619E 45F8 F7F0                  		lea	($FFFFF7F0).w,a2
000061A2 24D9                       		move.l	(a1)+,(a2)+
000061A4 24D9                       		move.l	(a1)+,(a2)+
000061A6 4E75                       		rts	
000061A8                            ; End of function LevelSizeLoad
000061A8                            
000061A8                            ; ===========================================================================
000061A8 0070 0100 0100 0100        dword_61B4:	dc.l $700100, $1000100
000061B0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061B8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061C0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061C8 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061D0 0800 0100 0100 0000        		dc.l $8000100, $1000000
000061D8 0070 0100 0100 0100        		dc.l $700100, $1000100
000061E0                            
000061E0                            ; ---------------------------------------------------------------------------
000061E0                            ; Subroutine to	set scroll speed of some backgrounds
000061E0                            ; ---------------------------------------------------------------------------
000061E0                            
000061E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000061E0                            
000061E0                            
000061E0                            BgScrollSpeed:				; XREF: LevelSizeLoad
000061E0 4A38 FE30                  		tst.b	($FFFFFE30).w
000061E4 6600                       		bne.s	loc_6206
000061E6 31C0 F70C                  		move.w	d0,($FFFFF70C).w
000061EA 31C0 F714                  		move.w	d0,($FFFFF714).w
000061EE 31C1 F708                  		move.w	d1,($FFFFF708).w
000061F2 31C1 F710                  		move.w	d1,($FFFFF710).w
000061F6 31C1 F718                  		move.w	d1,($FFFFF718).w
000061FA                            
000061FA                            loc_6206:
000061FA 7400                       		moveq	#0,d2
000061FC 1438 FE10                  		move.b	($FFFFFE10).w,d2
00006200 D442                       		add.w	d2,d2
00006202 343B 2000                  		move.w	BgScroll_Index(pc,d2.w),d2
00006206 4EFB 2000                  		jmp	BgScroll_Index(pc,d2.w)
0000620A                            ; End of function BgScrollSpeed
0000620A                            
0000620A                            ; ===========================================================================
0000620A 0000 0000                  BgScroll_Index:	dc.w BgScroll_GHZ-BgScroll_Index, BgScroll_LZ-BgScroll_Index
0000620E 0000 0000                  		dc.w BgScroll_MZ-BgScroll_Index, BgScroll_SLZ-BgScroll_Index
00006212 0000 0000                  		dc.w BgScroll_SYZ-BgScroll_Index, BgScroll_SBZ-BgScroll_Index
00006216 0000                       		dc.w BgScroll_End-BgScroll_Index
00006218                            ; ===========================================================================
00006218                            
00006218                            BgScroll_GHZ:				; XREF: BgScroll_Index
00006218 6000 0000                  		bra.w	Deform_GHZ
0000621C                            ; ===========================================================================
0000621C                            
0000621C                            BgScroll_LZ:				; XREF: BgScroll_Index
0000621C E280                       		asr.l	#1,d0
0000621E 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006222 4E75                       		rts	
00006224                            ; ===========================================================================
00006224                            
00006224                            BgScroll_MZ:				; XREF: BgScroll_Index
00006224 4E75                       		rts	
00006226                            ; ===========================================================================
00006226                            
00006226                            BgScroll_SLZ:				; XREF: BgScroll_Index
00006226 E280                       		asr.l	#1,d0
00006228 0640 00C0                  		addi.w	#$C0,d0
0000622C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006230 4E75                       		rts	
00006232                            ; ===========================================================================
00006232                            
00006232                            BgScroll_SYZ:				; XREF: BgScroll_Index
00006232 E980                       		asl.l	#4,d0
00006234 2400                       		move.l	d0,d2
00006236 E380                       		asl.l	#1,d0
00006238 D082                       		add.l	d2,d0
0000623A E080                       		asr.l	#8,d0
0000623C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006240 31C0 F714                  		move.w	d0,($FFFFF714).w
00006244 4E75                       		rts	
00006246                            ; ===========================================================================
00006246                            
00006246                            BgScroll_SBZ:				; XREF: BgScroll_Index
00006246 E980                       		asl.l	#4,d0
00006248 E380                       		asl.l	#1,d0
0000624A E080                       		asr.l	#8,d0
0000624C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006250 4E75                       		rts	
00006252                            ; ===========================================================================
00006252                            
00006252                            BgScroll_End:				; XREF: BgScroll_Index
00006252 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
00006258 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
0000625E 4E75                       		rts	
00006260                            ; ===========================================================================
00006260 31FC 00A8 F708             		move.w	#$A8,($FFFFF708).w
00006266 31FC 001E F70C             		move.w	#$1E,($FFFFF70C).w
0000626C 31FC FFC0 F710             		move.w	#-$40,($FFFFF710).w
00006272 31FC 001E F714             		move.w	#$1E,($FFFFF714).w
00006278 4E75                       		rts
0000627A                            
0000627A                            ; ---------------------------------------------------------------------------
0000627A                            ; Background layer deformation subroutines
0000627A                            ; ---------------------------------------------------------------------------
0000627A                            
0000627A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000627A                            
0000627A                            
0000627A                            DeformBgLayer:				; XREF: TitleScreen; Level; EndingSequence
0000627A 4A38 F744                  		tst.b	($FFFFF744).w
0000627E 6700                       		beq.s	loc_628E
00006280 4E75                       		rts	
00006282                            ; ===========================================================================
00006282                            
00006282                            loc_628E:
00006282 4278 F754                  		clr.w	($FFFFF754).w
00006286 4278 F756                  		clr.w	($FFFFF756).w
0000628A 4278 F758                  		clr.w	($FFFFF758).w
0000628E 4278 F75A                  		clr.w	($FFFFF75A).w
00006292 6100 0000                  		bsr.w	ScrollHoriz
00006296 6100 0000                  		bsr.w	ScrollVertical
0000629A 6100 0000                  		bsr.w	DynScrResizeLoad
0000629E 31F8 F700 F61A             		move.w	($FFFFF700).w,($FFFFF61A).w
000062A4 31F8 F704 F616             		move.w	($FFFFF704).w,($FFFFF616).w
000062AA 31F8 F708 F61C             		move.w	($FFFFF708).w,($FFFFF61C).w
000062B0 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000062B6 31F8 F718 F620             		move.w	($FFFFF718).w,($FFFFF620).w
000062BC 31F8 F71C F61E             		move.w	($FFFFF71C).w,($FFFFF61E).w
000062C2 7000                       		moveq	#0,d0
000062C4 1038 FE10                  		move.b	($FFFFFE10).w,d0
000062C8 D040                       		add.w	d0,d0
000062CA 303B 0000                  		move.w	Deform_Index(pc,d0.w),d0
000062CE 4EFB 0000                  		jmp	Deform_Index(pc,d0.w)
000062D2                            ; End of function DeformBgLayer
000062D2                            
000062D2                            ; ===========================================================================
000062D2                            ; ---------------------------------------------------------------------------
000062D2                            ; Offset index for background layer deformation	code
000062D2                            ; ---------------------------------------------------------------------------
000062D2 0000 0000                  Deform_Index:	dc.w Deform_GHZ-Deform_Index, Deform_LZ-Deform_Index
000062D6 0000 0000                  		dc.w Deform_MZ-Deform_Index, Deform_SLZ-Deform_Index
000062DA 0000 0000                  		dc.w Deform_SYZ-Deform_Index, Deform_SBZ-Deform_Index
000062DE 0000                       		dc.w Deform_GHZ-Deform_Index
000062E0                            ; ---------------------------------------------------------------------------
000062E0                            ; Green	Hill Zone background layer deformation code
000062E0                            ; ---------------------------------------------------------------------------
000062E0                            
000062E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000062E0                            
000062E0                            
000062E0                            Deform_GHZ:				; XREF: Deform_Index
000062E0 3838 F73A                  		move.w	($FFFFF73A).w,d4
000062E4 48C4                       		ext.l	d4
000062E6 EB84                       		asl.l	#5,d4
000062E8 2204                       		move.l	d4,d1
000062EA E384                       		asl.l	#1,d4
000062EC D881                       		add.l	d1,d4
000062EE 7A00                       		moveq	#0,d5
000062F0 6100 0000                  		bsr.w	ScrollBlock1
000062F4 6100 0000                  		bsr.w	ScrollBlock4
000062F8 43F8 CC00                  		lea	($FFFFCC00).w,a1
000062FC 3038 F704                  		move.w	($FFFFF704).w,d0
00006300 0240 07FF                  		andi.w	#$7FF,d0
00006304 EA48                       		lsr.w	#5,d0
00006306 4440                       		neg.w	d0
00006308 0640 0026                  		addi.w	#$26,d0
0000630C 31C0 F714                  		move.w	d0,($FFFFF714).w
00006310 3800                       		move.w	d0,d4
00006312 6100 0000                  		bsr.w	ScrollBlock3
00006316 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000631C 323C 006F                  		move.w	#$6F,d1
00006320 9244                       		sub.w	d4,d1
00006322 3038 F700                  		move.w	($FFFFF700).w,d0
00006326 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w
0000632C 6600                       		bne.s	loc_633C
0000632E 7000                       		moveq	#0,d0
00006330                            
00006330                            loc_633C:
00006330 4440                       		neg.w	d0
00006332 4840                       		swap	d0
00006334 3038 F708                  		move.w	($FFFFF708).w,d0
00006338 4440                       		neg.w	d0
0000633A                            
0000633A                            loc_6346:
0000633A 22C0                       		move.l	d0,(a1)+
0000633C 51C9 FFFC                  		dbf	d1,loc_6346
00006340 323C 0027                  		move.w	#$27,d1
00006344 3038 F710                  		move.w	($FFFFF710).w,d0
00006348 4440                       		neg.w	d0
0000634A                            
0000634A                            loc_6356:
0000634A 22C0                       		move.l	d0,(a1)+
0000634C 51C9 FFFC                  		dbf	d1,loc_6356
00006350 3038 F710                  		move.w	($FFFFF710).w,d0
00006354 0640 0000                  		addi.w	#0,d0
00006358 3438 F700                  		move.w	($FFFFF700).w,d2
0000635C 0642 FE00                  		addi.w	#-$200,d2
00006360 9440                       		sub.w	d0,d2
00006362 48C2                       		ext.l	d2
00006364 E182                       		asl.l	#8,d2
00006366 85FC 0068                  		divs.w	#$68,d2
0000636A 48C2                       		ext.l	d2
0000636C E182                       		asl.l	#8,d2
0000636E 7600                       		moveq	#0,d3
00006370 3600                       		move.w	d0,d3
00006372 323C 0047                  		move.w	#$47,d1
00006376 D244                       		add.w	d4,d1
00006378                            
00006378                            loc_6384:
00006378 3003                       		move.w	d3,d0
0000637A 4440                       		neg.w	d0
0000637C 22C0                       		move.l	d0,(a1)+
0000637E 4843                       		swap	d3
00006380 D682                       		add.l	d2,d3
00006382 4843                       		swap	d3
00006384 51C9 FFF2                  		dbf	d1,loc_6384
00006388 4E75                       		rts	
0000638A                            ; End of function Deform_GHZ
0000638A                            
0000638A                            ; ---------------------------------------------------------------------------
0000638A                            ; Labyrinth Zone background layer deformation code
0000638A                            ; ---------------------------------------------------------------------------
0000638A                            
0000638A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000638A                            
0000638A                            
0000638A                            Deform_LZ:				; XREF: Deform_Index
0000638A 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000638E 48C4                       		ext.l	d4
00006390 EF84                       		asl.l	#7,d4
00006392 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006396 48C5                       		ext.l	d5
00006398 EF85                       		asl.l	#7,d5
0000639A 6100 0000                  		bsr.w	ScrollBlock1
0000639E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
000063A4 43F8 CC00                  		lea	($FFFFCC00).w,a1
000063A8 323C 00DF                  		move.w	#$DF,d1
000063AC 3038 F700                  		move.w	($FFFFF700).w,d0
000063B0 4440                       		neg.w	d0
000063B2 4840                       		swap	d0
000063B4 3038 F708                  		move.w	($FFFFF708).w,d0
000063B8 4440                       		neg.w	d0
000063BA                            
000063BA                            loc_63C6:
000063BA 22C0                       		move.l	d0,(a1)+
000063BC 51C9 FFFC                  		dbf	d1,loc_63C6
000063C0 3038 F646                  		move.w	($FFFFF646).w,d0
000063C4 9078 F704                  		sub.w	($FFFFF704).w,d0
000063C8 4E75                       		rts	
000063CA                            ; End of function Deform_LZ
000063CA                            
000063CA                            ; ---------------------------------------------------------------------------
000063CA                            ; Marble Zone background layer deformation code
000063CA                            ; ---------------------------------------------------------------------------
000063CA                            
000063CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000063CA                            
000063CA                            
000063CA                            Deform_MZ:				; XREF: Deform_Index
000063CA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000063CE 48C4                       		ext.l	d4
000063D0 ED84                       		asl.l	#6,d4
000063D2 2204                       		move.l	d4,d1
000063D4 E384                       		asl.l	#1,d4
000063D6 D881                       		add.l	d1,d4
000063D8 7A00                       		moveq	#0,d5
000063DA 6100 0000                  		bsr.w	ScrollBlock1
000063DE 303C 0200                  		move.w	#$200,d0
000063E2 3238 F704                  		move.w	($FFFFF704).w,d1
000063E6 0441 01C8                  		subi.w	#$1C8,d1
000063EA 6500                       		bcs.s	loc_6402
000063EC 3401                       		move.w	d1,d2
000063EE D241                       		add.w	d1,d1
000063F0 D242                       		add.w	d2,d1
000063F2 E441                       		asr.w	#2,d1
000063F4 D041                       		add.w	d1,d0
000063F6                            
000063F6                            loc_6402:
000063F6 31C0 F714                  		move.w	d0,($FFFFF714).w
000063FA 6100 0000                  		bsr.w	ScrollBlock3
000063FE 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006404 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006408 323C 00DF                  		move.w	#$DF,d1
0000640C 3038 F700                  		move.w	($FFFFF700).w,d0
00006410 4440                       		neg.w	d0
00006412 4840                       		swap	d0
00006414 3038 F708                  		move.w	($FFFFF708).w,d0
00006418 4440                       		neg.w	d0
0000641A                            
0000641A                            loc_6426:
0000641A 22C0                       		move.l	d0,(a1)+
0000641C 51C9 FFFC                  		dbf	d1,loc_6426
00006420 4E75                       		rts	
00006422                            ; End of function Deform_MZ
00006422                            
00006422                            ; ---------------------------------------------------------------------------
00006422                            ; Star Light Zone background layer deformation code
00006422                            ; ---------------------------------------------------------------------------
00006422                            
00006422                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006422                            
00006422                            
00006422                            Deform_SLZ:				; XREF: Deform_Index
00006422 3838 F73A                  		move.w	($FFFFF73A).w,d4
00006426 48C4                       		ext.l	d4
00006428 EF84                       		asl.l	#7,d4
0000642A 3A38 F73C                  		move.w	($FFFFF73C).w,d5
0000642E 48C5                       		ext.l	d5
00006430 EF85                       		asl.l	#7,d5
00006432 6100 0000                  		bsr.w	ScrollBlock2
00006436 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000643C 6100 0000                  		bsr.w	Deform_SLZ_2
00006440 45F8 A800                  		lea	($FFFFA800).w,a2
00006444 3038 F70C                  		move.w	($FFFFF70C).w,d0
00006448 3400                       		move.w	d0,d2
0000644A 0440 00C0                  		subi.w	#$C0,d0
0000644E 0240 03F0                  		andi.w	#$3F0,d0
00006452 E648                       		lsr.w	#3,d0
00006454 45F2 0000                  		lea	(a2,d0.w),a2
00006458 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000645C 323C 000E                  		move.w	#$E,d1
00006460 3038 F700                  		move.w	($FFFFF700).w,d0
00006464 4440                       		neg.w	d0
00006466 4840                       		swap	d0
00006468 0242 000F                  		andi.w	#$F,d2
0000646C D442                       		add.w	d2,d2
0000646E 301A                       		move.w	(a2)+,d0
00006470 4EFB 2000                  		jmp	loc_6482(pc,d2.w)
00006474                            ; ===========================================================================
00006474                            
00006474                            loc_6480:				; XREF: Deform_SLZ
00006474 301A                       		move.w	(a2)+,d0
00006476                            
00006476                            loc_6482:
00006476 22C0                       		move.l	d0,(a1)+
00006478 22C0                       		move.l	d0,(a1)+
0000647A 22C0                       		move.l	d0,(a1)+
0000647C 22C0                       		move.l	d0,(a1)+
0000647E 22C0                       		move.l	d0,(a1)+
00006480 22C0                       		move.l	d0,(a1)+
00006482 22C0                       		move.l	d0,(a1)+
00006484 22C0                       		move.l	d0,(a1)+
00006486 22C0                       		move.l	d0,(a1)+
00006488 22C0                       		move.l	d0,(a1)+
0000648A 22C0                       		move.l	d0,(a1)+
0000648C 22C0                       		move.l	d0,(a1)+
0000648E 22C0                       		move.l	d0,(a1)+
00006490 22C0                       		move.l	d0,(a1)+
00006492 22C0                       		move.l	d0,(a1)+
00006494 22C0                       		move.l	d0,(a1)+
00006496 51C9 FFDC                  		dbf	d1,loc_6480
0000649A 4E75                       		rts	
0000649C                            ; End of function Deform_SLZ
0000649C                            
0000649C                            
0000649C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000649C                            
0000649C                            
0000649C                            Deform_SLZ_2:				; XREF: Deform_SLZ
0000649C 43F8 A800                  		lea	($FFFFA800).w,a1
000064A0 3438 F700                  		move.w	($FFFFF700).w,d2
000064A4 4442                       		neg.w	d2
000064A6 3002                       		move.w	d2,d0
000064A8 E640                       		asr.w	#3,d0
000064AA 9042                       		sub.w	d2,d0
000064AC 48C0                       		ext.l	d0
000064AE E980                       		asl.l	#4,d0
000064B0 81FC 001C                  		divs.w	#$1C,d0
000064B4 48C0                       		ext.l	d0
000064B6 E980                       		asl.l	#4,d0
000064B8 E180                       		asl.l	#8,d0
000064BA 7600                       		moveq	#0,d3
000064BC 3602                       		move.w	d2,d3
000064BE 323C 001B                  		move.w	#$1B,d1
000064C2                            
000064C2                            loc_64CE:
000064C2 32C3                       		move.w	d3,(a1)+
000064C4 4843                       		swap	d3
000064C6 D680                       		add.l	d0,d3
000064C8 4843                       		swap	d3
000064CA 51C9 FFF6                  		dbf	d1,loc_64CE
000064CE 3002                       		move.w	d2,d0
000064D0 E640                       		asr.w	#3,d0
000064D2 323C 0004                  		move.w	#4,d1
000064D6                            
000064D6                            loc_64E2:
000064D6 32C0                       		move.w	d0,(a1)+
000064D8 51C9 FFFC                  		dbf	d1,loc_64E2
000064DC 3002                       		move.w	d2,d0
000064DE E440                       		asr.w	#2,d0
000064E0 323C 0004                  		move.w	#4,d1
000064E4                            
000064E4                            loc_64F0:
000064E4 32C0                       		move.w	d0,(a1)+
000064E6 51C9 FFFC                  		dbf	d1,loc_64F0
000064EA 3002                       		move.w	d2,d0
000064EC E240                       		asr.w	#1,d0
000064EE 323C 001D                  		move.w	#$1D,d1
000064F2                            
000064F2                            loc_64FE:
000064F2 32C0                       		move.w	d0,(a1)+
000064F4 51C9 FFFC                  		dbf	d1,loc_64FE
000064F8 4E75                       		rts	
000064FA                            ; End of function Deform_SLZ_2
000064FA                            
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            ; Spring Yard Zone background layer deformation	code
000064FA                            ; ---------------------------------------------------------------------------
000064FA                            
000064FA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000064FA                            
000064FA                            
000064FA                            Deform_SYZ:				; XREF: Deform_Index
000064FA 3838 F73A                  		move.w	($FFFFF73A).w,d4
000064FE 48C4                       		ext.l	d4
00006500 ED84                       		asl.l	#6,d4
00006502 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006506 48C5                       		ext.l	d5
00006508 E985                       		asl.l	#4,d5
0000650A 2205                       		move.l	d5,d1
0000650C E385                       		asl.l	#1,d5
0000650E DA81                       		add.l	d1,d5
00006510 6100 0000                  		bsr.w	ScrollBlock1
00006514 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
0000651A 43F8 CC00                  		lea	($FFFFCC00).w,a1
0000651E 323C 00DF                  		move.w	#$DF,d1
00006522 3038 F700                  		move.w	($FFFFF700).w,d0
00006526 4440                       		neg.w	d0
00006528 4840                       		swap	d0
0000652A 3038 F708                  		move.w	($FFFFF708).w,d0
0000652E 4440                       		neg.w	d0
00006530                            
00006530                            loc_653C:
00006530 22C0                       		move.l	d0,(a1)+
00006532 51C9 FFFC                  		dbf	d1,loc_653C
00006536 4E75                       		rts	
00006538                            ; End of function Deform_SYZ
00006538                            
00006538                            ; ---------------------------------------------------------------------------
00006538                            ; Scrap	Brain Zone background layer deformation	code
00006538                            ; ---------------------------------------------------------------------------
00006538                            
00006538                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006538                            
00006538                            
00006538                            Deform_SBZ:				; XREF: Deform_Index
00006538 3838 F73A                  		move.w	($FFFFF73A).w,d4
0000653C 48C4                       		ext.l	d4
0000653E ED84                       		asl.l	#6,d4
00006540 3A38 F73C                  		move.w	($FFFFF73C).w,d5
00006544 48C5                       		ext.l	d5
00006546 E985                       		asl.l	#4,d5
00006548 E385                       		asl.l	#1,d5
0000654A 6100 0000                  		bsr.w	ScrollBlock1
0000654E 31F8 F70C F618             		move.w	($FFFFF70C).w,($FFFFF618).w
00006554 43F8 CC00                  		lea	($FFFFCC00).w,a1
00006558 323C 00DF                  		move.w	#$DF,d1
0000655C 3038 F700                  		move.w	($FFFFF700).w,d0
00006560 4440                       		neg.w	d0
00006562 4840                       		swap	d0
00006564 3038 F708                  		move.w	($FFFFF708).w,d0
00006568 4440                       		neg.w	d0
0000656A                            
0000656A                            loc_6576:
0000656A 22C0                       		move.l	d0,(a1)+
0000656C 51C9 FFFC                  		dbf	d1,loc_6576
00006570 4E75                       		rts	
00006572                            ; End of function Deform_SBZ
00006572                            
00006572                            ; ---------------------------------------------------------------------------
00006572                            ; Subroutine to	scroll the level horizontally as Sonic moves
00006572                            ; ---------------------------------------------------------------------------
00006572                            
00006572                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006572                            
00006572                            
00006572                            ScrollHoriz:				; XREF: DeformBgLayer
00006572 3838 F700                  		move.w	($FFFFF700).w,d4
00006576 6100                       		bsr.s	ScrollHoriz2
00006578 3038 F700                  		move.w	($FFFFF700).w,d0
0000657C 0240 0010                  		andi.w	#$10,d0
00006580 1238 F74A                  		move.b	($FFFFF74A).w,d1
00006584 B300                       		eor.b	d1,d0
00006586 6600                       		bne.s	locret_65B0
00006588 0A38 0010 F74A             		eori.b	#$10,($FFFFF74A).w
0000658E 3038 F700                  		move.w	($FFFFF700).w,d0
00006592 9044                       		sub.w	d4,d0
00006594 6A00                       		bpl.s	loc_65AA
00006596 08F8 0002 F754             		bset	#2,($FFFFF754).w
0000659C 4E75                       		rts	
0000659E                            ; ===========================================================================
0000659E                            
0000659E                            loc_65AA:
0000659E 08F8 0003 F754             		bset	#3,($FFFFF754).w
000065A4                            
000065A4                            locret_65B0:
000065A4 4E75                       		rts	
000065A6                            ; End of function ScrollHoriz
000065A6                            
000065A6                            
000065A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000065A6                            
000065A6                            
000065A6                            ScrollHoriz2:				; XREF: ScrollHoriz
000065A6 3038 D008                  		move.w	($FFFFD008).w,d0
000065AA 9078 F700                  		sub.w	($FFFFF700).w,d0
000065AE 0440 0090                  		subi.w	#$90,d0
000065B2 6500                       		bcs.s	loc_65F6
000065B4 0440 0010                  		subi.w	#$10,d0
000065B8 6400                       		bcc.s	loc_65CC
000065BA 4278 F73A                  		clr.w	($FFFFF73A).w
000065BE 4E75                       		rts	
000065C0                            ; ===========================================================================
000065C0                            
000065C0                            loc_65CC:
000065C0 0C40 0010                  		cmpi.w	#$10,d0
000065C4 6500                       		bcs.s	loc_65D6
000065C6 303C 0010                  		move.w	#$10,d0
000065CA                            
000065CA                            loc_65D6:
000065CA D078 F700                  		add.w	($FFFFF700).w,d0
000065CE B078 F72A                  		cmp.w	($FFFFF72A).w,d0
000065D2 6D00                       		blt.s	loc_65E4
000065D4 3038 F72A                  		move.w	($FFFFF72A).w,d0
000065D8                            
000065D8                            loc_65E4:
000065D8 3200                       		move.w	d0,d1
000065DA 9278 F700                  		sub.w	($FFFFF700).w,d1
000065DE E141                       		asl.w	#8,d1
000065E0 31C0 F700                  		move.w	d0,($FFFFF700).w
000065E4 31C1 F73A                  		move.w	d1,($FFFFF73A).w
000065E8 4E75                       		rts	
000065EA                            ; ===========================================================================
000065EA                            
000065EA                            loc_65F6:				; XREF: ScrollHoriz2
000065EA D078 F700                  		add.w	($FFFFF700).w,d0
000065EE B078 F728                  		cmp.w	($FFFFF728).w,d0
000065F2 6EE4                       		bgt.s	loc_65E4
000065F4 3038 F728                  		move.w	($FFFFF728).w,d0
000065F8 60DE                       		bra.s	loc_65E4
000065FA                            ; End of function ScrollHoriz2
000065FA                            
000065FA                            ; ===========================================================================
000065FA 4A40                       		tst.w	d0
000065FC 6A00                       		bpl.s	loc_6610
000065FE 303C FFFE                  		move.w	#-2,d0
00006602 60E6                       		bra.s	loc_65F6
00006604                            ; ===========================================================================
00006604                            
00006604                            loc_6610:
00006604 303C 0002                  		move.w	#2,d0
00006608 60B6                       		bra.s	loc_65CC
0000660A                            
0000660A                            ; ---------------------------------------------------------------------------
0000660A                            ; Subroutine to	scroll the level vertically as Sonic moves
0000660A                            ; ---------------------------------------------------------------------------
0000660A                            
0000660A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000660A                            
0000660A                            
0000660A                            ScrollVertical:				; XREF: DeformBgLayer
0000660A 7200                       		moveq	#0,d1
0000660C 3038 D00C                  		move.w	($FFFFD00C).w,d0
00006610 9078 F704                  		sub.w	($FFFFF704).w,d0
00006614 0838 0002 D022             		btst	#2,($FFFFD022).w
0000661A 6700                       		beq.s	loc_662A
0000661C 5B40                       		subq.w	#5,d0
0000661E                            
0000661E                            loc_662A:
0000661E 0838 0001 D022             		btst	#1,($FFFFD022).w
00006624 6700                       		beq.s	loc_664A
00006626 0640 0020                  		addi.w	#$20,d0
0000662A 9078 F73E                  		sub.w	($FFFFF73E).w,d0
0000662E 6500                       		bcs.s	loc_6696
00006630 0440 0040                  		subi.w	#$40,d0
00006634 6400                       		bcc.s	loc_6696
00006636 4A38 F75C                  		tst.b	($FFFFF75C).w
0000663A 6600                       		bne.s	loc_66A8
0000663C 6000                       		bra.s	loc_6656
0000663E                            ; ===========================================================================
0000663E                            
0000663E                            loc_664A:
0000663E 9078 F73E                  		sub.w	($FFFFF73E).w,d0
00006642 6600                       		bne.s	loc_665C
00006644 4A38 F75C                  		tst.b	($FFFFF75C).w
00006648 6600                       		bne.s	loc_66A8
0000664A                            
0000664A                            loc_6656:
0000664A 4278 F73C                  		clr.w	($FFFFF73C).w
0000664E 4E75                       		rts	
00006650                            ; ===========================================================================
00006650                            
00006650                            loc_665C:
00006650 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w
00006656 6600                       		bne.s	loc_6684
00006658 3238 D014                  		move.w	($FFFFD014).w,d1
0000665C 6A00                       		bpl.s	loc_666C
0000665E 4441                       		neg.w	d1
00006660                            
00006660                            loc_666C:
00006660 0C41 0800                  		cmpi.w	#$800,d1
00006664 6400                       		bcc.s	loc_6696
00006666 323C 0600                  		move.w	#$600,d1
0000666A 0C40 0006                  		cmpi.w	#6,d0
0000666E 6E00                       		bgt.s	loc_66F6
00006670 0C40 FFFA                  		cmpi.w	#-6,d0
00006674 6D00                       		blt.s	loc_66C0
00006676 6000                       		bra.s	loc_66AE
00006678                            ; ===========================================================================
00006678                            
00006678                            loc_6684:
00006678 323C 0200                  		move.w	#$200,d1
0000667C 0C40 0002                  		cmpi.w	#2,d0
00006680 6E00                       		bgt.s	loc_66F6
00006682 0C40 FFFE                  		cmpi.w	#-2,d0
00006686 6D00                       		blt.s	loc_66C0
00006688 6000                       		bra.s	loc_66AE
0000668A                            ; ===========================================================================
0000668A                            
0000668A                            loc_6696:
0000668A 323C 1000                  		move.w	#$1000,d1
0000668E 0C40 0010                  		cmpi.w	#$10,d0
00006692 6E00                       		bgt.s	loc_66F6
00006694 0C40 FFF0                  		cmpi.w	#-$10,d0
00006698 6D00                       		blt.s	loc_66C0
0000669A 6000                       		bra.s	loc_66AE
0000669C                            ; ===========================================================================
0000669C                            
0000669C                            loc_66A8:
0000669C 7000                       		moveq	#0,d0
0000669E 11C0 F75C                  		move.b	d0,($FFFFF75C).w
000066A2                            
000066A2                            loc_66AE:
000066A2 7200                       		moveq	#0,d1
000066A4 3200                       		move.w	d0,d1
000066A6 D278 F704                  		add.w	($FFFFF704).w,d1
000066AA 4A40                       		tst.w	d0
000066AC 6A00 0000                  		bpl.w	loc_6700
000066B0 6000 0000                  		bra.w	loc_66CC
000066B4                            ; ===========================================================================
000066B4                            
000066B4                            loc_66C0:
000066B4 4441                       		neg.w	d1
000066B6 48C1                       		ext.l	d1
000066B8 E181                       		asl.l	#8,d1
000066BA D2B8 F704                  		add.l	($FFFFF704).w,d1
000066BE 4841                       		swap	d1
000066C0                            
000066C0                            loc_66CC:
000066C0 B278 F72C                  		cmp.w	($FFFFF72C).w,d1
000066C4 6E00                       		bgt.s	loc_6724
000066C6 0C41 FF00                  		cmpi.w	#-$100,d1
000066CA 6E00                       		bgt.s	loc_66F0
000066CC 0241 07FF                  		andi.w	#$7FF,d1
000066D0 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
000066D6 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
000066DC 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
000066E2 6000                       		bra.s	loc_6724
000066E4                            ; ===========================================================================
000066E4                            
000066E4                            loc_66F0:
000066E4 3238 F72C                  		move.w	($FFFFF72C).w,d1
000066E8 6000                       		bra.s	loc_6724
000066EA                            ; ===========================================================================
000066EA                            
000066EA                            loc_66F6:
000066EA 48C1                       		ext.l	d1
000066EC E181                       		asl.l	#8,d1
000066EE D2B8 F704                  		add.l	($FFFFF704).w,d1
000066F2 4841                       		swap	d1
000066F4                            
000066F4                            loc_6700:
000066F4 B278 F72E                  		cmp.w	($FFFFF72E).w,d1
000066F8 6D00                       		blt.s	loc_6724
000066FA 0441 0800                  		subi.w	#$800,d1
000066FE 6500                       		bcs.s	loc_6720
00006700 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
00006706 0478 0800 F704             		subi.w	#$800,($FFFFF704).w
0000670C 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
00006712 6000                       		bra.s	loc_6724
00006714                            ; ===========================================================================
00006714                            
00006714                            loc_6720:
00006714 3238 F72E                  		move.w	($FFFFF72E).w,d1
00006718                            
00006718                            loc_6724:
00006718 3838 F704                  		move.w	($FFFFF704).w,d4
0000671C 4841                       		swap	d1
0000671E 2601                       		move.l	d1,d3
00006720 96B8 F704                  		sub.l	($FFFFF704).w,d3
00006724 E09B                       		ror.l	#8,d3
00006726 31C3 F73C                  		move.w	d3,($FFFFF73C).w
0000672A 21C1 F704                  		move.l	d1,($FFFFF704).w
0000672E 3038 F704                  		move.w	($FFFFF704).w,d0
00006732 0240 0010                  		andi.w	#$10,d0
00006736 1238 F74B                  		move.b	($FFFFF74B).w,d1
0000673A B300                       		eor.b	d1,d0
0000673C 6600                       		bne.s	locret_6766
0000673E 0A38 0010 F74B             		eori.b	#$10,($FFFFF74B).w
00006744 3038 F704                  		move.w	($FFFFF704).w,d0
00006748 9044                       		sub.w	d4,d0
0000674A 6A00                       		bpl.s	loc_6760
0000674C 08F8 0000 F754             		bset	#0,($FFFFF754).w
00006752 4E75                       		rts	
00006754                            ; ===========================================================================
00006754                            
00006754                            loc_6760:
00006754 08F8 0001 F754             		bset	#1,($FFFFF754).w
0000675A                            
0000675A                            locret_6766:
0000675A 4E75                       		rts	
0000675C                            ; End of function ScrollVertical
0000675C                            
0000675C                            
0000675C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000675C                            
0000675C                            
0000675C                            ScrollBlock1:				; XREF: Deform_GHZ; et al
0000675C 2438 F708                  		move.l	($FFFFF708).w,d2
00006760 2002                       		move.l	d2,d0
00006762 D084                       		add.l	d4,d0
00006764 21C0 F708                  		move.l	d0,($FFFFF708).w
00006768 2200                       		move.l	d0,d1
0000676A 4841                       		swap	d1
0000676C 0241 0010                  		andi.w	#$10,d1
00006770 1638 F74C                  		move.b	($FFFFF74C).w,d3
00006774 B701                       		eor.b	d3,d1
00006776 6600                       		bne.s	loc_679C
00006778 0A38 0010 F74C             		eori.b	#$10,($FFFFF74C).w
0000677E 9082                       		sub.l	d2,d0
00006780 6A00                       		bpl.s	loc_6796
00006782 08F8 0002 F756             		bset	#2,($FFFFF756).w
00006788 6000                       		bra.s	loc_679C
0000678A                            ; ===========================================================================
0000678A                            
0000678A                            loc_6796:
0000678A 08F8 0003 F756             		bset	#3,($FFFFF756).w
00006790                            
00006790                            loc_679C:
00006790 2638 F70C                  		move.l	($FFFFF70C).w,d3
00006794 2003                       		move.l	d3,d0
00006796 D085                       		add.l	d5,d0
00006798 21C0 F70C                  		move.l	d0,($FFFFF70C).w
0000679C 2200                       		move.l	d0,d1
0000679E 4841                       		swap	d1
000067A0 0241 0010                  		andi.w	#$10,d1
000067A4 1438 F74D                  		move.b	($FFFFF74D).w,d2
000067A8 B501                       		eor.b	d2,d1
000067AA 6600                       		bne.s	locret_67D0
000067AC 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000067B2 9083                       		sub.l	d3,d0
000067B4 6A00                       		bpl.s	loc_67CA
000067B6 08F8 0000 F756             		bset	#0,($FFFFF756).w
000067BC 4E75                       		rts	
000067BE                            ; ===========================================================================
000067BE                            
000067BE                            loc_67CA:
000067BE 08F8 0001 F756             		bset	#1,($FFFFF756).w
000067C4                            
000067C4                            locret_67D0:
000067C4 4E75                       		rts	
000067C6                            ; End of function ScrollBlock1
000067C6                            
000067C6                            
000067C6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000067C6                            
000067C6                            
000067C6                            ScrollBlock2:				; XREF: Deform_SLZ
000067C6 2438 F708                  		move.l	($FFFFF708).w,d2
000067CA 2002                       		move.l	d2,d0
000067CC D084                       		add.l	d4,d0
000067CE 21C0 F708                  		move.l	d0,($FFFFF708).w
000067D2 2638 F70C                  		move.l	($FFFFF70C).w,d3
000067D6 2003                       		move.l	d3,d0
000067D8 D085                       		add.l	d5,d0
000067DA 21C0 F70C                  		move.l	d0,($FFFFF70C).w
000067DE 2200                       		move.l	d0,d1
000067E0 4841                       		swap	d1
000067E2 0241 0010                  		andi.w	#$10,d1
000067E6 1438 F74D                  		move.b	($FFFFF74D).w,d2
000067EA B501                       		eor.b	d2,d1
000067EC 6600                       		bne.s	locret_6812
000067EE 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
000067F4 9083                       		sub.l	d3,d0
000067F6 6A00                       		bpl.s	loc_680C
000067F8 08F8 0000 F756             		bset	#0,($FFFFF756).w
000067FE 4E75                       		rts	
00006800                            ; ===========================================================================
00006800                            
00006800                            loc_680C:
00006800 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006806                            
00006806                            locret_6812:
00006806 4E75                       		rts	
00006808                            ; End of function ScrollBlock2
00006808                            
00006808                            
00006808                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006808                            
00006808                            
00006808                            ScrollBlock3:				; XREF: Deform_GHZ; et al
00006808 3638 F70C                  		move.w	($FFFFF70C).w,d3
0000680C 31C0 F70C                  		move.w	d0,($FFFFF70C).w
00006810 3200                       		move.w	d0,d1
00006812 0241 0010                  		andi.w	#$10,d1
00006816 1438 F74D                  		move.b	($FFFFF74D).w,d2
0000681A B501                       		eor.b	d2,d1
0000681C 6600                       		bne.s	locret_6842
0000681E 0A38 0010 F74D             		eori.b	#$10,($FFFFF74D).w
00006824 9043                       		sub.w	d3,d0
00006826 6A00                       		bpl.s	loc_683C
00006828 08F8 0000 F756             		bset	#0,($FFFFF756).w
0000682E 4E75                       		rts	
00006830                            ; ===========================================================================
00006830                            
00006830                            loc_683C:
00006830 08F8 0001 F756             		bset	#1,($FFFFF756).w
00006836                            
00006836                            locret_6842:
00006836 4E75                       		rts	
00006838                            ; End of function ScrollBlock3
00006838                            
00006838                            
00006838                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006838                            
00006838                            
00006838                            ScrollBlock4:				; XREF: Deform_GHZ
00006838 3438 F710                  		move.w	($FFFFF710).w,d2
0000683C 3638 F714                  		move.w	($FFFFF714).w,d3
00006840 3038 F73A                  		move.w	($FFFFF73A).w,d0
00006844 48C0                       		ext.l	d0
00006846 EF80                       		asl.l	#7,d0
00006848 D1B8 F710                  		add.l	d0,($FFFFF710).w
0000684C 3038 F710                  		move.w	($FFFFF710).w,d0
00006850 0240 0010                  		andi.w	#$10,d0
00006854 1238 F74E                  		move.b	($FFFFF74E).w,d1
00006858 B300                       		eor.b	d1,d0
0000685A 6600                       		bne.s	locret_6884
0000685C 0A38 0010 F74E             		eori.b	#$10,($FFFFF74E).w
00006862 3038 F710                  		move.w	($FFFFF710).w,d0
00006866 9042                       		sub.w	d2,d0
00006868 6A00                       		bpl.s	loc_687E
0000686A 08F8 0002 F758             		bset	#2,($FFFFF758).w
00006870 6000                       		bra.s	locret_6884
00006872                            ; ===========================================================================
00006872                            
00006872                            loc_687E:
00006872 08F8 0003 F758             		bset	#3,($FFFFF758).w
00006878                            
00006878                            locret_6884:
00006878 4E75                       		rts	
0000687A                            ; End of function ScrollBlock4
0000687A                            
0000687A                            
0000687A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000687A                            
0000687A                            
0000687A                            sub_6886:				; XREF: loc_C44
0000687A 4BF9 00C0 0004             		lea	($C00004).l,a5
00006880 4DF9 00C0 0000             		lea	($C00000).l,a6
00006886 45F8 F756                  		lea	($FFFFF756).w,a2
0000688A 47F8 F708                  		lea	($FFFFF708).w,a3
0000688E 49F8 A440                  		lea	($FFFFA440).w,a4
00006892 343C 6000                  		move.w	#$6000,d2
00006896 6100 0000                  		bsr.w	sub_6954
0000689A 45F8 F758                  		lea	($FFFFF758).w,a2
0000689E 47F8 F710                  		lea	($FFFFF710).w,a3
000068A2 6000 0000                  		bra.w	sub_69F4
000068A6                            ; End of function sub_6886
000068A6                            
000068A6                            ; ---------------------------------------------------------------------------
000068A6                            ; Subroutine to	display	correct	tiles as you move
000068A6                            ; ---------------------------------------------------------------------------
000068A6                            
000068A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000068A6                            
000068A6                            
000068A6                            LoadTilesAsYouMove:			; XREF: Demo_Time
000068A6 4BF9 00C0 0004             		lea	($C00004).l,a5
000068AC 4DF9 00C0 0000             		lea	($C00000).l,a6
000068B2 45F8 FF32                  		lea	($FFFFFF32).w,a2
000068B6 47F8 FF18                  		lea	($FFFFFF18).w,a3
000068BA 49F8 A440                  		lea	($FFFFA440).w,a4
000068BE 343C 6000                  		move.w	#$6000,d2
000068C2 6100 0000                  		bsr.w	sub_6954
000068C6 45F8 FF34                  		lea	($FFFFFF34).w,a2
000068CA 47F8 FF20                  		lea	($FFFFFF20).w,a3
000068CE 6100 0000                  		bsr.w	sub_69F4
000068D2 45F8 FF30                  		lea	($FFFFFF30).w,a2
000068D6 47F8 FF10                  		lea	($FFFFFF10).w,a3
000068DA 49F8 A400                  		lea	($FFFFA400).w,a4
000068DE 343C 4000                  		move.w	#$4000,d2
000068E2 4A12                       		tst.b	(a2)
000068E4 6700                       		beq.s	locret_6952
000068E6 0892 0000                  		bclr	#0,(a2)
000068EA 6700                       		beq.s	loc_6908
000068EC 78F0                       		moveq	#-$10,d4
000068EE 7AF0                       		moveq	#-$10,d5
000068F0 6100 0000                  		bsr.w	sub_6C20
000068F4 78F0                       		moveq	#-$10,d4
000068F6 7AF0                       		moveq	#-$10,d5
000068F8 6100 0000                  		bsr.w	sub_6AD8
000068FC                            
000068FC                            loc_6908:
000068FC 0892 0001                  		bclr	#1,(a2)
00006900 6700                       		beq.s	loc_6922
00006902 383C 00E0                  		move.w	#$E0,d4
00006906 7AF0                       		moveq	#-$10,d5
00006908 6100 0000                  		bsr.w	sub_6C20
0000690C 383C 00E0                  		move.w	#$E0,d4
00006910 7AF0                       		moveq	#-$10,d5
00006912 6100 0000                  		bsr.w	sub_6AD8
00006916                            
00006916                            loc_6922:
00006916 0892 0002                  		bclr	#2,(a2)
0000691A 6700                       		beq.s	loc_6938
0000691C 78F0                       		moveq	#-$10,d4
0000691E 7AF0                       		moveq	#-$10,d5
00006920 6100 0000                  		bsr.w	sub_6C20
00006924 78F0                       		moveq	#-$10,d4
00006926 7AF0                       		moveq	#-$10,d5
00006928 6100 0000                  		bsr.w	sub_6B04
0000692C                            
0000692C                            loc_6938:
0000692C 0892 0003                  		bclr	#3,(a2)
00006930 6700                       		beq.s	locret_6952
00006932 78F0                       		moveq	#-$10,d4
00006934 3A3C 0140                  		move.w	#$140,d5
00006938 6100 0000                  		bsr.w	sub_6C20
0000693C 78F0                       		moveq	#-$10,d4
0000693E 3A3C 0140                  		move.w	#$140,d5
00006942 6100 0000                  		bsr.w	sub_6B04
00006946                            
00006946                            locret_6952:
00006946 4E75                       		rts	
00006948                            ; End of function LoadTilesAsYouMove
00006948                            
00006948                            
00006948                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006948                            
00006948                            
00006948                            sub_6954:				; XREF: sub_6886; LoadTilesAsYouMove
00006948 4A12                       		tst.b	(a2)
0000694A 6700 0000                  		beq.w	locret_69F2
0000694E 0892 0000                  		bclr	#0,(a2)
00006952 6700                       		beq.s	loc_6972
00006954 78F0                       		moveq	#-$10,d4
00006956 7AF0                       		moveq	#-$10,d5
00006958 6100 0000                  		bsr.w	sub_6C20
0000695C 78F0                       		moveq	#-$10,d4
0000695E 7AF0                       		moveq	#-$10,d5
00006960 7C1F                       		moveq	#$1F,d6
00006962 6100 0000                  		bsr.w	sub_6ADA
00006966                            
00006966                            loc_6972:
00006966 0892 0001                  		bclr	#1,(a2)
0000696A 6700                       		beq.s	loc_698E
0000696C 383C 00E0                  		move.w	#$E0,d4
00006970 7AF0                       		moveq	#-$10,d5
00006972 6100 0000                  		bsr.w	sub_6C20
00006976 383C 00E0                  		move.w	#$E0,d4
0000697A 7AF0                       		moveq	#-$10,d5
0000697C 7C1F                       		moveq	#$1F,d6
0000697E 6100 0000                  		bsr.w	sub_6ADA
00006982                            
00006982                            loc_698E:
00006982 0892 0002                  		bclr	#2,(a2)
00006986 6700                       		beq.s	loc_69BE
00006988 78F0                       		moveq	#-$10,d4
0000698A 7AF0                       		moveq	#-$10,d5
0000698C 6100 0000                  		bsr.w	sub_6C20
00006990 78F0                       		moveq	#-$10,d4
00006992 7AF0                       		moveq	#-$10,d5
00006994 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006998 322B 0004                  		move.w	4(a3),d1
0000699C 0241 FFF0                  		andi.w	#-$10,d1
000069A0 9C41                       		sub.w	d1,d6
000069A2 6D00                       		blt.s	loc_69BE
000069A4 E84E                       		lsr.w	#4,d6
000069A6 0C46 000F                  		cmpi.w	#$F,d6
000069AA 6500                       		bcs.s	loc_69BA
000069AC 7C0F                       		moveq	#$F,d6
000069AE                            
000069AE                            loc_69BA:
000069AE 6100 0000                  		bsr.w	sub_6B06
000069B2                            
000069B2                            loc_69BE:
000069B2 0892 0003                  		bclr	#3,(a2)
000069B6 6700                       		beq.s	locret_69F2
000069B8 78F0                       		moveq	#-$10,d4
000069BA 3A3C 0140                  		move.w	#$140,d5
000069BE 6100 0000                  		bsr.w	sub_6C20
000069C2 78F0                       		moveq	#-$10,d4
000069C4 3A3C 0140                  		move.w	#$140,d5
000069C8 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
000069CC 322B 0004                  		move.w	4(a3),d1
000069D0 0241 FFF0                  		andi.w	#-$10,d1
000069D4 9C41                       		sub.w	d1,d6
000069D6 6D00                       		blt.s	locret_69F2
000069D8 E84E                       		lsr.w	#4,d6
000069DA 0C46 000F                  		cmpi.w	#$F,d6
000069DE 6500                       		bcs.s	loc_69EE
000069E0 7C0F                       		moveq	#$F,d6
000069E2                            
000069E2                            loc_69EE:
000069E2 6100 0000                  		bsr.w	sub_6B06
000069E6                            
000069E6                            locret_69F2:
000069E6 4E75                       		rts	
000069E8                            ; End of function sub_6954
000069E8                            
000069E8                            
000069E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000069E8                            
000069E8                            
000069E8                            sub_69F4:				; XREF: sub_6886; LoadTilesAsYouMove
000069E8 4A12                       		tst.b	(a2)
000069EA 6700 0000                  		beq.w	locret_6A80
000069EE 0892 0002                  		bclr	#2,(a2)
000069F2 6700                       		beq.s	loc_6A3E
000069F4 0C53 0010                  		cmpi.w	#$10,(a3)
000069F8 6500                       		bcs.s	loc_6A3E
000069FA 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
000069FE 322B 0004                  		move.w	4(a3),d1
00006A02 0241 FFF0                  		andi.w	#-$10,d1
00006A06 9841                       		sub.w	d1,d4
00006A08 3F04                       		move.w	d4,-(sp)
00006A0A 7AF0                       		moveq	#-$10,d5
00006A0C 6100 0000                  		bsr.w	sub_6C20
00006A10 381F                       		move.w	(sp)+,d4
00006A12 7AF0                       		moveq	#-$10,d5
00006A14 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006A18 322B 0004                  		move.w	4(a3),d1
00006A1C 0241 FFF0                  		andi.w	#-$10,d1
00006A20 9C41                       		sub.w	d1,d6
00006A22 6D00                       		blt.s	loc_6A3E
00006A24 E84E                       		lsr.w	#4,d6
00006A26 0446 000E                  		subi.w	#$E,d6
00006A2A 6400                       		bcc.s	loc_6A3E
00006A2C 4446                       		neg.w	d6
00006A2E 6100 0000                  		bsr.w	sub_6B06
00006A32                            
00006A32                            loc_6A3E:
00006A32 0892 0003                  		bclr	#3,(a2)
00006A36 6700                       		beq.s	locret_6A80
00006A38 3838 F7F0                  		move.w	($FFFFF7F0).w,d4
00006A3C 322B 0004                  		move.w	4(a3),d1
00006A40 0241 FFF0                  		andi.w	#-$10,d1
00006A44 9841                       		sub.w	d1,d4
00006A46 3F04                       		move.w	d4,-(sp)
00006A48 3A3C 0140                  		move.w	#$140,d5
00006A4C 6100 0000                  		bsr.w	sub_6C20
00006A50 381F                       		move.w	(sp)+,d4
00006A52 3A3C 0140                  		move.w	#$140,d5
00006A56 3C38 F7F0                  		move.w	($FFFFF7F0).w,d6
00006A5A 322B 0004                  		move.w	4(a3),d1
00006A5E 0241 FFF0                  		andi.w	#-$10,d1
00006A62 9C41                       		sub.w	d1,d6
00006A64 6D00                       		blt.s	locret_6A80
00006A66 E84E                       		lsr.w	#4,d6
00006A68 0446 000E                  		subi.w	#$E,d6
00006A6C 6400                       		bcc.s	locret_6A80
00006A6E 4446                       		neg.w	d6
00006A70 6100 0000                  		bsr.w	sub_6B06
00006A74                            
00006A74                            locret_6A80:
00006A74 4E75                       		rts	
00006A76                            ; End of function sub_69F4
00006A76                            
00006A76                            ; ===========================================================================
00006A76 4A12                       		tst.b	(a2)
00006A78 6700                       		beq.s	locret_6AD6
00006A7A 0892 0002                  		bclr	#2,(a2)
00006A7E 6700                       		beq.s	loc_6AAC
00006A80 383C 00D0                  		move.w	#$D0,d4
00006A84 322B 0004                  		move.w	4(a3),d1
00006A88 0241 FFF0                  		andi.w	#-$10,d1
00006A8C 9841                       		sub.w	d1,d4
00006A8E 3F04                       		move.w	d4,-(sp)
00006A90 7AF0                       		moveq	#-$10,d5
00006A92 6100 0000                  		bsr.w	sub_6C3C
00006A96 381F                       		move.w	(sp)+,d4
00006A98 7AF0                       		moveq	#-$10,d5
00006A9A 7C02                       		moveq	#2,d6
00006A9C 6100 0000                  		bsr.w	sub_6B06
00006AA0                            
00006AA0                            loc_6AAC:
00006AA0 0892 0003                  		bclr	#3,(a2)
00006AA4 6700                       		beq.s	locret_6AD6
00006AA6 383C 00D0                  		move.w	#$D0,d4
00006AAA 322B 0004                  		move.w	4(a3),d1
00006AAE 0241 FFF0                  		andi.w	#-$10,d1
00006AB2 9841                       		sub.w	d1,d4
00006AB4 3F04                       		move.w	d4,-(sp)
00006AB6 3A3C 0140                  		move.w	#$140,d5
00006ABA 6100 0000                  		bsr.w	sub_6C3C
00006ABE 381F                       		move.w	(sp)+,d4
00006AC0 3A3C 0140                  		move.w	#$140,d5
00006AC4 7C02                       		moveq	#2,d6
00006AC6 6100 0000                  		bsr.w	sub_6B06
00006ACA                            
00006ACA                            locret_6AD6:
00006ACA 4E75                       		rts	
00006ACC                            
00006ACC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ACC                            
00006ACC                            
00006ACC                            sub_6AD8:				; XREF: LoadTilesAsYouMove
00006ACC 7C15                       		moveq	#$15,d6
00006ACE                            ; End of function sub_6AD8
00006ACE                            
00006ACE                            
00006ACE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006ACE                            
00006ACE                            
00006ACE                            sub_6ADA:				; XREF: sub_6954; LoadTilesFromStart2
00006ACE 2E3C 0080 0000             		move.l	#$800000,d7
00006AD4 2200                       		move.l	d0,d1
00006AD6                            
00006AD6                            loc_6AE2:
00006AD6 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006ADA 6100 0000                  		bsr.w	sub_6BD6
00006ADE 2001                       		move.l	d1,d0
00006AE0 6100 0000                  		bsr.w	sub_6B32
00006AE4 5801                       		addq.b	#4,d1
00006AE6 0201 007F                  		andi.b	#$7F,d1
00006AEA 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006AEE 0645 0010                  		addi.w	#$10,d5
00006AF2 51CE FFE2                  		dbf	d6,loc_6AE2
00006AF6 4E75                       		rts	
00006AF8                            ; End of function sub_6ADA
00006AF8                            
00006AF8                            
00006AF8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AF8                            
00006AF8                            
00006AF8                            sub_6B04:				; XREF: LoadTilesAsYouMove
00006AF8 7C0F                       		moveq	#$F,d6
00006AFA                            ; End of function sub_6B04
00006AFA                            
00006AFA                            
00006AFA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006AFA                            
00006AFA                            
00006AFA                            sub_6B06:				; XREF: sub_6954
00006AFA 2E3C 0080 0000             		move.l	#$800000,d7
00006B00 2200                       		move.l	d0,d1
00006B02                            
00006B02                            loc_6B0E:
00006B02 48E7 0C00                  		movem.l	d4-d5,-(sp)
00006B06 6100 0000                  		bsr.w	sub_6BD6
00006B0A 2001                       		move.l	d1,d0
00006B0C 6100 0000                  		bsr.w	sub_6B32
00006B10 0641 0100                  		addi.w	#$100,d1
00006B14 0241 0FFF                  		andi.w	#$FFF,d1
00006B18 4CDF 0030                  		movem.l	(sp)+,d4-d5
00006B1C 0644 0010                  		addi.w	#$10,d4
00006B20 51CE FFE0                  		dbf	d6,loc_6B0E
00006B24 4E75                       		rts	
00006B26                            ; End of function sub_6B06
00006B26                            
00006B26                            
00006B26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006B26                            
00006B26                            
00006B26                            sub_6B32:				; XREF: sub_6ADA; sub_6B06
00006B26 8042                       		or.w	d2,d0
00006B28 4840                       		swap	d0
00006B2A 0810 0004                  		btst	#4,(a0)
00006B2E 6600                       		bne.s	loc_6B6E
00006B30 0810 0003                  		btst	#3,(a0)
00006B34 6600                       		bne.s	loc_6B4E
00006B36 2A80                       		move.l	d0,(a5)
00006B38 2C99                       		move.l	(a1)+,(a6)
00006B3A D087                       		add.l	d7,d0
00006B3C 2A80                       		move.l	d0,(a5)
00006B3E 2C99                       		move.l	(a1)+,(a6)
00006B40 4E75                       		rts	
00006B42                            ; ===========================================================================
00006B42                            
00006B42                            loc_6B4E:
00006B42 2A80                       		move.l	d0,(a5)
00006B44 2819                       		move.l	(a1)+,d4
00006B46 0A84 0800 0800             		eori.l	#$8000800,d4
00006B4C 4844                       		swap	d4
00006B4E 2C84                       		move.l	d4,(a6)
00006B50 D087                       		add.l	d7,d0
00006B52 2A80                       		move.l	d0,(a5)
00006B54 2819                       		move.l	(a1)+,d4
00006B56 0A84 0800 0800             		eori.l	#$8000800,d4
00006B5C 4844                       		swap	d4
00006B5E 2C84                       		move.l	d4,(a6)
00006B60 4E75                       		rts	
00006B62                            ; ===========================================================================
00006B62                            
00006B62                            loc_6B6E:
00006B62 0810 0003                  		btst	#3,(a0)
00006B66 6600                       		bne.s	loc_6B90
00006B68 2A80                       		move.l	d0,(a5)
00006B6A 2A19                       		move.l	(a1)+,d5
00006B6C 2819                       		move.l	(a1)+,d4
00006B6E 0A84 1000 1000             		eori.l	#$10001000,d4
00006B74 2C84                       		move.l	d4,(a6)
00006B76 D087                       		add.l	d7,d0
00006B78 2A80                       		move.l	d0,(a5)
00006B7A 0A85 1000 1000             		eori.l	#$10001000,d5
00006B80 2C85                       		move.l	d5,(a6)
00006B82 4E75                       		rts	
00006B84                            ; ===========================================================================
00006B84                            
00006B84                            loc_6B90:
00006B84 2A80                       		move.l	d0,(a5)
00006B86 2A19                       		move.l	(a1)+,d5
00006B88 2819                       		move.l	(a1)+,d4
00006B8A 0A84 1800 1800             		eori.l	#$18001800,d4
00006B90 4844                       		swap	d4
00006B92 2C84                       		move.l	d4,(a6)
00006B94 D087                       		add.l	d7,d0
00006B96 2A80                       		move.l	d0,(a5)
00006B98 0A85 1800 1800             		eori.l	#$18001800,d5
00006B9E 4845                       		swap	d5
00006BA0 2C85                       		move.l	d5,(a6)
00006BA2 4E75                       		rts	
00006BA4                            ; End of function sub_6B32
00006BA4                            
00006BA4                            ; ===========================================================================
00006BA4 4E75                       		rts	
00006BA6                            ; ===========================================================================
00006BA6 2A80                       		move.l	d0,(a5)
00006BA8 3A3C 2000                  		move.w	#$2000,d5
00006BAC 3819                       		move.w	(a1)+,d4
00006BAE D845                       		add.w	d5,d4
00006BB0 3C84                       		move.w	d4,(a6)
00006BB2 3819                       		move.w	(a1)+,d4
00006BB4 D845                       		add.w	d5,d4
00006BB6 3C84                       		move.w	d4,(a6)
00006BB8 D087                       		add.l	d7,d0
00006BBA 2A80                       		move.l	d0,(a5)
00006BBC 3819                       		move.w	(a1)+,d4
00006BBE D845                       		add.w	d5,d4
00006BC0 3C84                       		move.w	d4,(a6)
00006BC2 3819                       		move.w	(a1)+,d4
00006BC4 D845                       		add.w	d5,d4
00006BC6 3C84                       		move.w	d4,(a6)
00006BC8 4E75                       		rts	
00006BCA                            
00006BCA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006BCA                            
00006BCA                            
00006BCA                            sub_6BD6:				; XREF: sub_6ADA; sub_6B06
00006BCA 43F8 B000                  		lea	($FFFFB000).w,a1
00006BCE D86B 0004                  		add.w	4(a3),d4
00006BD2 DA53                       		add.w	(a3),d5
00006BD4 3604                       		move.w	d4,d3
00006BD6 E24B                       		lsr.w	#1,d3
00006BD8 0243 0380                  		andi.w	#$380,d3
00006BDC E64D                       		lsr.w	#3,d5
00006BDE 3005                       		move.w	d5,d0
00006BE0 EA48                       		lsr.w	#5,d0
00006BE2 0240 007F                  		andi.w	#$7F,d0
00006BE6 D043                       		add.w	d3,d0
00006BE8 76FF                       		moveq	#-1,d3
00006BEA 1634 0000                  		move.b	(a4,d0.w),d3
00006BEE 6700                       		beq.s	locret_6C1E
00006BF0 5303                       		subq.b	#1,d3
00006BF2 0243 007F                  		andi.w	#$7F,d3
00006BF6 EE5B                       		ror.w	#7,d3
00006BF8 D844                       		add.w	d4,d4
00006BFA 0244 01E0                  		andi.w	#$1E0,d4
00006BFE 0245 001E                  		andi.w	#$1E,d5
00006C02 D644                       		add.w	d4,d3
00006C04 D645                       		add.w	d5,d3
00006C06 2043                       		movea.l	d3,a0
00006C08 3610                       		move.w	(a0),d3
00006C0A 0243 03FF                  		andi.w	#$3FF,d3
00006C0E E74B                       		lsl.w	#3,d3
00006C10 D2C3                       		adda.w	d3,a1
00006C12                            
00006C12                            locret_6C1E:
00006C12 4E75                       		rts	
00006C14                            ; End of function sub_6BD6
00006C14                            
00006C14                            
00006C14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C14                            
00006C14                            
00006C14                            sub_6C20:				; XREF: LoadTilesAsYouMove; et al
00006C14 D86B 0004                  		add.w	4(a3),d4
00006C18 DA53                       		add.w	(a3),d5
00006C1A 0244 00F0                  		andi.w	#$F0,d4
00006C1E 0245 01F0                  		andi.w	#$1F0,d5
00006C22 E94C                       		lsl.w	#4,d4
00006C24 E44D                       		lsr.w	#2,d5
00006C26 D845                       		add.w	d5,d4
00006C28 7003                       		moveq	#3,d0
00006C2A 4840                       		swap	d0
00006C2C 3004                       		move.w	d4,d0
00006C2E 4E75                       		rts	
00006C30                            ; End of function sub_6C20
00006C30                            
00006C30                            
00006C30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C30                            ; not used
00006C30                            
00006C30                            
00006C30                            sub_6C3C:
00006C30 D86B 0004                  		add.w	4(a3),d4
00006C34 DA53                       		add.w	(a3),d5
00006C36 0244 00F0                  		andi.w	#$F0,d4
00006C3A 0245 01F0                  		andi.w	#$1F0,d5
00006C3E E94C                       		lsl.w	#4,d4
00006C40 E44D                       		lsr.w	#2,d5
00006C42 D845                       		add.w	d5,d4
00006C44 7002                       		moveq	#2,d0
00006C46 4840                       		swap	d0
00006C48 3004                       		move.w	d4,d0
00006C4A 4E75                       		rts	
00006C4C                            ; End of function sub_6C3C
00006C4C                            
00006C4C                            ; ---------------------------------------------------------------------------
00006C4C                            ; Subroutine to	load tiles as soon as the level	appears
00006C4C                            ; ---------------------------------------------------------------------------
00006C4C                            
00006C4C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C4C                            
00006C4C                            
00006C4C                            LoadTilesFromStart:			; XREF: Level; EndingSequence
00006C4C 4BF9 00C0 0004             		lea	($C00004).l,a5
00006C52 4DF9 00C0 0000             		lea	($C00000).l,a6
00006C58 47F8 F700                  		lea	($FFFFF700).w,a3
00006C5C 49F8 A400                  		lea	($FFFFA400).w,a4
00006C60 343C 4000                  		move.w	#$4000,d2
00006C64 6100                       		bsr.s	LoadTilesFromStart2
00006C66 47F8 F708                  		lea	($FFFFF708).w,a3
00006C6A 49F8 A440                  		lea	($FFFFA440).w,a4
00006C6E 343C 6000                  		move.w	#$6000,d2
00006C72                            ; End of function LoadTilesFromStart
00006C72                            
00006C72                            
00006C72                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C72                            
00006C72                            
00006C72                            LoadTilesFromStart2:			; XREF: LoadTilesFromStart
00006C72 78F0                       		moveq	#-$10,d4
00006C74 7C0F                       		moveq	#$F,d6
00006C76                            
00006C76                            loc_6C82:
00006C76 48E7 0E00                  		movem.l	d4-d6,-(sp)
00006C7A 7A00                       		moveq	#0,d5
00006C7C 3204                       		move.w	d4,d1
00006C7E 6100 FF94                  		bsr.w	sub_6C20
00006C82 3801                       		move.w	d1,d4
00006C84 7A00                       		moveq	#0,d5
00006C86 7C1F                       		moveq	#$1F,d6
00006C88 6100 FE44                  		bsr.w	sub_6ADA
00006C8C 4CDF 0070                  		movem.l	(sp)+,d4-d6
00006C90 0644 0010                  		addi.w	#$10,d4
00006C94 51CE FFE0                  		dbf	d6,loc_6C82
00006C98 4E75                       		rts	
00006C9A                            ; End of function LoadTilesFromStart2
00006C9A                            
00006C9A                            ; ---------------------------------------------------------------------------
00006C9A                            ; Main Load Block loading subroutine
00006C9A                            ; ---------------------------------------------------------------------------
00006C9A                            
00006C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006C9A                            
00006C9A                            
00006C9A                            MainLoadBlockLoad:			; XREF: Level; EndingSequence
00006C9A 7000                       		moveq	#0,d0
00006C9C 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006CA0 E948                       		lsl.w	#4,d0
00006CA2 45F9 0000 0000             		lea	(MainLoadBlocks).l,a2
00006CA8 45F2 0000                  		lea	(a2,d0.w),a2
00006CAC 2F0A                       		move.l	a2,-(sp)
00006CAE 588A                       		addq.l	#4,a2
00006CB0 205A                       		movea.l	(a2)+,a0
00006CB2 43F8 B000                  		lea	($FFFFB000).w,a1 ; RAM address for 16x16 mappings
00006CB6 303C 0000                  		move.w	#0,d0
00006CBA 6100 AA62                  		bsr.w	EniDec
00006CBE 205A                       		movea.l	(a2)+,a0
00006CC0 43F9 00FF 0000             		lea	($FF0000).l,a1	; RAM address for 256x256 mappings
00006CC6 6100 ABD4                  		bsr.w	KosDec
00006CCA 6100 0000                  		bsr.w	LevelLayoutLoad
00006CCE 301A                       		move.w	(a2)+,d0
00006CD0 3012                       		move.w	(a2),d0
00006CD2 0240 00FF                  		andi.w	#$FF,d0
00006CD6 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; is level SBZ3 (LZ4) ?
00006CDC 6600                       		bne.s	MLB_ChkSBZPal	; if not, branch
00006CDE 700C                       		moveq	#$C,d0		; use SB3 pallet
00006CE0                            
00006CE0                            MLB_ChkSBZPal:
00006CE0 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2?
00006CE6 6700                       		beq.s	MLB_UsePal0E	; if yes, branch
00006CE8 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; is level FZ?
00006CEE 6600                       		bne.s	MLB_NormalPal	; if not, branch
00006CF0                            
00006CF0                            MLB_UsePal0E:
00006CF0 700E                       		moveq	#$E,d0		; use SBZ2/FZ pallet
00006CF2                            
00006CF2                            MLB_NormalPal:
00006CF2 6100 B408                  		bsr.w	PalLoad1	; load pallet (based on	d0)
00006CF6 245F                       		movea.l	(sp)+,a2
00006CF8 584A                       		addq.w	#4,a2
00006CFA 7000                       		moveq	#0,d0
00006CFC 1012                       		move.b	(a2),d0
00006CFE 6700                       		beq.s	locret_6D10
00006D00 6100 A87E                  		bsr.w	LoadPLC		; load pattern load cues
00006D04                            
00006D04                            locret_6D10:
00006D04 4E75                       		rts	
00006D06                            ; End of function MainLoadBlockLoad
00006D06                            
00006D06                            ; ---------------------------------------------------------------------------
00006D06                            ; Level	layout loading subroutine
00006D06                            ; ---------------------------------------------------------------------------
00006D06                            
00006D06                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D06                            
00006D06                            
00006D06                            LevelLayoutLoad:			; XREF: TitleScreen; MainLoadBlockLoad
00006D06 47F8 A400                  		lea	($FFFFA400).w,a3
00006D0A 323C 01FF                  		move.w	#$1FF,d1
00006D0E 7000                       		moveq	#0,d0
00006D10                            
00006D10                            LevLoad_ClrRam:
00006D10 26C0                       		move.l	d0,(a3)+
00006D12 51C9 FFFC                  		dbf	d1,LevLoad_ClrRam ; clear the RAM ($FFFFA400-A7FF)
00006D16                            
00006D16 47F8 A400                  		lea	($FFFFA400).w,a3 ; RAM address for level layout
00006D1A 7200                       		moveq	#0,d1
00006D1C 6100 0000                  		bsr.w	LevelLayoutLoad2 ; load	level layout into RAM
00006D20 47F8 A440                  		lea	($FFFFA440).w,a3 ; RAM address for background layout
00006D24 7202                       		moveq	#2,d1
00006D26                            ; End of function LevelLayoutLoad
00006D26                            
00006D26                            ; "LevelLayoutLoad2" is	run twice - for	the level and the background
00006D26                            
00006D26                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D26                            
00006D26                            
00006D26                            LevelLayoutLoad2:			; XREF: LevelLayoutLoad
00006D26 3038 FE10                  		move.w	($FFFFFE10).w,d0
00006D2A ED08                       		lsl.b	#6,d0
00006D2C EA48                       		lsr.w	#5,d0
00006D2E 3400                       		move.w	d0,d2
00006D30 D040                       		add.w	d0,d0
00006D32 D042                       		add.w	d2,d0
00006D34 D041                       		add.w	d1,d0
00006D36 43F9 0000 0000             		lea	(Level_Index).l,a1
00006D3C 3031 0000                  		move.w	(a1,d0.w),d0
00006D40 43F1 0000                  		lea	(a1,d0.w),a1
00006D44 7200                       		moveq	#0,d1
00006D46 3401                       		move.w	d1,d2
00006D48 1219                       		move.b	(a1)+,d1	; load level width (in tiles)
00006D4A 1419                       		move.b	(a1)+,d2	; load level height (in	tiles)
00006D4C                            
00006D4C                            LevLoad_NumRows:
00006D4C 3001                       		move.w	d1,d0
00006D4E 204B                       		movea.l	a3,a0
00006D50                            
00006D50                            LevLoad_Row:
00006D50 10D9                       		move.b	(a1)+,(a0)+
00006D52 51C8 FFFC                  		dbf	d0,LevLoad_Row	; load 1 row
00006D56 47EB 0080                  		lea	$80(a3),a3	; do next row
00006D5A 51CA FFF0                  		dbf	d2,LevLoad_NumRows ; repeat for	number of rows
00006D5E 4E75                       		rts	
00006D60                            ; End of function LevelLayoutLoad2
00006D60                            
00006D60                            ; ---------------------------------------------------------------------------
00006D60                            ; Dynamic screen resize	loading	subroutine
00006D60                            ; ---------------------------------------------------------------------------
00006D60                            
00006D60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00006D60                            
00006D60                            
00006D60                            DynScrResizeLoad:			; XREF: DeformBgLayer
00006D60 7000                       		moveq	#0,d0
00006D62 1038 FE10                  		move.b	($FFFFFE10).w,d0
00006D66 D040                       		add.w	d0,d0
00006D68 303B 0000                  		move.w	Resize_Index(pc,d0.w),d0
00006D6C 4EBB 0000                  		jsr	Resize_Index(pc,d0.w)
00006D70 7202                       		moveq	#2,d1
00006D72 3038 F726                  		move.w	($FFFFF726).w,d0
00006D76 9078 F72E                  		sub.w	($FFFFF72E).w,d0
00006D7A 6700                       		beq.s	locret_6DAA
00006D7C 6400                       		bcc.s	loc_6DAC
00006D7E 4441                       		neg.w	d1
00006D80 3038 F704                  		move.w	($FFFFF704).w,d0
00006D84 B078 F726                  		cmp.w	($FFFFF726).w,d0
00006D88 6300                       		bls.s	loc_6DA0
00006D8A 31C0 F72E                  		move.w	d0,($FFFFF72E).w
00006D8E 0278 FFFE F72E             		andi.w	#-2,($FFFFF72E).w
00006D94                            
00006D94                            loc_6DA0:
00006D94 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006D98 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006D9E                            
00006D9E                            locret_6DAA:
00006D9E 4E75                       		rts	
00006DA0                            ; ===========================================================================
00006DA0                            
00006DA0                            loc_6DAC:				; XREF: DynScrResizeLoad
00006DA0 3038 F704                  		move.w	($FFFFF704).w,d0
00006DA4 5040                       		addq.w	#8,d0
00006DA6 B078 F72E                  		cmp.w	($FFFFF72E).w,d0
00006DAA 6500                       		bcs.s	loc_6DC4
00006DAC 0838 0001 D022             		btst	#1,($FFFFD022).w
00006DB2 6700                       		beq.s	loc_6DC4
00006DB4 D241                       		add.w	d1,d1
00006DB6 D241                       		add.w	d1,d1
00006DB8                            
00006DB8                            loc_6DC4:
00006DB8 D378 F72E                  		add.w	d1,($FFFFF72E).w
00006DBC 11FC 0001 F75C             		move.b	#1,($FFFFF75C).w
00006DC2 4E75                       		rts	
00006DC4                            ; End of function DynScrResizeLoad
00006DC4                            
00006DC4                            ; ===========================================================================
00006DC4                            ; ---------------------------------------------------------------------------
00006DC4                            ; Offset index for dynamic screen resizing
00006DC4                            ; ---------------------------------------------------------------------------
00006DC4 0000 0000                  Resize_Index:	dc.w Resize_GHZ-Resize_Index, Resize_LZ-Resize_Index
00006DC8 0000 0000                  		dc.w Resize_MZ-Resize_Index, Resize_SLZ-Resize_Index
00006DCC 0000 0000                  		dc.w Resize_SYZ-Resize_Index, Resize_SBZ-Resize_Index
00006DD0 0000                       		dc.w Resize_Ending-Resize_Index
00006DD2                            ; ===========================================================================
00006DD2                            ; ---------------------------------------------------------------------------
00006DD2                            ; Green	Hill Zone dynamic screen resizing
00006DD2                            ; ---------------------------------------------------------------------------
00006DD2                            
00006DD2                            Resize_GHZ:				; XREF: Resize_Index
00006DD2 7000                       		moveq	#0,d0
00006DD4 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006DD8 D040                       		add.w	d0,d0
00006DDA 303B 0000                  		move.w	Resize_GHZx(pc,d0.w),d0
00006DDE 4EFB 0000                  		jmp	Resize_GHZx(pc,d0.w)
00006DE2                            ; ===========================================================================
00006DE2 0000                       Resize_GHZx:	dc.w Resize_GHZ1-Resize_GHZx
00006DE4 0000                       		dc.w Resize_GHZ2-Resize_GHZx
00006DE6 0000                       		dc.w Resize_GHZ3-Resize_GHZx
00006DE8                            ; ===========================================================================
00006DE8                            
00006DE8                            Resize_GHZ1:
00006DE8 31FC 0300 F726             		move.w	#$300,($FFFFF726).w ; set lower	y-boundary
00006DEE 0C78 1780 F700             		cmpi.w	#$1780,($FFFFF700).w ; has the camera reached $1780 on x-axis?
00006DF4 6500                       		bcs.s	locret_6E08	; if not, branch
00006DF6 31FC 0400 F726             		move.w	#$400,($FFFFF726).w ; set lower	y-boundary
00006DFC                            
00006DFC                            locret_6E08:
00006DFC 4E75                       		rts	
00006DFE                            ; ===========================================================================
00006DFE                            
00006DFE                            Resize_GHZ2:
00006DFE 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E04 0C78 0ED0 F700             		cmpi.w	#$ED0,($FFFFF700).w
00006E0A 6500                       		bcs.s	locret_6E3A
00006E0C 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00006E12 0C78 1600 F700             		cmpi.w	#$1600,($FFFFF700).w
00006E18 6500                       		bcs.s	locret_6E3A
00006E1A 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006E20 0C78 1D60 F700             		cmpi.w	#$1D60,($FFFFF700).w
00006E26 6500                       		bcs.s	locret_6E3A
00006E28 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E2E                            
00006E2E                            locret_6E3A:
00006E2E 4E75                       		rts	
00006E30                            ; ===========================================================================
00006E30                            
00006E30                            Resize_GHZ3:
00006E30 7000                       		moveq	#0,d0
00006E32 1038 F742                  		move.b	($FFFFF742).w,d0
00006E36 303B 0000                  		move.w	off_6E4A(pc,d0.w),d0
00006E3A 4EFB 0000                  		jmp	off_6E4A(pc,d0.w)
00006E3E                            ; ===========================================================================
00006E3E 0000                       off_6E4A:	dc.w Resize_GHZ3main-off_6E4A
00006E40 0000                       		dc.w Resize_GHZ3boss-off_6E4A
00006E42 0000                       		dc.w Resize_GHZ3end-off_6E4A
00006E44                            ; ===========================================================================
00006E44                            
00006E44                            Resize_GHZ3main:
00006E44 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E4A 0C78 0380 F700             		cmpi.w	#$380,($FFFFF700).w
00006E50 6500                       		bcs.s	locret_6E96
00006E52 31FC 0310 F726             		move.w	#$310,($FFFFF726).w
00006E58 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006E5E 6500                       		bcs.s	locret_6E96
00006E60 0C78 0280 F704             		cmpi.w	#$280,($FFFFF704).w
00006E66 6500                       		bcs.s	loc_6E98
00006E68 31FC 0400 F726             		move.w	#$400,($FFFFF726).w
00006E6E 0C78 1380 F700             		cmpi.w	#$1380,($FFFFF700).w
00006E74 6400                       		bcc.s	loc_6E8E
00006E76 31FC 04C0 F726             		move.w	#$4C0,($FFFFF726).w
00006E7C 31FC 04C0 F72E             		move.w	#$4C0,($FFFFF72E).w
00006E82                            
00006E82                            loc_6E8E:
00006E82 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00006E88 6400                       		bcc.s	loc_6E98
00006E8A                            
00006E8A                            locret_6E96:
00006E8A 4E75                       		rts	
00006E8C                            ; ===========================================================================
00006E8C                            
00006E8C                            loc_6E98:
00006E8C 31FC 0300 F726             		move.w	#$300,($FFFFF726).w
00006E92 5438 F742                  		addq.b	#2,($FFFFF742).w
00006E96 4E75                       		rts	
00006E98                            ; ===========================================================================
00006E98                            
00006E98                            Resize_GHZ3boss:
00006E98 0C78 0960 F700             		cmpi.w	#$960,($FFFFF700).w
00006E9E 6400                       		bcc.s	loc_6EB0
00006EA0 5538 F742                  		subq.b	#2,($FFFFF742).w
00006EA4                            
00006EA4                            loc_6EB0:
00006EA4 0C78 2960 F700             		cmpi.w	#$2960,($FFFFF700).w
00006EAA 6500                       		bcs.s	locret_6EE8
00006EAC 6100 0000                  		bsr.w	SingleObjLoad
00006EB0 6600                       		bne.s	loc_6ED0
00006EB2 12BC 003D                  		move.b	#$3D,0(a1)	; load GHZ boss	object
00006EB6 337C 2A60 0008             		move.w	#$2A60,8(a1)
00006EBC 337C 0280 000C             		move.w	#$280,$C(a1)
00006EC2                            
00006EC2                            loc_6ED0:
00006EC2 303C 008C                  		move.w	#$8C,d0
00006EC6 6100 A4CE                  		bsr.w	PlaySound	; play boss music
00006ECA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006ED0 5438 F742                  		addq.b	#2,($FFFFF742).w
00006ED4 7011                       		moveq	#$11,d0
00006ED6 6000 A6A8                  		bra.w	LoadPLC		; load boss patterns
00006EDA                            ; ===========================================================================
00006EDA                            
00006EDA                            locret_6EE8:
00006EDA 4E75                       		rts	
00006EDC                            ; ===========================================================================
00006EDC                            
00006EDC                            Resize_GHZ3end:
00006EDC 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00006EE2 4E75                       		rts	
00006EE4                            ; ===========================================================================
00006EE4                            ; ---------------------------------------------------------------------------
00006EE4                            ; Labyrinth Zone dynamic screen	resizing
00006EE4                            ; ---------------------------------------------------------------------------
00006EE4                            
00006EE4                            Resize_LZ:				; XREF: Resize_Index
00006EE4 7000                       		moveq	#0,d0
00006EE6 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006EEA D040                       		add.w	d0,d0
00006EEC 303B 0000                  		move.w	Resize_LZx(pc,d0.w),d0
00006EF0 4EFB 0000                  		jmp	Resize_LZx(pc,d0.w)
00006EF4                            ; ===========================================================================
00006EF4 0000                       Resize_LZx:	dc.w Resize_LZ12-Resize_LZx
00006EF6 0000                       		dc.w Resize_LZ12-Resize_LZx
00006EF8 0000                       		dc.w Resize_LZ3-Resize_LZx
00006EFA 0000                       		dc.w Resize_SBZ3-Resize_LZx
00006EFC                            ; ===========================================================================
00006EFC                            
00006EFC                            Resize_LZ12:
00006EFC 4E75                       		rts	
00006EFE                            ; ===========================================================================
00006EFE                            
00006EFE                            Resize_LZ3:
00006EFE 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch $F	been pressed?
00006F02 6700                       		beq.s	loc_6F28	; if not, branch
00006F04 43F8 A506                  		lea	($FFFFA506).w,a1
00006F08 0C11 0007                  		cmpi.b	#7,(a1)
00006F0C 6700                       		beq.s	loc_6F28
00006F0E 12BC 0007                  		move.b	#7,(a1)		; modify level layout
00006F12 303C 00B7                  		move.w	#$B7,d0
00006F16 6100 A484                  		bsr.w	PlaySound_Special ; play rumbling sound
00006F1A                            
00006F1A                            loc_6F28:
00006F1A 4A38 F742                  		tst.b	($FFFFF742).w
00006F1E 6600                       		bne.s	locret_6F64
00006F20 0C78 1CA0 F700             		cmpi.w	#$1CA0,($FFFFF700).w
00006F26 6500                       		bcs.s	locret_6F62
00006F28 0C78 0600 F704             		cmpi.w	#$600,($FFFFF704).w
00006F2E 6400                       		bcc.s	locret_6F62
00006F30 6100 0000                  		bsr.w	SingleObjLoad
00006F34 6600                       		bne.s	loc_6F4A
00006F36 12BC 0077                  		move.b	#$77,0(a1)	; load LZ boss object
00006F3A                            
00006F3A                            loc_6F4A:
00006F3A 303C 008C                  		move.w	#$8C,d0
00006F3E 6100 A456                  		bsr.w	PlaySound	; play boss music
00006F42 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00006F48 5438 F742                  		addq.b	#2,($FFFFF742).w
00006F4C 7011                       		moveq	#$11,d0
00006F4E 6000 A630                  		bra.w	LoadPLC		; load boss patterns
00006F52                            ; ===========================================================================
00006F52                            
00006F52                            locret_6F62:
00006F52 4E75                       		rts	
00006F54                            ; ===========================================================================
00006F54                            
00006F54                            locret_6F64:
00006F54 4E75                       		rts	
00006F56                            ; ===========================================================================
00006F56                            
00006F56                            Resize_SBZ3:
00006F56 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00006F5C 6500                       		bcs.s	locret_6F8C
00006F5E 0C78 0018 D00C             		cmpi.w	#$18,($FFFFD00C).w ; has Sonic reached the top of the level?
00006F64 6400                       		bcc.s	locret_6F8C	; if not, branch
00006F66 4238 FE30                  		clr.b	($FFFFFE30).w
00006F6A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
00006F70 31FC 0502 FE10             		move.w	#$502,($FFFFFE10).w ; set level	number to 0502 (FZ)
00006F76 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; freeze Sonic
00006F7C                            
00006F7C                            locret_6F8C:
00006F7C 4E75                       		rts	
00006F7E                            ; ===========================================================================
00006F7E                            ; ---------------------------------------------------------------------------
00006F7E                            ; Marble Zone dynamic screen resizing
00006F7E                            ; ---------------------------------------------------------------------------
00006F7E                            
00006F7E                            Resize_MZ:				; XREF: Resize_Index
00006F7E 7000                       		moveq	#0,d0
00006F80 1038 FE11                  		move.b	($FFFFFE11).w,d0
00006F84 D040                       		add.w	d0,d0
00006F86 303B 0000                  		move.w	Resize_MZx(pc,d0.w),d0
00006F8A 4EFB 0000                  		jmp	Resize_MZx(pc,d0.w)
00006F8E                            ; ===========================================================================
00006F8E 0000                       Resize_MZx:	dc.w Resize_MZ1-Resize_MZx
00006F90 0000                       		dc.w Resize_MZ2-Resize_MZx
00006F92 0000                       		dc.w Resize_MZ3-Resize_MZx
00006F94                            ; ===========================================================================
00006F94                            
00006F94                            Resize_MZ1:
00006F94 7000                       		moveq	#0,d0
00006F96 1038 F742                  		move.b	($FFFFF742).w,d0
00006F9A 303B 0000                  		move.w	off_6FB2(pc,d0.w),d0
00006F9E 4EFB 0000                  		jmp	off_6FB2(pc,d0.w)
00006FA2                            ; ===========================================================================
00006FA2 0000                       off_6FB2:	dc.w loc_6FBA-off_6FB2
00006FA4 0000                       		dc.w loc_6FEA-off_6FB2
00006FA6 0000                       		dc.w loc_702E-off_6FB2
00006FA8 0000                       		dc.w loc_7050-off_6FB2
00006FAA                            ; ===========================================================================
00006FAA                            
00006FAA                            loc_6FBA:
00006FAA 31FC 01D0 F726             		move.w	#$1D0,($FFFFF726).w
00006FB0 0C78 0700 F700             		cmpi.w	#$700,($FFFFF700).w
00006FB6 6500                       		bcs.s	locret_6FE8
00006FB8 31FC 0220 F726             		move.w	#$220,($FFFFF726).w
00006FBE 0C78 0D00 F700             		cmpi.w	#$D00,($FFFFF700).w
00006FC4 6500                       		bcs.s	locret_6FE8
00006FC6 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00006FCC 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00006FD2 6500                       		bcs.s	locret_6FE8
00006FD4 5438 F742                  		addq.b	#2,($FFFFF742).w
00006FD8                            
00006FD8                            locret_6FE8:
00006FD8 4E75                       		rts	
00006FDA                            ; ===========================================================================
00006FDA                            
00006FDA                            loc_6FEA:
00006FDA 0C78 0340 F704             		cmpi.w	#$340,($FFFFF704).w
00006FE0 6400                       		bcc.s	loc_6FF8
00006FE2 5538 F742                  		subq.b	#2,($FFFFF742).w
00006FE6 4E75                       		rts	
00006FE8                            ; ===========================================================================
00006FE8                            
00006FE8                            loc_6FF8:
00006FE8 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
00006FEE 0C78 0E00 F700             		cmpi.w	#$E00,($FFFFF700).w
00006FF4 6400                       		bcc.s	locret_702C
00006FF6 31FC 0340 F72C             		move.w	#$340,($FFFFF72C).w
00006FFC 31FC 0340 F726             		move.w	#$340,($FFFFF726).w
00007002 0C78 0A90 F700             		cmpi.w	#$A90,($FFFFF700).w
00007008 6400                       		bcc.s	locret_702C
0000700A 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007010 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007016 6500                       		bcs.s	locret_702C
00007018 5438 F742                  		addq.b	#2,($FFFFF742).w
0000701C                            
0000701C                            locret_702C:
0000701C 4E75                       		rts	
0000701E                            ; ===========================================================================
0000701E                            
0000701E                            loc_702E:
0000701E 0C78 0370 F704             		cmpi.w	#$370,($FFFFF704).w
00007024 6400                       		bcc.s	loc_703C
00007026 5538 F742                  		subq.b	#2,($FFFFF742).w
0000702A 4E75                       		rts	
0000702C                            ; ===========================================================================
0000702C                            
0000702C                            loc_703C:
0000702C 0C78 0500 F704             		cmpi.w	#$500,($FFFFF704).w
00007032 6500                       		bcs.s	locret_704E
00007034 31FC 0500 F72C             		move.w	#$500,($FFFFF72C).w
0000703A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000703E                            
0000703E                            locret_704E:
0000703E 4E75                       		rts	
00007040                            ; ===========================================================================
00007040                            
00007040                            loc_7050:
00007040 0C78 0E70 F700             		cmpi.w	#$E70,($FFFFF700).w
00007046 6500                       		bcs.s	locret_7072
00007048 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0000704E 31FC 0500 F726             		move.w	#$500,($FFFFF726).w
00007054 0C78 1430 F700             		cmpi.w	#$1430,($FFFFF700).w
0000705A 6500                       		bcs.s	locret_7072
0000705C 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
00007062                            
00007062                            locret_7072:
00007062 4E75                       		rts	
00007064                            ; ===========================================================================
00007064                            
00007064                            Resize_MZ2:
00007064 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
0000706A 0C78 1700 F700             		cmpi.w	#$1700,($FFFFF700).w
00007070 6500                       		bcs.s	locret_7088
00007072 31FC 0200 F726             		move.w	#$200,($FFFFF726).w
00007078                            
00007078                            locret_7088:
00007078 4E75                       		rts	
0000707A                            ; ===========================================================================
0000707A                            
0000707A                            Resize_MZ3:
0000707A 7000                       		moveq	#0,d0
0000707C 1038 F742                  		move.b	($FFFFF742).w,d0
00007080 303B 0000                  		move.w	off_7098(pc,d0.w),d0
00007084 4EFB 0000                  		jmp	off_7098(pc,d0.w)
00007088                            ; ===========================================================================
00007088 0000                       off_7098:	dc.w Resize_MZ3boss-off_7098
0000708A 0000                       		dc.w Resize_MZ3end-off_7098
0000708C                            ; ===========================================================================
0000708C                            
0000708C                            Resize_MZ3boss:
0000708C 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007092 0C78 1560 F700             		cmpi.w	#$1560,($FFFFF700).w
00007098 6500                       		bcs.s	locret_70E8
0000709A 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
000070A0 0C78 17F0 F700             		cmpi.w	#$17F0,($FFFFF700).w
000070A6 6500                       		bcs.s	locret_70E8
000070A8 6100 0000                  		bsr.w	SingleObjLoad
000070AC 6600                       		bne.s	loc_70D0
000070AE 12BC 0073                  		move.b	#$73,0(a1)	; load MZ boss object
000070B2 337C 19F0 0008             		move.w	#$19F0,8(a1)
000070B8 337C 022C 000C             		move.w	#$22C,$C(a1)
000070BE                            
000070BE                            loc_70D0:
000070BE 303C 008C                  		move.w	#$8C,d0
000070C2 6100 A2D2                  		bsr.w	PlaySound	; play boss music
000070C6 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000070CC 5438 F742                  		addq.b	#2,($FFFFF742).w
000070D0 7011                       		moveq	#$11,d0
000070D2 6000 A4AC                  		bra.w	LoadPLC		; load boss patterns
000070D6                            ; ===========================================================================
000070D6                            
000070D6                            locret_70E8:
000070D6 4E75                       		rts	
000070D8                            ; ===========================================================================
000070D8                            
000070D8                            Resize_MZ3end:
000070D8 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000070DE 4E75                       		rts	
000070E0                            ; ===========================================================================
000070E0                            ; ---------------------------------------------------------------------------
000070E0                            ; Star Light Zone dynamic screen resizing
000070E0                            ; ---------------------------------------------------------------------------
000070E0                            
000070E0                            Resize_SLZ:				; XREF: Resize_Index
000070E0 7000                       		moveq	#0,d0
000070E2 1038 FE11                  		move.b	($FFFFFE11).w,d0
000070E6 D040                       		add.w	d0,d0
000070E8 303B 0000                  		move.w	Resize_SLZx(pc,d0.w),d0
000070EC 4EFB 0000                  		jmp	Resize_SLZx(pc,d0.w)
000070F0                            ; ===========================================================================
000070F0 0000                       Resize_SLZx:	dc.w Resize_SLZ12-Resize_SLZx
000070F2 0000                       		dc.w Resize_SLZ12-Resize_SLZx
000070F4 0000                       		dc.w Resize_SLZ3-Resize_SLZx
000070F6                            ; ===========================================================================
000070F6                            
000070F6                            Resize_SLZ12:
000070F6 4E75                       		rts	
000070F8                            ; ===========================================================================
000070F8                            
000070F8                            Resize_SLZ3:
000070F8 7000                       		moveq	#0,d0
000070FA 1038 F742                  		move.b	($FFFFF742).w,d0
000070FE 303B 0000                  		move.w	off_7118(pc,d0.w),d0
00007102 4EFB 0000                  		jmp	off_7118(pc,d0.w)
00007106                            ; ===========================================================================
00007106 0000                       off_7118:	dc.w Resize_SLZ3main-off_7118
00007108 0000                       		dc.w Resize_SLZ3boss-off_7118
0000710A 0000                       		dc.w Resize_SLZ3end-off_7118
0000710C                            ; ===========================================================================
0000710C                            
0000710C                            Resize_SLZ3main:
0000710C 0C78 1E70 F700             		cmpi.w	#$1E70,($FFFFF700).w
00007112 6500                       		bcs.s	locret_7130
00007114 31FC 0210 F726             		move.w	#$210,($FFFFF726).w
0000711A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000711E                            
0000711E                            locret_7130:
0000711E 4E75                       		rts	
00007120                            ; ===========================================================================
00007120                            
00007120                            Resize_SLZ3boss:
00007120 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007126 6500                       		bcs.s	locret_715C
00007128 6100 0000                  		bsr.w	SingleObjLoad
0000712C 6600                       		bne.s	loc_7144
0000712E 12BC 007A                  		move.b	#$7A,(a1)	; load SLZ boss	object
00007132                            
00007132                            loc_7144:
00007132 303C 008C                  		move.w	#$8C,d0
00007136 6100 A25E                  		bsr.w	PlaySound	; play boss music
0000713A 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007140 5438 F742                  		addq.b	#2,($FFFFF742).w
00007144 7011                       		moveq	#$11,d0
00007146 6000 A438                  		bra.w	LoadPLC		; load boss patterns
0000714A                            ; ===========================================================================
0000714A                            
0000714A                            locret_715C:
0000714A 4E75                       		rts	
0000714C                            ; ===========================================================================
0000714C                            
0000714C                            Resize_SLZ3end:
0000714C 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
00007152 4E75                       		rts
00007154 4E75                       		rts
00007156                            ; ===========================================================================
00007156                            ; ---------------------------------------------------------------------------
00007156                            ; Spring Yard Zone dynamic screen resizing
00007156                            ; ---------------------------------------------------------------------------
00007156                            
00007156                            Resize_SYZ:				; XREF: Resize_Index
00007156 7000                       		moveq	#0,d0
00007158 1038 FE11                  		move.b	($FFFFFE11).w,d0
0000715C D040                       		add.w	d0,d0
0000715E 303B 0000                  		move.w	Resize_SYZx(pc,d0.w),d0
00007162 4EFB 0000                  		jmp	Resize_SYZx(pc,d0.w)
00007166                            ; ===========================================================================
00007166 0000                       Resize_SYZx:	dc.w Resize_SYZ1-Resize_SYZx
00007168 0000                       		dc.w Resize_SYZ2-Resize_SYZx
0000716A 0000                       		dc.w Resize_SYZ3-Resize_SYZx
0000716C                            ; ===========================================================================
0000716C                            
0000716C                            Resize_SYZ1:
0000716C 4E75                       		rts	
0000716E                            ; ===========================================================================
0000716E                            
0000716E                            Resize_SYZ2:
0000716E 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007174 0C78 25A0 F700             		cmpi.w	#$25A0,($FFFFF700).w
0000717A 6500                       		bcs.s	locret_71A2
0000717C 31FC 0420 F726             		move.w	#$420,($FFFFF726).w
00007182 0C78 04D0 D00C             		cmpi.w	#$4D0,($FFFFD00C).w
00007188 6500                       		bcs.s	locret_71A2
0000718A 31FC 0520 F726             		move.w	#$520,($FFFFF726).w
00007190                            
00007190                            locret_71A2:
00007190 4E75                       		rts	
00007192                            ; ===========================================================================
00007192                            
00007192                            Resize_SYZ3:
00007192 7000                       		moveq	#0,d0
00007194 1038 F742                  		move.b	($FFFFF742).w,d0
00007198 303B 0000                  		move.w	off_71B2(pc,d0.w),d0
0000719C 4EFB 0000                  		jmp	off_71B2(pc,d0.w)
000071A0                            ; ===========================================================================
000071A0 0000                       off_71B2:	dc.w Resize_SYZ3main-off_71B2
000071A2 0000                       		dc.w Resize_SYZ3boss-off_71B2
000071A4 0000                       		dc.w Resize_SYZ3end-off_71B2
000071A6                            ; ===========================================================================
000071A6                            
000071A6                            Resize_SYZ3main:
000071A6 0C78 2AC0 F700             		cmpi.w	#$2AC0,($FFFFF700).w
000071AC 6500                       		bcs.s	locret_71CE
000071AE 6100 0000                  		bsr.w	SingleObjLoad
000071B2 6600                       		bne.s	locret_71CE
000071B4 12BC 0076                  		move.b	#$76,(a1)	; load blocks that boss	picks up
000071B8 5438 F742                  		addq.b	#2,($FFFFF742).w
000071BC                            
000071BC                            locret_71CE:
000071BC 4E75                       		rts	
000071BE                            ; ===========================================================================
000071BE                            
000071BE                            Resize_SYZ3boss:
000071BE 0C78 2C00 F700             		cmpi.w	#$2C00,($FFFFF700).w
000071C4 6500                       		bcs.s	locret_7200
000071C6 31FC 04CC F726             		move.w	#$4CC,($FFFFF726).w
000071CC 6100 0000                  		bsr.w	SingleObjLoad
000071D0 6600                       		bne.s	loc_71EC
000071D2 12BC 0075                  		move.b	#$75,(a1)	; load SYZ boss	object
000071D6 5438 F742                  		addq.b	#2,($FFFFF742).w
000071DA                            
000071DA                            loc_71EC:
000071DA 303C 008C                  		move.w	#$8C,d0
000071DE 6100 A1B6                  		bsr.w	PlaySound	; play boss music
000071E2 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000071E8 7011                       		moveq	#$11,d0
000071EA 6000 A394                  		bra.w	LoadPLC		; load boss patterns
000071EE                            ; ===========================================================================
000071EE                            
000071EE                            locret_7200:
000071EE 4E75                       		rts	
000071F0                            ; ===========================================================================
000071F0                            
000071F0                            Resize_SYZ3end:
000071F0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000071F6 4E75                       		rts	
000071F8                            ; ===========================================================================
000071F8                            ; ---------------------------------------------------------------------------
000071F8                            ; Scrap	Brain Zone dynamic screen resizing
000071F8                            ; ---------------------------------------------------------------------------
000071F8                            
000071F8                            Resize_SBZ:				; XREF: Resize_Index
000071F8 7000                       		moveq	#0,d0
000071FA 1038 FE11                  		move.b	($FFFFFE11).w,d0
000071FE D040                       		add.w	d0,d0
00007200 303B 0000                  		move.w	Resize_SBZx(pc,d0.w),d0
00007204 4EFB 0000                  		jmp	Resize_SBZx(pc,d0.w)
00007208                            ; ===========================================================================
00007208 0000                       Resize_SBZx:	dc.w Resize_SBZ1-Resize_SBZx
0000720A 0000                       		dc.w Resize_SBZ2-Resize_SBZx
0000720C 0000                       		dc.w Resize_FZ-Resize_SBZx
0000720E                            ; ===========================================================================
0000720E                            
0000720E                            Resize_SBZ1:
0000720E 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
00007214 0C78 1880 F700             		cmpi.w	#$1880,($FFFFF700).w
0000721A 6500                       		bcs.s	locret_7242
0000721C 31FC 0620 F726             		move.w	#$620,($FFFFF726).w
00007222 0C78 2000 F700             		cmpi.w	#$2000,($FFFFF700).w
00007228 6500                       		bcs.s	locret_7242
0000722A 31FC 02A0 F726             		move.w	#$2A0,($FFFFF726).w
00007230                            
00007230                            locret_7242:
00007230 4E75                       		rts	
00007232                            ; ===========================================================================
00007232                            
00007232                            Resize_SBZ2:
00007232 7000                       		moveq	#0,d0
00007234 1038 F742                  		move.b	($FFFFF742).w,d0
00007238 303B 0000                  		move.w	off_7252(pc,d0.w),d0
0000723C 4EFB 0000                  		jmp	off_7252(pc,d0.w)
00007240                            ; ===========================================================================
00007240 0000                       off_7252:	dc.w Resize_SBZ2main-off_7252
00007242 0000                       		dc.w Resize_SBZ2boss-off_7252
00007244 0000                       		dc.w Resize_SBZ2boss2-off_7252
00007246 0000                       		dc.w Resize_SBZ2end-off_7252
00007248                            ; ===========================================================================
00007248                            
00007248                            Resize_SBZ2main:
00007248 31FC 0800 F726             		move.w	#$800,($FFFFF726).w
0000724E 0C78 1800 F700             		cmpi.w	#$1800,($FFFFF700).w
00007254 6500                       		bcs.s	locret_727A
00007256 31FC 0510 F726             		move.w	#$510,($FFFFF726).w
0000725C 0C78 1E00 F700             		cmpi.w	#$1E00,($FFFFF700).w
00007262 6500                       		bcs.s	locret_727A
00007264 5438 F742                  		addq.b	#2,($FFFFF742).w
00007268                            
00007268                            locret_727A:
00007268 4E75                       		rts	
0000726A                            ; ===========================================================================
0000726A                            
0000726A                            Resize_SBZ2boss:
0000726A 0C78 1EB0 F700             		cmpi.w	#$1EB0,($FFFFF700).w
00007270 6500                       		bcs.s	locret_7298
00007272 6100 0000                  		bsr.w	SingleObjLoad
00007276 6600                       		bne.s	locret_7298
00007278 12BC 0083                  		move.b	#$83,(a1)	; load collapsing block	object
0000727C 5438 F742                  		addq.b	#2,($FFFFF742).w
00007280 701E                       		moveq	#$1E,d0
00007282 6000 A2FC                  		bra.w	LoadPLC		; load SBZ2 Eggman patterns
00007286                            ; ===========================================================================
00007286                            
00007286                            locret_7298:
00007286 4E75                       		rts	
00007288                            ; ===========================================================================
00007288                            
00007288                            Resize_SBZ2boss2:
00007288 0C78 1F60 F700             		cmpi.w	#$1F60,($FFFFF700).w
0000728E 6500                       		bcs.s	loc_72B6
00007290 6100 0000                  		bsr.w	SingleObjLoad
00007294 6600                       		bne.s	loc_72B0
00007296 12BC 0082                  		move.b	#$82,(a1)	; load SBZ2 Eggman object
0000729A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000729E                            
0000729E                            loc_72B0:
0000729E 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
000072A4                            
000072A4                            loc_72B6:
000072A4 6000                       		bra.s	loc_72C2
000072A6                            ; ===========================================================================
000072A6                            
000072A6                            Resize_SBZ2end:
000072A6 0C78 2050 F700             		cmpi.w	#$2050,($FFFFF700).w
000072AC 6500                       		bcs.s	loc_72C2
000072AE 4E75                       		rts	
000072B0                            ; ===========================================================================
000072B0                            
000072B0                            loc_72C2:
000072B0 31F8 F700 F728             		move.w	($FFFFF700).w,($FFFFF728).w
000072B6 4E75                       		rts	
000072B8                            ; ===========================================================================
000072B8                            
000072B8                            Resize_FZ:
000072B8 7000                       		moveq	#0,d0
000072BA 1038 F742                  		move.b	($FFFFF742).w,d0
000072BE 303B 0000                  		move.w	off_72D8(pc,d0.w),d0
000072C2 4EFB 0000                  		jmp	off_72D8(pc,d0.w)
000072C6                            ; ===========================================================================
000072C6 0000 0000                  off_72D8:	dc.w Resize_FZmain-off_72D8, Resize_FZboss-off_72D8
000072CA 0000 0000                  		dc.w Resize_FZend-off_72D8, locret_7322-off_72D8
000072CE 0000                       		dc.w Resize_FZend2-off_72D8
000072D0                            ; ===========================================================================
000072D0                            
000072D0                            Resize_FZmain:
000072D0 0C78 2148 F700             		cmpi.w	#$2148,($FFFFF700).w
000072D6 6500                       		bcs.s	loc_72F4
000072D8 5438 F742                  		addq.b	#2,($FFFFF742).w
000072DC 701F                       		moveq	#$1F,d0
000072DE 6100 A2A0                  		bsr.w	LoadPLC		; load FZ boss patterns
000072E2                            
000072E2                            loc_72F4:
000072E2 60CC                       		bra.s	loc_72C2
000072E4                            ; ===========================================================================
000072E4                            
000072E4                            Resize_FZboss:
000072E4 0C78 2300 F700             		cmpi.w	#$2300,($FFFFF700).w
000072EA 6500                       		bcs.s	loc_7312
000072EC 6100 0000                  		bsr.w	SingleObjLoad
000072F0 6600                       		bne.s	loc_7312
000072F2 12BC 0085                  		move.b	#$85,(a1)	; load FZ boss object
000072F6 5438 F742                  		addq.b	#2,($FFFFF742).w
000072FA 11FC 0001 F7AA             		move.b	#1,($FFFFF7AA).w ; lock	screen
00007300                            
00007300                            loc_7312:
00007300 60AE                       		bra.s	loc_72C2
00007302                            ; ===========================================================================
00007302                            
00007302                            Resize_FZend:
00007302 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00007308 6500                       		bcs.s	loc_7320
0000730A 5438 F742                  		addq.b	#2,($FFFFF742).w
0000730E                            
0000730E                            loc_7320:
0000730E 60A0                       		bra.s	loc_72C2
00007310                            ; ===========================================================================
00007310                            
00007310                            locret_7322:
00007310 4E75                       		rts	
00007312                            ; ===========================================================================
00007312                            
00007312                            Resize_FZend2:
00007312 609C                       		bra.s	loc_72C2
00007314                            ; ===========================================================================
00007314                            ; ---------------------------------------------------------------------------
00007314                            ; Ending sequence dynamic screen resizing (empty)
00007314                            ; ---------------------------------------------------------------------------
00007314                            
00007314                            Resize_Ending:				; XREF: Resize_Index
00007314 4E75                       		rts	
00007316                            ; ===========================================================================
00007316                            ; ---------------------------------------------------------------------------
00007316                            ; Object 11 - GHZ bridge
00007316                            ; ---------------------------------------------------------------------------
00007316                            
00007316                            Obj11:					; XREF: Obj_Index
00007316 7000                       		moveq	#0,d0
00007318 1028 0024                  		move.b	$24(a0),d0
0000731C 323B 0000                  		move.w	Obj11_Index(pc,d0.w),d1
00007320 4EFB 1000                  		jmp	Obj11_Index(pc,d1.w)
00007324                            ; ===========================================================================
00007324 0000 0000                  Obj11_Index:	dc.w Obj11_Main-Obj11_Index, Obj11_Action-Obj11_Index
00007328 0000 0000                  		dc.w Obj11_Action2-Obj11_Index,	Obj11_Delete2-Obj11_Index
0000732C 0000 0000                  		dc.w Obj11_Delete2-Obj11_Index,	Obj11_Display2-Obj11_Index
00007330                            ; ===========================================================================
00007330                            
00007330                            Obj11_Main:				; XREF: Obj11_Index
00007330 5428 0024                  		addq.b	#2,$24(a0)
00007334 217C 0000 0000 0004        		move.l	#Map_obj11,4(a0)
0000733C 317C 438E 0002             		move.w	#$438E,2(a0)
00007342 117C 0004 0001             		move.b	#4,1(a0)
00007348 117C 0003 0018             		move.b	#3,$18(a0)
0000734E 117C 0080 0019             		move.b	#$80,$19(a0)
00007354 3428 000C                  		move.w	$C(a0),d2
00007358 3628 0008                  		move.w	8(a0),d3
0000735C 1810                       		move.b	0(a0),d4	; copy object number ($11) to d4
0000735E 45E8 0028                  		lea	$28(a0),a2	; copy bridge subtype to a2
00007362 7200                       		moveq	#0,d1
00007364 1212                       		move.b	(a2),d1		; copy a2 to d1
00007366 14FC 0000                  		move.b	#0,(a2)+
0000736A 3001                       		move.w	d1,d0
0000736C E248                       		lsr.w	#1,d0
0000736E E948                       		lsl.w	#4,d0
00007370 9640                       		sub.w	d0,d3
00007372 5501                       		subq.b	#2,d1
00007374 6500                       		bcs.s	Obj11_Action
00007376                            
00007376                            Obj11_MakeBdg:
00007376 6100 0000                  		bsr.w	SingleObjLoad
0000737A 6600                       		bne.s	Obj11_Action
0000737C 5228 0028                  		addq.b	#1,$28(a0)
00007380 B668 0008                  		cmp.w	8(a0),d3
00007384 6600                       		bne.s	loc_73B8
00007386 0643 0010                  		addi.w	#$10,d3
0000738A 3142 000C                  		move.w	d2,$C(a0)
0000738E 3142 003C                  		move.w	d2,$3C(a0)
00007392 3A08                       		move.w	a0,d5
00007394 0445 D000                  		subi.w	#-$3000,d5
00007398 EC4D                       		lsr.w	#6,d5
0000739A 0245 007F                  		andi.w	#$7F,d5
0000739E 14C5                       		move.b	d5,(a2)+
000073A0 5228 0028                  		addq.b	#1,$28(a0)
000073A4                            
000073A4                            loc_73B8:				; XREF: ROM:00007398j
000073A4 3A09                       		move.w	a1,d5
000073A6 0445 D000                  		subi.w	#-$3000,d5
000073AA EC4D                       		lsr.w	#6,d5
000073AC 0245 007F                  		andi.w	#$7F,d5
000073B0 14C5                       		move.b	d5,(a2)+
000073B2 137C 000A 0024             		move.b	#$A,$24(a1)
000073B8 1284                       		move.b	d4,0(a1)	; load bridge object (d4 = $11)
000073BA 3342 000C                  		move.w	d2,$C(a1)
000073BE 3342 003C                  		move.w	d2,$3C(a1)
000073C2 3343 0008                  		move.w	d3,8(a1)
000073C6 237C 0000 0000 0004        		move.l	#Map_obj11,4(a1)
000073CE 337C 438E 0002             		move.w	#$438E,2(a1)
000073D4 137C 0004 0001             		move.b	#4,1(a1)
000073DA 137C 0003 0018             		move.b	#3,$18(a1)
000073E0 137C 0008 0019             		move.b	#8,$19(a1)
000073E6 0643 0010                  		addi.w	#$10,d3
000073EA 51C9 FF8A                  		dbf	d1,Obj11_MakeBdg ; repeat d1 times (length of bridge)
000073EE                            
000073EE                            Obj11_Action:				; XREF: Obj11_Index
000073EE 6100                       		bsr.s	Obj11_Solid
000073F0 4A28 003E                  		tst.b	$3E(a0)
000073F4 6700                       		beq.s	Obj11_Display
000073F6 5928 003E                  		subq.b	#4,$3E(a0)
000073FA 6100 0000                  		bsr.w	Obj11_Bend
000073FE                            
000073FE                            Obj11_Display:
000073FE 6100 0000                  		bsr.w	DisplaySprite
00007402 6000 0000                  		bra.w	Obj11_ChkDel
00007406                            
00007406                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007406                            
00007406                            
00007406                            Obj11_Solid:				; XREF: Obj11_Action
00007406 7200                       		moveq	#0,d1
00007408 1228 0028                  		move.b	$28(a0),d1
0000740C E749                       		lsl.w	#3,d1
0000740E 3401                       		move.w	d1,d2
00007410 5041                       		addq.w	#8,d1
00007412 D442                       		add.w	d2,d2
00007414 43F8 D000                  		lea	($FFFFD000).w,a1
00007418 4A69 0012                  		tst.w	$12(a1)
0000741C 6B00 0000                  		bmi.w	locret_751E
00007420 3029 0008                  		move.w	8(a1),d0
00007424 9068 0008                  		sub.w	8(a0),d0
00007428 D041                       		add.w	d1,d0
0000742A 6B00 0000                  		bmi.w	locret_751E
0000742E B042                       		cmp.w	d2,d0
00007430 6400 0000                  		bcc.w	locret_751E
00007434 6000                       		bra.s	Platform2
00007436                            ; End of function Obj11_Solid
00007436                            
00007436                            ; ---------------------------------------------------------------------------
00007436                            ; Platform subroutine
00007436                            ; ---------------------------------------------------------------------------
00007436                            
00007436                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007436                            
00007436                            
00007436                            PlatformObject:
00007436 43F8 D000                  		lea	($FFFFD000).w,a1
0000743A 4A69 0012                  		tst.w	$12(a1)
0000743E 6B00 0000                  		bmi.w	locret_751E
00007442 3029 0008                  		move.w	8(a1),d0
00007446 9068 0008                  		sub.w	8(a0),d0
0000744A D041                       		add.w	d1,d0
0000744C 6B00 0000                  		bmi.w	locret_751E
00007450 D241                       		add.w	d1,d1
00007452 B041                       		cmp.w	d1,d0
00007454 6400 0000                  		bcc.w	locret_751E
00007458                            
00007458                            Platform2:
00007458 3028 000C                  		move.w	$C(a0),d0
0000745C 5140                       		subq.w	#8,d0
0000745E                            
0000745E                            Platform3:
0000745E 3429 000C                  		move.w	$C(a1),d2
00007462 1229 0016                  		move.b	$16(a1),d1
00007466 4881                       		ext.w	d1
00007468 D242                       		add.w	d2,d1
0000746A 5841                       		addq.w	#4,d1
0000746C 9041                       		sub.w	d1,d0
0000746E 6200 0000                  		bhi.w	locret_751E
00007472 0C40 FFF0                  		cmpi.w	#-$10,d0
00007476 6500 0000                  		bcs.w	locret_751E
0000747A 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000747E 6B00 0000                  		bmi.w	locret_751E
00007482 0C29 0006 0024             		cmpi.b	#6,$24(a1)
00007488 6400 0000                  		bcc.w	locret_751E
0000748C D440                       		add.w	d0,d2
0000748E 5642                       		addq.w	#3,d2
00007490 3342 000C                  		move.w	d2,$C(a1)
00007494 5428 0024                  		addq.b	#2,$24(a0)
00007498                            
00007498                            loc_74AE:
00007498 0829 0003 0022             		btst	#3,$22(a1)
0000749E 6700                       		beq.s	loc_74DC
000074A0 7000                       		moveq	#0,d0
000074A2 1029 003D                  		move.b	$3D(a1),d0
000074A6 ED48                       		lsl.w	#6,d0
000074A8 0680 00FF D000             		addi.l	#$FFD000,d0
000074AE 2440                       		movea.l	d0,a2
000074B0 08AA 0003 0022             		bclr	#3,$22(a2)
000074B6 422A 0025                  		clr.b	$25(a2)
000074BA 0C2A 0004 0024             		cmpi.b	#4,$24(a2)
000074C0 6600                       		bne.s	loc_74DC
000074C2 552A 0024                  		subq.b	#2,$24(a2)
000074C6                            
000074C6                            loc_74DC:
000074C6 3008                       		move.w	a0,d0
000074C8 0440 D000                  		subi.w	#-$3000,d0
000074CC EC48                       		lsr.w	#6,d0
000074CE 0240 007F                  		andi.w	#$7F,d0
000074D2 1340 003D                  		move.b	d0,$3D(a1)
000074D6 137C 0000 0026             		move.b	#0,$26(a1)
000074DC 337C 0000 0012             		move.w	#0,$12(a1)
000074E2 3369 0010 0014             		move.w	$10(a1),$14(a1)
000074E8 0829 0001 0022             		btst	#1,$22(a1)
000074EE 6700                       		beq.s	loc_7512
000074F0 2F08                       		move.l	a0,-(sp)
000074F2 2049                       		movea.l	a1,a0
000074F4 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
000074FA 205F                       		movea.l	(sp)+,a0
000074FC                            
000074FC                            loc_7512:
000074FC 08E9 0003 0022             		bset	#3,$22(a1)
00007502 08E8 0003 0022             		bset	#3,$22(a0)
00007508                            
00007508                            locret_751E:
00007508 4E75                       		rts	
0000750A                            ; End of function PlatformObject
0000750A                            
0000750A                            ; ---------------------------------------------------------------------------
0000750A                            ; Sloped platform subroutine (GHZ collapsing ledges and	SLZ seesaws)
0000750A                            ; ---------------------------------------------------------------------------
0000750A                            
0000750A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000750A                            
0000750A                            
0000750A                            SlopeObject:				; XREF: Obj1A_Slope; Obj5E_Slope
0000750A 43F8 D000                  		lea	($FFFFD000).w,a1
0000750E 4A69 0012                  		tst.w	$12(a1)
00007512 6B00 FFF4                  		bmi.w	locret_751E
00007516 3029 0008                  		move.w	8(a1),d0
0000751A 9068 0008                  		sub.w	8(a0),d0
0000751E D041                       		add.w	d1,d0
00007520 6BE6                       		bmi.s	locret_751E
00007522 D241                       		add.w	d1,d1
00007524 B041                       		cmp.w	d1,d0
00007526 64E0                       		bcc.s	locret_751E
00007528 0828 0000 0001             		btst	#0,1(a0)
0000752E 6700                       		beq.s	loc_754A
00007530 4640                       		not.w	d0
00007532 D041                       		add.w	d1,d0
00007534                            
00007534                            loc_754A:
00007534 E248                       		lsr.w	#1,d0
00007536 7600                       		moveq	#0,d3
00007538 1632 0000                  		move.b	(a2,d0.w),d3
0000753C 3028 000C                  		move.w	$C(a0),d0
00007540 9043                       		sub.w	d3,d0
00007542 6000 FF1A                  		bra.w	Platform3
00007546                            ; End of function SlopeObject
00007546                            
00007546                            
00007546                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007546                            
00007546                            
00007546                            Obj15_Solid:				; XREF: Obj15_SetSolid
00007546 43F8 D000                  		lea	($FFFFD000).w,a1
0000754A 4A69 0012                  		tst.w	$12(a1)
0000754E 6B00 FFB8                  		bmi.w	locret_751E
00007552 3029 0008                  		move.w	8(a1),d0
00007556 9068 0008                  		sub.w	8(a0),d0
0000755A D041                       		add.w	d1,d0
0000755C 6B00 FFAA                  		bmi.w	locret_751E
00007560 D241                       		add.w	d1,d1
00007562 B041                       		cmp.w	d1,d0
00007564 6400 FFA2                  		bcc.w	locret_751E
00007568 3028 000C                  		move.w	$C(a0),d0
0000756C 9043                       		sub.w	d3,d0
0000756E 6000 FEEE                  		bra.w	Platform3
00007572                            ; End of function Obj15_Solid
00007572                            
00007572                            ; ===========================================================================
00007572                            
00007572                            Obj11_Action2:				; XREF: Obj11_Index
00007572 6100                       		bsr.s	Obj11_WalkOff
00007574 6100 0000                  		bsr.w	DisplaySprite
00007578 6000 0000                  		bra.w	Obj11_ChkDel
0000757C                            
0000757C                            ; ---------------------------------------------------------------------------
0000757C                            ; Subroutine allowing Sonic to walk off a bridge
0000757C                            ; ---------------------------------------------------------------------------
0000757C                            
0000757C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000757C                            
0000757C                            
0000757C                            Obj11_WalkOff:				; XREF: Obj11_Action2
0000757C 7200                       		moveq	#0,d1
0000757E 1228 0028                  		move.b	$28(a0),d1
00007582 E749                       		lsl.w	#3,d1
00007584 3401                       		move.w	d1,d2
00007586 5041                       		addq.w	#8,d1
00007588 6100                       		bsr.s	ExitPlatform2
0000758A 6400                       		bcc.s	locret_75BE
0000758C E848                       		lsr.w	#4,d0
0000758E 1140 003F                  		move.b	d0,$3F(a0)
00007592 1028 003E                  		move.b	$3E(a0),d0
00007596 0C00 0040                  		cmpi.b	#$40,d0
0000759A 6700                       		beq.s	loc_75B6
0000759C 5828 003E                  		addq.b	#4,$3E(a0)
000075A0                            
000075A0                            loc_75B6:
000075A0 6100 0000                  		bsr.w	Obj11_Bend
000075A4 6100 0000                  		bsr.w	Obj11_MoveSonic
000075A8                            
000075A8                            locret_75BE:
000075A8 4E75                       		rts	
000075AA                            ; End of function Obj11_WalkOff
000075AA                            
000075AA                            ; ---------------------------------------------------------------------------
000075AA                            ; Subroutine allowing Sonic to walk or jump off	a platform
000075AA                            ; ---------------------------------------------------------------------------
000075AA                            
000075AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075AA                            
000075AA                            
000075AA                            ExitPlatform:
000075AA 3401                       		move.w	d1,d2
000075AC                            
000075AC                            ExitPlatform2:
000075AC D442                       		add.w	d2,d2
000075AE 43F8 D000                  		lea	($FFFFD000).w,a1
000075B2 0829 0001 0022             		btst	#1,$22(a1)
000075B8 6600                       		bne.s	loc_75E0
000075BA 3029 0008                  		move.w	8(a1),d0
000075BE 9068 0008                  		sub.w	8(a0),d0
000075C2 D041                       		add.w	d1,d0
000075C4 6B00                       		bmi.s	loc_75E0
000075C6 B042                       		cmp.w	d2,d0
000075C8 6500                       		bcs.s	locret_75F2
000075CA                            
000075CA                            loc_75E0:
000075CA 08A9 0003 0022             		bclr	#3,$22(a1)
000075D0 117C 0002 0024             		move.b	#2,$24(a0)
000075D6 08A8 0003 0022             		bclr	#3,$22(a0)
000075DC                            
000075DC                            locret_75F2:
000075DC 4E75                       		rts	
000075DE                            ; End of function ExitPlatform
000075DE                            
000075DE                            
000075DE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000075DE                            
000075DE                            
000075DE                            Obj11_MoveSonic:			; XREF: Obj11_WalkOff
000075DE 7000                       		moveq	#0,d0
000075E0 1028 003F                  		move.b	$3F(a0),d0
000075E4 1030 0029                  		move.b	$29(a0,d0.w),d0
000075E8 ED48                       		lsl.w	#6,d0
000075EA 0680 00FF D000             		addi.l	#$FFD000,d0
000075F0 2440                       		movea.l	d0,a2
000075F2 43F8 D000                  		lea	($FFFFD000).w,a1
000075F6 302A 000C                  		move.w	$C(a2),d0
000075FA 5140                       		subq.w	#8,d0
000075FC 7200                       		moveq	#0,d1
000075FE 1229 0016                  		move.b	$16(a1),d1
00007602 9041                       		sub.w	d1,d0
00007604 3340 000C                  		move.w	d0,$C(a1)	; change Sonic's position on y-axis
00007608 4E75                       		rts	
0000760A                            ; End of function Obj11_MoveSonic
0000760A                            
0000760A                            
0000760A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000760A                            
0000760A                            
0000760A                            Obj11_Bend:				; XREF: Obj11_Action; Obj11_WalkOff
0000760A 1028 003E                  		move.b	$3E(a0),d0
0000760E 6100 B3CA                  		bsr.w	CalcSine
00007612 3800                       		move.w	d0,d4
00007614 49F9 0000 0000             		lea	(Obj11_BendData2).l,a4
0000761A 7000                       		moveq	#0,d0
0000761C 1028 0028                  		move.b	$28(a0),d0
00007620 E948                       		lsl.w	#4,d0
00007622 7600                       		moveq	#0,d3
00007624 1628 003F                  		move.b	$3F(a0),d3
00007628 3403                       		move.w	d3,d2
0000762A D640                       		add.w	d0,d3
0000762C 7A00                       		moveq	#0,d5
0000762E 4BF9 0000 0000             		lea	(Obj11_BendData).l,a5
00007634 1A35 3000                  		move.b	(a5,d3.w),d5
00007638 0243 000F                  		andi.w	#$F,d3
0000763C E94B                       		lsl.w	#4,d3
0000763E 47F4 3000                  		lea	(a4,d3.w),a3
00007642 45E8 0029                  		lea	$29(a0),a2
00007646                            
00007646                            loc_765C:
00007646 7000                       		moveq	#0,d0
00007648 101A                       		move.b	(a2)+,d0
0000764A ED48                       		lsl.w	#6,d0
0000764C 0680 00FF D000             		addi.l	#$FFD000,d0
00007652 2240                       		movea.l	d0,a1
00007654 7000                       		moveq	#0,d0
00007656 101B                       		move.b	(a3)+,d0
00007658 5240                       		addq.w	#1,d0
0000765A C0C5                       		mulu.w	d5,d0
0000765C C0C4                       		mulu.w	d4,d0
0000765E 4840                       		swap	d0
00007660 D069 003C                  		add.w	$3C(a1),d0
00007664 3340 000C                  		move.w	d0,$C(a1)
00007668 51CA FFDC                  		dbf	d2,loc_765C
0000766C 7000                       		moveq	#0,d0
0000766E 1028 0028                  		move.b	$28(a0),d0
00007672 7600                       		moveq	#0,d3
00007674 1628 003F                  		move.b	$3F(a0),d3
00007678 5203                       		addq.b	#1,d3
0000767A 9600                       		sub.b	d0,d3
0000767C 4403                       		neg.b	d3
0000767E 6B00                       		bmi.s	locret_76CA
00007680 3403                       		move.w	d3,d2
00007682 E94B                       		lsl.w	#4,d3
00007684 47F4 3000                  		lea	(a4,d3.w),a3
00007688 D6C2                       		adda.w	d2,a3
0000768A 5342                       		subq.w	#1,d2
0000768C 6500                       		bcs.s	locret_76CA
0000768E                            
0000768E                            loc_76A4:
0000768E 7000                       		moveq	#0,d0
00007690 101A                       		move.b	(a2)+,d0
00007692 ED48                       		lsl.w	#6,d0
00007694 0680 00FF D000             		addi.l	#$FFD000,d0
0000769A 2240                       		movea.l	d0,a1
0000769C 7000                       		moveq	#0,d0
0000769E 1023                       		move.b	-(a3),d0
000076A0 5240                       		addq.w	#1,d0
000076A2 C0C5                       		mulu.w	d5,d0
000076A4 C0C4                       		mulu.w	d4,d0
000076A6 4840                       		swap	d0
000076A8 D069 003C                  		add.w	$3C(a1),d0
000076AC 3340 000C                  		move.w	d0,$C(a1)
000076B0 51CA FFDC                  		dbf	d2,loc_76A4
000076B4                            
000076B4                            locret_76CA:
000076B4 4E75                       		rts	
000076B6                            ; End of function Obj11_Bend
000076B6                            
000076B6                            ; ===========================================================================
000076B6                            ; ---------------------------------------------------------------------------
000076B6                            ; GHZ bridge-bending data
000076B6                            ; (Defines how the bridge bends	when Sonic walks across	it)
000076B6                            ; ---------------------------------------------------------------------------
000076B6                            Obj11_BendData:	incbin	misc\ghzbend1.bin
000077C6                            		even
000077C6                            Obj11_BendData2:incbin	misc\ghzbend2.bin
000078C6                            		even
000078C6                            
000078C6                            ; ===========================================================================
000078C6                            
000078C6                            Obj11_ChkDel:				; XREF: Obj11_Display; Obj11_Action2
000078C6 3028 0008                  		move.w	8(a0),d0
000078CA 0240 FF80                  		andi.w	#$FF80,d0
000078CE 3238 F700                  		move.w	($FFFFF700).w,d1
000078D2 0441 0080                  		subi.w	#$80,d1
000078D6 0241 FF80                  		andi.w	#$FF80,d1
000078DA 9041                       		sub.w	d1,d0
000078DC 0C40 0280                  		cmpi.w	#$280,d0
000078E0 6200 0000                  		bhi.w	Obj11_DelAll
000078E4 4E75                       		rts	
000078E6                            ; ===========================================================================
000078E6                            
000078E6                            Obj11_DelAll:				; XREF: Obj11_ChkDel
000078E6 7400                       		moveq	#0,d2
000078E8 45E8 0028                  		lea	$28(a0),a2	; load bridge length
000078EC 141A                       		move.b	(a2)+,d2	; move bridge length to	d2
000078EE 5302                       		subq.b	#1,d2		; subtract 1
000078F0 6500                       		bcs.s	Obj11_Delete
000078F2                            
000078F2                            Obj11_DelLoop:
000078F2 7000                       		moveq	#0,d0
000078F4 101A                       		move.b	(a2)+,d0
000078F6 ED48                       		lsl.w	#6,d0
000078F8 0680 00FF D000             		addi.l	#$FFD000,d0
000078FE 2240                       		movea.l	d0,a1
00007900 B048                       		cmp.w	a0,d0
00007902 6700                       		beq.s	loc_791E
00007904 6100 0000                  		bsr.w	DeleteObject2
00007908                            
00007908                            loc_791E:
00007908 51CA FFE8                  		dbf	d2,Obj11_DelLoop ; repeat d2 times (bridge length)
0000790C                            
0000790C                            Obj11_Delete:
0000790C 6100 0000                  		bsr.w	DeleteObject
00007910 4E75                       		rts	
00007912                            ; ===========================================================================
00007912                            
00007912                            Obj11_Delete2:				; XREF: Obj11_Index
00007912 6100 0000                  		bsr.w	DeleteObject
00007916 4E75                       		rts	
00007918                            ; ===========================================================================
00007918                            
00007918                            Obj11_Display2:				; XREF: Obj11_Index
00007918 6100 0000                  		bsr.w	DisplaySprite
0000791C 4E75                       		rts	
0000791E                            ; ===========================================================================
0000791E                            ; ---------------------------------------------------------------------------
0000791E                            ; Sprite mappings - GHZ	bridge
0000791E                            ; ---------------------------------------------------------------------------
0000791E                            Map_obj11:
0000791E                            	include "_maps\obj11.asm"
0000791E                            ; ---------------------------------------------------------------------------
0000791E                            ; Sprite mappings - GHZ	bridge
0000791E                            ; ---------------------------------------------------------------------------
0000791E 0000 0000                  		dc.w byte_793A-Map_obj11, byte_7940-Map_obj11
00007922 0000                       		dc.w byte_794B-Map_obj11
00007924 01                         byte_793A:	dc.b 1
00007925 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000792A 02                         byte_7940:	dc.b 2
0000792B F804 0004 F0               		dc.b $F8, 4, 0,	4, $F0
00007930 000C 0006 F0               		dc.b 0,	$C, 0, 6, $F0
00007935 01                         byte_794B:	dc.b 1
00007936 FC04 0008 F8               		dc.b $FC, 4, 0,	8, $F8
0000793C 00                         		even
0000793C 00                         		even
0000793C                            
0000793C                            ; ===========================================================================
0000793C                            ; ---------------------------------------------------------------------------
0000793C                            ; Object 15 - swinging platforms (GHZ, MZ, SLZ)
0000793C                            ;	    - spiked ball on a chain (SBZ)
0000793C                            ; ---------------------------------------------------------------------------
0000793C                            
0000793C                            Obj15:					; XREF: Obj_Index
0000793C 7000                       		moveq	#0,d0
0000793E 1028 0024                  		move.b	$24(a0),d0
00007942 323B 0000                  		move.w	Obj15_Index(pc,d0.w),d1
00007946 4EFB 1000                  		jmp	Obj15_Index(pc,d1.w)
0000794A                            ; ===========================================================================
0000794A 0000 0000                  Obj15_Index:	dc.w Obj15_Main-Obj15_Index, Obj15_SetSolid-Obj15_Index
0000794E 0000 0000                  		dc.w Obj15_Action2-Obj15_Index,	Obj15_Delete-Obj15_Index
00007952 0000 0000                  		dc.w Obj15_Delete-Obj15_Index, Obj15_Display-Obj15_Index
00007956 0000                       		dc.w Obj15_Action-Obj15_Index
00007958                            ; ===========================================================================
00007958                            
00007958                            Obj15_Main:				; XREF: Obj15_Index
00007958 5428 0024                  		addq.b	#2,$24(a0)
0000795C 217C 0000 0000 0004        		move.l	#Map_obj15,4(a0) ; GHZ and MZ specific code
00007964 317C 4380 0002             		move.w	#$4380,2(a0)
0000796A 117C 0004 0001             		move.b	#4,1(a0)
00007970 117C 0003 0018             		move.b	#3,$18(a0)
00007976 117C 0018 0019             		move.b	#$18,$19(a0)
0000797C 117C 0008 0016             		move.b	#8,$16(a0)
00007982 3168 000C 0038             		move.w	$C(a0),$38(a0)
00007988 3168 0008 003A             		move.w	8(a0),$3A(a0)
0000798E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007994 6600                       		bne.s	Obj15_NotSLZ
00007996 217C 0000 0000 0004        		move.l	#Map_obj15a,4(a0) ; SLZ	specific code
0000799E 317C 43DC 0002             		move.w	#$43DC,2(a0)
000079A4 117C 0020 0019             		move.b	#$20,$19(a0)
000079AA 117C 0010 0016             		move.b	#$10,$16(a0)
000079B0 117C 0099 0020             		move.b	#$99,$20(a0)
000079B6                            
000079B6                            Obj15_NotSLZ:
000079B6 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
000079BC 6600                       		bne.s	Obj15_SetLength
000079BE 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0) ; SBZ	specific code
000079C6 317C 0391 0002             		move.w	#$391,2(a0)
000079CC 117C 0018 0019             		move.b	#$18,$19(a0)
000079D2 117C 0018 0016             		move.b	#$18,$16(a0)
000079D8 117C 0086 0020             		move.b	#$86,$20(a0)
000079DE 117C 000C 0024             		move.b	#$C,$24(a0)
000079E4                            
000079E4                            Obj15_SetLength:
000079E4 1810                       		move.b	0(a0),d4
000079E6 7200                       		moveq	#0,d1
000079E8 45E8 0028                  		lea	$28(a0),a2	; move chain length to a2
000079EC 1212                       		move.b	(a2),d1		; move a2 to d1
000079EE 3F01                       		move.w	d1,-(sp)
000079F0 0241 000F                  		andi.w	#$F,d1
000079F4 14FC 0000                  		move.b	#0,(a2)+
000079F8 3601                       		move.w	d1,d3
000079FA E94B                       		lsl.w	#4,d3
000079FC 5003                       		addq.b	#8,d3
000079FE 1143 003C                  		move.b	d3,$3C(a0)
00007A02 5103                       		subq.b	#8,d3
00007A04 4A28 001A                  		tst.b	$1A(a0)
00007A08 6700                       		beq.s	Obj15_MakeChain
00007A0A 5003                       		addq.b	#8,d3
00007A0C 5341                       		subq.w	#1,d1
00007A0E                            
00007A0E                            Obj15_MakeChain:
00007A0E 6100 0000                  		bsr.w	SingleObjLoad
00007A12 6600                       		bne.s	loc_7A92
00007A14 5228 0028                  		addq.b	#1,$28(a0)
00007A18 3A09                       		move.w	a1,d5
00007A1A 0445 D000                  		subi.w	#-$3000,d5
00007A1E EC4D                       		lsr.w	#6,d5
00007A20 0245 007F                  		andi.w	#$7F,d5
00007A24 14C5                       		move.b	d5,(a2)+
00007A26 137C 000A 0024             		move.b	#$A,$24(a1)
00007A2C 1284                       		move.b	d4,0(a1)	; load swinging	object
00007A2E 2368 0004 0004             		move.l	4(a0),4(a1)
00007A34 3368 0002 0002             		move.w	2(a0),2(a1)
00007A3A 08A9 0006 0002             		bclr	#6,2(a1)
00007A40 137C 0004 0001             		move.b	#4,1(a1)
00007A46 137C 0004 0018             		move.b	#4,$18(a1)
00007A4C 137C 0008 0019             		move.b	#8,$19(a1)
00007A52 137C 0001 001A             		move.b	#1,$1A(a1)
00007A58 1343 003C                  		move.b	d3,$3C(a1)
00007A5C 0403 0010                  		subi.b	#$10,d3
00007A60 6400                       		bcc.s	loc_7A8E
00007A62 137C 0002 001A             		move.b	#2,$1A(a1)
00007A68 137C 0003 0018             		move.b	#3,$18(a1)
00007A6E 08E9 0006 0002             		bset	#6,2(a1)
00007A74                            
00007A74                            loc_7A8E:
00007A74 51C9 FF98                  		dbf	d1,Obj15_MakeChain ; repeat d1 times (chain length)
00007A78                            
00007A78                            loc_7A92:
00007A78 3A08                       		move.w	a0,d5
00007A7A 0445 D000                  		subi.w	#-$3000,d5
00007A7E EC4D                       		lsr.w	#6,d5
00007A80 0245 007F                  		andi.w	#$7F,d5
00007A84 14C5                       		move.b	d5,(a2)+
00007A86 317C 4080 0026             		move.w	#$4080,$26(a0)
00007A8C 317C FE00 003E             		move.w	#-$200,$3E(a0)
00007A92 321F                       		move.w	(sp)+,d1
00007A94 0801 0004                  		btst	#4,d1		; is object type $8X ?
00007A98 6700                       		beq.s	loc_7AD4	; if not, branch
00007A9A 217C 0000 0000 0004        		move.l	#Map_obj48,4(a0) ; use GHZ ball	mappings
00007AA2 317C 43AA 0002             		move.w	#$43AA,2(a0)
00007AA8 117C 0001 001A             		move.b	#1,$1A(a0)
00007AAE 117C 0002 0018             		move.b	#2,$18(a0)
00007AB4 117C 0081 0020             		move.b	#$81,$20(a0)	; make object hurt when	touched
00007ABA                            
00007ABA                            loc_7AD4:
00007ABA 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; is zone SBZ?
00007AC0 6700                       		beq.s	Obj15_Action	; if yes, branch
00007AC2                            
00007AC2                            Obj15_SetSolid:				; XREF: Obj15_Index
00007AC2 7200                       		moveq	#0,d1
00007AC4 1228 0019                  		move.b	$19(a0),d1
00007AC8 7600                       		moveq	#0,d3
00007ACA 1628 0016                  		move.b	$16(a0),d3
00007ACE 6100 FA76                  		bsr.w	Obj15_Solid
00007AD2                            
00007AD2                            Obj15_Action:				; XREF: Obj15_Index
00007AD2 6100 0000                  		bsr.w	Obj15_Move
00007AD6 6100 0000                  		bsr.w	DisplaySprite
00007ADA 6000 0000                  		bra.w	Obj15_ChkDel
00007ADE                            ; ===========================================================================
00007ADE                            
00007ADE                            Obj15_Action2:				; XREF: Obj15_Index
00007ADE 7200                       		moveq	#0,d1
00007AE0 1228 0019                  		move.b	$19(a0),d1
00007AE4 6100 FAC4                  		bsr.w	ExitPlatform
00007AE8 3F28 0008                  		move.w	8(a0),-(sp)
00007AEC 6100 0000                  		bsr.w	Obj15_Move
00007AF0 341F                       		move.w	(sp)+,d2
00007AF2 7600                       		moveq	#0,d3
00007AF4 1628 0016                  		move.b	$16(a0),d3
00007AF8 5203                       		addq.b	#1,d3
00007AFA 6100 0000                  		bsr.w	MvSonicOnPtfm
00007AFE 6100 0000                  		bsr.w	DisplaySprite
00007B02 6000 0000                  		bra.w	Obj15_ChkDel
00007B06                            
00007B06 4E75                       		rts
00007B08                            
00007B08                            ; ---------------------------------------------------------------------------
00007B08                            ; Subroutine to	change Sonic's position with a platform
00007B08                            ; ---------------------------------------------------------------------------
00007B08                            
00007B08                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B08                            
00007B08                            
00007B08                            MvSonicOnPtfm:
00007B08 43F8 D000                  		lea	($FFFFD000).w,a1
00007B0C 3028 000C                  		move.w	$C(a0),d0
00007B10 9043                       		sub.w	d3,d0
00007B12 6000                       		bra.s	MvSonic2
00007B14                            ; End of function MvSonicOnPtfm
00007B14                            
00007B14                            ; ---------------------------------------------------------------------------
00007B14                            ; Subroutine to	change Sonic's position with a platform
00007B14                            ; ---------------------------------------------------------------------------
00007B14                            
00007B14                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B14                            
00007B14                            
00007B14                            MvSonicOnPtfm2:
00007B14 43F8 D000                  		lea	($FFFFD000).w,a1
00007B18 3028 000C                  		move.w	$C(a0),d0
00007B1C 0440 0009                  		subi.w	#9,d0
00007B20                            
00007B20                            MvSonic2:
00007B20 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00007B24 6B00                       		bmi.s	locret_7B62
00007B26 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00007B2C 6400                       		bcc.s	locret_7B62
00007B2E 4A78 FE08                  		tst.w	($FFFFFE08).w
00007B32 6600                       		bne.s	locret_7B62
00007B34 7200                       		moveq	#0,d1
00007B36 1229 0016                  		move.b	$16(a1),d1
00007B3A 9041                       		sub.w	d1,d0
00007B3C 3340 000C                  		move.w	d0,$C(a1)
00007B40 9468 0008                  		sub.w	8(a0),d2
00007B44 9569 0008                  		sub.w	d2,8(a1)
00007B48                            
00007B48                            locret_7B62:
00007B48 4E75                       		rts	
00007B4A                            ; End of function MvSonicOnPtfm2
00007B4A                            
00007B4A                            
00007B4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B4A                            
00007B4A                            
00007B4A                            Obj15_Move:				; XREF: Obj15_Action; Obj15_Action2
00007B4A 1038 FE78                  		move.b	($FFFFFE78).w,d0
00007B4E 323C 0080                  		move.w	#$80,d1
00007B52 0828 0000 0022             		btst	#0,$22(a0)
00007B58 6700                       		beq.s	loc_7B78
00007B5A 4440                       		neg.w	d0
00007B5C D041                       		add.w	d1,d0
00007B5E                            
00007B5E                            loc_7B78:
00007B5E 6000                       		bra.s	Obj15_Move2
00007B60                            ; End of function Obj15_Move
00007B60                            
00007B60                            
00007B60                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007B60                            
00007B60                            
00007B60                            Obj48_Move:				; XREF: Obj48_Display2
00007B60 4A28 003D                  		tst.b	$3D(a0)
00007B64 6600                       		bne.s	loc_7B9C
00007B66 3028 003E                  		move.w	$3E(a0),d0
00007B6A 5040                       		addq.w	#8,d0
00007B6C 3140 003E                  		move.w	d0,$3E(a0)
00007B70 D168 0026                  		add.w	d0,$26(a0)
00007B74 0C40 0200                  		cmpi.w	#$200,d0
00007B78 6600                       		bne.s	loc_7BB6
00007B7A 117C 0001 003D             		move.b	#1,$3D(a0)
00007B80 6000                       		bra.s	loc_7BB6
00007B82                            ; ===========================================================================
00007B82                            
00007B82                            loc_7B9C:
00007B82 3028 003E                  		move.w	$3E(a0),d0
00007B86 5140                       		subq.w	#8,d0
00007B88 3140 003E                  		move.w	d0,$3E(a0)
00007B8C D168 0026                  		add.w	d0,$26(a0)
00007B90 0C40 FE00                  		cmpi.w	#-$200,d0
00007B94 6600                       		bne.s	loc_7BB6
00007B96 117C 0000 003D             		move.b	#0,$3D(a0)
00007B9C                            
00007B9C                            loc_7BB6:
00007B9C 1028 0026                  		move.b	$26(a0),d0
00007BA0                            ; End of function Obj48_Move
00007BA0                            
00007BA0                            
00007BA0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007BA0                            
00007BA0                            
00007BA0                            Obj15_Move2:				; XREF: Obj15_Move; Obj48_Display
00007BA0 6100 AE38                  		bsr.w	CalcSine
00007BA4 3428 0038                  		move.w	$38(a0),d2
00007BA8 3628 003A                  		move.w	$3A(a0),d3
00007BAC 45E8 0028                  		lea	$28(a0),a2
00007BB0 7C00                       		moveq	#0,d6
00007BB2 1C1A                       		move.b	(a2)+,d6
00007BB4                            
00007BB4                            loc_7BCE:
00007BB4 7800                       		moveq	#0,d4
00007BB6 181A                       		move.b	(a2)+,d4
00007BB8 ED4C                       		lsl.w	#6,d4
00007BBA 0684 00FF D000             		addi.l	#$FFD000,d4
00007BC0 2244                       		movea.l	d4,a1
00007BC2 7800                       		moveq	#0,d4
00007BC4 1829 003C                  		move.b	$3C(a1),d4
00007BC8 2A04                       		move.l	d4,d5
00007BCA C9C0                       		muls.w	d0,d4
00007BCC E084                       		asr.l	#8,d4
00007BCE CBC1                       		muls.w	d1,d5
00007BD0 E085                       		asr.l	#8,d5
00007BD2 D842                       		add.w	d2,d4
00007BD4 DA43                       		add.w	d3,d5
00007BD6 3344 000C                  		move.w	d4,$C(a1)
00007BDA 3345 0008                  		move.w	d5,8(a1)
00007BDE 51CE FFD4                  		dbf	d6,loc_7BCE
00007BE2 4E75                       		rts	
00007BE4                            ; End of function Obj15_Move2
00007BE4                            
00007BE4                            ; ===========================================================================
00007BE4                            
00007BE4                            Obj15_ChkDel:				; XREF: Obj15_Action; Obj15_Action2
00007BE4 3028 003A                  		move.w	$3A(a0),d0
00007BE8 0240 FF80                  		andi.w	#$FF80,d0
00007BEC 3238 F700                  		move.w	($FFFFF700).w,d1
00007BF0 0441 0080                  		subi.w	#$80,d1
00007BF4 0241 FF80                  		andi.w	#$FF80,d1
00007BF8 9041                       		sub.w	d1,d0
00007BFA 0C40 0280                  		cmpi.w	#$280,d0
00007BFE 6200 0000                  		bhi.w	Obj15_DelAll
00007C02 4E75                       		rts	
00007C04                            ; ===========================================================================
00007C04                            
00007C04                            Obj15_DelAll:				; XREF: Obj15_ChkDel
00007C04 7400                       		moveq	#0,d2
00007C06 45E8 0028                  		lea	$28(a0),a2
00007C0A 141A                       		move.b	(a2)+,d2
00007C0C                            
00007C0C                            Obj15_DelLoop:
00007C0C 7000                       		moveq	#0,d0
00007C0E 101A                       		move.b	(a2)+,d0
00007C10 ED48                       		lsl.w	#6,d0
00007C12 0680 00FF D000             		addi.l	#$FFD000,d0
00007C18 2240                       		movea.l	d0,a1
00007C1A 6100 0000                  		bsr.w	DeleteObject2
00007C1E 51CA FFEC                  		dbf	d2,Obj15_DelLoop ; repeat for length of	chain
00007C22 4E75                       		rts	
00007C24                            ; ===========================================================================
00007C24                            
00007C24                            Obj15_Delete:				; XREF: Obj15_Index
00007C24 6100 0000                  		bsr.w	DeleteObject
00007C28 4E75                       		rts	
00007C2A                            ; ===========================================================================
00007C2A                            
00007C2A                            Obj15_Display:				; XREF: Obj15_Index
00007C2A 6000 0000                  		bra.w	DisplaySprite
00007C2E                            ; ===========================================================================
00007C2E                            ; ---------------------------------------------------------------------------
00007C2E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007C2E                            ; ---------------------------------------------------------------------------
00007C2E                            Map_obj15:
00007C2E                            	include "_maps\obj15ghz.asm"
00007C2E                            ; ---------------------------------------------------------------------------
00007C2E                            ; Sprite mappings - GHZ	and MZ swinging	platforms
00007C2E                            ; ---------------------------------------------------------------------------
00007C2E 0000                       		dc.w byte_7C4E-Map_obj15
00007C30 0000                       		dc.w byte_7C59-Map_obj15
00007C32 0000                       		dc.w byte_7C5F-Map_obj15
00007C34 02                         byte_7C4E:	dc.b 2
00007C35 F809 0004 E8               		dc.b $F8, 9, 0,	4, $E8
00007C3A F809 0004 00               		dc.b $F8, 9, 0,	4, 0
00007C3F 01                         byte_7C59:	dc.b 1
00007C40 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00007C45 01                         byte_7C5F:	dc.b 1
00007C46 F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00007C4C 00                         		even
00007C4C 00                         		even
00007C4C                            
00007C4C                            ; ---------------------------------------------------------------------------
00007C4C                            ; Sprite mappings - SLZ	swinging platforms
00007C4C                            ; ---------------------------------------------------------------------------
00007C4C                            Map_obj15a:
00007C4C                            	include "_maps\obj15slz.asm"
00007C4C                            ; ---------------------------------------------------------------------------
00007C4C                            ; Sprite mappings - SLZ	swinging platforms
00007C4C                            ; ---------------------------------------------------------------------------
00007C4C 0000                       		dc.w byte_7C6C-Map_obj15a
00007C4E 0000                       		dc.w byte_7C95-Map_obj15a
00007C50 0000                       		dc.w byte_7C9B-Map_obj15a
00007C52 08                         byte_7C6C:	dc.b 8
00007C53 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
00007C58 F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
00007C5D F005 0014 D0               		dc.b $F0, 5, 0,	$14, $D0
00007C62 F005 0814 20               		dc.b $F0, 5, 8,	$14, $20
00007C67 1004 0018 E0               		dc.b $10, 4, 0,	$18, $E0
00007C6C 1004 0818 10               		dc.b $10, 4, 8,	$18, $10
00007C71 1001 001A F8               		dc.b $10, 1, 0,	$1A, $F8
00007C76 1001 081A 00               		dc.b $10, 1, 8,	$1A, 0
00007C7B 01                         byte_7C95:	dc.b 1
00007C7C F805 4000 F8               		dc.b $F8, 5, $40, 0, $F8
00007C81 01                         byte_7C9B:	dc.b 1
00007C82 F805 001C F8               		dc.b $F8, 5, 0,	$1C, $F8
00007C88 00                         		even
00007C88 00                         		even
00007C88                            
00007C88                            ; ===========================================================================
00007C88                            ; ---------------------------------------------------------------------------
00007C88                            ; Object 17 - helix of spikes on a pole	(GHZ)
00007C88                            ; ---------------------------------------------------------------------------
00007C88                            
00007C88                            Obj17:					; XREF: Obj_Index
00007C88 7000                       		moveq	#0,d0
00007C8A 1028 0024                  		move.b	$24(a0),d0
00007C8E 323B 0000                  		move.w	Obj17_Index(pc,d0.w),d1
00007C92 4EFB 1000                  		jmp	Obj17_Index(pc,d1.w)
00007C96                            ; ===========================================================================
00007C96 0000                       Obj17_Index:	dc.w Obj17_Main-Obj17_Index
00007C98 0000                       		dc.w Obj17_Action-Obj17_Index
00007C9A 0000                       		dc.w Obj17_Action-Obj17_Index
00007C9C 0000                       		dc.w Obj17_Delete-Obj17_Index
00007C9E 0000                       		dc.w Obj17_Display-Obj17_Index
00007CA0                            ; ===========================================================================
00007CA0                            
00007CA0                            Obj17_Main:				; XREF: Obj17_Index
00007CA0 5428 0024                  		addq.b	#2,$24(a0)
00007CA4 217C 0000 0000 0004        		move.l	#Map_obj17,4(a0)
00007CAC 317C 4398 0002             		move.w	#$4398,2(a0)
00007CB2 117C 0007 0022             		move.b	#7,$22(a0)
00007CB8 117C 0004 0001             		move.b	#4,1(a0)
00007CBE 117C 0003 0018             		move.b	#3,$18(a0)
00007CC4 117C 0008 0019             		move.b	#8,$19(a0)
00007CCA 3428 000C                  		move.w	$C(a0),d2
00007CCE 3628 0008                  		move.w	8(a0),d3
00007CD2 1810                       		move.b	0(a0),d4
00007CD4 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007CD8 7200                       		moveq	#0,d1
00007CDA 1212                       		move.b	(a2),d1		; move a2 to d1
00007CDC 14FC 0000                  		move.b	#0,(a2)+
00007CE0 3001                       		move.w	d1,d0
00007CE2 E248                       		lsr.w	#1,d0
00007CE4 E948                       		lsl.w	#4,d0
00007CE6 9640                       		sub.w	d0,d3
00007CE8 5501                       		subq.b	#2,d1
00007CEA 6500                       		bcs.s	Obj17_Action
00007CEC 7C00                       		moveq	#0,d6
00007CEE                            
00007CEE                            Obj17_MakeHelix:
00007CEE 6100 0000                  		bsr.w	SingleObjLoad
00007CF2 6600                       		bne.s	Obj17_Action
00007CF4 5228 0028                  		addq.b	#1,$28(a0)
00007CF8 3A09                       		move.w	a1,d5
00007CFA 0445 D000                  		subi.w	#$D000,d5
00007CFE EC4D                       		lsr.w	#6,d5
00007D00 0245 007F                  		andi.w	#$7F,d5
00007D04 14C5                       		move.b	d5,(a2)+
00007D06 137C 0008 0024             		move.b	#8,$24(a1)
00007D0C 1284                       		move.b	d4,0(a1)
00007D0E 3342 000C                  		move.w	d2,$C(a1)
00007D12 3343 0008                  		move.w	d3,8(a1)
00007D16 2368 0004 0004             		move.l	4(a0),4(a1)
00007D1C 337C 4398 0002             		move.w	#$4398,2(a1)
00007D22 137C 0004 0001             		move.b	#4,1(a1)
00007D28 137C 0003 0018             		move.b	#3,$18(a1)
00007D2E 137C 0008 0019             		move.b	#8,$19(a1)
00007D34 1346 003E                  		move.b	d6,$3E(a1)
00007D38 5206                       		addq.b	#1,d6
00007D3A 0206 0007                  		andi.b	#7,d6
00007D3E 0643 0010                  		addi.w	#$10,d3
00007D42 B668 0008                  		cmp.w	8(a0),d3
00007D46 6600                       		bne.s	loc_7D78
00007D48 1146 003E                  		move.b	d6,$3E(a0)
00007D4C 5206                       		addq.b	#1,d6
00007D4E 0206 0007                  		andi.b	#7,d6
00007D52 0643 0010                  		addi.w	#$10,d3
00007D56 5228 0028                  		addq.b	#1,$28(a0)
00007D5A                            
00007D5A                            loc_7D78:
00007D5A 51C9 FF92                  		dbf	d1,Obj17_MakeHelix ; repeat d1 times (helix length)
00007D5E                            
00007D5E                            Obj17_Action:				; XREF: Obj17_Index
00007D5E 6100 0000                  		bsr.w	Obj17_RotateSpikes
00007D62 6100 0000                  		bsr.w	DisplaySprite
00007D66 6000 0000                  		bra.w	Obj17_ChkDel
00007D6A                            
00007D6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007D6A                            
00007D6A                            
00007D6A                            Obj17_RotateSpikes:			; XREF: Obj17_Action; Obj17_Display
00007D6A 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
00007D6E 117C 0000 0020             		move.b	#0,$20(a0)	; make object harmless
00007D74 D028 003E                  		add.b	$3E(a0),d0
00007D78 0200 0007                  		andi.b	#7,d0
00007D7C 1140 001A                  		move.b	d0,$1A(a0)	; change current frame
00007D80 6600                       		bne.s	locret_7DA6
00007D82 117C 0084 0020             		move.b	#$84,$20(a0)	; make object harmful
00007D88                            
00007D88                            locret_7DA6:
00007D88 4E75                       		rts	
00007D8A                            ; End of function Obj17_RotateSpikes
00007D8A                            
00007D8A                            ; ===========================================================================
00007D8A                            
00007D8A                            Obj17_ChkDel:				; XREF: Obj17_Action
00007D8A 3028 0008                  		move.w	8(a0),d0
00007D8E 0240 FF80                  		andi.w	#$FF80,d0
00007D92 3238 F700                  		move.w	($FFFFF700).w,d1
00007D96 0441 0080                  		subi.w	#$80,d1
00007D9A 0241 FF80                  		andi.w	#$FF80,d1
00007D9E 9041                       		sub.w	d1,d0
00007DA0 0C40 0280                  		cmpi.w	#$280,d0
00007DA4 6200 0000                  		bhi.w	Obj17_DelAll
00007DA8 4E75                       		rts	
00007DAA                            ; ===========================================================================
00007DAA                            
00007DAA                            Obj17_DelAll:				; XREF: Obj17_ChkDel
00007DAA 7400                       		moveq	#0,d2
00007DAC 45E8 0028                  		lea	$28(a0),a2	; move helix length to a2
00007DB0 141A                       		move.b	(a2)+,d2	; move a2 to d2
00007DB2 5502                       		subq.b	#2,d2
00007DB4 6500                       		bcs.s	Obj17_Delete
00007DB6                            
00007DB6                            Obj17_DelLoop:
00007DB6 7000                       		moveq	#0,d0
00007DB8 101A                       		move.b	(a2)+,d0
00007DBA ED48                       		lsl.w	#6,d0
00007DBC 0680 00FF D000             		addi.l	#$FFD000,d0
00007DC2 2240                       		movea.l	d0,a1
00007DC4 6100 0000                  		bsr.w	DeleteObject2	; delete object
00007DC8 51CA FFEC                  		dbf	d2,Obj17_DelLoop ; repeat d2 times (helix length)
00007DCC                            
00007DCC                            Obj17_Delete:				; XREF: Obj17_Index
00007DCC 6100 0000                  		bsr.w	DeleteObject
00007DD0 4E75                       		rts	
00007DD2                            ; ===========================================================================
00007DD2                            
00007DD2                            Obj17_Display:				; XREF: Obj17_Index
00007DD2 6100 FF96                  		bsr.w	Obj17_RotateSpikes
00007DD6 6000 0000                  		bra.w	DisplaySprite
00007DDA                            ; ===========================================================================
00007DDA                            ; ---------------------------------------------------------------------------
00007DDA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007DDA                            ; ---------------------------------------------------------------------------
00007DDA                            Map_obj17:
00007DDA                            	include "_maps\obj17.asm"
00007DDA                            ; ---------------------------------------------------------------------------
00007DDA                            ; Sprite mappings - helix of spikes on a pole (GHZ)
00007DDA                            ; ---------------------------------------------------------------------------
00007DDA 0000 0000                  		dc.w byte_7E08-Map_obj17, byte_7E0E-Map_obj17
00007DDE 0000 0000                  		dc.w byte_7E14-Map_obj17, byte_7E1A-Map_obj17
00007DE2 0000 0000                  		dc.w byte_7E20-Map_obj17, byte_7E26-Map_obj17
00007DE6 0000 0000                  		dc.w byte_7E2D+1-Map_obj17, byte_7E2C-Map_obj17
00007DEA 01                         byte_7E08:	dc.b 1
00007DEB F001 0000 FC               		dc.b $F0, 1, 0,	0, $FC
00007DF0 01                         byte_7E0E:	dc.b 1
00007DF1 F505 0002 F8               		dc.b $F5, 5, 0,	2, $F8
00007DF6 01                         byte_7E14:	dc.b 1
00007DF7 F805 0006 F8               		dc.b $F8, 5, 0,	6, $F8
00007DFC 01                         byte_7E1A:	dc.b 1
00007DFD FB05 000A F8               		dc.b $FB, 5, 0,	$A, $F8
00007E02 01                         byte_7E20:	dc.b 1
00007E03 0001 000E FC               		dc.b 0,	1, 0, $E, $FC
00007E08 01                         byte_7E26:	dc.b 1
00007E09 0400 0010 FD               		dc.b 4,	0, 0, $10, $FD
00007E0E 01                         byte_7E2C:	dc.b 1
00007E0F F400 0011 FD               byte_7E2D:	dc.b $F4, 0, 0,	$11, $FD
00007E14                            		even
00007E14                            		even
00007E14                            
00007E14                            ; ===========================================================================
00007E14                            ; ---------------------------------------------------------------------------
00007E14                            ; Object 18 - platforms	(GHZ, SYZ, SLZ)
00007E14                            ; ---------------------------------------------------------------------------
00007E14                            
00007E14                            Obj18:					; XREF: Obj_Index
00007E14 7000                       		moveq	#0,d0
00007E16 1028 0024                  		move.b	$24(a0),d0
00007E1A 323B 0000                  		move.w	Obj18_Index(pc,d0.w),d1
00007E1E 4EFB 1000                  		jmp	Obj18_Index(pc,d1.w)
00007E22                            ; ===========================================================================
00007E22 0000                       Obj18_Index:	dc.w Obj18_Main-Obj18_Index
00007E24 0000                       		dc.w Obj18_Solid-Obj18_Index
00007E26 0000                       		dc.w Obj18_Action2-Obj18_Index
00007E28 0000                       		dc.w Obj18_Delete-Obj18_Index
00007E2A 0000                       		dc.w Obj18_Action-Obj18_Index
00007E2C                            ; ===========================================================================
00007E2C                            
00007E2C                            Obj18_Main:				; XREF: Obj18_Index
00007E2C 5428 0024                  		addq.b	#2,$24(a0)
00007E30 317C 4000 0002             		move.w	#$4000,2(a0)
00007E36 217C 0000 0000 0004        		move.l	#Map_obj18,4(a0)
00007E3E 117C 0020 0019             		move.b	#$20,$19(a0)
00007E44 0C38 0004 FE10             		cmpi.b	#4,($FFFFFE10).w ; check if level is SYZ
00007E4A 6600                       		bne.s	Obj18_NotSYZ
00007E4C 217C 0000 0000 0004        		move.l	#Map_obj18a,4(a0) ; SYZ	specific code
00007E54 117C 0020 0019             		move.b	#$20,$19(a0)
00007E5A                            
00007E5A                            Obj18_NotSYZ:
00007E5A 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00007E60 6600                       		bne.s	Obj18_NotSLZ
00007E62 217C 0000 0000 0004        		move.l	#Map_obj18b,4(a0) ; SLZ	specific code
00007E6A 117C 0020 0019             		move.b	#$20,$19(a0)
00007E70 317C 4000 0002             		move.w	#$4000,2(a0)
00007E76 117C 0003 0028             		move.b	#3,$28(a0)
00007E7C                            
00007E7C                            Obj18_NotSLZ:
00007E7C 117C 0004 0001             		move.b	#4,1(a0)
00007E82 117C 0004 0018             		move.b	#4,$18(a0)
00007E88 3168 000C 002C             		move.w	$C(a0),$2C(a0)
00007E8E 3168 000C 0034             		move.w	$C(a0),$34(a0)
00007E94 3168 0008 0032             		move.w	8(a0),$32(a0)
00007E9A 317C 0080 0026             		move.w	#$80,$26(a0)
00007EA0 7200                       		moveq	#0,d1
00007EA2 1028 0028                  		move.b	$28(a0),d0
00007EA6 0C00 000A                  		cmpi.b	#$A,d0		; is object type $A (large platform)?
00007EAA 6600                       		bne.s	Obj18_SetFrame	; if not, branch
00007EAC 5201                       		addq.b	#1,d1		; use frame #1
00007EAE 117C 0020 0019             		move.b	#$20,$19(a0)	; set width
00007EB4                            
00007EB4                            Obj18_SetFrame:
00007EB4 1141 001A                  		move.b	d1,$1A(a0)	; set frame to d1
00007EB8                            
00007EB8                            Obj18_Solid:				; XREF: Obj18_Index
00007EB8 4A28 0038                  		tst.b	$38(a0)
00007EBC 6700                       		beq.s	loc_7EE0
00007EBE 5928 0038                  		subq.b	#4,$38(a0)
00007EC2                            
00007EC2                            loc_7EE0:
00007EC2 7200                       		moveq	#0,d1
00007EC4 1228 0019                  		move.b	$19(a0),d1
00007EC8 6100 F56C                  		bsr.w	PlatformObject
00007ECC                            
00007ECC                            Obj18_Action:				; XREF: Obj18_Index
00007ECC 6100 0000                  		bsr.w	Obj18_Move
00007ED0 6100 0000                  		bsr.w	Obj18_Nudge
00007ED4 6100 0000                  		bsr.w	DisplaySprite
00007ED8 6000 0000                  		bra.w	Obj18_ChkDel
00007EDC                            ; ===========================================================================
00007EDC                            
00007EDC                            Obj18_Action2:				; XREF: Obj18_Index
00007EDC 0C28 0040 0038             		cmpi.b	#$40,$38(a0)
00007EE2 6700                       		beq.s	loc_7F06
00007EE4 5828 0038                  		addq.b	#4,$38(a0)
00007EE8                            
00007EE8                            loc_7F06:
00007EE8 7200                       		moveq	#0,d1
00007EEA 1228 0019                  		move.b	$19(a0),d1
00007EEE 6100 F6BA                  		bsr.w	ExitPlatform
00007EF2 3F28 0008                  		move.w	8(a0),-(sp)
00007EF6 6100 0000                  		bsr.w	Obj18_Move
00007EFA 6100 0000                  		bsr.w	Obj18_Nudge
00007EFE 341F                       		move.w	(sp)+,d2
00007F00 6100 FC12                  		bsr.w	MvSonicOnPtfm2
00007F04 6100 0000                  		bsr.w	DisplaySprite
00007F08 6000 0000                  		bra.w	Obj18_ChkDel
00007F0C                            
00007F0C 4E75                       		rts
00007F0E                            
00007F0E                            ; ---------------------------------------------------------------------------
00007F0E                            ; Subroutine to	move platform slightly when you	stand on it
00007F0E                            ; ---------------------------------------------------------------------------
00007F0E                            
00007F0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F0E                            
00007F0E                            
00007F0E                            Obj18_Nudge:				; XREF: Obj18_Action; Obj18_Action2
00007F0E 1028 0038                  		move.b	$38(a0),d0
00007F12 6100 AAC6                  		bsr.w	CalcSine
00007F16 323C 0400                  		move.w	#$400,d1
00007F1A C1C1                       		muls.w	d1,d0
00007F1C 4840                       		swap	d0
00007F1E D068 002C                  		add.w	$2C(a0),d0
00007F22 3140 000C                  		move.w	d0,$C(a0)
00007F26 4E75                       		rts	
00007F28                            ; End of function Obj18_Nudge
00007F28                            
00007F28                            ; ---------------------------------------------------------------------------
00007F28                            ; Subroutine to	move platforms
00007F28                            ; ---------------------------------------------------------------------------
00007F28                            
00007F28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00007F28                            
00007F28                            
00007F28                            Obj18_Move:				; XREF: Obj18_Action; Obj18_Action2
00007F28 7000                       		moveq	#0,d0
00007F2A 1028 0028                  		move.b	$28(a0),d0
00007F2E 0240 000F                  		andi.w	#$F,d0
00007F32 D040                       		add.w	d0,d0
00007F34 323B 0000                  		move.w	Obj18_TypeIndex(pc,d0.w),d1
00007F38 4EFB 1000                  		jmp	Obj18_TypeIndex(pc,d1.w)
00007F3C                            ; End of function Obj18_Move
00007F3C                            
00007F3C                            ; ===========================================================================
00007F3C 0000 0000                  Obj18_TypeIndex:dc.w Obj18_Type00-Obj18_TypeIndex, Obj18_Type01-Obj18_TypeIndex
00007F40 0000 0000                  		dc.w Obj18_Type02-Obj18_TypeIndex, Obj18_Type03-Obj18_TypeIndex
00007F44 0000 0000                  		dc.w Obj18_Type04-Obj18_TypeIndex, Obj18_Type05-Obj18_TypeIndex
00007F48 0000 0000                  		dc.w Obj18_Type06-Obj18_TypeIndex, Obj18_Type07-Obj18_TypeIndex
00007F4C 0000 0000                  		dc.w Obj18_Type08-Obj18_TypeIndex, Obj18_Type00-Obj18_TypeIndex
00007F50 0000 0000                  		dc.w Obj18_Type0A-Obj18_TypeIndex, Obj18_Type0B-Obj18_TypeIndex
00007F54 0000                       		dc.w Obj18_Type0C-Obj18_TypeIndex
00007F56                            ; ===========================================================================
00007F56                            
00007F56                            Obj18_Type00:
00007F56 4E75                       		rts			; platform 00 doesn't move
00007F58                            ; ===========================================================================
00007F58                            
00007F58                            Obj18_Type05:
00007F58 3028 0032                  		move.w	$32(a0),d0
00007F5C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007F60 4401                       		neg.b	d1		; reverse platform-motion
00007F62 0601 0040                  		addi.b	#$40,d1
00007F66 6000                       		bra.s	Obj18_01_Move
00007F68                            ; ===========================================================================
00007F68                            
00007F68                            Obj18_Type01:
00007F68 3028 0032                  		move.w	$32(a0),d0
00007F6C 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007F70 0401 0040                  		subi.b	#$40,d1
00007F74                            
00007F74                            Obj18_01_Move:
00007F74 4881                       		ext.w	d1
00007F76 D041                       		add.w	d1,d0
00007F78 3140 0008                  		move.w	d0,8(a0)	; change position on x-axis
00007F7C 6000 0000                  		bra.w	Obj18_ChgMotion
00007F80                            ; ===========================================================================
00007F80                            
00007F80                            Obj18_Type0C:
00007F80 3028 0034                  		move.w	$34(a0),d0
00007F84 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00007F88 4401                       		neg.b	d1		; reverse platform-motion
00007F8A 0601 0030                  		addi.b	#$30,d1
00007F8E 6000                       		bra.s	Obj18_02_Move
00007F90                            ; ===========================================================================
00007F90                            
00007F90                            Obj18_Type0B:
00007F90 3028 0034                  		move.w	$34(a0),d0
00007F94 1238 FE6C                  		move.b	($FFFFFE6C).w,d1 ; load	platform-motion	variable
00007F98 0401 0030                  		subi.b	#$30,d1
00007F9C 6000                       		bra.s	Obj18_02_Move
00007F9E                            ; ===========================================================================
00007F9E                            
00007F9E                            Obj18_Type06:
00007F9E 3028 0034                  		move.w	$34(a0),d0
00007FA2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007FA6 4401                       		neg.b	d1		; reverse platform-motion
00007FA8 0601 0040                  		addi.b	#$40,d1
00007FAC 6000                       		bra.s	Obj18_02_Move
00007FAE                            ; ===========================================================================
00007FAE                            
00007FAE                            Obj18_Type02:
00007FAE 3028 0034                  		move.w	$34(a0),d0
00007FB2 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
00007FB6 0401 0040                  		subi.b	#$40,d1
00007FBA                            
00007FBA                            Obj18_02_Move:
00007FBA 4881                       		ext.w	d1
00007FBC D041                       		add.w	d1,d0
00007FBE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
00007FC2 6000 0000                  		bra.w	Obj18_ChgMotion
00007FC6                            ; ===========================================================================
00007FC6                            
00007FC6                            Obj18_Type03:
00007FC6 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
00007FCA 6600                       		bne.s	Obj18_03_Wait	; if yes, branch
00007FCC 0828 0003 0022             		btst	#3,$22(a0)	; is Sonic standing on the platform?
00007FD2 6700                       		beq.s	Obj18_03_NoMove	; if not, branch
00007FD4 317C 001E 003A             		move.w	#30,$3A(a0)	; set time delay to 0.5	seconds
00007FDA                            
00007FDA                            Obj18_03_NoMove:
00007FDA 4E75                       		rts	
00007FDC                            ; ===========================================================================
00007FDC                            
00007FDC                            Obj18_03_Wait:
00007FDC 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time
00007FE0 66F8                       		bne.s	Obj18_03_NoMove	; if time is > 0, branch
00007FE2 317C 0020 003A             		move.w	#32,$3A(a0)
00007FE8 5228 0028                  		addq.b	#1,$28(a0)	; change to type 04 (falling)
00007FEC 4E75                       		rts	
00007FEE                            ; ===========================================================================
00007FEE                            
00007FEE                            Obj18_Type04:
00007FEE 4A68 003A                  		tst.w	$3A(a0)
00007FF2 6700                       		beq.s	loc_8048
00007FF4 5368 003A                  		subq.w	#1,$3A(a0)
00007FF8 6600                       		bne.s	loc_8048
00007FFA 0828 0003 0022             		btst	#3,$22(a0)
00008000 6700                       		beq.s	loc_8042
00008002 08E9 0001 0022             		bset	#1,$22(a1)
00008008 08A9 0003 0022             		bclr	#3,$22(a1)
0000800E 137C 0002 0024             		move.b	#2,$24(a1)
00008014 08A8 0003 0022             		bclr	#3,$22(a0)
0000801A 4228 0025                  		clr.b	$25(a0)
0000801E 3368 0012 0012             		move.w	$12(a0),$12(a1)
00008024                            
00008024                            loc_8042:
00008024 117C 0008 0024             		move.b	#8,$24(a0)
0000802A                            
0000802A                            loc_8048:
0000802A 2628 002C                  		move.l	$2C(a0),d3
0000802E 3028 0012                  		move.w	$12(a0),d0
00008032 48C0                       		ext.l	d0
00008034 E180                       		asl.l	#8,d0
00008036 D680                       		add.l	d0,d3
00008038 2143 002C                  		move.l	d3,$2C(a0)
0000803C 0668 0038 0012             		addi.w	#$38,$12(a0)
00008042 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008046 0640 00E0                  		addi.w	#$E0,d0
0000804A B068 002C                  		cmp.w	$2C(a0),d0
0000804E 6400                       		bcc.s	locret_8074
00008050 117C 0006 0024             		move.b	#6,$24(a0)
00008056                            
00008056                            locret_8074:
00008056 4E75                       		rts	
00008058                            ; ===========================================================================
00008058                            
00008058                            Obj18_Type07:
00008058 4A68 003A                  		tst.w	$3A(a0)		; is time delay	set?
0000805C 6600                       		bne.s	Obj18_07_Wait	; if yes, branch
0000805E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
00008062 7000                       		moveq	#0,d0
00008064 1028 0028                  		move.b	$28(a0),d0	; move object type ($x7) to d0
00008068 E848                       		lsr.w	#4,d0		; divide d0 by 8, round	down
0000806A 4A32 0000                  		tst.b	(a2,d0.w)	; has switch no. d0 been pressed?
0000806E 6700                       		beq.s	Obj18_07_NoMove	; if not, branch
00008070 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00008076                            
00008076                            Obj18_07_NoMove:
00008076 4E75                       		rts	
00008078                            ; ===========================================================================
00008078                            
00008078                            Obj18_07_Wait:
00008078 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
0000807C 66F8                       		bne.s	Obj18_07_NoMove	; if time is > 0, branch
0000807E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 08
00008082 4E75                       		rts	
00008084                            ; ===========================================================================
00008084                            
00008084                            Obj18_Type08:
00008084 5568 002C                  		subq.w	#2,$2C(a0)	; move platform	up
00008088 3028 0034                  		move.w	$34(a0),d0
0000808C 0440 0200                  		subi.w	#$200,d0
00008090 B068 002C                  		cmp.w	$2C(a0),d0	; has platform moved $200 pixels?
00008094 6600                       		bne.s	Obj18_08_NoStop	; if not, branch
00008096 4228 0028                  		clr.b	$28(a0)		; change to type 00 (stop moving)
0000809A                            
0000809A                            Obj18_08_NoStop:
0000809A 4E75                       		rts	
0000809C                            ; ===========================================================================
0000809C                            
0000809C                            Obj18_Type0A:
0000809C 3028 0034                  		move.w	$34(a0),d0
000080A0 1228 0026                  		move.b	$26(a0),d1	; load platform-motion variable
000080A4 0401 0040                  		subi.b	#$40,d1
000080A8 4881                       		ext.w	d1
000080AA E241                       		asr.w	#1,d1
000080AC D041                       		add.w	d1,d0
000080AE 3140 002C                  		move.w	d0,$2C(a0)	; change position on y-axis
000080B2                            
000080B2                            Obj18_ChgMotion:
000080B2 1178 FE78 0026             		move.b	($FFFFFE78).w,$26(a0) ;	update platform-movement variable
000080B8 4E75                       		rts	
000080BA                            ; ===========================================================================
000080BA                            
000080BA                            Obj18_ChkDel:				; XREF: Obj18_Action; Obj18_Action2
000080BA 3028 0032                  		move.w	$32(a0),d0
000080BE 0240 FF80                  		andi.w	#$FF80,d0
000080C2 3238 F700                  		move.w	($FFFFF700).w,d1
000080C6 0441 0080                  		subi.w	#$80,d1
000080CA 0241 FF80                  		andi.w	#$FF80,d1
000080CE 9041                       		sub.w	d1,d0
000080D0 0C40 0280                  		cmpi.w	#$280,d0
000080D4 6200                       		bhi.s	Obj18_Delete
000080D6 4E75                       		rts	
000080D8                            ; ===========================================================================
000080D8                            
000080D8                            Obj18_Delete:				; XREF: Obj18_Index
000080D8 6000 0000                  		bra.w	DeleteObject
000080DC                            ; ===========================================================================
000080DC                            ; ---------------------------------------------------------------------------
000080DC                            ; Sprite mappings - unused
000080DC                            ; ---------------------------------------------------------------------------
000080DC                            Map_obj18x:
000080DC                            	include "_maps\obj18x.asm"
000080DC                            ; ---------------------------------------------------------------------------
000080DC                            ; Sprite mappings - unused
000080DC                            ; ---------------------------------------------------------------------------
000080DC 0000                       		dc.w byte_80FE-Map_obj18x
000080DE 0000                       		dc.w byte_8109-Map_obj18x
000080E0 02                         byte_80FE:	dc.b 2
000080E1 F40B 003C E8               		dc.b $F4, $B, 0, $3C, $E8
000080E6 F40B 0048 00               		dc.b $F4, $B, 0, $48, 0
000080EB 0A                         byte_8109:	dc.b $A
000080EC F40F 00CA E0               		dc.b $F4, $F, 0, $CA, $E0
000080F1 040F 00DA E0               		dc.b 4,	$F, 0, $DA, $E0
000080F6 240F 00DA E0               		dc.b $24, $F, 0, $DA, $E0
000080FB 440F 00DA E0               		dc.b $44, $F, 0, $DA, $E0
00008100 640F 00DA E0               		dc.b $64, $F, 0, $DA, $E0
00008105 F40F 08CA 00               		dc.b $F4, $F, 8, $CA, 0
0000810A 040F 08DA 00               		dc.b 4,	$F, 8, $DA, 0
0000810F 240F 08DA 00               		dc.b $24, $F, 8, $DA, 0
00008114 440F 08DA 00               		dc.b $44, $F, 8, $DA, 0
00008119 640F 08DA 00               		dc.b $64, $F, 8, $DA, 0
0000811E                            		even
0000811E                            		even
0000811E                            
0000811E                            ; ---------------------------------------------------------------------------
0000811E                            ; Sprite mappings - GHZ	platforms
0000811E                            ; ---------------------------------------------------------------------------
0000811E                            Map_obj18:
0000811E                            	include "_maps\obj18ghz.asm"
0000811E                            ; ---------------------------------------------------------------------------
0000811E                            ; Sprite mappings - GHZ	platforms
0000811E                            ; ---------------------------------------------------------------------------
0000811E 0000                       		dc.w byte_8140-Map_obj18
00008120 0000                       		dc.w byte_8155-Map_obj18
00008122 04                         byte_8140:	dc.b 4
00008123 F40B 003B E0               		dc.b $F4, $B, 0, $3B, $E0 ; small platform
00008128 F407 003F F8               		dc.b $F4, 7, 0,	$3F, $F8
0000812D F407 003F 08               		dc.b $F4, 7, 0,	$3F, 8
00008132 F403 0047 18               		dc.b $F4, 3, 0,	$47, $18
00008137 0A                         byte_8155:	dc.b $A
00008138 F40F 00C5 E0               		dc.b $F4, $F, 0, $C5, $E0 ; large column platform
0000813D 040F 00D5 E0               		dc.b 4,	$F, 0, $D5, $E0
00008142 240F 00D5 E0               		dc.b $24, $F, 0, $D5, $E0
00008147 440F 00D5 E0               		dc.b $44, $F, 0, $D5, $E0
0000814C 640F 00D5 E0               		dc.b $64, $F, 0, $D5, $E0
00008151 F40F 08C5 00               		dc.b $F4, $F, 8, $C5, 0
00008156 040F 08D5 00               		dc.b 4,	$F, 8, $D5, 0
0000815B 240F 08D5 00               		dc.b $24, $F, 8, $D5, 0
00008160 440F 08D5 00               		dc.b $44, $F, 8, $D5, 0
00008165 640F 08D5 00               		dc.b $64, $F, 8, $D5, 0
0000816A                            		even
0000816A                            		even
0000816A                            
0000816A                            ; ---------------------------------------------------------------------------
0000816A                            ; Sprite mappings - SYZ	platforms
0000816A                            ; ---------------------------------------------------------------------------
0000816A                            Map_obj18a:
0000816A                            	include "_maps\obj18syz.asm"
0000816A                            ; ---------------------------------------------------------------------------
0000816A                            ; Sprite mappings - SYZ	platforms
0000816A                            ; ---------------------------------------------------------------------------
0000816A 0000                       		dc.w byte_818A-Map_obj18a
0000816C 03                         byte_818A:	dc.b 3
0000816D F60B 0049 E0               		dc.b $F6, $B, 0, $49, $E0
00008172 F607 0051 F8               		dc.b $F6, 7, 0,	$51, $F8
00008177 F60B 0055 08               		dc.b $F6, $B, 0, $55, 8
0000817C                            		even
0000817C                            		even
0000817C                            
0000817C                            ; ---------------------------------------------------------------------------
0000817C                            ; Sprite mappings - SLZ	platforms
0000817C                            ; ---------------------------------------------------------------------------
0000817C                            Map_obj18b:
0000817C                            	include "_maps\obj18slz.asm"
0000817C                            ; ---------------------------------------------------------------------------
0000817C                            ; Sprite mappings - SLZ	platforms
0000817C                            ; ---------------------------------------------------------------------------
0000817C 0000                       		dc.w byte_819C-Map_obj18b
0000817E 02                         byte_819C:	dc.b 2
0000817F F80F 0021 E0               		dc.b $F8, $F, 0, $21, $E0
00008184 F80F 0021 00               		dc.b $F8, $F, 0, $21, 0
0000818A 00                         		even
0000818A 00                         		even
0000818A                            
0000818A                            ; ===========================================================================
0000818A                            ; ---------------------------------------------------------------------------
0000818A                            ; Object 19 - blank
0000818A                            ; ---------------------------------------------------------------------------
0000818A                            
0000818A                            Obj19:					; XREF: Obj_Index
0000818A 4E75                       		rts	
0000818C                            ; ===========================================================================
0000818C                            ; ---------------------------------------------------------------------------
0000818C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000818C                            ; ---------------------------------------------------------------------------
0000818C                            Map_obj48:
0000818C                            	include "_maps\obj48.asm"
0000818C                            ; ---------------------------------------------------------------------------
0000818C                            ; Sprite mappings - swinging ball on a chain from GHZ boss
0000818C                            ; ---------------------------------------------------------------------------
0000818C 0000 0000                  		dc.w byte_81B2-Map_obj48, byte_81D1-Map_obj48
00008190 0000 0000                  		dc.w byte_81E6-Map_obj48, byte_81FB-Map_obj48
00008194 06                         byte_81B2:	dc.b 6
00008195 F004 0024 F0               		dc.b $F0, 4, 0,	$24, $F0
0000819A F804 1024 F0               		dc.b $F8, 4, $10, $24, $F0
0000819F E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000081A4 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
000081A9 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
000081AE 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
000081B3 04                         byte_81D1:	dc.b 4
000081B4 E80A 0009 E8               		dc.b $E8, $A, 0, 9, $E8
000081B9 E80A 0809 00               		dc.b $E8, $A, 8, 9, 0
000081BE 000A 1009 E8               		dc.b 0,	$A, $10, 9, $E8
000081C3 000A 1809 00               		dc.b 0,	$A, $18, 9, 0
000081C8 04                         byte_81E6:	dc.b 4
000081C9 E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
000081CE E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
000081D3 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
000081D8 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
000081DD 04                         byte_81FB:	dc.b 4
000081DE E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
000081E3 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
000081E8 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
000081ED 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
000081F2                            		even
000081F2                            		even
000081F2                            
000081F2                            ; ===========================================================================
000081F2                            ; ---------------------------------------------------------------------------
000081F2                            ; Object 1A - GHZ collapsing ledge
000081F2                            ; ---------------------------------------------------------------------------
000081F2                            
000081F2                            Obj1A:					; XREF: Obj_Index
000081F2 7000                       		moveq	#0,d0
000081F4 1028 0024                  		move.b	$24(a0),d0
000081F8 323B 0000                  		move.w	Obj1A_Index(pc,d0.w),d1
000081FC 4EFB 1000                  		jmp	Obj1A_Index(pc,d1.w)
00008200                            ; ===========================================================================
00008200 0000 0000                  Obj1A_Index:	dc.w Obj1A_Main-Obj1A_Index, Obj1A_ChkTouch-Obj1A_Index
00008204 0000 0000                  		dc.w Obj1A_Touch-Obj1A_Index, Obj1A_Display-Obj1A_Index
00008208 0000 0000                  		dc.w Obj1A_Delete-Obj1A_Index, Obj1A_WalkOff-Obj1A_Index
0000820C                            ; ===========================================================================
0000820C                            
0000820C                            Obj1A_Main:				; XREF: Obj1A_Index
0000820C 5428 0024                  		addq.b	#2,$24(a0)
00008210 217C 0000 0000 0004        		move.l	#Map_obj1A,4(a0)
00008218 317C 4000 0002             		move.w	#$4000,2(a0)
0000821E 0028 0004 0001             		ori.b	#4,1(a0)
00008224 117C 0004 0018             		move.b	#4,$18(a0)
0000822A 117C 0007 0038             		move.b	#7,$38(a0)	; set time delay for collapse
00008230 117C 0064 0019             		move.b	#$64,$19(a0)
00008236 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000823C 117C 0038 0016             		move.b	#$38,$16(a0)
00008242 08E8 0004 0001             		bset	#4,1(a0)
00008248                            
00008248                            Obj1A_ChkTouch:				; XREF: Obj1A_Index
00008248 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	platform?
0000824C 6700                       		beq.s	Obj1A_Slope	; if not, branch
0000824E 4A28 0038                  		tst.b	$38(a0)		; has time reached zero?
00008252 6700 0000                  		beq.w	Obj1A_Collapse	; if yes, branch
00008256 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
0000825A                            
0000825A                            Obj1A_Slope:
0000825A 323C 0030                  		move.w	#$30,d1
0000825E 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008264 6100 F2A4                  		bsr.w	SlopeObject
00008268 6000 0000                  		bra.w	MarkObjGone
0000826C                            ; ===========================================================================
0000826C                            
0000826C                            Obj1A_Touch:				; XREF: Obj1A_Index
0000826C 4A28 0038                  		tst.b	$38(a0)
00008270 6700 0000                  		beq.w	loc_847A
00008274 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
0000827A 5328 0038                  		subq.b	#1,$38(a0)
0000827E                            
0000827E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000827E                            
0000827E                            
0000827E                            Obj1A_WalkOff:				; XREF: Obj1A_Index
0000827E 323C 0030                  		move.w	#$30,d1
00008282 6100 F326                  		bsr.w	ExitPlatform
00008286 323C 0030                  		move.w	#$30,d1
0000828A 45F9 0000 0000             		lea	(Obj1A_SlopeData).l,a2
00008290 3428 0008                  		move.w	8(a0),d2
00008294 6100 0000                  		bsr.w	SlopeObject2
00008298 6000 0000                  		bra.w	MarkObjGone
0000829C                            ; End of function Obj1A_WalkOff
0000829C                            
0000829C                            ; ===========================================================================
0000829C                            
0000829C                            Obj1A_Display:				; XREF: Obj1A_Index
0000829C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000082A0 6700                       		beq.s	Obj1A_TimeZero	; if yes, branch
000082A2 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000082A6 6600 0000                  		bne.w	loc_82D0	; if yes, branch
000082AA 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000082AE 6000 0000                  		bra.w	DisplaySprite
000082B2                            ; ===========================================================================
000082B2                            
000082B2                            loc_82D0:				; XREF: Obj1A_Display
000082B2 5328 0038                  		subq.b	#1,$38(a0)
000082B6 6100 FFC6                  		bsr.w	Obj1A_WalkOff
000082BA 43F8 D000                  		lea	($FFFFD000).w,a1
000082BE 0829 0003 0022             		btst	#3,$22(a1)
000082C4 6700                       		beq.s	loc_82FC
000082C6 4A28 0038                  		tst.b	$38(a0)
000082CA 6600                       		bne.s	locret_8308
000082CC 08A9 0003 0022             		bclr	#3,$22(a1)
000082D2 08A9 0005 0022             		bclr	#5,$22(a1)
000082D8 137C 0001 001D             		move.b	#1,$1D(a1)
000082DE                            
000082DE                            loc_82FC:
000082DE 117C 0000 003A             		move.b	#0,$3A(a0)
000082E4 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj1A_Display" routine
000082EA                            
000082EA                            locret_8308:
000082EA 4E75                       		rts	
000082EC                            ; ===========================================================================
000082EC                            
000082EC                            Obj1A_TimeZero:				; XREF: Obj1A_Display
000082EC 6100 0000                  		bsr.w	ObjectFall
000082F0 6100 0000                  		bsr.w	DisplaySprite
000082F4 4A28 0001                  		tst.b	1(a0)
000082F8 6A00                       		bpl.s	Obj1A_Delete
000082FA 4E75                       		rts	
000082FC                            ; ===========================================================================
000082FC                            
000082FC                            Obj1A_Delete:				; XREF: Obj1A_Index
000082FC 6100 0000                  		bsr.w	DeleteObject
00008300 4E75                       		rts	
00008302                            ; ===========================================================================
00008302                            ; ---------------------------------------------------------------------------
00008302                            ; Object 53 - collapsing floors	(MZ, SLZ, SBZ)
00008302                            ; ---------------------------------------------------------------------------
00008302                            
00008302                            Obj53:					; XREF: Obj_Index
00008302 7000                       		moveq	#0,d0
00008304 1028 0024                  		move.b	$24(a0),d0
00008308 323B 0000                  		move.w	Obj53_Index(pc,d0.w),d1
0000830C 4EFB 1000                  		jmp	Obj53_Index(pc,d1.w)
00008310                            ; ===========================================================================
00008310 0000 0000                  Obj53_Index:	dc.w Obj53_Main-Obj53_Index, Obj53_ChkTouch-Obj53_Index
00008314 0000 0000                  		dc.w Obj53_Touch-Obj53_Index, Obj53_Display-Obj53_Index
00008318 0000 0000                  		dc.w Obj53_Delete-Obj53_Index, Obj53_WalkOff-Obj53_Index
0000831C                            ; ===========================================================================
0000831C                            
0000831C                            Obj53_Main:				; XREF: Obj53_Index
0000831C 5428 0024                  		addq.b	#2,$24(a0)
00008320 217C 0000 0000 0004        		move.l	#Map_obj53,4(a0)
00008328 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000832E 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
00008334 6600                       		bne.s	Obj53_NotSLZ
00008336 317C 44E0 0002             		move.w	#$44E0,2(a0)	; SLZ specific code
0000833C 5428 001A                  		addq.b	#2,$1A(a0)
00008340                            
00008340                            Obj53_NotSLZ:
00008340 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00008346 6600                       		bne.s	Obj53_NotSBZ
00008348 317C 43F5 0002             		move.w	#$43F5,2(a0)	; SBZ specific code
0000834E                            
0000834E                            Obj53_NotSBZ:
0000834E 0028 0004 0001             		ori.b	#4,1(a0)
00008354 117C 0004 0018             		move.b	#4,$18(a0)
0000835A 117C 0007 0038             		move.b	#7,$38(a0)
00008360 117C 0044 0019             		move.b	#$44,$19(a0)
00008366                            
00008366                            Obj53_ChkTouch:				; XREF: Obj53_Index
00008366 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
0000836A 6700                       		beq.s	Obj53_Solid	; if not, branch
0000836C 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
00008370 6700 0000                  		beq.w	Obj53_Collapse	; if yes, branch
00008374 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
00008378                            
00008378                            Obj53_Solid:
00008378 323C 0020                  		move.w	#$20,d1
0000837C 6100 F0B8                  		bsr.w	PlatformObject
00008380 4A28 0028                  		tst.b	$28(a0)
00008384 6A00                       		bpl.s	Obj53_MarkAsGone
00008386 0829 0003 0022             		btst	#3,$22(a1)
0000838C 6700                       		beq.s	Obj53_MarkAsGone
0000838E 08A8 0000 0001             		bclr	#0,1(a0)
00008394 3029 0008                  		move.w	8(a1),d0
00008398 9068 0008                  		sub.w	8(a0),d0
0000839C 6400                       		bcc.s	Obj53_MarkAsGone
0000839E 08E8 0000 0001             		bset	#0,1(a0)
000083A4                            
000083A4                            Obj53_MarkAsGone:
000083A4 6000 0000                  		bra.w	MarkObjGone
000083A8                            ; ===========================================================================
000083A8                            
000083A8                            Obj53_Touch:				; XREF: Obj53_Index
000083A8 4A28 0038                  		tst.b	$38(a0)
000083AC 6700 0000                  		beq.w	loc_8458
000083B0 117C 0001 003A             		move.b	#1,$3A(a0)	; set object as	"touched"
000083B6 5328 0038                  		subq.b	#1,$38(a0)
000083BA                            
000083BA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000083BA                            
000083BA                            
000083BA                            Obj53_WalkOff:				; XREF: Obj53_Index
000083BA 323C 0020                  		move.w	#$20,d1
000083BE 6100 F1EA                  		bsr.w	ExitPlatform
000083C2 3428 0008                  		move.w	8(a0),d2
000083C6 6100 F74C                  		bsr.w	MvSonicOnPtfm2
000083CA 6000 0000                  		bra.w	MarkObjGone
000083CE                            ; End of function Obj53_WalkOff
000083CE                            
000083CE                            ; ===========================================================================
000083CE                            
000083CE                            Obj53_Display:				; XREF: Obj53_Index
000083CE 4A28 0038                  		tst.b	$38(a0)		; has time delay reached zero?
000083D2 6700                       		beq.s	Obj53_TimeZero	; if yes, branch
000083D4 4A28 003A                  		tst.b	$3A(a0)		; has Sonic touched the	object?
000083D8 6600 0000                  		bne.w	loc_8402	; if yes, branch
000083DC 5328 0038                  		subq.b	#1,$38(a0)	; subtract 1 from time
000083E0 6000 0000                  		bra.w	DisplaySprite
000083E4                            ; ===========================================================================
000083E4                            
000083E4                            loc_8402:
000083E4 5328 0038                  		subq.b	#1,$38(a0)
000083E8 6100 FFD0                  		bsr.w	Obj53_WalkOff
000083EC 43F8 D000                  		lea	($FFFFD000).w,a1
000083F0 0829 0003 0022             		btst	#3,$22(a1)
000083F6 6700                       		beq.s	loc_842E
000083F8 4A28 0038                  		tst.b	$38(a0)
000083FC 6600                       		bne.s	locret_843A
000083FE 08A9 0003 0022             		bclr	#3,$22(a1)
00008404 08A9 0005 0022             		bclr	#5,$22(a1)
0000840A 137C 0001 001D             		move.b	#1,$1D(a1)
00008410                            
00008410                            loc_842E:
00008410 117C 0000 003A             		move.b	#0,$3A(a0)
00008416 117C 0006 0024             		move.b	#6,$24(a0)	; run "Obj53_Display" routine
0000841C                            
0000841C                            locret_843A:
0000841C 4E75                       		rts	
0000841E                            ; ===========================================================================
0000841E                            
0000841E                            Obj53_TimeZero:				; XREF: Obj53_Display
0000841E 6100 0000                  		bsr.w	ObjectFall
00008422 6100 0000                  		bsr.w	DisplaySprite
00008426 4A28 0001                  		tst.b	1(a0)
0000842A 6A00                       		bpl.s	Obj53_Delete
0000842C 4E75                       		rts	
0000842E                            ; ===========================================================================
0000842E                            
0000842E                            Obj53_Delete:				; XREF: Obj53_Index
0000842E 6100 0000                  		bsr.w	DeleteObject
00008432 4E75                       		rts	
00008434                            ; ===========================================================================
00008434                            
00008434                            Obj53_Collapse:				; XREF: Obj53_ChkTouch
00008434 117C 0000 003A             		move.b	#0,$3A(a0)
0000843A                            
0000843A                            loc_8458:				; XREF: Obj53_Touch
0000843A 49F9 0000 0000             		lea	(Obj53_Data2).l,a4
00008440 0828 0000 0028             		btst	#0,$28(a0)
00008446 6700                       		beq.s	loc_846C
00008448 49F9 0000 0000             		lea	(Obj53_Data3).l,a4
0000844E                            
0000844E                            loc_846C:
0000844E 7207                       		moveq	#7,d1
00008450 5228 001A                  		addq.b	#1,$1A(a0)
00008454 6000                       		bra.s	loc_8486
00008456                            ; ===========================================================================
00008456                            
00008456                            Obj1A_Collapse:				; XREF: Obj1A_ChkTouch
00008456 117C 0000 003A             		move.b	#0,$3A(a0)
0000845C                            
0000845C                            loc_847A:				; XREF: Obj1A_Touch
0000845C 49F9 0000 0000             		lea	(Obj53_Data1).l,a4
00008462 7218                       		moveq	#$18,d1
00008464 5428 001A                  		addq.b	#2,$1A(a0)
00008468                            
00008468                            loc_8486:				; XREF: Obj53_Collapse
00008468 7000                       		moveq	#0,d0
0000846A 1028 001A                  		move.b	$1A(a0),d0
0000846E D040                       		add.w	d0,d0
00008470 2668 0004                  		movea.l	4(a0),a3
00008474 D6F3 0000                  		adda.w	(a3,d0.w),a3
00008478 524B                       		addq.w	#1,a3
0000847A 08E8 0005 0001             		bset	#5,1(a0)
00008480 1810                       		move.b	0(a0),d4
00008482 1A28 0001                  		move.b	1(a0),d5
00008486 2248                       		movea.l	a0,a1
00008488 6000                       		bra.s	loc_84B2
0000848A                            ; ===========================================================================
0000848A                            
0000848A                            loc_84AA:
0000848A 6100 0000                  		bsr.w	SingleObjLoad
0000848E 6600                       		bne.s	loc_84F2
00008490 5A4B                       		addq.w	#5,a3
00008492                            
00008492                            loc_84B2:
00008492 137C 0006 0024             		move.b	#6,$24(a1)
00008498 1284                       		move.b	d4,0(a1)
0000849A 234B 0004                  		move.l	a3,4(a1)
0000849E 1345 0001                  		move.b	d5,1(a1)
000084A2 3368 0008 0008             		move.w	8(a0),8(a1)
000084A8 3368 000C 000C             		move.w	$C(a0),$C(a1)
000084AE 3368 0002 0002             		move.w	2(a0),2(a1)
000084B4 1368 0018 0018             		move.b	$18(a0),$18(a1)
000084BA 1368 0019 0019             		move.b	$19(a0),$19(a1)
000084C0 135C 0038                  		move.b	(a4)+,$38(a1)
000084C4 B3C8                       		cmpa.l	a0,a1
000084C6 6400                       		bcc.s	loc_84EE
000084C8 6100 0000                  		bsr.w	DisplaySprite2
000084CC                            
000084CC                            loc_84EE:
000084CC 51C9 FFBC                  		dbf	d1,loc_84AA
000084D0                            
000084D0                            loc_84F2:
000084D0 6100 0000                  		bsr.w	DisplaySprite
000084D4 303C 00B9                  		move.w	#$B9,d0
000084D8 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play collapsing	sound
000084DE                            ; ===========================================================================
000084DE                            ; ---------------------------------------------------------------------------
000084DE                            ; Disintegration data for collapsing ledges (MZ, SLZ, SBZ)
000084DE                            ; ---------------------------------------------------------------------------
000084DE 1C18 1410 1A16 120E 0A06+  Obj53_Data1:	dc.b $1C, $18, $14, $10, $1A, $16, $12,	$E, $A,	6, $18,	$14, $10, $C, 8, 4
000084EE 1612 0E0A 0602 1410 0C00   		dc.b $16, $12, $E, $A, 6, 2, $14, $10, $C, 0
000084F8 1E16 0E06 1A12 0A02        Obj53_Data2:	dc.b $1E, $16, $E, 6, $1A, $12,	$A, 2
00008500 161E 1A12 060E 0A02        Obj53_Data3:	dc.b $16, $1E, $1A, $12, 6, $E,	$A, 2
00008508                            
00008508                            ; ---------------------------------------------------------------------------
00008508                            ; Sloped platform subroutine (GHZ collapsing ledges and	MZ platforms)
00008508                            ; ---------------------------------------------------------------------------
00008508                            
00008508                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008508                            
00008508                            
00008508                            SlopeObject2:				; XREF: Obj1A_WalkOff; et al
00008508 43F8 D000                  		lea	($FFFFD000).w,a1
0000850C 0829 0003 0022             		btst	#3,$22(a1)
00008512 6700                       		beq.s	locret_856E
00008514 3029 0008                  		move.w	8(a1),d0
00008518 9068 0008                  		sub.w	8(a0),d0
0000851C D041                       		add.w	d1,d0
0000851E E248                       		lsr.w	#1,d0
00008520 0828 0000 0001             		btst	#0,1(a0)
00008526 6700                       		beq.s	loc_854E
00008528 4640                       		not.w	d0
0000852A D041                       		add.w	d1,d0
0000852C                            
0000852C                            loc_854E:
0000852C 7200                       		moveq	#0,d1
0000852E 1232 0000                  		move.b	(a2,d0.w),d1
00008532 3028 000C                  		move.w	$C(a0),d0
00008536 9041                       		sub.w	d1,d0
00008538 7200                       		moveq	#0,d1
0000853A 1229 0016                  		move.b	$16(a1),d1
0000853E 9041                       		sub.w	d1,d0
00008540 3340 000C                  		move.w	d0,$C(a1)
00008544 9468 0008                  		sub.w	8(a0),d2
00008548 9569 0008                  		sub.w	d2,8(a1)
0000854C                            
0000854C                            locret_856E:
0000854C 4E75                       		rts	
0000854E                            ; End of function SlopeObject2
0000854E                            
0000854E                            ; ===========================================================================
0000854E                            ; ---------------------------------------------------------------------------
0000854E                            ; Collision data for GHZ collapsing ledge
0000854E                            ; ---------------------------------------------------------------------------
0000854E                            Obj1A_SlopeData:
0000854E                            		incbin	misc\ghzledge.bin
0000857E                            		even
0000857E                            
0000857E                            ; ---------------------------------------------------------------------------
0000857E                            ; Sprite mappings - GHZ	collapsing ledge
0000857E                            ; ---------------------------------------------------------------------------
0000857E                            Map_obj1A:
0000857E                            	include "_maps\obj1A.asm"
0000857E                            ; ---------------------------------------------------------------------------
0000857E                            ; Sprite mappings - GHZ	collapsing ledge
0000857E                            ; ---------------------------------------------------------------------------
0000857E 0000 0000                  		dc.w byte_85A8-Map_obj1A, byte_85F9-Map_obj1A
00008582 0000 0000                  		dc.w byte_864A-Map_obj1A, byte_86C8-Map_obj1A
00008586 10                         byte_85A8:	dc.b $10
00008587 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing left
0000858C D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
00008591 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
00008596 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
0000859B D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000085A0 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
000085A5 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000085AA F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
000085AF F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000085B4 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
000085B9 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
000085BE 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
000085C3 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
000085C8 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
000085CD 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
000085D2 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000085D7 10                         byte_85F9:	dc.b $10
000085D8 C80E 0057 10               		dc.b $C8, $E, 0, $57, $10 ; ledge facing right
000085DD D00D 0063 F0               		dc.b $D0, $D, 0, $63, $F0
000085E2 E00D 006B 10               		dc.b $E0, $D, 0, $6B, $10
000085E7 E00D 0073 F0               		dc.b $E0, $D, 0, $73, $F0
000085EC D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000085F1 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000085F6 F00D 0087 10               		dc.b $F0, $D, 0, $87, $10
000085FB F00D 008F F0               		dc.b $F0, $D, 0, $8F, $F0
00008600 F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008605 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
0000860A 000D 009F 10               		dc.b 0,	$D, 0, $9F, $10
0000860F 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008614 000D 00AB E0               		dc.b 0,	$D, 0, $AB, $E0
00008619 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
0000861E 100D 00AB 10               		dc.b $10, $D, 0, $AB, $10
00008623 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008628 19                         byte_864A:	dc.b $19
00008629 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	left in	pieces
0000862E C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
00008633 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
00008638 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
0000863D E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
00008642 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
00008647 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
0000864C E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
00008651 D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
00008656 D806 0081 D0               		dc.b $D8, 6, 0,	$81, $D0
0000865B F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
00008660 F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
00008665 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
0000866A F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
0000866F F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
00008674 F005 009B D0               		dc.b $F0, 5, 0,	$9B, $D0
00008679 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
0000867E 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008683 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008688 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000868D 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008692 0005 00B3 D0               		dc.b 0,	5, 0, $B3, $D0
00008697 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000869C 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
000086A1 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
000086A6 19                         byte_86C8:	dc.b $19
000086A7 C806 005D 20               		dc.b $C8, 6, 0,	$5D, $20 ; ledge facing	right in pieces
000086AC C806 0057 10               		dc.b $C8, 6, 0,	$57, $10
000086B1 D005 0067 00               		dc.b $D0, 5, 0,	$67, 0
000086B6 D005 0063 F0               		dc.b $D0, 5, 0,	$63, $F0
000086BB E005 006F 20               		dc.b $E0, 5, 0,	$6F, $20
000086C0 E005 006B 10               		dc.b $E0, 5, 0,	$6B, $10
000086C5 E005 0077 00               		dc.b $E0, 5, 0,	$77, 0
000086CA E005 0073 F0               		dc.b $E0, 5, 0,	$73, $F0
000086CF D806 007B E0               		dc.b $D8, 6, 0,	$7B, $E0
000086D4 D806 00BB D0               		dc.b $D8, 6, 0,	$BB, $D0
000086D9 F005 008B 20               		dc.b $F0, 5, 0,	$8B, $20
000086DE F005 0087 10               		dc.b $F0, 5, 0,	$87, $10
000086E3 F005 0093 00               		dc.b $F0, 5, 0,	$93, 0
000086E8 F005 008F F0               		dc.b $F0, 5, 0,	$8F, $F0
000086ED F005 0097 E0               		dc.b $F0, 5, 0,	$97, $E0
000086F2 F005 00C1 D0               		dc.b $F0, 5, 0,	$C1, $D0
000086F7 0005 008B 20               		dc.b 0,	5, 0, $8B, $20
000086FC 0005 008B 10               		dc.b 0,	5, 0, $8B, $10
00008701 0005 00A7 00               		dc.b 0,	5, 0, $A7, 0
00008706 0005 00AB F0               		dc.b 0,	5, 0, $AB, $F0
0000870B 0005 00AB E0               		dc.b 0,	5, 0, $AB, $E0
00008710 0005 00B7 D0               		dc.b 0,	5, 0, $B7, $D0
00008715 1005 00AB 20               		dc.b $10, 5, 0,	$AB, $20
0000871A 1005 00AB 10               		dc.b $10, 5, 0,	$AB, $10
0000871F 1005 00B7 00               		dc.b $10, 5, 0,	$B7, 0
00008724                            		even
00008724                            		even
00008724                            
00008724                            ; ---------------------------------------------------------------------------
00008724                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008724                            ; ---------------------------------------------------------------------------
00008724                            Map_obj53:
00008724                            	include "_maps\obj53.asm"
00008724                            ; ---------------------------------------------------------------------------
00008724                            ; Sprite mappings - collapsing floors (MZ, SLZ,	SBZ)
00008724                            ; ---------------------------------------------------------------------------
00008724 0000 0000                  		dc.w byte_874E-Map_obj53, byte_8763-Map_obj53
00008728 0000 0000                  		dc.w byte_878C-Map_obj53, byte_87A1-Map_obj53
0000872C 04                         byte_874E:	dc.b 4
0000872D F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; MZ and SBZ blocks
00008732 080D 0000 E0               		dc.b 8,	$D, 0, 0, $E0
00008737 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000873C 080D 0000 00               		dc.b 8,	$D, 0, 0, 0
00008741 08                         byte_8763:	dc.b 8
00008742 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008747 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
0000874C F805 0000 00               		dc.b $F8, 5, 0,	0, 0
00008751 F805 0000 10               		dc.b $F8, 5, 0,	0, $10
00008756 0805 0000 E0               		dc.b 8,	5, 0, 0, $E0
0000875B 0805 0000 F0               		dc.b 8,	5, 0, 0, $F0
00008760 0805 0000 00               		dc.b 8,	5, 0, 0, 0
00008765 0805 0000 10               		dc.b 8,	5, 0, 0, $10
0000876A 04                         byte_878C:	dc.b 4
0000876B F80D 0000 E0               		dc.b $F8, $D, 0, 0, $E0	; SLZ blocks
00008770 080D 0008 E0               		dc.b 8,	$D, 0, 8, $E0
00008775 F80D 0000 00               		dc.b $F8, $D, 0, 0, 0
0000877A 080D 0008 00               		dc.b 8,	$D, 0, 8, 0
0000877F 08                         byte_87A1:	dc.b 8
00008780 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
00008785 F805 0004 F0               		dc.b $F8, 5, 0,	4, $F0
0000878A F805 0000 00               		dc.b $F8, 5, 0,	0, 0
0000878F F805 0004 10               		dc.b $F8, 5, 0,	4, $10
00008794 0805 0008 E0               		dc.b 8,	5, 0, 8, $E0
00008799 0805 000C F0               		dc.b 8,	5, 0, $C, $F0
0000879E 0805 0008 00               		dc.b 8,	5, 0, 8, 0
000087A3 0805 000C 10               		dc.b 8,	5, 0, $C, $10
000087A8                            		even
000087A8                            		even
000087A8                            
000087A8                            ; ===========================================================================
000087A8                            ; ---------------------------------------------------------------------------
000087A8                            ; Object 1C - scenery (GHZ bridge stump, SLZ lava thrower)
000087A8                            ; ---------------------------------------------------------------------------
000087A8                            
000087A8                            Obj1C:					; XREF: Obj_Index
000087A8 7000                       		moveq	#0,d0
000087AA 1028 0024                  		move.b	$24(a0),d0
000087AE 323B 0000                  		move.w	Obj1C_Index(pc,d0.w),d1
000087B2 4EFB 1000                  		jmp	Obj1C_Index(pc,d1.w)
000087B6                            ; ===========================================================================
000087B6 0000                       Obj1C_Index:	dc.w Obj1C_Main-Obj1C_Index
000087B8 0000                       		dc.w Obj1C_ChkDel-Obj1C_Index
000087BA                            ; ===========================================================================
000087BA                            
000087BA                            Obj1C_Main:				; XREF: Obj1C_Index
000087BA 5428 0024                  		addq.b	#2,$24(a0)
000087BE 7000                       		moveq	#0,d0
000087C0 1028 0028                  		move.b	$28(a0),d0	; copy object type to d0
000087C4 C0FC 000A                  		mulu.w	#$A,d0		; multiply by $A
000087C8 43FB 0000                  		lea	Obj1C_Var(pc,d0.w),a1
000087CC 2159 0004                  		move.l	(a1)+,4(a0)
000087D0 3159 0002                  		move.w	(a1)+,2(a0)
000087D4 0028 0004 0001             		ori.b	#4,1(a0)
000087DA 1159 001A                  		move.b	(a1)+,$1A(a0)
000087DE 1159 0019                  		move.b	(a1)+,$19(a0)
000087E2 1159 0018                  		move.b	(a1)+,$18(a0)
000087E6 1159 0020                  		move.b	(a1)+,$20(a0)
000087EA                            
000087EA                            Obj1C_ChkDel:				; XREF: Obj1C_Index
000087EA 3028 0008                  		move.w	8(a0),d0
000087EE 0240 FF80                  		andi.w	#$FF80,d0
000087F2 3238 F700                  		move.w	($FFFFF700).w,d1
000087F6 0441 0080                  		subi.w	#$80,d1
000087FA 0241 FF80                  		andi.w	#$FF80,d1
000087FE 9041                       		sub.w	d1,d0
00008800 0C40 0280                  		cmpi.w	#$280,d0
00008804 6200 0000                  		bhi.w	DeleteObject
00008808 6000 0000                  		bra.w	DisplaySprite
0000880C                            ; ===========================================================================
0000880C                            ; ---------------------------------------------------------------------------
0000880C                            ; Variables for	object $1C are stored in an array
0000880C                            ; ---------------------------------------------------------------------------
0000880C 0000 0000                  Obj1C_Var:	dc.l Map_obj1C		; mappings address
00008810 44D8                       		dc.w $44D8		; VRAM setting
00008812 0008 0200                  		dc.b 0,	8, 2, 0		; frame, width,	priority, collision response
00008816 0000 0000                  		dc.l Map_obj1C
0000881A 44D8                       		dc.w $44D8
0000881C 0008 0200                  		dc.b 0,	8, 2, 0
00008820 0000 0000                  		dc.l Map_obj1C
00008824 44D8                       		dc.w $44D8
00008826 0008 0200                  		dc.b 0,	8, 2, 0
0000882A 0000 791E                  		dc.l Map_obj11
0000882E 438E                       		dc.w $438E
00008830 0110 0100                  		dc.b 1,	$10, 1,	0
00008834                            ; ---------------------------------------------------------------------------
00008834                            ; Sprite mappings - SLZ	lava thrower
00008834                            ; ---------------------------------------------------------------------------
00008834                            Map_obj1C:
00008834                            	include "_maps\obj1C.asm"
00008834                            ; ---------------------------------------------------------------------------
00008834                            ; Sprite mappings - SLZ	lava thrower
00008834                            ; ---------------------------------------------------------------------------
00008834 0000                       		dc.w byte_8858-Map_obj1C
00008836 01                         byte_8858:	dc.b 1
00008837 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000883C                            		even
0000883C                            		even
0000883C                            
0000883C                            ; ===========================================================================
0000883C                            ; ---------------------------------------------------------------------------
0000883C                            ; Object 1D - switch that activates when Sonic touches it
0000883C                            ; (this	is not used anywhere in	the game)
0000883C                            ; ---------------------------------------------------------------------------
0000883C                            
0000883C                            Obj1D:					; XREF: Obj_Index
0000883C 7000                       		moveq	#0,d0
0000883E 1028 0024                  		move.b	$24(a0),d0
00008842 323B 0000                  		move.w	Obj1D_Index(pc,d0.w),d1
00008846 4EFB 1000                  		jmp	Obj1D_Index(pc,d1.w)
0000884A                            ; ===========================================================================
0000884A 0000                       Obj1D_Index:	dc.w Obj1D_Main-Obj1D_Index
0000884C 0000                       		dc.w Obj1D_Action-Obj1D_Index
0000884E 0000                       		dc.w Obj1D_Delete-Obj1D_Index
00008850                            ; ===========================================================================
00008850                            
00008850                            Obj1D_Main:				; XREF: Obj1D_Index
00008850 5428 0024                  		addq.b	#2,$24(a0)
00008854 217C 0000 0000 0004        		move.l	#Map_obj1D,4(a0)
0000885C 317C 4000 0002             		move.w	#$4000,2(a0)
00008862 117C 0004 0001             		move.b	#4,1(a0)
00008868 3168 000C 0030             		move.w	$C(a0),$30(a0)	; save position	on y-axis
0000886E 117C 0010 0019             		move.b	#$10,$19(a0)
00008874 117C 0005 0018             		move.b	#5,$18(a0)
0000887A                            
0000887A                            Obj1D_Action:				; XREF: Obj1D_Index
0000887A 3168 0030 000C             		move.w	$30(a0),$C(a0)	; restore position on y-axis
00008880 323C 0010                  		move.w	#$10,d1
00008884 6100 0000                  		bsr.w	Obj1D_ChkTouch
00008888 6700                       		beq.s	Obj1D_ChkDel
0000888A 5468 000C                  		addq.w	#2,$C(a0)	; move object 2	pixels
0000888E 7001                       		moveq	#1,d0
00008890 31C0 F7E0                  		move.w	d0,($FFFFF7E0).w ; set switch 0	as "pressed"
00008894                            
00008894                            Obj1D_ChkDel:
00008894 6100 0000                  		bsr.w	DisplaySprite
00008898 3028 0008                  		move.w	8(a0),d0
0000889C 0240 FF80                  		andi.w	#$FF80,d0
000088A0 3238 F700                  		move.w	($FFFFF700).w,d1
000088A4 0441 0080                  		subi.w	#$80,d1
000088A8 0241 FF80                  		andi.w	#$FF80,d1
000088AC 9041                       		sub.w	d1,d0
000088AE 0C40 0280                  		cmpi.w	#$280,d0
000088B2 6200 0000                  		bhi.w	Obj1D_Delete
000088B6 4E75                       		rts	
000088B8                            ; ===========================================================================
000088B8                            
000088B8                            Obj1D_Delete:				; XREF: Obj1D_Index
000088B8 6100 0000                  		bsr.w	DeleteObject
000088BC 4E75                       		rts	
000088BE                            ; ---------------------------------------------------------------------------
000088BE                            ; Subroutine to	check if Sonic touches the object
000088BE                            ; ---------------------------------------------------------------------------
000088BE                            
000088BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000088BE                            
000088BE                            
000088BE                            Obj1D_ChkTouch:				; XREF: Obj1D_Action
000088BE 43F8 D000                  		lea	($FFFFD000).w,a1
000088C2 3029 0008                  		move.w	8(a1),d0
000088C6 9068 0008                  		sub.w	8(a0),d0
000088CA D041                       		add.w	d1,d0
000088CC 6B00                       		bmi.s	loc_8918
000088CE D241                       		add.w	d1,d1
000088D0 B041                       		cmp.w	d1,d0
000088D2 6400                       		bcc.s	loc_8918
000088D4 3429 000C                  		move.w	$C(a1),d2
000088D8 1229 0016                  		move.b	$16(a1),d1
000088DC 4881                       		ext.w	d1
000088DE D242                       		add.w	d2,d1
000088E0 3028 000C                  		move.w	$C(a0),d0
000088E4 0440 0010                  		subi.w	#$10,d0
000088E8 9041                       		sub.w	d1,d0
000088EA 6200                       		bhi.s	loc_8918
000088EC 0C40 FFF0                  		cmpi.w	#-$10,d0
000088F0 6500                       		bcs.s	loc_8918
000088F2 70FF                       		moveq	#-1,d0
000088F4 4E75                       		rts	
000088F6                            ; ===========================================================================
000088F6                            
000088F6                            loc_8918:
000088F6 7000                       		moveq	#0,d0
000088F8 4E75                       		rts	
000088FA                            ; End of function Obj1D_ChkTouch
000088FA                            
000088FA                            ; ===========================================================================
000088FA                            ; ---------------------------------------------------------------------------
000088FA                            ; Sprite mappings - object 1D
000088FA                            ; ---------------------------------------------------------------------------
000088FA                            Map_obj1D:
000088FA                            	include "_maps\obj1D.asm"
000088FA                            ; ---------------------------------------------------------------------------
000088FA                            ; Sprite mappings - object 1D
000088FA                            ; ---------------------------------------------------------------------------
000088FA 0000                       		dc.w byte_891E-Map_obj1D
000088FC 04                         byte_891E:	dc.b 4
000088FD E807 0054 F0               		dc.b $E8, 7, 0,	$54, $F0
00008902 0805 005C F0               		dc.b 8,	5, 0, $5C, $F0
00008907 E807 0054 00               		dc.b $E8, 7, 0,	$54, 0
0000890C 0805 005C 00               		dc.b 8,	5, 0, $5C, 0
00008912 00                         		even
00008912 00                         		even
00008912                            
00008912                            ; ===========================================================================
00008912                            ; ---------------------------------------------------------------------------
00008912                            ; Object 2A - doors (SBZ)
00008912                            ; ---------------------------------------------------------------------------
00008912                            
00008912                            Obj2A:					; XREF: Obj_Index
00008912 7000                       		moveq	#0,d0
00008914 1028 0024                  		move.b	$24(a0),d0
00008918 323B 0000                  		move.w	Obj2A_Index(pc,d0.w),d1
0000891C 4EFB 1000                  		jmp	Obj2A_Index(pc,d1.w)
00008920                            ; ===========================================================================
00008920 0000                       Obj2A_Index:	dc.w Obj2A_Main-Obj2A_Index
00008922 0000                       		dc.w Obj2A_OpenShut-Obj2A_Index
00008924                            ; ===========================================================================
00008924                            
00008924                            Obj2A_Main:				; XREF: Obj2A_Index
00008924 5428 0024                  		addq.b	#2,$24(a0)
00008928 217C 0000 0000 0004        		move.l	#Map_obj2A,4(a0)
00008930 317C 42E8 0002             		move.w	#$42E8,2(a0)
00008936 0028 0004 0001             		ori.b	#4,1(a0)
0000893C 117C 0008 0019             		move.b	#8,$19(a0)
00008942 117C 0004 0018             		move.b	#4,$18(a0)
00008948                            
00008948                            Obj2A_OpenShut:				; XREF: Obj2A_Index
00008948 323C 0040                  		move.w	#$40,d1
0000894C 4228 001C                  		clr.b	$1C(a0)		; use "closing"	animation
00008950 3038 D008                  		move.w	($FFFFD008).w,d0
00008954 D041                       		add.w	d1,d0
00008956 B068 0008                  		cmp.w	8(a0),d0
0000895A 6500                       		bcs.s	Obj2A_Animate
0000895C 9041                       		sub.w	d1,d0
0000895E 9041                       		sub.w	d1,d0
00008960 B068 0008                  		cmp.w	8(a0),d0
00008964 6400                       		bcc.s	Obj2A_Animate
00008966 D041                       		add.w	d1,d0
00008968 B068 0008                  		cmp.w	8(a0),d0
0000896C 6400                       		bcc.s	loc_899A
0000896E 0828 0000 0022             		btst	#0,$22(a0)
00008974 6600                       		bne.s	Obj2A_Animate
00008976 6000                       		bra.s	Obj2A_Open
00008978                            ; ===========================================================================
00008978                            
00008978                            loc_899A:				; XREF: Obj2A_OpenShut
00008978 0828 0000 0022             		btst	#0,$22(a0)
0000897E 6700                       		beq.s	Obj2A_Animate
00008980                            
00008980                            Obj2A_Open:				; XREF: Obj2A_OpenShut
00008980 117C 0001 001C             		move.b	#1,$1C(a0)	; use "opening"	animation
00008986                            
00008986                            Obj2A_Animate:				; XREF: Obj2A_OpenShut; loc_899A
00008986 43F9 0000 0000             		lea	(Ani_obj2A).l,a1
0000898C 6100 0000                  		bsr.w	AnimateSprite
00008990 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00008994 6600                       		bne.s	Obj2A_MarkAsUsed ; if yes, branch
00008996 323C 0011                  		move.w	#$11,d1
0000899A 343C 0020                  		move.w	#$20,d2
0000899E 3602                       		move.w	d2,d3
000089A0 5243                       		addq.w	#1,d3
000089A2 3828 0008                  		move.w	8(a0),d4
000089A6 6100 0000                  		bsr.w	SolidObject
000089AA                            
000089AA                            Obj2A_MarkAsUsed:
000089AA 6000 0000                  		bra.w	MarkObjGone
000089AE                            ; ===========================================================================
000089AE                            Ani_obj2A:
000089AE                            	include "_anim\obj2A.asm"
000089AE                            ; ---------------------------------------------------------------------------
000089AE                            ; Animation script - doors (SBZ)
000089AE                            ; ---------------------------------------------------------------------------
000089AE 0000                       		dc.w Ani_obj2A_Shut-Ani_obj2A
000089B0 0000                       		dc.w Ani_obj2A_Open-Ani_obj2A
000089B2 0008 0706 0504 0302 0100+  Ani_obj2A_Shut:	dc.b 0,	8, 7, 6, 5, 4, 3, 2, 1,	0, $FE,	1
000089BE 0000 0102 0304 0506 0708+  Ani_obj2A_Open:	dc.b 0,	0, 1, 2, 3, 4, 5, 6, 7,	8, $FE,	1
000089CA                            		even
000089CA                            		even
000089CA                            
000089CA                            ; ---------------------------------------------------------------------------
000089CA                            ; Sprite mappings - doors (SBZ)
000089CA                            ; ---------------------------------------------------------------------------
000089CA                            Map_obj2A:
000089CA                            	include "_maps\obj2A.asm"
000089CA                            ; ---------------------------------------------------------------------------
000089CA                            ; Sprite mappings - doors (SBZ)
000089CA                            ; ---------------------------------------------------------------------------
000089CA 0000 0000                  		dc.w byte_89FE-Map_obj2A, byte_8A09-Map_obj2A
000089CE 0000 0000                  		dc.w byte_8A14-Map_obj2A, byte_8A1F-Map_obj2A
000089D2 0000 0000                  		dc.w byte_8A2A-Map_obj2A, byte_8A35-Map_obj2A
000089D6 0000 0000                  		dc.w byte_8A40-Map_obj2A, byte_8A4B-Map_obj2A
000089DA 0000                       		dc.w byte_8A56-Map_obj2A
000089DC 02                         byte_89FE:	dc.b 2
000089DD E007 0800 F8               		dc.b $E0, 7, 8,	0, $F8	; door closed
000089E2 0007 0800 F8               		dc.b 0,	7, 8, 0, $F8
000089E7 02                         byte_8A09:	dc.b 2
000089E8 DC07 0800 F8               		dc.b $DC, 7, 8,	0, $F8
000089ED 0407 0800 F8               		dc.b 4,	7, 8, 0, $F8
000089F2 02                         byte_8A14:	dc.b 2
000089F3 D807 0800 F8               		dc.b $D8, 7, 8,	0, $F8
000089F8 0807 0800 F8               		dc.b 8,	7, 8, 0, $F8
000089FD 02                         byte_8A1F:	dc.b 2
000089FE D407 0800 F8               		dc.b $D4, 7, 8,	0, $F8
00008A03 0C07 0800 F8               		dc.b $C, 7, 8, 0, $F8
00008A08 02                         byte_8A2A:	dc.b 2
00008A09 D007 0800 F8               		dc.b $D0, 7, 8,	0, $F8
00008A0E 1007 0800 F8               		dc.b $10, 7, 8,	0, $F8
00008A13 02                         byte_8A35:	dc.b 2
00008A14 CC07 0800 F8               		dc.b $CC, 7, 8,	0, $F8
00008A19 1407 0800 F8               		dc.b $14, 7, 8,	0, $F8
00008A1E 02                         byte_8A40:	dc.b 2
00008A1F C807 0800 F8               		dc.b $C8, 7, 8,	0, $F8
00008A24 1807 0800 F8               		dc.b $18, 7, 8,	0, $F8
00008A29 02                         byte_8A4B:	dc.b 2
00008A2A C407 0800 F8               		dc.b $C4, 7, 8,	0, $F8
00008A2F 1C07 0800 F8               		dc.b $1C, 7, 8,	0, $F8
00008A34 02                         byte_8A56:	dc.b 2
00008A35 C007 0800 F8               		dc.b $C0, 7, 8,	0, $F8	; door fully open
00008A3A 2007 0800 F8               		dc.b $20, 7, 8,	0, $F8
00008A40 00                         		even
00008A40 00                         		even
00008A40                            
00008A40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008A40                            
00008A40                            
00008A40                            Obj44_SolidWall:			; XREF: Obj44_Solid
00008A40 6100 0000                  		bsr.w	Obj44_SolidWall2
00008A44 6700                       		beq.s	loc_8AA8
00008A46 6B00 0000                  		bmi.w	loc_8AC4
00008A4A 4A40                       		tst.w	d0
00008A4C 6700 0000                  		beq.w	loc_8A92
00008A50 6B00                       		bmi.s	loc_8A7C
00008A52 4A69 0010                  		tst.w	$10(a1)
00008A56 6B00                       		bmi.s	loc_8A92
00008A58 6000                       		bra.s	loc_8A82
00008A5A                            ; ===========================================================================
00008A5A                            
00008A5A                            loc_8A7C:
00008A5A 4A69 0010                  		tst.w	$10(a1)
00008A5E 6A00                       		bpl.s	loc_8A92
00008A60                            
00008A60                            loc_8A82:
00008A60 9169 0008                  		sub.w	d0,8(a1)
00008A64 337C 0000 0014             		move.w	#0,$14(a1)
00008A6A 337C 0000 0010             		move.w	#0,$10(a1)
00008A70                            
00008A70                            loc_8A92:
00008A70 0829 0001 0022             		btst	#1,$22(a1)
00008A76 6600                       		bne.s	loc_8AB6
00008A78 08E9 0005 0022             		bset	#5,$22(a1)
00008A7E 08E8 0005 0022             		bset	#5,$22(a0)
00008A84 4E75                       		rts	
00008A86                            ; ===========================================================================
00008A86                            
00008A86                            loc_8AA8:
00008A86 0828 0005 0022             		btst	#5,$22(a0)
00008A8C 6700                       		beq.s	locret_8AC2
00008A8E 337C 0001 001C             		move.w	#1,$1C(a1)
00008A94                            
00008A94                            loc_8AB6:
00008A94 08A8 0005 0022             		bclr	#5,$22(a0)
00008A9A 08A9 0005 0022             		bclr	#5,$22(a1)
00008AA0                            
00008AA0                            locret_8AC2:
00008AA0 4E75                       		rts	
00008AA2                            ; ===========================================================================
00008AA2                            
00008AA2                            loc_8AC4:
00008AA2 4A69 0012                  		tst.w	$12(a1)
00008AA6 6A00                       		bpl.s	locret_8AD8
00008AA8 4A43                       		tst.w	d3
00008AAA 6A00                       		bpl.s	locret_8AD8
00008AAC 9769 000C                  		sub.w	d3,$C(a1)
00008AB0 337C 0000 0012             		move.w	#0,$12(a1)
00008AB6                            
00008AB6                            locret_8AD8:
00008AB6 4E75                       		rts	
00008AB8                            ; End of function Obj44_SolidWall
00008AB8                            
00008AB8                            
00008AB8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00008AB8                            
00008AB8                            
00008AB8                            Obj44_SolidWall2:			; XREF: Obj44_SolidWall
00008AB8 43F8 D000                  		lea	($FFFFD000).w,a1
00008ABC 3029 0008                  		move.w	8(a1),d0
00008AC0 9068 0008                  		sub.w	8(a0),d0
00008AC4 D041                       		add.w	d1,d0
00008AC6 6B00                       		bmi.s	loc_8B48
00008AC8 3601                       		move.w	d1,d3
00008ACA D643                       		add.w	d3,d3
00008ACC B043                       		cmp.w	d3,d0
00008ACE 6200                       		bhi.s	loc_8B48
00008AD0 1629 0016                  		move.b	$16(a1),d3
00008AD4 4883                       		ext.w	d3
00008AD6 D443                       		add.w	d3,d2
00008AD8 3629 000C                  		move.w	$C(a1),d3
00008ADC 9668 000C                  		sub.w	$C(a0),d3
00008AE0 D642                       		add.w	d2,d3
00008AE2 6B00                       		bmi.s	loc_8B48
00008AE4 3802                       		move.w	d2,d4
00008AE6 D844                       		add.w	d4,d4
00008AE8 B644                       		cmp.w	d4,d3
00008AEA 6400                       		bcc.s	loc_8B48
00008AEC 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00008AF0 6B00                       		bmi.s	loc_8B48
00008AF2 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00008AF8 6400                       		bcc.s	loc_8B48
00008AFA 4A78 FE08                  		tst.w	($FFFFFE08).w
00008AFE 6600                       		bne.s	loc_8B48
00008B00 3A00                       		move.w	d0,d5
00008B02 B240                       		cmp.w	d0,d1
00008B04 6400                       		bcc.s	loc_8B30
00008B06 D241                       		add.w	d1,d1
00008B08 9041                       		sub.w	d1,d0
00008B0A 3A00                       		move.w	d0,d5
00008B0C 4445                       		neg.w	d5
00008B0E                            
00008B0E                            loc_8B30:
00008B0E 3203                       		move.w	d3,d1
00008B10 B443                       		cmp.w	d3,d2
00008B12 6400                       		bcc.s	loc_8B3C
00008B14 9644                       		sub.w	d4,d3
00008B16 3203                       		move.w	d3,d1
00008B18 4441                       		neg.w	d1
00008B1A                            
00008B1A                            loc_8B3C:
00008B1A BA41                       		cmp.w	d1,d5
00008B1C 6200                       		bhi.s	loc_8B44
00008B1E 7801                       		moveq	#1,d4
00008B20 4E75                       		rts	
00008B22                            ; ===========================================================================
00008B22                            
00008B22                            loc_8B44:
00008B22 78FF                       		moveq	#-1,d4
00008B24 4E75                       		rts	
00008B26                            ; ===========================================================================
00008B26                            
00008B26                            loc_8B48:
00008B26 7800                       		moveq	#0,d4
00008B28 4E75                       		rts	
00008B2A                            ; End of function Obj44_SolidWall2
00008B2A                            
00008B2A                            ; ===========================================================================
00008B2A                            ; ---------------------------------------------------------------------------
00008B2A                            ; Object 1E - Ball Hog enemy (SBZ)
00008B2A                            ; ---------------------------------------------------------------------------
00008B2A                            
00008B2A                            Obj1E:					; XREF: Obj_Index
00008B2A 7000                       		moveq	#0,d0
00008B2C 1028 0024                  		move.b	$24(a0),d0
00008B30 323B 0000                  		move.w	Obj1E_Index(pc,d0.w),d1
00008B34 4EFB 1000                  		jmp	Obj1E_Index(pc,d1.w)
00008B38                            ; ===========================================================================
00008B38 0000                       Obj1E_Index:	dc.w Obj1E_Main-Obj1E_Index
00008B3A 0000                       		dc.w Obj1E_Action-Obj1E_Index
00008B3C                            ; ===========================================================================
00008B3C                            
00008B3C                            Obj1E_Main:				; XREF: Obj1E_Index
00008B3C 117C 0013 0016             		move.b	#$13,$16(a0)
00008B42 117C 0008 0017             		move.b	#8,$17(a0)
00008B48 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008B50 317C 2302 0002             		move.w	#$2302,2(a0)
00008B56 117C 0004 0001             		move.b	#4,1(a0)
00008B5C 117C 0004 0018             		move.b	#4,$18(a0)
00008B62 117C 0005 0020             		move.b	#5,$20(a0)
00008B68 117C 000C 0019             		move.b	#$C,$19(a0)
00008B6E 6100 0000                  		bsr.w	ObjectFall
00008B72 4EB9 0000 0000             		jsr	ObjHitFloor
00008B78 4A41                       		tst.w	d1
00008B7A 6A00                       		bpl.s	locret_8BAC
00008B7C D368 000C                  		add.w	d1,$C(a0)
00008B80 317C 0000 0012             		move.w	#0,$12(a0)
00008B86 5428 0024                  		addq.b	#2,$24(a0)
00008B8A                            
00008B8A                            locret_8BAC:
00008B8A 4E75                       		rts	
00008B8C                            ; ===========================================================================
00008B8C                            
00008B8C                            Obj1E_Action:				; XREF: Obj1E_Index
00008B8C 43F9 0000 0000             		lea	(Ani_obj1E).l,a1
00008B92 6100 0000                  		bsr.w	AnimateSprite
00008B96 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is final frame (01) displayed?
00008B9C 6600                       		bne.s	Obj1E_SetBall	; if not, branch
00008B9E 4A28 0032                  		tst.b	$32(a0)		; is it	set to launch cannonball?
00008BA2 6700                       		beq.s	Obj1E_MakeBall	; if yes, branch
00008BA4 6000                       		bra.s	Obj1E_MarkAsGone
00008BA6                            ; ===========================================================================
00008BA6                            
00008BA6                            Obj1E_SetBall:				; XREF: Obj1E_Action
00008BA6 4228 0032                  		clr.b	$32(a0)		; set to launch	cannonball
00008BAA                            
00008BAA                            Obj1E_MarkAsGone:			; XREF: Obj1E_Action
00008BAA 6000 0000                  		bra.w	MarkObjGone
00008BAE                            ; ===========================================================================
00008BAE                            
00008BAE                            Obj1E_MakeBall:				; XREF: Obj1E_Action
00008BAE 117C 0001 0032             		move.b	#1,$32(a0)
00008BB4 6100 0000                  		bsr.w	SingleObjLoad
00008BB8 6600                       		bne.s	loc_8C1A
00008BBA 12BC 0020                  		move.b	#$20,0(a1)	; load cannonball object ($20)
00008BBE 3368 0008 0008             		move.w	8(a0),8(a1)
00008BC4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008BCA 337C FF00 0010             		move.w	#-$100,$10(a1)	; cannonball bounces to	the left
00008BD0 337C 0000 0012             		move.w	#0,$12(a1)
00008BD6 70FC                       		moveq	#-4,d0
00008BD8 0828 0000 0022             		btst	#0,$22(a0)	; is Ball Hog facing right?
00008BDE 6700                       		beq.s	loc_8C0A	; if not, branch
00008BE0 4440                       		neg.w	d0
00008BE2 4469 0010                  		neg.w	$10(a1)		; cannonball bounces to	the right
00008BE6                            
00008BE6                            loc_8C0A:
00008BE6 D169 0008                  		add.w	d0,8(a1)
00008BEA 0669 000C 000C             		addi.w	#$C,$C(a1)
00008BF0 1368 0028 0028             		move.b	$28(a0),$28(a1)	; copy object type from	Ball Hog
00008BF6                            
00008BF6                            loc_8C1A:
00008BF6 60B2                       		bra.s	Obj1E_MarkAsGone
00008BF8                            ; ===========================================================================
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8                            ; Object 20 - cannonball that Ball Hog throws (SBZ)
00008BF8                            ; ---------------------------------------------------------------------------
00008BF8                            
00008BF8                            Obj20:					; XREF: Obj_Index
00008BF8 7000                       		moveq	#0,d0
00008BFA 1028 0024                  		move.b	$24(a0),d0
00008BFE 323B 0000                  		move.w	Obj20_Index(pc,d0.w),d1
00008C02 4EFB 1000                  		jmp	Obj20_Index(pc,d1.w)
00008C06                            ; ===========================================================================
00008C06 0000                       Obj20_Index:	dc.w Obj20_Main-Obj20_Index
00008C08 0000                       		dc.w Obj20_Bounce-Obj20_Index
00008C0A                            ; ===========================================================================
00008C0A                            
00008C0A                            Obj20_Main:				; XREF: Obj20_Index
00008C0A 5428 0024                  		addq.b	#2,$24(a0)
00008C0E 117C 0007 0016             		move.b	#7,$16(a0)
00008C14 217C 0000 0000 0004        		move.l	#Map_obj1E,4(a0)
00008C1C 317C 2302 0002             		move.w	#$2302,2(a0)
00008C22 117C 0004 0001             		move.b	#4,1(a0)
00008C28 117C 0003 0018             		move.b	#3,$18(a0)
00008C2E 117C 0087 0020             		move.b	#$87,$20(a0)
00008C34 117C 0008 0019             		move.b	#8,$19(a0)
00008C3A 7000                       		moveq	#0,d0
00008C3C 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008C40 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 frames	(1 second)
00008C44 3140 0030                  		move.w	d0,$30(a0)	; set explosion	time
00008C48 117C 0004 001A             		move.b	#4,$1A(a0)
00008C4E                            
00008C4E                            Obj20_Bounce:				; XREF: Obj20_Index
00008C4E 4EB9 0000 0000             		jsr	ObjectFall
00008C54 4A68 0012                  		tst.w	$12(a0)
00008C58 6B00                       		bmi.s	Obj20_ChkExplode
00008C5A 4EB9 0000 0000             		jsr	ObjHitFloor
00008C60 4A41                       		tst.w	d1
00008C62 6A00                       		bpl.s	Obj20_ChkExplode
00008C64 D368 000C                  		add.w	d1,$C(a0)
00008C68 317C FD00 0012             		move.w	#-$300,$12(a0)
00008C6E 4A03                       		tst.b	d3
00008C70 6700                       		beq.s	Obj20_ChkExplode
00008C72 6B00                       		bmi.s	loc_8CA4
00008C74 4A68 0010                  		tst.w	$10(a0)
00008C78 6A00                       		bpl.s	Obj20_ChkExplode
00008C7A 4468 0010                  		neg.w	$10(a0)
00008C7E 6000                       		bra.s	Obj20_ChkExplode
00008C80                            ; ===========================================================================
00008C80                            
00008C80                            loc_8CA4:				; XREF: Obj20_Bounce
00008C80 4A68 0010                  		tst.w	$10(a0)
00008C84 6B00                       		bmi.s	Obj20_ChkExplode
00008C86 4468 0010                  		neg.w	$10(a0)
00008C8A                            
00008C8A                            Obj20_ChkExplode:			; XREF: Obj20_Bounce
00008C8A 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from explosion time
00008C8E 6A00                       		bpl.s	Obj20_Animate	; if time is > 0, branch
00008C90 10BC 0024                  		move.b	#$24,0(a0)
00008C94 10BC 003F                  		move.b	#$3F,0(a0)	; change object	to an explosion	($3F)
00008C98 117C 0000 0024             		move.b	#0,$24(a0)	; reset	routine	counter
00008C9E 6000 0000                  		bra.w	Obj3F		; jump to explosion code
00008CA2                            ; ===========================================================================
00008CA2                            
00008CA2                            Obj20_Animate:				; XREF: Obj20_ChkExplode
00008CA2 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008CA6 6A00                       		bpl.s	Obj20_Display
00008CA8 117C 0005 001E             		move.b	#5,$1E(a0)	; set frame duration to	5 frames
00008CAE 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00008CB4                            
00008CB4                            Obj20_Display:
00008CB4 6100 0000                  		bsr.w	DisplaySprite
00008CB8 3038 F72E                  		move.w	($FFFFF72E).w,d0
00008CBC 0640 00E0                  		addi.w	#$E0,d0
00008CC0 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen off	the level?
00008CC4 6500 0000                  		bcs.w	DeleteObject	; if yes, branch
00008CC8 4E75                       		rts	
00008CCA                            ; ===========================================================================
00008CCA                            ; ---------------------------------------------------------------------------
00008CCA                            ; Object 24 - explosion	from a destroyed monitor
00008CCA                            ; ---------------------------------------------------------------------------
00008CCA                            
00008CCA                            Obj24:					; XREF: Obj_Index
00008CCA 7000                       		moveq	#0,d0
00008CCC 1028 0024                  		move.b	$24(a0),d0
00008CD0 323B 0000                  		move.w	Obj24_Index(pc,d0.w),d1
00008CD4 4EFB 1000                  		jmp	Obj24_Index(pc,d1.w)
00008CD8                            ; ===========================================================================
00008CD8 0000                       Obj24_Index:	dc.w Obj24_Main-Obj24_Index
00008CDA 0000                       		dc.w Obj24_Animate-Obj24_Index
00008CDC                            ; ===========================================================================
00008CDC                            
00008CDC                            Obj24_Main:				; XREF: Obj24_Index
00008CDC 5428 0024                  		addq.b	#2,$24(a0)
00008CE0 217C 0000 0000 0004        		move.l	#Map_obj24,4(a0)
00008CE8 317C 041C 0002             		move.w	#$41C,2(a0)
00008CEE 117C 0004 0001             		move.b	#4,1(a0)
00008CF4 117C 0001 0018             		move.b	#1,$18(a0)
00008CFA 117C 0000 0020             		move.b	#0,$20(a0)
00008D00 117C 000C 0019             		move.b	#$C,$19(a0)
00008D06 117C 0009 001E             		move.b	#9,$1E(a0)
00008D0C 117C 0000 001A             		move.b	#0,$1A(a0)
00008D12 303C 00A5                  		move.w	#$A5,d0
00008D16 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play explosion sound
00008D1C                            
00008D1C                            Obj24_Animate:				; XREF: Obj24_Index
00008D1C 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008D20 6A00                       		bpl.s	Obj24_Display
00008D22 117C 0009 001E             		move.b	#9,$1E(a0)	; set frame duration to	9 frames
00008D28 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008D2C 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is the final frame (04) displayed?
00008D32 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008D36                            
00008D36                            Obj24_Display:
00008D36 6000 0000                  		bra.w	DisplaySprite
00008D3A                            ; ===========================================================================
00008D3A                            ; ---------------------------------------------------------------------------
00008D3A                            ; Object 27 - explosion	from a destroyed enemy
00008D3A                            ; ---------------------------------------------------------------------------
00008D3A                            
00008D3A                            Obj27:					; XREF: Obj_Index
00008D3A 7000                       		moveq	#0,d0
00008D3C 1028 0024                  		move.b	$24(a0),d0
00008D40 323B 0000                  		move.w	Obj27_Index(pc,d0.w),d1
00008D44 4EFB 1000                  		jmp	Obj27_Index(pc,d1.w)
00008D48                            ; ===========================================================================
00008D48 0000                       Obj27_Index:	dc.w Obj27_LoadAnimal-Obj27_Index
00008D4A 0000                       		dc.w Obj27_Main-Obj27_Index
00008D4C 0000                       		dc.w Obj27_Animate-Obj27_Index
00008D4E                            ; ===========================================================================
00008D4E                            
00008D4E                            Obj27_LoadAnimal:			; XREF: Obj27_Index
00008D4E 5428 0024                  		addq.b	#2,$24(a0)
00008D52 6100 0000                  		bsr.w	SingleObjLoad
00008D56 6600                       		bne.s	Obj27_Main
00008D58 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
00008D5C 3368 0008 0008             		move.w	8(a0),8(a1)
00008D62 3368 000C 000C             		move.w	$C(a0),$C(a1)
00008D68 3368 003E 003E             		move.w	$3E(a0),$3E(a1)
00008D6E                            
00008D6E                            Obj27_Main:				; XREF: Obj27_Index
00008D6E 5428 0024                  		addq.b	#2,$24(a0)
00008D72 217C 0000 0000 0004        		move.l	#Map_obj27,4(a0)
00008D7A 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008D80 117C 0004 0001             		move.b	#4,1(a0)
00008D86 117C 0001 0018             		move.b	#1,$18(a0)
00008D8C 117C 0000 0020             		move.b	#0,$20(a0)
00008D92 117C 000C 0019             		move.b	#$C,$19(a0)
00008D98 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008D9E 117C 0000 001A             		move.b	#0,$1A(a0)
00008DA4 303C 00C1                  		move.w	#$C1,d0
00008DA8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play breaking enemy sound
00008DAE                            
00008DAE                            Obj27_Animate:				; XREF: Obj27_Index
00008DAE 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
00008DB2 6A00                       		bpl.s	Obj27_Display
00008DB4 117C 0007 001E             		move.b	#7,$1E(a0)	; set frame duration to	7 frames
00008DBA 5228 001A                  		addq.b	#1,$1A(a0)	; next frame
00008DBE 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is the final frame (05) displayed?
00008DC4 6700 0000                  		beq.w	DeleteObject	; if yes, branch
00008DC8                            
00008DC8                            Obj27_Display:
00008DC8 6000 0000                  		bra.w	DisplaySprite
00008DCC                            ; ===========================================================================
00008DCC                            ; ---------------------------------------------------------------------------
00008DCC                            ; Object 3F - explosion	from a destroyed boss, bomb or cannonball
00008DCC                            ; ---------------------------------------------------------------------------
00008DCC                            
00008DCC                            Obj3F:					; XREF: Obj_Index
00008DCC 7000                       		moveq	#0,d0
00008DCE 1028 0024                  		move.b	$24(a0),d0
00008DD2 323B 0000                  		move.w	Obj3F_Index(pc,d0.w),d1
00008DD6 4EFB 1000                  		jmp	Obj3F_Index(pc,d1.w)
00008DDA                            ; ===========================================================================
00008DDA 0000                       Obj3F_Index:	dc.w Obj3F_Main-Obj3F_Index
00008DDC FFD4                       		dc.w Obj27_Animate-Obj3F_Index
00008DDE                            ; ===========================================================================
00008DDE                            
00008DDE                            Obj3F_Main:				; XREF: Obj3F_Index
00008DDE 5428 0024                  		addq.b	#2,$24(a0)
00008DE2 217C 0000 0000 0004        		move.l	#Map_obj3F,4(a0)
00008DEA 317C 05A0 0002             		move.w	#$5A0,2(a0)
00008DF0 117C 0004 0001             		move.b	#4,1(a0)
00008DF6 117C 0001 0018             		move.b	#1,$18(a0)
00008DFC 117C 0000 0020             		move.b	#0,$20(a0)
00008E02 117C 000C 0019             		move.b	#$C,$19(a0)
00008E08 117C 0007 001E             		move.b	#7,$1E(a0)
00008E0E 117C 0000 001A             		move.b	#0,$1A(a0)
00008E14 303C 00C4                  		move.w	#$C4,d0
00008E18 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play exploding bomb sound
00008E1E                            ; ===========================================================================
00008E1E                            Ani_obj1E:
00008E1E                            	include "_anim\obj1E.asm"
00008E1E                            ; ---------------------------------------------------------------------------
00008E1E                            ; Animation script - doors (SBZ)
00008E1E                            ; ---------------------------------------------------------------------------
00008E1E 0000                       		dc.w byte_8E4A-Ani_obj1E
00008E20 0900 0002 0203 0200 0002+  byte_8E4A:	dc.b 9,	0, 0, 2, 2, 3, 2, 0, 0,	2, 2, 3, 2, 0, 0, 2, 2, 3, 2, 0, 0, 1, $FF
00008E38 00                         		even
00008E38 00                         		even
00008E38                            
00008E38                            ; ---------------------------------------------------------------------------
00008E38                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008E38                            ; ---------------------------------------------------------------------------
00008E38                            Map_obj1E:
00008E38                            	include "_maps\obj1E.asm"
00008E38                            ; ---------------------------------------------------------------------------
00008E38                            ; Sprite mappings - Ball Hog enemy (SBZ)
00008E38                            ; ---------------------------------------------------------------------------
00008E38 0000 0000                  		dc.w byte_8E6E-Map_obj1E, byte_8E79-Map_obj1E
00008E3C 0000 0000                  		dc.w byte_8E84-Map_obj1E, byte_8E8F-Map_obj1E
00008E40 0000 0000                  		dc.w byte_8E9A-Map_obj1E, byte_8EA0-Map_obj1E
00008E44 02                         byte_8E6E:	dc.b 2
00008E45 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008E4A FF0A 0006 F4               		dc.b $FF, $A, 0, 6, $F4
00008E4F 02                         byte_8E79:	dc.b 2
00008E50 EF09 0000 F4               		dc.b $EF, 9, 0,	0, $F4
00008E55 FF0A 000F F4               		dc.b $FF, $A, 0, $F, $F4
00008E5A 02                         byte_8E84:	dc.b 2
00008E5B F409 0000 F4               		dc.b $F4, 9, 0,	0, $F4
00008E60 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
00008E65 02                         byte_8E8F:	dc.b 2
00008E66 E409 0000 F4               		dc.b $E4, 9, 0,	0, $F4
00008E6B F40A 001E F4               		dc.b $F4, $A, 0, $1E, $F4
00008E70 01                         byte_8E9A:	dc.b 1
00008E71 F805 0027 F8               		dc.b $F8, 5, 0,	$27, $F8
00008E76 01                         byte_8EA0:	dc.b 1
00008E77 F805 002B F8               		dc.b $F8, 5, 0,	$2B, $F8
00008E7C                            		even
00008E7C                            		even
00008E7C                            
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C                            ; Sprite mappings - explosion
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C                            Map_obj24:
00008E7C                            	include "_maps\obj24.asm"
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C                            ; Sprite mappings - explosion
00008E7C                            ; ---------------------------------------------------------------------------
00008E7C 0000 0000                  		dc.w byte_8EAE-Map_obj24, byte_8EB4-Map_obj24
00008E80 0000 0000                  		dc.w byte_8EBA-Map_obj24, byte_8EC0-Map_obj24
00008E84 01                         byte_8EAE:	dc.b 1
00008E85 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00008E8A 01                         byte_8EB4:	dc.b 1
00008E8B F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
00008E90 01                         byte_8EBA:	dc.b 1
00008E91 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00008E96 01                         byte_8EC0:	dc.b 1
00008E97 F40A 001B F4               		dc.b $F4, $A, 0, $1B, $F4
00008E9C                            		even
00008E9C                            		even
00008E9C                            
00008E9C                            ; ---------------------------------------------------------------------------
00008E9C                            ; Sprite mappings - explosion
00008E9C                            ; ---------------------------------------------------------------------------
00008E9C 0000 0000                  Map_obj27:	dc.w byte_8ED0-Map_obj27, byte_8ED6-Map_obj27
00008EA0 0000 0000                  		dc.w byte_8EDC-Map_obj27, byte_8EE2-Map_obj27
00008EA4 0000                       		dc.w byte_8EF7-Map_obj27
00008EA6 01                         byte_8ED0:	dc.b 1
00008EA7 F809 0000 F4               		dc.b $F8, 9, 0,	0, $F4
00008EAC 01                         byte_8ED6:	dc.b 1
00008EAD F00F 0006 F0               		dc.b $F0, $F, 0, 6, $F0
00008EB2 01                         byte_8EDC:	dc.b 1
00008EB3 F00F 0016 F0               		dc.b $F0, $F, 0, $16, $F0
00008EB8 04                         byte_8EE2:	dc.b 4
00008EB9 EC0A 0026 EC               		dc.b $EC, $A, 0, $26, $EC
00008EBE EC05 002F 04               		dc.b $EC, 5, 0,	$2F, 4
00008EC3 0405 182F EC               		dc.b 4,	5, $18,	$2F, $EC
00008EC8 FC0A 1826 FC               		dc.b $FC, $A, $18, $26,	$FC
00008ECD 04                         byte_8EF7:	dc.b 4
00008ECE EC0A 0033 EC               		dc.b $EC, $A, 0, $33, $EC
00008ED3 EC05 003C 04               		dc.b $EC, 5, 0,	$3C, 4
00008ED8 0405 183C EC               		dc.b 4,	5, $18,	$3C, $EC
00008EDD FC0A 1833 FC               		dc.b $FC, $A, $18, $33,	$FC
00008EE2                            		even
00008EE2                            ; ---------------------------------------------------------------------------
00008EE2                            ; Sprite mappings - explosion from when	a boss is destroyed
00008EE2                            ; ---------------------------------------------------------------------------
00008EE2 FFC4                       Map_obj3F:	dc.w byte_8ED0-Map_obj3F
00008EE4 0000                       		dc.w byte_8F16-Map_obj3F
00008EE6 0000                       		dc.w byte_8F1C-Map_obj3F
00008EE8 FFD6                       		dc.w byte_8EE2-Map_obj3F
00008EEA FFEB                       		dc.w byte_8EF7-Map_obj3F
00008EEC 01                         byte_8F16:	dc.b 1
00008EED F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
00008EF2 01                         byte_8F1C:	dc.b 1
00008EF3 F00F 0050 F0               		dc.b $F0, $F, 0, $50, $F0
00008EF8                            		even
00008EF8                            ; ===========================================================================
00008EF8                            ; ---------------------------------------------------------------------------
00008EF8                            ; Object 28 - animals
00008EF8                            ; ---------------------------------------------------------------------------
00008EF8                            
00008EF8                            Obj28:					; XREF: Obj_Index
00008EF8 7000                       		moveq	#0,d0
00008EFA 1028 0024                  		move.b	$24(a0),d0
00008EFE 323B 0000                  		move.w	Obj28_Index(pc,d0.w),d1
00008F02 4EFB 1000                  		jmp	Obj28_Index(pc,d1.w)
00008F06                            ; ===========================================================================
00008F06 0000 0000                  Obj28_Index:	dc.w Obj28_Ending-Obj28_Index, loc_912A-Obj28_Index
00008F0A 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00008F0E 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9184-Obj28_Index
00008F12 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_91C0-Obj28_Index
00008F16 0000 0000                  		dc.w loc_9184-Obj28_Index, loc_9240-Obj28_Index
00008F1A 0000 0000                  		dc.w loc_9260-Obj28_Index, loc_9260-Obj28_Index
00008F1E 0000 0000                  		dc.w loc_9280-Obj28_Index, loc_92BA-Obj28_Index
00008F22 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00008F26 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9332-Obj28_Index
00008F2A 0000 0000                  		dc.w loc_9314-Obj28_Index, loc_9370-Obj28_Index
00008F2E 0000                       		dc.w loc_92D6-Obj28_Index
00008F30                            
00008F30 0005 0203 0603 0405 0401+  Obj28_VarIndex:	dc.b 0,	5, 2, 3, 6, 3, 4, 5, 4,	1, 0, 1
00008F3C                            
00008F3C FE00 FC00                  Obj28_Variables:dc.w $FE00, $FC00
00008F40 0000 0000                  		dc.l Map_obj28
00008F44 FE00 FD00                  		dc.w $FE00, $FD00	; horizontal speed, vertical speed
00008F48 0000 0000                  		dc.l Map_obj28a		; mappings address
00008F4C FE80 FD00                  		dc.w $FE80, $FD00
00008F50 0000 0000                  		dc.l Map_obj28
00008F54 FEC0 FE80                  		dc.w $FEC0, $FE80
00008F58 0000 0000                  		dc.l Map_obj28a
00008F5C FE40 FD00                  		dc.w $FE40, $FD00
00008F60 0000 0000                  		dc.l Map_obj28b
00008F64 FD00 FC00                  		dc.w $FD00, $FC00
00008F68 0000 0000                  		dc.l Map_obj28a
00008F6C FD80 FC80                  		dc.w $FD80, $FC80
00008F70 0000 0000                  		dc.l Map_obj28b
00008F74                            
00008F74 FBC0 FC00 FBC0 FC00 FBC0+  Obj28_EndSpeed:	dc.w $FBC0, $FC00, $FBC0, $FC00, $FBC0,	$FC00, $FD00, $FC00
00008F84 FD00 FC00 FE80 FD00 FE80+  		dc.w $FD00, $FC00, $FE80, $FD00, $FE80,	$FD00, $FEC0, $FE80
00008F94 FE40 FD00 FE00 FD00 FD80+  		dc.w $FE40, $FD00, $FE00, $FD00, $FD80,	$FC80
00008FA0                            
00008FA0 0000 0000 0000 0000 0000+  Obj28_EndMap:	dc.l Map_obj28a, Map_obj28a, Map_obj28a, Map_obj28, Map_obj28
00008FB4 0000 0000 0000 0000 0000+  		dc.l Map_obj28,	Map_obj28, Map_obj28a, Map_obj28b, Map_obj28a
00008FC8 0000 0000                  		dc.l Map_obj28b
00008FCC                            
00008FCC 05A5 05A5 05A5 0553 0553+  Obj28_EndVram:	dc.w $5A5, $5A5, $5A5, $553, $553, $573, $573, $585, $593
00008FDE 0565 05B3                  		dc.w $565, $5B3
00008FE2                            ; ===========================================================================
00008FE2                            
00008FE2                            Obj28_Ending:				; XREF: Obj28_Index
00008FE2 4A28 0028                  		tst.b	$28(a0)		; did animal come from a destroyed enemy?
00008FE6 6700 0000                  		beq.w	Obj28_FromEnemy	; if yes, branch
00008FEA 7000                       		moveq	#0,d0
00008FEC 1028 0028                  		move.b	$28(a0),d0	; move object type to d0
00008FF0 D040                       		add.w	d0,d0		; multiply d0 by 2
00008FF2 1140 0024                  		move.b	d0,$24(a0)	; move d0 to routine counter
00008FF6 0440 0014                  		subi.w	#$14,d0
00008FFA 317B 00D0 0002             		move.w	Obj28_EndVram(pc,d0.w),2(a0)
00009000 D040                       		add.w	d0,d0
00009002 217B 009C 0004             		move.l	Obj28_EndMap(pc,d0.w),4(a0)
00009008 43FA FF6A                  		lea	Obj28_EndSpeed(pc),a1
0000900C 3171 0000 0032             		move.w	(a1,d0.w),$32(a0) ; load horizontal speed
00009012 3171 0000 0010             		move.w	(a1,d0.w),$10(a0)
00009018 3171 0002 0034             		move.w	2(a1,d0.w),$34(a0) ; load vertical speed
0000901E 3171 0002 0012             		move.w	2(a1,d0.w),$12(a0)
00009024 117C 000C 0016             		move.b	#$C,$16(a0)
0000902A 117C 0004 0001             		move.b	#4,1(a0)
00009030 08E8 0000 0001             		bset	#0,1(a0)
00009036 117C 0006 0018             		move.b	#6,$18(a0)
0000903C 117C 0008 0019             		move.b	#8,$19(a0)
00009042 117C 0007 001E             		move.b	#7,$1E(a0)
00009048 6000 0000                  		bra.w	DisplaySprite
0000904C                            ; ===========================================================================
0000904C                            
0000904C                            Obj28_FromEnemy:			; XREF: Obj28_Ending
0000904C 5428 0024                  		addq.b	#2,$24(a0)
00009050 6100 9962                  		bsr.w	RandomNumber
00009054 0240 0001                  		andi.w	#1,d0
00009058 7200                       		moveq	#0,d1
0000905A 1238 FE10                  		move.b	($FFFFFE10).w,d1
0000905E D241                       		add.w	d1,d1
00009060 D240                       		add.w	d0,d1
00009062 43FA FECC                  		lea	Obj28_VarIndex(pc),a1
00009066 1031 1000                  		move.b	(a1,d1.w),d0
0000906A 1140 0030                  		move.b	d0,$30(a0)
0000906E E748                       		lsl.w	#3,d0
00009070 43FA FECA                  		lea	Obj28_Variables(pc),a1
00009074 D2C0                       		adda.w	d0,a1
00009076 3159 0032                  		move.w	(a1)+,$32(a0)	; load horizontal speed
0000907A 3159 0034                  		move.w	(a1)+,$34(a0)	; load vertical	speed
0000907E 2159 0004                  		move.l	(a1)+,4(a0)	; load mappings
00009082 317C 0580 0002             		move.w	#$580,2(a0)	; VRAM setting for 1st animal
00009088 0828 0000 0030             		btst	#0,$30(a0)	; is 1st animal	used?
0000908E 6700                       		beq.s	loc_90C0	; if yes, branch
00009090 317C 0592 0002             		move.w	#$592,2(a0)	; VRAM setting for 2nd animal
00009096                            
00009096                            loc_90C0:
00009096 117C 000C 0016             		move.b	#$C,$16(a0)
0000909C 117C 0004 0001             		move.b	#4,1(a0)
000090A2 08E8 0000 0001             		bset	#0,1(a0)
000090A8 117C 0006 0018             		move.b	#6,$18(a0)
000090AE 117C 0008 0019             		move.b	#8,$19(a0)
000090B4 117C 0007 001E             		move.b	#7,$1E(a0)
000090BA 117C 0002 001A             		move.b	#2,$1A(a0)
000090C0 317C FC00 0012             		move.w	#-$400,$12(a0)
000090C6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000090CA 6600                       		bne.s	loc_911C
000090CC 6100 0000                  		bsr.w	SingleObjLoad
000090D0 6600                       		bne.s	Obj28_Display
000090D2 12BC 0029                  		move.b	#$29,0(a1)	; load points object
000090D6 3368 0008 0008             		move.w	8(a0),8(a1)
000090DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000090E2 3028 003E                  		move.w	$3E(a0),d0
000090E6 E248                       		lsr.w	#1,d0
000090E8 1340 001A                  		move.b	d0,$1A(a1)
000090EC                            
000090EC                            Obj28_Display:
000090EC 6000 0000                  		bra.w	DisplaySprite
000090F0                            ; ===========================================================================
000090F0                            
000090F0                            loc_911C:
000090F0 117C 0012 0024             		move.b	#$12,$24(a0)
000090F6 4268 0010                  		clr.w	$10(a0)
000090FA 6000 0000                  		bra.w	DisplaySprite
000090FE                            ; ===========================================================================
000090FE                            
000090FE                            loc_912A:				; XREF: Obj28_Index
000090FE 4A28 0001                  		tst.b	1(a0)
00009102 6A00 0000                  		bpl.w	DeleteObject
00009106 6100 0000                  		bsr.w	ObjectFall
0000910A 4A68 0012                  		tst.w	$12(a0)
0000910E 6B00                       		bmi.s	loc_9180
00009110 4EB9 0000 0000             		jsr	ObjHitFloor
00009116 4A41                       		tst.w	d1
00009118 6A00                       		bpl.s	loc_9180
0000911A D368 000C                  		add.w	d1,$C(a0)
0000911E 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009124 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000912A 117C 0001 001A             		move.b	#1,$1A(a0)
00009130 1028 0030                  		move.b	$30(a0),d0
00009134 D000                       		add.b	d0,d0
00009136 5800                       		addq.b	#4,d0
00009138 1140 0024                  		move.b	d0,$24(a0)
0000913C 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00009140 6700                       		beq.s	loc_9180
00009142 0838 0004 FE0F             		btst	#4,($FFFFFE0F).w
00009148 6700                       		beq.s	loc_9180
0000914A 4468 0010                  		neg.w	$10(a0)
0000914E 0868 0000 0001             		bchg	#0,1(a0)
00009154                            
00009154                            loc_9180:
00009154 6000 0000                  		bra.w	DisplaySprite
00009158                            ; ===========================================================================
00009158                            
00009158                            loc_9184:				; XREF: Obj28_Index
00009158 6100 0000                  		bsr.w	ObjectFall
0000915C 117C 0001 001A             		move.b	#1,$1A(a0)
00009162 4A68 0012                  		tst.w	$12(a0)
00009166 6B00                       		bmi.s	loc_91AE
00009168 117C 0000 001A             		move.b	#0,$1A(a0)
0000916E 4EB9 0000 0000             		jsr	ObjHitFloor
00009174 4A41                       		tst.w	d1
00009176 6A00                       		bpl.s	loc_91AE
00009178 D368 000C                  		add.w	d1,$C(a0)
0000917C 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009182                            
00009182                            loc_91AE:
00009182 4A28 0028                  		tst.b	$28(a0)
00009186 6600                       		bne.s	loc_9224
00009188 4A28 0001                  		tst.b	1(a0)
0000918C 6A00 0000                  		bpl.w	DeleteObject
00009190 6000 0000                  		bra.w	DisplaySprite
00009194                            ; ===========================================================================
00009194                            
00009194                            loc_91C0:				; XREF: Obj28_Index
00009194 6100 0000                  		bsr.w	SpeedToPos
00009198 0668 0018 0012             		addi.w	#$18,$12(a0)
0000919E 4A68 0012                  		tst.w	$12(a0)
000091A2 6B00                       		bmi.s	loc_91FC
000091A4 4EB9 0000 0000             		jsr	ObjHitFloor
000091AA 4A41                       		tst.w	d1
000091AC 6A00                       		bpl.s	loc_91FC
000091AE D368 000C                  		add.w	d1,$C(a0)
000091B2 3168 0034 0012             		move.w	$34(a0),$12(a0)
000091B8 4A28 0028                  		tst.b	$28(a0)
000091BC 6700                       		beq.s	loc_91FC
000091BE 0C28 000A 0028             		cmpi.b	#$A,$28(a0)
000091C4 6700                       		beq.s	loc_91FC
000091C6 4468 0010                  		neg.w	$10(a0)
000091CA 0868 0000 0001             		bchg	#0,1(a0)
000091D0                            
000091D0                            loc_91FC:
000091D0 5328 001E                  		subq.b	#1,$1E(a0)
000091D4 6A00                       		bpl.s	loc_9212
000091D6 117C 0001 001E             		move.b	#1,$1E(a0)
000091DC 5228 001A                  		addq.b	#1,$1A(a0)
000091E0 0228 0001 001A             		andi.b	#1,$1A(a0)
000091E6                            
000091E6                            loc_9212:
000091E6 4A28 0028                  		tst.b	$28(a0)
000091EA 6600                       		bne.s	loc_9224
000091EC 4A28 0001                  		tst.b	1(a0)
000091F0 6A00 0000                  		bpl.w	DeleteObject
000091F4 6000 0000                  		bra.w	DisplaySprite
000091F8                            ; ===========================================================================
000091F8                            
000091F8                            loc_9224:				; XREF: Obj28_Index
000091F8 3028 0008                  		move.w	8(a0),d0
000091FC 9078 D008                  		sub.w	($FFFFD008).w,d0
00009200 6500                       		bcs.s	loc_923C
00009202 0440 0180                  		subi.w	#$180,d0
00009206 6A00                       		bpl.s	loc_923C
00009208 4A28 0001                  		tst.b	1(a0)
0000920C 6A00 0000                  		bpl.w	DeleteObject
00009210                            
00009210                            loc_923C:
00009210 6000 0000                  		bra.w	DisplaySprite
00009214                            ; ===========================================================================
00009214                            
00009214                            loc_9240:				; XREF: Obj28_Index
00009214 4A28 0001                  		tst.b	1(a0)
00009218 6A00 0000                  		bpl.w	DeleteObject
0000921C 5368 0036                  		subq.w	#1,$36(a0)
00009220 6600 0000                  		bne.w	loc_925C
00009224 117C 0002 0024             		move.b	#2,$24(a0)
0000922A 117C 0003 0018             		move.b	#3,$18(a0)
00009230                            
00009230                            loc_925C:
00009230 6000 0000                  		bra.w	DisplaySprite
00009234                            ; ===========================================================================
00009234                            
00009234                            loc_9260:				; XREF: Obj28_Index
00009234 6100 0000                  		bsr.w	sub_9404
00009238 6400                       		bcc.s	loc_927C
0000923A 3168 0032 0010             		move.w	$32(a0),$10(a0)
00009240 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009246 117C 000E 0024             		move.b	#$E,$24(a0)
0000924C 6000 FF46                  		bra.w	loc_91C0
00009250                            ; ===========================================================================
00009250                            
00009250                            loc_927C:
00009250 6000 FFA6                  		bra.w	loc_9224
00009254                            ; ===========================================================================
00009254                            
00009254                            loc_9280:				; XREF: Obj28_Index
00009254 6100 0000                  		bsr.w	sub_9404
00009258 6A00                       		bpl.s	loc_92B6
0000925A 4268 0010                  		clr.w	$10(a0)
0000925E 4268 0032                  		clr.w	$32(a0)
00009262 6100 0000                  		bsr.w	SpeedToPos
00009266 0668 0018 0012             		addi.w	#$18,$12(a0)
0000926C 6100 0000                  		bsr.w	loc_93C4
00009270 6100 0000                  		bsr.w	loc_93EC
00009274 5328 001E                  		subq.b	#1,$1E(a0)
00009278 6A00                       		bpl.s	loc_92B6
0000927A 117C 0001 001E             		move.b	#1,$1E(a0)
00009280 5228 001A                  		addq.b	#1,$1A(a0)
00009284 0228 0001 001A             		andi.b	#1,$1A(a0)
0000928A                            
0000928A                            loc_92B6:
0000928A 6000 FF6C                  		bra.w	loc_9224
0000928E                            ; ===========================================================================
0000928E                            
0000928E                            loc_92BA:				; XREF: Obj28_Index
0000928E 6100 0000                  		bsr.w	sub_9404
00009292 6A00                       		bpl.s	loc_9310
00009294 3168 0032 0010             		move.w	$32(a0),$10(a0)
0000929A 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092A0 117C 0004 0024             		move.b	#4,$24(a0)
000092A6 6000 FEB0                  		bra.w	loc_9184
000092AA                            ; ===========================================================================
000092AA                            
000092AA                            loc_92D6:				; XREF: Obj28_Index
000092AA 6100 0000                  		bsr.w	ObjectFall
000092AE 117C 0001 001A             		move.b	#1,$1A(a0)
000092B4 4A68 0012                  		tst.w	$12(a0)
000092B8 6B00                       		bmi.s	loc_9310
000092BA 117C 0000 001A             		move.b	#0,$1A(a0)
000092C0 4EB9 0000 0000             		jsr	ObjHitFloor
000092C6 4A41                       		tst.w	d1
000092C8 6A00                       		bpl.s	loc_9310
000092CA 4628 0029                  		not.b	$29(a0)
000092CE 6600                       		bne.s	loc_9306
000092D0 4468 0010                  		neg.w	$10(a0)
000092D4 0868 0000 0001             		bchg	#0,1(a0)
000092DA                            
000092DA                            loc_9306:
000092DA D368 000C                  		add.w	d1,$C(a0)
000092DE 3168 0034 0012             		move.w	$34(a0),$12(a0)
000092E4                            
000092E4                            loc_9310:
000092E4 6000 FF12                  		bra.w	loc_9224
000092E8                            ; ===========================================================================
000092E8                            
000092E8                            loc_9314:				; XREF: Obj28_Index
000092E8 6100 0000                  		bsr.w	sub_9404
000092EC 6A00                       		bpl.s	loc_932E
000092EE 4268 0010                  		clr.w	$10(a0)
000092F2 4268 0032                  		clr.w	$32(a0)
000092F6 6100 0000                  		bsr.w	ObjectFall
000092FA 6100 0000                  		bsr.w	loc_93C4
000092FE 6100 0000                  		bsr.w	loc_93EC
00009302                            
00009302                            loc_932E:
00009302 6000 FEF4                  		bra.w	loc_9224
00009306                            ; ===========================================================================
00009306                            
00009306                            loc_9332:				; XREF: Obj28_Index
00009306 6100 0000                  		bsr.w	sub_9404
0000930A 6A00                       		bpl.s	loc_936C
0000930C 6100 0000                  		bsr.w	ObjectFall
00009310 117C 0001 001A             		move.b	#1,$1A(a0)
00009316 4A68 0012                  		tst.w	$12(a0)
0000931A 6B00                       		bmi.s	loc_936C
0000931C 117C 0000 001A             		move.b	#0,$1A(a0)
00009322 4EB9 0000 0000             		jsr	ObjHitFloor
00009328 4A41                       		tst.w	d1
0000932A 6A00                       		bpl.s	loc_936C
0000932C 4468 0010                  		neg.w	$10(a0)
00009330 0868 0000 0001             		bchg	#0,1(a0)
00009336 D368 000C                  		add.w	d1,$C(a0)
0000933A 3168 0034 0012             		move.w	$34(a0),$12(a0)
00009340                            
00009340                            loc_936C:
00009340 6000 FEB6                  		bra.w	loc_9224
00009344                            ; ===========================================================================
00009344                            
00009344                            loc_9370:				; XREF: Obj28_Index
00009344 6100 0000                  		bsr.w	sub_9404
00009348 6A00                       		bpl.s	loc_93C0
0000934A 6100 0000                  		bsr.w	SpeedToPos
0000934E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009354 4A68 0012                  		tst.w	$12(a0)
00009358 6B00                       		bmi.s	loc_93AA
0000935A 4EB9 0000 0000             		jsr	ObjHitFloor
00009360 4A41                       		tst.w	d1
00009362 6A00                       		bpl.s	loc_93AA
00009364 4628 0029                  		not.b	$29(a0)
00009368 6600                       		bne.s	loc_93A0
0000936A 4468 0010                  		neg.w	$10(a0)
0000936E 0868 0000 0001             		bchg	#0,1(a0)
00009374                            
00009374                            loc_93A0:
00009374 D368 000C                  		add.w	d1,$C(a0)
00009378 3168 0034 0012             		move.w	$34(a0),$12(a0)
0000937E                            
0000937E                            loc_93AA:
0000937E 5328 001E                  		subq.b	#1,$1E(a0)
00009382 6A00                       		bpl.s	loc_93C0
00009384 117C 0001 001E             		move.b	#1,$1E(a0)
0000938A 5228 001A                  		addq.b	#1,$1A(a0)
0000938E 0228 0001 001A             		andi.b	#1,$1A(a0)
00009394                            
00009394                            loc_93C0:
00009394 6000 FE62                  		bra.w	loc_9224
00009398                            ; ===========================================================================
00009398                            
00009398                            loc_93C4:
00009398 117C 0001 001A             		move.b	#1,$1A(a0)
0000939E 4A68 0012                  		tst.w	$12(a0)
000093A2 6B00                       		bmi.s	locret_93EA
000093A4 117C 0000 001A             		move.b	#0,$1A(a0)
000093AA 4EB9 0000 0000             		jsr	ObjHitFloor
000093B0 4A41                       		tst.w	d1
000093B2 6A00                       		bpl.s	locret_93EA
000093B4 D368 000C                  		add.w	d1,$C(a0)
000093B8 3168 0034 0012             		move.w	$34(a0),$12(a0)
000093BE                            
000093BE                            locret_93EA:
000093BE 4E75                       		rts	
000093C0                            ; ===========================================================================
000093C0                            
000093C0                            loc_93EC:
000093C0 08E8 0000 0001             		bset	#0,1(a0)
000093C6 3028 0008                  		move.w	8(a0),d0
000093CA 9078 D008                  		sub.w	($FFFFD008).w,d0
000093CE 6400                       		bcc.s	locret_9402
000093D0 08A8 0000 0001             		bclr	#0,1(a0)
000093D6                            
000093D6                            locret_9402:
000093D6 4E75                       		rts	
000093D8                            
000093D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000093D8                            
000093D8                            
000093D8                            sub_9404:
000093D8 3038 D008                  		move.w	($FFFFD008).w,d0
000093DC 9068 0008                  		sub.w	8(a0),d0
000093E0 0440 00B8                  		subi.w	#$B8,d0
000093E4 4E75                       		rts	
000093E6                            ; End of function sub_9404
000093E6                            
000093E6                            ; ===========================================================================
000093E6                            ; ---------------------------------------------------------------------------
000093E6                            ; Object 29 - points that appear when you destroy something
000093E6                            ; ---------------------------------------------------------------------------
000093E6                            
000093E6                            Obj29:					; XREF: Obj_Index
000093E6 7000                       		moveq	#0,d0
000093E8 1028 0024                  		move.b	$24(a0),d0
000093EC 323B 0000                  		move.w	Obj29_Index(pc,d0.w),d1
000093F0 4EBB 1000                  		jsr	Obj29_Index(pc,d1.w)
000093F4 6000 0000                  		bra.w	DisplaySprite
000093F8                            ; ===========================================================================
000093F8 0000                       Obj29_Index:	dc.w Obj29_Main-Obj29_Index
000093FA 0000                       		dc.w Obj29_Slower-Obj29_Index
000093FC                            ; ===========================================================================
000093FC                            
000093FC                            Obj29_Main:				; XREF: Obj29_Index
000093FC 5428 0024                  		addq.b	#2,$24(a0)
00009400 217C 0000 0000 0004        		move.l	#Map_obj29,4(a0)
00009408 317C 2797 0002             		move.w	#$2797,2(a0)
0000940E 117C 0004 0001             		move.b	#4,1(a0)
00009414 117C 0001 0018             		move.b	#1,$18(a0)
0000941A 117C 0008 0019             		move.b	#8,$19(a0)
00009420 317C FD00 0012             		move.w	#-$300,$12(a0)	; move object upwards
00009426                            
00009426                            Obj29_Slower:				; XREF: Obj29_Index
00009426 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000942A 6A00 0000                  		bpl.w	DeleteObject	; if not, branch
0000942E 6100 0000                  		bsr.w	SpeedToPos
00009432 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
00009438 4E75                       		rts	
0000943A                            ; ===========================================================================
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            ; Sprite mappings - animals
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            Map_obj28:
0000943A                            	include "_maps\obj28.asm"
0000943A                            ; ---------------------------------------------------------------------------
0000943A                            ; Sprite mappings - animals
0000943A                            ; ---------------------------------------------------------------------------
0000943A 0000                       		dc.w byte_9472-Map_obj28
0000943C 0000                       		dc.w byte_9478-Map_obj28
0000943E 0000                       		dc.w byte_946C-Map_obj28
00009440 01                         byte_946C:	dc.b 1
00009441 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009446 01                         byte_9472:	dc.b 1
00009447 F406 0006 F8               		dc.b $F4, 6, 0,	6, $F8
0000944C 01                         byte_9478:	dc.b 1
0000944D F406 000C F8               		dc.b $F4, 6, 0,	$C, $F8
00009452                            		even
00009452                            		even
00009452                            
00009452                            Map_obj28a:
00009452                            	include "_maps\obj28a.asm"
00009452                            ; ---------------------------------------------------------------------------
00009452                            ; Sprite mappings - animals
00009452                            ; ---------------------------------------------------------------------------
00009452 0000                       		dc.w byte_948A-Map_obj28a
00009454 0000                       		dc.w byte_9490-Map_obj28a
00009456 0000                       		dc.w byte_9484-Map_obj28a
00009458 01                         byte_9484:	dc.b 1
00009459 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
0000945E 01                         byte_948A:	dc.b 1
0000945F FC05 0006 F8               		dc.b $FC, 5, 0,	6, $F8
00009464 01                         byte_9490:	dc.b 1
00009465 FC05 000A F8               		dc.b $FC, 5, 0,	$A, $F8
0000946A                            		even
0000946A                            		even
0000946A                            
0000946A                            Map_obj28b:
0000946A                            	include "_maps\obj28b.asm"
0000946A                            ; ---------------------------------------------------------------------------
0000946A                            ; Sprite mappings - animals
0000946A                            ; ---------------------------------------------------------------------------
0000946A 0000                       		dc.w byte_94A2-Map_obj28b
0000946C 0000                       		dc.w byte_94A8-Map_obj28b
0000946E 0000                       		dc.w byte_949C-Map_obj28b
00009470 01                         byte_949C:	dc.b 1
00009471 F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
00009476 01                         byte_94A2:	dc.b 1
00009477 FC09 0006 F4               		dc.b $FC, 9, 0,	6, $F4
0000947C 01                         byte_94A8:	dc.b 1
0000947D FC09 000C F4               		dc.b $FC, 9, 0,	$C, $F4
00009482                            		even
00009482                            		even
00009482                            
00009482                            ; ---------------------------------------------------------------------------
00009482                            ; Sprite mappings - points that	appear when you	destroy	something
00009482                            ; ---------------------------------------------------------------------------
00009482                            Map_obj29:
00009482                            	include "_maps\obj29.asm"
00009482                            ; ---------------------------------------------------------------------------
00009482                            ; Sprite mappings - points that	appear when you	destroy	something
00009482                            ; ---------------------------------------------------------------------------
00009482 0000 0000                  		dc.w byte_94BC-Map_obj29, byte_94C2-Map_obj29
00009486 0000 0000                  		dc.w byte_94C8-Map_obj29, byte_94CE-Map_obj29
0000948A 0000 0000                  		dc.w byte_94D4-Map_obj29, byte_94DA-Map_obj29
0000948E 0000                       		dc.w byte_94E5-Map_obj29
00009490 01                         byte_94BC:	dc.b 1
00009491 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8	; 100 points
00009496 01                         byte_94C2:	dc.b 1
00009497 FC04 0002 F8               		dc.b $FC, 4, 0,	2, $F8	; 200 points
0000949C 01                         byte_94C8:	dc.b 1
0000949D FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8	; 500 points
000094A2 01                         byte_94CE:	dc.b 1
000094A3 FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8	; 1000 points
000094A8 01                         byte_94D4:	dc.b 1
000094A9 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC	; 10 points
000094AE 02                         byte_94DA:	dc.b 2
000094AF FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 10,000 points
000094B4 FC04 0007 01               		dc.b $FC, 4, 0,	7, 1
000094B9 02                         byte_94E5:	dc.b 2
000094BA FC08 0006 F4               		dc.b $FC, 8, 0,	6, $F4	; 100,000 points
000094BF FC04 0007 06               		dc.b $FC, 4, 0,	7, 6
000094C4                            		even
000094C4                            		even
000094C4                            
000094C4                            ; ===========================================================================
000094C4                            ; ---------------------------------------------------------------------------
000094C4                            ; Object 1F - Crabmeat enemy (GHZ, SYZ)
000094C4                            ; ---------------------------------------------------------------------------
000094C4                            
000094C4                            Obj1F:					; XREF: Obj_Index
000094C4 7000                       		moveq	#0,d0
000094C6 1028 0024                  		move.b	$24(a0),d0
000094CA 323B 0000                  		move.w	Obj1F_Index(pc,d0.w),d1
000094CE 4EFB 1000                  		jmp	Obj1F_Index(pc,d1.w)
000094D2                            ; ===========================================================================
000094D2 0000                       Obj1F_Index:	dc.w Obj1F_Main-Obj1F_Index
000094D4 0000                       		dc.w Obj1F_Action-Obj1F_Index
000094D6 0000                       		dc.w Obj1F_Delete-Obj1F_Index
000094D8 0000                       		dc.w Obj1F_BallMain-Obj1F_Index
000094DA 0000                       		dc.w Obj1F_BallMove-Obj1F_Index
000094DC                            ; ===========================================================================
000094DC                            
000094DC                            Obj1F_Main:				; XREF: Obj1F_Index
000094DC 117C 0010 0016             		move.b	#$10,$16(a0)
000094E2 117C 0008 0017             		move.b	#8,$17(a0)
000094E8 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
000094F0 317C 0400 0002             		move.w	#$400,2(a0)
000094F6 117C 0004 0001             		move.b	#4,1(a0)
000094FC 117C 0003 0018             		move.b	#3,$18(a0)
00009502 117C 0006 0020             		move.b	#6,$20(a0)
00009508 117C 0015 0019             		move.b	#$15,$19(a0)
0000950E 6100 0000                  		bsr.w	ObjectFall
00009512 4EB9 0000 0000             		jsr	ObjHitFloor
00009518 4A41                       		tst.w	d1
0000951A 6A00                       		bpl.s	locret_955A
0000951C D368 000C                  		add.w	d1,$C(a0)
00009520 1143 0026                  		move.b	d3,$26(a0)
00009524 317C 0000 0012             		move.w	#0,$12(a0)
0000952A 5428 0024                  		addq.b	#2,$24(a0)
0000952E                            
0000952E                            locret_955A:
0000952E 4E75                       		rts	
00009530                            ; ===========================================================================
00009530                            
00009530                            Obj1F_Action:				; XREF: Obj1F_Index
00009530 7000                       		moveq	#0,d0
00009532 1028 0025                  		move.b	$25(a0),d0
00009536 323B 0000                  		move.w	Obj1F_Index2(pc,d0.w),d1
0000953A 4EBB 1000                  		jsr	Obj1F_Index2(pc,d1.w)
0000953E 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
00009544 6100 0000                  		bsr.w	AnimateSprite
00009548 6000 0000                  		bra.w	MarkObjGone
0000954C                            ; ===========================================================================
0000954C 0000                       Obj1F_Index2:	dc.w Obj1F_WaitFire-Obj1F_Index2
0000954E 0000                       		dc.w Obj1F_WalkOnFloor-Obj1F_Index2
00009550                            ; ===========================================================================
00009550                            
00009550                            Obj1F_WaitFire:				; XREF: Obj1F_Index2
00009550 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00009554 6A00                       		bpl.s	locret_95B6
00009556 4A28 0001                  		tst.b	1(a0)
0000955A 6A00                       		bpl.s	Obj1F_Move
0000955C 0868 0001 0032             		bchg	#1,$32(a0)
00009562 6600                       		bne.s	Obj1F_MakeFire
00009564                            
00009564                            Obj1F_Move:
00009564 5428 0025                  		addq.b	#2,$25(a0)
00009568 317C 007F 0030             		move.w	#127,$30(a0)	; set time delay to approx 2 seconds
0000956E 317C 0080 0010             		move.w	#$80,$10(a0)	; move Crabmeat	to the right
00009574 6100 0000                  		bsr.w	Obj1F_SetAni
00009578 5600                       		addq.b	#3,d0
0000957A 1140 001C                  		move.b	d0,$1C(a0)
0000957E 0868 0000 0022             		bchg	#0,$22(a0)
00009584 6600                       		bne.s	locret_95B6
00009586 4468 0010                  		neg.w	$10(a0)		; change direction
0000958A                            
0000958A                            locret_95B6:
0000958A 4E75                       		rts	
0000958C                            ; ===========================================================================
0000958C                            
0000958C                            Obj1F_MakeFire:				; XREF: Obj1F_WaitFire
0000958C 317C 003B 0030             		move.w	#$3B,$30(a0)
00009592 117C 0006 001C             		move.b	#6,$1C(a0)	; use firing animation
00009598 6100 0000                  		bsr.w	SingleObjLoad
0000959C 6600                       		bne.s	Obj1F_MakeFire2
0000959E 12BC 001F                  		move.b	#$1F,0(a1)	; load left fireball
000095A2 137C 0006 0024             		move.b	#6,$24(a1)
000095A8 3368 0008 0008             		move.w	8(a0),8(a1)
000095AE 0469 0010 0008             		subi.w	#$10,8(a1)
000095B4 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095BA 337C FF00 0010             		move.w	#-$100,$10(a1)
000095C0                            
000095C0                            Obj1F_MakeFire2:
000095C0 6100 0000                  		bsr.w	SingleObjLoad
000095C4 6600                       		bne.s	locret_9618
000095C6 12BC 001F                  		move.b	#$1F,0(a1)	; load right fireball
000095CA 137C 0006 0024             		move.b	#6,$24(a1)
000095D0 3368 0008 0008             		move.w	8(a0),8(a1)
000095D6 0669 0010 0008             		addi.w	#$10,8(a1)
000095DC 3368 000C 000C             		move.w	$C(a0),$C(a1)
000095E2 337C 0100 0010             		move.w	#$100,$10(a1)
000095E8                            
000095E8                            locret_9618:
000095E8 4E75                       		rts	
000095EA                            ; ===========================================================================
000095EA                            
000095EA                            Obj1F_WalkOnFloor:			; XREF: Obj1F_Index2
000095EA 5368 0030                  		subq.w	#1,$30(a0)
000095EE 6B00                       		bmi.s	loc_966E
000095F0 6100 0000                  		bsr.w	SpeedToPos
000095F4 0868 0000 0032             		bchg	#0,$32(a0)
000095FA 6600                       		bne.s	loc_9654
000095FC 3628 0008                  		move.w	8(a0),d3
00009600 0643 0010                  		addi.w	#$10,d3
00009604 0828 0000 0022             		btst	#0,$22(a0)
0000960A 6700                       		beq.s	loc_9640
0000960C 0443 0020                  		subi.w	#$20,d3
00009610                            
00009610                            loc_9640:
00009610 4EB9 0000 0000             		jsr	ObjHitFloor2
00009616 0C41 FFF8                  		cmpi.w	#-8,d1
0000961A 6D00                       		blt.s	loc_966E
0000961C 0C41 000C                  		cmpi.w	#$C,d1
00009620 6C00                       		bge.s	loc_966E
00009622 4E75                       		rts	
00009624                            ; ===========================================================================
00009624                            
00009624                            loc_9654:				; XREF: Obj1F_WalkOnFloor
00009624 4EB9 0000 0000             		jsr	ObjHitFloor
0000962A D368 000C                  		add.w	d1,$C(a0)
0000962E 1143 0026                  		move.b	d3,$26(a0)
00009632 6100 0000                  		bsr.w	Obj1F_SetAni
00009636 5600                       		addq.b	#3,d0
00009638 1140 001C                  		move.b	d0,$1C(a0)
0000963C 4E75                       		rts	
0000963E                            ; ===========================================================================
0000963E                            
0000963E                            loc_966E:				; XREF: Obj1F_WalkOnFloor
0000963E 5528 0025                  		subq.b	#2,$25(a0)
00009642 317C 003B 0030             		move.w	#59,$30(a0)
00009648 317C 0000 0010             		move.w	#0,$10(a0)
0000964E 6100 0000                  		bsr.w	Obj1F_SetAni
00009652 1140 001C                  		move.b	d0,$1C(a0)
00009656 4E75                       		rts	
00009658                            ; ---------------------------------------------------------------------------
00009658                            ; Subroutine to	set the	correct	animation for a	Crabmeat
00009658                            ; ---------------------------------------------------------------------------
00009658                            
00009658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009658                            
00009658                            
00009658                            Obj1F_SetAni:				; XREF: loc_966E
00009658 7000                       		moveq	#0,d0
0000965A 1628 0026                  		move.b	$26(a0),d3
0000965E 6B00                       		bmi.s	loc_96A4
00009660 0C03 0006                  		cmpi.b	#6,d3
00009664 6500                       		bcs.s	locret_96A2
00009666 7001                       		moveq	#1,d0
00009668 0828 0000 0022             		btst	#0,$22(a0)
0000966E 6600                       		bne.s	locret_96A2
00009670 7002                       		moveq	#2,d0
00009672                            
00009672                            locret_96A2:
00009672 4E75                       		rts	
00009674                            ; ===========================================================================
00009674                            
00009674                            loc_96A4:				; XREF: Obj1F_SetAni
00009674 0C03 00FA                  		cmpi.b	#-6,d3
00009678 6200                       		bhi.s	locret_96B6
0000967A 7002                       		moveq	#2,d0
0000967C 0828 0000 0022             		btst	#0,$22(a0)
00009682 6600                       		bne.s	locret_96B6
00009684 7001                       		moveq	#1,d0
00009686                            
00009686                            locret_96B6:
00009686 4E75                       		rts	
00009688                            ; End of function Obj1F_SetAni
00009688                            
00009688                            ; ===========================================================================
00009688                            
00009688                            Obj1F_Delete:				; XREF: Obj1F_Index
00009688 6100 0000                  		bsr.w	DeleteObject
0000968C 4E75                       		rts	
0000968E                            ; ===========================================================================
0000968E                            ; ---------------------------------------------------------------------------
0000968E                            ; Sub-object - missile that the	Crabmeat throws
0000968E                            ; ---------------------------------------------------------------------------
0000968E                            
0000968E                            Obj1F_BallMain:				; XREF: Obj1F_Index
0000968E 5428 0024                  		addq.b	#2,$24(a0)
00009692 217C 0000 0000 0004        		move.l	#Map_obj1F,4(a0)
0000969A 317C 0400 0002             		move.w	#$400,2(a0)
000096A0 117C 0004 0001             		move.b	#4,1(a0)
000096A6 117C 0003 0018             		move.b	#3,$18(a0)
000096AC 117C 0087 0020             		move.b	#$87,$20(a0)
000096B2 117C 0008 0019             		move.b	#8,$19(a0)
000096B8 317C FC00 0012             		move.w	#-$400,$12(a0)
000096BE 117C 0007 001C             		move.b	#7,$1C(a0)
000096C4                            
000096C4                            Obj1F_BallMove:				; XREF: Obj1F_Index
000096C4 43F9 0000 0000             		lea	(Ani_obj1F).l,a1
000096CA 6100 0000                  		bsr.w	AnimateSprite
000096CE 6100 0000                  		bsr.w	ObjectFall
000096D2 6100 0000                  		bsr.w	DisplaySprite
000096D6 3038 F72E                  		move.w	($FFFFF72E).w,d0
000096DA 0640 00E0                  		addi.w	#$E0,d0
000096DE B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000096E2 6500                       		bcs.s	Obj1F_Delete2	; if yes, branch
000096E4 4E75                       		rts	
000096E6                            ; ===========================================================================
000096E6                            
000096E6                            Obj1F_Delete2:
000096E6 6000 0000                  		bra.w	DeleteObject
000096EA                            ; ===========================================================================
000096EA                            Ani_obj1F:
000096EA                            	include "_anim\obj1F.asm"
000096EA                            ; ---------------------------------------------------------------------------
000096EA                            ; Animation script - Crabmeat enemy
000096EA                            ; ---------------------------------------------------------------------------
000096EA 0000 0000 0000             		dc.w byte_972A-Ani_obj1F, byte_972E-Ani_obj1F, byte_9732-Ani_obj1F
000096F0 0000 0000 0000             		dc.w byte_9736-Ani_obj1F, byte_973C-Ani_obj1F, byte_9742-Ani_obj1F
000096F6 0000 0000                  		dc.w byte_9748-Ani_obj1F, byte_974C-Ani_obj1F
000096FA 0F00 FF00                  byte_972A:	dc.b $F, 0, $FF, 0
000096FE 0F02 FF00                  byte_972E:	dc.b $F, 2, $FF, 0
00009702 0F22 FF00                  byte_9732:	dc.b $F, $22, $FF, 0
00009706 0F01 2100 FF00             byte_9736:	dc.b $F, 1, $21, 0, $FF, 0
0000970C 0F21 0302 FF00             byte_973C:	dc.b $F, $21, 3, 2, $FF, 0
00009712 0F01 2322 FF00             byte_9742:	dc.b $F, 1, $23, $22, $FF, 0
00009718 0F04 FF00                  byte_9748:	dc.b $F, 4, $FF, 0
0000971C 0105 06FF                  byte_974C:	dc.b 1,	5, 6, $FF
00009720                            		even
00009720                            		even
00009720                            
00009720                            ; ---------------------------------------------------------------------------
00009720                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009720                            ; ---------------------------------------------------------------------------
00009720                            Map_obj1F:
00009720                            	include "_maps\obj1F.asm"
00009720                            ; ---------------------------------------------------------------------------
00009720                            ; Sprite mappings - Crabmeat enemy (GHZ, SYZ)
00009720                            ; ---------------------------------------------------------------------------
00009720 0000 0000                  		dc.w byte_975E-Map_obj1F, byte_9773-Map_obj1F
00009724 0000 0000                  		dc.w byte_9788-Map_obj1F, byte_979D-Map_obj1F
00009728 0000 0000                  		dc.w byte_97B2-Map_obj1F, byte_97D1-Map_obj1F
0000972C 0000                       		dc.w byte_97D7-Map_obj1F
0000972E 04                         byte_975E:	dc.b 4
0000972F F009 0000 E8               		dc.b $F0, 9, 0,	0, $E8
00009734 F009 0800 00               		dc.b $F0, 9, 8,	0, 0
00009739 0005 0006 F0               		dc.b 0,	5, 0, 6, $F0
0000973E 0005 0806 00               		dc.b 0,	5, 8, 6, 0
00009743 04                         byte_9773:	dc.b 4
00009744 F009 000A E8               		dc.b $F0, 9, 0,	$A, $E8
00009749 F009 0010 00               		dc.b $F0, 9, 0,	$10, 0
0000974E 0005 0016 F0               		dc.b 0,	5, 0, $16, $F0
00009753 0009 001A 00               		dc.b 0,	9, 0, $1A, 0
00009758 04                         byte_9788:	dc.b 4
00009759 EC09 0000 E8               		dc.b $EC, 9, 0,	0, $E8
0000975E EC09 0800 00               		dc.b $EC, 9, 8,	0, 0
00009763 FC05 0806 00               		dc.b $FC, 5, 8,	6, 0
00009768 FC06 0020 F0               		dc.b $FC, 6, 0,	$20, $F0
0000976D 04                         byte_979D:	dc.b 4
0000976E EC09 000A E8               		dc.b $EC, 9, 0,	$A, $E8
00009773 EC09 0010 00               		dc.b $EC, 9, 0,	$10, 0
00009778 FC09 0026 00               		dc.b $FC, 9, 0,	$26, 0
0000977D FC06 002C F0               		dc.b $FC, 6, 0,	$2C, $F0
00009782 06                         byte_97B2:	dc.b 6
00009783 F004 0032 F0               		dc.b $F0, 4, 0,	$32, $F0
00009788 F004 0832 00               		dc.b $F0, 4, 8,	$32, 0
0000978D F809 0034 E8               		dc.b $F8, 9, 0,	$34, $E8
00009792 F809 0834 00               		dc.b $F8, 9, 8,	$34, 0
00009797 0804 003A F0               		dc.b 8,	4, 0, $3A, $F0
0000979C 0804 083A 00               		dc.b 8,	4, 8, $3A, 0
000097A1 01                         byte_97D1:	dc.b 1
000097A2 F805 003C F8               		dc.b $F8, 5, 0,	$3C, $F8
000097A7 01                         byte_97D7:	dc.b 1
000097A8 F805 0040 F8               		dc.b $F8, 5, 0,	$40, $F8
000097AE 00                         		even
000097AE 00                         		even
000097AE                            
000097AE                            ; ===========================================================================
000097AE                            ; ---------------------------------------------------------------------------
000097AE                            ; Object 22 - Buzz Bomber enemy	(GHZ, MZ, SYZ)
000097AE                            ; ---------------------------------------------------------------------------
000097AE                            
000097AE                            Obj22:					; XREF: Obj_Index
000097AE 7000                       		moveq	#0,d0
000097B0 1028 0024                  		move.b	$24(a0),d0
000097B4 323B 0000                  		move.w	Obj22_Index(pc,d0.w),d1
000097B8 4EFB 1000                  		jmp	Obj22_Index(pc,d1.w)
000097BC                            ; ===========================================================================
000097BC 0000                       Obj22_Index:	dc.w Obj22_Main-Obj22_Index
000097BE 0000                       		dc.w Obj22_Action-Obj22_Index
000097C0 0000                       		dc.w Obj22_Delete-Obj22_Index
000097C2                            ; ===========================================================================
000097C2                            
000097C2                            Obj22_Main:				; XREF: Obj22_Index
000097C2 5428 0024                  		addq.b	#2,$24(a0)
000097C6 217C 0000 0000 0004        		move.l	#Map_obj22,4(a0)
000097CE 317C 0444 0002             		move.w	#$444,2(a0)
000097D4 117C 0004 0001             		move.b	#4,1(a0)
000097DA 117C 0003 0018             		move.b	#3,$18(a0)
000097E0 117C 0008 0020             		move.b	#8,$20(a0)
000097E6 117C 0018 0019             		move.b	#$18,$19(a0)
000097EC                            
000097EC                            Obj22_Action:				; XREF: Obj22_Index
000097EC 7000                       		moveq	#0,d0
000097EE 1028 0025                  		move.b	$25(a0),d0
000097F2 323B 0000                  		move.w	Obj22_Index2(pc,d0.w),d1
000097F6 4EBB 1000                  		jsr	Obj22_Index2(pc,d1.w)
000097FA 43F9 0000 0000             		lea	(Ani_obj22).l,a1
00009800 6100 0000                  		bsr.w	AnimateSprite
00009804 6000 0000                  		bra.w	MarkObjGone
00009808                            ; ===========================================================================
00009808 0000                       Obj22_Index2:	dc.w Obj22_Move-Obj22_Index2
0000980A 0000                       		dc.w Obj22_ChkNrSonic-Obj22_Index2
0000980C                            ; ===========================================================================
0000980C                            
0000980C                            Obj22_Move:				; XREF: Obj22_Index2
0000980C 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
00009810 6A00                       		bpl.s	locret_986C	; if time remains, branch
00009812 0828 0001 0034             		btst	#1,$34(a0)	; is Buzz Bomber near Sonic?
00009818 6600                       		bne.s	Obj22_Fire	; if yes, branch
0000981A 5428 0025                  		addq.b	#2,$25(a0)
0000981E 317C 007F 0032             		move.w	#127,$32(a0)	; set time delay to just over 2	seconds
00009824 317C 0400 0010             		move.w	#$400,$10(a0)	; move Buzz Bomber to the right
0000982A 117C 0001 001C             		move.b	#1,$1C(a0)	; use "flying" animation
00009830 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009836 6600                       		bne.s	locret_986C	; if not, branch
00009838 4468 0010                  		neg.w	$10(a0)		; move Buzz Bomber to the left
0000983C                            
0000983C                            locret_986C:
0000983C 4E75                       		rts	
0000983E                            ; ===========================================================================
0000983E                            
0000983E                            Obj22_Fire:				; XREF: Obj22_Move
0000983E 6100 0000                  		bsr.w	SingleObjLoad
00009842 6600                       		bne.s	locret_98D0
00009844 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
00009848 3368 0008 0008             		move.w	8(a0),8(a1)
0000984E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009854 0669 001C 000C             		addi.w	#$1C,$C(a1)
0000985A 337C 0200 0012             		move.w	#$200,$12(a1)	; move missile downwards
00009860 337C 0200 0010             		move.w	#$200,$10(a1)	; move missile to the right
00009866 303C 0018                  		move.w	#$18,d0
0000986A 0828 0000 0022             		btst	#0,$22(a0)	; is Buzz Bomber facing	left?
00009870 6600                       		bne.s	loc_98AA	; if not, branch
00009872 4440                       		neg.w	d0
00009874 4469 0010                  		neg.w	$10(a1)		; move missile to the left
00009878                            
00009878                            loc_98AA:
00009878 D169 0008                  		add.w	d0,8(a1)
0000987C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00009882 337C 000E 0032             		move.w	#$E,$32(a1)
00009888 2348 003C                  		move.l	a0,$3C(a1)
0000988C 117C 0001 0034             		move.b	#1,$34(a0)	; set to "already fired" to prevent refiring
00009892 317C 003B 0032             		move.w	#$3B,$32(a0)
00009898 117C 0002 001C             		move.b	#2,$1C(a0)	; use "firing" animation
0000989E                            
0000989E                            locret_98D0:
0000989E 4E75                       		rts	
000098A0                            ; ===========================================================================
000098A0                            
000098A0                            Obj22_ChkNrSonic:			; XREF: Obj22_Index2
000098A0 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
000098A4 6B00                       		bmi.s	Obj22_ChgDir
000098A6 6100 0000                  		bsr.w	SpeedToPos
000098AA 4A28 0034                  		tst.b	$34(a0)
000098AE 6600                       		bne.s	locret_992A
000098B0 3038 D008                  		move.w	($FFFFD008).w,d0
000098B4 9068 0008                  		sub.w	8(a0),d0
000098B8 6A00                       		bpl.s	Obj22_SetNrSonic
000098BA 4440                       		neg.w	d0
000098BC                            
000098BC                            Obj22_SetNrSonic:
000098BC 0C40 0060                  		cmpi.w	#$60,d0		; is Buzz Bomber within	$60 pixels of Sonic?
000098C0 6400                       		bcc.s	locret_992A	; if not, branch
000098C2 4A28 0001                  		tst.b	1(a0)
000098C6 6A00                       		bpl.s	locret_992A
000098C8 117C 0002 0034             		move.b	#2,$34(a0)	; set Buzz Bomber to "near Sonic"
000098CE 317C 001D 0032             		move.w	#29,$32(a0)	; set time delay to half a second
000098D4 6000                       		bra.s	Obj22_Stop
000098D6                            ; ===========================================================================
000098D6                            
000098D6                            Obj22_ChgDir:				; XREF: Obj22_ChkNrSonic
000098D6 117C 0000 0034             		move.b	#0,$34(a0)	; set Buzz Bomber to "normal"
000098DC 0868 0000 0022             		bchg	#0,$22(a0)	; change direction
000098E2 317C 003B 0032             		move.w	#59,$32(a0)
000098E8                            
000098E8                            Obj22_Stop:				; XREF: Obj22_SetNrSonic
000098E8 5528 0025                  		subq.b	#2,$25(a0)	; run "Obj22_Fire" routine
000098EC 317C 0000 0010             		move.w	#0,$10(a0)	; stop Buzz Bomber moving
000098F2 117C 0000 001C             		move.b	#0,$1C(a0)	; use "hovering" animation
000098F8                            
000098F8                            locret_992A:
000098F8 4E75                       		rts	
000098FA                            ; ===========================================================================
000098FA                            
000098FA                            Obj22_Delete:				; XREF: Obj22_Index
000098FA 6100 0000                  		bsr.w	DeleteObject
000098FE 4E75                       		rts	
00009900                            ; ===========================================================================
00009900                            ; ---------------------------------------------------------------------------
00009900                            ; Object 23 - missile that Buzz	Bomber throws
00009900                            ; ---------------------------------------------------------------------------
00009900                            
00009900                            Obj23:					; XREF: Obj_Index
00009900 7000                       		moveq	#0,d0
00009902 1028 0024                  		move.b	$24(a0),d0
00009906 323B 0000                  		move.w	Obj23_Index(pc,d0.w),d1
0000990A 4EFB 1000                  		jmp	Obj23_Index(pc,d1.w)
0000990E                            ; ===========================================================================
0000990E 0000                       Obj23_Index:	dc.w Obj23_Main-Obj23_Index
00009910 0000                       		dc.w Obj23_Animate-Obj23_Index
00009912 0000                       		dc.w Obj23_FromBuzz-Obj23_Index
00009914 0000                       		dc.w Obj23_Delete-Obj23_Index
00009916 0000                       		dc.w Obj23_FromNewt-Obj23_Index
00009918                            ; ===========================================================================
00009918                            
00009918                            Obj23_Main:				; XREF: Obj23_Index
00009918 5368 0032                  		subq.w	#1,$32(a0)
0000991C 6A00                       		bpl.s	Obj23_ChkCancel
0000991E 5428 0024                  		addq.b	#2,$24(a0)
00009922 217C 0000 0000 0004        		move.l	#Map_obj23,4(a0)
0000992A 317C 2444 0002             		move.w	#$2444,2(a0)
00009930 117C 0004 0001             		move.b	#4,1(a0)
00009936 117C 0003 0018             		move.b	#3,$18(a0)
0000993C 117C 0008 0019             		move.b	#8,$19(a0)
00009942 0228 0003 0022             		andi.b	#3,$22(a0)
00009948 4A28 0028                  		tst.b	$28(a0)		; was object created by	a Newtron?
0000994C 6700                       		beq.s	Obj23_Animate	; if not, branch
0000994E 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj23_FromNewt" routine
00009954 117C 0087 0020             		move.b	#$87,$20(a0)
0000995A 117C 0001 001C             		move.b	#1,$1C(a0)
00009960 6000                       		bra.s	Obj23_Animate2
00009962                            ; ===========================================================================
00009962                            
00009962                            Obj23_Animate:				; XREF: Obj23_Index
00009962 6100                       		bsr.s	Obj23_ChkCancel
00009964 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000996A 6100 0000                  		bsr.w	AnimateSprite
0000996E 6000 0000                  		bra.w	DisplaySprite
00009972                            ; ---------------------------------------------------------------------------
00009972                            ; Subroutine to	check if the Buzz Bomber which fired the missile has been
00009972                            ; destroyed, and if it has, then cancel	the missile
00009972                            ; ---------------------------------------------------------------------------
00009972                            
00009972                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009972                            
00009972                            
00009972                            Obj23_ChkCancel:			; XREF: Obj23_Main
00009972 2268 003C                  		movea.l	$3C(a0),a1
00009976 0C11 0027                  		cmpi.b	#$27,0(a1)	; has Buzz Bomber been destroyed?
0000997A 6700                       		beq.s	Obj23_Delete	; if yes, branch
0000997C 4E75                       		rts	
0000997E                            ; End of function Obj23_ChkCancel
0000997E                            
0000997E                            ; ===========================================================================
0000997E                            
0000997E                            Obj23_FromBuzz:				; XREF: Obj23_Index
0000997E 0828 0007 0022             		btst	#7,$22(a0)
00009984 6600                       		bne.s	Obj23_Explode
00009986 117C 0087 0020             		move.b	#$87,$20(a0)
0000998C 117C 0001 001C             		move.b	#1,$1C(a0)
00009992 6100 0000                  		bsr.w	SpeedToPos
00009996 43F9 0000 0000             		lea	(Ani_obj23).l,a1
0000999C 6100 0000                  		bsr.w	AnimateSprite
000099A0 6100 0000                  		bsr.w	DisplaySprite
000099A4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000099A8 0640 00E0                  		addi.w	#$E0,d0
000099AC B068 000C                  		cmp.w	$C(a0),d0	; has object moved below the level boundary?
000099B0 6500                       		bcs.s	Obj23_Delete	; if yes, branch
000099B2 4E75                       		rts	
000099B4                            ; ===========================================================================
000099B4                            
000099B4                            Obj23_Explode:				; XREF: Obj23_FromBuzz
000099B4 10BC 0024                  		move.b	#$24,0(a0)	; change object	to an explosion	(Obj24)
000099B8 117C 0000 0024             		move.b	#0,$24(a0)
000099BE 6000 F30A                  		bra.w	Obj24
000099C2                            ; ===========================================================================
000099C2                            
000099C2                            Obj23_Delete:				; XREF: Obj23_Index
000099C2 6100 0000                  		bsr.w	DeleteObject
000099C6 4E75                       		rts	
000099C8                            ; ===========================================================================
000099C8                            
000099C8                            Obj23_FromNewt:				; XREF: Obj23_Index
000099C8 4A28 0001                  		tst.b	1(a0)
000099CC 6AF4                       		bpl.s	Obj23_Delete
000099CE 6100 0000                  		bsr.w	SpeedToPos
000099D2                            
000099D2                            Obj23_Animate2:				; XREF: Obj23_Main
000099D2 43F9 0000 0000             		lea	(Ani_obj23).l,a1
000099D8 6100 0000                  		bsr.w	AnimateSprite
000099DC 6100 0000                  		bsr.w	DisplaySprite
000099E0 4E75                       		rts	
000099E2                            ; ===========================================================================
000099E2                            Ani_obj22:
000099E2                            	include "_anim\obj22.asm"
000099E2                            ; ---------------------------------------------------------------------------
000099E2                            ; Animation script - Buzz Bomber enemy
000099E2                            ; ---------------------------------------------------------------------------
000099E2 0000                       		dc.w byte_9A1E-Ani_obj22
000099E4 0000                       		dc.w byte_9A22-Ani_obj22
000099E6 0000                       		dc.w byte_9A26-Ani_obj22
000099E8 0100 01FF                  byte_9A1E:	dc.b 1,	0, 1, $FF
000099EC 0102 03FF                  byte_9A22:	dc.b 1,	2, 3, $FF
000099F0 0104 05FF                  byte_9A26:	dc.b 1,	4, 5, $FF
000099F4                            		even
000099F4                            		even
000099F4                            
000099F4                            Ani_obj23:
000099F4                            	include "_anim\obj23.asm"
000099F4                            ; ---------------------------------------------------------------------------
000099F4                            ; Animation script - missile that Buzz Bomber throws
000099F4                            ; ---------------------------------------------------------------------------
000099F4 0000                       		dc.w byte_9A2E-Ani_obj23
000099F6 0000                       		dc.w byte_9A32-Ani_obj23
000099F8 0700 01FC                  byte_9A2E:	dc.b 7,	0, 1, $FC
000099FC 0102 03FF                  byte_9A32:	dc.b 1,	2, 3, $FF
00009A00                            		even
00009A00                            		even
00009A00                            
00009A00                            ; ---------------------------------------------------------------------------
00009A00                            ; Sprite mappings - Buzz Bomber	enemy
00009A00                            ; ---------------------------------------------------------------------------
00009A00                            Map_obj22:
00009A00                            	include "_maps\obj22.asm"
00009A00                            ; ---------------------------------------------------------------------------
00009A00                            ; Sprite mappings - Buzz Bomber	enemy
00009A00                            ; ---------------------------------------------------------------------------
00009A00 0000 0000                  		dc.w byte_9A42-Map_obj22, byte_9A61-Map_obj22
00009A04 0000 0000                  		dc.w byte_9A80-Map_obj22, byte_9AA4-Map_obj22
00009A08 0000 0000                  		dc.w byte_9AC8-Map_obj22, byte_9AE7-Map_obj22
00009A0C 06                         byte_9A42:	dc.b 6
00009A0D F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A12 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A17 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A1C 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A21 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009A26 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009A2B 06                         byte_9A61:	dc.b 6
00009A2C F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A31 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A36 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A3B 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A40 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009A45 F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009A4A 07                         byte_9A80:	dc.b 7
00009A4B 0400 0030 0C               		dc.b 4,	0, 0, $30, $C
00009A50 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A55 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A5A 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A5F 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A64 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009A69 F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009A6E 07                         byte_9AA4:	dc.b 7
00009A6F 0404 0031 0C               		dc.b 4,	4, 0, $31, $C
00009A74 F409 0000 E8               		dc.b $F4, 9, 0,	0, $E8
00009A79 F409 000F 00               		dc.b $F4, 9, 0,	$F, 0
00009A7E 0408 0015 E8               		dc.b 4,	8, 0, $15, $E8
00009A83 0404 0018 00               		dc.b 4,	4, 0, $18, 0
00009A88 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009A8D F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009A92 06                         byte_9AC8:	dc.b 6
00009A93 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009A98 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009A9D 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009AA2 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009AA7 F108 001A EC               		dc.b $F1, 8, 0,	$1A, $EC
00009AAC F104 001D 04               		dc.b $F1, 4, 0,	$1D, 4
00009AB1 04                         byte_9AE7:	dc.b 4
00009AB2 F40D 0000 EC               		dc.b $F4, $D, 0, 0, $EC
00009AB7 040C 0008 EC               		dc.b 4,	$C, 0, 8, $EC
00009ABC 0400 000C 0C               		dc.b 4,	0, 0, $C, $C
00009AC1 0C04 000D F4               		dc.b $C, 4, 0, $D, $F4
00009AC6 F408 001F EC               		dc.b $F4, 8, 0,	$1F, $EC
00009ACB F404 0022 04               		dc.b $F4, 4, 0,	$22, 4
00009AD0                            		even
00009AD0                            		even
00009AD0                            
00009AD0                            ; ---------------------------------------------------------------------------
00009AD0                            ; Sprite mappings - missile that Buzz Bomber throws
00009AD0                            ; ---------------------------------------------------------------------------
00009AD0                            Map_obj23:
00009AD0                            	include "_maps\obj23.asm"
00009AD0                            ; ---------------------------------------------------------------------------
00009AD0                            ; Sprite mappings - missile that Buzz Bomber throws
00009AD0                            ; ---------------------------------------------------------------------------
00009AD0 0000 0000                  		dc.w byte_9B0E-Map_obj23, byte_9B14-Map_obj23
00009AD4 0000 0000                  		dc.w byte_9B1A-Map_obj23, byte_9B20-Map_obj23
00009AD8 01                         byte_9B0E:	dc.b 1
00009AD9 F805 0024 F8               		dc.b $F8, 5, 0,	$24, $F8
00009ADE 01                         byte_9B14:	dc.b 1
00009ADF F805 0028 F8               		dc.b $F8, 5, 0,	$28, $F8
00009AE4 01                         byte_9B1A:	dc.b 1
00009AE5 F805 002C F8               		dc.b $F8, 5, 0,	$2C, $F8
00009AEA 01                         byte_9B20:	dc.b 1
00009AEB F805 0033 F8               		dc.b $F8, 5, 0,	$33, $F8
00009AF0                            		even
00009AF0                            		even
00009AF0                            
00009AF0                            ; ===========================================================================
00009AF0                            ; ---------------------------------------------------------------------------
00009AF0                            ; Object 25 - rings
00009AF0                            ; ---------------------------------------------------------------------------
00009AF0                            
00009AF0                            Obj25:					; XREF: Obj_Index
00009AF0 7000                       		moveq	#0,d0
00009AF2 1028 0024                  		move.b	$24(a0),d0
00009AF6 323B 0000                  		move.w	Obj25_Index(pc,d0.w),d1
00009AFA 4EFB 1000                  		jmp	Obj25_Index(pc,d1.w)
00009AFE                            ; ===========================================================================
00009AFE 0000                       Obj25_Index:	dc.w Obj25_Main-Obj25_Index
00009B00 0000                       		dc.w Obj25_Animate-Obj25_Index
00009B02 0000                       		dc.w Obj25_Collect-Obj25_Index
00009B04 0000                       		dc.w Obj25_Sparkle-Obj25_Index
00009B06 0000                       		dc.w Obj25_Delete-Obj25_Index
00009B08                            ; ---------------------------------------------------------------------------
00009B08                            ; Distances between rings (format: horizontal, vertical)
00009B08                            ; ---------------------------------------------------------------------------
00009B08 1000                       Obj25_PosData:	dc.b $10, 0		; horizontal tight
00009B0A 1800                       		dc.b $18, 0		; horizontal normal
00009B0C 2000                       		dc.b $20, 0		; horizontal wide
00009B0E 0010                       		dc.b 0,	$10		; vertical tight
00009B10 0018                       		dc.b 0,	$18		; vertical normal
00009B12 0020                       		dc.b 0,	$20		; vertical wide
00009B14 1010                       		dc.b $10, $10		; diagonal
00009B16 1818                       		dc.b $18, $18
00009B18 2020                       		dc.b $20, $20
00009B1A F010                       		dc.b $F0, $10
00009B1C E818                       		dc.b $E8, $18
00009B1E E020                       		dc.b $E0, $20
00009B20 1008                       		dc.b $10, 8
00009B22 1810                       		dc.b $18, $10
00009B24 F008                       		dc.b $F0, 8
00009B26 E810                       		dc.b $E8, $10
00009B28                            ; ===========================================================================
00009B28                            
00009B28                            Obj25_Main:				; XREF: Obj25_Index
00009B28 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009B2C 7000                       		moveq	#0,d0
00009B2E 1028 0023                  		move.b	$23(a0),d0
00009B32 45F2 0002                  		lea	2(a2,d0.w),a2
00009B36 1812                       		move.b	(a2),d4
00009B38 1228 0028                  		move.b	$28(a0),d1
00009B3C 1001                       		move.b	d1,d0
00009B3E 0241 0007                  		andi.w	#7,d1
00009B42 0C41 0007                  		cmpi.w	#7,d1
00009B46 6600                       		bne.s	loc_9B80
00009B48 7206                       		moveq	#6,d1
00009B4A                            
00009B4A                            loc_9B80:
00009B4A 4841                       		swap	d1
00009B4C 323C 0000                  		move.w	#0,d1
00009B50 E808                       		lsr.b	#4,d0
00009B52 D040                       		add.w	d0,d0
00009B54 1A3B 00B2                  		move.b	Obj25_PosData(pc,d0.w),d5 ; load ring spacing data
00009B58 4885                       		ext.w	d5
00009B5A 1C3B 00AD                  		move.b	Obj25_PosData+1(pc,d0.w),d6
00009B5E 4886                       		ext.w	d6
00009B60 2248                       		movea.l	a0,a1
00009B62 3428 0008                  		move.w	8(a0),d2
00009B66 3628 000C                  		move.w	$C(a0),d3
00009B6A E20C                       		lsr.b	#1,d4
00009B6C 6500                       		bcs.s	loc_9C02
00009B6E 0892 0007                  		bclr	#7,(a2)
00009B72 6000                       		bra.s	loc_9BBA
00009B74                            ; ===========================================================================
00009B74                            
00009B74                            Obj25_MakeRings:
00009B74 4841                       		swap	d1
00009B76 E20C                       		lsr.b	#1,d4
00009B78 6500                       		bcs.s	loc_9C02
00009B7A 0892 0007                  		bclr	#7,(a2)
00009B7E 6100 0000                  		bsr.w	SingleObjLoad
00009B82 6600                       		bne.s	loc_9C0E
00009B84                            
00009B84                            loc_9BBA:				; XREF: Obj25_Main
00009B84 12BC 0025                  		move.b	#$25,0(a1)	; load ring object
00009B88 5429 0024                  		addq.b	#2,$24(a1)
00009B8C 3342 0008                  		move.w	d2,8(a1)	; set x-axis position based on d2
00009B90 3368 0008 0032             		move.w	8(a0),$32(a1)
00009B96 3343 000C                  		move.w	d3,$C(a1)	; set y-axis position based on d3
00009B9A 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009BA2 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009BA8 137C 0004 0001             		move.b	#4,1(a1)
00009BAE 137C 0002 0018             		move.b	#2,$18(a1)
00009BB4 137C 0047 0020             		move.b	#$47,$20(a1)
00009BBA 137C 0008 0019             		move.b	#8,$19(a1)
00009BC0 1368 0023 0023             		move.b	$23(a0),$23(a1)
00009BC6 1341 0034                  		move.b	d1,$34(a1)
00009BCA                            
00009BCA                            loc_9C02:
00009BCA 5241                       		addq.w	#1,d1
00009BCC D445                       		add.w	d5,d2		; add ring spacing value to d2
00009BCE D646                       		add.w	d6,d3		; add ring spacing value to d3
00009BD0 4841                       		swap	d1
00009BD2 51C9 FFA0                  		dbf	d1,Obj25_MakeRings ; repeat for	number of rings
00009BD6                            
00009BD6                            loc_9C0E:
00009BD6 0812 0000                  		btst	#0,(a2)
00009BDA 6600 0000                  		bne.w	DeleteObject
00009BDE                            
00009BDE                            Obj25_Animate:				; XREF: Obj25_Index
00009BDE 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0) ;	set frame
00009BE4 6100 0000                  		bsr.w	DisplaySprite
00009BE8 3028 0032                  		move.w	$32(a0),d0
00009BEC 0240 FF80                  		andi.w	#$FF80,d0
00009BF0 3238 F700                  		move.w	($FFFFF700).w,d1
00009BF4 0441 0080                  		subi.w	#$80,d1
00009BF8 0241 FF80                  		andi.w	#$FF80,d1
00009BFC 9041                       		sub.w	d1,d0
00009BFE 0C40 0280                  		cmpi.w	#$280,d0
00009C02 6200                       		bhi.s	Obj25_Delete
00009C04 4E75                       		rts	
00009C06                            ; ===========================================================================
00009C06                            
00009C06                            Obj25_Collect:				; XREF: Obj25_Index
00009C06 5428 0024                  		addq.b	#2,$24(a0)
00009C0A 117C 0000 0020             		move.b	#0,$20(a0)
00009C10 117C 0001 0018             		move.b	#1,$18(a0)
00009C16 6100 0000                  		bsr.w	CollectRing
00009C1A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00009C1E 7000                       		moveq	#0,d0
00009C20 1028 0023                  		move.b	$23(a0),d0
00009C24 1228 0034                  		move.b	$34(a0),d1
00009C28 03F2 0002                  		bset	d1,2(a2,d0.w)
00009C2C                            
00009C2C                            Obj25_Sparkle:				; XREF: Obj25_Index
00009C2C 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009C32 6100 0000                  		bsr.w	AnimateSprite
00009C36 6000 0000                  		bra.w	DisplaySprite
00009C3A                            ; ===========================================================================
00009C3A                            
00009C3A                            Obj25_Delete:				; XREF: Obj25_Index
00009C3A 6000 0000                  		bra.w	DeleteObject
00009C3E                            
00009C3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009C3E                            
00009C3E                            
00009C3E                            CollectRing:				; XREF: Obj25_Collect
00009C3E 5278 FE20                  		addq.w	#1,($FFFFFE20).w ; add 1 to rings
00009C42 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the rings counter
00009C48 303C 00B5                  		move.w	#$B5,d0		; play ring sound
00009C4C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; do	you have < 100 rings?
00009C52 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009C54 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w ; update lives	counter
00009C5A 6700                       		beq.s	loc_9CA4
00009C5C 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; do	you have < 200 rings?
00009C62 6500                       		bcs.s	Obj25_PlaySnd	; if yes, branch
00009C64 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w ; update lives	counter
00009C6A 6600                       		bne.s	Obj25_PlaySnd
00009C6C                            
00009C6C                            loc_9CA4:
00009C6C 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
00009C70 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
00009C74 303C 0088                  		move.w	#$88,d0		; play extra life music
00009C78                            
00009C78                            Obj25_PlaySnd:
00009C78 4EF9 0000 139C             		jmp	(PlaySound_Special).l
00009C7E                            ; End of function CollectRing
00009C7E                            
00009C7E                            ; ===========================================================================
00009C7E                            ; ---------------------------------------------------------------------------
00009C7E                            ; Object 37 - rings flying out of Sonic	when he's hit
00009C7E                            ; ---------------------------------------------------------------------------
00009C7E                            
00009C7E                            Obj37:					; XREF: Obj_Index
00009C7E 7000                       		moveq	#0,d0
00009C80 1028 0024                  		move.b	$24(a0),d0
00009C84 323B 0000                  		move.w	Obj37_Index(pc,d0.w),d1
00009C88 4EFB 1000                  		jmp	Obj37_Index(pc,d1.w)
00009C8C                            ; ===========================================================================
00009C8C 0000                       Obj37_Index:	dc.w Obj37_CountRings-Obj37_Index
00009C8E 0000                       		dc.w Obj37_Bounce-Obj37_Index
00009C90 0000                       		dc.w Obj37_Collect-Obj37_Index
00009C92 0000                       		dc.w Obj37_Sparkle-Obj37_Index
00009C94 0000                       		dc.w Obj37_Delete-Obj37_Index
00009C96                            ; ===========================================================================
00009C96                            
00009C96                            Obj37_CountRings:			; XREF: Obj37_Index
00009C96 2248                       		movea.l	a0,a1
00009C98 7A00                       		moveq	#0,d5
00009C9A 3A38 FE20                  		move.w	($FFFFFE20).w,d5 ; check number	of rings you have
00009C9E 7020                       		moveq	#32,d0
00009CA0 BA40                       		cmp.w	d0,d5		; do you have 32 or more?
00009CA2 6500                       		bcs.s	loc_9CDE	; if not, branch
00009CA4 3A00                       		move.w	d0,d5		; if yes, set d5 to 32
00009CA6                            
00009CA6                            loc_9CDE:
00009CA6 5345                       		subq.w	#1,d5
00009CA8 383C 0288                  		move.w	#$288,d4
00009CAC 6000                       		bra.s	Obj37_MakeRings
00009CAE                            ; ===========================================================================
00009CAE                            
00009CAE                            Obj37_Loop:
00009CAE 6100 0000                  		bsr.w	SingleObjLoad
00009CB2 6600 0000                  		bne.w	Obj37_ResetCounter
00009CB6                            
00009CB6                            Obj37_MakeRings:			; XREF: Obj37_CountRings
00009CB6 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	ring object
00009CBA 5429 0024                  		addq.b	#2,$24(a1)
00009CBE 137C 0008 0016             		move.b	#8,$16(a1)
00009CC4 137C 0008 0017             		move.b	#8,$17(a1)
00009CCA 3368 0008 0008             		move.w	8(a0),8(a1)
00009CD0 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009CD6 237C 0000 0000 0004        		move.l	#Map_obj25,4(a1)
00009CDE 337C 27B2 0002             		move.w	#$27B2,2(a1)
00009CE4 137C 0004 0001             		move.b	#4,1(a1)
00009CEA 137C 0003 0018             		move.b	#3,$18(a1)
00009CF0 137C 0047 0020             		move.b	#$47,$20(a1)
00009CF6 137C 0008 0019             		move.b	#8,$19(a1)
00009CFC 11FC 00FF FEC6             		move.b	#-1,($FFFFFEC6).w
00009D02 4A44                       		tst.w	d4
00009D04 6B00                       		bmi.s	loc_9D62
00009D06 3004                       		move.w	d4,d0
00009D08 6100 8CD0                  		bsr.w	CalcSine
00009D0C 3404                       		move.w	d4,d2
00009D0E E04A                       		lsr.w	#8,d2
00009D10 E560                       		asl.w	d2,d0
00009D12 E561                       		asl.w	d2,d1
00009D14 3400                       		move.w	d0,d2
00009D16 3601                       		move.w	d1,d3
00009D18 0604 0010                  		addi.b	#$10,d4
00009D1C 6400                       		bcc.s	loc_9D62
00009D1E 0444 0080                  		subi.w	#$80,d4
00009D22 6400                       		bcc.s	loc_9D62
00009D24 383C 0288                  		move.w	#$288,d4
00009D28                            
00009D28                            loc_9D62:
00009D28 3342 0010                  		move.w	d2,$10(a1)
00009D2C 3343 0012                  		move.w	d3,$12(a1)
00009D30 4442                       		neg.w	d2
00009D32 4444                       		neg.w	d4
00009D34 51CD FF78                  		dbf	d5,Obj37_Loop	; repeat for number of rings (max 31)
00009D38                            
00009D38                            Obj37_ResetCounter:			; XREF: Obj37_Loop
00009D38 31FC 0000 FE20             		move.w	#0,($FFFFFE20).w ; reset number	of rings to zero
00009D3E 11FC 0080 FE1D             		move.b	#$80,($FFFFFE1D).w ; update ring counter
00009D44 11FC 0000 FE1B             		move.b	#0,($FFFFFE1B).w
00009D4A 303C 00C6                  		move.w	#$C6,d0
00009D4E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play ring loss sound
00009D54                            
00009D54                            Obj37_Bounce:				; XREF: Obj37_Index
00009D54 1178 FEC7 001A             		move.b	($FFFFFEC7).w,$1A(a0)
00009D5A 6100 0000                  		bsr.w	SpeedToPos
00009D5E 0668 0018 0012             		addi.w	#$18,$12(a0)
00009D64 6B00                       		bmi.s	Obj37_ChkDel
00009D66 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00009D6A D007                       		add.b	d7,d0
00009D6C 0200 0003                  		andi.b	#3,d0
00009D70 6600                       		bne.s	Obj37_ChkDel
00009D72 4EB9 0000 0000             		jsr	ObjHitFloor
00009D78 4A41                       		tst.w	d1
00009D7A 6A00                       		bpl.s	Obj37_ChkDel
00009D7C D368 000C                  		add.w	d1,$C(a0)
00009D80 3028 0012                  		move.w	$12(a0),d0
00009D84 E440                       		asr.w	#2,d0
00009D86 9168 0012                  		sub.w	d0,$12(a0)
00009D8A 4468 0012                  		neg.w	$12(a0)
00009D8E                            
00009D8E                            Obj37_ChkDel:				; XREF: Obj37_Bounce
00009D8E 4A38 FEC6                  		tst.b	($FFFFFEC6).w
00009D92 6700                       		beq.s	Obj37_Delete
00009D94 3038 F72E                  		move.w	($FFFFF72E).w,d0
00009D98 0640 00E0                  		addi.w	#$E0,d0
00009D9C B068 000C                  		cmp.w	$C(a0),d0	; has object moved below level boundary?
00009DA0 6500                       		bcs.s	Obj37_Delete	; if yes, branch
00009DA2 6000 0000                  		bra.w	DisplaySprite
00009DA6                            ; ===========================================================================
00009DA6                            
00009DA6                            Obj37_Collect:				; XREF: Obj37_Index
00009DA6 5428 0024                  		addq.b	#2,$24(a0)
00009DAA 117C 0000 0020             		move.b	#0,$20(a0)
00009DB0 117C 0001 0018             		move.b	#1,$18(a0)
00009DB6 6100 FE86                  		bsr.w	CollectRing
00009DBA                            
00009DBA                            Obj37_Sparkle:				; XREF: Obj37_Index
00009DBA 43F9 0000 0000             		lea	(Ani_obj25).l,a1
00009DC0 6100 0000                  		bsr.w	AnimateSprite
00009DC4 6000 0000                  		bra.w	DisplaySprite
00009DC8                            ; ===========================================================================
00009DC8                            
00009DC8                            Obj37_Delete:				; XREF: Obj37_Index
00009DC8 6000 0000                  		bra.w	DeleteObject
00009DCC                            ; ===========================================================================
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            ; Object 4B - giant ring for entry to special stage
00009DCC                            ; ---------------------------------------------------------------------------
00009DCC                            
00009DCC                            Obj4B:					; XREF: Obj_Index
00009DCC 7000                       		moveq	#0,d0
00009DCE 1028 0024                  		move.b	$24(a0),d0
00009DD2 323B 0000                  		move.w	Obj4B_Index(pc,d0.w),d1
00009DD6 4EFB 1000                  		jmp	Obj4B_Index(pc,d1.w)
00009DDA                            ; ===========================================================================
00009DDA 0000                       Obj4B_Index:	dc.w Obj4B_Main-Obj4B_Index
00009DDC 0000                       		dc.w Obj4B_Animate-Obj4B_Index
00009DDE 0000                       		dc.w Obj4B_Collect-Obj4B_Index
00009DE0 0000                       		dc.w Obj4B_Delete-Obj4B_Index
00009DE2                            ; ===========================================================================
00009DE2                            
00009DE2                            Obj4B_Main:				; XREF: Obj4B_Index
00009DE2 217C 0000 0000 0004        		move.l	#Map_obj4B,4(a0)
00009DEA 317C 2400 0002             		move.w	#$2400,2(a0)
00009DF0 0028 0004 0001             		ori.b	#4,1(a0)
00009DF6 117C 0040 0019             		move.b	#$40,$19(a0)
00009DFC 4A28 0001                  		tst.b	1(a0)
00009E00 6A00                       		bpl.s	Obj4B_Animate
00009E02 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have 6 emeralds?
00009E08 6700 0000                  		beq.w	Obj4B_Delete	; if yes, branch
00009E0C 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
00009E12 6400                       		bcc.s	Obj4B_Okay	; if yes, branch
00009E14 4E75                       		rts	
00009E16                            ; ===========================================================================
00009E16                            
00009E16                            Obj4B_Okay:				; XREF: Obj4B_Main
00009E16 5428 0024                  		addq.b	#2,$24(a0)
00009E1A 117C 0002 0018             		move.b	#2,$18(a0)
00009E20 117C 0052 0020             		move.b	#$52,$20(a0)
00009E26 31FC 0C40 F7BE             		move.w	#$C40,($FFFFF7BE).w
00009E2C                            
00009E2C                            Obj4B_Animate:				; XREF: Obj4B_Index
00009E2C 1178 FEC3 001A             		move.b	($FFFFFEC3).w,$1A(a0)
00009E32 3028 0008                  		move.w	8(a0),d0
00009E36 0240 FF80                  		andi.w	#$FF80,d0
00009E3A 3238 F700                  		move.w	($FFFFF700).w,d1
00009E3E 0441 0080                  		subi.w	#$80,d1
00009E42 0241 FF80                  		andi.w	#$FF80,d1
00009E46 9041                       		sub.w	d1,d0
00009E48 0C40 0280                  		cmpi.w	#$280,d0
00009E4C 6200 0000                  		bhi.w	DeleteObject
00009E50 6000 0000                  		bra.w	DisplaySprite
00009E54                            ; ===========================================================================
00009E54                            
00009E54                            Obj4B_Collect:				; XREF: Obj4B_Index
00009E54 5528 0024                  		subq.b	#2,$24(a0)
00009E58 117C 0000 0020             		move.b	#0,$20(a0)
00009E5E 6100 0000                  		bsr.w	SingleObjLoad
00009E62 6600 0000                  		bne.w	Obj4B_PlaySnd
00009E66 12BC 007C                  		move.b	#$7C,0(a1)	; load giant ring flash	object
00009E6A 3368 0008 0008             		move.w	8(a0),8(a1)
00009E70 3368 000C 000C             		move.w	$C(a0),$C(a1)
00009E76 2348 003C                  		move.l	a0,$3C(a1)
00009E7A 3038 D008                  		move.w	($FFFFD008).w,d0
00009E7E B068 0008                  		cmp.w	8(a0),d0	; has Sonic come from the left?
00009E82 6500                       		bcs.s	Obj4B_PlaySnd	; if yes, branch
00009E84 08E9 0000 0001             		bset	#0,1(a1)	; reverse flash	object
00009E8A                            
00009E8A                            Obj4B_PlaySnd:
00009E8A 303C 00C3                  		move.w	#$C3,d0
00009E8E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play giant ring	sound
00009E94 6096                       		bra.s	Obj4B_Animate
00009E96                            ; ===========================================================================
00009E96                            
00009E96                            Obj4B_Delete:				; XREF: Obj4B_Index
00009E96 6000 0000                  		bra.w	DeleteObject
00009E9A                            ; ===========================================================================
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A                            ; Object 7C - flash effect when	you collect the	giant ring
00009E9A                            ; ---------------------------------------------------------------------------
00009E9A                            
00009E9A                            Obj7C:					; XREF: Obj_Index
00009E9A 7000                       		moveq	#0,d0
00009E9C 1028 0024                  		move.b	$24(a0),d0
00009EA0 323B 0000                  		move.w	Obj7C_Index(pc,d0.w),d1
00009EA4 4EFB 1000                  		jmp	Obj7C_Index(pc,d1.w)
00009EA8                            ; ===========================================================================
00009EA8 0000                       Obj7C_Index:	dc.w Obj7C_Main-Obj7C_Index
00009EAA 0000                       		dc.w Obj7C_ChkDel-Obj7C_Index
00009EAC 0000                       		dc.w Obj7C_Delete-Obj7C_Index
00009EAE                            ; ===========================================================================
00009EAE                            
00009EAE                            Obj7C_Main:				; XREF: Obj7C_Index
00009EAE 5428 0024                  		addq.b	#2,$24(a0)
00009EB2 217C 0000 0000 0004        		move.l	#Map_obj7C,4(a0)
00009EBA 317C 2462 0002             		move.w	#$2462,2(a0)
00009EC0 0028 0004 0001             		ori.b	#4,1(a0)
00009EC6 117C 0000 0018             		move.b	#0,$18(a0)
00009ECC 117C 0020 0019             		move.b	#$20,$19(a0)
00009ED2 117C 00FF 001A             		move.b	#$FF,$1A(a0)
00009ED8                            
00009ED8                            Obj7C_ChkDel:				; XREF: Obj7C_Index
00009ED8 6100                       		bsr.s	Obj7C_Collect
00009EDA 3028 0008                  		move.w	8(a0),d0
00009EDE 0240 FF80                  		andi.w	#$FF80,d0
00009EE2 3238 F700                  		move.w	($FFFFF700).w,d1
00009EE6 0441 0080                  		subi.w	#$80,d1
00009EEA 0241 FF80                  		andi.w	#$FF80,d1
00009EEE 9041                       		sub.w	d1,d0
00009EF0 0C40 0280                  		cmpi.w	#$280,d0
00009EF4 6200 0000                  		bhi.w	DeleteObject
00009EF8 6000 0000                  		bra.w	DisplaySprite
00009EFC                            
00009EFC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00009EFC                            
00009EFC                            
00009EFC                            Obj7C_Collect:				; XREF: Obj7C_ChkDel
00009EFC 5328 001E                  		subq.b	#1,$1E(a0)
00009F00 6A00                       		bpl.s	locret_9F76
00009F02 117C 0001 001E             		move.b	#1,$1E(a0)
00009F08 5228 001A                  		addq.b	#1,$1A(a0)
00009F0C 0C28 0008 001A             		cmpi.b	#8,$1A(a0)	; has animation	finished?
00009F12 6400                       		bcc.s	Obj7C_End	; if yes, branch
00009F14 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is 3rd frame displayed?
00009F1A 6600                       		bne.s	locret_9F76	; if not, branch
00009F1C 2268 003C                  		movea.l	$3C(a0),a1
00009F20 137C 0006 0024             		move.b	#6,$24(a1)	; delete giant ring object (Obj4B)
00009F26 11FC 001C D01C             		move.b	#$1C,($FFFFD01C).w ; make Sonic	invisible
00009F2C 11FC 0001 F7CD             		move.b	#1,($FFFFF7CD).w ; stop	Sonic getting bonuses
00009F32 4238 FE2D                  		clr.b	($FFFFFE2D).w	; remove invincibility
00009F36 4238 FE2C                  		clr.b	($FFFFFE2C).w	; remove shield
00009F3A                            
00009F3A                            locret_9F76:
00009F3A 4E75                       		rts	
00009F3C                            ; ===========================================================================
00009F3C                            
00009F3C                            Obj7C_End:				; XREF: Obj7C_Collect
00009F3C 5428 0024                  		addq.b	#2,$24(a0)
00009F40 31FC 0000 D000             		move.w	#0,($FFFFD000).w ; remove Sonic	object
00009F46 588F                       		addq.l	#4,sp
00009F48 4E75                       		rts	
00009F4A                            ; End of function Obj7C_Collect
00009F4A                            
00009F4A                            ; ===========================================================================
00009F4A                            
00009F4A                            Obj7C_Delete:				; XREF: Obj7C_Index
00009F4A 6000 0000                  		bra.w	DeleteObject
00009F4E                            ; ===========================================================================
00009F4E                            Ani_obj25:
00009F4E                            	include "_anim\obj25.asm"
00009F4E                            ; ---------------------------------------------------------------------------
00009F4E                            ; Animation script - ring
00009F4E                            ; ---------------------------------------------------------------------------
00009F4E 0000                       		dc.w byte_9F8C-Ani_obj25
00009F50 0504 0506 07FC             byte_9F8C:	dc.b 5,	4, 5, 6, 7, $FC
00009F56                            		even
00009F56                            		even
00009F56                            
00009F56                            ; ---------------------------------------------------------------------------
00009F56                            ; Sprite mappings - rings
00009F56                            ; ---------------------------------------------------------------------------
00009F56                            Map_obj25:
00009F56                            	include "_maps\obj25.asm"
00009F56                            ; ---------------------------------------------------------------------------
00009F56                            ; Sprite mappings - rings
00009F56                            ; ---------------------------------------------------------------------------
00009F56 0000 0000                  		dc.w byte_9FA2-Map_obj25, byte_9FA8-Map_obj25
00009F5A 0000 0000                  		dc.w byte_9FAE-Map_obj25, byte_9FB4-Map_obj25
00009F5E 0000 0000                  		dc.w byte_9FBA-Map_obj25, byte_9FC0-Map_obj25
00009F62 0000 0000                  		dc.w byte_9FC6-Map_obj25, byte_9FCC-Map_obj25
00009F66 01                         byte_9FA2:	dc.b 1
00009F67 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00009F6C 01                         byte_9FA8:	dc.b 1
00009F6D F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
00009F72 01                         byte_9FAE:	dc.b 1
00009F73 F801 0008 FC               		dc.b $F8, 1, 0,	8, $FC
00009F78 01                         byte_9FB4:	dc.b 1
00009F79 F805 0804 F8               		dc.b $F8, 5, 8,	4, $F8
00009F7E 01                         byte_9FBA:	dc.b 1
00009F7F F805 000A F8               		dc.b $F8, 5, 0,	$A, $F8
00009F84 01                         byte_9FC0:	dc.b 1
00009F85 F805 180A F8               		dc.b $F8, 5, $18, $A, $F8
00009F8A 01                         byte_9FC6:	dc.b 1
00009F8B F805 080A F8               		dc.b $F8, 5, 8,	$A, $F8
00009F90 01                         byte_9FCC:	dc.b 1
00009F91 F805 100A F8               		dc.b $F8, 5, $10, $A, $F8
00009F96                            		even
00009F96                            		even
00009F96                            
00009F96                            ; ---------------------------------------------------------------------------
00009F96                            ; Sprite mappings - giant ring
00009F96                            ; ---------------------------------------------------------------------------
00009F96                            Map_obj4B:
00009F96                            	include "_maps\obj4B.asm"
00009F96                            ; ---------------------------------------------------------------------------
00009F96                            ; Sprite mappings - giant ring
00009F96                            ; ---------------------------------------------------------------------------
00009F96 0000 0000                  		dc.w byte_9FDA-Map_obj4B, byte_A00D-Map_obj4B
00009F9A 0000 0000                  		dc.w byte_A036-Map_obj4B, byte_A04B-Map_obj4B
00009F9E 0A                         byte_9FDA:	dc.b $A
00009F9F E008 0000 E8               		dc.b $E0, 8, 0,	0, $E8
00009FA4 E008 0003 00               		dc.b $E0, 8, 0,	3, 0
00009FA9 E80C 0006 E0               		dc.b $E8, $C, 0, 6, $E0
00009FAE E80C 000A 00               		dc.b $E8, $C, 0, $A, 0
00009FB3 F007 000E E0               		dc.b $F0, 7, 0,	$E, $E0
00009FB8 F007 0016 10               		dc.b $F0, 7, 0,	$16, $10
00009FBD 100C 001E E0               		dc.b $10, $C, 0, $1E, $E0
00009FC2 100C 0022 00               		dc.b $10, $C, 0, $22, 0
00009FC7 1808 0026 E8               		dc.b $18, 8, 0,	$26, $E8
00009FCC 1808 0029 00               		dc.b $18, 8, 0,	$29, 0
00009FD1 08                         byte_A00D:	dc.b 8
00009FD2 E00C 002C F0               		dc.b $E0, $C, 0, $2C, $F0
00009FD7 E808 0030 E8               		dc.b $E8, 8, 0,	$30, $E8
00009FDC E809 0033 00               		dc.b $E8, 9, 0,	$33, 0
00009FE1 F007 0039 E8               		dc.b $F0, 7, 0,	$39, $E8
00009FE6 F805 0041 08               		dc.b $F8, 5, 0,	$41, 8
00009FEB 0809 0045 00               		dc.b 8,	9, 0, $45, 0
00009FF0 1008 004B E8               		dc.b $10, 8, 0,	$4B, $E8
00009FF5 180C 004E F0               		dc.b $18, $C, 0, $4E, $F0
00009FFA 04                         byte_A036:	dc.b 4
00009FFB E007 0052 F4               		dc.b $E0, 7, 0,	$52, $F4
0000A000 E003 0852 04               		dc.b $E0, 3, 8,	$52, 4
0000A005 0007 005A F4               		dc.b 0,	7, 0, $5A, $F4
0000A00A 0003 085A 04               		dc.b 0,	3, 8, $5A, 4
0000A00F 08                         byte_A04B:	dc.b 8
0000A010 E00C 082C F0               		dc.b $E0, $C, 8, $2C, $F0
0000A015 E808 0830 00               		dc.b $E8, 8, 8,	$30, 0
0000A01A E809 0833 E8               		dc.b $E8, 9, 8,	$33, $E8
0000A01F F007 0839 08               		dc.b $F0, 7, 8,	$39, 8
0000A024 F805 0841 E8               		dc.b $F8, 5, 8,	$41, $E8
0000A029 0809 0845 E8               		dc.b 8,	9, 8, $45, $E8
0000A02E 1008 084B 00               		dc.b $10, 8, 8,	$4B, 0
0000A033 180C 084E F0               		dc.b $18, $C, 8, $4E, $F0
0000A038                            		even
0000A038                            		even
0000A038                            
0000A038                            ; ---------------------------------------------------------------------------
0000A038                            ; Sprite mappings - flash effect when you collect the giant ring
0000A038                            ; ---------------------------------------------------------------------------
0000A038                            Map_obj7C:
0000A038                            	include "_maps\obj7C.asm"
0000A038                            ; ---------------------------------------------------------------------------
0000A038                            ; Sprite mappings - flash effect when you collect the giant ring
0000A038                            ; ---------------------------------------------------------------------------
0000A038 0000 0000                  		dc.w byte_A084-Map_obj7C, byte_A08F-Map_obj7C
0000A03C 0000 0000                  		dc.w byte_A0A4-Map_obj7C, byte_A0B9-Map_obj7C
0000A040 0000 0000                  		dc.w byte_A0CE-Map_obj7C, byte_A0E3-Map_obj7C
0000A044 0000 0000                  		dc.w byte_A0F8-Map_obj7C, byte_A103-Map_obj7C
0000A048 02                         byte_A084:	dc.b 2
0000A049 E00F 0000 00               		dc.b $E0, $F, 0, 0, 0
0000A04E 000F 1000 00               		dc.b 0,	$F, $10, 0, 0
0000A053 04                         byte_A08F:	dc.b 4
0000A054 E00F 0010 F0               		dc.b $E0, $F, 0, $10, $F0
0000A059 E007 0020 10               		dc.b $E0, 7, 0,	$20, $10
0000A05E 000F 1010 F0               		dc.b 0,	$F, $10, $10, $F0
0000A063 0007 1020 10               		dc.b 0,	7, $10,	$20, $10
0000A068 04                         byte_A0A4:	dc.b 4
0000A069 E00F 0028 E8               		dc.b $E0, $F, 0, $28, $E8
0000A06E E00B 0038 08               		dc.b $E0, $B, 0, $38, 8
0000A073 000F 1028 E8               		dc.b 0,	$F, $10, $28, $E8
0000A078 000B 1038 08               		dc.b 0,	$B, $10, $38, 8
0000A07D 04                         byte_A0B9:	dc.b 4
0000A07E E00F 0834 E0               		dc.b $E0, $F, 8, $34, $E0
0000A083 E00F 0034 00               		dc.b $E0, $F, 0, $34, 0
0000A088 000F 1834 E0               		dc.b 0,	$F, $18, $34, $E0
0000A08D 000F 1034 00               		dc.b 0,	$F, $10, $34, 0
0000A092 04                         byte_A0CE:	dc.b 4
0000A093 E00B 0838 E0               		dc.b $E0, $B, 8, $38, $E0
0000A098 E00F 0828 F8               		dc.b $E0, $F, 8, $28, $F8
0000A09D 000B 1838 E0               		dc.b 0,	$B, $18, $38, $E0
0000A0A2 000F 1828 F8               		dc.b 0,	$F, $18, $28, $F8
0000A0A7 04                         byte_A0E3:	dc.b 4
0000A0A8 E007 0820 E0               		dc.b $E0, 7, 8,	$20, $E0
0000A0AD E00F 0810 F0               		dc.b $E0, $F, 8, $10, $F0
0000A0B2 0007 1820 E0               		dc.b 0,	7, $18,	$20, $E0
0000A0B7 000F 1810 F0               		dc.b 0,	$F, $18, $10, $F0
0000A0BC 02                         byte_A0F8:	dc.b 2
0000A0BD E00F 0800 E0               		dc.b $E0, $F, 8, 0, $E0
0000A0C2 000F 1800 E0               		dc.b 0,	$F, $18, 0, $E0
0000A0C7 04                         byte_A103:	dc.b 4
0000A0C8 E00F 0044 E0               		dc.b $E0, $F, 0, $44, $E0
0000A0CD E00F 0844 00               		dc.b $E0, $F, 8, $44, 0
0000A0D2 000F 1044 E0               		dc.b 0,	$F, $10, $44, $E0
0000A0D7 000F 1844 00               		dc.b 0,	$F, $18, $44, 0
0000A0DC                            		even
0000A0DC                            		even
0000A0DC                            
0000A0DC                            ; ===========================================================================
0000A0DC                            ; ---------------------------------------------------------------------------
0000A0DC                            ; Object 26 - monitors
0000A0DC                            ; ---------------------------------------------------------------------------
0000A0DC                            
0000A0DC                            Obj26:					; XREF: Obj_Index
0000A0DC 7000                       		moveq	#0,d0
0000A0DE 1028 0024                  		move.b	$24(a0),d0
0000A0E2 323B 0000                  		move.w	Obj26_Index(pc,d0.w),d1
0000A0E6 4EFB 1000                  		jmp	Obj26_Index(pc,d1.w)
0000A0EA                            ; ===========================================================================
0000A0EA 0000                       Obj26_Index:	dc.w Obj26_Main-Obj26_Index
0000A0EC 0000                       		dc.w Obj26_Solid-Obj26_Index
0000A0EE 0000                       		dc.w Obj26_BreakOpen-Obj26_Index
0000A0F0 0000                       		dc.w Obj26_Animate-Obj26_Index
0000A0F2 0000                       		dc.w Obj26_Display-Obj26_Index
0000A0F4                            ; ===========================================================================
0000A0F4                            
0000A0F4                            Obj26_Main:				; XREF: Obj26_Index
0000A0F4 5428 0024                  		addq.b	#2,$24(a0)
0000A0F8 117C 000E 0016             		move.b	#$E,$16(a0)
0000A0FE 117C 000E 0017             		move.b	#$E,$17(a0)
0000A104 217C 0000 0000 0004        		move.l	#Map_obj26,4(a0)
0000A10C 317C 0680 0002             		move.w	#$680,2(a0)
0000A112 117C 0004 0001             		move.b	#4,1(a0)
0000A118 117C 0003 0018             		move.b	#3,$18(a0)
0000A11E 117C 000F 0019             		move.b	#$F,$19(a0)
0000A124 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A128 7000                       		moveq	#0,d0
0000A12A 1028 0023                  		move.b	$23(a0),d0
0000A12E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000A134 0832 0000 0002             		btst	#0,2(a2,d0.w)	; has monitor been broken?
0000A13A 6700                       		beq.s	Obj26_NotBroken	; if not, branch
0000A13C 117C 0008 0024             		move.b	#8,$24(a0)	; run "Obj26_Display" routine
0000A142 117C 000B 001A             		move.b	#$B,$1A(a0)	; use broken monitor frame
0000A148 4E75                       		rts	
0000A14A                            ; ===========================================================================
0000A14A                            
0000A14A                            Obj26_NotBroken:			; XREF: Obj26_Main
0000A14A 117C 0046 0020             		move.b	#$46,$20(a0)
0000A150 1168 0028 001C             		move.b	$28(a0),$1C(a0)
0000A156                            
0000A156                            Obj26_Solid:				; XREF: Obj26_Index
0000A156 1028 0025                  		move.b	$25(a0),d0	; is monitor set to fall?
0000A15A 6700                       		beq.s	loc_A1EC	; if not, branch
0000A15C 5500                       		subq.b	#2,d0
0000A15E 6600                       		bne.s	Obj26_Fall
0000A160 7200                       		moveq	#0,d1
0000A162 1228 0019                  		move.b	$19(a0),d1
0000A166 0641 000B                  		addi.w	#$B,d1
0000A16A 6100 D43E                  		bsr.w	ExitPlatform
0000A16E 0829 0003 0022             		btst	#3,$22(a1)
0000A174 6600 0000                  		bne.w	loc_A1BC
0000A178 4228 0025                  		clr.b	$25(a0)
0000A17C 6000 0000                  		bra.w	Obj26_Animate
0000A180                            ; ===========================================================================
0000A180                            
0000A180                            loc_A1BC:				; XREF: Obj26_Solid
0000A180 363C 0010                  		move.w	#$10,d3
0000A184 3428 0008                  		move.w	8(a0),d2
0000A188 6100 D97E                  		bsr.w	MvSonicOnPtfm
0000A18C 6000 0000                  		bra.w	Obj26_Animate
0000A190                            ; ===========================================================================
0000A190                            
0000A190                            Obj26_Fall:				; XREF: Obj26_Solid
0000A190 6100 0000                  		bsr.w	ObjectFall
0000A194 4EB9 0000 0000             		jsr	ObjHitFloor
0000A19A 4A41                       		tst.w	d1
0000A19C 6A00 0000                  		bpl.w	Obj26_Animate
0000A1A0 D368 000C                  		add.w	d1,$C(a0)
0000A1A4 4268 0012                  		clr.w	$12(a0)
0000A1A8 4228 0025                  		clr.b	$25(a0)
0000A1AC 6000 0000                  		bra.w	Obj26_Animate
0000A1B0                            ; ===========================================================================
0000A1B0                            
0000A1B0                            loc_A1EC:				; XREF: Obj26_Solid
0000A1B0 323C 001A                  		move.w	#$1A,d1
0000A1B4 343C 000F                  		move.w	#$F,d2
0000A1B8 6100 0000                  		bsr.w	Obj26_SolidSides
0000A1BC 6700 0000                  		beq.w	loc_A25C
0000A1C0 4A69 0012                  		tst.w	$12(a1)
0000A1C4 6B00                       		bmi.s	loc_A20A
0000A1C6 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000A1CC 6700                       		beq.s	loc_A25C	; if yes, branch
0000A1CE                            
0000A1CE                            loc_A20A:
0000A1CE 4A41                       		tst.w	d1
0000A1D0 6A00                       		bpl.s	loc_A220
0000A1D2 9769 000C                  		sub.w	d3,$C(a1)
0000A1D6 6100 D2C0                  		bsr.w	loc_74AE
0000A1DA 117C 0002 0025             		move.b	#2,$25(a0)
0000A1E0 6000 0000                  		bra.w	Obj26_Animate
0000A1E4                            ; ===========================================================================
0000A1E4                            
0000A1E4                            loc_A220:
0000A1E4 4A40                       		tst.w	d0
0000A1E6 6700 0000                  		beq.w	loc_A246
0000A1EA 6B00                       		bmi.s	loc_A230
0000A1EC 4A69 0010                  		tst.w	$10(a1)
0000A1F0 6B00                       		bmi.s	loc_A246
0000A1F2 6000                       		bra.s	loc_A236
0000A1F4                            ; ===========================================================================
0000A1F4                            
0000A1F4                            loc_A230:
0000A1F4 4A69 0010                  		tst.w	$10(a1)
0000A1F8 6A00                       		bpl.s	loc_A246
0000A1FA                            
0000A1FA                            loc_A236:
0000A1FA 9169 0008                  		sub.w	d0,8(a1)
0000A1FE 337C 0000 0014             		move.w	#0,$14(a1)
0000A204 337C 0000 0010             		move.w	#0,$10(a1)
0000A20A                            
0000A20A                            loc_A246:
0000A20A 0829 0001 0022             		btst	#1,$22(a1)
0000A210 6600                       		bne.s	loc_A26A
0000A212 08E9 0005 0022             		bset	#5,$22(a1)
0000A218 08E8 0005 0022             		bset	#5,$22(a0)
0000A21E 6000                       		bra.s	Obj26_Animate
0000A220                            ; ===========================================================================
0000A220                            
0000A220                            loc_A25C:
0000A220 0828 0005 0022             		btst	#5,$22(a0)
0000A226 6700                       		beq.s	Obj26_Animate
0000A228 337C 0001 001C             		move.w	#1,$1C(a1)
0000A22E                            
0000A22E                            loc_A26A:
0000A22E 08A8 0005 0022             		bclr	#5,$22(a0)
0000A234 08A9 0005 0022             		bclr	#5,$22(a1)
0000A23A                            
0000A23A                            Obj26_Animate:				; XREF: Obj26_Index
0000A23A 43F9 0000 0000             		lea	(Ani_obj26).l,a1
0000A240 6100 0000                  		bsr.w	AnimateSprite
0000A244                            
0000A244                            Obj26_Display:				; XREF: Obj26_Index
0000A244 6100 0000                  		bsr.w	DisplaySprite
0000A248 3028 0008                  		move.w	8(a0),d0
0000A24C 0240 FF80                  		andi.w	#$FF80,d0
0000A250 3238 F700                  		move.w	($FFFFF700).w,d1
0000A254 0441 0080                  		subi.w	#$80,d1
0000A258 0241 FF80                  		andi.w	#$FF80,d1
0000A25C 9041                       		sub.w	d1,d0
0000A25E 0C40 0280                  		cmpi.w	#$280,d0
0000A262 6200 0000                  		bhi.w	DeleteObject
0000A266 4E75                       		rts	
0000A268                            ; ===========================================================================
0000A268                            
0000A268                            Obj26_BreakOpen:			; XREF: Obj26_Index
0000A268 5428 0024                  		addq.b	#2,$24(a0)
0000A26C 117C 0000 0020             		move.b	#0,$20(a0)
0000A272 6100 0000                  		bsr.w	SingleObjLoad
0000A276 6600                       		bne.s	Obj26_Explode
0000A278 12BC 002E                  		move.b	#$2E,0(a1)	; load monitor contents	object
0000A27C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A282 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A288 1368 001C 001C             		move.b	$1C(a0),$1C(a1)
0000A28E                            
0000A28E                            Obj26_Explode:
0000A28E 6100 0000                  		bsr.w	SingleObjLoad
0000A292 6600                       		bne.s	Obj26_SetBroken
0000A294 12BC 0027                  		move.b	#$27,0(a1)	; load explosion object
0000A298 5429 0024                  		addq.b	#2,$24(a1)
0000A29C 3368 0008 0008             		move.w	8(a0),8(a1)
0000A2A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000A2A8                            
0000A2A8                            Obj26_SetBroken:
0000A2A8 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000A2AC 7000                       		moveq	#0,d0
0000A2AE 1028 0023                  		move.b	$23(a0),d0
0000A2B2 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000A2B8 117C 0009 001C             		move.b	#9,$1C(a0)	; set monitor type to broken
0000A2BE 6000 0000                  		bra.w	DisplaySprite
0000A2C2                            ; ===========================================================================
0000A2C2                            ; ---------------------------------------------------------------------------
0000A2C2                            ; Object 2E - contents of monitors
0000A2C2                            ; ---------------------------------------------------------------------------
0000A2C2                            
0000A2C2                            Obj2E:					; XREF: Obj_Index
0000A2C2 7000                       		moveq	#0,d0
0000A2C4 1028 0024                  		move.b	$24(a0),d0
0000A2C8 323B 0000                  		move.w	Obj2E_Index(pc,d0.w),d1
0000A2CC 4EBB 1000                  		jsr	Obj2E_Index(pc,d1.w)
0000A2D0 6000 0000                  		bra.w	DisplaySprite
0000A2D4                            ; ===========================================================================
0000A2D4 0000                       Obj2E_Index:	dc.w Obj2E_Main-Obj2E_Index
0000A2D6 0000                       		dc.w Obj2E_Move-Obj2E_Index
0000A2D8 0000                       		dc.w Obj2E_Delete-Obj2E_Index
0000A2DA                            ; ===========================================================================
0000A2DA                            
0000A2DA                            Obj2E_Main:				; XREF: Obj2E_Index
0000A2DA 5428 0024                  		addq.b	#2,$24(a0)
0000A2DE 317C 0680 0002             		move.w	#$680,2(a0)
0000A2E4 117C 0024 0001             		move.b	#$24,1(a0)
0000A2EA 117C 0003 0018             		move.b	#3,$18(a0)
0000A2F0 117C 0008 0019             		move.b	#8,$19(a0)
0000A2F6 317C FD00 0012             		move.w	#-$300,$12(a0)
0000A2FC 7000                       		moveq	#0,d0
0000A2FE 1028 001C                  		move.b	$1C(a0),d0
0000A302 5400                       		addq.b	#2,d0
0000A304 1140 001A                  		move.b	d0,$1A(a0)
0000A308 227C 0000 0000             		movea.l	#Map_obj26,a1
0000A30E D000                       		add.b	d0,d0
0000A310 D2F1 0000                  		adda.w	(a1,d0.w),a1
0000A314 5249                       		addq.w	#1,a1
0000A316 2149 0004                  		move.l	a1,4(a0)
0000A31A                            
0000A31A                            Obj2E_Move:				; XREF: Obj2E_Index
0000A31A 4A68 0012                  		tst.w	$12(a0)		; is object moving?
0000A31E 6A00 0000                  		bpl.w	Obj2E_ChkEggman	; if not, branch
0000A322 6100 0000                  		bsr.w	SpeedToPos
0000A326 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce object	speed
0000A32C 4E75                       		rts	
0000A32E                            ; ===========================================================================
0000A32E                            
0000A32E                            Obj2E_ChkEggman:			; XREF: Obj2E_Move
0000A32E 5428 0024                  		addq.b	#2,$24(a0)
0000A332 317C 001D 001E             		move.w	#29,$1E(a0)
0000A338 1028 001C                  		move.b	$1C(a0),d0
0000A33C 0C00 0001                  		cmpi.b	#1,d0		; does monitor contain Eggman?
0000A340 6600                       		bne.s	Obj2E_ChkSonic
0000A342 4E75                       		rts			; Eggman monitor does nothing
0000A344                            ; ===========================================================================
0000A344                            
0000A344                            Obj2E_ChkSonic:
0000A344 0C00 0002                  		cmpi.b	#2,d0		; does monitor contain Sonic?
0000A348 6600                       		bne.s	Obj2E_ChkShoes
0000A34A                            
0000A34A                            ExtraLife:
0000A34A 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to the	number of lives	you have
0000A34E 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to the	lives counter
0000A352 303C 0088                  		move.w	#$88,d0
0000A356 4EF9 0000 1396             		jmp	(PlaySound).l	; play extra life music
0000A35C                            ; ===========================================================================
0000A35C                            
0000A35C                            Obj2E_ChkShoes:
0000A35C 0C00 0003                  		cmpi.b	#3,d0		; does monitor contain speed shoes?
0000A360 6600                       		bne.s	Obj2E_ChkShield
0000A362 11FC 0001 FE2E             		move.b	#1,($FFFFFE2E).w ; speed up the	BG music
0000A368 31FC 04B0 D034             		move.w	#$4B0,($FFFFD034).w ; time limit for the power-up
0000A36E 31FC 0C00 F760             		move.w	#$C00,($FFFFF760).w ; change Sonic's top speed
0000A374 31FC 0018 F762             		move.w	#$18,($FFFFF762).w
0000A37A 31FC 0080 F764             		move.w	#$80,($FFFFF764).w
0000A380 303C 00E2                  		move.w	#$E2,d0
0000A384 4EF9 0000 1396             		jmp	(PlaySound).l	; Speed	up the music
0000A38A                            ; ===========================================================================
0000A38A                            
0000A38A                            Obj2E_ChkShield:
0000A38A 0C00 0004                  		cmpi.b	#4,d0		; does monitor contain a shield?
0000A38E 6600                       		bne.s	Obj2E_ChkInvinc
0000A390 11FC 0001 FE2C             		move.b	#1,($FFFFFE2C).w ; give	Sonic a	shield
0000A396 11FC 0038 D180             		move.b	#$38,($FFFFD180).w ; load shield object	($38)
0000A39C 303C 00AF                  		move.w	#$AF,d0
0000A3A0 4EF9 0000 1396             		jmp	(PlaySound).l	; play shield sound
0000A3A6                            ; ===========================================================================
0000A3A6                            
0000A3A6                            Obj2E_ChkInvinc:
0000A3A6 0C00 0005                  		cmpi.b	#5,d0		; does monitor contain invincibility?
0000A3AA 6600                       		bne.s	Obj2E_ChkRings
0000A3AC 11FC 0001 FE2D             		move.b	#1,($FFFFFE2D).w ; make	Sonic invincible
0000A3B2 31FC 04B0 D032             		move.w	#$4B0,($FFFFD032).w ; time limit for the power-up
0000A3B8 11FC 0038 D200             		move.b	#$38,($FFFFD200).w ; load stars	object ($3801)
0000A3BE 11FC 0001 D21C             		move.b	#1,($FFFFD21C).w
0000A3C4 11FC 0038 D240             		move.b	#$38,($FFFFD240).w ; load stars	object ($3802)
0000A3CA 11FC 0002 D25C             		move.b	#2,($FFFFD25C).w
0000A3D0 11FC 0038 D280             		move.b	#$38,($FFFFD280).w ; load stars	object ($3803)
0000A3D6 11FC 0003 D29C             		move.b	#3,($FFFFD29C).w
0000A3DC 11FC 0038 D2C0             		move.b	#$38,($FFFFD2C0).w ; load stars	object ($3804)
0000A3E2 11FC 0004 D2DC             		move.b	#4,($FFFFD2DC).w
0000A3E8 4A38 F7AA                  		tst.b	($FFFFF7AA).w	; is boss mode on?
0000A3EC 6600                       		bne.s	Obj2E_NoMusic	; if yes, branch
0000A3EE 303C 0087                  		move.w	#$87,d0
0000A3F2 4EF9 0000 1396             		jmp	(PlaySound).l	; play invincibility music
0000A3F8                            ; ===========================================================================
0000A3F8                            
0000A3F8                            Obj2E_NoMusic:
0000A3F8 4E75                       		rts	
0000A3FA                            ; ===========================================================================
0000A3FA                            
0000A3FA                            Obj2E_ChkRings:
0000A3FA 0C00 0006                  		cmpi.b	#6,d0		; does monitor contain 10 rings?
0000A3FE 6600                       		bne.s	Obj2E_ChkS
0000A400 0678 000A FE20             		addi.w	#$A,($FFFFFE20).w ; add	10 rings to the	number of rings	you have
0000A406 0038 0001 FE1D             		ori.b	#1,($FFFFFE1D).w ; update the ring counter
0000A40C 0C78 0064 FE20             		cmpi.w	#100,($FFFFFE20).w ; check if you have 100 rings
0000A412 6500                       		bcs.s	Obj2E_RingSound
0000A414 08F8 0001 FE1B             		bset	#1,($FFFFFE1B).w
0000A41A 6700 FF2E                  		beq.w	ExtraLife
0000A41E 0C78 00C8 FE20             		cmpi.w	#200,($FFFFFE20).w ; check if you have 200 rings
0000A424 6500                       		bcs.s	Obj2E_RingSound
0000A426 08F8 0002 FE1B             		bset	#2,($FFFFFE1B).w
0000A42C 6700 FF1C                  		beq.w	ExtraLife
0000A430                            
0000A430                            Obj2E_RingSound:
0000A430 303C 00B5                  		move.w	#$B5,d0
0000A434 4EF9 0000 1396             		jmp	(PlaySound).l	; play ring sound
0000A43A                            ; ===========================================================================
0000A43A                            
0000A43A                            Obj2E_ChkS:
0000A43A 0C00 0007                  		cmpi.b	#7,d0		; does monitor contain 'S'
0000A43E 6600                       		bne.s	Obj2E_ChkEnd
0000A440 4E71                       		nop	
0000A442                            
0000A442                            Obj2E_ChkEnd:
0000A442 4E75                       		rts			; 'S' and goggles monitors do nothing
0000A444                            ; ===========================================================================
0000A444                            
0000A444                            Obj2E_Delete:				; XREF: Obj2E_Index
0000A444 5368 001E                  		subq.w	#1,$1E(a0)
0000A448 6B00 0000                  		bmi.w	DeleteObject
0000A44C 4E75                       		rts	
0000A44E                            ; ---------------------------------------------------------------------------
0000A44E                            ; Subroutine to	make the sides of a monitor solid
0000A44E                            ; ---------------------------------------------------------------------------
0000A44E                            
0000A44E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A44E                            
0000A44E                            
0000A44E                            Obj26_SolidSides:			; XREF: loc_A1EC
0000A44E 43F8 D000                  		lea	($FFFFD000).w,a1
0000A452 3029 0008                  		move.w	8(a1),d0
0000A456 9068 0008                  		sub.w	8(a0),d0
0000A45A D041                       		add.w	d1,d0
0000A45C 6B00                       		bmi.s	loc_A4E6
0000A45E 3601                       		move.w	d1,d3
0000A460 D643                       		add.w	d3,d3
0000A462 B043                       		cmp.w	d3,d0
0000A464 6200                       		bhi.s	loc_A4E6
0000A466 1629 0016                  		move.b	$16(a1),d3
0000A46A 4883                       		ext.w	d3
0000A46C D443                       		add.w	d3,d2
0000A46E 3629 000C                  		move.w	$C(a1),d3
0000A472 9668 000C                  		sub.w	$C(a0),d3
0000A476 D642                       		add.w	d2,d3
0000A478 6B00                       		bmi.s	loc_A4E6
0000A47A D442                       		add.w	d2,d2
0000A47C B642                       		cmp.w	d2,d3
0000A47E 6400                       		bcc.s	loc_A4E6
0000A480 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000A484 6B00                       		bmi.s	loc_A4E6
0000A486 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000A48C 6400                       		bcc.s	loc_A4E6
0000A48E 4A78 FE08                  		tst.w	($FFFFFE08).w
0000A492 6600                       		bne.s	loc_A4E6
0000A494 B240                       		cmp.w	d0,d1
0000A496 6400                       		bcc.s	loc_A4DC
0000A498 D241                       		add.w	d1,d1
0000A49A 9041                       		sub.w	d1,d0
0000A49C                            
0000A49C                            loc_A4DC:
0000A49C 0C43 0010                  		cmpi.w	#$10,d3
0000A4A0 6500                       		bcs.s	loc_A4EA
0000A4A2                            
0000A4A2                            loc_A4E2:
0000A4A2 7201                       		moveq	#1,d1
0000A4A4 4E75                       		rts	
0000A4A6                            ; ===========================================================================
0000A4A6                            
0000A4A6                            loc_A4E6:
0000A4A6 7200                       		moveq	#0,d1
0000A4A8 4E75                       		rts	
0000A4AA                            ; ===========================================================================
0000A4AA                            
0000A4AA                            loc_A4EA:
0000A4AA 7200                       		moveq	#0,d1
0000A4AC 1228 0019                  		move.b	$19(a0),d1
0000A4B0 5841                       		addq.w	#4,d1
0000A4B2 3401                       		move.w	d1,d2
0000A4B4 D442                       		add.w	d2,d2
0000A4B6 D269 0008                  		add.w	8(a1),d1
0000A4BA 9268 0008                  		sub.w	8(a0),d1
0000A4BE 6BE2                       		bmi.s	loc_A4E2
0000A4C0 B242                       		cmp.w	d2,d1
0000A4C2 64DE                       		bcc.s	loc_A4E2
0000A4C4 72FF                       		moveq	#-1,d1
0000A4C6 4E75                       		rts	
0000A4C8                            ; End of function Obj26_SolidSides
0000A4C8                            
0000A4C8                            ; ===========================================================================
0000A4C8                            Ani_obj26:
0000A4C8                            	include "_anim\obj26.asm"
0000A4C8                            ; ---------------------------------------------------------------------------
0000A4C8                            ; Animation script - monitors
0000A4C8                            ; ---------------------------------------------------------------------------
0000A4C8 0000 0000 0000             		dc.w byte_A51C-Ani_obj26, byte_A522-Ani_obj26, byte_A52E-Ani_obj26
0000A4CE 0000 0000 0000             		dc.w byte_A53A-Ani_obj26, byte_A546-Ani_obj26, byte_A552-Ani_obj26
0000A4D4 0000 0000 0000             		dc.w byte_A55E-Ani_obj26, byte_A56A-Ani_obj26, byte_A576-Ani_obj26
0000A4DA 0000                       		dc.w byte_A582-Ani_obj26
0000A4DC 0100 0102 FF00             byte_A51C:	dc.b 1,	0, 1, 2, $FF, 0
0000A4E2 0100 0303 0103 0302 0303+  byte_A522:	dc.b 1,	0, 3, 3, 1, 3, 3, 2, 3,	3, $FF,	0
0000A4EE 0100 0404 0104 0402 0404+  byte_A52E:	dc.b 1,	0, 4, 4, 1, 4, 4, 2, 4,	4, $FF,	0
0000A4FA 0100 0505 0105 0502 0505+  byte_A53A:	dc.b 1,	0, 5, 5, 1, 5, 5, 2, 5,	5, $FF,	0
0000A506 0100 0606 0106 0602 0606+  byte_A546:	dc.b 1,	0, 6, 6, 1, 6, 6, 2, 6,	6, $FF,	0
0000A512 0100 0707 0107 0702 0707+  byte_A552:	dc.b 1,	0, 7, 7, 1, 7, 7, 2, 7,	7, $FF,	0
0000A51E 0100 0808 0108 0802 0808+  byte_A55E:	dc.b 1,	0, 8, 8, 1, 8, 8, 2, 8,	8, $FF,	0
0000A52A 0100 0909 0109 0902 0909+  byte_A56A:	dc.b 1,	0, 9, 9, 1, 9, 9, 2, 9,	9, $FF,	0
0000A536 0100 0A0A 010A 0A02 0A0A+  byte_A576:	dc.b 1,	0, $A, $A, 1, $A, $A, 2, $A, $A, $FF, 0
0000A542 0200 0102 0BFE 0100        byte_A582:	dc.b 2,	0, 1, 2, $B, $FE, 1, 0
0000A54A                            		even
0000A54A                            		even
0000A54A                            
0000A54A                            ; ---------------------------------------------------------------------------
0000A54A                            ; Sprite mappings - monitors
0000A54A                            ; ---------------------------------------------------------------------------
0000A54A                            Map_obj26:
0000A54A                            	include "_maps\obj26.asm"
0000A54A                            ; ---------------------------------------------------------------------------
0000A54A                            ; Sprite mappings - monitors
0000A54A                            ; ---------------------------------------------------------------------------
0000A54A 0000 0000                  		dc.w byte_A5A2-Map_obj26, byte_A5A8-Map_obj26
0000A54E 0000 0000                  		dc.w byte_A5B3-Map_obj26, byte_A5BE-Map_obj26
0000A552 0000 0000                  		dc.w byte_A5C9-Map_obj26, byte_A5D4-Map_obj26
0000A556 0000 0000                  		dc.w byte_A5DF-Map_obj26, byte_A5EA-Map_obj26
0000A55A 0000 0000                  		dc.w byte_A5F5-Map_obj26, byte_A600-Map_obj26
0000A55E 0000 0000                  		dc.w byte_A60B-Map_obj26, byte_A616-Map_obj26
0000A562 01                         byte_A5A2:	dc.b 1			; static monitor
0000A563 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A568 02                         byte_A5A8:	dc.b 2			; static monitor
0000A569 F505 0010 F8               		dc.b $F5, 5, 0,	$10, $F8
0000A56E EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A573 02                         byte_A5B3:	dc.b 2			; static monitor
0000A574 F505 0014 F8               		dc.b $F5, 5, 0,	$14, $F8
0000A579 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A57E 02                         byte_A5BE:	dc.b 2			; Eggman monitor
0000A57F F505 0018 F8               		dc.b $F5, 5, 0,	$18, $F8
0000A584 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A589 02                         byte_A5C9:	dc.b 2			; Sonic	monitor
0000A58A F505 001C F8               		dc.b $F5, 5, 0,	$1C, $F8
0000A58F EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A594 02                         byte_A5D4:	dc.b 2			; speed	shoes monitor
0000A595 F505 0024 F8               		dc.b $F5, 5, 0,	$24, $F8
0000A59A EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A59F 02                         byte_A5DF:	dc.b 2			; shield monitor
0000A5A0 F505 0028 F8               		dc.b $F5, 5, 0,	$28, $F8
0000A5A5 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5AA 02                         byte_A5EA:	dc.b 2			; invincibility	monitor
0000A5AB F505 002C F8               		dc.b $F5, 5, 0,	$2C, $F8
0000A5B0 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5B5 02                         byte_A5F5:	dc.b 2			; 10 rings monitor
0000A5B6 F505 0030 F8               		dc.b $F5, 5, 0,	$30, $F8
0000A5BB EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5C0 02                         byte_A600:	dc.b 2			; 'S' monitor
0000A5C1 F505 0034 F8               byte_A601:	dc.b $F5, 5, 0,	$34, $F8
0000A5C6 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5CB 02                         byte_A60B:	dc.b 2			; goggles monitor
0000A5CC F505 0020 F8               		dc.b $F5, 5, 0,	$20, $F8
0000A5D1 EF0F 0000 F0               		dc.b $EF, $F, 0, 0, $F0
0000A5D6 01                         byte_A616:	dc.b 1			; broken monitor
0000A5D7 FF0D 0038 F0               		dc.b $FF, $D, 0, $38, $F0
0000A5DC                            		even
0000A5DC                            		even
0000A5DC                            
0000A5DC                            ; ===========================================================================
0000A5DC                            ; ---------------------------------------------------------------------------
0000A5DC                            ; Object 0E - Sonic on the title screen
0000A5DC                            ; ---------------------------------------------------------------------------
0000A5DC                            
0000A5DC                            Obj0E:					; XREF: Obj_Index
0000A5DC 7000                       		moveq	#0,d0
0000A5DE 1028 0024                  		move.b	$24(a0),d0
0000A5E2 323B 0000                  		move.w	Obj0E_Index(pc,d0.w),d1
0000A5E6 4EFB 1000                  		jmp	Obj0E_Index(pc,d1.w)
0000A5EA                            ; ===========================================================================
0000A5EA 0000                       Obj0E_Index:	dc.w Obj0E_Main-Obj0E_Index
0000A5EC 0000                       		dc.w Obj0E_Delay-Obj0E_Index
0000A5EE 0000                       		dc.w Obj0E_Move-Obj0E_Index
0000A5F0 0000                       		dc.w Obj0E_Animate-Obj0E_Index
0000A5F2                            ; ===========================================================================
0000A5F2                            
0000A5F2                            Obj0E_Main:				; XREF: Obj0E_Index
0000A5F2 5428 0024                  		addq.b	#2,$24(a0)
0000A5F6 317C 00F0 0008             		move.w	#$F0,8(a0)
0000A5FC 317C 00DE 000A             		move.w	#$DE,$A(a0)
0000A602 217C 0000 0000 0004        		move.l	#Map_obj0E,4(a0)
0000A60A 317C 2300 0002             		move.w	#$2300,2(a0)
0000A610 117C 0001 0018             		move.b	#1,$18(a0)
0000A616 117C 001D 001F             		move.b	#29,$1F(a0)	; set time delay to 0.5	seconds
0000A61C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A622 6100 0000                  		bsr.w	AnimateSprite
0000A626                            
0000A626                            Obj0E_Delay:				; XREF: Obj0E_Index
0000A626 5328 001F                  		subq.b	#1,$1F(a0)	; subtract 1 from time delay
0000A62A 6A00                       		bpl.s	Obj0E_Wait	; if time remains, branch
0000A62C 5428 0024                  		addq.b	#2,$24(a0)	; go to	next routine
0000A630 6000 0000                  		bra.w	DisplaySprite
0000A634                            ; ===========================================================================
0000A634                            
0000A634                            Obj0E_Wait:				; XREF: Obj0E_Delay
0000A634 4E75                       		rts	
0000A636                            ; ===========================================================================
0000A636                            
0000A636                            Obj0E_Move:				; XREF: Obj0E_Index
0000A636 5168 000A                  		subq.w	#8,$A(a0)
0000A63A 0C68 0096 000A             		cmpi.w	#$96,$A(a0)
0000A640 6600                       		bne.s	Obj0E_Display
0000A642 5428 0024                  		addq.b	#2,$24(a0)
0000A646                            
0000A646                            Obj0E_Display:
0000A646 6000 0000                  		bra.w	DisplaySprite
0000A64A                            ; ===========================================================================
0000A64A 4E75                       		rts	
0000A64C                            ; ===========================================================================
0000A64C                            
0000A64C                            Obj0E_Animate:				; XREF: Obj0E_Index
0000A64C 43F9 0000 0000             		lea	(Ani_obj0E).l,a1
0000A652 6100 0000                  		bsr.w	AnimateSprite
0000A656 6000 0000                  		bra.w	DisplaySprite
0000A65A                            ; ===========================================================================
0000A65A 4E75                       		rts	
0000A65C                            ; ===========================================================================
0000A65C                            ; ---------------------------------------------------------------------------
0000A65C                            ; Object 0F - "PRESS START BUTTON" and "TM" from title screen
0000A65C                            ; ---------------------------------------------------------------------------
0000A65C                            
0000A65C                            Obj0F:					; XREF: Obj_Index
0000A65C 7000                       		moveq	#0,d0
0000A65E 1028 0024                  		move.b	$24(a0),d0
0000A662 323B 0000                  		move.w	Obj0F_Index(pc,d0.w),d1
0000A666 4EBB 1000                  		jsr	Obj0F_Index(pc,d1.w)
0000A66A 6000 0000                  		bra.w	DisplaySprite
0000A66E                            ; ===========================================================================
0000A66E 0000                       Obj0F_Index:	dc.w Obj0F_Main-Obj0F_Index
0000A670 0000                       		dc.w Obj0F_PrsStart-Obj0F_Index
0000A672 0000                       		dc.w locret_A6F8-Obj0F_Index
0000A674                            ; ===========================================================================
0000A674                            
0000A674                            Obj0F_Main:				; XREF: Obj0F_Index
0000A674 5428 0024                  		addq.b	#2,$24(a0)
0000A678 317C 00D0 0008             		move.w	#$D0,8(a0)
0000A67E 317C 0130 000A             		move.w	#$130,$A(a0)
0000A684 217C 0000 0000 0004        		move.l	#Map_obj0F,4(a0)
0000A68C 317C 0200 0002             		move.w	#$200,2(a0)
0000A692 0C28 0002 001A             		cmpi.b	#2,$1A(a0)	; is object "PRESS START"?
0000A698 6500                       		bcs.s	Obj0F_PrsStart	; if yes, branch
0000A69A 5428 0024                  		addq.b	#2,$24(a0)
0000A69E 0C28 0003 001A             		cmpi.b	#3,$1A(a0)	; is the object	"TM"?
0000A6A4 6600                       		bne.s	locret_A6F8	; if not, branch
0000A6A6 317C 2510 0002             		move.w	#$2510,2(a0)	; "TM" specific	code
0000A6AC 317C 0170 0008             		move.w	#$170,8(a0)
0000A6B2 317C 00F8 000A             		move.w	#$F8,$A(a0)
0000A6B8                            
0000A6B8                            locret_A6F8:				; XREF: Obj0F_Index
0000A6B8 4E75                       		rts	
0000A6BA                            ; ===========================================================================
0000A6BA                            
0000A6BA                            Obj0F_PrsStart:				; XREF: Obj0F_Index
0000A6BA 43F9 0000 0000             		lea	(Ani_obj0F).l,a1
0000A6C0 6000 0000                  		bra.w	AnimateSprite
0000A6C4                            ; ===========================================================================
0000A6C4                            Ani_obj0E:
0000A6C4                            	include "_anim\obj0E.asm"
0000A6C4                            ; ---------------------------------------------------------------------------
0000A6C4                            ; Animation script - Sonic on the title screen
0000A6C4                            ; ---------------------------------------------------------------------------
0000A6C4 0000                       		dc.w byte_A706-Ani_obj0E
0000A6C6 0700 0102 0304 0506 07FE+  byte_A706:	dc.b 7,	0, 1, 2, 3, 4, 5, 6, 7,	$FE, 2,	0
0000A6D2                            		even
0000A6D2                            		even
0000A6D2                            
0000A6D2                            Ani_obj0F:
0000A6D2                            	include "_anim\obj0F.asm"
0000A6D2                            ; ---------------------------------------------------------------------------
0000A6D2                            ; Animation script - "TM" and "PRESS START BUTTON" on the title screen
0000A6D2                            ; ---------------------------------------------------------------------------
0000A6D2 0000                       		dc.w byte_A714-Ani_obj0F
0000A6D4 1F00 01FF                  byte_A714:	dc.b $1F, 0, 1,	$FF
0000A6D8                            		even
0000A6D8                            		even
0000A6D8                            
0000A6D8                            ; ---------------------------------------------------------------------------
0000A6D8                            ; Subroutine to	animate	a sprite using an animation script
0000A6D8                            ; ---------------------------------------------------------------------------
0000A6D8                            
0000A6D8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000A6D8                            
0000A6D8                            
0000A6D8                            AnimateSprite:
0000A6D8 7000                       		moveq	#0,d0
0000A6DA 1028 001C                  		move.b	$1C(a0),d0	; move animation number	to d0
0000A6DE B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0000A6E2 6700                       		beq.s	Anim_Run	; if not, branch
0000A6E4 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
0000A6E8 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A6EE 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0000A6F4                            
0000A6F4                            Anim_Run:
0000A6F4 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0000A6F8 6A00                       		bpl.s	Anim_Wait	; if time remains, branch
0000A6FA D040                       		add.w	d0,d0
0000A6FC D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
0000A700 1151 001E                  		move.b	(a1),$1E(a0)	; load frame duration
0000A704 7200                       		moveq	#0,d1
0000A706 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
0000A70A 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0000A70E 6B00                       		bmi.s	Anim_End_FF	; if animation is complete, branch
0000A710                            
0000A710                            Anim_Next:
0000A710 1200                       		move.b	d0,d1
0000A712 0200 001F                  		andi.b	#$1F,d0
0000A716 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
0000A71A 1028 0022                  		move.b	$22(a0),d0
0000A71E E719                       		rol.b	#3,d1
0000A720 B101                       		eor.b	d0,d1
0000A722 0201 0003                  		andi.b	#3,d1
0000A726 0228 00FC 0001             		andi.b	#$FC,1(a0)
0000A72C 8328 0001                  		or.b	d1,1(a0)
0000A730 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
0000A734                            
0000A734                            Anim_Wait:
0000A734 4E75                       		rts	
0000A736                            ; ===========================================================================
0000A736                            
0000A736                            Anim_End_FF:
0000A736 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0000A738 6600                       		bne.s	Anim_End_FE	; if not, branch
0000A73A 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
0000A740 1029 0001                  		move.b	1(a1),d0	; read sprite number
0000A744 60CA                       		bra.s	Anim_Next
0000A746                            ; ===========================================================================
0000A746                            
0000A746                            Anim_End_FE:
0000A746 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0000A748 6600                       		bne.s	Anim_End_FD	; if not, branch
0000A74A 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
0000A74E 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
0000A752 9200                       		sub.b	d0,d1
0000A754 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0000A758 60B6                       		bra.s	Anim_Next
0000A75A                            ; ===========================================================================
0000A75A                            
0000A75A                            Anim_End_FD:
0000A75A 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0000A75C 6600                       		bne.s	Anim_End_FC	; if not, branch
0000A75E 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
0000A764                            
0000A764                            Anim_End_FC:
0000A764 5200                       		addq.b	#1,d0		; is the end flag = $FC	?
0000A766 6600                       		bne.s	Anim_End_FB	; if not, branch
0000A768 5428 0024                  		addq.b	#2,$24(a0)	; jump to next routine
0000A76C                            
0000A76C                            Anim_End_FB:
0000A76C 5200                       		addq.b	#1,d0		; is the end flag = $FB	?
0000A76E 6600                       		bne.s	Anim_End_FA	; if not, branch
0000A770 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
0000A776 4228 0025                  		clr.b	$25(a0)		; reset	2nd routine counter
0000A77A                            
0000A77A                            Anim_End_FA:
0000A77A 5200                       		addq.b	#1,d0		; is the end flag = $FA	?
0000A77C 6600                       		bne.s	Anim_End	; if not, branch
0000A77E 5428 0025                  		addq.b	#2,$25(a0)	; jump to next routine
0000A782                            
0000A782                            Anim_End:
0000A782 4E75                       		rts	
0000A784                            ; End of function AnimateSprite
0000A784                            
0000A784                            ; ===========================================================================
0000A784                            ; ---------------------------------------------------------------------------
0000A784                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A784                            ; ---------------------------------------------------------------------------
0000A784                            Map_obj0F:
0000A784                            	include "_maps\obj0F.asm"
0000A784                            ; ---------------------------------------------------------------------------
0000A784                            ; Sprite mappings - "PRESS START BUTTON" and "TM" from title screen
0000A784                            ; ---------------------------------------------------------------------------
0000A784 0000                       		dc.w byte_A7CD-Map_obj0F
0000A786 0000                       		dc.w byte_A7CC-Map_obj0F
0000A788 0000                       		dc.w byte_A7EB-Map_obj0F
0000A78A 0000                       		dc.w byte_A882-Map_obj0F
0000A78C 06                         byte_A7CC:	dc.b 6			; "PRESS START BUTTON"
0000A78D 000C 00F0 00               byte_A7CD:	dc.b 0,	$C, 0, $F0, 0
0000A792 0000 00F3 20               		dc.b 0,	0, 0, $F3, $20
0000A797 0000 00F3 30               		dc.b 0,	0, 0, $F3, $30
0000A79C 000C 00F4 38               		dc.b 0,	$C, 0, $F4, $38
0000A7A1 0008 00F8 60               		dc.b 0,	8, 0, $F8, $60
0000A7A6 0008 00FB 78               		dc.b 0,	8, 0, $FB, $78
0000A7AB 1E                         byte_A7EB:	dc.b $1E		; sprite list filler
0000A7AC B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7B1 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7B6 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7BB B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7C0 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7C5 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7CA B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7CF B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7D4 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7D9 B80F 0000 80               		dc.b $B8, $F, 0, 0, $80
0000A7DE D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7E3 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7E8 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7ED D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7F2 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7F7 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A7FC D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A801 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A806 D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A80B D80F 0000 80               		dc.b $D8, $F, 0, 0, $80
0000A810 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A815 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A81A F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A81F F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A824 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A829 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A82E F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A833 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A838 F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A83D F80F 0000 80               		dc.b $F8, $F, 0, 0, $80
0000A842 01                         byte_A882:	dc.b 1			; "TM"
0000A843 FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
0000A848                            		even
0000A848                            		even
0000A848                            
0000A848                            ; ---------------------------------------------------------------------------
0000A848                            ; Sprite mappings - Sonic on the title screen
0000A848                            ; ---------------------------------------------------------------------------
0000A848                            Map_obj0E:
0000A848                            	include "_maps\obj0E.asm"
0000A848                            ; ---------------------------------------------------------------------------
0000A848                            ; Sprite mappings - Sonic on the title screen
0000A848                            ; ---------------------------------------------------------------------------
0000A848 0000                       		dc.w byte_A898-Map_obj0E
0000A84A 0000                       		dc.w byte_A8CB-Map_obj0E
0000A84C 0000                       		dc.w byte_A917-Map_obj0E
0000A84E 0000                       		dc.w byte_A96D-Map_obj0E
0000A850 0000                       		dc.w byte_A9AF-Map_obj0E
0000A852 0000                       		dc.w byte_A9E7-Map_obj0E
0000A854 0000                       		dc.w byte_AA47-Map_obj0E
0000A856 0000                       		dc.w byte_AAB1-Map_obj0E
0000A858 0A                         byte_A898:	dc.b $A
0000A859 0808 0000 08               		dc.b 8,	8, 0, 0, 8
0000A85E 100F 0003 08               		dc.b $10, $F, 0, 3, 8
0000A863 100F 0013 28               		dc.b $10, $F, 0, $13, $28
0000A868 300E 0023 08               		dc.b $30, $E, 0, $23, 8
0000A86D 300E 002F 28               		dc.b $30, $E, 0, $2F, $28
0000A872 480D 003B 00               		dc.b $48, $D, 0, $3B, 0
0000A877 4809 0043 20               		dc.b $48, 9, 0,	$43, $20
0000A87C 4800 0049 38               		dc.b $48, 0, 0,	$49, $38
0000A881 580C 004A 08               		dc.b $58, $C, 0, $4A, 8
0000A886 5800 004E 28               		dc.b $58, 0, 0,	$4E, $28
0000A88B 0F                         byte_A8CB:	dc.b $F
0000A88C 480E 01BD 20               		dc.b $48, $E, 1, $BD, $20
0000A891 3805 01C9 38               		dc.b $38, 5, 1,	$C9, $38
0000A896 4000 01CD 30               		dc.b $40, 0, 1,	$CD, $30
0000A89B 4800 01CE 40               		dc.b $48, 0, 1,	$CE, $40
0000A8A0 6000 01CF 20               		dc.b $60, 0, 1,	$CF, $20
0000A8A5 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A8AA 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A8AF 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A8B4 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A8B9 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A8BE 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A8C3 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A8C8 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A8CD 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A8D2 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A8D7 11                         byte_A917:	dc.b $11
0000A8D8 380E 01BD 28               		dc.b $38, $E, 1, $BD, $28
0000A8DD 2805 01C9 40               		dc.b $28, 5, 1,	$C9, $40
0000A8E2 3000 01CD 38               		dc.b $30, 0, 1,	$CD, $38
0000A8E7 3800 01CE 48               		dc.b $38, 0, 1,	$CE, $48
0000A8EC 5000 01CF 28               		dc.b $50, 0, 1,	$CF, $28
0000A8F1 200F 01A9 08               		dc.b $20, $F, 1, $A9, 8
0000A8F6 2003 01B9 28               		dc.b $20, 3, 1,	$B9, $28
0000A8FB 100E 004F 08               		dc.b $10, $E, 0, $4F, 8
0000A900 100E 005B 28               		dc.b $10, $E, 0, $5B, $28
0000A905 1801 0067 48               		dc.b $18, 1, 0,	$67, $48
0000A90A 2802 0069 00               		dc.b $28, 2, 0,	$69, 0
0000A90F 280F 006C 08               		dc.b $28, $F, 0, $6C, 8
0000A914 280F 007C 28               		dc.b $28, $F, 0, $7C, $28
0000A919 3002 008C 48               		dc.b $30, 2, 0,	$8C, $48
0000A91E 480E 008F 10               		dc.b $48, $E, 0, $8F, $10
0000A923 4809 009B 30               		dc.b $48, 9, 0,	$9B, $30
0000A928 5804 00A1 30               		dc.b $58, 4, 0,	$A1, $30
0000A92D 0D                         byte_A96D:	dc.b $D
0000A92E 100F 00A3 08               		dc.b $10, $F, 0, $A3, 8
0000A933 0808 00B3 28               		dc.b 8,	8, 0, $B3, $28
0000A938 100F 00B6 28               		dc.b $10, $F, 0, $B6, $28
0000A93D 1800 00C6 48               		dc.b $18, 0, 0,	$C6, $48
0000A942 2006 00C7 48               		dc.b $20, 6, 0,	$C7, $48
0000A947 3800 00CD 48               		dc.b $38, 0, 0,	$CD, $48
0000A94C 300D 00CE 08               		dc.b $30, $D, 0, $CE, 8
0000A951 300E 00D6 28               		dc.b $30, $E, 0, $D6, $28
0000A956 400B 00E2 10               		dc.b $40, $B, 0, $E2, $10
0000A95B 4808 00EE 28               		dc.b $48, 8, 0,	$EE, $28
0000A960 5001 00F1 08               		dc.b $50, 1, 0,	$F1, 8
0000A965 5004 00F3 28               		dc.b $50, 4, 0,	$F3, $28
0000A96A 5800 00F5 28               		dc.b $58, 0, 0,	$F5, $28
0000A96F 0B                         byte_A9AF:	dc.b $B
0000A970 080F 00F6 10               		dc.b 8,	$F, 0, $F6, $10
0000A975 080B 0106 30               		dc.b 8,	$B, 1, 6, $30
0000A97A 1006 0112 48               		dc.b $10, 6, 1,	$12, $48
0000A97F 280E 0118 18               		dc.b $28, $E, 1, $18, $18
0000A984 280E 0124 38               		dc.b $28, $E, 1, $24, $38
0000A989 2801 0130 10               		dc.b $28, 1, 1,	$30, $10
0000A98E 400E 0132 10               		dc.b $40, $E, 1, $32, $10
0000A993 4006 013E 30               		dc.b $40, 6, 1,	$3E, $30
0000A998 4004 0144 40               		dc.b $40, 4, 1,	$44, $40
0000A99D 4800 0146 40               		dc.b $48, 0, 1,	$46, $40
0000A9A2 5808 0147 18               		dc.b $58, 8, 1,	$47, $18
0000A9A7 13                         byte_A9E7:	dc.b $13
0000A9A8 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000A9AD 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000A9B2 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000A9B7 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000A9BC 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000A9C1 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000A9C6 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000A9CB 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000A9D0 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000A9D5 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000A9DA 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000A9DF 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000A9E4 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000A9E9 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000A9EE 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000A9F3 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000A9F8 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000A9FD 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AA02 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AA07 15                         byte_AA47:	dc.b $15
0000AA08 280E 01E4 38               		dc.b $28, $E, 1, $E4, $38
0000AA0D 1805 01F0 48               		dc.b $18, 5, 1,	$F0, $48
0000AA12 4008 01F4 38               		dc.b $40, 8, 1,	$F4, $38
0000AA17 4804 01F7 38               		dc.b $48, 4, 1,	$F7, $38
0000AA1C 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AA21 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AA26 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AA2B 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AA30 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AA35 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AA3A 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AA3F 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AA44 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AA49 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AA4E 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AA53 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AA58 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AA5D 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AA62 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AA67 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AA6C 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AA71 16                         byte_AAB1:	dc.b $16
0000AA72 1804 01F9 38               		dc.b $18, 4, 1,	$F9, $38
0000AA77 2000 01FB 38               		dc.b $20, 0, 1,	$FB, $38
0000AA7C 2808 01FC 30               		dc.b $28, 8, 1,	$FC, $30
0000AA81 3001 01FF 30               		dc.b $30, 1, 1,	$FF, $30
0000AA86 300B 0201 38               		dc.b $30, $B, 2, 1, $38
0000AA8B 180F 01D0 08               		dc.b $18, $F, 1, $D0, 8
0000AA90 1803 01E0 28               		dc.b $18, 3, 1,	$E0, $28
0000AA95 100F 014A 10               		dc.b $10, $F, 1, $4A, $10
0000AA9A 0804 015A 20               		dc.b 8,	4, 1, $5A, $20
0000AA9F 000B 015C 30               		dc.b 0,	$B, 1, $5C, $30
0000AAA4 0800 0168 48               		dc.b 8,	0, 1, $68, $48
0000AAA9 1800 0169 48               		dc.b $18, 0, 1,	$69, $48
0000AAAE 1805 016A 00               		dc.b $18, 5, 1,	$6A, 0
0000AAB3 2802 016E 08               		dc.b $28, 2, 1,	$6E, 8
0000AAB8 300F 0171 10               		dc.b $30, $F, 1, $71, $10
0000AABD 200D 0181 30               		dc.b $20, $D, 1, $81, $30
0000AAC2 2001 0189 50               		dc.b $20, 1, 1,	$89, $50
0000AAC7 3008 018B 30               		dc.b $30, 8, 1,	$8B, $30
0000AACC 380E 018E 30               		dc.b $38, $E, 1, $8E, $30
0000AAD1 500D 019A 08               		dc.b $50, $D, 1, $9A, 8
0000AAD6 500C 01A2 28               		dc.b $50, $C, 1, $A2, $28
0000AADB 5808 01A6 28               		dc.b $58, 8, 1,	$A6, $28
0000AAE0                            		even
0000AAE0                            		even
0000AAE0                            
0000AAE0                            ; ===========================================================================
0000AAE0                            ; ---------------------------------------------------------------------------
0000AAE0                            ; Object 2B - Chopper enemy (GHZ)
0000AAE0                            ; ---------------------------------------------------------------------------
0000AAE0                            
0000AAE0                            Obj2B:					; XREF: Obj_Index
0000AAE0 7000                       		moveq	#0,d0
0000AAE2 1028 0024                  		move.b	$24(a0),d0
0000AAE6 323B 0000                  		move.w	Obj2B_Index(pc,d0.w),d1
0000AAEA 4EBB 1000                  		jsr	Obj2B_Index(pc,d1.w)
0000AAEE 6000 0000                  		bra.w	MarkObjGone
0000AAF2                            ; ===========================================================================
0000AAF2 0000                       Obj2B_Index:	dc.w Obj2B_Main-Obj2B_Index
0000AAF4 0000                       		dc.w Obj2B_ChgSpeed-Obj2B_Index
0000AAF6                            ; ===========================================================================
0000AAF6                            
0000AAF6                            Obj2B_Main:				; XREF: Obj2B_Index
0000AAF6 5428 0024                  		addq.b	#2,$24(a0)
0000AAFA 217C 0000 0000 0004        		move.l	#Map_obj2B,4(a0)
0000AB02 317C 047B 0002             		move.w	#$47B,2(a0)
0000AB08 117C 0004 0001             		move.b	#4,1(a0)
0000AB0E 117C 0004 0018             		move.b	#4,$18(a0)
0000AB14 117C 0009 0020             		move.b	#9,$20(a0)
0000AB1A 117C 0010 0019             		move.b	#$10,$19(a0)
0000AB20 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AB26 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000AB2C                            
0000AB2C                            Obj2B_ChgSpeed:				; XREF: Obj2B_Index
0000AB2C 43F9 0000 0000             		lea	(Ani_obj2B).l,a1
0000AB32 6100 FBA4                  		bsr.w	AnimateSprite
0000AB36 6100 0000                  		bsr.w	SpeedToPos
0000AB3A 0668 0018 0012             		addi.w	#$18,$12(a0)	; reduce speed
0000AB40 3028 0030                  		move.w	$30(a0),d0
0000AB44 B068 000C                  		cmp.w	$C(a0),d0
0000AB48 6400                       		bcc.s	Obj2B_ChgAni
0000AB4A 3140 000C                  		move.w	d0,$C(a0)
0000AB4E 317C F900 0012             		move.w	#-$700,$12(a0)	; set vertical speed
0000AB54                            
0000AB54                            Obj2B_ChgAni:
0000AB54 117C 0001 001C             		move.b	#1,$1C(a0)	; use fast animation
0000AB5A 0440 00C0                  		subi.w	#$C0,d0
0000AB5E B068 000C                  		cmp.w	$C(a0),d0
0000AB62 6400                       		bcc.s	locret_ABB6
0000AB64 117C 0000 001C             		move.b	#0,$1C(a0)	; use slow animation
0000AB6A 4A68 0012                  		tst.w	$12(a0)		; is Chopper at	its highest point?
0000AB6E 6B00                       		bmi.s	locret_ABB6	; if not, branch
0000AB70 117C 0002 001C             		move.b	#2,$1C(a0)	; use stationary animation
0000AB76                            
0000AB76                            locret_ABB6:
0000AB76 4E75                       		rts	
0000AB78                            ; ===========================================================================
0000AB78                            Ani_obj2B:
0000AB78                            	include "_anim\obj2B.asm"
0000AB78                            ; ---------------------------------------------------------------------------
0000AB78                            ; Animation script - Chopper enemy
0000AB78                            ; ---------------------------------------------------------------------------
0000AB78 0000                       		dc.w byte_ABBE-Ani_obj2B
0000AB7A 0000                       		dc.w byte_ABC2-Ani_obj2B
0000AB7C 0000                       		dc.w byte_ABC6-Ani_obj2B
0000AB7E 0700 01FF                  byte_ABBE:	dc.b 7,	0, 1, $FF
0000AB82 0300 01FF                  byte_ABC2:	dc.b 3,	0, 1, $FF
0000AB86 0700 FF                    byte_ABC6:	dc.b 7,	0, $FF
0000AB8A 00                         		even
0000AB8A 00                         		even
0000AB8A                            
0000AB8A                            ; ---------------------------------------------------------------------------
0000AB8A                            ; Sprite mappings - Chopper enemy (GHZ)
0000AB8A                            ; ---------------------------------------------------------------------------
0000AB8A                            Map_obj2B:
0000AB8A                            	include "_maps\obj2B.asm"
0000AB8A                            ; ---------------------------------------------------------------------------
0000AB8A                            ; Sprite mappings - Chopper enemy (GHZ)
0000AB8A                            ; ---------------------------------------------------------------------------
0000AB8A 0000                       		dc.w byte_ABCE-Map_obj2B
0000AB8C 0000                       		dc.w byte_ABD4-Map_obj2B
0000AB8E 01                         byte_ABCE:	dc.b 1
0000AB8F F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
0000AB94 01                         byte_ABD4:	dc.b 1
0000AB95 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
0000AB9A                            		even
0000AB9A                            		even
0000AB9A                            
0000AB9A                            ; ===========================================================================
0000AB9A                            ; ---------------------------------------------------------------------------
0000AB9A                            ; Object 2C - Jaws enemy (LZ)
0000AB9A                            ; ---------------------------------------------------------------------------
0000AB9A                            
0000AB9A                            Obj2C:					; XREF: Obj_Index
0000AB9A 7000                       		moveq	#0,d0
0000AB9C 1028 0024                  		move.b	$24(a0),d0
0000ABA0 323B 0000                  		move.w	Obj2C_Index(pc,d0.w),d1
0000ABA4 4EFB 1000                  		jmp	Obj2C_Index(pc,d1.w)
0000ABA8                            ; ===========================================================================
0000ABA8 0000                       Obj2C_Index:	dc.w Obj2C_Main-Obj2C_Index
0000ABAA 0000                       		dc.w Obj2C_Turn-Obj2C_Index
0000ABAC                            ; ===========================================================================
0000ABAC                            
0000ABAC                            Obj2C_Main:				; XREF: Obj2C_Index
0000ABAC 5428 0024                  		addq.b	#2,$24(a0)
0000ABB0 217C 0000 0000 0004        		move.l	#Map_obj2C,4(a0)
0000ABB8 317C 2486 0002             		move.w	#$2486,2(a0)
0000ABBE 0028 0004 0001             		ori.b	#4,1(a0)
0000ABC4 117C 000A 0020             		move.b	#$A,$20(a0)
0000ABCA 117C 0004 0018             		move.b	#4,$18(a0)
0000ABD0 117C 0010 0019             		move.b	#$10,$19(a0)
0000ABD6 7000                       		moveq	#0,d0
0000ABD8 1028 0028                  		move.b	$28(a0),d0	; load object subtype number
0000ABDC ED48                       		lsl.w	#6,d0		; multiply d0 by 64
0000ABDE 5340                       		subq.w	#1,d0
0000ABE0 3140 0030                  		move.w	d0,$30(a0)	; set turn delay time
0000ABE4 3140 0032                  		move.w	d0,$32(a0)
0000ABE8 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move Jaws to the left
0000ABEE 0828 0000 0022             		btst	#0,$22(a0)	; is Jaws facing left?
0000ABF4 6700                       		beq.s	Obj2C_Turn	; if yes, branch
0000ABF6 4468 0010                  		neg.w	$10(a0)		; move Jaws to the right
0000ABFA                            
0000ABFA                            Obj2C_Turn:				; XREF: Obj2C_Index
0000ABFA 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from turn delay time
0000ABFE 6A00                       		bpl.s	Obj2C_Animate	; if time remains, branch
0000AC00 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	turn delay time
0000AC06 4468 0010                  		neg.w	$10(a0)		; change speed direction
0000AC0A 0868 0000 0022             		bchg	#0,$22(a0)	; change Jaws facing direction
0000AC10 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000AC16                            
0000AC16                            Obj2C_Animate:
0000AC16 43F9 0000 0000             		lea	(Ani_obj2C).l,a1
0000AC1C 6100 FABA                  		bsr.w	AnimateSprite
0000AC20 6100 0000                  		bsr.w	SpeedToPos
0000AC24 6000 0000                  		bra.w	MarkObjGone
0000AC28                            ; ===========================================================================
0000AC28                            Ani_obj2C:
0000AC28                            	include "_anim\obj2C.asm"
0000AC28                            ; ---------------------------------------------------------------------------
0000AC28                            ; Animation script - Jaws enemy
0000AC28                            ; ---------------------------------------------------------------------------
0000AC28 0000                       		dc.w byte_AC6A-Ani_obj2C
0000AC2A 0700 0102 03FF             byte_AC6A:	dc.b 7,	0, 1, 2, 3, $FF
0000AC30                            		even
0000AC30                            		even
0000AC30                            
0000AC30                            ; ---------------------------------------------------------------------------
0000AC30                            ; Sprite mappings - Jaws enemy (LZ)
0000AC30                            ; ---------------------------------------------------------------------------
0000AC30                            Map_obj2C:
0000AC30                            	include "_maps\obj2C.asm"
0000AC30                            ; ---------------------------------------------------------------------------
0000AC30                            ; Sprite mappings - Jaws enemy (LZ)
0000AC30                            ; ---------------------------------------------------------------------------
0000AC30 0000                       		dc.w byte_AC78-Map_obj2C
0000AC32 0000                       		dc.w byte_AC83-Map_obj2C
0000AC34 0000                       		dc.w byte_AC8E-Map_obj2C
0000AC36 0000                       		dc.w byte_AC99-Map_obj2C
0000AC38 02                         byte_AC78:	dc.b 2
0000AC39 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AC3E F505 0018 10               		dc.b $F5, 5, 0,	$18, $10
0000AC43 02                         byte_AC83:	dc.b 2
0000AC44 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AC49 F505 001C 10               		dc.b $F5, 5, 0,	$1C, $10
0000AC4E 02                         byte_AC8E:	dc.b 2
0000AC4F F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
0000AC54 F505 1018 10               		dc.b $F5, 5, $10, $18, $10
0000AC59 02                         byte_AC99:	dc.b 2
0000AC5A F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0000AC5F F505 101C 10               		dc.b $F5, 5, $10, $1C, $10
0000AC64                            		even
0000AC64                            		even
0000AC64                            
0000AC64                            ; ===========================================================================
0000AC64                            ; ---------------------------------------------------------------------------
0000AC64                            ; Object 2D - Burrobot enemy (LZ)
0000AC64                            ; ---------------------------------------------------------------------------
0000AC64                            
0000AC64                            Obj2D:					; XREF: Obj_Index
0000AC64 7000                       		moveq	#0,d0
0000AC66 1028 0024                  		move.b	$24(a0),d0
0000AC6A 323B 0000                  		move.w	Obj2D_Index(pc,d0.w),d1
0000AC6E 4EFB 1000                  		jmp	Obj2D_Index(pc,d1.w)
0000AC72                            ; ===========================================================================
0000AC72 0000                       Obj2D_Index:	dc.w Obj2D_Main-Obj2D_Index
0000AC74 0000                       		dc.w Obj2D_Action-Obj2D_Index
0000AC76                            ; ===========================================================================
0000AC76                            
0000AC76                            Obj2D_Main:				; XREF: Obj2D_Index
0000AC76 5428 0024                  		addq.b	#2,$24(a0)
0000AC7A 117C 0013 0016             		move.b	#$13,$16(a0)
0000AC80 117C 0008 0017             		move.b	#8,$17(a0)
0000AC86 217C 0000 0000 0004        		move.l	#Map_obj2D,4(a0)
0000AC8E 317C 04A6 0002             		move.w	#$4A6,2(a0)
0000AC94 0028 0004 0001             		ori.b	#4,1(a0)
0000AC9A 117C 0004 0018             		move.b	#4,$18(a0)
0000ACA0 117C 0005 0020             		move.b	#5,$20(a0)
0000ACA6 117C 000C 0019             		move.b	#$C,$19(a0)
0000ACAC 5C28 0025                  		addq.b	#6,$25(a0)	; run "Obj2D_ChkSonic" routine
0000ACB0 117C 0002 001C             		move.b	#2,$1C(a0)
0000ACB6                            
0000ACB6                            Obj2D_Action:				; XREF: Obj2D_Index
0000ACB6 7000                       		moveq	#0,d0
0000ACB8 1028 0025                  		move.b	$25(a0),d0
0000ACBC 323B 0000                  		move.w	Obj2D_Index2(pc,d0.w),d1
0000ACC0 4EBB 1000                  		jsr	Obj2D_Index2(pc,d1.w)
0000ACC4 43F9 0000 0000             		lea	(Ani_obj2D).l,a1
0000ACCA 6100 FA0C                  		bsr.w	AnimateSprite
0000ACCE 6000 0000                  		bra.w	MarkObjGone
0000ACD2                            ; ===========================================================================
0000ACD2 0000                       Obj2D_Index2:	dc.w Obj2D_ChgDir-Obj2D_Index2
0000ACD4 0000                       		dc.w Obj2D_Move-Obj2D_Index2
0000ACD6 0000                       		dc.w Obj2D_Jump-Obj2D_Index2
0000ACD8 0000                       		dc.w Obj2D_ChkSonic-Obj2D_Index2
0000ACDA                            ; ===========================================================================
0000ACDA                            
0000ACDA                            Obj2D_ChgDir:				; XREF: Obj2D_Index2
0000ACDA 5368 0030                  		subq.w	#1,$30(a0)
0000ACDE 6A00                       		bpl.s	locret_AD42
0000ACE0 5428 0025                  		addq.b	#2,$25(a0)
0000ACE4 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000ACEA 317C 0080 0010             		move.w	#$80,$10(a0)
0000ACF0 117C 0001 001C             		move.b	#1,$1C(a0)
0000ACF6 0868 0000 0022             		bchg	#0,$22(a0)	; change direction the Burrobot	is facing
0000ACFC 6700                       		beq.s	locret_AD42
0000ACFE 4468 0010                  		neg.w	$10(a0)		; change direction the Burrobot	is moving
0000AD02                            
0000AD02                            locret_AD42:
0000AD02 4E75                       		rts	
0000AD04                            ; ===========================================================================
0000AD04                            
0000AD04                            Obj2D_Move:				; XREF: Obj2D_Index2
0000AD04 5368 0030                  		subq.w	#1,$30(a0)
0000AD08 6B00                       		bmi.s	loc_AD84
0000AD0A 6100 0000                  		bsr.w	SpeedToPos
0000AD0E 0868 0000 0032             		bchg	#0,$32(a0)
0000AD14 6600                       		bne.s	loc_AD78
0000AD16 3628 0008                  		move.w	8(a0),d3
0000AD1A 0643 000C                  		addi.w	#$C,d3
0000AD1E 0828 0000 0022             		btst	#0,$22(a0)
0000AD24 6600                       		bne.s	loc_AD6A
0000AD26 0443 0018                  		subi.w	#$18,d3
0000AD2A                            
0000AD2A                            loc_AD6A:
0000AD2A 4EB9 0000 0000             		jsr	ObjHitFloor2
0000AD30 0C41 000C                  		cmpi.w	#$C,d1
0000AD34 6C00                       		bge.s	loc_AD84
0000AD36 4E75                       		rts	
0000AD38                            ; ===========================================================================
0000AD38                            
0000AD38                            loc_AD78:				; XREF: Obj2D_Move
0000AD38 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD3E D368 000C                  		add.w	d1,$C(a0)
0000AD42 4E75                       		rts	
0000AD44                            ; ===========================================================================
0000AD44                            
0000AD44                            loc_AD84:				; XREF: Obj2D_Move
0000AD44 0838 0002 FE0F             		btst	#2,($FFFFFE0F).w
0000AD4A 6700                       		beq.s	loc_ADA4
0000AD4C 5528 0025                  		subq.b	#2,$25(a0)
0000AD50 317C 003B 0030             		move.w	#$3B,$30(a0)
0000AD56 317C 0000 0010             		move.w	#0,$10(a0)
0000AD5C 117C 0000 001C             		move.b	#0,$1C(a0)
0000AD62 4E75                       		rts	
0000AD64                            ; ===========================================================================
0000AD64                            
0000AD64                            loc_ADA4:
0000AD64 5428 0025                  		addq.b	#2,$25(a0)
0000AD68 317C FC00 0012             		move.w	#-$400,$12(a0)
0000AD6E 117C 0002 001C             		move.b	#2,$1C(a0)
0000AD74 4E75                       		rts	
0000AD76                            ; ===========================================================================
0000AD76                            
0000AD76                            Obj2D_Jump:				; XREF: Obj2D_Index2
0000AD76 6100 0000                  		bsr.w	SpeedToPos
0000AD7A 0668 0018 0012             		addi.w	#$18,$12(a0)
0000AD80 6B00                       		bmi.s	locret_ADF0
0000AD82 117C 0003 001C             		move.b	#3,$1C(a0)
0000AD88 4EB9 0000 0000             		jsr	ObjHitFloor
0000AD8E 4A41                       		tst.w	d1
0000AD90 6A00                       		bpl.s	locret_ADF0
0000AD92 D368 000C                  		add.w	d1,$C(a0)
0000AD96 317C 0000 0012             		move.w	#0,$12(a0)
0000AD9C 117C 0001 001C             		move.b	#1,$1C(a0)
0000ADA2 317C 00FF 0030             		move.w	#$FF,$30(a0)
0000ADA8 5528 0025                  		subq.b	#2,$25(a0)
0000ADAC 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000ADB0                            
0000ADB0                            locret_ADF0:
0000ADB0 4E75                       		rts	
0000ADB2                            ; ===========================================================================
0000ADB2                            
0000ADB2                            Obj2D_ChkSonic:				; XREF: Obj2D_Index2
0000ADB2 343C 0060                  		move.w	#$60,d2
0000ADB6 6100 0000                  		bsr.w	Obj2D_ChkSonic2
0000ADBA 6400                       		bcc.s	locret_AE20
0000ADBC 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000ADC0 9068 000C                  		sub.w	$C(a0),d0
0000ADC4 6400                       		bcc.s	locret_AE20
0000ADC6 0C40 FF80                  		cmpi.w	#-$80,d0
0000ADCA 6500                       		bcs.s	locret_AE20
0000ADCC 4A78 FE08                  		tst.w	($FFFFFE08).w
0000ADD0 6600                       		bne.s	locret_AE20
0000ADD2 5528 0025                  		subq.b	#2,$25(a0)
0000ADD6 3141 0010                  		move.w	d1,$10(a0)
0000ADDA 317C FC00 0012             		move.w	#-$400,$12(a0)
0000ADE0                            
0000ADE0                            locret_AE20:
0000ADE0 4E75                       		rts	
0000ADE2                            
0000ADE2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000ADE2                            
0000ADE2                            
0000ADE2                            Obj2D_ChkSonic2:			; XREF: Obj2D_ChkSonic
0000ADE2 323C 0080                  		move.w	#$80,d1
0000ADE6 08E8 0000 0022             		bset	#0,$22(a0)
0000ADEC 3038 D008                  		move.w	($FFFFD008).w,d0
0000ADF0 9068 0008                  		sub.w	8(a0),d0
0000ADF4 6400                       		bcc.s	loc_AE40
0000ADF6 4440                       		neg.w	d0
0000ADF8 4441                       		neg.w	d1
0000ADFA 08A8 0000 0022             		bclr	#0,$22(a0)
0000AE00                            
0000AE00                            loc_AE40:
0000AE00 B042                       		cmp.w	d2,d0
0000AE02 4E75                       		rts	
0000AE04                            ; End of function Obj2D_ChkSonic2
0000AE04                            
0000AE04                            ; ===========================================================================
0000AE04                            Ani_obj2D:
0000AE04                            	include "_anim\obj2D.asm"
0000AE04                            ; ---------------------------------------------------------------------------
0000AE04                            ; Animation script - Burrobot enemy
0000AE04                            ; ---------------------------------------------------------------------------
0000AE04 0000                       		dc.w byte_AE4C-Ani_obj2D
0000AE06 0000                       		dc.w byte_AE50-Ani_obj2D
0000AE08 0000                       		dc.w byte_AE54-Ani_obj2D
0000AE0A 0000                       		dc.w byte_AE58-Ani_obj2D
0000AE0C 0300 06FF                  byte_AE4C:	dc.b 3,	0, 6, $FF
0000AE10 0300 01FF                  byte_AE50:	dc.b 3,	0, 1, $FF
0000AE14 0302 03FF                  byte_AE54:	dc.b 3,	2, 3, $FF
0000AE18 0304 FF                    byte_AE58:	dc.b 3,	4, $FF
0000AE1C 00                         		even
0000AE1C 00                         		even
0000AE1C                            
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            ; Sprite mappings - Burrobot enemy (LZ)
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            Map_obj2D:
0000AE1C                            	include "_maps\obj2D.asm"
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C                            ; Sprite mappings - Burrobot enemy (LZ)
0000AE1C                            ; ---------------------------------------------------------------------------
0000AE1C 0000                       		dc.w byte_AE6A-Map_obj2D
0000AE1E 0000                       		dc.w byte_AE75-Map_obj2D
0000AE20 0000                       		dc.w byte_AE80-Map_obj2D
0000AE22 0000                       		dc.w byte_AE8B-Map_obj2D
0000AE24 0000                       		dc.w byte_AE96-Map_obj2D
0000AE26 0000                       		dc.w byte_AEA1-Map_obj2D
0000AE28 0000                       		dc.w byte_AEAC-Map_obj2D
0000AE2A 02                         byte_AE6A:	dc.b 2
0000AE2B EC0A 0000 F0               		dc.b $EC, $A, 0, 0, $F0
0000AE30 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AE35 02                         byte_AE75:	dc.b 2
0000AE36 EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AE3B 0409 0018 F4               		dc.b 4,	9, 0, $18, $F4
0000AE40 02                         byte_AE80:	dc.b 2
0000AE41 E80A 001E F4               		dc.b $E8, $A, 0, $1E, $F4
0000AE46 000A 0027 F4               		dc.b 0,	$A, 0, $27, $F4
0000AE4B 02                         byte_AE8B:	dc.b 2
0000AE4C E80A 0030 F4               		dc.b $E8, $A, 0, $30, $F4
0000AE51 000A 0039 F4               		dc.b 0,	$A, 0, $39, $F4
0000AE56 02                         byte_AE96:	dc.b 2
0000AE57 E80A 000F F0               		dc.b $E8, $A, 0, $F, $F0
0000AE5C 000A 0042 F4               		dc.b 0,	$A, 0, $42, $F4
0000AE61 02                         byte_AEA1:	dc.b 2
0000AE62 F406 004B E8               		dc.b $F4, 6, 0,	$4B, $E8
0000AE67 F40A 0051 F8               		dc.b $F4, $A, 0, $51, $F8
0000AE6C 02                         byte_AEAC:	dc.b 2
0000AE6D EC0A 000F F0               		dc.b $EC, $A, 0, $F, $F0
0000AE72 0409 0009 F4               		dc.b 4,	9, 0, 9, $F4
0000AE78 00                         		even
0000AE78 00                         		even
0000AE78                            
0000AE78                            ; ===========================================================================
0000AE78                            ; ---------------------------------------------------------------------------
0000AE78                            ; Object 2F - large moving platforms (MZ)
0000AE78                            ; ---------------------------------------------------------------------------
0000AE78                            
0000AE78                            Obj2F:					; XREF: Obj_Index
0000AE78 7000                       		moveq	#0,d0
0000AE7A 1028 0024                  		move.b	$24(a0),d0
0000AE7E 323B 0000                  		move.w	Obj2F_Index(pc,d0.w),d1
0000AE82 4EFB 1000                  		jmp	Obj2F_Index(pc,d1.w)
0000AE86                            ; ===========================================================================
0000AE86 0000                       Obj2F_Index:	dc.w Obj2F_Main-Obj2F_Index
0000AE88 0000                       		dc.w Obj2F_Action-Obj2F_Index
0000AE8A                            
0000AE8A 0000                       Obj2F_Data:	dc.w Obj2F_Data1-Obj2F_Data 	; collision angle data
0000AE8C 0040                       		dc.b 0,	$40			; frame	number,	platform width
0000AE8E 0000                       		dc.w Obj2F_Data3-Obj2F_Data
0000AE90 0140                       		dc.b 1,	$40
0000AE92 0000                       		dc.w Obj2F_Data2-Obj2F_Data
0000AE94 0220                       		dc.b 2,	$20
0000AE96                            ; ===========================================================================
0000AE96                            
0000AE96                            Obj2F_Main:				; XREF: Obj2F_Index
0000AE96 5428 0024                  		addq.b	#2,$24(a0)
0000AE9A 217C 0000 0000 0004        		move.l	#Map_obj2F,4(a0)
0000AEA2 317C C000 0002             		move.w	#$C000,2(a0)
0000AEA8 117C 0004 0001             		move.b	#4,1(a0)
0000AEAE 117C 0005 0018             		move.b	#5,$18(a0)
0000AEB4 3168 000C 002C             		move.w	$C(a0),$2C(a0)
0000AEBA 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000AEC0 7000                       		moveq	#0,d0
0000AEC2 1028 0028                  		move.b	$28(a0),d0
0000AEC6 E448                       		lsr.w	#2,d0
0000AEC8 0240 001C                  		andi.w	#$1C,d0
0000AECC 43FB 00BC                  		lea	Obj2F_Data(pc,d0.w),a1
0000AED0 3019                       		move.w	(a1)+,d0
0000AED2 45FB 00B6                  		lea	Obj2F_Data(pc,d0.w),a2
0000AED6 214A 0030                  		move.l	a2,$30(a0)
0000AEDA 1159 001A                  		move.b	(a1)+,$1A(a0)
0000AEDE 1151 0019                  		move.b	(a1),$19(a0)
0000AEE2 0228 000F 0028             		andi.b	#$F,$28(a0)
0000AEE8 117C 0040 0016             		move.b	#$40,$16(a0)
0000AEEE 08E8 0004 0001             		bset	#4,1(a0)
0000AEF4                            
0000AEF4                            Obj2F_Action:				; XREF: Obj2F_Index
0000AEF4 6100 0000                  		bsr.w	Obj2F_Types
0000AEF8 4A28 0025                  		tst.b	$25(a0)
0000AEFC 6700                       		beq.s	Obj2F_Solid
0000AEFE 7200                       		moveq	#0,d1
0000AF00 1228 0019                  		move.b	$19(a0),d1
0000AF04 0641 000B                  		addi.w	#$B,d1
0000AF08 6100 C6A0                  		bsr.w	ExitPlatform
0000AF0C 0829 0003 0022             		btst	#3,$22(a1)
0000AF12 6600 0000                  		bne.w	Obj2F_Slope
0000AF16 4228 0025                  		clr.b	$25(a0)
0000AF1A 6000                       		bra.s	Obj2F_Display
0000AF1C                            ; ===========================================================================
0000AF1C                            
0000AF1C                            Obj2F_Slope:				; XREF: Obj2F_Action
0000AF1C 7200                       		moveq	#0,d1
0000AF1E 1228 0019                  		move.b	$19(a0),d1
0000AF22 0641 000B                  		addi.w	#$B,d1
0000AF26 2468 0030                  		movea.l	$30(a0),a2
0000AF2A 3428 0008                  		move.w	8(a0),d2
0000AF2E 6100 D5D8                  		bsr.w	SlopeObject2
0000AF32 6000                       		bra.s	Obj2F_Display
0000AF34                            ; ===========================================================================
0000AF34                            
0000AF34                            Obj2F_Solid:				; XREF: Obj2F_Action
0000AF34 7200                       		moveq	#0,d1
0000AF36 1228 0019                  		move.b	$19(a0),d1
0000AF3A 0641 000B                  		addi.w	#$B,d1
0000AF3E 343C 0020                  		move.w	#$20,d2
0000AF42 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000AF48 6600                       		bne.s	loc_AF8E
0000AF4A 343C 0030                  		move.w	#$30,d2
0000AF4E                            
0000AF4E                            loc_AF8E:
0000AF4E 2468 0030                  		movea.l	$30(a0),a2
0000AF52 6100 0000                  		bsr.w	SolidObject2F
0000AF56                            
0000AF56                            Obj2F_Display:				; XREF: Obj2F_Action
0000AF56 6100 0000                  		bsr.w	DisplaySprite
0000AF5A 6000 0000                  		bra.w	Obj2F_ChkDel
0000AF5E                            
0000AF5E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000AF5E                            
0000AF5E                            
0000AF5E                            Obj2F_Types:				; XREF: Obj2F_Action
0000AF5E 7000                       		moveq	#0,d0
0000AF60 1028 0028                  		move.b	$28(a0),d0
0000AF64 0240 0007                  		andi.w	#7,d0
0000AF68 D040                       		add.w	d0,d0
0000AF6A 323B 0000                  		move.w	Obj2F_TypeIndex(pc,d0.w),d1
0000AF6E 4EFB 1000                  		jmp	Obj2F_TypeIndex(pc,d1.w)
0000AF72                            ; End of function Obj2F_Types
0000AF72                            
0000AF72                            ; ===========================================================================
0000AF72 0000                       Obj2F_TypeIndex:dc.w Obj2F_Type00-Obj2F_TypeIndex
0000AF74 0000                       		dc.w Obj2F_Type01-Obj2F_TypeIndex
0000AF76 0000                       		dc.w Obj2F_Type02-Obj2F_TypeIndex
0000AF78 0000                       		dc.w Obj2F_Type03-Obj2F_TypeIndex
0000AF7A 0000                       		dc.w Obj2F_Type04-Obj2F_TypeIndex
0000AF7C 0000                       		dc.w Obj2F_Type05-Obj2F_TypeIndex
0000AF7E                            ; ===========================================================================
0000AF7E                            
0000AF7E                            Obj2F_Type00:				; XREF: Obj2F_TypeIndex
0000AF7E 4E75                       		rts			; type 00 platform doesn't move
0000AF80                            ; ===========================================================================
0000AF80                            
0000AF80                            Obj2F_Type01:				; XREF: Obj2F_TypeIndex
0000AF80 1038 FE60                  		move.b	($FFFFFE60).w,d0
0000AF84 323C 0020                  		move.w	#$20,d1
0000AF88 6000                       		bra.s	Obj2F_Move
0000AF8A                            ; ===========================================================================
0000AF8A                            
0000AF8A                            Obj2F_Type02:				; XREF: Obj2F_TypeIndex
0000AF8A 1038 FE64                  		move.b	($FFFFFE64).w,d0
0000AF8E 323C 0030                  		move.w	#$30,d1
0000AF92 6000                       		bra.s	Obj2F_Move
0000AF94                            ; ===========================================================================
0000AF94                            
0000AF94                            Obj2F_Type03:				; XREF: Obj2F_TypeIndex
0000AF94 1038 FE68                  		move.b	($FFFFFE68).w,d0
0000AF98 323C 0040                  		move.w	#$40,d1
0000AF9C 6000                       		bra.s	Obj2F_Move
0000AF9E                            ; ===========================================================================
0000AF9E                            
0000AF9E                            Obj2F_Type04:				; XREF: Obj2F_TypeIndex
0000AF9E 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000AFA2 323C 0060                  		move.w	#$60,d1
0000AFA6                            
0000AFA6                            Obj2F_Move:
0000AFA6 0828 0003 0028             		btst	#3,$28(a0)
0000AFAC 6700                       		beq.s	loc_AFF2
0000AFAE 4440                       		neg.w	d0
0000AFB0 D041                       		add.w	d1,d0
0000AFB2                            
0000AFB2                            loc_AFF2:
0000AFB2 3228 002C                  		move.w	$2C(a0),d1
0000AFB6 9240                       		sub.w	d0,d1
0000AFB8 3141 000C                  		move.w	d1,$C(a0)	; update position on y-axis
0000AFBC 4E75                       		rts	
0000AFBE                            ; ===========================================================================
0000AFBE                            
0000AFBE                            Obj2F_Type05:				; XREF: Obj2F_TypeIndex
0000AFBE 1028 0034                  		move.b	$34(a0),d0
0000AFC2 4A28 0025                  		tst.b	$25(a0)
0000AFC6 6600                       		bne.s	loc_B010
0000AFC8 5500                       		subq.b	#2,d0
0000AFCA 6400                       		bcc.s	loc_B01C
0000AFCC 7000                       		moveq	#0,d0
0000AFCE 6000                       		bra.s	loc_B01C
0000AFD0                            ; ===========================================================================
0000AFD0                            
0000AFD0                            loc_B010:
0000AFD0 5800                       		addq.b	#4,d0
0000AFD2 0C00 0040                  		cmpi.b	#$40,d0
0000AFD6 6500                       		bcs.s	loc_B01C
0000AFD8 103C 0040                  		move.b	#$40,d0
0000AFDC                            
0000AFDC                            loc_B01C:
0000AFDC 1140 0034                  		move.b	d0,$34(a0)
0000AFE0 4EB9 0000 29DA             		jsr	(CalcSine).l
0000AFE6 E848                       		lsr.w	#4,d0
0000AFE8 3200                       		move.w	d0,d1
0000AFEA D068 002C                  		add.w	$2C(a0),d0
0000AFEE 3140 000C                  		move.w	d0,$C(a0)
0000AFF2 0C28 0020 0034             		cmpi.b	#$20,$34(a0)
0000AFF8 6600                       		bne.s	loc_B07A
0000AFFA 4A28 0035                  		tst.b	$35(a0)
0000AFFE 6600                       		bne.s	loc_B07A
0000B000 117C 0001 0035             		move.b	#1,$35(a0)
0000B006 6100 0000                  		bsr.w	SingleObjLoad2
0000B00A 6600                       		bne.s	loc_B07A
0000B00C 12BC 0035                  		move.b	#$35,0(a1)	; load sitting flame object
0000B010 3368 0008 0008             		move.w	8(a0),8(a1)
0000B016 3368 002C 002C             		move.w	$2C(a0),$2C(a1)
0000B01C 5069 002C                  		addq.w	#8,$2C(a1)
0000B020 5769 002C                  		subq.w	#3,$2C(a1)
0000B024 0469 0040 0008             		subi.w	#$40,8(a1)
0000B02A 2368 0030 0030             		move.l	$30(a0),$30(a1)
0000B030 2348 0038                  		move.l	a0,$38(a1)
0000B034 2448                       		movea.l	a0,a2
0000B036 6100                       		bsr.s	sub_B09C
0000B038                            
0000B038                            loc_B07A:
0000B038 7400                       		moveq	#0,d2
0000B03A 45E8 0036                  		lea	$36(a0),a2
0000B03E 141A                       		move.b	(a2)+,d2
0000B040 5302                       		subq.b	#1,d2
0000B042 6500                       		bcs.s	locret_B09A
0000B044                            
0000B044                            loc_B086:
0000B044 7000                       		moveq	#0,d0
0000B046 101A                       		move.b	(a2)+,d0
0000B048 ED48                       		lsl.w	#6,d0
0000B04A 0640 D000                  		addi.w	#-$3000,d0
0000B04E 3240                       		movea.w	d0,a1
0000B050 3341 003C                  		move.w	d1,$3C(a1)
0000B054 51CA FFEE                  		dbf	d2,loc_B086
0000B058                            
0000B058                            locret_B09A:
0000B058 4E75                       		rts	
0000B05A                            
0000B05A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B05A                            
0000B05A                            
0000B05A                            sub_B09C:
0000B05A 45EA 0036                  		lea	$36(a2),a2
0000B05E 7000                       		moveq	#0,d0
0000B060 1012                       		move.b	(a2),d0
0000B062 5212                       		addq.b	#1,(a2)
0000B064 45F2 0001                  		lea	1(a2,d0.w),a2
0000B068 3009                       		move.w	a1,d0
0000B06A 0440 D000                  		subi.w	#-$3000,d0
0000B06E EC48                       		lsr.w	#6,d0
0000B070 0240 007F                  		andi.w	#$7F,d0
0000B074 1480                       		move.b	d0,(a2)
0000B076 4E75                       		rts	
0000B078                            ; End of function sub_B09C
0000B078                            
0000B078                            ; ===========================================================================
0000B078                            
0000B078                            Obj2F_ChkDel:				; XREF: Obj2F_Display
0000B078 4A28 0035                  		tst.b	$35(a0)
0000B07C 6700                       		beq.s	loc_B0C6
0000B07E 4A28 0001                  		tst.b	1(a0)
0000B082 6A00                       		bpl.s	Obj2F_DelFlames
0000B084                            
0000B084                            loc_B0C6:
0000B084 3028 002A                  		move.w	$2A(a0),d0
0000B088 0240 FF80                  		andi.w	#$FF80,d0
0000B08C 3238 F700                  		move.w	($FFFFF700).w,d1
0000B090 0441 0080                  		subi.w	#$80,d1
0000B094 0241 FF80                  		andi.w	#$FF80,d1
0000B098 9041                       		sub.w	d1,d0
0000B09A 0C40 0280                  		cmpi.w	#$280,d0
0000B09E 6200 0000                  		bhi.w	DeleteObject
0000B0A2 4E75                       		rts	
0000B0A4                            ; ===========================================================================
0000B0A4                            
0000B0A4                            Obj2F_DelFlames:			; XREF: Obj2F_ChkDel
0000B0A4 7400                       		moveq	#0,d2
0000B0A6                            
0000B0A6                            loc_B0E8:
0000B0A6 45E8 0036                  		lea	$36(a0),a2
0000B0AA 1412                       		move.b	(a2),d2
0000B0AC 421A                       		clr.b	(a2)+
0000B0AE 5302                       		subq.b	#1,d2
0000B0B0 6500                       		bcs.s	locret_B116
0000B0B2                            
0000B0B2                            loc_B0F4:
0000B0B2 7000                       		moveq	#0,d0
0000B0B4 1012                       		move.b	(a2),d0
0000B0B6 421A                       		clr.b	(a2)+
0000B0B8 ED48                       		lsl.w	#6,d0
0000B0BA 0640 D000                  		addi.w	#-$3000,d0
0000B0BE 3240                       		movea.w	d0,a1
0000B0C0 6100 0000                  		bsr.w	DeleteObject2
0000B0C4 51CA FFEC                  		dbf	d2,loc_B0F4
0000B0C8 117C 0000 0035             		move.b	#0,$35(a0)
0000B0CE 117C 0000 0034             		move.b	#0,$34(a0)
0000B0D4                            
0000B0D4                            locret_B116:
0000B0D4 4E75                       		rts	
0000B0D6                            ; ===========================================================================
0000B0D6                            ; ---------------------------------------------------------------------------
0000B0D6                            ; Collision data for large moving platforms (MZ)
0000B0D6                            ; ---------------------------------------------------------------------------
0000B0D6                            Obj2F_Data1:	incbin	misc\mz_pfm1.bin
0000B122                            		even
0000B122                            Obj2F_Data2:	incbin	misc\mz_pfm2.bin
0000B14E                            		even
0000B14E                            Obj2F_Data3:	incbin	misc\mz_pfm3.bin
0000B19A                            		even
0000B19A                            ; ===========================================================================
0000B19A                            ; ---------------------------------------------------------------------------
0000B19A                            ; Object 35 - fireball that sits on the	floor (MZ)
0000B19A                            ; (appears when	you walk on sinking platforms)
0000B19A                            ; ---------------------------------------------------------------------------
0000B19A                            
0000B19A                            Obj35:					; XREF: Obj_Index
0000B19A 7000                       		moveq	#0,d0
0000B19C 1028 0024                  		move.b	$24(a0),d0
0000B1A0 323B 0000                  		move.w	Obj35_Index(pc,d0.w),d1
0000B1A4 4EFB 1000                  		jmp	Obj35_Index(pc,d1.w)
0000B1A8                            ; ===========================================================================
0000B1A8 0000                       Obj35_Index:	dc.w Obj35_Main-Obj35_Index
0000B1AA 0000                       		dc.w loc_B238-Obj35_Index
0000B1AC 0000                       		dc.w Obj35_Move-Obj35_Index
0000B1AE                            ; ===========================================================================
0000B1AE                            
0000B1AE                            Obj35_Main:				; XREF: Obj35_Index
0000B1AE 5428 0024                  		addq.b	#2,$24(a0)
0000B1B2 217C 0000 0000 0004        		move.l	#Map_obj14,4(a0)
0000B1BA 317C 0345 0002             		move.w	#$345,2(a0)
0000B1C0 3168 0008 002A             		move.w	8(a0),$2A(a0)
0000B1C6 117C 0004 0001             		move.b	#4,1(a0)
0000B1CC 117C 0001 0018             		move.b	#1,$18(a0)
0000B1D2 117C 008B 0020             		move.b	#$8B,$20(a0)
0000B1D8 117C 0008 0019             		move.b	#8,$19(a0)
0000B1DE 303C 00C8                  		move.w	#$C8,d0
0000B1E2 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000B1E8 4A28 0028                  		tst.b	$28(a0)
0000B1EC 6700                       		beq.s	loc_B238
0000B1EE 5428 0024                  		addq.b	#2,$24(a0)
0000B1F2 6000 0000                  		bra.w	Obj35_Move
0000B1F6                            ; ===========================================================================
0000B1F6                            
0000B1F6                            loc_B238:				; XREF: Obj35_Index
0000B1F6 2268 0030                  		movea.l	$30(a0),a1
0000B1FA 3228 0008                  		move.w	8(a0),d1
0000B1FE 9268 002A                  		sub.w	$2A(a0),d1
0000B202 0641 000C                  		addi.w	#$C,d1
0000B206 3001                       		move.w	d1,d0
0000B208 E248                       		lsr.w	#1,d0
0000B20A 1031 0000                  		move.b	(a1,d0.w),d0
0000B20E 4440                       		neg.w	d0
0000B210 D068 002C                  		add.w	$2C(a0),d0
0000B214 3400                       		move.w	d0,d2
0000B216 D068 003C                  		add.w	$3C(a0),d0
0000B21A 3140 000C                  		move.w	d0,$C(a0)
0000B21E 0C41 0084                  		cmpi.w	#$84,d1
0000B222 6400                       		bcc.s	loc_B2B0
0000B224 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000B22C 0C41 0080                  		cmpi.w	#$80,d1
0000B230 6400                       		bcc.s	loc_B2B0
0000B232 2028 0008                  		move.l	8(a0),d0
0000B236 0680 0008 0000             		addi.l	#$80000,d0
0000B23C 0280 000F FFFF             		andi.l	#$FFFFF,d0
0000B242 6600                       		bne.s	loc_B2B0
0000B244 6100 0000                  		bsr.w	SingleObjLoad2
0000B248 6600                       		bne.s	loc_B2B0
0000B24A 12BC 0035                  		move.b	#$35,0(a1)
0000B24E 3368 0008 0008             		move.w	8(a0),8(a1)
0000B254 3342 002C                  		move.w	d2,$2C(a1)
0000B258 3368 003C 003C             		move.w	$3C(a0),$3C(a1)
0000B25E 137C 0001 0028             		move.b	#1,$28(a1)
0000B264 2468 0038                  		movea.l	$38(a0),a2
0000B268 6100 FDF0                  		bsr.w	sub_B09C
0000B26C                            
0000B26C                            loc_B2B0:
0000B26C 6000                       		bra.s	Obj35_Animate
0000B26E                            ; ===========================================================================
0000B26E                            
0000B26E                            Obj35_Move:				; XREF: Obj35_Index
0000B26E 3028 002C                  		move.w	$2C(a0),d0
0000B272 D068 003C                  		add.w	$3C(a0),d0
0000B276 3140 000C                  		move.w	d0,$C(a0)
0000B27A                            
0000B27A                            Obj35_Animate:				; XREF: loc_B238
0000B27A 43F9 0000 0000             		lea	(Ani_obj35).l,a1
0000B280 6100 F456                  		bsr.w	AnimateSprite
0000B284 6000 0000                  		bra.w	DisplaySprite
0000B288                            ; ===========================================================================
0000B288                            Ani_obj35:
0000B288                            	include "_anim\obj35.asm"
0000B288                            ; ---------------------------------------------------------------------------
0000B288                            ; Animation script - fireball that sits on the	floor (MZ)
0000B288                            ; ---------------------------------------------------------------------------
0000B288 0000                       		dc.w byte_B2CE-Ani_obj35
0000B28A 0500 2001 21FF             byte_B2CE:	dc.b 5,	0, $20,	1, $21,	$FF
0000B290                            		even
0000B290                            		even
0000B290                            
0000B290                            ; ---------------------------------------------------------------------------
0000B290                            ; Sprite mappings - large moving platforms (MZ)
0000B290                            ; ---------------------------------------------------------------------------
0000B290                            Map_obj2F:
0000B290                            	include "_maps\obj2F.asm"
0000B290                            ; ---------------------------------------------------------------------------
0000B290                            ; Sprite mappings - large moving platforms (MZ)
0000B290                            ; ---------------------------------------------------------------------------
0000B290 0000                       		dc.w byte_B2DA-Map_obj2F
0000B292 0000                       		dc.w byte_B31C-Map_obj2F
0000B294 0000                       		dc.w byte_B34F-Map_obj2F
0000B296 0D                         byte_B2DA:	dc.b $D
0000B297 D806 0057 C0               		dc.b $D8, 6, 0,	$57, $C0
0000B29C F005 0053 C0               		dc.b $F0, 5, 0,	$53, $C0
0000B2A1 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B2A6 D00F 0027 D0               		dc.b $D0, $F, 0, $27, $D0
0000B2AB F00D 0037 D0               		dc.b $F0, $D, 0, $37, $D0
0000B2B0 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B2B5 D00F 0011 F0               		dc.b $D0, $F, 0, $11, $F0
0000B2BA D00F 003F 10               		dc.b $D0, $F, 0, $3F, $10
0000B2BF F00D 004F 10               		dc.b $F0, $D, 0, $4F, $10
0000B2C4 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B2C9 000F 0001 20               		dc.b 0,	$F, 0, 1, $20
0000B2CE D806 0057 30               		dc.b $D8, 6, 0,	$57, $30
0000B2D3 F005 0053 30               		dc.b $F0, 5, 0,	$53, $30
0000B2D8 0A                         byte_B31C:	dc.b $A
0000B2D9 D00F 0027 C0               		dc.b $D0, $F, 0, $27, $C0
0000B2DE F00D 0037 C0               		dc.b $F0, $D, 0, $37, $C0
0000B2E3 000F 0001 C0               		dc.b 0,	$F, 0, 1, $C0
0000B2E8 C00F 0027 E0               		dc.b $C0, $F, 0, $27, $E0
0000B2ED E00D 0037 E0               		dc.b $E0, $D, 0, $37, $E0
0000B2F2 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B2F7 C00F 0011 00               		dc.b $C0, $F, 0, $11, 0
0000B2FC E00F 0001 00               		dc.b $E0, $F, 0, 1, 0
0000B301 C00F 003F 20               		dc.b $C0, $F, 0, $3F, $20
0000B306 E00D 004F 20               		dc.b $E0, $D, 0, $4F, $20
0000B30B 06                         byte_B34F:	dc.b 6
0000B30C D00F 0011 E0               		dc.b $D0, $F, 0, $11, $E0
0000B311 F00F 0001 E0               		dc.b $F0, $F, 0, 1, $E0
0000B316 100F 0001 E0               		dc.b $10, $F, 0, 1, $E0
0000B31B D00F 0011 00               		dc.b $D0, $F, 0, $11, 0
0000B320 F00F 0001 00               		dc.b $F0, $F, 0, 1, 0
0000B325 100F 0001 00               		dc.b $10, $F, 0, 1, 0
0000B32A                            		even
0000B32A                            		even
0000B32A                            
0000B32A                            ; ---------------------------------------------------------------------------
0000B32A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B32A                            ; ---------------------------------------------------------------------------
0000B32A                            Map_obj14:
0000B32A                            	include "_maps\obj14.asm"
0000B32A                            ; ---------------------------------------------------------------------------
0000B32A                            ; Sprite mappings - lava balls (MZ, SLZ)
0000B32A                            ; ---------------------------------------------------------------------------
0000B32A 0000                       		dc.w byte_B37A-Map_obj14
0000B32C 0000                       		dc.w byte_B380-Map_obj14
0000B32E 0000                       		dc.w byte_B386-Map_obj14
0000B330 0000                       		dc.w byte_B38C-Map_obj14
0000B332 0000                       		dc.w byte_B392-Map_obj14
0000B334 0000                       		dc.w byte_B398-Map_obj14
0000B336 01                         byte_B37A:	dc.b 1
0000B337 E807 0000 F8               		dc.b $E8, 7, 0,	0, $F8
0000B33C 01                         byte_B380:	dc.b 1
0000B33D E807 0008 F8               		dc.b $E8, 7, 0,	8, $F8
0000B342 01                         byte_B386:	dc.b 1
0000B343 F006 0010 F8               		dc.b $F0, 6, 0,	$10, $F8
0000B348 01                         byte_B38C:	dc.b 1
0000B349 F80D 0016 E8               		dc.b $F8, $D, 0, $16, $E8
0000B34E 01                         byte_B392:	dc.b 1
0000B34F F80D 001E E8               		dc.b $F8, $D, 0, $1E, $E8
0000B354 01                         byte_B398:	dc.b 1
0000B355 F809 0026 F0               		dc.b $F8, 9, 0,	$26, $F0
0000B35A                            		even
0000B35A                            		even
0000B35A                            
0000B35A                            ; ===========================================================================
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A                            ; Object 30 - large green glassy blocks	(MZ)
0000B35A                            ; ---------------------------------------------------------------------------
0000B35A                            
0000B35A                            Obj30:					; XREF: Obj_Index
0000B35A 7000                       		moveq	#0,d0
0000B35C 1028 0024                  		move.b	$24(a0),d0
0000B360 323B 0000                  		move.w	Obj30_Index(pc,d0.w),d1
0000B364 4EBB 1000                  		jsr	Obj30_Index(pc,d1.w)
0000B368 3028 0008                  		move.w	8(a0),d0
0000B36C 0240 FF80                  		andi.w	#$FF80,d0
0000B370 3238 F700                  		move.w	($FFFFF700).w,d1
0000B374 0441 0080                  		subi.w	#$80,d1
0000B378 0241 FF80                  		andi.w	#$FF80,d1
0000B37C 9041                       		sub.w	d1,d0
0000B37E 0C40 0280                  		cmpi.w	#$280,d0
0000B382 6200 0000                  		bhi.w	Obj30_Delete
0000B386 6000 0000                  		bra.w	DisplaySprite
0000B38A                            ; ===========================================================================
0000B38A                            
0000B38A                            Obj30_Delete:
0000B38A 6000 0000                  		bra.w	DeleteObject
0000B38E                            ; ===========================================================================
0000B38E 0000                       Obj30_Index:	dc.w Obj30_Main-Obj30_Index
0000B390 0000                       		dc.w Obj30_Block012-Obj30_Index
0000B392 0000                       		dc.w Obj30_Reflect012-Obj30_Index
0000B394 0000                       		dc.w Obj30_Block34-Obj30_Index
0000B396 0000                       		dc.w Obj30_Reflect34-Obj30_Index
0000B398                            
0000B398 0200 00                    Obj30_Vars1:	dc.b 2,	0, 0	; routine num, y-axis dist from	origin,	frame num
0000B39B 0400 01                    		dc.b 4,	0, 1
0000B39E 0600 02                    Obj30_Vars2:	dc.b 6,	0, 2
0000B3A1 0800 01                    		dc.b 8,	0, 1
0000B3A4                            ; ===========================================================================
0000B3A4                            
0000B3A4                            Obj30_Main:				; XREF: Obj30_Index
0000B3A4 45F9 0000 B398             		lea	(Obj30_Vars1).l,a2
0000B3AA 7201                       		moveq	#1,d1
0000B3AC 117C 0048 0016             		move.b	#$48,$16(a0)
0000B3B2 0C28 0003 0028             		cmpi.b	#3,$28(a0)	; is object type 0/1/2 ?
0000B3B8 6500                       		bcs.s	loc_B40C	; if yes, branch
0000B3BA 45F9 0000 B39E             		lea	(Obj30_Vars2).l,a2
0000B3C0 7201                       		moveq	#1,d1
0000B3C2 117C 0038 0016             		move.b	#$38,$16(a0)
0000B3C8                            
0000B3C8                            loc_B40C:
0000B3C8 2248                       		movea.l	a0,a1
0000B3CA 6000                       		bra.s	Obj30_Load	; load main object
0000B3CC                            ; ===========================================================================
0000B3CC                            
0000B3CC                            Obj30_Loop:
0000B3CC 6100 0000                  		bsr.w	SingleObjLoad2
0000B3D0 6600                       		bne.s	loc_B480
0000B3D2                            
0000B3D2                            Obj30_Load:				; XREF: Obj30_Main
0000B3D2 135A 0024                  		move.b	(a2)+,$24(a1)
0000B3D6 12BC 0030                  		move.b	#$30,0(a1)
0000B3DA 3368 0008 0008             		move.w	8(a0),8(a1)
0000B3E0 101A                       		move.b	(a2)+,d0
0000B3E2 4880                       		ext.w	d0
0000B3E4 D068 000C                  		add.w	$C(a0),d0
0000B3E8 3340 000C                  		move.w	d0,$C(a1)
0000B3EC 237C 0000 0000 0004        		move.l	#Map_obj30,4(a1)
0000B3F4 337C C38E 0002             		move.w	#$C38E,2(a1)
0000B3FA 137C 0004 0001             		move.b	#4,1(a1)
0000B400 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B406 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B40C 137C 0020 0019             		move.b	#$20,$19(a1)
0000B412 137C 0004 0018             		move.b	#4,$18(a1)
0000B418 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B41C 2348 003C                  		move.l	a0,$3C(a1)
0000B420 51C9 FFAA                  		dbf	d1,Obj30_Loop	; repeat once to load "reflection object"
0000B424                            
0000B424 137C 0010 0019             		move.b	#$10,$19(a1)
0000B42A 137C 0003 0018             		move.b	#3,$18(a1)
0000B430 5029 0028                  		addq.b	#8,$28(a1)
0000B434 0229 000F 0028             		andi.b	#$F,$28(a1)
0000B43A                            
0000B43A                            loc_B480:
0000B43A 317C 0090 0032             		move.w	#$90,$32(a0)
0000B440 08E8 0004 0001             		bset	#4,1(a0)
0000B446                            
0000B446                            Obj30_Block012:				; XREF: Obj30_Index
0000B446 6100 0000                  		bsr.w	Obj30_Types
0000B44A 323C 002B                  		move.w	#$2B,d1
0000B44E 343C 0048                  		move.w	#$48,d2
0000B452 363C 0049                  		move.w	#$49,d3
0000B456 3828 0008                  		move.w	8(a0),d4
0000B45A 6000 0000                  		bra.w	SolidObject
0000B45E                            ; ===========================================================================
0000B45E                            
0000B45E                            Obj30_Reflect012:			; XREF: Obj30_Index
0000B45E 2268 003C                  		movea.l	$3C(a0),a1
0000B462 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B468 6000 0000                  		bra.w	Obj30_Types
0000B46C                            ; ===========================================================================
0000B46C                            
0000B46C                            Obj30_Block34:				; XREF: Obj30_Index
0000B46C 6100 0000                  		bsr.w	Obj30_Types
0000B470 323C 002B                  		move.w	#$2B,d1
0000B474 343C 0038                  		move.w	#$38,d2
0000B478 363C 0039                  		move.w	#$39,d3
0000B47C 3828 0008                  		move.w	8(a0),d4
0000B480 6000 0000                  		bra.w	SolidObject
0000B484                            ; ===========================================================================
0000B484                            
0000B484                            Obj30_Reflect34:			; XREF: Obj30_Index
0000B484 2268 003C                  		movea.l	$3C(a0),a1
0000B488 3169 0032 0032             		move.w	$32(a1),$32(a0)
0000B48E 3169 000C 0030             		move.w	$C(a1),$30(a0)
0000B494 6000 0002                  		bra.w	*+4
0000B498                            
0000B498                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000B498                            
0000B498                            
0000B498                            Obj30_Types:				; XREF: Obj30_Block012; et al
0000B498 7000                       		moveq	#0,d0
0000B49A 1028 0028                  		move.b	$28(a0),d0
0000B49E 0240 0007                  		andi.w	#7,d0
0000B4A2 D040                       		add.w	d0,d0
0000B4A4 323B 0000                  		move.w	Obj30_TypeIndex(pc,d0.w),d1
0000B4A8 4EFB 1000                  		jmp	Obj30_TypeIndex(pc,d1.w)
0000B4AC                            ; End of function Obj30_Types
0000B4AC                            
0000B4AC                            ; ===========================================================================
0000B4AC 0000                       Obj30_TypeIndex:dc.w Obj30_Type00-Obj30_TypeIndex
0000B4AE 0000                       		dc.w Obj30_Type01-Obj30_TypeIndex
0000B4B0 0000                       		dc.w Obj30_Type02-Obj30_TypeIndex
0000B4B2 0000                       		dc.w Obj30_Type03-Obj30_TypeIndex
0000B4B4 0000                       		dc.w Obj30_Type04-Obj30_TypeIndex
0000B4B6                            ; ===========================================================================
0000B4B6                            
0000B4B6                            Obj30_Type00:				; XREF: Obj30_TypeIndex
0000B4B6 4E75                       		rts	
0000B4B8                            ; ===========================================================================
0000B4B8                            
0000B4B8                            Obj30_Type01:				; XREF: Obj30_TypeIndex
0000B4B8 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B4BC 323C 0040                  		move.w	#$40,d1
0000B4C0 6000                       		bra.s	loc_B514
0000B4C2                            ; ===========================================================================
0000B4C2                            
0000B4C2                            Obj30_Type02:				; XREF: Obj30_TypeIndex
0000B4C2 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B4C6 323C 0040                  		move.w	#$40,d1
0000B4CA 4440                       		neg.w	d0
0000B4CC D041                       		add.w	d1,d0
0000B4CE                            
0000B4CE                            loc_B514:				; XREF: Obj30_Type01
0000B4CE 0828 0003 0028             		btst	#3,$28(a0)
0000B4D4 6700                       		beq.s	loc_B526
0000B4D6 4440                       		neg.w	d0
0000B4D8 D041                       		add.w	d1,d0
0000B4DA E208                       		lsr.b	#1,d0
0000B4DC 0640 0020                  		addi.w	#$20,d0
0000B4E0                            
0000B4E0                            loc_B526:
0000B4E0 6000 0000                  		bra.w	loc_B5EE
0000B4E4                            ; ===========================================================================
0000B4E4                            
0000B4E4                            Obj30_Type03:				; XREF: Obj30_TypeIndex
0000B4E4 0828 0003 0028             		btst	#3,$28(a0)
0000B4EA 6700                       		beq.s	loc_B53E
0000B4EC 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B4F0 0440 0010                  		subi.w	#$10,d0
0000B4F4 6000 0000                  		bra.w	loc_B5EE
0000B4F8                            ; ===========================================================================
0000B4F8                            
0000B4F8                            loc_B53E:
0000B4F8 0828 0003 0022             		btst	#3,$22(a0)
0000B4FE 6600                       		bne.s	loc_B54E
0000B500 08A8 0000 0034             		bclr	#0,$34(a0)
0000B506 6000                       		bra.s	loc_B582
0000B508                            ; ===========================================================================
0000B508                            
0000B508                            loc_B54E:
0000B508 4A28 0034                  		tst.b	$34(a0)
0000B50C 6600                       		bne.s	loc_B582
0000B50E 117C 0001 0034             		move.b	#1,$34(a0)
0000B514 08E8 0000 0035             		bset	#0,$35(a0)
0000B51A 6700                       		beq.s	loc_B582
0000B51C 08E8 0007 0034             		bset	#7,$34(a0)
0000B522 317C 0010 0036             		move.w	#$10,$36(a0)
0000B528 117C 000A 0038             		move.b	#$A,$38(a0)
0000B52E 0C68 0040 0032             		cmpi.w	#$40,$32(a0)
0000B534 6600                       		bne.s	loc_B582
0000B536 317C 0040 0036             		move.w	#$40,$36(a0)
0000B53C                            
0000B53C                            loc_B582:
0000B53C 4A28 0034                  		tst.b	$34(a0)
0000B540 6A00                       		bpl.s	loc_B5AA
0000B542 4A28 0038                  		tst.b	$38(a0)
0000B546 6700                       		beq.s	loc_B594
0000B548 5328 0038                  		subq.b	#1,$38(a0)
0000B54C 6600                       		bne.s	loc_B5AA
0000B54E                            
0000B54E                            loc_B594:
0000B54E 4A68 0032                  		tst.w	$32(a0)
0000B552 6700                       		beq.s	loc_B5A4
0000B554 5368 0032                  		subq.w	#1,$32(a0)
0000B558 5368 0036                  		subq.w	#1,$36(a0)
0000B55C 6600                       		bne.s	loc_B5AA
0000B55E                            
0000B55E                            loc_B5A4:
0000B55E 08A8 0007 0034             		bclr	#7,$34(a0)
0000B564                            
0000B564                            loc_B5AA:
0000B564 3028 0032                  		move.w	$32(a0),d0
0000B568 6000                       		bra.s	loc_B5EE
0000B56A                            ; ===========================================================================
0000B56A                            
0000B56A                            Obj30_Type04:				; XREF: Obj30_TypeIndex
0000B56A 0828 0003 0028             		btst	#3,$28(a0)
0000B570 6700                       		beq.s	Obj30_ChkSwitch
0000B572 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000B576 0440 0010                  		subi.w	#$10,d0
0000B57A 6000                       		bra.s	loc_B5EE
0000B57C                            ; ===========================================================================
0000B57C                            
0000B57C                            Obj30_ChkSwitch:			; XREF: Obj30_Type04
0000B57C 4A28 0034                  		tst.b	$34(a0)
0000B580 6600                       		bne.s	loc_B5E0
0000B582 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0000B586 7000                       		moveq	#0,d0
0000B588 1028 0028                  		move.b	$28(a0),d0	; load object type number
0000B58C E848                       		lsr.w	#4,d0		; read only the	first nybble
0000B58E 4A32 0000                  		tst.b	(a2,d0.w)	; has switch number d0 been pressed?
0000B592 6700                       		beq.s	loc_B5EA	; if not, branch
0000B594 117C 0001 0034             		move.b	#1,$34(a0)
0000B59A                            
0000B59A                            loc_B5E0:
0000B59A 4A68 0032                  		tst.w	$32(a0)
0000B59E 6700                       		beq.s	loc_B5EA
0000B5A0 5568 0032                  		subq.w	#2,$32(a0)
0000B5A4                            
0000B5A4                            loc_B5EA:
0000B5A4 3028 0032                  		move.w	$32(a0),d0
0000B5A8                            
0000B5A8                            loc_B5EE:
0000B5A8 3228 0030                  		move.w	$30(a0),d1
0000B5AC 9240                       		sub.w	d0,d1
0000B5AE 3141 000C                  		move.w	d1,$C(a0)
0000B5B2 4E75                       		rts	
0000B5B4                            ; ===========================================================================
0000B5B4                            ; ---------------------------------------------------------------------------
0000B5B4                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B5B4                            ; ---------------------------------------------------------------------------
0000B5B4                            Map_obj30:
0000B5B4                            	include "_maps\obj30.asm"
0000B5B4                            ; ---------------------------------------------------------------------------
0000B5B4                            ; Sprite mappings - large green	glassy blocks (MZ)
0000B5B4                            ; ---------------------------------------------------------------------------
0000B5B4 0000                       		dc.w byte_B600-Map_obj30
0000B5B6 0000                       		dc.w byte_B63D-Map_obj30
0000B5B8 0000                       		dc.w byte_B648-Map_obj30
0000B5BA 0C                         byte_B600:	dc.b $C
0000B5BB B80C 0000 E0               		dc.b $B8, $C, 0, 0, $E0
0000B5C0 B80C 0800 00               		dc.b $B8, $C, 8, 0, 0
0000B5C5 C00F 0004 E0               		dc.b $C0, $F, 0, 4, $E0
0000B5CA C00F 0804 00               		dc.b $C0, $F, 8, 4, 0
0000B5CF E00F 0004 E0               		dc.b $E0, $F, 0, 4, $E0
0000B5D4 E00F 0804 00               		dc.b $E0, $F, 8, 4, 0
0000B5D9 000F 0004 E0               		dc.b 0,	$F, 0, 4, $E0
0000B5DE 000F 0804 00               		dc.b 0,	$F, 8, 4, 0
0000B5E3 200F 0004 E0               		dc.b $20, $F, 0, 4, $E0
0000B5E8 200F 0804 00               		dc.b $20, $F, 8, 4, 0
0000B5ED 400C 1000 E0               		dc.b $40, $C, $10, 0, $E0
0000B5F2 400C 1800 00               		dc.b $40, $C, $18, 0, 0
0000B5F7 02                         byte_B63D:	dc.b 2
0000B5F8 0806 0014 F0               		dc.b 8,	6, 0, $14, $F0
0000B5FD 0006 0014 00               		dc.b 0,	6, 0, $14, 0
0000B602 0A                         byte_B648:	dc.b $A
0000B603 C80C 0000 E0               		dc.b $C8, $C, 0, 0, $E0
0000B608 C80C 0800 00               		dc.b $C8, $C, 8, 0, 0
0000B60D D00F 0004 E0               		dc.b $D0, $F, 0, 4, $E0
0000B612 D00F 0804 00               		dc.b $D0, $F, 8, 4, 0
0000B617 F00F 0004 E0               		dc.b $F0, $F, 0, 4, $E0
0000B61C F00F 0804 00               		dc.b $F0, $F, 8, 4, 0
0000B621 100F 0004 E0               		dc.b $10, $F, 0, 4, $E0
0000B626 100F 0804 00               		dc.b $10, $F, 8, 4, 0
0000B62B 300C 1000 E0               		dc.b $30, $C, $10, 0, $E0
0000B630 300C 1800 00               		dc.b $30, $C, $18, 0, 0
0000B636 00                         		even
0000B636 00                         		even
0000B636                            
0000B636                            ; ===========================================================================
0000B636                            ; ---------------------------------------------------------------------------
0000B636                            ; Object 31 - stomping metal blocks on chains (MZ)
0000B636                            ; ---------------------------------------------------------------------------
0000B636                            
0000B636                            Obj31:					; XREF: Obj_Index
0000B636 7000                       		moveq	#0,d0
0000B638 1028 0024                  		move.b	$24(a0),d0
0000B63C 323B 0000                  		move.w	Obj31_Index(pc,d0.w),d1
0000B640 4EFB 1000                  		jmp	Obj31_Index(pc,d1.w)
0000B644                            ; ===========================================================================
0000B644 0000                       Obj31_Index:	dc.w Obj31_Main-Obj31_Index
0000B646 0000                       		dc.w loc_B798-Obj31_Index
0000B648 0000                       		dc.w loc_B7FE-Obj31_Index
0000B64A 0000                       		dc.w Obj31_Display2-Obj31_Index
0000B64C 0000                       		dc.w loc_B7E2-Obj31_Index
0000B64E                            
0000B64E 0000                       Obj31_SwchNums:	dc.b 0,	0		; switch number, obj number
0000B650 0100                       		dc.b 1,	0
0000B652                            
0000B652 0200 00                    Obj31_Var:	dc.b 2,	0, 0		; XREF: ROM:0000B6E0o
0000B655 041C 01                    		dc.b 4,	$1C, 1		; routine number, y-position, frame number
0000B658 08CC 03                    		dc.b 8,	$CC, 3
0000B65B 06F0 02                    		dc.b 6,	$F0, 2
0000B65E                            
0000B65E 7000 A000                  word_B6A4:	dc.w $7000, $A000
0000B662 5000 7800                  		dc.w $5000, $7800
0000B666 3800 5800                  		dc.w $3800, $5800
0000B66A B800                       		dc.w $B800
0000B66C                            ; ===========================================================================
0000B66C                            
0000B66C                            Obj31_Main:				; XREF: Obj31_Index
0000B66C 7000                       		moveq	#0,d0
0000B66E 1028 0028                  		move.b	$28(a0),d0
0000B672 6A00                       		bpl.s	loc_B6CE
0000B674 0240 007F                  		andi.w	#$7F,d0
0000B678 D040                       		add.w	d0,d0
0000B67A 45FB 00D2                  		lea	Obj31_SwchNums(pc,d0.w),a2
0000B67E 115A 003A                  		move.b	(a2)+,$3A(a0)
0000B682 101A                       		move.b	(a2)+,d0
0000B684 1140 0028                  		move.b	d0,$28(a0)
0000B688                            
0000B688                            loc_B6CE:
0000B688 0200 000F                  		andi.b	#$F,d0
0000B68C D040                       		add.w	d0,d0
0000B68E 343B 00CE                  		move.w	word_B6A4(pc,d0.w),d2
0000B692 4A40                       		tst.w	d0
0000B694 6600                       		bne.s	loc_B6E0
0000B696 3142 0032                  		move.w	d2,$32(a0)
0000B69A                            
0000B69A                            loc_B6E0:
0000B69A 45F9 0000 B652             		lea	(Obj31_Var).l,a2
0000B6A0 2248                       		movea.l	a0,a1
0000B6A2 7203                       		moveq	#3,d1
0000B6A4 6000                       		bra.s	Obj31_MakeStomper
0000B6A6                            ; ===========================================================================
0000B6A6                            
0000B6A6                            Obj31_Loop:
0000B6A6 6100 0000                  		bsr.w	SingleObjLoad2
0000B6AA 6600 0000                  		bne.w	Obj31_SetSize
0000B6AE                            
0000B6AE                            Obj31_MakeStomper:			; XREF: Obj31_Main
0000B6AE 135A 0024                  		move.b	(a2)+,$24(a1)
0000B6B2 12BC 0031                  		move.b	#$31,0(a1)
0000B6B6 3368 0008 0008             		move.w	8(a0),8(a1)
0000B6BC 101A                       		move.b	(a2)+,d0
0000B6BE 4880                       		ext.w	d0
0000B6C0 D068 000C                  		add.w	$C(a0),d0
0000B6C4 3340 000C                  		move.w	d0,$C(a1)
0000B6C8 237C 0000 0000 0004        		move.l	#Map_obj31,4(a1)
0000B6D0 337C 0300 0002             		move.w	#$300,2(a1)
0000B6D6 137C 0004 0001             		move.b	#4,1(a1)
0000B6DC 3369 000C 0030             		move.w	$C(a1),$30(a1)
0000B6E2 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B6E8 137C 0010 0019             		move.b	#$10,$19(a1)
0000B6EE 3342 0034                  		move.w	d2,$34(a1)
0000B6F2 137C 0004 0018             		move.b	#4,$18(a1)
0000B6F8 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B6FC 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
0000B702 6600                       		bne.s	loc_B76A
0000B704 5341                       		subq.w	#1,d1
0000B706 1028 0028                  		move.b	$28(a0),d0
0000B70A 0240 00F0                  		andi.w	#$F0,d0
0000B70E 0C40 0020                  		cmpi.w	#$20,d0
0000B712 679A                       		beq.s	Obj31_MakeStomper
0000B714 137C 0038 0019             		move.b	#$38,$19(a1)
0000B71A 137C 0090 0020             		move.b	#$90,$20(a1)
0000B720 5241                       		addq.w	#1,d1
0000B722                            
0000B722                            loc_B76A:
0000B722 2348 003C                  		move.l	a0,$3C(a1)
0000B726 51C9 FF7E                  		dbf	d1,Obj31_Loop
0000B72A                            
0000B72A 137C 0003 0018             		move.b	#3,$18(a1)
0000B730                            
0000B730                            Obj31_SetSize:
0000B730 7000                       		moveq	#0,d0
0000B732 1028 0028                  		move.b	$28(a0),d0
0000B736 E648                       		lsr.w	#3,d0
0000B738 0200 000E                  		andi.b	#$E,d0
0000B73C 45FB 0000                  		lea	Obj31_Var2(pc,d0.w),a2
0000B740 115A 0019                  		move.b	(a2)+,$19(a0)
0000B744 115A 001A                  		move.b	(a2)+,$1A(a0)
0000B748 6000                       		bra.s	loc_B798
0000B74A                            ; ===========================================================================
0000B74A 3800                       Obj31_Var2:	dc.b $38, 0		; width, frame number
0000B74C 3009                       		dc.b $30, 9
0000B74E 100A                       		dc.b $10, $A
0000B750                            ; ===========================================================================
0000B750                            
0000B750                            loc_B798:				; XREF: Obj31_Index
0000B750 6100 0000                  		bsr.w	Obj31_Types
0000B754 31E8 000C F7A4             		move.w	$C(a0),($FFFFF7A4).w
0000B75A 7200                       		moveq	#0,d1
0000B75C 1228 0019                  		move.b	$19(a0),d1
0000B760 0641 000B                  		addi.w	#$B,d1
0000B764 343C 000C                  		move.w	#$C,d2
0000B768 363C 000D                  		move.w	#$D,d3
0000B76C 3828 0008                  		move.w	8(a0),d4
0000B770 6100 0000                  		bsr.w	SolidObject
0000B774 0828 0003 0022             		btst	#3,$22(a0)
0000B77A 6700                       		beq.s	Obj31_Display
0000B77C 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B782 6400                       		bcc.s	Obj31_Display
0000B784 2448                       		movea.l	a0,a2
0000B786 41F8 D000                  		lea	($FFFFD000).w,a0
0000B78A 4EB9 0000 0000             		jsr	KillSonic
0000B790 204A                       		movea.l	a2,a0
0000B792                            
0000B792                            Obj31_Display:
0000B792 6100 0000                  		bsr.w	DisplaySprite
0000B796 6000 0000                  		bra.w	Obj31_ChkDel
0000B79A                            ; ===========================================================================
0000B79A                            
0000B79A                            loc_B7E2:				; XREF: Obj31_Index
0000B79A 117C 0080 0016             		move.b	#$80,$16(a0)
0000B7A0 08E8 0004 0001             		bset	#4,1(a0)
0000B7A6 2268 003C                  		movea.l	$3C(a0),a1
0000B7AA 1029 0032                  		move.b	$32(a1),d0
0000B7AE EA08                       		lsr.b	#5,d0
0000B7B0 5600                       		addq.b	#3,d0
0000B7B2 1140 001A                  		move.b	d0,$1A(a0)
0000B7B6                            
0000B7B6                            loc_B7FE:				; XREF: Obj31_Index
0000B7B6 2268 003C                  		movea.l	$3C(a0),a1
0000B7BA 7000                       		moveq	#0,d0
0000B7BC 1029 0032                  		move.b	$32(a1),d0
0000B7C0 D068 0030                  		add.w	$30(a0),d0
0000B7C4 3140 000C                  		move.w	d0,$C(a0)
0000B7C8                            
0000B7C8                            Obj31_Display2:				; XREF: Obj31_Index
0000B7C8 6100 0000                  		bsr.w	DisplaySprite
0000B7CC                            
0000B7CC                            Obj31_ChkDel:				; XREF: Obj31_Display
0000B7CC 3028 0008                  		move.w	8(a0),d0
0000B7D0 0240 FF80                  		andi.w	#$FF80,d0
0000B7D4 3238 F700                  		move.w	($FFFFF700).w,d1
0000B7D8 0441 0080                  		subi.w	#$80,d1
0000B7DC 0241 FF80                  		andi.w	#$FF80,d1
0000B7E0 9041                       		sub.w	d1,d0
0000B7E2 0C40 0280                  		cmpi.w	#$280,d0
0000B7E6 6200 0000                  		bhi.w	DeleteObject
0000B7EA 4E75                       		rts	
0000B7EC                            ; ===========================================================================
0000B7EC                            
0000B7EC                            Obj31_Types:				; XREF: loc_B798
0000B7EC 1028 0028                  		move.b	$28(a0),d0
0000B7F0 0240 000F                  		andi.w	#$F,d0
0000B7F4 D040                       		add.w	d0,d0
0000B7F6 323B 0000                  		move.w	Obj31_TypeIndex(pc,d0.w),d1
0000B7FA 4EFB 1000                  		jmp	Obj31_TypeIndex(pc,d1.w)
0000B7FE                            ; ===========================================================================
0000B7FE 0000                       Obj31_TypeIndex:dc.w Obj31_Type00-Obj31_TypeIndex
0000B800 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B802 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B804 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B806 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B808 0000                       		dc.w Obj31_Type03-Obj31_TypeIndex
0000B80A 0000                       		dc.w Obj31_Type01-Obj31_TypeIndex
0000B80C                            ; ===========================================================================
0000B80C                            
0000B80C                            Obj31_Type00:				; XREF: Obj31_TypeIndex
0000B80C 45F8 F7E0                  		lea	($FFFFF7E0).w,a2 ; load	switch statuses
0000B810 7000                       		moveq	#0,d0
0000B812 1028 003A                  		move.b	$3A(a0),d0	; move number 0	or 1 to	d0
0000B816 4A32 0000                  		tst.b	(a2,d0.w)	; has switch (d0) been pressed?
0000B81A 6700                       		beq.s	loc_B8A8	; if not, branch
0000B81C 4A78 F7A4                  		tst.w	($FFFFF7A4).w
0000B820 6A00                       		bpl.s	loc_B872
0000B822 0C28 0010 0032             		cmpi.b	#$10,$32(a0)
0000B828 6700                       		beq.s	loc_B8A0
0000B82A                            
0000B82A                            loc_B872:
0000B82A 4A68 0032                  		tst.w	$32(a0)
0000B82E 6700                       		beq.s	loc_B8A0
0000B830 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B834 0200 000F                  		andi.b	#$F,d0
0000B838 6600                       		bne.s	loc_B892
0000B83A 4A28 0001                  		tst.b	1(a0)
0000B83E 6A00                       		bpl.s	loc_B892
0000B840 303C 00C7                  		move.w	#$C7,d0
0000B844 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B84A                            
0000B84A                            loc_B892:
0000B84A 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B850 6400                       		bcc.s	Obj31_Restart
0000B852 317C 0000 0032             		move.w	#0,$32(a0)
0000B858                            
0000B858                            loc_B8A0:
0000B858 317C 0000 0012             		move.w	#0,$12(a0)
0000B85E 6000                       		bra.s	Obj31_Restart
0000B860                            ; ===========================================================================
0000B860                            
0000B860                            loc_B8A8:				; XREF: Obj31_Type00
0000B860 3228 0034                  		move.w	$34(a0),d1
0000B864 B268 0032                  		cmp.w	$32(a0),d1
0000B868 6700                       		beq.s	Obj31_Restart
0000B86A 3028 0012                  		move.w	$12(a0),d0
0000B86E 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B874 D168 0032                  		add.w	d0,$32(a0)
0000B878 B268 0032                  		cmp.w	$32(a0),d1
0000B87C 6200                       		bhi.s	Obj31_Restart
0000B87E 3141 0032                  		move.w	d1,$32(a0)
0000B882 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B888 4A28 0001                  		tst.b	1(a0)
0000B88C 6A00                       		bpl.s	Obj31_Restart
0000B88E 303C 00BD                  		move.w	#$BD,d0
0000B892 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B898                            
0000B898                            Obj31_Restart:
0000B898 7000                       		moveq	#0,d0
0000B89A 1028 0032                  		move.b	$32(a0),d0
0000B89E D068 0030                  		add.w	$30(a0),d0
0000B8A2 3140 000C                  		move.w	d0,$C(a0)
0000B8A6 4E75                       		rts	
0000B8A8                            ; ===========================================================================
0000B8A8                            
0000B8A8                            Obj31_Type01:				; XREF: Obj31_TypeIndex
0000B8A8 4A68 0036                  		tst.w	$36(a0)
0000B8AC 6700                       		beq.s	loc_B938
0000B8AE 4A68 0038                  		tst.w	$38(a0)
0000B8B2 6700                       		beq.s	loc_B902
0000B8B4 5368 0038                  		subq.w	#1,$38(a0)
0000B8B8 6000                       		bra.s	loc_B97C
0000B8BA                            ; ===========================================================================
0000B8BA                            
0000B8BA                            loc_B902:
0000B8BA 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000B8BE 0200 000F                  		andi.b	#$F,d0
0000B8C2 6600                       		bne.s	loc_B91C
0000B8C4 4A28 0001                  		tst.b	1(a0)
0000B8C8 6A00                       		bpl.s	loc_B91C
0000B8CA 303C 00C7                  		move.w	#$C7,d0
0000B8CE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rising chain sound
0000B8D4                            
0000B8D4                            loc_B91C:
0000B8D4 0468 0080 0032             		subi.w	#$80,$32(a0)
0000B8DA 6400                       		bcc.s	loc_B97C
0000B8DC 317C 0000 0032             		move.w	#0,$32(a0)
0000B8E2 317C 0000 0012             		move.w	#0,$12(a0)
0000B8E8 317C 0000 0036             		move.w	#0,$36(a0)
0000B8EE 6000                       		bra.s	loc_B97C
0000B8F0                            ; ===========================================================================
0000B8F0                            
0000B8F0                            loc_B938:				; XREF: Obj31_Type01
0000B8F0 3228 0034                  		move.w	$34(a0),d1
0000B8F4 B268 0032                  		cmp.w	$32(a0),d1
0000B8F8 6700                       		beq.s	loc_B97C
0000B8FA 3028 0012                  		move.w	$12(a0),d0
0000B8FE 0668 0070 0012             		addi.w	#$70,$12(a0)	; make object fall
0000B904 D168 0032                  		add.w	d0,$32(a0)
0000B908 B268 0032                  		cmp.w	$32(a0),d1
0000B90C 6200                       		bhi.s	loc_B97C
0000B90E 3141 0032                  		move.w	d1,$32(a0)
0000B912 317C 0000 0012             		move.w	#0,$12(a0)	; stop object falling
0000B918 317C 0001 0036             		move.w	#1,$36(a0)
0000B91E 317C 003C 0038             		move.w	#$3C,$38(a0)
0000B924 4A28 0001                  		tst.b	1(a0)
0000B928 6A00                       		bpl.s	loc_B97C
0000B92A 303C 00BD                  		move.w	#$BD,d0
0000B92E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stomping sound
0000B934                            
0000B934                            loc_B97C:
0000B934 6000 FF62                  		bra.w	Obj31_Restart
0000B938                            ; ===========================================================================
0000B938                            
0000B938                            Obj31_Type03:				; XREF: Obj31_TypeIndex
0000B938 3038 D008                  		move.w	($FFFFD008).w,d0
0000B93C 9068 0008                  		sub.w	8(a0),d0
0000B940 6400                       		bcc.s	loc_B98C
0000B942 4440                       		neg.w	d0
0000B944                            
0000B944                            loc_B98C:
0000B944 0C40 0090                  		cmpi.w	#$90,d0
0000B948 6400                       		bcc.s	loc_B996
0000B94A 5228 0028                  		addq.b	#1,$28(a0)
0000B94E                            
0000B94E                            loc_B996:
0000B94E 6000 FF48                  		bra.w	Obj31_Restart
0000B952                            ; ===========================================================================
0000B952                            ; ---------------------------------------------------------------------------
0000B952                            ; Object 45 - spiked metal block from beta version (MZ)
0000B952                            ; ---------------------------------------------------------------------------
0000B952                            
0000B952                            Obj45:					; XREF: Obj_Index
0000B952 7000                       		moveq	#0,d0
0000B954 1028 0024                  		move.b	$24(a0),d0
0000B958 323B 0000                  		move.w	Obj45_Index(pc,d0.w),d1
0000B95C 4EFB 1000                  		jmp	Obj45_Index(pc,d1.w)
0000B960                            ; ===========================================================================
0000B960 0000                       Obj45_Index:	dc.w Obj45_Main-Obj45_Index
0000B962 0000                       		dc.w Obj45_Solid-Obj45_Index
0000B964 0000                       		dc.w loc_BA8E-Obj45_Index
0000B966 0000                       		dc.w Obj45_Display-Obj45_Index
0000B968 0000                       		dc.w loc_BA7A-Obj45_Index
0000B96A                            
0000B96A 0204 00                    Obj45_Var:	dc.b	2,   4,	  0	; routine number, x-position, frame number
0000B96D 04E4 01                    		dc.b	4, $E4,	  1
0000B970 0834 03                    		dc.b	8, $34,	  3
0000B973 0628 02                    		dc.b	6, $28,	  2
0000B976                            
0000B976 3800                       word_B9BE:	dc.w $3800
0000B978 A000                       		dc.w -$6000
0000B97A 5000                       		dc.w $5000
0000B97C                            ; ===========================================================================
0000B97C                            
0000B97C                            Obj45_Main:				; XREF: Obj45_Index
0000B97C 7000                       		moveq	#0,d0
0000B97E 1028 0028                  		move.b	$28(a0),d0
0000B982 D040                       		add.w	d0,d0
0000B984 343B 00F0                  		move.w	word_B9BE(pc,d0.w),d2
0000B988 45F9 0000 B96A             		lea	(Obj45_Var).l,a2
0000B98E 2248                       		movea.l	a0,a1
0000B990 7203                       		moveq	#3,d1
0000B992 6000                       		bra.s	Obj45_Load
0000B994                            ; ===========================================================================
0000B994                            
0000B994                            Obj45_Loop:
0000B994 6100 0000                  		bsr.w	SingleObjLoad2
0000B998 6600                       		bne.s	loc_BA52
0000B99A                            
0000B99A                            Obj45_Load:				; XREF: Obj45_Main
0000B99A 135A 0024                  		move.b	(a2)+,$24(a1)
0000B99E 12BC 0045                  		move.b	#$45,0(a1)
0000B9A2 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000B9A8 101A                       		move.b	(a2)+,d0
0000B9AA 4880                       		ext.w	d0
0000B9AC D068 0008                  		add.w	8(a0),d0
0000B9B0 3340 0008                  		move.w	d0,8(a1)
0000B9B4 237C 0000 0000 0004        		move.l	#Map_obj45,4(a1)
0000B9BC 337C 0300 0002             		move.w	#$300,2(a1)
0000B9C2 137C 0004 0001             		move.b	#4,1(a1)
0000B9C8 3369 0008 0030             		move.w	8(a1),$30(a1)
0000B9CE 3368 0008 003A             		move.w	8(a0),$3A(a1)
0000B9D4 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000B9DA 137C 0020 0019             		move.b	#$20,$19(a1)
0000B9E0 3342 0034                  		move.w	d2,$34(a1)
0000B9E4 137C 0004 0018             		move.b	#4,$18(a1)
0000B9EA 0C12 0001                  		cmpi.b	#1,(a2)
0000B9EE 6600                       		bne.s	loc_BA40
0000B9F0 137C 0091 0020             		move.b	#$91,$20(a1)
0000B9F6                            
0000B9F6                            loc_BA40:
0000B9F6 135A 001A                  		move.b	(a2)+,$1A(a1)
0000B9FA 2348 003C                  		move.l	a0,$3C(a1)
0000B9FE 51C9 FF94                  		dbf	d1,Obj45_Loop	; repeat 3 times
0000BA02                            
0000BA02 137C 0003 0018             		move.b	#3,$18(a1)
0000BA08                            
0000BA08                            loc_BA52:
0000BA08 117C 0010 0019             		move.b	#$10,$19(a0)
0000BA0E                            
0000BA0E                            Obj45_Solid:				; XREF: Obj45_Index
0000BA0E 3F28 0008                  		move.w	8(a0),-(sp)
0000BA12 6100 0000                  		bsr.w	Obj45_Move
0000BA16 323C 0017                  		move.w	#$17,d1
0000BA1A 343C 0020                  		move.w	#$20,d2
0000BA1E 363C 0020                  		move.w	#$20,d3
0000BA22 381F                       		move.w	(sp)+,d4
0000BA24 6100 0000                  		bsr.w	SolidObject
0000BA28 6100 0000                  		bsr.w	DisplaySprite
0000BA2C 6000 0000                  		bra.w	Obj45_ChkDel
0000BA30                            ; ===========================================================================
0000BA30                            
0000BA30                            loc_BA7A:				; XREF: Obj45_Index
0000BA30 2268 003C                  		movea.l	$3C(a0),a1
0000BA34 1029 0032                  		move.b	$32(a1),d0
0000BA38 0600 0010                  		addi.b	#$10,d0
0000BA3C EA08                       		lsr.b	#5,d0
0000BA3E 5600                       		addq.b	#3,d0
0000BA40 1140 001A                  		move.b	d0,$1A(a0)
0000BA44                            
0000BA44                            loc_BA8E:				; XREF: Obj45_Index
0000BA44 2268 003C                  		movea.l	$3C(a0),a1
0000BA48 7000                       		moveq	#0,d0
0000BA4A 1029 0032                  		move.b	$32(a1),d0
0000BA4E 4440                       		neg.w	d0
0000BA50 D068 0030                  		add.w	$30(a0),d0
0000BA54 3140 0008                  		move.w	d0,8(a0)
0000BA58                            
0000BA58                            Obj45_Display:				; XREF: Obj45_Index
0000BA58 6100 0000                  		bsr.w	DisplaySprite
0000BA5C                            
0000BA5C                            Obj45_ChkDel:				; XREF: Obj45_Solid
0000BA5C 3028 003A                  		move.w	$3A(a0),d0
0000BA60 0240 FF80                  		andi.w	#$FF80,d0
0000BA64 3238 F700                  		move.w	($FFFFF700).w,d1
0000BA68 0441 0080                  		subi.w	#$80,d1
0000BA6C 0241 FF80                  		andi.w	#$FF80,d1
0000BA70 9041                       		sub.w	d1,d0
0000BA72 0C40 0280                  		cmpi.w	#$280,d0
0000BA76 6200 0000                  		bhi.w	DeleteObject
0000BA7A 4E75                       		rts	
0000BA7C                            
0000BA7C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BA7C                            
0000BA7C                            
0000BA7C                            Obj45_Move:				; XREF: Obj45_Solid
0000BA7C 7000                       		moveq	#0,d0
0000BA7E 1028 0028                  		move.b	$28(a0),d0
0000BA82 D040                       		add.w	d0,d0
0000BA84 323B 0000                  		move.w	off_BAD6(pc,d0.w),d1
0000BA88 4EFB 1000                  		jmp	off_BAD6(pc,d1.w)
0000BA8C                            ; End of function Obj45_Move
0000BA8C                            
0000BA8C                            ; ===========================================================================
0000BA8C 0000                       off_BAD6:	dc.w loc_BADA-off_BAD6
0000BA8E 0000                       		dc.w loc_BADA-off_BAD6
0000BA90                            ; ===========================================================================
0000BA90                            
0000BA90                            loc_BADA:				; XREF: off_BAD6
0000BA90 4A68 0036                  		tst.w	$36(a0)
0000BA94 6700                       		beq.s	loc_BB08
0000BA96 4A68 0038                  		tst.w	$38(a0)
0000BA9A 6700                       		beq.s	loc_BAEC
0000BA9C 5368 0038                  		subq.w	#1,$38(a0)
0000BAA0 6000                       		bra.s	loc_BB3C
0000BAA2                            ; ===========================================================================
0000BAA2                            
0000BAA2                            loc_BAEC:
0000BAA2 0468 0080 0032             		subi.w	#$80,$32(a0)
0000BAA8 6400                       		bcc.s	loc_BB3C
0000BAAA 317C 0000 0032             		move.w	#0,$32(a0)
0000BAB0 317C 0000 0010             		move.w	#0,$10(a0)
0000BAB6 317C 0000 0036             		move.w	#0,$36(a0)
0000BABC 6000                       		bra.s	loc_BB3C
0000BABE                            ; ===========================================================================
0000BABE                            
0000BABE                            loc_BB08:				; XREF: loc_BADA
0000BABE 3228 0034                  		move.w	$34(a0),d1
0000BAC2 B268 0032                  		cmp.w	$32(a0),d1
0000BAC6 6700                       		beq.s	loc_BB3C
0000BAC8 3028 0010                  		move.w	$10(a0),d0
0000BACC 0668 0070 0010             		addi.w	#$70,$10(a0)
0000BAD2 D168 0032                  		add.w	d0,$32(a0)
0000BAD6 B268 0032                  		cmp.w	$32(a0),d1
0000BADA 6200                       		bhi.s	loc_BB3C
0000BADC 3141 0032                  		move.w	d1,$32(a0)
0000BAE0 317C 0000 0010             		move.w	#0,$10(a0)
0000BAE6 317C 0001 0036             		move.w	#1,$36(a0)
0000BAEC 317C 003C 0038             		move.w	#$3C,$38(a0)
0000BAF2                            
0000BAF2                            loc_BB3C:
0000BAF2 7000                       		moveq	#0,d0
0000BAF4 1028 0032                  		move.b	$32(a0),d0
0000BAF8 4440                       		neg.w	d0
0000BAFA D068 0030                  		add.w	$30(a0),d0
0000BAFE 3140 0008                  		move.w	d0,8(a0)
0000BB02 4E75                       		rts	
0000BB04                            ; ===========================================================================
0000BB04                            ; ---------------------------------------------------------------------------
0000BB04                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BB04                            ; ---------------------------------------------------------------------------
0000BB04                            Map_obj31:
0000BB04                            	include "_maps\obj31.asm"
0000BB04                            ; ---------------------------------------------------------------------------
0000BB04                            ; Sprite mappings - metal stomping blocks on chains (MZ)
0000BB04                            ; ---------------------------------------------------------------------------
0000BB04 0000                       		dc.w byte_BB64-Map_obj31
0000BB06 0000                       		dc.w byte_BB7E-Map_obj31
0000BB08 0000                       		dc.w byte_BB98-Map_obj31
0000BB0A 0000                       		dc.w byte_BB9E-Map_obj31
0000BB0C 0000                       		dc.w byte_BBA9-Map_obj31
0000BB0E 0000                       		dc.w byte_BBBE-Map_obj31
0000BB10 0000                       		dc.w byte_BBDD-Map_obj31
0000BB12 0000                       		dc.w byte_BC06-Map_obj31
0000BB14 0000                       		dc.w byte_BC06-Map_obj31
0000BB16 0000                       		dc.w byte_BC39-Map_obj31
0000BB18 0000                       		dc.w byte_BC53-Map_obj31
0000BB1A 05                         byte_BB64:	dc.b 5
0000BB1B F406 0000 C8               		dc.b $F4, 6, 0,	0, $C8
0000BB20 F40A 0006 D8               		dc.b $F4, $A, 0, 6, $D8
0000BB25 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BB2A F40A 0806 10               		dc.b $F4, $A, 8, 6, $10
0000BB2F F406 0800 28               		dc.b $F4, 6, 8,	0, $28
0000BB34 05                         byte_BB7E:	dc.b 5
0000BB35 F003 121F D4               		dc.b $F0, 3, $12, $1F, $D4
0000BB3A F003 121F E8               		dc.b $F0, 3, $12, $1F, $E8
0000BB3F F003 121F FC               		dc.b $F0, 3, $12, $1F, $FC
0000BB44 F003 121F 10               		dc.b $F0, 3, $12, $1F, $10
0000BB49 F003 121F 24               		dc.b $F0, 3, $12, $1F, $24
0000BB4E 01                         byte_BB98:	dc.b 1
0000BB4F DC0F 100F F0               		dc.b $DC, $F, $10, $F, $F0
0000BB54 02                         byte_BB9E:	dc.b 2
0000BB55 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB5A 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB5F 04                         byte_BBA9:	dc.b 4
0000BB60 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BB65 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BB6A 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB6F 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB74 06                         byte_BBBE:	dc.b 6
0000BB75 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BB7A D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BB7F E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BB84 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BB89 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BB8E 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BB93 08                         byte_BBDD:	dc.b 8
0000BB94 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BB99 B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BB9E C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BBA3 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BBA8 E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BBAD F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BBB2 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BBB7 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BBBC 0A                         byte_BC06:	dc.b $A
0000BBBD 8001 003F FC               		dc.b $80, 1, 0,	$3F, $FC
0000BBC2 9001 003F FC               		dc.b $90, 1, 0,	$3F, $FC
0000BBC7 A001 003F FC               		dc.b $A0, 1, 0,	$3F, $FC
0000BBCC B001 003F FC               		dc.b $B0, 1, 0,	$3F, $FC
0000BBD1 C001 003F FC               		dc.b $C0, 1, 0,	$3F, $FC
0000BBD6 D001 003F FC               		dc.b $D0, 1, 0,	$3F, $FC
0000BBDB E001 003F FC               		dc.b $E0, 1, 0,	$3F, $FC
0000BBE0 F001 003F FC               		dc.b $F0, 1, 0,	$3F, $FC
0000BBE5 0001 003F FC               		dc.b 0,	1, 0, $3F, $FC
0000BBEA 1001 003F FC               		dc.b $10, 1, 0,	$3F, $FC
0000BBEF 05                         byte_BC39:	dc.b 5
0000BBF0 F406 0000 D0               		dc.b $F4, 6, 0,	0, $D0
0000BBF5 F40A 0006 E0               		dc.b $F4, $A, 0, 6, $E0
0000BBFA F40A 0806 08               		dc.b $F4, $A, 8, 6, 8
0000BBFF F406 0800 20               		dc.b $F4, 6, 8,	0, $20
0000BC04 EC0F 000F F0               		dc.b $EC, $F, 0, $F, $F0
0000BC09 01                         byte_BC53:	dc.b 1
0000BC0A EC0F 002F F0               		dc.b $EC, $F, 0, $2F, $F0
0000BC10 00                         		even
0000BC10 00                         		even
0000BC10                            
0000BC10                            ; ---------------------------------------------------------------------------
0000BC10                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BC10                            ; ---------------------------------------------------------------------------
0000BC10                            Map_obj45:
0000BC10                            	include "_maps\obj45.asm"
0000BC10                            ; ---------------------------------------------------------------------------
0000BC10                            ; Sprite mappings - spiked metal block from beta version (MZ)
0000BC10                            ; ---------------------------------------------------------------------------
0000BC10 0000                       		dc.w byte_BC6C-Map_obj45
0000BC12 0000                       		dc.w byte_BC7C-Map_obj45
0000BC14 0000                       		dc.w byte_BC8C-Map_obj45
0000BC16 0000                       		dc.w byte_BC92-Map_obj45
0000BC18 0000                       		dc.w byte_BC9D-Map_obj45
0000BC1A 0000                       		dc.w byte_BCB2-Map_obj45
0000BC1C 0000                       		dc.w byte_BCD1-Map_obj45
0000BC1E 0000                       		dc.w byte_BCFA-Map_obj45
0000BC20 0000                       		dc.w byte_BCFA-Map_obj45
0000BC22 03                         byte_BC6C:	dc.b 3
0000BC23 E00B 001F F4               		dc.b $E0, $B, 0, $1F, $F4
0000BC28 000B 101F F4               		dc.b 0,	$B, $10, $1F, $F4
0000BC2D F003 002B 0C               		dc.b $F0, 3, 0,	$2B, $C
0000BC32 03                         byte_BC7C:	dc.b 3
0000BC33 E80C 121B F0               		dc.b $E8, $C, $12, $1B,	$F0
0000BC38 FC0C 121B F0               		dc.b $FC, $C, $12, $1B,	$F0
0000BC3D 100C 121B F0               		dc.b $10, $C, $12, $1B,	$F0
0000BC42 01                         byte_BC8C:	dc.b 1
0000BC43 F003 082B FC               		dc.b $F0, 3, 8,	$2B, $FC
0000BC48 02                         byte_BC92:	dc.b 2
0000BC49 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC4E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC53 04                         byte_BC9D:	dc.b 4
0000BC54 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC59 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC5E F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC63 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BC68 06                         byte_BCB2:	dc.b 6
0000BC69 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC6E F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC73 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC78 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BC7D F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BC82 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BC87 08                         byte_BCD1:	dc.b 8
0000BC88 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BC8D F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BC92 F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BC97 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BC9C F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BCA1 F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BCA6 F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BCAB F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BCB0 08                         byte_BCFA:	dc.b 8
0000BCB1 F805 0041 E0               		dc.b $F8, 5, 0,	$41, $E0
0000BCB6 F805 0041 F0               		dc.b $F8, 5, 0,	$41, $F0
0000BCBB F805 0041 00               		dc.b $F8, 5, 0,	$41, 0
0000BCC0 F805 0041 10               		dc.b $F8, 5, 0,	$41, $10
0000BCC5 F805 0041 20               		dc.b $F8, 5, 0,	$41, $20
0000BCCA F805 0041 30               		dc.b $F8, 5, 0,	$41, $30
0000BCCF F805 0041 40               		dc.b $F8, 5, 0,	$41, $40
0000BCD4 F805 0041 50               		dc.b $F8, 5, 0,	$41, $50
0000BCD9 F805 0041 60               		dc.b $F8, 5, 0,	$41, $60
0000BCDE F805 0041 70               		dc.b $F8, 5, 0,	$41, $70
0000BCE4 00                         		even
0000BCE4 00                         		even
0000BCE4                            
0000BCE4                            ; ===========================================================================
0000BCE4                            ; ---------------------------------------------------------------------------
0000BCE4                            ; Object 32 - switches (MZ, SYZ, LZ, SBZ)
0000BCE4                            ; ---------------------------------------------------------------------------
0000BCE4                            
0000BCE4                            Obj32:					; XREF: Obj_Index
0000BCE4 7000                       		moveq	#0,d0
0000BCE6 1028 0024                  		move.b	$24(a0),d0
0000BCEA 323B 0000                  		move.w	Obj32_Index(pc,d0.w),d1
0000BCEE 4EFB 1000                  		jmp	Obj32_Index(pc,d1.w)
0000BCF2                            ; ===========================================================================
0000BCF2 0000                       Obj32_Index:	dc.w Obj32_Main-Obj32_Index
0000BCF4 0000                       		dc.w Obj32_Pressed-Obj32_Index
0000BCF6                            ; ===========================================================================
0000BCF6                            
0000BCF6                            Obj32_Main:				; XREF: Obj32_Index
0000BCF6 5428 0024                  		addq.b	#2,$24(a0)
0000BCFA 217C 0000 0000 0004        		move.l	#Map_obj32,4(a0)
0000BD02 317C 4513 0002             		move.w	#$4513,2(a0)	; MZ specific code
0000BD08 0C38 0002 FE10             		cmpi.b	#2,($FFFFFE10).w
0000BD0E 6700                       		beq.s	loc_BD60
0000BD10 317C 0513 0002             		move.w	#$513,2(a0)	; SYZ, LZ and SBZ specific code
0000BD16                            
0000BD16                            loc_BD60:
0000BD16 117C 0004 0001             		move.b	#4,1(a0)
0000BD1C 117C 0010 0019             		move.b	#$10,$19(a0)
0000BD22 117C 0004 0018             		move.b	#4,$18(a0)
0000BD28 5668 000C                  		addq.w	#3,$C(a0)
0000BD2C                            
0000BD2C                            Obj32_Pressed:				; XREF: Obj32_Index
0000BD2C 4A28 0001                  		tst.b	1(a0)
0000BD30 6A00                       		bpl.s	Obj32_Display
0000BD32 323C 001B                  		move.w	#$1B,d1
0000BD36 343C 0005                  		move.w	#5,d2
0000BD3A 363C 0005                  		move.w	#5,d3
0000BD3E 3828 0008                  		move.w	8(a0),d4
0000BD42 6100 0000                  		bsr.w	SolidObject
0000BD46 08A8 0000 001A             		bclr	#0,$1A(a0)	; use "unpressed" frame
0000BD4C 1028 0028                  		move.b	$28(a0),d0
0000BD50 0240 000F                  		andi.w	#$F,d0
0000BD54 47F8 F7E0                  		lea	($FFFFF7E0).w,a3
0000BD58 47F3 0000                  		lea	(a3,d0.w),a3
0000BD5C 7600                       		moveq	#0,d3
0000BD5E 0828 0006 0028             		btst	#6,$28(a0)
0000BD64 6700                       		beq.s	loc_BDB2
0000BD66 7607                       		moveq	#7,d3
0000BD68                            
0000BD68                            loc_BDB2:
0000BD68 4A28 0028                  		tst.b	$28(a0)
0000BD6C 6A00                       		bpl.s	loc_BDBE
0000BD6E 6100 0000                  		bsr.w	Obj32_MZBlock
0000BD72 6600                       		bne.s	loc_BDC8
0000BD74                            
0000BD74                            loc_BDBE:
0000BD74 4A28 0025                  		tst.b	$25(a0)
0000BD78 6600                       		bne.s	loc_BDC8
0000BD7A 0793                       		bclr	d3,(a3)
0000BD7C 6000                       		bra.s	loc_BDDE
0000BD7E                            ; ===========================================================================
0000BD7E                            
0000BD7E                            loc_BDC8:
0000BD7E 4A13                       		tst.b	(a3)
0000BD80 6600                       		bne.s	loc_BDD6
0000BD82 303C 00CD                  		move.w	#$CD,d0
0000BD86 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play switch sound
0000BD8C                            
0000BD8C                            loc_BDD6:
0000BD8C 07D3                       		bset	d3,(a3)
0000BD8E 08E8 0000 001A             		bset	#0,$1A(a0)	; use "pressed"	frame
0000BD94                            
0000BD94                            loc_BDDE:
0000BD94 0828 0005 0028             		btst	#5,$28(a0)
0000BD9A 6700                       		beq.s	Obj32_Display
0000BD9C 5328 001E                  		subq.b	#1,$1E(a0)
0000BDA0 6A00                       		bpl.s	Obj32_Display
0000BDA2 117C 0007 001E             		move.b	#7,$1E(a0)
0000BDA8 0868 0001 001A             		bchg	#1,$1A(a0)
0000BDAE                            
0000BDAE                            Obj32_Display:
0000BDAE 6100 0000                  		bsr.w	DisplaySprite
0000BDB2 3028 0008                  		move.w	8(a0),d0
0000BDB6 0240 FF80                  		andi.w	#$FF80,d0
0000BDBA 3238 F700                  		move.w	($FFFFF700).w,d1
0000BDBE 0441 0080                  		subi.w	#$80,d1
0000BDC2 0241 FF80                  		andi.w	#$FF80,d1
0000BDC6 9041                       		sub.w	d1,d0
0000BDC8 0C40 0280                  		cmpi.w	#$280,d0
0000BDCC 6200 0000                  		bhi.w	Obj32_Delete
0000BDD0 4E75                       		rts	
0000BDD2                            ; ===========================================================================
0000BDD2                            
0000BDD2                            Obj32_Delete:
0000BDD2 6100 0000                  		bsr.w	DeleteObject
0000BDD6 4E75                       		rts	
0000BDD8                            
0000BDD8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000BDD8                            
0000BDD8                            
0000BDD8                            Obj32_MZBlock:				; XREF: Obj32_Pressed
0000BDD8 3F03                       		move.w	d3,-(sp)
0000BDDA 3428 0008                  		move.w	8(a0),d2
0000BDDE 3628 000C                  		move.w	$C(a0),d3
0000BDE2 0442 0010                  		subi.w	#$10,d2
0000BDE6 5143                       		subq.w	#8,d3
0000BDE8 383C 0020                  		move.w	#$20,d4
0000BDEC 3A3C 0010                  		move.w	#$10,d5
0000BDF0 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking object RAM
0000BDF4 3C3C 005F                  		move.w	#$5F,d6
0000BDF8                            
0000BDF8                            Obj32_MZLoop:
0000BDF8 4A29 0001                  		tst.b	1(a1)
0000BDFC 6A00                       		bpl.s	loc_BE4E
0000BDFE 0C11 0033                  		cmpi.b	#$33,(a1)	; is the object	a green	MZ block?
0000BE02 6700                       		beq.s	loc_BE5E	; if yes, branch
0000BE04                            
0000BE04                            loc_BE4E:
0000BE04 43E9 0040                  		lea	$40(a1),a1	; check	next object
0000BE08 51CE FFEE                  		dbf	d6,Obj32_MZLoop	; repeat $5F times
0000BE0C                            
0000BE0C 361F                       		move.w	(sp)+,d3
0000BE0E 7000                       		moveq	#0,d0
0000BE10                            
0000BE10                            locret_BE5A:
0000BE10 4E75                       		rts	
0000BE12                            ; ===========================================================================
0000BE12 1010                       Obj32_MZData:	dc.b $10, $10
0000BE14                            ; ===========================================================================
0000BE14                            
0000BE14                            loc_BE5E:				; XREF: Obj32_MZBlock
0000BE14 7001                       		moveq	#1,d0
0000BE16 0240 003F                  		andi.w	#$3F,d0
0000BE1A D040                       		add.w	d0,d0
0000BE1C 45FB 00F2                  		lea	Obj32_MZData-2(pc,d0.w),a2
0000BE20 121A                       		move.b	(a2)+,d1
0000BE22 4881                       		ext.w	d1
0000BE24 3029 0008                  		move.w	8(a1),d0
0000BE28 9041                       		sub.w	d1,d0
0000BE2A 9042                       		sub.w	d2,d0
0000BE2C 6400                       		bcc.s	loc_BE80
0000BE2E D241                       		add.w	d1,d1
0000BE30 D041                       		add.w	d1,d0
0000BE32 6500                       		bcs.s	loc_BE84
0000BE34 60CE                       		bra.s	loc_BE4E
0000BE36                            ; ===========================================================================
0000BE36                            
0000BE36                            loc_BE80:
0000BE36 B044                       		cmp.w	d4,d0
0000BE38 62CA                       		bhi.s	loc_BE4E
0000BE3A                            
0000BE3A                            loc_BE84:
0000BE3A 121A                       		move.b	(a2)+,d1
0000BE3C 4881                       		ext.w	d1
0000BE3E 3029 000C                  		move.w	$C(a1),d0
0000BE42 9041                       		sub.w	d1,d0
0000BE44 9043                       		sub.w	d3,d0
0000BE46 6400                       		bcc.s	loc_BE9A
0000BE48 D241                       		add.w	d1,d1
0000BE4A D041                       		add.w	d1,d0
0000BE4C 6500                       		bcs.s	loc_BE9E
0000BE4E 60B4                       		bra.s	loc_BE4E
0000BE50                            ; ===========================================================================
0000BE50                            
0000BE50                            loc_BE9A:
0000BE50 B045                       		cmp.w	d5,d0
0000BE52 62B0                       		bhi.s	loc_BE4E
0000BE54                            
0000BE54                            loc_BE9E:
0000BE54 361F                       		move.w	(sp)+,d3
0000BE56 7001                       		moveq	#1,d0
0000BE58 4E75                       		rts	
0000BE5A                            ; End of function Obj32_MZBlock
0000BE5A                            
0000BE5A                            ; ===========================================================================
0000BE5A                            ; ---------------------------------------------------------------------------
0000BE5A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BE5A                            ; ---------------------------------------------------------------------------
0000BE5A                            Map_obj32:
0000BE5A                            	include "_maps\obj32.asm"
0000BE5A                            ; ---------------------------------------------------------------------------
0000BE5A                            ; Sprite mappings - switches (MZ, SYZ, LZ, SBZ)
0000BE5A                            ; ---------------------------------------------------------------------------
0000BE5A 0000                       		dc.w byte_BEAC-Map_obj32
0000BE5C 0000                       		dc.w byte_BEB7-Map_obj32
0000BE5E 0000                       		dc.w byte_BEC2-Map_obj32
0000BE60 0000                       		dc.w byte_BEB7-Map_obj32
0000BE62 02                         byte_BEAC:	dc.b 2
0000BE63 F505 0000 F0               		dc.b $F5, 5, 0,	0, $F0
0000BE68 F505 0800 00               		dc.b $F5, 5, 8,	0, 0
0000BE6D 02                         byte_BEB7:	dc.b 2
0000BE6E F505 0004 F0               		dc.b $F5, 5, 0,	4, $F0
0000BE73 F505 0804 00               		dc.b $F5, 5, 8,	4, 0
0000BE78 02                         byte_BEC2:	dc.b 2
0000BE79 F505 FFFC F0               		dc.b $F5, 5, $FF, $FC, $F0
0000BE7E F505 07FC 00               		dc.b $F5, 5, 7,	$FC, 0
0000BE83 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000BE88                            		even
0000BE88                            		even
0000BE88                            
0000BE88                            ; ===========================================================================
0000BE88                            ; ---------------------------------------------------------------------------
0000BE88                            ; Object 33 - pushable blocks (MZ, LZ)
0000BE88                            ; ---------------------------------------------------------------------------
0000BE88                            
0000BE88                            Obj33:					; XREF: Obj_Index
0000BE88 7000                       		moveq	#0,d0
0000BE8A 1028 0024                  		move.b	$24(a0),d0
0000BE8E 323B 0000                  		move.w	Obj33_Index(pc,d0.w),d1
0000BE92 4EFB 1000                  		jmp	Obj33_Index(pc,d1.w)
0000BE96                            ; ===========================================================================
0000BE96 0000                       Obj33_Index:	dc.w Obj33_Main-Obj33_Index
0000BE98 0000                       		dc.w loc_BF6E-Obj33_Index
0000BE9A 0000                       		dc.w loc_C02C-Obj33_Index
0000BE9C                            
0000BE9C 1000                       Obj33_Var:	dc.b $10, 0	; object width,	frame number
0000BE9E 4001                       		dc.b $40, 1
0000BEA0                            ; ===========================================================================
0000BEA0                            
0000BEA0                            Obj33_Main:				; XREF: Obj33_Index
0000BEA0 5428 0024                  		addq.b	#2,$24(a0)
0000BEA4 117C 000F 0016             		move.b	#$F,$16(a0)
0000BEAA 117C 000F 0017             		move.b	#$F,$17(a0)
0000BEB0 217C 0000 0000 0004        		move.l	#Map_obj33,4(a0)
0000BEB8 317C 42B8 0002             		move.w	#$42B8,2(a0)	; MZ specific code
0000BEBE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
0000BEC4 6600                       		bne.s	loc_BF16
0000BEC6 317C 43DE 0002             		move.w	#$43DE,2(a0)	; LZ specific code
0000BECC                            
0000BECC                            loc_BF16:
0000BECC 117C 0004 0001             		move.b	#4,1(a0)
0000BED2 117C 0003 0018             		move.b	#3,$18(a0)
0000BED8 3168 0008 0034             		move.w	8(a0),$34(a0)
0000BEDE 3168 000C 0036             		move.w	$C(a0),$36(a0)
0000BEE4 7000                       		moveq	#0,d0
0000BEE6 1028 0028                  		move.b	$28(a0),d0
0000BEEA D040                       		add.w	d0,d0
0000BEEC 0240 000E                  		andi.w	#$E,d0
0000BEF0 45FB 00AA                  		lea	Obj33_Var(pc,d0.w),a2
0000BEF4 115A 0019                  		move.b	(a2)+,$19(a0)
0000BEF8 115A 001A                  		move.b	(a2)+,$1A(a0)
0000BEFC 4A28 0028                  		tst.b	$28(a0)
0000BF00 6700                       		beq.s	Obj33_ChkGone
0000BF02 317C C2B8 0002             		move.w	#$C2B8,2(a0)
0000BF08                            
0000BF08                            Obj33_ChkGone:
0000BF08 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BF0C 7000                       		moveq	#0,d0
0000BF0E 1028 0023                  		move.b	$23(a0),d0
0000BF12 6700                       		beq.s	loc_BF6E
0000BF14 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000BF1A 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0000BF20 6600 0000                  		bne.w	DeleteObject
0000BF24                            
0000BF24                            loc_BF6E:				; XREF: Obj33_Index
0000BF24 4A28 0032                  		tst.b	$32(a0)
0000BF28 6600 0000                  		bne.w	loc_C046
0000BF2C 7200                       		moveq	#0,d1
0000BF2E 1228 0019                  		move.b	$19(a0),d1
0000BF32 0641 000B                  		addi.w	#$B,d1
0000BF36 343C 0010                  		move.w	#$10,d2
0000BF3A 363C 0011                  		move.w	#$11,d3
0000BF3E 3828 0008                  		move.w	8(a0),d4
0000BF42 6100 0000                  		bsr.w	loc_C186
0000BF46 0C78 0200 FE10             		cmpi.w	#$200,($FFFFFE10).w ; is the level MZ act 1?
0000BF4C 6600                       		bne.s	loc_BFC6	; if not, branch
0000BF4E 08A8 0007 0028             		bclr	#7,$28(a0)
0000BF54 3028 0008                  		move.w	8(a0),d0
0000BF58 0C40 0A20                  		cmpi.w	#$A20,d0
0000BF5C 6500                       		bcs.s	loc_BFC6
0000BF5E 0C40 0AA1                  		cmpi.w	#$AA1,d0
0000BF62 6400                       		bcc.s	loc_BFC6
0000BF64 3038 F7A4                  		move.w	($FFFFF7A4).w,d0
0000BF68 0440 001C                  		subi.w	#$1C,d0
0000BF6C 3140 000C                  		move.w	d0,$C(a0)
0000BF70 08F8 0007 F7A4             		bset	#7,($FFFFF7A4).w
0000BF76 08E8 0007 0028             		bset	#7,$28(a0)
0000BF7C                            
0000BF7C                            loc_BFC6:
0000BF7C 3028 0008                  		move.w	8(a0),d0
0000BF80 0240 FF80                  		andi.w	#$FF80,d0
0000BF84 3238 F700                  		move.w	($FFFFF700).w,d1
0000BF88 0441 0080                  		subi.w	#$80,d1
0000BF8C 0241 FF80                  		andi.w	#$FF80,d1
0000BF90 9041                       		sub.w	d1,d0
0000BF92 0C40 0280                  		cmpi.w	#$280,d0
0000BF96 6200                       		bhi.s	loc_BFE6
0000BF98 6000 0000                  		bra.w	DisplaySprite
0000BF9C                            ; ===========================================================================
0000BF9C                            
0000BF9C                            loc_BFE6:
0000BF9C 3028 0034                  		move.w	$34(a0),d0
0000BFA0 0240 FF80                  		andi.w	#$FF80,d0
0000BFA4 3238 F700                  		move.w	($FFFFF700).w,d1
0000BFA8 0441 0080                  		subi.w	#$80,d1
0000BFAC 0241 FF80                  		andi.w	#$FF80,d1
0000BFB0 9041                       		sub.w	d1,d0
0000BFB2 0C40 0280                  		cmpi.w	#$280,d0
0000BFB6 6200                       		bhi.s	loc_C016
0000BFB8 3168 0034 0008             		move.w	$34(a0),8(a0)
0000BFBE 3168 0036 000C             		move.w	$36(a0),$C(a0)
0000BFC4 117C 0004 0024             		move.b	#4,$24(a0)
0000BFCA 6000                       		bra.s	loc_C02C
0000BFCC                            ; ===========================================================================
0000BFCC                            
0000BFCC                            loc_C016:
0000BFCC 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000BFD0 7000                       		moveq	#0,d0
0000BFD2 1028 0023                  		move.b	$23(a0),d0
0000BFD6 6700                       		beq.s	loc_C028
0000BFD8 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
0000BFDE                            
0000BFDE                            loc_C028:
0000BFDE 6000 0000                  		bra.w	DeleteObject
0000BFE2                            ; ===========================================================================
0000BFE2                            
0000BFE2                            loc_C02C:				; XREF: Obj33_Index
0000BFE2 6100 0000                  		bsr.w	ChkObjOnScreen2
0000BFE6 6700                       		beq.s	locret_C044
0000BFE8 117C 0002 0024             		move.b	#2,$24(a0)
0000BFEE 4228 0032                  		clr.b	$32(a0)
0000BFF2 4268 0010                  		clr.w	$10(a0)
0000BFF6 4268 0012                  		clr.w	$12(a0)
0000BFFA                            
0000BFFA                            locret_C044:
0000BFFA 4E75                       		rts	
0000BFFC                            ; ===========================================================================
0000BFFC                            
0000BFFC                            loc_C046:				; XREF: loc_BF6E
0000BFFC 3F28 0008                  		move.w	8(a0),-(sp)
0000C000 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0000C006 6400                       		bcc.s	loc_C056
0000C008 6100 0000                  		bsr.w	SpeedToPos
0000C00C                            
0000C00C                            loc_C056:
0000C00C 0828 0001 0022             		btst	#1,$22(a0)
0000C012 6700                       		beq.s	loc_C0A0
0000C014 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C01A 4EB9 0000 0000             		jsr	ObjHitFloor
0000C020 4A41                       		tst.w	d1
0000C022 6A00 0000                  		bpl.w	loc_C09E
0000C026 D368 000C                  		add.w	d1,$C(a0)
0000C02A 4268 0012                  		clr.w	$12(a0)
0000C02E 08A8 0001 0022             		bclr	#1,$22(a0)
0000C034 3011                       		move.w	(a1),d0
0000C036 0240 03FF                  		andi.w	#$3FF,d0
0000C03A 0C40 016A                  		cmpi.w	#$16A,d0
0000C03E 6500                       		bcs.s	loc_C09E
0000C040 3028 0030                  		move.w	$30(a0),d0
0000C044 E640                       		asr.w	#3,d0
0000C046 3140 0010                  		move.w	d0,$10(a0)
0000C04A 117C 0001 0032             		move.b	#1,$32(a0)
0000C050 4268 000E                  		clr.w	$E(a0)
0000C054                            
0000C054                            loc_C09E:
0000C054 6000                       		bra.s	loc_C0E6
0000C056                            ; ===========================================================================
0000C056                            
0000C056                            loc_C0A0:
0000C056 4A68 0010                  		tst.w	$10(a0)
0000C05A 6700 0000                  		beq.w	loc_C0D6
0000C05E 6B00                       		bmi.s	loc_C0BC
0000C060 7600                       		moveq	#0,d3
0000C062 1628 0019                  		move.b	$19(a0),d3
0000C066 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C06C 4A41                       		tst.w	d1		; has block touched a wall?
0000C06E 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C070 6000                       		bra.s	loc_C0E6
0000C072                            ; ===========================================================================
0000C072                            
0000C072                            loc_C0BC:
0000C072 7600                       		moveq	#0,d3
0000C074 1628 0019                  		move.b	$19(a0),d3
0000C078 4643                       		not.w	d3
0000C07A 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C080 4A41                       		tst.w	d1		; has block touched a wall?
0000C082 6B00                       		bmi.s	Obj33_StopPush	; if yes, branch
0000C084 6000                       		bra.s	loc_C0E6
0000C086                            ; ===========================================================================
0000C086                            
0000C086                            Obj33_StopPush:
0000C086 4268 0010                  		clr.w	$10(a0)		; stop block moving
0000C08A 6000                       		bra.s	loc_C0E6
0000C08C                            ; ===========================================================================
0000C08C                            
0000C08C                            loc_C0D6:
0000C08C 06A8 0000 2001 000C        		addi.l	#$2001,$C(a0)
0000C094 0C28 00A0 000F             		cmpi.b	#-$60,$F(a0)
0000C09A 6400                       		bcc.s	loc_C104
0000C09C                            
0000C09C                            loc_C0E6:
0000C09C 7200                       		moveq	#0,d1
0000C09E 1228 0019                  		move.b	$19(a0),d1
0000C0A2 0641 000B                  		addi.w	#$B,d1
0000C0A6 343C 0010                  		move.w	#$10,d2
0000C0AA 363C 0011                  		move.w	#$11,d3
0000C0AE 381F                       		move.w	(sp)+,d4
0000C0B0 6100 0000                  		bsr.w	loc_C186
0000C0B4 6100                       		bsr.s	Obj33_ChkLava
0000C0B6 6000 FEC4                  		bra.w	loc_BFC6
0000C0BA                            ; ===========================================================================
0000C0BA                            
0000C0BA                            loc_C104:
0000C0BA 381F                       		move.w	(sp)+,d4
0000C0BC 43F8 D000                  		lea	($FFFFD000).w,a1
0000C0C0 08A9 0003 0022             		bclr	#3,$22(a1)
0000C0C6 08A8 0003 0022             		bclr	#3,$22(a0)
0000C0CC 6000 FECE                  		bra.w	loc_BFE6
0000C0D0                            ; ===========================================================================
0000C0D0                            
0000C0D0                            Obj33_ChkLava:
0000C0D0 0C78 0201 FE10             		cmpi.w	#$201,($FFFFFE10).w ; is the level MZ act 2?
0000C0D6 6600                       		bne.s	Obj33_ChkLava2	; if not, branch
0000C0D8 343C FFE0                  		move.w	#-$20,d2
0000C0DC 0C68 0DD0 0008             		cmpi.w	#$DD0,8(a0)
0000C0E2 6700                       		beq.s	Obj33_LoadLava
0000C0E4 0C68 0CC0 0008             		cmpi.w	#$CC0,8(a0)
0000C0EA 6700                       		beq.s	Obj33_LoadLava
0000C0EC 0C68 0BA0 0008             		cmpi.w	#$BA0,8(a0)
0000C0F2 6700                       		beq.s	Obj33_LoadLava
0000C0F4 4E75                       		rts	
0000C0F6                            ; ===========================================================================
0000C0F6                            
0000C0F6                            Obj33_ChkLava2:
0000C0F6 0C78 0202 FE10             		cmpi.w	#$202,($FFFFFE10).w ; is the level MZ act 3?
0000C0FC 6600                       		bne.s	Obj33_NoLava	; if not, branch
0000C0FE 343C 0020                  		move.w	#$20,d2
0000C102 0C68 0560 0008             		cmpi.w	#$560,8(a0)
0000C108 6700                       		beq.s	Obj33_LoadLava
0000C10A 0C68 05C0 0008             		cmpi.w	#$5C0,8(a0)
0000C110 6700                       		beq.s	Obj33_LoadLava
0000C112                            
0000C112                            Obj33_NoLava:
0000C112 4E75                       		rts	
0000C114                            ; ===========================================================================
0000C114                            
0000C114                            Obj33_LoadLava:
0000C114 6100 0000                  		bsr.w	SingleObjLoad
0000C118 6600                       		bne.s	locret_C184
0000C11A 12BC 004C                  		move.b	#$4C,0(a1)	; load lava geyser object
0000C11E 3368 0008 0008             		move.w	8(a0),8(a1)
0000C124 D569 0008                  		add.w	d2,8(a1)
0000C128 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000C12E 0669 0010 000C             		addi.w	#$10,$C(a1)
0000C134 2348 003C                  		move.l	a0,$3C(a1)
0000C138                            
0000C138                            locret_C184:
0000C138 4E75                       		rts	
0000C13A                            ; ===========================================================================
0000C13A                            
0000C13A                            loc_C186:				; XREF: loc_BF6E
0000C13A 1028 0025                  		move.b	$25(a0),d0
0000C13E 6700 0000                  		beq.w	loc_C218
0000C142 5500                       		subq.b	#2,d0
0000C144 6600                       		bne.s	loc_C1AA
0000C146 6100 B462                  		bsr.w	ExitPlatform
0000C14A 0829 0003 0022             		btst	#3,$22(a1)
0000C150 6600                       		bne.s	loc_C1A4
0000C152 4228 0025                  		clr.b	$25(a0)
0000C156 4E75                       		rts	
0000C158                            ; ===========================================================================
0000C158                            
0000C158                            loc_C1A4:
0000C158 3404                       		move.w	d4,d2
0000C15A 6000 B9AC                  		bra.w	MvSonicOnPtfm
0000C15E                            ; ===========================================================================
0000C15E                            
0000C15E                            loc_C1AA:
0000C15E 5500                       		subq.b	#2,d0
0000C160 6600                       		bne.s	loc_C1F2
0000C162 6100 0000                  		bsr.w	SpeedToPos
0000C166 0668 0018 0012             		addi.w	#$18,$12(a0)
0000C16C 4EB9 0000 0000             		jsr	ObjHitFloor
0000C172 4A41                       		tst.w	d1
0000C174 6A00 0000                  		bpl.w	locret_C1F0
0000C178 D368 000C                  		add.w	d1,$C(a0)
0000C17C 4268 0012                  		clr.w	$12(a0)
0000C180 4228 0025                  		clr.b	$25(a0)
0000C184 3011                       		move.w	(a1),d0
0000C186 0240 03FF                  		andi.w	#$3FF,d0
0000C18A 0C40 016A                  		cmpi.w	#$16A,d0
0000C18E 6500                       		bcs.s	locret_C1F0
0000C190 3028 0030                  		move.w	$30(a0),d0
0000C194 E640                       		asr.w	#3,d0
0000C196 3140 0010                  		move.w	d0,$10(a0)
0000C19A 117C 0001 0032             		move.b	#1,$32(a0)
0000C1A0 4268 000E                  		clr.w	$E(a0)
0000C1A4                            
0000C1A4                            locret_C1F0:
0000C1A4 4E75                       		rts	
0000C1A6                            ; ===========================================================================
0000C1A6                            
0000C1A6                            loc_C1F2:
0000C1A6 6100 0000                  		bsr.w	SpeedToPos
0000C1AA 3028 0008                  		move.w	8(a0),d0
0000C1AE 0240 000C                  		andi.w	#$C,d0
0000C1B2 6600 0000                  		bne.w	locret_C2E4
0000C1B6 0268 FFF0 0008             		andi.w	#-$10,8(a0)
0000C1BC 3168 0010 0030             		move.w	$10(a0),$30(a0)
0000C1C2 4268 0010                  		clr.w	$10(a0)
0000C1C6 5528 0025                  		subq.b	#2,$25(a0)
0000C1CA 4E75                       		rts	
0000C1CC                            ; ===========================================================================
0000C1CC                            
0000C1CC                            loc_C218:
0000C1CC 6100 0000                  		bsr.w	loc_FAC8
0000C1D0 4A44                       		tst.w	d4
0000C1D2 6700 0000                  		beq.w	locret_C2E4
0000C1D6 6B00 0000                  		bmi.w	locret_C2E4
0000C1DA 4A28 0032                  		tst.b	$32(a0)
0000C1DE 6700                       		beq.s	loc_C230
0000C1E0 6000 0000                  		bra.w	locret_C2E4
0000C1E4                            ; ===========================================================================
0000C1E4                            
0000C1E4                            loc_C230:
0000C1E4 4A40                       		tst.w	d0
0000C1E6 6700 0000                  		beq.w	locret_C2E4
0000C1EA 6B00                       		bmi.s	loc_C268
0000C1EC 0829 0000 0022             		btst	#0,$22(a1)
0000C1F2 6600 0000                  		bne.w	locret_C2E4
0000C1F6 3F00                       		move.w	d0,-(sp)
0000C1F8 7600                       		moveq	#0,d3
0000C1FA 1628 0019                  		move.b	$19(a0),d3
0000C1FE 4EB9 0000 0000             		jsr	ObjHitWallRight
0000C204 301F                       		move.w	(sp)+,d0
0000C206 4A41                       		tst.w	d1
0000C208 6B00 0000                  		bmi.w	locret_C2E4
0000C20C 06A8 0001 0000 0008        		addi.l	#$10000,8(a0)
0000C214 7001                       		moveq	#1,d0
0000C216 323C 0040                  		move.w	#$40,d1
0000C21A 6000                       		bra.s	loc_C294
0000C21C                            ; ===========================================================================
0000C21C                            
0000C21C                            loc_C268:
0000C21C 0829 0000 0022             		btst	#0,$22(a1)
0000C222 6700                       		beq.s	locret_C2E4
0000C224 3F00                       		move.w	d0,-(sp)
0000C226 7600                       		moveq	#0,d3
0000C228 1628 0019                  		move.b	$19(a0),d3
0000C22C 4643                       		not.w	d3
0000C22E 4EB9 0000 0000             		jsr	ObjHitWallLeft
0000C234 301F                       		move.w	(sp)+,d0
0000C236 4A41                       		tst.w	d1
0000C238 6B00                       		bmi.s	locret_C2E4
0000C23A 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
0000C242 70FF                       		moveq	#-1,d0
0000C244 323C FFC0                  		move.w	#-$40,d1
0000C248                            
0000C248                            loc_C294:
0000C248 43F8 D000                  		lea	($FFFFD000).w,a1
0000C24C D169 0008                  		add.w	d0,8(a1)
0000C250 3341 0014                  		move.w	d1,$14(a1)
0000C254 337C 0000 0010             		move.w	#0,$10(a1)
0000C25A 3F00                       		move.w	d0,-(sp)
0000C25C 303C 00A7                  		move.w	#$A7,d0
0000C260 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play pushing sound
0000C266 301F                       		move.w	(sp)+,d0
0000C268 4A28 0028                  		tst.b	$28(a0)
0000C26C 6B00                       		bmi.s	locret_C2E4
0000C26E 3F00                       		move.w	d0,-(sp)
0000C270 4EB9 0000 0000             		jsr	ObjHitFloor
0000C276 301F                       		move.w	(sp)+,d0
0000C278 0C41 0004                  		cmpi.w	#4,d1
0000C27C 6F00                       		ble.s	loc_C2E0
0000C27E 317C 0400 0010             		move.w	#$400,$10(a0)
0000C284 4A40                       		tst.w	d0
0000C286 6A00                       		bpl.s	loc_C2D8
0000C288 4468 0010                  		neg.w	$10(a0)
0000C28C                            
0000C28C                            loc_C2D8:
0000C28C 117C 0006 0025             		move.b	#6,$25(a0)
0000C292 6000                       		bra.s	locret_C2E4
0000C294                            ; ===========================================================================
0000C294                            
0000C294                            loc_C2E0:
0000C294 D368 000C                  		add.w	d1,$C(a0)
0000C298                            
0000C298                            locret_C2E4:
0000C298 4E75                       		rts	
0000C29A                            ; ===========================================================================
0000C29A                            ; ---------------------------------------------------------------------------
0000C29A                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C29A                            ; ---------------------------------------------------------------------------
0000C29A                            Map_obj33:
0000C29A                            	include "_maps\obj33.asm"
0000C29A                            ; ---------------------------------------------------------------------------
0000C29A                            ; Sprite mappings - pushable blocks (MZ, LZ)
0000C29A                            ; ---------------------------------------------------------------------------
0000C29A 0000                       		dc.w byte_C2EA-Map_obj33
0000C29C 0000                       		dc.w byte_C2F0-Map_obj33
0000C29E 01                         byte_C2EA:	dc.b 1
0000C29F F00F 0008 F0               		dc.b $F0, $F, 0, 8, $F0	; single block
0000C2A4 04                         byte_C2F0:	dc.b 4
0000C2A5 F00F 0008 C0               		dc.b $F0, $F, 0, 8, $C0	; row of 4 blocks
0000C2AA F00F 0008 E0               		dc.b $F0, $F, 0, 8, $E0
0000C2AF F00F 0008 00               		dc.b $F0, $F, 0, 8, 0
0000C2B4 F00F 0008 20               		dc.b $F0, $F, 0, 8, $20
0000C2BA 00                         		even
0000C2BA 00                         		even
0000C2BA                            
0000C2BA                            ; ===========================================================================
0000C2BA                            ; ---------------------------------------------------------------------------
0000C2BA                            ; Object 34 - zone title cards
0000C2BA                            ; ---------------------------------------------------------------------------
0000C2BA                            
0000C2BA                            Obj34:					; XREF: Obj_Index
0000C2BA 7000                       		moveq	#0,d0
0000C2BC 1028 0024                  		move.b	$24(a0),d0
0000C2C0 323B 0000                  		move.w	Obj34_Index(pc,d0.w),d1
0000C2C4 4EFB 1000                  		jmp	Obj34_Index(pc,d1.w)
0000C2C8                            ; ===========================================================================
0000C2C8 0000                       Obj34_Index:	dc.w Obj34_CheckSBZ3-Obj34_Index
0000C2CA 0000                       		dc.w Obj34_ChkPos-Obj34_Index
0000C2CC 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C2CE 0000                       		dc.w Obj34_Wait-Obj34_Index
0000C2D0                            ; ===========================================================================
0000C2D0                            
0000C2D0                            Obj34_CheckSBZ3:			; XREF: Obj34_Index
0000C2D0 2248                       		movea.l	a0,a1
0000C2D2 7000                       		moveq	#0,d0
0000C2D4 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C2D8 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ 3
0000C2DE 6600                       		bne.s	Obj34_CheckFZ
0000C2E0 7005                       		moveq	#5,d0		; load title card number 5 (SBZ)
0000C2E2                            
0000C2E2                            Obj34_CheckFZ:
0000C2E2 3400                       		move.w	d0,d2
0000C2E4 0C78 0502 FE10             		cmpi.w	#$502,($FFFFFE10).w ; check if level is	FZ
0000C2EA 6600                       		bne.s	Obj34_LoadConfig
0000C2EC 7006                       		moveq	#6,d0		; load title card number 6 (FZ)
0000C2EE 740B                       		moveq	#$B,d2		; use "FINAL" mappings
0000C2F0                            
0000C2F0                            Obj34_LoadConfig:
0000C2F0 47F9 0000 0000             		lea	(Obj34_ConData).l,a3
0000C2F6 E948                       		lsl.w	#4,d0
0000C2F8 D6C0                       		adda.w	d0,a3
0000C2FA 45F9 0000 0000             		lea	(Obj34_ItemData).l,a2
0000C300 7203                       		moveq	#3,d1
0000C302                            
0000C302                            Obj34_Loop:
0000C302 12BC 0034                  		move.b	#$34,0(a1)
0000C306 3353 0008                  		move.w	(a3),8(a1)	; load start x-position
0000C30A 335B 0032                  		move.w	(a3)+,$32(a1)	; load finish x-position (same as start)
0000C30E 335B 0030                  		move.w	(a3)+,$30(a1)	; load main x-position
0000C312 335A 000A                  		move.w	(a2)+,$A(a1)
0000C316 135A 0024                  		move.b	(a2)+,$24(a1)
0000C31A 101A                       		move.b	(a2)+,d0
0000C31C 6600                       		bne.s	Obj34_ActNumber
0000C31E 1002                       		move.b	d2,d0
0000C320                            
0000C320                            Obj34_ActNumber:
0000C320 0C00 0007                  		cmpi.b	#7,d0
0000C324 6600                       		bne.s	Obj34_MakeSprite
0000C326 D038 FE11                  		add.b	($FFFFFE11).w,d0
0000C32A 0C38 0003 FE11             		cmpi.b	#3,($FFFFFE11).w
0000C330 6600                       		bne.s	Obj34_MakeSprite
0000C332 5300                       		subq.b	#1,d0
0000C334                            
0000C334                            Obj34_MakeSprite:
0000C334 1340 001A                  		move.b	d0,$1A(a1)	; display frame	number d0
0000C338 237C 0000 0000 0004        		move.l	#Map_obj34,4(a1)
0000C340 337C 8580 0002             		move.w	#$8580,2(a1)
0000C346 137C 0078 0019             		move.b	#$78,$19(a1)
0000C34C 137C 0000 0001             		move.b	#0,1(a1)
0000C352 137C 0000 0018             		move.b	#0,$18(a1)
0000C358 337C 003C 001E             		move.w	#60,$1E(a1)	; set time delay to 1 second
0000C35E 43E9 0040                  		lea	$40(a1),a1	; next object
0000C362 51C9 FF9E                  		dbf	d1,Obj34_Loop	; repeat sequence another 3 times
0000C366                            
0000C366                            Obj34_ChkPos:				; XREF: Obj34_Index
0000C366 7210                       		moveq	#$10,d1		; set horizontal speed
0000C368 3028 0030                  		move.w	$30(a0),d0
0000C36C B068 0008                  		cmp.w	8(a0),d0	; has item reached the target position?
0000C370 6700                       		beq.s	loc_C3C8	; if yes, branch
0000C372 6C00                       		bge.s	Obj34_Move
0000C374 4441                       		neg.w	d1
0000C376                            
0000C376                            Obj34_Move:
0000C376 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C37A                            
0000C37A                            loc_C3C8:
0000C37A 3028 0008                  		move.w	8(a0),d0
0000C37E 6B00                       		bmi.s	locret_C3D8
0000C380 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C384 6400                       		bcc.s	locret_C3D8	; if yes, branch
0000C386 6000 0000                  		bra.w	DisplaySprite
0000C38A                            ; ===========================================================================
0000C38A                            
0000C38A                            locret_C3D8:
0000C38A 4E75                       		rts	
0000C38C                            ; ===========================================================================
0000C38C                            
0000C38C                            Obj34_Wait:				; XREF: Obj34_Index
0000C38C 4A68 001E                  		tst.w	$1E(a0)		; is time remaining zero?
0000C390 6700                       		beq.s	Obj34_ChkPos2	; if yes, branch
0000C392 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time
0000C396 6000 0000                  		bra.w	DisplaySprite
0000C39A                            ; ===========================================================================
0000C39A                            
0000C39A                            Obj34_ChkPos2:				; XREF: Obj34_Wait
0000C39A 4A28 0001                  		tst.b	1(a0)
0000C39E 6A00                       		bpl.s	Obj34_ChangeArt
0000C3A0 7220                       		moveq	#$20,d1
0000C3A2 3028 0032                  		move.w	$32(a0),d0
0000C3A6 B068 0008                  		cmp.w	8(a0),d0	; has item reached the finish position?
0000C3AA 6700                       		beq.s	Obj34_ChangeArt	; if yes, branch
0000C3AC 6C00                       		bge.s	Obj34_Move2
0000C3AE 4441                       		neg.w	d1
0000C3B0                            
0000C3B0                            Obj34_Move2:
0000C3B0 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C3B4 3028 0008                  		move.w	8(a0),d0
0000C3B8 6B00                       		bmi.s	locret_C412
0000C3BA 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C3BE 6400                       		bcc.s	locret_C412	; if yes, branch
0000C3C0 6000 0000                  		bra.w	DisplaySprite
0000C3C4                            ; ===========================================================================
0000C3C4                            
0000C3C4                            locret_C412:
0000C3C4 4E75                       		rts	
0000C3C6                            ; ===========================================================================
0000C3C6                            
0000C3C6                            Obj34_ChangeArt:			; XREF: Obj34_ChkPos2
0000C3C6 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000C3CC 6600                       		bne.s	Obj34_Delete
0000C3CE 7002                       		moveq	#2,d0
0000C3D0 4EB9 0000 1580             		jsr	(LoadPLC).l	; load explosion patterns
0000C3D6 7000                       		moveq	#0,d0
0000C3D8 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C3DC 0640 0015                  		addi.w	#$15,d0
0000C3E0 4EB9 0000 1580             		jsr	(LoadPLC).l	; load animal patterns
0000C3E6                            
0000C3E6                            Obj34_Delete:
0000C3E6 6000 0000                  		bra.w	DeleteObject
0000C3EA                            ; ===========================================================================
0000C3EA 00D0                       Obj34_ItemData:	dc.w $D0	; y-axis position
0000C3EC 0200                       		dc.b 2,	0	; routine number, frame	number (changes)
0000C3EE 00E4                       		dc.w $E4
0000C3F0 0206                       		dc.b 2,	6
0000C3F2 00EA                       		dc.w $EA
0000C3F4 0207                       		dc.b 2,	7
0000C3F6 00E0                       		dc.w $E0
0000C3F8 020A                       		dc.b 2,	$A
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA                            ; Title	card configuration data
0000C3FA                            ; Format:
0000C3FA                            ; 4 bytes per item (YYYY XXXX)
0000C3FA                            ; 4 items per level (GREEN HILL, ZONE, ACT X, oval)
0000C3FA                            ; ---------------------------------------------------------------------------
0000C3FA 0000 0120 FEFC 013C 0414+  Obj34_ConData:	dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; GHZ
0000C40A 0000 0120 FEF4 0134 040C+  		dc.w 0,	$120, $FEF4, $134, $40C, $14C, $20C, $14C ; LZ
0000C41A 0000 0120 FEE0 0120 03F8+  		dc.w 0,	$120, $FEE0, $120, $3F8, $138, $1F8, $138 ; MZ
0000C42A 0000 0120 FEFC 013C 0414+  		dc.w 0,	$120, $FEFC, $13C, $414, $154, $214, $154 ; SLZ
0000C43A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SYZ
0000C44A 0000 0120 FF04 0144 041C+  		dc.w 0,	$120, $FF04, $144, $41C, $15C, $21C, $15C ; SBZ
0000C45A 0000 0120 FEE4 0124 03EC+  		dc.w 0,	$120, $FEE4, $124, $3EC, $3EC, $1EC, $12C ; FZ
0000C46A                            ; ===========================================================================
0000C46A                            ; ---------------------------------------------------------------------------
0000C46A                            ; Object 39 - "GAME OVER" and "TIME OVER"
0000C46A                            ; ---------------------------------------------------------------------------
0000C46A                            
0000C46A                            Obj39:					; XREF: Obj_Index
0000C46A 7000                       		moveq	#0,d0
0000C46C 1028 0024                  		move.b	$24(a0),d0
0000C470 323B 0000                  		move.w	Obj39_Index(pc,d0.w),d1
0000C474 4EFB 1000                  		jmp	Obj39_Index(pc,d1.w)
0000C478                            ; ===========================================================================
0000C478 0000                       Obj39_Index:	dc.w Obj39_ChkPLC-Obj39_Index
0000C47A 0000                       		dc.w loc_C50C-Obj39_Index
0000C47C 0000                       		dc.w Obj39_Wait-Obj39_Index
0000C47E                            ; ===========================================================================
0000C47E                            
0000C47E                            Obj39_ChkPLC:				; XREF: Obj39_Index
0000C47E 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C482 6700                       		beq.s	Obj39_Main	; if yes, branch
0000C484 4E75                       		rts	
0000C486                            ; ===========================================================================
0000C486                            
0000C486                            Obj39_Main:
0000C486 5428 0024                  		addq.b	#2,$24(a0)
0000C48A 317C 0050 0008             		move.w	#$50,8(a0)	; set x-position
0000C490 0828 0000 001A             		btst	#0,$1A(a0)	; is the object	"OVER"?
0000C496 6700                       		beq.s	loc_C4EC	; if not, branch
0000C498 317C 01F0 0008             		move.w	#$1F0,8(a0)	; set x-position for "OVER"
0000C49E                            
0000C49E                            loc_C4EC:
0000C49E 317C 00F0 000A             		move.w	#$F0,$A(a0)
0000C4A4 217C 0000 0000 0004        		move.l	#Map_obj39,4(a0)
0000C4AC 317C 855E 0002             		move.w	#$855E,2(a0)
0000C4B2 117C 0000 0001             		move.b	#0,1(a0)
0000C4B8 117C 0000 0018             		move.b	#0,$18(a0)
0000C4BE                            
0000C4BE                            loc_C50C:				; XREF: Obj39_Index
0000C4BE 7210                       		moveq	#$10,d1		; set horizontal speed
0000C4C0 0C68 0120 0008             		cmpi.w	#$120,8(a0)	; has item reached its target position?
0000C4C6 6700                       		beq.s	Obj39_SetWait	; if yes, branch
0000C4C8 6500                       		bcs.s	Obj39_Move
0000C4CA 4441                       		neg.w	d1
0000C4CC                            
0000C4CC                            Obj39_Move:
0000C4CC D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C4D0 6000 0000                  		bra.w	DisplaySprite
0000C4D4                            ; ===========================================================================
0000C4D4                            
0000C4D4                            Obj39_SetWait:				; XREF: Obj39_Main
0000C4D4 317C 02D0 001E             		move.w	#720,$1E(a0)	; set time delay to 12 seconds
0000C4DA 5428 0024                  		addq.b	#2,$24(a0)
0000C4DE 4E75                       		rts	
0000C4E0                            ; ===========================================================================
0000C4E0                            
0000C4E0                            Obj39_Wait:				; XREF: Obj39_Index
0000C4E0 1038 F605                  		move.b	($FFFFF605).w,d0
0000C4E4 0200 0070                  		andi.b	#$70,d0		; is button A, B or C pressed?
0000C4E8 6600                       		bne.s	Obj39_ChgMode	; if yes, branch
0000C4EA 0828 0000 001A             		btst	#0,$1A(a0)
0000C4F0 6600                       		bne.s	Obj39_Display
0000C4F2 4A68 001E                  		tst.w	$1E(a0)		; has time delay reached zero?
0000C4F6 6700                       		beq.s	Obj39_ChgMode	; if yes, branch
0000C4F8 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C4FC 6000 0000                  		bra.w	DisplaySprite
0000C500                            ; ===========================================================================
0000C500                            
0000C500                            Obj39_ChgMode:				; XREF: Obj39_Wait
0000C500 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is time over flag set?
0000C504 6600                       		bne.s	Obj39_ResetLvl	; if yes, branch
0000C506 11FC 0014 F600             		move.b	#$14,($FFFFF600).w ; set mode to $14 (continue screen)
0000C50C 4A38 FE18                  		tst.b	($FFFFFE18).w	; do you have any continues?
0000C510 6600                       		bne.s	Obj39_Display	; if yes, branch
0000C512 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set mode to 0 (Sega screen)
0000C518 6000                       		bra.s	Obj39_Display
0000C51A                            ; ===========================================================================
0000C51A                            
0000C51A                            Obj39_ResetLvl:				; XREF: Obj39_ChgMode
0000C51A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C520                            
0000C520                            Obj39_Display:				; XREF: Obj39_ChgMode
0000C520 6000 0000                  		bra.w	DisplaySprite
0000C524                            ; ===========================================================================
0000C524                            ; ---------------------------------------------------------------------------
0000C524                            ; Object 3A - "SONIC GOT THROUGH" title	card
0000C524                            ; ---------------------------------------------------------------------------
0000C524                            
0000C524                            Obj3A:					; XREF: Obj_Index
0000C524 7000                       		moveq	#0,d0
0000C526 1028 0024                  		move.b	$24(a0),d0
0000C52A 323B 0000                  		move.w	Obj3A_Index(pc,d0.w),d1
0000C52E 4EFB 1000                  		jmp	Obj3A_Index(pc,d1.w)
0000C532                            ; ===========================================================================
0000C532 0000                       Obj3A_Index:	dc.w Obj3A_ChkPLC-Obj3A_Index
0000C534 0000                       		dc.w Obj3A_ChkPos-Obj3A_Index
0000C536 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C538 0000                       		dc.w Obj3A_TimeBonus-Obj3A_Index
0000C53A 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C53C 0000                       		dc.w Obj3A_NextLevel-Obj3A_Index
0000C53E 0000                       		dc.w Obj3A_Wait-Obj3A_Index
0000C540 0000                       		dc.w Obj3A_ChkPos2-Obj3A_Index
0000C542 0000                       		dc.w loc_C766-Obj3A_Index
0000C544                            ; ===========================================================================
0000C544                            
0000C544                            Obj3A_ChkPLC:				; XREF: Obj3A_Index
0000C544 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C548 6700                       		beq.s	Obj3A_Main	; if yes, branch
0000C54A 4E75                       		rts	
0000C54C                            ; ===========================================================================
0000C54C                            
0000C54C                            Obj3A_Main:
0000C54C 2248                       		movea.l	a0,a1
0000C54E 45F9 0000 0000             		lea	(Obj3A_Config).l,a2
0000C554 7206                       		moveq	#6,d1
0000C556                            
0000C556                            Obj3A_Loop:
0000C556 12BC 003A                  		move.b	#$3A,0(a1)
0000C55A 3352 0008                  		move.w	(a2),8(a1)	; load start x-position
0000C55E 335A 0032                  		move.w	(a2)+,$32(a1)	; load finish x-position (same as start)
0000C562 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C566 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C56A 135A 0024                  		move.b	(a2)+,$24(a1)
0000C56E 101A                       		move.b	(a2)+,d0
0000C570 0C00 0006                  		cmpi.b	#6,d0
0000C574 6600                       		bne.s	loc_C5CA
0000C576 D038 FE11                  		add.b	($FFFFFE11).w,d0 ; add act number to frame number
0000C57A                            
0000C57A                            loc_C5CA:
0000C57A 1340 001A                  		move.b	d0,$1A(a1)
0000C57E 237C 0000 0000 0004        		move.l	#Map_obj3A,4(a1)
0000C586 337C 8580 0002             		move.w	#$8580,2(a1)
0000C58C 137C 0000 0001             		move.b	#0,1(a1)
0000C592 43E9 0040                  		lea	$40(a1),a1
0000C596 51C9 FFBE                  		dbf	d1,Obj3A_Loop	; repeat 6 times
0000C59A                            
0000C59A                            Obj3A_ChkPos:				; XREF: Obj3A_Index
0000C59A 7210                       		moveq	#$10,d1		; set horizontal speed
0000C59C 3028 0030                  		move.w	$30(a0),d0
0000C5A0 B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C5A4 6700                       		beq.s	loc_C61A	; if yes, branch
0000C5A6 6C00                       		bge.s	Obj3A_Move
0000C5A8 4441                       		neg.w	d1
0000C5AA                            
0000C5AA                            Obj3A_Move:
0000C5AA D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C5AE                            
0000C5AE                            loc_C5FE:				; XREF: loc_C61A
0000C5AE 3028 0008                  		move.w	8(a0),d0
0000C5B2 6B00                       		bmi.s	locret_C60E
0000C5B4 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C5B8 6400                       		bcc.s	locret_C60E	; if yes, branch
0000C5BA 6000 0000                  		bra.w	DisplaySprite
0000C5BE                            ; ===========================================================================
0000C5BE                            
0000C5BE                            locret_C60E:
0000C5BE 4E75                       		rts	
0000C5C0                            ; ===========================================================================
0000C5C0                            
0000C5C0                            loc_C610:				; XREF: loc_C61A
0000C5C0 117C 000E 0024             		move.b	#$E,$24(a0)
0000C5C6 6000 0000                  		bra.w	Obj3A_ChkPos2
0000C5CA                            ; ===========================================================================
0000C5CA                            
0000C5CA                            loc_C61A:				; XREF: Obj3A_ChkPos
0000C5CA 0C38 000E D724             		cmpi.b	#$E,($FFFFD724).w
0000C5D0 67EE                       		beq.s	loc_C610
0000C5D2 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C5D8 66D4                       		bne.s	loc_C5FE
0000C5DA 5428 0024                  		addq.b	#2,$24(a0)
0000C5DE 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C5E4                            
0000C5E4                            Obj3A_Wait:				; XREF: Obj3A_Index
0000C5E4 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C5E8 6600                       		bne.s	Obj3A_Display
0000C5EA 5428 0024                  		addq.b	#2,$24(a0)
0000C5EE                            
0000C5EE                            Obj3A_Display:
0000C5EE 6000 0000                  		bra.w	DisplaySprite
0000C5F2                            ; ===========================================================================
0000C5F2                            
0000C5F2                            Obj3A_TimeBonus:			; XREF: Obj3A_Index
0000C5F2 6100 0000                  		bsr.w	DisplaySprite
0000C5F6 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set time/ring bonus update flag
0000C5FC 7000                       		moveq	#0,d0
0000C5FE 4A78 F7D2                  		tst.w	($FFFFF7D2).w	; is time bonus	= zero?
0000C602 6700                       		beq.s	Obj3A_RingBonus	; if yes, branch
0000C604 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C608 0478 000A F7D2             		subi.w	#10,($FFFFF7D2).w ; subtract 10	from time bonus
0000C60E                            
0000C60E                            Obj3A_RingBonus:
0000C60E 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C612 6700                       		beq.s	Obj3A_ChkBonus	; if yes, branch
0000C614 0640 000A                  		addi.w	#10,d0		; add 10 to score
0000C618 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C61E                            
0000C61E                            Obj3A_ChkBonus:
0000C61E 4A40                       		tst.w	d0		; is there any bonus?
0000C620 6600                       		bne.s	Obj3A_AddBonus	; if yes, branch
0000C622 303C 00C5                  		move.w	#$C5,d0
0000C626 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C62C 5428 0024                  		addq.b	#2,$24(a0)
0000C630 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w
0000C636 6600                       		bne.s	Obj3A_SetDelay
0000C638 5828 0024                  		addq.b	#4,$24(a0)
0000C63C                            
0000C63C                            Obj3A_SetDelay:
0000C63C 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C642                            
0000C642                            locret_C692:
0000C642 4E75                       		rts	
0000C644                            ; ===========================================================================
0000C644                            
0000C644                            Obj3A_AddBonus:				; XREF: Obj3A_ChkBonus
0000C644 4EB9 0000 0000             		jsr	AddPoints
0000C64A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C64E 0200 0003                  		andi.b	#3,d0
0000C652 66EE                       		bne.s	locret_C692
0000C654 303C 00CD                  		move.w	#$CD,d0
0000C658 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C65E                            ; ===========================================================================
0000C65E                            
0000C65E                            Obj3A_NextLevel:			; XREF: Obj3A_Index
0000C65E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0000C662 0240 0007                  		andi.w	#7,d0
0000C666 E748                       		lsl.w	#3,d0
0000C668 1238 FE11                  		move.b	($FFFFFE11).w,d1
0000C66C 0241 0003                  		andi.w	#3,d1
0000C670 D241                       		add.w	d1,d1
0000C672 D041                       		add.w	d1,d0
0000C674 303B 0000                  		move.w	LevelOrder(pc,d0.w),d0 ; load level from level order array
0000C678 31C0 FE10                  		move.w	d0,($FFFFFE10).w ; set level number
0000C67C 4A40                       		tst.w	d0
0000C67E 6600                       		bne.s	Obj3A_ChkSS
0000C680 11FC 0000 F600             		move.b	#0,($FFFFF600).w ; set game mode to level (00)
0000C686 6000                       		bra.s	Obj3A_Display2
0000C688                            ; ===========================================================================
0000C688                            
0000C688                            Obj3A_ChkSS:				; XREF: Obj3A_NextLevel
0000C688 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
0000C68C 4A38 F7CD                  		tst.b	($FFFFF7CD).w	; has Sonic jumped into	a giant	ring?
0000C690 6700                       		beq.s	loc_C6EA	; if not, branch
0000C692 11FC 0010 F600             		move.b	#$10,($FFFFF600).w ; set game mode to Special Stage (10)
0000C698 6000                       		bra.s	Obj3A_Display2
0000C69A                            ; ===========================================================================
0000C69A                            
0000C69A                            loc_C6EA:				; XREF: Obj3A_ChkSS
0000C69A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C6A0                            
0000C6A0                            Obj3A_Display2:				; XREF: Obj3A_NextLevel, Obj3A_ChkSS
0000C6A0 6000 0000                  		bra.w	DisplaySprite
0000C6A4                            ; ===========================================================================
0000C6A4                            ; ---------------------------------------------------------------------------
0000C6A4                            ; Level	order array
0000C6A4                            ; ---------------------------------------------------------------------------
0000C6A4                            LevelOrder:	incbin	misc\lvl_ord.bin
0000C6D4                            		even
0000C6D4                            ; ===========================================================================
0000C6D4                            
0000C6D4                            Obj3A_ChkPos2:				; XREF: Obj3A_Index
0000C6D4 7220                       		moveq	#$20,d1		; set horizontal speed
0000C6D6 3028 0032                  		move.w	$32(a0),d0
0000C6DA B068 0008                  		cmp.w	8(a0),d0	; has item reached its finish position?
0000C6DE 6700                       		beq.s	Obj3A_SBZ2	; if yes, branch
0000C6E0 6C00                       		bge.s	Obj3A_Move2
0000C6E2 4441                       		neg.w	d1
0000C6E4                            
0000C6E4                            Obj3A_Move2:
0000C6E4 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C6E8 3028 0008                  		move.w	8(a0),d0
0000C6EC 6B00                       		bmi.s	locret_C748
0000C6EE 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C6F2 6400                       		bcc.s	locret_C748	; if yes, branch
0000C6F4 6000 0000                  		bra.w	DisplaySprite
0000C6F8                            ; ===========================================================================
0000C6F8                            
0000C6F8                            locret_C748:
0000C6F8 4E75                       		rts	
0000C6FA                            ; ===========================================================================
0000C6FA                            
0000C6FA                            Obj3A_SBZ2:				; XREF: Obj3A_ChkPos2
0000C6FA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)
0000C700 6600 0000                  		bne.w	DeleteObject
0000C704 5428 0024                  		addq.b	#2,$24(a0)
0000C708 4238 F7CC                  		clr.b	($FFFFF7CC).w	; unlock controls
0000C70C 303C 008D                  		move.w	#$8D,d0
0000C710 4EF9 0000 1396             		jmp	(PlaySound).l	; play FZ music
0000C716                            ; ===========================================================================
0000C716                            
0000C716                            loc_C766:				; XREF: Obj3A_Index
0000C716 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0000C71A 0C78 2100 F72A             		cmpi.w	#$2100,($FFFFF72A).w
0000C720 6700 0000                  		beq.w	DeleteObject
0000C724 4E75                       		rts	
0000C726                            ; ===========================================================================
0000C726 0004 0124 00BC             Obj3A_Config:	dc.w 4,	$124, $BC	; x-start, x-main, y-main
0000C72C 0200                       		dc.b 2,	0		; routine number, frame	number (changes)
0000C72E FEE0 0120 00D0             		dc.w $FEE0, $120, $D0
0000C734 0201                       		dc.b 2,	1
0000C736 040C 014C 00D6             		dc.w $40C, $14C, $D6
0000C73C 0206                       		dc.b 2,	6
0000C73E 0520 0120 00EC             		dc.w $520, $120, $EC
0000C744 0202                       		dc.b 2,	2
0000C746 0540 0120 00FC             		dc.w $540, $120, $FC
0000C74C 0203                       		dc.b 2,	3
0000C74E 0560 0120 010C             		dc.w $560, $120, $10C
0000C754 0204                       		dc.b 2,	4
0000C756 020C 014C 00CC             		dc.w $20C, $14C, $CC
0000C75C 0205                       		dc.b 2,	5
0000C75E                            ; ===========================================================================
0000C75E                            ; ---------------------------------------------------------------------------
0000C75E                            ; Object 7E - special stage results screen
0000C75E                            ; ---------------------------------------------------------------------------
0000C75E                            
0000C75E                            Obj7E:					; XREF: Obj_Index
0000C75E 7000                       		moveq	#0,d0
0000C760 1028 0024                  		move.b	$24(a0),d0
0000C764 323B 0000                  		move.w	Obj7E_Index(pc,d0.w),d1
0000C768 4EFB 1000                  		jmp	Obj7E_Index(pc,d1.w)
0000C76C                            ; ===========================================================================
0000C76C 0000                       Obj7E_Index:	dc.w Obj7E_ChkPLC-Obj7E_Index
0000C76E 0000                       		dc.w Obj7E_ChkPos-Obj7E_Index
0000C770 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C772 0000                       		dc.w Obj7E_RingBonus-Obj7E_Index
0000C774 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C776 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C778 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C77A 0000                       		dc.w Obj7E_Continue-Obj7E_Index
0000C77C 0000                       		dc.w Obj7E_Wait-Obj7E_Index
0000C77E 0000                       		dc.w Obj7E_Exit-Obj7E_Index
0000C780 0000                       		dc.w loc_C91A-Obj7E_Index
0000C782                            ; ===========================================================================
0000C782                            
0000C782                            Obj7E_ChkPLC:				; XREF: Obj7E_Index
0000C782 4AB8 F680                  		tst.l	($FFFFF680).w	; are the pattern load cues empty?
0000C786 6700                       		beq.s	Obj7E_Main	; if yes, branch
0000C788 4E75                       		rts	
0000C78A                            ; ===========================================================================
0000C78A                            
0000C78A                            Obj7E_Main:
0000C78A 2248                       		movea.l	a0,a1
0000C78C 45F9 0000 0000             		lea	(Obj7E_Config).l,a2
0000C792 7203                       		moveq	#3,d1
0000C794 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	50 or more rings?
0000C79A 6500                       		bcs.s	Obj7E_Loop	; if no, branch
0000C79C 5241                       		addq.w	#1,d1		; if yes, add 1	to d1 (number of sprites)
0000C79E                            
0000C79E                            Obj7E_Loop:
0000C79E 12BC 007E                  		move.b	#$7E,0(a1)
0000C7A2 335A 0008                  		move.w	(a2)+,8(a1)	; load start x-position
0000C7A6 335A 0030                  		move.w	(a2)+,$30(a1)	; load main x-position
0000C7AA 335A 000A                  		move.w	(a2)+,$A(a1)	; load y-position
0000C7AE 135A 0024                  		move.b	(a2)+,$24(a1)
0000C7B2 135A 001A                  		move.b	(a2)+,$1A(a1)
0000C7B6 237C 0000 0000 0004        		move.l	#Map_obj7E,4(a1)
0000C7BE 337C 8580 0002             		move.w	#$8580,2(a1)
0000C7C4 137C 0000 0001             		move.b	#0,1(a1)
0000C7CA 43E9 0040                  		lea	$40(a1),a1
0000C7CE 51C9 FFCE                  		dbf	d1,Obj7E_Loop	; repeat sequence 3 or 4 times
0000C7D2                            
0000C7D2 7007                       		moveq	#7,d0
0000C7D4 1238 FE57                  		move.b	($FFFFFE57).w,d1
0000C7D8 6700                       		beq.s	loc_C842
0000C7DA 7000                       		moveq	#0,d0
0000C7DC 0C01 0006                  		cmpi.b	#6,d1		; do you have all chaos	emeralds?
0000C7E0 6600                       		bne.s	loc_C842	; if not, branch
0000C7E2 7008                       		moveq	#8,d0		; load "Sonic got them all" text
0000C7E4 317C 0018 0008             		move.w	#$18,8(a0)
0000C7EA 317C 0118 0030             		move.w	#$118,$30(a0)	; change position of text
0000C7F0                            
0000C7F0                            loc_C842:
0000C7F0 1140 001A                  		move.b	d0,$1A(a0)
0000C7F4                            
0000C7F4                            Obj7E_ChkPos:				; XREF: Obj7E_Index
0000C7F4 7210                       		moveq	#$10,d1		; set horizontal speed
0000C7F6 3028 0030                  		move.w	$30(a0),d0
0000C7FA B068 0008                  		cmp.w	8(a0),d0	; has item reached its target position?
0000C7FE 6700                       		beq.s	loc_C86C	; if yes, branch
0000C800 6C00                       		bge.s	Obj7E_Move
0000C802 4441                       		neg.w	d1
0000C804                            
0000C804                            Obj7E_Move:
0000C804 D368 0008                  		add.w	d1,8(a0)	; change item's position
0000C808                            
0000C808                            loc_C85A:				; XREF: loc_C86C
0000C808 3028 0008                  		move.w	8(a0),d0
0000C80C 6B00                       		bmi.s	locret_C86A
0000C80E 0C40 0200                  		cmpi.w	#$200,d0	; has item moved beyond	$200 on	x-axis?
0000C812 6400                       		bcc.s	locret_C86A	; if yes, branch
0000C814 6000 0000                  		bra.w	DisplaySprite
0000C818                            ; ===========================================================================
0000C818                            
0000C818                            locret_C86A:
0000C818 4E75                       		rts	
0000C81A                            ; ===========================================================================
0000C81A                            
0000C81A                            loc_C86C:				; XREF: Obj7E_ChkPos
0000C81A 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000C820 66E6                       		bne.s	loc_C85A
0000C822 5428 0024                  		addq.b	#2,$24(a0)
0000C826 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C82C 11FC 007F D800             		move.b	#$7F,($FFFFD800).w ; load chaos	emerald	object
0000C832                            
0000C832                            Obj7E_Wait:				; XREF: Obj7E_Index
0000C832 5368 001E                  		subq.w	#1,$1E(a0)	; subtract 1 from time delay
0000C836 6600                       		bne.s	Obj7E_Display
0000C838 5428 0024                  		addq.b	#2,$24(a0)
0000C83C                            
0000C83C                            Obj7E_Display:
0000C83C 6000 0000                  		bra.w	DisplaySprite
0000C840                            ; ===========================================================================
0000C840                            
0000C840                            Obj7E_RingBonus:			; XREF: Obj7E_Index
0000C840 6100 0000                  		bsr.w	DisplaySprite
0000C844 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w ; set ring bonus update flag
0000C84A 4A78 F7D4                  		tst.w	($FFFFF7D4).w	; is ring bonus	= zero?
0000C84E 6700                       		beq.s	loc_C8C4	; if yes, branch
0000C850 0478 000A F7D4             		subi.w	#10,($FFFFF7D4).w ; subtract 10	from ring bonus
0000C856 700A                       		moveq	#10,d0		; add 10 to score
0000C858 4EB9 0000 0000             		jsr	AddPoints
0000C85E 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C862 0200 0003                  		andi.b	#3,d0
0000C866 6600                       		bne.s	locret_C8EA
0000C868 303C 00CD                  		move.w	#$CD,d0
0000C86C 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play "blip" sound
0000C872                            ; ===========================================================================
0000C872                            
0000C872                            loc_C8C4:				; XREF: Obj7E_RingBonus
0000C872 303C 00C5                  		move.w	#$C5,d0
0000C876 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ker-ching" sound
0000C87C 5428 0024                  		addq.b	#2,$24(a0)
0000C880 317C 00B4 001E             		move.w	#180,$1E(a0)	; set time delay to 3 seconds
0000C886 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; do you have	at least 50 rings?
0000C88C 6500                       		bcs.s	locret_C8EA	; if not, branch
0000C88E 317C 003C 001E             		move.w	#60,$1E(a0)	; set time delay to 1 second
0000C894 5828 0024                  		addq.b	#4,$24(a0)	; goto "Obj7E_Continue"	routine
0000C898                            
0000C898                            locret_C8EA:
0000C898 4E75                       		rts	
0000C89A                            ; ===========================================================================
0000C89A                            
0000C89A                            Obj7E_Exit:				; XREF: Obj7E_Index
0000C89A 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart level
0000C8A0 6000 0000                  		bra.w	DisplaySprite
0000C8A4                            ; ===========================================================================
0000C8A4                            
0000C8A4                            Obj7E_Continue:				; XREF: Obj7E_Index
0000C8A4 11FC 0004 D6DA             		move.b	#4,($FFFFD6DA).w
0000C8AA 11FC 0014 D6E4             		move.b	#$14,($FFFFD6E4).w
0000C8B0 303C 00BF                  		move.w	#$BF,d0
0000C8B4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play continues music
0000C8BA 5428 0024                  		addq.b	#2,$24(a0)
0000C8BE 317C 0168 001E             		move.w	#360,$1E(a0)	; set time delay to 6 seconds
0000C8C4 6000 0000                  		bra.w	DisplaySprite
0000C8C8                            ; ===========================================================================
0000C8C8                            
0000C8C8                            loc_C91A:				; XREF: Obj7E_Index
0000C8C8 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000C8CC 0200 000F                  		andi.b	#$F,d0
0000C8D0 6600                       		bne.s	Obj7E_Display2
0000C8D2 0868 0000 001A             		bchg	#0,$1A(a0)
0000C8D8                            
0000C8D8                            Obj7E_Display2:
0000C8D8 6000 0000                  		bra.w	DisplaySprite
0000C8DC                            ; ===========================================================================
0000C8DC 0020 0120 00C4             Obj7E_Config:	dc.w $20, $120,	$C4	; start	x-pos, main x-pos, y-pos
0000C8E2 0200                       		dc.b 2,	0		; rountine number, frame number
0000C8E4 0320 0120 0118             		dc.w $320, $120, $118
0000C8EA 0201                       		dc.b 2,	1
0000C8EC 0360 0120 0128             		dc.w $360, $120, $128
0000C8F2 0202                       		dc.b 2,	2
0000C8F4 01EC 011C 00C4             		dc.w $1EC, $11C, $C4
0000C8FA 0203                       		dc.b 2,	3
0000C8FC 03A0 0120 0138             		dc.w $3A0, $120, $138
0000C902 0206                       		dc.b 2,	6
0000C904                            ; ===========================================================================
0000C904                            ; ---------------------------------------------------------------------------
0000C904                            ; Object 7F - chaos emeralds from the special stage results screen
0000C904                            ; ---------------------------------------------------------------------------
0000C904                            
0000C904                            Obj7F:					; XREF: Obj_Index
0000C904 7000                       		moveq	#0,d0
0000C906 1028 0024                  		move.b	$24(a0),d0
0000C90A 323B 0000                  		move.w	Obj7F_Index(pc,d0.w),d1
0000C90E 4EFB 1000                  		jmp	Obj7F_Index(pc,d1.w)
0000C912                            ; ===========================================================================
0000C912 0000                       Obj7F_Index:	dc.w Obj7F_Main-Obj7F_Index
0000C914 0000                       		dc.w Obj7F_Flash-Obj7F_Index
0000C916                            
0000C916                            ; ---------------------------------------------------------------------------
0000C916                            ; X-axis positions for chaos emeralds
0000C916                            ; ---------------------------------------------------------------------------
0000C916 0110 0128 00F8 0140 00E0+  Obj7F_PosData:	dc.w $110, $128, $F8, $140, $E0, $158
0000C922                            ; ===========================================================================
0000C922                            
0000C922                            Obj7F_Main:				; XREF: Obj7F_Index
0000C922 2248                       		movea.l	a0,a1
0000C924 45F9 0000 C916             		lea	(Obj7F_PosData).l,a2
0000C92A 7400                       		moveq	#0,d2
0000C92C 7200                       		moveq	#0,d1
0000C92E 1238 FE57                  		move.b	($FFFFFE57).w,d1 ; d1 is number	of emeralds
0000C932 5301                       		subq.b	#1,d1		; subtract 1 from d1
0000C934 6500 0000                  		bcs.w	DeleteObject	; if you have 0	emeralds, branch
0000C938                            
0000C938                            Obj7F_Loop:
0000C938 12BC 007F                  		move.b	#$7F,0(a1)
0000C93C 335A 0008                  		move.w	(a2)+,8(a1)	; set x-position
0000C940 337C 00F0 000A             		move.w	#$F0,$A(a1)	; set y-position
0000C946 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0000C94A 1633 2000                  		move.b	(a3,d2.w),d3
0000C94E 1343 001A                  		move.b	d3,$1A(a1)
0000C952 1343 001C                  		move.b	d3,$1C(a1)
0000C956 5202                       		addq.b	#1,d2
0000C958 5429 0024                  		addq.b	#2,$24(a1)
0000C95C 237C 0000 0000 0004        		move.l	#Map_obj7F,4(a1)
0000C964 337C 8541 0002             		move.w	#$8541,2(a1)
0000C96A 137C 0000 0001             		move.b	#0,1(a1)
0000C970 43E9 0040                  		lea	$40(a1),a1	; next object
0000C974 51C9 FFC2                  		dbf	d1,Obj7F_Loop	; loop for d1 number of	emeralds
0000C978                            
0000C978                            Obj7F_Flash:				; XREF: Obj7F_Index
0000C978 1028 001A                  		move.b	$1A(a0),d0
0000C97C 117C 0006 001A             		move.b	#6,$1A(a0)	; load 6th frame (blank)
0000C982 0C00 0006                  		cmpi.b	#6,d0
0000C986 6600                       		bne.s	Obj7F_Display
0000C988 1168 001C 001A             		move.b	$1C(a0),$1A(a0)	; load visible frame
0000C98E                            
0000C98E                            Obj7F_Display:
0000C98E 6000 0000                  		bra.w	DisplaySprite
0000C992                            ; ===========================================================================
0000C992                            ; ---------------------------------------------------------------------------
0000C992                            ; Sprite mappings - zone title cards
0000C992                            ; ---------------------------------------------------------------------------
0000C992 0000                       Map_obj34:	dc.w byte_C9FE-Map_obj34
0000C994 0000                       		dc.w byte_CA2C-Map_obj34
0000C996 0000                       		dc.w byte_CA5A-Map_obj34
0000C998 0000                       		dc.w byte_CA7A-Map_obj34
0000C99A 0000                       		dc.w byte_CAA8-Map_obj34
0000C99C 0000                       		dc.w byte_CADC-Map_obj34
0000C99E 0000                       		dc.w byte_CB10-Map_obj34
0000C9A0 0000                       		dc.w byte_CB26-Map_obj34
0000C9A2 0000                       		dc.w byte_CB31-Map_obj34
0000C9A4 0000                       		dc.w byte_CB3C-Map_obj34
0000C9A6 0000                       		dc.w byte_CB47-Map_obj34
0000C9A8 0000                       		dc.w byte_CB8A-Map_obj34
0000C9AA 09                         byte_C9FE:	dc.b 9 			; GREEN HILL
0000C9AB F805 0018 B4               		dc.b $F8, 5, 0,	$18, $B4
0000C9B0 F805 003A C4               		dc.b $F8, 5, 0,	$3A, $C4
0000C9B5 F805 0010 D4               		dc.b $F8, 5, 0,	$10, $D4
0000C9BA F805 0010 E4               		dc.b $F8, 5, 0,	$10, $E4
0000C9BF F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000C9C4 F805 001C 14               		dc.b $F8, 5, 0,	$1C, $14
0000C9C9 F801 0020 24               		dc.b $F8, 1, 0,	$20, $24
0000C9CE F805 0026 2C               		dc.b $F8, 5, 0,	$26, $2C
0000C9D3 F805 0026 3C               		dc.b $F8, 5, 0,	$26, $3C
0000C9D8 09                         byte_CA2C:	dc.b 9			; LABYRINTH
0000C9D9 F805 0026 BC               		dc.b $F8, 5, 0,	$26, $BC
0000C9DE F805 0000 CC               		dc.b $F8, 5, 0,	0, $CC
0000C9E3 F805 0004 DC               		dc.b $F8, 5, 0,	4, $DC
0000C9E8 F805 004A EC               		dc.b $F8, 5, 0,	$4A, $EC
0000C9ED F805 003A FC               		dc.b $F8, 5, 0,	$3A, $FC
0000C9F2 F801 0020 0C               		dc.b $F8, 1, 0,	$20, $C
0000C9F7 F805 002E 14               		dc.b $F8, 5, 0,	$2E, $14
0000C9FC F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CA01 F805 001C 34               		dc.b $F8, 5, 0,	$1C, $34
0000CA06 06                         byte_CA5A:	dc.b 6			; MARBLE
0000CA07 F805 002A CF               		dc.b $F8, 5, 0,	$2A, $CF
0000CA0C F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CA11 F805 003A F0               		dc.b $F8, 5, 0,	$3A, $F0
0000CA16 F805 0004 00               		dc.b $F8, 5, 0,	4, 0
0000CA1B F805 0026 10               		dc.b $F8, 5, 0,	$26, $10
0000CA20 F805 0010 20               		dc.b $F8, 5, 0,	$10, $20
0000CA25 00                         		dc.b 0
0000CA26 09                         byte_CA7A:	dc.b 9			; STAR	LIGHT
0000CA27 F805 003E B4               		dc.b $F8, 5, 0,	$3E, $B4
0000CA2C F805 0042 C4               		dc.b $F8, 5, 0,	$42, $C4
0000CA31 F805 0000 D4               		dc.b $F8, 5, 0,	0, $D4
0000CA36 F805 003A E4               		dc.b $F8, 5, 0,	$3A, $E4
0000CA3B F805 0026 04               		dc.b $F8, 5, 0,	$26, 4
0000CA40 F801 0020 14               		dc.b $F8, 1, 0,	$20, $14
0000CA45 F805 0018 1C               		dc.b $F8, 5, 0,	$18, $1C
0000CA4A F805 001C 2C               		dc.b $F8, 5, 0,	$1C, $2C
0000CA4F F805 0042 3C               		dc.b $F8, 5, 0,	$42, $3C
0000CA54 0A                         byte_CAA8:	dc.b $A			; SPRING YARD
0000CA55 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CA5A F805 0036 BC               		dc.b $F8, 5, 0,	$36, $BC
0000CA5F F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CA64 F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CA69 F805 002E E4               		dc.b $F8, 5, 0,	$2E, $E4
0000CA6E F805 0018 F4               		dc.b $F8, 5, 0,	$18, $F4
0000CA73 F805 004A 14               		dc.b $F8, 5, 0,	$4A, $14
0000CA78 F805 0000 24               		dc.b $F8, 5, 0,	0, $24
0000CA7D F805 003A 34               		dc.b $F8, 5, 0,	$3A, $34
0000CA82 F805 000C 44               		dc.b $F8, 5, 0,	$C, $44
0000CA87 00                         		dc.b 0
0000CA88 0A                         byte_CADC:	dc.b $A			; SCRAP BRAIN
0000CA89 F805 003E AC               		dc.b $F8, 5, 0,	$3E, $AC
0000CA8E F805 0008 BC               		dc.b $F8, 5, 0,	8, $BC
0000CA93 F805 003A CC               		dc.b $F8, 5, 0,	$3A, $CC
0000CA98 F805 0000 DC               		dc.b $F8, 5, 0,	0, $DC
0000CA9D F805 0036 EC               		dc.b $F8, 5, 0,	$36, $EC
0000CAA2 F805 0004 0C               		dc.b $F8, 5, 0,	4, $C
0000CAA7 F805 003A 1C               		dc.b $F8, 5, 0,	$3A, $1C
0000CAAC F805 0000 2C               		dc.b $F8, 5, 0,	0, $2C
0000CAB1 F801 0020 3C               		dc.b $F8, 1, 0,	$20, $3C
0000CAB6 F805 002E 44               		dc.b $F8, 5, 0,	$2E, $44
0000CABB 00                         		dc.b 0
0000CABC 04                         byte_CB10:	dc.b 4			; ZONE
0000CABD F805 004E E0               		dc.b $F8, 5, 0,	$4E, $E0
0000CAC2 F805 0032 F0               		dc.b $F8, 5, 0,	$32, $F0
0000CAC7 F805 002E 00               		dc.b $F8, 5, 0,	$2E, 0
0000CACC F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CAD1 00                         		dc.b 0
0000CAD2 02                         byte_CB26:	dc.b 2			; ACT 1
0000CAD3 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CAD8 F402 0057 0C               		dc.b $F4, 2, 0,	$57, $C
0000CADD 02                         byte_CB31:	dc.b 2			; ACT 2
0000CADE 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CAE3 F406 005A 08               		dc.b $F4, 6, 0,	$5A, 8
0000CAE8 02                         byte_CB3C:	dc.b 2			; ACT 3
0000CAE9 040C 0053 EC               		dc.b 4,	$C, 0, $53, $EC
0000CAEE F406 0060 08               		dc.b $F4, 6, 0,	$60, 8
0000CAF3 0D                         byte_CB47:	dc.b $D			; Oval
0000CAF4 E40C 0070 F4               		dc.b $E4, $C, 0, $70, $F4
0000CAF9 E402 0074 14               		dc.b $E4, 2, 0,	$74, $14
0000CAFE EC04 0077 EC               		dc.b $EC, 4, 0,	$77, $EC
0000CB03 F405 0079 E4               		dc.b $F4, 5, 0,	$79, $E4
0000CB08 140C 1870 EC               		dc.b $14, $C, $18, $70,	$EC
0000CB0D 0402 1874 E4               		dc.b 4,	2, $18,	$74, $E4
0000CB12 0C04 1877 04               		dc.b $C, 4, $18, $77, 4
0000CB17 FC05 1879 0C               		dc.b $FC, 5, $18, $79, $C
0000CB1C EC08 007D FC               		dc.b $EC, 8, 0,	$7D, $FC
0000CB21 F40C 007C F4               		dc.b $F4, $C, 0, $7C, $F4
0000CB26 FC08 007C F4               		dc.b $FC, 8, 0,	$7C, $F4
0000CB2B 040C 007C EC               		dc.b 4,	$C, 0, $7C, $EC
0000CB30 0C08 007C EC               		dc.b $C, 8, 0, $7C, $EC
0000CB35 00                         		dc.b 0
0000CB36 05                         byte_CB8A:	dc.b 5			; FINAL
0000CB37 F805 0014 DC               		dc.b $F8, 5, 0,	$14, $DC
0000CB3C F801 0020 EC               		dc.b $F8, 1, 0,	$20, $EC
0000CB41 F805 002E F4               		dc.b $F8, 5, 0,	$2E, $F4
0000CB46 F805 0000 04               		dc.b $F8, 5, 0,	0, 4
0000CB4B F805 0026 14               		dc.b $F8, 5, 0,	$26, $14
0000CB50                            		even
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50                            Map_obj39:
0000CB50                            	include "_maps\obj39.asm"
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50                            ; Sprite mappings - "GAME OVER"	and "TIME OVER"
0000CB50                            ; ---------------------------------------------------------------------------
0000CB50 0000                       		dc.w byte_CBAC-Map_obj39
0000CB52 0000                       		dc.w byte_CBB7-Map_obj39
0000CB54 0000                       		dc.w byte_CBC2-Map_obj39
0000CB56 0000                       		dc.w byte_CBCD-Map_obj39
0000CB58 02                         byte_CBAC:	dc.b 2
0000CB59 F80D 0000 B8               		dc.b $F8, $D, 0, 0, $B8
0000CB5E F80D 0008 D8               		dc.b $F8, $D, 0, 8, $D8
0000CB63 02                         byte_CBB7:	dc.b 2
0000CB64 F80D 0014 08               		dc.b $F8, $D, 0, $14, 8
0000CB69 F80D 000C 28               		dc.b $F8, $D, 0, $C, $28
0000CB6E 02                         byte_CBC2:	dc.b 2
0000CB6F F809 001C C4               		dc.b $F8, 9, 0,	$1C, $C4
0000CB74 F80D 0008 DC               		dc.b $F8, $D, 0, 8, $DC
0000CB79 02                         byte_CBCD:	dc.b 2
0000CB7A F80D 0014 0C               		dc.b $F8, $D, 0, $14, $C
0000CB7F F80D 000C 2C               		dc.b $F8, $D, 0, $C, $2C
0000CB84                            		even
0000CB84                            		even
0000CB84                            
0000CB84                            ; ---------------------------------------------------------------------------
0000CB84                            ; Sprite mappings - "SONIC HAS PASSED" title card
0000CB84                            ; ---------------------------------------------------------------------------
0000CB84 0000                       Map_obj3A:	dc.w byte_CBEA-Map_obj3A
0000CB86 0000                       		dc.w byte_CC13-Map_obj3A
0000CB88 0000                       		dc.w byte_CC32-Map_obj3A
0000CB8A 0000                       		dc.w byte_CC51-Map_obj3A
0000CB8C 0000                       		dc.w byte_CC75-Map_obj3A
0000CB8E FF6F                       		dc.w byte_CB47-Map_obj3A
0000CB90 FF4E                       		dc.w byte_CB26-Map_obj3A
0000CB92 FF59                       		dc.w byte_CB31-Map_obj3A
0000CB94 FF64                       		dc.w byte_CB3C-Map_obj3A
0000CB96 08                         byte_CBEA:	dc.b 8			; SONIC HAS
0000CB97 F805 003E B8               		dc.b $F8, 5, 0,	$3E, $B8
0000CB9C F805 0032 C8               		dc.b $F8, 5, 0,	$32, $C8
0000CBA1 F805 002E D8               		dc.b $F8, 5, 0,	$2E, $D8
0000CBA6 F801 0020 E8               		dc.b $F8, 1, 0,	$20, $E8
0000CBAB F805 0008 F0               		dc.b $F8, 5, 0,	8, $F0
0000CBB0 F805 001C 10               		dc.b $F8, 5, 0,	$1C, $10
0000CBB5 F805 0000 20               		dc.b $F8, 5, 0,	0, $20
0000CBBA F805 003E 30               		dc.b $F8, 5, 0,	$3E, $30
0000CBBF 06                         byte_CC13:	dc.b 6			; PASSED
0000CBC0 F805 0036 D0               		dc.b $F8, 5, 0,	$36, $D0
0000CBC5 F805 0000 E0               		dc.b $F8, 5, 0,	0, $E0
0000CBCA F805 003E F0               		dc.b $F8, 5, 0,	$3E, $F0
0000CBCF F805 003E 00               		dc.b $F8, 5, 0,	$3E, 0
0000CBD4 F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CBD9 F805 000C 20               		dc.b $F8, 5, 0,	$C, $20
0000CBDE 06                         byte_CC32:	dc.b 6			; SCORE
0000CBDF F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CBE4 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CBE9 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CBEE F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CBF3 F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CBF8 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CBFD 07                         byte_CC51:	dc.b 7			; TIME BONUS
0000CBFE F80D 015A B0               		dc.b $F8, $D, 1, $5A, $B0
0000CC03 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CC08 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CC0D F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CC12 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CC17 F80D FFF0 28               		dc.b $F8, $D, $FF, $F0,	$28
0000CC1C F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CC21 07                         byte_CC75:	dc.b 7			; RING BONUS
0000CC22 F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CC27 F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CC2C F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CC31 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CC36 FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CC3B F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CC40 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CC46 00                         		even
0000CC46                            ; ---------------------------------------------------------------------------
0000CC46                            ; Sprite mappings - special stage results screen
0000CC46                            ; ---------------------------------------------------------------------------
0000CC46 0000                       Map_obj7E:	dc.w byte_CCAC-Map_obj7E
0000CC48 0000                       		dc.w byte_CCEE-Map_obj7E
0000CC4A 0000                       		dc.w byte_CD0D-Map_obj7E
0000CC4C FEAD                       		dc.w byte_CB47-Map_obj7E
0000CC4E 0000                       		dc.w byte_CD31-Map_obj7E
0000CC50 0000                       		dc.w byte_CD46-Map_obj7E
0000CC52 0000                       		dc.w byte_CD5B-Map_obj7E
0000CC54 0000                       		dc.w byte_CD6B-Map_obj7E
0000CC56 0000                       		dc.w byte_CDA8-Map_obj7E
0000CC58 0D                         byte_CCAC:	dc.b $D			; "CHAOS EMERALDS"
0000CC59 F805 0008 90               		dc.b $F8, 5, 0,	8, $90
0000CC5E F805 001C A0               		dc.b $F8, 5, 0,	$1C, $A0
0000CC63 F805 0000 B0               		dc.b $F8, 5, 0,	0, $B0
0000CC68 F805 0032 C0               		dc.b $F8, 5, 0,	$32, $C0
0000CC6D F805 003E D0               		dc.b $F8, 5, 0,	$3E, $D0
0000CC72 F805 0010 F0               		dc.b $F8, 5, 0,	$10, $F0
0000CC77 F805 002A 00               		dc.b $F8, 5, 0,	$2A, 0
0000CC7C F805 0010 10               		dc.b $F8, 5, 0,	$10, $10
0000CC81 F805 003A 20               		dc.b $F8, 5, 0,	$3A, $20
0000CC86 F805 0000 30               		dc.b $F8, 5, 0,	0, $30
0000CC8B F805 0026 40               		dc.b $F8, 5, 0,	$26, $40
0000CC90 F805 000C 50               		dc.b $F8, 5, 0,	$C, $50
0000CC95 F805 003E 60               		dc.b $F8, 5, 0,	$3E, $60
0000CC9A 06                         byte_CCEE:	dc.b 6			; "SCORE"
0000CC9B F80D 014A B0               		dc.b $F8, $D, 1, $4A, $B0
0000CCA0 F801 0162 D0               		dc.b $F8, 1, 1,	$62, $D0
0000CCA5 F809 0164 18               		dc.b $F8, 9, 1,	$64, $18
0000CCAA F80D 016A 30               		dc.b $F8, $D, 1, $6A, $30
0000CCAF F704 006E CD               		dc.b $F7, 4, 0,	$6E, $CD
0000CCB4 FF04 186E CD               		dc.b $FF, 4, $18, $6E, $CD
0000CCB9 07                         byte_CD0D:	dc.b 7
0000CCBA F80D 0152 B0               		dc.b $F8, $D, 1, $52, $B0
0000CCBF F80D 0066 D9               		dc.b $F8, $D, 0, $66, $D9
0000CCC4 F801 014A F9               		dc.b $F8, 1, 1,	$4A, $F9
0000CCC9 F704 006E F6               		dc.b $F7, 4, 0,	$6E, $F6
0000CCCE FF04 186E F6               		dc.b $FF, 4, $18, $6E, $F6
0000CCD3 F80D FFF8 28               		dc.b $F8, $D, $FF, $F8,	$28
0000CCD8 F801 0170 48               		dc.b $F8, 1, 1,	$70, $48
0000CCDD 04                         byte_CD31:	dc.b 4
0000CCDE F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CCE3 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CCE8 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CCED F806 1FE3 40               		dc.b $F8, 6, $1F, $E3, $40
0000CCF2 04                         byte_CD46:	dc.b 4
0000CCF3 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CCF8 F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CCFD F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CD02 F806 1FE9 40               		dc.b $F8, 6, $1F, $E9, $40
0000CD07 03                         byte_CD5B:	dc.b 3
0000CD08 F80D FFD1 B0               		dc.b $F8, $D, $FF, $D1,	$B0
0000CD0D F80D FFD9 D0               		dc.b $F8, $D, $FF, $D9,	$D0
0000CD12 F801 FFE1 F0               		dc.b $F8, 1, $FF, $E1, $F0
0000CD17 0C                         byte_CD6B:	dc.b $C			; "SPECIAL STAGE"
0000CD18 F805 003E 9C               		dc.b $F8, 5, 0,	$3E, $9C
0000CD1D F805 0036 AC               		dc.b $F8, 5, 0,	$36, $AC
0000CD22 F805 0010 BC               		dc.b $F8, 5, 0,	$10, $BC
0000CD27 F805 0008 CC               		dc.b $F8, 5, 0,	8, $CC
0000CD2C F801 0020 DC               		dc.b $F8, 1, 0,	$20, $DC
0000CD31 F805 0000 E4               		dc.b $F8, 5, 0,	0, $E4
0000CD36 F805 0026 F4               		dc.b $F8, 5, 0,	$26, $F4
0000CD3B F805 003E 14               		dc.b $F8, 5, 0,	$3E, $14
0000CD40 F805 0042 24               		dc.b $F8, 5, 0,	$42, $24
0000CD45 F805 0000 34               		dc.b $F8, 5, 0,	0, $34
0000CD4A F805 0018 44               		dc.b $F8, 5, 0,	$18, $44
0000CD4F F805 0010 54               		dc.b $F8, 5, 0,	$10, $54
0000CD54 0F                         byte_CDA8:	dc.b $F			; "SONIC GOT THEM ALL"
0000CD55 F805 003E 88               		dc.b $F8, 5, 0,	$3E, $88
0000CD5A F805 0032 98               		dc.b $F8, 5, 0,	$32, $98
0000CD5F F805 002E A8               		dc.b $F8, 5, 0,	$2E, $A8
0000CD64 F801 0020 B8               		dc.b $F8, 1, 0,	$20, $B8
0000CD69 F805 0008 C0               		dc.b $F8, 5, 0,	8, $C0
0000CD6E F805 0018 D8               		dc.b $F8, 5, 0,	$18, $D8
0000CD73 F805 0032 E8               		dc.b $F8, 5, 0,	$32, $E8
0000CD78 F805 0042 F8               		dc.b $F8, 5, 0,	$42, $F8
0000CD7D F805 0042 10               		dc.b $F8, 5, 0,	$42, $10
0000CD82 F805 001C 20               		dc.b $F8, 5, 0,	$1C, $20
0000CD87 F805 0010 30               		dc.b $F8, 5, 0,	$10, $30
0000CD8C F805 002A 40               		dc.b $F8, 5, 0,	$2A, $40
0000CD91 F805 0000 58               		dc.b $F8, 5, 0,	0, $58
0000CD96 F805 0026 68               		dc.b $F8, 5, 0,	$26, $68
0000CD9B F805 0026 78               		dc.b $F8, 5, 0,	$26, $78
0000CDA0                            		even
0000CDA0                            ; ---------------------------------------------------------------------------
0000CDA0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CDA0                            ; ---------------------------------------------------------------------------
0000CDA0                            Map_obj7F:
0000CDA0                            	include "_maps\obj7F.asm"
0000CDA0                            ; ---------------------------------------------------------------------------
0000CDA0                            ; Sprite mappings - chaos emeralds from	the special stage results screen
0000CDA0                            ; ---------------------------------------------------------------------------
0000CDA0 0000                       		dc.w byte_CE02-Map_obj7F
0000CDA2 0000                       		dc.w byte_CE08-Map_obj7F
0000CDA4 0000                       		dc.w byte_CE0E-Map_obj7F
0000CDA6 0000                       		dc.w byte_CE14-Map_obj7F
0000CDA8 0000                       		dc.w byte_CE1A-Map_obj7F
0000CDAA 0000                       		dc.w byte_CE20-Map_obj7F
0000CDAC 0000                       		dc.w byte_CE26-Map_obj7F
0000CDAE 01                         byte_CE02:	dc.b 1
0000CDAF F805 2004 F8               		dc.b $F8, 5, $20, 4, $F8
0000CDB4 01                         byte_CE08:	dc.b 1
0000CDB5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0000CDBA 01                         byte_CE0E:	dc.b 1
0000CDBB F805 4004 F8               		dc.b $F8, 5, $40, 4, $F8
0000CDC0 01                         byte_CE14:	dc.b 1
0000CDC1 F805 6004 F8               		dc.b $F8, 5, $60, 4, $F8
0000CDC6 01                         byte_CE1A:	dc.b 1
0000CDC7 F805 2008 F8               		dc.b $F8, 5, $20, 8, $F8
0000CDCC 01                         byte_CE20:	dc.b 1
0000CDCD F805 200C F8               		dc.b $F8, 5, $20, $C, $F8
0000CDD2 00                         byte_CE26:	dc.b 0			; Blank frame
0000CDD4 00                         		even
0000CDD4 00                         		even
0000CDD4                            
0000CDD4                            ; ===========================================================================
0000CDD4                            ; ---------------------------------------------------------------------------
0000CDD4                            ; Object 36 - spikes
0000CDD4                            ; ---------------------------------------------------------------------------
0000CDD4                            
0000CDD4                            Obj36:					; XREF: Obj_Index
0000CDD4 7000                       		moveq	#0,d0
0000CDD6 1028 0024                  		move.b	$24(a0),d0
0000CDDA 323B 0000                  		move.w	Obj36_Index(pc,d0.w),d1
0000CDDE 4EFB 1000                  		jmp	Obj36_Index(pc,d1.w)
0000CDE2                            ; ===========================================================================
0000CDE2 0000                       Obj36_Index:	dc.w Obj36_Main-Obj36_Index
0000CDE4 0000                       		dc.w Obj36_Solid-Obj36_Index
0000CDE6                            
0000CDE6 0014                       Obj36_Var:	dc.b 0,	$14		; frame	number,	object width
0000CDE8 0110                       		dc.b 1,	$10
0000CDEA 0204                       		dc.b 2,	4
0000CDEC 031C                       		dc.b 3,	$1C
0000CDEE 0440                       		dc.b 4,	$40
0000CDF0 0510                       		dc.b 5,	$10
0000CDF2                            ; ===========================================================================
0000CDF2                            
0000CDF2                            Obj36_Main:				; XREF: Obj36_Index
0000CDF2 5428 0024                  		addq.b	#2,$24(a0)
0000CDF6 217C 0000 0000 0004        		move.l	#Map_obj36,4(a0)
0000CDFE 317C 051B 0002             		move.w	#$51B,2(a0)
0000CE04 0028 0004 0001             		ori.b	#4,1(a0)
0000CE0A 117C 0004 0018             		move.b	#4,$18(a0)
0000CE10 1028 0028                  		move.b	$28(a0),d0
0000CE14 0228 000F 0028             		andi.b	#$F,$28(a0)
0000CE1A 0240 00F0                  		andi.w	#$F0,d0
0000CE1E 43F9 0000 CDE6             		lea	(Obj36_Var).l,a1
0000CE24 E648                       		lsr.w	#3,d0
0000CE26 D2C0                       		adda.w	d0,a1
0000CE28 1159 001A                  		move.b	(a1)+,$1A(a0)
0000CE2C 1159 0019                  		move.b	(a1)+,$19(a0)
0000CE30 3168 0008 0030             		move.w	8(a0),$30(a0)
0000CE36 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000CE3C                            
0000CE3C                            Obj36_Solid:				; XREF: Obj36_Index
0000CE3C 6100 0000                  		bsr.w	Obj36_Type0x	; make the object move
0000CE40 343C 0004                  		move.w	#4,d2
0000CE44 0C28 0005 001A             		cmpi.b	#5,$1A(a0)	; is object type $5x ?
0000CE4A 6700                       		beq.s	Obj36_SideWays	; if yes, branch
0000CE4C 0C28 0001 001A             		cmpi.b	#1,$1A(a0)	; is object type $1x ?
0000CE52 6600                       		bne.s	Obj36_Upright	; if not, branch
0000CE54 343C 0014                  		move.w	#$14,d2
0000CE58                            
0000CE58                            ; Spikes types $1x and $5x face	sideways
0000CE58                            
0000CE58                            Obj36_SideWays:				; XREF: Obj36_Solid
0000CE58 323C 001B                  		move.w	#$1B,d1
0000CE5C 3602                       		move.w	d2,d3
0000CE5E 5243                       		addq.w	#1,d3
0000CE60 3828 0008                  		move.w	8(a0),d4
0000CE64 6100 0000                  		bsr.w	SolidObject
0000CE68 0828 0003 0022             		btst	#3,$22(a0)
0000CE6E 6600                       		bne.s	Obj36_Display
0000CE70 0C44 0001                  		cmpi.w	#1,d4
0000CE74 6700                       		beq.s	Obj36_Hurt
0000CE76 6000                       		bra.s	Obj36_Display
0000CE78                            ; ===========================================================================
0000CE78                            
0000CE78                            ; Spikes types $0x, $2x, $3x and $4x face up or	down
0000CE78                            
0000CE78                            Obj36_Upright:				; XREF: Obj36_Solid
0000CE78 7200                       		moveq	#0,d1
0000CE7A 1228 0019                  		move.b	$19(a0),d1
0000CE7E 0641 000B                  		addi.w	#$B,d1
0000CE82 343C 0010                  		move.w	#$10,d2
0000CE86 363C 0011                  		move.w	#$11,d3
0000CE8A 3828 0008                  		move.w	8(a0),d4
0000CE8E 6100 0000                  		bsr.w	SolidObject
0000CE92 0828 0003 0022             		btst	#3,$22(a0)
0000CE98 6600                       		bne.s	Obj36_Hurt
0000CE9A 4A44                       		tst.w	d4
0000CE9C 6A00                       		bpl.s	Obj36_Display
0000CE9E                            
0000CE9E                            Obj36_Hurt:				; XREF: Obj36_SideWays; Obj36_Upright
0000CE9E 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0000CEA2 6600                       		bne.s	Obj36_Display	; if yes, branch
0000CEA4 2F08                       		move.l	a0,-(sp)
0000CEA6 2448                       		movea.l	a0,a2
0000CEA8 41F8 D000                  		lea	($FFFFD000).w,a0
0000CEAC 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0000CEB2 6400                       		bcc.s	loc_CF20
0000CEB4 2628 000C                  		move.l	$C(a0),d3
0000CEB8 3028 0012                  		move.w	$12(a0),d0
0000CEBC 48C0                       		ext.l	d0
0000CEBE E180                       		asl.l	#8,d0
0000CEC0 9680                       		sub.l	d0,d3
0000CEC2 2143 000C                  		move.l	d3,$C(a0)
0000CEC6 4EB9 0000 0000             		jsr	HurtSonic
0000CECC                            
0000CECC                            loc_CF20:
0000CECC 205F                       		movea.l	(sp)+,a0
0000CECE                            
0000CECE                            Obj36_Display:
0000CECE 6100 0000                  		bsr.w	DisplaySprite
0000CED2 3028 0030                  		move.w	$30(a0),d0
0000CED6 0240 FF80                  		andi.w	#$FF80,d0
0000CEDA 3238 F700                  		move.w	($FFFFF700).w,d1
0000CEDE 0441 0080                  		subi.w	#$80,d1
0000CEE2 0241 FF80                  		andi.w	#$FF80,d1
0000CEE6 9041                       		sub.w	d1,d0
0000CEE8 0C40 0280                  		cmpi.w	#$280,d0
0000CEEC 6200 0000                  		bhi.w	DeleteObject
0000CEF0 4E75                       		rts	
0000CEF2                            ; ===========================================================================
0000CEF2                            
0000CEF2                            Obj36_Type0x:				; XREF: Obj36_Solid
0000CEF2 7000                       		moveq	#0,d0
0000CEF4 1028 0028                  		move.b	$28(a0),d0
0000CEF8 D040                       		add.w	d0,d0
0000CEFA 323B 0000                  		move.w	Obj36_TypeIndex(pc,d0.w),d1
0000CEFE 4EFB 1000                  		jmp	Obj36_TypeIndex(pc,d1.w)
0000CF02                            ; ===========================================================================
0000CF02 0000                       Obj36_TypeIndex:dc.w Obj36_Type00-Obj36_TypeIndex
0000CF04 0000                       		dc.w Obj36_Type01-Obj36_TypeIndex
0000CF06 0000                       		dc.w Obj36_Type02-Obj36_TypeIndex
0000CF08                            ; ===========================================================================
0000CF08                            
0000CF08                            Obj36_Type00:				; XREF: Obj36_TypeIndex
0000CF08 4E75                       		rts			; don't move the object
0000CF0A                            ; ===========================================================================
0000CF0A                            
0000CF0A                            Obj36_Type01:				; XREF: Obj36_TypeIndex
0000CF0A 6100 0000                  		bsr.w	Obj36_Wait
0000CF0E 7000                       		moveq	#0,d0
0000CF10 1028 0034                  		move.b	$34(a0),d0
0000CF14 D068 0032                  		add.w	$32(a0),d0
0000CF18 3140 000C                  		move.w	d0,$C(a0)	; move the object vertically
0000CF1C 4E75                       		rts	
0000CF1E                            ; ===========================================================================
0000CF1E                            
0000CF1E                            Obj36_Type02:				; XREF: Obj36_TypeIndex
0000CF1E 6100 0000                  		bsr.w	Obj36_Wait
0000CF22 7000                       		moveq	#0,d0
0000CF24 1028 0034                  		move.b	$34(a0),d0
0000CF28 D068 0030                  		add.w	$30(a0),d0
0000CF2C 3140 0008                  		move.w	d0,8(a0)	; move the object horizontally
0000CF30 4E75                       		rts	
0000CF32                            ; ===========================================================================
0000CF32                            
0000CF32                            Obj36_Wait:
0000CF32 4A68 0038                  		tst.w	$38(a0)		; is time delay	= zero?
0000CF36 6700                       		beq.s	loc_CFA4	; if yes, branch
0000CF38 5368 0038                  		subq.w	#1,$38(a0)	; subtract 1 from time delay
0000CF3C 6600                       		bne.s	locret_CFE6
0000CF3E 4A28 0001                  		tst.b	1(a0)
0000CF42 6A00                       		bpl.s	locret_CFE6
0000CF44 303C 00B6                  		move.w	#$B6,d0
0000CF48 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spikes moving" sound
0000CF4E 6000                       		bra.s	locret_CFE6
0000CF50                            ; ===========================================================================
0000CF50                            
0000CF50                            loc_CFA4:
0000CF50 4A68 0036                  		tst.w	$36(a0)
0000CF54 6700                       		beq.s	loc_CFC6
0000CF56 0468 0800 0034             		subi.w	#$800,$34(a0)
0000CF5C 6400                       		bcc.s	locret_CFE6
0000CF5E 317C 0000 0034             		move.w	#0,$34(a0)
0000CF64 317C 0000 0036             		move.w	#0,$36(a0)
0000CF6A 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000CF70 6000                       		bra.s	locret_CFE6
0000CF72                            ; ===========================================================================
0000CF72                            
0000CF72                            loc_CFC6:
0000CF72 0668 0800 0034             		addi.w	#$800,$34(a0)
0000CF78 0C68 2000 0034             		cmpi.w	#$2000,$34(a0)
0000CF7E 6500                       		bcs.s	locret_CFE6
0000CF80 317C 2000 0034             		move.w	#$2000,$34(a0)
0000CF86 317C 0001 0036             		move.w	#1,$36(a0)
0000CF8C 317C 003C 0038             		move.w	#60,$38(a0)	; set time delay to 1 second
0000CF92                            
0000CF92                            locret_CFE6:
0000CF92 4E75                       		rts	
0000CF94                            ; ===========================================================================
0000CF94                            ; ---------------------------------------------------------------------------
0000CF94                            ; Sprite mappings - spikes
0000CF94                            ; ---------------------------------------------------------------------------
0000CF94                            Map_obj36:
0000CF94                            	include "_maps\obj36.asm"
0000CF94                            ; ---------------------------------------------------------------------------
0000CF94                            ; Sprite mappings - spikes
0000CF94                            ; ---------------------------------------------------------------------------
0000CF94 0000                       		dc.w byte_CFF4-Map_obj36
0000CF96 0000                       		dc.w byte_D004-Map_obj36
0000CF98 0000                       		dc.w byte_D014-Map_obj36
0000CF9A 0000                       		dc.w byte_D01A-Map_obj36
0000CF9C 0000                       		dc.w byte_D02A-Map_obj36
0000CF9E 0000                       		dc.w byte_D049-Map_obj36
0000CFA0 03                         byte_CFF4:	dc.b 3			; 3 spikes
0000CFA1 F003 0004 EC               		dc.b $F0, 3, 0,	4, $EC
0000CFA6 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CFAB F003 0004 0C               		dc.b $F0, 3, 0,	4, $C
0000CFB0 03                         byte_D004:	dc.b 3			; 3 spikes facing sideways
0000CFB1 EC0C 0000 F0               		dc.b $EC, $C, 0, 0, $F0
0000CFB6 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000CFBB 0C0C 0000 F0               		dc.b $C, $C, 0,	0, $F0
0000CFC0 01                         byte_D014:	dc.b 1			; 1 spike
0000CFC1 F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CFC6 03                         byte_D01A:	dc.b 3			; 3 spikes widely spaced
0000CFC7 F003 0004 E4               		dc.b $F0, 3, 0,	4, $E4
0000CFCC F003 0004 FC               		dc.b $F0, 3, 0,	4, $FC
0000CFD1 F003 0004 14               		dc.b $F0, 3, 0,	4, $14
0000CFD6 06                         byte_D02A:	dc.b 6			; 6 spikes
0000CFD7 F003 0004 C0               		dc.b $F0, 3, 0,	4, $C0
0000CFDC F003 0004 D8               		dc.b $F0, 3, 0,	4, $D8
0000CFE1 F003 0004 F0               		dc.b $F0, 3, 0,	4, $F0
0000CFE6 F003 0004 08               		dc.b $F0, 3, 0,	4, 8
0000CFEB F003 0004 20               		dc.b $F0, 3, 0,	4, $20
0000CFF0 F003 0004 38               		dc.b $F0, 3, 0,	4, $38
0000CFF5 01                         byte_D049:	dc.b 1			; 1 spike facing sideways
0000CFF6 FC0C 0000 F0               		dc.b $FC, $C, 0, 0, $F0
0000CFFC 00                         		even
0000CFFC 00                         		even
0000CFFC                            
0000CFFC                            ; ===========================================================================
0000CFFC                            ; ---------------------------------------------------------------------------
0000CFFC                            ; Object 3B - purple rock (GHZ)
0000CFFC                            ; ---------------------------------------------------------------------------
0000CFFC                            
0000CFFC                            Obj3B:					; XREF: Obj_Index
0000CFFC 7000                       		moveq	#0,d0
0000CFFE 1028 0024                  		move.b	$24(a0),d0
0000D002 323B 0000                  		move.w	Obj3B_Index(pc,d0.w),d1
0000D006 4EFB 1000                  		jmp	Obj3B_Index(pc,d1.w)
0000D00A                            ; ===========================================================================
0000D00A 0000                       Obj3B_Index:	dc.w Obj3B_Main-Obj3B_Index
0000D00C 0000                       		dc.w Obj3B_Solid-Obj3B_Index
0000D00E                            ; ===========================================================================
0000D00E                            
0000D00E                            Obj3B_Main:				; XREF: Obj3B_Index
0000D00E 5428 0024                  		addq.b	#2,$24(a0)
0000D012 217C 0000 0000 0004        		move.l	#Map_obj3B,4(a0)
0000D01A 317C 63D0 0002             		move.w	#$63D0,2(a0)
0000D020 117C 0004 0001             		move.b	#4,1(a0)
0000D026 117C 0013 0019             		move.b	#$13,$19(a0)
0000D02C 117C 0004 0018             		move.b	#4,$18(a0)
0000D032                            
0000D032                            Obj3B_Solid:				; XREF: Obj3B_Index
0000D032 323C 001B                  		move.w	#$1B,d1
0000D036 343C 0010                  		move.w	#$10,d2
0000D03A 363C 0010                  		move.w	#$10,d3
0000D03E 3828 0008                  		move.w	8(a0),d4
0000D042 6100 0000                  		bsr.w	SolidObject
0000D046 6100 0000                  		bsr.w	DisplaySprite
0000D04A 3028 0008                  		move.w	8(a0),d0
0000D04E 0240 FF80                  		andi.w	#$FF80,d0
0000D052 3238 F700                  		move.w	($FFFFF700).w,d1
0000D056 0441 0080                  		subi.w	#$80,d1
0000D05A 0241 FF80                  		andi.w	#$FF80,d1
0000D05E 9041                       		sub.w	d1,d0
0000D060 0C40 0280                  		cmpi.w	#$280,d0
0000D064 6200 0000                  		bhi.w	DeleteObject
0000D068 4E75                       		rts	
0000D06A                            ; ===========================================================================
0000D06A                            ; ---------------------------------------------------------------------------
0000D06A                            ; Object 49 - waterfall	sound effect (GHZ)
0000D06A                            ; ---------------------------------------------------------------------------
0000D06A                            
0000D06A                            Obj49:					; XREF: Obj_Index
0000D06A 7000                       		moveq	#0,d0
0000D06C 1028 0024                  		move.b	$24(a0),d0
0000D070 323B 0000                  		move.w	Obj49_Index(pc,d0.w),d1
0000D074 4EFB 1000                  		jmp	Obj49_Index(pc,d1.w)
0000D078                            ; ===========================================================================
0000D078 0000                       Obj49_Index:	dc.w Obj49_Main-Obj49_Index
0000D07A 0000                       		dc.w Obj49_PlaySnd-Obj49_Index
0000D07C                            ; ===========================================================================
0000D07C                            
0000D07C                            Obj49_Main:				; XREF: Obj49_Index
0000D07C 5428 0024                  		addq.b	#2,$24(a0)
0000D080 117C 0004 0001             		move.b	#4,1(a0)
0000D086                            
0000D086                            Obj49_PlaySnd:				; XREF: Obj49_Index
0000D086 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0000D08A 0200 003F                  		andi.b	#$3F,d0
0000D08E 6600                       		bne.s	Obj49_ChkDel
0000D090 303C 00D0                  		move.w	#$D0,d0
0000D094 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play waterfall sound
0000D09A                            
0000D09A                            Obj49_ChkDel:
0000D09A 3028 0008                  		move.w	8(a0),d0
0000D09E 0240 FF80                  		andi.w	#$FF80,d0
0000D0A2 3238 F700                  		move.w	($FFFFF700).w,d1
0000D0A6 0441 0080                  		subi.w	#$80,d1
0000D0AA 0241 FF80                  		andi.w	#$FF80,d1
0000D0AE 9041                       		sub.w	d1,d0
0000D0B0 0C40 0280                  		cmpi.w	#$280,d0
0000D0B4 6200 0000                  		bhi.w	DeleteObject
0000D0B8 4E75                       		rts	
0000D0BA                            ; ===========================================================================
0000D0BA                            ; ---------------------------------------------------------------------------
0000D0BA                            ; Sprite mappings - purple rock	(GHZ)
0000D0BA                            ; ---------------------------------------------------------------------------
0000D0BA                            Map_obj3B:
0000D0BA                            	include "_maps\obj3B.asm"
0000D0BA                            ; ---------------------------------------------------------------------------
0000D0BA                            ; Sprite mappings - purple rock	(GHZ)
0000D0BA                            ; ---------------------------------------------------------------------------
0000D0BA 0000                       		dc.w byte_D110-Map_obj3B
0000D0BC 02                         byte_D110:	dc.b 2
0000D0BD F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000D0C2 F00B 000C 00               		dc.b $F0, $B, 0, $C, 0
0000D0C8 00                         		even
0000D0C8 00                         		even
0000D0C8                            
0000D0C8                            ; ===========================================================================
0000D0C8                            ; ---------------------------------------------------------------------------
0000D0C8                            ; Object 3C - smashable	wall (GHZ, SLZ)
0000D0C8                            ; ---------------------------------------------------------------------------
0000D0C8                            
0000D0C8                            Obj3C:					; XREF: Obj_Index
0000D0C8 7000                       		moveq	#0,d0
0000D0CA 1028 0024                  		move.b	$24(a0),d0
0000D0CE 323B 0000                  		move.w	Obj3C_Index(pc,d0.w),d1
0000D0D2 4EBB 1000                  		jsr	Obj3C_Index(pc,d1.w)
0000D0D6 6000 0000                  		bra.w	MarkObjGone
0000D0DA                            ; ===========================================================================
0000D0DA 0000                       Obj3C_Index:	dc.w Obj3C_Main-Obj3C_Index
0000D0DC 0000                       		dc.w Obj3C_Solid-Obj3C_Index
0000D0DE 0000                       		dc.w Obj3C_FragMove-Obj3C_Index
0000D0E0                            ; ===========================================================================
0000D0E0                            
0000D0E0                            Obj3C_Main:				; XREF: Obj3C_Index
0000D0E0 5428 0024                  		addq.b	#2,$24(a0)
0000D0E4 217C 0000 0000 0004        		move.l	#Map_obj3C,4(a0)
0000D0EC 317C 450F 0002             		move.w	#$450F,2(a0)
0000D0F2 117C 0004 0001             		move.b	#4,1(a0)
0000D0F8 117C 0010 0019             		move.b	#$10,$19(a0)
0000D0FE 117C 0004 0018             		move.b	#4,$18(a0)
0000D104 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000D10A                            
0000D10A                            Obj3C_Solid:				; XREF: Obj3C_Index
0000D10A 3178 D010 0030             		move.w	($FFFFD010).w,$30(a0) ;	load Sonic's horizontal speed
0000D110 323C 001B                  		move.w	#$1B,d1
0000D114 343C 0020                  		move.w	#$20,d2
0000D118 363C 0020                  		move.w	#$20,d3
0000D11C 3828 0008                  		move.w	8(a0),d4
0000D120 6100 0000                  		bsr.w	SolidObject
0000D124 0828 0005 0022             		btst	#5,$22(a0)
0000D12A 6600                       		bne.s	Obj3C_ChkRoll
0000D12C                            
0000D12C                            locret_D180:
0000D12C 4E75                       		rts	
0000D12E                            ; ===========================================================================
0000D12E                            
0000D12E                            Obj3C_ChkRoll:				; XREF: Obj3C_Solid
0000D12E 0C29 0002 001C             		cmpi.b	#2,$1C(a1)	; is Sonic rolling?
0000D134 66F6                       		bne.s	locret_D180	; if not, branch
0000D136 3028 0030                  		move.w	$30(a0),d0
0000D13A 6A00                       		bpl.s	Obj3C_ChkSpeed
0000D13C 4440                       		neg.w	d0
0000D13E                            
0000D13E                            Obj3C_ChkSpeed:
0000D13E 0C40 0480                  		cmpi.w	#$480,d0	; is Sonic's speed $480 or higher?
0000D142 65E8                       		bcs.s	locret_D180	; if not, branch
0000D144 3368 0030 0010             		move.w	$30(a0),$10(a1)
0000D14A 5869 0008                  		addq.w	#4,8(a1)
0000D14E 49F9 0000 0000             		lea	(Obj3C_FragSpd1).l,a4 ;	use fragments that move	right
0000D154 3028 0008                  		move.w	8(a0),d0
0000D158 B069 0008                  		cmp.w	8(a1),d0	; is Sonic to the right	of the block?
0000D15C 6500                       		bcs.s	Obj3C_Smash	; if yes, branch
0000D15E 5169 0008                  		subq.w	#8,8(a1)
0000D162 49F9 0000 0000             		lea	(Obj3C_FragSpd2).l,a4 ;	use fragments that move	left
0000D168                            
0000D168                            Obj3C_Smash:
0000D168 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000D16E 08A8 0005 0022             		bclr	#5,$22(a0)
0000D174 08A9 0005 0022             		bclr	#5,$22(a1)
0000D17A 7207                       		moveq	#7,d1		; load 8 fragments
0000D17C 343C 0070                  		move.w	#$70,d2
0000D180 6100                       		bsr.s	SmashObject
0000D182                            
0000D182                            Obj3C_FragMove:				; XREF: Obj3C_Index
0000D182 6100 0000                  		bsr.w	SpeedToPos
0000D186 0668 0070 0012             		addi.w	#$70,$12(a0)	; make fragment	fall faster
0000D18C 6100 0000                  		bsr.w	DisplaySprite
0000D190 4A28 0001                  		tst.b	1(a0)
0000D194 6A00 0000                  		bpl.w	DeleteObject
0000D198 4E75                       		rts	
0000D19A                            
0000D19A                            ; ---------------------------------------------------------------------------
0000D19A                            ; Subroutine to	smash a	block (GHZ walls and MZ	blocks)
0000D19A                            ; ---------------------------------------------------------------------------
0000D19A                            
0000D19A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D19A                            
0000D19A                            
0000D19A                            SmashObject:				; XREF: Obj3C_Smash
0000D19A 7000                       		moveq	#0,d0
0000D19C 1028 001A                  		move.b	$1A(a0),d0
0000D1A0 D040                       		add.w	d0,d0
0000D1A2 2668 0004                  		movea.l	4(a0),a3
0000D1A6 D6F3 0000                  		adda.w	(a3,d0.w),a3
0000D1AA 524B                       		addq.w	#1,a3
0000D1AC 08E8 0005 0001             		bset	#5,1(a0)
0000D1B2 1810                       		move.b	0(a0),d4
0000D1B4 1A28 0001                  		move.b	1(a0),d5
0000D1B8 2248                       		movea.l	a0,a1
0000D1BA 6000                       		bra.s	Smash_LoadFrag
0000D1BC                            ; ===========================================================================
0000D1BC                            
0000D1BC                            Smash_Loop:
0000D1BC 6100 0000                  		bsr.w	SingleObjLoad
0000D1C0 6600                       		bne.s	Smash_PlaySnd
0000D1C2 5A4B                       		addq.w	#5,a3
0000D1C4                            
0000D1C4                            Smash_LoadFrag:				; XREF: SmashObject
0000D1C4 137C 0004 0024             		move.b	#4,$24(a1)
0000D1CA 1284                       		move.b	d4,0(a1)
0000D1CC 234B 0004                  		move.l	a3,4(a1)
0000D1D0 1345 0001                  		move.b	d5,1(a1)
0000D1D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000D1DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000D1E0 3368 0002 0002             		move.w	2(a0),2(a1)
0000D1E6 1368 0018 0018             		move.b	$18(a0),$18(a1)
0000D1EC 1368 0019 0019             		move.b	$19(a0),$19(a1)
0000D1F2 335C 0010                  		move.w	(a4)+,$10(a1)
0000D1F6 335C 0012                  		move.w	(a4)+,$12(a1)
0000D1FA B3C8                       		cmpa.l	a0,a1
0000D1FC 6400                       		bcc.s	loc_D268
0000D1FE 2F08                       		move.l	a0,-(sp)
0000D200 2049                       		movea.l	a1,a0
0000D202 6100 0000                  		bsr.w	SpeedToPos
0000D206 D568 0012                  		add.w	d2,$12(a0)
0000D20A 205F                       		movea.l	(sp)+,a0
0000D20C 6100 0000                  		bsr.w	DisplaySprite2
0000D210                            
0000D210                            loc_D268:
0000D210 51C9 FFAA                  		dbf	d1,Smash_Loop
0000D214                            
0000D214                            Smash_PlaySnd:
0000D214 303C 00CB                  		move.w	#$CB,d0
0000D218 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
0000D21E                            ; End of function SmashObject
0000D21E                            
0000D21E                            ; ===========================================================================
0000D21E                            ; Smashed block	fragment speeds
0000D21E                            ;
0000D21E 0400 FB00                  Obj3C_FragSpd1:	dc.w $400, $FB00	; x-move speed,	y-move speed
0000D222 0600 FF00                  		dc.w $600, $FF00
0000D226 0600 0100                  		dc.w $600, $100
0000D22A 0400 0500                  		dc.w $400, $500
0000D22E 0600 FA00                  		dc.w $600, $FA00
0000D232 0800 FE00                  		dc.w $800, $FE00
0000D236 0800 0200                  		dc.w $800, $200
0000D23A 0600 0600                  		dc.w $600, $600
0000D23E                            
0000D23E FA00 FA00                  Obj3C_FragSpd2:	dc.w $FA00, $FA00
0000D242 F800 FE00                  		dc.w $F800, $FE00
0000D246 F800 0200                  		dc.w $F800, $200
0000D24A FA00 0600                  		dc.w $FA00, $600
0000D24E FC00 FB00                  		dc.w $FC00, $FB00
0000D252 FA00 FF00                  		dc.w $FA00, $FF00
0000D256 FA00 0100                  		dc.w $FA00, $100
0000D25A FC00 0500                  		dc.w $FC00, $500
0000D25E                            ; ---------------------------------------------------------------------------
0000D25E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D25E                            ; ---------------------------------------------------------------------------
0000D25E                            Map_obj3C:
0000D25E                            	include "_maps\obj3C.asm"
0000D25E                            ; ---------------------------------------------------------------------------
0000D25E                            ; Sprite mappings - smashable walls (GHZ, SLZ)
0000D25E                            ; ---------------------------------------------------------------------------
0000D25E 0000                       		dc.w byte_D2BC-Map_obj3C
0000D260 0000                       		dc.w byte_D2E5-Map_obj3C
0000D262 0000                       		dc.w byte_D30E-Map_obj3C
0000D264 08                         byte_D2BC:	dc.b 8
0000D265 E005 0000 F0               		dc.b $E0, 5, 0,	0, $F0
0000D26A F005 0000 F0               		dc.b $F0, 5, 0,	0, $F0
0000D26F 0005 0000 F0               		dc.b 0,	5, 0, 0, $F0
0000D274 1005 0000 F0               		dc.b $10, 5, 0,	0, $F0
0000D279 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D27E F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D283 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D288 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D28D 08                         byte_D2E5:	dc.b 8
0000D28E E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D293 F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D298 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D29D 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D2A2 E005 0004 00               		dc.b $E0, 5, 0,	4, 0
0000D2A7 F005 0004 00               		dc.b $F0, 5, 0,	4, 0
0000D2AC 0005 0004 00               		dc.b 0,	5, 0, 4, 0
0000D2B1 1005 0004 00               		dc.b $10, 5, 0,	4, 0
0000D2B6 08                         byte_D30E:	dc.b 8
0000D2B7 E005 0004 F0               		dc.b $E0, 5, 0,	4, $F0
0000D2BC F005 0004 F0               		dc.b $F0, 5, 0,	4, $F0
0000D2C1 0005 0004 F0               		dc.b 0,	5, 0, 4, $F0
0000D2C6 1005 0004 F0               		dc.b $10, 5, 0,	4, $F0
0000D2CB E005 0008 00               		dc.b $E0, 5, 0,	8, 0
0000D2D0 F005 0008 00               		dc.b $F0, 5, 0,	8, 0
0000D2D5 0005 0008 00               		dc.b 0,	5, 0, 8, 0
0000D2DA 1005 0008 00               		dc.b $10, 5, 0,	8, 0
0000D2E0 00                         		even
0000D2E0 00                         		even
0000D2E0                            
0000D2E0                            ; ---------------------------------------------------------------------------
0000D2E0                            ; Object code loading subroutine
0000D2E0                            ; ---------------------------------------------------------------------------
0000D2E0                            
0000D2E0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D2E0                            
0000D2E0                            
0000D2E0                            ObjectsLoad:				; XREF: TitleScreen; et al
0000D2E0 41F8 D000                  		lea	($FFFFD000).w,a0 ; set address for object RAM
0000D2E4 7E7F                       		moveq	#$7F,d7
0000D2E6 7000                       		moveq	#0,d0
0000D2E8 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000D2EE 6400                       		bcc.s	loc_D362
0000D2F0                            
0000D2F0                            loc_D348:
0000D2F0 1010                       		move.b	(a0),d0		; load object number from RAM
0000D2F2 6700                       		beq.s	loc_D358
0000D2F4 D040                       		add.w	d0,d0
0000D2F6 D040                       		add.w	d0,d0
0000D2F8 227B 0000                  		movea.l	Obj_Index-4(pc,d0.w),a1
0000D2FC 4E91                       		jsr	(a1)		; run the object's code
0000D2FE 7000                       		moveq	#0,d0
0000D300                            
0000D300                            loc_D358:
0000D300 41E8 0040                  		lea	$40(a0),a0	; next object
0000D304 51CF FFEA                  		dbf	d7,loc_D348
0000D308 4E75                       		rts	
0000D30A                            ; ===========================================================================
0000D30A                            
0000D30A                            loc_D362:
0000D30A 7E1F                       		moveq	#$1F,d7
0000D30C 61E2                       		bsr.s	loc_D348
0000D30E 7E5F                       		moveq	#$5F,d7
0000D310                            
0000D310                            loc_D368:
0000D310 7000                       		moveq	#0,d0
0000D312 1010                       		move.b	(a0),d0
0000D314 6700                       		beq.s	loc_D378
0000D316 4A28 0001                  		tst.b	1(a0)
0000D31A 6A00                       		bpl.s	loc_D378
0000D31C 6100 0000                  		bsr.w	DisplaySprite
0000D320                            
0000D320                            loc_D378:
0000D320 41E8 0040                  		lea	$40(a0),a0
0000D324                            
0000D324                            loc_D37C:
0000D324 51CF FFEA                  		dbf	d7,loc_D368
0000D328 4E75                       		rts	
0000D32A                            ; End of function ObjectsLoad
0000D32A                            
0000D32A                            ; ===========================================================================
0000D32A                            ; ---------------------------------------------------------------------------
0000D32A                            ; Object pointers
0000D32A                            ; ---------------------------------------------------------------------------
0000D32A                            Obj_Index:
0000D32A                            	include "_inc\Object pointers.asm"
0000D32A                            ; ---------------------------------------------------------------------------
0000D32A                            ; Object pointers
0000D32A                            ; ---------------------------------------------------------------------------
0000D32A 0000 0000 0000 0000 0000+  	dc.l Obj01, ObjectFall,	ObjectFall, ObjectFall
0000D33A 0000 0000 0000 0000 0000+  	dc.l ObjectFall, ObjectFall, ObjectFall, Obj08
0000D34A 0000 0000 0000 0000 0000+  	dc.l Obj09, Obj0A, Obj0B, Obj0C
0000D35A 0000 0000 0000 A5DC 0000+  	dc.l Obj0D, Obj0E, Obj0F, Obj10
0000D36A 0000 7316 0000 0000 0000+  	dc.l Obj11, Obj12, Obj13, Obj14
0000D37A 0000 793C 0000 0000 0000+  	dc.l Obj15, Obj16, Obj17, Obj18
0000D38A 0000 818A 0000 81F2 0000+  	dc.l Obj19, Obj1A, Obj1B, Obj1C
0000D39A 0000 883C 0000 8B2A 0000+  	dc.l Obj1D, Obj1E, Obj1F, Obj20
0000D3AA 0000 0000 0000 97AE 0000+  	dc.l Obj21, Obj22, Obj23, Obj24
0000D3BA 0000 9AF0 0000 A0DC 0000+  	dc.l Obj25, Obj26, Obj27, Obj28
0000D3CA 0000 93E6 0000 8912 0000+  	dc.l Obj29, Obj2A, Obj2B, Obj2C
0000D3DA 0000 AC64 0000 A2C2 0000+  	dc.l Obj2D, Obj2E, Obj2F, Obj30
0000D3EA 0000 B636 0000 BCE4 0000+  	dc.l Obj31, Obj32, Obj33, Obj34
0000D3FA 0000 B19A 0000 CDD4 0000+  	dc.l Obj35, Obj36, Obj37, Obj38
0000D40A 0000 C46A 0000 C524 0000+  	dc.l Obj39, Obj3A, Obj3B, Obj3C
0000D41A 0000 0000 0000 0000 0000+  	dc.l Obj3D, Obj3E, Obj3F, Obj40
0000D42A 0000 0000 0000 0000 0000+  	dc.l Obj41, Obj42, Obj43, Obj44
0000D43A 0000 B952 0000 0000 0000+  	dc.l Obj45, Obj46, Obj47, Obj48
0000D44A 0000 D06A 0000 0000 0000+  	dc.l Obj49, Obj4A, Obj4B, Obj4C
0000D45A 0000 0000 0000 0000 0000+  	dc.l Obj4D, Obj4E, Obj4F, Obj50
0000D46A 0000 0000 0000 0000 0000+  	dc.l Obj51, Obj52, Obj53, Obj54
0000D47A 0000 0000 0000 0000 0000+  	dc.l Obj55, Obj56, Obj57, Obj58
0000D48A 0000 0000 0000 0000 0000+  	dc.l Obj59, Obj5A, Obj5B, Obj5C
0000D49A 0000 0000 0000 0000 0000+  	dc.l Obj5D, Obj5E, Obj5F, Obj60
0000D4AA 0000 0000 0000 0000 0000+  	dc.l Obj61, Obj62, Obj63, Obj64
0000D4BA 0000 0000 0000 0000 0000+  	dc.l Obj65, Obj66, Obj67, Obj68
0000D4CA 0000 0000 0000 0000 0000+  	dc.l Obj69, Obj6A, Obj6B, Obj6C
0000D4DA 0000 0000 0000 0000 0000+  	dc.l Obj6D, Obj6E, Obj6F, Obj70
0000D4EA 0000 0000 0000 0000 0000+  	dc.l Obj71, Obj72, Obj73, Obj74
0000D4FA 0000 0000 0000 0000 0000+  	dc.l Obj75, Obj76, Obj77, Obj78
0000D50A 0000 0000 0000 0000 0000+  	dc.l Obj79, Obj7A, Obj7B, Obj7C
0000D51A 0000 0000 0000 C75E 0000+  	dc.l Obj7D, Obj7E, Obj7F, Obj80
0000D52A 0000 4F50 0000 0000 0000+  	dc.l Obj81, Obj82, Obj83, Obj84
0000D53A 0000 0000 0000 0000 0000+  	dc.l Obj85, Obj86, Obj87, Obj88
0000D54A 0000 560A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D54A 0000 560A 0000 0000 0000+  	dc.l Obj89, Obj8A, Obj8B, Obj8C
0000D55A                            
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A                            ; Subroutine to	make an	object fall downwards, increasingly fast
0000D55A                            ; ---------------------------------------------------------------------------
0000D55A                            
0000D55A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D55A                            
0000D55A                            
0000D55A                            ObjectFall:
0000D55A 2428 0008                  		move.l	8(a0),d2
0000D55E 2628 000C                  		move.l	$C(a0),d3
0000D562 3028 0010                  		move.w	$10(a0),d0
0000D566 48C0                       		ext.l	d0
0000D568 E180                       		asl.l	#8,d0
0000D56A D480                       		add.l	d0,d2
0000D56C 3028 0012                  		move.w	$12(a0),d0
0000D570 0668 0038 0012             		addi.w	#$38,$12(a0)	; increase vertical speed
0000D576 48C0                       		ext.l	d0
0000D578 E180                       		asl.l	#8,d0
0000D57A D680                       		add.l	d0,d3
0000D57C 2142 0008                  		move.l	d2,8(a0)
0000D580 2143 000C                  		move.l	d3,$C(a0)
0000D584 4E75                       		rts	
0000D586                            ; End of function ObjectFall
0000D586                            
0000D586                            ; ---------------------------------------------------------------------------
0000D586                            ; Subroutine translating object	speed to update	object position
0000D586                            ; ---------------------------------------------------------------------------
0000D586                            
0000D586                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D586                            
0000D586                            
0000D586                            SpeedToPos:
0000D586 2428 0008                  		move.l	8(a0),d2
0000D58A 2628 000C                  		move.l	$C(a0),d3
0000D58E 3028 0010                  		move.w	$10(a0),d0	; load horizontal speed
0000D592 48C0                       		ext.l	d0
0000D594 E180                       		asl.l	#8,d0		; multiply speed by $100
0000D596 D480                       		add.l	d0,d2		; add to x-axis	position
0000D598 3028 0012                  		move.w	$12(a0),d0	; load vertical	speed
0000D59C 48C0                       		ext.l	d0
0000D59E E180                       		asl.l	#8,d0		; multiply by $100
0000D5A0 D680                       		add.l	d0,d3		; add to y-axis	position
0000D5A2 2142 0008                  		move.l	d2,8(a0)	; update x-axis	position
0000D5A6 2143 000C                  		move.l	d3,$C(a0)	; update y-axis	position
0000D5AA 4E75                       		rts	
0000D5AC                            ; End of function SpeedToPos
0000D5AC                            
0000D5AC                            ; ---------------------------------------------------------------------------
0000D5AC                            ; Subroutine to	display	a sprite/object, when a0 is the	object RAM
0000D5AC                            ; ---------------------------------------------------------------------------
0000D5AC                            
0000D5AC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5AC                            
0000D5AC                            
0000D5AC                            DisplaySprite:
0000D5AC 43F8 AC00                  		lea	($FFFFAC00).w,a1
0000D5B0 3028 0018                  		move.w	$18(a0),d0
0000D5B4 E248                       		lsr.w	#1,d0
0000D5B6 0240 0380                  		andi.w	#$380,d0
0000D5BA D2C0                       		adda.w	d0,a1
0000D5BC 0C51 007E                  		cmpi.w	#$7E,(a1)
0000D5C0 6400                       		bcc.s	locret_D620
0000D5C2 5451                       		addq.w	#2,(a1)
0000D5C4 D2D1                       		adda.w	(a1),a1
0000D5C6 3288                       		move.w	a0,(a1)
0000D5C8                            
0000D5C8                            locret_D620:
0000D5C8 4E75                       		rts	
0000D5CA                            ; End of function DisplaySprite
0000D5CA                            
0000D5CA                            ; ---------------------------------------------------------------------------
0000D5CA                            ; Subroutine to	display	a 2nd sprite/object, when a1 is	the object RAM
0000D5CA                            ; ---------------------------------------------------------------------------
0000D5CA                            
0000D5CA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5CA                            
0000D5CA                            
0000D5CA                            DisplaySprite2:
0000D5CA 45F8 AC00                  		lea	($FFFFAC00).w,a2
0000D5CE 3029 0018                  		move.w	$18(a1),d0
0000D5D2 E248                       		lsr.w	#1,d0
0000D5D4 0240 0380                  		andi.w	#$380,d0
0000D5D8 D4C0                       		adda.w	d0,a2
0000D5DA 0C52 007E                  		cmpi.w	#$7E,(a2)
0000D5DE 6400                       		bcc.s	locret_D63E
0000D5E0 5452                       		addq.w	#2,(a2)
0000D5E2 D4D2                       		adda.w	(a2),a2
0000D5E4 3489                       		move.w	a1,(a2)
0000D5E6                            
0000D5E6                            locret_D63E:
0000D5E6 4E75                       		rts	
0000D5E8                            ; End of function DisplaySprite2
0000D5E8                            
0000D5E8                            ; ---------------------------------------------------------------------------
0000D5E8                            ; Subroutine to	delete an object
0000D5E8                            ; ---------------------------------------------------------------------------
0000D5E8                            
0000D5E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D5E8                            
0000D5E8                            
0000D5E8                            DeleteObject:
0000D5E8 2248                       		movea.l	a0,a1
0000D5EA                            
0000D5EA                            DeleteObject2:
0000D5EA 7200                       		moveq	#0,d1
0000D5EC 700F                       		moveq	#$F,d0
0000D5EE                            
0000D5EE                            loc_D646:
0000D5EE 22C1                       		move.l	d1,(a1)+	; clear	the object RAM
0000D5F0 51C8 FFFC                  		dbf	d0,loc_D646	; repeat $F times (length of object RAM)
0000D5F4 4E75                       		rts	
0000D5F6                            ; End of function DeleteObject
0000D5F6                            
0000D5F6                            ; ===========================================================================
0000D5F6 0000 0000                  BldSpr_ScrPos:	dc.l 0			; blank
0000D5FA 00FF F700                  		dc.l $FFF700		; main screen x-position
0000D5FE 00FF F708                  		dc.l $FFF708		; background x-position	1
0000D602 00FF F718                  		dc.l $FFF718		; background x-position	2
0000D606                            ; ---------------------------------------------------------------------------
0000D606                            ; Subroutine to	convert	mappings (etc) to proper Megadrive sprites
0000D606                            ; ---------------------------------------------------------------------------
0000D606                            
0000D606                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D606                            
0000D606                            
0000D606                            BuildSprites:				; XREF: TitleScreen; et al
0000D606 45F8 F800                  		lea	($FFFFF800).w,a2 ; set address for sprite table
0000D60A 7A00                       		moveq	#0,d5
0000D60C 49F8 AC00                  		lea	($FFFFAC00).w,a4
0000D610 7E07                       		moveq	#7,d7
0000D612                            
0000D612                            loc_D66A:
0000D612 4A54                       		tst.w	(a4)
0000D614 6700 0000                  		beq.w	loc_D72E
0000D618 7C02                       		moveq	#2,d6
0000D61A                            
0000D61A                            loc_D672:
0000D61A 3074 6000                  		movea.w	(a4,d6.w),a0
0000D61E 4A10                       		tst.b	(a0)
0000D620 6700 0000                  		beq.w	loc_D726
0000D624 08A8 0007 0001             		bclr	#7,1(a0)
0000D62A 1028 0001                  		move.b	1(a0),d0
0000D62E 1800                       		move.b	d0,d4
0000D630 0240 000C                  		andi.w	#$C,d0
0000D634 6700                       		beq.s	loc_D6DE
0000D636 227B 00BE                  		movea.l	BldSpr_ScrPos(pc,d0.w),a1
0000D63A 7000                       		moveq	#0,d0
0000D63C 1028 0019                  		move.b	$19(a0),d0
0000D640 3628 0008                  		move.w	8(a0),d3
0000D644 9651                       		sub.w	(a1),d3
0000D646 3203                       		move.w	d3,d1
0000D648 D240                       		add.w	d0,d1
0000D64A 6B00 0000                  		bmi.w	loc_D726
0000D64E 3203                       		move.w	d3,d1
0000D650 9240                       		sub.w	d0,d1
0000D652 0C41 0140                  		cmpi.w	#$140,d1
0000D656 6C00                       		bge.s	loc_D726
0000D658 0643 0080                  		addi.w	#$80,d3
0000D65C 0804 0004                  		btst	#4,d4
0000D660 6700                       		beq.s	loc_D6E8
0000D662 7000                       		moveq	#0,d0
0000D664 1028 0016                  		move.b	$16(a0),d0
0000D668 3428 000C                  		move.w	$C(a0),d2
0000D66C 9469 0004                  		sub.w	4(a1),d2
0000D670 3202                       		move.w	d2,d1
0000D672 D240                       		add.w	d0,d1
0000D674 6B00                       		bmi.s	loc_D726
0000D676 3202                       		move.w	d2,d1
0000D678 9240                       		sub.w	d0,d1
0000D67A 0C41 00E0                  		cmpi.w	#$E0,d1
0000D67E 6C00                       		bge.s	loc_D726
0000D680 0642 0080                  		addi.w	#$80,d2
0000D684 6000                       		bra.s	loc_D700
0000D686                            ; ===========================================================================
0000D686                            
0000D686                            loc_D6DE:
0000D686 3428 000A                  		move.w	$A(a0),d2
0000D68A 3628 0008                  		move.w	8(a0),d3
0000D68E 6000                       		bra.s	loc_D700
0000D690                            ; ===========================================================================
0000D690                            
0000D690                            loc_D6E8:
0000D690 3428 000C                  		move.w	$C(a0),d2
0000D694 9469 0004                  		sub.w	4(a1),d2
0000D698 0642 0080                  		addi.w	#$80,d2
0000D69C 0C42 0060                  		cmpi.w	#$60,d2
0000D6A0 6500                       		bcs.s	loc_D726
0000D6A2 0C42 0180                  		cmpi.w	#$180,d2
0000D6A6 6400                       		bcc.s	loc_D726
0000D6A8                            
0000D6A8                            loc_D700:
0000D6A8 2268 0004                  		movea.l	4(a0),a1
0000D6AC 7200                       		moveq	#0,d1
0000D6AE 0804 0005                  		btst	#5,d4
0000D6B2 6600                       		bne.s	loc_D71C
0000D6B4 1228 001A                  		move.b	$1A(a0),d1
0000D6B8 D201                       		add.b	d1,d1
0000D6BA D2F1 1000                  		adda.w	(a1,d1.w),a1
0000D6BE 1219                       		move.b	(a1)+,d1
0000D6C0 5301                       		subq.b	#1,d1
0000D6C2 6B00                       		bmi.s	loc_D720
0000D6C4                            
0000D6C4                            loc_D71C:
0000D6C4 6100 0000                  		bsr.w	sub_D750
0000D6C8                            
0000D6C8                            loc_D720:
0000D6C8 08E8 0007 0001             		bset	#7,1(a0)
0000D6CE                            
0000D6CE                            loc_D726:
0000D6CE 5446                       		addq.w	#2,d6
0000D6D0 5554                       		subq.w	#2,(a4)
0000D6D2 6600 FF46                  		bne.w	loc_D672
0000D6D6                            
0000D6D6                            loc_D72E:
0000D6D6 49EC 0080                  		lea	$80(a4),a4
0000D6DA 51CF FF36                  		dbf	d7,loc_D66A
0000D6DE 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0000D6E2 0C05 0050                  		cmpi.b	#$50,d5
0000D6E6 6700                       		beq.s	loc_D748
0000D6E8 24BC 0000 0000             		move.l	#0,(a2)
0000D6EE 4E75                       		rts	
0000D6F0                            ; ===========================================================================
0000D6F0                            
0000D6F0                            loc_D748:
0000D6F0 157C 0000 FFFB             		move.b	#0,-5(a2)
0000D6F6 4E75                       		rts	
0000D6F8                            ; End of function BuildSprites
0000D6F8                            
0000D6F8                            
0000D6F8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D6F8                            
0000D6F8                            
0000D6F8                            sub_D750:				; XREF: BuildSprites
0000D6F8 3668 0002                  		movea.w	2(a0),a3
0000D6FC 0804 0000                  		btst	#0,d4
0000D700 6600                       		bne.s	loc_D796
0000D702 0804 0001                  		btst	#1,d4
0000D706 6600 0000                  		bne.w	loc_D7E4
0000D70A                            ; End of function sub_D750
0000D70A                            
0000D70A                            
0000D70A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D70A                            
0000D70A                            
0000D70A                            sub_D762:				; XREF: sub_D762; SS_ShowLayout
0000D70A 0C05 0050                  		cmpi.b	#$50,d5
0000D70E 6700                       		beq.s	locret_D794
0000D710 1019                       		move.b	(a1)+,d0
0000D712 4880                       		ext.w	d0
0000D714 D042                       		add.w	d2,d0
0000D716 34C0                       		move.w	d0,(a2)+
0000D718 14D9                       		move.b	(a1)+,(a2)+
0000D71A 5205                       		addq.b	#1,d5
0000D71C 14C5                       		move.b	d5,(a2)+
0000D71E 1019                       		move.b	(a1)+,d0
0000D720 E148                       		lsl.w	#8,d0
0000D722 1019                       		move.b	(a1)+,d0
0000D724 D04B                       		add.w	a3,d0
0000D726 34C0                       		move.w	d0,(a2)+
0000D728 1019                       		move.b	(a1)+,d0
0000D72A 4880                       		ext.w	d0
0000D72C D043                       		add.w	d3,d0
0000D72E 0240 01FF                  		andi.w	#$1FF,d0
0000D732 6600                       		bne.s	loc_D78E
0000D734 5240                       		addq.w	#1,d0
0000D736                            
0000D736                            loc_D78E:
0000D736 34C0                       		move.w	d0,(a2)+
0000D738 51C9 FFD0                  		dbf	d1,sub_D762
0000D73C                            
0000D73C                            locret_D794:
0000D73C 4E75                       		rts	
0000D73E                            ; End of function sub_D762
0000D73E                            
0000D73E                            ; ===========================================================================
0000D73E                            
0000D73E                            loc_D796:
0000D73E 0804 0001                  		btst	#1,d4
0000D742 6600 0000                  		bne.w	loc_D82A
0000D746                            
0000D746                            loc_D79E:
0000D746 0C05 0050                  		cmpi.b	#$50,d5
0000D74A 6700                       		beq.s	locret_D7E2
0000D74C 1019                       		move.b	(a1)+,d0
0000D74E 4880                       		ext.w	d0
0000D750 D042                       		add.w	d2,d0
0000D752 34C0                       		move.w	d0,(a2)+
0000D754 1819                       		move.b	(a1)+,d4
0000D756 14C4                       		move.b	d4,(a2)+
0000D758 5205                       		addq.b	#1,d5
0000D75A 14C5                       		move.b	d5,(a2)+
0000D75C 1019                       		move.b	(a1)+,d0
0000D75E E148                       		lsl.w	#8,d0
0000D760 1019                       		move.b	(a1)+,d0
0000D762 D04B                       		add.w	a3,d0
0000D764 0A40 0800                  		eori.w	#$800,d0
0000D768 34C0                       		move.w	d0,(a2)+
0000D76A 1019                       		move.b	(a1)+,d0
0000D76C 4880                       		ext.w	d0
0000D76E 4440                       		neg.w	d0
0000D770 D804                       		add.b	d4,d4
0000D772 0244 0018                  		andi.w	#$18,d4
0000D776 5044                       		addq.w	#8,d4
0000D778 9044                       		sub.w	d4,d0
0000D77A D043                       		add.w	d3,d0
0000D77C 0240 01FF                  		andi.w	#$1FF,d0
0000D780 6600                       		bne.s	loc_D7DC
0000D782 5240                       		addq.w	#1,d0
0000D784                            
0000D784                            loc_D7DC:
0000D784 34C0                       		move.w	d0,(a2)+
0000D786 51C9 FFBE                  		dbf	d1,loc_D79E
0000D78A                            
0000D78A                            locret_D7E2:
0000D78A 4E75                       		rts	
0000D78C                            ; ===========================================================================
0000D78C                            
0000D78C                            loc_D7E4:				; XREF: sub_D750
0000D78C 0C05 0050                  		cmpi.b	#$50,d5
0000D790 6700                       		beq.s	locret_D828
0000D792 1019                       		move.b	(a1)+,d0
0000D794 1811                       		move.b	(a1),d4
0000D796 4880                       		ext.w	d0
0000D798 4440                       		neg.w	d0
0000D79A E70C                       		lsl.b	#3,d4
0000D79C 0244 0018                  		andi.w	#$18,d4
0000D7A0 5044                       		addq.w	#8,d4
0000D7A2 9044                       		sub.w	d4,d0
0000D7A4 D042                       		add.w	d2,d0
0000D7A6 34C0                       		move.w	d0,(a2)+
0000D7A8 14D9                       		move.b	(a1)+,(a2)+
0000D7AA 5205                       		addq.b	#1,d5
0000D7AC 14C5                       		move.b	d5,(a2)+
0000D7AE 1019                       		move.b	(a1)+,d0
0000D7B0 E148                       		lsl.w	#8,d0
0000D7B2 1019                       		move.b	(a1)+,d0
0000D7B4 D04B                       		add.w	a3,d0
0000D7B6 0A40 1000                  		eori.w	#$1000,d0
0000D7BA 34C0                       		move.w	d0,(a2)+
0000D7BC 1019                       		move.b	(a1)+,d0
0000D7BE 4880                       		ext.w	d0
0000D7C0 D043                       		add.w	d3,d0
0000D7C2 0240 01FF                  		andi.w	#$1FF,d0
0000D7C6 6600                       		bne.s	loc_D822
0000D7C8 5240                       		addq.w	#1,d0
0000D7CA                            
0000D7CA                            loc_D822:
0000D7CA 34C0                       		move.w	d0,(a2)+
0000D7CC 51C9 FFBE                  		dbf	d1,loc_D7E4
0000D7D0                            
0000D7D0                            locret_D828:
0000D7D0 4E75                       		rts	
0000D7D2                            ; ===========================================================================
0000D7D2                            
0000D7D2                            loc_D82A:
0000D7D2 0C05 0050                  		cmpi.b	#$50,d5
0000D7D6 6700                       		beq.s	locret_D87C
0000D7D8 1019                       		move.b	(a1)+,d0
0000D7DA 1811                       		move.b	(a1),d4
0000D7DC 4880                       		ext.w	d0
0000D7DE 4440                       		neg.w	d0
0000D7E0 E70C                       		lsl.b	#3,d4
0000D7E2 0244 0018                  		andi.w	#$18,d4
0000D7E6 5044                       		addq.w	#8,d4
0000D7E8 9044                       		sub.w	d4,d0
0000D7EA D042                       		add.w	d2,d0
0000D7EC 34C0                       		move.w	d0,(a2)+
0000D7EE 1819                       		move.b	(a1)+,d4
0000D7F0 14C4                       		move.b	d4,(a2)+
0000D7F2 5205                       		addq.b	#1,d5
0000D7F4 14C5                       		move.b	d5,(a2)+
0000D7F6 1019                       		move.b	(a1)+,d0
0000D7F8 E148                       		lsl.w	#8,d0
0000D7FA 1019                       		move.b	(a1)+,d0
0000D7FC D04B                       		add.w	a3,d0
0000D7FE 0A40 1800                  		eori.w	#$1800,d0
0000D802 34C0                       		move.w	d0,(a2)+
0000D804 1019                       		move.b	(a1)+,d0
0000D806 4880                       		ext.w	d0
0000D808 4440                       		neg.w	d0
0000D80A D804                       		add.b	d4,d4
0000D80C 0244 0018                  		andi.w	#$18,d4
0000D810 5044                       		addq.w	#8,d4
0000D812 9044                       		sub.w	d4,d0
0000D814 D043                       		add.w	d3,d0
0000D816 0240 01FF                  		andi.w	#$1FF,d0
0000D81A 6600                       		bne.s	loc_D876
0000D81C 5240                       		addq.w	#1,d0
0000D81E                            
0000D81E                            loc_D876:
0000D81E 34C0                       		move.w	d0,(a2)+
0000D820 51C9 FFB0                  		dbf	d1,loc_D82A
0000D824                            
0000D824                            locret_D87C:
0000D824 4E75                       		rts	
0000D826                            ; ---------------------------------------------------------------------------
0000D826                            ; Subroutine to	check if an object is on the screen
0000D826                            ; ---------------------------------------------------------------------------
0000D826                            
0000D826                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D826                            
0000D826                            
0000D826                            ChkObjOnScreen:
0000D826 3028 0008                  		move.w	8(a0),d0	; get object x-position
0000D82A 9078 F700                  		sub.w	($FFFFF700).w,d0 ; subtract screen x-position
0000D82E 6B00                       		bmi.s	NotOnScreen
0000D830 0C40 0140                  		cmpi.w	#320,d0		; is object on the screen?
0000D834 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D836                            
0000D836 3228 000C                  		move.w	$C(a0),d1	; get object y-position
0000D83A 9278 F704                  		sub.w	($FFFFF704).w,d1 ; subtract screen y-position
0000D83E 6B00                       		bmi.s	NotOnScreen
0000D840 0C41 00E0                  		cmpi.w	#224,d1		; is object on the screen?
0000D844 6C00                       		bge.s	NotOnScreen	; if not, branch
0000D846                            
0000D846 7000                       		moveq	#0,d0		; set flag to 0
0000D848 4E75                       		rts	
0000D84A                            ; ===========================================================================
0000D84A                            
0000D84A                            NotOnScreen:				; XREF: ChkObjOnScreen
0000D84A 7001                       		moveq	#1,d0		; set flag to 1
0000D84C 4E75                       		rts	
0000D84E                            ; End of function ChkObjOnScreen
0000D84E                            
0000D84E                            
0000D84E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D84E                            
0000D84E                            
0000D84E                            ChkObjOnScreen2:
0000D84E 7200                       		moveq	#0,d1
0000D850 1228 0019                  		move.b	$19(a0),d1
0000D854 3028 0008                  		move.w	8(a0),d0
0000D858 9078 F700                  		sub.w	($FFFFF700).w,d0
0000D85C D041                       		add.w	d1,d0
0000D85E 6B00                       		bmi.s	NotOnScreen2
0000D860 D241                       		add.w	d1,d1
0000D862 9041                       		sub.w	d1,d0
0000D864 0C40 0140                  		cmpi.w	#320,d0
0000D868 6C00                       		bge.s	NotOnScreen2
0000D86A                            
0000D86A 3228 000C                  		move.w	$C(a0),d1
0000D86E 9278 F704                  		sub.w	($FFFFF704).w,d1
0000D872 6B00                       		bmi.s	NotOnScreen2
0000D874 0C41 00E0                  		cmpi.w	#224,d1
0000D878 6C00                       		bge.s	NotOnScreen2
0000D87A                            
0000D87A 7000                       		moveq	#0,d0
0000D87C 4E75                       		rts	
0000D87E                            ; ===========================================================================
0000D87E                            
0000D87E                            NotOnScreen2:				; XREF: ChkObjOnScreen2
0000D87E 7001                       		moveq	#1,d0
0000D880 4E75                       		rts	
0000D882                            ; End of function ChkObjOnScreen2
0000D882                            
0000D882                            ; ---------------------------------------------------------------------------
0000D882                            ; Subroutine to	load a level's objects
0000D882                            ; ---------------------------------------------------------------------------
0000D882                            
0000D882                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000D882                            
0000D882                            
0000D882                            ObjPosLoad:				; XREF: Level; et al
0000D882 7000                       		moveq	#0,d0
0000D884 1038 F76C                  		move.b	($FFFFF76C).w,d0
0000D888 303B 0000                  		move.w	OPL_Index(pc,d0.w),d0
0000D88C 4EFB 0000                  		jmp	OPL_Index(pc,d0.w)
0000D890                            ; End of function ObjPosLoad
0000D890                            
0000D890                            ; ===========================================================================
0000D890 0000                       OPL_Index:	dc.w OPL_Main-OPL_Index
0000D892 0000                       		dc.w OPL_Next-OPL_Index
0000D894                            ; ===========================================================================
0000D894                            
0000D894                            OPL_Main:				; XREF: OPL_Index
0000D894 5438 F76C                  		addq.b	#2,($FFFFF76C).w
0000D898 3038 FE10                  		move.w	($FFFFFE10).w,d0
0000D89C ED08                       		lsl.b	#6,d0
0000D89E E848                       		lsr.w	#4,d0
0000D8A0 41F9 0000 0000             		lea	(ObjPos_Index).l,a0
0000D8A6 2248                       		movea.l	a0,a1
0000D8A8 D0F0 0000                  		adda.w	(a0,d0.w),a0
0000D8AC 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D8B0 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D8B4 D2F1 0002                  		adda.w	2(a1,d0.w),a1
0000D8B8 21C9 F778                  		move.l	a1,($FFFFF778).w
0000D8BC 21C9 F77C                  		move.l	a1,($FFFFF77C).w
0000D8C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D8C4 34FC 0101                  		move.w	#$101,(a2)+
0000D8C8 303C 005E                  		move.w	#$5E,d0
0000D8CC                            
0000D8CC                            OPL_ClrList:
0000D8CC 429A                       		clr.l	(a2)+
0000D8CE 51C8 FFFC                  		dbf	d0,OPL_ClrList	; clear	pre-destroyed object list
0000D8D2                            
0000D8D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D8D6 7400                       		moveq	#0,d2
0000D8D8 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D8DC 0446 0080                  		subi.w	#$80,d6
0000D8E0 6400                       		bcc.s	loc_D93C
0000D8E2 7C00                       		moveq	#0,d6
0000D8E4                            
0000D8E4                            loc_D93C:
0000D8E4 0246 FF80                  		andi.w	#$FF80,d6
0000D8E8 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D8EC                            
0000D8EC                            loc_D944:
0000D8EC BC50                       		cmp.w	(a0),d6
0000D8EE 6300                       		bls.s	loc_D956
0000D8F0 4A28 0004                  		tst.b	4(a0)
0000D8F4 6A00                       		bpl.s	loc_D952
0000D8F6 1412                       		move.b	(a2),d2
0000D8F8 5212                       		addq.b	#1,(a2)
0000D8FA                            
0000D8FA                            loc_D952:
0000D8FA 5C48                       		addq.w	#6,a0
0000D8FC 60EE                       		bra.s	loc_D944
0000D8FE                            ; ===========================================================================
0000D8FE                            
0000D8FE                            loc_D956:
0000D8FE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D902 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D906 0446 0080                  		subi.w	#$80,d6
0000D90A 6500                       		bcs.s	loc_D976
0000D90C                            
0000D90C                            loc_D964:
0000D90C BC50                       		cmp.w	(a0),d6
0000D90E 6300                       		bls.s	loc_D976
0000D910 4A28 0004                  		tst.b	4(a0)
0000D914 6A00                       		bpl.s	loc_D972
0000D916 522A 0001                  		addq.b	#1,1(a2)
0000D91A                            
0000D91A                            loc_D972:
0000D91A 5C48                       		addq.w	#6,a0
0000D91C 60EE                       		bra.s	loc_D964
0000D91E                            ; ===========================================================================
0000D91E                            
0000D91E                            loc_D976:
0000D91E 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D922 31FC FFFF F76E             		move.w	#-1,($FFFFF76E).w
0000D928                            
0000D928                            OPL_Next:				; XREF: OPL_Index
0000D928 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000D92C 7400                       		moveq	#0,d2
0000D92E 3C38 F700                  		move.w	($FFFFF700).w,d6
0000D932 0246 FF80                  		andi.w	#$FF80,d6
0000D936 BC78 F76E                  		cmp.w	($FFFFF76E).w,d6
0000D93A 6700 0000                  		beq.w	locret_DA3A
0000D93E 6C00                       		bge.s	loc_D9F6
0000D940 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000D944 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D948 0446 0080                  		subi.w	#$80,d6
0000D94C 6500                       		bcs.s	loc_D9D2
0000D94E                            
0000D94E                            loc_D9A6:
0000D94E BC68 FFFA                  		cmp.w	-6(a0),d6
0000D952 6C00                       		bge.s	loc_D9D2
0000D954 5D48                       		subq.w	#6,a0
0000D956 4A28 0004                  		tst.b	4(a0)
0000D95A 6A00                       		bpl.s	loc_D9BC
0000D95C 532A 0001                  		subq.b	#1,1(a2)
0000D960 142A 0001                  		move.b	1(a2),d2
0000D964                            
0000D964                            loc_D9BC:
0000D964 6100 0000                  		bsr.w	loc_DA3C
0000D968 6600                       		bne.s	loc_D9C6
0000D96A 5D48                       		subq.w	#6,a0
0000D96C 60E0                       		bra.s	loc_D9A6
0000D96E                            ; ===========================================================================
0000D96E                            
0000D96E                            loc_D9C6:
0000D96E 4A28 0004                  		tst.b	4(a0)
0000D972 6A00                       		bpl.s	loc_D9D0
0000D974 522A 0001                  		addq.b	#1,1(a2)
0000D978                            
0000D978                            loc_D9D0:
0000D978 5C48                       		addq.w	#6,a0
0000D97A                            
0000D97A                            loc_D9D2:
0000D97A 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D97E 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D982 0646 0300                  		addi.w	#$300,d6
0000D986                            
0000D986                            loc_D9DE:
0000D986 BC68 FFFA                  		cmp.w	-6(a0),d6
0000D98A 6E00                       		bgt.s	loc_D9F0
0000D98C 4A28 FFFE                  		tst.b	-2(a0)
0000D990 6A00                       		bpl.s	loc_D9EC
0000D992 5312                       		subq.b	#1,(a2)
0000D994                            
0000D994                            loc_D9EC:
0000D994 5D48                       		subq.w	#6,a0
0000D996 60EE                       		bra.s	loc_D9DE
0000D998                            ; ===========================================================================
0000D998                            
0000D998                            loc_D9F0:
0000D998 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D99C 4E75                       		rts	
0000D99E                            ; ===========================================================================
0000D99E                            
0000D99E                            loc_D9F6:
0000D99E 31C6 F76E                  		move.w	d6,($FFFFF76E).w
0000D9A2 2078 F770                  		movea.l	($FFFFF770).w,a0
0000D9A6 0646 0280                  		addi.w	#$280,d6
0000D9AA                            
0000D9AA                            loc_DA02:
0000D9AA BC50                       		cmp.w	(a0),d6
0000D9AC 6300                       		bls.s	loc_DA16
0000D9AE 4A28 0004                  		tst.b	4(a0)
0000D9B2 6A00                       		bpl.s	loc_DA10
0000D9B4 1412                       		move.b	(a2),d2
0000D9B6 5212                       		addq.b	#1,(a2)
0000D9B8                            
0000D9B8                            loc_DA10:
0000D9B8 6100 0000                  		bsr.w	loc_DA3C
0000D9BC 67EC                       		beq.s	loc_DA02
0000D9BE                            
0000D9BE                            loc_DA16:
0000D9BE 21C8 F770                  		move.l	a0,($FFFFF770).w
0000D9C2 2078 F774                  		movea.l	($FFFFF774).w,a0
0000D9C6 0446 0300                  		subi.w	#$300,d6
0000D9CA 6500                       		bcs.s	loc_DA36
0000D9CC                            
0000D9CC                            loc_DA24:
0000D9CC BC50                       		cmp.w	(a0),d6
0000D9CE 6300                       		bls.s	loc_DA36
0000D9D0 4A28 0004                  		tst.b	4(a0)
0000D9D4 6A00                       		bpl.s	loc_DA32
0000D9D6 522A 0001                  		addq.b	#1,1(a2)
0000D9DA                            
0000D9DA                            loc_DA32:
0000D9DA 5C48                       		addq.w	#6,a0
0000D9DC 60EE                       		bra.s	loc_DA24
0000D9DE                            ; ===========================================================================
0000D9DE                            
0000D9DE                            loc_DA36:
0000D9DE 21C8 F774                  		move.l	a0,($FFFFF774).w
0000D9E2                            
0000D9E2                            locret_DA3A:
0000D9E2 4E75                       		rts	
0000D9E4                            ; ===========================================================================
0000D9E4                            
0000D9E4                            loc_DA3C:
0000D9E4 4A28 0004                  		tst.b	4(a0)
0000D9E8 6A00                       		bpl.s	OPL_MakeItem
0000D9EA 08F2 0007 2002             		bset	#7,2(a2,d2.w)
0000D9F0 6700                       		beq.s	OPL_MakeItem
0000D9F2 5C48                       		addq.w	#6,a0
0000D9F4 7000                       		moveq	#0,d0
0000D9F6 4E75                       		rts	
0000D9F8                            ; ===========================================================================
0000D9F8                            
0000D9F8                            OPL_MakeItem:
0000D9F8 6100 0000                  		bsr.w	SingleObjLoad
0000D9FC 6600                       		bne.s	locret_DA8A
0000D9FE 3358 0008                  		move.w	(a0)+,8(a1)
0000DA02 3018                       		move.w	(a0)+,d0
0000DA04 3200                       		move.w	d0,d1
0000DA06 0240 0FFF                  		andi.w	#$FFF,d0
0000DA0A 3340 000C                  		move.w	d0,$C(a1)
0000DA0E E559                       		rol.w	#2,d1
0000DA10 0201 0003                  		andi.b	#3,d1
0000DA14 1341 0001                  		move.b	d1,1(a1)
0000DA18 1341 0022                  		move.b	d1,$22(a1)
0000DA1C 1018                       		move.b	(a0)+,d0
0000DA1E 6A00                       		bpl.s	loc_DA80
0000DA20 0200 007F                  		andi.b	#$7F,d0
0000DA24 1342 0023                  		move.b	d2,$23(a1)
0000DA28                            
0000DA28                            loc_DA80:
0000DA28 1280                       		move.b	d0,0(a1)
0000DA2A 1358 0028                  		move.b	(a0)+,$28(a1)
0000DA2E 7000                       		moveq	#0,d0
0000DA30                            
0000DA30                            locret_DA8A:
0000DA30 4E75                       		rts	
0000DA32                            ; ---------------------------------------------------------------------------
0000DA32                            ; Single object	loading	subroutine
0000DA32                            ; ---------------------------------------------------------------------------
0000DA32                            
0000DA32                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA32                            
0000DA32                            
0000DA32                            SingleObjLoad:
0000DA32 43F8 D800                  		lea	($FFFFD800).w,a1 ; start address for object RAM
0000DA36 303C 005F                  		move.w	#$5F,d0
0000DA3A                            
0000DA3A                            loc_DA94:
0000DA3A 4A11                       		tst.b	(a1)		; is object RAM	slot empty?
0000DA3C 6700                       		beq.s	locret_DAA0	; if yes, branch
0000DA3E 43E9 0040                  		lea	$40(a1),a1	; goto next object RAM slot
0000DA42 51C8 FFF6                  		dbf	d0,loc_DA94	; repeat $5F times
0000DA46                            
0000DA46                            locret_DAA0:
0000DA46 4E75                       		rts	
0000DA48                            ; End of function SingleObjLoad
0000DA48                            
0000DA48                            
0000DA48                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000DA48                            
0000DA48                            
0000DA48                            SingleObjLoad2:
0000DA48 2248                       		movea.l	a0,a1
0000DA4A 303C F000                  		move.w	#-$1000,d0
0000DA4E 9048                       		sub.w	a0,d0
0000DA50 EC48                       		lsr.w	#6,d0
0000DA52 5340                       		subq.w	#1,d0
0000DA54 6500                       		bcs.s	locret_DABC
0000DA56                            
0000DA56                            loc_DAB0:
0000DA56 4A11                       		tst.b	(a1)
0000DA58 6700                       		beq.s	locret_DABC
0000DA5A 43E9 0040                  		lea	$40(a1),a1
0000DA5E 51C8 FFF6                  		dbf	d0,loc_DAB0
0000DA62                            
0000DA62                            locret_DABC:
0000DA62 4E75                       		rts	
0000DA64                            ; End of function SingleObjLoad2
0000DA64                            
0000DA64                            ; ===========================================================================
0000DA64                            ; ---------------------------------------------------------------------------
0000DA64                            ; Object 41 - springs
0000DA64                            ; ---------------------------------------------------------------------------
0000DA64                            
0000DA64                            Obj41:					; XREF: Obj_Index
0000DA64 7000                       		moveq	#0,d0
0000DA66 1028 0024                  		move.b	$24(a0),d0
0000DA6A 323B 0000                  		move.w	Obj41_Index(pc,d0.w),d1
0000DA6E 4EBB 1000                  		jsr	Obj41_Index(pc,d1.w)
0000DA72 6100 FB38                  		bsr.w	DisplaySprite
0000DA76 3028 0008                  		move.w	8(a0),d0
0000DA7A 0240 FF80                  		andi.w	#$FF80,d0
0000DA7E 3238 F700                  		move.w	($FFFFF700).w,d1
0000DA82 0441 0080                  		subi.w	#$80,d1
0000DA86 0241 FF80                  		andi.w	#$FF80,d1
0000DA8A 9041                       		sub.w	d1,d0
0000DA8C 0C40 0280                  		cmpi.w	#$280,d0
0000DA90 6200 FB56                  		bhi.w	DeleteObject
0000DA94 4E75                       		rts	
0000DA96                            ; ===========================================================================
0000DA96 0000                       Obj41_Index:	dc.w Obj41_Main-Obj41_Index
0000DA98 0000                       		dc.w Obj41_Up-Obj41_Index
0000DA9A 0000                       		dc.w Obj41_AniUp-Obj41_Index
0000DA9C 0000                       		dc.w Obj41_ResetUp-Obj41_Index
0000DA9E 0000                       		dc.w Obj41_LR-Obj41_Index
0000DAA0 0000                       		dc.w Obj41_AniLR-Obj41_Index
0000DAA2 0000                       		dc.w Obj41_ResetLR-Obj41_Index
0000DAA4 0000                       		dc.w Obj41_Dwn-Obj41_Index
0000DAA6 0000                       		dc.w Obj41_AniDwn-Obj41_Index
0000DAA8 0000                       		dc.w Obj41_ResetDwn-Obj41_Index
0000DAAA                            
0000DAAA F000                       Obj41_Powers:	dc.w -$1000		; power	of red spring
0000DAAC F600                       		dc.w -$A00		; power	of yellow spring
0000DAAE                            ; ===========================================================================
0000DAAE                            
0000DAAE                            Obj41_Main:				; XREF: Obj41_Index
0000DAAE 5428 0024                  		addq.b	#2,$24(a0)
0000DAB2 217C 0000 0000 0004        		move.l	#Map_obj41,4(a0)
0000DABA 317C 0523 0002             		move.w	#$523,2(a0)
0000DAC0 0028 0004 0001             		ori.b	#4,1(a0)
0000DAC6 117C 0010 0019             		move.b	#$10,$19(a0)
0000DACC 117C 0004 0018             		move.b	#4,$18(a0)
0000DAD2 1028 0028                  		move.b	$28(a0),d0
0000DAD6 0800 0004                  		btst	#4,d0		; does the spring face left/right?
0000DADA 6700                       		beq.s	loc_DB54	; if not, branch
0000DADC 117C 0008 0024             		move.b	#8,$24(a0)	; use "Obj41_LR" routine
0000DAE2 117C 0001 001C             		move.b	#1,$1C(a0)
0000DAE8 117C 0003 001A             		move.b	#3,$1A(a0)
0000DAEE 317C 0533 0002             		move.w	#$533,2(a0)
0000DAF4 117C 0008 0019             		move.b	#8,$19(a0)
0000DAFA                            
0000DAFA                            loc_DB54:
0000DAFA 0800 0005                  		btst	#5,d0		; does the spring face downwards?
0000DAFE 6700                       		beq.s	loc_DB66	; if not, branch
0000DB00 117C 000E 0024             		move.b	#$E,$24(a0)	; use "Obj41_Dwn" routine
0000DB06 08E8 0001 0022             		bset	#1,$22(a0)
0000DB0C                            
0000DB0C                            loc_DB66:
0000DB0C 0800 0001                  		btst	#1,d0
0000DB10 6700                       		beq.s	loc_DB72
0000DB12 08E8 0005 0002             		bset	#5,2(a0)
0000DB18                            
0000DB18                            loc_DB72:
0000DB18 0240 000F                  		andi.w	#$F,d0
0000DB1C 317B 008C 0030             		move.w	Obj41_Powers(pc,d0.w),$30(a0)
0000DB22 4E75                       		rts	
0000DB24                            ; ===========================================================================
0000DB24                            
0000DB24                            Obj41_Up:				; XREF: Obj41_Index
0000DB24 323C 001B                  		move.w	#$1B,d1
0000DB28 343C 0008                  		move.w	#8,d2
0000DB2C 363C 0010                  		move.w	#$10,d3
0000DB30 3828 0008                  		move.w	8(a0),d4
0000DB34 6100 0000                  		bsr.w	SolidObject
0000DB38 4A28 0025                  		tst.b	$25(a0)		; is Sonic on top of the spring?
0000DB3C 6600                       		bne.s	Obj41_BounceUp	; if yes, branch
0000DB3E 4E75                       		rts	
0000DB40                            ; ===========================================================================
0000DB40                            
0000DB40                            Obj41_BounceUp:				; XREF: Obj41_Up
0000DB40 5428 0024                  		addq.b	#2,$24(a0)
0000DB44 5069 000C                  		addq.w	#8,$C(a1)
0000DB48 3368 0030 0012             		move.w	$30(a0),$12(a1)	; move Sonic upwards
0000DB4E 08E9 0001 0022             		bset	#1,$22(a1)
0000DB54 08A9 0003 0022             		bclr	#3,$22(a1)
0000DB5A 137C 0010 001C             		move.b	#$10,$1C(a1)	; use "bouncing" animation
0000DB60 137C 0002 0024             		move.b	#2,$24(a1)
0000DB66 08A8 0003 0022             		bclr	#3,$22(a0)
0000DB6C 4228 0025                  		clr.b	$25(a0)
0000DB70 303C 00CC                  		move.w	#$CC,d0
0000DB74 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DB7A                            
0000DB7A                            Obj41_AniUp:				; XREF: Obj41_Index
0000DB7A 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DB80 6000 CB56                  		bra.w	AnimateSprite
0000DB84                            ; ===========================================================================
0000DB84                            
0000DB84                            Obj41_ResetUp:				; XREF: Obj41_Index
0000DB84 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DB8A 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Up" routine
0000DB8E 4E75                       		rts	
0000DB90                            ; ===========================================================================
0000DB90                            
0000DB90                            Obj41_LR:				; XREF: Obj41_Index
0000DB90 323C 0013                  		move.w	#$13,d1
0000DB94 343C 000E                  		move.w	#$E,d2
0000DB98 363C 000F                  		move.w	#$F,d3
0000DB9C 3828 0008                  		move.w	8(a0),d4
0000DBA0 6100 0000                  		bsr.w	SolidObject
0000DBA4 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DBAA 6600                       		bne.s	loc_DC0C
0000DBAC 117C 0008 0024             		move.b	#8,$24(a0)
0000DBB2                            
0000DBB2                            loc_DC0C:
0000DBB2 0828 0005 0022             		btst	#5,$22(a0)
0000DBB8 6600                       		bne.s	Obj41_BounceLR
0000DBBA 4E75                       		rts	
0000DBBC                            ; ===========================================================================
0000DBBC                            
0000DBBC                            Obj41_BounceLR:				; XREF: Obj41_LR
0000DBBC 5428 0024                  		addq.b	#2,$24(a0)
0000DBC0 3368 0030 0010             		move.w	$30(a0),$10(a1)	; move Sonic to	the left
0000DBC6 5069 0008                  		addq.w	#8,8(a1)
0000DBCA 0828 0000 0022             		btst	#0,$22(a0)	; is object flipped?
0000DBD0 6600                       		bne.s	loc_DC36	; if yes, branch
0000DBD2 0469 0010 0008             		subi.w	#$10,8(a1)
0000DBD8 4469 0010                  		neg.w	$10(a1)		; move Sonic to	the right
0000DBDC                            
0000DBDC                            loc_DC36:
0000DBDC 337C 000F 003E             		move.w	#$F,$3E(a1)
0000DBE2 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000DBE8 0869 0000 0022             		bchg	#0,$22(a1)
0000DBEE 0829 0002 0022             		btst	#2,$22(a1)
0000DBF4 6600                       		bne.s	loc_DC56
0000DBF6 137C 0000 001C             		move.b	#0,$1C(a1)	; use running animation
0000DBFC                            
0000DBFC                            loc_DC56:
0000DBFC 08A8 0005 0022             		bclr	#5,$22(a0)
0000DC02 08A9 0005 0022             		bclr	#5,$22(a1)
0000DC08 303C 00CC                  		move.w	#$CC,d0
0000DC0C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DC12                            
0000DC12                            Obj41_AniLR:				; XREF: Obj41_Index
0000DC12 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DC18 6000 CABE                  		bra.w	AnimateSprite
0000DC1C                            ; ===========================================================================
0000DC1C                            
0000DC1C                            Obj41_ResetLR:				; XREF: Obj41_Index
0000DC1C 117C 0002 001D             		move.b	#2,$1D(a0)	; reset	animation
0000DC22 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_LR" routine
0000DC26 4E75                       		rts	
0000DC28                            ; ===========================================================================
0000DC28                            
0000DC28                            Obj41_Dwn:				; XREF: Obj41_Index
0000DC28 323C 001B                  		move.w	#$1B,d1
0000DC2C 343C 0008                  		move.w	#8,d2
0000DC30 363C 0010                  		move.w	#$10,d3
0000DC34 3828 0008                  		move.w	8(a0),d4
0000DC38 6100 0000                  		bsr.w	SolidObject
0000DC3C 0C28 0002 0024             		cmpi.b	#2,$24(a0)
0000DC42 6600                       		bne.s	loc_DCA4
0000DC44 117C 000E 0024             		move.b	#$E,$24(a0)
0000DC4A                            
0000DC4A                            loc_DCA4:
0000DC4A 4A28 0025                  		tst.b	$25(a0)
0000DC4E 6600                       		bne.s	locret_DCAE
0000DC50 4A44                       		tst.w	d4
0000DC52 6B00                       		bmi.s	Obj41_BounceDwn
0000DC54                            
0000DC54                            locret_DCAE:
0000DC54 4E75                       		rts	
0000DC56                            ; ===========================================================================
0000DC56                            
0000DC56                            Obj41_BounceDwn:			; XREF: Obj41_Dwn
0000DC56 5428 0024                  		addq.b	#2,$24(a0)
0000DC5A 5169 000C                  		subq.w	#8,$C(a1)
0000DC5E 3368 0030 0012             		move.w	$30(a0),$12(a1)
0000DC64 4469 0012                  		neg.w	$12(a1)		; move Sonic downwards
0000DC68 08E9 0001 0022             		bset	#1,$22(a1)
0000DC6E 08A9 0003 0022             		bclr	#3,$22(a1)
0000DC74 137C 0002 0024             		move.b	#2,$24(a1)
0000DC7A 08A8 0003 0022             		bclr	#3,$22(a0)
0000DC80 4228 0025                  		clr.b	$25(a0)
0000DC84 303C 00CC                  		move.w	#$CC,d0
0000DC88 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
0000DC8E                            
0000DC8E                            Obj41_AniDwn:				; XREF: Obj41_Index
0000DC8E 43F9 0000 0000             		lea	(Ani_obj41).l,a1
0000DC94 6000 CA42                  		bra.w	AnimateSprite
0000DC98                            ; ===========================================================================
0000DC98                            
0000DC98                            Obj41_ResetDwn:				; XREF: Obj41_Index
0000DC98 117C 0001 001D             		move.b	#1,$1D(a0)	; reset	animation
0000DC9E 5928 0024                  		subq.b	#4,$24(a0)	; goto "Obj41_Dwn" routine
0000DCA2 4E75                       		rts	
0000DCA4                            ; ===========================================================================
0000DCA4                            Ani_obj41:
0000DCA4                            	include "_anim\obj41.asm"
0000DCA4                            ; ---------------------------------------------------------------------------
0000DCA4                            ; Animation script - springs
0000DCA4                            ; ---------------------------------------------------------------------------
0000DCA4 0000                       		dc.w byte_DD02-Ani_obj41
0000DCA6 0000                       		dc.w byte_DD0E-Ani_obj41
0000DCA8 0001 0000 0202 0202 0202+  byte_DD02:	dc.b 0,	1, 0, 0, 2, 2, 2, 2, 2,	2, 0, $FC
0000DCB4 0004 0303 0505 0505 0505+  byte_DD0E:	dc.b 0,	4, 3, 3, 5, 5, 5, 5, 5,	5, 3, $FC
0000DCC0                            		even
0000DCC0                            		even
0000DCC0                            
0000DCC0                            ; ---------------------------------------------------------------------------
0000DCC0                            ; Sprite mappings - springs
0000DCC0                            ; ---------------------------------------------------------------------------
0000DCC0                            Map_obj41:
0000DCC0                            	include "_maps\obj41.asm"
0000DCC0                            ; ---------------------------------------------------------------------------
0000DCC0                            ; Sprite mappings - springs
0000DCC0                            ; ---------------------------------------------------------------------------
0000DCC0 0000                       		dc.w byte_DD26-Map_obj41
0000DCC2 0000                       		dc.w byte_DD31-Map_obj41
0000DCC4 0000                       		dc.w byte_DD37-Map_obj41
0000DCC6 0000                       		dc.w byte_DD47-Map_obj41
0000DCC8 0000                       		dc.w byte_DD4D-Map_obj41
0000DCCA 0000                       		dc.w byte_DD53-Map_obj41
0000DCCC 02                         byte_DD26:	dc.b 2
0000DCCD F80C 0000 F0               		dc.b $F8, $C, 0, 0, $F0
0000DCD2 000C 0004 F0               		dc.b 0,	$C, 0, 4, $F0
0000DCD7 01                         byte_DD31:	dc.b 1
0000DCD8 000C 0000 F0               		dc.b 0,	$C, 0, 0, $F0
0000DCDD 03                         byte_DD37:	dc.b 3
0000DCDE E80C 0000 F0               		dc.b $E8, $C, 0, 0, $F0
0000DCE3 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000DCE8 000C 000C F0               		dc.b 0,	$C, 0, $C, $F0
0000DCED 01                         byte_DD47:	dc.b 1
0000DCEE F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
0000DCF3 01                         byte_DD4D:	dc.b 1
0000DCF4 F003 0004 F8               		dc.b $F0, 3, 0,	4, $F8
0000DCF9 04                         byte_DD53:	dc.b 4
0000DCFA F003 0004 10               		dc.b $F0, 3, 0,	4, $10
0000DCFF F809 0008 F8               		dc.b $F8, 9, 0,	8, $F8
0000DD04 F000 0000 F8               		dc.b $F0, 0, 0,	0, $F8
0000DD09 0800 0003 F8               		dc.b 8,	0, 0, 3, $F8
0000DD0E                            		even
0000DD0E                            		even
0000DD0E                            
0000DD0E                            ; ===========================================================================
0000DD0E                            ; ---------------------------------------------------------------------------
0000DD0E                            ; Object 42 - Newtron enemy (GHZ)
0000DD0E                            ; ---------------------------------------------------------------------------
0000DD0E                            
0000DD0E                            Obj42:					; XREF: Obj_Index
0000DD0E 7000                       		moveq	#0,d0
0000DD10 1028 0024                  		move.b	$24(a0),d0
0000DD14 323B 0000                  		move.w	Obj42_Index(pc,d0.w),d1
0000DD18 4EFB 1000                  		jmp	Obj42_Index(pc,d1.w)
0000DD1C                            ; ===========================================================================
0000DD1C 0000                       Obj42_Index:	dc.w Obj42_Main-Obj42_Index
0000DD1E 0000                       		dc.w Obj42_Action-Obj42_Index
0000DD20 0000                       		dc.w Obj42_Delete-Obj42_Index
0000DD22                            ; ===========================================================================
0000DD22                            
0000DD22                            Obj42_Main:				; XREF: Obj42_Index
0000DD22 5428 0024                  		addq.b	#2,$24(a0)
0000DD26 217C 0000 0000 0004        		move.l	#Map_obj42,4(a0)
0000DD2E 317C 049B 0002             		move.w	#$49B,2(a0)
0000DD34 117C 0004 0001             		move.b	#4,1(a0)
0000DD3A 117C 0004 0018             		move.b	#4,$18(a0)
0000DD40 117C 0014 0019             		move.b	#$14,$19(a0)
0000DD46 117C 0010 0016             		move.b	#$10,$16(a0)
0000DD4C 117C 0008 0017             		move.b	#8,$17(a0)
0000DD52                            
0000DD52                            Obj42_Action:				; XREF: Obj42_Index
0000DD52 7000                       		moveq	#0,d0
0000DD54 1028 0025                  		move.b	$25(a0),d0
0000DD58 323B 0000                  		move.w	Obj42_Index2(pc,d0.w),d1
0000DD5C 4EBB 1000                  		jsr	Obj42_Index2(pc,d1.w)
0000DD60 43F9 0000 0000             		lea	(Ani_obj42).l,a1
0000DD66 6100 C970                  		bsr.w	AnimateSprite
0000DD6A 6000 0000                  		bra.w	MarkObjGone
0000DD6E                            ; ===========================================================================
0000DD6E 0000                       Obj42_Index2:	dc.w Obj42_ChkDist-Obj42_Index2
0000DD70 0000                       		dc.w Obj42_Type00-Obj42_Index2
0000DD72 0000                       		dc.w Obj42_MatchFloor-Obj42_Index2
0000DD74 0000                       		dc.w Obj42_Speed-Obj42_Index2
0000DD76 0000                       		dc.w Obj42_Type01-Obj42_Index2
0000DD78                            ; ===========================================================================
0000DD78                            
0000DD78                            Obj42_ChkDist:				; XREF: Obj42_Index2
0000DD78 08E8 0000 0022             		bset	#0,$22(a0)
0000DD7E 3038 D008                  		move.w	($FFFFD008).w,d0
0000DD82 9068 0008                  		sub.w	8(a0),d0
0000DD86 6400                       		bcc.s	loc_DDEA
0000DD88 4440                       		neg.w	d0
0000DD8A 08A8 0000 0022             		bclr	#0,$22(a0)
0000DD90                            
0000DD90                            loc_DDEA:
0000DD90 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	the newtron?
0000DD94 6400                       		bcc.s	locret_DE12	; if not, branch
0000DD96 5428 0025                  		addq.b	#2,$25(a0)
0000DD9A 117C 0001 001C             		move.b	#1,$1C(a0)
0000DDA0 4A28 0028                  		tst.b	$28(a0)		; check	object type
0000DDA4 6700                       		beq.s	locret_DE12	; if type is 00, branch
0000DDA6 317C 249B 0002             		move.w	#$249B,2(a0)
0000DDAC 117C 0008 0025             		move.b	#8,$25(a0)	; run type 01 newtron subroutine
0000DDB2 117C 0004 001C             		move.b	#4,$1C(a0)	; use different	animation
0000DDB8                            
0000DDB8                            locret_DE12:
0000DDB8 4E75                       		rts	
0000DDBA                            ; ===========================================================================
0000DDBA                            
0000DDBA                            Obj42_Type00:				; XREF: Obj42_Index2
0000DDBA 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; has "appearing" animation finished?
0000DDC0 6400                       		bcc.s	Obj42_Fall	; is yes, branch
0000DDC2 08E8 0000 0022             		bset	#0,$22(a0)
0000DDC8 3038 D008                  		move.w	($FFFFD008).w,d0
0000DDCC 9068 0008                  		sub.w	8(a0),d0
0000DDD0 6400                       		bcc.s	locret_DE32
0000DDD2 08A8 0000 0022             		bclr	#0,$22(a0)
0000DDD8                            
0000DDD8                            locret_DE32:
0000DDD8 4E75                       		rts	
0000DDDA                            ; ===========================================================================
0000DDDA                            
0000DDDA                            Obj42_Fall:				; XREF: Obj42_Type00
0000DDDA 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DDE0 6600                       		bne.s	loc_DE42
0000DDE2 117C 000C 0020             		move.b	#$C,$20(a0)
0000DDE8                            
0000DDE8                            loc_DE42:
0000DDE8 6100 F770                  		bsr.w	ObjectFall
0000DDEC 6100 0000                  		bsr.w	ObjHitFloor
0000DDF0 4A41                       		tst.w	d1		; has newtron hit the floor?
0000DDF2 6A00                       		bpl.s	locret_DE86	; if not, branch
0000DDF4 D368 000C                  		add.w	d1,$C(a0)
0000DDF8 317C 0000 0012             		move.w	#0,$12(a0)	; stop newtron falling
0000DDFE 5428 0025                  		addq.b	#2,$25(a0)
0000DE02 117C 0002 001C             		move.b	#2,$1C(a0)
0000DE08 0828 0005 0002             		btst	#5,2(a0)
0000DE0E 6700                       		beq.s	Obj42_Move
0000DE10 5228 001C                  		addq.b	#1,$1C(a0)
0000DE14                            
0000DE14                            Obj42_Move:
0000DE14 117C 000D 0020             		move.b	#$D,$20(a0)
0000DE1A 317C 0200 0010             		move.w	#$200,$10(a0)	; move newtron horizontally
0000DE20 0828 0000 0022             		btst	#0,$22(a0)
0000DE26 6600                       		bne.s	locret_DE86
0000DE28 4468 0010                  		neg.w	$10(a0)
0000DE2C                            
0000DE2C                            locret_DE86:
0000DE2C 4E75                       		rts	
0000DE2E                            ; ===========================================================================
0000DE2E                            
0000DE2E                            Obj42_MatchFloor:			; XREF: Obj42_Index2
0000DE2E 6100 F756                  		bsr.w	SpeedToPos
0000DE32 6100 0000                  		bsr.w	ObjHitFloor
0000DE36 0C41 FFF8                  		cmpi.w	#-8,d1
0000DE3A 6D00                       		blt.s	loc_DEA2
0000DE3C 0C41 000C                  		cmpi.w	#$C,d1
0000DE40 6C00                       		bge.s	loc_DEA2
0000DE42 D368 000C                  		add.w	d1,$C(a0)	; match	newtron's position with floor
0000DE46 4E75                       		rts	
0000DE48                            ; ===========================================================================
0000DE48                            
0000DE48                            loc_DEA2:
0000DE48 5428 0025                  		addq.b	#2,$25(a0)
0000DE4C 4E75                       		rts	
0000DE4E                            ; ===========================================================================
0000DE4E                            
0000DE4E                            Obj42_Speed:				; XREF: Obj42_Index2
0000DE4E 6100 F736                  		bsr.w	SpeedToPos
0000DE52 4E75                       		rts	
0000DE54                            ; ===========================================================================
0000DE54                            
0000DE54                            Obj42_Type01:				; XREF: Obj42_Index2
0000DE54 0C28 0001 001A             		cmpi.b	#1,$1A(a0)
0000DE5A 6600                       		bne.s	Obj42_FireMissile
0000DE5C 117C 000C 0020             		move.b	#$C,$20(a0)
0000DE62                            
0000DE62                            Obj42_FireMissile:
0000DE62 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0000DE68 6600                       		bne.s	locret_DF14
0000DE6A 4A28 0032                  		tst.b	$32(a0)
0000DE6E 6600                       		bne.s	locret_DF14
0000DE70 117C 0001 0032             		move.b	#1,$32(a0)
0000DE76 6100 FBBA                  		bsr.w	SingleObjLoad
0000DE7A 6600                       		bne.s	locret_DF14
0000DE7C 12BC 0023                  		move.b	#$23,0(a1)	; load missile object
0000DE80 3368 0008 0008             		move.w	8(a0),8(a1)
0000DE86 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000DE8C 5169 000C                  		subq.w	#8,$C(a1)
0000DE90 337C 0200 0010             		move.w	#$200,$10(a1)
0000DE96 303C 0014                  		move.w	#$14,d0
0000DE9A 0828 0000 0022             		btst	#0,$22(a0)
0000DEA0 6600                       		bne.s	loc_DF04
0000DEA2 4440                       		neg.w	d0
0000DEA4 4469 0010                  		neg.w	$10(a1)
0000DEA8                            
0000DEA8                            loc_DF04:
0000DEA8 D169 0008                  		add.w	d0,8(a1)
0000DEAC 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000DEB2 137C 0001 0028             		move.b	#1,$28(a1)
0000DEB8                            
0000DEB8                            locret_DF14:
0000DEB8 4E75                       		rts	
0000DEBA                            ; ===========================================================================
0000DEBA                            
0000DEBA                            Obj42_Delete:				; XREF: Obj42_Index
0000DEBA 6000 F72C                  		bra.w	DeleteObject
0000DEBE                            ; ===========================================================================
0000DEBE                            Ani_obj42:
0000DEBE                            	include "_anim\obj42.asm"
0000DEBE                            ; ---------------------------------------------------------------------------
0000DEBE                            ; Animation script - Newtron enemy
0000DEBE                            ; ---------------------------------------------------------------------------
0000DEBE 0000                       		dc.w byte_DF24-Ani_obj42
0000DEC0 0000                       		dc.w byte_DF28-Ani_obj42
0000DEC2 0000                       		dc.w byte_DF30-Ani_obj42
0000DEC4 0000                       		dc.w byte_DF34-Ani_obj42
0000DEC6 0000                       		dc.w byte_DF38-Ani_obj42
0000DEC8 0F0A FF00                  byte_DF24:	dc.b $F, $A, $FF, 0
0000DECC 1300 0103 0405 FE01        byte_DF28:	dc.b $13, 0, 1,	3, 4, 5, $FE, 1
0000DED4 0206 07FF                  byte_DF30:	dc.b 2,	6, 7, $FF
0000DED8 0208 09FF                  byte_DF34:	dc.b 2,	8, 9, $FF
0000DEDC 1300 0101 0201 0100 FC00   byte_DF38:	dc.b $13, 0, 1,	1, 2, 1, 1, 0, $FC, 0
0000DEE6                            		even
0000DEE6                            		even
0000DEE6                            
0000DEE6                            ; ---------------------------------------------------------------------------
0000DEE6                            ; Sprite mappings - Newtron enemy (GHZ)
0000DEE6                            ; ---------------------------------------------------------------------------
0000DEE6                            Map_obj42:
0000DEE6                            	include "_maps\obj42.asm"
0000DEE6                            ; ---------------------------------------------------------------------------
0000DEE6                            ; Sprite mappings - Newtron enemy (GHZ)
0000DEE6                            ; ---------------------------------------------------------------------------
0000DEE6 0000 0000                  		dc.w byte_DF58-Map_obj42, byte_DF68-Map_obj42
0000DEEA 0000 0000                  		dc.w byte_DF78-Map_obj42, byte_DF88-Map_obj42
0000DEEE 0000 0000                  		dc.w byte_DF9D-Map_obj42, byte_DFAD-Map_obj42
0000DEF2 0000 0000                  		dc.w byte_DFB8-Map_obj42, byte_DFC8-Map_obj42
0000DEF6 0000 0000                  		dc.w byte_DFD8-Map_obj42, byte_DFE8-Map_obj42
0000DEFA 0000                       		dc.w byte_DFF8-Map_obj42
0000DEFC 03                         byte_DF58:	dc.b 3
0000DEFD EC0D 0000 EC               		dc.b $EC, $D, 0, 0, $EC
0000DF02 F400 0008 0C               		dc.b $F4, 0, 0,	8, $C
0000DF07 FC0E 0009 F4               		dc.b $FC, $E, 0, 9, $F4
0000DF0C 03                         byte_DF68:	dc.b 3
0000DF0D EC06 0015 EC               		dc.b $EC, 6, 0,	$15, $EC
0000DF12 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DF17 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000DF1C 03                         byte_DF78:	dc.b 3
0000DF1D EC06 002A EC               		dc.b $EC, 6, 0,	$2A, $EC
0000DF22 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DF27 FC0A 0021 FC               		dc.b $FC, $A, 0, $21, $FC
0000DF2C 04                         byte_DF88:	dc.b 4
0000DF2D EC06 0030 EC               		dc.b $EC, 6, 0,	$30, $EC
0000DF32 EC09 001B FC               		dc.b $EC, 9, 0,	$1B, $FC
0000DF37 FC09 0036 FC               		dc.b $FC, 9, 0,	$36, $FC
0000DF3C 0C00 003C 0C               		dc.b $C, 0, 0, $3C, $C
0000DF41 03                         byte_DF9D:	dc.b 3
0000DF42 F40D 003D EC               		dc.b $F4, $D, 0, $3D, $EC
0000DF47 FC00 0020 0C               		dc.b $FC, 0, 0,	$20, $C
0000DF4C 0408 0045 FC               		dc.b 4,	8, 0, $45, $FC
0000DF51 02                         byte_DFAD:	dc.b 2
0000DF52 F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF57 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF5C 03                         byte_DFB8:	dc.b 3
0000DF5D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF62 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF67 FE00 0052 14               		dc.b $FE, 0, 0,	$52, $14
0000DF6C 03                         byte_DFC8:	dc.b 3
0000DF6D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF72 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF77 FE04 0053 14               		dc.b $FE, 4, 0,	$53, $14
0000DF7C 03                         byte_DFD8:	dc.b 3
0000DF7D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF82 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF87 FE00 E052 14               		dc.b $FE, 0, $E0, $52, $14
0000DF8C 03                         byte_DFE8:	dc.b 3
0000DF8D F80D 0048 EC               		dc.b $F8, $D, 0, $48, $EC
0000DF92 F801 0050 0C               		dc.b $F8, 1, 0,	$50, $C
0000DF97 FE04 E053 14               		dc.b $FE, 4, $E0, $53, $14
0000DF9C 00                         byte_DFF8:	dc.b 0
0000DF9E 00                         		even
0000DF9E 00                         		even
0000DF9E                            
0000DF9E                            ; ===========================================================================
0000DF9E                            ; ---------------------------------------------------------------------------
0000DF9E                            ; Object 43 - Roller enemy (SYZ)
0000DF9E                            ; ---------------------------------------------------------------------------
0000DF9E                            
0000DF9E                            Obj43:					; XREF: Obj_Index
0000DF9E 7000                       		moveq	#0,d0
0000DFA0 1028 0024                  		move.b	$24(a0),d0
0000DFA4 323B 0000                  		move.w	Obj43_Index(pc,d0.w),d1
0000DFA8 4EFB 1000                  		jmp	Obj43_Index(pc,d1.w)
0000DFAC                            ; ===========================================================================
0000DFAC 0000                       Obj43_Index:	dc.w Obj43_Main-Obj43_Index
0000DFAE 0000                       		dc.w Obj43_Action-Obj43_Index
0000DFB0                            ; ===========================================================================
0000DFB0                            
0000DFB0                            Obj43_Main:				; XREF: Obj43_Index
0000DFB0 117C 000E 0016             		move.b	#$E,$16(a0)
0000DFB6 117C 0008 0017             		move.b	#8,$17(a0)
0000DFBC 6100 F59C                  		bsr.w	ObjectFall
0000DFC0 6100 0000                  		bsr.w	ObjHitFloor
0000DFC4 4A41                       		tst.w	d1
0000DFC6 6A00                       		bpl.s	locret_E052
0000DFC8 D368 000C                  		add.w	d1,$C(a0)	; match	roller's position with the floor
0000DFCC 317C 0000 0012             		move.w	#0,$12(a0)
0000DFD2 5428 0024                  		addq.b	#2,$24(a0)
0000DFD6 217C 0000 0000 0004        		move.l	#Map_obj43,4(a0)
0000DFDE 317C 04B8 0002             		move.w	#$4B8,2(a0)
0000DFE4 117C 0004 0001             		move.b	#4,1(a0)
0000DFEA 117C 0004 0018             		move.b	#4,$18(a0)
0000DFF0 117C 0010 0019             		move.b	#$10,$19(a0)
0000DFF6                            
0000DFF6                            locret_E052:
0000DFF6 4E75                       		rts	
0000DFF8                            ; ===========================================================================
0000DFF8                            
0000DFF8                            Obj43_Action:				; XREF: Obj43_Index
0000DFF8 7000                       		moveq	#0,d0
0000DFFA 1028 0025                  		move.b	$25(a0),d0
0000DFFE 323B 0000                  		move.w	Obj43_Index2(pc,d0.w),d1
0000E002 4EBB 1000                  		jsr	Obj43_Index2(pc,d1.w)
0000E006 43F9 0000 0000             		lea	(Ani_obj43).l,a1
0000E00C 6100 C6CA                  		bsr.w	AnimateSprite
0000E010 3028 0008                  		move.w	8(a0),d0
0000E014 0240 FF80                  		andi.w	#$FF80,d0
0000E018 3238 F700                  		move.w	($FFFFF700).w,d1
0000E01C 0441 0080                  		subi.w	#$80,d1
0000E020 0241 FF80                  		andi.w	#$FF80,d1
0000E024 9041                       		sub.w	d1,d0
0000E026 0C40 0280                  		cmpi.w	#$280,d0
0000E02A 6E00 0000                  		bgt.w	Obj43_ChkGone
0000E02E 6000 F57C                  		bra.w	DisplaySprite
0000E032                            ; ===========================================================================
0000E032                            
0000E032                            Obj43_ChkGone:				; XREF: Obj43_Action
0000E032 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000E036 7000                       		moveq	#0,d0
0000E038 1028 0023                  		move.b	$23(a0),d0
0000E03C 6700                       		beq.s	Obj43_Delete
0000E03E 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000E044                            
0000E044                            Obj43_Delete:
0000E044 6000 F5A2                  		bra.w	DeleteObject
0000E048                            ; ===========================================================================
0000E048 0000                       Obj43_Index2:	dc.w Obj43_RollChk-Obj43_Index2
0000E04A 0000                       		dc.w Obj43_RollNoChk-Obj43_Index2
0000E04C 0000                       		dc.w Obj43_ChkJump-Obj43_Index2
0000E04E 0000                       		dc.w Obj43_MatchFloor-Obj43_Index2
0000E050                            ; ===========================================================================
0000E050                            
0000E050                            Obj43_RollChk:				; XREF: Obj43_Index2
0000E050 3038 D008                  		move.w	($FFFFD008).w,d0
0000E054 0440 0100                  		subi.w	#$100,d0
0000E058 6500                       		bcs.s	loc_E0D2
0000E05A 9068 0008                  		sub.w	8(a0),d0	; check	distance between Roller	and Sonic
0000E05E 6500                       		bcs.s	loc_E0D2
0000E060 5828 0025                  		addq.b	#4,$25(a0)
0000E064 117C 0002 001C             		move.b	#2,$1C(a0)
0000E06A 317C 0700 0010             		move.w	#$700,$10(a0)	; move Roller horizontally
0000E070 117C 008E 0020             		move.b	#$8E,$20(a0)	; make Roller invincible
0000E076                            
0000E076                            loc_E0D2:
0000E076 588F                       		addq.l	#4,sp
0000E078 4E75                       		rts	
0000E07A                            ; ===========================================================================
0000E07A                            
0000E07A                            Obj43_RollNoChk:			; XREF: Obj43_Index2
0000E07A 0C28 0002 001C             		cmpi.b	#2,$1C(a0)
0000E080 6700                       		beq.s	loc_E0F8
0000E082 5368 0030                  		subq.w	#1,$30(a0)
0000E086 6A00                       		bpl.s	locret_E0F6
0000E088 117C 0001 001C             		move.b	#1,$1C(a0)
0000E08E 317C 0700 0010             		move.w	#$700,$10(a0)
0000E094 117C 008E 0020             		move.b	#$8E,$20(a0)
0000E09A                            
0000E09A                            locret_E0F6:
0000E09A 4E75                       		rts	
0000E09C                            ; ===========================================================================
0000E09C                            
0000E09C                            loc_E0F8:
0000E09C 5428 0025                  		addq.b	#2,$25(a0)
0000E0A0 4E75                       		rts	
0000E0A2                            ; ===========================================================================
0000E0A2                            
0000E0A2                            Obj43_ChkJump:				; XREF: Obj43_Index2
0000E0A2 6100 0000                  		bsr.w	Obj43_Stop
0000E0A6 6100 F4DE                  		bsr.w	SpeedToPos
0000E0AA 6100 0000                  		bsr.w	ObjHitFloor
0000E0AE 0C41 FFF8                  		cmpi.w	#-8,d1
0000E0B2 6D00                       		blt.s	Obj43_Jump
0000E0B4 0C41 000C                  		cmpi.w	#$C,d1
0000E0B8 6C00                       		bge.s	Obj43_Jump
0000E0BA D368 000C                  		add.w	d1,$C(a0)
0000E0BE 4E75                       		rts	
0000E0C0                            ; ===========================================================================
0000E0C0                            
0000E0C0                            Obj43_Jump:
0000E0C0 5428 0025                  		addq.b	#2,$25(a0)
0000E0C4 08E8 0000 0032             		bset	#0,$32(a0)
0000E0CA 6700                       		beq.s	locret_E12E
0000E0CC 317C FA00 0012             		move.w	#-$600,$12(a0)	; move Roller vertically
0000E0D2                            
0000E0D2                            locret_E12E:
0000E0D2 4E75                       		rts	
0000E0D4                            ; ===========================================================================
0000E0D4                            
0000E0D4                            Obj43_MatchFloor:			; XREF: Obj43_Index2
0000E0D4 6100 F484                  		bsr.w	ObjectFall
0000E0D8 4A68 0012                  		tst.w	$12(a0)
0000E0DC 6B00                       		bmi.s	locret_E150
0000E0DE 6100 0000                  		bsr.w	ObjHitFloor
0000E0E2 4A41                       		tst.w	d1
0000E0E4 6A00                       		bpl.s	locret_E150
0000E0E6 D368 000C                  		add.w	d1,$C(a0)	; match	Roller's position with the floor
0000E0EA 5528 0025                  		subq.b	#2,$25(a0)
0000E0EE 317C 0000 0012             		move.w	#0,$12(a0)
0000E0F4                            
0000E0F4                            locret_E150:
0000E0F4 4E75                       		rts	
0000E0F6                            
0000E0F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000E0F6                            
0000E0F6                            
0000E0F6                            Obj43_Stop:				; XREF: Obj43_ChkJump
0000E0F6 4A28 0032                  		tst.b	$32(a0)
0000E0FA 6B00                       		bmi.s	locret_E188
0000E0FC 3038 D008                  		move.w	($FFFFD008).w,d0
0000E100 0440 0030                  		subi.w	#$30,d0
0000E104 9068 0008                  		sub.w	8(a0),d0
0000E108 6400                       		bcc.s	locret_E188
0000E10A 117C 0000 001C             		move.b	#0,$1C(a0)
0000E110 117C 000E 0020             		move.b	#$E,$20(a0)
0000E116 4268 0010                  		clr.w	$10(a0)
0000E11A 317C 0078 0030             		move.w	#120,$30(a0)	; set waiting time to 2	seconds
0000E120 117C 0002 0025             		move.b	#2,$25(a0)
0000E126 08E8 0007 0032             		bset	#7,$32(a0)
0000E12C                            
0000E12C                            locret_E188:
0000E12C 4E75                       		rts	
0000E12E                            ; End of function Obj43_Stop
0000E12E                            
0000E12E                            ; ===========================================================================
0000E12E                            Ani_obj43:
0000E12E                            	include "_anim\obj43.asm"
0000E12E                            ; ---------------------------------------------------------------------------
0000E12E                            ; Animation script - Roller enemy
0000E12E                            ; ---------------------------------------------------------------------------
0000E12E 0000                       		dc.w byte_E190-Ani_obj43
0000E130 0000                       		dc.w byte_E196-Ani_obj43
0000E132 0000                       		dc.w byte_E19C-Ani_obj43
0000E134 0F02 0100 FE01             byte_E190:	dc.b $F, 2, 1, 0, $FE, 1
0000E13A 0F01 02FD 0200             byte_E196:	dc.b $F, 1, 2, $FD, 2, 0
0000E140 0303 0402 FF               byte_E19C:	dc.b 3,	3, 4, 2, $FF
0000E146 00                         		even
0000E146 00                         		even
0000E146                            
0000E146                            ; ---------------------------------------------------------------------------
0000E146                            ; Sprite mappings - Roller enemy (SYZ)
0000E146                            ; ---------------------------------------------------------------------------
0000E146                            Map_obj43:
0000E146                            	include "_maps\obj43.asm"
0000E146                            ; ---------------------------------------------------------------------------
0000E146                            ; Sprite mappings - Roller enemy (SYZ)
0000E146                            ; ---------------------------------------------------------------------------
0000E146 0000 0000                  		dc.w byte_E1AC-Map_obj43, byte_E1B7-Map_obj43
0000E14A 0000 0000                  		dc.w byte_E1C2-Map_obj43, byte_E1C8-Map_obj43
0000E14E 0000                       		dc.w byte_E1CE-Map_obj43
0000E150 02                         byte_E1AC:	dc.b 2
0000E151 DE0E 0000 F0               		dc.b $DE, $E, 0, 0, $F0
0000E156 F60E 000C F0               		dc.b $F6, $E, 0, $C, $F0
0000E15B 02                         byte_E1B7:	dc.b 2
0000E15C E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
0000E161 FE0D 0018 F0               		dc.b $FE, $D, 0, $18, $F0
0000E166 01                         byte_E1C2:	dc.b 1
0000E167 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0000E16C 01                         byte_E1C8:	dc.b 1
0000E16D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
0000E172 01                         byte_E1CE:	dc.b 1
0000E173 F00F 0040 F0               		dc.b $F0, $F, 0, $40, $F0
0000E178                            		even
0000E178                            		even
0000E178                            
0000E178                            ; ===========================================================================
0000E178                            ; ---------------------------------------------------------------------------
0000E178                            ; Object 44 - walls (GHZ)
0000E178                            ; ---------------------------------------------------------------------------
0000E178                            
0000E178                            Obj44:					; XREF: Obj_Index
0000E178 7000                       		moveq	#0,d0
0000E17A 1028 0024                  		move.b	$24(a0),d0
0000E17E 323B 0000                  		move.w	Obj44_Index(pc,d0.w),d1
0000E182 4EFB 1000                  		jmp	Obj44_Index(pc,d1.w)
0000E186                            ; ===========================================================================
0000E186 0000                       Obj44_Index:	dc.w Obj44_Main-Obj44_Index
0000E188 0000                       		dc.w Obj44_Solid-Obj44_Index
0000E18A 0000                       		dc.w Obj44_Display-Obj44_Index
0000E18C                            ; ===========================================================================
0000E18C                            
0000E18C                            Obj44_Main:				; XREF: Obj44_Index
0000E18C 5428 0024                  		addq.b	#2,$24(a0)
0000E190 217C 0000 0000 0004        		move.l	#Map_obj44,4(a0)
0000E198 317C 434C 0002             		move.w	#$434C,2(a0)
0000E19E 0028 0004 0001             		ori.b	#4,1(a0)
0000E1A4 117C 0008 0019             		move.b	#8,$19(a0)
0000E1AA 117C 0006 0018             		move.b	#6,$18(a0)
0000E1B0 1168 0028 001A             		move.b	$28(a0),$1A(a0)	; copy object type number to frame number
0000E1B6 08A8 0004 001A             		bclr	#4,$1A(a0)	; clear	4th bit	(deduct	$10)
0000E1BC 6700                       		beq.s	Obj44_Solid	; make object solid if 4th bit = 0
0000E1BE 5428 0024                  		addq.b	#2,$24(a0)
0000E1C2 6000                       		bra.s	Obj44_Display	; don't make it solid if 4th bit = 1
0000E1C4                            ; ===========================================================================
0000E1C4                            
0000E1C4                            Obj44_Solid:				; XREF: Obj44_Index
0000E1C4 323C 0013                  		move.w	#$13,d1
0000E1C8 343C 0028                  		move.w	#$28,d2
0000E1CC 6100 A872                  		bsr.w	Obj44_SolidWall
0000E1D0                            
0000E1D0                            Obj44_Display:				; XREF: Obj44_Index
0000E1D0 6100 F3DA                  		bsr.w	DisplaySprite
0000E1D4 3028 0008                  		move.w	8(a0),d0
0000E1D8 0240 FF80                  		andi.w	#$FF80,d0
0000E1DC 3238 F700                  		move.w	($FFFFF700).w,d1
0000E1E0 0441 0080                  		subi.w	#$80,d1
0000E1E4 0241 FF80                  		andi.w	#$FF80,d1
0000E1E8 9041                       		sub.w	d1,d0
0000E1EA 0C40 0280                  		cmpi.w	#$280,d0
0000E1EE 6200 F3F8                  		bhi.w	DeleteObject
0000E1F2 4E75                       		rts	
0000E1F4                            ; ===========================================================================
0000E1F4                            ; ---------------------------------------------------------------------------
0000E1F4                            ; Sprite mappings - walls (GHZ)
0000E1F4                            ; ---------------------------------------------------------------------------
0000E1F4                            Map_obj44:
0000E1F4                            	include "_maps\obj44.asm"
0000E1F4                            ; ---------------------------------------------------------------------------
0000E1F4                            ; Sprite mappings - walls (GHZ)
0000E1F4                            ; ---------------------------------------------------------------------------
0000E1F4 0000                       		dc.w byte_E256-Map_obj44
0000E1F6 0000                       		dc.w byte_E26B-Map_obj44
0000E1F8 0000                       		dc.w byte_E280-Map_obj44
0000E1FA 04                         byte_E256:	dc.b 4
0000E1FB E005 0004 F8               		dc.b $E0, 5, 0,	4, $F8
0000E200 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E205 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E20A 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E20F 04                         byte_E26B:	dc.b 4
0000E210 E005 0008 F8               		dc.b $E0, 5, 0,	8, $F8
0000E215 F005 0008 F8               		dc.b $F0, 5, 0,	8, $F8
0000E21A 0005 0008 F8               		dc.b 0,	5, 0, 8, $F8
0000E21F 1005 0008 F8               		dc.b $10, 5, 0,	8, $F8
0000E224 04                         byte_E280:	dc.b 4
0000E225 E005 0000 F8               		dc.b $E0, 5, 0,	0, $F8
0000E22A F005 0000 F8               		dc.b $F0, 5, 0,	0, $F8
0000E22F 0005 0000 F8               		dc.b 0,	5, 0, 0, $F8
0000E234 1005 0000 F8               		dc.b $10, 5, 0,	0, $F8
0000E23A 00                         		even
0000E23A 00                         		even
0000E23A                            
0000E23A                            ; ===========================================================================
0000E23A                            ; ---------------------------------------------------------------------------
0000E23A                            ; Object 13 - lava ball	producer (MZ, SLZ)
0000E23A                            ; ---------------------------------------------------------------------------
0000E23A                            
0000E23A                            Obj13:					; XREF: Obj_Index
0000E23A 7000                       		moveq	#0,d0
0000E23C 1028 0024                  		move.b	$24(a0),d0
0000E240 323B 0000                  		move.w	Obj13_Index(pc,d0.w),d1
0000E244 4EBB 1000                  		jsr	Obj13_Index(pc,d1.w)
0000E248 6000 0000                  		bra.w	Obj14_ChkDel
0000E24C                            ; ===========================================================================
0000E24C 0000                       Obj13_Index:	dc.w Obj13_Main-Obj13_Index
0000E24E 0000                       		dc.w Obj13_MakeLava-Obj13_Index
0000E250                            ; ---------------------------------------------------------------------------
0000E250                            ;
0000E250                            ; Lava ball production rates
0000E250                            ;
0000E250 1E3C 5A78 96B4             Obj13_Rates:	dc.b 30, 60, 90, 120, 150, 180
0000E256                            ; ===========================================================================
0000E256                            
0000E256                            Obj13_Main:				; XREF: Obj13_Index
0000E256 5428 0024                  		addq.b	#2,$24(a0)
0000E25A 1028 0028                  		move.b	$28(a0),d0
0000E25E E848                       		lsr.w	#4,d0
0000E260 0240 000F                  		andi.w	#$F,d0
0000E264 117B 00EA 001F             		move.b	Obj13_Rates(pc,d0.w),$1F(a0)
0000E26A 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; set time delay for lava balls
0000E270 0228 000F 0028             		andi.b	#$F,$28(a0)
0000E276                            
0000E276                            Obj13_MakeLava:				; XREF: Obj13_Index
0000E276 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from time delay
0000E27A 6600                       		bne.s	locret_E302	; if time still	remains, branch
0000E27C 1168 001F 001E             		move.b	$1F(a0),$1E(a0)	; reset	time delay
0000E282 6100 F5A2                  		bsr.w	ChkObjOnScreen
0000E286 6600                       		bne.s	locret_E302
0000E288 6100 F7A8                  		bsr.w	SingleObjLoad
0000E28C 6600                       		bne.s	locret_E302
0000E28E 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0000E292 3368 0008 0008             		move.w	8(a0),8(a1)
0000E298 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000E29E 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000E2A4                            
0000E2A4                            locret_E302:
0000E2A4 4E75                       		rts	
0000E2A6                            ; ===========================================================================
0000E2A6                            ; ---------------------------------------------------------------------------
0000E2A6                            ; Object 14 - lava balls (MZ, SLZ)
0000E2A6                            ; ---------------------------------------------------------------------------
0000E2A6                            
0000E2A6                            Obj14:					; XREF: Obj_Index
0000E2A6 7000                       		moveq	#0,d0
0000E2A8 1028 0024                  		move.b	$24(a0),d0
0000E2AC 323B 0000                  		move.w	Obj14_Index(pc,d0.w),d1
0000E2B0 4EBB 1000                  		jsr	Obj14_Index(pc,d1.w)
0000E2B4 6000 F2F6                  		bra.w	DisplaySprite
0000E2B8                            ; ===========================================================================
0000E2B8 0000                       Obj14_Index:	dc.w Obj14_Main-Obj14_Index
0000E2BA 0000                       		dc.w Obj14_Action-Obj14_Index
0000E2BC 0000                       		dc.w Obj14_Delete-Obj14_Index
0000E2BE                            
0000E2BE FC00 FB00 FA00 F900 FE00   Obj14_Speeds:	dc.w $FC00, $FB00, $FA00, $F900, $FE00
0000E2C8 0200 FE00 0200 0000        		dc.w $200, $FE00, $200,	0
0000E2D0                            ; ===========================================================================
0000E2D0                            
0000E2D0                            Obj14_Main:				; XREF: Obj14_Index
0000E2D0 5428 0024                  		addq.b	#2,$24(a0)
0000E2D4 117C 0008 0016             		move.b	#8,$16(a0)
0000E2DA 117C 0008 0017             		move.b	#8,$17(a0)
0000E2E0 217C 0000 B32A 0004        		move.l	#Map_obj14,4(a0)
0000E2E8 317C 0345 0002             		move.w	#$345,2(a0)
0000E2EE 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; check if level is SLZ
0000E2F4 6600                       		bne.s	loc_E35A
0000E2F6 317C 0480 0002             		move.w	#$480,2(a0)	; SLZ specific code
0000E2FC                            
0000E2FC                            loc_E35A:
0000E2FC 117C 0004 0001             		move.b	#4,1(a0)
0000E302 117C 0003 0018             		move.b	#3,$18(a0)
0000E308 117C 008B 0020             		move.b	#$8B,$20(a0)
0000E30E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E314 4A28 0029                  		tst.b	$29(a0)
0000E318 6700                       		beq.s	Obj14_SetSpeed
0000E31A 5428 0018                  		addq.b	#2,$18(a0)
0000E31E                            
0000E31E                            Obj14_SetSpeed:
0000E31E 7000                       		moveq	#0,d0
0000E320 1028 0028                  		move.b	$28(a0),d0
0000E324 D040                       		add.w	d0,d0
0000E326 317B 0096 0012             		move.w	Obj14_Speeds(pc,d0.w),$12(a0) ;	load object speed (vertical)
0000E32C 117C 0008 0019             		move.b	#8,$19(a0)
0000E332 0C28 0006 0028             		cmpi.b	#6,$28(a0)	; is object type below $6 ?
0000E338 6500                       		bcs.s	Obj14_PlaySnd	; if yes, branch
0000E33A 117C 0010 0019             		move.b	#$10,$19(a0)
0000E340 117C 0002 001C             		move.b	#2,$1C(a0)	; use horizontal animation
0000E346 3168 0012 0010             		move.w	$12(a0),$10(a0)	; set horizontal speed
0000E34C 317C 0000 0012             		move.w	#0,$12(a0)	; delete vertical speed
0000E352                            
0000E352                            Obj14_PlaySnd:
0000E352 303C 00AE                  		move.w	#$AE,d0
0000E356 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
0000E35C                            
0000E35C                            Obj14_Action:				; XREF: Obj14_Index
0000E35C 7000                       		moveq	#0,d0
0000E35E 1028 0028                  		move.b	$28(a0),d0
0000E362 D040                       		add.w	d0,d0
0000E364 323B 0000                  		move.w	Obj14_TypeIndex(pc,d0.w),d1
0000E368 4EBB 1000                  		jsr	Obj14_TypeIndex(pc,d1.w)
0000E36C 6100 F218                  		bsr.w	SpeedToPos
0000E370 43F9 0000 0000             		lea	(Ani_obj14).l,a1
0000E376 6100 C360                  		bsr.w	AnimateSprite
0000E37A                            
0000E37A                            Obj14_ChkDel:				; XREF: Obj13
0000E37A 3028 0008                  		move.w	8(a0),d0
0000E37E 0240 FF80                  		andi.w	#$FF80,d0
0000E382 3238 F700                  		move.w	($FFFFF700).w,d1
0000E386 0441 0080                  		subi.w	#$80,d1
0000E38A 0241 FF80                  		andi.w	#$FF80,d1
0000E38E 9041                       		sub.w	d1,d0
0000E390 0C40 0280                  		cmpi.w	#$280,d0
0000E394 6200 F252                  		bhi.w	DeleteObject
0000E398 4E75                       		rts	
0000E39A                            ; ===========================================================================
0000E39A 0000 0000                  Obj14_TypeIndex:dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E39E 0000 0000                  		dc.w Obj14_Type00-Obj14_TypeIndex, Obj14_Type00-Obj14_TypeIndex
0000E3A2 0000 0000                  		dc.w Obj14_Type04-Obj14_TypeIndex, Obj14_Type05-Obj14_TypeIndex
0000E3A6 0000 0000                  		dc.w Obj14_Type06-Obj14_TypeIndex, Obj14_Type07-Obj14_TypeIndex
0000E3AA 0000                       		dc.w Obj14_Type08-Obj14_TypeIndex
0000E3AC                            ; ===========================================================================
0000E3AC                            ; lavaball types 00-03 fly up and fall back down
0000E3AC                            
0000E3AC                            Obj14_Type00:				; XREF: Obj14_TypeIndex
0000E3AC 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's downward speed
0000E3B2 3028 0030                  		move.w	$30(a0),d0
0000E3B6 B068 000C                  		cmp.w	$C(a0),d0	; has object fallen back to its	original position?
0000E3BA 6400                       		bcc.s	loc_E41E	; if not, branch
0000E3BC 5428 0024                  		addq.b	#2,$24(a0)	; goto "Obj14_Delete" routine
0000E3C0                            
0000E3C0                            loc_E41E:
0000E3C0 08A8 0001 0022             		bclr	#1,$22(a0)
0000E3C6 4A68 0012                  		tst.w	$12(a0)
0000E3CA 6A00                       		bpl.s	locret_E430
0000E3CC 08E8 0001 0022             		bset	#1,$22(a0)
0000E3D2                            
0000E3D2                            locret_E430:
0000E3D2 4E75                       		rts	
0000E3D4                            ; ===========================================================================
0000E3D4                            ; lavaball type	04 flies up until it hits the ceiling
0000E3D4                            
0000E3D4                            Obj14_Type04:				; XREF: Obj14_TypeIndex
0000E3D4 08E8 0001 0022             		bset	#1,$22(a0)
0000E3DA 6100 0000                  		bsr.w	ObjHitCeiling
0000E3DE 4A41                       		tst.w	d1
0000E3E0 6A00                       		bpl.s	locret_E452
0000E3E2 117C 0008 0028             		move.b	#8,$28(a0)
0000E3E8 117C 0001 001C             		move.b	#1,$1C(a0)
0000E3EE 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the ceiling
0000E3F4                            
0000E3F4                            locret_E452:
0000E3F4 4E75                       		rts	
0000E3F6                            ; ===========================================================================
0000E3F6                            ; lavaball type	05 falls down until it hits the	floor
0000E3F6                            
0000E3F6                            Obj14_Type05:				; XREF: Obj14_TypeIndex
0000E3F6 08A8 0001 0022             		bclr	#1,$22(a0)
0000E3FC 6100 0000                  		bsr.w	ObjHitFloor
0000E400 4A41                       		tst.w	d1
0000E402 6A00                       		bpl.s	locret_E474
0000E404 117C 0008 0028             		move.b	#8,$28(a0)
0000E40A 117C 0001 001C             		move.b	#1,$1C(a0)
0000E410 317C 0000 0012             		move.w	#0,$12(a0)	; stop the object when it touches the floor
0000E416                            
0000E416                            locret_E474:
0000E416 4E75                       		rts	
0000E418                            ; ===========================================================================
0000E418                            ; lavaball types 06-07 move sideways
0000E418                            
0000E418                            Obj14_Type06:				; XREF: Obj14_TypeIndex
0000E418 08E8 0000 0022             		bset	#0,$22(a0)
0000E41E 76F8                       		moveq	#-8,d3
0000E420 6100 0000                  		bsr.w	ObjHitWallLeft
0000E424 4A41                       		tst.w	d1
0000E426 6A00                       		bpl.s	locret_E498
0000E428 117C 0008 0028             		move.b	#8,$28(a0)
0000E42E 117C 0003 001C             		move.b	#3,$1C(a0)
0000E434 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E43A                            
0000E43A                            locret_E498:
0000E43A 4E75                       		rts	
0000E43C                            ; ===========================================================================
0000E43C                            
0000E43C                            Obj14_Type07:				; XREF: Obj14_TypeIndex
0000E43C 08A8 0000 0022             		bclr	#0,$22(a0)
0000E442 7608                       		moveq	#8,d3
0000E444 6100 0000                  		bsr.w	ObjHitWallRight
0000E448 4A41                       		tst.w	d1
0000E44A 6A00                       		bpl.s	locret_E4BC
0000E44C 117C 0008 0028             		move.b	#8,$28(a0)
0000E452 117C 0003 001C             		move.b	#3,$1C(a0)
0000E458 317C 0000 0010             		move.w	#0,$10(a0)	; stop object when it touches a	wall
0000E45E                            
0000E45E                            locret_E4BC:
0000E45E 4E75                       		rts	
0000E460                            ; ===========================================================================
0000E460                            
0000E460                            Obj14_Type08:				; XREF: Obj14_TypeIndex
0000E460 4E75                       		rts	
0000E462                            ; ===========================================================================
0000E462                            
0000E462                            Obj14_Delete:				; XREF: Obj14_Index
0000E462 6000 F184                  		bra.w	DeleteObject
0000E466                            ; ===========================================================================
0000E466                            Ani_obj14:
0000E466                            	include "_anim\obj14.asm"
0000E466                            ; ---------------------------------------------------------------------------
0000E466                            ; Animation script - lava balls
0000E466                            ; ---------------------------------------------------------------------------
0000E466 0000                       		dc.w byte_E4CC-Ani_obj14
0000E468 0000                       		dc.w byte_E4D2-Ani_obj14
0000E46A 0000                       		dc.w byte_E4D6-Ani_obj14
0000E46C 0000                       		dc.w byte_E4DC-Ani_obj14
0000E46E 0500 2001 21FF             byte_E4CC:	dc.b 5,	0, $20,	1, $21,	$FF
0000E474 0502 FC00                  byte_E4D2:	dc.b 5,	2, $FC,	0
0000E478 0503 4304 44FF             byte_E4D6:	dc.b 5,	3, $43,	4, $44,	$FF
0000E47E 0505 FC00                  byte_E4DC:	dc.b 5,	5, $FC,	0
0000E482                            		even
0000E482                            		even
0000E482                            
0000E482                            ; ===========================================================================
0000E482                            ; ---------------------------------------------------------------------------
0000E482                            ; Object 6D - flame thrower (SBZ)
0000E482                            ; ---------------------------------------------------------------------------
0000E482                            
0000E482                            Obj6D:					; XREF: Obj_Index
0000E482 7000                       		moveq	#0,d0
0000E484 1028 0024                  		move.b	$24(a0),d0
0000E488 323B 0000                  		move.w	Obj6D_Index(pc,d0.w),d1
0000E48C 4EFB 1000                  		jmp	Obj6D_Index(pc,d1.w)
0000E490                            ; ===========================================================================
0000E490 0000                       Obj6D_Index:	dc.w Obj6D_Main-Obj6D_Index
0000E492 0000                       		dc.w Obj6D_Action-Obj6D_Index
0000E494                            ; ===========================================================================
0000E494                            
0000E494                            Obj6D_Main:				; XREF: Obj6D_Index
0000E494 5428 0024                  		addq.b	#2,$24(a0)
0000E498 217C 0000 0000 0004        		move.l	#Map_obj6D,4(a0)
0000E4A0 317C 83D9 0002             		move.w	#$83D9,2(a0)
0000E4A6 0028 0004 0001             		ori.b	#4,1(a0)
0000E4AC 117C 0001 0018             		move.b	#1,$18(a0)
0000E4B2 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E4B8 117C 000C 0019             		move.b	#$C,$19(a0)
0000E4BE 1028 0028                  		move.b	$28(a0),d0
0000E4C2 0240 00F0                  		andi.w	#$F0,d0		; read 1st digit of object type
0000E4C6 D040                       		add.w	d0,d0		; multiply by 2
0000E4C8 3140 0030                  		move.w	d0,$30(a0)
0000E4CC 3140 0032                  		move.w	d0,$32(a0)	; set flaming time
0000E4D0 1028 0028                  		move.b	$28(a0),d0
0000E4D4 0240 000F                  		andi.w	#$F,d0		; read 2nd digit of object type
0000E4D8 EB48                       		lsl.w	#5,d0		; multiply by $20
0000E4DA 3140 0034                  		move.w	d0,$34(a0)	; set pause time
0000E4DE 117C 000A 0036             		move.b	#$A,$36(a0)
0000E4E4 0828 0001 0022             		btst	#1,$22(a0)
0000E4EA 6700                       		beq.s	Obj6D_Action
0000E4EC 117C 0002 001C             		move.b	#2,$1C(a0)
0000E4F2 117C 0015 0036             		move.b	#$15,$36(a0)
0000E4F8                            
0000E4F8                            Obj6D_Action:				; XREF: Obj6D_Index
0000E4F8 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
0000E4FC 6A00                       		bpl.s	loc_E57A	; if time remains, branch
0000E4FE 3168 0034 0030             		move.w	$34(a0),$30(a0)	; begin	pause time
0000E504 0868 0000 001C             		bchg	#0,$1C(a0)
0000E50A 6700                       		beq.s	loc_E57A
0000E50C 3168 0032 0030             		move.w	$32(a0),$30(a0)	; begin	flaming	time
0000E512 303C 00B3                  		move.w	#$B3,d0
0000E516 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000E51C                            
0000E51C                            loc_E57A:
0000E51C 43F9 0000 0000             		lea	(Ani_obj6D).l,a1
0000E522 6100 C1B4                  		bsr.w	AnimateSprite
0000E526 117C 0000 0020             		move.b	#0,$20(a0)
0000E52C 1028 0036                  		move.b	$36(a0),d0
0000E530 B028 001A                  		cmp.b	$1A(a0),d0
0000E534 6600                       		bne.s	Obj6D_ChkDel
0000E536 117C 00A3 0020             		move.b	#$A3,$20(a0)
0000E53C                            
0000E53C                            Obj6D_ChkDel:
0000E53C 3028 0008                  		move.w	8(a0),d0
0000E540 0240 FF80                  		andi.w	#$FF80,d0
0000E544 3238 F700                  		move.w	($FFFFF700).w,d1
0000E548 0441 0080                  		subi.w	#$80,d1
0000E54C 0241 FF80                  		andi.w	#$FF80,d1
0000E550 9041                       		sub.w	d1,d0
0000E552 0C40 0280                  		cmpi.w	#$280,d0
0000E556 6200 F090                  		bhi.w	DeleteObject
0000E55A 6000 F050                  		bra.w	DisplaySprite
0000E55E                            ; ===========================================================================
0000E55E                            Ani_obj6D:
0000E55E                            	include "_anim\obj6D.asm"
0000E55E                            ; ---------------------------------------------------------------------------
0000E55E                            ; Animation script - flamethrower (SBZ)
0000E55E                            ; ---------------------------------------------------------------------------
0000E55E 0000                       		dc.w byte_E5C4-Ani_obj6D
0000E560 0000                       		dc.w byte_E5D2-Ani_obj6D
0000E562 0000                       		dc.w byte_E5DC-Ani_obj6D
0000E564 0000                       		dc.w byte_E5EA-Ani_obj6D
0000E566 0300 0102 0304 0506 0708+  byte_E5C4:	dc.b 3,	0, 1, 2, 3, 4, 5, 6, 7,	8, 9, $A, $FE, 2
0000E574 0009 0705 0301 00FE 0100   byte_E5D2:	dc.b 0,	9, 7, 5, 3, 1, 0, $FE, 1, 0
0000E57E 030B 0C0D 0E0F 1011 1213+  byte_E5DC:	dc.b 3,	$B, $C,	$D, $E,	$F, $10, $11, $12, $13,	$14, $15, $FE, 2
0000E58C 0014 1211 0F0D 0BFE 0100   byte_E5EA:	dc.b 0,	$14, $12, $11, $F, $D, $B, $FE,	1, 0
0000E596                            		even
0000E596                            		even
0000E596                            
0000E596                            ; ---------------------------------------------------------------------------
0000E596                            ; Sprite mappings - flame thrower (SBZ)
0000E596                            ; ---------------------------------------------------------------------------
0000E596                            Map_obj6D:
0000E596                            	include "_maps\obj6D.asm"
0000E596                            ; ---------------------------------------------------------------------------
0000E596                            ; Sprite mappings - flame thrower (SBZ)
0000E596                            ; ---------------------------------------------------------------------------
0000E596 0000 0000                  		dc.w byte_E620-Map_obj6D, byte_E626-Map_obj6D
0000E59A 0000 0000                  		dc.w byte_E631-Map_obj6D, byte_E63C-Map_obj6D
0000E59E 0000 0000                  		dc.w byte_E64C-Map_obj6D, byte_E65C-Map_obj6D
0000E5A2 0000 0000                  		dc.w byte_E671-Map_obj6D, byte_E686-Map_obj6D
0000E5A6 0000 0000                  		dc.w byte_E6A0-Map_obj6D, byte_E6BA-Map_obj6D
0000E5AA 0000 0000                  		dc.w byte_E6D9-Map_obj6D, byte_E6F8-Map_obj6D
0000E5AE 0000 0000                  		dc.w byte_E6FE-Map_obj6D, byte_E709-Map_obj6D
0000E5B2 0000 0000                  		dc.w byte_E714-Map_obj6D, byte_E724-Map_obj6D
0000E5B6 0000 0000                  		dc.w byte_E734-Map_obj6D, byte_E749-Map_obj6D
0000E5BA 0000 0000                  		dc.w byte_E75E-Map_obj6D, byte_E778-Map_obj6D
0000E5BE 0000 0000                  		dc.w byte_E792-Map_obj6D, byte_E7B1-Map_obj6D
0000E5C2 01                         byte_E620:	dc.b 1
0000E5C3 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5C8 02                         byte_E626:	dc.b 2
0000E5C9 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E5CE 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5D3 02                         byte_E631:	dc.b 2
0000E5D4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E5D9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5DE 03                         byte_E63C:	dc.b 3
0000E5DF 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E5E4 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E5E9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5EE 03                         byte_E64C:	dc.b 3
0000E5EF 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E5F4 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E5F9 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E5FE 04                         byte_E65C:	dc.b 4
0000E5FF 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E604 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E609 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E60E 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E613 04                         byte_E671:	dc.b 4
0000E614 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E619 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E61E 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E623 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E628 05                         byte_E686:	dc.b 5
0000E629 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E62E 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E633 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E638 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E63D 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E642 05                         byte_E6A0:	dc.b 5
0000E643 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E648 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E64D 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E652 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E657 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E65C 06                         byte_E6BA:	dc.b 6
0000E65D E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E662 F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E667 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E66C 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E671 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E676 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E67B 06                         byte_E6D9:	dc.b 6
0000E67C E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E681 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E686 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E68B 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E690 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E695 2805 4014 FB               		dc.b $28, 5, $40, $14, $FB
0000E69A 01                         byte_E6F8:	dc.b 1
0000E69B 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6A0 02                         byte_E6FE:	dc.b 2
0000E6A1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6A6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6AB 02                         byte_E709:	dc.b 2
0000E6AC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6B1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6B6 03                         byte_E714:	dc.b 3
0000E6B7 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E6BC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6C1 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6C6 03                         byte_E724:	dc.b 3
0000E6C7 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E6CC 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6D1 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E6D6 04                         byte_E734:	dc.b 4
0000E6D7 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E6DC 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E6E1 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6E6 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E6EB 04                         byte_E749:	dc.b 4
0000E6EC 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E6F1 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E6F6 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E6FB 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E700 05                         byte_E75E:	dc.b 5
0000E701 F80B 0008 F4               		dc.b $F8, $B, 0, 8, $F4
0000E706 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E70B 1006 0002 F8               		dc.b $10, 6, 0,	2, $F8
0000E710 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E715 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E71A 05                         byte_E778:	dc.b 5
0000E71B F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E720 0806 0802 F8               		dc.b 8,	6, 8, 2, $F8
0000E725 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E72A 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E72F 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E734 06                         byte_E792:	dc.b 6
0000E735 E80B 0008 F4               		dc.b $E8, $B, 0, 8, $F4
0000E73A F70B 0008 F4               		dc.b $F7, $B, 0, 8, $F4
0000E73F 0806 0002 F8               		dc.b 8,	6, 0, 2, $F8
0000E744 0F06 0002 F8               		dc.b $F, 6, 0, 2, $F8
0000E749 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E74E 2001 0000 FD               		dc.b $20, 1, 0,	0, $FD
0000E753 06                         byte_E7B1:	dc.b 6
0000E754 E70B 0808 F4               		dc.b $E7, $B, 8, 8, $F4
0000E759 F80B 0808 F4               		dc.b $F8, $B, 8, 8, $F4
0000E75E 0706 0802 F8               		dc.b 7,	6, 8, 2, $F8
0000E763 1006 0802 F8               		dc.b $10, 6, 8,	2, $F8
0000E768 2805 4018 F9               		dc.b $28, 5, $40, $18, $F9
0000E76D 2001 0800 FC               		dc.b $20, 1, 8,	0, $FC
0000E772                            		even
0000E772                            		even
0000E772                            
0000E772                            ; ===========================================================================
0000E772                            ; ---------------------------------------------------------------------------
0000E772                            ; Object 46 - solid blocks and blocks that fall	from the ceiling (MZ)
0000E772                            ; ---------------------------------------------------------------------------
0000E772                            
0000E772                            Obj46:					; XREF: Obj_Index
0000E772 7000                       		moveq	#0,d0
0000E774 1028 0024                  		move.b	$24(a0),d0
0000E778 323B 0000                  		move.w	Obj46_Index(pc,d0.w),d1
0000E77C 4EFB 1000                  		jmp	Obj46_Index(pc,d1.w)
0000E780                            ; ===========================================================================
0000E780 0000                       Obj46_Index:	dc.w Obj46_Main-Obj46_Index
0000E782 0000                       		dc.w Obj46_Action-Obj46_Index
0000E784                            ; ===========================================================================
0000E784                            
0000E784                            Obj46_Main:				; XREF: Obj46_Index
0000E784 5428 0024                  		addq.b	#2,$24(a0)
0000E788 117C 000F 0016             		move.b	#$F,$16(a0)
0000E78E 117C 000F 0017             		move.b	#$F,$17(a0)
0000E794 217C 0000 0000 0004        		move.l	#Map_obj46,4(a0)
0000E79C 317C 4000 0002             		move.w	#$4000,2(a0)
0000E7A2 117C 0004 0001             		move.b	#4,1(a0)
0000E7A8 117C 0003 0018             		move.b	#3,$18(a0)
0000E7AE 117C 0010 0019             		move.b	#$10,$19(a0)
0000E7B4 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E7BA 317C 05C0 0032             		move.w	#$5C0,$32(a0)
0000E7C0                            
0000E7C0                            Obj46_Action:				; XREF: Obj46_Index
0000E7C0 4A28 0001                  		tst.b	1(a0)
0000E7C4 6A00                       		bpl.s	Obj46_ChkDel
0000E7C6 7000                       		moveq	#0,d0
0000E7C8 1028 0028                  		move.b	$28(a0),d0	; get object type
0000E7CC 0240 0007                  		andi.w	#7,d0		; read only the	1st digit
0000E7D0 D040                       		add.w	d0,d0
0000E7D2 323B 0000                  		move.w	Obj46_TypeIndex(pc,d0.w),d1
0000E7D6 4EBB 1000                  		jsr	Obj46_TypeIndex(pc,d1.w)
0000E7DA 323C 001B                  		move.w	#$1B,d1
0000E7DE 343C 0010                  		move.w	#$10,d2
0000E7E2 363C 0011                  		move.w	#$11,d3
0000E7E6 3828 0008                  		move.w	8(a0),d4
0000E7EA 6100 0000                  		bsr.w	SolidObject
0000E7EE                            
0000E7EE                            Obj46_ChkDel:
0000E7EE 6100 EDBC                  		bsr.w	DisplaySprite
0000E7F2 3028 0008                  		move.w	8(a0),d0
0000E7F6 0240 FF80                  		andi.w	#$FF80,d0
0000E7FA 3238 F700                  		move.w	($FFFFF700).w,d1
0000E7FE 0441 0080                  		subi.w	#$80,d1
0000E802 0241 FF80                  		andi.w	#$FF80,d1
0000E806 9041                       		sub.w	d1,d0
0000E808 0C40 0280                  		cmpi.w	#$280,d0
0000E80C 6200 EDDA                  		bhi.w	DeleteObject
0000E810 4E75                       		rts	
0000E812                            ; ===========================================================================
0000E812 0000                       Obj46_TypeIndex:dc.w Obj46_Type00-Obj46_TypeIndex
0000E814 0000                       		dc.w Obj46_Type01-Obj46_TypeIndex
0000E816 0000                       		dc.w Obj46_Type02-Obj46_TypeIndex
0000E818 0000                       		dc.w Obj46_Type03-Obj46_TypeIndex
0000E81A 0000                       		dc.w Obj46_Type04-Obj46_TypeIndex
0000E81C                            ; ===========================================================================
0000E81C                            
0000E81C                            Obj46_Type00:				; XREF: Obj46_TypeIndex
0000E81C 4E75                       		rts	
0000E81E                            ; ===========================================================================
0000E81E                            
0000E81E                            Obj46_Type02:				; XREF: Obj46_TypeIndex
0000E81E 3038 D008                  		move.w	($FFFFD008).w,d0
0000E822 9068 0008                  		sub.w	8(a0),d0
0000E826 6400                       		bcc.s	loc_E888
0000E828 4440                       		neg.w	d0
0000E82A                            
0000E82A                            loc_E888:
0000E82A 0C40 0090                  		cmpi.w	#$90,d0		; is Sonic within $90 pixels of	the block?
0000E82E 6400                       		bcc.s	Obj46_Type01	; if not, resume wobbling
0000E830 117C 0003 0028             		move.b	#3,$28(a0)	; if yes, make the block fall
0000E836                            
0000E836                            Obj46_Type01:				; XREF: Obj46_TypeIndex
0000E836 7000                       		moveq	#0,d0
0000E838 1038 FE74                  		move.b	($FFFFFE74).w,d0
0000E83C 0828 0003 0028             		btst	#3,$28(a0)
0000E842 6700                       		beq.s	loc_E8A8
0000E844 4440                       		neg.w	d0
0000E846 0640 0010                  		addi.w	#$10,d0
0000E84A                            
0000E84A                            loc_E8A8:
0000E84A 3228 0030                  		move.w	$30(a0),d1
0000E84E 9240                       		sub.w	d0,d1
0000E850 3141 000C                  		move.w	d1,$C(a0)	; update the block's position to make it wobble
0000E854 4E75                       		rts	
0000E856                            ; ===========================================================================
0000E856                            
0000E856                            Obj46_Type03:				; XREF: Obj46_TypeIndex
0000E856 6100 ED2E                  		bsr.w	SpeedToPos
0000E85A 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase falling speed
0000E860 6100 0000                  		bsr.w	ObjHitFloor
0000E864 4A41                       		tst.w	d1		; has the block	hit the	floor?
0000E866 6A00 0000                  		bpl.w	locret_E8EE	; if not, branch
0000E86A D368 000C                  		add.w	d1,$C(a0)
0000E86E 4268 0012                  		clr.w	$12(a0)		; stop the block falling
0000E872 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000E878 117C 0004 0028             		move.b	#4,$28(a0)
0000E87E 3011                       		move.w	(a1),d0
0000E880 0240 03FF                  		andi.w	#$3FF,d0
0000E884 0C40 02E8                  		cmpi.w	#$2E8,d0
0000E888 6400                       		bcc.s	locret_E8EE
0000E88A 117C 0000 0028             		move.b	#0,$28(a0)
0000E890                            
0000E890                            locret_E8EE:
0000E890 4E75                       		rts	
0000E892                            ; ===========================================================================
0000E892                            
0000E892                            Obj46_Type04:				; XREF: Obj46_TypeIndex
0000E892 7000                       		moveq	#0,d0
0000E894 1038 FE70                  		move.b	($FFFFFE70).w,d0
0000E898 E648                       		lsr.w	#3,d0
0000E89A 3228 0030                  		move.w	$30(a0),d1
0000E89E 9240                       		sub.w	d0,d1
0000E8A0 3141 000C                  		move.w	d1,$C(a0)	; make the block wobble
0000E8A4 4E75                       		rts	
0000E8A6                            ; ===========================================================================
0000E8A6                            ; ---------------------------------------------------------------------------
0000E8A6                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E8A6                            ; ---------------------------------------------------------------------------
0000E8A6                            Map_obj46:
0000E8A6                            	include "_maps\obj46.asm"
0000E8A6                            ; ---------------------------------------------------------------------------
0000E8A6                            ; Sprite mappings - solid blocks and blocks that fall from the ceiling (MZ)
0000E8A6                            ; ---------------------------------------------------------------------------
0000E8A6 0000                       		dc.w byte_E906-Map_obj46
0000E8A8 01                         byte_E906:	dc.b 1
0000E8A9 F00F 0001 F0               		dc.b $F0, $F, 0, 1, $F0
0000E8AE                            		even
0000E8AE                            		even
0000E8AE                            
0000E8AE                            ; ===========================================================================
0000E8AE                            ; ---------------------------------------------------------------------------
0000E8AE                            ; Object 12 - lamp (SYZ)
0000E8AE                            ; ---------------------------------------------------------------------------
0000E8AE                            
0000E8AE                            Obj12:					; XREF: Obj_Index
0000E8AE 7000                       		moveq	#0,d0
0000E8B0 1028 0024                  		move.b	$24(a0),d0
0000E8B4 323B 0000                  		move.w	Obj12_Index(pc,d0.w),d1
0000E8B8 4EFB 1000                  		jmp	Obj12_Index(pc,d1.w)
0000E8BC                            ; ===========================================================================
0000E8BC 0000                       Obj12_Index:	dc.w Obj12_Main-Obj12_Index
0000E8BE 0000                       		dc.w Obj12_Animate-Obj12_Index
0000E8C0                            ; ===========================================================================
0000E8C0                            
0000E8C0                            Obj12_Main:				; XREF: Obj12_Index
0000E8C0 5428 0024                  		addq.b	#2,$24(a0)
0000E8C4 217C 0000 0000 0004        		move.l	#Map_obj12,4(a0)
0000E8CC 317C 0000 0002             		move.w	#0,2(a0)
0000E8D2 117C 0004 0001             		move.b	#4,1(a0)
0000E8D8 117C 0010 0019             		move.b	#$10,$19(a0)
0000E8DE 117C 0006 0018             		move.b	#6,$18(a0)
0000E8E4                            
0000E8E4                            Obj12_Animate:				; XREF: Obj12_Index
0000E8E4 5328 001E                  		subq.b	#1,$1E(a0)
0000E8E8 6A00                       		bpl.s	Obj12_ChkDel
0000E8EA 117C 0007 001E             		move.b	#7,$1E(a0)
0000E8F0 5228 001A                  		addq.b	#1,$1A(a0)
0000E8F4 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
0000E8FA 6500                       		bcs.s	Obj12_ChkDel
0000E8FC 117C 0000 001A             		move.b	#0,$1A(a0)
0000E902                            
0000E902                            Obj12_ChkDel:
0000E902 3028 0008                  		move.w	8(a0),d0
0000E906 0240 FF80                  		andi.w	#$FF80,d0
0000E90A 3238 F700                  		move.w	($FFFFF700).w,d1
0000E90E 0441 0080                  		subi.w	#$80,d1
0000E912 0241 FF80                  		andi.w	#$FF80,d1
0000E916 9041                       		sub.w	d1,d0
0000E918 0C40 0280                  		cmpi.w	#$280,d0
0000E91C 6200 ECCA                  		bhi.w	DeleteObject
0000E920 6000 EC8A                  		bra.w	DisplaySprite
0000E924                            ; ===========================================================================
0000E924                            ; ---------------------------------------------------------------------------
0000E924                            ; Sprite mappings - lamp (SYZ)
0000E924                            ; ---------------------------------------------------------------------------
0000E924                            Map_obj12:
0000E924                            	include "_maps\obj12.asm"
0000E924                            ; ---------------------------------------------------------------------------
0000E924                            ; Sprite mappings - lamp (SYZ)
0000E924                            ; ---------------------------------------------------------------------------
0000E924 0000 0000                  		dc.w byte_E98E-Map_obj12, byte_E999-Map_obj12
0000E928 0000 0000                  		dc.w byte_E9A4-Map_obj12, byte_E9AF-Map_obj12
0000E92C 0000 0000                  		dc.w byte_E9BA-Map_obj12, byte_E9C5-Map_obj12
0000E930 02                         byte_E98E:	dc.b 2
0000E931 F80C 0031 F0               		dc.b $F8, $C, 0, $31, $F0
0000E936 000C 1031 F0               		dc.b 0,	$C, $10, $31, $F0
0000E93B 02                         byte_E999:	dc.b 2
0000E93C F80C 0035 F0               		dc.b $F8, $C, 0, $35, $F0
0000E941 000C 1035 F0               		dc.b 0,	$C, $10, $35, $F0
0000E946 02                         byte_E9A4:	dc.b 2
0000E947 F80C 0039 F0               		dc.b $F8, $C, 0, $39, $F0
0000E94C 000C 1039 F0               		dc.b 0,	$C, $10, $39, $F0
0000E951 02                         byte_E9AF:	dc.b 2
0000E952 F80C 003D F0               		dc.b $F8, $C, 0, $3D, $F0
0000E957 000C 103D F0               		dc.b 0,	$C, $10, $3D, $F0
0000E95C 02                         byte_E9BA:	dc.b 2
0000E95D F80C 0041 F0               		dc.b $F8, $C, 0, $41, $F0
0000E962 000C 1041 F0               		dc.b 0,	$C, $10, $41, $F0
0000E967 02                         byte_E9C5:	dc.b 2
0000E968 F80C 0045 F0               		dc.b $F8, $C, 0, $45, $F0
0000E96D 000C 1045 F0               		dc.b 0,	$C, $10, $45, $F0
0000E972                            		even
0000E972                            		even
0000E972                            
0000E972                            ; ===========================================================================
0000E972                            ; ---------------------------------------------------------------------------
0000E972                            ; Object 47 - pinball bumper (SYZ)
0000E972                            ; ---------------------------------------------------------------------------
0000E972                            
0000E972                            Obj47:					; XREF: Obj_Index
0000E972 7000                       		moveq	#0,d0
0000E974 1028 0024                  		move.b	$24(a0),d0
0000E978 323B 0000                  		move.w	Obj47_Index(pc,d0.w),d1
0000E97C 4EFB 1000                  		jmp	Obj47_Index(pc,d1.w)
0000E980                            ; ===========================================================================
0000E980 0000                       Obj47_Index:	dc.w Obj47_Main-Obj47_Index
0000E982 0000                       		dc.w Obj47_Hit-Obj47_Index
0000E984                            ; ===========================================================================
0000E984                            
0000E984                            Obj47_Main:				; XREF: Obj47_Index
0000E984 5428 0024                  		addq.b	#2,$24(a0)
0000E988 217C 0000 0000 0004        		move.l	#Map_obj47,4(a0)
0000E990 317C 0380 0002             		move.w	#$380,2(a0)
0000E996 117C 0004 0001             		move.b	#4,1(a0)
0000E99C 117C 0010 0019             		move.b	#$10,$19(a0)
0000E9A2 117C 0001 0018             		move.b	#1,$18(a0)
0000E9A8 117C 00D7 0020             		move.b	#$D7,$20(a0)
0000E9AE                            
0000E9AE                            Obj47_Hit:				; XREF: Obj47_Index
0000E9AE 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	bumper?
0000E9B2 6700 0000                  		beq.w	Obj47_Display	; if not, branch
0000E9B6 4228 0021                  		clr.b	$21(a0)
0000E9BA 43F8 D000                  		lea	($FFFFD000).w,a1
0000E9BE 3228 0008                  		move.w	8(a0),d1
0000E9C2 3428 000C                  		move.w	$C(a0),d2
0000E9C6 9269 0008                  		sub.w	8(a1),d1
0000E9CA 9469 000C                  		sub.w	$C(a1),d2
0000E9CE 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0000E9D4 4EB9 0000 29DA             		jsr	(CalcSine).l
0000E9DA C3FC F900                  		muls.w	#-$700,d1
0000E9DE E081                       		asr.l	#8,d1
0000E9E0 3341 0010                  		move.w	d1,$10(a1)	; bounce Sonic away
0000E9E4 C1FC F900                  		muls.w	#-$700,d0
0000E9E8 E080                       		asr.l	#8,d0
0000E9EA 3340 0012                  		move.w	d0,$12(a1)	; bounce Sonic away
0000E9EE 08E9 0001 0022             		bset	#1,$22(a1)
0000E9F4 08A9 0004 0022             		bclr	#4,$22(a1)
0000E9FA 08A9 0005 0022             		bclr	#5,$22(a1)
0000EA00 4229 003C                  		clr.b	$3C(a1)
0000EA04 117C 0001 001C             		move.b	#1,$1C(a0)
0000EA0A 303C 00B4                  		move.w	#$B4,d0
0000EA0E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bumper sound
0000EA14 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA18 7000                       		moveq	#0,d0
0000EA1A 1028 0023                  		move.b	$23(a0),d0
0000EA1E 6700                       		beq.s	Obj47_Score
0000EA20 0C32 008A 0002             		cmpi.b	#$8A,2(a2,d0.w)	; has bumper been hit $8A times?
0000EA26 6400                       		bcc.s	Obj47_Display	; if yes, Sonic	gets no	points
0000EA28 5232 0002                  		addq.b	#1,2(a2,d0.w)
0000EA2C                            
0000EA2C                            Obj47_Score:
0000EA2C 7001                       		moveq	#1,d0
0000EA2E 4EB9 0000 0000             		jsr	AddPoints	; add 10 to score
0000EA34 6100 EFFC                  		bsr.w	SingleObjLoad
0000EA38 6600                       		bne.s	Obj47_Display
0000EA3A 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000EA3E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EA44 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EA4A 137C 0004 001A             		move.b	#4,$1A(a1)
0000EA50                            
0000EA50                            Obj47_Display:
0000EA50 43F9 0000 0000             		lea	(Ani_obj47).l,a1
0000EA56 6100 BC80                  		bsr.w	AnimateSprite
0000EA5A 3028 0008                  		move.w	8(a0),d0
0000EA5E 0240 FF80                  		andi.w	#$FF80,d0
0000EA62 3238 F700                  		move.w	($FFFFF700).w,d1
0000EA66 0441 0080                  		subi.w	#$80,d1
0000EA6A 0241 FF80                  		andi.w	#$FF80,d1
0000EA6E 9041                       		sub.w	d1,d0
0000EA70 0C40 0280                  		cmpi.w	#$280,d0
0000EA74 6200                       		bhi.s	Obj47_ChkHit
0000EA76 6000 EB34                  		bra.w	DisplaySprite
0000EA7A                            ; ===========================================================================
0000EA7A                            
0000EA7A                            Obj47_ChkHit:				; XREF: Obj47_Display
0000EA7A 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000EA7E 7000                       		moveq	#0,d0
0000EA80 1028 0023                  		move.b	$23(a0),d0
0000EA84 6700                       		beq.s	Obj47_Delete
0000EA86 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000EA8C                            
0000EA8C                            Obj47_Delete:
0000EA8C 6000 EB5A                  		bra.w	DeleteObject
0000EA90                            ; ===========================================================================
0000EA90                            Ani_obj47:
0000EA90                            	include "_anim\obj47.asm"
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90                            ; Animation script - flamethrower (SBZ)
0000EA90                            ; ---------------------------------------------------------------------------
0000EA90 0000                       		dc.w byte_EAF4-Ani_obj47
0000EA92 0000                       		dc.w byte_EAF8-Ani_obj47
0000EA94 0F00 FF00                  byte_EAF4:	dc.b $F, 0, $FF, 0
0000EA98 0301 0201 02FD 0000        byte_EAF8:	dc.b 3,	1, 2, 1, 2, $FD, 0, 0
0000EAA0                            		even
0000EAA0                            		even
0000EAA0                            
0000EAA0                            ; ---------------------------------------------------------------------------
0000EAA0                            ; Sprite mappings - pinball bumper (SYZ)
0000EAA0                            ; ---------------------------------------------------------------------------
0000EAA0                            Map_obj47:
0000EAA0                            	include "_maps\obj47.asm"
0000EAA0                            ; ---------------------------------------------------------------------------
0000EAA0                            ; Sprite mappings - pinball bumper (SYZ)
0000EAA0                            ; ---------------------------------------------------------------------------
0000EAA0 0000                       		dc.w byte_EB06-Map_obj47
0000EAA2 0000                       		dc.w byte_EB11-Map_obj47
0000EAA4 0000                       		dc.w byte_EB1C-Map_obj47
0000EAA6 02                         byte_EB06:	dc.b 2
0000EAA7 F007 0000 F0               		dc.b $F0, 7, 0,	0, $F0
0000EAAC F007 0800 00               		dc.b $F0, 7, 8,	0, 0
0000EAB1 02                         byte_EB11:	dc.b 2
0000EAB2 F406 0008 F4               		dc.b $F4, 6, 0,	8, $F4
0000EAB7 F402 0808 04               		dc.b $F4, 2, 8,	8, 4
0000EABC 02                         byte_EB1C:	dc.b 2
0000EABD F007 000E F0               		dc.b $F0, 7, 0,	$E, $F0
0000EAC2 F007 080E 00               		dc.b $F0, 7, 8,	$E, 0
0000EAC8 00                         		even
0000EAC8 00                         		even
0000EAC8                            
0000EAC8                            ; ===========================================================================
0000EAC8                            ; ---------------------------------------------------------------------------
0000EAC8                            ; Object 0D - signpost at the end of a level
0000EAC8                            ; ---------------------------------------------------------------------------
0000EAC8                            
0000EAC8                            Obj0D:					; XREF: Obj_Index
0000EAC8 7000                       		moveq	#0,d0
0000EACA 1028 0024                  		move.b	$24(a0),d0
0000EACE 323B 0000                  		move.w	Obj0D_Index(pc,d0.w),d1
0000EAD2 4EBB 1000                  		jsr	Obj0D_Index(pc,d1.w)
0000EAD6 43F9 0000 0000             		lea	(Ani_obj0D).l,a1
0000EADC 6100 BBFA                  		bsr.w	AnimateSprite
0000EAE0 6100 EACA                  		bsr.w	DisplaySprite
0000EAE4 3028 0008                  		move.w	8(a0),d0
0000EAE8 0240 FF80                  		andi.w	#$FF80,d0
0000EAEC 3238 F700                  		move.w	($FFFFF700).w,d1
0000EAF0 0441 0080                  		subi.w	#$80,d1
0000EAF4 0241 FF80                  		andi.w	#$FF80,d1
0000EAF8 9041                       		sub.w	d1,d0
0000EAFA 0C40 0280                  		cmpi.w	#$280,d0
0000EAFE 6200 EAE8                  		bhi.w	DeleteObject
0000EB02 4E75                       		rts	
0000EB04                            ; ===========================================================================
0000EB04 0000                       Obj0D_Index:	dc.w Obj0D_Main-Obj0D_Index
0000EB06 0000                       		dc.w Obj0D_Touch-Obj0D_Index
0000EB08 0000                       		dc.w Obj0D_Spin-Obj0D_Index
0000EB0A 0000                       		dc.w Obj0D_SonicRun-Obj0D_Index
0000EB0C 0000                       		dc.w locret_ED1A-Obj0D_Index
0000EB0E                            ; ===========================================================================
0000EB0E                            
0000EB0E                            Obj0D_Main:				; XREF: Obj0D_Index
0000EB0E 5428 0024                  		addq.b	#2,$24(a0)
0000EB12 217C 0000 0000 0004        		move.l	#Map_obj0D,4(a0)
0000EB1A 317C 0680 0002             		move.w	#$680,2(a0)
0000EB20 117C 0004 0001             		move.b	#4,1(a0)
0000EB26 117C 0018 0019             		move.b	#$18,$19(a0)
0000EB2C 117C 0004 0018             		move.b	#4,$18(a0)
0000EB32                            
0000EB32                            Obj0D_Touch:				; XREF: Obj0D_Index
0000EB32 3038 D008                  		move.w	($FFFFD008).w,d0
0000EB36 9068 0008                  		sub.w	8(a0),d0
0000EB3A 6500                       		bcs.s	locret_EBBA
0000EB3C 0C40 0020                  		cmpi.w	#$20,d0		; is Sonic within $20 pixels of	the signpost?
0000EB40 6400                       		bcc.s	locret_EBBA	; if not, branch
0000EB42 303C 00CF                  		move.w	#$CF,d0
0000EB46 4EB9 0000 1396             		jsr	(PlaySound).l	; play signpost	sound
0000EB4C 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EB50 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w ; lock screen position
0000EB56 5428 0024                  		addq.b	#2,$24(a0)
0000EB5A                            
0000EB5A                            locret_EBBA:
0000EB5A 4E75                       		rts	
0000EB5C                            ; ===========================================================================
0000EB5C                            
0000EB5C                            Obj0D_Spin:				; XREF: Obj0D_Index
0000EB5C 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from spin time
0000EB60 6A00                       		bpl.s	Obj0D_Sparkle	; if time remains, branch
0000EB62 317C 003C 0030             		move.w	#60,$30(a0)	; set spin cycle time to 1 second
0000EB68 5228 001C                  		addq.b	#1,$1C(a0)	; next spin cycle
0000EB6C 0C28 0003 001C             		cmpi.b	#3,$1C(a0)	; have 3 spin cycles completed?
0000EB72 6600                       		bne.s	Obj0D_Sparkle	; if not, branch
0000EB74 5428 0024                  		addq.b	#2,$24(a0)
0000EB78                            
0000EB78                            Obj0D_Sparkle:
0000EB78 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time delay
0000EB7C 6A00                       		bpl.s	locret_EC42	; if time remains, branch
0000EB7E 317C 000B 0032             		move.w	#$B,$32(a0)	; set time between sparkles to $B frames
0000EB84 7000                       		moveq	#0,d0
0000EB86 1028 0034                  		move.b	$34(a0),d0
0000EB8A 5428 0034                  		addq.b	#2,$34(a0)
0000EB8E 0228 000E 0034             		andi.b	#$E,$34(a0)
0000EB94 45FB 0000                  		lea	Obj0D_SparkPos(pc,d0.w),a2 ; load sparkle position data
0000EB98 6100 EE98                  		bsr.w	SingleObjLoad
0000EB9C 6600                       		bne.s	locret_EC42
0000EB9E 12BC 0025                  		move.b	#$25,0(a1)	; load rings object
0000EBA2 137C 0006 0024             		move.b	#6,$24(a1)	; jump to ring sparkle subroutine
0000EBA8 101A                       		move.b	(a2)+,d0
0000EBAA 4880                       		ext.w	d0
0000EBAC D068 0008                  		add.w	8(a0),d0
0000EBB0 3340 0008                  		move.w	d0,8(a1)
0000EBB4 101A                       		move.b	(a2)+,d0
0000EBB6 4880                       		ext.w	d0
0000EBB8 D068 000C                  		add.w	$C(a0),d0
0000EBBC 3340 000C                  		move.w	d0,$C(a1)
0000EBC0 237C 0000 9F56 0004        		move.l	#Map_obj25,4(a1)
0000EBC8 337C 27B2 0002             		move.w	#$27B2,2(a1)
0000EBCE 137C 0004 0001             		move.b	#4,1(a1)
0000EBD4 137C 0002 0018             		move.b	#2,$18(a1)
0000EBDA 137C 0008 0019             		move.b	#8,$19(a1)
0000EBE0                            
0000EBE0                            locret_EC42:
0000EBE0 4E75                       		rts	
0000EBE2                            ; ===========================================================================
0000EBE2 E8F0                       Obj0D_SparkPos:	dc.b -$18,-$10		; x-position, y-position
0000EBE4 0808                       		dc.b	8,   8
0000EBE6 F000                       		dc.b -$10,   0
0000EBE8 18F8                       		dc.b  $18,  -8
0000EBEA 00F8                       		dc.b	0,  -8
0000EBEC 1000                       		dc.b  $10,   0
0000EBEE E808                       		dc.b -$18,   8
0000EBF0 1810                       		dc.b  $18, $10
0000EBF2                            ; ===========================================================================
0000EBF2                            
0000EBF2                            Obj0D_SonicRun:				; XREF: Obj0D_Index
0000EBF2 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
0000EBF6 6600 0000                  		bne.w	locret_ECEE	; if yes, branch
0000EBFA 0838 0001 D022             		btst	#1,($FFFFD022).w
0000EC00 6600                       		bne.s	loc_EC70
0000EC02 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0000EC08 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0000EC0E                            
0000EC0E                            loc_EC70:
0000EC0E 4A38 D000                  		tst.b	($FFFFD000).w
0000EC12 6700                       		beq.s	loc_EC86
0000EC14 3038 D008                  		move.w	($FFFFD008).w,d0
0000EC18 3238 F72A                  		move.w	($FFFFF72A).w,d1
0000EC1C 0641 0128                  		addi.w	#$128,d1
0000EC20 B041                       		cmp.w	d1,d0
0000EC22 6500                       		bcs.s	locret_ECEE
0000EC24                            
0000EC24                            loc_EC86:
0000EC24 5428 0024                  		addq.b	#2,$24(a0)
0000EC28                            
0000EC28                            ; ---------------------------------------------------------------------------
0000EC28                            ; Subroutine to	set up bonuses at the end of an	act
0000EC28                            ; ---------------------------------------------------------------------------
0000EC28                            
0000EC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000EC28                            
0000EC28                            
0000EC28                            GotThroughAct:				; XREF: Obj3E_EndAct
0000EC28 4A38 D5C0                  		tst.b	($FFFFD5C0).w
0000EC2C 6600                       		bne.s	locret_ECEE
0000EC2E 31F8 F72A F728             		move.w	($FFFFF72A).w,($FFFFF728).w
0000EC34 4238 FE2D                  		clr.b	($FFFFFE2D).w	; disable invincibility
0000EC38 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0000EC3C 11FC 003A D5C0             		move.b	#$3A,($FFFFD5C0).w
0000EC42 7010                       		moveq	#$10,d0
0000EC44 4EB9 0000 15B2             		jsr	(LoadPLC2).l	; load title card patterns
0000EC4A 11FC 0001 F7D6             		move.b	#1,($FFFFF7D6).w
0000EC50 7000                       		moveq	#0,d0
0000EC52 1038 FE23                  		move.b	($FFFFFE23).w,d0
0000EC56 C0FC 003C                  		mulu.w	#60,d0		; convert minutes to seconds
0000EC5A 7200                       		moveq	#0,d1
0000EC5C 1238 FE24                  		move.b	($FFFFFE24).w,d1
0000EC60 D041                       		add.w	d1,d0		; add up your time
0000EC62 80FC 000F                  		divu.w	#15,d0		; divide by 15
0000EC66 7214                       		moveq	#$14,d1
0000EC68 B041                       		cmp.w	d1,d0		; is time 5 minutes or higher?
0000EC6A 6500                       		bcs.s	loc_ECD0	; if not, branch
0000EC6C 3001                       		move.w	d1,d0		; use minimum time bonus (0)
0000EC6E                            
0000EC6E                            loc_ECD0:
0000EC6E D040                       		add.w	d0,d0
0000EC70 31FB 0000 F7D2             		move.w	TimeBonuses(pc,d0.w),($FFFFF7D2).w ; set time bonus
0000EC76 3038 FE20                  		move.w	($FFFFFE20).w,d0 ; load	number of rings
0000EC7A C0FC 000A                  		mulu.w	#10,d0		; multiply by 10
0000EC7E 31C0 F7D4                  		move.w	d0,($FFFFF7D4).w ; set ring bonus
0000EC82 303C 008E                  		move.w	#$8E,d0
0000EC86 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "Sonic got	through" music
0000EC8C                            
0000EC8C                            locret_ECEE:
0000EC8C 4E75                       		rts	
0000EC8E                            ; End of function GotThroughAct
0000EC8E                            
0000EC8E                            ; ===========================================================================
0000EC8E 1388 1388 03E8 01F4 0190+  TimeBonuses:	dc.w 5000, 5000, 1000, 500, 400, 400, 300, 300,	200, 200
0000ECA2 00C8 00C8 0064 0064 0064+  		dc.w 200, 200, 100, 100, 100, 100, 50, 50, 50, 50, 0
0000ECB8                            ; ===========================================================================
0000ECB8                            
0000ECB8                            locret_ED1A:				; XREF: Obj0D_Index
0000ECB8 4E75                       		rts	
0000ECBA                            ; ===========================================================================
0000ECBA                            Ani_obj0D:
0000ECBA                            	include "_anim\obj0D.asm"
0000ECBA                            ; ---------------------------------------------------------------------------
0000ECBA                            ; Animation script - signpost
0000ECBA                            ; ---------------------------------------------------------------------------
0000ECBA 0000                       		dc.w byte_ED24-Ani_obj0D
0000ECBC 0000                       		dc.w byte_ED28-Ani_obj0D
0000ECBE 0000                       		dc.w byte_ED2E-Ani_obj0D
0000ECC0 0000                       		dc.w byte_ED34-Ani_obj0D
0000ECC2 0F00 FF00                  byte_ED24:	dc.b $F, 0, $FF, 0
0000ECC6 0100 0102 03FF             byte_ED28:	dc.b 1,	0, 1, 2, 3, $FF
0000ECCC 0104 0102 03FF             byte_ED2E:	dc.b 1,	4, 1, 2, 3, $FF
0000ECD2 0F04 FF                    byte_ED34:	dc.b $F, 4, $FF
0000ECD6 00                         		even
0000ECD6 00                         		even
0000ECD6                            
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            ; Sprite mappings - signpost
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            Map_obj0D:
0000ECD6                            	include "_maps\obj0D.asm"
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6                            ; Sprite mappings - signpost
0000ECD6                            ; ---------------------------------------------------------------------------
0000ECD6 0000 0000                  		dc.w byte_ED42-Map_obj0D, byte_ED52-Map_obj0D
0000ECDA 0000 0000                  		dc.w byte_ED5D-Map_obj0D, byte_ED68-Map_obj0D
0000ECDE 0000                       		dc.w byte_ED73-Map_obj0D
0000ECE0 03                         byte_ED42:	dc.b 3
0000ECE1 F00B 0000 E8               		dc.b $F0, $B, 0, 0, $E8
0000ECE6 F00B 0800 00               		dc.b $F0, $B, 8, 0, 0
0000ECEB 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ECF0 02                         byte_ED52:	dc.b 2
0000ECF1 F00F 000C F0               		dc.b $F0, $F, 0, $C, $F0
0000ECF6 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ECFB 02                         byte_ED5D:	dc.b 2
0000ECFC F003 001C FC               		dc.b $F0, 3, 0,	$1C, $FC
0000ED01 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000ED06 02                         byte_ED68:	dc.b 2
0000ED07 F00F 080C F0               		dc.b $F0, $F, 8, $C, $F0
0000ED0C 1001 0838 FC               		dc.b $10, 1, 8,	$38, $FC
0000ED11 03                         byte_ED73:	dc.b 3
0000ED12 F00B 0020 E8               		dc.b $F0, $B, 0, $20, $E8
0000ED17 F00B 002C 00               		dc.b $F0, $B, 0, $2C, 0
0000ED1C 1001 0038 FC               		dc.b $10, 1, 0,	$38, $FC
0000ED22 00                         		even
0000ED22 00                         		even
0000ED22                            
0000ED22                            ; ===========================================================================
0000ED22                            ; ---------------------------------------------------------------------------
0000ED22                            ; Object 4C - lava geyser / lavafall producer (MZ)
0000ED22                            ; ---------------------------------------------------------------------------
0000ED22                            
0000ED22                            Obj4C:					; XREF: Obj_Index
0000ED22 7000                       		moveq	#0,d0
0000ED24 1028 0024                  		move.b	$24(a0),d0
0000ED28 323B 0000                  		move.w	Obj4C_Index(pc,d0.w),d1
0000ED2C 4EBB 1000                  		jsr	Obj4C_Index(pc,d1.w)
0000ED30 6000 0000                  		bra.w	Obj4D_ChkDel
0000ED34                            ; ===========================================================================
0000ED34 0000                       Obj4C_Index:	dc.w Obj4C_Main-Obj4C_Index
0000ED36 0000                       		dc.w loc_EDCC-Obj4C_Index
0000ED38 0000                       		dc.w loc_EE3E-Obj4C_Index
0000ED3A 0000                       		dc.w Obj4C_MakeLava-Obj4C_Index
0000ED3C 0000                       		dc.w Obj4C_Display-Obj4C_Index
0000ED3E 0000                       		dc.w Obj4C_Delete-Obj4C_Index
0000ED40                            ; ===========================================================================
0000ED40                            
0000ED40                            Obj4C_Main:				; XREF: Obj4C_Index
0000ED40 5428 0024                  		addq.b	#2,$24(a0)
0000ED44 217C 0000 0000 0004        		move.l	#Map_obj4C,4(a0)
0000ED4C 317C E3A8 0002             		move.w	#$E3A8,2(a0)
0000ED52 117C 0004 0001             		move.b	#4,1(a0)
0000ED58 117C 0001 0018             		move.b	#1,$18(a0)
0000ED5E 117C 0038 0019             		move.b	#$38,$19(a0)
0000ED64 317C 0078 0034             		move.w	#120,$34(a0)	; set time delay to 2 seconds
0000ED6A                            
0000ED6A                            loc_EDCC:				; XREF: Obj4C_Index
0000ED6A 5368 0032                  		subq.w	#1,$32(a0)
0000ED6E 6A00                       		bpl.s	locret_EDF0
0000ED70 3168 0034 0032             		move.w	$34(a0),$32(a0)
0000ED76 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000ED7A 3228 000C                  		move.w	$C(a0),d1
0000ED7E B041                       		cmp.w	d1,d0
0000ED80 6400                       		bcc.s	locret_EDF0
0000ED82 0441 0170                  		subi.w	#$170,d1
0000ED86 B041                       		cmp.w	d1,d0
0000ED88 6500                       		bcs.s	locret_EDF0
0000ED8A 5428 0024                  		addq.b	#2,$24(a0)
0000ED8E                            
0000ED8E                            locret_EDF0:
0000ED8E 4E75                       		rts	
0000ED90                            ; ===========================================================================
0000ED90                            
0000ED90                            Obj4C_MakeLava:				; XREF: Obj4C_Index
0000ED90 5428 0024                  		addq.b	#2,$24(a0)
0000ED94 6100 ECB2                  		bsr.w	SingleObjLoad2
0000ED98 6600                       		bne.s	loc_EE18
0000ED9A 12BC 004D                  		move.b	#$4D,0(a1)	; load lavafall	object
0000ED9E 3368 0008 0008             		move.w	8(a0),8(a1)
0000EDA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EDAA 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EDB0 2348 003C                  		move.l	a0,$3C(a1)
0000EDB4                            
0000EDB4                            loc_EE18:
0000EDB4 117C 0001 001C             		move.b	#1,$1C(a0)
0000EDBA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EDBE 6700                       		beq.s	Obj4C_Type00	; if yes, branch
0000EDC0 117C 0004 001C             		move.b	#4,$1C(a0)
0000EDC6 6000                       		bra.s	Obj4C_Display
0000EDC8                            ; ===========================================================================
0000EDC8                            
0000EDC8                            Obj4C_Type00:				; XREF: Obj4C_MakeLava
0000EDC8 2268 003C                  		movea.l	$3C(a0),a1	; load geyser object
0000EDCC 08E9 0001 0022             		bset	#1,$22(a1)
0000EDD2 337C FA80 0012             		move.w	#-$580,$12(a1)
0000EDD8 6000                       		bra.s	Obj4C_Display
0000EDDA                            ; ===========================================================================
0000EDDA                            
0000EDDA                            loc_EE3E:				; XREF: Obj4C_Index
0000EDDA 4A28 0028                  		tst.b	$28(a0)		; is object type 00 (geyser) ?
0000EDDE 6700                       		beq.s	Obj4C_Display	; if yes, branch
0000EDE0 5428 0024                  		addq.b	#2,$24(a0)
0000EDE4 4E75                       		rts	
0000EDE6                            ; ===========================================================================
0000EDE6                            
0000EDE6                            Obj4C_Display:				; XREF: Obj4C_Index
0000EDE6 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EDEC 6100 B8EA                  		bsr.w	AnimateSprite
0000EDF0 6100 E7BA                  		bsr.w	DisplaySprite
0000EDF4 4E75                       		rts	
0000EDF6                            ; ===========================================================================
0000EDF6                            
0000EDF6                            Obj4C_Delete:				; XREF: Obj4C_Index
0000EDF6 117C 0000 001C             		move.b	#0,$1C(a0)
0000EDFC 117C 0002 0024             		move.b	#2,$24(a0)
0000EE02 4A28 0028                  		tst.b	$28(a0)
0000EE06 6700 E7E0                  		beq.w	DeleteObject
0000EE0A 4E75                       		rts	
0000EE0C                            ; ===========================================================================
0000EE0C                            ; ---------------------------------------------------------------------------
0000EE0C                            ; Object 4D - lava geyser / lavafall (MZ)
0000EE0C                            ; ---------------------------------------------------------------------------
0000EE0C                            
0000EE0C                            Obj4D:					; XREF: Obj_Index
0000EE0C 7000                       		moveq	#0,d0
0000EE0E 1028 0024                  		move.b	$24(a0),d0
0000EE12 323B 0000                  		move.w	Obj4D_Index(pc,d0.w),d1
0000EE16 4EBB 1000                  		jsr	Obj4D_Index(pc,d1.w)
0000EE1A 6000 E790                  		bra.w	DisplaySprite
0000EE1E                            ; ===========================================================================
0000EE1E 0000                       Obj4D_Index:	dc.w Obj4D_Main-Obj4D_Index
0000EE20 0000                       		dc.w Obj4D_Action-Obj4D_Index
0000EE22 0000                       		dc.w loc_EFFC-Obj4D_Index
0000EE24 0000                       		dc.w Obj4D_Delete-Obj4D_Index
0000EE26                            
0000EE26 FB00 0000                  Obj4D_Speeds:	dc.w $FB00, 0
0000EE2A                            ; ===========================================================================
0000EE2A                            
0000EE2A                            Obj4D_Main:				; XREF: Obj4D_Index
0000EE2A 5428 0024                  		addq.b	#2,$24(a0)
0000EE2E 3168 000C 0030             		move.w	$C(a0),$30(a0)
0000EE34 4A28 0028                  		tst.b	$28(a0)
0000EE38 6700                       		beq.s	loc_EEA4
0000EE3A 0468 0250 000C             		subi.w	#$250,$C(a0)
0000EE40                            
0000EE40                            loc_EEA4:
0000EE40 7000                       		moveq	#0,d0
0000EE42 1028 0028                  		move.b	$28(a0),d0
0000EE46 D040                       		add.w	d0,d0
0000EE48 317B 00DC 0012             		move.w	Obj4D_Speeds(pc,d0.w),$12(a0)
0000EE4E 2248                       		movea.l	a0,a1
0000EE50 7201                       		moveq	#1,d1
0000EE52 6100                       		bsr.s	Obj4D_MakeLava
0000EE54 6000                       		bra.s	loc_EF10
0000EE56                            ; ===========================================================================
0000EE56                            
0000EE56                            Obj4D_Loop:
0000EE56 6100 EBF0                  		bsr.w	SingleObjLoad2
0000EE5A 6600                       		bne.s	loc_EF0A
0000EE5C                            
0000EE5C                            Obj4D_MakeLava:				; XREF: Obj4D_Main
0000EE5C 12BC 004D                  		move.b	#$4D,0(a1)
0000EE60 237C 0000 0000 0004        		move.l	#Map_obj4C,4(a1)
0000EE68 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000EE6E 137C 0004 0001             		move.b	#4,1(a1)
0000EE74 137C 0020 0019             		move.b	#$20,$19(a1)
0000EE7A 3368 0008 0008             		move.w	8(a0),8(a1)
0000EE80 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000EE86 1368 0028 0028             		move.b	$28(a0),$28(a1)
0000EE8C 137C 0001 0018             		move.b	#1,$18(a1)
0000EE92 137C 0005 001C             		move.b	#5,$1C(a1)
0000EE98 4A28 0028                  		tst.b	$28(a0)
0000EE9C 6700                       		beq.s	loc_EF0A
0000EE9E 137C 0002 001C             		move.b	#2,$1C(a1)
0000EEA4                            
0000EEA4                            loc_EF0A:
0000EEA4 51C9 FFB0                  		dbf	d1,Obj4D_Loop
0000EEA8 4E75                       		rts	
0000EEAA                            ; ===========================================================================
0000EEAA                            
0000EEAA                            loc_EF10:				; XREF: Obj4D_Main
0000EEAA 0669 0060 000C             		addi.w	#$60,$C(a1)
0000EEB0 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EEB6 0669 0060 0030             		addi.w	#$60,$30(a1)
0000EEBC 137C 0093 0020             		move.b	#$93,$20(a1)
0000EEC2 137C 0080 0016             		move.b	#$80,$16(a1)
0000EEC8 08E9 0004 0001             		bset	#4,1(a1)
0000EECE 5829 0024                  		addq.b	#4,$24(a1)
0000EED2 2348 003C                  		move.l	a0,$3C(a1)
0000EED6 4A28 0028                  		tst.b	$28(a0)
0000EEDA 6700                       		beq.s	Obj4D_PlaySnd
0000EEDC 7200                       		moveq	#0,d1
0000EEDE 6100 FF76                  		bsr.w	Obj4D_Loop
0000EEE2 5429 0024                  		addq.b	#2,$24(a1)
0000EEE6 08E9 0004 0002             		bset	#4,2(a1)
0000EEEC 0669 0100 000C             		addi.w	#$100,$C(a1)
0000EEF2 137C 0000 0018             		move.b	#0,$18(a1)
0000EEF8 3368 0030 0030             		move.w	$30(a0),$30(a1)
0000EEFE 2368 003C 003C             		move.l	$3C(a0),$3C(a1)
0000EF04 117C 0000 0028             		move.b	#0,$28(a0)
0000EF0A                            
0000EF0A                            Obj4D_PlaySnd:
0000EF0A 303C 00C8                  		move.w	#$C8,d0
0000EF0E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flame sound
0000EF14                            
0000EF14                            Obj4D_Action:				; XREF: Obj4D_Index
0000EF14 7000                       		moveq	#0,d0
0000EF16 1028 0028                  		move.b	$28(a0),d0
0000EF1A D040                       		add.w	d0,d0
0000EF1C 323B 0000                  		move.w	Obj4D_TypeIndex(pc,d0.w),d1
0000EF20 4EBB 1000                  		jsr	Obj4D_TypeIndex(pc,d1.w)
0000EF24 6100 E660                  		bsr.w	SpeedToPos
0000EF28 43F9 0000 0000             		lea	(Ani_obj4C).l,a1
0000EF2E 6100 B7A8                  		bsr.w	AnimateSprite
0000EF32                            
0000EF32                            Obj4D_ChkDel:				; XREF: Obj4C
0000EF32 3028 0008                  		move.w	8(a0),d0
0000EF36 0240 FF80                  		andi.w	#$FF80,d0
0000EF3A 3238 F700                  		move.w	($FFFFF700).w,d1
0000EF3E 0441 0080                  		subi.w	#$80,d1
0000EF42 0241 FF80                  		andi.w	#$FF80,d1
0000EF46 9041                       		sub.w	d1,d0
0000EF48 0C40 0280                  		cmpi.w	#$280,d0
0000EF4C 6200 E69A                  		bhi.w	DeleteObject
0000EF50 4E75                       		rts	
0000EF52                            ; ===========================================================================
0000EF52 0000                       Obj4D_TypeIndex:dc.w Obj4D_Type00-Obj4D_TypeIndex
0000EF54 0000                       		dc.w Obj4D_Type01-Obj4D_TypeIndex
0000EF56                            ; ===========================================================================
0000EF56                            
0000EF56                            Obj4D_Type00:				; XREF: Obj4D_TypeIndex
0000EF56 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000EF5C 3028 0030                  		move.w	$30(a0),d0
0000EF60 B068 000C                  		cmp.w	$C(a0),d0
0000EF64 6400                       		bcc.s	locret_EFDA
0000EF66 5828 0024                  		addq.b	#4,$24(a0)
0000EF6A 2268 003C                  		movea.l	$3C(a0),a1
0000EF6E 137C 0003 001C             		move.b	#3,$1C(a1)
0000EF74                            
0000EF74                            locret_EFDA:
0000EF74 4E75                       		rts	
0000EF76                            ; ===========================================================================
0000EF76                            
0000EF76                            Obj4D_Type01:				; XREF: Obj4D_TypeIndex
0000EF76 0668 0018 0012             		addi.w	#$18,$12(a0)	; increase object's falling speed
0000EF7C 3028 0030                  		move.w	$30(a0),d0
0000EF80 B068 000C                  		cmp.w	$C(a0),d0
0000EF84 6400                       		bcc.s	locret_EFFA
0000EF86 5828 0024                  		addq.b	#4,$24(a0)
0000EF8A 2268 003C                  		movea.l	$3C(a0),a1
0000EF8E 137C 0001 001C             		move.b	#1,$1C(a1)
0000EF94                            
0000EF94                            locret_EFFA:
0000EF94 4E75                       		rts	
0000EF96                            ; ===========================================================================
0000EF96                            
0000EF96                            loc_EFFC:				; XREF: Obj4D_Index
0000EF96 2268 003C                  		movea.l	$3C(a0),a1
0000EF9A 0C29 0006 0024             		cmpi.b	#6,$24(a1)
0000EFA0 6700 0000                  		beq.w	Obj4D_Delete
0000EFA4 3029 000C                  		move.w	$C(a1),d0
0000EFA8 0640 0060                  		addi.w	#$60,d0
0000EFAC 3140 000C                  		move.w	d0,$C(a0)
0000EFB0 9068 0030                  		sub.w	$30(a0),d0
0000EFB4 4440                       		neg.w	d0
0000EFB6 7208                       		moveq	#8,d1
0000EFB8 0C40 0040                  		cmpi.w	#$40,d0
0000EFBC 6C00                       		bge.s	loc_F026
0000EFBE 720B                       		moveq	#$B,d1
0000EFC0                            
0000EFC0                            loc_F026:
0000EFC0 0C40 0080                  		cmpi.w	#$80,d0
0000EFC4 6F00                       		ble.s	loc_F02E
0000EFC6 720E                       		moveq	#$E,d1
0000EFC8                            
0000EFC8                            loc_F02E:
0000EFC8 5328 001E                  		subq.b	#1,$1E(a0)
0000EFCC 6A00                       		bpl.s	loc_F04C
0000EFCE 117C 0007 001E             		move.b	#7,$1E(a0)
0000EFD4 5228 001B                  		addq.b	#1,$1B(a0)
0000EFD8 0C28 0002 001B             		cmpi.b	#2,$1B(a0)
0000EFDE 6500                       		bcs.s	loc_F04C
0000EFE0 117C 0000 001B             		move.b	#0,$1B(a0)
0000EFE6                            
0000EFE6                            loc_F04C:
0000EFE6 1028 001B                  		move.b	$1B(a0),d0
0000EFEA D001                       		add.b	d1,d0
0000EFEC 1140 001A                  		move.b	d0,$1A(a0)
0000EFF0 6000 FF40                  		bra.w	Obj4D_ChkDel
0000EFF4                            ; ===========================================================================
0000EFF4                            
0000EFF4                            Obj4D_Delete:				; XREF: Obj4D_Index
0000EFF4 6000 E5F2                  		bra.w	DeleteObject
0000EFF8                            ; ===========================================================================
0000EFF8                            ; ---------------------------------------------------------------------------
0000EFF8                            ; Object 4E - advancing	wall of	lava (MZ)
0000EFF8                            ; ---------------------------------------------------------------------------
0000EFF8                            
0000EFF8                            Obj4E:					; XREF: Obj_Index
0000EFF8 7000                       		moveq	#0,d0
0000EFFA 1028 0024                  		move.b	$24(a0),d0
0000EFFE 323B 0000                  		move.w	Obj4E_Index(pc,d0.w),d1
0000F002 4EFB 1000                  		jmp	Obj4E_Index(pc,d1.w)
0000F006                            ; ===========================================================================
0000F006 0000                       Obj4E_Index:	dc.w Obj4E_Main-Obj4E_Index
0000F008 0000                       		dc.w Obj4E_Solid-Obj4E_Index
0000F00A 0000                       		dc.w Obj4E_Action-Obj4E_Index
0000F00C 0000                       		dc.w Obj4E_Move2-Obj4E_Index
0000F00E 0000                       		dc.w Obj4E_Delete-Obj4E_Index
0000F010                            ; ===========================================================================
0000F010                            
0000F010                            Obj4E_Main:				; XREF: Obj4E_Index
0000F010 5828 0024                  		addq.b	#4,$24(a0)
0000F014 2248                       		movea.l	a0,a1
0000F016 7201                       		moveq	#1,d1
0000F018 6000                       		bra.s	Obj4E_Main2
0000F01A                            ; ===========================================================================
0000F01A                            
0000F01A                            Obj4E_Loop:
0000F01A 6100 EA2C                  		bsr.w	SingleObjLoad2
0000F01E 6600                       		bne.s	loc_F0C8
0000F020                            
0000F020                            Obj4E_Main2:				; XREF: Obj4E_Main
0000F020 12BC 004E                  		move.b	#$4E,0(a1)	; load object
0000F024 237C 0000 0000 0004        		move.l	#Map_obj4E,4(a1)
0000F02C 337C 63A8 0002             		move.w	#$63A8,2(a1)
0000F032 137C 0004 0001             		move.b	#4,1(a1)
0000F038 137C 0050 0019             		move.b	#$50,$19(a1)
0000F03E 3368 0008 0008             		move.w	8(a0),8(a1)
0000F044 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F04A 137C 0001 0018             		move.b	#1,$18(a1)
0000F050 137C 0000 001C             		move.b	#0,$1C(a1)
0000F056 137C 0094 0020             		move.b	#$94,$20(a1)
0000F05C 2348 003C                  		move.l	a0,$3C(a1)
0000F060                            
0000F060                            loc_F0C8:
0000F060 51C9 FFB8                  		dbf	d1,Obj4E_Loop	; repeat sequence once
0000F064                            
0000F064 5C29 0024                  		addq.b	#6,$24(a1)
0000F068 137C 0004 001A             		move.b	#4,$1A(a1)
0000F06E                            
0000F06E                            Obj4E_Action:				; XREF: Obj4E_Index
0000F06E 3038 D008                  		move.w	($FFFFD008).w,d0
0000F072 9068 0008                  		sub.w	8(a0),d0
0000F076 6400                       		bcc.s	Obj4E_ChkSonic
0000F078 4440                       		neg.w	d0
0000F07A                            
0000F07A                            Obj4E_ChkSonic:
0000F07A 0C40 00C0                  		cmpi.w	#$C0,d0		; is Sonic within $C0 pixels (x-axis)?
0000F07E 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F080 3038 D00C                  		move.w	($FFFFD00C).w,d0
0000F084 9068 000C                  		sub.w	$C(a0),d0
0000F088 6400                       		bcc.s	loc_F0F4
0000F08A 4440                       		neg.w	d0
0000F08C                            
0000F08C                            loc_F0F4:
0000F08C 0C40 0060                  		cmpi.w	#$60,d0		; is Sonic within $60 pixels (y-axis)?
0000F090 6400                       		bcc.s	Obj4E_Move	; if not, branch
0000F092 117C 0001 0036             		move.b	#1,$36(a0)	; set object to	move
0000F098 6000                       		bra.s	Obj4E_Solid
0000F09A                            ; ===========================================================================
0000F09A                            
0000F09A                            Obj4E_Move:				; XREF: Obj4E_ChkSonic
0000F09A 4A28 0036                  		tst.b	$36(a0)		; is object set	to move?
0000F09E 6700                       		beq.s	Obj4E_Solid	; if not, branch
0000F0A0 317C 0180 0010             		move.w	#$180,$10(a0)	; set object speed
0000F0A6 5528 0024                  		subq.b	#2,$24(a0)
0000F0AA                            
0000F0AA                            Obj4E_Solid:				; XREF: Obj4E_Index
0000F0AA 323C 002B                  		move.w	#$2B,d1
0000F0AE 343C 0018                  		move.w	#$18,d2
0000F0B2 3602                       		move.w	d2,d3
0000F0B4 5243                       		addq.w	#1,d3
0000F0B6 3828 0008                  		move.w	8(a0),d4
0000F0BA 1028 0024                  		move.b	$24(a0),d0
0000F0BE 3F00                       		move.w	d0,-(sp)
0000F0C0 6100 0000                  		bsr.w	SolidObject
0000F0C4 301F                       		move.w	(sp)+,d0
0000F0C6 1140 0024                  		move.b	d0,$24(a0)
0000F0CA 0C68 06A0 0008             		cmpi.w	#$6A0,8(a0)	; has object reached $6A0 on the x-axis?
0000F0D0 6600                       		bne.s	Obj4E_Animate	; if not, branch
0000F0D2 4268 0010                  		clr.w	$10(a0)		; stop object moving
0000F0D6 4228 0036                  		clr.b	$36(a0)
0000F0DA                            
0000F0DA                            Obj4E_Animate:
0000F0DA 43F9 0000 0000             		lea	(Ani_obj4E).l,a1
0000F0E0 6100 B5F6                  		bsr.w	AnimateSprite
0000F0E4 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0000F0EA 6400                       		bcc.s	Obj4E_ChkDel
0000F0EC 6100 E498                  		bsr.w	SpeedToPos
0000F0F0                            
0000F0F0                            Obj4E_ChkDel:
0000F0F0 6100 E4BA                  		bsr.w	DisplaySprite
0000F0F4 4A28 0036                  		tst.b	$36(a0)
0000F0F8 6600                       		bne.s	locret_F17E
0000F0FA 3028 0008                  		move.w	8(a0),d0
0000F0FE 0240 FF80                  		andi.w	#$FF80,d0
0000F102 3238 F700                  		move.w	($FFFFF700).w,d1
0000F106 0441 0080                  		subi.w	#$80,d1
0000F10A 0241 FF80                  		andi.w	#$FF80,d1
0000F10E 9041                       		sub.w	d1,d0
0000F110 0C40 0280                  		cmpi.w	#$280,d0
0000F114 6200                       		bhi.s	Obj4E_ChkGone
0000F116                            
0000F116                            locret_F17E:
0000F116 4E75                       		rts	
0000F118                            ; ===========================================================================
0000F118                            
0000F118                            Obj4E_ChkGone:				; XREF: Obj4E_ChkDel
0000F118 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F11C 7000                       		moveq	#0,d0
0000F11E 1028 0023                  		move.b	$23(a0),d0
0000F122 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F128 117C 0008 0024             		move.b	#8,$24(a0)
0000F12E 4E75                       		rts	
0000F130                            ; ===========================================================================
0000F130                            
0000F130                            Obj4E_Move2:				; XREF: Obj4E_Index
0000F130 2268 003C                  		movea.l	$3C(a0),a1
0000F134 0C29 0008 0024             		cmpi.b	#8,$24(a1)
0000F13A 6700                       		beq.s	Obj4E_Delete
0000F13C 3169 0008 0008             		move.w	8(a1),8(a0)	; move rest of lava wall
0000F142 0468 0080 0008             		subi.w	#$80,8(a0)
0000F148 6000 E462                  		bra.w	DisplaySprite
0000F14C                            ; ===========================================================================
0000F14C                            
0000F14C                            Obj4E_Delete:				; XREF: Obj4E_Index
0000F14C 6000 E49A                  		bra.w	DeleteObject
0000F150                            ; ===========================================================================
0000F150                            ; ---------------------------------------------------------------------------
0000F150                            ; Object 54 - invisible	lava tag (MZ)
0000F150                            ; ---------------------------------------------------------------------------
0000F150                            
0000F150                            Obj54:					; XREF: Obj_Index
0000F150 7000                       		moveq	#0,d0
0000F152 1028 0024                  		move.b	$24(a0),d0
0000F156 323B 0000                  		move.w	Obj54_Index(pc,d0.w),d1
0000F15A 4EFB 1000                  		jmp	Obj54_Index(pc,d1.w)
0000F15E                            ; ===========================================================================
0000F15E 0000                       Obj54_Index:	dc.w Obj54_Main-Obj54_Index
0000F160 0000                       		dc.w Obj54_ChkDel-Obj54_Index
0000F162                            
0000F162 9694 9500                  Obj54_Sizes:	dc.b $96, $94, $95, 0
0000F166                            ; ===========================================================================
0000F166                            
0000F166                            Obj54_Main:				; XREF: Obj54_Index
0000F166 5428 0024                  		addq.b	#2,$24(a0)
0000F16A 7000                       		moveq	#0,d0
0000F16C 1028 0028                  		move.b	$28(a0),d0
0000F170 117B 00F0 0020             		move.b	Obj54_Sizes(pc,d0.w),$20(a0)
0000F176 217C 0000 0000 0004        		move.l	#Map_obj54,4(a0)
0000F17E 117C 0084 0001             		move.b	#$84,1(a0)
0000F184                            
0000F184                            Obj54_ChkDel:				; XREF: Obj54_Index
0000F184 3028 0008                  		move.w	8(a0),d0
0000F188 0240 FF80                  		andi.w	#$FF80,d0
0000F18C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F190 0441 0080                  		subi.w	#$80,d1
0000F194 0241 FF80                  		andi.w	#$FF80,d1
0000F198 9041                       		sub.w	d1,d0
0000F19A 6B00 E44C                  		bmi.w	DeleteObject
0000F19E 0C40 0280                  		cmpi.w	#$280,d0
0000F1A2 6200 E444                  		bhi.w	DeleteObject
0000F1A6 4E75                       		rts	
0000F1A8                            ; ===========================================================================
0000F1A8                            ; ---------------------------------------------------------------------------
0000F1A8                            ; Sprite mappings - invisible lava tag (MZ)
0000F1A8                            ; ---------------------------------------------------------------------------
0000F1A8                            Map_obj54:
0000F1A8                            	include "_maps\obj54.asm"
0000F1A8                            ; ---------------------------------------------------------------------------
0000F1A8                            ; Sprite mappings - invisible lava tag (MZ)
0000F1A8                            ; ---------------------------------------------------------------------------
0000F1A8 0000                       		dc.w byte_F212-Map_obj54
0000F1AA 00                         byte_F212:	dc.b 0			; no sprite, because the tag is invisible!
0000F1AC 00                         		even
0000F1AC 00                         		even
0000F1AC                            
0000F1AC                            Ani_obj4C:
0000F1AC                            	include "_anim\obj4C.asm"
0000F1AC                            ; ---------------------------------------------------------------------------
0000F1AC                            ; Animation script - geyser of lava (MZ)
0000F1AC                            ; ---------------------------------------------------------------------------
0000F1AC 0000                       		dc.w byte_F220-Ani_obj4C
0000F1AE 0000                       		dc.w byte_F22A-Ani_obj4C
0000F1B0 0000                       		dc.w byte_F22E-Ani_obj4C
0000F1B2 0000                       		dc.w byte_F232-Ani_obj4C
0000F1B4 0000                       		dc.w byte_F23A-Ani_obj4C
0000F1B6 0000                       		dc.w byte_F23E-Ani_obj4C
0000F1B8 0200 0100 0104 0504 05FC   byte_F220:	dc.b 2,	0, 1, 0, 1, 4, 5, 4, 5,	$FC
0000F1C2 0202 03FF                  byte_F22A:	dc.b 2,	2, 3, $FF
0000F1C6 0206 07FF                  byte_F22E:	dc.b 2,	6, 7, $FF
0000F1CA 0202 0300 0100 01FC        byte_F232:	dc.b 2,	2, 3, 0, 1, 0, 1, $FC
0000F1D2 0F13 FF00                  byte_F23A:	dc.b $F, $13, $FF, 0
0000F1D6 0211 12FF                  byte_F23E:	dc.b 2,	$11, $12, $FF
0000F1DA                            		even
0000F1DA                            		even
0000F1DA                            
0000F1DA                            Ani_obj4E:
0000F1DA                            	include "_anim\obj4E.asm"
0000F1DA                            ; ---------------------------------------------------------------------------
0000F1DA                            ; Animation script - advancing wall of lava (MZ)
0000F1DA                            ; ---------------------------------------------------------------------------
0000F1DA 0000                       		dc.w byte_F244-Ani_obj4E
0000F1DC 0900 0102 03FF             byte_F244:	dc.b 9,	0, 1, 2, 3, $FF
0000F1E2                            		even
0000F1E2                            		even
0000F1E2                            
0000F1E2                            ; ---------------------------------------------------------------------------
0000F1E2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F1E2                            ; ---------------------------------------------------------------------------
0000F1E2                            Map_obj4C:
0000F1E2                            	include "_maps\obj4C.asm"
0000F1E2                            ; ---------------------------------------------------------------------------
0000F1E2                            ; Sprite mappings - lava geyser / lava that falls from the ceiling (MZ)
0000F1E2                            ; ---------------------------------------------------------------------------
0000F1E2 0000 0000                  		dc.w byte_F272-Map_obj4C, byte_F27D-Map_obj4C
0000F1E6 0000 0000                  		dc.w byte_F288-Map_obj4C, byte_F29D-Map_obj4C
0000F1EA 0000 0000                  		dc.w byte_F2B2-Map_obj4C, byte_F2D1-Map_obj4C
0000F1EE 0000 0000                  		dc.w byte_F2F0-Map_obj4C, byte_F2FB-Map_obj4C
0000F1F2 0000 0000                  		dc.w byte_F306-Map_obj4C, byte_F339-Map_obj4C
0000F1F6 0000 0000                  		dc.w byte_F36C-Map_obj4C, byte_F39F-Map_obj4C
0000F1FA 0000 0000                  		dc.w byte_F3BE-Map_obj4C, byte_F3DD-Map_obj4C
0000F1FE 0000 0000                  		dc.w byte_F3FC-Map_obj4C, byte_F44D-Map_obj4C
0000F202 0000 0000                  		dc.w byte_F49E-Map_obj4C, byte_F4EF-Map_obj4C
0000F206 0000 0000                  		dc.w byte_F50E-Map_obj4C, byte_F52D-Map_obj4C
0000F20A 02                         byte_F272:	dc.b 2
0000F20B EC0B 0000 E8               		dc.b $EC, $B, 0, 0, $E8
0000F210 EC0B 0800 00               		dc.b $EC, $B, 8, 0, 0
0000F215 02                         byte_F27D:	dc.b 2
0000F216 EC0B 0018 E8               		dc.b $EC, $B, 0, $18, $E8
0000F21B EC0B 0818 00               		dc.b $EC, $B, 8, $18, 0
0000F220 04                         byte_F288:	dc.b 4
0000F221 EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F226 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F22B F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F230 EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F235 04                         byte_F29D:	dc.b 4
0000F236 EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F23B F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F240 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F245 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F24A 06                         byte_F2B2:	dc.b 6
0000F24B EC0B 0000 C8               		dc.b $EC, $B, 0, 0, $C8
0000F250 F40E 000C E0               		dc.b $F4, $E, 0, $C, $E0
0000F255 F40E 080C 00               		dc.b $F4, $E, 8, $C, 0
0000F25A EC0B 0800 20               		dc.b $EC, $B, 8, 0, $20
0000F25F E80E 0090 E0               		dc.b $E8, $E, 0, $90, $E0
0000F264 E80E 0890 00               		dc.b $E8, $E, 8, $90, 0
0000F269 06                         byte_F2D1:	dc.b 6
0000F26A EC0B 0018 C8               		dc.b $EC, $B, 0, $18, $C8
0000F26F F40E 0024 E0               		dc.b $F4, $E, 0, $24, $E0
0000F274 F40E 0824 00               		dc.b $F4, $E, 8, $24, 0
0000F279 EC0B 0818 20               		dc.b $EC, $B, 8, $18, $20
0000F27E E80E 0890 E0               		dc.b $E8, $E, 8, $90, $E0
0000F283 E80E 0090 00               		dc.b $E8, $E, 0, $90, 0
0000F288 02                         byte_F2F0:	dc.b 2
0000F289 E00F 0030 E0               		dc.b $E0, $F, 0, $30, $E0
0000F28E E00F 0830 00               		dc.b $E0, $F, 8, $30, 0
0000F293 02                         byte_F2FB:	dc.b 2
0000F294 E00F 0830 E0               		dc.b $E0, $F, 8, $30, $E0
0000F299 E00F 0030 00               		dc.b $E0, $F, 0, $30, 0
0000F29E 0A                         byte_F306:	dc.b $A
0000F29F 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F2A4 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F2A9 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F2AE B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F2B3 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F2B8 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F2BD F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F2C2 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F2C7 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F2CC 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F2D1 0A                         byte_F339:	dc.b $A
0000F2D2 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F2D7 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F2DC B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F2E1 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F2E6 D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F2EB D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F2F0 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F2F5 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F2FA 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F2FF 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F304 0A                         byte_F36C:	dc.b $A
0000F305 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F30A 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F30F B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F314 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F319 D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F31E D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F323 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F328 F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F32D 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F332 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F337 06                         byte_F39F:	dc.b 6
0000F338 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F33D 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F342 B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F347 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F34C D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F351 D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F356 06                         byte_F3BE:	dc.b 6
0000F357 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F35C 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F361 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F366 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F36B D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F370 D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F375 06                         byte_F3DD:	dc.b 6
0000F376 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F37B 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F380 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F385 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F38A D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F38F D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F394 10                         byte_F3FC:	dc.b $10
0000F395 900F 0040 E0               		dc.b $90, $F, 0, $40, $E0
0000F39A 900F 0840 00               		dc.b $90, $F, 8, $40, 0
0000F39F B00F 0040 E0               		dc.b $B0, $F, 0, $40, $E0
0000F3A4 B00F 0840 00               		dc.b $B0, $F, 8, $40, 0
0000F3A9 D00F 0040 E0               		dc.b $D0, $F, 0, $40, $E0
0000F3AE D00F 0840 00               		dc.b $D0, $F, 8, $40, 0
0000F3B3 F00F 0040 E0               		dc.b $F0, $F, 0, $40, $E0
0000F3B8 F00F 0840 00               		dc.b $F0, $F, 8, $40, 0
0000F3BD 100F 0040 E0               		dc.b $10, $F, 0, $40, $E0
0000F3C2 100F 0840 00               		dc.b $10, $F, 8, $40, 0
0000F3C7 300F 0040 E0               		dc.b $30, $F, 0, $40, $E0
0000F3CC 300F 0840 00               		dc.b $30, $F, 8, $40, 0
0000F3D1 500F 0040 E0               		dc.b $50, $F, 0, $40, $E0
0000F3D6 500F 0840 00               		dc.b $50, $F, 8, $40, 0
0000F3DB 700F 0040 E0               		dc.b $70, $F, 0, $40, $E0
0000F3E0 700F 0840 00               		dc.b $70, $F, 8, $40, 0
0000F3E5 10                         byte_F44D:	dc.b $10
0000F3E6 900F 0050 E0               		dc.b $90, $F, 0, $50, $E0
0000F3EB 900F 0850 00               		dc.b $90, $F, 8, $50, 0
0000F3F0 B00F 0050 E0               		dc.b $B0, $F, 0, $50, $E0
0000F3F5 B00F 0850 00               		dc.b $B0, $F, 8, $50, 0
0000F3FA D00F 0050 E0               		dc.b $D0, $F, 0, $50, $E0
0000F3FF D00F 0850 00               		dc.b $D0, $F, 8, $50, 0
0000F404 F00F 0050 E0               		dc.b $F0, $F, 0, $50, $E0
0000F409 F00F 0850 00               		dc.b $F0, $F, 8, $50, 0
0000F40E 100F 0050 E0               		dc.b $10, $F, 0, $50, $E0
0000F413 100F 0850 00               		dc.b $10, $F, 8, $50, 0
0000F418 300F 0050 E0               		dc.b $30, $F, 0, $50, $E0
0000F41D 300F 0850 00               		dc.b $30, $F, 8, $50, 0
0000F422 500F 0050 E0               		dc.b $50, $F, 0, $50, $E0
0000F427 500F 0850 00               		dc.b $50, $F, 8, $50, 0
0000F42C 700F 0050 E0               		dc.b $70, $F, 0, $50, $E0
0000F431 700F 0850 00               		dc.b $70, $F, 8, $50, 0
0000F436 10                         byte_F49E:	dc.b $10
0000F437 900F 0060 E0               		dc.b $90, $F, 0, $60, $E0
0000F43C 900F 0860 00               		dc.b $90, $F, 8, $60, 0
0000F441 B00F 0060 E0               		dc.b $B0, $F, 0, $60, $E0
0000F446 B00F 0860 00               		dc.b $B0, $F, 8, $60, 0
0000F44B D00F 0060 E0               		dc.b $D0, $F, 0, $60, $E0
0000F450 D00F 0860 00               		dc.b $D0, $F, 8, $60, 0
0000F455 F00F 0060 E0               		dc.b $F0, $F, 0, $60, $E0
0000F45A F00F 0860 00               		dc.b $F0, $F, 8, $60, 0
0000F45F 100F 0060 E0               		dc.b $10, $F, 0, $60, $E0
0000F464 100F 0860 00               		dc.b $10, $F, 8, $60, 0
0000F469 300F 0060 E0               		dc.b $30, $F, 0, $60, $E0
0000F46E 300F 0860 00               		dc.b $30, $F, 8, $60, 0
0000F473 500F 0060 E0               		dc.b $50, $F, 0, $60, $E0
0000F478 500F 0860 00               		dc.b $50, $F, 8, $60, 0
0000F47D 700F 0060 E0               		dc.b $70, $F, 0, $60, $E0
0000F482 700F 0860 00               		dc.b $70, $F, 8, $60, 0
0000F487 06                         byte_F4EF:	dc.b 6
0000F488 E00B 0000 C8               		dc.b $E0, $B, 0, 0, $C8
0000F48D E80E 000C E0               		dc.b $E8, $E, 0, $C, $E0
0000F492 E80E 080C 00               		dc.b $E8, $E, 8, $C, 0
0000F497 E00B 0800 20               		dc.b $E0, $B, 8, 0, $20
0000F49C D80E 0090 E0               		dc.b $D8, $E, 0, $90, $E0
0000F4A1 D80E 0890 00               		dc.b $D8, $E, 8, $90, 0
0000F4A6 06                         byte_F50E:	dc.b 6
0000F4A7 E00B 0018 C8               		dc.b $E0, $B, 0, $18, $C8
0000F4AC E80E 0024 E0               		dc.b $E8, $E, 0, $24, $E0
0000F4B1 E80E 0824 00               		dc.b $E8, $E, 8, $24, 0
0000F4B6 E00B 0818 20               		dc.b $E0, $B, 8, $18, $20
0000F4BB D80E 0890 E0               		dc.b $D8, $E, 8, $90, $E0
0000F4C0 D80E 0090 00               		dc.b $D8, $E, 0, $90, 0
0000F4C5 00                         byte_F52D:	dc.b 0
0000F4C6                            		even
0000F4C6                            		even
0000F4C6                            
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6                            ; Sprite mappings - advancing wall of lava (MZ)
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6                            Map_obj4E:
0000F4C6                            	include "_maps\obj4E.asm"
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6                            ; Sprite mappings - advancing wall of lava (MZ)
0000F4C6                            ; ---------------------------------------------------------------------------
0000F4C6 0000                       		dc.w byte_F538-Map_obj4E
0000F4C8 0000                       		dc.w byte_F566-Map_obj4E
0000F4CA 0000                       		dc.w byte_F594-Map_obj4E
0000F4CC 0000                       		dc.w byte_F5C2-Map_obj4E
0000F4CE 0000                       		dc.w byte_F5F0-Map_obj4E
0000F4D0 09                         byte_F538:	dc.b 9
0000F4D1 E00F 0060 20               		dc.b $E0, $F, 0, $60, $20
0000F4D6 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F4DB 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F4E0 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F4E5 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F4EA E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F4EF 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F4F4 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F4F9 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F4FE 09                         byte_F566:	dc.b 9
0000F4FF E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F504 000F 0080 3C               		dc.b 0,	$F, 0, $80, $3C
0000F509 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F50E E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F513 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F518 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F51D 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F522 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F527 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F52C 09                         byte_F594:	dc.b 9
0000F52D E00F 0080 20               		dc.b $E0, $F, 0, $80, $20
0000F532 000F 0070 3C               		dc.b 0,	$F, 0, $70, $3C
0000F537 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F53C E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F541 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F546 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F54B 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F550 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F555 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F55A 09                         byte_F5C2:	dc.b 9
0000F55B E00F 0070 20               		dc.b $E0, $F, 0, $70, $20
0000F560 000F 0060 3C               		dc.b 0,	$F, 0, $60, $3C
0000F565 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F56A E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F56F 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F574 E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F579 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F57E E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F583 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F588 08                         byte_F5F0:	dc.b 8
0000F589 E00F FF2A 20               		dc.b $E0, $F, $FF, $2A,	$20
0000F58E 000F FF2A 20               		dc.b 0,	$F, $FF, $2A, $20
0000F593 E00F FF2A 00               		dc.b $E0, $F, $FF, $2A,	0
0000F598 000F FF2A 00               		dc.b 0,	$F, $FF, $2A, 0
0000F59D E00F FF2A E0               		dc.b $E0, $F, $FF, $2A,	$E0
0000F5A2 000F FF2A E0               		dc.b 0,	$F, $FF, $2A, $E0
0000F5A7 E00F FF2A C0               		dc.b $E0, $F, $FF, $2A,	$C0
0000F5AC 000F FF2A C0               		dc.b 0,	$F, $FF, $2A, $C0
0000F5B2 00                         		even
0000F5B2 00                         		even
0000F5B2                            
0000F5B2                            ; ===========================================================================
0000F5B2                            ; ---------------------------------------------------------------------------
0000F5B2                            ; Object 40 - Moto Bug enemy (GHZ)
0000F5B2                            ; ---------------------------------------------------------------------------
0000F5B2                            
0000F5B2                            Obj40:					; XREF: Obj_Index
0000F5B2 7000                       		moveq	#0,d0
0000F5B4 1028 0024                  		move.b	$24(a0),d0
0000F5B8 323B 0000                  		move.w	Obj40_Index(pc,d0.w),d1
0000F5BC 4EFB 1000                  		jmp	Obj40_Index(pc,d1.w)
0000F5C0                            ; ===========================================================================
0000F5C0 0000                       Obj40_Index:	dc.w Obj40_Main-Obj40_Index
0000F5C2 0000                       		dc.w Obj40_Action-Obj40_Index
0000F5C4 0000                       		dc.w Obj40_Animate-Obj40_Index
0000F5C6 0000                       		dc.w Obj40_Delete-Obj40_Index
0000F5C8                            ; ===========================================================================
0000F5C8                            
0000F5C8                            Obj40_Main:				; XREF: Obj40_Index
0000F5C8 217C 0000 0000 0004        		move.l	#Map_obj40,4(a0)
0000F5D0 317C 04F0 0002             		move.w	#$4F0,2(a0)
0000F5D6 117C 0004 0001             		move.b	#4,1(a0)
0000F5DC 117C 0004 0018             		move.b	#4,$18(a0)
0000F5E2 117C 0014 0019             		move.b	#$14,$19(a0)
0000F5E8 4A28 001C                  		tst.b	$1C(a0)		; is object a smoke trail?
0000F5EC 6600                       		bne.s	Obj40_SetSmoke	; if yes, branch
0000F5EE 117C 000E 0016             		move.b	#$E,$16(a0)
0000F5F4 117C 0008 0017             		move.b	#8,$17(a0)
0000F5FA 117C 000C 0020             		move.b	#$C,$20(a0)
0000F600 6100 DF58                  		bsr.w	ObjectFall
0000F604 4EB9 0000 0000             		jsr	ObjHitFloor
0000F60A 4A41                       		tst.w	d1
0000F60C 6A00                       		bpl.s	locret_F68A
0000F60E D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F612 317C 0000 0012             		move.w	#0,$12(a0)
0000F618 5428 0024                  		addq.b	#2,$24(a0)
0000F61C 0868 0000 0022             		bchg	#0,$22(a0)
0000F622                            
0000F622                            locret_F68A:
0000F622 4E75                       		rts	
0000F624                            ; ===========================================================================
0000F624                            
0000F624                            Obj40_SetSmoke:				; XREF: Obj40_Main
0000F624 5828 0024                  		addq.b	#4,$24(a0)
0000F628 6000 0000                  		bra.w	Obj40_Animate
0000F62C                            ; ===========================================================================
0000F62C                            
0000F62C                            Obj40_Action:				; XREF: Obj40_Index
0000F62C 7000                       		moveq	#0,d0
0000F62E 1028 0025                  		move.b	$25(a0),d0
0000F632 323B 0000                  		move.w	Obj40_Index2(pc,d0.w),d1
0000F636 4EBB 1000                  		jsr	Obj40_Index2(pc,d1.w)
0000F63A 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F640 6100 B096                  		bsr.w	AnimateSprite
0000F644                            
0000F644                            ; ---------------------------------------------------------------------------
0000F644                            ; Routine to mark an enemy/monitor/ring	as destroyed
0000F644                            ; ---------------------------------------------------------------------------
0000F644                            
0000F644                            MarkObjGone:
0000F644 3028 0008                  		move.w	8(a0),d0
0000F648 0240 FF80                  		andi.w	#$FF80,d0
0000F64C 3238 F700                  		move.w	($FFFFF700).w,d1
0000F650 0441 0080                  		subi.w	#$80,d1
0000F654 0241 FF80                  		andi.w	#$FF80,d1
0000F658 9041                       		sub.w	d1,d0
0000F65A 0C40 0280                  		cmpi.w	#$280,d0
0000F65E 6200 0000                  		bhi.w	Mark_ChkGone
0000F662 6000 DF48                  		bra.w	DisplaySprite
0000F666                            ; ===========================================================================
0000F666                            
0000F666                            Mark_ChkGone:
0000F666 45F8 FC00                  		lea	($FFFFFC00).w,a2
0000F66A 7000                       		moveq	#0,d0
0000F66C 1028 0023                  		move.b	$23(a0),d0
0000F670 6700                       		beq.s	Mark_Delete
0000F672 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
0000F678                            
0000F678                            Mark_Delete:
0000F678 6000 DF6E                  		bra.w	DeleteObject
0000F67C                            
0000F67C                            ; ===========================================================================
0000F67C 0000                       Obj40_Index2:	dc.w Obj40_Move-Obj40_Index2
0000F67E 0000                       		dc.w Obj40_FixToFloor-Obj40_Index2
0000F680                            ; ===========================================================================
0000F680                            
0000F680                            Obj40_Move:				; XREF: Obj40_Index2
0000F680 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F684 6A00                       		bpl.s	locret_F70A	; if time remains, branch
0000F686 5428 0025                  		addq.b	#2,$25(a0)
0000F68A 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object to the left
0000F690 117C 0001 001C             		move.b	#1,$1C(a0)
0000F696 0868 0000 0022             		bchg	#0,$22(a0)
0000F69C 6600                       		bne.s	locret_F70A
0000F69E 4468 0010                  		neg.w	$10(a0)		; change direction
0000F6A2                            
0000F6A2                            locret_F70A:
0000F6A2 4E75                       		rts	
0000F6A4                            ; ===========================================================================
0000F6A4                            
0000F6A4                            Obj40_FixToFloor:			; XREF: Obj40_Index2
0000F6A4 6100 DEE0                  		bsr.w	SpeedToPos
0000F6A8 4EB9 0000 0000             		jsr	ObjHitFloor
0000F6AE 0C41 FFF8                  		cmpi.w	#-8,d1
0000F6B2 6D00                       		blt.s	Obj40_Pause
0000F6B4 0C41 000C                  		cmpi.w	#$C,d1
0000F6B8 6C00                       		bge.s	Obj40_Pause
0000F6BA D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F6BE 5328 0033                  		subq.b	#1,$33(a0)
0000F6C2 6A00                       		bpl.s	locret_F756
0000F6C4 117C 000F 0033             		move.b	#$F,$33(a0)
0000F6CA 6100 E366                  		bsr.w	SingleObjLoad
0000F6CE 6600                       		bne.s	locret_F756
0000F6D0 12BC 0040                  		move.b	#$40,0(a1)	; load exhaust smoke object
0000F6D4 3368 0008 0008             		move.w	8(a0),8(a1)
0000F6DA 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000F6E0 1368 0022 0022             		move.b	$22(a0),$22(a1)
0000F6E6 137C 0002 001C             		move.b	#2,$1C(a1)
0000F6EC                            
0000F6EC                            locret_F756:
0000F6EC 4E75                       		rts	
0000F6EE                            ; ===========================================================================
0000F6EE                            
0000F6EE                            Obj40_Pause:				; XREF: Obj40_FixToFloor
0000F6EE 5528 0025                  		subq.b	#2,$25(a0)
0000F6F2 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F6F8 317C 0000 0010             		move.w	#0,$10(a0)	; stop the object moving
0000F6FE 117C 0000 001C             		move.b	#0,$1C(a0)
0000F704 4E75                       		rts	
0000F706                            ; ===========================================================================
0000F706                            
0000F706                            Obj40_Animate:				; XREF: Obj40_Index
0000F706 43F9 0000 0000             		lea	(Ani_obj40).l,a1
0000F70C 6100 AFCA                  		bsr.w	AnimateSprite
0000F710 6000 DE9A                  		bra.w	DisplaySprite
0000F714                            ; ===========================================================================
0000F714                            
0000F714                            Obj40_Delete:				; XREF: Obj40_Index
0000F714 6000 DED2                  		bra.w	DeleteObject
0000F718                            ; ===========================================================================
0000F718                            Ani_obj40:
0000F718                            	include "_anim\obj40.asm"
0000F718                            ; ---------------------------------------------------------------------------
0000F718                            ; Animation script - Motobug enemy
0000F718                            ; ---------------------------------------------------------------------------
0000F718 0000                       		dc.w byte_F788-Ani_obj40
0000F71A 0000                       		dc.w byte_F78C-Ani_obj40
0000F71C 0000                       		dc.w byte_F792-Ani_obj40
0000F71E 0F02 FF00                  byte_F788:	dc.b $F, 2, $FF, 0
0000F722 0700 0100 02FF             byte_F78C:	dc.b 7,	0, 1, 0, 2, $FF
0000F728 0103 0603 0604 0604 0604+  byte_F792:	dc.b 1,	3, 6, 3, 6, 4, 6, 4, 6,	4, 6, 5, $FC, 0
0000F736                            		even
0000F736                            		even
0000F736                            
0000F736                            ; ---------------------------------------------------------------------------
0000F736                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F736                            ; ---------------------------------------------------------------------------
0000F736                            Map_obj40:
0000F736                            	include "_maps\obj40.asm"
0000F736                            ; ---------------------------------------------------------------------------
0000F736                            ; Sprite mappings - Moto Bug enemy (GHZ)
0000F736                            ; ---------------------------------------------------------------------------
0000F736 0000 0000                  		dc.w byte_F7AE-Map_obj40, byte_F7C3-Map_obj40
0000F73A 0000 0000                  		dc.w byte_F7D8-Map_obj40, byte_F7F2-Map_obj40
0000F73E 0000 0000                  		dc.w byte_F7F8-Map_obj40, byte_F7FE-Map_obj40
0000F742 0000                       		dc.w byte_F804-Map_obj40
0000F744 04                         byte_F7AE:	dc.b 4
0000F745 F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F74A 000C 0008 EC               		dc.b 0,	$C, 0, 8, $EC
0000F74F F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F754 0808 000E F4               		dc.b 8,	8, 0, $E, $F4
0000F759 04                         byte_F7C3:	dc.b 4
0000F75A F10D 0000 EC               		dc.b $F1, $D, 0, 0, $EC
0000F75F 010C 0008 EC               		dc.b 1,	$C, 0, 8, $EC
0000F764 F901 000C 0C               		dc.b $F9, 1, 0,	$C, $C
0000F769 0908 0011 F4               		dc.b 9,	8, 0, $11, $F4
0000F76E 05                         byte_F7D8:	dc.b 5
0000F76F F00D 0000 EC               		dc.b $F0, $D, 0, 0, $EC
0000F774 000C 0014 EC               		dc.b 0,	$C, 0, $14, $EC
0000F779 F801 000C 0C               		dc.b $F8, 1, 0,	$C, $C
0000F77E 0804 0018 EC               		dc.b 8,	4, 0, $18, $EC
0000F783 0804 0012 FC               		dc.b 8,	4, 0, $12, $FC
0000F788 01                         byte_F7F2:	dc.b 1
0000F789 FA00 001A 10               		dc.b $FA, 0, 0,	$1A, $10
0000F78E 01                         byte_F7F8:	dc.b 1
0000F78F FA00 001B 10               		dc.b $FA, 0, 0,	$1B, $10
0000F794 01                         byte_F7FE:	dc.b 1
0000F795 FA00 001C 10               		dc.b $FA, 0, 0,	$1C, $10
0000F79A 00                         byte_F804:	dc.b 0
0000F79C 00                         		even
0000F79C 00                         		even
0000F79C                            
0000F79C                            ; ===========================================================================
0000F79C                            ; ---------------------------------------------------------------------------
0000F79C                            ; Object 4F - blank
0000F79C                            ; ---------------------------------------------------------------------------
0000F79C                            
0000F79C                            Obj4F:					; XREF: Obj_Index
0000F79C 4E75                       		rts	
0000F79E                            
0000F79E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F79E                            
0000F79E                            
0000F79E                            Obj50_ChkWall:				; XREF: Obj50_FixToFloor
0000F79E 3038 FE04                  		move.w	($FFFFFE04).w,d0
0000F7A2 D047                       		add.w	d7,d0
0000F7A4 0240 0003                  		andi.w	#3,d0
0000F7A8 6600                       		bne.s	loc_F836
0000F7AA 7600                       		moveq	#0,d3
0000F7AC 1628 0019                  		move.b	$19(a0),d3
0000F7B0 4A68 0010                  		tst.w	$10(a0)
0000F7B4 6B00                       		bmi.s	loc_F82C
0000F7B6 6100 0000                  		bsr.w	ObjHitWallRight
0000F7BA 4A41                       		tst.w	d1
0000F7BC 6A00                       		bpl.s	loc_F836
0000F7BE                            
0000F7BE                            loc_F828:
0000F7BE 7001                       		moveq	#1,d0
0000F7C0 4E75                       		rts	
0000F7C2                            ; ===========================================================================
0000F7C2                            
0000F7C2                            loc_F82C:
0000F7C2 4643                       		not.w	d3
0000F7C4 6100 0000                  		bsr.w	ObjHitWallLeft
0000F7C8 4A41                       		tst.w	d1
0000F7CA 6BF2                       		bmi.s	loc_F828
0000F7CC                            
0000F7CC                            loc_F836:
0000F7CC 7000                       		moveq	#0,d0
0000F7CE 4E75                       		rts	
0000F7D0                            ; End of function Obj50_ChkWall
0000F7D0                            
0000F7D0                            ; ===========================================================================
0000F7D0                            ; ---------------------------------------------------------------------------
0000F7D0                            ; Object 50 - Yadrin enemy (SYZ)
0000F7D0                            ; ---------------------------------------------------------------------------
0000F7D0                            
0000F7D0                            Obj50:					; XREF: Obj_Index
0000F7D0 7000                       		moveq	#0,d0
0000F7D2 1028 0024                  		move.b	$24(a0),d0
0000F7D6 323B 0000                  		move.w	Obj50_Index(pc,d0.w),d1
0000F7DA 4EFB 1000                  		jmp	Obj50_Index(pc,d1.w)
0000F7DE                            ; ===========================================================================
0000F7DE 0000                       Obj50_Index:	dc.w Obj50_Main-Obj50_Index
0000F7E0 0000                       		dc.w Obj50_Action-Obj50_Index
0000F7E2                            ; ===========================================================================
0000F7E2                            
0000F7E2                            Obj50_Main:				; XREF: Obj50_Index
0000F7E2 217C 0000 0000 0004        		move.l	#Map_obj50,4(a0)
0000F7EA 317C 247B 0002             		move.w	#$247B,2(a0)
0000F7F0 117C 0004 0001             		move.b	#4,1(a0)
0000F7F6 117C 0004 0018             		move.b	#4,$18(a0)
0000F7FC 117C 0014 0019             		move.b	#$14,$19(a0)
0000F802 117C 0011 0016             		move.b	#$11,$16(a0)
0000F808 117C 0008 0017             		move.b	#8,$17(a0)
0000F80E 117C 00CC 0020             		move.b	#$CC,$20(a0)
0000F814 6100 DD44                  		bsr.w	ObjectFall
0000F818 6100 0000                  		bsr.w	ObjHitFloor
0000F81C 4A41                       		tst.w	d1
0000F81E 6A00                       		bpl.s	locret_F89E
0000F820 D368 000C                  		add.w	d1,$C(a0)	; match	object's position with the floor
0000F824 317C 0000 0012             		move.w	#0,$12(a0)
0000F82A 5428 0024                  		addq.b	#2,$24(a0)
0000F82E 0868 0000 0022             		bchg	#0,$22(a0)
0000F834                            
0000F834                            locret_F89E:
0000F834 4E75                       		rts	
0000F836                            ; ===========================================================================
0000F836                            
0000F836                            Obj50_Action:				; XREF: Obj50_Index
0000F836 7000                       		moveq	#0,d0
0000F838 1028 0025                  		move.b	$25(a0),d0
0000F83C 323B 0000                  		move.w	Obj50_Index2(pc,d0.w),d1
0000F840 4EBB 1000                  		jsr	Obj50_Index2(pc,d1.w)
0000F844 43F9 0000 0000             		lea	(Ani_obj50).l,a1
0000F84A 6100 AE8C                  		bsr.w	AnimateSprite
0000F84E 6000 FDF4                  		bra.w	MarkObjGone
0000F852                            ; ===========================================================================
0000F852 0000                       Obj50_Index2:	dc.w Obj50_Move-Obj50_Index2
0000F854 0000                       		dc.w Obj50_FixToFloor-Obj50_Index2
0000F856                            ; ===========================================================================
0000F856                            
0000F856                            Obj50_Move:				; XREF: Obj50_Index2
0000F856 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from pause	time
0000F85A 6A00                       		bpl.s	locret_F8E2	; if time remains, branch
0000F85C 5428 0025                  		addq.b	#2,$25(a0)
0000F860 317C FF00 0010             		move.w	#-$100,$10(a0)	; move object
0000F866 117C 0001 001C             		move.b	#1,$1C(a0)
0000F86C 0868 0000 0022             		bchg	#0,$22(a0)
0000F872 6600                       		bne.s	locret_F8E2
0000F874 4468 0010                  		neg.w	$10(a0)		; change direction
0000F878                            
0000F878                            locret_F8E2:
0000F878 4E75                       		rts	
0000F87A                            ; ===========================================================================
0000F87A                            
0000F87A                            Obj50_FixToFloor:			; XREF: Obj50_Index2
0000F87A 6100 DD0A                  		bsr.w	SpeedToPos
0000F87E 6100 0000                  		bsr.w	ObjHitFloor
0000F882 0C41 FFF8                  		cmpi.w	#-8,d1
0000F886 6D00                       		blt.s	Obj50_Pause
0000F888 0C41 000C                  		cmpi.w	#$C,d1
0000F88C 6C00                       		bge.s	Obj50_Pause
0000F88E D368 000C                  		add.w	d1,$C(a0)	; match	object's position to the floor
0000F892 6100 FF0A                  		bsr.w	Obj50_ChkWall
0000F896 6600                       		bne.s	Obj50_Pause
0000F898 4E75                       		rts	
0000F89A                            ; ===========================================================================
0000F89A                            
0000F89A                            Obj50_Pause:				; XREF: Obj50_FixToFloor
0000F89A 5528 0025                  		subq.b	#2,$25(a0)
0000F89E 317C 003B 0030             		move.w	#59,$30(a0)	; set pause time to 1 second
0000F8A4 317C 0000 0010             		move.w	#0,$10(a0)
0000F8AA 117C 0000 001C             		move.b	#0,$1C(a0)
0000F8B0 4E75                       		rts	
0000F8B2                            ; ===========================================================================
0000F8B2                            Ani_obj50:
0000F8B2                            	include "_anim\obj50.asm"
0000F8B2                            ; ---------------------------------------------------------------------------
0000F8B2                            ; Animation script - Yadrin enemy
0000F8B2                            ; ---------------------------------------------------------------------------
0000F8B2 0000                       		dc.w byte_F920-Ani_obj50
0000F8B4 0000                       		dc.w byte_F924-Ani_obj50
0000F8B6 0700 FF00                  byte_F920:	dc.b 7,	0, $FF,	0
0000F8BA 0700 0301 0400 0302 05FF   byte_F924:	dc.b 7,	0, 3, 1, 4, 0, 3, 2, 5,	$FF
0000F8C4                            		even
0000F8C4                            		even
0000F8C4                            
0000F8C4                            ; ---------------------------------------------------------------------------
0000F8C4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F8C4                            ; ---------------------------------------------------------------------------
0000F8C4                            Map_obj50:
0000F8C4                            	include "_maps\obj50.asm"
0000F8C4                            ; ---------------------------------------------------------------------------
0000F8C4                            ; Sprite mappings - Yadrin enemy (SYZ)
0000F8C4                            ; ---------------------------------------------------------------------------
0000F8C4 0000 0000                  		dc.w byte_F93A-Map_obj50, byte_F954-Map_obj50
0000F8C8 0000 0000                  		dc.w byte_F96E-Map_obj50, byte_F988-Map_obj50
0000F8CC 0000 0000                  		dc.w byte_F9A2-Map_obj50, byte_F9BC-Map_obj50
0000F8D0 05                         byte_F93A:	dc.b 5
0000F8D1 F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000F8D6 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000F8DB EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F8E0 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F8E5 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F8EA 05                         byte_F954:	dc.b 5
0000F8EB F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000F8F0 FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000F8F5 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F8FA F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F8FF 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F904 05                         byte_F96E:	dc.b 5
0000F905 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000F90A 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000F90F EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F914 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F919 0409 0031 FC               		dc.b 4,	9, 0, $31, $FC
0000F91E 05                         byte_F988:	dc.b 5
0000F91F F408 0000 F4               		dc.b $F4, 8, 0,	0, $F4
0000F924 FC0E 0003 EC               		dc.b $FC, $E, 0, 3, $EC
0000F929 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F92E F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F933 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F938 05                         byte_F9A2:	dc.b 5
0000F939 F408 0014 F4               		dc.b $F4, 8, 0,	$14, $F4
0000F93E FC0E 0017 EC               		dc.b $FC, $E, 0, $17, $EC
0000F943 EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F948 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F94D 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F952 05                         byte_F9BC:	dc.b 5
0000F953 F409 0023 F4               		dc.b $F4, 9, 0,	$23, $F4
0000F958 040D 0029 EC               		dc.b 4,	$D, 0, $29, $EC
0000F95D EC04 000F FC               		dc.b $EC, 4, 0,	$F, $FC
0000F962 F402 0011 0C               		dc.b $F4, 2, 0,	$11, $C
0000F967 0409 0037 FC               		dc.b 4,	9, 0, $37, $FC
0000F96C                            		even
0000F96C                            		even
0000F96C                            
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C                            ; Solid	object subroutine (includes spikes, blocks, rocks etc)
0000F96C                            ;
0000F96C                            ; variables:
0000F96C                            ; d1 = width
0000F96C                            ; d2 = height /	2 (when	jumping)
0000F96C                            ; d3 = height /	2 (when	walking)
0000F96C                            ; d4 = x-axis position
0000F96C                            ; ---------------------------------------------------------------------------
0000F96C                            
0000F96C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000F96C                            
0000F96C                            
0000F96C                            SolidObject:
0000F96C 4A28 0025                  		tst.b	$25(a0)
0000F970 6700 0000                  		beq.w	loc_FAC8
0000F974 3401                       		move.w	d1,d2
0000F976 D442                       		add.w	d2,d2
0000F978 43F8 D000                  		lea	($FFFFD000).w,a1
0000F97C 0829 0001 0022             		btst	#1,$22(a1)
0000F982 6600                       		bne.s	loc_F9FE
0000F984 3029 0008                  		move.w	8(a1),d0
0000F988 9068 0008                  		sub.w	8(a0),d0
0000F98C D041                       		add.w	d1,d0
0000F98E 6B00                       		bmi.s	loc_F9FE
0000F990 B042                       		cmp.w	d2,d0
0000F992 6500                       		bcs.s	loc_FA12
0000F994                            
0000F994                            loc_F9FE:
0000F994 08A9 0003 0022             		bclr	#3,$22(a1)
0000F99A 08A8 0003 0022             		bclr	#3,$22(a0)
0000F9A0 4228 0025                  		clr.b	$25(a0)
0000F9A4 7800                       		moveq	#0,d4
0000F9A6 4E75                       		rts	
0000F9A8                            ; ===========================================================================
0000F9A8                            
0000F9A8                            loc_FA12:
0000F9A8 3404                       		move.w	d4,d2
0000F9AA 6100 815C                  		bsr.w	MvSonicOnPtfm
0000F9AE 7800                       		moveq	#0,d4
0000F9B0 4E75                       		rts	
0000F9B2                            ; ===========================================================================
0000F9B2                            
0000F9B2                            SolidObject71:				; XREF: Obj71_Solid
0000F9B2 4A28 0025                  		tst.b	$25(a0)
0000F9B6 6700 0000                  		beq.w	loc_FAD0
0000F9BA 3401                       		move.w	d1,d2
0000F9BC D442                       		add.w	d2,d2
0000F9BE 43F8 D000                  		lea	($FFFFD000).w,a1
0000F9C2 0829 0001 0022             		btst	#1,$22(a1)
0000F9C8 6600                       		bne.s	loc_FA44
0000F9CA 3029 0008                  		move.w	8(a1),d0
0000F9CE 9068 0008                  		sub.w	8(a0),d0
0000F9D2 D041                       		add.w	d1,d0
0000F9D4 6B00                       		bmi.s	loc_FA44
0000F9D6 B042                       		cmp.w	d2,d0
0000F9D8 6500                       		bcs.s	loc_FA58
0000F9DA                            
0000F9DA                            loc_FA44:
0000F9DA 08A9 0003 0022             		bclr	#3,$22(a1)
0000F9E0 08A8 0003 0022             		bclr	#3,$22(a0)
0000F9E6 4228 0025                  		clr.b	$25(a0)
0000F9EA 7800                       		moveq	#0,d4
0000F9EC 4E75                       		rts	
0000F9EE                            ; ===========================================================================
0000F9EE                            
0000F9EE                            loc_FA58:
0000F9EE 3404                       		move.w	d4,d2
0000F9F0 6100 8116                  		bsr.w	MvSonicOnPtfm
0000F9F4 7800                       		moveq	#0,d4
0000F9F6 4E75                       		rts	
0000F9F8                            ; ===========================================================================
0000F9F8                            
0000F9F8                            SolidObject2F:				; XREF: Obj2F_Solid
0000F9F8 43F8 D000                  		lea	($FFFFD000).w,a1
0000F9FC 4A28 0001                  		tst.b	1(a0)
0000FA00 6A00 0000                  		bpl.w	loc_FB92
0000FA04 3029 0008                  		move.w	8(a1),d0
0000FA08 9068 0008                  		sub.w	8(a0),d0
0000FA0C D041                       		add.w	d1,d0
0000FA0E 6B00 0000                  		bmi.w	loc_FB92
0000FA12 3601                       		move.w	d1,d3
0000FA14 D643                       		add.w	d3,d3
0000FA16 B043                       		cmp.w	d3,d0
0000FA18 6200 0000                  		bhi.w	loc_FB92
0000FA1C 3A00                       		move.w	d0,d5
0000FA1E 0828 0000 0001             		btst	#0,1(a0)
0000FA24 6700                       		beq.s	loc_FA94
0000FA26 4645                       		not.w	d5
0000FA28 DA43                       		add.w	d3,d5
0000FA2A                            
0000FA2A                            loc_FA94:
0000FA2A E24D                       		lsr.w	#1,d5
0000FA2C 7600                       		moveq	#0,d3
0000FA2E 1632 5000                  		move.b	(a2,d5.w),d3
0000FA32 9612                       		sub.b	(a2),d3
0000FA34 3A28 000C                  		move.w	$C(a0),d5
0000FA38 9A43                       		sub.w	d3,d5
0000FA3A 1629 0016                  		move.b	$16(a1),d3
0000FA3E 4883                       		ext.w	d3
0000FA40 D443                       		add.w	d3,d2
0000FA42 3629 000C                  		move.w	$C(a1),d3
0000FA46 9645                       		sub.w	d5,d3
0000FA48 5843                       		addq.w	#4,d3
0000FA4A D642                       		add.w	d2,d3
0000FA4C 6B00 0000                  		bmi.w	loc_FB92
0000FA50 3802                       		move.w	d2,d4
0000FA52 D844                       		add.w	d4,d4
0000FA54 B644                       		cmp.w	d4,d3
0000FA56 6400 0000                  		bcc.w	loc_FB92
0000FA5A 6000 0000                  		bra.w	loc_FB0E
0000FA5E                            ; ===========================================================================
0000FA5E                            
0000FA5E                            loc_FAC8:
0000FA5E 4A28 0001                  		tst.b	1(a0)
0000FA62 6A00 0000                  		bpl.w	loc_FB92
0000FA66                            
0000FA66                            loc_FAD0:
0000FA66 43F8 D000                  		lea	($FFFFD000).w,a1
0000FA6A 3029 0008                  		move.w	8(a1),d0
0000FA6E 9068 0008                  		sub.w	8(a0),d0
0000FA72 D041                       		add.w	d1,d0
0000FA74 6B00 0000                  		bmi.w	loc_FB92
0000FA78 3601                       		move.w	d1,d3
0000FA7A D643                       		add.w	d3,d3
0000FA7C B043                       		cmp.w	d3,d0
0000FA7E 6200 0000                  		bhi.w	loc_FB92
0000FA82 1629 0016                  		move.b	$16(a1),d3
0000FA86 4883                       		ext.w	d3
0000FA88 D443                       		add.w	d3,d2
0000FA8A 3629 000C                  		move.w	$C(a1),d3
0000FA8E 9668 000C                  		sub.w	$C(a0),d3
0000FA92 5843                       		addq.w	#4,d3
0000FA94 D642                       		add.w	d2,d3
0000FA96 6B00 0000                  		bmi.w	loc_FB92
0000FA9A 3802                       		move.w	d2,d4
0000FA9C D844                       		add.w	d4,d4
0000FA9E B644                       		cmp.w	d4,d3
0000FAA0 6400 0000                  		bcc.w	loc_FB92
0000FAA4                            
0000FAA4                            loc_FB0E:
0000FAA4 4A38 F7C8                  		tst.b	($FFFFF7C8).w
0000FAA8 6B00 0000                  		bmi.w	loc_FB92
0000FAAC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
0000FAB2 6400 0000                  		bcc.w	loc_FB92
0000FAB6 4A78 FE08                  		tst.w	($FFFFFE08).w
0000FABA 6600 0000                  		bne.w	loc_FBAC
0000FABE 3A00                       		move.w	d0,d5
0000FAC0 B240                       		cmp.w	d0,d1
0000FAC2 6400                       		bcc.s	loc_FB36
0000FAC4 D241                       		add.w	d1,d1
0000FAC6 9041                       		sub.w	d1,d0
0000FAC8 3A00                       		move.w	d0,d5
0000FACA 4445                       		neg.w	d5
0000FACC                            
0000FACC                            loc_FB36:
0000FACC 3203                       		move.w	d3,d1
0000FACE B443                       		cmp.w	d3,d2
0000FAD0 6400                       		bcc.s	loc_FB44
0000FAD2 5943                       		subq.w	#4,d3
0000FAD4 9644                       		sub.w	d4,d3
0000FAD6 3203                       		move.w	d3,d1
0000FAD8 4441                       		neg.w	d1
0000FADA                            
0000FADA                            loc_FB44:
0000FADA BA41                       		cmp.w	d1,d5
0000FADC 6200 0000                  		bhi.w	loc_FBB0
0000FAE0 0C41 0004                  		cmpi.w	#4,d1
0000FAE4 6300                       		bls.s	loc_FB8C
0000FAE6 4A40                       		tst.w	d0
0000FAE8 6700                       		beq.s	loc_FB70
0000FAEA 6B00                       		bmi.s	loc_FB5E
0000FAEC 4A69 0010                  		tst.w	$10(a1)
0000FAF0 6B00                       		bmi.s	loc_FB70
0000FAF2 6000                       		bra.s	loc_FB64
0000FAF4                            ; ===========================================================================
0000FAF4                            
0000FAF4                            loc_FB5E:
0000FAF4 4A69 0010                  		tst.w	$10(a1)
0000FAF8 6A00                       		bpl.s	loc_FB70
0000FAFA                            
0000FAFA                            loc_FB64:
0000FAFA 337C 0000 0014             		move.w	#0,$14(a1)	; stop Sonic moving
0000FB00 337C 0000 0010             		move.w	#0,$10(a1)
0000FB06                            
0000FB06                            loc_FB70:
0000FB06 9169 0008                  		sub.w	d0,8(a1)
0000FB0A 0829 0001 0022             		btst	#1,$22(a1)
0000FB10 6600                       		bne.s	loc_FB8C
0000FB12 08E9 0005 0022             		bset	#5,$22(a1)
0000FB18 08E8 0005 0022             		bset	#5,$22(a0)
0000FB1E 7801                       		moveq	#1,d4
0000FB20 4E75                       		rts	
0000FB22                            ; ===========================================================================
0000FB22                            
0000FB22                            loc_FB8C:
0000FB22 6100                       		bsr.s	loc_FBA0
0000FB24 7801                       		moveq	#1,d4
0000FB26 4E75                       		rts	
0000FB28                            ; ===========================================================================
0000FB28                            
0000FB28                            loc_FB92:
0000FB28 0828 0005 0022             		btst	#5,$22(a0)
0000FB2E 6700                       		beq.s	loc_FBAC
0000FB30 337C 0001 001C             		move.w	#1,$1C(a1)	; use walking animation
0000FB36                            
0000FB36                            loc_FBA0:
0000FB36 08A8 0005 0022             		bclr	#5,$22(a0)
0000FB3C 08A9 0005 0022             		bclr	#5,$22(a1)
0000FB42                            
0000FB42                            loc_FBAC:
0000FB42 7800                       		moveq	#0,d4
0000FB44 4E75                       		rts	
0000FB46                            ; ===========================================================================
0000FB46                            
0000FB46                            loc_FBB0:
0000FB46 4A43                       		tst.w	d3
0000FB48 6B00                       		bmi.s	loc_FBBC
0000FB4A 0C43 0010                  		cmpi.w	#$10,d3
0000FB4E 6500                       		bcs.s	loc_FBEE
0000FB50 60D6                       		bra.s	loc_FB92
0000FB52                            ; ===========================================================================
0000FB52                            
0000FB52                            loc_FBBC:
0000FB52 4A69 0012                  		tst.w	$12(a1)
0000FB56 6700                       		beq.s	loc_FBD6
0000FB58 6A00                       		bpl.s	loc_FBD2
0000FB5A 4A43                       		tst.w	d3
0000FB5C 6A00                       		bpl.s	loc_FBD2
0000FB5E 9769 000C                  		sub.w	d3,$C(a1)
0000FB62 337C 0000 0012             		move.w	#0,$12(a1)	; stop Sonic moving
0000FB68                            
0000FB68                            loc_FBD2:
0000FB68 78FF                       		moveq	#-1,d4
0000FB6A 4E75                       		rts	
0000FB6C                            ; ===========================================================================
0000FB6C                            
0000FB6C                            loc_FBD6:
0000FB6C 0829 0001 0022             		btst	#1,$22(a1)
0000FB72 66F4                       		bne.s	loc_FBD2
0000FB74 2F08                       		move.l	a0,-(sp)
0000FB76 2049                       		movea.l	a1,a0
0000FB78 4EB9 0000 0000             		jsr	KillSonic
0000FB7E 205F                       		movea.l	(sp)+,a0
0000FB80 78FF                       		moveq	#-1,d4
0000FB82 4E75                       		rts	
0000FB84                            ; ===========================================================================
0000FB84                            
0000FB84                            loc_FBEE:
0000FB84 5943                       		subq.w	#4,d3
0000FB86 7200                       		moveq	#0,d1
0000FB88 1228 0019                  		move.b	$19(a0),d1
0000FB8C 3401                       		move.w	d1,d2
0000FB8E D442                       		add.w	d2,d2
0000FB90 D269 0008                  		add.w	8(a1),d1
0000FB94 9268 0008                  		sub.w	8(a0),d1
0000FB98 6B00                       		bmi.s	loc_FC28
0000FB9A B242                       		cmp.w	d2,d1
0000FB9C 6400                       		bcc.s	loc_FC28
0000FB9E 4A69 0012                  		tst.w	$12(a1)
0000FBA2 6B00                       		bmi.s	loc_FC28
0000FBA4 9769 000C                  		sub.w	d3,$C(a1)
0000FBA8 5369 000C                  		subq.w	#1,$C(a1)
0000FBAC 6100                       		bsr.s	sub_FC2C
0000FBAE 117C 0002 0025             		move.b	#2,$25(a0)
0000FBB4 08E8 0003 0022             		bset	#3,$22(a0)
0000FBBA 78FF                       		moveq	#-1,d4
0000FBBC 4E75                       		rts	
0000FBBE                            ; ===========================================================================
0000FBBE                            
0000FBBE                            loc_FC28:
0000FBBE 7800                       		moveq	#0,d4
0000FBC0 4E75                       		rts	
0000FBC2                            ; End of function SolidObject
0000FBC2                            
0000FBC2                            
0000FBC2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0000FBC2                            
0000FBC2                            
0000FBC2                            sub_FC2C:				; XREF: SolidObject
0000FBC2 0829 0003 0022             		btst	#3,$22(a1)
0000FBC8 6700                       		beq.s	loc_FC4E
0000FBCA 7000                       		moveq	#0,d0
0000FBCC 1029 003D                  		move.b	$3D(a1),d0
0000FBD0 ED48                       		lsl.w	#6,d0
0000FBD2 0680 00FF D000             		addi.l	#$FFD000,d0
0000FBD8 2440                       		movea.l	d0,a2
0000FBDA 08AA 0003 0022             		bclr	#3,$22(a2)
0000FBE0 422A 0025                  		clr.b	$25(a2)
0000FBE4                            
0000FBE4                            loc_FC4E:
0000FBE4 3008                       		move.w	a0,d0
0000FBE6 0440 D000                  		subi.w	#-$3000,d0
0000FBEA EC48                       		lsr.w	#6,d0
0000FBEC 0240 007F                  		andi.w	#$7F,d0
0000FBF0 1340 003D                  		move.b	d0,$3D(a1)
0000FBF4 137C 0000 0026             		move.b	#0,$26(a1)
0000FBFA 337C 0000 0012             		move.w	#0,$12(a1)
0000FC00 3369 0010 0014             		move.w	$10(a1),$14(a1)
0000FC06 0829 0001 0022             		btst	#1,$22(a1)
0000FC0C 6700                       		beq.s	loc_FC84
0000FC0E 2F08                       		move.l	a0,-(sp)
0000FC10 2049                       		movea.l	a1,a0
0000FC12 4EB9 0000 0000             		jsr	Sonic_ResetOnFloor
0000FC18 205F                       		movea.l	(sp)+,a0
0000FC1A                            
0000FC1A                            loc_FC84:
0000FC1A 08E9 0003 0022             		bset	#3,$22(a1)
0000FC20 08E8 0003 0022             		bset	#3,$22(a0)
0000FC26 4E75                       		rts	
0000FC28                            ; End of function sub_FC2C
0000FC28                            
0000FC28                            ; ===========================================================================
0000FC28                            ; ---------------------------------------------------------------------------
0000FC28                            ; Object 51 - smashable	green block (MZ)
0000FC28                            ; ---------------------------------------------------------------------------
0000FC28                            
0000FC28                            Obj51:					; XREF: Obj_Index
0000FC28 7000                       		moveq	#0,d0
0000FC2A 1028 0024                  		move.b	$24(a0),d0
0000FC2E 323B 0000                  		move.w	Obj51_Index(pc,d0.w),d1
0000FC32 4EBB 1000                  		jsr	Obj51_Index(pc,d1.w)
0000FC36 6000 FA0C                  		bra.w	MarkObjGone
0000FC3A                            ; ===========================================================================
0000FC3A 0000                       Obj51_Index:	dc.w Obj51_Main-Obj51_Index
0000FC3C 0000                       		dc.w Obj51_Solid-Obj51_Index
0000FC3E 0000                       		dc.w Obj51_Display-Obj51_Index
0000FC40                            ; ===========================================================================
0000FC40                            
0000FC40                            Obj51_Main:				; XREF: Obj51_Index
0000FC40 5428 0024                  		addq.b	#2,$24(a0)
0000FC44 217C 0000 0000 0004        		move.l	#Map_obj51,4(a0)
0000FC4C 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FC52 117C 0004 0001             		move.b	#4,1(a0)
0000FC58 117C 0010 0019             		move.b	#$10,$19(a0)
0000FC5E 117C 0004 0018             		move.b	#4,$18(a0)
0000FC64 1168 0028 001A             		move.b	$28(a0),$1A(a0)
0000FC6A                            
0000FC6A                            Obj51_Solid:				; XREF: Obj51_Index
0000FC6A 3178 F7D0 0034             		move.w	($FFFFF7D0).w,$34(a0)
0000FC70 1178 D01C 0032             		move.b	($FFFFD01C).w,$32(a0) ;	load Sonic's animation number
0000FC76 323C 001B                  		move.w	#$1B,d1
0000FC7A 343C 0010                  		move.w	#$10,d2
0000FC7E 363C 0011                  		move.w	#$11,d3
0000FC82 3828 0008                  		move.w	8(a0),d4
0000FC86 6100 FCE4                  		bsr.w	SolidObject
0000FC8A 0828 0003 0022             		btst	#3,$22(a0)
0000FC90 6600                       		bne.s	Obj51_Smash
0000FC92                            
0000FC92                            locret_FCFC:
0000FC92 4E75                       		rts	
0000FC94                            ; ===========================================================================
0000FC94                            
0000FC94                            Obj51_Smash:				; XREF: Obj51_Solid
0000FC94 0C28 0002 0032             		cmpi.b	#2,$32(a0)	; is Sonic rolling/jumping?
0000FC9A 66F6                       		bne.s	locret_FCFC	; if not, branch
0000FC9C 31E8 0034 F7D0             		move.w	$34(a0),($FFFFF7D0).w
0000FCA2 08E9 0002 0022             		bset	#2,$22(a1)
0000FCA8 137C 000E 0016             		move.b	#$E,$16(a1)
0000FCAE 137C 0007 0017             		move.b	#7,$17(a1)
0000FCB4 137C 0002 001C             		move.b	#2,$1C(a1)
0000FCBA 337C FD00 0012             		move.w	#-$300,$12(a1)	; bounce Sonic upwards
0000FCC0 08E9 0001 0022             		bset	#1,$22(a1)
0000FCC6 08A9 0003 0022             		bclr	#3,$22(a1)
0000FCCC 137C 0002 0024             		move.b	#2,$24(a1)
0000FCD2 08A8 0003 0022             		bclr	#3,$22(a0)
0000FCD8 4228 0025                  		clr.b	$25(a0)
0000FCDC 117C 0001 001A             		move.b	#1,$1A(a0)
0000FCE2 49F9 0000 0000             		lea	(Obj51_Speeds).l,a4 ; load broken	fragment speed data
0000FCE8 7203                       		moveq	#3,d1		; set number of	fragments to 4
0000FCEA 343C 0038                  		move.w	#$38,d2
0000FCEE 6100 D4AA                  		bsr.w	SmashObject
0000FCF2 6100 DD3E                  		bsr.w	SingleObjLoad
0000FCF6 6600                       		bne.s	Obj51_Display
0000FCF8 12BC 0029                  		move.b	#$29,0(a1)	; load points object
0000FCFC 3368 0008 0008             		move.w	8(a0),8(a1)
0000FD02 3368 000C 000C             		move.w	$C(a0),$C(a1)
0000FD08 3438 F7D0                  		move.w	($FFFFF7D0).w,d2
0000FD0C 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w
0000FD10 0C42 0006                  		cmpi.w	#6,d2
0000FD14 6500                       		bcs.s	Obj51_Bonus
0000FD16 7406                       		moveq	#6,d2
0000FD18                            
0000FD18                            Obj51_Bonus:
0000FD18 7000                       		moveq	#0,d0
0000FD1A 303B 2000                  		move.w	Obj51_Points(pc,d2.w),d0
0000FD1E 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 blocks been smashed?
0000FD24 6500                       		bcs.s	loc_FD98	; if not, branch
0000FD26 303C 03E8                  		move.w	#1000,d0	; give higher points for 16th block
0000FD2A 740A                       		moveq	#10,d2
0000FD2C                            
0000FD2C                            loc_FD98:
0000FD2C 4EB9 0000 0000             		jsr	AddPoints
0000FD32 E24A                       		lsr.w	#1,d2
0000FD34 1342 001A                  		move.b	d2,$1A(a1)
0000FD38                            
0000FD38                            Obj51_Display:				; XREF: Obj51_Index
0000FD38 6100 D84C                  		bsr.w	SpeedToPos
0000FD3C 0668 0038 0012             		addi.w	#$38,$12(a0)
0000FD42 6100 D868                  		bsr.w	DisplaySprite
0000FD46 4A28 0001                  		tst.b	1(a0)
0000FD4A 6A00 D89C                  		bpl.w	DeleteObject
0000FD4E 4E75                       		rts	
0000FD50                            ; ===========================================================================
0000FD50 FE00 FE00                  Obj51_Speeds:	dc.w $FE00, $FE00	; x-speed, y-speed
0000FD54 FF00 FF00                  		dc.w $FF00, $FF00
0000FD58 0200 FE00                  		dc.w $200, $FE00
0000FD5C 0100 FF00                  		dc.w $100, $FF00
0000FD60                            
0000FD60 000A 0014 0032 0064        Obj51_Points:	dc.w 10, 20, 50, 100
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68                            ; Sprite mappings - smashable green block (MZ)
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68                            Map_obj51:
0000FD68                            	include "_maps\obj51.asm"
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68                            ; Sprite mappings - smashable green block (MZ)
0000FD68                            ; ---------------------------------------------------------------------------
0000FD68 0000                       		dc.w byte_FDD8-Map_obj51
0000FD6A 0000                       		dc.w byte_FDE3-Map_obj51
0000FD6C 02                         byte_FDD8:	dc.b 2
0000FD6D F00D 0000 F0               		dc.b $F0, $D, 0, 0, $F0
0000FD72 000D 0000 F0               		dc.b 0,	$D, 0, 0, $F0
0000FD77 04                         byte_FDE3:	dc.b 4
0000FD78 F005 8000 F0               		dc.b $F0, 5, $80, 0, $F0
0000FD7D 0005 8000 F0               		dc.b 0,	5, $80,	0, $F0
0000FD82 F005 8000 00               		dc.b $F0, 5, $80, 0, 0
0000FD87 0005 8000 00               		dc.b 0,	5, $80,	0, 0
0000FD8C                            		even
0000FD8C                            		even
0000FD8C                            
0000FD8C                            ; ===========================================================================
0000FD8C                            ; ---------------------------------------------------------------------------
0000FD8C                            ; Object 52 - moving platform blocks (MZ, LZ, SBZ)
0000FD8C                            ; ---------------------------------------------------------------------------
0000FD8C                            
0000FD8C                            Obj52:					; XREF: Obj_Index
0000FD8C 7000                       		moveq	#0,d0
0000FD8E 1028 0024                  		move.b	$24(a0),d0
0000FD92 323B 0000                  		move.w	Obj52_Index(pc,d0.w),d1
0000FD96 4EFB 1000                  		jmp	Obj52_Index(pc,d1.w)
0000FD9A                            ; ===========================================================================
0000FD9A 0000                       Obj52_Index:	dc.w Obj52_Main-Obj52_Index
0000FD9C 0000                       		dc.w Obj52_Platform-Obj52_Index
0000FD9E 0000                       		dc.w Obj52_StandOn-Obj52_Index
0000FDA0                            
0000FDA0 1000                       Obj52_Var:	dc.b $10, 0		; object width,	frame number
0000FDA2 2001                       		dc.b $20, 1
0000FDA4 2002                       		dc.b $20, 2
0000FDA6 4003                       		dc.b $40, 3
0000FDA8 3004                       		dc.b $30, 4
0000FDAA                            ; ===========================================================================
0000FDAA                            
0000FDAA                            Obj52_Main:				; XREF: Obj52_Index
0000FDAA 5428 0024                  		addq.b	#2,$24(a0)
0000FDAE 217C 0000 0000 0004        		move.l	#Map_obj52,4(a0)
0000FDB6 317C 42B8 0002             		move.w	#$42B8,2(a0)
0000FDBC 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
0000FDC2 6600                       		bne.s	loc_FE44
0000FDC4 217C 0000 0000 0004        		move.l	#Map_obj52a,4(a0) ; LZ specific	code
0000FDCC 317C 43BC 0002             		move.w	#$43BC,2(a0)
0000FDD2 117C 0007 0016             		move.b	#7,$16(a0)
0000FDD8                            
0000FDD8                            loc_FE44:
0000FDD8 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
0000FDDE 6600                       		bne.s	loc_FE60
0000FDE0 317C 22C0 0002             		move.w	#$22C0,2(a0)	; SBZ specific code (object 5228)
0000FDE6 0C28 0028 0028             		cmpi.b	#$28,$28(a0)	; is object 5228 ?
0000FDEC 6700                       		beq.s	loc_FE60	; if yes, branch
0000FDEE 317C 4460 0002             		move.w	#$4460,2(a0)	; SBZ specific code (object 523x)
0000FDF4                            
0000FDF4                            loc_FE60:
0000FDF4 117C 0004 0001             		move.b	#4,1(a0)
0000FDFA 7000                       		moveq	#0,d0
0000FDFC 1028 0028                  		move.b	$28(a0),d0
0000FE00 E648                       		lsr.w	#3,d0
0000FE02 0240 001E                  		andi.w	#$1E,d0
0000FE06 45FB 0098                  		lea	Obj52_Var(pc,d0.w),a2
0000FE0A 115A 0019                  		move.b	(a2)+,$19(a0)
0000FE0E 115A 001A                  		move.b	(a2)+,$1A(a0)
0000FE12 117C 0004 0018             		move.b	#4,$18(a0)
0000FE18 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FE1E 3168 000C 0032             		move.w	$C(a0),$32(a0)
0000FE24 0228 000F 0028             		andi.b	#$F,$28(a0)
0000FE2A                            
0000FE2A                            Obj52_Platform:				; XREF: Obj52_Index
0000FE2A 6100 0000                  		bsr.w	Obj52_Move
0000FE2E 7200                       		moveq	#0,d1
0000FE30 1228 0019                  		move.b	$19(a0),d1
0000FE34 4EB9 0000 7436             		jsr	(PlatformObject).l
0000FE3A 6000                       		bra.s	Obj52_ChkDel
0000FE3C                            ; ===========================================================================
0000FE3C                            
0000FE3C                            Obj52_StandOn:				; XREF: Obj52_Index
0000FE3C 7200                       		moveq	#0,d1
0000FE3E 1228 0019                  		move.b	$19(a0),d1
0000FE42 4EB9 0000 75AA             		jsr	(ExitPlatform).l
0000FE48 3F28 0008                  		move.w	8(a0),-(sp)
0000FE4C 6100 0000                  		bsr.w	Obj52_Move
0000FE50 341F                       		move.w	(sp)+,d2
0000FE52 4EB9 0000 7B14             		jsr	(MvSonicOnPtfm2).l
0000FE58                            
0000FE58                            Obj52_ChkDel:				; XREF: Obj52_Platform
0000FE58 3028 0030                  		move.w	$30(a0),d0
0000FE5C 0240 FF80                  		andi.w	#$FF80,d0
0000FE60 3238 F700                  		move.w	($FFFFF700).w,d1
0000FE64 0441 0080                  		subi.w	#$80,d1
0000FE68 0241 FF80                  		andi.w	#$FF80,d1
0000FE6C 9041                       		sub.w	d1,d0
0000FE6E 0C40 0280                  		cmpi.w	#$280,d0
0000FE72 6200 D774                  		bhi.w	DeleteObject
0000FE76 6000 D734                  		bra.w	DisplaySprite
0000FE7A                            ; ===========================================================================
0000FE7A                            
0000FE7A                            Obj52_Move:				; XREF: Obj52_Platform; Obj52_StandOn
0000FE7A 7000                       		moveq	#0,d0
0000FE7C 1028 0028                  		move.b	$28(a0),d0
0000FE80 0240 000F                  		andi.w	#$F,d0
0000FE84 D040                       		add.w	d0,d0
0000FE86 323B 0000                  		move.w	Obj52_TypeIndex(pc,d0.w),d1
0000FE8A 4EFB 1000                  		jmp	Obj52_TypeIndex(pc,d1.w)
0000FE8E                            ; ===========================================================================
0000FE8E 0000 0000                  Obj52_TypeIndex:dc.w Obj52_Type00-Obj52_TypeIndex, Obj52_Type01-Obj52_TypeIndex
0000FE92 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type03-Obj52_TypeIndex
0000FE96 0000 0000                  		dc.w Obj52_Type02-Obj52_TypeIndex, Obj52_Type05-Obj52_TypeIndex
0000FE9A 0000 0000                  		dc.w Obj52_Type06-Obj52_TypeIndex, Obj52_Type07-Obj52_TypeIndex
0000FE9E 0000 0000                  		dc.w Obj52_Type08-Obj52_TypeIndex, Obj52_Type02-Obj52_TypeIndex
0000FEA2 0000                       		dc.w Obj52_Type0A-Obj52_TypeIndex
0000FEA4                            ; ===========================================================================
0000FEA4                            
0000FEA4                            Obj52_Type00:				; XREF: Obj52_TypeIndex
0000FEA4 4E75                       		rts	
0000FEA6                            ; ===========================================================================
0000FEA6                            
0000FEA6                            Obj52_Type01:				; XREF: Obj52_TypeIndex
0000FEA6 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0000FEAA 323C 0060                  		move.w	#$60,d1
0000FEAE 0828 0000 0022             		btst	#0,$22(a0)
0000FEB4 6700                       		beq.s	loc_FF26
0000FEB6 4440                       		neg.w	d0
0000FEB8 D041                       		add.w	d1,d0
0000FEBA                            
0000FEBA                            loc_FF26:
0000FEBA 3228 0030                  		move.w	$30(a0),d1
0000FEBE 9240                       		sub.w	d0,d1
0000FEC0 3141 0008                  		move.w	d1,8(a0)
0000FEC4 4E75                       		rts	
0000FEC6                            ; ===========================================================================
0000FEC6                            
0000FEC6                            Obj52_Type02:				; XREF: Obj52_TypeIndex
0000FEC6 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; is Sonic standing on the platform?
0000FECC 6600                       		bne.s	Obj52_02_Wait
0000FECE 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
0000FED2                            
0000FED2                            Obj52_02_Wait:
0000FED2 4E75                       		rts	
0000FED4                            ; ===========================================================================
0000FED4                            
0000FED4                            Obj52_Type03:				; XREF: Obj52_TypeIndex
0000FED4 7600                       		moveq	#0,d3
0000FED6 1628 0019                  		move.b	$19(a0),d3
0000FEDA 6100 0000                  		bsr.w	ObjHitWallRight
0000FEDE 4A41                       		tst.w	d1		; has the platform hit a wall?
0000FEE0 6B00                       		bmi.s	Obj52_03_End	; if yes, branch
0000FEE2 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0000FEE6 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FEEC 4E75                       		rts	
0000FEEE                            ; ===========================================================================
0000FEEE                            
0000FEEE                            Obj52_03_End:
0000FEEE 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving	type)
0000FEF2 4E75                       		rts	
0000FEF4                            ; ===========================================================================
0000FEF4                            
0000FEF4                            Obj52_Type05:				; XREF: Obj52_TypeIndex
0000FEF4 7600                       		moveq	#0,d3
0000FEF6 1628 0019                  		move.b	$19(a0),d3
0000FEFA 6100 0000                  		bsr.w	ObjHitWallRight
0000FEFE 4A41                       		tst.w	d1		; has the platform hit a wall?
0000FF00 6B00                       		bmi.s	Obj52_05_End	; if yes, branch
0000FF02 5268 0008                  		addq.w	#1,8(a0)	; move platform	to the right
0000FF06 3168 0008 0030             		move.w	8(a0),$30(a0)
0000FF0C 4E75                       		rts	
0000FF0E                            ; ===========================================================================
0000FF0E                            
0000FF0E                            Obj52_05_End:
0000FF0E 5228 0028                  		addq.b	#1,$28(a0)	; change to type 06 (falling)
0000FF12 4E75                       		rts	
0000FF14                            ; ===========================================================================
0000FF14                            
0000FF14                            Obj52_Type06:				; XREF: Obj52_TypeIndex
0000FF14 6100 D670                  		bsr.w	SpeedToPos
0000FF18 0668 0018 0012             		addi.w	#$18,$12(a0)	; make the platform fall
0000FF1E 6100 0000                  		bsr.w	ObjHitFloor
0000FF22 4A41                       		tst.w	d1		; has platform hit the floor?
0000FF24 6A00 0000                  		bpl.w	locret_FFA0	; if not, branch
0000FF28 D368 000C                  		add.w	d1,$C(a0)
0000FF2C 4268 0012                  		clr.w	$12(a0)		; stop platform	falling
0000FF30 4228 0028                  		clr.b	$28(a0)		; change to type 00 (non-moving)
0000FF34                            
0000FF34                            locret_FFA0:
0000FF34 4E75                       		rts	
0000FF36                            ; ===========================================================================
0000FF36                            
0000FF36                            Obj52_Type07:				; XREF: Obj52_TypeIndex
0000FF36 4A38 F7E2                  		tst.b	($FFFFF7E2).w	; has switch number 02 been pressed?
0000FF3A 6700                       		beq.s	Obj52_07_ChkDel
0000FF3C 5728 0028                  		subq.b	#3,$28(a0)	; if yes, change object	type to	04
0000FF40                            
0000FF40                            Obj52_07_ChkDel:
0000FF40 588F                       		addq.l	#4,sp
0000FF42 3028 0030                  		move.w	$30(a0),d0
0000FF46 0240 FF80                  		andi.w	#$FF80,d0
0000FF4A 3238 F700                  		move.w	($FFFFF700).w,d1
0000FF4E 0441 0080                  		subi.w	#$80,d1
0000FF52 0241 FF80                  		andi.w	#$FF80,d1
0000FF56 9041                       		sub.w	d1,d0
0000FF58 0C40 0280                  		cmpi.w	#$280,d0
0000FF5C 6200 D68A                  		bhi.w	DeleteObject
0000FF60 4E75                       		rts	
0000FF62                            ; ===========================================================================
0000FF62                            
0000FF62                            Obj52_Type08:				; XREF: Obj52_TypeIndex
0000FF62 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0000FF66 323C 0080                  		move.w	#$80,d1
0000FF6A 0828 0000 0022             		btst	#0,$22(a0)
0000FF70 6700                       		beq.s	loc_FFE2
0000FF72 4440                       		neg.w	d0
0000FF74 D041                       		add.w	d1,d0
0000FF76                            
0000FF76                            loc_FFE2:
0000FF76 3228 0032                  		move.w	$32(a0),d1
0000FF7A 9240                       		sub.w	d0,d1
0000FF7C 3141 000C                  		move.w	d1,$C(a0)
0000FF80 4E75                       		rts	
0000FF82                            ; ===========================================================================
0000FF82                            
0000FF82                            Obj52_Type0A:				; XREF: Obj52_TypeIndex
0000FF82 7600                       		moveq	#0,d3
0000FF84 1628 0019                  		move.b	$19(a0),d3
0000FF88 D643                       		add.w	d3,d3
0000FF8A 7208                       		moveq	#8,d1
0000FF8C 0828 0000 0022             		btst	#0,$22(a0)
0000FF92 6700                       		beq.s	loc_10004
0000FF94 4441                       		neg.w	d1
0000FF96 4443                       		neg.w	d3
0000FF98                            
0000FF98                            loc_10004:
0000FF98 4A68 0036                  		tst.w	$36(a0)		; is platform set to move back?
0000FF9C 6600                       		bne.s	Obj52_0A_Back	; if yes, branch
0000FF9E 3028 0008                  		move.w	8(a0),d0
0000FFA2 9068 0030                  		sub.w	$30(a0),d0
0000FFA6 B043                       		cmp.w	d3,d0
0000FFA8 6700                       		beq.s	Obj52_0A_Wait
0000FFAA D368 0008                  		add.w	d1,8(a0)	; move platform
0000FFAE 317C 012C 0034             		move.w	#300,$34(a0)	; set time delay to 5 seconds
0000FFB4 4E75                       		rts	
0000FFB6                            ; ===========================================================================
0000FFB6                            
0000FFB6                            Obj52_0A_Wait:
0000FFB6 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time delay
0000FFBA 6600                       		bne.s	locret_1002E	; if time remains, branch
0000FFBC 317C 0001 0036             		move.w	#1,$36(a0)	; set platform to move back to its original position
0000FFC2                            
0000FFC2                            locret_1002E:
0000FFC2 4E75                       		rts	
0000FFC4                            ; ===========================================================================
0000FFC4                            
0000FFC4                            Obj52_0A_Back:
0000FFC4 3028 0008                  		move.w	8(a0),d0
0000FFC8 9068 0030                  		sub.w	$30(a0),d0
0000FFCC 6700                       		beq.s	Obj52_0A_Reset
0000FFCE 9368 0008                  		sub.w	d1,8(a0)	; return platform to its original position
0000FFD2 4E75                       		rts	
0000FFD4                            ; ===========================================================================
0000FFD4                            
0000FFD4                            Obj52_0A_Reset:
0000FFD4 4268 0036                  		clr.w	$36(a0)
0000FFD8 5328 0028                  		subq.b	#1,$28(a0)
0000FFDC 4E75                       		rts	
0000FFDE                            ; ===========================================================================
0000FFDE                            ; ---------------------------------------------------------------------------
0000FFDE                            ; Sprite mappings - moving blocks (MZ, SBZ)
0000FFDE                            ; ---------------------------------------------------------------------------
0000FFDE                            Map_obj52:
0000FFDE                            	include "_maps\obj52mz.asm"
0000FFDE                            ; ---------------------------------------------------------------------------
0000FFDE                            ; Sprite mappings - moving blocks (MZ, SBZ)
0000FFDE                            ; ---------------------------------------------------------------------------
0000FFDE 0000 0000                  		dc.w byte_10054-Map_obj52, byte_1005A-Map_obj52
0000FFE2 0000 0000                  		dc.w byte_10065-Map_obj52, byte_1007A-Map_obj52
0000FFE6 0000                       		dc.w byte_1008F-Map_obj52
0000FFE8 01                         byte_10054:	dc.b 1
0000FFE9 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0000FFEE 02                         byte_1005A:	dc.b 2
0000FFEF F80F 0008 E0               		dc.b $F8, $F, 0, 8, $E0
0000FFF4 F80F 0008 00               		dc.b $F8, $F, 0, 8, 0
0000FFF9 04                         byte_10065:	dc.b 4
0000FFFA F80C 2000 E0               		dc.b $F8, $C, $20, 0, $E0
0000FFFF 000D 0004 E0               		dc.b 0,	$D, 0, 4, $E0
00010004 F80C 2000 00               		dc.b $F8, $C, $20, 0, 0
00010009 000D 0004 00               		dc.b 0,	$D, 0, 4, 0
0001000E 04                         byte_1007A:	dc.b 4
0001000F F80E 0000 C0               		dc.b $F8, $E, 0, 0, $C0
00010014 F80E 0003 E0               		dc.b $F8, $E, 0, 3, $E0
00010019 F80E 0003 00               		dc.b $F8, $E, 0, 3, 0
0001001E F80E 0800 20               		dc.b $F8, $E, 8, 0, $20
00010023 03                         byte_1008F:	dc.b 3
00010024 F80F 0008 D0               		dc.b $F8, $F, 0, 8, $D0
00010029 F80F 0008 F0               		dc.b $F8, $F, 0, 8, $F0
0001002E F80F 0008 10               		dc.b $F8, $F, 0, 8, $10
00010034 00                         		even
00010034 00                         		even
00010034                            
00010034                            ; ---------------------------------------------------------------------------
00010034                            ; Sprite mappings - moving block (LZ)
00010034                            ; ---------------------------------------------------------------------------
00010034                            Map_obj52a:
00010034                            	include "_maps\obj52lz.asm"
00010034                            ; ---------------------------------------------------------------------------
00010034                            ; Sprite mappings - moving block (LZ)
00010034                            ; ---------------------------------------------------------------------------
00010034 0000                       		dc.w byte_100A2-Map_obj52a
00010036 01                         byte_100A2:	dc.b 1
00010037 F80D 0000 F0               		dc.b $F8, $D, 0, 0, $F0
0001003C                            		even
0001003C                            		even
0001003C                            
0001003C                            ; ===========================================================================
0001003C                            ; ---------------------------------------------------------------------------
0001003C                            ; Object 55 - Basaran enemy (MZ)
0001003C                            ; ---------------------------------------------------------------------------
0001003C                            
0001003C                            Obj55:					; XREF: Obj_Index
0001003C 7000                       		moveq	#0,d0
0001003E 1028 0024                  		move.b	$24(a0),d0
00010042 323B 0000                  		move.w	Obj55_Index(pc,d0.w),d1
00010046 4EFB 1000                  		jmp	Obj55_Index(pc,d1.w)
0001004A                            ; ===========================================================================
0001004A 0000                       Obj55_Index:	dc.w Obj55_Main-Obj55_Index
0001004C 0000                       		dc.w Obj55_Action-Obj55_Index
0001004E                            ; ===========================================================================
0001004E                            
0001004E                            Obj55_Main:				; XREF: Obj55_Index
0001004E 5428 0024                  		addq.b	#2,$24(a0)
00010052 217C 0000 0000 0004        		move.l	#Map_obj55,4(a0)
0001005A 317C 84B8 0002             		move.w	#$84B8,2(a0)
00010060 117C 0004 0001             		move.b	#4,1(a0)
00010066 117C 000C 0016             		move.b	#$C,$16(a0)
0001006C 117C 0002 0018             		move.b	#2,$18(a0)
00010072 117C 000B 0020             		move.b	#$B,$20(a0)
00010078 117C 0010 0019             		move.b	#$10,$19(a0)
0001007E                            
0001007E                            Obj55_Action:				; XREF: Obj55_Index
0001007E 7000                       		moveq	#0,d0
00010080 1028 0025                  		move.b	$25(a0),d0
00010084 323B 0000                  		move.w	Obj55_Index2(pc,d0.w),d1
00010088 4EBB 1000                  		jsr	Obj55_Index2(pc,d1.w)
0001008C 43F9 0000 0000             		lea	(Ani_obj55).l,a1
00010092 6100 A644                  		bsr.w	AnimateSprite
00010096 6000 F5AC                  		bra.w	MarkObjGone
0001009A                            ; ===========================================================================
0001009A 0000                       Obj55_Index2:	dc.w Obj55_ChkDrop-Obj55_Index2
0001009C 0000                       		dc.w Obj55_DropFly-Obj55_Index2
0001009E 0000                       		dc.w Obj55_PlaySnd-Obj55_Index2
000100A0 0000                       		dc.w Obj55_FlyUp-Obj55_Index2
000100A2                            ; ===========================================================================
000100A2                            
000100A2                            Obj55_ChkDrop:				; XREF: Obj55_Index2
000100A2 343C 0080                  		move.w	#$80,d2
000100A6 6100 0000                  		bsr.w	Obj55_ChkSonic
000100AA 6400                       		bcc.s	Obj55_NoDrop
000100AC 3038 D00C                  		move.w	($FFFFD00C).w,d0
000100B0 3140 0036                  		move.w	d0,$36(a0)
000100B4 9068 000C                  		sub.w	$C(a0),d0
000100B8 6500                       		bcs.s	Obj55_NoDrop
000100BA 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic within $80 pixels of	basaran?
000100BE 6400                       		bcc.s	Obj55_NoDrop	; if not, branch
000100C0 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
000100C4 6600                       		bne.s	Obj55_NoDrop	; if yes, branch
000100C6 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
000100CA D007                       		add.b	d7,d0
000100CC 0200 0007                  		andi.b	#7,d0
000100D0 6600                       		bne.s	Obj55_NoDrop
000100D2 117C 0001 001C             		move.b	#1,$1C(a0)
000100D8 5428 0025                  		addq.b	#2,$25(a0)
000100DC                            
000100DC                            Obj55_NoDrop:
000100DC 4E75                       		rts	
000100DE                            ; ===========================================================================
000100DE                            
000100DE                            Obj55_DropFly:				; XREF: Obj55_Index2
000100DE 6100 D4A6                  		bsr.w	SpeedToPos
000100E2 0668 0018 0012             		addi.w	#$18,$12(a0)	; make basaran fall
000100E8 343C 0080                  		move.w	#$80,d2
000100EC 6100 0000                  		bsr.w	Obj55_ChkSonic
000100F0 3028 0036                  		move.w	$36(a0),d0
000100F4 9068 000C                  		sub.w	$C(a0),d0
000100F8 6500                       		bcs.s	Obj55_ChkDel
000100FA 0C40 0010                  		cmpi.w	#$10,d0
000100FE 6400                       		bcc.s	locret_10180
00010100 3141 0010                  		move.w	d1,$10(a0)	; make basaran fly horizontally
00010104 317C 0000 0012             		move.w	#0,$12(a0)	; stop basaran falling
0001010A 117C 0002 001C             		move.b	#2,$1C(a0)
00010110 5428 0025                  		addq.b	#2,$25(a0)
00010114                            
00010114                            locret_10180:
00010114 4E75                       		rts	
00010116                            ; ===========================================================================
00010116                            
00010116                            Obj55_ChkDel:				; XREF: Obj55_DropFly
00010116 4A28 0001                  		tst.b	1(a0)
0001011A 6A00 D4CC                  		bpl.w	DeleteObject
0001011E 4E75                       		rts	
00010120                            ; ===========================================================================
00010120                            
00010120                            Obj55_PlaySnd:				; XREF: Obj55_Index2
00010120 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00010124 0200 000F                  		andi.b	#$F,d0
00010128 6600                       		bne.s	loc_101A0
0001012A 303C 00C0                  		move.w	#$C0,d0
0001012E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play flapping sound
00010134                            
00010134                            loc_101A0:
00010134 6100 D450                  		bsr.w	SpeedToPos
00010138 3038 D008                  		move.w	($FFFFD008).w,d0
0001013C 9068 0008                  		sub.w	8(a0),d0
00010140 6400                       		bcc.s	loc_101B0
00010142 4440                       		neg.w	d0
00010144                            
00010144                            loc_101B0:
00010144 0C40 0080                  		cmpi.w	#$80,d0
00010148 6500                       		bcs.s	locret_101C6
0001014A 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
0001014E D007                       		add.b	d7,d0
00010150 0200 0007                  		andi.b	#7,d0
00010154 6600                       		bne.s	locret_101C6
00010156 5428 0025                  		addq.b	#2,$25(a0)
0001015A                            
0001015A                            locret_101C6:
0001015A 4E75                       		rts	
0001015C                            ; ===========================================================================
0001015C                            
0001015C                            Obj55_FlyUp:				; XREF: Obj55_Index2
0001015C 6100 D428                  		bsr.w	SpeedToPos
00010160 0468 0018 0012             		subi.w	#$18,$12(a0)	; make basaran fly upwards
00010166 6100 0000                  		bsr.w	ObjHitCeiling
0001016A 4A41                       		tst.w	d1		; has basaran hit the ceiling?
0001016C 6A00                       		bpl.s	locret_101F4	; if not, branch
0001016E 9368 000C                  		sub.w	d1,$C(a0)
00010172 0268 FFF8 0008             		andi.w	#$FFF8,8(a0)
00010178 4268 0010                  		clr.w	$10(a0)		; stop basaran moving
0001017C 4268 0012                  		clr.w	$12(a0)
00010180 4228 001C                  		clr.b	$1C(a0)
00010184 4228 0025                  		clr.b	$25(a0)
00010188                            
00010188                            locret_101F4:
00010188 4E75                       		rts	
0001018A                            ; ===========================================================================
0001018A                            
0001018A                            Obj55_ChkSonic:				; XREF: Obj55_ChkDrop
0001018A 323C 0100                  		move.w	#$100,d1
0001018E 08E8 0000 0022             		bset	#0,$22(a0)
00010194 3038 D008                  		move.w	($FFFFD008).w,d0
00010198 9068 0008                  		sub.w	8(a0),d0
0001019C 6400                       		bcc.s	loc_10214
0001019E 4440                       		neg.w	d0
000101A0 4441                       		neg.w	d1
000101A2 08A8 0000 0022             		bclr	#0,$22(a0)
000101A8                            
000101A8                            loc_10214:
000101A8 B042                       		cmp.w	d2,d0
000101AA 4E75                       		rts	
000101AC                            ; ===========================================================================
000101AC 6100 D3D8                  		bsr.w	SpeedToPos
000101B0 6100 D3FA                  		bsr.w	DisplaySprite
000101B4 4A28 0001                  		tst.b	1(a0)
000101B8 6A00 D42E                  		bpl.w	DeleteObject
000101BC 4E75                       		rts	
000101BE                            ; ===========================================================================
000101BE                            Ani_obj55:
000101BE                            	include "_anim\obj55.asm"
000101BE                            ; ---------------------------------------------------------------------------
000101BE                            ; Animation script - Basaran enemy
000101BE                            ; ---------------------------------------------------------------------------
000101BE 0000                       		dc.w byte_10230-Ani_obj55
000101C0 0000                       		dc.w byte_10234-Ani_obj55
000101C2 0000                       		dc.w byte_10238-Ani_obj55
000101C4 0F00 FF00                  byte_10230:	dc.b $F, 0, $FF, 0
000101C8 0F01 FF00                  byte_10234:	dc.b $F, 1, $FF, 0
000101CC 0301 0203 02FF             byte_10238:	dc.b 3,	1, 2, 3, 2, $FF
000101D2                            		even
000101D2                            		even
000101D2                            
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            ; Sprite mappings - Basaran enemy (MZ)
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            Map_obj55:
000101D2                            	include "_maps\obj55.asm"
000101D2                            ; ---------------------------------------------------------------------------
000101D2                            ; Sprite mappings - Basaran enemy (MZ)
000101D2                            ; ---------------------------------------------------------------------------
000101D2 0000 0000                  		dc.w byte_10246-Map_obj55, byte_1024C-Map_obj55
000101D6 0000 0000                  		dc.w byte_1025C-Map_obj55, byte_10271-Map_obj55
000101DA 01                         byte_10246:	dc.b 1
000101DB F406 0000 F8               		dc.b $F4, 6, 0,	0, $F8
000101E0 03                         byte_1024C:	dc.b 3
000101E1 F20E 0006 F4               		dc.b $F2, $E, 0, 6, $F4
000101E6 0A04 0012 FC               		dc.b $A, 4, 0, $12, $FC
000101EB 0200 0027 0C               		dc.b 2,	0, 0, $27, $C
000101F0 04                         byte_1025C:	dc.b 4
000101F1 F804 0014 F8               		dc.b $F8, 4, 0,	$14, $F8
000101F6 000C 0016 F0               		dc.b 0,	$C, 0, $16, $F0
000101FB 0804 001A 00               		dc.b 8,	4, 0, $1A, 0
00010200 0000 0028 0C               		dc.b 0,	0, 0, $28, $C
00010205 04                         byte_10271:	dc.b 4
00010206 F609 001C F5               		dc.b $F6, 9, 0,	$1C, $F5
0001020B 0608 0022 F4               		dc.b 6,	8, 0, $22, $F4
00010210 0E04 0025 F4               		dc.b $E, 4, 0, $25, $F4
00010215 FE00 0027 0C               		dc.b $FE, 0, 0,	$27, $C
0001021A                            		even
0001021A                            		even
0001021A                            
0001021A                            ; ===========================================================================
0001021A                            ; ---------------------------------------------------------------------------
0001021A                            ; Object 56 - moving blocks (SYZ/SLZ), large doors (LZ)
0001021A                            ; ---------------------------------------------------------------------------
0001021A                            
0001021A                            Obj56:					; XREF: Obj_Index
0001021A 7000                       		moveq	#0,d0
0001021C 1028 0024                  		move.b	$24(a0),d0
00010220 323B 0000                  		move.w	Obj56_Index(pc,d0.w),d1
00010224 4EFB 1000                  		jmp	Obj56_Index(pc,d1.w)
00010228                            ; ===========================================================================
00010228 0000                       Obj56_Index:	dc.w Obj56_Main-Obj56_Index
0001022A 0000                       		dc.w Obj56_Action-Obj56_Index
0001022C                            
0001022C 1010                       Obj56_Var:	dc.b  $10, $10		; width, height
0001022E 2020                       		dc.b  $20, $20
00010230 1020                       		dc.b  $10, $20
00010232 201A                       		dc.b  $20, $1A
00010234 1027                       		dc.b  $10, $27
00010236 1010                       		dc.b  $10, $10
00010238 0820                       		dc.b	8, $20
0001023A 4010                       		dc.b  $40, $10
0001023C                            ; ===========================================================================
0001023C                            
0001023C                            Obj56_Main:				; XREF: Obj56_Index
0001023C 5428 0024                  		addq.b	#2,$24(a0)
00010240 217C 0000 0000 0004        		move.l	#Map_obj56,4(a0)
00010248 317C 4000 0002             		move.w	#$4000,2(a0)
0001024E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010254 6600                       		bne.s	loc_102C8
00010256 317C 43C4 0002             		move.w	#$43C4,2(a0)	; LZ specific code
0001025C                            
0001025C                            loc_102C8:
0001025C 117C 0004 0001             		move.b	#4,1(a0)
00010262 117C 0003 0018             		move.b	#3,$18(a0)
00010268 7000                       		moveq	#0,d0
0001026A 1028 0028                  		move.b	$28(a0),d0
0001026E E648                       		lsr.w	#3,d0
00010270 0240 000E                  		andi.w	#$E,d0
00010274 45FB 00B6                  		lea	Obj56_Var(pc,d0.w),a2
00010278 115A 0019                  		move.b	(a2)+,$19(a0)
0001027C 1152 0016                  		move.b	(a2),$16(a0)
00010280 E248                       		lsr.w	#1,d0
00010282 1140 001A                  		move.b	d0,$1A(a0)
00010286 3168 0008 0034             		move.w	8(a0),$34(a0)
0001028C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010292 7000                       		moveq	#0,d0
00010294 1012                       		move.b	(a2),d0
00010296 D040                       		add.w	d0,d0
00010298 3140 003A                  		move.w	d0,$3A(a0)
0001029C 7000                       		moveq	#0,d0
0001029E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
000102A4 6700                       		beq.s	loc_10332
000102A6 1028 0028                  		move.b	$28(a0),d0	; SYZ/SLZ specific code
000102AA 0240 000F                  		andi.w	#$F,d0
000102AE 5140                       		subq.w	#8,d0
000102B0 6500                       		bcs.s	loc_10332
000102B2 E548                       		lsl.w	#2,d0
000102B4 45F8 FE8A                  		lea	($FFFFFE8A).w,a2
000102B8 45F2 0000                  		lea	(a2,d0.w),a2
000102BC 4A52                       		tst.w	(a2)
000102BE 6A00                       		bpl.s	loc_10332
000102C0 0868 0000 0022             		bchg	#0,$22(a0)
000102C6                            
000102C6                            loc_10332:
000102C6 1028 0028                  		move.b	$28(a0),d0
000102CA 6A00                       		bpl.s	Obj56_Action
000102CC 0200 000F                  		andi.b	#$F,d0
000102D0 1140 003C                  		move.b	d0,$3C(a0)
000102D4 117C 0005 0028             		move.b	#5,$28(a0)
000102DA 0C28 0007 001A             		cmpi.b	#7,$1A(a0)
000102E0 6600                       		bne.s	Obj56_ChkGone
000102E2 117C 000C 0028             		move.b	#$C,$28(a0)
000102E8 317C 0080 003A             		move.w	#$80,$3A(a0)
000102EE                            
000102EE                            Obj56_ChkGone:
000102EE 45F8 FC00                  		lea	($FFFFFC00).w,a2
000102F2 7000                       		moveq	#0,d0
000102F4 1028 0023                  		move.b	$23(a0),d0
000102F8 6700                       		beq.s	Obj56_Action
000102FA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00010300 0832 0000 0002             		btst	#0,2(a2,d0.w)
00010306 6700                       		beq.s	Obj56_Action
00010308 5228 0028                  		addq.b	#1,$28(a0)
0001030C 4268 003A                  		clr.w	$3A(a0)
00010310                            
00010310                            Obj56_Action:				; XREF: Obj56_Index
00010310 3F28 0008                  		move.w	8(a0),-(sp)
00010314 7000                       		moveq	#0,d0
00010316 1028 0028                  		move.b	$28(a0),d0	; get object type
0001031A 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
0001031E D040                       		add.w	d0,d0
00010320 323B 0000                  		move.w	Obj56_TypeIndex(pc,d0.w),d1
00010324 4EBB 1000                  		jsr	Obj56_TypeIndex(pc,d1.w)
00010328 381F                       		move.w	(sp)+,d4
0001032A 4A28 0001                  		tst.b	1(a0)
0001032E 6A00                       		bpl.s	Obj56_ChkDel
00010330 7200                       		moveq	#0,d1
00010332 1228 0019                  		move.b	$19(a0),d1
00010336 0641 000B                  		addi.w	#$B,d1
0001033A 7400                       		moveq	#0,d2
0001033C 1428 0016                  		move.b	$16(a0),d2
00010340 3602                       		move.w	d2,d3
00010342 5243                       		addq.w	#1,d3
00010344 6100 F626                  		bsr.w	SolidObject
00010348                            
00010348                            Obj56_ChkDel:
00010348 3028 0034                  		move.w	$34(a0),d0
0001034C 0240 FF80                  		andi.w	#$FF80,d0
00010350 3238 F700                  		move.w	($FFFFF700).w,d1
00010354 0441 0080                  		subi.w	#$80,d1
00010358 0241 FF80                  		andi.w	#$FF80,d1
0001035C 9041                       		sub.w	d1,d0
0001035E 0C40 0280                  		cmpi.w	#$280,d0
00010362 6200 D284                  		bhi.w	DeleteObject
00010366 6000 D244                  		bra.w	DisplaySprite
0001036A                            ; ===========================================================================
0001036A 0000 0000                  Obj56_TypeIndex:dc.w Obj56_Type00-Obj56_TypeIndex, Obj56_Type01-Obj56_TypeIndex
0001036E 0000 0000                  		dc.w Obj56_Type02-Obj56_TypeIndex, Obj56_Type03-Obj56_TypeIndex
00010372 0000 0000                  		dc.w Obj56_Type04-Obj56_TypeIndex, Obj56_Type05-Obj56_TypeIndex
00010376 0000 0000                  		dc.w Obj56_Type06-Obj56_TypeIndex, Obj56_Type07-Obj56_TypeIndex
0001037A 0000 0000                  		dc.w Obj56_Type08-Obj56_TypeIndex, Obj56_Type09-Obj56_TypeIndex
0001037E 0000 0000                  		dc.w Obj56_Type0A-Obj56_TypeIndex, Obj56_Type0B-Obj56_TypeIndex
00010382 0000 0000                  		dc.w Obj56_Type0C-Obj56_TypeIndex, Obj56_Type0D-Obj56_TypeIndex
00010386                            ; ===========================================================================
00010386                            
00010386                            Obj56_Type00:				; XREF: Obj56_TypeIndex
00010386 4E75                       		rts	
00010388                            ; ===========================================================================
00010388                            
00010388                            Obj56_Type01:				; XREF: Obj56_TypeIndex
00010388 323C 0040                  		move.w	#$40,d1
0001038C 7000                       		moveq	#0,d0
0001038E 1038 FE68                  		move.b	($FFFFFE68).w,d0
00010392 6000                       		bra.s	Obj56_Move_LR
00010394                            ; ===========================================================================
00010394                            
00010394                            Obj56_Type02:				; XREF: Obj56_TypeIndex
00010394 323C 0080                  		move.w	#$80,d1
00010398 7000                       		moveq	#0,d0
0001039A 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
0001039E                            
0001039E                            Obj56_Move_LR:
0001039E 0828 0000 0022             		btst	#0,$22(a0)
000103A4 6700                       		beq.s	loc_10416
000103A6 4440                       		neg.w	d0
000103A8 D041                       		add.w	d1,d0
000103AA                            
000103AA                            loc_10416:
000103AA 3228 0034                  		move.w	$34(a0),d1
000103AE 9240                       		sub.w	d0,d1
000103B0 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000103B4 4E75                       		rts	
000103B6                            ; ===========================================================================
000103B6                            
000103B6                            Obj56_Type03:				; XREF: Obj56_TypeIndex
000103B6 323C 0040                  		move.w	#$40,d1
000103BA 7000                       		moveq	#0,d0
000103BC 1038 FE68                  		move.b	($FFFFFE68).w,d0
000103C0 6000                       		bra.s	Obj56_Move_UD
000103C2                            ; ===========================================================================
000103C2                            
000103C2                            Obj56_Type04:				; XREF: Obj56_TypeIndex
000103C2 323C 0080                  		move.w	#$80,d1
000103C6 7000                       		moveq	#0,d0
000103C8 1038 FE7C                  		move.b	($FFFFFE7C).w,d0
000103CC                            
000103CC                            Obj56_Move_UD:
000103CC 0828 0000 0022             		btst	#0,$22(a0)
000103D2 6700                       		beq.s	loc_10444
000103D4 4440                       		neg.w	d0
000103D6 D041                       		add.w	d1,d0
000103D8                            
000103D8                            loc_10444:
000103D8 3228 0030                  		move.w	$30(a0),d1
000103DC 9240                       		sub.w	d0,d1
000103DE 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000103E2 4E75                       		rts	
000103E4                            ; ===========================================================================
000103E4                            
000103E4                            Obj56_Type05:				; XREF: Obj56_TypeIndex
000103E4 4A28 0038                  		tst.b	$38(a0)
000103E8 6600                       		bne.s	loc_104A4
000103EA 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
000103F0 6600                       		bne.s	loc_1047A	; if not, branch
000103F2 0C28 0003 003C             		cmpi.b	#3,$3C(a0)
000103F8 6600                       		bne.s	loc_1047A
000103FA 4238 F7C9                  		clr.b	($FFFFF7C9).w
000103FE 3038 D008                  		move.w	($FFFFD008).w,d0
00010402 B068 0008                  		cmp.w	8(a0),d0
00010406 6400                       		bcc.s	loc_1047A
00010408 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w
0001040E                            
0001040E                            loc_1047A:
0001040E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010412 7000                       		moveq	#0,d0
00010414 1028 003C                  		move.b	$3C(a0),d0
00010418 0832 0000 0000             		btst	#0,(a2,d0.w)
0001041E 6700                       		beq.s	loc_104AE
00010420 0C78 0100 FE10             		cmpi.w	#$100,($FFFFFE10).w ; is level LZ1 ?
00010426 6600                       		bne.s	loc_1049E	; if not, branch
00010428 0C00 0003                  		cmpi.b	#3,d0
0001042C 6600                       		bne.s	loc_1049E
0001042E 4238 F7C9                  		clr.b	($FFFFF7C9).w
00010432                            
00010432                            loc_1049E:
00010432 117C 0001 0038             		move.b	#1,$38(a0)
00010438                            
00010438                            loc_104A4:
00010438 4A68 003A                  		tst.w	$3A(a0)
0001043C 6700                       		beq.s	loc_104C8
0001043E 5568 003A                  		subq.w	#2,$3A(a0)
00010442                            
00010442                            loc_104AE:
00010442 3028 003A                  		move.w	$3A(a0),d0
00010446 0828 0000 0022             		btst	#0,$22(a0)
0001044C 6700                       		beq.s	loc_104BC
0001044E 4440                       		neg.w	d0
00010450                            
00010450                            loc_104BC:
00010450 3228 0030                  		move.w	$30(a0),d1
00010454 D240                       		add.w	d0,d1
00010456 3141 000C                  		move.w	d1,$C(a0)
0001045A 4E75                       		rts	
0001045C                            ; ===========================================================================
0001045C                            
0001045C                            loc_104C8:
0001045C 5228 0028                  		addq.b	#1,$28(a0)
00010460 4228 0038                  		clr.b	$38(a0)
00010464 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010468 7000                       		moveq	#0,d0
0001046A 1028 0023                  		move.b	$23(a0),d0
0001046E 67D2                       		beq.s	loc_104AE
00010470 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00010476 60CA                       		bra.s	loc_104AE
00010478                            ; ===========================================================================
00010478                            
00010478                            Obj56_Type06:				; XREF: Obj56_TypeIndex
00010478 4A28 0038                  		tst.b	$38(a0)
0001047C 6600                       		bne.s	loc_10500
0001047E 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010482 7000                       		moveq	#0,d0
00010484 1028 003C                  		move.b	$3C(a0),d0
00010488 4A32 0000                  		tst.b	(a2,d0.w)
0001048C 6A00                       		bpl.s	loc_10512
0001048E 117C 0001 0038             		move.b	#1,$38(a0)
00010494                            
00010494                            loc_10500:
00010494 7000                       		moveq	#0,d0
00010496 1028 0016                  		move.b	$16(a0),d0
0001049A D040                       		add.w	d0,d0
0001049C B068 003A                  		cmp.w	$3A(a0),d0
000104A0 6700                       		beq.s	loc_1052C
000104A2 5468 003A                  		addq.w	#2,$3A(a0)
000104A6                            
000104A6                            loc_10512:
000104A6 3028 003A                  		move.w	$3A(a0),d0
000104AA 0828 0000 0022             		btst	#0,$22(a0)
000104B0 6700                       		beq.s	loc_10520
000104B2 4440                       		neg.w	d0
000104B4                            
000104B4                            loc_10520:
000104B4 3228 0030                  		move.w	$30(a0),d1
000104B8 D240                       		add.w	d0,d1
000104BA 3141 000C                  		move.w	d1,$C(a0)
000104BE 4E75                       		rts	
000104C0                            ; ===========================================================================
000104C0                            
000104C0                            loc_1052C:
000104C0 5328 0028                  		subq.b	#1,$28(a0)
000104C4 4228 0038                  		clr.b	$38(a0)
000104C8 45F8 FC00                  		lea	($FFFFFC00).w,a2
000104CC 7000                       		moveq	#0,d0
000104CE 1028 0023                  		move.b	$23(a0),d0
000104D2 67D2                       		beq.s	loc_10512
000104D4 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000104DA 60CA                       		bra.s	loc_10512
000104DC                            ; ===========================================================================
000104DC                            
000104DC                            Obj56_Type07:				; XREF: Obj56_TypeIndex
000104DC 4A28 0038                  		tst.b	$38(a0)
000104E0 6600                       		bne.s	loc_1055E
000104E2 4A38 F7EF                  		tst.b	($FFFFF7EF).w	; has switch number $F been pressed?
000104E6 6700                       		beq.s	locret_10578
000104E8 117C 0001 0038             		move.b	#1,$38(a0)
000104EE 4268 003A                  		clr.w	$3A(a0)
000104F2                            
000104F2                            loc_1055E:
000104F2 5268 0008                  		addq.w	#1,8(a0)
000104F6 3168 0008 0034             		move.w	8(a0),$34(a0)
000104FC 5268 003A                  		addq.w	#1,$3A(a0)
00010500 0C68 0380 003A             		cmpi.w	#$380,$3A(a0)
00010506 6600                       		bne.s	locret_10578
00010508 4228 0028                  		clr.b	$28(a0)
0001050C                            
0001050C                            locret_10578:
0001050C 4E75                       		rts	
0001050E                            ; ===========================================================================
0001050E                            
0001050E                            Obj56_Type0C:				; XREF: Obj56_TypeIndex
0001050E 4A28 0038                  		tst.b	$38(a0)
00010512 6600                       		bne.s	loc_10598
00010514 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00010518 7000                       		moveq	#0,d0
0001051A 1028 003C                  		move.b	$3C(a0),d0
0001051E 0832 0000 0000             		btst	#0,(a2,d0.w)
00010524 6700                       		beq.s	loc_105A2
00010526 117C 0001 0038             		move.b	#1,$38(a0)
0001052C                            
0001052C                            loc_10598:
0001052C 4A68 003A                  		tst.w	$3A(a0)
00010530 6700                       		beq.s	loc_105C0
00010532 5568 003A                  		subq.w	#2,$3A(a0)
00010536                            
00010536                            loc_105A2:
00010536 3028 003A                  		move.w	$3A(a0),d0
0001053A 0828 0000 0022             		btst	#0,$22(a0)
00010540 6700                       		beq.s	loc_105B4
00010542 4440                       		neg.w	d0
00010544 0640 0080                  		addi.w	#$80,d0
00010548                            
00010548                            loc_105B4:
00010548 3228 0034                  		move.w	$34(a0),d1
0001054C D240                       		add.w	d0,d1
0001054E 3141 0008                  		move.w	d1,8(a0)
00010552 4E75                       		rts	
00010554                            ; ===========================================================================
00010554                            
00010554                            loc_105C0:
00010554 5228 0028                  		addq.b	#1,$28(a0)
00010558 4228 0038                  		clr.b	$38(a0)
0001055C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00010560 7000                       		moveq	#0,d0
00010562 1028 0023                  		move.b	$23(a0),d0
00010566 67CE                       		beq.s	loc_105A2
00010568 08F2 0000 0002             		bset	#0,2(a2,d0.w)
0001056E 60C6                       		bra.s	loc_105A2
00010570                            ; ===========================================================================
00010570                            
00010570                            Obj56_Type0D:				; XREF: Obj56_TypeIndex
00010570 4A28 0038                  		tst.b	$38(a0)
00010574 6600                       		bne.s	loc_105F8
00010576 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
0001057A 7000                       		moveq	#0,d0
0001057C 1028 003C                  		move.b	$3C(a0),d0
00010580 4A32 0000                  		tst.b	(a2,d0.w)
00010584 6A00                       		bpl.s	loc_10606
00010586 117C 0001 0038             		move.b	#1,$38(a0)
0001058C                            
0001058C                            loc_105F8:
0001058C 303C 0080                  		move.w	#$80,d0
00010590 B068 003A                  		cmp.w	$3A(a0),d0
00010594 6700                       		beq.s	loc_10624
00010596 5468 003A                  		addq.w	#2,$3A(a0)
0001059A                            
0001059A                            loc_10606:
0001059A 3028 003A                  		move.w	$3A(a0),d0
0001059E 0828 0000 0022             		btst	#0,$22(a0)
000105A4 6700                       		beq.s	loc_10618
000105A6 4440                       		neg.w	d0
000105A8 0640 0080                  		addi.w	#$80,d0
000105AC                            
000105AC                            loc_10618:
000105AC 3228 0034                  		move.w	$34(a0),d1
000105B0 D240                       		add.w	d0,d1
000105B2 3141 0008                  		move.w	d1,8(a0)
000105B6 4E75                       		rts	
000105B8                            ; ===========================================================================
000105B8                            
000105B8                            loc_10624:
000105B8 5328 0028                  		subq.b	#1,$28(a0)
000105BC 4228 0038                  		clr.b	$38(a0)
000105C0 45F8 FC00                  		lea	($FFFFFC00).w,a2
000105C4 7000                       		moveq	#0,d0
000105C6 1028 0023                  		move.b	$23(a0),d0
000105CA 67CE                       		beq.s	loc_10606
000105CC 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
000105D2 60C6                       		bra.s	loc_10606
000105D4                            ; ===========================================================================
000105D4                            
000105D4                            Obj56_Type08:				; XREF: Obj56_TypeIndex
000105D4 323C 0010                  		move.w	#$10,d1
000105D8 7000                       		moveq	#0,d0
000105DA 1038 FE88                  		move.b	($FFFFFE88).w,d0
000105DE E248                       		lsr.w	#1,d0
000105E0 3638 FE8A                  		move.w	($FFFFFE8A).w,d3
000105E4 6000                       		bra.s	Obj56_Move_Sqr
000105E6                            ; ===========================================================================
000105E6                            
000105E6                            Obj56_Type09:				; XREF: Obj56_TypeIndex
000105E6 323C 0030                  		move.w	#$30,d1
000105EA 7000                       		moveq	#0,d0
000105EC 1038 FE8C                  		move.b	($FFFFFE8C).w,d0
000105F0 3638 FE8E                  		move.w	($FFFFFE8E).w,d3
000105F4 6000                       		bra.s	Obj56_Move_Sqr
000105F6                            ; ===========================================================================
000105F6                            
000105F6                            Obj56_Type0A:				; XREF: Obj56_TypeIndex
000105F6 323C 0050                  		move.w	#$50,d1
000105FA 7000                       		moveq	#0,d0
000105FC 1038 FE90                  		move.b	($FFFFFE90).w,d0
00010600 3638 FE92                  		move.w	($FFFFFE92).w,d3
00010604 6000                       		bra.s	Obj56_Move_Sqr
00010606                            ; ===========================================================================
00010606                            
00010606                            Obj56_Type0B:				; XREF: Obj56_TypeIndex
00010606 323C 0070                  		move.w	#$70,d1
0001060A 7000                       		moveq	#0,d0
0001060C 1038 FE94                  		move.b	($FFFFFE94).w,d0
00010610 3638 FE96                  		move.w	($FFFFFE96).w,d3
00010614                            
00010614                            Obj56_Move_Sqr:
00010614 4A43                       		tst.w	d3
00010616 6600                       		bne.s	loc_1068E
00010618 5228 0022                  		addq.b	#1,$22(a0)
0001061C 0228 0003 0022             		andi.b	#3,$22(a0)
00010622                            
00010622                            loc_1068E:
00010622 1428 0022                  		move.b	$22(a0),d2
00010626 0202 0003                  		andi.b	#3,d2
0001062A 6600                       		bne.s	loc_106AE
0001062C 9041                       		sub.w	d1,d0
0001062E D068 0034                  		add.w	$34(a0),d0
00010632 3140 0008                  		move.w	d0,8(a0)
00010636 4441                       		neg.w	d1
00010638 D268 0030                  		add.w	$30(a0),d1
0001063C 3141 000C                  		move.w	d1,$C(a0)
00010640 4E75                       		rts	
00010642                            ; ===========================================================================
00010642                            
00010642                            loc_106AE:
00010642 5302                       		subq.b	#1,d2
00010644 6600                       		bne.s	loc_106CC
00010646 5341                       		subq.w	#1,d1
00010648 9041                       		sub.w	d1,d0
0001064A 4440                       		neg.w	d0
0001064C D068 0030                  		add.w	$30(a0),d0
00010650 3140 000C                  		move.w	d0,$C(a0)
00010654 5241                       		addq.w	#1,d1
00010656 D268 0034                  		add.w	$34(a0),d1
0001065A 3141 0008                  		move.w	d1,8(a0)
0001065E 4E75                       		rts	
00010660                            ; ===========================================================================
00010660                            
00010660                            loc_106CC:
00010660 5302                       		subq.b	#1,d2
00010662 6600                       		bne.s	loc_106EA
00010664 5341                       		subq.w	#1,d1
00010666 9041                       		sub.w	d1,d0
00010668 4440                       		neg.w	d0
0001066A D068 0034                  		add.w	$34(a0),d0
0001066E 3140 0008                  		move.w	d0,8(a0)
00010672 5241                       		addq.w	#1,d1
00010674 D268 0030                  		add.w	$30(a0),d1
00010678 3141 000C                  		move.w	d1,$C(a0)
0001067C 4E75                       		rts	
0001067E                            ; ===========================================================================
0001067E                            
0001067E                            loc_106EA:
0001067E 9041                       		sub.w	d1,d0
00010680 D068 0030                  		add.w	$30(a0),d0
00010684 3140 000C                  		move.w	d0,$C(a0)
00010688 4441                       		neg.w	d1
0001068A D268 0034                  		add.w	$34(a0),d1
0001068E 3141 0008                  		move.w	d1,8(a0)
00010692 4E75                       		rts	
00010694                            ; ===========================================================================
00010694                            ; ---------------------------------------------------------------------------
00010694                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010694                            ; ---------------------------------------------------------------------------
00010694                            Map_obj56:
00010694                            	include "_maps\obj56.asm"
00010694                            ; ---------------------------------------------------------------------------
00010694                            ; Sprite mappings - moving blocks (SYZ/SLZ/LZ)
00010694                            ; ---------------------------------------------------------------------------
00010694 0000 0000                  		dc.w byte_10710-Map_obj56, byte_10716-Map_obj56
00010698 0000 0000                  		dc.w byte_1072B-Map_obj56, byte_10736-Map_obj56
0001069C 0000 0000                  		dc.w byte_1074B-Map_obj56, byte_1075B-Map_obj56
000106A0 0000 0000                  		dc.w byte_10761-Map_obj56, byte_1076C-Map_obj56
000106A4 01                         byte_10710:	dc.b 1
000106A5 F00F 0061 F0               		dc.b $F0, $F, 0, $61, $F0
000106AA 04                         byte_10716:	dc.b 4
000106AB E00F 0061 E0               		dc.b $E0, $F, 0, $61, $E0
000106B0 E00F 0061 00               		dc.b $E0, $F, 0, $61, 0
000106B5 000F 0061 E0               		dc.b 0,	$F, 0, $61, $E0
000106BA 000F 0061 00               		dc.b 0,	$F, 0, $61, 0
000106BF 02                         byte_1072B:	dc.b 2
000106C0 E00F 0061 F0               		dc.b $E0, $F, 0, $61, $F0
000106C5 000F 0061 F0               		dc.b 0,	$F, 0, $61, $F0
000106CA 04                         byte_10736:	dc.b 4
000106CB E60F 0081 E0               		dc.b $E6, $F, 0, $81, $E0
000106D0 E60F 0081 00               		dc.b $E6, $F, 0, $81, 0
000106D5 000F 0081 E0               		dc.b 0,	$F, 0, $81, $E0
000106DA 000F 0081 00               		dc.b 0,	$F, 0, $81, 0
000106DF 03                         byte_1074B:	dc.b 3
000106E0 D90F 0081 F0               		dc.b $D9, $F, 0, $81, $F0
000106E5 F30F 0081 F0               		dc.b $F3, $F, 0, $81, $F0
000106EA 0D0F 0081 F0               		dc.b $D, $F, 0,	$81, $F0
000106EF 01                         byte_1075B:	dc.b 1
000106F0 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
000106F5 02                         byte_10761:	dc.b 2
000106F6 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
000106FB 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
00010700 04                         byte_1076C:	dc.b 4
00010701 F00F 0022 C0               		dc.b $F0, $F, 0, $22, $C0
00010706 F00F 0022 E0               		dc.b $F0, $F, 0, $22, $E0
0001070B F00F 0022 00               		dc.b $F0, $F, 0, $22, 0
00010710 F00F 0022 20               		dc.b $F0, $F, 0, $22, $20
00010716 00                         		even
00010716 00                         		even
00010716                            
00010716                            ; ===========================================================================
00010716                            ; ---------------------------------------------------------------------------
00010716                            ; Object 57 - spiked balls (SYZ, LZ)
00010716                            ; ---------------------------------------------------------------------------
00010716                            
00010716                            Obj57:					; XREF: Obj_Index
00010716 7000                       		moveq	#0,d0
00010718 1028 0024                  		move.b	$24(a0),d0
0001071C 323B 0000                  		move.w	Obj57_Index(pc,d0.w),d1
00010720 4EFB 1000                  		jmp	Obj57_Index(pc,d1.w)
00010724                            ; ===========================================================================
00010724 0000                       Obj57_Index:	dc.w Obj57_Main-Obj57_Index
00010726 0000                       		dc.w Obj57_Move-Obj57_Index
00010728 0000                       		dc.w Obj57_Display-Obj57_Index
0001072A                            ; ===========================================================================
0001072A                            
0001072A                            Obj57_Main:				; XREF: Obj57_Index
0001072A 5428 0024                  		addq.b	#2,$24(a0)
0001072E 217C 0000 0000 0004        		move.l	#Map_obj57,4(a0)
00010736 317C 03BA 0002             		move.w	#$3BA,2(a0)
0001073C 117C 0004 0001             		move.b	#4,1(a0)
00010742 117C 0004 0018             		move.b	#4,$18(a0)
00010748 117C 0008 0019             		move.b	#8,$19(a0)
0001074E 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010754 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001075A 117C 0098 0020             		move.b	#$98,$20(a0)	; SYZ specific code (chain hurts Sonic)
00010760 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010766 6600                       		bne.s	loc_107E8
00010768 117C 0000 0020             		move.b	#0,$20(a0)	; LZ specific code (chain doesn't hurt)
0001076E 317C 0310 0002             		move.w	#$310,2(a0)
00010774 217C 0000 0000 0004        		move.l	#Map_obj57a,4(a0)
0001077C                            
0001077C                            loc_107E8:
0001077C 1228 0028                  		move.b	$28(a0),d1	; get object type
00010780 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010784 4881                       		ext.w	d1
00010786 E741                       		asl.w	#3,d1		; multiply by 8
00010788 3141 003E                  		move.w	d1,$3E(a0)	; set object twirl speed
0001078C 1028 0022                  		move.b	$22(a0),d0
00010790 E418                       		ror.b	#2,d0
00010792 0200 00C0                  		andi.b	#-$40,d0
00010796 1140 0026                  		move.b	d0,$26(a0)
0001079A 45E8 0029                  		lea	$29(a0),a2
0001079E 1228 0028                  		move.b	$28(a0),d1	; get object type
000107A2 0241 0007                  		andi.w	#7,d1		; read only the	2nd digit
000107A6 14FC 0000                  		move.b	#0,(a2)+
000107AA 3601                       		move.w	d1,d3
000107AC E94B                       		lsl.w	#4,d3
000107AE 1143 003C                  		move.b	d3,$3C(a0)
000107B2 5341                       		subq.w	#1,d1		; set chain length (type-1)
000107B4 6500                       		bcs.s	loc_10894
000107B6 0828 0003 0028             		btst	#3,$28(a0)
000107BC 6700                       		beq.s	Obj57_MakeChain
000107BE 5341                       		subq.w	#1,d1
000107C0 6500                       		bcs.s	loc_10894
000107C2                            
000107C2                            Obj57_MakeChain:
000107C2 6100 D26E                  		bsr.w	SingleObjLoad
000107C6 6600                       		bne.s	loc_10894
000107C8 5228 0029                  		addq.b	#1,$29(a0)
000107CC 3A09                       		move.w	a1,d5
000107CE 0445 D000                  		subi.w	#-$3000,d5
000107D2 EC4D                       		lsr.w	#6,d5
000107D4 0245 007F                  		andi.w	#$7F,d5
000107D8 14C5                       		move.b	d5,(a2)+
000107DA 137C 0004 0024             		move.b	#4,$24(a1)
000107E0 1290                       		move.b	0(a0),0(a1)
000107E2 2368 0004 0004             		move.l	4(a0),4(a1)
000107E8 3368 0002 0002             		move.w	2(a0),2(a1)
000107EE 1368 0001 0001             		move.b	1(a0),1(a1)
000107F4 1368 0018 0018             		move.b	$18(a0),$18(a1)
000107FA 1368 0019 0019             		move.b	$19(a0),$19(a1)
00010800 1368 0020 0020             		move.b	$20(a0),$20(a1)
00010806 0403 0010                  		subi.b	#$10,d3
0001080A 1343 003C                  		move.b	d3,$3C(a1)
0001080E 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00010814 6600                       		bne.s	loc_10890
00010816 4A03                       		tst.b	d3
00010818 6600                       		bne.s	loc_10890
0001081A 137C 0002 001A             		move.b	#2,$1A(a1)
00010820                            
00010820                            loc_10890:
00010820 51C9 FFA0                  		dbf	d1,Obj57_MakeChain ; repeat for	length of chain
00010824                            
00010824                            loc_10894:
00010824 3A08                       		move.w	a0,d5
00010826 0445 D000                  		subi.w	#-$3000,d5
0001082A EC4D                       		lsr.w	#6,d5
0001082C 0245 007F                  		andi.w	#$7F,d5
00010830 14C5                       		move.b	d5,(a2)+
00010832 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00010838 6600                       		bne.s	Obj57_Move
0001083A 117C 008B 0020             		move.b	#$8B,$20(a0)	; if yes, make last spikeball larger
00010840 117C 0001 001A             		move.b	#1,$1A(a0)	; use different	frame
00010846                            
00010846                            Obj57_Move:				; XREF: Obj57_Index
00010846 6100 0000                  		bsr.w	Obj57_MoveSub
0001084A 6000 0000                  		bra.w	Obj57_ChkDel
0001084E                            ; ===========================================================================
0001084E                            
0001084E                            Obj57_MoveSub:				; XREF: Obj57_Move
0001084E 3028 003E                  		move.w	$3E(a0),d0
00010852 D168 0026                  		add.w	d0,$26(a0)
00010856 1028 0026                  		move.b	$26(a0),d0
0001085A 4EB9 0000 29DA             		jsr	(CalcSine).l
00010860 3428 0038                  		move.w	$38(a0),d2
00010864 3628 003A                  		move.w	$3A(a0),d3
00010868 45E8 0029                  		lea	$29(a0),a2
0001086C 7C00                       		moveq	#0,d6
0001086E 1C1A                       		move.b	(a2)+,d6
00010870                            
00010870                            Obj57_MoveLoop:
00010870 7800                       		moveq	#0,d4
00010872 181A                       		move.b	(a2)+,d4
00010874 ED4C                       		lsl.w	#6,d4
00010876 0684 00FF D000             		addi.l	#$FFD000,d4
0001087C 2244                       		movea.l	d4,a1
0001087E 7800                       		moveq	#0,d4
00010880 1829 003C                  		move.b	$3C(a1),d4
00010884 2A04                       		move.l	d4,d5
00010886 C9C0                       		muls.w	d0,d4
00010888 E084                       		asr.l	#8,d4
0001088A CBC1                       		muls.w	d1,d5
0001088C E085                       		asr.l	#8,d5
0001088E D842                       		add.w	d2,d4
00010890 DA43                       		add.w	d3,d5
00010892 3344 000C                  		move.w	d4,$C(a1)
00010896 3345 0008                  		move.w	d5,8(a1)
0001089A 51CE FFD4                  		dbf	d6,Obj57_MoveLoop
0001089E 4E75                       		rts	
000108A0                            ; ===========================================================================
000108A0                            
000108A0                            Obj57_ChkDel:				; XREF: Obj57_Move
000108A0 3028 003A                  		move.w	$3A(a0),d0
000108A4 0240 FF80                  		andi.w	#$FF80,d0
000108A8 3238 F700                  		move.w	($FFFFF700).w,d1
000108AC 0441 0080                  		subi.w	#$80,d1
000108B0 0241 FF80                  		andi.w	#$FF80,d1
000108B4 9041                       		sub.w	d1,d0
000108B6 0C40 0280                  		cmpi.w	#$280,d0
000108BA 6200 0000                  		bhi.w	Obj57_Delete
000108BE 6000 CCEC                  		bra.w	DisplaySprite
000108C2                            ; ===========================================================================
000108C2                            
000108C2                            Obj57_Delete:				; XREF: Obj57_ChkDel
000108C2 7400                       		moveq	#0,d2
000108C4 45E8 0029                  		lea	$29(a0),a2
000108C8 141A                       		move.b	(a2)+,d2
000108CA                            
000108CA                            Obj57_DelLoop:
000108CA 7000                       		moveq	#0,d0
000108CC 101A                       		move.b	(a2)+,d0
000108CE ED48                       		lsl.w	#6,d0
000108D0 0680 00FF D000             		addi.l	#$FFD000,d0
000108D6 2240                       		movea.l	d0,a1
000108D8 6100 CD10                  		bsr.w	DeleteObject2
000108DC 51CA FFEC                  		dbf	d2,Obj57_DelLoop ; delete all pieces of	chain
000108E0                            
000108E0 4E75                       		rts	
000108E2                            ; ===========================================================================
000108E2                            
000108E2                            Obj57_Display:				; XREF: Obj57_Index
000108E2 6000 CCC8                  		bra.w	DisplaySprite
000108E6                            ; ===========================================================================
000108E6                            ; ---------------------------------------------------------------------------
000108E6                            ; Sprite mappings - chain of spiked balls (SYZ)
000108E6                            ; ---------------------------------------------------------------------------
000108E6                            Map_obj57:
000108E6                            	include "_maps\obj57syz.asm"
000108E6                            ; ---------------------------------------------------------------------------
000108E6                            ; Sprite mappings - chain of spiked balls (SYZ)
000108E6                            ; ---------------------------------------------------------------------------
000108E6 0000                       		dc.w byte_10958-Map_obj57
000108E8 01                         byte_10958:	dc.b 1
000108E9 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000108EE                            		even
000108EE                            		even
000108EE                            
000108EE                            ; ---------------------------------------------------------------------------
000108EE                            ; Sprite mappings - spiked ball	on a chain (LZ)
000108EE                            ; ---------------------------------------------------------------------------
000108EE                            Map_obj57a:
000108EE                            	include "_maps\obj57lz.asm"
000108EE                            ; ---------------------------------------------------------------------------
000108EE                            ; Sprite mappings - spiked ball	on a chain (LZ)
000108EE                            ; ---------------------------------------------------------------------------
000108EE 0000                       		dc.w byte_10964-Map_obj57a
000108F0 0000                       		dc.w byte_1096A-Map_obj57a
000108F2 0000                       		dc.w byte_10970-Map_obj57a
000108F4 01                         byte_10964:	dc.b 1
000108F5 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000108FA 01                         byte_1096A:	dc.b 1
000108FB F00F 0004 F0               		dc.b $F0, $F, 0, 4, $F0
00010900 01                         byte_10970:	dc.b 1
00010901 F805 0014 F8               		dc.b $F8, 5, 0,	$14, $F8
00010906                            		even
00010906                            		even
00010906                            
00010906                            ; ===========================================================================
00010906                            ; ---------------------------------------------------------------------------
00010906                            ; Object 58 - giant spiked balls (SYZ)
00010906                            ; ---------------------------------------------------------------------------
00010906                            
00010906                            Obj58:					; XREF: Obj_Index
00010906 7000                       		moveq	#0,d0
00010908 1028 0024                  		move.b	$24(a0),d0
0001090C 323B 0000                  		move.w	Obj58_Index(pc,d0.w),d1
00010910 4EFB 1000                  		jmp	Obj58_Index(pc,d1.w)
00010914                            ; ===========================================================================
00010914 0000                       Obj58_Index:	dc.w Obj58_Main-Obj58_Index
00010916 0000                       		dc.w Obj58_Move-Obj58_Index
00010918                            ; ===========================================================================
00010918                            
00010918                            Obj58_Main:				; XREF: Obj58_Index
00010918 5428 0024                  		addq.b	#2,$24(a0)
0001091C 217C 0000 0000 0004        		move.l	#Map_obj15b,4(a0)
00010924 317C 0396 0002             		move.w	#$396,2(a0)
0001092A 117C 0004 0001             		move.b	#4,1(a0)
00010930 117C 0004 0018             		move.b	#4,$18(a0)
00010936 117C 0018 0019             		move.b	#$18,$19(a0)
0001093C 3168 0008 003A             		move.w	8(a0),$3A(a0)
00010942 3168 000C 0038             		move.w	$C(a0),$38(a0)
00010948 117C 0086 0020             		move.b	#$86,$20(a0)
0001094E 1228 0028                  		move.b	$28(a0),d1	; get object type
00010952 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
00010956 4881                       		ext.w	d1
00010958 E741                       		asl.w	#3,d1		; multiply by 8
0001095A 3141 003E                  		move.w	d1,$3E(a0)	; set object speed
0001095E 1028 0022                  		move.b	$22(a0),d0
00010962 E418                       		ror.b	#2,d0
00010964 0200 00C0                  		andi.b	#$C0,d0
00010968 1140 0026                  		move.b	d0,$26(a0)
0001096C 117C 0050 003C             		move.b	#$50,$3C(a0)	; set diameter of circle of rotation
00010972                            
00010972                            Obj58_Move:				; XREF: Obj58_Index
00010972 7000                       		moveq	#0,d0
00010974 1028 0028                  		move.b	$28(a0),d0	; get object type
00010978 0240 0007                  		andi.w	#7,d0		; read only the	2nd digit
0001097C D040                       		add.w	d0,d0
0001097E 323B 0000                  		move.w	Obj58_TypeIndex(pc,d0.w),d1
00010982 4EBB 1000                  		jsr	Obj58_TypeIndex(pc,d1.w)
00010986 3028 003A                  		move.w	$3A(a0),d0
0001098A 0240 FF80                  		andi.w	#$FF80,d0
0001098E 3238 F700                  		move.w	($FFFFF700).w,d1
00010992 0441 0080                  		subi.w	#$80,d1
00010996 0241 FF80                  		andi.w	#$FF80,d1
0001099A 9041                       		sub.w	d1,d0
0001099C 0C40 0280                  		cmpi.w	#$280,d0
000109A0 6200 CC46                  		bhi.w	DeleteObject
000109A4 6000 CC06                  		bra.w	DisplaySprite
000109A8                            ; ===========================================================================
000109A8 0000                       Obj58_TypeIndex:dc.w Obj58_Type00-Obj58_TypeIndex
000109AA 0000                       		dc.w Obj58_Type01-Obj58_TypeIndex
000109AC 0000                       		dc.w Obj58_Type02-Obj58_TypeIndex
000109AE 0000                       		dc.w Obj58_Type03-Obj58_TypeIndex
000109B0                            ; ===========================================================================
000109B0                            
000109B0                            Obj58_Type00:				; XREF: Obj58_TypeIndex
000109B0 4E75                       		rts	
000109B2                            ; ===========================================================================
000109B2                            
000109B2                            Obj58_Type01:				; XREF: Obj58_TypeIndex
000109B2 323C 0060                  		move.w	#$60,d1
000109B6 7000                       		moveq	#0,d0
000109B8 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000109BC 0828 0000 0022             		btst	#0,$22(a0)
000109C2 6700                       		beq.s	loc_10A38
000109C4 4440                       		neg.w	d0
000109C6 D041                       		add.w	d1,d0
000109C8                            
000109C8                            loc_10A38:
000109C8 3228 003A                  		move.w	$3A(a0),d1
000109CC 9240                       		sub.w	d0,d1
000109CE 3141 0008                  		move.w	d1,8(a0)	; move object horizontally
000109D2 4E75                       		rts	
000109D4                            ; ===========================================================================
000109D4                            
000109D4                            Obj58_Type02:				; XREF: Obj58_TypeIndex
000109D4 323C 0060                  		move.w	#$60,d1
000109D8 7000                       		moveq	#0,d0
000109DA 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
000109DE 0828 0000 0022             		btst	#0,$22(a0)
000109E4 6700                       		beq.s	loc_10A5C
000109E6 4440                       		neg.w	d0
000109E8 0640 0080                  		addi.w	#$80,d0
000109EC                            
000109EC                            loc_10A5C:
000109EC 3228 0038                  		move.w	$38(a0),d1
000109F0 9240                       		sub.w	d0,d1
000109F2 3141 000C                  		move.w	d1,$C(a0)	; move object vertically
000109F6 4E75                       		rts	
000109F8                            ; ===========================================================================
000109F8                            
000109F8                            Obj58_Type03:				; XREF: Obj58_TypeIndex
000109F8 3028 003E                  		move.w	$3E(a0),d0
000109FC D168 0026                  		add.w	d0,$26(a0)
00010A00 1028 0026                  		move.b	$26(a0),d0
00010A04 4EB9 0000 29DA             		jsr	(CalcSine).l
00010A0A 3428 0038                  		move.w	$38(a0),d2
00010A0E 3628 003A                  		move.w	$3A(a0),d3
00010A12 7800                       		moveq	#0,d4
00010A14 1828 003C                  		move.b	$3C(a0),d4
00010A18 2A04                       		move.l	d4,d5
00010A1A C9C0                       		muls.w	d0,d4
00010A1C E084                       		asr.l	#8,d4
00010A1E CBC1                       		muls.w	d1,d5
00010A20 E085                       		asr.l	#8,d5
00010A22 D842                       		add.w	d2,d4
00010A24 DA43                       		add.w	d3,d5
00010A26 3144 000C                  		move.w	d4,$C(a0)
00010A2A 3145 0008                  		move.w	d5,8(a0)
00010A2E 4E75                       		rts	
00010A30                            ; ===========================================================================
00010A30                            ; ---------------------------------------------------------------------------
00010A30                            ; Sprite mappings - SBZ	spiked ball on a chain
00010A30                            ; ---------------------------------------------------------------------------
00010A30                            Map_obj15b:
00010A30                            	include "_maps\obj15sbz.asm"
00010A30                            ; ---------------------------------------------------------------------------
00010A30                            ; Sprite mappings - spiked ball on a chain (SBZ)
00010A30                            ; ---------------------------------------------------------------------------
00010A30 0000 0000                  		dc.w byte_10AA6-Map_obj15b, byte_10AC0-Map_obj15b
00010A34 0000                       		dc.w byte_10AC6-Map_obj15b
00010A36 05                         byte_10AA6:	dc.b 5
00010A37 E804 0000 F8               		dc.b $E8, 4, 0,	0, $F8
00010A3C F00F 0002 F0               		dc.b $F0, $F, 0, 2, $F0
00010A41 F801 0012 E8               		dc.b $F8, 1, 0,	$12, $E8
00010A46 F801 0014 10               		dc.b $F8, 1, 0,	$14, $10
00010A4B 1004 0016 F8               		dc.b $10, 4, 0,	$16, $F8
00010A50 01                         byte_10AC0:	dc.b 1
00010A51 F805 0020 F8               		dc.b $F8, 5, 0,	$20, $F8
00010A56 02                         byte_10AC6:	dc.b 2
00010A57 F80D 0018 F0               		dc.b $F8, $D, 0, $18, $F0
00010A5C E80D 1018 F0               		dc.b $E8, $D, $10, $18,	$F0
00010A62 00                         		even
00010A62 00                         		even
00010A62                            
00010A62                            ; ===========================================================================
00010A62                            ; ---------------------------------------------------------------------------
00010A62                            ; Object 59 - platforms	that move when you stand on them (SLZ)
00010A62                            ; ---------------------------------------------------------------------------
00010A62                            
00010A62                            Obj59:					; XREF: Obj_Index
00010A62 7000                       		moveq	#0,d0
00010A64 1028 0024                  		move.b	$24(a0),d0
00010A68 323B 0000                  		move.w	Obj59_Index(pc,d0.w),d1
00010A6C 4EBB 1000                  		jsr	Obj59_Index(pc,d1.w)
00010A70 3028 0032                  		move.w	$32(a0),d0
00010A74 0240 FF80                  		andi.w	#$FF80,d0
00010A78 3238 F700                  		move.w	($FFFFF700).w,d1
00010A7C 0441 0080                  		subi.w	#$80,d1
00010A80 0241 FF80                  		andi.w	#$FF80,d1
00010A84 9041                       		sub.w	d1,d0
00010A86 0C40 0280                  		cmpi.w	#$280,d0
00010A8A 6200 CB5C                  		bhi.w	DeleteObject
00010A8E 6000 CB1C                  		bra.w	DisplaySprite
00010A92                            ; ===========================================================================
00010A92 0000                       Obj59_Index:	dc.w Obj59_Main-Obj59_Index
00010A94 0000                       		dc.w Obj59_Platform-Obj59_Index
00010A96 0000                       		dc.w Obj59_Action-Obj59_Index
00010A98 0000                       		dc.w Obj59_MakeMulti-Obj59_Index
00010A9A                            
00010A9A 2800                       Obj59_Var1:	dc.b $28, 0		; width, frame number
00010A9C                            
00010A9C 1001                       Obj59_Var2:	dc.b $10, 1		; width, action	type
00010A9E 2001                       		dc.b $20, 1
00010AA0 3401                       		dc.b $34, 1
00010AA2 1003                       		dc.b $10, 3
00010AA4 2003                       		dc.b $20, 3
00010AA6 3403                       		dc.b $34, 3
00010AA8 1401                       		dc.b $14, 1
00010AAA 2401                       		dc.b $24, 1
00010AAC 2C01                       		dc.b $2C, 1
00010AAE 1403                       		dc.b $14, 3
00010AB0 2403                       		dc.b $24, 3
00010AB2 2C03                       		dc.b $2C, 3
00010AB4 2005                       		dc.b $20, 5
00010AB6 2007                       		dc.b $20, 7
00010AB8 3009                       		dc.b $30, 9
00010ABA                            ; ===========================================================================
00010ABA                            
00010ABA                            Obj59_Main:				; XREF: Obj59_Index
00010ABA 5428 0024                  		addq.b	#2,$24(a0)
00010ABE 7000                       		moveq	#0,d0
00010AC0 1028 0028                  		move.b	$28(a0),d0
00010AC4 6A00                       		bpl.s	Obj59_Main2
00010AC6 5828 0024                  		addq.b	#4,$24(a0)
00010ACA 0240 007F                  		andi.w	#$7F,d0
00010ACE C0FC 0006                  		mulu.w	#6,d0
00010AD2 3140 003C                  		move.w	d0,$3C(a0)
00010AD6 3140 003E                  		move.w	d0,$3E(a0)
00010ADA 588F                       		addq.l	#4,sp
00010ADC 4E75                       		rts	
00010ADE                            ; ===========================================================================
00010ADE                            
00010ADE                            Obj59_Main2:
00010ADE E648                       		lsr.w	#3,d0
00010AE0 0240 001E                  		andi.w	#$1E,d0
00010AE4 45FB 00B4                  		lea	Obj59_Var1(pc,d0.w),a2
00010AE8 115A 0019                  		move.b	(a2)+,$19(a0)
00010AEC 115A 001A                  		move.b	(a2)+,$1A(a0)
00010AF0 7000                       		moveq	#0,d0
00010AF2 1028 0028                  		move.b	$28(a0),d0
00010AF6 D040                       		add.w	d0,d0
00010AF8 0240 001E                  		andi.w	#$1E,d0
00010AFC 45FB 009E                  		lea	Obj59_Var2(pc,d0.w),a2
00010B00 101A                       		move.b	(a2)+,d0
00010B02 E548                       		lsl.w	#2,d0
00010B04 3140 003C                  		move.w	d0,$3C(a0)
00010B08 115A 0028                  		move.b	(a2)+,$28(a0)
00010B0C 217C 0000 0000 0004        		move.l	#Map_obj59,4(a0)
00010B14 317C 4000 0002             		move.w	#$4000,2(a0)
00010B1A 117C 0004 0001             		move.b	#4,1(a0)
00010B20 117C 0004 0018             		move.b	#4,$18(a0)
00010B26 3168 0008 0032             		move.w	8(a0),$32(a0)
00010B2C 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010B32                            
00010B32                            Obj59_Platform:				; XREF: Obj59_Index
00010B32 7200                       		moveq	#0,d1
00010B34 1228 0019                  		move.b	$19(a0),d1
00010B38 4EB9 0000 7436             		jsr	(PlatformObject).l
00010B3E 6000 0000                  		bra.w	Obj59_Types
00010B42                            ; ===========================================================================
00010B42                            
00010B42                            Obj59_Action:				; XREF: Obj59_Index
00010B42 7200                       		moveq	#0,d1
00010B44 1228 0019                  		move.b	$19(a0),d1
00010B48 4EB9 0000 75AA             		jsr	(ExitPlatform).l
00010B4E 3F28 0008                  		move.w	8(a0),-(sp)
00010B52 6100 0000                  		bsr.w	Obj59_Types
00010B56 341F                       		move.w	(sp)+,d2
00010B58 4A10                       		tst.b	0(a0)
00010B5A 6700                       		beq.s	locret_10BD4
00010B5C 4EF9 0000 7B14             		jmp	(MvSonicOnPtfm2).l
00010B62                            ; ===========================================================================
00010B62                            
00010B62                            locret_10BD4:
00010B62 4E75                       		rts	
00010B64                            ; ===========================================================================
00010B64                            
00010B64                            Obj59_Types:
00010B64 7000                       		moveq	#0,d0
00010B66 1028 0028                  		move.b	$28(a0),d0
00010B6A 0240 000F                  		andi.w	#$F,d0
00010B6E D040                       		add.w	d0,d0
00010B70 323B 0000                  		move.w	Obj59_TypeIndex(pc,d0.w),d1
00010B74 4EFB 1000                  		jmp	Obj59_TypeIndex(pc,d1.w)
00010B78                            ; ===========================================================================
00010B78 0000 0000                  Obj59_TypeIndex:dc.w Obj59_Type00-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B7C 0000 0000                  		dc.w Obj59_Type02-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B80 0000 0000                  		dc.w Obj59_Type04-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B84 0000 0000                  		dc.w Obj59_Type06-Obj59_TypeIndex, Obj59_Type01-Obj59_TypeIndex
00010B88 0000 0000                  		dc.w Obj59_Type08-Obj59_TypeIndex, Obj59_Type09-Obj59_TypeIndex
00010B8C                            ; ===========================================================================
00010B8C                            
00010B8C                            Obj59_Type00:				; XREF: Obj59_TypeIndex
00010B8C 4E75                       		rts	
00010B8E                            ; ===========================================================================
00010B8E                            
00010B8E                            Obj59_Type01:				; XREF: Obj59_TypeIndex
00010B8E 0C28 0004 0024             		cmpi.b	#4,$24(a0)	; check	if Sonic is standing on	the object
00010B94 6600                       		bne.s	locret_10C0C
00010B96 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
00010B9A                            
00010B9A                            locret_10C0C:
00010B9A 4E75                       		rts	
00010B9C                            ; ===========================================================================
00010B9C                            
00010B9C                            Obj59_Type02:				; XREF: Obj59_TypeIndex
00010B9C 6100 0000                  		bsr.w	Obj59_Move
00010BA0 3028 0034                  		move.w	$34(a0),d0
00010BA4 4440                       		neg.w	d0
00010BA6 D068 0030                  		add.w	$30(a0),d0
00010BAA 3140 000C                  		move.w	d0,$C(a0)
00010BAE 4E75                       		rts	
00010BB0                            ; ===========================================================================
00010BB0                            
00010BB0                            Obj59_Type04:				; XREF: Obj59_TypeIndex
00010BB0 6100 0000                  		bsr.w	Obj59_Move
00010BB4 3028 0034                  		move.w	$34(a0),d0
00010BB8 D068 0030                  		add.w	$30(a0),d0
00010BBC 3140 000C                  		move.w	d0,$C(a0)
00010BC0 4E75                       		rts	
00010BC2                            ; ===========================================================================
00010BC2                            
00010BC2                            Obj59_Type06:				; XREF: Obj59_TypeIndex
00010BC2 6100 0000                  		bsr.w	Obj59_Move
00010BC6 3028 0034                  		move.w	$34(a0),d0
00010BCA E240                       		asr.w	#1,d0
00010BCC 4440                       		neg.w	d0
00010BCE D068 0030                  		add.w	$30(a0),d0
00010BD2 3140 000C                  		move.w	d0,$C(a0)
00010BD6 3028 0034                  		move.w	$34(a0),d0
00010BDA D068 0032                  		add.w	$32(a0),d0
00010BDE 3140 0008                  		move.w	d0,8(a0)
00010BE2 4E75                       		rts	
00010BE4                            ; ===========================================================================
00010BE4                            
00010BE4                            Obj59_Type08:				; XREF: Obj59_TypeIndex
00010BE4 6100 0000                  		bsr.w	Obj59_Move
00010BE8 3028 0034                  		move.w	$34(a0),d0
00010BEC E240                       		asr.w	#1,d0
00010BEE D068 0030                  		add.w	$30(a0),d0
00010BF2 3140 000C                  		move.w	d0,$C(a0)
00010BF6 3028 0034                  		move.w	$34(a0),d0
00010BFA 4440                       		neg.w	d0
00010BFC D068 0032                  		add.w	$32(a0),d0
00010C00 3140 0008                  		move.w	d0,8(a0)
00010C04 4E75                       		rts	
00010C06                            ; ===========================================================================
00010C06                            
00010C06                            Obj59_Type09:				; XREF: Obj59_TypeIndex
00010C06 6100 0000                  		bsr.w	Obj59_Move
00010C0A 3028 0034                  		move.w	$34(a0),d0
00010C0E 4440                       		neg.w	d0
00010C10 D068 0030                  		add.w	$30(a0),d0
00010C14 3140 000C                  		move.w	d0,$C(a0)
00010C18 4A28 0028                  		tst.b	$28(a0)
00010C1C 6700 0000                  		beq.w	loc_10C94
00010C20 4E75                       		rts	
00010C22                            ; ===========================================================================
00010C22                            
00010C22                            loc_10C94:
00010C22 0828 0003 0022             		btst	#3,$22(a0)
00010C28 6700                       		beq.s	Obj59_Delete
00010C2A 08E9 0001 0022             		bset	#1,$22(a1)
00010C30 08A9 0003 0022             		bclr	#3,$22(a1)
00010C36 137C 0002 0024             		move.b	#2,$24(a1)
00010C3C                            
00010C3C                            Obj59_Delete:
00010C3C 6000 C9AA                  		bra.w	DeleteObject
00010C40                            
00010C40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00010C40                            
00010C40                            
00010C40                            Obj59_Move:				; XREF: Obj59_Type02; et al
00010C40 3028 0038                  		move.w	$38(a0),d0
00010C44 4A28 003A                  		tst.b	$3A(a0)
00010C48 6600                       		bne.s	loc_10CC8
00010C4A 0C40 0800                  		cmpi.w	#$800,d0
00010C4E 6400                       		bcc.s	loc_10CD0
00010C50 0640 0010                  		addi.w	#$10,d0
00010C54 6000                       		bra.s	loc_10CD0
00010C56                            ; ===========================================================================
00010C56                            
00010C56                            loc_10CC8:
00010C56 4A40                       		tst.w	d0
00010C58 6700                       		beq.s	loc_10CD0
00010C5A 0440 0010                  		subi.w	#$10,d0
00010C5E                            
00010C5E                            loc_10CD0:
00010C5E 3140 0038                  		move.w	d0,$38(a0)
00010C62 48C0                       		ext.l	d0
00010C64 E180                       		asl.l	#8,d0
00010C66 D0A8 0034                  		add.l	$34(a0),d0
00010C6A 2140 0034                  		move.l	d0,$34(a0)
00010C6E 4840                       		swap	d0
00010C70 3428 003C                  		move.w	$3C(a0),d2
00010C74 B042                       		cmp.w	d2,d0
00010C76 6300                       		bls.s	loc_10CF0
00010C78 117C 0001 003A             		move.b	#1,$3A(a0)
00010C7E                            
00010C7E                            loc_10CF0:
00010C7E D442                       		add.w	d2,d2
00010C80 B042                       		cmp.w	d2,d0
00010C82 6600                       		bne.s	locret_10CFA
00010C84 4228 0028                  		clr.b	$28(a0)
00010C88                            
00010C88                            locret_10CFA:
00010C88 4E75                       		rts	
00010C8A                            ; End of function Obj59_Move
00010C8A                            
00010C8A                            ; ===========================================================================
00010C8A                            
00010C8A                            Obj59_MakeMulti:			; XREF: Obj59_Index
00010C8A 5368 003C                  		subq.w	#1,$3C(a0)
00010C8E 6600                       		bne.s	Obj59_ChkDel
00010C90 3168 003E 003C             		move.w	$3E(a0),$3C(a0)
00010C96 6100 CD9A                  		bsr.w	SingleObjLoad
00010C9A 6600                       		bne.s	Obj59_ChkDel
00010C9C 12BC 0059                  		move.b	#$59,0(a1)	; duplicate the	object
00010CA0 3368 0008 0008             		move.w	8(a0),8(a1)
00010CA6 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010CAC 137C 000E 0028             		move.b	#$E,$28(a1)
00010CB2                            
00010CB2                            Obj59_ChkDel:
00010CB2 588F                       		addq.l	#4,sp
00010CB4 3028 0008                  		move.w	8(a0),d0
00010CB8 0240 FF80                  		andi.w	#$FF80,d0
00010CBC 3238 F700                  		move.w	($FFFFF700).w,d1
00010CC0 0441 0080                  		subi.w	#$80,d1
00010CC4 0241 FF80                  		andi.w	#$FF80,d1
00010CC8 9041                       		sub.w	d1,d0
00010CCA 0C40 0280                  		cmpi.w	#$280,d0
00010CCE 6200 C918                  		bhi.w	DeleteObject
00010CD2 4E75                       		rts	
00010CD4                            ; ===========================================================================
00010CD4                            ; ---------------------------------------------------------------------------
00010CD4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010CD4                            ; ---------------------------------------------------------------------------
00010CD4                            Map_obj59:
00010CD4                            	include "_maps\obj59.asm"
00010CD4                            ; ---------------------------------------------------------------------------
00010CD4                            ; Sprite mappings - platforms that move	when you stand on them (SLZ)
00010CD4                            ; ---------------------------------------------------------------------------
00010CD4 0000                       		dc.w byte_10D4A-Map_obj59
00010CD6 03                         byte_10D4A:	dc.b 3
00010CD7 F80F 0041 D8               		dc.b $F8, $F, 0, $41, $D8
00010CDC F80F 0041 F8               		dc.b $F8, $F, 0, $41, $F8
00010CE1 F807 0041 18               		dc.b $F8, 7, 0,	$41, $18
00010CE6                            		even
00010CE6                            		even
00010CE6                            
00010CE6                            ; ===========================================================================
00010CE6                            ; ---------------------------------------------------------------------------
00010CE6                            ; Object 5A - platforms	moving in circles (SLZ)
00010CE6                            ; ---------------------------------------------------------------------------
00010CE6                            
00010CE6                            Obj5A:					; XREF: Obj_Index
00010CE6 7000                       		moveq	#0,d0
00010CE8 1028 0024                  		move.b	$24(a0),d0
00010CEC 323B 0000                  		move.w	Obj5A_Index(pc,d0.w),d1
00010CF0 4EBB 1000                  		jsr	Obj5A_Index(pc,d1.w)
00010CF4 3028 0032                  		move.w	$32(a0),d0
00010CF8 0240 FF80                  		andi.w	#$FF80,d0
00010CFC 3238 F700                  		move.w	($FFFFF700).w,d1
00010D00 0441 0080                  		subi.w	#$80,d1
00010D04 0241 FF80                  		andi.w	#$FF80,d1
00010D08 9041                       		sub.w	d1,d0
00010D0A 0C40 0280                  		cmpi.w	#$280,d0
00010D0E 6200 C8D8                  		bhi.w	DeleteObject
00010D12 6000 C898                  		bra.w	DisplaySprite
00010D16                            ; ===========================================================================
00010D16 0000                       Obj5A_Index:	dc.w Obj5A_Main-Obj5A_Index
00010D18 0000                       		dc.w Obj5A_Platform-Obj5A_Index
00010D1A 0000                       		dc.w Obj5A_Action-Obj5A_Index
00010D1C                            ; ===========================================================================
00010D1C                            
00010D1C                            Obj5A_Main:				; XREF: Obj5A_Index
00010D1C 5428 0024                  		addq.b	#2,$24(a0)
00010D20 217C 0000 0000 0004        		move.l	#Map_obj5A,4(a0)
00010D28 317C 4000 0002             		move.w	#$4000,2(a0)
00010D2E 117C 0004 0001             		move.b	#4,1(a0)
00010D34 117C 0004 0018             		move.b	#4,$18(a0)
00010D3A 117C 0018 0019             		move.b	#$18,$19(a0)
00010D40 3168 0008 0032             		move.w	8(a0),$32(a0)
00010D46 3168 000C 0030             		move.w	$C(a0),$30(a0)
00010D4C                            
00010D4C                            Obj5A_Platform:				; XREF: Obj5A_Index
00010D4C 7200                       		moveq	#0,d1
00010D4E 1228 0019                  		move.b	$19(a0),d1
00010D52 4EB9 0000 7436             		jsr	(PlatformObject).l
00010D58 6000 0000                  		bra.w	Obj5A_Types
00010D5C                            ; ===========================================================================
00010D5C                            
00010D5C                            Obj5A_Action:				; XREF: Obj5A_Index
00010D5C 7200                       		moveq	#0,d1
00010D5E 1228 0019                  		move.b	$19(a0),d1
00010D62 4EB9 0000 75AA             		jsr	(ExitPlatform).l
00010D68 3F28 0008                  		move.w	8(a0),-(sp)
00010D6C 6100 0000                  		bsr.w	Obj5A_Types
00010D70 341F                       		move.w	(sp)+,d2
00010D72 4EF9 0000 7B14             		jmp	(MvSonicOnPtfm2).l
00010D78                            ; ===========================================================================
00010D78                            
00010D78                            Obj5A_Types:
00010D78 7000                       		moveq	#0,d0
00010D7A 1028 0028                  		move.b	$28(a0),d0
00010D7E 0240 000C                  		andi.w	#$C,d0
00010D82 E248                       		lsr.w	#1,d0
00010D84 323B 0000                  		move.w	Obj5A_TypeIndex(pc,d0.w),d1
00010D88 4EFB 1000                  		jmp	Obj5A_TypeIndex(pc,d1.w)
00010D8C                            ; ===========================================================================
00010D8C 0000                       Obj5A_TypeIndex:dc.w Obj5A_Type00-Obj5A_TypeIndex
00010D8E 0000                       		dc.w Obj5A_Type04-Obj5A_TypeIndex
00010D90                            ; ===========================================================================
00010D90                            
00010D90                            Obj5A_Type00:				; XREF: Obj5A_TypeIndex
00010D90 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010D94 0401 0050                  		subi.b	#$50,d1
00010D98 4881                       		ext.w	d1
00010D9A 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010D9E 0402 0050                  		subi.b	#$50,d2
00010DA2 4882                       		ext.w	d2
00010DA4 0828 0000 0028             		btst	#0,$28(a0)
00010DAA 6700                       		beq.s	loc_10E24
00010DAC 4441                       		neg.w	d1
00010DAE 4442                       		neg.w	d2
00010DB0                            
00010DB0                            loc_10E24:
00010DB0 0828 0001 0028             		btst	#1,$28(a0)
00010DB6 6700                       		beq.s	loc_10E30
00010DB8 4441                       		neg.w	d1
00010DBA C342                       		exg	d1,d2
00010DBC                            
00010DBC                            loc_10E30:
00010DBC D268 0032                  		add.w	$32(a0),d1
00010DC0 3141 0008                  		move.w	d1,8(a0)
00010DC4 D468 0030                  		add.w	$30(a0),d2
00010DC8 3142 000C                  		move.w	d2,$C(a0)
00010DCC 4E75                       		rts	
00010DCE                            ; ===========================================================================
00010DCE                            
00010DCE                            Obj5A_Type04:				; XREF: Obj5A_TypeIndex
00010DCE 1238 FE80                  		move.b	($FFFFFE80).w,d1
00010DD2 0401 0050                  		subi.b	#$50,d1
00010DD6 4881                       		ext.w	d1
00010DD8 1438 FE84                  		move.b	($FFFFFE84).w,d2
00010DDC 0402 0050                  		subi.b	#$50,d2
00010DE0 4882                       		ext.w	d2
00010DE2 0828 0000 0028             		btst	#0,$28(a0)
00010DE8 6700                       		beq.s	loc_10E62
00010DEA 4441                       		neg.w	d1
00010DEC 4442                       		neg.w	d2
00010DEE                            
00010DEE                            loc_10E62:
00010DEE 0828 0001 0028             		btst	#1,$28(a0)
00010DF4 6700                       		beq.s	loc_10E6E
00010DF6 4441                       		neg.w	d1
00010DF8 C342                       		exg	d1,d2
00010DFA                            
00010DFA                            loc_10E6E:
00010DFA 4441                       		neg.w	d1
00010DFC D268 0032                  		add.w	$32(a0),d1
00010E00 3141 0008                  		move.w	d1,8(a0)
00010E04 D468 0030                  		add.w	$30(a0),d2
00010E08 3142 000C                  		move.w	d2,$C(a0)
00010E0C 4E75                       		rts	
00010E0E                            ; ===========================================================================
00010E0E                            ; ---------------------------------------------------------------------------
00010E0E                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010E0E                            ; ---------------------------------------------------------------------------
00010E0E                            Map_obj5A:
00010E0E                            	include "_maps\obj5A.asm"
00010E0E                            ; ---------------------------------------------------------------------------
00010E0E                            ; Sprite mappings - platforms that move	in circles (SLZ)
00010E0E                            ; ---------------------------------------------------------------------------
00010E0E 0000                       		dc.w byte_10E84-Map_obj5A
00010E10 02                         byte_10E84:	dc.b 2
00010E11 F809 0051 E8               		dc.b $F8, 9, 0,	$51, $E8
00010E16 F809 0851 00               		dc.b $F8, 9, 8,	$51, 0
00010E1C 00                         		even
00010E1C 00                         		even
00010E1C                            
00010E1C                            ; ===========================================================================
00010E1C                            ; ---------------------------------------------------------------------------
00010E1C                            ; Object 5B - blocks that form a staircase (SLZ)
00010E1C                            ; ---------------------------------------------------------------------------
00010E1C                            
00010E1C                            Obj5B:					; XREF: Obj_Index
00010E1C 7000                       		moveq	#0,d0
00010E1E 1028 0024                  		move.b	$24(a0),d0
00010E22 323B 0000                  		move.w	Obj5B_Index(pc,d0.w),d1
00010E26 4EBB 1000                  		jsr	Obj5B_Index(pc,d1.w)
00010E2A 3028 0030                  		move.w	$30(a0),d0
00010E2E 0240 FF80                  		andi.w	#$FF80,d0
00010E32 3238 F700                  		move.w	($FFFFF700).w,d1
00010E36 0441 0080                  		subi.w	#$80,d1
00010E3A 0241 FF80                  		andi.w	#$FF80,d1
00010E3E 9041                       		sub.w	d1,d0
00010E40 0C40 0280                  		cmpi.w	#$280,d0
00010E44 6200 C7A2                  		bhi.w	DeleteObject
00010E48 6000 C762                  		bra.w	DisplaySprite
00010E4C                            ; ===========================================================================
00010E4C 0000                       Obj5B_Index:	dc.w Obj5B_Main-Obj5B_Index
00010E4E 0000                       		dc.w Obj5B_Move-Obj5B_Index
00010E50 0000                       		dc.w Obj5B_Solid-Obj5B_Index
00010E52                            ; ===========================================================================
00010E52                            
00010E52                            Obj5B_Main:				; XREF: Obj5B_Index
00010E52 5428 0024                  		addq.b	#2,$24(a0)
00010E56 7638                       		moveq	#$38,d3
00010E58 7801                       		moveq	#1,d4
00010E5A 0828 0000 0022             		btst	#0,$22(a0)
00010E60 6700                       		beq.s	loc_10EDA
00010E62 763B                       		moveq	#$3B,d3
00010E64 78FF                       		moveq	#-1,d4
00010E66                            
00010E66                            loc_10EDA:
00010E66 3428 0008                  		move.w	8(a0),d2
00010E6A 2248                       		movea.l	a0,a1
00010E6C 7203                       		moveq	#3,d1
00010E6E 6000                       		bra.s	Obj5B_MakeBlocks
00010E70                            ; ===========================================================================
00010E70                            
00010E70                            Obj5B_Loop:
00010E70 6100 CBD6                  		bsr.w	SingleObjLoad2
00010E74 6600 0000                  		bne.w	Obj5B_Move
00010E78 137C 0004 0024             		move.b	#4,$24(a1)
00010E7E                            
00010E7E                            Obj5B_MakeBlocks:			; XREF: Obj5B_Main
00010E7E 12BC 005B                  		move.b	#$5B,0(a1)	; load another block object
00010E82 237C 0000 0000 0004        		move.l	#Map_obj5B,4(a1)
00010E8A 337C 4000 0002             		move.w	#$4000,2(a1)
00010E90 137C 0004 0001             		move.b	#4,1(a1)
00010E96 137C 0003 0018             		move.b	#3,$18(a1)
00010E9C 137C 0010 0019             		move.b	#$10,$19(a1)
00010EA2 1368 0028 0028             		move.b	$28(a0),$28(a1)
00010EA8 3342 0008                  		move.w	d2,8(a1)
00010EAC 3368 000C 000C             		move.w	$C(a0),$C(a1)
00010EB2 3368 0008 0030             		move.w	8(a0),$30(a1)
00010EB8 3369 000C 0032             		move.w	$C(a1),$32(a1)
00010EBE 0642 0020                  		addi.w	#$20,d2
00010EC2 1343 0037                  		move.b	d3,$37(a1)
00010EC6 2348 003C                  		move.l	a0,$3C(a1)
00010ECA D604                       		add.b	d4,d3
00010ECC 51C9 FFA2                  		dbf	d1,Obj5B_Loop	; repeat sequence 3 times
00010ED0                            
00010ED0                            Obj5B_Move:				; XREF: Obj5B_Index
00010ED0 7000                       		moveq	#0,d0
00010ED2 1028 0028                  		move.b	$28(a0),d0
00010ED6 0240 0007                  		andi.w	#7,d0
00010EDA D040                       		add.w	d0,d0
00010EDC 323B 0000                  		move.w	Obj5B_TypeIndex(pc,d0.w),d1
00010EE0 4EBB 1000                  		jsr	Obj5B_TypeIndex(pc,d1.w)
00010EE4                            
00010EE4                            Obj5B_Solid:				; XREF: Obj5B_Index
00010EE4 2468 003C                  		movea.l	$3C(a0),a2
00010EE8 7000                       		moveq	#0,d0
00010EEA 1028 0037                  		move.b	$37(a0),d0
00010EEE 1032 0000                  		move.b	(a2,d0.w),d0
00010EF2 D068 0032                  		add.w	$32(a0),d0
00010EF6 3140 000C                  		move.w	d0,$C(a0)
00010EFA 7200                       		moveq	#0,d1
00010EFC 1228 0019                  		move.b	$19(a0),d1
00010F00 0641 000B                  		addi.w	#$B,d1
00010F04 343C 0010                  		move.w	#$10,d2
00010F08 363C 0011                  		move.w	#$11,d3
00010F0C 3828 0008                  		move.w	8(a0),d4
00010F10 6100 EA5A                  		bsr.w	SolidObject
00010F14 4A04                       		tst.b	d4
00010F16 6A00                       		bpl.s	loc_10F92
00010F18 1544 0036                  		move.b	d4,$36(a2)
00010F1C                            
00010F1C                            loc_10F92:
00010F1C 0828 0003 0022             		btst	#3,$22(a0)
00010F22 6700                       		beq.s	locret_10FA0
00010F24 157C 0001 0036             		move.b	#1,$36(a2)
00010F2A                            
00010F2A                            locret_10FA0:
00010F2A 4E75                       		rts	
00010F2C                            ; ===========================================================================
00010F2C 0000                       Obj5B_TypeIndex:dc.w Obj5B_Type00-Obj5B_TypeIndex
00010F2E 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00010F30 0000                       		dc.w Obj5B_Type02-Obj5B_TypeIndex
00010F32 0000                       		dc.w Obj5B_Type01-Obj5B_TypeIndex
00010F34                            ; ===========================================================================
00010F34                            
00010F34                            Obj5B_Type00:				; XREF: Obj5B_TypeIndex
00010F34 4A68 0034                  		tst.w	$34(a0)
00010F38 6600                       		bne.s	loc_10FC0
00010F3A 0C28 0001 0036             		cmpi.b	#1,$36(a0)
00010F40 6600                       		bne.s	locret_10FBE
00010F42 317C 001E 0034             		move.w	#$1E,$34(a0)
00010F48                            
00010F48                            locret_10FBE:
00010F48 4E75                       		rts	
00010F4A                            ; ===========================================================================
00010F4A                            
00010F4A                            loc_10FC0:
00010F4A 5368 0034                  		subq.w	#1,$34(a0)
00010F4E 66F8                       		bne.s	locret_10FBE
00010F50 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00010F54 4E75                       		rts	
00010F56                            ; ===========================================================================
00010F56                            
00010F56                            Obj5B_Type02:				; XREF: Obj5B_TypeIndex
00010F56 4A68 0034                  		tst.w	$34(a0)
00010F5A 6600                       		bne.s	loc_10FE0
00010F5C 4A28 0036                  		tst.b	$36(a0)
00010F60 6A00                       		bpl.s	locret_10FDE
00010F62 317C 003C 0034             		move.w	#$3C,$34(a0)
00010F68                            
00010F68                            locret_10FDE:
00010F68 4E75                       		rts	
00010F6A                            ; ===========================================================================
00010F6A                            
00010F6A                            loc_10FE0:
00010F6A 5368 0034                  		subq.w	#1,$34(a0)
00010F6E 6600                       		bne.s	loc_10FEC
00010F70 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00010F74 4E75                       		rts	
00010F76                            ; ===========================================================================
00010F76                            
00010F76                            loc_10FEC:
00010F76 43E8 0038                  		lea	$38(a0),a1
00010F7A 3028 0034                  		move.w	$34(a0),d0
00010F7E E408                       		lsr.b	#2,d0
00010F80 0200 0001                  		andi.b	#1,d0
00010F84 12C0                       		move.b	d0,(a1)+
00010F86 0A00 0001                  		eori.b	#1,d0
00010F8A 12C0                       		move.b	d0,(a1)+
00010F8C 0A00 0001                  		eori.b	#1,d0
00010F90 12C0                       		move.b	d0,(a1)+
00010F92 0A00 0001                  		eori.b	#1,d0
00010F96 12C0                       		move.b	d0,(a1)+
00010F98 4E75                       		rts	
00010F9A                            ; ===========================================================================
00010F9A                            
00010F9A                            Obj5B_Type01:				; XREF: Obj5B_TypeIndex
00010F9A 43E8 0038                  		lea	$38(a0),a1
00010F9E 0C11 0080                  		cmpi.b	#$80,(a1)
00010FA2 6700                       		beq.s	locret_11038
00010FA4 5211                       		addq.b	#1,(a1)
00010FA6 7200                       		moveq	#0,d1
00010FA8 1219                       		move.b	(a1)+,d1
00010FAA 4841                       		swap	d1
00010FAC E289                       		lsr.l	#1,d1
00010FAE 2401                       		move.l	d1,d2
00010FB0 E289                       		lsr.l	#1,d1
00010FB2 2601                       		move.l	d1,d3
00010FB4 D682                       		add.l	d2,d3
00010FB6 4841                       		swap	d1
00010FB8 4842                       		swap	d2
00010FBA 4843                       		swap	d3
00010FBC 12C3                       		move.b	d3,(a1)+
00010FBE 12C2                       		move.b	d2,(a1)+
00010FC0 12C1                       		move.b	d1,(a1)+
00010FC2                            
00010FC2                            locret_11038:
00010FC2 4E75                       		rts	
00010FC4 4E75                       		rts	
00010FC6                            ; ===========================================================================
00010FC6                            ; ---------------------------------------------------------------------------
00010FC6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00010FC6                            ; ---------------------------------------------------------------------------
00010FC6                            Map_obj5B:
00010FC6                            	include "_maps\obj5B.asm"
00010FC6                            ; ---------------------------------------------------------------------------
00010FC6                            ; Sprite mappings - blocks that	form a staircase (SLZ)
00010FC6                            ; ---------------------------------------------------------------------------
00010FC6 0000                       		dc.w byte_1103E-Map_obj5B
00010FC8 01                         byte_1103E:	dc.b 1
00010FC9 F00F 0021 F0               		dc.b $F0, $F, 0, $21, $F0
00010FCE                            		even
00010FCE                            		even
00010FCE                            
00010FCE                            ; ===========================================================================
00010FCE                            ; ---------------------------------------------------------------------------
00010FCE                            ; Object 5C - metal girders in foreground (SLZ)
00010FCE                            ; ---------------------------------------------------------------------------
00010FCE                            
00010FCE                            Obj5C:					; XREF: Obj_Index
00010FCE 7000                       		moveq	#0,d0
00010FD0 1028 0024                  		move.b	$24(a0),d0
00010FD4 323B 0000                  		move.w	Obj5C_Index(pc,d0.w),d1
00010FD8 4EFB 1000                  		jmp	Obj5C_Index(pc,d1.w)
00010FDC                            ; ===========================================================================
00010FDC 0000                       Obj5C_Index:	dc.w Obj5C_Main-Obj5C_Index
00010FDE 0000                       		dc.w Obj5C_Display-Obj5C_Index
00010FE0                            ; ===========================================================================
00010FE0                            
00010FE0                            Obj5C_Main:				; XREF: Obj5C_Index
00010FE0 5428 0024                  		addq.b	#2,$24(a0)
00010FE4 217C 0000 0000 0004        		move.l	#Map_obj5C,4(a0)
00010FEC 317C 83CC 0002             		move.w	#$83CC,2(a0)
00010FF2 117C 0010 0019             		move.b	#$10,$19(a0)
00010FF8                            
00010FF8                            Obj5C_Display:				; XREF: Obj5C_Index
00010FF8 2238 F700                  		move.l	($FFFFF700).w,d1
00010FFC D281                       		add.l	d1,d1
00010FFE 4841                       		swap	d1
00011000 4441                       		neg.w	d1
00011002 3141 0008                  		move.w	d1,8(a0)
00011006 2238 F704                  		move.l	($FFFFF704).w,d1
0001100A D281                       		add.l	d1,d1
0001100C 4841                       		swap	d1
0001100E 0241 003F                  		andi.w	#$3F,d1
00011012 4441                       		neg.w	d1
00011014 0641 0100                  		addi.w	#$100,d1
00011018 3141 000A                  		move.w	d1,$A(a0)
0001101C 6000 C58E                  		bra.w	DisplaySprite
00011020                            ; ===========================================================================
00011020                            ; ---------------------------------------------------------------------------
00011020                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011020                            ; ---------------------------------------------------------------------------
00011020                            Map_obj5C:
00011020                            	include "_maps\obj5C.asm"
00011020                            ; ---------------------------------------------------------------------------
00011020                            ; Sprite mappings - metal girders in foreground	(SLZ)
00011020                            ; ---------------------------------------------------------------------------
00011020 0000                       		dc.w byte_11098-Map_obj5C
00011022 09                         byte_11098:	dc.b 9
00011023 800F 0000 F0               		dc.b $80, $F, 0, 0, $F0
00011028 A00F 1000 F0               		dc.b $A0, $F, $10, 0, $F0
0001102D C00F 0000 F0               		dc.b $C0, $F, 0, 0, $F0
00011032 E00F 1000 F0               		dc.b $E0, $F, $10, 0, $F0
00011037 000F 0000 F0               		dc.b 0,	$F, 0, 0, $F0
0001103C 200F 1000 F0               		dc.b $20, $F, $10, 0, $F0
00011041 400F 0000 F0               		dc.b $40, $F, 0, 0, $F0
00011046 600F 1000 F0               		dc.b $60, $F, $10, 0, $F0
0001104B 7F0F 0000 F0               		dc.b $7F, $F, 0, 0, $F0
00011050                            		even
00011050                            		even
00011050                            
00011050                            ; ===========================================================================
00011050                            ; ---------------------------------------------------------------------------
00011050                            ; Object 1B - water surface (LZ)
00011050                            ; ---------------------------------------------------------------------------
00011050                            
00011050                            Obj1B:					; XREF: Obj_Index
00011050 7000                       		moveq	#0,d0
00011052 1028 0024                  		move.b	$24(a0),d0
00011056 323B 0000                  		move.w	Obj1B_Index(pc,d0.w),d1
0001105A 4EFB 1000                  		jmp	Obj1B_Index(pc,d1.w)
0001105E                            ; ===========================================================================
0001105E 0000                       Obj1B_Index:	dc.w Obj1B_Main-Obj1B_Index
00011060 0000                       		dc.w Obj1B_Action-Obj1B_Index
00011062                            ; ===========================================================================
00011062                            
00011062                            Obj1B_Main:				; XREF: Obj1B_Index
00011062 5428 0024                  		addq.b	#2,$24(a0)
00011066 217C 0000 0000 0004        		move.l	#Map_obj1B,4(a0)
0001106E 317C C300 0002             		move.w	#$C300,2(a0)
00011074 117C 0004 0001             		move.b	#4,1(a0)
0001107A 117C 0080 0019             		move.b	#$80,$19(a0)
00011080 3168 0008 0030             		move.w	8(a0),$30(a0)
00011086                            
00011086                            Obj1B_Action:				; XREF: Obj1B_Index
00011086 3238 F700                  		move.w	($FFFFF700).w,d1
0001108A 0241 FFE0                  		andi.w	#$FFE0,d1
0001108E D268 0030                  		add.w	$30(a0),d1
00011092 0838 0000 FE05             		btst	#0,($FFFFFE05).w
00011098 6700                       		beq.s	loc_11114
0001109A 0641 0020                  		addi.w	#$20,d1
0001109E                            
0001109E                            loc_11114:
0001109E 3141 0008                  		move.w	d1,8(a0)	; match	obj x-position to screen position
000110A2 3238 F646                  		move.w	($FFFFF646).w,d1
000110A6 3141 000C                  		move.w	d1,$C(a0)	; match	obj y-position to water	height
000110AA 4A28 0032                  		tst.b	$32(a0)
000110AE 6600                       		bne.s	Obj1B_Animate
000110B0 0838 0007 F605             		btst	#7,($FFFFF605).w ; is Start button pressed?
000110B6 6700                       		beq.s	loc_1114A	; if not, branch
000110B8 5628 001A                  		addq.b	#3,$1A(a0)	; use different	frames
000110BC 117C 0001 0032             		move.b	#1,$32(a0)	; stop animation
000110C2 6000                       		bra.s	Obj1B_Display
000110C4                            ; ===========================================================================
000110C4                            
000110C4                            Obj1B_Animate:				; XREF: loc_11114
000110C4 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
000110C8 6600                       		bne.s	Obj1B_Display	; if yes, branch
000110CA 117C 0000 0032             		move.b	#0,$32(a0)	; resume animation
000110D0 5728 001A                  		subq.b	#3,$1A(a0)	; use normal frames
000110D4                            
000110D4                            loc_1114A:				; XREF: loc_11114
000110D4 5328 001E                  		subq.b	#1,$1E(a0)
000110D8 6A00                       		bpl.s	Obj1B_Display
000110DA 117C 0007 001E             		move.b	#7,$1E(a0)
000110E0 5228 001A                  		addq.b	#1,$1A(a0)
000110E4 0C28 0003 001A             		cmpi.b	#3,$1A(a0)
000110EA 6500                       		bcs.s	Obj1B_Display
000110EC 117C 0000 001A             		move.b	#0,$1A(a0)
000110F2                            
000110F2                            Obj1B_Display:
000110F2 6000 C4B8                  		bra.w	DisplaySprite
000110F6                            ; ===========================================================================
000110F6                            ; ---------------------------------------------------------------------------
000110F6                            ; Sprite mappings - water surface (LZ)
000110F6                            ; ---------------------------------------------------------------------------
000110F6                            Map_obj1B:
000110F6                            	include "_maps\obj1B.asm"
000110F6                            ; ---------------------------------------------------------------------------
000110F6                            ; Sprite mappings - water surface (LZ)
000110F6                            ; ---------------------------------------------------------------------------
000110F6 0000 0000                  		dc.w byte_11178-Map_obj1B, byte_11188-Map_obj1B
000110FA 0000 0000                  		dc.w byte_11198-Map_obj1B, byte_111A8-Map_obj1B
000110FE 0000 0000                  		dc.w byte_111C7-Map_obj1B, byte_111E6-Map_obj1B
00011102 03                         byte_11178:	dc.b 3
00011103 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011108 FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
0001110D FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
00011112 03                         byte_11188:	dc.b 3
00011113 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011118 FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
0001111D FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
00011122 03                         byte_11198:	dc.b 3
00011123 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011128 FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
0001112D FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
00011132 06                         byte_111A8:	dc.b 6
00011133 FD0D 0000 A0               		dc.b $FD, $D, 0, 0, $A0
00011138 FD0D 0000 C0               		dc.b $FD, $D, 0, 0, $C0
0001113D FD0D 0000 E0               		dc.b $FD, $D, 0, 0, $E0
00011142 FD0D 0000 00               		dc.b $FD, $D, 0, 0, 0
00011147 FD0D 0000 20               		dc.b $FD, $D, 0, 0, $20
0001114C FD0D 0000 40               		dc.b $FD, $D, 0, 0, $40
00011151 06                         byte_111C7:	dc.b 6
00011152 FD0D 0008 A0               		dc.b $FD, $D, 0, 8, $A0
00011157 FD0D 0008 C0               		dc.b $FD, $D, 0, 8, $C0
0001115C FD0D 0008 E0               		dc.b $FD, $D, 0, 8, $E0
00011161 FD0D 0008 00               		dc.b $FD, $D, 0, 8, 0
00011166 FD0D 0008 20               		dc.b $FD, $D, 0, 8, $20
0001116B FD0D 0008 40               		dc.b $FD, $D, 0, 8, $40
00011170 06                         byte_111E6:	dc.b 6
00011171 FD0D 0800 A0               		dc.b $FD, $D, 8, 0, $A0
00011176 FD0D 0800 C0               		dc.b $FD, $D, 8, 0, $C0
0001117B FD0D 0800 E0               		dc.b $FD, $D, 8, 0, $E0
00011180 FD0D 0800 00               		dc.b $FD, $D, 8, 0, 0
00011185 FD0D 0800 20               		dc.b $FD, $D, 8, 0, $20
0001118A FD0D 0800 40               		dc.b $FD, $D, 8, 0, $40
00011190 00                         		even
00011190 00                         		even
00011190                            
00011190                            ; ===========================================================================
00011190                            ; ---------------------------------------------------------------------------
00011190                            ; Object 0B - pole that	breaks (LZ)
00011190                            ; ---------------------------------------------------------------------------
00011190                            
00011190                            Obj0B:					; XREF: Obj_Index
00011190 7000                       		moveq	#0,d0
00011192 1028 0024                  		move.b	$24(a0),d0
00011196 323B 0000                  		move.w	Obj0B_Index(pc,d0.w),d1
0001119A 4EFB 1000                  		jmp	Obj0B_Index(pc,d1.w)
0001119E                            ; ===========================================================================
0001119E 0000                       Obj0B_Index:	dc.w Obj0B_Main-Obj0B_Index
000111A0 0000                       		dc.w Obj0B_Action-Obj0B_Index
000111A2 0000                       		dc.w Obj0B_Display-Obj0B_Index
000111A4                            ; ===========================================================================
000111A4                            
000111A4                            Obj0B_Main:				; XREF: Obj0B_Index
000111A4 5428 0024                  		addq.b	#2,$24(a0)
000111A8 217C 0000 0000 0004        		move.l	#Map_obj0B,4(a0)
000111B0 317C 43DE 0002             		move.w	#$43DE,2(a0)
000111B6 117C 0004 0001             		move.b	#4,1(a0)
000111BC 117C 0008 0019             		move.b	#8,$19(a0)
000111C2 117C 0004 0018             		move.b	#4,$18(a0)
000111C8 117C 00E1 0020             		move.b	#$E1,$20(a0)
000111CE 7000                       		moveq	#0,d0
000111D0 1028 0028                  		move.b	$28(a0),d0	; get object type
000111D4 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
000111D8 3140 0030                  		move.w	d0,$30(a0)	; set breakage time
000111DC                            
000111DC                            Obj0B_Action:				; XREF: Obj0B_Index
000111DC 4A28 0032                  		tst.b	$32(a0)
000111E0 6700                       		beq.s	Obj0B_Grab
000111E2 4A68 0030                  		tst.w	$30(a0)
000111E6 6700                       		beq.s	Obj0B_MoveUp
000111E8 5368 0030                  		subq.w	#1,$30(a0)
000111EC 6600                       		bne.s	Obj0B_MoveUp
000111EE 117C 0001 001A             		move.b	#1,$1A(a0)	; break	the pole
000111F4 6000                       		bra.s	Obj0B_Release
000111F6                            ; ===========================================================================
000111F6                            
000111F6                            Obj0B_MoveUp:				; XREF: Obj0B_Action
000111F6 43F8 D000                  		lea	($FFFFD000).w,a1
000111FA 3028 000C                  		move.w	$C(a0),d0
000111FE 0440 0018                  		subi.w	#$18,d0
00011202 0838 0000 F604             		btst	#0,($FFFFF604).w ; check if "up" is pressed
00011208 6700                       		beq.s	Obj0B_MoveDown
0001120A 5369 000C                  		subq.w	#1,$C(a1)	; move Sonic up
0001120E B069 000C                  		cmp.w	$C(a1),d0
00011212 6500                       		bcs.s	Obj0B_MoveDown
00011214 3340 000C                  		move.w	d0,$C(a1)
00011218                            
00011218                            Obj0B_MoveDown:
00011218 0640 0024                  		addi.w	#$24,d0
0001121C 0838 0001 F604             		btst	#1,($FFFFF604).w ; check if "down" is pressed
00011222 6700                       		beq.s	Obj0B_LetGo
00011224 5269 000C                  		addq.w	#1,$C(a1)	; move Sonic down
00011228 B069 000C                  		cmp.w	$C(a1),d0
0001122C 6400                       		bcc.s	Obj0B_LetGo
0001122E 3340 000C                  		move.w	d0,$C(a1)
00011232                            
00011232                            Obj0B_LetGo:
00011232 1038 F603                  		move.b	($FFFFF603).w,d0
00011236 0240 0070                  		andi.w	#$70,d0
0001123A 6700                       		beq.s	Obj0B_Display
0001123C                            
0001123C                            Obj0B_Release:				; XREF: Obj0B_Action
0001123C 4228 0020                  		clr.b	$20(a0)
00011240 5428 0024                  		addq.b	#2,$24(a0)
00011244 4238 F7C8                  		clr.b	($FFFFF7C8).w
00011248 4238 F7C9                  		clr.b	($FFFFF7C9).w
0001124C 4228 0032                  		clr.b	$32(a0)
00011250 6000                       		bra.s	Obj0B_Display
00011252                            ; ===========================================================================
00011252                            
00011252                            Obj0B_Grab:				; XREF: Obj0B_Action
00011252 4A28 0021                  		tst.b	$21(a0)		; has Sonic touched the	pole?
00011256 6700                       		beq.s	Obj0B_Display	; if not, branch
00011258 43F8 D000                  		lea	($FFFFD000).w,a1
0001125C 3028 0008                  		move.w	8(a0),d0
00011260 0640 0014                  		addi.w	#$14,d0
00011264 B069 0008                  		cmp.w	8(a1),d0
00011268 6400                       		bcc.s	Obj0B_Display
0001126A 4228 0021                  		clr.b	$21(a0)
0001126E 0C29 0004 0024             		cmpi.b	#4,$24(a1)
00011274 6400                       		bcc.s	Obj0B_Display
00011276 4269 0010                  		clr.w	$10(a1)		; stop Sonic moving
0001127A 4269 0012                  		clr.w	$12(a1)		; stop Sonic moving
0001127E 3028 0008                  		move.w	8(a0),d0
00011282 0640 0014                  		addi.w	#$14,d0
00011286 3340 0008                  		move.w	d0,8(a1)
0001128A 08A9 0000 0022             		bclr	#0,$22(a1)
00011290 137C 0011 001C             		move.b	#$11,$1C(a1)	; set Sonic's animation to "hanging" ($11)
00011296 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001129C 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
000112A2 117C 0001 0032             		move.b	#1,$32(a0)	; begin	countdown to breakage
000112A8                            
000112A8                            Obj0B_Display:				; XREF: Obj0B_Index
000112A8 6000 E39A                  		bra.w	MarkObjGone
000112AC                            ; ===========================================================================
000112AC                            ; ---------------------------------------------------------------------------
000112AC                            ; Sprite mappings - pole that breaks (LZ)
000112AC                            ; ---------------------------------------------------------------------------
000112AC                            Map_obj0B:
000112AC                            	include "_maps\obj0B.asm"
000112AC                            ; ---------------------------------------------------------------------------
000112AC                            ; Sprite mappings - pole that breaks (LZ)
000112AC                            ; ---------------------------------------------------------------------------
000112AC 0000                       		dc.w byte_11326-Map_obj0B
000112AE 0000                       		dc.w byte_11331-Map_obj0B
000112B0 02                         byte_11326:	dc.b 2			; normal pole
000112B1 E003 0000 FC               		dc.b $E0, 3, 0,	0, $FC
000112B6 0003 1000 FC               		dc.b 0,	3, $10,	0, $FC
000112BB 04                         byte_11331:	dc.b 4			; broken pole
000112BC E001 0000 FC               		dc.b $E0, 1, 0,	0, $FC
000112C1 F005 0004 FC               		dc.b $F0, 5, 0,	4, $FC
000112C6 0005 1004 FC               		dc.b 0,	5, $10,	4, $FC
000112CB 1001 1000 FC               		dc.b $10, 1, $10, 0, $FC
000112D0                            		even
000112D0                            		even
000112D0                            
000112D0                            ; ===========================================================================
000112D0                            ; ---------------------------------------------------------------------------
000112D0                            ; Object 0C - flapping door (LZ)
000112D0                            ; ---------------------------------------------------------------------------
000112D0                            
000112D0                            Obj0C:					; XREF: Obj_Index
000112D0 7000                       		moveq	#0,d0
000112D2 1028 0024                  		move.b	$24(a0),d0
000112D6 323B 0000                  		move.w	Obj0C_Index(pc,d0.w),d1
000112DA 4EFB 1000                  		jmp	Obj0C_Index(pc,d1.w)
000112DE                            ; ===========================================================================
000112DE 0000                       Obj0C_Index:	dc.w Obj0C_Main-Obj0C_Index
000112E0 0000                       		dc.w Obj0C_OpenClose-Obj0C_Index
000112E2                            ; ===========================================================================
000112E2                            
000112E2                            Obj0C_Main:				; XREF: Obj0C_Index
000112E2 5428 0024                  		addq.b	#2,$24(a0)
000112E6 217C 0000 0000 0004        		move.l	#Map_obj0C,4(a0)
000112EE 317C 4328 0002             		move.w	#$4328,2(a0)
000112F4 0028 0004 0001             		ori.b	#4,1(a0)
000112FA 117C 0028 0019             		move.b	#$28,$19(a0)
00011300 7000                       		moveq	#0,d0
00011302 1028 0028                  		move.b	$28(a0),d0	; get object type
00011306 C0FC 003C                  		mulu.w	#60,d0		; multiply by 60 (1 second)
0001130A 3140 0032                  		move.w	d0,$32(a0)	; set flap delay time
0001130E                            
0001130E                            Obj0C_OpenClose:			; XREF: Obj0C_Index
0001130E 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011312 6A00                       		bpl.s	Obj0C_Solid	; if time remains, branch
00011314 3168 0032 0030             		move.w	$32(a0),$30(a0)	; reset	time delay
0001131A 0868 0000 001C             		bchg	#0,$1C(a0)	; open/close door
00011320 4A28 0001                  		tst.b	1(a0)
00011324 6A00                       		bpl.s	Obj0C_Solid
00011326 303C 00BB                  		move.w	#$BB,d0
0001132A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
00011330                            
00011330                            Obj0C_Solid:
00011330 43F9 0000 0000             		lea	(Ani_obj0C).l,a1
00011336 6100 93A0                  		bsr.w	AnimateSprite
0001133A 4238 F7C9                  		clr.b	($FFFFF7C9).w	; enable wind tunnel
0001133E 4A28 001A                  		tst.b	$1A(a0)		; is the door open?
00011342 6600                       		bne.s	Obj0C_Display	; if yes, branch
00011344 3038 D008                  		move.w	($FFFFD008).w,d0
00011348 B068 0008                  		cmp.w	8(a0),d0	; is Sonic in front of the door?
0001134C 6400                       		bcc.s	Obj0C_Display	; if yes, branch
0001134E 11FC 0001 F7C9             		move.b	#1,($FFFFF7C9).w ; disable wind	tunnel
00011354 323C 0013                  		move.w	#$13,d1
00011358 343C 0020                  		move.w	#$20,d2
0001135C 3602                       		move.w	d2,d3
0001135E 5243                       		addq.w	#1,d3
00011360 3828 0008                  		move.w	8(a0),d4
00011364 6100 E606                  		bsr.w	SolidObject	; make the door	solid
00011368                            
00011368                            Obj0C_Display:
00011368 6000 E2DA                  		bra.w	MarkObjGone
0001136C                            ; ===========================================================================
0001136C                            Ani_obj0C:
0001136C                            	include "_anim\obj0C.asm"
0001136C                            ; ---------------------------------------------------------------------------
0001136C                            ; Animation script - flapping door (LZ)
0001136C                            ; ---------------------------------------------------------------------------
0001136C 0000                       		dc.w byte_113E6-Ani_obj0C
0001136E 0000                       		dc.w byte_113EC-Ani_obj0C
00011370 0300 0102 FE01             byte_113E6:	dc.b 3,	0, 1, 2, $FE, 1
00011376 0302 0100 FE01             byte_113EC:	dc.b 3,	2, 1, 0, $FE, 1
0001137C                            		even
0001137C                            		even
0001137C                            
0001137C                            ; ---------------------------------------------------------------------------
0001137C                            ; Sprite mappings - flapping door (LZ)
0001137C                            ; ---------------------------------------------------------------------------
0001137C                            Map_obj0C:
0001137C                            	include "_maps\obj0C.asm"
0001137C                            ; ---------------------------------------------------------------------------
0001137C                            ; Sprite mappings - flapping door (LZ)
0001137C                            ; ---------------------------------------------------------------------------
0001137C 0000                       		dc.w byte_113F8-Map_obj0C
0001137E 0000                       		dc.w byte_11403-Map_obj0C
00011380 0000                       		dc.w byte_1140E-Map_obj0C
00011382 02                         byte_113F8:	dc.b 2
00011383 E007 0000 F8               		dc.b $E0, 7, 0,	0, $F8
00011388 0007 1000 F8               		dc.b 0,	7, $10,	0, $F8
0001138D 02                         byte_11403:	dc.b 2
0001138E DA0F 0008 FB               		dc.b $DA, $F, 0, 8, $FB
00011393 060F 1008 FB               		dc.b 6,	$F, $10, 8, $FB
00011398 02                         byte_1140E:	dc.b 2
00011399 D80D 0018 00               		dc.b $D8, $D, 0, $18, 0
0001139E 180D 1018 00               		dc.b $18, $D, $10, $18,	0
000113A4 00                         		even
000113A4 00                         		even
000113A4                            
000113A4                            ; ===========================================================================
000113A4                            ; ---------------------------------------------------------------------------
000113A4                            ; Object 71 - invisible	solid blocks
000113A4                            ; ---------------------------------------------------------------------------
000113A4                            
000113A4                            Obj71:					; XREF: Obj_Index
000113A4 7000                       		moveq	#0,d0
000113A6 1028 0024                  		move.b	$24(a0),d0
000113AA 323B 0000                  		move.w	Obj71_Index(pc,d0.w),d1
000113AE 4EFB 1000                  		jmp	Obj71_Index(pc,d1.w)
000113B2                            ; ===========================================================================
000113B2 0000                       Obj71_Index:	dc.w Obj71_Main-Obj71_Index
000113B4 0000                       		dc.w Obj71_Solid-Obj71_Index
000113B6                            ; ===========================================================================
000113B6                            
000113B6                            Obj71_Main:				; XREF: Obj71_Index
000113B6 5428 0024                  		addq.b	#2,$24(a0)
000113BA 217C 0000 0000 0004        		move.l	#Map_obj71,4(a0)
000113C2 317C 8680 0002             		move.w	#$8680,2(a0)
000113C8 0028 0004 0001             		ori.b	#4,1(a0)
000113CE 1028 0028                  		move.b	$28(a0),d0	; get object type
000113D2 1200                       		move.b	d0,d1
000113D4 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st byte
000113D8 0640 0010                  		addi.w	#$10,d0
000113DC E248                       		lsr.w	#1,d0
000113DE 1140 0019                  		move.b	d0,$19(a0)	; set object width
000113E2 0241 000F                  		andi.w	#$F,d1		; read only the	2nd byte
000113E6 5241                       		addq.w	#1,d1
000113E8 E749                       		lsl.w	#3,d1
000113EA 1141 0016                  		move.b	d1,$16(a0)	; set object height
000113EE                            
000113EE                            Obj71_Solid:				; XREF: Obj71_Index
000113EE 6100 C436                  		bsr.w	ChkObjOnScreen
000113F2 6600                       		bne.s	Obj71_ChkDel
000113F4 7200                       		moveq	#0,d1
000113F6 1228 0019                  		move.b	$19(a0),d1
000113FA 0641 000B                  		addi.w	#$B,d1
000113FE 7400                       		moveq	#0,d2
00011400 1428 0016                  		move.b	$16(a0),d2
00011404 3602                       		move.w	d2,d3
00011406 5243                       		addq.w	#1,d3
00011408 3828 0008                  		move.w	8(a0),d4
0001140C 6100 E5A4                  		bsr.w	SolidObject71
00011410                            
00011410                            Obj71_ChkDel:
00011410 3028 0008                  		move.w	8(a0),d0
00011414 0240 FF80                  		andi.w	#$FF80,d0
00011418 3238 F700                  		move.w	($FFFFF700).w,d1
0001141C 0441 0080                  		subi.w	#$80,d1
00011420 0241 FF80                  		andi.w	#$FF80,d1
00011424 9041                       		sub.w	d1,d0
00011426 0C40 0280                  		cmpi.w	#$280,d0
0001142A 6200                       		bhi.s	Obj71_Delete
0001142C 4A78 FE08                  		tst.w	($FFFFFE08).w	; are you using	debug mode?
00011430 6700                       		beq.s	Obj71_NoDisplay	; if not, branch
00011432 4EFA C178                  		jmp	DisplaySprite	; if yes, display the object
00011436                            ; ===========================================================================
00011436                            
00011436                            Obj71_NoDisplay:
00011436 4E75                       		rts	
00011438                            ; ===========================================================================
00011438                            
00011438                            Obj71_Delete:
00011438 4EFA C1AE                  		jmp	DeleteObject
0001143C                            ; ===========================================================================
0001143C                            ; ---------------------------------------------------------------------------
0001143C                            ; Sprite mappings - invisible solid blocks
0001143C                            ; ---------------------------------------------------------------------------
0001143C                            Map_obj71:
0001143C                            	include "_maps\obj71.asm"
0001143C                            ; ---------------------------------------------------------------------------
0001143C                            ; Sprite mappings - invisible solid blocks
0001143C                            ; ---------------------------------------------------------------------------
0001143C 0000                       		dc.w byte_114BC-Map_obj71
0001143E 0000                       		dc.w byte_114D1-Map_obj71
00011440 0000                       		dc.w byte_114E6-Map_obj71
00011442 04                         byte_114BC:	dc.b 4
00011443 F005 0018 F0               		dc.b $F0, 5, 0,	$18, $F0
00011448 F005 0018 00               		dc.b $F0, 5, 0,	$18, 0
0001144D 0005 0018 F0               		dc.b 0,	5, 0, $18, $F0
00011452 0005 0018 00               		dc.b 0,	5, 0, $18, 0
00011457 04                         byte_114D1:	dc.b 4
00011458 E005 0018 C0               		dc.b $E0, 5, 0,	$18, $C0
0001145D E005 0018 30               		dc.b $E0, 5, 0,	$18, $30
00011462 1005 0018 C0               		dc.b $10, 5, 0,	$18, $C0
00011467 1005 0018 30               		dc.b $10, 5, 0,	$18, $30
0001146C 04                         byte_114E6:	dc.b 4
0001146D E005 0018 80               		dc.b $E0, 5, 0,	$18, $80
00011472 E005 0018 70               		dc.b $E0, 5, 0,	$18, $70
00011477 1005 0018 80               		dc.b $10, 5, 0,	$18, $80
0001147C 1005 0018 70               		dc.b $10, 5, 0,	$18, $70
00011482 00                         		even
00011482 00                         		even
00011482                            
00011482                            ; ===========================================================================
00011482                            ; ---------------------------------------------------------------------------
00011482                            ; Object 5D - fans (SLZ)
00011482                            ; ---------------------------------------------------------------------------
00011482                            
00011482                            Obj5D:					; XREF: Obj_Index
00011482 7000                       		moveq	#0,d0
00011484 1028 0024                  		move.b	$24(a0),d0
00011488 323B 0000                  		move.w	Obj5D_Index(pc,d0.w),d1
0001148C 4EFB 1000                  		jmp	Obj5D_Index(pc,d1.w)
00011490                            ; ===========================================================================
00011490 0000                       Obj5D_Index:	dc.w Obj5D_Main-Obj5D_Index
00011492 0000                       		dc.w Obj5D_Delay-Obj5D_Index
00011494                            ; ===========================================================================
00011494                            
00011494                            Obj5D_Main:				; XREF: Obj5D_Index
00011494 5428 0024                  		addq.b	#2,$24(a0)
00011498 217C 0000 0000 0004        		move.l	#Map_obj5D,4(a0)
000114A0 317C 43A0 0002             		move.w	#$43A0,2(a0)
000114A6 0028 0004 0001             		ori.b	#4,1(a0)
000114AC 117C 0010 0019             		move.b	#$10,$19(a0)
000114B2 117C 0004 0018             		move.b	#4,$18(a0)
000114B8                            
000114B8                            Obj5D_Delay:				; XREF: Obj5D_Index
000114B8 0828 0001 0028             		btst	#1,$28(a0)	; is object type 02/03?
000114BE 6600                       		bne.s	Obj5D_Blow	; if yes, branch
000114C0 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000114C4 6A00                       		bpl.s	Obj5D_Blow	; if time remains, branch
000114C6 317C 0078 0030             		move.w	#120,$30(a0)	; set delay to 2 seconds
000114CC 0868 0000 0032             		bchg	#0,$32(a0)	; switch fan on/off
000114D2 6700                       		beq.s	Obj5D_Blow	; if fan is off, branch
000114D4 317C 00B4 0030             		move.w	#180,$30(a0)	; set delay to 3 seconds
000114DA                            
000114DA                            Obj5D_Blow:
000114DA 4A28 0032                  		tst.b	$32(a0)		; is fan switched on?
000114DE 6600 0000                  		bne.w	Obj5D_ChkDel	; if not, branch
000114E2 43F8 D000                  		lea	($FFFFD000).w,a1
000114E6 3029 0008                  		move.w	8(a1),d0
000114EA 9068 0008                  		sub.w	8(a0),d0
000114EE 0828 0000 0022             		btst	#0,$22(a0)
000114F4 6600                       		bne.s	Obj5D_ChkSonic
000114F6 4440                       		neg.w	d0
000114F8                            
000114F8                            Obj5D_ChkSonic:
000114F8 0640 0050                  		addi.w	#$50,d0
000114FC 0C40 00F0                  		cmpi.w	#$F0,d0		; is Sonic more	than $A0 pixels	from the fan?
00011500 6400                       		bcc.s	Obj5D_Animate	; if yes, branch
00011502 3229 000C                  		move.w	$C(a1),d1
00011506 0641 0060                  		addi.w	#$60,d1
0001150A 9268 000C                  		sub.w	$C(a0),d1
0001150E 6500                       		bcs.s	Obj5D_Animate
00011510 0C41 0070                  		cmpi.w	#$70,d1
00011514 6400                       		bcc.s	Obj5D_Animate
00011516 0440 0050                  		subi.w	#$50,d0
0001151A 6400                       		bcc.s	loc_1159A
0001151C 4640                       		not.w	d0
0001151E D040                       		add.w	d0,d0
00011520                            
00011520                            loc_1159A:
00011520 0640 0060                  		addi.w	#$60,d0
00011524 0828 0000 0022             		btst	#0,$22(a0)
0001152A 6600                       		bne.s	loc_115A8
0001152C 4440                       		neg.w	d0
0001152E                            
0001152E                            loc_115A8:
0001152E 4400                       		neg.b	d0
00011530 E840                       		asr.w	#4,d0
00011532 0828 0000 0028             		btst	#0,$28(a0)
00011538 6700                       		beq.s	Obj5D_MoveSonic
0001153A 4440                       		neg.w	d0
0001153C                            
0001153C                            Obj5D_MoveSonic:
0001153C D169 0008                  		add.w	d0,8(a1)	; push Sonic away from the fan
00011540                            
00011540                            Obj5D_Animate:				; XREF: Obj5D_ChkSonic
00011540 5328 001E                  		subq.b	#1,$1E(a0)
00011544 6A00                       		bpl.s	Obj5D_ChkDel
00011546 117C 0000 001E             		move.b	#0,$1E(a0)
0001154C 5228 001B                  		addq.b	#1,$1B(a0)
00011550 0C28 0003 001B             		cmpi.b	#3,$1B(a0)
00011556 6500                       		bcs.s	loc_115D8
00011558 117C 0000 001B             		move.b	#0,$1B(a0)
0001155E                            
0001155E                            loc_115D8:
0001155E 7000                       		moveq	#0,d0
00011560 0828 0000 0028             		btst	#0,$28(a0)
00011566 6700                       		beq.s	loc_115E4
00011568 7002                       		moveq	#2,d0
0001156A                            
0001156A                            loc_115E4:
0001156A D028 001B                  		add.b	$1B(a0),d0
0001156E 1140 001A                  		move.b	d0,$1A(a0)
00011572                            
00011572                            Obj5D_ChkDel:				; XREF: Obj5D_Animate
00011572 6100 C038                  		bsr.w	DisplaySprite
00011576 3028 0008                  		move.w	8(a0),d0
0001157A 0240 FF80                  		andi.w	#$FF80,d0
0001157E 3238 F700                  		move.w	($FFFFF700).w,d1
00011582 0441 0080                  		subi.w	#$80,d1
00011586 0241 FF80                  		andi.w	#$FF80,d1
0001158A 9041                       		sub.w	d1,d0
0001158C 0C40 0280                  		cmpi.w	#$280,d0
00011590 6200 C056                  		bhi.w	DeleteObject
00011594 4E75                       		rts	
00011596                            ; ===========================================================================
00011596                            ; ---------------------------------------------------------------------------
00011596                            ; Sprite mappings - fans (SLZ)
00011596                            ; ---------------------------------------------------------------------------
00011596                            Map_obj5D:
00011596                            	include "_maps\obj5D.asm"
00011596                            ; ---------------------------------------------------------------------------
00011596                            ; Sprite mappings - fans (SLZ)
00011596                            ; ---------------------------------------------------------------------------
00011596 0000 0000                  		dc.w byte_1161A-Map_obj5D, byte_11625-Map_obj5D
0001159A 0000 0000                  		dc.w byte_11630-Map_obj5D, byte_11625-Map_obj5D
0001159E 0000                       		dc.w byte_1161A-Map_obj5D
000115A0 02                         byte_1161A:	dc.b 2
000115A1 F009 0000 F8               		dc.b $F0, 9, 0,	0, $F8
000115A6 000D 0006 F0               		dc.b 0,	$D, 0, 6, $F0
000115AB 02                         byte_11625:	dc.b 2
000115AC F00D 000E F0               		dc.b $F0, $D, 0, $E, $F0
000115B1 000D 0016 F0               		dc.b 0,	$D, 0, $16, $F0
000115B6 02                         byte_11630:	dc.b 2
000115B7 F00D 001E F0               		dc.b $F0, $D, 0, $1E, $F0
000115BC 0009 0026 F8               		dc.b 0,	9, 0, $26, $F8
000115C2 00                         		even
000115C2 00                         		even
000115C2                            
000115C2                            ; ===========================================================================
000115C2                            ; ---------------------------------------------------------------------------
000115C2                            ; Object 5E - seesaws (SLZ)
000115C2                            ; ---------------------------------------------------------------------------
000115C2                            
000115C2                            Obj5E:					; XREF: Obj_Index
000115C2 7000                       		moveq	#0,d0
000115C4 1028 0024                  		move.b	$24(a0),d0
000115C8 323B 0000                  		move.w	Obj5E_Index(pc,d0.w),d1
000115CC 4EBB 1000                  		jsr	Obj5E_Index(pc,d1.w)
000115D0 3028 0030                  		move.w	$30(a0),d0
000115D4 0240 FF80                  		andi.w	#$FF80,d0
000115D8 3238 F700                  		move.w	($FFFFF700).w,d1
000115DC 0441 0080                  		subi.w	#$80,d1
000115E0 0241 FF80                  		andi.w	#$FF80,d1
000115E4 9041                       		sub.w	d1,d0
000115E6 6B00 C000                  		bmi.w	DeleteObject
000115EA 0C40 0280                  		cmpi.w	#$280,d0
000115EE 6200 BFF8                  		bhi.w	DeleteObject
000115F2 6000 BFB8                  		bra.w	DisplaySprite
000115F6                            ; ===========================================================================
000115F6 0000                       Obj5E_Index:	dc.w Obj5E_Main-Obj5E_Index
000115F8 0000                       		dc.w Obj5E_Slope-Obj5E_Index
000115FA 0000                       		dc.w Obj5E_Slope2-Obj5E_Index
000115FC 0000                       		dc.w Obj5E_Spikeball-Obj5E_Index
000115FE 0000                       		dc.w Obj5E_MoveSpike-Obj5E_Index
00011600 0000                       		dc.w Obj5E_SpikeFall-Obj5E_Index
00011602                            ; ===========================================================================
00011602                            
00011602                            Obj5E_Main:				; XREF: Obj5E_Index
00011602 5428 0024                  		addq.b	#2,$24(a0)
00011606 217C 0000 0000 0004        		move.l	#Map_obj5E,4(a0)
0001160E 317C 0374 0002             		move.w	#$374,2(a0)
00011614 0028 0004 0001             		ori.b	#4,1(a0)
0001161A 117C 0004 0018             		move.b	#4,$18(a0)
00011620 117C 0030 0019             		move.b	#$30,$19(a0)
00011626 3168 0008 0030             		move.w	8(a0),$30(a0)
0001162C 4A28 0028                  		tst.b	$28(a0)		; is object type 00 ?
00011630 6600                       		bne.s	loc_116D2	; if not, branch
00011632 6100 C414                  		bsr.w	SingleObjLoad2
00011636 6600                       		bne.s	loc_116D2
00011638 12BC 005E                  		move.b	#$5E,0(a1)	; load spikeball object
0001163C 5C29 0024                  		addq.b	#6,$24(a1)
00011640 3368 0008 0008             		move.w	8(a0),8(a1)
00011646 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001164C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011652 2348 003C                  		move.l	a0,$3C(a1)
00011656                            
00011656                            loc_116D2:
00011656 0828 0000 0022             		btst	#0,$22(a0)
0001165C 6700                       		beq.s	loc_116E0
0001165E 117C 0002 001A             		move.b	#2,$1A(a0)
00011664                            
00011664                            loc_116E0:
00011664 1168 001A 003A             		move.b	$1A(a0),$3A(a0)
0001166A                            
0001166A                            Obj5E_Slope:				; XREF: Obj5E_Index
0001166A 1228 003A                  		move.b	$3A(a0),d1
0001166E 6100 0000                  		bsr.w	loc_11766
00011672 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
00011678 0828 0000 001A             		btst	#0,$1A(a0)
0001167E 6700                       		beq.s	loc_11702
00011680 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
00011686                            
00011686                            loc_11702:
00011686 43F8 D000                  		lea	($FFFFD000).w,a1
0001168A 3169 0012 0038             		move.w	$12(a1),$38(a0)
00011690 323C 0030                  		move.w	#$30,d1
00011694 4EB9 0000 750A             		jsr	(SlopeObject).l
0001169A 4E75                       		rts	
0001169C                            ; ===========================================================================
0001169C                            
0001169C                            Obj5E_Slope2:				; XREF: Obj5E_Index
0001169C 6100 0000                  		bsr.w	loc_1174A
000116A0 45F9 0000 0000             		lea	(Obj5E_Data1).l,a2
000116A6 0828 0000 001A             		btst	#0,$1A(a0)
000116AC 6700                       		beq.s	loc_11730
000116AE 45F9 0000 0000             		lea	(Obj5E_Data2).l,a2
000116B4                            
000116B4                            loc_11730:
000116B4 323C 0030                  		move.w	#$30,d1
000116B8 4EB9 0000 75AA             		jsr	(ExitPlatform).l
000116BE 323C 0030                  		move.w	#$30,d1
000116C2 3428 0008                  		move.w	8(a0),d2
000116C6 4EB9 0000 8508             		jsr	SlopeObject2
000116CC 4E75                       		rts	
000116CE                            ; ===========================================================================
000116CE                            
000116CE                            loc_1174A:				; XREF: Obj5E_Slope2
000116CE 7202                       		moveq	#2,d1
000116D0 43F8 D000                  		lea	($FFFFD000).w,a1
000116D4 3028 0008                  		move.w	8(a0),d0
000116D8 9069 0008                  		sub.w	8(a1),d0
000116DC 6400                       		bcc.s	loc_1175E
000116DE 4440                       		neg.w	d0
000116E0 7200                       		moveq	#0,d1
000116E2                            
000116E2                            loc_1175E:
000116E2 0C40 0008                  		cmpi.w	#8,d0
000116E6 6400                       		bcc.s	loc_11766
000116E8 7201                       		moveq	#1,d1
000116EA                            
000116EA                            loc_11766:
000116EA 1028 001A                  		move.b	$1A(a0),d0
000116EE B001                       		cmp.b	d1,d0
000116F0 6700                       		beq.s	locret_11790
000116F2 6400                       		bcc.s	loc_11772
000116F4 5400                       		addq.b	#2,d0
000116F6                            
000116F6                            loc_11772:
000116F6 5300                       		subq.b	#1,d0
000116F8 1140 001A                  		move.b	d0,$1A(a0)
000116FC 1141 003A                  		move.b	d1,$3A(a0)
00011700 08A8 0000 0001             		bclr	#0,1(a0)
00011706 0828 0001 001A             		btst	#1,$1A(a0)
0001170C 6700                       		beq.s	locret_11790
0001170E 08E8 0000 0001             		bset	#0,1(a0)
00011714                            
00011714                            locret_11790:
00011714 4E75                       		rts	
00011716                            ; ===========================================================================
00011716                            
00011716                            Obj5E_Spikeball:			; XREF: Obj5E_Index
00011716 5428 0024                  		addq.b	#2,$24(a0)
0001171A 217C 0000 0000 0004        		move.l	#Map_obj5Ea,4(a0)
00011722 317C 04F0 0002             		move.w	#$4F0,2(a0)
00011728 0028 0004 0001             		ori.b	#4,1(a0)
0001172E 117C 0004 0018             		move.b	#4,$18(a0)
00011734 117C 008B 0020             		move.b	#$8B,$20(a0)
0001173A 117C 000C 0019             		move.b	#$C,$19(a0)
00011740 3168 0008 0030             		move.w	8(a0),$30(a0)
00011746 0668 0028 0008             		addi.w	#$28,8(a0)
0001174C 3168 000C 0034             		move.w	$C(a0),$34(a0)
00011752 117C 0001 001A             		move.b	#1,$1A(a0)
00011758 0828 0000 0022             		btst	#0,$22(a0)
0001175E 6700                       		beq.s	Obj5E_MoveSpike
00011760 0468 0050 0008             		subi.w	#$50,8(a0)
00011766 117C 0002 003A             		move.b	#2,$3A(a0)
0001176C                            
0001176C                            Obj5E_MoveSpike:			; XREF: Obj5E_Index
0001176C 2268 003C                  		movea.l	$3C(a0),a1
00011770 7000                       		moveq	#0,d0
00011772 1028 003A                  		move.b	$3A(a0),d0
00011776 9029 003A                  		sub.b	$3A(a1),d0
0001177A 6700                       		beq.s	loc_1183E
0001177C 6400                       		bcc.s	loc_117FC
0001177E 4400                       		neg.b	d0
00011780                            
00011780                            loc_117FC:
00011780 323C F7E8                  		move.w	#-$818,d1
00011784 343C FEEC                  		move.w	#-$114,d2
00011788 0C00 0001                  		cmpi.b	#1,d0
0001178C 6700                       		beq.s	loc_11822
0001178E 323C F510                  		move.w	#-$AF0,d1
00011792 343C FF34                  		move.w	#-$CC,d2
00011796 0C69 0A00 0038             		cmpi.w	#$A00,$38(a1)
0001179C 6D00                       		blt.s	loc_11822
0001179E 323C F200                  		move.w	#-$E00,d1
000117A2 343C FF60                  		move.w	#-$A0,d2
000117A6                            
000117A6                            loc_11822:
000117A6 3141 0012                  		move.w	d1,$12(a0)
000117AA 3142 0010                  		move.w	d2,$10(a0)
000117AE 3028 0008                  		move.w	8(a0),d0
000117B2 9068 0030                  		sub.w	$30(a0),d0
000117B6 6400                       		bcc.s	loc_11838
000117B8 4468 0010                  		neg.w	$10(a0)
000117BC                            
000117BC                            loc_11838:
000117BC 5428 0024                  		addq.b	#2,$24(a0)
000117C0 6000                       		bra.s	Obj5E_SpikeFall
000117C2                            ; ===========================================================================
000117C2                            
000117C2                            loc_1183E:				; XREF: Obj5E_MoveSpike
000117C2 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
000117C8 7000                       		moveq	#0,d0
000117CA 1029 001A                  		move.b	$1A(a1),d0
000117CE 343C 0028                  		move.w	#$28,d2
000117D2 3228 0008                  		move.w	8(a0),d1
000117D6 9268 0030                  		sub.w	$30(a0),d1
000117DA 6400                       		bcc.s	loc_1185C
000117DC 4442                       		neg.w	d2
000117DE 5440                       		addq.w	#2,d0
000117E0                            
000117E0                            loc_1185C:
000117E0 D040                       		add.w	d0,d0
000117E2 3228 0034                  		move.w	$34(a0),d1
000117E6 D272 0000                  		add.w	(a2,d0.w),d1
000117EA 3141 000C                  		move.w	d1,$C(a0)
000117EE D468 0030                  		add.w	$30(a0),d2
000117F2 3142 0008                  		move.w	d2,8(a0)
000117F6 4268 000E                  		clr.w	$E(a0)
000117FA 4268 000A                  		clr.w	$A(a0)
000117FE 4E75                       		rts	
00011800                            ; ===========================================================================
00011800                            
00011800                            Obj5E_SpikeFall:			; XREF: Obj5E_Index
00011800 4A68 0012                  		tst.w	$12(a0)
00011804 6A00                       		bpl.s	loc_1189A
00011806 6100 BD52                  		bsr.w	ObjectFall
0001180A 3028 0034                  		move.w	$34(a0),d0
0001180E 0440 002F                  		subi.w	#$2F,d0
00011812 B068 000C                  		cmp.w	$C(a0),d0
00011816 6E00                       		bgt.s	locret_11898
00011818 6100 BD40                  		bsr.w	ObjectFall
0001181C                            
0001181C                            locret_11898:
0001181C 4E75                       		rts	
0001181E                            ; ===========================================================================
0001181E                            
0001181E                            loc_1189A:				; XREF: Obj5E_SpikeFall
0001181E 6100 BD3A                  		bsr.w	ObjectFall
00011822 2268 003C                  		movea.l	$3C(a0),a1
00011826 45F9 0000 0000             		lea	(Obj5E_Speeds).l,a2
0001182C 7000                       		moveq	#0,d0
0001182E 1029 001A                  		move.b	$1A(a1),d0
00011832 3228 0008                  		move.w	8(a0),d1
00011836 9268 0030                  		sub.w	$30(a0),d1
0001183A 6400                       		bcc.s	loc_118BA
0001183C 5440                       		addq.w	#2,d0
0001183E                            
0001183E                            loc_118BA:
0001183E D040                       		add.w	d0,d0
00011840 3228 0034                  		move.w	$34(a0),d1
00011844 D272 0000                  		add.w	(a2,d0.w),d1
00011848 B268 000C                  		cmp.w	$C(a0),d1
0001184C 6E00                       		bgt.s	locret_11938
0001184E 2268 003C                  		movea.l	$3C(a0),a1
00011852 7202                       		moveq	#2,d1
00011854 4A68 0010                  		tst.w	$10(a0)
00011858 6B00                       		bmi.s	Obj5E_Spring
0001185A 7200                       		moveq	#0,d1
0001185C                            
0001185C                            Obj5E_Spring:
0001185C 1341 003A                  		move.b	d1,$3A(a1)
00011860 1141 003A                  		move.b	d1,$3A(a0)
00011864 B229 001A                  		cmp.b	$1A(a1),d1
00011868 6700                       		beq.s	loc_1192C
0001186A 08A9 0003 0022             		bclr	#3,$22(a1)
00011870 6700                       		beq.s	loc_1192C
00011872 4229 0025                  		clr.b	$25(a1)
00011876 137C 0002 0024             		move.b	#2,$24(a1)
0001187C 45F8 D000                  		lea	($FFFFD000).w,a2
00011880 3568 0012 0012             		move.w	$12(a0),$12(a2)
00011886 446A 0012                  		neg.w	$12(a2)
0001188A 08EA 0001 0022             		bset	#1,$22(a2)
00011890 08AA 0003 0022             		bclr	#3,$22(a2)
00011896 422A 003C                  		clr.b	$3C(a2)
0001189A 157C 0010 001C             		move.b	#$10,$1C(a2)	; change Sonic's animation to "spring" ($10)
000118A0 157C 0002 0024             		move.b	#2,$24(a2)
000118A6 303C 00CC                  		move.w	#$CC,d0
000118AA 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play spring sound
000118B0                            
000118B0                            loc_1192C:
000118B0 4268 0010                  		clr.w	$10(a0)
000118B4 4268 0012                  		clr.w	$12(a0)
000118B8 5528 0024                  		subq.b	#2,$24(a0)
000118BC                            
000118BC                            locret_11938:
000118BC 4E75                       		rts	
000118BE                            ; ===========================================================================
000118BE FFF8 FFE4 FFD1 FFE4 FFF8   Obj5E_Speeds:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
000118C8                            
000118C8                            Obj5E_Data1:	incbin	misc\slzssaw1.bin
000118F8                            		even
000118F8                            Obj5E_Data2:	incbin	misc\slzssaw2.bin
00011928                            		even
00011928                            ; ---------------------------------------------------------------------------
00011928                            ; Sprite mappings - seesaws (SLZ)
00011928                            ; ---------------------------------------------------------------------------
00011928                            Map_obj5E:
00011928                            	include "_maps\obj5E.asm"
00011928                            ; ---------------------------------------------------------------------------
00011928                            ; Sprite mappings - seesaws (SLZ)
00011928                            ; ---------------------------------------------------------------------------
00011928 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
0001192C 0000 0000                  		dc.w byte_119AC-Map_obj5E, byte_119D0-Map_obj5E
00011930 07                         byte_119AC:	dc.b 7
00011931 D406 0000 D3               		dc.b $D4, 6, 0,	0, $D3
00011936 DC06 0006 E3               		dc.b $DC, 6, 0,	6, $E3
0001193B E404 000C F3               		dc.b $E4, 4, 0,	$C, $F3
00011940 EC0D 000E F3               		dc.b $EC, $D, 0, $E, $F3
00011945 FC08 0016 FB               		dc.b $FC, 8, 0,	$16, $FB
0001194A F406 0006 13               		dc.b $F4, 6, 0,	6, $13
0001194F FC05 0019 23               		dc.b $FC, 5, 0,	$19, $23
00011954 04                         byte_119D0:	dc.b 4
00011955 E60A 001D D0               		dc.b $E6, $A, 0, $1D, $D0
0001195A E60A 0023 E8               		dc.b $E6, $A, 0, $23, $E8
0001195F E60A 0823 00               		dc.b $E6, $A, 8, $23, 0
00011964 E60A 081D 18               		dc.b $E6, $A, 8, $1D, $18
0001196A 00                         		even
0001196A 00                         		even
0001196A                            
0001196A                            ; ---------------------------------------------------------------------------
0001196A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001196A                            ; ---------------------------------------------------------------------------
0001196A                            Map_obj5Ea:
0001196A                            	include "_maps\obj5Eballs.asm"
0001196A                            ; ---------------------------------------------------------------------------
0001196A                            ; Sprite mappings - spiked balls on the	seesaws	(SLZ)
0001196A                            ; ---------------------------------------------------------------------------
0001196A 0000                       		dc.w byte_119EA-Map_obj5Ea
0001196C 0000                       		dc.w byte_119F0-Map_obj5Ea
0001196E 01                         byte_119EA:	dc.b 1
0001196F F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011974 01                         byte_119F0:	dc.b 1
00011975 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001197A                            		even
0001197A                            		even
0001197A                            
0001197A                            ; ===========================================================================
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            ; Object 5F - walking bomb enemy (SLZ, SBZ)
0001197A                            ; ---------------------------------------------------------------------------
0001197A                            
0001197A                            Obj5F:					; XREF: Obj_Index
0001197A 7000                       		moveq	#0,d0
0001197C 1028 0024                  		move.b	$24(a0),d0
00011980 323B 0000                  		move.w	Obj5F_Index(pc,d0.w),d1
00011984 4EFB 1000                  		jmp	Obj5F_Index(pc,d1.w)
00011988                            ; ===========================================================================
00011988 0000                       Obj5F_Index:	dc.w Obj5F_Main-Obj5F_Index
0001198A 0000                       		dc.w Obj5F_Action-Obj5F_Index
0001198C 0000                       		dc.w Obj5F_Display-Obj5F_Index
0001198E 0000                       		dc.w Obj5F_End-Obj5F_Index
00011990                            ; ===========================================================================
00011990                            
00011990                            Obj5F_Main:				; XREF: Obj5F_Index
00011990 5428 0024                  		addq.b	#2,$24(a0)
00011994 217C 0000 0000 0004        		move.l	#Map_obj5F,4(a0)
0001199C 317C 0400 0002             		move.w	#$400,2(a0)
000119A2 0028 0004 0001             		ori.b	#4,1(a0)
000119A8 117C 0003 0018             		move.b	#3,$18(a0)
000119AE 117C 000C 0019             		move.b	#$C,$19(a0)
000119B4 1028 0028                  		move.b	$28(a0),d0
000119B8 6700                       		beq.s	loc_11A3C
000119BA 1140 0024                  		move.b	d0,$24(a0)
000119BE 4E75                       		rts	
000119C0                            ; ===========================================================================
000119C0                            
000119C0                            loc_11A3C:
000119C0 117C 009A 0020             		move.b	#$9A,$20(a0)
000119C6 0868 0000 0022             		bchg	#0,$22(a0)
000119CC                            
000119CC                            Obj5F_Action:				; XREF: Obj5F_Index
000119CC 7000                       		moveq	#0,d0
000119CE 1028 0025                  		move.b	$25(a0),d0
000119D2 323B 0000                  		move.w	Obj5F_Index2(pc,d0.w),d1
000119D6 4EBB 1000                  		jsr	Obj5F_Index2(pc,d1.w)
000119DA 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
000119E0 6100 8CF6                  		bsr.w	AnimateSprite
000119E4 6000 DC5E                  		bra.w	MarkObjGone
000119E8                            ; ===========================================================================
000119E8 0000                       Obj5F_Index2:	dc.w Obj5F_Walk-Obj5F_Index2
000119EA 0000                       		dc.w Obj5F_Wait-Obj5F_Index2
000119EC 0000                       		dc.w Obj5F_Explode-Obj5F_Index2
000119EE                            ; ===========================================================================
000119EE                            
000119EE                            Obj5F_Walk:				; XREF: Obj5F_Index2
000119EE 6100 0000                  		bsr.w	Obj5F_ChkSonic
000119F2 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
000119F6 6A00                       		bpl.s	locret_11A96	; if time remains, branch
000119F8 5428 0025                  		addq.b	#2,$25(a0)
000119FC 317C 05FF 0030             		move.w	#1535,$30(a0)	; set time delay to 25 seconds
00011A02 317C 0010 0010             		move.w	#$10,$10(a0)
00011A08 117C 0001 001C             		move.b	#1,$1C(a0)
00011A0E 0868 0000 0022             		bchg	#0,$22(a0)
00011A14 6700                       		beq.s	locret_11A96
00011A16 4468 0010                  		neg.w	$10(a0)		; change direction
00011A1A                            
00011A1A                            locret_11A96:
00011A1A 4E75                       		rts	
00011A1C                            ; ===========================================================================
00011A1C                            
00011A1C                            Obj5F_Wait:				; XREF: Obj5F_Index2
00011A1C 6100 0000                  		bsr.w	Obj5F_ChkSonic
00011A20 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time delay
00011A24 6B00                       		bmi.s	loc_11AA8
00011A26 6100 BB5E                  		bsr.w	SpeedToPos
00011A2A 4E75                       		rts	
00011A2C                            ; ===========================================================================
00011A2C                            
00011A2C                            loc_11AA8:
00011A2C 5528 0025                  		subq.b	#2,$25(a0)
00011A30 317C 00B3 0030             		move.w	#179,$30(a0)	; set time delay to 3 seconds
00011A36 4268 0010                  		clr.w	$10(a0)		; stop walking
00011A3A 117C 0000 001C             		move.b	#0,$1C(a0)	; stop animation
00011A40 4E75                       		rts	
00011A42                            ; ===========================================================================
00011A42                            
00011A42                            Obj5F_Explode:				; XREF: Obj5F_Index2
00011A42 5368 0030                  		subq.w	#1,$30(a0)
00011A46 6A00                       		bpl.s	locret_11AD0
00011A48 10BC 003F                  		move.b	#$3F,0(a0)	; change bomb into an explosion
00011A4C 117C 0000 0024             		move.b	#0,$24(a0)
00011A52                            
00011A52                            locret_11AD0:
00011A52 4E75                       		rts	
00011A54                            ; ===========================================================================
00011A54                            
00011A54                            Obj5F_ChkSonic:				; XREF: Obj5F_Walk; Obj5F_Wait
00011A54 3038 D008                  		move.w	($FFFFD008).w,d0
00011A58 9068 0008                  		sub.w	8(a0),d0
00011A5C 6400                       		bcc.s	loc_11ADE
00011A5E 4440                       		neg.w	d0
00011A60                            
00011A60                            loc_11ADE:
00011A60 0C40 0060                  		cmpi.w	#$60,d0
00011A64 6400                       		bcc.s	locret_11B5E
00011A66 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011A6A 9068 000C                  		sub.w	$C(a0),d0
00011A6E 6400                       		bcc.s	Obj5F_MakeFuse
00011A70 4440                       		neg.w	d0
00011A72                            
00011A72                            Obj5F_MakeFuse:
00011A72 0C40 0060                  		cmpi.w	#$60,d0
00011A76 6400                       		bcc.s	locret_11B5E
00011A78 4A78 FE08                  		tst.w	($FFFFFE08).w
00011A7C 6600                       		bne.s	locret_11B5E
00011A7E 117C 0004 0025             		move.b	#4,$25(a0)
00011A84 317C 008F 0030             		move.w	#143,$30(a0)	; set fuse time
00011A8A 4268 0010                  		clr.w	$10(a0)
00011A8E 117C 0002 001C             		move.b	#2,$1C(a0)
00011A94 6100 BFB2                  		bsr.w	SingleObjLoad2
00011A98 6600                       		bne.s	locret_11B5E
00011A9A 12BC 005F                  		move.b	#$5F,0(a1)	; load fuse object
00011A9E 3368 0008 0008             		move.w	8(a0),8(a1)
00011AA4 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011AAA 3368 000C 0034             		move.w	$C(a0),$34(a1)
00011AB0 1368 0022 0022             		move.b	$22(a0),$22(a1)
00011AB6 137C 0004 0028             		move.b	#4,$28(a1)
00011ABC 137C 0003 001C             		move.b	#3,$1C(a1)
00011AC2 337C 0010 0012             		move.w	#$10,$12(a1)
00011AC8 0828 0001 0022             		btst	#1,$22(a0)
00011ACE 6700                       		beq.s	loc_11B54
00011AD0 4469 0012                  		neg.w	$12(a1)
00011AD4                            
00011AD4                            loc_11B54:
00011AD4 337C 008F 0030             		move.w	#143,$30(a1)	; set fuse time
00011ADA 2348 003C                  		move.l	a0,$3C(a1)
00011ADE                            
00011ADE                            locret_11B5E:
00011ADE 4E75                       		rts	
00011AE0                            ; ===========================================================================
00011AE0                            
00011AE0                            Obj5F_Display:				; XREF: Obj5F_Index
00011AE0 6100                       		bsr.s	loc_11B70
00011AE2 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011AE8 6100 8BEE                  		bsr.w	AnimateSprite
00011AEC 6000 DB56                  		bra.w	MarkObjGone
00011AF0                            ; ===========================================================================
00011AF0                            
00011AF0                            loc_11B70:
00011AF0 5368 0030                  		subq.w	#1,$30(a0)
00011AF4 6B00                       		bmi.s	loc_11B7C
00011AF6 6100 BA8E                  		bsr.w	SpeedToPos
00011AFA 4E75                       		rts	
00011AFC                            ; ===========================================================================
00011AFC                            
00011AFC                            loc_11B7C:
00011AFC 4268 0030                  		clr.w	$30(a0)
00011B00 4228 0024                  		clr.b	$24(a0)
00011B04 3168 0034 000C             		move.w	$34(a0),$C(a0)
00011B0A 7203                       		moveq	#3,d1
00011B0C 2248                       		movea.l	a0,a1
00011B0E 45F9 0000 0000             		lea	(Obj5F_ShrSpeed).l,a2 ;	load shrapnel speed data
00011B14 6000                       		bra.s	Obj5F_MakeShrap
00011B16                            ; ===========================================================================
00011B16                            
00011B16                            Obj5F_Loop:
00011B16 6100 BF30                  		bsr.w	SingleObjLoad2
00011B1A 6600                       		bne.s	loc_11BCE
00011B1C                            
00011B1C                            Obj5F_MakeShrap:			; XREF: loc_11B7C
00011B1C 12BC 005F                  		move.b	#$5F,0(a1)	; load shrapnel	object
00011B20 3368 0008 0008             		move.w	8(a0),8(a1)
00011B26 3368 000C 000C             		move.w	$C(a0),$C(a1)
00011B2C 137C 0006 0028             		move.b	#6,$28(a1)
00011B32 137C 0004 001C             		move.b	#4,$1C(a1)
00011B38 335A 0010                  		move.w	(a2)+,$10(a1)
00011B3C 335A 0012                  		move.w	(a2)+,$12(a1)
00011B40 137C 0098 0020             		move.b	#$98,$20(a1)
00011B46 08E9 0007 0001             		bset	#7,1(a1)
00011B4C                            
00011B4C                            loc_11BCE:
00011B4C 51C9 FFC8                  		dbf	d1,Obj5F_Loop	; repeat 3 more	times
00011B50                            
00011B50 117C 0006 0024             		move.b	#6,$24(a0)
00011B56                            
00011B56                            Obj5F_End:				; XREF: Obj5F_Index
00011B56 6100 BA2E                  		bsr.w	SpeedToPos
00011B5A 0668 0018 0012             		addi.w	#$18,$12(a0)
00011B60 43F9 0000 0000             		lea	(Ani_obj5F).l,a1
00011B66 6100 8B70                  		bsr.w	AnimateSprite
00011B6A 4A28 0001                  		tst.b	1(a0)
00011B6E 6A00 BA78                  		bpl.w	DeleteObject
00011B72 6000 BA38                  		bra.w	DisplaySprite
00011B76                            ; ===========================================================================
00011B76 FE00 FD00 FF00 FE00 0200+  Obj5F_ShrSpeed:	dc.w $FE00, $FD00, $FF00, $FE00, $200, $FD00, $100, $FE00
00011B86                            
00011B86                            Ani_obj5F:
00011B86                            	include "_anim\obj5F.asm"
00011B86                            ; ---------------------------------------------------------------------------
00011B86                            ; Animation script - Bomb enemy
00011B86                            ; ---------------------------------------------------------------------------
00011B86 0000                       		dc.w byte_11C12-Ani_obj5F
00011B88 0000                       		dc.w byte_11C16-Ani_obj5F
00011B8A 0000                       		dc.w byte_11C1C-Ani_obj5F
00011B8C 0000                       		dc.w byte_11C20-Ani_obj5F
00011B8E 0000                       		dc.w byte_11C24-Ani_obj5F
00011B90 1301 00FF                  byte_11C12:	dc.b $13, 1, 0,	$FF
00011B94 1305 0403 02FF             byte_11C16:	dc.b $13, 5, 4,	3, 2, $FF
00011B9A 1307 06FF                  byte_11C1C:	dc.b $13, 7, 6,	$FF
00011B9E 0308 09FF                  byte_11C20:	dc.b 3,	8, 9, $FF
00011BA2 030A 0BFF                  byte_11C24:	dc.b 3,	$A, $B,	$FF
00011BA6                            		even
00011BA6                            		even
00011BA6                            
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            Map_obj5F:
00011BA6                            	include "_maps\obj5F.asm"
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6                            ; Sprite mappings - walking bomb enemy (SLZ, SBZ)
00011BA6                            ; ---------------------------------------------------------------------------
00011BA6 0000 0000                  		dc.w byte_11C40-Map_obj5F, byte_11C50-Map_obj5F
00011BAA 0000 0000                  		dc.w byte_11C60-Map_obj5F, byte_11C70-Map_obj5F
00011BAE 0000 0000                  		dc.w byte_11C80-Map_obj5F, byte_11C90-Map_obj5F
00011BB2 0000 0000                  		dc.w byte_11CA0-Map_obj5F, byte_11CAB-Map_obj5F
00011BB6 0000 0000                  		dc.w byte_11CB6-Map_obj5F, byte_11CBC-Map_obj5F
00011BBA 0000 0000                  		dc.w byte_11CC2-Map_obj5F, byte_11CC8-Map_obj5F
00011BBE 03                         byte_11C40:	dc.b 3
00011BBF F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011BC4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011BC9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BCE 03                         byte_11C50:	dc.b 3
00011BCF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011BD4 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011BD9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BDE 03                         byte_11C60:	dc.b 3
00011BDF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011BE4 0808 0015 F4               		dc.b 8,	8, 0, $15, $F4
00011BE9 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011BEE 03                         byte_11C70:	dc.b 3
00011BEF F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011BF4 0908 0018 F4               		dc.b 9,	8, 0, $18, $F4
00011BF9 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011BFE 03                         byte_11C80:	dc.b 3
00011BFF F00A 0000 F4               		dc.b $F0, $A, 0, 0, $F4
00011C04 0808 001B F4               		dc.b 8,	8, 0, $1B, $F4
00011C09 E601 0021 FC               		dc.b $E6, 1, 0,	$21, $FC
00011C0E 03                         byte_11C90:	dc.b 3
00011C0F F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011C14 0908 001E F4               		dc.b 9,	8, 0, $1E, $F4
00011C19 E701 0021 FC               		dc.b $E7, 1, 0,	$21, $FC
00011C1E 02                         byte_11CA0:	dc.b 2
00011C1F F10A 0000 F4               		dc.b $F1, $A, 0, 0, $F4
00011C24 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011C29 02                         byte_11CAB:	dc.b 2
00011C2A F10A 0009 F4               		dc.b $F1, $A, 0, 9, $F4
00011C2F 0908 0012 F4               		dc.b 9,	8, 0, $12, $F4
00011C34 01                         byte_11CB6:	dc.b 1			; fuse	(just before it	explodes)
00011C35 E701 0023 FC               		dc.b $E7, 1, 0,	$23, $FC
00011C3A 01                         byte_11CBC:	dc.b 1			; fuse
00011C3B E701 0025 FC               		dc.b $E7, 1, 0,	$25, $FC
00011C40 01                         byte_11CC2:	dc.b 1			; fireball (after it exploded)
00011C41 FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00011C46 01                         byte_11CC8:	dc.b 1			; fireball
00011C47 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00011C4C                            		even
00011C4C                            		even
00011C4C                            
00011C4C                            ; ===========================================================================
00011C4C                            ; ---------------------------------------------------------------------------
00011C4C                            ; Object 60 - Orbinaut enemy (LZ, SLZ, SBZ)
00011C4C                            ; ---------------------------------------------------------------------------
00011C4C                            
00011C4C                            Obj60:					; XREF: Obj_Index
00011C4C 7000                       		moveq	#0,d0
00011C4E 1028 0024                  		move.b	$24(a0),d0
00011C52 323B 0000                  		move.w	Obj60_Index(pc,d0.w),d1
00011C56 4EFB 1000                  		jmp	Obj60_Index(pc,d1.w)
00011C5A                            ; ===========================================================================
00011C5A 0000                       Obj60_Index:	dc.w Obj60_Main-Obj60_Index
00011C5C 0000                       		dc.w Obj60_ChkSonic-Obj60_Index
00011C5E 0000                       		dc.w Obj60_Display-Obj60_Index
00011C60 0000                       		dc.w Obj60_MoveOrb-Obj60_Index
00011C62 0000                       		dc.w Obj60_ChkDel2-Obj60_Index
00011C64                            ; ===========================================================================
00011C64                            
00011C64                            Obj60_Main:				; XREF: Obj60_Index
00011C64 217C 0000 0000 0004        		move.l	#Map_obj60,4(a0)
00011C6C 317C 0429 0002             		move.w	#$429,2(a0)	; SBZ specific code
00011C72 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; check if level is SBZ
00011C78 6700                       		beq.s	loc_11D02
00011C7A 317C 2429 0002             		move.w	#$2429,2(a0)	; SLZ specific code
00011C80                            
00011C80                            loc_11D02:
00011C80 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ
00011C86 6600                       		bne.s	loc_11D10
00011C88 317C 0467 0002             		move.w	#$467,2(a0)	; LZ specific code
00011C8E                            
00011C8E                            loc_11D10:
00011C8E 0028 0004 0001             		ori.b	#4,1(a0)
00011C94 117C 0004 0018             		move.b	#4,$18(a0)
00011C9A 117C 000B 0020             		move.b	#$B,$20(a0)
00011CA0 117C 000C 0019             		move.b	#$C,$19(a0)
00011CA6 7400                       		moveq	#0,d2
00011CA8 45E8 0037                  		lea	$37(a0),a2
00011CAC 264A                       		movea.l	a2,a3
00011CAE 524A                       		addq.w	#1,a2
00011CB0 7203                       		moveq	#3,d1
00011CB2                            
00011CB2                            Obj60_MakeOrbs:
00011CB2 6100 BD94                  		bsr.w	SingleObjLoad2
00011CB6 6600                       		bne.s	loc_11D90
00011CB8 5213                       		addq.b	#1,(a3)
00011CBA 3A09                       		move.w	a1,d5
00011CBC 0445 D000                  		subi.w	#-$3000,d5
00011CC0 EC4D                       		lsr.w	#6,d5
00011CC2 0245 007F                  		andi.w	#$7F,d5
00011CC6 14C5                       		move.b	d5,(a2)+
00011CC8 1290                       		move.b	0(a0),0(a1)	; load spiked orb object
00011CCA 137C 0006 0024             		move.b	#6,$24(a1)
00011CD0 2368 0004 0004             		move.l	4(a0),4(a1)
00011CD6 3368 0002 0002             		move.w	2(a0),2(a1)
00011CDC 0029 0004 0001             		ori.b	#4,1(a1)
00011CE2 137C 0004 0018             		move.b	#4,$18(a1)
00011CE8 137C 0008 0019             		move.b	#8,$19(a1)
00011CEE 137C 0003 001A             		move.b	#3,$1A(a1)
00011CF4 137C 0098 0020             		move.b	#$98,$20(a1)
00011CFA 1342 0026                  		move.b	d2,$26(a1)
00011CFE 0602 0040                  		addi.b	#$40,d2
00011D02 2348 003C                  		move.l	a0,$3C(a1)
00011D06 51C9 FFAA                  		dbf	d1,Obj60_MakeOrbs ; repeat sequence 3 more times
00011D0A                            
00011D0A                            loc_11D90:
00011D0A 7001                       		moveq	#1,d0
00011D0C 0828 0000 0022             		btst	#0,$22(a0)
00011D12 6700                       		beq.s	Obj60_Move
00011D14 4440                       		neg.w	d0
00011D16                            
00011D16                            Obj60_Move:
00011D16 1140 0036                  		move.b	d0,$36(a0)
00011D1A 1168 0028 0024             		move.b	$28(a0),$24(a0)	; if type is 02, skip the firing rountine
00011D20 5428 0024                  		addq.b	#2,$24(a0)
00011D24 317C FFC0 0010             		move.w	#-$40,$10(a0)	; move orbinaut	to the left
00011D2A 0828 0000 0022             		btst	#0,$22(a0)	; is orbinaut reversed?
00011D30 6700                       		beq.s	locret_11DBC	; if not, branch
00011D32 4468 0010                  		neg.w	$10(a0)		; move orbinaut	to the right
00011D36                            
00011D36                            locret_11DBC:
00011D36 4E75                       		rts	
00011D38                            ; ===========================================================================
00011D38                            
00011D38                            Obj60_ChkSonic:				; XREF: Obj60_Index
00011D38 3038 D008                  		move.w	($FFFFD008).w,d0
00011D3C 9068 0008                  		sub.w	8(a0),d0
00011D40 6400                       		bcc.s	loc_11DCA
00011D42 4440                       		neg.w	d0
00011D44                            
00011D44                            loc_11DCA:
00011D44 0C40 00A0                  		cmpi.w	#$A0,d0		; is Sonic within $A0 pixels of	orbinaut?
00011D48 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011D4A 3038 D00C                  		move.w	($FFFFD00C).w,d0
00011D4E 9068 000C                  		sub.w	$C(a0),d0
00011D52 6400                       		bcc.s	loc_11DDC
00011D54 4440                       		neg.w	d0
00011D56                            
00011D56                            loc_11DDC:
00011D56 0C40 0050                  		cmpi.w	#$50,d0		; is Sonic within $50 pixels of	orbinaut?
00011D5A 6400                       		bcc.s	Obj60_Animate	; if not, branch
00011D5C 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	on?
00011D60 6600                       		bne.s	Obj60_Animate	; if yes, branch
00011D62 117C 0001 001C             		move.b	#1,$1C(a0)	; use "angry" animation
00011D68                            
00011D68                            Obj60_Animate:
00011D68 43F9 0000 0000             		lea	(Ani_obj60).l,a1
00011D6E 6100 8968                  		bsr.w	AnimateSprite
00011D72 6000 0000                  		bra.w	Obj60_ChkDel
00011D76                            ; ===========================================================================
00011D76                            
00011D76                            Obj60_Display:				; XREF: Obj60_Index
00011D76 6100 B80E                  		bsr.w	SpeedToPos
00011D7A                            
00011D7A                            Obj60_ChkDel:				; XREF: Obj60_Animate
00011D7A 3028 0008                  		move.w	8(a0),d0
00011D7E 0240 FF80                  		andi.w	#$FF80,d0
00011D82 3238 F700                  		move.w	($FFFFF700).w,d1
00011D86 0441 0080                  		subi.w	#$80,d1
00011D8A 0241 FF80                  		andi.w	#$FF80,d1
00011D8E 9041                       		sub.w	d1,d0
00011D90 0C40 0280                  		cmpi.w	#$280,d0
00011D94 6200 0000                  		bhi.w	Obj60_ChkGone
00011D98 6000 B812                  		bra.w	DisplaySprite
00011D9C                            ; ===========================================================================
00011D9C                            
00011D9C                            Obj60_ChkGone:				; XREF: Obj60_ChkDel
00011D9C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00011DA0 7000                       		moveq	#0,d0
00011DA2 1028 0023                  		move.b	$23(a0),d0
00011DA6 6700                       		beq.s	loc_11E34
00011DA8 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00011DAE                            
00011DAE                            loc_11E34:
00011DAE 45E8 0037                  		lea	$37(a0),a2
00011DB2 7400                       		moveq	#0,d2
00011DB4 141A                       		move.b	(a2)+,d2
00011DB6 5342                       		subq.w	#1,d2
00011DB8 6500                       		bcs.s	Obj60_Delete
00011DBA                            
00011DBA                            loc_11E40:
00011DBA 7000                       		moveq	#0,d0
00011DBC 101A                       		move.b	(a2)+,d0
00011DBE ED48                       		lsl.w	#6,d0
00011DC0 0680 00FF D000             		addi.l	#$FFD000,d0
00011DC6 2240                       		movea.l	d0,a1
00011DC8 6100 B820                  		bsr.w	DeleteObject2
00011DCC 51CA FFEC                  		dbf	d2,loc_11E40
00011DD0                            
00011DD0                            Obj60_Delete:
00011DD0 6000 B816                  		bra.w	DeleteObject
00011DD4                            ; ===========================================================================
00011DD4                            
00011DD4                            Obj60_MoveOrb:				; XREF: Obj60_Index
00011DD4 2268 003C                  		movea.l	$3C(a0),a1
00011DD8 0C11 0060                  		cmpi.b	#$60,0(a1)
00011DDC 6600 B80A                  		bne.w	DeleteObject
00011DE0 0C29 0002 001A             		cmpi.b	#2,$1A(a1)
00011DE6 6600                       		bne.s	Obj60_Circle
00011DE8 0C28 0040 0026             		cmpi.b	#$40,$26(a0)
00011DEE 6600                       		bne.s	Obj60_Circle
00011DF0 5428 0024                  		addq.b	#2,$24(a0)
00011DF4 5329 0037                  		subq.b	#1,$37(a1)
00011DF8 6600                       		bne.s	Obj60_FireOrb
00011DFA 5429 0024                  		addq.b	#2,$24(a1)
00011DFE                            
00011DFE                            Obj60_FireOrb:
00011DFE 317C FE00 0010             		move.w	#-$200,$10(a0)	; move orb to the left (quickly)
00011E04 0829 0000 0022             		btst	#0,$22(a1)
00011E0A 6700                       		beq.s	Obj60_Display2
00011E0C 4468 0010                  		neg.w	$10(a0)
00011E10                            
00011E10                            Obj60_Display2:
00011E10 6000 B79A                  		bra.w	DisplaySprite
00011E14                            ; ===========================================================================
00011E14                            
00011E14                            Obj60_Circle:				; XREF: Obj60_MoveOrb
00011E14 1028 0026                  		move.b	$26(a0),d0
00011E18 4EB9 0000 29DA             		jsr	(CalcSine).l
00011E1E E841                       		asr.w	#4,d1
00011E20 D269 0008                  		add.w	8(a1),d1
00011E24 3141 0008                  		move.w	d1,8(a0)
00011E28 E840                       		asr.w	#4,d0
00011E2A D069 000C                  		add.w	$C(a1),d0
00011E2E 3140 000C                  		move.w	d0,$C(a0)
00011E32 1029 0036                  		move.b	$36(a1),d0
00011E36 D128 0026                  		add.b	d0,$26(a0)
00011E3A 6000 B770                  		bra.w	DisplaySprite
00011E3E                            ; ===========================================================================
00011E3E                            
00011E3E                            Obj60_ChkDel2:				; XREF: Obj60_Index
00011E3E 6100 B746                  		bsr.w	SpeedToPos
00011E42 4A28 0001                  		tst.b	1(a0)
00011E46 6A00 B7A0                  		bpl.w	DeleteObject
00011E4A 6000 B760                  		bra.w	DisplaySprite
00011E4E                            ; ===========================================================================
00011E4E                            Ani_obj60:
00011E4E                            	include "_anim\obj60.asm"
00011E4E                            ; ---------------------------------------------------------------------------
00011E4E                            ; Animation script - Orbinaut enemy
00011E4E                            ; ---------------------------------------------------------------------------
00011E4E 0000                       		dc.w byte_11EDA-Ani_obj60
00011E50 0000                       		dc.w byte_11EDE-Ani_obj60
00011E52 0F00 FF00                  byte_11EDA:	dc.b $F, 0, $FF, 0
00011E56 0F01 02FE 0100             byte_11EDE:	dc.b $F, 1, 2, $FE, 1, 0
00011E5C                            		even
00011E5C                            		even
00011E5C                            
00011E5C                            ; ---------------------------------------------------------------------------
00011E5C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011E5C                            ; ---------------------------------------------------------------------------
00011E5C                            Map_obj60:
00011E5C                            	include "_maps\obj60.asm"
00011E5C                            ; ---------------------------------------------------------------------------
00011E5C                            ; Sprite mappings - Orbinaut enemy (LZ,	SLZ, SBZ)
00011E5C                            ; ---------------------------------------------------------------------------
00011E5C 0000 0000                  		dc.w byte_11EEC-Map_obj60, byte_11EF2-Map_obj60
00011E60 0000 0000                  		dc.w byte_11EF8-Map_obj60, byte_11EFE-Map_obj60
00011E64 01                         byte_11EEC:	dc.b 1
00011E65 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
00011E6A 01                         byte_11EF2:	dc.b 1
00011E6B F40A 2009 F4               		dc.b $F4, $A, $20, 9, $F4
00011E70 01                         byte_11EF8:	dc.b 1
00011E71 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
00011E76 01                         byte_11EFE:	dc.b 1
00011E77 F805 001B F8               		dc.b $F8, 5, 0,	$1B, $F8
00011E7C                            		even
00011E7C                            		even
00011E7C                            
00011E7C                            ; ===========================================================================
00011E7C                            ; ---------------------------------------------------------------------------
00011E7C                            ; Object 16 - harpoon (LZ)
00011E7C                            ; ---------------------------------------------------------------------------
00011E7C                            
00011E7C                            Obj16:					; XREF: Obj_Index
00011E7C 7000                       		moveq	#0,d0
00011E7E 1028 0024                  		move.b	$24(a0),d0
00011E82 323B 0000                  		move.w	Obj16_Index(pc,d0.w),d1
00011E86 4EFB 1000                  		jmp	Obj16_Index(pc,d1.w)
00011E8A                            ; ===========================================================================
00011E8A 0000                       Obj16_Index:	dc.w Obj16_Main-Obj16_Index
00011E8C 0000                       		dc.w Obj16_Move-Obj16_Index
00011E8E 0000                       		dc.w Obj16_Wait-Obj16_Index
00011E90                            ; ===========================================================================
00011E90                            
00011E90                            Obj16_Main:				; XREF: Obj16_Index
00011E90 5428 0024                  		addq.b	#2,$24(a0)
00011E94 217C 0000 0000 0004        		move.l	#Map_obj16,4(a0)
00011E9C 317C 03CC 0002             		move.w	#$3CC,2(a0)
00011EA2 0028 0004 0001             		ori.b	#4,1(a0)
00011EA8 117C 0004 0018             		move.b	#4,$18(a0)
00011EAE 1168 0028 001C             		move.b	$28(a0),$1C(a0)
00011EB4 117C 0014 0019             		move.b	#$14,$19(a0)
00011EBA 317C 003C 0030             		move.w	#60,$30(a0)
00011EC0                            
00011EC0                            Obj16_Move:				; XREF: Obj16_Index
00011EC0 43F9 0000 0000             		lea	(Ani_obj16).l,a1
00011EC6 6100 8810                  		bsr.w	AnimateSprite
00011ECA 7000                       		moveq	#0,d0
00011ECC 1028 001A                  		move.b	$1A(a0),d0	; move frame number to d0
00011ED0 117B 0000 0020             		move.b	Obj16_Data(pc,d0.w),$20(a0) ; load collision response (based on	d0)
00011ED6 6000 D76C                  		bra.w	MarkObjGone
00011EDA                            ; ===========================================================================
00011EDA 9B9C 9D9E 9FA0             Obj16_Data:	dc.b $9B, $9C, $9D, $9E, $9F, $A0
00011EE0                            ; ===========================================================================
00011EE0                            
00011EE0                            Obj16_Wait:				; XREF: Obj16_Index
00011EE0 5368 0030                  		subq.w	#1,$30(a0)
00011EE4 6A00                       		bpl.s	Obj16_ChkDel
00011EE6 317C 003C 0030             		move.w	#60,$30(a0)
00011EEC 5528 0024                  		subq.b	#2,$24(a0)	; run "Obj16_Move" subroutine
00011EF0 0868 0000 001C             		bchg	#0,$1C(a0)	; reverse animation
00011EF6                            
00011EF6                            Obj16_ChkDel:
00011EF6 6000 D74C                  		bra.w	MarkObjGone
00011EFA                            ; ===========================================================================
00011EFA                            Ani_obj16:
00011EFA                            	include "_anim\obj16.asm"
00011EFA                            ; ---------------------------------------------------------------------------
00011EFA                            ; Animation script - harpoon (LZ)
00011EFA                            ; ---------------------------------------------------------------------------
00011EFA 0000                       		dc.w byte_11F8A-Ani_obj16
00011EFC 0000                       		dc.w byte_11F8E-Ani_obj16
00011EFE 0000                       		dc.w byte_11F92-Ani_obj16
00011F00 0000                       		dc.w byte_11F96-Ani_obj16
00011F02 0301 02FC                  byte_11F8A:	dc.b 3,	1, 2, $FC
00011F06 0301 00FC                  byte_11F8E:	dc.b 3,	1, 0, $FC
00011F0A 0304 05FC                  byte_11F92:	dc.b 3,	4, 5, $FC
00011F0E 0304 03FC                  byte_11F96:	dc.b 3,	4, 3, $FC
00011F12                            		even
00011F12                            		even
00011F12                            
00011F12                            ; ---------------------------------------------------------------------------
00011F12                            ; Sprite mappings - harpoon (LZ)
00011F12                            ; ---------------------------------------------------------------------------
00011F12                            Map_obj16:
00011F12                            	include "_maps\obj16.asm"
00011F12                            ; ---------------------------------------------------------------------------
00011F12                            ; Sprite mappings - harpoon (LZ)
00011F12                            ; ---------------------------------------------------------------------------
00011F12 0000 0000                  		dc.w byte_11FA6-Map_obj16, byte_11FAC-Map_obj16
00011F16 0000 0000                  		dc.w byte_11FB2-Map_obj16, byte_11FBD-Map_obj16
00011F1A 0000 0000                  		dc.w byte_11FC3-Map_obj16, byte_11FC9-Map_obj16
00011F1E 01                         byte_11FA6:	dc.b 1
00011F1F FC04 0000 F8               		dc.b $FC, 4, 0,	0, $F8
00011F24 01                         byte_11FAC:	dc.b 1
00011F25 FC0C 0002 F8               		dc.b $FC, $C, 0, 2, $F8
00011F2A 02                         byte_11FB2:	dc.b 2
00011F2B FC08 0006 F8               		dc.b $FC, 8, 0,	6, $F8
00011F30 FC08 0003 10               		dc.b $FC, 8, 0,	3, $10
00011F35 01                         byte_11FBD:	dc.b 1
00011F36 F801 0009 FC               		dc.b $F8, 1, 0,	9, $FC
00011F3B 01                         byte_11FC3:	dc.b 1
00011F3C E803 000B FC               		dc.b $E8, 3, 0,	$B, $FC
00011F41 02                         byte_11FC9:	dc.b 2
00011F42 D802 000B FC               		dc.b $D8, 2, 0,	$B, $FC
00011F47 F002 000F FC               		dc.b $F0, 2, 0,	$F, $FC
00011F4C                            		even
00011F4C                            		even
00011F4C                            
00011F4C                            ; ===========================================================================
00011F4C                            ; ---------------------------------------------------------------------------
00011F4C                            ; Object 61 - blocks (LZ)
00011F4C                            ; ---------------------------------------------------------------------------
00011F4C                            
00011F4C                            Obj61:					; XREF: Obj_Index
00011F4C 7000                       		moveq	#0,d0
00011F4E 1028 0024                  		move.b	$24(a0),d0
00011F52 323B 0000                  		move.w	Obj61_Index(pc,d0.w),d1
00011F56 4EFB 1000                  		jmp	Obj61_Index(pc,d1.w)
00011F5A                            ; ===========================================================================
00011F5A 0000                       Obj61_Index:	dc.w Obj61_Main-Obj61_Index
00011F5C 0000                       		dc.w Obj61_Action-Obj61_Index
00011F5E                            
00011F5E 1010                       Obj61_Var:	dc.b $10, $10		; width, height
00011F60 200C                       		dc.b $20, $C
00011F62 1010                       		dc.b $10, $10
00011F64 1010                       		dc.b $10, $10
00011F66                            ; ===========================================================================
00011F66                            
00011F66                            Obj61_Main:				; XREF: Obj61_Index
00011F66 5428 0024                  		addq.b	#2,$24(a0)
00011F6A 217C 0000 0000 0004        		move.l	#Map_obj61,4(a0)
00011F72 317C 43E6 0002             		move.w	#$43E6,2(a0)
00011F78 117C 0004 0001             		move.b	#4,1(a0)
00011F7E 117C 0003 0018             		move.b	#3,$18(a0)
00011F84 7000                       		moveq	#0,d0
00011F86 1028 0028                  		move.b	$28(a0),d0
00011F8A E648                       		lsr.w	#3,d0
00011F8C 0240 000E                  		andi.w	#$E,d0
00011F90 45FB 00CC                  		lea	Obj61_Var(pc,d0.w),a2
00011F94 115A 0019                  		move.b	(a2)+,$19(a0)
00011F98 1152 0016                  		move.b	(a2),$16(a0)
00011F9C E248                       		lsr.w	#1,d0
00011F9E 1140 001A                  		move.b	d0,$1A(a0)
00011FA2 3168 0008 0034             		move.w	8(a0),$34(a0)
00011FA8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00011FAE 1028 0028                  		move.b	$28(a0),d0
00011FB2 0200 000F                  		andi.b	#$F,d0
00011FB6 6700                       		beq.s	Obj61_Action
00011FB8 0C00 0007                  		cmpi.b	#7,d0
00011FBC 6700                       		beq.s	Obj61_Action
00011FBE 117C 0001 0038             		move.b	#1,$38(a0)
00011FC4                            
00011FC4                            Obj61_Action:				; XREF: Obj61_Index
00011FC4 3F28 0008                  		move.w	8(a0),-(sp)
00011FC8 7000                       		moveq	#0,d0
00011FCA 1028 0028                  		move.b	$28(a0),d0
00011FCE 0240 000F                  		andi.w	#$F,d0
00011FD2 D040                       		add.w	d0,d0
00011FD4 323B 0000                  		move.w	Obj61_TypeIndex(pc,d0.w),d1
00011FD8 4EBB 1000                  		jsr	Obj61_TypeIndex(pc,d1.w)
00011FDC 381F                       		move.w	(sp)+,d4
00011FDE 4A28 0001                  		tst.b	1(a0)
00011FE2 6A00                       		bpl.s	Obj61_ChkDel
00011FE4 7200                       		moveq	#0,d1
00011FE6 1228 0019                  		move.b	$19(a0),d1
00011FEA 0641 000B                  		addi.w	#$B,d1
00011FEE 7400                       		moveq	#0,d2
00011FF0 1428 0016                  		move.b	$16(a0),d2
00011FF4 3602                       		move.w	d2,d3
00011FF6 5243                       		addq.w	#1,d3
00011FF8 6100 D972                  		bsr.w	SolidObject
00011FFC 1144 003F                  		move.b	d4,$3F(a0)
00012000 6100 0000                  		bsr.w	loc_12180
00012004                            
00012004                            Obj61_ChkDel:
00012004 3028 0034                  		move.w	$34(a0),d0
00012008 0240 FF80                  		andi.w	#$FF80,d0
0001200C 3238 F700                  		move.w	($FFFFF700).w,d1
00012010 0441 0080                  		subi.w	#$80,d1
00012014 0241 FF80                  		andi.w	#$FF80,d1
00012018 9041                       		sub.w	d1,d0
0001201A 0C40 0280                  		cmpi.w	#$280,d0
0001201E 6200 B5C8                  		bhi.w	DeleteObject
00012022 6000 B588                  		bra.w	DisplaySprite
00012026                            ; ===========================================================================
00012026 0000 0000                  Obj61_TypeIndex:dc.w Obj61_Type00-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001202A 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type01-Obj61_TypeIndex
0001202E 0000 0000                  		dc.w Obj61_Type04-Obj61_TypeIndex, Obj61_Type05-Obj61_TypeIndex
00012032 0000 0000                  		dc.w Obj61_Type02-Obj61_TypeIndex, Obj61_Type07-Obj61_TypeIndex
00012036                            ; ===========================================================================
00012036                            
00012036                            Obj61_Type00:				; XREF: Obj61_TypeIndex
00012036 4E75                       		rts	
00012038                            ; ===========================================================================
00012038                            
00012038                            Obj61_Type01:				; XREF: Obj61_TypeIndex
00012038 4A68 0036                  		tst.w	$36(a0)		; is Sonic standing on the object?
0001203C 6600                       		bne.s	loc_120D6	; if yes, branch
0001203E 0828 0003 0022             		btst	#3,$22(a0)
00012044 6700                       		beq.s	locret_120D4
00012046 317C 001E 0036             		move.w	#30,$36(a0)	; wait for ยซ second
0001204C                            
0001204C                            locret_120D4:
0001204C 4E75                       		rts	
0001204E                            ; ===========================================================================
0001204E                            
0001204E                            loc_120D6:
0001204E 5368 0036                  		subq.w	#1,$36(a0)	; subtract 1 from waiting time
00012052 66F8                       		bne.s	locret_120D4	; if time remains, branch
00012054 5228 0028                  		addq.b	#1,$28(a0)	; add 1	to type
00012058 4228 0038                  		clr.b	$38(a0)
0001205C 4E75                       		rts	
0001205E                            ; ===========================================================================
0001205E                            
0001205E                            Obj61_Type02:				; XREF: Obj61_TypeIndex
0001205E 6100 B526                  		bsr.w	SpeedToPos
00012062 5068 0012                  		addq.w	#8,$12(a0)	; make object fall
00012066 6100 0000                  		bsr.w	ObjHitFloor
0001206A 4A41                       		tst.w	d1
0001206C 6A00 0000                  		bpl.w	locret_12106
00012070 5241                       		addq.w	#1,d1
00012072 D368 000C                  		add.w	d1,$C(a0)
00012076 4268 0012                  		clr.w	$12(a0)		; stop when it touches the floor
0001207A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001207E                            
0001207E                            locret_12106:
0001207E 4E75                       		rts	
00012080                            ; ===========================================================================
00012080                            
00012080                            Obj61_Type04:				; XREF: Obj61_TypeIndex
00012080 6100 B504                  		bsr.w	SpeedToPos
00012084 5168 0012                  		subq.w	#8,$12(a0)	; make object rise
00012088 6100 0000                  		bsr.w	ObjHitCeiling
0001208C 4A41                       		tst.w	d1
0001208E 6A00 0000                  		bpl.w	locret_12126
00012092 9368 000C                  		sub.w	d1,$C(a0)
00012096 4268 0012                  		clr.w	$12(a0)		; stop when it touches the ceiling
0001209A 4228 0028                  		clr.b	$28(a0)		; set type to 00 (non-moving type)
0001209E                            
0001209E                            locret_12126:
0001209E 4E75                       		rts	
000120A0                            ; ===========================================================================
000120A0                            
000120A0                            Obj61_Type05:				; XREF: Obj61_TypeIndex
000120A0 0C28 0001 003F             		cmpi.b	#1,$3F(a0)	; is Sonic touching the	object?
000120A6 6600                       		bne.s	locret_12138	; if not, branch
000120A8 5228 0028                  		addq.b	#1,$28(a0)	; if yes, add 1	to type
000120AC 4228 0038                  		clr.b	$38(a0)
000120B0                            
000120B0                            locret_12138:
000120B0 4E75                       		rts	
000120B2                            ; ===========================================================================
000120B2                            
000120B2                            Obj61_Type07:				; XREF: Obj61_TypeIndex
000120B2 3038 F646                  		move.w	($FFFFF646).w,d0
000120B6 9068 000C                  		sub.w	$C(a0),d0
000120BA 6700                       		beq.s	locret_1217E
000120BC 6400                       		bcc.s	loc_12162
000120BE 0C40 FFFE                  		cmpi.w	#-2,d0
000120C2 6C00                       		bge.s	loc_1214E
000120C4 70FE                       		moveq	#-2,d0
000120C6                            
000120C6                            loc_1214E:
000120C6 D168 000C                  		add.w	d0,$C(a0)	; make the block rise with water level
000120CA 6100 0000                  		bsr.w	ObjHitCeiling
000120CE 4A41                       		tst.w	d1
000120D0 6A00 0000                  		bpl.w	locret_12160
000120D4 9368 000C                  		sub.w	d1,$C(a0)
000120D8                            
000120D8                            locret_12160:
000120D8 4E75                       		rts	
000120DA                            ; ===========================================================================
000120DA                            
000120DA                            loc_12162:				; XREF: Obj61_Type07
000120DA 0C40 0002                  		cmpi.w	#2,d0
000120DE 6F00                       		ble.s	loc_1216A
000120E0 7002                       		moveq	#2,d0
000120E2                            
000120E2                            loc_1216A:
000120E2 D168 000C                  		add.w	d0,$C(a0)	; make the block sink with water level
000120E6 6100 0000                  		bsr.w	ObjHitFloor
000120EA 4A41                       		tst.w	d1
000120EC 6A00 0000                  		bpl.w	locret_1217E
000120F0 5241                       		addq.w	#1,d1
000120F2 D368 000C                  		add.w	d1,$C(a0)
000120F6                            
000120F6                            locret_1217E:
000120F6 4E75                       		rts	
000120F8                            ; ===========================================================================
000120F8                            
000120F8                            loc_12180:				; XREF: Obj61_Action
000120F8 4A28 0038                  		tst.b	$38(a0)
000120FC 6700                       		beq.s	locret_121C0
000120FE 0828 0003 0022             		btst	#3,$22(a0)
00012104 6600                       		bne.s	loc_1219A
00012106 4A28 003E                  		tst.b	$3E(a0)
0001210A 6700                       		beq.s	locret_121C0
0001210C 5928 003E                  		subq.b	#4,$3E(a0)
00012110 6000                       		bra.s	loc_121A6
00012112                            ; ===========================================================================
00012112                            
00012112                            loc_1219A:
00012112 0C28 0040 003E             		cmpi.b	#$40,$3E(a0)
00012118 6700                       		beq.s	locret_121C0
0001211A 5828 003E                  		addq.b	#4,$3E(a0)
0001211E                            
0001211E                            loc_121A6:
0001211E 1028 003E                  		move.b	$3E(a0),d0
00012122 4EB9 0000 29DA             		jsr	(CalcSine).l
00012128 323C 0400                  		move.w	#$400,d1
0001212C C1C1                       		muls.w	d1,d0
0001212E 4840                       		swap	d0
00012130 D068 0030                  		add.w	$30(a0),d0
00012134 3140 000C                  		move.w	d0,$C(a0)
00012138                            
00012138                            locret_121C0:
00012138 4E75                       		rts	
0001213A                            ; ===========================================================================
0001213A                            ; ---------------------------------------------------------------------------
0001213A                            ; Sprite mappings - blocks (LZ)
0001213A                            ; ---------------------------------------------------------------------------
0001213A                            Map_obj61:
0001213A                            	include "_maps\obj61.asm"
0001213A                            ; ---------------------------------------------------------------------------
0001213A                            ; Sprite mappings - blocks (LZ)
0001213A                            ; ---------------------------------------------------------------------------
0001213A 0000 0000                  		dc.w byte_121CA-Map_obj61, byte_121D0-Map_obj61
0001213E 0000 0000                  		dc.w byte_121DB-Map_obj61, byte_121E1-Map_obj61
00012142 01                         byte_121CA:	dc.b 1
00012143 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012148 02                         byte_121D0:	dc.b 2
00012149 F40E 0069 E0               		dc.b $F4, $E, 0, $69, $E0
0001214E F40E 0075 00               		dc.b $F4, $E, 0, $75, 0
00012153 01                         byte_121DB:	dc.b 1
00012154 F00F 011A F0               		dc.b $F0, $F, 1, $1A, $F0
00012159 01                         byte_121E1:	dc.b 1
0001215A F00F FDFA F0               		dc.b $F0, $F, $FD, $FA,	$F0
00012160 00                         		even
00012160 00                         		even
00012160                            
00012160                            ; ===========================================================================
00012160                            ; ---------------------------------------------------------------------------
00012160                            ; Object 62 - gargoyle head (LZ)
00012160                            ; ---------------------------------------------------------------------------
00012160                            
00012160                            Obj62:					; XREF: Obj_Index
00012160 7000                       		moveq	#0,d0
00012162 1028 0024                  		move.b	$24(a0),d0
00012166 323B 0000                  		move.w	Obj62_Index(pc,d0.w),d1
0001216A 4EBB 1000                  		jsr	Obj62_Index(pc,d1.w)
0001216E 6000 D4D4                  		bra.w	MarkObjGone
00012172                            ; ===========================================================================
00012172 0000                       Obj62_Index:	dc.w Obj62_Main-Obj62_Index
00012174 0000                       		dc.w Obj62_MakeFire-Obj62_Index
00012176 0000                       		dc.w Obj62_FireBall-Obj62_Index
00012178 0000                       		dc.w Obj62_AniFire-Obj62_Index
0001217A                            
0001217A 1E3C 5A78 96B4 D2F0        Obj62_SpitRate:	dc.b 30, 60, 90, 120, 150, 180,	210, 240
00012182                            ; ===========================================================================
00012182                            
00012182                            Obj62_Main:				; XREF: Obj62_Index
00012182 5428 0024                  		addq.b	#2,$24(a0)
00012186 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
0001218E 317C 42E9 0002             		move.w	#$42E9,2(a0)
00012194 0028 0004 0001             		ori.b	#4,1(a0)
0001219A 117C 0003 0018             		move.b	#3,$18(a0)
000121A0 117C 0010 0019             		move.b	#$10,$19(a0)
000121A6 1028 0028                  		move.b	$28(a0),d0	; get object type
000121AA 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000121AE 117B 00CA 001F             		move.b	Obj62_SpitRate(pc,d0.w),$1F(a0)	; set fireball spit rate
000121B4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000121BA 0228 000F 0028             		andi.b	#$F,$28(a0)
000121C0                            
000121C0                            Obj62_MakeFire:				; XREF: Obj62_Index
000121C0 5328 001E                  		subq.b	#1,$1E(a0)
000121C4 6600                       		bne.s	Obj62_NoFire
000121C6 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
000121CC 6100 B658                  		bsr.w	ChkObjOnScreen
000121D0 6600                       		bne.s	Obj62_NoFire
000121D2 6100 B85E                  		bsr.w	SingleObjLoad
000121D6 6600                       		bne.s	Obj62_NoFire
000121D8 12BC 0062                  		move.b	#$62,0(a1)	; load fireball	object
000121DC 5829 0024                  		addq.b	#4,$24(a1)
000121E0 3368 0008 0008             		move.w	8(a0),8(a1)
000121E6 3368 000C 000C             		move.w	$C(a0),$C(a1)
000121EC 1368 0001 0001             		move.b	1(a0),1(a1)
000121F2 1368 0022 0022             		move.b	$22(a0),$22(a1)
000121F8                            
000121F8                            Obj62_NoFire:
000121F8 4E75                       		rts	
000121FA                            ; ===========================================================================
000121FA                            
000121FA                            Obj62_FireBall:				; XREF: Obj62_Index
000121FA 5428 0024                  		addq.b	#2,$24(a0)
000121FE 117C 0008 0016             		move.b	#8,$16(a0)
00012204 117C 0008 0017             		move.b	#8,$17(a0)
0001220A 217C 0000 0000 0004        		move.l	#Map_obj62,4(a0)
00012212 317C 02E9 0002             		move.w	#$2E9,2(a0)
00012218 0028 0004 0001             		ori.b	#4,1(a0)
0001221E 117C 0004 0018             		move.b	#4,$18(a0)
00012224 117C 0098 0020             		move.b	#$98,$20(a0)
0001222A 117C 0008 0019             		move.b	#8,$19(a0)
00012230 117C 0002 001A             		move.b	#2,$1A(a0)
00012236 5068 000C                  		addq.w	#8,$C(a0)
0001223A 317C 0200 0010             		move.w	#$200,$10(a0)
00012240 0828 0000 0022             		btst	#0,$22(a0)
00012246 6600                       		bne.s	Obj62_Sound
00012248 4468 0010                  		neg.w	$10(a0)
0001224C                            
0001224C                            Obj62_Sound:
0001224C 303C 00AE                  		move.w	#$AE,d0
00012250 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava ball sound
00012256                            
00012256                            Obj62_AniFire:				; XREF: Obj62_Index
00012256 1038 FE05                  		move.b	($FFFFFE05).w,d0
0001225A 0200 0007                  		andi.b	#7,d0
0001225E 6600                       		bne.s	Obj62_StopFire
00012260 0868 0000 001A             		bchg	#0,$1A(a0)	; switch between frame 01 and 02
00012266                            
00012266                            Obj62_StopFire:
00012266 6100 B31E                  		bsr.w	SpeedToPos
0001226A 0828 0000 0022             		btst	#0,$22(a0)
00012270 6600                       		bne.s	Obj62_StopFire2
00012272 76F8                       		moveq	#-8,d3
00012274 6100 0000                  		bsr.w	ObjHitWallLeft
00012278 4A41                       		tst.w	d1
0001227A 6B00 B36C                  		bmi.w	DeleteObject	; delete if the	fireball hits a	wall
0001227E 4E75                       		rts	
00012280                            ; ===========================================================================
00012280                            
00012280                            Obj62_StopFire2:
00012280 7608                       		moveq	#8,d3
00012282 6100 0000                  		bsr.w	ObjHitWallRight
00012286 4A41                       		tst.w	d1
00012288 6B00 B35E                  		bmi.w	DeleteObject
0001228C 4E75                       		rts	
0001228E                            ; ===========================================================================
0001228E                            ; ---------------------------------------------------------------------------
0001228E                            ; Sprite mappings - gargoyle head (LZ)
0001228E                            ; ---------------------------------------------------------------------------
0001228E                            Map_obj62:
0001228E                            	include "_maps\obj62.asm"
0001228E                            ; ---------------------------------------------------------------------------
0001228E                            ; Sprite mappings - gargoyle head (LZ)
0001228E                            ; ---------------------------------------------------------------------------
0001228E 0000 0000                  		dc.w byte_12320-Map_obj62, byte_12320-Map_obj62
00012292 0000 0000                  		dc.w byte_12330-Map_obj62, byte_12336-Map_obj62
00012296 03                         byte_12320:	dc.b 3
00012297 F004 0000 00               		dc.b $F0, 4, 0,	0, 0
0001229C F80D 0002 F0               		dc.b $F8, $D, 0, 2, $F0
000122A1 0808 000A F8               		dc.b 8,	8, 0, $A, $F8
000122A6 01                         byte_12330:	dc.b 1
000122A7 FC04 000D F8               		dc.b $FC, 4, 0,	$D, $F8
000122AC 01                         byte_12336:	dc.b 1
000122AD FC04 000F F8               		dc.b $FC, 4, 0,	$F, $F8
000122B2                            		even
000122B2                            		even
000122B2                            
000122B2                            ; ===========================================================================
000122B2                            ; ---------------------------------------------------------------------------
000122B2                            ; Object 63 - platforms	on a conveyor belt (LZ)
000122B2                            ; ---------------------------------------------------------------------------
000122B2                            
000122B2                            Obj63:					; XREF: Obj_Index
000122B2 7000                       		moveq	#0,d0
000122B4 1028 0024                  		move.b	$24(a0),d0
000122B8 323B 0000                  		move.w	Obj63_Index(pc,d0.w),d1
000122BC 4EBB 1000                  		jsr	Obj63_Index(pc,d1.w)
000122C0 3028 0030                  		move.w	$30(a0),d0
000122C4 0240 FF80                  		andi.w	#$FF80,d0
000122C8 3238 F700                  		move.w	($FFFFF700).w,d1
000122CC 0441 0080                  		subi.w	#$80,d1
000122D0 0241 FF80                  		andi.w	#$FF80,d1
000122D4 9041                       		sub.w	d1,d0
000122D6 0C40 0280                  		cmpi.w	#$280,d0
000122DA 6200                       		bhi.s	loc_1236A
000122DC                            
000122DC                            Obj63_Display:				; XREF: loc_1236A
000122DC 6000 B2CE                  		bra.w	DisplaySprite
000122E0                            ; ===========================================================================
000122E0                            
000122E0                            loc_1236A:				; XREF: Obj63
000122E0 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w
000122E6 6600                       		bne.s	loc_12378
000122E8 0C40 FF80                  		cmpi.w	#-$80,d0
000122EC 64EE                       		bcc.s	Obj63_Display
000122EE                            
000122EE                            loc_12378:
000122EE 1028 002F                  		move.b	$2F(a0),d0
000122F2 6A00 B2F4                  		bpl.w	DeleteObject
000122F6 0240 007F                  		andi.w	#$7F,d0
000122FA 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000122FE 08B2 0000 0000             		bclr	#0,(a2,d0.w)
00012304 6000 B2E2                  		bra.w	DeleteObject
00012308                            ; ===========================================================================
00012308 0000                       Obj63_Index:	dc.w Obj63_Main-Obj63_Index
0001230A 0000                       		dc.w loc_124B2-Obj63_Index
0001230C 0000                       		dc.w loc_124C2-Obj63_Index
0001230E 0000                       		dc.w loc_124DE-Obj63_Index
00012310                            ; ===========================================================================
00012310                            
00012310                            Obj63_Main:				; XREF: Obj63_Index
00012310 1028 0028                  		move.b	$28(a0),d0
00012314 6B00 0000                  		bmi.w	loc_12460
00012318 5428 0024                  		addq.b	#2,$24(a0)
0001231C 217C 0000 0000 0004        		move.l	#Map_obj63,4(a0)
00012324 317C 43F6 0002             		move.w	#$43F6,2(a0)
0001232A 0028 0004 0001             		ori.b	#4,1(a0)
00012330 117C 0010 0019             		move.b	#$10,$19(a0)
00012336 117C 0004 0018             		move.b	#4,$18(a0)
0001233C 0C28 007F 0028             		cmpi.b	#$7F,$28(a0)
00012342 6600                       		bne.s	loc_123E2
00012344 5828 0024                  		addq.b	#4,$24(a0)
00012348 317C 03F6 0002             		move.w	#$3F6,2(a0)
0001234E 117C 0001 0018             		move.b	#1,$18(a0)
00012354 6000 0000                  		bra.w	loc_124DE
00012358                            ; ===========================================================================
00012358                            
00012358                            loc_123E2:
00012358 117C 0004 001A             		move.b	#4,$1A(a0)
0001235E 7000                       		moveq	#0,d0
00012360 1028 0028                  		move.b	$28(a0),d0
00012364 3200                       		move.w	d0,d1
00012366 E648                       		lsr.w	#3,d0
00012368 0240 001E                  		andi.w	#$1E,d0
0001236C 45FA 0000                  		lea	Obj63_Data(pc),a2
00012370 D4F2 0000                  		adda.w	(a2,d0.w),a2
00012374 315A 0038                  		move.w	(a2)+,$38(a0)
00012378 315A 0030                  		move.w	(a2)+,$30(a0)
0001237C 214A 003C                  		move.l	a2,$3C(a0)
00012380 0241 000F                  		andi.w	#$F,d1
00012384 E549                       		lsl.w	#2,d1
00012386 1141 0038                  		move.b	d1,$38(a0)
0001238A 117C 0004 003A             		move.b	#4,$3A(a0)
00012390 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012394 6700                       		beq.s	loc_1244C
00012396 117C 0001 003B             		move.b	#1,$3B(a0)
0001239C 4428 003A                  		neg.b	$3A(a0)
000123A0 7200                       		moveq	#0,d1
000123A2 1228 0038                  		move.b	$38(a0),d1
000123A6 D228 003A                  		add.b	$3A(a0),d1
000123AA B228 0039                  		cmp.b	$39(a0),d1
000123AE 6500                       		bcs.s	loc_12448
000123B0 1001                       		move.b	d1,d0
000123B2 7200                       		moveq	#0,d1
000123B4 4A00                       		tst.b	d0
000123B6 6A00                       		bpl.s	loc_12448
000123B8 1228 0039                  		move.b	$39(a0),d1
000123BC 5901                       		subq.b	#4,d1
000123BE                            
000123BE                            loc_12448:
000123BE 1141 0038                  		move.b	d1,$38(a0)
000123C2                            
000123C2                            loc_1244C:
000123C2 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
000123C8 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
000123CE 6100 0000                  		bsr.w	Obj63_ChangeDir
000123D2 6000 0000                  		bra.w	loc_124B2
000123D6                            ; ===========================================================================
000123D6                            
000123D6                            loc_12460:				; XREF: Obj63_Main
000123D6 1140 002F                  		move.b	d0,$2F(a0)
000123DA 0240 007F                  		andi.w	#$7F,d0
000123DE 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000123E2 08F2 0000 0000             		bset	#0,(a2,d0.w)
000123E8 6600 B1FE                  		bne.w	DeleteObject
000123EC D040                       		add.w	d0,d0
000123EE 0240 001E                  		andi.w	#$1E,d0
000123F2 0640 0070                  		addi.w	#$70,d0
000123F6 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000123FC D4F2 0000                  		adda.w	(a2,d0.w),a2
00012400 321A                       		move.w	(a2)+,d1
00012402 2248                       		movea.l	a0,a1
00012404 6000                       		bra.s	Obj63_MakePtfms
00012406                            ; ===========================================================================
00012406                            
00012406                            Obj63_Loop:
00012406 6100 B62A                  		bsr.w	SingleObjLoad
0001240A 6600                       		bne.s	loc_124AA
0001240C                            
0001240C                            Obj63_MakePtfms:			; XREF: loc_12460
0001240C 12BC 0063                  		move.b	#$63,0(a1)
00012410 335A 0008                  		move.w	(a2)+,8(a1)
00012414 335A 000C                  		move.w	(a2)+,$C(a1)
00012418 301A                       		move.w	(a2)+,d0
0001241A 1340 0028                  		move.b	d0,$28(a1)
0001241E                            
0001241E                            loc_124AA:
0001241E 51C9 FFE6                  		dbf	d1,Obj63_Loop
00012422                            
00012422 588F                       		addq.l	#4,sp
00012424 4E75                       		rts	
00012426                            ; ===========================================================================
00012426                            
00012426                            loc_124B2:				; XREF: Obj63_Index
00012426 7200                       		moveq	#0,d1
00012428 1228 0019                  		move.b	$19(a0),d1
0001242C 4EB9 0000 7436             		jsr	(PlatformObject).l
00012432 6000 0000                  		bra.w	sub_12502
00012436                            ; ===========================================================================
00012436                            
00012436                            loc_124C2:				; XREF: Obj63_Index
00012436 7200                       		moveq	#0,d1
00012438 1228 0019                  		move.b	$19(a0),d1
0001243C 4EB9 0000 75AA             		jsr	(ExitPlatform).l
00012442 3F28 0008                  		move.w	8(a0),-(sp)
00012446 6100 0000                  		bsr.w	sub_12502
0001244A 341F                       		move.w	(sp)+,d2
0001244C 4EF9 0000 7B14             		jmp	(MvSonicOnPtfm2).l
00012452                            ; ===========================================================================
00012452                            
00012452                            loc_124DE:				; XREF: Obj63_Index
00012452 3038 FE04                  		move.w	($FFFFFE04).w,d0
00012456 0240 0003                  		andi.w	#3,d0
0001245A 6600                       		bne.s	loc_124FC
0001245C 7201                       		moveq	#1,d1
0001245E 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00012462 6700                       		beq.s	loc_124F2
00012464 4401                       		neg.b	d1
00012466                            
00012466                            loc_124F2:
00012466 D328 001A                  		add.b	d1,$1A(a0)
0001246A 0228 0003 001A             		andi.b	#3,$1A(a0)
00012470                            
00012470                            loc_124FC:
00012470 588F                       		addq.l	#4,sp
00012472 6000 D1D0                  		bra.w	MarkObjGone
00012476                            
00012476                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012476                            
00012476                            
00012476                            sub_12502:				; XREF: loc_124B2; loc_124C2
00012476 4A38 F7EE                  		tst.b	($FFFFF7EE).w
0001247A 6700                       		beq.s	loc_12520
0001247C 4A28 003B                  		tst.b	$3B(a0)
00012480 6600                       		bne.s	loc_12520
00012482 117C 0001 003B             		move.b	#1,$3B(a0)
00012488 11FC 0001 F7C0             		move.b	#1,($FFFFF7C0).w
0001248E 4428 003A                  		neg.b	$3A(a0)
00012492 6000                       		bra.s	loc_12534
00012494                            ; ===========================================================================
00012494                            
00012494                            loc_12520:
00012494 3028 0008                  		move.w	8(a0),d0
00012498 B068 0034                  		cmp.w	$34(a0),d0
0001249C 6600                       		bne.s	loc_1256A
0001249E 3028 000C                  		move.w	$C(a0),d0
000124A2 B068 0036                  		cmp.w	$36(a0),d0
000124A6 6600                       		bne.s	loc_1256A
000124A8                            
000124A8                            loc_12534:
000124A8 7200                       		moveq	#0,d1
000124AA 1228 0038                  		move.b	$38(a0),d1
000124AE D228 003A                  		add.b	$3A(a0),d1
000124B2 B228 0039                  		cmp.b	$39(a0),d1
000124B6 6500                       		bcs.s	loc_12552
000124B8 1001                       		move.b	d1,d0
000124BA 7200                       		moveq	#0,d1
000124BC 4A00                       		tst.b	d0
000124BE 6A00                       		bpl.s	loc_12552
000124C0 1228 0039                  		move.b	$39(a0),d1
000124C4 5901                       		subq.b	#4,d1
000124C6                            
000124C6                            loc_12552:
000124C6 1141 0038                  		move.b	d1,$38(a0)
000124CA 2268 003C                  		movea.l	$3C(a0),a1
000124CE 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
000124D4 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
000124DA 6100 0000                  		bsr.w	Obj63_ChangeDir
000124DE                            
000124DE                            loc_1256A:
000124DE 6100 B0A6                  		bsr.w	SpeedToPos
000124E2 4E75                       		rts	
000124E4                            ; End of function sub_12502
000124E4                            
000124E4                            
000124E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000124E4                            
000124E4                            
000124E4                            Obj63_ChangeDir:			; XREF: loc_123E2; sub_12502
000124E4 7000                       		moveq	#0,d0
000124E6 343C FF00                  		move.w	#-$100,d2
000124EA 3028 0008                  		move.w	8(a0),d0
000124EE 9068 0034                  		sub.w	$34(a0),d0
000124F2 6400                       		bcc.s	loc_12584
000124F4 4440                       		neg.w	d0
000124F6 4442                       		neg.w	d2
000124F8                            
000124F8                            loc_12584:
000124F8 7200                       		moveq	#0,d1
000124FA 363C FF00                  		move.w	#-$100,d3
000124FE 3228 000C                  		move.w	$C(a0),d1
00012502 9268 0036                  		sub.w	$36(a0),d1
00012506 6400                       		bcc.s	loc_12598
00012508 4441                       		neg.w	d1
0001250A 4443                       		neg.w	d3
0001250C                            
0001250C                            loc_12598:
0001250C B240                       		cmp.w	d0,d1
0001250E 6500                       		bcs.s	loc_125C2
00012510 3028 0008                  		move.w	8(a0),d0
00012514 9068 0034                  		sub.w	$34(a0),d0
00012518 6700                       		beq.s	loc_125AE
0001251A 48C0                       		ext.l	d0
0001251C E180                       		asl.l	#8,d0
0001251E 81C1                       		divs.w	d1,d0
00012520 4440                       		neg.w	d0
00012522                            
00012522                            loc_125AE:
00012522 3140 0010                  		move.w	d0,$10(a0)
00012526 3143 0012                  		move.w	d3,$12(a0)
0001252A 4840                       		swap	d0
0001252C 3140 000A                  		move.w	d0,$A(a0)
00012530 4268 000E                  		clr.w	$E(a0)
00012534 4E75                       		rts	
00012536                            ; ===========================================================================
00012536                            
00012536                            loc_125C2:				; XREF: Obj63_ChangeDir
00012536 3228 000C                  		move.w	$C(a0),d1
0001253A 9268 0036                  		sub.w	$36(a0),d1
0001253E 6700                       		beq.s	loc_125D4
00012540 48C1                       		ext.l	d1
00012542 E181                       		asl.l	#8,d1
00012544 83C0                       		divs.w	d0,d1
00012546 4441                       		neg.w	d1
00012548                            
00012548                            loc_125D4:
00012548 3141 0012                  		move.w	d1,$12(a0)
0001254C 3142 0010                  		move.w	d2,$10(a0)
00012550 4841                       		swap	d1
00012552 3141 000E                  		move.w	d1,$E(a0)
00012556 4268 000A                  		clr.w	$A(a0)
0001255A 4E75                       		rts	
0001255C                            ; End of function Obj63_ChangeDir
0001255C                            
0001255C                            ; ===========================================================================
0001255C 0000                       Obj63_Data:	dc.w word_125F4-Obj63_Data
0001255E 0000                       		dc.w word_12610-Obj63_Data
00012560 0000                       		dc.w word_12628-Obj63_Data
00012562 0000                       		dc.w word_1263C-Obj63_Data
00012564 0000                       		dc.w word_12650-Obj63_Data
00012566 0000                       		dc.w word_12668-Obj63_Data
00012568 0018 1070 1078 021A 10BE+  word_125F4:	dc.w $18, $1070, $1078,	$21A, $10BE, $260, $10BE, $393
00012578 108C 03C5 1022 0390 1022+  		dc.w $108C, $3C5, $1022, $390, $1022, $244
00012584 0014 1280 127E 0280 12CE+  word_12610:	dc.w $14, $1280, $127E,	$280, $12CE, $2D0, $12CE, $46E
00012594 1232 0420 1232 02CC        		dc.w $1232, $420, $1232, $2CC
0001259C 0010 0D68 0D22 0482 0D22+  word_12628:	dc.w $10, $D68,	$D22, $482, $D22, $5DE,	$DAE, $5DE, $DAE, $482
000125B0 0010 0DA0 0D62 03A2 0DEE+  word_1263C:	dc.w $10, $DA0,	$D62, $3A2, $DEE, $3A2,	$DEE, $4DE, $D62, $4DE
000125C4 0014 0D00 0CAC 0242 0DDE+  word_12650:	dc.w $14, $D00,	$CAC, $242, $DDE, $242,	$DDE, $3DE, $C52, $3DE,	$C52, $29C
000125DC 0010 1300 1252 020A 13DE+  word_12668:	dc.w $10, $1300, $1252,	$20A, $13DE, $20A, $13DE, $2BE,	$1252, $2BE
000125F0                            
000125F0                            ; ---------------------------------------------------------------------------
000125F0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000125F0                            ; ---------------------------------------------------------------------------
000125F0                            Map_obj63:
000125F0                            	include "_maps\obj63.asm"
000125F0                            ; ---------------------------------------------------------------------------
000125F0                            ; Sprite mappings - platforms on a conveyor belt (LZ)
000125F0                            ; ---------------------------------------------------------------------------
000125F0 0000 0000                  		dc.w byte_12686-Map_obj63, byte_1268C-Map_obj63
000125F4 0000 0000                  		dc.w byte_12692-Map_obj63, byte_12698-Map_obj63
000125F8 0000                       		dc.w byte_1269E-Map_obj63
000125FA 01                         byte_12686:	dc.b 1
000125FB F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00012600 01                         byte_1268C:	dc.b 1
00012601 F00F 0010 F0               		dc.b $F0, $F, 0, $10, $F0
00012606 01                         byte_12692:	dc.b 1
00012607 F00F 0020 F0               		dc.b $F0, $F, 0, $20, $F0
0001260C 01                         byte_12698:	dc.b 1
0001260D F00F 0030 F0               		dc.b $F0, $F, 0, $30, $F0
00012612 01                         byte_1269E:	dc.b 1
00012613 F80D 0040 F0               		dc.b $F8, $D, 0, $40, $F0
00012618                            		even
00012618                            		even
00012618                            
00012618                            ; ===========================================================================
00012618                            ; ---------------------------------------------------------------------------
00012618                            ; Object 64 - bubbles (LZ)
00012618                            ; ---------------------------------------------------------------------------
00012618                            
00012618                            Obj64:					; XREF: Obj_Index
00012618 7000                       		moveq	#0,d0
0001261A 1028 0024                  		move.b	$24(a0),d0
0001261E 323B 0000                  		move.w	Obj64_Index(pc,d0.w),d1
00012622 4EFB 1000                  		jmp	Obj64_Index(pc,d1.w)
00012626                            ; ===========================================================================
00012626 0000                       Obj64_Index:	dc.w Obj64_Main-Obj64_Index
00012628 0000                       		dc.w Obj64_Animate-Obj64_Index
0001262A 0000                       		dc.w Obj64_ChkWater-Obj64_Index
0001262C 0000                       		dc.w Obj64_Display2-Obj64_Index
0001262E 0000                       		dc.w Obj64_Delete3-Obj64_Index
00012630 0000                       		dc.w Obj64_BblMaker-Obj64_Index
00012632                            ; ===========================================================================
00012632                            
00012632                            Obj64_Main:				; XREF: Obj64_Index
00012632 5428 0024                  		addq.b	#2,$24(a0)
00012636 217C 0000 0000 0004        		move.l	#Map_obj64,4(a0)
0001263E 317C 8348 0002             		move.w	#$8348,2(a0)
00012644 117C 0084 0001             		move.b	#$84,1(a0)
0001264A 117C 0010 0019             		move.b	#$10,$19(a0)
00012650 117C 0001 0018             		move.b	#1,$18(a0)
00012656 1028 0028                  		move.b	$28(a0),d0	; get object type
0001265A 6A00                       		bpl.s	Obj64_Bubble	; if type is $0-$7F, branch
0001265C 5028 0024                  		addq.b	#8,$24(a0)
00012660 0240 007F                  		andi.w	#$7F,d0		; read only last 7 bits	(deduct	$80)
00012664 1140 0032                  		move.b	d0,$32(a0)
00012668 1140 0033                  		move.b	d0,$33(a0)
0001266C 117C 0006 001C             		move.b	#6,$1C(a0)
00012672 6000 0000                  		bra.w	Obj64_BblMaker
00012676                            ; ===========================================================================
00012676                            
00012676                            Obj64_Bubble:				; XREF: Obj64_Main
00012676 1140 001C                  		move.b	d0,$1C(a0)
0001267A 3168 0008 0030             		move.w	8(a0),$30(a0)
00012680 317C FF78 0012             		move.w	#-$88,$12(a0)	; float	bubble upwards
00012686 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001268C 1140 0026                  		move.b	d0,$26(a0)
00012690                            
00012690                            Obj64_Animate:				; XREF: Obj64_Index
00012690 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012696 4EBA 8040                  		jsr	AnimateSprite
0001269A 0C28 0006 001A             		cmpi.b	#6,$1A(a0)
000126A0 6600                       		bne.s	Obj64_ChkWater
000126A2 117C 0001 002E             		move.b	#1,$2E(a0)
000126A8                            
000126A8                            Obj64_ChkWater:				; XREF: Obj64_Index
000126A8 3038 F646                  		move.w	($FFFFF646).w,d0
000126AC B068 000C                  		cmp.w	$C(a0),d0	; is bubble underwater?
000126B0 6500                       		bcs.s	Obj64_Wobble	; if yes, branch
000126B2                            
000126B2                            Obj64_Burst:				; XREF: Obj64_Wobble
000126B2 117C 0006 0024             		move.b	#6,$24(a0)
000126B8 5628 001C                  		addq.b	#3,$1C(a0)	; run "bursting" animation
000126BC 6000 0000                  		bra.w	Obj64_Display2
000126C0                            ; ===========================================================================
000126C0                            
000126C0                            Obj64_Wobble:				; XREF: Obj64_ChkWater
000126C0 1028 0026                  		move.b	$26(a0),d0
000126C4 5228 0026                  		addq.b	#1,$26(a0)
000126C8 0240 007F                  		andi.w	#$7F,d0
000126CC 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
000126D2 1031 0000                  		move.b	(a1,d0.w),d0
000126D6 4880                       		ext.w	d0
000126D8 D068 0030                  		add.w	$30(a0),d0
000126DC 3140 0008                  		move.w	d0,8(a0)	; change bubble's horizontal position
000126E0 4A28 002E                  		tst.b	$2E(a0)
000126E4 6700                       		beq.s	Obj64_Display
000126E6 6100 0000                  		bsr.w	Obj64_ChkSonic	; has Sonic touched the	bubble?
000126EA 6700                       		beq.s	Obj64_Display	; if not, branch
000126EC                            
000126EC 6100 0000                  		bsr.w	ResumeMusic	; cancel countdown music
000126F0 303C 00AD                  		move.w	#$AD,d0
000126F4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play collecting	bubble sound
000126FA 43F8 D000                  		lea	($FFFFD000).w,a1
000126FE 4269 0010                  		clr.w	$10(a1)
00012702 4269 0012                  		clr.w	$12(a1)
00012706 4269 0014                  		clr.w	$14(a1)
0001270A 137C 0015 001C             		move.b	#$15,$1C(a1)
00012710 337C 0023 003E             		move.w	#$23,$3E(a1)
00012716 137C 0000 003C             		move.b	#0,$3C(a1)
0001271C 08A9 0005 0022             		bclr	#5,$22(a1)
00012722 08A9 0004 0022             		bclr	#4,$22(a1)
00012728 0829 0002 0022             		btst	#2,$22(a1)
0001272E 6700 FF82                  		beq.w	Obj64_Burst
00012732 08A9 0002 0022             		bclr	#2,$22(a1)
00012738 137C 0013 0016             		move.b	#$13,$16(a1)
0001273E 137C 0009 0017             		move.b	#9,$17(a1)
00012744 5B69 000C                  		subq.w	#5,$C(a1)
00012748 6000 FF68                  		bra.w	Obj64_Burst
0001274C                            ; ===========================================================================
0001274C                            
0001274C                            Obj64_Display:				; XREF: Obj64_Wobble
0001274C 6100 AE38                  		bsr.w	SpeedToPos
00012750 4A28 0001                  		tst.b	1(a0)
00012754 6A00                       		bpl.s	Obj64_Delete
00012756 4EFA AE54                  		jmp	DisplaySprite
0001275A                            ; ===========================================================================
0001275A                            
0001275A                            Obj64_Delete:
0001275A 4EFA AE8C                  		jmp	DeleteObject
0001275E                            ; ===========================================================================
0001275E                            
0001275E                            Obj64_Display2:				; XREF: Obj64_Index
0001275E 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012764 4EB9 0000 A6D8             		jsr	AnimateSprite
0001276A 4A28 0001                  		tst.b	1(a0)
0001276E 6A00                       		bpl.s	Obj64_Delete2
00012770 4EFA AE3A                  		jmp	DisplaySprite
00012774                            ; ===========================================================================
00012774                            
00012774                            Obj64_Delete2:
00012774 4EFA AE72                  		jmp	DeleteObject
00012778                            ; ===========================================================================
00012778                            
00012778                            Obj64_Delete3:				; XREF: Obj64_Index
00012778 6000 AE6E                  		bra.w	DeleteObject
0001277C                            ; ===========================================================================
0001277C                            
0001277C                            Obj64_BblMaker:				; XREF: Obj64_Index
0001277C 4A68 0036                  		tst.w	$36(a0)
00012780 6600                       		bne.s	loc_12874
00012782 3038 F646                  		move.w	($FFFFF646).w,d0
00012786 B068 000C                  		cmp.w	$C(a0),d0	; is bubble maker underwater?
0001278A 6400 0000                  		bcc.w	Obj64_ChkDel	; if not, branch
0001278E 4A28 0001                  		tst.b	1(a0)
00012792 6A00 0000                  		bpl.w	Obj64_ChkDel
00012796 5368 0038                  		subq.w	#1,$38(a0)
0001279A 6A00 0000                  		bpl.w	loc_12914
0001279E 317C 0001 0036             		move.w	#1,$36(a0)
000127A4                            
000127A4                            loc_1283A:
000127A4 4EB9 0000 29B4             		jsr	(RandomNumber).l
000127AA 3200                       		move.w	d0,d1
000127AC 0240 0007                  		andi.w	#7,d0
000127B0 0C40 0006                  		cmpi.w	#6,d0
000127B4 64EE                       		bcc.s	loc_1283A
000127B6                            
000127B6 1140 0034                  		move.b	d0,$34(a0)
000127BA 0241 000C                  		andi.w	#$C,d1
000127BE 43F9 0000 0000             		lea	(Obj64_BblTypes).l,a1
000127C4 D2C1                       		adda.w	d1,a1
000127C6 2149 003C                  		move.l	a1,$3C(a0)
000127CA 5328 0032                  		subq.b	#1,$32(a0)
000127CE 6A00                       		bpl.s	loc_12872
000127D0 1168 0033 0032             		move.b	$33(a0),$32(a0)
000127D6 08E8 0007 0036             		bset	#7,$36(a0)
000127DC                            
000127DC                            loc_12872:
000127DC 6000                       		bra.s	loc_1287C
000127DE                            ; ===========================================================================
000127DE                            
000127DE                            loc_12874:				; XREF: Obj64_BblMaker
000127DE 5368 0038                  		subq.w	#1,$38(a0)
000127E2 6A00 0000                  		bpl.w	loc_12914
000127E6                            
000127E6                            loc_1287C:
000127E6 4EB9 0000 29B4             		jsr	(RandomNumber).l
000127EC 0240 001F                  		andi.w	#$1F,d0
000127F0 3140 0038                  		move.w	d0,$38(a0)
000127F4 6100 B23C                  		bsr.w	SingleObjLoad
000127F8 6600                       		bne.s	loc_128F8
000127FA 12BC 0064                  		move.b	#$64,0(a1)	; load bubble object
000127FE 3368 0008 0008             		move.w	8(a0),8(a1)
00012804 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001280A 0240 000F                  		andi.w	#$F,d0
0001280E 5140                       		subq.w	#8,d0
00012810 D169 0008                  		add.w	d0,8(a1)
00012814 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001281A 7000                       		moveq	#0,d0
0001281C 1028 0034                  		move.b	$34(a0),d0
00012820 2468 003C                  		movea.l	$3C(a0),a2
00012824 1372 0000 0028             		move.b	(a2,d0.w),$28(a1)
0001282A 0828 0007 0036             		btst	#7,$36(a0)
00012830 6700                       		beq.s	loc_128F8
00012832 4EB9 0000 29B4             		jsr	(RandomNumber).l
00012838 0240 0003                  		andi.w	#3,d0
0001283C 6600                       		bne.s	loc_128E4
0001283E 08E8 0006 0036             		bset	#6,$36(a0)
00012844 6600                       		bne.s	loc_128F8
00012846 137C 0002 0028             		move.b	#2,$28(a1)
0001284C                            
0001284C                            loc_128E4:
0001284C 4A28 0034                  		tst.b	$34(a0)
00012850 6600                       		bne.s	loc_128F8
00012852 08E8 0006 0036             		bset	#6,$36(a0)
00012858 6600                       		bne.s	loc_128F8
0001285A 137C 0002 0028             		move.b	#2,$28(a1)
00012860                            
00012860                            loc_128F8:
00012860 5328 0034                  		subq.b	#1,$34(a0)
00012864 6A00                       		bpl.s	loc_12914
00012866 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001286C 0240 007F                  		andi.w	#$7F,d0
00012870 0640 0080                  		addi.w	#$80,d0
00012874 D168 0038                  		add.w	d0,$38(a0)
00012878 4268 0036                  		clr.w	$36(a0)
0001287C                            
0001287C                            loc_12914:
0001287C 43F9 0000 0000             		lea	(Ani_obj64).l,a1
00012882 4EB9 0000 A6D8             		jsr	AnimateSprite
00012888                            
00012888                            Obj64_ChkDel:				; XREF: Obj64_BblMaker
00012888 3028 0008                  		move.w	8(a0),d0
0001288C 0240 FF80                  		andi.w	#$FF80,d0
00012890 3238 F700                  		move.w	($FFFFF700).w,d1
00012894 0441 0080                  		subi.w	#$80,d1
00012898 0241 FF80                  		andi.w	#$FF80,d1
0001289C 9041                       		sub.w	d1,d0
0001289E 0C40 0280                  		cmpi.w	#$280,d0
000128A2 6200 AD44                  		bhi.w	DeleteObject
000128A6 3038 F646                  		move.w	($FFFFF646).w,d0
000128AA B068 000C                  		cmp.w	$C(a0),d0
000128AE 6500 ACFC                  		bcs.w	DisplaySprite
000128B2 4E75                       		rts	
000128B4                            ; ===========================================================================
000128B4                            ; bubble production sequence
000128B4                            
000128B4                            ; 0 = small bubble, 1 =	large bubble
000128B4                            
000128B4 0001 0000 0000 0100 0000+  Obj64_BblTypes:	dc.b 0,	1, 0, 0, 0, 0, 1, 0, 0,	0, 0, 1, 0, 1, 0, 0, 1,	0
000128C6                            
000128C6                            ; ===========================================================================
000128C6                            
000128C6                            Obj64_ChkSonic:				; XREF: Obj64_Wobble
000128C6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
000128CA 6B00                       		bmi.s	loc_12998
000128CC 43F8 D000                  		lea	($FFFFD000).w,a1
000128D0 3029 0008                  		move.w	8(a1),d0
000128D4 3228 0008                  		move.w	8(a0),d1
000128D8 0441 0010                  		subi.w	#$10,d1
000128DC B240                       		cmp.w	d0,d1
000128DE 6400                       		bcc.s	loc_12998
000128E0 0641 0020                  		addi.w	#$20,d1
000128E4 B240                       		cmp.w	d0,d1
000128E6 6500                       		bcs.s	loc_12998
000128E8 3029 000C                  		move.w	$C(a1),d0
000128EC 3228 000C                  		move.w	$C(a0),d1
000128F0 B240                       		cmp.w	d0,d1
000128F2 6400                       		bcc.s	loc_12998
000128F4 0641 0010                  		addi.w	#$10,d1
000128F8 B240                       		cmp.w	d0,d1
000128FA 6500                       		bcs.s	loc_12998
000128FC 7001                       		moveq	#1,d0
000128FE 4E75                       		rts	
00012900                            ; ===========================================================================
00012900                            
00012900                            loc_12998:
00012900 7000                       		moveq	#0,d0
00012902 4E75                       		rts	
00012904                            ; ===========================================================================
00012904                            Ani_obj64:
00012904                            	include "_anim\obj64.asm"
00012904                            ; ---------------------------------------------------------------------------
00012904                            ; Animation script - bubbles (LZ)
00012904                            ; ---------------------------------------------------------------------------
00012904 0000                       		dc.w byte_129AA-Ani_obj64
00012906 0000                       		dc.w byte_129B0-Ani_obj64
00012908 0000                       		dc.w byte_129B6-Ani_obj64
0001290A 0000                       		dc.w byte_129BE-Ani_obj64
0001290C 0000                       		dc.w byte_129BE-Ani_obj64
0001290E 0000                       		dc.w byte_129C0-Ani_obj64
00012910 0000                       		dc.w byte_129C6-Ani_obj64
00012912 0E00 0102 FC00             byte_129AA:	dc.b $E, 0, 1, 2, $FC, 0
00012918 0E01 0203 04FC             byte_129B0:	dc.b $E, 1, 2, 3, 4, $FC
0001291E 0E02 0304 0506 FC00        byte_129B6:	dc.b $E, 2, 3, 4, 5, 6,	$FC, 0
00012926 04FC                       byte_129BE:	dc.b 4,	$FC
00012928 0406 0708 FC00             byte_129C0:	dc.b 4,	6, 7, 8, $FC, 0
0001292E 0F13 1415 FF               byte_129C6:	dc.b $F, $13, $14, $15,	$FF
00012934 00                         		even
00012934 00                         		even
00012934                            
00012934                            ; ---------------------------------------------------------------------------
00012934                            ; Sprite mappings - bubbles (LZ)
00012934                            ; ---------------------------------------------------------------------------
00012934                            Map_obj64:
00012934                            	include "_maps\obj64.asm"
00012934                            ; ---------------------------------------------------------------------------
00012934                            ; Sprite mappings - bubbles (LZ)
00012934                            ; ---------------------------------------------------------------------------
00012934 0000 0000                  		dc.w byte_129FA-Map_obj64, byte_12A00-Map_obj64
00012938 0000 0000                  		dc.w byte_12A06-Map_obj64, byte_12A0C-Map_obj64
0001293C 0000 0000                  		dc.w byte_12A12-Map_obj64, byte_12A18-Map_obj64
00012940 0000 0000                  		dc.w byte_12A1E-Map_obj64, byte_12A24-Map_obj64
00012944 0000 0000                  		dc.w byte_12A39-Map_obj64, byte_12A4E-Map_obj64
00012948 0000 0000                  		dc.w byte_12A54-Map_obj64, byte_12A5A-Map_obj64
0001294C 0000 0000                  		dc.w byte_12A60-Map_obj64, byte_12A66-Map_obj64
00012950 0000 0000                  		dc.w byte_12A6C-Map_obj64, byte_12A72-Map_obj64
00012954 0000 0000                  		dc.w byte_12A78-Map_obj64, byte_12A7E-Map_obj64
00012958 0000 0000                  		dc.w byte_12A84-Map_obj64, byte_12A8A-Map_obj64
0001295C 0000 0000                  		dc.w byte_12A90-Map_obj64, byte_12A96-Map_obj64
00012960 0000                       		dc.w byte_12A9C-Map_obj64
00012962 01                         byte_129FA:	dc.b 1
00012963 FC00 0000 FC               		dc.b $FC, 0, 0,	0, $FC
00012968 01                         byte_12A00:	dc.b 1
00012969 FC00 0001 FC               		dc.b $FC, 0, 0,	1, $FC
0001296E 01                         byte_12A06:	dc.b 1
0001296F FC00 0002 FC               		dc.b $FC, 0, 0,	2, $FC
00012974 01                         byte_12A0C:	dc.b 1
00012975 F805 0003 F8               		dc.b $F8, 5, 0,	3, $F8
0001297A 01                         byte_12A12:	dc.b 1
0001297B F805 0007 F8               		dc.b $F8, 5, 0,	7, $F8
00012980 01                         byte_12A18:	dc.b 1
00012981 F40A 000B F4               		dc.b $F4, $A, 0, $B, $F4
00012986 01                         byte_12A1E:	dc.b 1
00012987 F00F 0014 F0               		dc.b $F0, $F, 0, $14, $F0
0001298C 04                         byte_12A24:	dc.b 4
0001298D F005 0024 F0               		dc.b $F0, 5, 0,	$24, $F0
00012992 F005 0824 00               		dc.b $F0, 5, 8,	$24, 0
00012997 0005 1024 F0               		dc.b 0,	5, $10,	$24, $F0
0001299C 0005 1824 00               		dc.b 0,	5, $18,	$24, 0
000129A1 04                         byte_12A39:	dc.b 4
000129A2 F005 0028 F0               		dc.b $F0, 5, 0,	$28, $F0
000129A7 F005 0828 00               		dc.b $F0, 5, 8,	$28, 0
000129AC 0005 1028 F0               		dc.b 0,	5, $10,	$28, $F0
000129B1 0005 1828 00               		dc.b 0,	5, $18,	$28, 0
000129B6 01                         byte_12A4E:	dc.b 1
000129B7 F406 002C F8               		dc.b $F4, 6, 0,	$2C, $F8
000129BC 01                         byte_12A54:	dc.b 1
000129BD F406 0032 F8               		dc.b $F4, 6, 0,	$32, $F8
000129C2 01                         byte_12A5A:	dc.b 1
000129C3 F406 0038 F8               		dc.b $F4, 6, 0,	$38, $F8
000129C8 01                         byte_12A60:	dc.b 1
000129C9 F406 003E F8               		dc.b $F4, 6, 0,	$3E, $F8
000129CE 01                         byte_12A66:	dc.b 1
000129CF F406 2044 F8               		dc.b $F4, 6, $20, $44, $F8
000129D4 01                         byte_12A6C:	dc.b 1
000129D5 F406 204A F8               		dc.b $F4, 6, $20, $4A, $F8
000129DA 01                         byte_12A72:	dc.b 1
000129DB F406 2050 F8               		dc.b $F4, 6, $20, $50, $F8
000129E0 01                         byte_12A78:	dc.b 1
000129E1 F406 2056 F8               		dc.b $F4, 6, $20, $56, $F8
000129E6 01                         byte_12A7E:	dc.b 1
000129E7 F406 205C F8               		dc.b $F4, 6, $20, $5C, $F8
000129EC 01                         byte_12A84:	dc.b 1
000129ED F406 2062 F8               		dc.b $F4, 6, $20, $62, $F8
000129F2 01                         byte_12A8A:	dc.b 1
000129F3 F805 0068 F8               		dc.b $F8, 5, 0,	$68, $F8
000129F8 01                         byte_12A90:	dc.b 1
000129F9 F805 006C F8               		dc.b $F8, 5, 0,	$6C, $F8
000129FE 01                         byte_12A96:	dc.b 1
000129FF F805 0070 F8               		dc.b $F8, 5, 0,	$70, $F8
00012A04 00                         byte_12A9C:	dc.b 0
00012A06 00                         		even
00012A06 00                         		even
00012A06                            
00012A06                            ; ===========================================================================
00012A06                            ; ---------------------------------------------------------------------------
00012A06                            ; Object 65 - waterfalls (LZ)
00012A06                            ; ---------------------------------------------------------------------------
00012A06                            
00012A06                            Obj65:					; XREF: Obj_Index
00012A06 7000                       		moveq	#0,d0
00012A08 1028 0024                  		move.b	$24(a0),d0
00012A0C 323B 0000                  		move.w	Obj65_Index(pc,d0.w),d1
00012A10 4EFB 1000                  		jmp	Obj65_Index(pc,d1.w)
00012A14                            ; ===========================================================================
00012A14 0000                       Obj65_Index:	dc.w Obj65_Main-Obj65_Index
00012A16 0000                       		dc.w Obj65_Animate-Obj65_Index
00012A18 0000                       		dc.w Obj65_ChkDel-Obj65_Index
00012A1A 0000                       		dc.w Obj65_FixHeight-Obj65_Index
00012A1C 0000                       		dc.w loc_12B36-Obj65_Index
00012A1E                            ; ===========================================================================
00012A1E                            
00012A1E                            Obj65_Main:				; XREF: Obj65_Index
00012A1E 5828 0024                  		addq.b	#4,$24(a0)
00012A22 217C 0000 0000 0004        		move.l	#Map_obj65,4(a0)
00012A2A 317C 4259 0002             		move.w	#$4259,2(a0)
00012A30 0028 0004 0001             		ori.b	#4,1(a0)
00012A36 117C 0018 0019             		move.b	#$18,$19(a0)
00012A3C 117C 0001 0018             		move.b	#1,$18(a0)
00012A42 1028 0028                  		move.b	$28(a0),d0	; get object type
00012A46 6A00                       		bpl.s	loc_12AE6
00012A48 08E8 0007 0002             		bset	#7,2(a0)
00012A4E                            
00012A4E                            loc_12AE6:
00012A4E 0200 000F                  		andi.b	#$F,d0		; read only the	2nd byte
00012A52 1140 001A                  		move.b	d0,$1A(a0)	; set frame number
00012A56 0C00 0009                  		cmpi.b	#9,d0		; is object type $x9 ?
00012A5A 6600                       		bne.s	Obj65_ChkDel	; if not, branch
00012A5C 4228 0018                  		clr.b	$18(a0)
00012A60 5528 0024                  		subq.b	#2,$24(a0)
00012A64 0828 0006 0028             		btst	#6,$28(a0)	; is object type $4x ?
00012A6A 6700                       		beq.s	loc_12B0A	; if not, branch
00012A6C 117C 0006 0024             		move.b	#6,$24(a0)
00012A72                            
00012A72                            loc_12B0A:
00012A72 0828 0005 0028             		btst	#5,$28(a0)	; is object type $Ax ?
00012A78 6700                       		beq.s	Obj65_Animate	; if not, branch
00012A7A 117C 0008 0024             		move.b	#8,$24(a0)
00012A80                            
00012A80                            Obj65_Animate:				; XREF: Obj65_Index
00012A80 43F9 0000 0000             		lea	(Ani_obj65).l,a1
00012A86 4EB9 0000 A6D8             		jsr	AnimateSprite
00012A8C                            
00012A8C                            Obj65_ChkDel:				; XREF: Obj65_Index
00012A8C 6000 CBB6                  		bra.w	MarkObjGone
00012A90                            ; ===========================================================================
00012A90                            
00012A90                            Obj65_FixHeight:			; XREF: Obj65_Index
00012A90 3038 F646                  		move.w	($FFFFF646).w,d0
00012A94 0440 0010                  		subi.w	#$10,d0
00012A98 3140 000C                  		move.w	d0,$C(a0)	; match	object position	to water height
00012A9C 60E2                       		bra.s	Obj65_Animate
00012A9E                            ; ===========================================================================
00012A9E                            
00012A9E                            loc_12B36:				; XREF: Obj65_Index
00012A9E 08A8 0007 0002             		bclr	#7,2(a0)
00012AA4 0C38 0007 A506             		cmpi.b	#7,($FFFFA506).w
00012AAA 6600                       		bne.s	Obj65_Animate2
00012AAC 08E8 0007 0002             		bset	#7,2(a0)
00012AB2                            
00012AB2                            Obj65_Animate2:
00012AB2 60CC                       		bra.s	Obj65_Animate
00012AB4                            ; ===========================================================================
00012AB4                            Ani_obj65:
00012AB4                            	include "_anim\obj65.asm"
00012AB4                            ; ---------------------------------------------------------------------------
00012AB4                            ; Animation script - waterfall (LZ)
00012AB4                            ; ---------------------------------------------------------------------------
00012AB4 0000                       		dc.w byte_12B4E-Ani_obj65
00012AB6 0509 0A0B FF               byte_12B4E:	dc.b 5,	9, $A, $B, $FF
00012ABC 00                         		even
00012ABC 00                         		even
00012ABC                            
00012ABC                            ; ---------------------------------------------------------------------------
00012ABC                            ; Sprite mappings - waterfalls (LZ)
00012ABC                            ; ---------------------------------------------------------------------------
00012ABC                            Map_obj65:
00012ABC                            	include "_maps\obj65.asm"
00012ABC                            ; ---------------------------------------------------------------------------
00012ABC                            ; Sprite mappings - waterfalls (LZ)
00012ABC                            ; ---------------------------------------------------------------------------
00012ABC 0000 0000                  		dc.w byte_12B6C-Map_obj65, byte_12B72-Map_obj65
00012AC0 0000 0000                  		dc.w byte_12B7D-Map_obj65, byte_12B88-Map_obj65
00012AC4 0000 0000                  		dc.w byte_12B8E-Map_obj65, byte_12B99-Map_obj65
00012AC8 0000 0000                  		dc.w byte_12B9F-Map_obj65, byte_12BA5-Map_obj65
00012ACC 0000 0000                  		dc.w byte_12BAB-Map_obj65, byte_12BB6-Map_obj65
00012AD0 0000 0000                  		dc.w byte_12BC1-Map_obj65, byte_12BCC-Map_obj65
00012AD4 01                         byte_12B6C:	dc.b 1
00012AD5 F007 0000 F8               		dc.b $F0, 7, 0,	0, $F8
00012ADA 02                         byte_12B72:	dc.b 2
00012ADB F804 0008 FC               		dc.b $F8, 4, 0,	8, $FC
00012AE0 0008 000A F4               		dc.b 0,	8, 0, $A, $F4
00012AE5 02                         byte_12B7D:	dc.b 2
00012AE6 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012AEB 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012AF0 01                         byte_12B88:	dc.b 1
00012AF1 F801 000F 00               		dc.b $F8, 1, 0,	$F, 0
00012AF6 02                         byte_12B8E:	dc.b 2
00012AF7 F800 0008 00               		dc.b $F8, 0, 0,	8, 0
00012AFC 0004 000D F8               		dc.b 0,	4, 0, $D, $F8
00012B01 01                         byte_12B99:	dc.b 1
00012B02 F801 0011 00               		dc.b $F8, 1, 0,	$11, 0
00012B07 01                         byte_12B9F:	dc.b 1
00012B08 F801 0013 00               		dc.b $F8, 1, 0,	$13, 0
00012B0D 01                         byte_12BA5:	dc.b 1
00012B0E F007 0015 F8               		dc.b $F0, 7, 0,	$15, $F8
00012B13 02                         byte_12BAB:	dc.b 2
00012B14 F80C 001D F6               		dc.b $F8, $C, 0, $1D, $F6
00012B19 000C 0021 E8               		dc.b 0,	$C, 0, $21, $E8
00012B1E 02                         byte_12BB6:	dc.b 2
00012B1F F00B 0025 E8               		dc.b $F0, $B, 0, $25, $E8
00012B24 F00B 0031 00               		dc.b $F0, $B, 0, $31, 0
00012B29 02                         byte_12BC1:	dc.b 2
00012B2A F00B 003D E8               		dc.b $F0, $B, 0, $3D, $E8
00012B2F F00B 0049 00               		dc.b $F0, $B, 0, $49, 0
00012B34 02                         byte_12BCC:	dc.b 2
00012B35 F00B 0055 E8               		dc.b $F0, $B, 0, $55, $E8
00012B3A F00B 0061 00               		dc.b $F0, $B, 0, $61, 0
00012B40 00                         		even
00012B40 00                         		even
00012B40                            
00012B40                            ; ===========================================================================
00012B40                            ; ---------------------------------------------------------------------------
00012B40                            ; Object 01 - Sonic
00012B40                            ; ---------------------------------------------------------------------------
00012B40                            
00012B40                            Obj01:					; XREF: Obj_Index
00012B40 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00012B44 6700                       		beq.s	Obj01_Normal	; if not, branch
00012B46 4EF9 0000 0000             		jmp	DebugMode
00012B4C                            ; ===========================================================================
00012B4C                            
00012B4C                            Obj01_Normal:
00012B4C 7000                       		moveq	#0,d0
00012B4E 1028 0024                  		move.b	$24(a0),d0
00012B52 323B 0000                  		move.w	Obj01_Index(pc,d0.w),d1
00012B56 4EFB 1000                  		jmp	Obj01_Index(pc,d1.w)
00012B5A                            ; ===========================================================================
00012B5A 0000                       Obj01_Index:	dc.w Obj01_Main-Obj01_Index
00012B5C 0000                       		dc.w Obj01_Control-Obj01_Index
00012B5E 0000                       		dc.w Obj01_Hurt-Obj01_Index
00012B60 0000                       		dc.w Obj01_Death-Obj01_Index
00012B62 0000                       		dc.w Obj01_ResetLevel-Obj01_Index
00012B64                            ; ===========================================================================
00012B64                            
00012B64                            Obj01_Main:				; XREF: Obj01_Index
00012B64 5428 0024                  		addq.b	#2,$24(a0)
00012B68 117C 0013 0016             		move.b	#$13,$16(a0)
00012B6E 117C 0009 0017             		move.b	#9,$17(a0)
00012B74 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
00012B7C 317C 0780 0002             		move.w	#$780,2(a0)
00012B82 117C 0002 0018             		move.b	#2,$18(a0)
00012B88 117C 0018 0019             		move.b	#$18,$19(a0)
00012B8E 117C 0004 0001             		move.b	#4,1(a0)
00012B94 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; Sonic's top speed
00012B9A 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; Sonic's acceleration
00012BA0 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; Sonic's deceleration
00012BA6                            
00012BA6                            Obj01_Control:				; XREF: Obj01_Index
00012BA6 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug cheat enabled?
00012BAA 6700                       		beq.s	loc_12C58	; if not, branch
00012BAC 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button C pressed?
00012BB2 6700                       		beq.s	loc_12C58	; if not, branch
00012BB4 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring/item
00012BBA 4238 F7CC                  		clr.b	($FFFFF7CC).w
00012BBE 4E75                       		rts	
00012BC0                            ; ===========================================================================
00012BC0                            
00012BC0                            loc_12C58:
00012BC0 4A38 F7CC                  		tst.b	($FFFFF7CC).w	; are controls locked?
00012BC4 6600                       		bne.s	loc_12C64	; if yes, branch
00012BC6 31F8 F604 F602             		move.w	($FFFFF604).w,($FFFFF602).w ; enable joypad control
00012BCC                            
00012BCC                            loc_12C64:
00012BCC 0838 0000 F7C8             		btst	#0,($FFFFF7C8).w ; are controls	locked?
00012BD2 6600                       		bne.s	loc_12C7E	; if yes, branch
00012BD4 7000                       		moveq	#0,d0
00012BD6 1028 0022                  		move.b	$22(a0),d0
00012BDA 0240 0006                  		andi.w	#6,d0
00012BDE 323B 0000                  		move.w	Obj01_Modes(pc,d0.w),d1
00012BE2 4EBB 1000                  		jsr	Obj01_Modes(pc,d1.w)
00012BE6                            
00012BE6                            loc_12C7E:
00012BE6 6100                       		bsr.s	Sonic_Display
00012BE8 6100 0000                  		bsr.w	Sonic_RecordPos
00012BEC 6100 0000                  		bsr.w	Sonic_Water
00012BF0 1178 F768 0036             		move.b	($FFFFF768).w,$36(a0)
00012BF6 1178 F76A 0037             		move.b	($FFFFF76A).w,$37(a0)
00012BFC 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00012C00 6700                       		beq.s	loc_12CA6
00012C02 4A28 001C                  		tst.b	$1C(a0)
00012C06 6600                       		bne.s	loc_12CA6
00012C08 1168 001D 001C             		move.b	$1D(a0),$1C(a0)
00012C0E                            
00012C0E                            loc_12CA6:
00012C0E 6100 0000                  		bsr.w	Sonic_Animate
00012C12 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00012C16 6B00                       		bmi.s	loc_12CB6
00012C18 4EB9 0000 0000             		jsr	TouchResponse
00012C1E                            
00012C1E                            loc_12CB6:
00012C1E 6100 0000                  		bsr.w	Sonic_Loops
00012C22 6100 0000                  		bsr.w	LoadSonicDynPLC
00012C26 4E75                       		rts	
00012C28                            ; ===========================================================================
00012C28 0000                       Obj01_Modes:	dc.w Obj01_MdNormal-Obj01_Modes
00012C2A 0000                       		dc.w Obj01_MdJump-Obj01_Modes
00012C2C 0000                       		dc.w Obj01_MdRoll-Obj01_Modes
00012C2E 0000                       		dc.w Obj01_MdJump2-Obj01_Modes
00012C30                            ; ---------------------------------------------------------------------------
00012C30                            ; Music	to play	after invincibility wears off
00012C30                            ; ---------------------------------------------------------------------------
00012C30                            MusicList2:	incbin	misc\muslist2.bin
00012C36                            		even
00012C36                            ; ===========================================================================
00012C36                            
00012C36                            Sonic_Display:				; XREF: loc_12C7E
00012C36 3028 0030                  		move.w	$30(a0),d0
00012C3A 6700                       		beq.s	Obj01_Display
00012C3C 5368 0030                  		subq.w	#1,$30(a0)
00012C40 E648                       		lsr.w	#3,d0
00012C42 6400                       		bcc.s	Obj01_ChkInvin
00012C44                            
00012C44                            Obj01_Display:
00012C44 4EBA A966                  		jsr	DisplaySprite
00012C48                            
00012C48                            Obj01_ChkInvin:
00012C48 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
00012C4C 6700                       		beq.s	Obj01_ChkShoes	; if not, branch
00012C4E 4A68 0032                  		tst.w	$32(a0)		; check	time remaining for invinciblity
00012C52 6700                       		beq.s	Obj01_ChkShoes	; if no	time remains, branch
00012C54 5368 0032                  		subq.w	#1,$32(a0)	; subtract 1 from time
00012C58 6600                       		bne.s	Obj01_ChkShoes
00012C5A 4A38 F7AA                  		tst.b	($FFFFF7AA).w
00012C5E 6600                       		bne.s	Obj01_RmvInvin
00012C60 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00012C66 6500                       		bcs.s	Obj01_RmvInvin
00012C68 7000                       		moveq	#0,d0
00012C6A 1038 FE10                  		move.b	($FFFFFE10).w,d0
00012C6E 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	SBZ3
00012C74 6600                       		bne.s	Obj01_PlayMusic
00012C76 7005                       		moveq	#5,d0		; play SBZ music
00012C78                            
00012C78                            Obj01_PlayMusic:
00012C78 43F9 0001 2C30             		lea	(MusicList2).l,a1
00012C7E 1031 0000                  		move.b	(a1,d0.w),d0
00012C82 4EB9 0000 1396             		jsr	(PlaySound).l	; play normal music
00012C88                            
00012C88                            Obj01_RmvInvin:
00012C88 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; cancel invincibility
00012C8E                            
00012C8E                            Obj01_ChkShoes:
00012C8E 4A38 FE2E                  		tst.b	($FFFFFE2E).w	; does Sonic have speed	shoes?
00012C92 6700                       		beq.s	Obj01_ExitChk	; if not, branch
00012C94 4A68 0034                  		tst.w	$34(a0)		; check	time remaining
00012C98 6700                       		beq.s	Obj01_ExitChk
00012C9A 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from time
00012C9E 6600                       		bne.s	Obj01_ExitChk
00012CA0 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012CA6 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012CAC 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012CB2 11FC 0000 FE2E             		move.b	#0,($FFFFFE2E).w ; cancel speed	shoes
00012CB8 303C 00E3                  		move.w	#$E3,d0
00012CBC 4EF9 0000 1396             		jmp	(PlaySound).l	; run music at normal speed
00012CC2                            ; ===========================================================================
00012CC2                            
00012CC2                            Obj01_ExitChk:
00012CC2 4E75                       		rts	
00012CC4                            
00012CC4                            ; ---------------------------------------------------------------------------
00012CC4                            ; Subroutine to	record Sonic's previous positions for invincibility stars
00012CC4                            ; ---------------------------------------------------------------------------
00012CC4                            
00012CC4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CC4                            
00012CC4                            
00012CC4                            Sonic_RecordPos:			; XREF: loc_12C7E; Obj01_Hurt; Obj01_Death
00012CC4 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00012CC8 43F8 CB00                  		lea	($FFFFCB00).w,a1
00012CCC 43F1 0000                  		lea	(a1,d0.w),a1
00012CD0 32E8 0008                  		move.w	8(a0),(a1)+
00012CD4 32E8 000C                  		move.w	$C(a0),(a1)+
00012CD8 5838 F7A9                  		addq.b	#4,($FFFFF7A9).w
00012CDC 4E75                       		rts	
00012CDE                            ; End of function Sonic_RecordPos
00012CDE                            
00012CDE                            ; ---------------------------------------------------------------------------
00012CDE                            ; Subroutine for Sonic when he's underwater
00012CDE                            ; ---------------------------------------------------------------------------
00012CDE                            
00012CDE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012CDE                            
00012CDE                            
00012CDE                            Sonic_Water:				; XREF: loc_12C7E
00012CDE 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; is level LZ?
00012CE4 6700                       		beq.s	Obj01_InWater	; if yes, branch
00012CE6                            
00012CE6                            locret_12D80:
00012CE6 4E75                       		rts	
00012CE8                            ; ===========================================================================
00012CE8                            
00012CE8                            Obj01_InWater:
00012CE8 3038 F646                  		move.w	($FFFFF646).w,d0
00012CEC B068 000C                  		cmp.w	$C(a0),d0	; is Sonic above the water?
00012CF0 6C00                       		bge.s	Obj01_OutWater	; if yes, branch
00012CF2 08E8 0006 0022             		bset	#6,$22(a0)
00012CF8 66EC                       		bne.s	locret_12D80
00012CFA 6100 0000                  		bsr.w	ResumeMusic
00012CFE 11FC 000A D340             		move.b	#$A,($FFFFD340).w ; load bubbles object	from Sonic's mouth
00012D04 11FC 0081 D368             		move.b	#$81,($FFFFD368).w
00012D0A 31FC 0300 F760             		move.w	#$300,($FFFFF760).w ; change Sonic's top speed
00012D10 31FC 0006 F762             		move.w	#6,($FFFFF762).w ; change Sonic's acceleration
00012D16 31FC 0040 F764             		move.w	#$40,($FFFFF764).w ; change Sonic's deceleration
00012D1C E0E8 0010                  		asr	$10(a0)
00012D20 E0E8 0012                  		asr	$12(a0)
00012D24 E0E8 0012                  		asr	$12(a0)
00012D28 67BC                       		beq.s	locret_12D80
00012D2A 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012D30 303C 00AA                  		move.w	#$AA,d0
00012D34 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012D3A                            ; ===========================================================================
00012D3A                            
00012D3A                            Obj01_OutWater:
00012D3A 08A8 0006 0022             		bclr	#6,$22(a0)
00012D40 67A4                       		beq.s	locret_12D80
00012D42 6100 0000                  		bsr.w	ResumeMusic
00012D46 31FC 0600 F760             		move.w	#$600,($FFFFF760).w ; restore Sonic's speed
00012D4C 31FC 000C F762             		move.w	#$C,($FFFFF762).w ; restore Sonic's acceleration
00012D52 31FC 0080 F764             		move.w	#$80,($FFFFF764).w ; restore Sonic's deceleration
00012D58 E1E8 0012                  		asl	$12(a0)
00012D5C 6700 FF88                  		beq.w	locret_12D80
00012D60 11FC 0008 D300             		move.b	#8,($FFFFD300).w ; load	splash object
00012D66 0C68 F000 0012             		cmpi.w	#-$1000,$12(a0)
00012D6C 6E00                       		bgt.s	loc_12E0E
00012D6E 317C F000 0012             		move.w	#-$1000,$12(a0)	; set maximum speed on leaving water
00012D74                            
00012D74                            loc_12E0E:
00012D74 303C 00AA                  		move.w	#$AA,d0
00012D78 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play splash sound
00012D7E                            ; End of function Sonic_Water
00012D7E                            
00012D7E                            ; ===========================================================================
00012D7E                            ; ---------------------------------------------------------------------------
00012D7E                            ; Modes	for controlling	Sonic
00012D7E                            ; ---------------------------------------------------------------------------
00012D7E                            
00012D7E                            Obj01_MdNormal:				; XREF: Obj01_Modes
00012D7E 6100 0000                  		bsr.w	Sonic_Jump
00012D82 6100 0000                  		bsr.w	Sonic_SlopeResist
00012D86 6100 0000                  		bsr.w	Sonic_Move
00012D8A 6100 0000                  		bsr.w	Sonic_Roll
00012D8E 6100 0000                  		bsr.w	Sonic_LevelBound
00012D92 4EBA A7F2                  		jsr	SpeedToPos
00012D96 6100 0000                  		bsr.w	Sonic_AnglePos
00012D9A 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012D9E 4E75                       		rts	
00012DA0                            ; ===========================================================================
00012DA0                            
00012DA0                            Obj01_MdJump:				; XREF: Obj01_Modes
00012DA0 6100 0000                  		bsr.w	Sonic_JumpHeight
00012DA4 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012DA8 6100 0000                  		bsr.w	Sonic_LevelBound
00012DAC 4EBA A7AC                  		jsr	ObjectFall
00012DB0 0828 0006 0022             		btst	#6,$22(a0)
00012DB6 6700                       		beq.s	loc_12E5C
00012DB8 0468 0028 0012             		subi.w	#$28,$12(a0)
00012DBE                            
00012DBE                            loc_12E5C:
00012DBE 6100 0000                  		bsr.w	Sonic_JumpAngle
00012DC2 6100 0000                  		bsr.w	Sonic_Floor
00012DC6 4E75                       		rts	
00012DC8                            ; ===========================================================================
00012DC8                            
00012DC8                            Obj01_MdRoll:				; XREF: Obj01_Modes
00012DC8 6100 0000                  		bsr.w	Sonic_Jump
00012DCC 6100 0000                  		bsr.w	Sonic_RollRepel
00012DD0 6100 0000                  		bsr.w	Sonic_RollSpeed
00012DD4 6100 0000                  		bsr.w	Sonic_LevelBound
00012DD8 4EBA A7AC                  		jsr	SpeedToPos
00012DDC 6100 0000                  		bsr.w	Sonic_AnglePos
00012DE0 6100 0000                  		bsr.w	Sonic_SlopeRepel
00012DE4 4E75                       		rts	
00012DE6                            ; ===========================================================================
00012DE6                            
00012DE6                            Obj01_MdJump2:				; XREF: Obj01_Modes
00012DE6 6100 0000                  		bsr.w	Sonic_JumpHeight
00012DEA 6100 0000                  		bsr.w	Sonic_ChgJumpDir
00012DEE 6100 0000                  		bsr.w	Sonic_LevelBound
00012DF2 4EBA A766                  		jsr	ObjectFall
00012DF6 0828 0006 0022             		btst	#6,$22(a0)
00012DFC 6700                       		beq.s	loc_12EA6
00012DFE 0468 0028 0012             		subi.w	#$28,$12(a0)
00012E04                            
00012E04                            loc_12EA6:
00012E04 6100 0000                  		bsr.w	Sonic_JumpAngle
00012E08 6100 0000                  		bsr.w	Sonic_Floor
00012E0C 4E75                       		rts	
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            ; Subroutine to	make Sonic walk/run
00012E0E                            ; ---------------------------------------------------------------------------
00012E0E                            
00012E0E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012E0E                            
00012E0E                            
00012E0E                            Sonic_Move:				; XREF: Obj01_MdNormal
00012E0E 3C38 F760                  		move.w	($FFFFF760).w,d6
00012E12 3A38 F762                  		move.w	($FFFFF762).w,d5
00012E16 3838 F764                  		move.w	($FFFFF764).w,d4
00012E1A 4A38 F7CA                  		tst.b	($FFFFF7CA).w
00012E1E 6600 0000                  		bne.w	loc_12FEE
00012E22 4A68 003E                  		tst.w	$3E(a0)
00012E26 6600 0000                  		bne.w	Obj01_ResetScr
00012E2A 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
00012E30 6700                       		beq.s	Obj01_NotLeft	; if not, branch
00012E32 6100 0000                  		bsr.w	Sonic_MoveLeft
00012E36                            
00012E36                            Obj01_NotLeft:
00012E36 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
00012E3C 6700                       		beq.s	Obj01_NotRight	; if not, branch
00012E3E 6100 0000                  		bsr.w	Sonic_MoveRight
00012E42                            
00012E42                            Obj01_NotRight:
00012E42 1028 0026                  		move.b	$26(a0),d0
00012E46 0600 0020                  		addi.b	#$20,d0
00012E4A 0200 00C0                  		andi.b	#$C0,d0		; is Sonic on a	slope?
00012E4E 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012E52 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
00012E56 6600 0000                  		bne.w	Obj01_ResetScr	; if yes, branch
00012E5A 08A8 0005 0022             		bclr	#5,$22(a0)
00012E60 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00012E66 0828 0003 0022             		btst	#3,$22(a0)
00012E6C 6700                       		beq.s	Sonic_Balance
00012E6E 7000                       		moveq	#0,d0
00012E70 1028 003D                  		move.b	$3D(a0),d0
00012E74 ED48                       		lsl.w	#6,d0
00012E76 43F8 D000                  		lea	($FFFFD000).w,a1
00012E7A 43F1 0000                  		lea	(a1,d0.w),a1
00012E7E 4A29 0022                  		tst.b	$22(a1)
00012E82 6B00                       		bmi.s	Sonic_LookUp
00012E84 7200                       		moveq	#0,d1
00012E86 1229 0019                  		move.b	$19(a1),d1
00012E8A 3401                       		move.w	d1,d2
00012E8C D442                       		add.w	d2,d2
00012E8E 5942                       		subq.w	#4,d2
00012E90 D268 0008                  		add.w	8(a0),d1
00012E94 9269 0008                  		sub.w	8(a1),d1
00012E98 0C41 0004                  		cmpi.w	#4,d1
00012E9C 6D00                       		blt.s	loc_12F6A
00012E9E B242                       		cmp.w	d2,d1
00012EA0 6C00                       		bge.s	loc_12F5A
00012EA2 6000                       		bra.s	Sonic_LookUp
00012EA4                            ; ===========================================================================
00012EA4                            
00012EA4                            Sonic_Balance:
00012EA4 4EB9 0000 0000             		jsr	ObjHitFloor
00012EAA 0C41 000C                  		cmpi.w	#$C,d1
00012EAE 6D00                       		blt.s	Sonic_LookUp
00012EB0 0C28 0003 0036             		cmpi.b	#3,$36(a0)
00012EB6 6600                       		bne.s	loc_12F62
00012EB8                            
00012EB8                            loc_12F5A:
00012EB8 08A8 0000 0022             		bclr	#0,$22(a0)
00012EBE 6000                       		bra.s	loc_12F70
00012EC0                            ; ===========================================================================
00012EC0                            
00012EC0                            loc_12F62:
00012EC0 0C28 0003 0037             		cmpi.b	#3,$37(a0)
00012EC6 6600                       		bne.s	Sonic_LookUp
00012EC8                            
00012EC8                            loc_12F6A:
00012EC8 08E8 0000 0022             		bset	#0,$22(a0)
00012ECE                            
00012ECE                            loc_12F70:
00012ECE 117C 0006 001C             		move.b	#6,$1C(a0)	; use "balancing" animation
00012ED4 6000                       		bra.s	Obj01_ResetScr
00012ED6                            ; ===========================================================================
00012ED6                            
00012ED6                            Sonic_LookUp:
00012ED6 0838 0000 F602             		btst	#0,($FFFFF602).w ; is up being pressed?
00012EDC 6700                       		beq.s	Sonic_Duck	; if not, branch
00012EDE 117C 0007 001C             		move.b	#7,$1C(a0)	; use "looking up" animation
00012EE4 0C78 00C8 F73E             		cmpi.w	#$C8,($FFFFF73E).w
00012EEA 6700                       		beq.s	loc_12FC2
00012EEC 5478 F73E                  		addq.w	#2,($FFFFF73E).w
00012EF0 6000                       		bra.s	loc_12FC2
00012EF2                            ; ===========================================================================
00012EF2                            
00012EF2                            Sonic_Duck:
00012EF2 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00012EF8 6700                       		beq.s	Obj01_ResetScr	; if not, branch
00012EFA 117C 0008 001C             		move.b	#8,$1C(a0)	; use "ducking"	animation
00012F00 0C78 0008 F73E             		cmpi.w	#8,($FFFFF73E).w
00012F06 6700                       		beq.s	loc_12FC2
00012F08 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00012F0C 6000                       		bra.s	loc_12FC2
00012F0E                            ; ===========================================================================
00012F0E                            
00012F0E                            Obj01_ResetScr:
00012F0E 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	screen in its default position?
00012F14 6700                       		beq.s	loc_12FC2	; if yes, branch
00012F16 6400                       		bcc.s	loc_12FBE
00012F18 5878 F73E                  		addq.w	#4,($FFFFF73E).w ; move	screen back to default
00012F1C                            
00012F1C                            loc_12FBE:
00012F1C 5578 F73E                  		subq.w	#2,($FFFFF73E).w ; move	screen back to default
00012F20                            
00012F20                            loc_12FC2:
00012F20 1038 F602                  		move.b	($FFFFF602).w,d0
00012F24 0200 000C                  		andi.b	#$C,d0		; is left/right	pressed?
00012F28 6600                       		bne.s	loc_12FEE	; if yes, branch
00012F2A 3028 0014                  		move.w	$14(a0),d0
00012F2E 6700                       		beq.s	loc_12FEE
00012F30 6B00                       		bmi.s	loc_12FE2
00012F32 9045                       		sub.w	d5,d0
00012F34 6400                       		bcc.s	loc_12FDC
00012F36 303C 0000                  		move.w	#0,d0
00012F3A                            
00012F3A                            loc_12FDC:
00012F3A 3140 0014                  		move.w	d0,$14(a0)
00012F3E 6000                       		bra.s	loc_12FEE
00012F40                            ; ===========================================================================
00012F40                            
00012F40                            loc_12FE2:
00012F40 D045                       		add.w	d5,d0
00012F42 6400                       		bcc.s	loc_12FEA
00012F44 303C 0000                  		move.w	#0,d0
00012F48                            
00012F48                            loc_12FEA:
00012F48 3140 0014                  		move.w	d0,$14(a0)
00012F4C                            
00012F4C                            loc_12FEE:
00012F4C 1028 0026                  		move.b	$26(a0),d0
00012F50 4EB9 0000 29DA             		jsr	(CalcSine).l
00012F56 C3E8 0014                  		muls.w	$14(a0),d1
00012F5A E081                       		asr.l	#8,d1
00012F5C 3141 0010                  		move.w	d1,$10(a0)
00012F60 C1E8 0014                  		muls.w	$14(a0),d0
00012F64 E080                       		asr.l	#8,d0
00012F66 3140 0012                  		move.w	d0,$12(a0)
00012F6A                            
00012F6A                            loc_1300C:
00012F6A 1028 0026                  		move.b	$26(a0),d0
00012F6E 0600 0040                  		addi.b	#$40,d0
00012F72 6B00                       		bmi.s	locret_1307C
00012F74 123C 0040                  		move.b	#$40,d1
00012F78 4A68 0014                  		tst.w	$14(a0)
00012F7C 6700                       		beq.s	locret_1307C
00012F7E 6B00                       		bmi.s	loc_13024
00012F80 4441                       		neg.w	d1
00012F82                            
00012F82                            loc_13024:
00012F82 1028 0026                  		move.b	$26(a0),d0
00012F86 D001                       		add.b	d1,d0
00012F88 3F00                       		move.w	d0,-(sp)
00012F8A 6100 0000                  		bsr.w	Sonic_WalkSpeed
00012F8E 301F                       		move.w	(sp)+,d0
00012F90 4A41                       		tst.w	d1
00012F92 6A00                       		bpl.s	locret_1307C
00012F94 E141                       		asl.w	#8,d1
00012F96 0600 0020                  		addi.b	#$20,d0
00012F9A 0200 00C0                  		andi.b	#$C0,d0
00012F9E 6700                       		beq.s	loc_13078
00012FA0 0C00 0040                  		cmpi.b	#$40,d0
00012FA4 6700                       		beq.s	loc_13066
00012FA6 0C00 0080                  		cmpi.b	#$80,d0
00012FAA 6700                       		beq.s	loc_13060
00012FAC D368 0010                  		add.w	d1,$10(a0)
00012FB0 08E8 0005 0022             		bset	#5,$22(a0)
00012FB6 317C 0000 0014             		move.w	#0,$14(a0)
00012FBC 4E75                       		rts	
00012FBE                            ; ===========================================================================
00012FBE                            
00012FBE                            loc_13060:
00012FBE 9368 0012                  		sub.w	d1,$12(a0)
00012FC2 4E75                       		rts	
00012FC4                            ; ===========================================================================
00012FC4                            
00012FC4                            loc_13066:
00012FC4 9368 0010                  		sub.w	d1,$10(a0)
00012FC8 08E8 0005 0022             		bset	#5,$22(a0)
00012FCE 317C 0000 0014             		move.w	#0,$14(a0)
00012FD4 4E75                       		rts	
00012FD6                            ; ===========================================================================
00012FD6                            
00012FD6                            loc_13078:
00012FD6 D368 0012                  		add.w	d1,$12(a0)
00012FDA                            
00012FDA                            locret_1307C:
00012FDA 4E75                       		rts	
00012FDC                            ; End of function Sonic_Move
00012FDC                            
00012FDC                            
00012FDC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00012FDC                            
00012FDC                            
00012FDC                            Sonic_MoveLeft:				; XREF: Sonic_Move
00012FDC 3028 0014                  		move.w	$14(a0),d0
00012FE0 6700                       		beq.s	loc_13086
00012FE2 6A00                       		bpl.s	loc_130B2
00012FE4                            
00012FE4                            loc_13086:
00012FE4 08E8 0000 0022             		bset	#0,$22(a0)
00012FEA 6600                       		bne.s	loc_1309A
00012FEC 08A8 0005 0022             		bclr	#5,$22(a0)
00012FF2 117C 0001 001D             		move.b	#1,$1D(a0)
00012FF8                            
00012FF8                            loc_1309A:
00012FF8 9045                       		sub.w	d5,d0
00012FFA 3206                       		move.w	d6,d1
00012FFC 4441                       		neg.w	d1
00012FFE B041                       		cmp.w	d1,d0
00013000 6E00                       		bgt.s	loc_130A6
00013002 3001                       		move.w	d1,d0
00013004                            
00013004                            loc_130A6:
00013004 3140 0014                  		move.w	d0,$14(a0)
00013008 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
0001300E 4E75                       		rts	
00013010                            ; ===========================================================================
00013010                            
00013010                            loc_130B2:				; XREF: Sonic_MoveLeft
00013010 9044                       		sub.w	d4,d0
00013012 6400                       		bcc.s	loc_130BA
00013014 303C FF80                  		move.w	#-$80,d0
00013018                            
00013018                            loc_130BA:
00013018 3140 0014                  		move.w	d0,$14(a0)
0001301C 1028 0026                  		move.b	$26(a0),d0
00013020 0600 0020                  		addi.b	#$20,d0
00013024 0200 00C0                  		andi.b	#$C0,d0
00013028 6600                       		bne.s	locret_130E8
0001302A 0C40 0400                  		cmpi.w	#$400,d0
0001302E 6D00                       		blt.s	locret_130E8
00013030 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
00013036 08A8 0000 0022             		bclr	#0,$22(a0)
0001303C 303C 00A4                  		move.w	#$A4,d0
00013040 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
00013046                            
00013046                            locret_130E8:
00013046 4E75                       		rts	
00013048                            ; End of function Sonic_MoveLeft
00013048                            
00013048                            
00013048                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013048                            
00013048                            
00013048                            Sonic_MoveRight:			; XREF: Sonic_Move
00013048 3028 0014                  		move.w	$14(a0),d0
0001304C 6B00                       		bmi.s	loc_13118
0001304E 08A8 0000 0022             		bclr	#0,$22(a0)
00013054 6700                       		beq.s	loc_13104
00013056 08A8 0005 0022             		bclr	#5,$22(a0)
0001305C 117C 0001 001D             		move.b	#1,$1D(a0)
00013062                            
00013062                            loc_13104:
00013062 D045                       		add.w	d5,d0
00013064 B046                       		cmp.w	d6,d0
00013066 6D00                       		blt.s	loc_1310C
00013068 3006                       		move.w	d6,d0
0001306A                            
0001306A                            loc_1310C:
0001306A 3140 0014                  		move.w	d0,$14(a0)
0001306E 117C 0000 001C             		move.b	#0,$1C(a0)	; use walking animation
00013074 4E75                       		rts	
00013076                            ; ===========================================================================
00013076                            
00013076                            loc_13118:				; XREF: Sonic_MoveRight
00013076 D044                       		add.w	d4,d0
00013078 6400                       		bcc.s	loc_13120
0001307A 303C 0080                  		move.w	#$80,d0
0001307E                            
0001307E                            loc_13120:
0001307E 3140 0014                  		move.w	d0,$14(a0)
00013082 1028 0026                  		move.b	$26(a0),d0
00013086 0600 0020                  		addi.b	#$20,d0
0001308A 0200 00C0                  		andi.b	#$C0,d0
0001308E 6600                       		bne.s	locret_1314E
00013090 0C40 FC00                  		cmpi.w	#-$400,d0
00013094 6E00                       		bgt.s	locret_1314E
00013096 117C 000D 001C             		move.b	#$D,$1C(a0)	; use "stopping" animation
0001309C 08E8 0000 0022             		bset	#0,$22(a0)
000130A2 303C 00A4                  		move.w	#$A4,d0
000130A6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play stopping sound
000130AC                            
000130AC                            locret_1314E:
000130AC 4E75                       		rts	
000130AE                            ; End of function Sonic_MoveRight
000130AE                            
000130AE                            ; ---------------------------------------------------------------------------
000130AE                            ; Subroutine to	change Sonic's speed as he rolls
000130AE                            ; ---------------------------------------------------------------------------
000130AE                            
000130AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000130AE                            
000130AE                            
000130AE                            Sonic_RollSpeed:			; XREF: Obj01_MdRoll
000130AE 3C38 F760                  		move.w	($FFFFF760).w,d6
000130B2 E346                       		asl.w	#1,d6
000130B4 3A38 F762                  		move.w	($FFFFF762).w,d5
000130B8 E245                       		asr.w	#1,d5
000130BA 3838 F764                  		move.w	($FFFFF764).w,d4
000130BE E444                       		asr.w	#2,d4
000130C0 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000130C4 6600 0000                  		bne.w	loc_131CC
000130C8 4A68 003E                  		tst.w	$3E(a0)
000130CC 6600                       		bne.s	loc_13188
000130CE 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000130D4 6700                       		beq.s	loc_1317C	; if not, branch
000130D6 6100 0000                  		bsr.w	Sonic_RollLeft
000130DA                            
000130DA                            loc_1317C:
000130DA 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000130E0 6700                       		beq.s	loc_13188	; if not, branch
000130E2 6100 0000                  		bsr.w	Sonic_RollRight
000130E6                            
000130E6                            loc_13188:
000130E6 3028 0014                  		move.w	$14(a0),d0
000130EA 6700                       		beq.s	loc_131AA
000130EC 6B00                       		bmi.s	loc_1319E
000130EE 9045                       		sub.w	d5,d0
000130F0 6400                       		bcc.s	loc_13198
000130F2 303C 0000                  		move.w	#0,d0
000130F6                            
000130F6                            loc_13198:
000130F6 3140 0014                  		move.w	d0,$14(a0)
000130FA 6000                       		bra.s	loc_131AA
000130FC                            ; ===========================================================================
000130FC                            
000130FC                            loc_1319E:				; XREF: Sonic_RollSpeed
000130FC D045                       		add.w	d5,d0
000130FE 6400                       		bcc.s	loc_131A6
00013100 303C 0000                  		move.w	#0,d0
00013104                            
00013104                            loc_131A6:
00013104 3140 0014                  		move.w	d0,$14(a0)
00013108                            
00013108                            loc_131AA:
00013108 4A68 0014                  		tst.w	$14(a0)		; is Sonic moving?
0001310C 6600                       		bne.s	loc_131CC	; if yes, branch
0001310E 08A8 0002 0022             		bclr	#2,$22(a0)
00013114 117C 0013 0016             		move.b	#$13,$16(a0)
0001311A 117C 0009 0017             		move.b	#9,$17(a0)
00013120 117C 0005 001C             		move.b	#5,$1C(a0)	; use "standing" animation
00013126 5B68 000C                  		subq.w	#5,$C(a0)
0001312A                            
0001312A                            loc_131CC:
0001312A 1028 0026                  		move.b	$26(a0),d0
0001312E 4EB9 0000 29DA             		jsr	(CalcSine).l
00013134 C1E8 0014                  		muls.w	$14(a0),d0
00013138 E080                       		asr.l	#8,d0
0001313A 3140 0012                  		move.w	d0,$12(a0)
0001313E C3E8 0014                  		muls.w	$14(a0),d1
00013142 E081                       		asr.l	#8,d1
00013144 0C41 1000                  		cmpi.w	#$1000,d1
00013148 6F00                       		ble.s	loc_131F0
0001314A 323C 1000                  		move.w	#$1000,d1
0001314E                            
0001314E                            loc_131F0:
0001314E 0C41 F000                  		cmpi.w	#-$1000,d1
00013152 6C00                       		bge.s	loc_131FA
00013154 323C F000                  		move.w	#-$1000,d1
00013158                            
00013158                            loc_131FA:
00013158 3141 0010                  		move.w	d1,$10(a0)
0001315C 6000 FE0C                  		bra.w	loc_1300C
00013160                            ; End of function Sonic_RollSpeed
00013160                            
00013160                            
00013160                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013160                            
00013160                            
00013160                            Sonic_RollLeft:				; XREF: Sonic_RollSpeed
00013160 3028 0014                  		move.w	$14(a0),d0
00013164 6700                       		beq.s	loc_1320A
00013166 6A00                       		bpl.s	loc_13218
00013168                            
00013168                            loc_1320A:
00013168 08E8 0000 0022             		bset	#0,$22(a0)
0001316E 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013174 4E75                       		rts	
00013176                            ; ===========================================================================
00013176                            
00013176                            loc_13218:
00013176 9044                       		sub.w	d4,d0
00013178 6400                       		bcc.s	loc_13220
0001317A 303C FF80                  		move.w	#-$80,d0
0001317E                            
0001317E                            loc_13220:
0001317E 3140 0014                  		move.w	d0,$14(a0)
00013182 4E75                       		rts	
00013184                            ; End of function Sonic_RollLeft
00013184                            
00013184                            
00013184                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013184                            
00013184                            
00013184                            Sonic_RollRight:			; XREF: Sonic_RollSpeed
00013184 3028 0014                  		move.w	$14(a0),d0
00013188 6B00                       		bmi.s	loc_1323A
0001318A 08A8 0000 0022             		bclr	#0,$22(a0)
00013190 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
00013196 4E75                       		rts	
00013198                            ; ===========================================================================
00013198                            
00013198                            loc_1323A:
00013198 D044                       		add.w	d4,d0
0001319A 6400                       		bcc.s	loc_13242
0001319C 303C 0080                  		move.w	#$80,d0
000131A0                            
000131A0                            loc_13242:
000131A0 3140 0014                  		move.w	d0,$14(a0)
000131A4 4E75                       		rts	
000131A6                            ; End of function Sonic_RollRight
000131A6                            
000131A6                            ; ---------------------------------------------------------------------------
000131A6                            ; Subroutine to	change Sonic's direction while jumping
000131A6                            ; ---------------------------------------------------------------------------
000131A6                            
000131A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000131A6                            
000131A6                            
000131A6                            Sonic_ChgJumpDir:			; XREF: Obj01_MdJump; Obj01_MdJump2
000131A6 3C38 F760                  		move.w	($FFFFF760).w,d6
000131AA 3A38 F762                  		move.w	($FFFFF762).w,d5
000131AE E345                       		asl.w	#1,d5
000131B0 0828 0004 0022             		btst	#4,$22(a0)
000131B6 6600                       		bne.s	Obj01_ResetScr2
000131B8 3028 0010                  		move.w	$10(a0),d0
000131BC 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
000131C2 6700                       		beq.s	loc_13278	; if not, branch
000131C4 08E8 0000 0022             		bset	#0,$22(a0)
000131CA 9045                       		sub.w	d5,d0
000131CC 3206                       		move.w	d6,d1
000131CE 4441                       		neg.w	d1
000131D0 B041                       		cmp.w	d1,d0
000131D2 6E00                       		bgt.s	loc_13278
000131D4 3001                       		move.w	d1,d0
000131D6                            
000131D6                            loc_13278:
000131D6 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
000131DC 6700                       		beq.s	Obj01_JumpMove	; if not, branch
000131DE 08A8 0000 0022             		bclr	#0,$22(a0)
000131E4 D045                       		add.w	d5,d0
000131E6 B046                       		cmp.w	d6,d0
000131E8 6D00                       		blt.s	Obj01_JumpMove
000131EA 3006                       		move.w	d6,d0
000131EC                            
000131EC                            Obj01_JumpMove:
000131EC 3140 0010                  		move.w	d0,$10(a0)	; change Sonic's horizontal speed
000131F0                            
000131F0                            Obj01_ResetScr2:
000131F0 0C78 0060 F73E             		cmpi.w	#$60,($FFFFF73E).w ; is	the screen in its default position?
000131F6 6700                       		beq.s	loc_132A4	; if yes, branch
000131F8 6400                       		bcc.s	loc_132A0
000131FA 5878 F73E                  		addq.w	#4,($FFFFF73E).w
000131FE                            
000131FE                            loc_132A0:
000131FE 5578 F73E                  		subq.w	#2,($FFFFF73E).w
00013202                            
00013202                            loc_132A4:
00013202 0C68 FC00 0012             		cmpi.w	#-$400,$12(a0)	; is Sonic moving faster than -$400 upwards?
00013208 6500                       		bcs.s	locret_132D2	; if yes, branch
0001320A 3028 0010                  		move.w	$10(a0),d0
0001320E 3200                       		move.w	d0,d1
00013210 EA41                       		asr.w	#5,d1
00013212 6700                       		beq.s	locret_132D2
00013214 6B00                       		bmi.s	loc_132C6
00013216 9041                       		sub.w	d1,d0
00013218 6400                       		bcc.s	loc_132C0
0001321A 303C 0000                  		move.w	#0,d0
0001321E                            
0001321E                            loc_132C0:
0001321E 3140 0010                  		move.w	d0,$10(a0)
00013222 4E75                       		rts	
00013224                            ; ===========================================================================
00013224                            
00013224                            loc_132C6:
00013224 9041                       		sub.w	d1,d0
00013226 6500                       		bcs.s	loc_132CE
00013228 303C 0000                  		move.w	#0,d0
0001322C                            
0001322C                            loc_132CE:
0001322C 3140 0010                  		move.w	d0,$10(a0)
00013230                            
00013230                            locret_132D2:
00013230 4E75                       		rts	
00013232                            ; End of function Sonic_ChgJumpDir
00013232                            
00013232                            ; ===========================================================================
00013232                            ; ---------------------------------------------------------------------------
00013232                            ; Unused subroutine to squash Sonic
00013232                            ; ---------------------------------------------------------------------------
00013232 1028 0026                  		move.b	$26(a0),d0
00013236 0600 0020                  		addi.b	#$20,d0
0001323A 0200 00C0                  		andi.b	#$C0,d0
0001323E 6600                       		bne.s	locret_13302
00013240 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013244 4A41                       		tst.w	d1
00013246 6A00                       		bpl.s	locret_13302
00013248 317C 0000 0014             		move.w	#0,$14(a0)	; stop Sonic moving
0001324E 317C 0000 0010             		move.w	#0,$10(a0)
00013254 317C 0000 0012             		move.w	#0,$12(a0)
0001325A 117C 000B 001C             		move.b	#$B,$1C(a0)	; use "warping"	animation
00013260                            
00013260                            locret_13302:
00013260 4E75                       		rts	
00013262                            ; ---------------------------------------------------------------------------
00013262                            ; Subroutine to	prevent	Sonic leaving the boundaries of	a level
00013262                            ; ---------------------------------------------------------------------------
00013262                            
00013262                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013262                            
00013262                            
00013262                            Sonic_LevelBound:			; XREF: Obj01_MdNormal; et al
00013262 2228 0008                  		move.l	8(a0),d1
00013266 3028 0010                  		move.w	$10(a0),d0
0001326A 48C0                       		ext.l	d0
0001326C E180                       		asl.l	#8,d0
0001326E D280                       		add.l	d0,d1
00013270 4841                       		swap	d1
00013272 3038 F728                  		move.w	($FFFFF728).w,d0
00013276 0640 0010                  		addi.w	#$10,d0
0001327A B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
0001327C 6200                       		bhi.s	Boundary_Sides	; if yes, branch
0001327E 3038 F72A                  		move.w	($FFFFF72A).w,d0
00013282 0640 0128                  		addi.w	#$128,d0
00013286 4A38 F7AA                  		tst.b	($FFFFF7AA).w
0001328A 6600                       		bne.s	loc_13332
0001328C 0640 0040                  		addi.w	#$40,d0
00013290                            
00013290                            loc_13332:
00013290 B041                       		cmp.w	d1,d0		; has Sonic touched the	side boundary?
00013292 6300                       		bls.s	Boundary_Sides	; if yes, branch
00013294                            
00013294                            loc_13336:
00013294 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013298 0640 00E0                  		addi.w	#$E0,d0
0001329C B068 000C                  		cmp.w	$C(a0),d0	; has Sonic touched the	bottom boundary?
000132A0 6D00                       		blt.s	Boundary_Bottom	; if yes, branch
000132A2 4E75                       		rts	
000132A4                            ; ===========================================================================
000132A4                            
000132A4                            Boundary_Bottom:
000132A4 0C78 0501 FE10             		cmpi.w	#$501,($FFFFFE10).w ; is level SBZ2 ?
000132AA 6600 0000                  		bne.w	KillSonic	; if not, kill Sonic
000132AE 0C78 2000 D008             		cmpi.w	#$2000,($FFFFD008).w
000132B4 6500 0000                  		bcs.w	KillSonic
000132B8 4238 FE30                  		clr.b	($FFFFFE30).w	; clear	lamppost counter
000132BC 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
000132C2 31FC 0103 FE10             		move.w	#$103,($FFFFFE10).w ; set level	to SBZ3	(LZ4)
000132C8 4E75                       		rts	
000132CA                            ; ===========================================================================
000132CA                            
000132CA                            Boundary_Sides:
000132CA 3140 0008                  		move.w	d0,8(a0)
000132CE 317C 0000 000A             		move.w	#0,$A(a0)
000132D4 317C 0000 0010             		move.w	#0,$10(a0)	; stop Sonic moving
000132DA 317C 0000 0014             		move.w	#0,$14(a0)
000132E0 60B2                       		bra.s	loc_13336
000132E2                            ; End of function Sonic_LevelBound
000132E2                            
000132E2                            ; ---------------------------------------------------------------------------
000132E2                            ; Subroutine allowing Sonic to roll when he's moving
000132E2                            ; ---------------------------------------------------------------------------
000132E2                            
000132E2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000132E2                            
000132E2                            
000132E2                            Sonic_Roll:				; XREF: Obj01_MdNormal
000132E2 4A38 F7CA                  		tst.b	($FFFFF7CA).w
000132E6 6600                       		bne.s	Obj01_NoRoll
000132E8 3028 0014                  		move.w	$14(a0),d0
000132EC 6A00                       		bpl.s	loc_13392
000132EE 4440                       		neg.w	d0
000132F0                            
000132F0                            loc_13392:
000132F0 0C40 0080                  		cmpi.w	#$80,d0		; is Sonic moving at $80 speed or faster?
000132F4 6500                       		bcs.s	Obj01_NoRoll	; if not, branch
000132F6 1038 F602                  		move.b	($FFFFF602).w,d0
000132FA 0200 000C                  		andi.b	#$C,d0		; is left/right	being pressed?
000132FE 6600                       		bne.s	Obj01_NoRoll	; if yes, branch
00013300 0838 0001 F602             		btst	#1,($FFFFF602).w ; is down being pressed?
00013306 6600                       		bne.s	Obj01_ChkRoll	; if yes, branch
00013308                            
00013308                            Obj01_NoRoll:
00013308 4E75                       		rts	
0001330A                            ; ===========================================================================
0001330A                            
0001330A                            Obj01_ChkRoll:
0001330A 0828 0002 0022             		btst	#2,$22(a0)	; is Sonic already rolling?
00013310 6700                       		beq.s	Obj01_DoRoll	; if not, branch
00013312 4E75                       		rts	
00013314                            ; ===========================================================================
00013314                            
00013314                            Obj01_DoRoll:
00013314 08E8 0002 0022             		bset	#2,$22(a0)
0001331A 117C 000E 0016             		move.b	#$E,$16(a0)
00013320 117C 0007 0017             		move.b	#7,$17(a0)
00013326 117C 0002 001C             		move.b	#2,$1C(a0)	; use "rolling"	animation
0001332C 5A68 000C                  		addq.w	#5,$C(a0)
00013330 303C 00BE                  		move.w	#$BE,d0
00013334 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rolling sound
0001333A 4A68 0014                  		tst.w	$14(a0)
0001333E 6600                       		bne.s	locret_133E8
00013340 317C 0200 0014             		move.w	#$200,$14(a0)
00013346                            
00013346                            locret_133E8:
00013346 4E75                       		rts	
00013348                            ; End of function Sonic_Roll
00013348                            
00013348                            ; ---------------------------------------------------------------------------
00013348                            ; Subroutine allowing Sonic to jump
00013348                            ; ---------------------------------------------------------------------------
00013348                            
00013348                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013348                            
00013348                            
00013348                            Sonic_Jump:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00013348 1038 F603                  		move.b	($FFFFF603).w,d0
0001334C 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
00013350 6700 0000                  		beq.w	locret_1348E	; if not, branch
00013354 7000                       		moveq	#0,d0
00013356 1028 0026                  		move.b	$26(a0),d0
0001335A 0600 0080                  		addi.b	#$80,d0
0001335E 6100 0000                  		bsr.w	sub_14D48
00013362 0C41 0006                  		cmpi.w	#6,d1
00013366 6D00 0000                  		blt.w	locret_1348E
0001336A 343C 0680                  		move.w	#$680,d2
0001336E 0828 0006 0022             		btst	#6,$22(a0)
00013374 6700                       		beq.s	loc_1341C
00013376 343C 0380                  		move.w	#$380,d2
0001337A                            
0001337A                            loc_1341C:
0001337A 7000                       		moveq	#0,d0
0001337C 1028 0026                  		move.b	$26(a0),d0
00013380 0400 0040                  		subi.b	#$40,d0
00013384 4EB9 0000 29DA             		jsr	(CalcSine).l
0001338A C3C2                       		muls.w	d2,d1
0001338C E081                       		asr.l	#8,d1
0001338E D368 0010                  		add.w	d1,$10(a0)	; make Sonic jump
00013392 C1C2                       		muls.w	d2,d0
00013394 E080                       		asr.l	#8,d0
00013396 D168 0012                  		add.w	d0,$12(a0)	; make Sonic jump
0001339A 08E8 0001 0022             		bset	#1,$22(a0)
000133A0 08A8 0005 0022             		bclr	#5,$22(a0)
000133A6 588F                       		addq.l	#4,sp
000133A8 117C 0001 003C             		move.b	#1,$3C(a0)
000133AE 4228 0038                  		clr.b	$38(a0)
000133B2 303C 00A0                  		move.w	#$A0,d0
000133B6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
000133BC 117C 0013 0016             		move.b	#$13,$16(a0)
000133C2 117C 0009 0017             		move.b	#9,$17(a0)
000133C8 0828 0002 0022             		btst	#2,$22(a0)
000133CE 6600                       		bne.s	loc_13490
000133D0 117C 000E 0016             		move.b	#$E,$16(a0)
000133D6 117C 0007 0017             		move.b	#7,$17(a0)
000133DC 117C 0002 001C             		move.b	#2,$1C(a0)	; use "jumping"	animation
000133E2 08E8 0002 0022             		bset	#2,$22(a0)
000133E8 5A68 000C                  		addq.w	#5,$C(a0)
000133EC                            
000133EC                            locret_1348E:
000133EC 4E75                       		rts	
000133EE                            ; ===========================================================================
000133EE                            
000133EE                            loc_13490:
000133EE 08E8 0004 0022             		bset	#4,$22(a0)
000133F4 4E75                       		rts	
000133F6                            ; End of function Sonic_Jump
000133F6                            
000133F6                            
000133F6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000133F6                            
000133F6                            
000133F6                            Sonic_JumpHeight:			; XREF: Obj01_MdJump; Obj01_MdJump2
000133F6 4A28 003C                  		tst.b	$3C(a0)
000133FA 6700                       		beq.s	loc_134C4
000133FC 323C FC00                  		move.w	#-$400,d1
00013400 0828 0006 0022             		btst	#6,$22(a0)
00013406 6700                       		beq.s	loc_134AE
00013408 323C FE00                  		move.w	#-$200,d1
0001340C                            
0001340C                            loc_134AE:
0001340C B268 0012                  		cmp.w	$12(a0),d1
00013410 6F00                       		ble.s	locret_134C2
00013412 1038 F602                  		move.b	($FFFFF602).w,d0
00013416 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001341A 6600                       		bne.s	locret_134C2	; if yes, branch
0001341C 3141 0012                  		move.w	d1,$12(a0)
00013420                            
00013420                            locret_134C2:
00013420 4E75                       		rts	
00013422                            ; ===========================================================================
00013422                            
00013422                            loc_134C4:
00013422 0C68 F040 0012             		cmpi.w	#-$FC0,$12(a0)
00013428 6C00                       		bge.s	locret_134D2
0001342A 317C F040 0012             		move.w	#-$FC0,$12(a0)
00013430                            
00013430                            locret_134D2:
00013430 4E75                       		rts	
00013432                            ; End of function Sonic_JumpHeight
00013432                            
00013432                            ; ---------------------------------------------------------------------------
00013432                            ; Subroutine to	slow Sonic walking up a	slope
00013432                            ; ---------------------------------------------------------------------------
00013432                            
00013432                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013432                            
00013432                            
00013432                            Sonic_SlopeResist:			; XREF: Obj01_MdNormal
00013432 1028 0026                  		move.b	$26(a0),d0
00013436 0600 0060                  		addi.b	#$60,d0
0001343A 0C00 00C0                  		cmpi.b	#$C0,d0
0001343E 6400                       		bcc.s	locret_13508
00013440 1028 0026                  		move.b	$26(a0),d0
00013444 4EB9 0000 29DA             		jsr	(CalcSine).l
0001344A C1FC 0020                  		muls.w	#$20,d0
0001344E E080                       		asr.l	#8,d0
00013450 4A68 0014                  		tst.w	$14(a0)
00013454 6700                       		beq.s	locret_13508
00013456 6B00                       		bmi.s	loc_13504
00013458 4A40                       		tst.w	d0
0001345A 6700                       		beq.s	locret_13502
0001345C D168 0014                  		add.w	d0,$14(a0)	; change Sonic's inertia
00013460                            
00013460                            locret_13502:
00013460 4E75                       		rts	
00013462                            ; ===========================================================================
00013462                            
00013462                            loc_13504:
00013462 D168 0014                  		add.w	d0,$14(a0)
00013466                            
00013466                            locret_13508:
00013466 4E75                       		rts	
00013468                            ; End of function Sonic_SlopeResist
00013468                            
00013468                            ; ---------------------------------------------------------------------------
00013468                            ; Subroutine to	push Sonic down	a slope	while he's rolling
00013468                            ; ---------------------------------------------------------------------------
00013468                            
00013468                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013468                            
00013468                            
00013468                            Sonic_RollRepel:			; XREF: Obj01_MdRoll
00013468 1028 0026                  		move.b	$26(a0),d0
0001346C 0600 0060                  		addi.b	#$60,d0
00013470 0C00 00C0                  		cmpi.b	#-$40,d0
00013474 6400                       		bcc.s	locret_13544
00013476 1028 0026                  		move.b	$26(a0),d0
0001347A 4EB9 0000 29DA             		jsr	(CalcSine).l
00013480 C1FC 0050                  		muls.w	#$50,d0
00013484 E080                       		asr.l	#8,d0
00013486 4A68 0014                  		tst.w	$14(a0)
0001348A 6B00                       		bmi.s	loc_1353A
0001348C 4A40                       		tst.w	d0
0001348E 6A00                       		bpl.s	loc_13534
00013490 E480                       		asr.l	#2,d0
00013492                            
00013492                            loc_13534:
00013492 D168 0014                  		add.w	d0,$14(a0)
00013496 4E75                       		rts	
00013498                            ; ===========================================================================
00013498                            
00013498                            loc_1353A:
00013498 4A40                       		tst.w	d0
0001349A 6B00                       		bmi.s	loc_13540
0001349C E480                       		asr.l	#2,d0
0001349E                            
0001349E                            loc_13540:
0001349E D168 0014                  		add.w	d0,$14(a0)
000134A2                            
000134A2                            locret_13544:
000134A2 4E75                       		rts	
000134A4                            ; End of function Sonic_RollRepel
000134A4                            
000134A4                            ; ---------------------------------------------------------------------------
000134A4                            ; Subroutine to	push Sonic down	a slope
000134A4                            ; ---------------------------------------------------------------------------
000134A4                            
000134A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134A4                            
000134A4                            
000134A4                            Sonic_SlopeRepel:			; XREF: Obj01_MdNormal; Obj01_MdRoll
000134A4 4E71                       		nop	
000134A6 4A28 0038                  		tst.b	$38(a0)
000134AA 6600                       		bne.s	locret_13580
000134AC 4A68 003E                  		tst.w	$3E(a0)
000134B0 6600                       		bne.s	loc_13582
000134B2 1028 0026                  		move.b	$26(a0),d0
000134B6 0600 0020                  		addi.b	#$20,d0
000134BA 0200 00C0                  		andi.b	#$C0,d0
000134BE 6700                       		beq.s	locret_13580
000134C0 3028 0014                  		move.w	$14(a0),d0
000134C4 6A00                       		bpl.s	loc_1356A
000134C6 4440                       		neg.w	d0
000134C8                            
000134C8                            loc_1356A:
000134C8 0C40 0280                  		cmpi.w	#$280,d0
000134CC 6400                       		bcc.s	locret_13580
000134CE 4268 0014                  		clr.w	$14(a0)
000134D2 08E8 0001 0022             		bset	#1,$22(a0)
000134D8 317C 001E 003E             		move.w	#$1E,$3E(a0)
000134DE                            
000134DE                            locret_13580:
000134DE 4E75                       		rts	
000134E0                            ; ===========================================================================
000134E0                            
000134E0                            loc_13582:
000134E0 5368 003E                  		subq.w	#1,$3E(a0)
000134E4 4E75                       		rts	
000134E6                            ; End of function Sonic_SlopeRepel
000134E6                            
000134E6                            ; ---------------------------------------------------------------------------
000134E6                            ; Subroutine to	return Sonic's angle to 0 as he jumps
000134E6                            ; ---------------------------------------------------------------------------
000134E6                            
000134E6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000134E6                            
000134E6                            
000134E6                            Sonic_JumpAngle:			; XREF: Obj01_MdJump; Obj01_MdJump2
000134E6 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000134EA 6700                       		beq.s	locret_135A2	; if already 0,	branch
000134EC 6A00                       		bpl.s	loc_13598	; if higher than 0, branch
000134EE                            
000134EE 5400                       		addq.b	#2,d0		; increase angle
000134F0 6400                       		bcc.s	loc_13596
000134F2 7000                       		moveq	#0,d0
000134F4                            
000134F4                            loc_13596:
000134F4 6000                       		bra.s	loc_1359E
000134F6                            ; ===========================================================================
000134F6                            
000134F6                            loc_13598:
000134F6 5500                       		subq.b	#2,d0		; decrease angle
000134F8 6400                       		bcc.s	loc_1359E
000134FA 7000                       		moveq	#0,d0
000134FC                            
000134FC                            loc_1359E:
000134FC 1140 0026                  		move.b	d0,$26(a0)
00013500                            
00013500                            locret_135A2:
00013500 4E75                       		rts	
00013502                            ; End of function Sonic_JumpAngle
00013502                            
00013502                            ; ---------------------------------------------------------------------------
00013502                            ; Subroutine for Sonic to interact with	the floor after	jumping/falling
00013502                            ; ---------------------------------------------------------------------------
00013502                            
00013502                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013502                            
00013502                            
00013502                            Sonic_Floor:				; XREF: Obj01_MdJump; Obj01_MdJump2
00013502 3228 0010                  		move.w	$10(a0),d1
00013506 3428 0012                  		move.w	$12(a0),d2
0001350A 4EB9 0000 2CA8             		jsr	(CalcAngle).l
00013510 11C0 FFEC                  		move.b	d0,($FFFFFFEC).w
00013514 0400 0020                  		subi.b	#$20,d0
00013518 11C0 FFED                  		move.b	d0,($FFFFFFED).w
0001351C 0200 00C0                  		andi.b	#$C0,d0
00013520 11C0 FFEE                  		move.b	d0,($FFFFFFEE).w
00013524 0C00 0040                  		cmpi.b	#$40,d0
00013528 6700 0000                  		beq.w	loc_13680
0001352C 0C00 0080                  		cmpi.b	#$80,d0
00013530 6700 0000                  		beq.w	loc_136E2
00013534 0C00 00C0                  		cmpi.b	#-$40,d0
00013538 6700 0000                  		beq.w	loc_1373E
0001353C 6100 0000                  		bsr.w	Sonic_HitWall
00013540 4A41                       		tst.w	d1
00013542 6A00                       		bpl.s	loc_135F0
00013544 9368 0008                  		sub.w	d1,8(a0)
00013548 317C 0000 0010             		move.w	#0,$10(a0)
0001354E                            
0001354E                            loc_135F0:
0001354E 6100 0000                  		bsr.w	sub_14EB4
00013552 4A41                       		tst.w	d1
00013554 6A00                       		bpl.s	loc_13602
00013556 D368 0008                  		add.w	d1,8(a0)
0001355A 317C 0000 0010             		move.w	#0,$10(a0)
00013560                            
00013560                            loc_13602:
00013560 6100 0000                  		bsr.w	Sonic_HitFloor
00013564 11C1 FFEF                  		move.b	d1,($FFFFFFEF).w
00013568 4A41                       		tst.w	d1
0001356A 6A00                       		bpl.s	locret_1367E
0001356C 1428 0012                  		move.b	$12(a0),d2
00013570 5002                       		addq.b	#8,d2
00013572 4402                       		neg.b	d2
00013574 B202                       		cmp.b	d2,d1
00013576 6C00                       		bge.s	loc_1361E
00013578 B002                       		cmp.b	d2,d0
0001357A 6D00                       		blt.s	locret_1367E
0001357C                            
0001357C                            loc_1361E:
0001357C D368 000C                  		add.w	d1,$C(a0)
00013580 1143 0026                  		move.b	d3,$26(a0)
00013584 6100 0000                  		bsr.w	Sonic_ResetOnFloor
00013588 117C 0000 001C             		move.b	#0,$1C(a0)
0001358E 1003                       		move.b	d3,d0
00013590 0600 0020                  		addi.b	#$20,d0
00013594 0200 0040                  		andi.b	#$40,d0
00013598 6600                       		bne.s	loc_1365C
0001359A 1003                       		move.b	d3,d0
0001359C 0600 0010                  		addi.b	#$10,d0
000135A0 0200 0020                  		andi.b	#$20,d0
000135A4 6700                       		beq.s	loc_1364E
000135A6 E0E8 0012                  		asr	$12(a0)
000135AA 6000                       		bra.s	loc_13670
000135AC                            ; ===========================================================================
000135AC                            
000135AC                            loc_1364E:
000135AC 317C 0000 0012             		move.w	#0,$12(a0)
000135B2 3168 0010 0014             		move.w	$10(a0),$14(a0)
000135B8 4E75                       		rts	
000135BA                            ; ===========================================================================
000135BA                            
000135BA                            loc_1365C:
000135BA 317C 0000 0010             		move.w	#0,$10(a0)
000135C0 0C68 0FC0 0012             		cmpi.w	#$FC0,$12(a0)
000135C6 6F00                       		ble.s	loc_13670
000135C8 317C 0FC0 0012             		move.w	#$FC0,$12(a0)
000135CE                            
000135CE                            loc_13670:
000135CE 3168 0012 0014             		move.w	$12(a0),$14(a0)
000135D4 4A03                       		tst.b	d3
000135D6 6A00                       		bpl.s	locret_1367E
000135D8 4468 0014                  		neg.w	$14(a0)
000135DC                            
000135DC                            locret_1367E:
000135DC 4E75                       		rts	
000135DE                            ; ===========================================================================
000135DE                            
000135DE                            loc_13680:
000135DE 6100 0000                  		bsr.w	Sonic_HitWall
000135E2 4A41                       		tst.w	d1
000135E4 6A00                       		bpl.s	loc_1369A
000135E6 9368 0008                  		sub.w	d1,8(a0)
000135EA 317C 0000 0010             		move.w	#0,$10(a0)
000135F0 3168 0012 0014             		move.w	$12(a0),$14(a0)
000135F6 4E75                       		rts	
000135F8                            ; ===========================================================================
000135F8                            
000135F8                            loc_1369A:
000135F8 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000135FC 4A41                       		tst.w	d1
000135FE 6A00                       		bpl.s	loc_136B4
00013600 9368 000C                  		sub.w	d1,$C(a0)
00013604 4A68 0012                  		tst.w	$12(a0)
00013608 6A00                       		bpl.s	locret_136B2
0001360A 317C 0000 0012             		move.w	#0,$12(a0)
00013610                            
00013610                            locret_136B2:
00013610 4E75                       		rts	
00013612                            ; ===========================================================================
00013612                            
00013612                            loc_136B4:
00013612 4A68 0012                  		tst.w	$12(a0)
00013616 6B00                       		bmi.s	locret_136E0
00013618 6100 0000                  		bsr.w	Sonic_HitFloor
0001361C 4A41                       		tst.w	d1
0001361E 6A00                       		bpl.s	locret_136E0
00013620 D368 000C                  		add.w	d1,$C(a0)
00013624 1143 0026                  		move.b	d3,$26(a0)
00013628 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001362C 117C 0000 001C             		move.b	#0,$1C(a0)
00013632 317C 0000 0012             		move.w	#0,$12(a0)
00013638 3168 0010 0014             		move.w	$10(a0),$14(a0)
0001363E                            
0001363E                            locret_136E0:
0001363E 4E75                       		rts	
00013640                            ; ===========================================================================
00013640                            
00013640                            loc_136E2:
00013640 6100 0000                  		bsr.w	Sonic_HitWall
00013644 4A41                       		tst.w	d1
00013646 6A00                       		bpl.s	loc_136F4
00013648 9368 0008                  		sub.w	d1,8(a0)
0001364C 317C 0000 0010             		move.w	#0,$10(a0)
00013652                            
00013652                            loc_136F4:
00013652 6100 0000                  		bsr.w	sub_14EB4
00013656 4A41                       		tst.w	d1
00013658 6A00                       		bpl.s	loc_13706
0001365A D368 0008                  		add.w	d1,8(a0)
0001365E 317C 0000 0010             		move.w	#0,$10(a0)
00013664                            
00013664                            loc_13706:
00013664 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
00013668 4A41                       		tst.w	d1
0001366A 6A00                       		bpl.s	locret_1373C
0001366C 9368 000C                  		sub.w	d1,$C(a0)
00013670 1003                       		move.b	d3,d0
00013672 0600 0020                  		addi.b	#$20,d0
00013676 0200 0040                  		andi.b	#$40,d0
0001367A 6600                       		bne.s	loc_13726
0001367C 317C 0000 0012             		move.w	#0,$12(a0)
00013682 4E75                       		rts	
00013684                            ; ===========================================================================
00013684                            
00013684                            loc_13726:
00013684 1143 0026                  		move.b	d3,$26(a0)
00013688 6100 0000                  		bsr.w	Sonic_ResetOnFloor
0001368C 3168 0012 0014             		move.w	$12(a0),$14(a0)
00013692 4A03                       		tst.b	d3
00013694 6A00                       		bpl.s	locret_1373C
00013696 4468 0014                  		neg.w	$14(a0)
0001369A                            
0001369A                            locret_1373C:
0001369A 4E75                       		rts	
0001369C                            ; ===========================================================================
0001369C                            
0001369C                            loc_1373E:
0001369C 6100 0000                  		bsr.w	sub_14EB4
000136A0 4A41                       		tst.w	d1
000136A2 6A00                       		bpl.s	loc_13758
000136A4 D368 0008                  		add.w	d1,8(a0)
000136A8 317C 0000 0010             		move.w	#0,$10(a0)
000136AE 3168 0012 0014             		move.w	$12(a0),$14(a0)
000136B4 4E75                       		rts	
000136B6                            ; ===========================================================================
000136B6                            
000136B6                            loc_13758:
000136B6 6100 0000                  		bsr.w	Sonic_DontRunOnWalls
000136BA 4A41                       		tst.w	d1
000136BC 6A00                       		bpl.s	loc_13772
000136BE 9368 000C                  		sub.w	d1,$C(a0)
000136C2 4A68 0012                  		tst.w	$12(a0)
000136C6 6A00                       		bpl.s	locret_13770
000136C8 317C 0000 0012             		move.w	#0,$12(a0)
000136CE                            
000136CE                            locret_13770:
000136CE 4E75                       		rts	
000136D0                            ; ===========================================================================
000136D0                            
000136D0                            loc_13772:
000136D0 4A68 0012                  		tst.w	$12(a0)
000136D4 6B00                       		bmi.s	locret_1379E
000136D6 6100 0000                  		bsr.w	Sonic_HitFloor
000136DA 4A41                       		tst.w	d1
000136DC 6A00                       		bpl.s	locret_1379E
000136DE D368 000C                  		add.w	d1,$C(a0)
000136E2 1143 0026                  		move.b	d3,$26(a0)
000136E6 6100 0000                  		bsr.w	Sonic_ResetOnFloor
000136EA 117C 0000 001C             		move.b	#0,$1C(a0)
000136F0 317C 0000 0012             		move.w	#0,$12(a0)
000136F6 3168 0010 0014             		move.w	$10(a0),$14(a0)
000136FC                            
000136FC                            locret_1379E:
000136FC 4E75                       		rts	
000136FE                            ; End of function Sonic_Floor
000136FE                            
000136FE                            ; ---------------------------------------------------------------------------
000136FE                            ; Subroutine to	reset Sonic's mode when he lands on the floor
000136FE                            ; ---------------------------------------------------------------------------
000136FE                            
000136FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000136FE                            
000136FE                            
000136FE                            Sonic_ResetOnFloor:			; XREF: PlatformObject; et al
000136FE 0828 0004 0022             		btst	#4,$22(a0)
00013704 6700                       		beq.s	loc_137AE
00013706 4E71                       		nop	
00013708 4E71                       		nop	
0001370A 4E71                       		nop	
0001370C                            
0001370C                            loc_137AE:
0001370C 08A8 0005 0022             		bclr	#5,$22(a0)
00013712 08A8 0001 0022             		bclr	#1,$22(a0)
00013718 08A8 0004 0022             		bclr	#4,$22(a0)
0001371E 0828 0002 0022             		btst	#2,$22(a0)
00013724 6700                       		beq.s	loc_137E4
00013726 08A8 0002 0022             		bclr	#2,$22(a0)
0001372C 117C 0013 0016             		move.b	#$13,$16(a0)
00013732 117C 0009 0017             		move.b	#9,$17(a0)
00013738 117C 0000 001C             		move.b	#0,$1C(a0)	; use running/walking animation
0001373E 5B68 000C                  		subq.w	#5,$C(a0)
00013742                            
00013742                            loc_137E4:
00013742 117C 0000 003C             		move.b	#0,$3C(a0)
00013748 31FC 0000 F7D0             		move.w	#0,($FFFFF7D0).w
0001374E 4E75                       		rts	
00013750                            ; End of function Sonic_ResetOnFloor
00013750                            
00013750                            ; ===========================================================================
00013750                            ; ---------------------------------------------------------------------------
00013750                            ; Sonic	when he	gets hurt
00013750                            ; ---------------------------------------------------------------------------
00013750                            
00013750                            Obj01_Hurt:				; XREF: Obj01_Index
00013750 4EBA 9E34                  		jsr	SpeedToPos
00013754 0668 0030 0012             		addi.w	#$30,$12(a0)
0001375A 0828 0006 0022             		btst	#6,$22(a0)
00013760 6700                       		beq.s	loc_1380C
00013762 0468 0020 0012             		subi.w	#$20,$12(a0)
00013768                            
00013768                            loc_1380C:
00013768 6100 0000                  		bsr.w	Sonic_HurtStop
0001376C 6100 FAF4                  		bsr.w	Sonic_LevelBound
00013770 6100 F552                  		bsr.w	Sonic_RecordPos
00013774 6100 0000                  		bsr.w	Sonic_Animate
00013778 6100 0000                  		bsr.w	LoadSonicDynPLC
0001377C 4EFA 9E2E                  		jmp	DisplaySprite
00013780                            
00013780                            ; ---------------------------------------------------------------------------
00013780                            ; Subroutine to	stop Sonic falling after he's been hurt
00013780                            ; ---------------------------------------------------------------------------
00013780                            
00013780                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013780                            
00013780                            
00013780                            Sonic_HurtStop:				; XREF: Obj01_Hurt
00013780 3038 F72E                  		move.w	($FFFFF72E).w,d0
00013784 0640 00E0                  		addi.w	#$E0,d0
00013788 B068 000C                  		cmp.w	$C(a0),d0
0001378C 6500 0000                  		bcs.w	KillSonic
00013790 6100 FD70                  		bsr.w	Sonic_Floor
00013794 0828 0001 0022             		btst	#1,$22(a0)
0001379A 6600                       		bne.s	locret_13860
0001379C 7000                       		moveq	#0,d0
0001379E 3140 0012                  		move.w	d0,$12(a0)
000137A2 3140 0010                  		move.w	d0,$10(a0)
000137A6 3140 0014                  		move.w	d0,$14(a0)
000137AA 117C 0000 001C             		move.b	#0,$1C(a0)
000137B0 5528 0024                  		subq.b	#2,$24(a0)
000137B4 317C 0078 0030             		move.w	#$78,$30(a0)
000137BA                            
000137BA                            locret_13860:
000137BA 4E75                       		rts	
000137BC                            ; End of function Sonic_HurtStop
000137BC                            
000137BC                            ; ===========================================================================
000137BC                            ; ---------------------------------------------------------------------------
000137BC                            ; Sonic	when he	dies
000137BC                            ; ---------------------------------------------------------------------------
000137BC                            
000137BC                            Obj01_Death:				; XREF: Obj01_Index
000137BC 6100 0000                  		bsr.w	GameOver
000137C0 4EBA 9D98                  		jsr	ObjectFall
000137C4 6100 F4FE                  		bsr.w	Sonic_RecordPos
000137C8 6100 0000                  		bsr.w	Sonic_Animate
000137CC 6100 0000                  		bsr.w	LoadSonicDynPLC
000137D0 4EFA 9DDA                  		jmp	DisplaySprite
000137D4                            
000137D4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000137D4                            
000137D4                            
000137D4                            GameOver:				; XREF: Obj01_Death
000137D4 3038 F72E                  		move.w	($FFFFF72E).w,d0
000137D8 0640 0100                  		addi.w	#$100,d0
000137DC B068 000C                  		cmp.w	$C(a0),d0
000137E0 6400 0000                  		bcc.w	locret_13900
000137E4 317C FFC8 0012             		move.w	#-$38,$12(a0)
000137EA 5428 0024                  		addq.b	#2,$24(a0)
000137EE 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
000137F2 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; update lives	counter
000137F6 5338 FE12                  		subq.b	#1,($FFFFFE12).w ; subtract 1 from number of lives
000137FA 6600                       		bne.s	loc_138D4
000137FC 317C 0000 003A             		move.w	#0,$3A(a0)
00013802 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load GAME object
00013808 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
0001380E 11FC 0001 D0DA             		move.b	#1,($FFFFD0DA).w ; set OVER object to correct frame
00013814 4238 FE1A                  		clr.b	($FFFFFE1A).w
00013818                            
00013818                            loc_138C2:
00013818 303C 008F                  		move.w	#$8F,d0
0001381C 4EB9 0000 1396             		jsr	(PlaySound).l	; play game over music
00013822 7003                       		moveq	#3,d0
00013824 4EF9 0000 1580             		jmp	(LoadPLC).l	; load game over patterns
0001382A                            ; ===========================================================================
0001382A                            
0001382A                            loc_138D4:
0001382A 317C 003C 003A             		move.w	#60,$3A(a0)	; set time delay to 1 second
00013830 4A38 FE1A                  		tst.b	($FFFFFE1A).w	; is TIME OVER tag set?
00013834 6700                       		beq.s	locret_13900	; if not, branch
00013836 317C 0000 003A             		move.w	#0,$3A(a0)
0001383C 11FC 0039 D080             		move.b	#$39,($FFFFD080).w ; load TIME object
00013842 11FC 0039 D0C0             		move.b	#$39,($FFFFD0C0).w ; load OVER object
00013848 11FC 0002 D09A             		move.b	#2,($FFFFD09A).w
0001384E 11FC 0003 D0DA             		move.b	#3,($FFFFD0DA).w
00013854 60C2                       		bra.s	loc_138C2
00013856                            ; ===========================================================================
00013856                            
00013856                            locret_13900:
00013856 4E75                       		rts	
00013858                            ; End of function GameOver
00013858                            
00013858                            ; ===========================================================================
00013858                            ; ---------------------------------------------------------------------------
00013858                            ; Sonic	when the level is restarted
00013858                            ; ---------------------------------------------------------------------------
00013858                            
00013858                            Obj01_ResetLevel:			; XREF: Obj01_Index
00013858 4A68 003A                  		tst.w	$3A(a0)
0001385C 6700                       		beq.s	locret_13914
0001385E 5368 003A                  		subq.w	#1,$3A(a0)	; subtract 1 from time delay
00013862 6600                       		bne.s	locret_13914
00013864 31FC 0001 FE02             		move.w	#1,($FFFFFE02).w ; restart the level
0001386A                            
0001386A                            locret_13914:
0001386A 4E75                       		rts	
0001386C                            
0001386C                            ; ---------------------------------------------------------------------------
0001386C                            ; Subroutine to	make Sonic run around loops (GHZ/SLZ)
0001386C                            ; ---------------------------------------------------------------------------
0001386C                            
0001386C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001386C                            
0001386C                            
0001386C                            Sonic_Loops:				; XREF: Obj01_Control
0001386C 0C38 0003 FE10             		cmpi.b	#3,($FFFFFE10).w ; is level SLZ	?
00013872 6700                       		beq.s	loc_13926	; if yes, branch
00013874 4A38 FE10                  		tst.b	($FFFFFE10).w	; is level GHZ ?
00013878 6600 0000                  		bne.w	locret_139C2	; if not, branch
0001387C                            
0001387C                            loc_13926:
0001387C 3028 000C                  		move.w	$C(a0),d0
00013880 E248                       		lsr.w	#1,d0
00013882 0240 0380                  		andi.w	#$380,d0
00013886 1228 0008                  		move.b	8(a0),d1
0001388A 0241 007F                  		andi.w	#$7F,d1
0001388E D041                       		add.w	d1,d0
00013890 43F8 A400                  		lea	($FFFFA400).w,a1
00013894 1231 0000                  		move.b	(a1,d0.w),d1	; d1 is	the 256x256 tile Sonic is currently on
00013898 B238 F7AE                  		cmp.b	($FFFFF7AE).w,d1
0001389C 6700 FA6C                  		beq.w	Obj01_ChkRoll
000138A0 B238 F7AF                  		cmp.b	($FFFFF7AF).w,d1
000138A4 6700 FA64                  		beq.w	Obj01_ChkRoll
000138A8 B238 F7AC                  		cmp.b	($FFFFF7AC).w,d1
000138AC 6700                       		beq.s	loc_13976
000138AE B238 F7AD                  		cmp.b	($FFFFF7AD).w,d1
000138B2 6700                       		beq.s	loc_13966
000138B4 08A8 0006 0001             		bclr	#6,1(a0)
000138BA 4E75                       		rts	
000138BC                            ; ===========================================================================
000138BC                            
000138BC                            loc_13966:
000138BC 0828 0001 0022             		btst	#1,$22(a0)
000138C2 6700                       		beq.s	loc_13976
000138C4 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000138CA 4E75                       		rts	
000138CC                            ; ===========================================================================
000138CC                            
000138CC                            loc_13976:
000138CC 3428 0008                  		move.w	8(a0),d2
000138D0 0C02 002C                  		cmpi.b	#$2C,d2
000138D4 6400                       		bcc.s	loc_13988
000138D6 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
000138DC 4E75                       		rts	
000138DE                            ; ===========================================================================
000138DE                            
000138DE                            loc_13988:
000138DE 0C02 00E0                  		cmpi.b	#-$20,d2
000138E2 6500                       		bcs.s	loc_13996
000138E4 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
000138EA 4E75                       		rts	
000138EC                            ; ===========================================================================
000138EC                            
000138EC                            loc_13996:
000138EC 0828 0006 0001             		btst	#6,1(a0)
000138F2 6600                       		bne.s	loc_139B2
000138F4 1228 0026                  		move.b	$26(a0),d1
000138F8 6700                       		beq.s	locret_139C2
000138FA 0C01 0080                  		cmpi.b	#-$80,d1
000138FE 6200                       		bhi.s	locret_139C2
00013900 08E8 0006 0001             		bset	#6,1(a0)	; send Sonic to	low plane
00013906 4E75                       		rts	
00013908                            ; ===========================================================================
00013908                            
00013908                            loc_139B2:
00013908 1228 0026                  		move.b	$26(a0),d1
0001390C 0C01 0080                  		cmpi.b	#-$80,d1
00013910 6300                       		bls.s	locret_139C2
00013912 08A8 0006 0001             		bclr	#6,1(a0)	; send Sonic to	high plane
00013918                            
00013918                            locret_139C2:
00013918 4E75                       		rts	
0001391A                            ; End of function Sonic_Loops
0001391A                            
0001391A                            ; ---------------------------------------------------------------------------
0001391A                            ; Subroutine to	animate	Sonic's sprites
0001391A                            ; ---------------------------------------------------------------------------
0001391A                            
0001391A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001391A                            
0001391A                            
0001391A                            Sonic_Animate:				; XREF: Obj01_Control; et al
0001391A 43F9 0000 0000             		lea	(SonicAniData).l,a1
00013920 7000                       		moveq	#0,d0
00013922 1028 001C                  		move.b	$1C(a0),d0
00013926 B028 001D                  		cmp.b	$1D(a0),d0	; is animation set to restart?
0001392A 6700                       		beq.s	SAnim_Do	; if not, branch
0001392C 1140 001D                  		move.b	d0,$1D(a0)	; set to "no restart"
00013930 117C 0000 001B             		move.b	#0,$1B(a0)	; reset	animation
00013936 117C 0000 001E             		move.b	#0,$1E(a0)	; reset	frame duration
0001393C                            
0001393C                            SAnim_Do:
0001393C D040                       		add.w	d0,d0
0001393E D2F1 0000                  		adda.w	(a1,d0.w),a1	; jump to appropriate animation	script
00013942 1011                       		move.b	(a1),d0
00013944 6B00                       		bmi.s	SAnim_WalkRun	; if animation is walk/run/roll/jump, branch
00013946 1228 0022                  		move.b	$22(a0),d1
0001394A 0201 0001                  		andi.b	#1,d1
0001394E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013954 8328 0001                  		or.b	d1,1(a0)
00013958 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
0001395C 6A00                       		bpl.s	SAnim_Delay	; if time remains, branch
0001395E 1140 001E                  		move.b	d0,$1E(a0)	; load frame duration
00013962                            
00013962                            SAnim_Do2:
00013962 7200                       		moveq	#0,d1
00013964 1228 001B                  		move.b	$1B(a0),d1	; load current frame number
00013968 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number from script
0001396C 6B00                       		bmi.s	SAnim_End_FF	; if animation is complete, branch
0001396E                            
0001396E                            SAnim_Next:
0001396E 1140 001A                  		move.b	d0,$1A(a0)	; load sprite number
00013972 5228 001B                  		addq.b	#1,$1B(a0)	; next frame number
00013976                            
00013976                            SAnim_Delay:
00013976 4E75                       		rts	
00013978                            ; ===========================================================================
00013978                            
00013978                            SAnim_End_FF:
00013978 5200                       		addq.b	#1,d0		; is the end flag = $FF	?
0001397A 6600                       		bne.s	SAnim_End_FE	; if not, branch
0001397C 117C 0000 001B             		move.b	#0,$1B(a0)	; restart the animation
00013982 1029 0001                  		move.b	1(a1),d0	; read sprite number
00013986 60E6                       		bra.s	SAnim_Next
00013988                            ; ===========================================================================
00013988                            
00013988                            SAnim_End_FE:
00013988 5200                       		addq.b	#1,d0		; is the end flag = $FE	?
0001398A 6600                       		bne.s	SAnim_End_FD	; if not, branch
0001398C 1031 1002                  		move.b	2(a1,d1.w),d0	; read the next	byte in	the script
00013990 9128 001B                  		sub.b	d0,$1B(a0)	; jump back d0 bytes in	the script
00013994 9200                       		sub.b	d0,d1
00013996 1031 1001                  		move.b	1(a1,d1.w),d0	; read sprite number
0001399A 60D2                       		bra.s	SAnim_Next
0001399C                            ; ===========================================================================
0001399C                            
0001399C                            SAnim_End_FD:
0001399C 5200                       		addq.b	#1,d0		; is the end flag = $FD	?
0001399E 6600                       		bne.s	SAnim_End	; if not, branch
000139A0 1171 1002 001C             		move.b	2(a1,d1.w),$1C(a0) ; read next byte, run that animation
000139A6                            
000139A6                            SAnim_End:
000139A6 4E75                       		rts	
000139A8                            ; ===========================================================================
000139A8                            
000139A8                            SAnim_WalkRun:				; XREF: SAnim_Do
000139A8 5328 001E                  		subq.b	#1,$1E(a0)	; subtract 1 from frame	duration
000139AC 6AC8                       		bpl.s	SAnim_Delay	; if time remains, branch
000139AE 5200                       		addq.b	#1,d0		; is animation walking/running?
000139B0 6600 0000                  		bne.w	SAnim_RollJump	; if not, branch
000139B4 7200                       		moveq	#0,d1
000139B6 1028 0026                  		move.b	$26(a0),d0	; get Sonic's angle
000139BA 1428 0022                  		move.b	$22(a0),d2
000139BE 0202 0001                  		andi.b	#1,d2		; is Sonic mirrored horizontally?
000139C2 6600                       		bne.s	loc_13A70	; if yes, branch
000139C4 4600                       		not.b	d0		; reverse angle
000139C6                            
000139C6                            loc_13A70:
000139C6 0600 0010                  		addi.b	#$10,d0		; add $10 to angle
000139CA 6A00                       		bpl.s	loc_13A78	; if angle is $0-$7F, branch
000139CC 7203                       		moveq	#3,d1
000139CE                            
000139CE                            loc_13A78:
000139CE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000139D4 B302                       		eor.b	d1,d2
000139D6 8528 0001                  		or.b	d2,1(a0)
000139DA 0828 0005 0022             		btst	#5,$22(a0)
000139E0 6600 0000                  		bne.w	SAnim_Push
000139E4 E808                       		lsr.b	#4,d0		; divide angle by $10
000139E6 0200 0006                  		andi.b	#6,d0		; angle	must be	0, 2, 4	or 6
000139EA 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
000139EE 6A00                       		bpl.s	loc_13A9C
000139F0 4442                       		neg.w	d2
000139F2                            
000139F2                            loc_13A9C:
000139F2 43F9 0000 0000             		lea	(SonAni_Run).l,a1 ; use	running	animation
000139F8 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic at running speed?
000139FC 6400                       		bcc.s	loc_13AB4	; if yes, branch
000139FE 43F9 0000 0000             		lea	(SonAni_Walk).l,a1 ; use walking animation
00013A04 1200                       		move.b	d0,d1
00013A06 E209                       		lsr.b	#1,d1
00013A08 D001                       		add.b	d1,d0
00013A0A                            
00013A0A                            loc_13AB4:
00013A0A D000                       		add.b	d0,d0
00013A0C 1600                       		move.b	d0,d3
00013A0E 4442                       		neg.w	d2
00013A10 0642 0800                  		addi.w	#$800,d2
00013A14 6A00                       		bpl.s	loc_13AC2
00013A16 7400                       		moveq	#0,d2
00013A18                            
00013A18                            loc_13AC2:
00013A18 E04A                       		lsr.w	#8,d2
00013A1A 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013A1E 6100 FF42                  		bsr.w	SAnim_Do2
00013A22 D728 001A                  		add.b	d3,$1A(a0)	; modify frame number
00013A26 4E75                       		rts	
00013A28                            ; ===========================================================================
00013A28                            
00013A28                            SAnim_RollJump:				; XREF: SAnim_WalkRun
00013A28 5200                       		addq.b	#1,d0		; is animation rolling/jumping?
00013A2A 6600                       		bne.s	SAnim_Push	; if not, branch
00013A2C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013A30 6A00                       		bpl.s	loc_13ADE
00013A32 4442                       		neg.w	d2
00013A34                            
00013A34                            loc_13ADE:
00013A34 43F9 0000 0000             		lea	(SonAni_Roll2).l,a1 ; use fast animation
00013A3A 0C42 0600                  		cmpi.w	#$600,d2	; is Sonic moving fast?
00013A3E 6400                       		bcc.s	loc_13AF0	; if yes, branch
00013A40 43F9 0000 0000             		lea	(SonAni_Roll).l,a1 ; use slower	animation
00013A46                            
00013A46                            loc_13AF0:
00013A46 4442                       		neg.w	d2
00013A48 0642 0400                  		addi.w	#$400,d2
00013A4C 6A00                       		bpl.s	loc_13AFA
00013A4E 7400                       		moveq	#0,d2
00013A50                            
00013A50                            loc_13AFA:
00013A50 E04A                       		lsr.w	#8,d2
00013A52 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013A56 1228 0022                  		move.b	$22(a0),d1
00013A5A 0201 0001                  		andi.b	#1,d1
00013A5E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013A64 8328 0001                  		or.b	d1,1(a0)
00013A68 6000 FEF8                  		bra.w	SAnim_Do2
00013A6C                            ; ===========================================================================
00013A6C                            
00013A6C                            SAnim_Push:				; XREF: SAnim_RollJump
00013A6C 3428 0014                  		move.w	$14(a0),d2	; get Sonic's speed
00013A70 6B00                       		bmi.s	loc_13B1E
00013A72 4442                       		neg.w	d2
00013A74                            
00013A74                            loc_13B1E:
00013A74 0642 0800                  		addi.w	#$800,d2
00013A78 6A00                       		bpl.s	loc_13B26
00013A7A 7400                       		moveq	#0,d2
00013A7C                            
00013A7C                            loc_13B26:
00013A7C EC4A                       		lsr.w	#6,d2
00013A7E 1142 001E                  		move.b	d2,$1E(a0)	; modify frame duration
00013A82 43F9 0000 0000             		lea	(SonAni_Push).l,a1
00013A88 1228 0022                  		move.b	$22(a0),d1
00013A8C 0201 0001                  		andi.b	#1,d1
00013A90 0228 00FC 0001             		andi.b	#$FC,1(a0)
00013A96 8328 0001                  		or.b	d1,1(a0)
00013A9A 6000 FEC6                  		bra.w	SAnim_Do2
00013A9E                            ; End of function Sonic_Animate
00013A9E                            
00013A9E                            ; ===========================================================================
00013A9E                            SonicAniData:
00013A9E                            	include "_anim\Sonic.asm"
00013A9E                            ; ---------------------------------------------------------------------------
00013A9E                            ; Animation script - Sonic
00013A9E                            ; ---------------------------------------------------------------------------
00013A9E 0000                       		dc.w SonAni_Walk-SonicAniData
00013AA0 0000                       		dc.w SonAni_Run-SonicAniData
00013AA2 0000                       		dc.w SonAni_Roll-SonicAniData
00013AA4 0000                       		dc.w SonAni_Roll2-SonicAniData
00013AA6 0000                       		dc.w SonAni_Push-SonicAniData
00013AA8 0000                       		dc.w SonAni_Wait-SonicAniData
00013AAA 0000                       		dc.w SonAni_Balance-SonicAniData
00013AAC 0000                       		dc.w SonAni_LookUp-SonicAniData
00013AAE 0000                       		dc.w SonAni_Duck-SonicAniData
00013AB0 0000                       		dc.w SonAni_Warp1-SonicAniData
00013AB2 0000                       		dc.w SonAni_Warp2-SonicAniData
00013AB4 0000                       		dc.w SonAni_Warp3-SonicAniData
00013AB6 0000                       		dc.w SonAni_Warp4-SonicAniData
00013AB8 0000                       		dc.w SonAni_Stop-SonicAniData
00013ABA 0000                       		dc.w SonAni_Float1-SonicAniData
00013ABC 0000                       		dc.w SonAni_Float2-SonicAniData
00013ABE 0000                       		dc.w SonAni_Spring-SonicAniData
00013AC0 0000                       		dc.w SonAni_LZHang-SonicAniData
00013AC2 0000                       		dc.w SonAni_Leap1-SonicAniData
00013AC4 0000                       		dc.w SonAni_Leap2-SonicAniData
00013AC6 0000                       		dc.w SonAni_Surf-SonicAniData
00013AC8 0000                       		dc.w SonAni_Bubble-SonicAniData
00013ACA 0000                       		dc.w SonAni_Death1-SonicAniData
00013ACC 0000                       		dc.w SonAni_Drown-SonicAniData
00013ACE 0000                       		dc.w SonAni_Death2-SonicAniData
00013AD0 0000                       		dc.w SonAni_Shrink-SonicAniData
00013AD2 0000                       		dc.w SonAni_Hurt-SonicAniData
00013AD4 0000                       		dc.w SonAni_LZSlide-SonicAniData
00013AD6 0000                       		dc.w SonAni_Blank-SonicAniData
00013AD8 0000                       		dc.w SonAni_Float3-SonicAniData
00013ADA 0000                       		dc.w SonAni_Float4-SonicAniData
00013ADC FF08 090A 0B06 07FF        SonAni_Walk:	dc.b $FF, 8, 9,	$A, $B,	6, 7, $FF
00013AE4 FF1E 1F20 21FF FFFF        SonAni_Run:	dc.b $FF, $1E, $1F, $20, $21, $FF, $FF,	$FF
00013AEC FE2E 2F30 3132 FFFF        SonAni_Roll:	dc.b $FE, $2E, $2F, $30, $31, $32, $FF,	$FF
00013AF4 FE2E 2F32 3031 32FF        SonAni_Roll2:	dc.b $FE, $2E, $2F, $32, $30, $31, $32,	$FF
00013AFC FD45 4647 48FF FFFF        SonAni_Push:	dc.b $FD, $45, $46, $47, $48, $FF, $FF,	$FF
00013B04 1701 0101 0101 0101 0101+  SonAni_Wait:	dc.b $17, 1, 1,	1, 1, 1, 1, 1, 1, 1, 1,	1, 1, 3, 2, 2, 2, 3, 4, $FE, 2, 0
00013B1A 1F3A 3BFF                  SonAni_Balance:	dc.b $1F, $3A, $3B, $FF
00013B1E 3F05 FF00                  SonAni_LookUp:	dc.b $3F, 5, $FF, 0
00013B22 3F39 FF00                  SonAni_Duck:	dc.b $3F, $39, $FF, 0
00013B26 3F33 FF00                  SonAni_Warp1:	dc.b $3F, $33, $FF, 0
00013B2A 3F34 FF00                  SonAni_Warp2:	dc.b $3F, $34, $FF, 0
00013B2E 3F35 FF00                  SonAni_Warp3:	dc.b $3F, $35, $FF, 0
00013B32 3F36 FF00                  SonAni_Warp4:	dc.b $3F, $36, $FF, 0
00013B36 0737 38FF                  SonAni_Stop:	dc.b 7,	$37, $38, $FF
00013B3A 073C 3FFF                  SonAni_Float1:	dc.b 7,	$3C, $3F, $FF
00013B3E 073C 3D53 3E54 FF00        SonAni_Float2:	dc.b 7,	$3C, $3D, $53, $3E, $54, $FF, 0
00013B46 2F40 FD00                  SonAni_Spring:	dc.b $2F, $40, $FD, 0
00013B4A 0441 42FF                  SonAni_LZHang:	dc.b 4,	$41, $42, $FF
00013B4E 0F43 4343 FE01             SonAni_Leap1:	dc.b $F, $43, $43, $43,	$FE, 1
00013B54 0F43 44FE 0100             SonAni_Leap2:	dc.b $F, $43, $44, $FE,	1, 0
00013B5A 3F49 FF00                  SonAni_Surf:	dc.b $3F, $49, $FF, 0
00013B5E 0B56 560A 0BFD 0000        SonAni_Bubble:	dc.b $B, $56, $56, $A, $B, $FD,	0, 0
00013B66 204B FF00                  SonAni_Death1:	dc.b $20, $4B, $FF, 0
00013B6A 2F4C FF00                  SonAni_Drown:	dc.b $2F, $4C, $FF, 0
00013B6E 034D FF00                  SonAni_Death2:	dc.b 3,	$4D, $FF, 0
00013B72 034E 4F50 5152 00FE 0100   SonAni_Shrink:	dc.b 3,	$4E, $4F, $50, $51, $52, 0, $FE, 1, 0
00013B7C 0355 FF00                  SonAni_Hurt:	dc.b 3,	$55, $FF, 0
00013B80 0755 57FF                  SonAni_LZSlide:	dc.b 7, $55, $57, $FF
00013B84 7700 FD00                  SonAni_Blank:	dc.b $77, 0, $FD, 0
00013B88 033C 3D53 3E54 FF00        SonAni_Float3:	dc.b 3,	$3C, $3D, $53, $3E, $54, $FF, 0
00013B90 033C FD00                  SonAni_Float4:	dc.b 3,	$3C, $FD, 0
00013B94                            		even
00013B94                            		even
00013B94                            
00013B94                            ; ---------------------------------------------------------------------------
00013B94                            ; Sonic	pattern	loading	subroutine
00013B94                            ; ---------------------------------------------------------------------------
00013B94                            
00013B94                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013B94                            
00013B94                            
00013B94                            LoadSonicDynPLC:			; XREF: Obj01_Control; et al
00013B94 7000                       		moveq	#0,d0
00013B96 1028 001A                  		move.b	$1A(a0),d0	; load frame number
00013B9A B038 F766                  		cmp.b	($FFFFF766).w,d0
00013B9E 6700                       		beq.s	locret_13C96
00013BA0 11C0 F766                  		move.b	d0,($FFFFF766).w
00013BA4 45F9 0000 0000             		lea	(SonicDynPLC).l,a2
00013BAA D040                       		add.w	d0,d0
00013BAC D4F2 0000                  		adda.w	(a2,d0.w),a2
00013BB0 7200                       		moveq	#0,d1
00013BB2 121A                       		move.b	(a2)+,d1	; read "number of entries" value
00013BB4 5301                       		subq.b	#1,d1
00013BB6 6B00                       		bmi.s	locret_13C96
00013BB8 47F8 C800                  		lea	($FFFFC800).w,a3
00013BBC 11FC 0001 F767             		move.b	#1,($FFFFF767).w
00013BC2                            
00013BC2                            SPLC_ReadEntry:
00013BC2 7400                       		moveq	#0,d2
00013BC4 141A                       		move.b	(a2)+,d2
00013BC6 3002                       		move.w	d2,d0
00013BC8 E808                       		lsr.b	#4,d0
00013BCA E14A                       		lsl.w	#8,d2
00013BCC 141A                       		move.b	(a2)+,d2
00013BCE EB4A                       		lsl.w	#5,d2
00013BD0 43F9 0000 0000             		lea	(Art_Sonic).l,a1
00013BD6 D3C2                       		adda.l	d2,a1
00013BD8                            
00013BD8                            SPLC_LoadTile:
00013BD8 4CD9 707C                  		movem.l	(a1)+,d2-d6/a4-a6
00013BDC 48D3 707C                  		movem.l	d2-d6/a4-a6,(a3)
00013BE0 47EB 0020                  		lea	$20(a3),a3	; next tile
00013BE4 51C8 FFF2                  		dbf	d0,SPLC_LoadTile ; repeat for number of	tiles
00013BE8                            
00013BE8 51C9 FFD8                  		dbf	d1,SPLC_ReadEntry ; repeat for number of entries
00013BEC                            
00013BEC                            locret_13C96:
00013BEC 4E75                       		rts	
00013BEE                            ; End of function LoadSonicDynPLC
00013BEE                            
00013BEE                            ; ===========================================================================
00013BEE                            ; ---------------------------------------------------------------------------
00013BEE                            ; Object 0A - drowning countdown numbers and small bubbles (LZ)
00013BEE                            ; ---------------------------------------------------------------------------
00013BEE                            
00013BEE                            Obj0A:					; XREF: Obj_Index
00013BEE 7000                       		moveq	#0,d0
00013BF0 1028 0024                  		move.b	$24(a0),d0
00013BF4 323B 0000                  		move.w	Obj0A_Index(pc,d0.w),d1
00013BF8 4EFB 1000                  		jmp	Obj0A_Index(pc,d1.w)
00013BFC                            ; ===========================================================================
00013BFC 0000 0000                  Obj0A_Index:	dc.w Obj0A_Main-Obj0A_Index, Obj0A_Animate-Obj0A_Index
00013C00 0000 0000                  		dc.w Obj0A_ChkWater-Obj0A_Index, Obj0A_Display-Obj0A_Index
00013C04 0000 0000                  		dc.w Obj0A_Delete2-Obj0A_Index,	Obj0A_Countdown-Obj0A_Index
00013C08 0000 0000                  		dc.w Obj0A_AirLeft-Obj0A_Index,	Obj0A_Display-Obj0A_Index
00013C0C 0000                       		dc.w Obj0A_Delete2-Obj0A_Index
00013C0E                            ; ===========================================================================
00013C0E                            
00013C0E                            Obj0A_Main:				; XREF: Obj0A_Index
00013C0E 5428 0024                  		addq.b	#2,$24(a0)
00013C12 217C 0001 2934 0004        		move.l	#Map_obj64,4(a0)
00013C1A 317C 8348 0002             		move.w	#$8348,2(a0)
00013C20 117C 0084 0001             		move.b	#$84,1(a0)
00013C26 117C 0010 0019             		move.b	#$10,$19(a0)
00013C2C 117C 0001 0018             		move.b	#1,$18(a0)
00013C32 1028 0028                  		move.b	$28(a0),d0
00013C36 6A00                       		bpl.s	loc_13D00
00013C38 5028 0024                  		addq.b	#8,$24(a0)
00013C3C 217C 0000 0000 0004        		move.l	#Map_obj0A,4(a0)
00013C44 317C 0440 0002             		move.w	#$440,2(a0)
00013C4A 0240 007F                  		andi.w	#$7F,d0
00013C4E 1140 0033                  		move.b	d0,$33(a0)
00013C52 6000 0000                  		bra.w	Obj0A_Countdown
00013C56                            ; ===========================================================================
00013C56                            
00013C56                            loc_13D00:
00013C56 1140 001C                  		move.b	d0,$1C(a0)
00013C5A 3168 0008 0030             		move.w	8(a0),$30(a0)
00013C60 317C FF78 0012             		move.w	#-$88,$12(a0)
00013C66                            
00013C66                            Obj0A_Animate:				; XREF: Obj0A_Index
00013C66 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013C6C 4EB9 0000 A6D8             		jsr	AnimateSprite
00013C72                            
00013C72                            Obj0A_ChkWater:				; XREF: Obj0A_Index
00013C72 3038 F646                  		move.w	($FFFFF646).w,d0
00013C76 B068 000C                  		cmp.w	$C(a0),d0	; has bubble reached the water surface?
00013C7A 6500                       		bcs.s	Obj0A_Wobble	; if not, branch
00013C7C 117C 0006 0024             		move.b	#6,$24(a0)
00013C82 5E28 001C                  		addq.b	#7,$1C(a0)
00013C86 0C28 000D 001C             		cmpi.b	#$D,$1C(a0)
00013C8C 6700                       		beq.s	Obj0A_Display
00013C8E 6000                       		bra.s	Obj0A_Display
00013C90                            ; ===========================================================================
00013C90                            
00013C90                            Obj0A_Wobble:
00013C90 4A38 F7C7                  		tst.b	($FFFFF7C7).w
00013C94 6700                       		beq.s	loc_13D44
00013C96 5868 0030                  		addq.w	#4,$30(a0)
00013C9A                            
00013C9A                            loc_13D44:
00013C9A 1028 0026                  		move.b	$26(a0),d0
00013C9E 5228 0026                  		addq.b	#1,$26(a0)
00013CA2 0240 007F                  		andi.w	#$7F,d0
00013CA6 43F9 0000 0000             		lea	(Obj0A_WobbleData).l,a1
00013CAC 1031 0000                  		move.b	(a1,d0.w),d0
00013CB0 4880                       		ext.w	d0
00013CB2 D068 0030                  		add.w	$30(a0),d0
00013CB6 3140 0008                  		move.w	d0,8(a0)
00013CBA 6100                       		bsr.s	Obj0A_ShowNumber
00013CBC 4EBA 98C8                  		jsr	SpeedToPos
00013CC0 4A28 0001                  		tst.b	1(a0)
00013CC4 6A00                       		bpl.s	Obj0A_Delete
00013CC6 4EFA 98E4                  		jmp	DisplaySprite
00013CCA                            ; ===========================================================================
00013CCA                            
00013CCA                            Obj0A_Delete:
00013CCA 4EFA 991C                  		jmp	DeleteObject
00013CCE                            ; ===========================================================================
00013CCE                            
00013CCE                            Obj0A_Display:				; XREF: Obj0A_Index
00013CCE 6100                       		bsr.s	Obj0A_ShowNumber
00013CD0 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013CD6 4EB9 0000 A6D8             		jsr	AnimateSprite
00013CDC 4EFA 98CE                  		jmp	DisplaySprite
00013CE0                            ; ===========================================================================
00013CE0                            
00013CE0                            Obj0A_Delete2:				; XREF: Obj0A_Index
00013CE0 4EFA 9906                  		jmp	DeleteObject
00013CE4                            ; ===========================================================================
00013CE4                            
00013CE4                            Obj0A_AirLeft:				; XREF: Obj0A_Index
00013CE4 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w ; check air remaining
00013CEA 6200                       		bhi.s	Obj0A_Delete3	; if higher than $C, branch
00013CEC 5368 0038                  		subq.w	#1,$38(a0)
00013CF0 6600                       		bne.s	Obj0A_Display2
00013CF2 117C 000E 0024             		move.b	#$E,$24(a0)
00013CF8 5E28 001C                  		addq.b	#7,$1C(a0)
00013CFC 60D0                       		bra.s	Obj0A_Display
00013CFE                            ; ===========================================================================
00013CFE                            
00013CFE                            Obj0A_Display2:
00013CFE 43F9 0000 0000             		lea	(Ani_obj0A).l,a1
00013D04 4EB9 0000 A6D8             		jsr	AnimateSprite
00013D0A 4A28 0001                  		tst.b	1(a0)
00013D0E 6A00                       		bpl.s	Obj0A_Delete3
00013D10 4EFA 989A                  		jmp	DisplaySprite
00013D14                            ; ===========================================================================
00013D14                            
00013D14                            Obj0A_Delete3:
00013D14 4EFA 98D2                  		jmp	DeleteObject
00013D18                            ; ===========================================================================
00013D18                            
00013D18                            Obj0A_ShowNumber:			; XREF: Obj0A_Wobble; Obj0A_Display
00013D18 4A68 0038                  		tst.w	$38(a0)
00013D1C 6700                       		beq.s	locret_13E1A
00013D1E 5368 0038                  		subq.w	#1,$38(a0)
00013D22 6600                       		bne.s	locret_13E1A
00013D24 0C28 0007 001C             		cmpi.b	#7,$1C(a0)
00013D2A 6400                       		bcc.s	locret_13E1A
00013D2C 317C 000F 0038             		move.w	#$F,$38(a0)
00013D32 4268 0012                  		clr.w	$12(a0)
00013D36 117C 0080 0001             		move.b	#$80,1(a0)
00013D3C 3028 0008                  		move.w	8(a0),d0
00013D40 9078 F700                  		sub.w	($FFFFF700).w,d0
00013D44 0640 0080                  		addi.w	#$80,d0
00013D48 3140 0008                  		move.w	d0,8(a0)
00013D4C 3028 000C                  		move.w	$C(a0),d0
00013D50 9078 F704                  		sub.w	($FFFFF704).w,d0
00013D54 0640 0080                  		addi.w	#$80,d0
00013D58 3140 000A                  		move.w	d0,$A(a0)
00013D5C 117C 000C 0024             		move.b	#$C,$24(a0)
00013D62                            
00013D62                            locret_13E1A:
00013D62 4E75                       		rts	
00013D64                            ; ===========================================================================
00013D64                            Obj0A_WobbleData:
00013D64 0000 0000 0000 0101 0101+  		dc.b 0, 0, 0, 0, 0, 0,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 2
00013D75 0203 0303 0303 0303 0303+  		dc.b 2,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 3, 3, 4, 3
00013D86 0303 0303 0303 0303 0303+  		dc.b 3,	3, 3, 3, 3, 3, 3, 3, 3,	3, 3, 3, 3, 2, 2, 2, 2
00013D97 0202 0201 0101 0101 0000+  		dc.b 2,	2, 2, 1, 1, 1, 1, 1, 0,	0, 0, 0, 0, 0, -1, -1
00013DA7 FFFF FFFE FEFE FEFE FDFD+  		dc.b -1, -1, -1, -2, -2, -2, -2, -2, -3, -3, -3, -3, -3
00013DB4 FDFD FCFC FCFC FCFC FCFC+  		dc.b -3, -3, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013DC1 FCFC FCFC FCFC FCFC FCFC+  		dc.b -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4
00013DCE FCFC FCFC FCFD FDFD FDFD+  		dc.b -4, -4, -4, -4, -4, -3, -3, -3, -3, -3, -3, -3, -2
00013DDB FEFE FEFE FFFF FFFF FF     		dc.b -2, -2, -2, -2, -1, -1, -1, -1, -1
00013DE4                            ; ===========================================================================
00013DE4                            
00013DE4                            Obj0A_Countdown:			; XREF: Obj0A_Index
00013DE4 4A68 002C                  		tst.w	$2C(a0)
00013DE8 6600 0000                  		bne.w	loc_13F86
00013DEC 0C38 0006 D024             		cmpi.b	#6,($FFFFD024).w
00013DF2 6400 0000                  		bcc.w	locret_1408C
00013DF6 0838 0006 D022             		btst	#6,($FFFFD022).w
00013DFC 6700 0000                  		beq.w	locret_1408C
00013E00 5368 0038                  		subq.w	#1,$38(a0)
00013E04 6A00 0000                  		bpl.w	loc_13FAC
00013E08 317C 003B 0038             		move.w	#59,$38(a0)
00013E0E 317C 0001 0036             		move.w	#1,$36(a0)
00013E14 4EB9 0000 29B4             		jsr	(RandomNumber).l
00013E1A 0240 0001                  		andi.w	#1,d0
00013E1E 1140 0034                  		move.b	d0,$34(a0)
00013E22 3038 FE14                  		move.w	($FFFFFE14).w,d0 ; check air remaining
00013E26 0C40 0019                  		cmpi.w	#$19,d0
00013E2A 6700                       		beq.s	Obj0A_WarnSound	; play sound if	air is $19
00013E2C 0C40 0014                  		cmpi.w	#$14,d0
00013E30 6700                       		beq.s	Obj0A_WarnSound
00013E32 0C40 000F                  		cmpi.w	#$F,d0
00013E36 6700                       		beq.s	Obj0A_WarnSound
00013E38 0C40 000C                  		cmpi.w	#$C,d0
00013E3C 6200                       		bhi.s	Obj0A_ReduceAir	; if air is above $C, branch
00013E3E 6600                       		bne.s	loc_13F02
00013E40 303C 0092                  		move.w	#$92,d0
00013E44 4EB9 0000 1396             		jsr	(PlaySound).l	; play countdown music
00013E4A                            
00013E4A                            loc_13F02:
00013E4A 5328 0032                  		subq.b	#1,$32(a0)
00013E4E 6A00                       		bpl.s	Obj0A_ReduceAir
00013E50 1168 0033 0032             		move.b	$33(a0),$32(a0)
00013E56 08E8 0007 0036             		bset	#7,$36(a0)
00013E5C 6000                       		bra.s	Obj0A_ReduceAir
00013E5E                            ; ===========================================================================
00013E5E                            
00013E5E                            Obj0A_WarnSound:			; XREF: Obj0A_Countdown
00013E5E 303C 00C2                  		move.w	#$C2,d0
00013E62 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "ding-ding" warning sound
00013E68                            
00013E68                            Obj0A_ReduceAir:
00013E68 5378 FE14                  		subq.w	#1,($FFFFFE14).w ; subtract 1 from air remaining
00013E6C 6400 0000                  		bcc.w	Obj0A_GoMakeItem ; if air is above 0, branch
00013E70 6100 0000                  		bsr.w	ResumeMusic
00013E74 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00013E7A 303C 00B2                  		move.w	#$B2,d0
00013E7E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play drowning sound
00013E84 117C 000A 0034             		move.b	#$A,$34(a0)
00013E8A 317C 0001 0036             		move.w	#1,$36(a0)
00013E90 317C 0078 002C             		move.w	#$78,$2C(a0)
00013E96 2F08                       		move.l	a0,-(sp)
00013E98 41F8 D000                  		lea	($FFFFD000).w,a0
00013E9C 6100 F860                  		bsr.w	Sonic_ResetOnFloor
00013EA0 117C 0017 001C             		move.b	#$17,$1C(a0)	; use Sonic's drowning animation
00013EA6 08E8 0001 0022             		bset	#1,$22(a0)
00013EAC 08E8 0007 0002             		bset	#7,2(a0)
00013EB2 317C 0000 0012             		move.w	#0,$12(a0)
00013EB8 317C 0000 0010             		move.w	#0,$10(a0)
00013EBE 317C 0000 0014             		move.w	#0,$14(a0)
00013EC4 11FC 0001 F744             		move.b	#1,($FFFFF744).w
00013ECA 205F                       		movea.l	(sp)+,a0
00013ECC 4E75                       		rts	
00013ECE                            ; ===========================================================================
00013ECE                            
00013ECE                            loc_13F86:
00013ECE 5368 002C                  		subq.w	#1,$2C(a0)
00013ED2 6600                       		bne.s	loc_13F94
00013ED4 11FC 0006 D024             		move.b	#6,($FFFFD024).w
00013EDA 4E75                       		rts	
00013EDC                            ; ===========================================================================
00013EDC                            
00013EDC                            loc_13F94:
00013EDC 2F08                       		move.l	a0,-(sp)
00013EDE 41F8 D000                  		lea	($FFFFD000).w,a0
00013EE2 4EBA 96A2                  		jsr	SpeedToPos
00013EE6 0668 0010 0012             		addi.w	#$10,$12(a0)
00013EEC 205F                       		movea.l	(sp)+,a0
00013EEE 6000                       		bra.s	loc_13FAC
00013EF0                            ; ===========================================================================
00013EF0                            
00013EF0                            Obj0A_GoMakeItem:			; XREF: Obj0A_ReduceAir
00013EF0 6000                       		bra.s	Obj0A_MakeItem
00013EF2                            ; ===========================================================================
00013EF2                            
00013EF2                            loc_13FAC:
00013EF2 4A68 0036                  		tst.w	$36(a0)
00013EF6 6700 0000                  		beq.w	locret_1408C
00013EFA 5368 003A                  		subq.w	#1,$3A(a0)
00013EFE 6A00 0000                  		bpl.w	locret_1408C
00013F02                            
00013F02                            Obj0A_MakeItem:
00013F02 4EB9 0000 29B4             		jsr	(RandomNumber).l
00013F08 0240 000F                  		andi.w	#$F,d0
00013F0C 3140 003A                  		move.w	d0,$3A(a0)
00013F10 4EBA 9B20                  		jsr	SingleObjLoad
00013F14 6600 0000                  		bne.w	locret_1408C
00013F18 12BC 000A                  		move.b	#$A,0(a1)	; load object
00013F1C 3378 D008 0008             		move.w	($FFFFD008).w,8(a1) ; match X position to Sonic
00013F22 7006                       		moveq	#6,d0
00013F24 0838 0000 D022             		btst	#0,($FFFFD022).w
00013F2A 6700                       		beq.s	loc_13FF2
00013F2C 4440                       		neg.w	d0
00013F2E 137C 0040 0026             		move.b	#$40,$26(a1)
00013F34                            
00013F34                            loc_13FF2:
00013F34 D169 0008                  		add.w	d0,8(a1)
00013F38 3378 D00C 000C             		move.w	($FFFFD00C).w,$C(a1)
00013F3E 137C 0006 0028             		move.b	#6,$28(a1)
00013F44 4A68 002C                  		tst.w	$2C(a0)
00013F48 6700 0000                  		beq.w	loc_1403E
00013F4C 0268 0007 003A             		andi.w	#7,$3A(a0)
00013F52 0668 0000 003A             		addi.w	#0,$3A(a0)
00013F58 3038 D00C                  		move.w	($FFFFD00C).w,d0
00013F5C 0440 000C                  		subi.w	#$C,d0
00013F60 3340 000C                  		move.w	d0,$C(a1)
00013F64 4EB9 0000 29B4             		jsr	(RandomNumber).l
00013F6A 1340 0026                  		move.b	d0,$26(a1)
00013F6E 3038 FE04                  		move.w	($FFFFFE04).w,d0
00013F72 0200 0003                  		andi.b	#3,d0
00013F76 6600                       		bne.s	loc_14082
00013F78 137C 000E 0028             		move.b	#$E,$28(a1)
00013F7E 6000                       		bra.s	loc_14082
00013F80                            ; ===========================================================================
00013F80                            
00013F80                            loc_1403E:
00013F80 0828 0007 0036             		btst	#7,$36(a0)
00013F86 6700                       		beq.s	loc_14082
00013F88 3438 FE14                  		move.w	($FFFFFE14).w,d2
00013F8C E24A                       		lsr.w	#1,d2
00013F8E 4EB9 0000 29B4             		jsr	(RandomNumber).l
00013F94 0240 0003                  		andi.w	#3,d0
00013F98 6600                       		bne.s	loc_1406A
00013F9A 08E8 0006 0036             		bset	#6,$36(a0)
00013FA0 6600                       		bne.s	loc_14082
00013FA2 1342 0028                  		move.b	d2,$28(a1)
00013FA6 337C 001C 0038             		move.w	#$1C,$38(a1)
00013FAC                            
00013FAC                            loc_1406A:
00013FAC 4A28 0034                  		tst.b	$34(a0)
00013FB0 6600                       		bne.s	loc_14082
00013FB2 08E8 0006 0036             		bset	#6,$36(a0)
00013FB8 6600                       		bne.s	loc_14082
00013FBA 1342 0028                  		move.b	d2,$28(a1)
00013FBE 337C 001C 0038             		move.w	#$1C,$38(a1)
00013FC4                            
00013FC4                            loc_14082:
00013FC4 5328 0034                  		subq.b	#1,$34(a0)
00013FC8 6A00                       		bpl.s	locret_1408C
00013FCA 4268 0036                  		clr.w	$36(a0)
00013FCE                            
00013FCE                            locret_1408C:
00013FCE 4E75                       		rts	
00013FD0                            
00013FD0                            ; ---------------------------------------------------------------------------
00013FD0                            ; Subroutine to	play music for LZ/SBZ3 after a countdown
00013FD0                            ; ---------------------------------------------------------------------------
00013FD0                            
00013FD0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00013FD0                            
00013FD0                            
00013FD0                            ResumeMusic:				; XREF: Obj64_Wobble; Sonic_Water; Obj0A_ReduceAir
00013FD0 0C78 000C FE14             		cmpi.w	#$C,($FFFFFE14).w
00013FD6 6200                       		bhi.s	loc_140AC
00013FD8 303C 0082                  		move.w	#$82,d0		; play LZ music
00013FDC 0C78 0103 FE10             		cmpi.w	#$103,($FFFFFE10).w ; check if level is	0103 (SBZ3)
00013FE2 6600                       		bne.s	loc_140A6
00013FE4 303C 0086                  		move.w	#$86,d0		; play SBZ music
00013FE8                            
00013FE8                            loc_140A6:
00013FE8 4EB9 0000 1396             		jsr	(PlaySound).l
00013FEE                            
00013FEE                            loc_140AC:
00013FEE 31FC 001E FE14             		move.w	#$1E,($FFFFFE14).w
00013FF4 4238 D372                  		clr.b	($FFFFD372).w
00013FF8 4E75                       		rts	
00013FFA                            ; End of function ResumeMusic
00013FFA                            
00013FFA                            ; ===========================================================================
00013FFA                            Ani_obj0A:
00013FFA                            	include "_anim\obj0A.asm"
00013FFA                            ; ---------------------------------------------------------------------------
00013FFA                            ; Animation script - countdown numbers and bubbles (LZ)
00013FFA                            ; ---------------------------------------------------------------------------
00013FFA 0000                       		dc.w byte_140D6-Ani_obj0A
00013FFC 0000                       		dc.w byte_140E0-Ani_obj0A
00013FFE 0000                       		dc.w byte_140EA-Ani_obj0A
00014000 0000                       		dc.w byte_140F4-Ani_obj0A
00014002 0000                       		dc.w byte_140FE-Ani_obj0A
00014004 0000                       		dc.w byte_14108-Ani_obj0A
00014006 0000                       		dc.w byte_14112-Ani_obj0A
00014008 0000                       		dc.w byte_14118-Ani_obj0A
0001400A 0000                       		dc.w byte_14120-Ani_obj0A
0001400C 0000                       		dc.w byte_14128-Ani_obj0A
0001400E 0000                       		dc.w byte_14130-Ani_obj0A
00014010 0000                       		dc.w byte_14138-Ani_obj0A
00014012 0000                       		dc.w byte_14140-Ani_obj0A
00014014 0000                       		dc.w byte_14148-Ani_obj0A
00014016 0000                       		dc.w byte_1414A-Ani_obj0A
00014018 0500 0102 0304 090D FC00   byte_140D6:	dc.b 5,	0, 1, 2, 3, 4, 9, $D, $FC, 0
00014022 0500 0102 0304 0C12 FC00   byte_140E0:	dc.b 5,	0, 1, 2, 3, 4, $C, $12,	$FC, 0
0001402C 0500 0102 0304 0C11 FC00   byte_140EA:	dc.b 5,	0, 1, 2, 3, 4, $C, $11,	$FC, 0
00014036 0500 0102 0304 0B10 FC00   byte_140F4:	dc.b 5,	0, 1, 2, 3, 4, $B, $10,	$FC, 0
00014040 0500 0102 0304 090F FC00   byte_140FE:	dc.b 5,	0, 1, 2, 3, 4, 9, $F, $FC, 0
0001404A 0500 0102 0304 0A0E FC00   byte_14108:	dc.b 5,	0, 1, 2, 3, 4, $A, $E, $FC, 0
00014054 0E00 0102 FC00             byte_14112:	dc.b $E, 0, 1, 2, $FC, 0
0001405A 0716 0D16 0D16 0DFC        byte_14118:	dc.b 7,	$16, $D, $16, $D, $16, $D, $FC
00014062 0716 1216 1216 12FC        byte_14120:	dc.b 7,	$16, $12, $16, $12, $16, $12, $FC
0001406A 0716 1116 1116 11FC        byte_14128:	dc.b 7,	$16, $11, $16, $11, $16, $11, $FC
00014072 0716 1016 1016 10FC        byte_14130:	dc.b 7,	$16, $10, $16, $10, $16, $10, $FC
0001407A 0716 0F16 0F16 0FFC        byte_14138:	dc.b 7,	$16, $F, $16, $F, $16, $F, $FC
00014082 0716 0E16 0E16 0EFC        byte_14140:	dc.b 7,	$16, $E, $16, $E, $16, $E, $FC
0001408A 0EFC                       byte_14148:	dc.b $E, $FC
0001408C 0E01 0203 04FC             byte_1414A:	dc.b $E, 1, 2, 3, 4, $FC
00014092                            		even
00014092                            		even
00014092                            
00014092                            ; ---------------------------------------------------------------------------
00014092                            ; Sprite mappings - drowning countdown numbers (LZ)
00014092                            ; ---------------------------------------------------------------------------
00014092                            Map_obj0A:
00014092                            	include "_maps\obj0A.asm"
00014092                            ; ---------------------------------------------------------------------------
00014092                            ; Sprite mappings - drowning countdown numbers (LZ)
00014092                            ; ---------------------------------------------------------------------------
00014092 0000                       		dc.w byte_14152-Map_obj0A
00014094 01                         byte_14152:	dc.b 1
00014095 E80E 0000 F2               		dc.b $E8, $E, 0, 0, $F2
0001409A                            		even
0001409A                            		even
0001409A                            
0001409A                            ; ===========================================================================
0001409A                            ; ---------------------------------------------------------------------------
0001409A                            ; Object 38 - shield and invincibility stars
0001409A                            ; ---------------------------------------------------------------------------
0001409A                            
0001409A                            Obj38:					; XREF: Obj_Index
0001409A 7000                       		moveq	#0,d0
0001409C 1028 0024                  		move.b	$24(a0),d0
000140A0 323B 0000                  		move.w	Obj38_Index(pc,d0.w),d1
000140A4 4EFB 1000                  		jmp	Obj38_Index(pc,d1.w)
000140A8                            ; ===========================================================================
000140A8 0000                       Obj38_Index:	dc.w Obj38_Main-Obj38_Index
000140AA 0000                       		dc.w Obj38_Shield-Obj38_Index
000140AC 0000                       		dc.w Obj38_Stars-Obj38_Index
000140AE                            ; ===========================================================================
000140AE                            
000140AE                            Obj38_Main:				; XREF: Obj38_Index
000140AE 5428 0024                  		addq.b	#2,$24(a0)
000140B2 217C 0000 0000 0004        		move.l	#Map_obj38,4(a0)
000140BA 117C 0004 0001             		move.b	#4,1(a0)
000140C0 117C 0001 0018             		move.b	#1,$18(a0)
000140C6 117C 0010 0019             		move.b	#$10,$19(a0)
000140CC 4A28 001C                  		tst.b	$1C(a0)		; is object a shield?
000140D0 6600                       		bne.s	Obj38_DoStars	; if not, branch
000140D2 317C 0541 0002             		move.w	#$541,2(a0)	; shield specific code
000140D8 4E75                       		rts	
000140DA                            ; ===========================================================================
000140DA                            
000140DA                            Obj38_DoStars:
000140DA 5428 0024                  		addq.b	#2,$24(a0)	; stars	specific code
000140DE 317C 055C 0002             		move.w	#$55C,2(a0)
000140E4 4E75                       		rts	
000140E6                            ; ===========================================================================
000140E6                            
000140E6                            Obj38_Shield:				; XREF: Obj38_Index
000140E6 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
000140EA 6600                       		bne.s	Obj38_RmvShield	; if yes, branch
000140EC 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have shield?
000140F0 6700                       		beq.s	Obj38_Delete	; if not, branch
000140F2 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000140F8 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000140FE 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
00014104 43F9 0000 0000             		lea	(Ani_obj38).l,a1
0001410A 4EB9 0000 A6D8             		jsr	AnimateSprite
00014110 4EFA 949A                  		jmp	DisplaySprite
00014114                            ; ===========================================================================
00014114                            
00014114                            Obj38_RmvShield:
00014114 4E75                       		rts	
00014116                            ; ===========================================================================
00014116                            
00014116                            Obj38_Delete:
00014116 4EFA 94D0                  		jmp	DeleteObject
0001411A                            ; ===========================================================================
0001411A                            
0001411A                            Obj38_Stars:				; XREF: Obj38_Index
0001411A 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; does Sonic have invincibility?
0001411E 6700                       		beq.s	Obj38_Delete2	; if not, branch
00014120 3038 F7A8                  		move.w	($FFFFF7A8).w,d0
00014124 1228 001C                  		move.b	$1C(a0),d1
00014128 5301                       		subq.b	#1,d1
0001412A 6000                       		bra.s	Obj38_StarTrail
0001412C                            ; ===========================================================================
0001412C E909                       		lsl.b	#4,d1
0001412E 5801                       		addq.b	#4,d1
00014130 9001                       		sub.b	d1,d0
00014132 1228 0030                  		move.b	$30(a0),d1
00014136 9001                       		sub.b	d1,d0
00014138 5801                       		addq.b	#4,d1
0001413A 0201 000F                  		andi.b	#$F,d1
0001413E 1141 0030                  		move.b	d1,$30(a0)
00014142 6000                       		bra.s	Obj38_StarTrail2a
00014144                            ; ===========================================================================
00014144                            
00014144                            Obj38_StarTrail:			; XREF: Obj38_Stars
00014144 E709                       		lsl.b	#3,d1
00014146 1401                       		move.b	d1,d2
00014148 D201                       		add.b	d1,d1
0001414A D202                       		add.b	d2,d1
0001414C 5801                       		addq.b	#4,d1
0001414E 9001                       		sub.b	d1,d0
00014150 1228 0030                  		move.b	$30(a0),d1
00014154 9001                       		sub.b	d1,d0
00014156 5801                       		addq.b	#4,d1
00014158 0C01 0018                  		cmpi.b	#$18,d1
0001415C 6500                       		bcs.s	Obj38_StarTrail2
0001415E 7200                       		moveq	#0,d1
00014160                            
00014160                            Obj38_StarTrail2:
00014160 1141 0030                  		move.b	d1,$30(a0)
00014164                            
00014164                            Obj38_StarTrail2a:
00014164 43F8 CB00                  		lea	($FFFFCB00).w,a1
00014168 43F1 0000                  		lea	(a1,d0.w),a1
0001416C 3159 0008                  		move.w	(a1)+,8(a0)
00014170 3159 000C                  		move.w	(a1)+,$C(a0)
00014174 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
0001417A 43F9 0000 0000             		lea	(Ani_obj38).l,a1
00014180 4EB9 0000 A6D8             		jsr	AnimateSprite
00014186 4EFA 9424                  		jmp	DisplaySprite
0001418A                            ; ===========================================================================
0001418A                            
0001418A                            Obj38_Delete2:				; XREF: Obj38_Stars
0001418A 4EFA 945C                  		jmp	DeleteObject
0001418E                            ; ===========================================================================
0001418E                            ; ---------------------------------------------------------------------------
0001418E                            ; Object 4A - special stage entry from beta
0001418E                            ; ---------------------------------------------------------------------------
0001418E                            
0001418E                            Obj4A:					; XREF: Obj_Index
0001418E 7000                       		moveq	#0,d0
00014190 1028 0024                  		move.b	$24(a0),d0
00014194 323B 0000                  		move.w	Obj4A_Index(pc,d0.w),d1
00014198 4EFB 1000                  		jmp	Obj4A_Index(pc,d1.w)
0001419C                            ; ===========================================================================
0001419C 0000                       Obj4A_Index:	dc.w Obj4A_Main-Obj4A_Index
0001419E 0000                       		dc.w Obj4A_RmvSonic-Obj4A_Index
000141A0 0000                       		dc.w Obj4A_LoadSonic-Obj4A_Index
000141A2                            ; ===========================================================================
000141A2                            
000141A2                            Obj4A_Main:				; XREF: Obj4A_Index
000141A2 4AB8 F680                  		tst.l	($FFFFF680).w	; are pattern load cues	empty?
000141A6 6700                       		beq.s	Obj4A_Main2	; if yes, branch
000141A8 4E75                       		rts	
000141AA                            ; ===========================================================================
000141AA                            
000141AA                            Obj4A_Main2:
000141AA 5428 0024                  		addq.b	#2,$24(a0)
000141AE 217C 0000 0000 0004        		move.l	#Map_obj4A,4(a0)
000141B6 117C 0004 0001             		move.b	#4,1(a0)
000141BC 117C 0001 0018             		move.b	#1,$18(a0)
000141C2 117C 0038 0019             		move.b	#$38,$19(a0)
000141C8 317C 0541 0002             		move.w	#$541,2(a0)
000141CE 317C 0078 0030             		move.w	#120,$30(a0)	; set time for Sonic's disappearance to 2 seconds
000141D4                            
000141D4                            Obj4A_RmvSonic:				; XREF: Obj4A_Index
000141D4 3178 D008 0008             		move.w	($FFFFD008).w,8(a0)
000141DA 3178 D00C 000C             		move.w	($FFFFD00C).w,$C(a0)
000141E0 1178 D022 0022             		move.b	($FFFFD022).w,$22(a0)
000141E6 43F9 0000 0000             		lea	(Ani_obj4A).l,a1
000141EC 4EB9 0000 A6D8             		jsr	AnimateSprite
000141F2 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
000141F8 6600                       		bne.s	Obj4A_Display
000141FA 4A38 D000                  		tst.b	($FFFFD000).w
000141FE 6700                       		beq.s	Obj4A_Display
00014200 11FC 0000 D000             		move.b	#0,($FFFFD000).w ; remove Sonic
00014206 303C 00A8                  		move.w	#$A8,d0
0001420A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Special Stage "GOAL" sound
00014210                            
00014210                            Obj4A_Display:
00014210 4EFA 939A                  		jmp	DisplaySprite
00014214                            ; ===========================================================================
00014214                            
00014214                            Obj4A_LoadSonic:			; XREF: Obj4A_Index
00014214 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from time
00014218 6600                       		bne.s	Obj4A_Wait	; if time remains, branch
0001421A 11FC 0001 D000             		move.b	#1,($FFFFD000).w ; load	Sonic object
00014220 4EFA 93C6                  		jmp	DeleteObject
00014224                            ; ===========================================================================
00014224                            
00014224                            Obj4A_Wait:
00014224 4E75                       		rts	
00014226                            ; ===========================================================================
00014226                            ; ---------------------------------------------------------------------------
00014226                            ; Object 08 - water splash (LZ)
00014226                            ; ---------------------------------------------------------------------------
00014226                            
00014226                            Obj08:					; XREF: Obj_Index
00014226 7000                       		moveq	#0,d0
00014228 1028 0024                  		move.b	$24(a0),d0
0001422C 323B 0000                  		move.w	Obj08_Index(pc,d0.w),d1
00014230 4EFB 1000                  		jmp	Obj08_Index(pc,d1.w)
00014234                            ; ===========================================================================
00014234 0000                       Obj08_Index:	dc.w Obj08_Main-Obj08_Index
00014236 0000                       		dc.w Obj08_Display-Obj08_Index
00014238 0000                       		dc.w Obj08_Delete-Obj08_Index
0001423A                            ; ===========================================================================
0001423A                            
0001423A                            Obj08_Main:				; XREF: Obj08_Index
0001423A 5428 0024                  		addq.b	#2,$24(a0)
0001423E 217C 0000 0000 0004        		move.l	#Map_obj08,4(a0)
00014246 0028 0004 0001             		ori.b	#4,1(a0)
0001424C 117C 0001 0018             		move.b	#1,$18(a0)
00014252 117C 0010 0019             		move.b	#$10,$19(a0)
00014258 317C 4259 0002             		move.w	#$4259,2(a0)
0001425E 3178 D008 0008             		move.w	($FFFFD008).w,8(a0) ; copy x-position from Sonic
00014264                            
00014264                            Obj08_Display:				; XREF: Obj08_Index
00014264 3178 F646 000C             		move.w	($FFFFF646).w,$C(a0) ; copy y-position from water height
0001426A 43F9 0000 0000             		lea	(Ani_obj08).l,a1
00014270 4EB9 0000 A6D8             		jsr	AnimateSprite
00014276 4EFA 9334                  		jmp	DisplaySprite
0001427A                            ; ===========================================================================
0001427A                            
0001427A                            Obj08_Delete:				; XREF: Obj08_Index
0001427A 4EFA 936C                  		jmp	DeleteObject	; delete when animation	is complete
0001427E                            ; ===========================================================================
0001427E                            Ani_obj38:
0001427E                            	include "_anim\obj38.asm"
0001427E                            ; ---------------------------------------------------------------------------
0001427E                            ; Animation script - shield and invincibility stars
0001427E                            ; ---------------------------------------------------------------------------
0001427E 0000                       		dc.w byte_14356-Ani_obj38
00014280 0000                       		dc.w byte_1435E-Ani_obj38
00014282 0000                       		dc.w byte_14364-Ani_obj38
00014284 0000                       		dc.w byte_1437E-Ani_obj38
00014286 0000                       		dc.w byte_14398-Ani_obj38
00014288 0101 0002 0003 00FF        byte_14356:	dc.b 1,	1, 0, 2, 0, 3, 0, $FF
00014290 0504 0506 07FF             byte_1435E:	dc.b 5,	4, 5, 6, 7, $FF
00014296 0004 0400 0404 0005 0500+  byte_14364:	dc.b 0,	4, 4, 0, 4, 4, 0, 5, 5,	0, 5, 5, 0, 6, 6, 0, 6
000142A7 0600 0707 0007 0700 FF     		dc.b 6,	0, 7, 7, 0, 7, 7, 0, $FF
000142B0 0004 0400 0400 0005 0500+  byte_1437E:	dc.b 0,	4, 4, 0, 4, 0, 0, 5, 5,	0, 5, 0, 0, 6, 6, 0, 6
000142C1 0000 0707 0007 0000 FF     		dc.b 0,	0, 7, 7, 0, 7, 0, 0, $FF
000142CA 0004 0000 0400 0005 0000+  byte_14398:	dc.b 0,	4, 0, 0, 4, 0, 0, 5, 0,	0, 5, 0, 0, 6, 0, 0, 6
000142DB 0000 0700 0007 0000 FF     		dc.b 0,	0, 7, 0, 0, 7, 0, 0, $FF
000142E4                            		even
000142E4                            		even
000142E4                            
000142E4                            ; ---------------------------------------------------------------------------
000142E4                            ; Sprite mappings - shield and invincibility stars
000142E4                            ; ---------------------------------------------------------------------------
000142E4                            Map_obj38:
000142E4                            	include "_maps\obj38.asm"
000142E4                            ; ---------------------------------------------------------------------------
000142E4                            ; Sprite mappings - shield and invincibility stars
000142E4                            ; ---------------------------------------------------------------------------
000142E4 0000 0000                  		dc.w byte_143CD-Map_obj38, byte_143C2-Map_obj38
000142E8 0000 0000                  		dc.w byte_143D7-Map_obj38, byte_143EC-Map_obj38
000142EC 0000 0000                  		dc.w byte_14401-Map_obj38, byte_14416-Map_obj38
000142F0 0000 0000                  		dc.w byte_1442B-Map_obj38, byte_14440-Map_obj38
000142F4 04                         byte_143C2:	dc.b 4
000142F5 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
000142FA E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
000142FF 000A 1000 E8               byte_143CD:	dc.b 0,	$A, $10, 0, $E8
00014304 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
00014309 04                         byte_143D7:	dc.b 4
0001430A E80A 0812 E9               		dc.b $E8, $A, 8, $12, $E9
0001430F E80A 0012 00               		dc.b $E8, $A, 0, $12, 0
00014314 000A 1812 E9               		dc.b 0,	$A, $18, $12, $E9
00014319 000A 1012 00               		dc.b 0,	$A, $10, $12, 0
0001431E 04                         byte_143EC:	dc.b 4
0001431F E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
00014324 E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014329 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
0001432E 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014333 04                         byte_14401:	dc.b 4
00014334 E80A 0000 E8               		dc.b $E8, $A, 0, 0, $E8
00014339 E80A 0009 00               		dc.b $E8, $A, 0, 9, 0
0001433E 000A 1809 E8               		dc.b 0,	$A, $18, 9, $E8
00014343 000A 1800 00               		dc.b 0,	$A, $18, 0, 0
00014348 04                         byte_14416:	dc.b 4
00014349 E80A 0809 E8               		dc.b $E8, $A, 8, 9, $E8
0001434E E80A 0800 00               		dc.b $E8, $A, 8, 0, 0
00014353 000A 1000 E8               		dc.b 0,	$A, $10, 0, $E8
00014358 000A 1009 00               		dc.b 0,	$A, $10, 9, 0
0001435D 04                         byte_1442B:	dc.b 4
0001435E E80A 0012 E8               		dc.b $E8, $A, 0, $12, $E8
00014363 E80A 001B 00               		dc.b $E8, $A, 0, $1B, 0
00014368 000A 181B E8               		dc.b 0,	$A, $18, $1B, $E8
0001436D 000A 1812 00               		dc.b 0,	$A, $18, $12, 0
00014372 04                         byte_14440:	dc.b 4
00014373 E80A 081B E8               		dc.b $E8, $A, 8, $1B, $E8
00014378 E80A 0812 00               		dc.b $E8, $A, 8, $12, 0
0001437D 000A 1012 E8               		dc.b 0,	$A, $10, $12, $E8
00014382 000A 101B 00               		dc.b 0,	$A, $10, $1B, 0
00014388 00                         		even
00014388 00                         		even
00014388                            
00014388                            Ani_obj4A:
00014388                            	include "_anim\obj4A.asm"
00014388                            ; ---------------------------------------------------------------------------
00014388                            ; Animation script - special stage entry effect from beta
00014388                            ; ---------------------------------------------------------------------------
00014388 0000                       		dc.w byte_14458-Ani_obj4A
0001438A 0500 0100 0100 0701 0702+  byte_14458:	dc.b 5,	0, 1, 0, 1, 0, 7, 1, 7,	2, 7, 3, 7, 4, 7, 5, 7, 6, 7, $FC
0001439E                            		even
0001439E                            		even
0001439E                            
0001439E                            ; ---------------------------------------------------------------------------
0001439E                            ; Sprite mappings - special stage entry	from beta
0001439E                            ; ---------------------------------------------------------------------------
0001439E                            Map_obj4A:
0001439E                            	include "_maps\obj4A.asm"
0001439E                            ; ---------------------------------------------------------------------------
0001439E                            ; Sprite mappings - special stage entry	from beta
0001439E                            ; ---------------------------------------------------------------------------
0001439E 0000 0000                  		dc.w byte_1447C-Map_obj4A, byte_1448C-Map_obj4A
000143A2 0000 0000                  		dc.w byte_1449C-Map_obj4A, byte_144B6-Map_obj4A
000143A6 0000 0000                  		dc.w byte_144E4-Map_obj4A, byte_1453F-Map_obj4A
000143AA 0000 0000                  		dc.w byte_14595-Map_obj4A, byte_145BF-Map_obj4A
000143AE 03                         byte_1447C:	dc.b 3
000143AF F800 0000 08               		dc.b $F8, 0, 0,	0, 8
000143B4 0004 0001 00               		dc.b 0,	4, 0, 1, 0
000143B9 0800 1000 08               		dc.b 8,	0, $10,	0, 8
000143BE 03                         byte_1448C:	dc.b 3
000143BF F00D 0003 F0               		dc.b $F0, $D, 0, 3, $F0
000143C4 000C 000B F0               		dc.b 0,	$C, 0, $B, $F0
000143C9 080D 1003 F0               		dc.b 8,	$D, $10, 3, $F0
000143CE 05                         byte_1449C:	dc.b 5
000143CF E40E 000F F4               		dc.b $E4, $E, 0, $F, $F4
000143D4 EC02 001B EC               		dc.b $EC, 2, 0,	$1B, $EC
000143D9 FC0C 001E F4               		dc.b $FC, $C, 0, $1E, $F4
000143DE 040E 100F F4               		dc.b 4,	$E, $10, $F, $F4
000143E3 0401 101B EC               		dc.b 4,	1, $10,	$1B, $EC
000143E8 09                         byte_144B6:	dc.b 9
000143E9 F008 0022 F8               		dc.b $F0, 8, 0,	$22, $F8
000143EE F80E 0025 F0               		dc.b $F8, $E, 0, $25, $F0
000143F3 1008 0031 F0               		dc.b $10, 8, 0,	$31, $F0
000143F8 0005 0034 10               		dc.b 0,	5, 0, $34, $10
000143FD F800 0825 10               		dc.b $F8, 0, 8,	$25, $10
00014402 F000 1836 18               		dc.b $F0, 0, $18, $36, $18
00014407 F800 1825 20               		dc.b $F8, 0, $18, $25, $20
0001440C 0000 0825 28               		dc.b 0,	0, 8, $25, $28
00014411 F800 0025 30               		dc.b $F8, 0, 0,	$25, $30
00014416 12                         byte_144E4:	dc.b $12
00014417 0000 1825 F0               		dc.b 0,	0, $18,	$25, $F0
0001441C F804 0038 F8               		dc.b $F8, 4, 0,	$38, $F8
00014421 F000 0026 08               		dc.b $F0, 0, 0,	$26, 8
00014426 0000 0025 00               		dc.b 0,	0, 0, $25, 0
0001442B 0800 1825 F8               		dc.b 8,	0, $18,	$25, $F8
00014430 1000 1026 00               		dc.b $10, 0, $10, $26, 0
00014435 0800 1038 08               		dc.b 8,	0, $10,	$38, 8
0001443A F800 0029 10               		dc.b $F8, 0, 0,	$29, $10
0001443F 0000 0026 10               		dc.b 0,	0, 0, $26, $10
00014444 0000 002D 18               		dc.b 0,	0, 0, $2D, $18
00014449 0800 0826 18               		dc.b 8,	0, 8, $26, $18
0001444E 0800 0029 20               		dc.b 8,	0, 0, $29, $20
00014453 F800 0026 20               		dc.b $F8, 0, 0,	$26, $20
00014458 F800 002D 28               		dc.b $F8, 0, 0,	$2D, $28
0001445D 0000 003A 28               		dc.b 0,	0, 0, $3A, $28
00014462 F800 1826 30               		dc.b $F8, 0, $18, $26, $30
00014467 0000 1025 38               		dc.b 0,	0, $10,	$25, $38
0001446C F800 1025 40               		dc.b $F8, 0, $10, $25, $40
00014471 11                         byte_1453F:	dc.b $11
00014472 F800 0825 00               		dc.b $F8, 0, 8,	$25, 0
00014477 F000 0038 10               		dc.b $F0, 0, 0,	$38, $10
0001447C 1000 0825 00               		dc.b $10, 0, 8,	$25, 0
00014481 0000 1825 10               		dc.b 0,	0, $18,	$25, $10
00014486 0800 1025 18               		dc.b 8,	0, $10,	$25, $18
0001448B F800 1825 20               		dc.b $F8, 0, $18, $25, $20
00014490 0000 1026 28               		dc.b 0,	0, $10,	$26, $28
00014495 F800 1025 30               		dc.b $F8, 0, $10, $25, $30
0001449A 0000 0025 30               		dc.b 0,	0, 0, $25, $30
0001449F 0800 0825 30               		dc.b 8,	0, 8, $25, $30
000144A4 0000 0826 38               		dc.b 0,	0, 8, $26, $38
000144A9 0800 0029 38               		dc.b 8,	0, 0, $29, $38
000144AE F800 0826 40               		dc.b $F8, 0, 8,	$26, $40
000144B3 0000 002D 40               		dc.b 0,	0, 0, $2D, $40
000144B8 F800 0825 48               		dc.b $F8, 0, 8,	$25, $48
000144BD 0000 0025 48               		dc.b 0,	0, 0, $25, $48
000144C2 0000 1025 50               		dc.b 0,	0, $10,	$25, $50
000144C7 09                         byte_14595:	dc.b 9
000144C8 FC00 0826 30               		dc.b $FC, 0, 8,	$26, $30
000144CD 0400 0825 28               		dc.b 4,	0, 8, $25, $28
000144D2 0400 1027 38               		dc.b 4,	0, $10,	$27, $38
000144D7 0400 0826 40               		dc.b 4,	0, 8, $26, $40
000144DC FC00 1025 40               		dc.b $FC, 0, $10, $25, $40
000144E1 FC00 1026 48               		dc.b $FC, 0, $10, $26, $48
000144E6 0C00 0827 48               		dc.b $C, 0, 8, $27, $48
000144EB 0400 1826 50               		dc.b 4,	0, $18,	$26, $50
000144F0 04                         		dc.b 4
000144F1 0008 2758 00               byte_145BF:	dc.b 0,	8, $27,	$58, 0
000144F6                            		even
000144F6                            		even
000144F6                            
000144F6                            Ani_obj08:
000144F6                            	include "_anim\obj08.asm"
000144F6                            ; ---------------------------------------------------------------------------
000144F6                            ; Animation script - water splash (LZ)
000144F6                            ; ---------------------------------------------------------------------------
000144F6 0000                       		dc.w byte_145C6-Ani_obj08
000144F8 0400 0102 FC00             byte_145C6:	dc.b 4,	0, 1, 2, $FC, 0
000144FE                            		even
000144FE                            		even
000144FE                            
000144FE                            ; ---------------------------------------------------------------------------
000144FE                            ; Sprite mappings - water splash (LZ)
000144FE                            ; ---------------------------------------------------------------------------
000144FE                            Map_obj08:
000144FE                            	include "_maps\obj08.asm"
000144FE                            ; ---------------------------------------------------------------------------
000144FE                            ; Sprite mappings - water splash (LZ)
000144FE                            ; ---------------------------------------------------------------------------
000144FE 0000                       		dc.w byte_145D2-Map_obj08
00014500 0000                       		dc.w byte_145DD-Map_obj08
00014502 0000                       		dc.w byte_145E8-Map_obj08
00014504 02                         byte_145D2:	dc.b 2
00014505 F204 006D F8               		dc.b $F2, 4, 0,	$6D, $F8
0001450A FA0C 006F F0               		dc.b $FA, $C, 0, $6F, $F0
0001450F 02                         byte_145DD:	dc.b 2
00014510 E200 0073 F8               		dc.b $E2, 0, 0,	$73, $F8
00014515 EA0E 0074 F0               		dc.b $EA, $E, 0, $74, $F0
0001451A 01                         byte_145E8:	dc.b 1
0001451B E20F 0080 F0               		dc.b $E2, $F, 0, $80, $F0
00014520                            		even
00014520                            		even
00014520                            
00014520                            ; ---------------------------------------------------------------------------
00014520                            ; Subroutine to	change Sonic's angle & position as he walks along the floor
00014520                            ; ---------------------------------------------------------------------------
00014520                            
00014520                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014520                            
00014520                            
00014520                            Sonic_AnglePos:				; XREF: Obj01_MdNormal; Obj01_MdRoll
00014520 0828 0003 0022             		btst	#3,$22(a0)
00014526 6700                       		beq.s	loc_14602
00014528 7000                       		moveq	#0,d0
0001452A 11C0 F768                  		move.b	d0,($FFFFF768).w
0001452E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014532 4E75                       		rts	
00014534                            ; ===========================================================================
00014534                            
00014534                            loc_14602:
00014534 7003                       		moveq	#3,d0
00014536 11C0 F768                  		move.b	d0,($FFFFF768).w
0001453A 11C0 F76A                  		move.b	d0,($FFFFF76A).w
0001453E 1028 0026                  		move.b	$26(a0),d0
00014542 0600 0020                  		addi.b	#$20,d0
00014546 6A00                       		bpl.s	loc_14624
00014548 1028 0026                  		move.b	$26(a0),d0
0001454C 6A00                       		bpl.s	loc_1461E
0001454E 5300                       		subq.b	#1,d0
00014550                            
00014550                            loc_1461E:
00014550 0600 0020                  		addi.b	#$20,d0
00014554 6000                       		bra.s	loc_14630
00014556                            ; ===========================================================================
00014556                            
00014556                            loc_14624:
00014556 1028 0026                  		move.b	$26(a0),d0
0001455A 6A00                       		bpl.s	loc_1462C
0001455C 5200                       		addq.b	#1,d0
0001455E                            
0001455E                            loc_1462C:
0001455E 0600 001F                  		addi.b	#$1F,d0
00014562                            
00014562                            loc_14630:
00014562 0200 00C0                  		andi.b	#$C0,d0
00014566 0C00 0040                  		cmpi.b	#$40,d0
0001456A 6700 0000                  		beq.w	Sonic_WalkVertL
0001456E 0C00 0080                  		cmpi.b	#$80,d0
00014572 6700 0000                  		beq.w	Sonic_WalkCeiling
00014576 0C00 00C0                  		cmpi.b	#$C0,d0
0001457A 6700 0000                  		beq.w	Sonic_WalkVertR
0001457E 3428 000C                  		move.w	$C(a0),d2
00014582 3628 0008                  		move.w	8(a0),d3
00014586 7000                       		moveq	#0,d0
00014588 1028 0016                  		move.b	$16(a0),d0
0001458C 4880                       		ext.w	d0
0001458E D440                       		add.w	d0,d2
00014590 1028 0017                  		move.b	$17(a0),d0
00014594 4880                       		ext.w	d0
00014596 D640                       		add.w	d0,d3
00014598 49F8 F768                  		lea	($FFFFF768).w,a4
0001459C 367C 0010                  		movea.w	#$10,a3
000145A0 3C3C 0000                  		move.w	#0,d6
000145A4 7A0D                       		moveq	#$D,d5
000145A6 6100 0000                  		bsr.w	FindFloor
000145AA 3F01                       		move.w	d1,-(sp)
000145AC 3428 000C                  		move.w	$C(a0),d2
000145B0 3628 0008                  		move.w	8(a0),d3
000145B4 7000                       		moveq	#0,d0
000145B6 1028 0016                  		move.b	$16(a0),d0
000145BA 4880                       		ext.w	d0
000145BC D440                       		add.w	d0,d2
000145BE 1028 0017                  		move.b	$17(a0),d0
000145C2 4880                       		ext.w	d0
000145C4 4440                       		neg.w	d0
000145C6 D640                       		add.w	d0,d3
000145C8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000145CC 367C 0010                  		movea.w	#$10,a3
000145D0 3C3C 0000                  		move.w	#0,d6
000145D4 7A0D                       		moveq	#$D,d5
000145D6 6100 0000                  		bsr.w	FindFloor
000145DA 301F                       		move.w	(sp)+,d0
000145DC 6100 0000                  		bsr.w	Sonic_Angle
000145E0 4A41                       		tst.w	d1
000145E2 6700                       		beq.s	locret_146BE
000145E4 6A00                       		bpl.s	loc_146C0
000145E6 0C41 FFF2                  		cmpi.w	#-$E,d1
000145EA 6D00                       		blt.s	locret_146E6
000145EC D368 000C                  		add.w	d1,$C(a0)
000145F0                            
000145F0                            locret_146BE:
000145F0 4E75                       		rts	
000145F2                            ; ===========================================================================
000145F2                            
000145F2                            loc_146C0:
000145F2 0C41 000E                  		cmpi.w	#$E,d1
000145F6 6E00                       		bgt.s	loc_146CC
000145F8                            
000145F8                            loc_146C6:
000145F8 D368 000C                  		add.w	d1,$C(a0)
000145FC 4E75                       		rts	
000145FE                            ; ===========================================================================
000145FE                            
000145FE                            loc_146CC:
000145FE 4A28 0038                  		tst.b	$38(a0)
00014602 66F4                       		bne.s	loc_146C6
00014604 08E8 0001 0022             		bset	#1,$22(a0)
0001460A 08A8 0005 0022             		bclr	#5,$22(a0)
00014610 117C 0001 001D             		move.b	#1,$1D(a0)
00014616 4E75                       		rts	
00014618                            ; ===========================================================================
00014618                            
00014618                            locret_146E6:
00014618 4E75                       		rts	
0001461A                            ; End of function Sonic_AnglePos
0001461A                            
0001461A                            ; ===========================================================================
0001461A 2428 0008                  		move.l	8(a0),d2
0001461E 3028 0010                  		move.w	$10(a0),d0
00014622 48C0                       		ext.l	d0
00014624 E180                       		asl.l	#8,d0
00014626 9480                       		sub.l	d0,d2
00014628 2142 0008                  		move.l	d2,8(a0)
0001462C 303C 0038                  		move.w	#$38,d0
00014630 48C0                       		ext.l	d0
00014632 E180                       		asl.l	#8,d0
00014634 9680                       		sub.l	d0,d3
00014636 2143 000C                  		move.l	d3,$C(a0)
0001463A 4E75                       		rts	
0001463C                            ; ===========================================================================
0001463C                            
0001463C                            locret_1470A:
0001463C 4E75                       		rts	
0001463E                            ; ===========================================================================
0001463E 2628 000C                  		move.l	$C(a0),d3
00014642 3028 0012                  		move.w	$12(a0),d0
00014646 0440 0038                  		subi.w	#$38,d0
0001464A 3140 0012                  		move.w	d0,$12(a0)
0001464E 48C0                       		ext.l	d0
00014650 E180                       		asl.l	#8,d0
00014652 9680                       		sub.l	d0,d3
00014654 2143 000C                  		move.l	d3,$C(a0)
00014658 4E75                       		rts	
0001465A 4E75                       		rts	
0001465C                            ; ===========================================================================
0001465C 2428 0008                  		move.l	8(a0),d2
00014660 2628 000C                  		move.l	$C(a0),d3
00014664 3028 0010                  		move.w	$10(a0),d0
00014668 48C0                       		ext.l	d0
0001466A E180                       		asl.l	#8,d0
0001466C 9480                       		sub.l	d0,d2
0001466E 3028 0012                  		move.w	$12(a0),d0
00014672 48C0                       		ext.l	d0
00014674 E180                       		asl.l	#8,d0
00014676 9680                       		sub.l	d0,d3
00014678 2142 0008                  		move.l	d2,8(a0)
0001467C 2143 000C                  		move.l	d3,$C(a0)
00014680 4E75                       		rts	
00014682                            
00014682                            ; ---------------------------------------------------------------------------
00014682                            ; Subroutine to	change Sonic's angle as he walks along the floor
00014682                            ; ---------------------------------------------------------------------------
00014682                            
00014682                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014682                            
00014682                            
00014682                            Sonic_Angle:				; XREF: Sonic_AnglePos; et al
00014682 1438 F76A                  		move.b	($FFFFF76A).w,d2
00014686 B240                       		cmp.w	d0,d1
00014688 6F00                       		ble.s	loc_1475E
0001468A 1438 F768                  		move.b	($FFFFF768).w,d2
0001468E 3200                       		move.w	d0,d1
00014690                            
00014690                            loc_1475E:
00014690 0802 0000                  		btst	#0,d2
00014694 6600                       		bne.s	loc_1476A
00014696 1142 0026                  		move.b	d2,$26(a0)
0001469A 4E75                       		rts	
0001469C                            ; ===========================================================================
0001469C                            
0001469C                            loc_1476A:
0001469C 1428 0026                  		move.b	$26(a0),d2
000146A0 0602 0020                  		addi.b	#$20,d2
000146A4 0202 00C0                  		andi.b	#$C0,d2
000146A8 1142 0026                  		move.b	d2,$26(a0)
000146AC 4E75                       		rts	
000146AE                            ; End of function Sonic_Angle
000146AE                            
000146AE                            ; ---------------------------------------------------------------------------
000146AE                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his right
000146AE                            ; ---------------------------------------------------------------------------
000146AE                            
000146AE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000146AE                            
000146AE                            
000146AE                            Sonic_WalkVertR:			; XREF: Sonic_AnglePos
000146AE 3428 000C                  		move.w	$C(a0),d2
000146B2 3628 0008                  		move.w	8(a0),d3
000146B6 7000                       		moveq	#0,d0
000146B8 1028 0017                  		move.b	$17(a0),d0
000146BC 4880                       		ext.w	d0
000146BE 4440                       		neg.w	d0
000146C0 D440                       		add.w	d0,d2
000146C2 1028 0016                  		move.b	$16(a0),d0
000146C6 4880                       		ext.w	d0
000146C8 D640                       		add.w	d0,d3
000146CA 49F8 F768                  		lea	($FFFFF768).w,a4
000146CE 367C 0010                  		movea.w	#$10,a3
000146D2 3C3C 0000                  		move.w	#0,d6
000146D6 7A0D                       		moveq	#$D,d5
000146D8 6100 0000                  		bsr.w	FindWall
000146DC 3F01                       		move.w	d1,-(sp)
000146DE 3428 000C                  		move.w	$C(a0),d2
000146E2 3628 0008                  		move.w	8(a0),d3
000146E6 7000                       		moveq	#0,d0
000146E8 1028 0017                  		move.b	$17(a0),d0
000146EC 4880                       		ext.w	d0
000146EE D440                       		add.w	d0,d2
000146F0 1028 0016                  		move.b	$16(a0),d0
000146F4 4880                       		ext.w	d0
000146F6 D640                       		add.w	d0,d3
000146F8 49F8 F76A                  		lea	($FFFFF76A).w,a4
000146FC 367C 0010                  		movea.w	#$10,a3
00014700 3C3C 0000                  		move.w	#0,d6
00014704 7A0D                       		moveq	#$D,d5
00014706 6100 0000                  		bsr.w	FindWall
0001470A 301F                       		move.w	(sp)+,d0
0001470C 6100 FF74                  		bsr.w	Sonic_Angle
00014710 4A41                       		tst.w	d1
00014712 6700                       		beq.s	locret_147F0
00014714 6A00                       		bpl.s	loc_147F2
00014716 0C41 FFF2                  		cmpi.w	#-$E,d1
0001471A 6D00 FF20                  		blt.w	locret_1470A
0001471E D368 0008                  		add.w	d1,8(a0)
00014722                            
00014722                            locret_147F0:
00014722 4E75                       		rts	
00014724                            ; ===========================================================================
00014724                            
00014724                            loc_147F2:
00014724 0C41 000E                  		cmpi.w	#$E,d1
00014728 6E00                       		bgt.s	loc_147FE
0001472A                            
0001472A                            loc_147F8:
0001472A D368 0008                  		add.w	d1,8(a0)
0001472E 4E75                       		rts	
00014730                            ; ===========================================================================
00014730                            
00014730                            loc_147FE:
00014730 4A28 0038                  		tst.b	$38(a0)
00014734 66F4                       		bne.s	loc_147F8
00014736 08E8 0001 0022             		bset	#1,$22(a0)
0001473C 08A8 0005 0022             		bclr	#5,$22(a0)
00014742 117C 0001 001D             		move.b	#1,$1D(a0)
00014748 4E75                       		rts	
0001474A                            ; End of function Sonic_WalkVertR
0001474A                            
0001474A                            ; ---------------------------------------------------------------------------
0001474A                            ; Subroutine allowing Sonic to walk upside-down
0001474A                            ; ---------------------------------------------------------------------------
0001474A                            
0001474A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001474A                            
0001474A                            
0001474A                            Sonic_WalkCeiling:			; XREF: Sonic_AnglePos
0001474A 3428 000C                  		move.w	$C(a0),d2
0001474E 3628 0008                  		move.w	8(a0),d3
00014752 7000                       		moveq	#0,d0
00014754 1028 0016                  		move.b	$16(a0),d0
00014758 4880                       		ext.w	d0
0001475A 9440                       		sub.w	d0,d2
0001475C 0A42 000F                  		eori.w	#$F,d2
00014760 1028 0017                  		move.b	$17(a0),d0
00014764 4880                       		ext.w	d0
00014766 D640                       		add.w	d0,d3
00014768 49F8 F768                  		lea	($FFFFF768).w,a4
0001476C 367C FFF0                  		movea.w	#-$10,a3
00014770 3C3C 1000                  		move.w	#$1000,d6
00014774 7A0D                       		moveq	#$D,d5
00014776 6100 0000                  		bsr.w	FindFloor
0001477A 3F01                       		move.w	d1,-(sp)
0001477C 3428 000C                  		move.w	$C(a0),d2
00014780 3628 0008                  		move.w	8(a0),d3
00014784 7000                       		moveq	#0,d0
00014786 1028 0016                  		move.b	$16(a0),d0
0001478A 4880                       		ext.w	d0
0001478C 9440                       		sub.w	d0,d2
0001478E 0A42 000F                  		eori.w	#$F,d2
00014792 1028 0017                  		move.b	$17(a0),d0
00014796 4880                       		ext.w	d0
00014798 9640                       		sub.w	d0,d3
0001479A 49F8 F76A                  		lea	($FFFFF76A).w,a4
0001479E 367C FFF0                  		movea.w	#-$10,a3
000147A2 3C3C 1000                  		move.w	#$1000,d6
000147A6 7A0D                       		moveq	#$D,d5
000147A8 6100 0000                  		bsr.w	FindFloor
000147AC 301F                       		move.w	(sp)+,d0
000147AE 6100 FED2                  		bsr.w	Sonic_Angle
000147B2 4A41                       		tst.w	d1
000147B4 6700                       		beq.s	locret_14892
000147B6 6A00                       		bpl.s	loc_14894
000147B8 0C41 FFF2                  		cmpi.w	#-$E,d1
000147BC 6D00 FE5A                  		blt.w	locret_146E6
000147C0 9368 000C                  		sub.w	d1,$C(a0)
000147C4                            
000147C4                            locret_14892:
000147C4 4E75                       		rts	
000147C6                            ; ===========================================================================
000147C6                            
000147C6                            loc_14894:
000147C6 0C41 000E                  		cmpi.w	#$E,d1
000147CA 6E00                       		bgt.s	loc_148A0
000147CC                            
000147CC                            loc_1489A:
000147CC 9368 000C                  		sub.w	d1,$C(a0)
000147D0 4E75                       		rts	
000147D2                            ; ===========================================================================
000147D2                            
000147D2                            loc_148A0:
000147D2 4A28 0038                  		tst.b	$38(a0)
000147D6 66F4                       		bne.s	loc_1489A
000147D8 08E8 0001 0022             		bset	#1,$22(a0)
000147DE 08A8 0005 0022             		bclr	#5,$22(a0)
000147E4 117C 0001 001D             		move.b	#1,$1D(a0)
000147EA 4E75                       		rts	
000147EC                            ; End of function Sonic_WalkCeiling
000147EC                            
000147EC                            ; ---------------------------------------------------------------------------
000147EC                            ; Subroutine allowing Sonic to walk up a vertical slope/wall to	his left
000147EC                            ; ---------------------------------------------------------------------------
000147EC                            
000147EC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000147EC                            
000147EC                            
000147EC                            Sonic_WalkVertL:			; XREF: Sonic_AnglePos
000147EC 3428 000C                  		move.w	$C(a0),d2
000147F0 3628 0008                  		move.w	8(a0),d3
000147F4 7000                       		moveq	#0,d0
000147F6 1028 0017                  		move.b	$17(a0),d0
000147FA 4880                       		ext.w	d0
000147FC 9440                       		sub.w	d0,d2
000147FE 1028 0016                  		move.b	$16(a0),d0
00014802 4880                       		ext.w	d0
00014804 9640                       		sub.w	d0,d3
00014806 0A43 000F                  		eori.w	#$F,d3
0001480A 49F8 F768                  		lea	($FFFFF768).w,a4
0001480E 367C FFF0                  		movea.w	#-$10,a3
00014812 3C3C 0800                  		move.w	#$800,d6
00014816 7A0D                       		moveq	#$D,d5
00014818 6100 0000                  		bsr.w	FindWall
0001481C 3F01                       		move.w	d1,-(sp)
0001481E 3428 000C                  		move.w	$C(a0),d2
00014822 3628 0008                  		move.w	8(a0),d3
00014826 7000                       		moveq	#0,d0
00014828 1028 0017                  		move.b	$17(a0),d0
0001482C 4880                       		ext.w	d0
0001482E D440                       		add.w	d0,d2
00014830 1028 0016                  		move.b	$16(a0),d0
00014834 4880                       		ext.w	d0
00014836 9640                       		sub.w	d0,d3
00014838 0A43 000F                  		eori.w	#$F,d3
0001483C 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014840 367C FFF0                  		movea.w	#-$10,a3
00014844 3C3C 0800                  		move.w	#$800,d6
00014848 7A0D                       		moveq	#$D,d5
0001484A 6100 0000                  		bsr.w	FindWall
0001484E 301F                       		move.w	(sp)+,d0
00014850 6100 FE30                  		bsr.w	Sonic_Angle
00014854 4A41                       		tst.w	d1
00014856 6700                       		beq.s	locret_14934
00014858 6A00                       		bpl.s	loc_14936
0001485A 0C41 FFF2                  		cmpi.w	#-$E,d1
0001485E 6D00 FDDC                  		blt.w	locret_1470A
00014862 9368 0008                  		sub.w	d1,8(a0)
00014866                            
00014866                            locret_14934:
00014866 4E75                       		rts	
00014868                            ; ===========================================================================
00014868                            
00014868                            loc_14936:
00014868 0C41 000E                  		cmpi.w	#$E,d1
0001486C 6E00                       		bgt.s	loc_14942
0001486E                            
0001486E                            loc_1493C:
0001486E 9368 0008                  		sub.w	d1,8(a0)
00014872 4E75                       		rts	
00014874                            ; ===========================================================================
00014874                            
00014874                            loc_14942:
00014874 4A28 0038                  		tst.b	$38(a0)
00014878 66F4                       		bne.s	loc_1493C
0001487A 08E8 0001 0022             		bset	#1,$22(a0)
00014880 08A8 0005 0022             		bclr	#5,$22(a0)
00014886 117C 0001 001D             		move.b	#1,$1D(a0)
0001488C 4E75                       		rts	
0001488E                            ; End of function Sonic_WalkVertL
0001488E                            
0001488E                            ; ---------------------------------------------------------------------------
0001488E                            ; Subroutine to	find which tile	the object is standing on
0001488E                            ; ---------------------------------------------------------------------------
0001488E                            
0001488E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001488E                            
0001488E                            
0001488E                            Floor_ChkTile:				; XREF: FindFloor; et al
0001488E 3002                       		move.w	d2,d0
00014890 E248                       		lsr.w	#1,d0
00014892 0240 0380                  		andi.w	#$380,d0
00014896 3203                       		move.w	d3,d1
00014898 E049                       		lsr.w	#8,d1
0001489A 0241 007F                  		andi.w	#$7F,d1
0001489E D041                       		add.w	d1,d0
000148A0 72FF                       		moveq	#-1,d1
000148A2 43F8 A400                  		lea	($FFFFA400).w,a1
000148A6 1231 0000                  		move.b	(a1,d0.w),d1
000148AA 6700                       		beq.s	loc_14996
000148AC 6B00                       		bmi.s	loc_1499A
000148AE 5301                       		subq.b	#1,d1
000148B0 4881                       		ext.w	d1
000148B2 EE59                       		ror.w	#7,d1
000148B4 3002                       		move.w	d2,d0
000148B6 D040                       		add.w	d0,d0
000148B8 0240 01E0                  		andi.w	#$1E0,d0
000148BC D240                       		add.w	d0,d1
000148BE 3003                       		move.w	d3,d0
000148C0 E648                       		lsr.w	#3,d0
000148C2 0240 001E                  		andi.w	#$1E,d0
000148C6 D240                       		add.w	d0,d1
000148C8                            
000148C8                            loc_14996:
000148C8 2241                       		movea.l	d1,a1
000148CA 4E75                       		rts	
000148CC                            ; ===========================================================================
000148CC                            
000148CC                            loc_1499A:
000148CC 0241 007F                  		andi.w	#$7F,d1
000148D0 0828 0006 0001             		btst	#6,1(a0)
000148D6 6700                       		beq.s	loc_149B2
000148D8 5241                       		addq.w	#1,d1
000148DA 0C41 0029                  		cmpi.w	#$29,d1
000148DE 6600                       		bne.s	loc_149B2
000148E0 323C 0051                  		move.w	#$51,d1
000148E4                            
000148E4                            loc_149B2:
000148E4 5301                       		subq.b	#1,d1
000148E6 EE59                       		ror.w	#7,d1
000148E8 3002                       		move.w	d2,d0
000148EA D040                       		add.w	d0,d0
000148EC 0240 01E0                  		andi.w	#$1E0,d0
000148F0 D240                       		add.w	d0,d1
000148F2 3003                       		move.w	d3,d0
000148F4 E648                       		lsr.w	#3,d0
000148F6 0240 001E                  		andi.w	#$1E,d0
000148FA D240                       		add.w	d0,d1
000148FC 2241                       		movea.l	d1,a1
000148FE 4E75                       		rts	
00014900                            ; End of function Floor_ChkTile
00014900                            
00014900                            
00014900                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014900                            
00014900                            
00014900                            FindFloor:				; XREF: Sonic_AnglePos; et al
00014900 618C                       		bsr.s	Floor_ChkTile
00014902 3011                       		move.w	(a1),d0
00014904 3800                       		move.w	d0,d4
00014906 0240 07FF                  		andi.w	#$7FF,d0
0001490A 6700                       		beq.s	loc_149DE
0001490C 0B04                       		btst	d5,d4
0001490E 6600                       		bne.s	loc_149EC
00014910                            
00014910                            loc_149DE:
00014910 D44B                       		add.w	a3,d2
00014912 6100 0000                  		bsr.w	FindFloor2
00014916 944B                       		sub.w	a3,d2
00014918 0641 0010                  		addi.w	#$10,d1
0001491C 4E75                       		rts	
0001491E                            ; ===========================================================================
0001491E                            
0001491E                            loc_149EC:
0001491E 2478 F796                  		movea.l	($FFFFF796).w,a2 ; load	collision index
00014922 1032 0000                  		move.b	(a2,d0.w),d0
00014926 0240 00FF                  		andi.w	#$FF,d0
0001492A 67E4                       		beq.s	loc_149DE
0001492C 45F9 0000 0000             		lea	(AngleMap).l,a2
00014932 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014936 E948                       		lsl.w	#4,d0
00014938 3203                       		move.w	d3,d1
0001493A 0804 000B                  		btst	#$B,d4
0001493E 6700                       		beq.s	loc_14A12
00014940 4641                       		not.w	d1
00014942 4414                       		neg.b	(a4)
00014944                            
00014944                            loc_14A12:
00014944 0804 000C                  		btst	#$C,d4
00014948 6700                       		beq.s	loc_14A22
0001494A 0614 0040                  		addi.b	#$40,(a4)
0001494E 4414                       		neg.b	(a4)
00014950 0414 0040                  		subi.b	#$40,(a4)
00014954                            
00014954                            loc_14A22:
00014954 0241 000F                  		andi.w	#$F,d1
00014958 D240                       		add.w	d0,d1
0001495A 45F9 0000 0000             		lea	(CollArray1).l,a2
00014960 1032 1000                  		move.b	(a2,d1.w),d0
00014964 4880                       		ext.w	d0
00014966 BD44                       		eor.w	d6,d4
00014968 0804 000C                  		btst	#$C,d4
0001496C 6700                       		beq.s	loc_14A3E
0001496E 4440                       		neg.w	d0
00014970                            
00014970                            loc_14A3E:
00014970 4A40                       		tst.w	d0
00014972 679C                       		beq.s	loc_149DE
00014974 6B00                       		bmi.s	loc_14A5A
00014976 0C00 0010                  		cmpi.b	#$10,d0
0001497A 6700                       		beq.s	loc_14A66
0001497C 3202                       		move.w	d2,d1
0001497E 0241 000F                  		andi.w	#$F,d1
00014982 D041                       		add.w	d1,d0
00014984 323C 000F                  		move.w	#$F,d1
00014988 9240                       		sub.w	d0,d1
0001498A 4E75                       		rts	
0001498C                            ; ===========================================================================
0001498C                            
0001498C                            loc_14A5A:
0001498C 3202                       		move.w	d2,d1
0001498E 0241 000F                  		andi.w	#$F,d1
00014992 D041                       		add.w	d1,d0
00014994 6A00 FF7A                  		bpl.w	loc_149DE
00014998                            
00014998                            loc_14A66:
00014998 944B                       		sub.w	a3,d2
0001499A 6100 0000                  		bsr.w	FindFloor2
0001499E D44B                       		add.w	a3,d2
000149A0 0441 0010                  		subi.w	#$10,d1
000149A4 4E75                       		rts	
000149A6                            ; End of function FindFloor
000149A6                            
000149A6                            
000149A6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000149A6                            
000149A6                            
000149A6                            FindFloor2:				; XREF: FindFloor
000149A6 6100 FEE6                  		bsr.w	Floor_ChkTile
000149AA 3011                       		move.w	(a1),d0
000149AC 3800                       		move.w	d0,d4
000149AE 0240 07FF                  		andi.w	#$7FF,d0
000149B2 6700                       		beq.s	loc_14A86
000149B4 0B04                       		btst	d5,d4
000149B6 6600                       		bne.s	loc_14A94
000149B8                            
000149B8                            loc_14A86:
000149B8 323C 000F                  		move.w	#$F,d1
000149BC 3002                       		move.w	d2,d0
000149BE 0240 000F                  		andi.w	#$F,d0
000149C2 9240                       		sub.w	d0,d1
000149C4 4E75                       		rts	
000149C6                            ; ===========================================================================
000149C6                            
000149C6                            loc_14A94:
000149C6 2478 F796                  		movea.l	($FFFFF796).w,a2
000149CA 1032 0000                  		move.b	(a2,d0.w),d0
000149CE 0240 00FF                  		andi.w	#$FF,d0
000149D2 67E4                       		beq.s	loc_14A86
000149D4 45F9 0000 0000             		lea	(AngleMap).l,a2
000149DA 18B2 0000                  		move.b	(a2,d0.w),(a4)
000149DE E948                       		lsl.w	#4,d0
000149E0 3203                       		move.w	d3,d1
000149E2 0804 000B                  		btst	#$B,d4
000149E6 6700                       		beq.s	loc_14ABA
000149E8 4641                       		not.w	d1
000149EA 4414                       		neg.b	(a4)
000149EC                            
000149EC                            loc_14ABA:
000149EC 0804 000C                  		btst	#$C,d4
000149F0 6700                       		beq.s	loc_14ACA
000149F2 0614 0040                  		addi.b	#$40,(a4)
000149F6 4414                       		neg.b	(a4)
000149F8 0414 0040                  		subi.b	#$40,(a4)
000149FC                            
000149FC                            loc_14ACA:
000149FC 0241 000F                  		andi.w	#$F,d1
00014A00 D240                       		add.w	d0,d1
00014A02 45F9 0000 0000             		lea	(CollArray1).l,a2
00014A08 1032 1000                  		move.b	(a2,d1.w),d0
00014A0C 4880                       		ext.w	d0
00014A0E BD44                       		eor.w	d6,d4
00014A10 0804 000C                  		btst	#$C,d4
00014A14 6700                       		beq.s	loc_14AE6
00014A16 4440                       		neg.w	d0
00014A18                            
00014A18                            loc_14AE6:
00014A18 4A40                       		tst.w	d0
00014A1A 679C                       		beq.s	loc_14A86
00014A1C 6B00                       		bmi.s	loc_14AFC
00014A1E 3202                       		move.w	d2,d1
00014A20 0241 000F                  		andi.w	#$F,d1
00014A24 D041                       		add.w	d1,d0
00014A26 323C 000F                  		move.w	#$F,d1
00014A2A 9240                       		sub.w	d0,d1
00014A2C 4E75                       		rts	
00014A2E                            ; ===========================================================================
00014A2E                            
00014A2E                            loc_14AFC:
00014A2E 3202                       		move.w	d2,d1
00014A30 0241 000F                  		andi.w	#$F,d1
00014A34 D041                       		add.w	d1,d0
00014A36 6A00 FF80                  		bpl.w	loc_14A86
00014A3A 4641                       		not.w	d1
00014A3C 4E75                       		rts	
00014A3E                            ; End of function FindFloor2
00014A3E                            
00014A3E                            
00014A3E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014A3E                            
00014A3E                            
00014A3E                            FindWall:				; XREF: Sonic_WalkVertR; et al
00014A3E 6100 FE4E                  		bsr.w	Floor_ChkTile
00014A42 3011                       		move.w	(a1),d0
00014A44 3800                       		move.w	d0,d4
00014A46 0240 07FF                  		andi.w	#$7FF,d0
00014A4A 6700                       		beq.s	loc_14B1E
00014A4C 0B04                       		btst	d5,d4
00014A4E 6600                       		bne.s	loc_14B2C
00014A50                            
00014A50                            loc_14B1E:
00014A50 D64B                       		add.w	a3,d3
00014A52 6100 0000                  		bsr.w	FindWall2
00014A56 964B                       		sub.w	a3,d3
00014A58 0641 0010                  		addi.w	#$10,d1
00014A5C 4E75                       		rts	
00014A5E                            ; ===========================================================================
00014A5E                            
00014A5E                            loc_14B2C:
00014A5E 2478 F796                  		movea.l	($FFFFF796).w,a2
00014A62 1032 0000                  		move.b	(a2,d0.w),d0
00014A66 0240 00FF                  		andi.w	#$FF,d0
00014A6A 67E4                       		beq.s	loc_14B1E
00014A6C 45F9 0000 0000             		lea	(AngleMap).l,a2
00014A72 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014A76 E948                       		lsl.w	#4,d0
00014A78 3202                       		move.w	d2,d1
00014A7A 0804 000C                  		btst	#$C,d4
00014A7E 6700                       		beq.s	loc_14B5A
00014A80 4641                       		not.w	d1
00014A82 0614 0040                  		addi.b	#$40,(a4)
00014A86 4414                       		neg.b	(a4)
00014A88 0414 0040                  		subi.b	#$40,(a4)
00014A8C                            
00014A8C                            loc_14B5A:
00014A8C 0804 000B                  		btst	#$B,d4
00014A90 6700                       		beq.s	loc_14B62
00014A92 4414                       		neg.b	(a4)
00014A94                            
00014A94                            loc_14B62:
00014A94 0241 000F                  		andi.w	#$F,d1
00014A98 D240                       		add.w	d0,d1
00014A9A 45F9 0000 0000             		lea	(CollArray2).l,a2
00014AA0 1032 1000                  		move.b	(a2,d1.w),d0
00014AA4 4880                       		ext.w	d0
00014AA6 BD44                       		eor.w	d6,d4
00014AA8 0804 000B                  		btst	#$B,d4
00014AAC 6700                       		beq.s	loc_14B7E
00014AAE 4440                       		neg.w	d0
00014AB0                            
00014AB0                            loc_14B7E:
00014AB0 4A40                       		tst.w	d0
00014AB2 679C                       		beq.s	loc_14B1E
00014AB4 6B00                       		bmi.s	loc_14B9A
00014AB6 0C00 0010                  		cmpi.b	#$10,d0
00014ABA 6700                       		beq.s	loc_14BA6
00014ABC 3203                       		move.w	d3,d1
00014ABE 0241 000F                  		andi.w	#$F,d1
00014AC2 D041                       		add.w	d1,d0
00014AC4 323C 000F                  		move.w	#$F,d1
00014AC8 9240                       		sub.w	d0,d1
00014ACA 4E75                       		rts	
00014ACC                            ; ===========================================================================
00014ACC                            
00014ACC                            loc_14B9A:
00014ACC 3203                       		move.w	d3,d1
00014ACE 0241 000F                  		andi.w	#$F,d1
00014AD2 D041                       		add.w	d1,d0
00014AD4 6A00 FF7A                  		bpl.w	loc_14B1E
00014AD8                            
00014AD8                            loc_14BA6:
00014AD8 964B                       		sub.w	a3,d3
00014ADA 6100 0000                  		bsr.w	FindWall2
00014ADE D64B                       		add.w	a3,d3
00014AE0 0441 0010                  		subi.w	#$10,d1
00014AE4 4E75                       		rts	
00014AE6                            ; End of function FindWall
00014AE6                            
00014AE6                            
00014AE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014AE6                            
00014AE6                            
00014AE6                            FindWall2:				; XREF: FindWall
00014AE6 6100 FDA6                  		bsr.w	Floor_ChkTile
00014AEA 3011                       		move.w	(a1),d0
00014AEC 3800                       		move.w	d0,d4
00014AEE 0240 07FF                  		andi.w	#$7FF,d0
00014AF2 6700                       		beq.s	loc_14BC6
00014AF4 0B04                       		btst	d5,d4
00014AF6 6600                       		bne.s	loc_14BD4
00014AF8                            
00014AF8                            loc_14BC6:
00014AF8 323C 000F                  		move.w	#$F,d1
00014AFC 3003                       		move.w	d3,d0
00014AFE 0240 000F                  		andi.w	#$F,d0
00014B02 9240                       		sub.w	d0,d1
00014B04 4E75                       		rts	
00014B06                            ; ===========================================================================
00014B06                            
00014B06                            loc_14BD4:
00014B06 2478 F796                  		movea.l	($FFFFF796).w,a2
00014B0A 1032 0000                  		move.b	(a2,d0.w),d0
00014B0E 0240 00FF                  		andi.w	#$FF,d0
00014B12 67E4                       		beq.s	loc_14BC6
00014B14 45F9 0000 0000             		lea	(AngleMap).l,a2
00014B1A 18B2 0000                  		move.b	(a2,d0.w),(a4)
00014B1E E948                       		lsl.w	#4,d0
00014B20 3202                       		move.w	d2,d1
00014B22 0804 000C                  		btst	#$C,d4
00014B26 6700                       		beq.s	loc_14C02
00014B28 4641                       		not.w	d1
00014B2A 0614 0040                  		addi.b	#$40,(a4)
00014B2E 4414                       		neg.b	(a4)
00014B30 0414 0040                  		subi.b	#$40,(a4)
00014B34                            
00014B34                            loc_14C02:
00014B34 0804 000B                  		btst	#$B,d4
00014B38 6700                       		beq.s	loc_14C0A
00014B3A 4414                       		neg.b	(a4)
00014B3C                            
00014B3C                            loc_14C0A:
00014B3C 0241 000F                  		andi.w	#$F,d1
00014B40 D240                       		add.w	d0,d1
00014B42 45F9 0000 0000             		lea	(CollArray2).l,a2
00014B48 1032 1000                  		move.b	(a2,d1.w),d0
00014B4C 4880                       		ext.w	d0
00014B4E BD44                       		eor.w	d6,d4
00014B50 0804 000B                  		btst	#$B,d4
00014B54 6700                       		beq.s	loc_14C26
00014B56 4440                       		neg.w	d0
00014B58                            
00014B58                            loc_14C26:
00014B58 4A40                       		tst.w	d0
00014B5A 679C                       		beq.s	loc_14BC6
00014B5C 6B00                       		bmi.s	loc_14C3C
00014B5E 3203                       		move.w	d3,d1
00014B60 0241 000F                  		andi.w	#$F,d1
00014B64 D041                       		add.w	d1,d0
00014B66 323C 000F                  		move.w	#$F,d1
00014B6A 9240                       		sub.w	d0,d1
00014B6C 4E75                       		rts	
00014B6E                            ; ===========================================================================
00014B6E                            
00014B6E                            loc_14C3C:
00014B6E 3203                       		move.w	d3,d1
00014B70 0241 000F                  		andi.w	#$F,d1
00014B74 D041                       		add.w	d1,d0
00014B76 6A00 FF80                  		bpl.w	loc_14BC6
00014B7A 4641                       		not.w	d1
00014B7C 4E75                       		rts	
00014B7E                            ; End of function FindWall2
00014B7E                            
00014B7E                            ; ---------------------------------------------------------------------------
00014B7E                            ; Unused floor/wall subroutine - logs something	to do with collision
00014B7E                            ; ---------------------------------------------------------------------------
00014B7E                            
00014B7E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014B7E                            
00014B7E                            
00014B7E                            FloorLog_Unk:				; XREF: Level
00014B7E 4E75                       		rts	
00014B80                            
00014B80 43F9 0000 0000             		lea	(CollArray1).l,a1
00014B86 45F9 0000 0000             		lea	(CollArray1).l,a2
00014B8C 363C 00FF                  		move.w	#$FF,d3
00014B90                            
00014B90                            loc_14C5E:
00014B90 7A10                       		moveq	#$10,d5
00014B92 343C 000F                  		move.w	#$F,d2
00014B96                            
00014B96                            loc_14C64:
00014B96 7800                       		moveq	#0,d4
00014B98 323C 000F                  		move.w	#$F,d1
00014B9C                            
00014B9C                            loc_14C6A:
00014B9C 3019                       		move.w	(a1)+,d0
00014B9E EAA8                       		lsr.l	d5,d0
00014BA0 D944                       		addx.w	d4,d4
00014BA2 51C9 FFF8                  		dbf	d1,loc_14C6A
00014BA6                            
00014BA6 34C4                       		move.w	d4,(a2)+
00014BA8 92FC 0020                  		suba.w	#$20,a1
00014BAC 5345                       		subq.w	#1,d5
00014BAE 51CA FFE6                  		dbf	d2,loc_14C64
00014BB2                            
00014BB2 D2FC 0020                  		adda.w	#$20,a1
00014BB6 51CB FFD8                  		dbf	d3,loc_14C5E
00014BBA                            
00014BBA 43F9 0000 0000             		lea	(CollArray1).l,a1
00014BC0 45F9 0000 0000             		lea	(CollArray2).l,a2
00014BC6 6100                       		bsr.s	FloorLog_Unk2
00014BC8 43F9 0000 0000             		lea	(CollArray1).l,a1
00014BCE 45F9 0000 0000             		lea	(CollArray1).l,a2
00014BD4                            
00014BD4                            ; End of function FloorLog_Unk
00014BD4                            
00014BD4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014BD4                            
00014BD4                            
00014BD4                            FloorLog_Unk2:				; XREF: FloorLog_Unk
00014BD4 363C 0FFF                  		move.w	#$FFF,d3
00014BD8                            
00014BD8                            loc_14CA6:
00014BD8 7400                       		moveq	#0,d2
00014BDA 323C 000F                  		move.w	#$F,d1
00014BDE 3019                       		move.w	(a1)+,d0
00014BE0 6700                       		beq.s	loc_14CD4
00014BE2 6B00                       		bmi.s	loc_14CBE
00014BE4                            
00014BE4                            loc_14CB2:
00014BE4 E248                       		lsr.w	#1,d0
00014BE6 6400                       		bcc.s	loc_14CB8
00014BE8 5202                       		addq.b	#1,d2
00014BEA                            
00014BEA                            loc_14CB8:
00014BEA 51C9 FFF8                  		dbf	d1,loc_14CB2
00014BEE                            
00014BEE 6000                       		bra.s	loc_14CD6
00014BF0                            ; ===========================================================================
00014BF0                            
00014BF0                            loc_14CBE:
00014BF0 0C40 FFFF                  		cmpi.w	#-1,d0
00014BF4 6700                       		beq.s	loc_14CD0
00014BF6                            
00014BF6                            loc_14CC4:
00014BF6 E348                       		lsl.w	#1,d0
00014BF8 6400                       		bcc.s	loc_14CCA
00014BFA 5302                       		subq.b	#1,d2
00014BFC                            
00014BFC                            loc_14CCA:
00014BFC 51C9 FFF8                  		dbf	d1,loc_14CC4
00014C00                            
00014C00 6000                       		bra.s	loc_14CD6
00014C02                            ; ===========================================================================
00014C02                            
00014C02                            loc_14CD0:
00014C02 303C 0010                  		move.w	#$10,d0
00014C06                            
00014C06                            loc_14CD4:
00014C06 3400                       		move.w	d0,d2
00014C08                            
00014C08                            loc_14CD6:
00014C08 14C2                       		move.b	d2,(a2)+
00014C0A 51CB FFCC                  		dbf	d3,loc_14CA6
00014C0E                            
00014C0E 4E75                       		rts	
00014C10                            
00014C10                            ; End of function FloorLog_Unk2
00014C10                            
00014C10                            
00014C10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C10                            
00014C10                            
00014C10                            Sonic_WalkSpeed:			; XREF: Sonic_Move
00014C10 2628 0008                  		move.l	8(a0),d3
00014C14 2428 000C                  		move.l	$C(a0),d2
00014C18 3228 0010                  		move.w	$10(a0),d1
00014C1C 48C1                       		ext.l	d1
00014C1E E181                       		asl.l	#8,d1
00014C20 D681                       		add.l	d1,d3
00014C22 3228 0012                  		move.w	$12(a0),d1
00014C26 48C1                       		ext.l	d1
00014C28 E181                       		asl.l	#8,d1
00014C2A D481                       		add.l	d1,d2
00014C2C 4842                       		swap	d2
00014C2E 4843                       		swap	d3
00014C30 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C34 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C38 1200                       		move.b	d0,d1
00014C3A 0600 0020                  		addi.b	#$20,d0
00014C3E 6A00                       		bpl.s	loc_14D1A
00014C40 1001                       		move.b	d1,d0
00014C42 6A00                       		bpl.s	loc_14D14
00014C44 5300                       		subq.b	#1,d0
00014C46                            
00014C46                            loc_14D14:
00014C46 0600 0020                  		addi.b	#$20,d0
00014C4A 6000                       		bra.s	loc_14D24
00014C4C                            ; ===========================================================================
00014C4C                            
00014C4C                            loc_14D1A:
00014C4C 1001                       		move.b	d1,d0
00014C4E 6A00                       		bpl.s	loc_14D20
00014C50 5200                       		addq.b	#1,d0
00014C52                            
00014C52                            loc_14D20:
00014C52 0600 001F                  		addi.b	#$1F,d0
00014C56                            
00014C56                            loc_14D24:
00014C56 0200 00C0                  		andi.b	#$C0,d0
00014C5A 6700 0000                  		beq.w	loc_14DF0
00014C5E 0C00 0080                  		cmpi.b	#$80,d0
00014C62 6700 0000                  		beq.w	loc_14F7C
00014C66 0201 0038                  		andi.b	#$38,d1
00014C6A 6600                       		bne.s	loc_14D3C
00014C6C 5042                       		addq.w	#8,d2
00014C6E                            
00014C6E                            loc_14D3C:
00014C6E 0C00 0040                  		cmpi.b	#$40,d0
00014C72 6700 0000                  		beq.w	loc_1504A
00014C76 6000 0000                  		bra.w	loc_14EBC
00014C7A                            
00014C7A                            ; End of function Sonic_WalkSpeed
00014C7A                            
00014C7A                            
00014C7A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014C7A                            
00014C7A                            
00014C7A                            sub_14D48:				; XREF: Sonic_Jump
00014C7A 11C0 F768                  		move.b	d0,($FFFFF768).w
00014C7E 11C0 F76A                  		move.b	d0,($FFFFF76A).w
00014C82 0600 0020                  		addi.b	#$20,d0
00014C86 0200 00C0                  		andi.b	#$C0,d0
00014C8A 0C00 0040                  		cmpi.b	#$40,d0
00014C8E 6700 0000                  		beq.w	loc_14FD6
00014C92 0C00 0080                  		cmpi.b	#$80,d0
00014C96 6700 0000                  		beq.w	Sonic_DontRunOnWalls
00014C9A 0C00 00C0                  		cmpi.b	#$C0,d0
00014C9E 6700 0000                  		beq.w	sub_14E50
00014CA2                            
00014CA2                            ; End of function sub_14D48
00014CA2                            
00014CA2                            ; ---------------------------------------------------------------------------
00014CA2                            ; Subroutine to	make Sonic land	on the floor after jumping
00014CA2                            ; ---------------------------------------------------------------------------
00014CA2                            
00014CA2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014CA2                            
00014CA2                            
00014CA2                            Sonic_HitFloor:				; XREF: Sonic_Floor
00014CA2 3428 000C                  		move.w	$C(a0),d2
00014CA6 3628 0008                  		move.w	8(a0),d3
00014CAA 7000                       		moveq	#0,d0
00014CAC 1028 0016                  		move.b	$16(a0),d0
00014CB0 4880                       		ext.w	d0
00014CB2 D440                       		add.w	d0,d2
00014CB4 1028 0017                  		move.b	$17(a0),d0
00014CB8 4880                       		ext.w	d0
00014CBA D640                       		add.w	d0,d3
00014CBC 49F8 F768                  		lea	($FFFFF768).w,a4
00014CC0 367C 0010                  		movea.w	#$10,a3
00014CC4 3C3C 0000                  		move.w	#0,d6
00014CC8 7A0D                       		moveq	#$D,d5
00014CCA 6100 FC34                  		bsr.w	FindFloor
00014CCE 3F01                       		move.w	d1,-(sp)
00014CD0 3428 000C                  		move.w	$C(a0),d2
00014CD4 3628 0008                  		move.w	8(a0),d3
00014CD8 7000                       		moveq	#0,d0
00014CDA 1028 0016                  		move.b	$16(a0),d0
00014CDE 4880                       		ext.w	d0
00014CE0 D440                       		add.w	d0,d2
00014CE2 1028 0017                  		move.b	$17(a0),d0
00014CE6 4880                       		ext.w	d0
00014CE8 9640                       		sub.w	d0,d3
00014CEA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014CEE 367C 0010                  		movea.w	#$10,a3
00014CF2 3C3C 0000                  		move.w	#0,d6
00014CF6 7A0D                       		moveq	#$D,d5
00014CF8 6100 FC06                  		bsr.w	FindFloor
00014CFC 301F                       		move.w	(sp)+,d0
00014CFE 143C 0000                  		move.b	#0,d2
00014D02                            
00014D02                            loc_14DD0:
00014D02 1638 F76A                  		move.b	($FFFFF76A).w,d3
00014D06 B240                       		cmp.w	d0,d1
00014D08 6F00                       		ble.s	loc_14DDE
00014D0A 1638 F768                  		move.b	($FFFFF768).w,d3
00014D0E C141                       		exg	d0,d1
00014D10                            
00014D10                            loc_14DDE:
00014D10 0803 0000                  		btst	#0,d3
00014D14 6700                       		beq.s	locret_14DE6
00014D16 1602                       		move.b	d2,d3
00014D18                            
00014D18                            locret_14DE6:
00014D18 4E75                       		rts	
00014D1A                            
00014D1A                            ; End of function Sonic_HitFloor
00014D1A                            
00014D1A                            ; ===========================================================================
00014D1A 3428 000C                  		move.w	$C(a0),d2
00014D1E 3628 0008                  		move.w	8(a0),d3
00014D22                            
00014D22                            loc_14DF0:				; XREF: Sonic_WalkSpeed
00014D22 0642 000A                  		addi.w	#$A,d2
00014D26 49F8 F768                  		lea	($FFFFF768).w,a4
00014D2A 367C 0010                  		movea.w	#$10,a3
00014D2E 3C3C 0000                  		move.w	#0,d6
00014D32 7A0E                       		moveq	#$E,d5
00014D34 6100 FBCA                  		bsr.w	FindFloor
00014D38 143C 0000                  		move.b	#0,d2
00014D3C                            
00014D3C                            loc_14E0A:				; XREF: sub_14EB4
00014D3C 1638 F768                  		move.b	($FFFFF768).w,d3
00014D40 0803 0000                  		btst	#0,d3
00014D44 6700                       		beq.s	locret_14E16
00014D46 1602                       		move.b	d2,d3
00014D48                            
00014D48                            locret_14E16:
00014D48 4E75                       		rts	
00014D4A                            
00014D4A                            ; ---------------------------------------------------------------------------
00014D4A                            ; Subroutine allowing objects to interact with the floor
00014D4A                            ; ---------------------------------------------------------------------------
00014D4A                            
00014D4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D4A                            
00014D4A                            
00014D4A                            ObjHitFloor:
00014D4A 3628 0008                  		move.w	8(a0),d3
00014D4E                            
00014D4E                            ; End of function ObjHitFloor
00014D4E                            
00014D4E                            
00014D4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D4E                            
00014D4E                            
00014D4E                            ObjHitFloor2:
00014D4E 3428 000C                  		move.w	$C(a0),d2
00014D52 7000                       		moveq	#0,d0
00014D54 1028 0016                  		move.b	$16(a0),d0
00014D58 4880                       		ext.w	d0
00014D5A D440                       		add.w	d0,d2
00014D5C 49F8 F768                  		lea	($FFFFF768).w,a4
00014D60 18BC 0000                  		move.b	#0,(a4)
00014D64 367C 0010                  		movea.w	#$10,a3
00014D68 3C3C 0000                  		move.w	#0,d6
00014D6C 7A0D                       		moveq	#$D,d5
00014D6E 6100 FB90                  		bsr.w	FindFloor
00014D72 1638 F768                  		move.b	($FFFFF768).w,d3
00014D76 0803 0000                  		btst	#0,d3
00014D7A 6700                       		beq.s	locret_14E4E
00014D7C 163C 0000                  		move.b	#0,d3
00014D80                            
00014D80                            locret_14E4E:
00014D80 4E75                       		rts	
00014D82                            ; End of function ObjHitFloor2
00014D82                            
00014D82                            
00014D82                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014D82                            
00014D82                            
00014D82                            sub_14E50:				; XREF: sub_14D48
00014D82 3428 000C                  		move.w	$C(a0),d2
00014D86 3628 0008                  		move.w	8(a0),d3
00014D8A 7000                       		moveq	#0,d0
00014D8C 1028 0017                  		move.b	$17(a0),d0
00014D90 4880                       		ext.w	d0
00014D92 9440                       		sub.w	d0,d2
00014D94 1028 0016                  		move.b	$16(a0),d0
00014D98 4880                       		ext.w	d0
00014D9A D640                       		add.w	d0,d3
00014D9C 49F8 F768                  		lea	($FFFFF768).w,a4
00014DA0 367C 0010                  		movea.w	#$10,a3
00014DA4 3C3C 0000                  		move.w	#0,d6
00014DA8 7A0E                       		moveq	#$E,d5
00014DAA 6100 FC92                  		bsr.w	FindWall
00014DAE 3F01                       		move.w	d1,-(sp)
00014DB0 3428 000C                  		move.w	$C(a0),d2
00014DB4 3628 0008                  		move.w	8(a0),d3
00014DB8 7000                       		moveq	#0,d0
00014DBA 1028 0017                  		move.b	$17(a0),d0
00014DBE 4880                       		ext.w	d0
00014DC0 D440                       		add.w	d0,d2
00014DC2 1028 0016                  		move.b	$16(a0),d0
00014DC6 4880                       		ext.w	d0
00014DC8 D640                       		add.w	d0,d3
00014DCA 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014DCE 367C 0010                  		movea.w	#$10,a3
00014DD2 3C3C 0000                  		move.w	#0,d6
00014DD6 7A0E                       		moveq	#$E,d5
00014DD8 6100 FC64                  		bsr.w	FindWall
00014DDC 301F                       		move.w	(sp)+,d0
00014DDE 143C 00C0                  		move.b	#-$40,d2
00014DE2 6000 FF1E                  		bra.w	loc_14DD0
00014DE6                            
00014DE6                            ; End of function sub_14E50
00014DE6                            
00014DE6                            
00014DE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014DE6                            
00014DE6                            
00014DE6                            sub_14EB4:				; XREF: Sonic_Floor
00014DE6 3428 000C                  		move.w	$C(a0),d2
00014DEA 3628 0008                  		move.w	8(a0),d3
00014DEE                            
00014DEE                            loc_14EBC:
00014DEE 0643 000A                  		addi.w	#$A,d3
00014DF2 49F8 F768                  		lea	($FFFFF768).w,a4
00014DF6 367C 0010                  		movea.w	#$10,a3
00014DFA 3C3C 0000                  		move.w	#0,d6
00014DFE 7A0E                       		moveq	#$E,d5
00014E00 6100 FC3C                  		bsr.w	FindWall
00014E04 143C 00C0                  		move.b	#-$40,d2
00014E08 6000 FF32                  		bra.w	loc_14E0A
00014E0C                            
00014E0C                            ; End of function sub_14EB4
00014E0C                            
00014E0C                            ; ---------------------------------------------------------------------------
00014E0C                            ; Subroutine to	detect when an object hits a wall to its right
00014E0C                            ; ---------------------------------------------------------------------------
00014E0C                            
00014E0C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E0C                            
00014E0C                            
00014E0C                            ObjHitWallRight:
00014E0C D668 0008                  		add.w	8(a0),d3
00014E10 3428 000C                  		move.w	$C(a0),d2
00014E14 49F8 F768                  		lea	($FFFFF768).w,a4
00014E18 18BC 0000                  		move.b	#0,(a4)
00014E1C 367C 0010                  		movea.w	#$10,a3
00014E20 3C3C 0000                  		move.w	#0,d6
00014E24 7A0E                       		moveq	#$E,d5
00014E26 6100 FC16                  		bsr.w	FindWall
00014E2A 1638 F768                  		move.b	($FFFFF768).w,d3
00014E2E 0803 0000                  		btst	#0,d3
00014E32 6700                       		beq.s	locret_14F06
00014E34 163C 00C0                  		move.b	#-$40,d3
00014E38                            
00014E38                            locret_14F06:
00014E38 4E75                       		rts	
00014E3A                            
00014E3A                            ; End of function ObjHitWallRight
00014E3A                            
00014E3A                            ; ---------------------------------------------------------------------------
00014E3A                            ; Subroutine preventing	Sonic from running on walls and	ceilings when he
00014E3A                            ; touches them
00014E3A                            ; ---------------------------------------------------------------------------
00014E3A                            
00014E3A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014E3A                            
00014E3A                            
00014E3A                            Sonic_DontRunOnWalls:			; XREF: Sonic_Floor; et al
00014E3A 3428 000C                  		move.w	$C(a0),d2
00014E3E 3628 0008                  		move.w	8(a0),d3
00014E42 7000                       		moveq	#0,d0
00014E44 1028 0016                  		move.b	$16(a0),d0
00014E48 4880                       		ext.w	d0
00014E4A 9440                       		sub.w	d0,d2
00014E4C 0A42 000F                  		eori.w	#$F,d2
00014E50 1028 0017                  		move.b	$17(a0),d0
00014E54 4880                       		ext.w	d0
00014E56 D640                       		add.w	d0,d3
00014E58 49F8 F768                  		lea	($FFFFF768).w,a4
00014E5C 367C FFF0                  		movea.w	#-$10,a3
00014E60 3C3C 1000                  		move.w	#$1000,d6
00014E64 7A0E                       		moveq	#$E,d5
00014E66 6100 FA98                  		bsr.w	FindFloor
00014E6A 3F01                       		move.w	d1,-(sp)
00014E6C 3428 000C                  		move.w	$C(a0),d2
00014E70 3628 0008                  		move.w	8(a0),d3
00014E74 7000                       		moveq	#0,d0
00014E76 1028 0016                  		move.b	$16(a0),d0
00014E7A 4880                       		ext.w	d0
00014E7C 9440                       		sub.w	d0,d2
00014E7E 0A42 000F                  		eori.w	#$F,d2
00014E82 1028 0017                  		move.b	$17(a0),d0
00014E86 4880                       		ext.w	d0
00014E88 9640                       		sub.w	d0,d3
00014E8A 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014E8E 367C FFF0                  		movea.w	#-$10,a3
00014E92 3C3C 1000                  		move.w	#$1000,d6
00014E96 7A0E                       		moveq	#$E,d5
00014E98 6100 FA66                  		bsr.w	FindFloor
00014E9C 301F                       		move.w	(sp)+,d0
00014E9E 143C 0080                  		move.b	#-$80,d2
00014EA2 6000 FE5E                  		bra.w	loc_14DD0
00014EA6                            ; End of function Sonic_DontRunOnWalls
00014EA6                            
00014EA6                            ; ===========================================================================
00014EA6 3428 000C                  		move.w	$C(a0),d2
00014EAA 3628 0008                  		move.w	8(a0),d3
00014EAE                            
00014EAE                            loc_14F7C:
00014EAE 0442 000A                  		subi.w	#$A,d2
00014EB2 0A42 000F                  		eori.w	#$F,d2
00014EB6 49F8 F768                  		lea	($FFFFF768).w,a4
00014EBA 367C FFF0                  		movea.w	#-$10,a3
00014EBE 3C3C 1000                  		move.w	#$1000,d6
00014EC2 7A0E                       		moveq	#$E,d5
00014EC4 6100 FA3A                  		bsr.w	FindFloor
00014EC8 143C 0080                  		move.b	#-$80,d2
00014ECC 6000 FE6E                  		bra.w	loc_14E0A
00014ED0                            
00014ED0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014ED0                            
00014ED0                            
00014ED0                            ObjHitCeiling:
00014ED0 3428 000C                  		move.w	$C(a0),d2
00014ED4 3628 0008                  		move.w	8(a0),d3
00014ED8 7000                       		moveq	#0,d0
00014EDA 1028 0016                  		move.b	$16(a0),d0
00014EDE 4880                       		ext.w	d0
00014EE0 9440                       		sub.w	d0,d2
00014EE2 0A42 000F                  		eori.w	#$F,d2
00014EE6 49F8 F768                  		lea	($FFFFF768).w,a4
00014EEA 367C FFF0                  		movea.w	#-$10,a3
00014EEE 3C3C 1000                  		move.w	#$1000,d6
00014EF2 7A0E                       		moveq	#$E,d5
00014EF4 6100 FA0A                  		bsr.w	FindFloor
00014EF8 1638 F768                  		move.b	($FFFFF768).w,d3
00014EFC 0803 0000                  		btst	#0,d3
00014F00 6700                       		beq.s	locret_14FD4
00014F02 163C 0080                  		move.b	#-$80,d3
00014F06                            
00014F06                            locret_14FD4:
00014F06 4E75                       		rts	
00014F08                            ; End of function ObjHitCeiling
00014F08                            
00014F08                            ; ===========================================================================
00014F08                            
00014F08                            loc_14FD6:				; XREF: sub_14D48
00014F08 3428 000C                  		move.w	$C(a0),d2
00014F0C 3628 0008                  		move.w	8(a0),d3
00014F10 7000                       		moveq	#0,d0
00014F12 1028 0017                  		move.b	$17(a0),d0
00014F16 4880                       		ext.w	d0
00014F18 9440                       		sub.w	d0,d2
00014F1A 1028 0016                  		move.b	$16(a0),d0
00014F1E 4880                       		ext.w	d0
00014F20 9640                       		sub.w	d0,d3
00014F22 0A43 000F                  		eori.w	#$F,d3
00014F26 49F8 F768                  		lea	($FFFFF768).w,a4
00014F2A 367C FFF0                  		movea.w	#-$10,a3
00014F2E 3C3C 0800                  		move.w	#$800,d6
00014F32 7A0E                       		moveq	#$E,d5
00014F34 6100 FB08                  		bsr.w	FindWall
00014F38 3F01                       		move.w	d1,-(sp)
00014F3A 3428 000C                  		move.w	$C(a0),d2
00014F3E 3628 0008                  		move.w	8(a0),d3
00014F42 7000                       		moveq	#0,d0
00014F44 1028 0017                  		move.b	$17(a0),d0
00014F48 4880                       		ext.w	d0
00014F4A D440                       		add.w	d0,d2
00014F4C 1028 0016                  		move.b	$16(a0),d0
00014F50 4880                       		ext.w	d0
00014F52 9640                       		sub.w	d0,d3
00014F54 0A43 000F                  		eori.w	#$F,d3
00014F58 49F8 F76A                  		lea	($FFFFF76A).w,a4
00014F5C 367C FFF0                  		movea.w	#-$10,a3
00014F60 3C3C 0800                  		move.w	#$800,d6
00014F64 7A0E                       		moveq	#$E,d5
00014F66 6100 FAD6                  		bsr.w	FindWall
00014F6A 301F                       		move.w	(sp)+,d0
00014F6C 143C 0040                  		move.b	#$40,d2
00014F70 6000 FD90                  		bra.w	loc_14DD0
00014F74                            
00014F74                            ; ---------------------------------------------------------------------------
00014F74                            ; Subroutine to	stop Sonic when	he jumps at a wall
00014F74                            ; ---------------------------------------------------------------------------
00014F74                            
00014F74                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F74                            
00014F74                            
00014F74                            Sonic_HitWall:				; XREF: Sonic_Floor
00014F74 3428 000C                  		move.w	$C(a0),d2
00014F78 3628 0008                  		move.w	8(a0),d3
00014F7C                            
00014F7C                            loc_1504A:
00014F7C 0443 000A                  		subi.w	#$A,d3
00014F80 0A43 000F                  		eori.w	#$F,d3
00014F84 49F8 F768                  		lea	($FFFFF768).w,a4
00014F88 367C FFF0                  		movea.w	#-$10,a3
00014F8C 3C3C 0800                  		move.w	#$800,d6
00014F90 7A0E                       		moveq	#$E,d5
00014F92 6100 FAAA                  		bsr.w	FindWall
00014F96 143C 0040                  		move.b	#$40,d2
00014F9A 6000 FDA0                  		bra.w	loc_14E0A
00014F9E                            ; End of function Sonic_HitWall
00014F9E                            
00014F9E                            ; ---------------------------------------------------------------------------
00014F9E                            ; Subroutine to	detect when an object hits a wall to its left
00014F9E                            ; ---------------------------------------------------------------------------
00014F9E                            
00014F9E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00014F9E                            
00014F9E                            
00014F9E                            ObjHitWallLeft:
00014F9E D668 0008                  		add.w	8(a0),d3
00014FA2 3428 000C                  		move.w	$C(a0),d2
00014FA6 49F8 F768                  		lea	($FFFFF768).w,a4
00014FAA 18BC 0000                  		move.b	#0,(a4)
00014FAE 367C FFF0                  		movea.w	#-$10,a3
00014FB2 3C3C 0800                  		move.w	#$800,d6
00014FB6 7A0E                       		moveq	#$E,d5
00014FB8 6100 FA84                  		bsr.w	FindWall
00014FBC 1638 F768                  		move.b	($FFFFF768).w,d3
00014FC0 0803 0000                  		btst	#0,d3
00014FC4 6700                       		beq.s	locret_15098
00014FC6 163C 0040                  		move.b	#$40,d3
00014FCA                            
00014FCA                            locret_15098:
00014FCA 4E75                       		rts	
00014FCC                            ; End of function ObjHitWallLeft
00014FCC                            
00014FCC                            ; ===========================================================================
00014FCC                            ; ---------------------------------------------------------------------------
00014FCC                            ; Object 66 - rotating disc that grabs Sonic (SBZ)
00014FCC                            ; ---------------------------------------------------------------------------
00014FCC                            
00014FCC                            Obj66:					; XREF: Obj_Index
00014FCC 7000                       		moveq	#0,d0
00014FCE 1028 0024                  		move.b	$24(a0),d0
00014FD2 323B 0000                  		move.w	Obj66_Index(pc,d0.w),d1
00014FD6 4EFB 1000                  		jmp	Obj66_Index(pc,d1.w)
00014FDA                            ; ===========================================================================
00014FDA 0000                       Obj66_Index:	dc.w Obj66_Main-Obj66_Index
00014FDC 0000                       		dc.w Obj66_Action-Obj66_Index
00014FDE 0000                       		dc.w Obj66_Display-Obj66_Index
00014FE0 0000                       		dc.w Obj66_Release-Obj66_Index
00014FE2                            ; ===========================================================================
00014FE2                            
00014FE2                            Obj66_Main:				; XREF: Obj66_Index
00014FE2 5428 0024                  		addq.b	#2,$24(a0)
00014FE6 323C 0001                  		move.w	#1,d1
00014FEA 2248                       		movea.l	a0,a1
00014FEC 6000                       		bra.s	Obj66_MakeItem
00014FEE                            ; ===========================================================================
00014FEE                            
00014FEE                            Obj66_Loop:
00014FEE 6100 8A42                  		bsr.w	SingleObjLoad
00014FF2 6600                       		bne.s	loc_150FE
00014FF4 12BC 0066                  		move.b	#$66,0(a1)
00014FF8 5829 0024                  		addq.b	#4,$24(a1)
00014FFC 3368 0008 0008             		move.w	8(a0),8(a1)
00015002 3368 000C 000C             		move.w	$C(a0),$C(a1)
00015008 137C 0003 0018             		move.b	#3,$18(a1)
0001500E 137C 0010 001A             		move.b	#$10,$1A(a1)
00015014                            
00015014                            Obj66_MakeItem:				; XREF: Obj66_Main
00015014 237C 0000 0000 0004        		move.l	#Map_obj66,4(a1)
0001501C 337C 4348 0002             		move.w	#$4348,2(a1)
00015022 0029 0004 0001             		ori.b	#4,1(a1)
00015028 137C 0038 0019             		move.b	#$38,$19(a1)
0001502E                            
0001502E                            loc_150FE:
0001502E 51C9 FFBE                  		dbf	d1,Obj66_Loop
00015032                            
00015032 117C 0030 0019             		move.b	#$30,$19(a0)
00015038 117C 0004 0018             		move.b	#4,$18(a0)
0001503E 317C 003C 0030             		move.w	#$3C,$30(a0)
00015044 117C 0001 0034             		move.b	#1,$34(a0)
0001504A 1168 0028 0038             		move.b	$28(a0),$38(a0)
00015050                            
00015050                            Obj66_Action:				; XREF: Obj66_Index
00015050 6100 0000                  		bsr.w	Obj66_ChkSwitch
00015054 4A28 0001                  		tst.b	1(a0)
00015058 6A00 0000                  		bpl.w	Obj66_Display
0001505C 323C 0030                  		move.w	#$30,d1
00015060 3401                       		move.w	d1,d2
00015062 3602                       		move.w	d2,d3
00015064 5243                       		addq.w	#1,d3
00015066 3828 0008                  		move.w	8(a0),d4
0001506A 6100 A900                  		bsr.w	SolidObject
0001506E 0828 0005 0022             		btst	#5,$22(a0)
00015074 6700 0000                  		beq.w	Obj66_Display
00015078 43F8 D000                  		lea	($FFFFD000).w,a1
0001507C 720E                       		moveq	#$E,d1
0001507E 3029 0008                  		move.w	8(a1),d0
00015082 B068 0008                  		cmp.w	8(a0),d0
00015086 6500                       		bcs.s	Obj66_GrabSonic
00015088 7207                       		moveq	#7,d1
0001508A                            
0001508A                            Obj66_GrabSonic:
0001508A B228 001A                  		cmp.b	$1A(a0),d1
0001508E 6600                       		bne.s	Obj66_Display
00015090 1141 0032                  		move.b	d1,$32(a0)
00015094 5828 0024                  		addq.b	#4,$24(a0)
00015098 11FC 0001 F7C8             		move.b	#1,($FFFFF7C8).w ; lock	controls
0001509E 137C 0002 001C             		move.b	#2,$1C(a1)	; make Sonic use "rolling" animation
000150A4 337C 0800 0014             		move.w	#$800,$14(a1)
000150AA 337C 0000 0010             		move.w	#0,$10(a1)
000150B0 337C 0000 0012             		move.w	#0,$12(a1)
000150B6 08A8 0005 0022             		bclr	#5,$22(a0)
000150BC 08A9 0005 0022             		bclr	#5,$22(a1)
000150C2 08E9 0001 0022             		bset	#1,$22(a1)
000150C8 3429 0008                  		move.w	8(a1),d2
000150CC 3629 000C                  		move.w	$C(a1),d3
000150D0 6100 0000                  		bsr.w	Obj66_ChgPos
000150D4 D569 0008                  		add.w	d2,8(a1)
000150D8 D769 000C                  		add.w	d3,$C(a1)
000150DC E0E9 0008                  		asr	8(a1)
000150E0 E0E9 000C                  		asr	$C(a1)
000150E4                            
000150E4                            Obj66_Display:				; XREF: Obj66_Index
000150E4 6000 A55E                  		bra.w	MarkObjGone
000150E8                            ; ===========================================================================
000150E8                            
000150E8                            Obj66_Release:				; XREF: Obj66_Index
000150E8 1028 001A                  		move.b	$1A(a0),d0
000150EC 0C00 0004                  		cmpi.b	#4,d0
000150F0 6700                       		beq.s	loc_151C8
000150F2 0C00 0007                  		cmpi.b	#7,d0
000150F6 6600                       		bne.s	loc_151F8
000150F8                            
000150F8                            loc_151C8:
000150F8 B028 0032                  		cmp.b	$32(a0),d0
000150FC 6700                       		beq.s	loc_151F8
000150FE 43F8 D000                  		lea	($FFFFD000).w,a1
00015102 337C 0000 0010             		move.w	#0,$10(a1)
00015108 337C 0800 0012             		move.w	#$800,$12(a1)
0001510E 0C00 0004                  		cmpi.b	#4,d0
00015112 6700                       		beq.s	loc_151F0
00015114 337C 0800 0010             		move.w	#$800,$10(a1)
0001511A 337C 0800 0012             		move.w	#$800,$12(a1)
00015120                            
00015120                            loc_151F0:
00015120 4238 F7C8                  		clr.b	($FFFFF7C8).w	; unlock controls
00015124 5928 0024                  		subq.b	#4,$24(a0)
00015128                            
00015128                            loc_151F8:
00015128 6100                       		bsr.s	Obj66_ChkSwitch
0001512A 6100                       		bsr.s	Obj66_ChgPos
0001512C 6000 A516                  		bra.w	MarkObjGone
00015130                            
00015130                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015130                            
00015130                            
00015130                            Obj66_ChkSwitch:			; XREF: Obj66_Action
00015130 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015134 7000                       		moveq	#0,d0
00015136 1028 0038                  		move.b	$38(a0),d0
0001513A 0832 0000 0000             		btst	#0,(a2,d0.w)	; is switch pressed?
00015140 6700                       		beq.s	loc_15224	; if not, branch
00015142 4A28 0036                  		tst.b	$36(a0)		; has switch previously	been pressed?
00015146 6600                       		bne.s	Obj66_Animate	; if yes, branch
00015148 4428 0034                  		neg.b	$34(a0)
0001514C 117C 0001 0036             		move.b	#1,$36(a0)	; set to "previously pressed"
00015152 6000                       		bra.s	Obj66_Animate
00015154                            ; ===========================================================================
00015154                            
00015154                            loc_15224:
00015154 4228 0036                  		clr.b	$36(a0)		; set to "not yet pressed"
00015158                            
00015158                            Obj66_Animate:
00015158 5328 001E                  		subq.b	#1,$1E(a0)
0001515C 6A00                       		bpl.s	locret_15246
0001515E 117C 0007 001E             		move.b	#7,$1E(a0)
00015164 1228 0034                  		move.b	$34(a0),d1
00015168 1028 001A                  		move.b	$1A(a0),d0
0001516C D001                       		add.b	d1,d0
0001516E 0200 000F                  		andi.b	#$F,d0
00015172 1140 001A                  		move.b	d0,$1A(a0)
00015176                            
00015176                            locret_15246:
00015176 4E75                       		rts	
00015178                            ; End of function Obj66_ChkSwitch
00015178                            
00015178                            
00015178                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00015178                            
00015178                            
00015178                            Obj66_ChgPos:				; XREF: Obj66_GrabSonic
00015178 43F8 D000                  		lea	($FFFFD000).w,a1
0001517C 7000                       		moveq	#0,d0
0001517E 1028 001A                  		move.b	$1A(a0),d0
00015182 D040                       		add.w	d0,d0
00015184 45FB 0000                  		lea	Obj66_PosData(pc,d0.w),a2
00015188 101A                       		move.b	(a2)+,d0
0001518A 4880                       		ext.w	d0
0001518C D068 0008                  		add.w	8(a0),d0
00015190 3340 0008                  		move.w	d0,8(a1)
00015194 101A                       		move.b	(a2)+,d0
00015196 4880                       		ext.w	d0
00015198 D068 000C                  		add.w	$C(a0),d0
0001519C 3340 000C                  		move.w	d0,$C(a1)
000151A0 4E75                       		rts	
000151A2                            ; End of function Obj66_ChgPos
000151A2                            
000151A2                            ; ===========================================================================
000151A2 E000 E20E                  Obj66_PosData:	dc.b  $E0,   0,	$E2,  $E ; disc	x-pos, Sonic x-pos, disc y-pos,	Sonic y-pos
000151A6 E818 F21E                  		dc.b  $E8, $18,	$F2, $1E
000151AA 0020 0E1E                  		dc.b	0, $20,	 $E, $1E
000151AE 1818 1E0E                  		dc.b  $18, $18,	$1E,  $E
000151B2 2000 1EF2                  		dc.b  $20,   0,	$1E, $F2
000151B6 18E8 0EE2                  		dc.b  $18, $E8,	 $E, $E2
000151BA 00E0 F2E2                  		dc.b	0, $E0,	$F2, $E2
000151BE E8E8 E2F2                  		dc.b  $E8, $E8,	$E2, $F2
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            Map_obj66:
000151C2                            	include "_maps\obj66.asm"
000151C2                            ; ---------------------------------------------------------------------------
000151C2                            ; Sprite mappings - rotating disc that grabs Sonic (SBZ)
000151C2                            ; ---------------------------------------------------------------------------
000151C2 0000 0000                  		dc.w byte_152B4-Map_obj66, byte_152D3-Map_obj66
000151C6 0000 0000                  		dc.w byte_152F2-Map_obj66, byte_15311-Map_obj66
000151CA 0000 0000                  		dc.w byte_15330-Map_obj66, byte_1534F-Map_obj66
000151CE 0000 0000                  		dc.w byte_1536E-Map_obj66, byte_1538D-Map_obj66
000151D2 0000 0000                  		dc.w byte_153AC-Map_obj66, byte_153CB-Map_obj66
000151D6 0000 0000                  		dc.w byte_153EA-Map_obj66, byte_15409-Map_obj66
000151DA 0000 0000                  		dc.w byte_15428-Map_obj66, byte_15447-Map_obj66
000151DE 0000 0000                  		dc.w byte_15466-Map_obj66, byte_15485-Map_obj66
000151E2 0000                       		dc.w byte_154A4-Map_obj66
000151E4 06                         byte_152B4:	dc.b 6
000151E5 E805 0022 D0               		dc.b $E8, 5, 0,	$22, $D0
000151EA 0805 1022 D0               		dc.b 8,	5, $10,	$22, $D0
000151EF E80A 0000 C8               		dc.b $E8, $A, 0, 0, $C8
000151F4 E80A 0800 E0               		dc.b $E8, $A, 8, 0, $E0
000151F9 000A 1000 C8               		dc.b 0,	$A, $10, 0, $C8
000151FE 000A 1800 E0               		dc.b 0,	$A, $18, 0, $E0
00015203 06                         byte_152D3:	dc.b 6
00015204 F803 0026 D0               		dc.b $F8, 3, 0,	$26, $D0
00015209 1805 002A D8               		dc.b $18, 5, 0,	$2A, $D8
0001520E F60A 0000 CA               		dc.b $F6, $A, 0, 0, $CA
00015213 F60A 0800 E2               		dc.b $F6, $A, 8, 0, $E2
00015218 0E0A 1000 CA               		dc.b $E, $A, $10, 0, $CA
0001521D 0E0A 1800 E2               		dc.b $E, $A, $18, 0, $E2
00015222 06                         byte_152F2:	dc.b 6
00015223 0006 002E D0               		dc.b 0,	6, 0, $2E, $D0
00015228 2009 0034 E8               		dc.b $20, 9, 0,	$34, $E8
0001522D 000A 0000 D0               		dc.b 0,	$A, 0, 0, $D0
00015232 000A 0800 E8               		dc.b 0,	$A, 8, 0, $E8
00015237 180A 1000 D0               		dc.b $18, $A, $10, 0, $D0
0001523C 180A 1800 E8               		dc.b $18, $A, $18, 0, $E8
00015241 06                         byte_15311:	dc.b 6
00015242 0807 003A D8               		dc.b 8,	7, 0, $3A, $D8
00015247 2808 0042 F0               		dc.b $28, 8, 0,	$42, $F0
0001524C 060A 0000 DA               		dc.b 6,	$A, 0, 0, $DA
00015251 060A 0800 F2               		dc.b 6,	$A, 8, 0, $F2
00015256 1E0A 1000 DA               		dc.b $1E, $A, $10, 0, $DA
0001525B 1E0A 1800 F2               		dc.b $1E, $A, $18, 0, $F2
00015260 06                         byte_15330:	dc.b 6
00015261 2005 0045 E8               		dc.b $20, 5, 0,	$45, $E8
00015266 2005 0845 08               		dc.b $20, 5, 8,	$45, 8
0001526B 080A 0000 E8               		dc.b 8,	$A, 0, 0, $E8
00015270 080A 0800 00               		dc.b 8,	$A, 8, 0, 0
00015275 200A 1000 E8               		dc.b $20, $A, $10, 0, $E8
0001527A 200A 1800 00               		dc.b $20, $A, $18, 0, 0
0001527F 06                         byte_1534F:	dc.b 6
00015280 2808 0842 F8               		dc.b $28, 8, 8,	$42, $F8
00015285 0807 083A 18               		dc.b 8,	7, 8, $3A, $18
0001528A 060A 0000 F6               		dc.b 6,	$A, 0, 0, $F6
0001528F 060A 0800 0E               		dc.b 6,	$A, 8, 0, $E
00015294 1E0A 1000 F6               		dc.b $1E, $A, $10, 0, $F6
00015299 1E0A 1800 0E               		dc.b $1E, $A, $18, 0, $E
0001529E 06                         byte_1536E:	dc.b 6
0001529F 2009 0834 00               		dc.b $20, 9, 8,	$34, 0
000152A4 0006 082E 20               		dc.b 0,	6, 8, $2E, $20
000152A9 000A 0000 00               		dc.b 0,	$A, 0, 0, 0
000152AE 000A 0800 18               		dc.b 0,	$A, 8, 0, $18
000152B3 180A 1000 00               		dc.b $18, $A, $10, 0, 0
000152B8 180A 1800 18               		dc.b $18, $A, $18, 0, $18
000152BD 06                         byte_1538D:	dc.b 6
000152BE 1805 082A 18               		dc.b $18, 5, 8,	$2A, $18
000152C3 F803 0826 28               		dc.b $F8, 3, 8,	$26, $28
000152C8 F60A 0000 06               		dc.b $F6, $A, 0, 0, 6
000152CD F60A 0800 1E               		dc.b $F6, $A, 8, 0, $1E
000152D2 0E0A 1000 06               		dc.b $E, $A, $10, 0, 6
000152D7 0E0A 1800 1E               		dc.b $E, $A, $18, 0, $1E
000152DC 06                         byte_153AC:	dc.b 6
000152DD E805 0822 20               		dc.b $E8, 5, 8,	$22, $20
000152E2 0805 1822 20               		dc.b 8,	5, $18,	$22, $20
000152E7 E80A 0000 08               		dc.b $E8, $A, 0, 0, 8
000152EC E80A 0800 20               		dc.b $E8, $A, 8, 0, $20
000152F1 000A 1000 08               		dc.b 0,	$A, $10, 0, 8
000152F6 000A 1800 20               		dc.b 0,	$A, $18, 0, $20
000152FB 06                         byte_153CB:	dc.b 6
000152FC D805 182A 18               		dc.b $D8, 5, $18, $2A, $18
00015301 E803 1826 28               		dc.b $E8, 3, $18, $26, $28
00015306 DA0A 0000 06               		dc.b $DA, $A, 0, 0, 6
0001530B DA0A 0800 1E               		dc.b $DA, $A, 8, 0, $1E
00015310 F20A 1000 06               		dc.b $F2, $A, $10, 0, 6
00015315 F20A 1800 1E               		dc.b $F2, $A, $18, 0, $1E
0001531A 06                         byte_153EA:	dc.b 6
0001531B D009 1834 00               		dc.b $D0, 9, $18, $34, 0
00015320 E806 182E 20               		dc.b $E8, 6, $18, $2E, $20
00015325 D00A 0000 00               		dc.b $D0, $A, 0, 0, 0
0001532A D00A 0800 18               		dc.b $D0, $A, 8, 0, $18
0001532F E80A 1000 00               		dc.b $E8, $A, $10, 0, 0
00015334 E80A 1800 18               		dc.b $E8, $A, $18, 0, $18
00015339 06                         byte_15409:	dc.b 6
0001533A D008 1842 F8               		dc.b $D0, 8, $18, $42, $F8
0001533F D807 183A 18               		dc.b $D8, 7, $18, $3A, $18
00015344 CA0A 0000 F6               		dc.b $CA, $A, 0, 0, $F6
00015349 CA0A 0800 0E               		dc.b $CA, $A, 8, 0, $E
0001534E E20A 1000 F6               		dc.b $E2, $A, $10, 0, $F6
00015353 E20A 1800 0E               		dc.b $E2, $A, $18, 0, $E
00015358 06                         byte_15428:	dc.b 6
00015359 D005 1045 E8               		dc.b $D0, 5, $10, $45, $E8
0001535E D005 1845 08               		dc.b $D0, 5, $18, $45, 8
00015363 C80A 0000 E8               		dc.b $C8, $A, 0, 0, $E8
00015368 C80A 0800 00               		dc.b $C8, $A, 8, 0, 0
0001536D E00A 1000 E8               		dc.b $E0, $A, $10, 0, $E8
00015372 E00A 1800 00               		dc.b $E0, $A, $18, 0, 0
00015377 06                         byte_15447:	dc.b 6
00015378 D807 103A D8               		dc.b $D8, 7, $10, $3A, $D8
0001537D D008 1042 F0               		dc.b $D0, 8, $10, $42, $F0
00015382 CA0A 0000 DA               		dc.b $CA, $A, 0, 0, $DA
00015387 CA0A 0800 F2               		dc.b $CA, $A, 8, 0, $F2
0001538C E20A 1000 DA               		dc.b $E2, $A, $10, 0, $DA
00015391 E20A 1800 F2               		dc.b $E2, $A, $18, 0, $F2
00015396 06                         byte_15466:	dc.b 6
00015397 E806 102E D0               		dc.b $E8, 6, $10, $2E, $D0
0001539C D009 1034 E8               		dc.b $D0, 9, $10, $34, $E8
000153A1 D00A 0000 D0               		dc.b $D0, $A, 0, 0, $D0
000153A6 D00A 0800 E8               		dc.b $D0, $A, 8, 0, $E8
000153AB E80A 1000 D0               		dc.b $E8, $A, $10, 0, $D0
000153B0 E80A 1800 E8               		dc.b $E8, $A, $18, 0, $E8
000153B5 06                         byte_15485:	dc.b 6
000153B6 E803 1026 D0               		dc.b $E8, 3, $10, $26, $D0
000153BB D805 102A D8               		dc.b $D8, 5, $10, $2A, $D8
000153C0 DA0A 0000 CA               		dc.b $DA, $A, 0, 0, $CA
000153C5 DA0A 0800 E2               		dc.b $DA, $A, 8, 0, $E2
000153CA F20A 1000 CA               		dc.b $F2, $A, $10, 0, $CA
000153CF F20A 1800 E2               		dc.b $F2, $A, $18, 0, $E2
000153D4 0C                         byte_154A4:	dc.b $C
000153D5 C80D 0009 E0               		dc.b $C8, $D, 0, 9, $E0
000153DA D00A 0011 D0               		dc.b $D0, $A, 0, $11, $D0
000153DF E007 001A C8               		dc.b $E0, 7, 0,	$1A, $C8
000153E4 C80D 0809 00               		dc.b $C8, $D, 8, 9, 0
000153E9 D00A 0811 18               		dc.b $D0, $A, 8, $11, $18
000153EE E007 081A 28               		dc.b $E0, 7, 8,	$1A, $28
000153F3 0007 101A C8               		dc.b 0,	7, $10,	$1A, $C8
000153F8 180A 1011 D0               		dc.b $18, $A, $10, $11,	$D0
000153FD 280D 1009 E0               		dc.b $28, $D, $10, 9, $E0
00015402 280D 1809 00               		dc.b $28, $D, $18, 9, 0
00015407 180A 1811 18               		dc.b $18, $A, $18, $11,	$18
0001540C 0007 181A 28               		dc.b 0,	7, $18,	$1A, $28
00015412 00                         		even
00015412 00                         		even
00015412                            
00015412                            ; ===========================================================================
00015412                            ; ---------------------------------------------------------------------------
00015412                            ; Object 67 - disc that	you run	around (SBZ)
00015412                            ; ---------------------------------------------------------------------------
00015412                            
00015412                            Obj67:					; XREF: Obj_Index
00015412 7000                       		moveq	#0,d0
00015414 1028 0024                  		move.b	$24(a0),d0
00015418 323B 0000                  		move.w	Obj67_Index(pc,d0.w),d1
0001541C 4EFB 1000                  		jmp	Obj67_Index(pc,d1.w)
00015420                            ; ===========================================================================
00015420 0000                       Obj67_Index:	dc.w Obj67_Main-Obj67_Index
00015422 0000                       		dc.w Obj67_Action-Obj67_Index
00015424                            ; ===========================================================================
00015424                            
00015424                            Obj67_Main:				; XREF: Obj67_Index
00015424 5428 0024                  		addq.b	#2,$24(a0)
00015428 217C 0000 0000 0004        		move.l	#Map_obj67,4(a0)
00015430 317C C344 0002             		move.w	#$C344,2(a0)
00015436 117C 0004 0001             		move.b	#4,1(a0)
0001543C 117C 0004 0018             		move.b	#4,$18(a0)
00015442 117C 0008 0019             		move.b	#8,$19(a0)
00015448 3168 0008 0032             		move.w	8(a0),$32(a0)
0001544E 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015454 117C 0018 0034             		move.b	#$18,$34(a0)
0001545A 117C 0048 0038             		move.b	#$48,$38(a0)
00015460 1228 0028                  		move.b	$28(a0),d1	; get object type
00015464 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
00015468 6700                       		beq.s	loc_15546
0001546A 117C 0010 0034             		move.b	#$10,$34(a0)
00015470 117C 0038 0038             		move.b	#$38,$38(a0)
00015476                            
00015476                            loc_15546:
00015476 1228 0028                  		move.b	$28(a0),d1	; get object type
0001547A 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
0001547E 4881                       		ext.w	d1
00015480 E741                       		asl.w	#3,d1
00015482 3141 0036                  		move.w	d1,$36(a0)
00015486 1028 0022                  		move.b	$22(a0),d0
0001548A E418                       		ror.b	#2,d0
0001548C 0200 00C0                  		andi.b	#-$40,d0
00015490 1140 0026                  		move.b	d0,$26(a0)
00015494                            
00015494                            Obj67_Action:				; XREF: Obj67_Index
00015494 6100 0000                  		bsr.w	Obj67_MoveSonic
00015498 6100 0000                  		bsr.w	Obj67_MoveSpot
0001549C 6000 0000                  		bra.w	Obj67_ChkDel
000154A0                            ; ===========================================================================
000154A0                            
000154A0                            Obj67_MoveSonic:			; XREF: Obj67_Action
000154A0 7400                       		moveq	#0,d2
000154A2 1428 0038                  		move.b	$38(a0),d2
000154A6 3602                       		move.w	d2,d3
000154A8 D643                       		add.w	d3,d3
000154AA 43F8 D000                  		lea	($FFFFD000).w,a1
000154AE 3029 0008                  		move.w	8(a1),d0
000154B2 9068 0032                  		sub.w	$32(a0),d0
000154B6 D042                       		add.w	d2,d0
000154B8 B043                       		cmp.w	d3,d0
000154BA 6400                       		bcc.s	loc_155A8
000154BC 3229 000C                  		move.w	$C(a1),d1
000154C0 9268 0030                  		sub.w	$30(a0),d1
000154C4 D242                       		add.w	d2,d1
000154C6 B243                       		cmp.w	d3,d1
000154C8 6400                       		bcc.s	loc_155A8
000154CA 0829 0001 0022             		btst	#1,$22(a1)
000154D0 6700                       		beq.s	loc_155B8
000154D2 4228 003A                  		clr.b	$3A(a0)
000154D6 4E75                       		rts	
000154D8                            ; ===========================================================================
000154D8                            
000154D8                            loc_155A8:
000154D8 4A28 003A                  		tst.b	$3A(a0)
000154DC 6700                       		beq.s	locret_155B6
000154DE 4229 0038                  		clr.b	$38(a1)
000154E2 4228 003A                  		clr.b	$3A(a0)
000154E6                            
000154E6                            locret_155B6:
000154E6 4E75                       		rts	
000154E8                            ; ===========================================================================
000154E8                            
000154E8                            loc_155B8:
000154E8 4A28 003A                  		tst.b	$3A(a0)
000154EC 6600                       		bne.s	loc_155E2
000154EE 117C 0001 003A             		move.b	#1,$3A(a0)
000154F4 0829 0002 0022             		btst	#2,$22(a1)
000154FA 6600                       		bne.s	loc_155D0
000154FC 4229 001C                  		clr.b	$1C(a1)
00015500                            
00015500                            loc_155D0:
00015500 08A9 0005 0022             		bclr	#5,$22(a1)
00015506 137C 0001 001D             		move.b	#1,$1D(a1)
0001550C 137C 0001 0038             		move.b	#1,$38(a1)
00015512                            
00015512                            loc_155E2:
00015512 3029 0014                  		move.w	$14(a1),d0
00015516 4A68 0036                  		tst.w	$36(a0)
0001551A 6A00                       		bpl.s	loc_15608
0001551C 0C40 FC00                  		cmpi.w	#-$400,d0
00015520 6F00                       		ble.s	loc_155FA
00015522 337C FC00 0014             		move.w	#-$400,$14(a1)
00015528 4E75                       		rts	
0001552A                            ; ===========================================================================
0001552A                            
0001552A                            loc_155FA:
0001552A 0C40 F100                  		cmpi.w	#-$F00,d0
0001552E 6C00                       		bge.s	locret_15606
00015530 337C F100 0014             		move.w	#-$F00,$14(a1)
00015536                            
00015536                            locret_15606:
00015536 4E75                       		rts	
00015538                            ; ===========================================================================
00015538                            
00015538                            loc_15608:
00015538 0C40 0400                  		cmpi.w	#$400,d0
0001553C 6C00                       		bge.s	loc_15616
0001553E 337C 0400 0014             		move.w	#$400,$14(a1)
00015544 4E75                       		rts	
00015546                            ; ===========================================================================
00015546                            
00015546                            loc_15616:
00015546 0C40 0F00                  		cmpi.w	#$F00,d0
0001554A 6F00                       		ble.s	locret_15622
0001554C 337C 0F00 0014             		move.w	#$F00,$14(a1)
00015552                            
00015552                            locret_15622:
00015552 4E75                       		rts	
00015554                            ; ===========================================================================
00015554                            
00015554                            Obj67_MoveSpot:				; XREF: Obj67_Action
00015554 3028 0036                  		move.w	$36(a0),d0
00015558 D168 0026                  		add.w	d0,$26(a0)
0001555C 1028 0026                  		move.b	$26(a0),d0
00015560 4EB9 0000 29DA             		jsr	(CalcSine).l
00015566 3428 0030                  		move.w	$30(a0),d2
0001556A 3628 0032                  		move.w	$32(a0),d3
0001556E 7800                       		moveq	#0,d4
00015570 1828 0034                  		move.b	$34(a0),d4
00015574 E14C                       		lsl.w	#8,d4
00015576 2A04                       		move.l	d4,d5
00015578 C9C0                       		muls.w	d0,d4
0001557A 4844                       		swap	d4
0001557C CBC1                       		muls.w	d1,d5
0001557E 4845                       		swap	d5
00015580 D842                       		add.w	d2,d4
00015582 DA43                       		add.w	d3,d5
00015584 3144 000C                  		move.w	d4,$C(a0)
00015588 3145 0008                  		move.w	d5,8(a0)
0001558C 4E75                       		rts	
0001558E                            ; ===========================================================================
0001558E                            
0001558E                            Obj67_ChkDel:				; XREF: Obj67_Action
0001558E 3028 0032                  		move.w	$32(a0),d0
00015592 0240 FF80                  		andi.w	#-$80,d0
00015596 3238 F700                  		move.w	($FFFFF700).w,d1
0001559A 0441 0080                  		subi.w	#$80,d1
0001559E 0241 FF80                  		andi.w	#-$80,d1
000155A2 9041                       		sub.w	d1,d0
000155A4 0C40 0280                  		cmpi.w	#$280,d0
000155A8 6200                       		bhi.s	Obj67_Delete
000155AA 4EF9 0000 D5AC             		jmp	DisplaySprite
000155B0                            ; ===========================================================================
000155B0                            
000155B0                            Obj67_Delete:
000155B0 4EFA 8036                  		jmp	DeleteObject
000155B4                            ; ===========================================================================
000155B4                            ; ---------------------------------------------------------------------------
000155B4                            ; Sprite mappings - disc that you run around (SBZ)
000155B4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000155B4                            ; part of the level tiles.)
000155B4                            ; ---------------------------------------------------------------------------
000155B4                            Map_obj67:
000155B4                            	include "_maps\obj67.asm"
000155B4                            ; ---------------------------------------------------------------------------
000155B4                            ; Sprite mappings - disc that you run around (SBZ)
000155B4                            ; (It's just a small blob that moves around in a circle. The disc itself is
000155B4                            ; part of the level tiles.)
000155B4                            ; ---------------------------------------------------------------------------
000155B4 0000                       		dc.w byte_15688-Map_obj67
000155B6 01                         byte_15688:	dc.b 1
000155B7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
000155BC                            		even
000155BC                            		even
000155BC                            
000155BC                            ; ===========================================================================
000155BC                            ; ---------------------------------------------------------------------------
000155BC                            ; Object 68 - conveyor belts (SBZ)
000155BC                            ; ---------------------------------------------------------------------------
000155BC                            
000155BC                            Obj68:					; XREF: Obj_Index
000155BC 7000                       		moveq	#0,d0
000155BE 1028 0024                  		move.b	$24(a0),d0
000155C2 323B 0000                  		move.w	Obj68_Index(pc,d0.w),d1
000155C6 4EFB 1000                  		jmp	Obj68_Index(pc,d1.w)
000155CA                            ; ===========================================================================
000155CA 0000                       Obj68_Index:	dc.w Obj68_Main-Obj68_Index
000155CC 0000                       		dc.w Obj68_Action-Obj68_Index
000155CE                            ; ===========================================================================
000155CE                            
000155CE                            Obj68_Main:				; XREF: Obj68_Index
000155CE 5428 0024                  		addq.b	#2,$24(a0)
000155D2 117C 0080 0038             		move.b	#128,$38(a0)	; set width to 128 pixels
000155D8 1228 0028                  		move.b	$28(a0),d1	; get object type
000155DC 0201 000F                  		andi.b	#$F,d1		; read only the	2nd digit
000155E0 6700                       		beq.s	loc_156BA	; if zero, branch
000155E2 117C 0038 0038             		move.b	#56,$38(a0)	; set width to 56 pixels
000155E8                            
000155E8                            loc_156BA:
000155E8 1228 0028                  		move.b	$28(a0),d1	; get object type
000155EC 0201 00F0                  		andi.b	#$F0,d1		; read only the	1st digit
000155F0 4881                       		ext.w	d1
000155F2 E841                       		asr.w	#4,d1
000155F4 3141 0036                  		move.w	d1,$36(a0)	; set belt speed
000155F8                            
000155F8                            Obj68_Action:				; XREF: Obj68_Index
000155F8 6100                       		bsr.s	Obj68_MoveSonic
000155FA 3028 0008                  		move.w	8(a0),d0
000155FE 0240 FF80                  		andi.w	#$FF80,d0
00015602 3238 F700                  		move.w	($FFFFF700).w,d1
00015606 0441 0080                  		subi.w	#$80,d1
0001560A 0241 FF80                  		andi.w	#$FF80,d1
0001560E 9041                       		sub.w	d1,d0
00015610 0C40 0280                  		cmpi.w	#$280,d0
00015614 6200                       		bhi.s	Obj68_Delete
00015616 4E75                       		rts	
00015618                            ; ===========================================================================
00015618                            
00015618                            Obj68_Delete:
00015618 4EF9 0000 D5E8             		jmp	DeleteObject
0001561E                            ; ===========================================================================
0001561E                            
0001561E                            Obj68_MoveSonic:			; XREF: Obj68_Action
0001561E 7400                       		moveq	#0,d2
00015620 1428 0038                  		move.b	$38(a0),d2
00015624 3602                       		move.w	d2,d3
00015626 D643                       		add.w	d3,d3
00015628 43F8 D000                  		lea	($FFFFD000).w,a1
0001562C 3029 0008                  		move.w	8(a1),d0
00015630 9068 0008                  		sub.w	8(a0),d0
00015634 D042                       		add.w	d2,d0
00015636 B043                       		cmp.w	d3,d0
00015638 6400                       		bcc.s	locret_1572E
0001563A 3229 000C                  		move.w	$C(a1),d1
0001563E 9268 000C                  		sub.w	$C(a0),d1
00015642 0641 0030                  		addi.w	#$30,d1
00015646 0C41 0030                  		cmpi.w	#$30,d1
0001564A 6400                       		bcc.s	locret_1572E
0001564C 0829 0001 0022             		btst	#1,$22(a1)
00015652 6600                       		bne.s	locret_1572E
00015654 3028 0036                  		move.w	$36(a0),d0
00015658 D169 0008                  		add.w	d0,8(a1)
0001565C                            
0001565C                            locret_1572E:
0001565C 4E75                       		rts	
0001565E                            
0001565E                            ; ===========================================================================
0001565E                            ; ---------------------------------------------------------------------------
0001565E                            ; Object 69 - spinning platforms and trapdoors (SBZ)
0001565E                            ; ---------------------------------------------------------------------------
0001565E                            
0001565E                            Obj69:					; XREF: Obj_Index
0001565E 7000                       		moveq	#0,d0
00015660 1028 0024                  		move.b	$24(a0),d0
00015664 323B 0000                  		move.w	Obj69_Index(pc,d0.w),d1
00015668 4EFB 1000                  		jmp	Obj69_Index(pc,d1.w)
0001566C                            ; ===========================================================================
0001566C 0000                       Obj69_Index:	dc.w Obj69_Main-Obj69_Index
0001566E 0000                       		dc.w Obj69_Trapdoor-Obj69_Index
00015670 0000                       		dc.w Obj69_Spinner-Obj69_Index
00015672                            ; ===========================================================================
00015672                            
00015672                            Obj69_Main:				; XREF: Obj69_Index
00015672 5428 0024                  		addq.b	#2,$24(a0)
00015676 217C 0000 0000 0004        		move.l	#Map_obj69,4(a0)
0001567E 317C 4492 0002             		move.w	#$4492,2(a0)
00015684 0028 0004 0001             		ori.b	#4,1(a0)
0001568A 117C 0080 0019             		move.b	#$80,$19(a0)
00015690 7000                       		moveq	#0,d0
00015692 1028 0028                  		move.b	$28(a0),d0
00015696 0240 000F                  		andi.w	#$F,d0
0001569A C0FC 003C                  		mulu.w	#$3C,d0
0001569E 3140 0032                  		move.w	d0,$32(a0)
000156A2 4A28 0028                  		tst.b	$28(a0)
000156A6 6A00                       		bpl.s	Obj69_Trapdoor
000156A8 5428 0024                  		addq.b	#2,$24(a0)
000156AC 217C 0000 0000 0004        		move.l	#Map_obj69a,4(a0)
000156B4 317C 04DF 0002             		move.w	#$4DF,2(a0)
000156BA 117C 0010 0019             		move.b	#$10,$19(a0)
000156C0 117C 0002 001C             		move.b	#2,$1C(a0)
000156C6 7000                       		moveq	#0,d0
000156C8 1028 0028                  		move.b	$28(a0),d0	; get object type
000156CC 3200                       		move.w	d0,d1
000156CE 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
000156D2 C0FC 0006                  		mulu.w	#6,d0		; multiply by 6
000156D6 3140 0030                  		move.w	d0,$30(a0)	; set time delay
000156DA 3140 0032                  		move.w	d0,$32(a0)
000156DE 0241 0070                  		andi.w	#$70,d1
000156E2 0641 0010                  		addi.w	#$10,d1
000156E6 E549                       		lsl.w	#2,d1
000156E8 5341                       		subq.w	#1,d1
000156EA 3141 0036                  		move.w	d1,$36(a0)
000156EE 6000                       		bra.s	Obj69_Spinner
000156F0                            ; ===========================================================================
000156F0                            
000156F0                            Obj69_Trapdoor:				; XREF: Obj69_Index
000156F0 5368 0030                  		subq.w	#1,$30(a0)
000156F4 6A00                       		bpl.s	Obj69_Animate
000156F6 3168 0032 0030             		move.w	$32(a0),$30(a0)
000156FC 0868 0000 001C             		bchg	#0,$1C(a0)
00015702 4A28 0001                  		tst.b	1(a0)
00015706 6A00                       		bpl.s	Obj69_Animate
00015708 303C 00BB                  		move.w	#$BB,d0
0001570C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play door sound
00015712                            
00015712                            Obj69_Animate:
00015712 43F9 0000 0000             		lea	(Ani_obj69).l,a1
00015718 4EB9 0000 A6D8             		jsr	AnimateSprite
0001571E 4A28 001A                  		tst.b	$1A(a0)		; is frame number 0 displayed?
00015722 6600                       		bne.s	Obj69_NotSolid	; if not, branch
00015724 323C 004B                  		move.w	#$4B,d1
00015728 343C 000C                  		move.w	#$C,d2
0001572C 3602                       		move.w	d2,d3
0001572E 5243                       		addq.w	#1,d3
00015730 3828 0008                  		move.w	8(a0),d4
00015734 6100 A236                  		bsr.w	SolidObject
00015738 6000 9F0A                  		bra.w	MarkObjGone
0001573C                            ; ===========================================================================
0001573C                            
0001573C                            Obj69_NotSolid:
0001573C 0828 0003 0022             		btst	#3,$22(a0)
00015742 6700                       		beq.s	Obj69_Display
00015744 43F8 D000                  		lea	($FFFFD000).w,a1
00015748 08A9 0003 0022             		bclr	#3,$22(a1)
0001574E 08A8 0003 0022             		bclr	#3,$22(a0)
00015754 4228 0025                  		clr.b	$25(a0)
00015758                            
00015758                            Obj69_Display:
00015758 6000 9EEA                  		bra.w	MarkObjGone
0001575C                            ; ===========================================================================
0001575C                            
0001575C                            Obj69_Spinner:				; XREF: Obj69_Index
0001575C 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015760 C068 0036                  		and.w	$36(a0),d0
00015764 6600                       		bne.s	Obj69_Delay
00015766 117C 0001 0034             		move.b	#1,$34(a0)
0001576C                            
0001576C                            Obj69_Delay:
0001576C 4A28 0034                  		tst.b	$34(a0)
00015770 6700                       		beq.s	Obj69_Animate2
00015772 5368 0030                  		subq.w	#1,$30(a0)
00015776 6A00                       		bpl.s	Obj69_Animate2
00015778 3168 0032 0030             		move.w	$32(a0),$30(a0)
0001577E 4228 0034                  		clr.b	$34(a0)
00015782 0868 0000 001C             		bchg	#0,$1C(a0)
00015788                            
00015788                            Obj69_Animate2:
00015788 43F9 0000 0000             		lea	(Ani_obj69).l,a1
0001578E 4EB9 0000 A6D8             		jsr	AnimateSprite
00015794 4A28 001A                  		tst.b	$1A(a0)		; check	if frame number	0 is displayed
00015798 6600                       		bne.s	Obj69_NotSolid2	; if not, branch
0001579A 323C 001B                  		move.w	#$1B,d1
0001579E 343C 0007                  		move.w	#7,d2
000157A2 3602                       		move.w	d2,d3
000157A4 5243                       		addq.w	#1,d3
000157A6 3828 0008                  		move.w	8(a0),d4
000157AA 6100 A1C0                  		bsr.w	SolidObject
000157AE 6000 9E94                  		bra.w	MarkObjGone
000157B2                            ; ===========================================================================
000157B2                            
000157B2                            Obj69_NotSolid2:
000157B2 0828 0003 0022             		btst	#3,$22(a0)
000157B8 6700                       		beq.s	Obj69_Display2
000157BA 43F8 D000                  		lea	($FFFFD000).w,a1
000157BE 08A9 0003 0022             		bclr	#3,$22(a1)
000157C4 08A8 0003 0022             		bclr	#3,$22(a0)
000157CA 4228 0025                  		clr.b	$25(a0)
000157CE                            
000157CE                            Obj69_Display2:
000157CE 6000 9E74                  		bra.w	MarkObjGone
000157D2                            ; ===========================================================================
000157D2                            Ani_obj69:
000157D2                            	include "_anim\obj69.asm"
000157D2                            ; ---------------------------------------------------------------------------
000157D2                            ; Animation script - trapdoor (SBZ)
000157D2                            ; ---------------------------------------------------------------------------
000157D2 0000                       		dc.w byte_158AC-Ani_obj69
000157D4 0000                       		dc.w byte_158B2-Ani_obj69
000157D6 0000                       		dc.w byte_158B8-Ani_obj69
000157D8 0000                       		dc.w byte_158CC-Ani_obj69
000157DA 0300 0102 FE01             byte_158AC:	dc.b 3,	0, 1, 2, $FE, 1
000157E0 0302 0100 FE01             byte_158B2:	dc.b 3,	2, 1, 0, $FE, 1
000157E6 0100 0102 0304 4342 4140+  byte_158B8:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000157F3 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
000157FA 0100 0102 0304 4342 4140+  byte_158CC:	dc.b 1,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
00015807 6423 2221 00FE 01          		dc.b $64, $23, $22, $21, 0, $FE, 1
0001580E                            		even
0001580E                            		even
0001580E                            
0001580E                            ; ---------------------------------------------------------------------------
0001580E                            ; Sprite mappings - trapdoor (SBZ)
0001580E                            ; ---------------------------------------------------------------------------
0001580E                            Map_obj69:
0001580E                            	include "_maps\obj69.asm"
0001580E                            ; ---------------------------------------------------------------------------
0001580E                            ; Sprite mappings - trapdoor (SBZ)
0001580E                            ; ---------------------------------------------------------------------------
0001580E 0000                       		dc.w byte_158E6-Map_obj69
00015810 0000                       		dc.w byte_158FB-Map_obj69
00015812 0000                       		dc.w byte_15924-Map_obj69
00015814 04                         byte_158E6:	dc.b 4
00015815 F40E 0000 C0               		dc.b $F4, $E, 0, 0, $C0
0001581A F40E 0800 E0               		dc.b $F4, $E, 8, 0, $E0
0001581F F40E 0000 00               		dc.b $F4, $E, 0, 0, 0
00015824 F40E 0800 20               		dc.b $F4, $E, 8, 0, $20
00015829 08                         byte_158FB:	dc.b 8
0001582A F20F 000C B6               		dc.b $F2, $F, 0, $C, $B6
0001582F 1A0F 180C D6               		dc.b $1A, $F, $18, $C, $D6
00015834 020A 001C D6               		dc.b 2,	$A, 0, $1C, $D6
00015839 120A 181C BE               		dc.b $12, $A, $18, $1C,	$BE
0001583E F20F 080C 2A               		dc.b $F2, $F, 8, $C, $2A
00015843 1A0F 100C 0A               		dc.b $1A, $F, $10, $C, $A
00015848 020A 081C 12               		dc.b 2,	$A, 8, $1C, $12
0001584D 120A 101C 2A               		dc.b $12, $A, $10, $1C,	$2A
00015852 04                         byte_15924:	dc.b 4
00015853 000B 0025 B4               		dc.b 0,	$B, 0, $25, $B4
00015858 200B 1025 B4               		dc.b $20, $B, $10, $25,	$B4
0001585D 000B 0025 34               		dc.b 0,	$B, 0, $25, $34
00015862 200B 1025 34               		dc.b $20, $B, $10, $25,	$34
00015868 00                         		even
00015868 00                         		even
00015868                            
00015868                            ; ---------------------------------------------------------------------------
00015868                            ; Sprite mappings - spinning platforms (SBZ)
00015868                            ; ---------------------------------------------------------------------------
00015868                            Map_obj69a:
00015868                            	include "_maps\obj69a.asm"
00015868                            ; ---------------------------------------------------------------------------
00015868                            ; Sprite mappings - spinning platforms (SBZ)
00015868                            ; ---------------------------------------------------------------------------
00015868 0000 0000                  		dc.w byte_15944-Map_obj69a, byte_1594F-Map_obj69a
0001586C 0000 0000                  		dc.w byte_1595A-Map_obj69a, byte_15965-Map_obj69a
00015870 0000                       		dc.w byte_15970-Map_obj69a
00015872 02                         byte_15944:	dc.b 2
00015873 F805 0000 F0               		dc.b $F8, 5, 0,	0, $F0
00015878 F805 0800 00               		dc.b $F8, 5, 8,	0, 0
0001587D 02                         byte_1594F:	dc.b 2
0001587E F00D 0014 F0               		dc.b $F0, $D, 0, $14, $F0
00015883 000D 001C F0               		dc.b 0,	$D, 0, $1C, $F0
00015888 02                         byte_1595A:	dc.b 2
00015889 F009 0004 F0               		dc.b $F0, 9, 0,	4, $F0
0001588E 0009 000A F8               		dc.b 0,	9, 0, $A, $F8
00015893 02                         byte_15965:	dc.b 2
00015894 F009 0024 F0               		dc.b $F0, 9, 0,	$24, $F0
00015899 0009 002A F8               		dc.b 0,	9, 0, $2A, $F8
0001589E 02                         byte_15970:	dc.b 2
0001589F F005 0010 F8               		dc.b $F0, 5, 0,	$10, $F8
000158A4 0005 1010 F8               		dc.b 0,	5, $10,	$10, $F8
000158AA 00                         		even
000158AA 00                         		even
000158AA                            
000158AA                            ; ===========================================================================
000158AA                            ; ---------------------------------------------------------------------------
000158AA                            ; Object 6A - ground saws and pizza cutters (SBZ)
000158AA                            ; ---------------------------------------------------------------------------
000158AA                            
000158AA                            Obj6A:					; XREF: Obj_Index
000158AA 7000                       		moveq	#0,d0
000158AC 1028 0024                  		move.b	$24(a0),d0
000158B0 323B 0000                  		move.w	Obj6A_Index(pc,d0.w),d1
000158B4 4EFB 1000                  		jmp	Obj6A_Index(pc,d1.w)
000158B8                            ; ===========================================================================
000158B8 0000                       Obj6A_Index:	dc.w Obj6A_Main-Obj6A_Index
000158BA 0000                       		dc.w Obj6A_Action-Obj6A_Index
000158BC                            ; ===========================================================================
000158BC                            
000158BC                            Obj6A_Main:				; XREF: Obj6A_Index
000158BC 5428 0024                  		addq.b	#2,$24(a0)
000158C0 217C 0000 0000 0004        		move.l	#Map_obj6A,4(a0)
000158C8 317C 43B5 0002             		move.w	#$43B5,2(a0)
000158CE 117C 0004 0001             		move.b	#4,1(a0)
000158D4 117C 0004 0018             		move.b	#4,$18(a0)
000158DA 117C 0020 0019             		move.b	#$20,$19(a0)
000158E0 3168 0008 003A             		move.w	8(a0),$3A(a0)
000158E6 3168 000C 0038             		move.w	$C(a0),$38(a0)
000158EC 0C28 0003 0028             		cmpi.b	#3,$28(a0)
000158F2 6400                       		bcc.s	Obj6A_Action
000158F4 117C 00A2 0020             		move.b	#$A2,$20(a0)
000158FA                            
000158FA                            Obj6A_Action:				; XREF: Obj6A_Index
000158FA 7000                       		moveq	#0,d0
000158FC 1028 0028                  		move.b	$28(a0),d0
00015900 0240 0007                  		andi.w	#7,d0
00015904 D040                       		add.w	d0,d0
00015906 323B 0000                  		move.w	Obj6A_TypeIndex(pc,d0.w),d1
0001590A 4EBB 1000                  		jsr	Obj6A_TypeIndex(pc,d1.w)
0001590E 3028 003A                  		move.w	$3A(a0),d0
00015912 0240 FF80                  		andi.w	#$FF80,d0
00015916 3238 F700                  		move.w	($FFFFF700).w,d1
0001591A 0441 0080                  		subi.w	#$80,d1
0001591E 0241 FF80                  		andi.w	#$FF80,d1
00015922 9041                       		sub.w	d1,d0
00015924 0C40 0280                  		cmpi.w	#$280,d0
00015928 6200                       		bhi.s	Obj6A_Delete
0001592A 4EF9 0000 D5AC             		jmp	DisplaySprite
00015930                            ; ===========================================================================
00015930                            
00015930                            Obj6A_Delete:
00015930 4EF9 0000 D5E8             		jmp	DeleteObject
00015936                            ; ===========================================================================
00015936 0000 0000                  Obj6A_TypeIndex:dc.w Obj6A_Type00-Obj6A_TypeIndex, Obj6A_Type01-Obj6A_TypeIndex
0001593A 0000 0000                  		dc.w Obj6A_Type02-Obj6A_TypeIndex, Obj6A_Type03-Obj6A_TypeIndex
0001593E 0000                       		dc.w Obj6A_Type04-Obj6A_TypeIndex
00015940                            ; ===========================================================================
00015940                            
00015940                            Obj6A_Type00:				; XREF: Obj6A_TypeIndex
00015940 4E75                       		rts	
00015942                            ; ===========================================================================
00015942                            
00015942                            Obj6A_Type01:				; XREF: Obj6A_TypeIndex
00015942 323C 0060                  		move.w	#$60,d1
00015946 7000                       		moveq	#0,d0
00015948 1038 FE6C                  		move.b	($FFFFFE6C).w,d0
0001594C 0828 0000 0022             		btst	#0,$22(a0)
00015952 6700                       		beq.s	Obj6A_Animate01
00015954 4440                       		neg.w	d0
00015956 D041                       		add.w	d1,d0
00015958                            
00015958                            Obj6A_Animate01:
00015958 3228 003A                  		move.w	$3A(a0),d1
0001595C 9240                       		sub.w	d0,d1
0001595E 3141 0008                  		move.w	d1,8(a0)	; move saw sideways
00015962 5328 001E                  		subq.b	#1,$1E(a0)
00015966 6A00                       		bpl.s	loc_15A46
00015968 117C 0002 001E             		move.b	#2,$1E(a0)	; time between frame changes
0001596E 0868 0000 001A             		bchg	#0,$1A(a0)	; change frame
00015974                            
00015974                            loc_15A46:
00015974 4A28 0001                  		tst.b	1(a0)
00015978 6A00                       		bpl.s	locret_15A60
0001597A 3038 FE04                  		move.w	($FFFFFE04).w,d0
0001597E 0240 000F                  		andi.w	#$F,d0
00015982 6600                       		bne.s	locret_15A60
00015984 303C 00B0                  		move.w	#$B0,d0
00015988 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
0001598E                            
0001598E                            locret_15A60:
0001598E 4E75                       		rts	
00015990                            ; ===========================================================================
00015990                            
00015990                            Obj6A_Type02:				; XREF: Obj6A_TypeIndex
00015990 323C 0030                  		move.w	#$30,d1
00015994 7000                       		moveq	#0,d0
00015996 1038 FE64                  		move.b	($FFFFFE64).w,d0
0001599A 0828 0000 0022             		btst	#0,$22(a0)
000159A0 6700                       		beq.s	Obj6A_Animate02
000159A2 4440                       		neg.w	d0
000159A4 0640 0080                  		addi.w	#$80,d0
000159A8                            
000159A8                            Obj6A_Animate02:
000159A8 3228 0038                  		move.w	$38(a0),d1
000159AC 9240                       		sub.w	d0,d1
000159AE 3141 000C                  		move.w	d1,$C(a0)	; move saw vertically
000159B2 5328 001E                  		subq.b	#1,$1E(a0)
000159B6 6A00                       		bpl.s	loc_15A96
000159B8 117C 0002 001E             		move.b	#2,$1E(a0)
000159BE 0868 0000 001A             		bchg	#0,$1A(a0)
000159C4                            
000159C4                            loc_15A96:
000159C4 4A28 0001                  		tst.b	1(a0)
000159C8 6A00                       		bpl.s	locret_15AB0
000159CA 1038 FE64                  		move.b	($FFFFFE64).w,d0
000159CE 0C00 0018                  		cmpi.b	#$18,d0
000159D2 6600                       		bne.s	locret_15AB0
000159D4 303C 00B0                  		move.w	#$B0,d0
000159D8 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
000159DE                            
000159DE                            locret_15AB0:
000159DE 4E75                       		rts	
000159E0                            ; ===========================================================================
000159E0                            
000159E0                            Obj6A_Type03:				; XREF: Obj6A_TypeIndex
000159E0 4A28 003D                  		tst.b	$3D(a0)
000159E4 6600                       		bne.s	Obj6A_Animate03
000159E6 3038 D008                  		move.w	($FFFFD008).w,d0
000159EA 0440 00C0                  		subi.w	#$C0,d0
000159EE 6500                       		bcs.s	loc_15B02
000159F0 9068 0008                  		sub.w	8(a0),d0
000159F4 6500                       		bcs.s	loc_15B02
000159F6 3038 D00C                  		move.w	($FFFFD00C).w,d0
000159FA 0440 0080                  		subi.w	#$80,d0
000159FE B068 000C                  		cmp.w	$C(a0),d0
00015A02 6400                       		bcc.s	locret_15B04
00015A04 0640 0100                  		addi.w	#$100,d0
00015A08 B068 000C                  		cmp.w	$C(a0),d0
00015A0C 6500                       		bcs.s	locret_15B04
00015A0E 117C 0001 003D             		move.b	#1,$3D(a0)
00015A14 317C 0600 0010             		move.w	#$600,$10(a0)	; move object to the right
00015A1A 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015A20 117C 0002 001A             		move.b	#2,$1A(a0)
00015A26 303C 00B0                  		move.w	#$B0,d0
00015A2A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015A30                            
00015A30                            loc_15B02:
00015A30 588F                       		addq.l	#4,sp
00015A32                            
00015A32                            locret_15B04:
00015A32 4E75                       		rts	
00015A34                            ; ===========================================================================
00015A34                            
00015A34                            Obj6A_Animate03:			; XREF: ROM:00015AB6j
00015A34 4EB9 0000 D586             		jsr	SpeedToPos
00015A3A 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015A40 5328 001E                  		subq.b	#1,$1E(a0)
00015A44 6A00                       		bpl.s	locret_15B24
00015A46 117C 0002 001E             		move.b	#2,$1E(a0)
00015A4C 0868 0000 001A             		bchg	#0,$1A(a0)
00015A52                            
00015A52                            locret_15B24:
00015A52 4E75                       		rts	
00015A54                            ; ===========================================================================
00015A54                            
00015A54                            Obj6A_Type04:				; XREF: Obj6A_TypeIndex
00015A54 4A28 003D                  		tst.b	$3D(a0)
00015A58 6600                       		bne.s	Obj6A_Animate04
00015A5A 3038 D008                  		move.w	($FFFFD008).w,d0
00015A5E 0640 00E0                  		addi.w	#$E0,d0
00015A62 9068 0008                  		sub.w	8(a0),d0
00015A66 6400                       		bcc.s	loc_15B74
00015A68 3038 D00C                  		move.w	($FFFFD00C).w,d0
00015A6C 0440 0080                  		subi.w	#$80,d0
00015A70 B068 000C                  		cmp.w	$C(a0),d0
00015A74 6400                       		bcc.s	locret_15B76
00015A76 0640 0100                  		addi.w	#$100,d0
00015A7A B068 000C                  		cmp.w	$C(a0),d0
00015A7E 6500                       		bcs.s	locret_15B76
00015A80 117C 0001 003D             		move.b	#1,$3D(a0)
00015A86 317C FA00 0010             		move.w	#-$600,$10(a0)	; move object to the left
00015A8C 117C 00A2 0020             		move.b	#$A2,$20(a0)
00015A92 117C 0002 001A             		move.b	#2,$1A(a0)
00015A98 303C 00B0                  		move.w	#$B0,d0
00015A9C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play saw sound
00015AA2                            
00015AA2                            loc_15B74:
00015AA2 588F                       		addq.l	#4,sp
00015AA4                            
00015AA4                            locret_15B76:
00015AA4 4E75                       		rts	
00015AA6                            ; ===========================================================================
00015AA6                            
00015AA6                            Obj6A_Animate04:
00015AA6 4EB9 0000 D586             		jsr	SpeedToPos
00015AAC 3168 0008 003A             		move.w	8(a0),$3A(a0)
00015AB2 5328 001E                  		subq.b	#1,$1E(a0)
00015AB6 6A00                       		bpl.s	locret_15B96
00015AB8 117C 0002 001E             		move.b	#2,$1E(a0)
00015ABE 0868 0000 001A             		bchg	#0,$1A(a0)
00015AC4                            
00015AC4                            locret_15B96:
00015AC4 4E75                       		rts	
00015AC6                            ; ===========================================================================
00015AC6                            ; ---------------------------------------------------------------------------
00015AC6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015AC6                            ; ---------------------------------------------------------------------------
00015AC6                            Map_obj6A:
00015AC6                            	include "_maps\obj6A.asm"
00015AC6                            ; ---------------------------------------------------------------------------
00015AC6                            ; Sprite mappings - ground saws	and pizza cutters (SBZ)
00015AC6                            ; ---------------------------------------------------------------------------
00015AC6 0000 0000                  		dc.w byte_15BA0-Map_obj6A, byte_15BC4-Map_obj6A
00015ACA 0000 0000                  		dc.w byte_15BE8-Map_obj6A, byte_15BFD-Map_obj6A
00015ACE 07                         byte_15BA0:	dc.b 7
00015ACF C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015AD4 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015AD9 E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015ADE E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015AE3 E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015AE8 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015AED 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015AF2 07                         byte_15BC4:	dc.b 7
00015AF3 C401 0020 FC               		dc.b $C4, 1, 0,	$20, $FC
00015AF8 D401 0020 FC               		dc.b $D4, 1, 0,	$20, $FC
00015AFD E403 0020 FC               		dc.b $E4, 3, 0,	$20, $FC
00015B02 E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015B07 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015B0C 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015B11 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015B16 04                         byte_15BE8:	dc.b 4
00015B17 E00F 0000 E0               		dc.b $E0, $F, 0, 0, $E0
00015B1C E00F 0800 00               		dc.b $E0, $F, 8, 0, 0
00015B21 000F 1000 E0               		dc.b 0,	$F, $10, 0, $E0
00015B26 000F 1800 00               		dc.b 0,	$F, $18, 0, 0
00015B2B 04                         byte_15BFD:	dc.b 4
00015B2C E00F 0010 E0               		dc.b $E0, $F, 0, $10, $E0
00015B31 E00F 0810 00               		dc.b $E0, $F, 8, $10, 0
00015B36 000F 1010 E0               		dc.b 0,	$F, $10, $10, $E0
00015B3B 000F 1810 00               		dc.b 0,	$F, $18, $10, 0
00015B40                            		even
00015B40                            		even
00015B40                            
00015B40                            ; ===========================================================================
00015B40                            ; ---------------------------------------------------------------------------
00015B40                            ; Object 6B - stomper (SBZ)
00015B40                            ; ---------------------------------------------------------------------------
00015B40                            
00015B40                            Obj6B:					; XREF: Obj_Index
00015B40 7000                       		moveq	#0,d0
00015B42 1028 0024                  		move.b	$24(a0),d0
00015B46 323B 0000                  		move.w	Obj6B_Index(pc,d0.w),d1
00015B4A 4EFB 1000                  		jmp	Obj6B_Index(pc,d1.w)
00015B4E                            ; ===========================================================================
00015B4E 0000                       Obj6B_Index:	dc.w Obj6B_Main-Obj6B_Index
00015B50 0000                       		dc.w Obj6B_Action-Obj6B_Index
00015B52                            
00015B52 400C 8001                  Obj6B_Var:	dc.b  $40,  $C,	$80,   1 ; width, height, ????,	type number
00015B56 1C20 3803                  		dc.b  $1C, $20,	$38,   3
00015B5A 1C20 4004                  		dc.b  $1C, $20,	$40,   4
00015B5E 1C20 6004                  		dc.b  $1C, $20,	$60,   4
00015B62 8040 0005                  		dc.b  $80, $40,	  0,   5
00015B66                            ; ===========================================================================
00015B66                            
00015B66                            Obj6B_Main:				; XREF: Obj6B_Index
00015B66 5428 0024                  		addq.b	#2,$24(a0)
00015B6A 7000                       		moveq	#0,d0
00015B6C 1028 0028                  		move.b	$28(a0),d0
00015B70 E448                       		lsr.w	#2,d0
00015B72 0240 001C                  		andi.w	#$1C,d0
00015B76 47FB 00DA                  		lea	Obj6B_Var(pc,d0.w),a3
00015B7A 115B 0019                  		move.b	(a3)+,$19(a0)
00015B7E 115B 0016                  		move.b	(a3)+,$16(a0)
00015B82 E448                       		lsr.w	#2,d0
00015B84 1140 001A                  		move.b	d0,$1A(a0)
00015B88 217C 0000 0000 0004        		move.l	#Map_obj6B,4(a0)
00015B90 317C 22C0 0002             		move.w	#$22C0,2(a0)
00015B96 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w ; check if level is LZ/SBZ3
00015B9C 6600                       		bne.s	Obj6B_SBZ12	; if not, branch
00015B9E 08F8 0000 F7CB             		bset	#0,($FFFFF7CB).w
00015BA4 6700                       		beq.s	Obj6B_SBZ3
00015BA6                            
00015BA6                            Obj6B_ChkGone:				; XREF: Obj6B_SBZ3
00015BA6 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015BAA 7000                       		moveq	#0,d0
00015BAC 1028 0023                  		move.b	$23(a0),d0
00015BB0 6700                       		beq.s	Obj6B_Delete
00015BB2 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015BB8                            
00015BB8                            Obj6B_Delete:
00015BB8 4EF9 0000 D5E8             		jmp	DeleteObject
00015BBE                            ; ===========================================================================
00015BBE                            
00015BBE                            Obj6B_SBZ3:				; XREF: Obj6B_Main
00015BBE 317C 41F0 0002             		move.w	#$41F0,2(a0)
00015BC4 0C68 0A80 0008             		cmpi.w	#$A80,8(a0)
00015BCA 6600                       		bne.s	Obj6B_SBZ12
00015BCC 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015BD0 7000                       		moveq	#0,d0
00015BD2 1028 0023                  		move.b	$23(a0),d0
00015BD6 6700                       		beq.s	Obj6B_SBZ12
00015BD8 0832 0000 0002             		btst	#0,2(a2,d0.w)
00015BDE 6700                       		beq.s	Obj6B_SBZ12
00015BE0 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015BE4 60C0                       		bra.s	Obj6B_ChkGone
00015BE6                            ; ===========================================================================
00015BE6                            
00015BE6                            Obj6B_SBZ12:				; XREF: Obj6B_Main
00015BE6 0028 0004 0001             		ori.b	#4,1(a0)
00015BEC 117C 0004 0018             		move.b	#4,$18(a0)
00015BF2 3168 0008 0034             		move.w	8(a0),$34(a0)
00015BF8 3168 000C 0030             		move.w	$C(a0),$30(a0)
00015BFE 7000                       		moveq	#0,d0
00015C00 101B                       		move.b	(a3)+,d0
00015C02 3140 003C                  		move.w	d0,$3C(a0)
00015C06 7000                       		moveq	#0,d0
00015C08 1028 0028                  		move.b	$28(a0),d0
00015C0C 6A00                       		bpl.s	Obj6B_Action
00015C0E 0200 000F                  		andi.b	#$F,d0
00015C12 1140 003E                  		move.b	d0,$3E(a0)
00015C16 1153 0028                  		move.b	(a3),$28(a0)
00015C1A 0C13 0005                  		cmpi.b	#5,(a3)
00015C1E 6600                       		bne.s	Obj6B_ChkGone2
00015C20 08E8 0004 0001             		bset	#4,1(a0)
00015C26                            
00015C26                            Obj6B_ChkGone2:
00015C26 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015C2A 7000                       		moveq	#0,d0
00015C2C 1028 0023                  		move.b	$23(a0),d0
00015C30 6700                       		beq.s	Obj6B_Action
00015C32 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015C38                            
00015C38                            Obj6B_Action:				; XREF: Obj6B_Index
00015C38 3F28 0008                  		move.w	8(a0),-(sp)
00015C3C 7000                       		moveq	#0,d0
00015C3E 1028 0028                  		move.b	$28(a0),d0
00015C42 0240 000F                  		andi.w	#$F,d0
00015C46 D040                       		add.w	d0,d0
00015C48 323B 0000                  		move.w	Obj6B_TypeIndex(pc,d0.w),d1
00015C4C 4EBB 1000                  		jsr	Obj6B_TypeIndex(pc,d1.w)
00015C50 381F                       		move.w	(sp)+,d4
00015C52 4A28 0001                  		tst.b	1(a0)
00015C56 6A00                       		bpl.s	Obj6B_ChkDel
00015C58 7200                       		moveq	#0,d1
00015C5A 1228 0019                  		move.b	$19(a0),d1
00015C5E 0641 000B                  		addi.w	#$B,d1
00015C62 7400                       		moveq	#0,d2
00015C64 1428 0016                  		move.b	$16(a0),d2
00015C68 3602                       		move.w	d2,d3
00015C6A 5243                       		addq.w	#1,d3
00015C6C 6100 9CFE                  		bsr.w	SolidObject
00015C70                            
00015C70                            Obj6B_ChkDel:
00015C70 3028 0034                  		move.w	$34(a0),d0
00015C74 0240 FF80                  		andi.w	#$FF80,d0
00015C78 3238 F700                  		move.w	($FFFFF700).w,d1
00015C7C 0441 0080                  		subi.w	#$80,d1
00015C80 0241 FF80                  		andi.w	#$FF80,d1
00015C84 9041                       		sub.w	d1,d0
00015C86 0C40 0280                  		cmpi.w	#$280,d0
00015C8A 6200                       		bhi.s	loc_15D64
00015C8C 4EF9 0000 D5AC             		jmp	DisplaySprite
00015C92                            ; ===========================================================================
00015C92                            
00015C92                            loc_15D64:
00015C92 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00015C98 6600                       		bne.s	Obj6B_Delete2
00015C9A 4238 F7CB                  		clr.b	($FFFFF7CB).w
00015C9E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015CA2 7000                       		moveq	#0,d0
00015CA4 1028 0023                  		move.b	$23(a0),d0
00015CA8 6700                       		beq.s	Obj6B_Delete2
00015CAA 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00015CB0                            
00015CB0                            Obj6B_Delete2:
00015CB0 4EF9 0000 D5E8             		jmp	DeleteObject
00015CB6                            ; ===========================================================================
00015CB6 0000 0000                  Obj6B_TypeIndex:dc.w Obj6B_Type00-Obj6B_TypeIndex, Obj6B_Type01-Obj6B_TypeIndex
00015CBA 0000 0000                  		dc.w Obj6B_Type02-Obj6B_TypeIndex, Obj6B_Type03-Obj6B_TypeIndex
00015CBE 0000 0000                  		dc.w Obj6B_Type04-Obj6B_TypeIndex, Obj6B_Type05-Obj6B_TypeIndex
00015CC2                            ; ===========================================================================
00015CC2                            
00015CC2                            Obj6B_Type00:				; XREF: Obj6B_TypeIndex
00015CC2 4E75                       		rts	
00015CC4                            ; ===========================================================================
00015CC4                            
00015CC4                            Obj6B_Type01:				; XREF: Obj6B_TypeIndex
00015CC4 4A28 0038                  		tst.b	$38(a0)
00015CC8 6600                       		bne.s	loc_15DB4
00015CCA 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015CCE 7000                       		moveq	#0,d0
00015CD0 1028 003E                  		move.b	$3E(a0),d0
00015CD4 0832 0000 0000             		btst	#0,(a2,d0.w)
00015CDA 6700                       		beq.s	loc_15DC2
00015CDC 117C 0001 0038             		move.b	#1,$38(a0)
00015CE2                            
00015CE2                            loc_15DB4:
00015CE2 3028 003C                  		move.w	$3C(a0),d0
00015CE6 B068 003A                  		cmp.w	$3A(a0),d0
00015CEA 6700                       		beq.s	loc_15DE0
00015CEC 5468 003A                  		addq.w	#2,$3A(a0)
00015CF0                            
00015CF0                            loc_15DC2:
00015CF0 3028 003A                  		move.w	$3A(a0),d0
00015CF4 0828 0000 0022             		btst	#0,$22(a0)
00015CFA 6700                       		beq.s	loc_15DD4
00015CFC 4440                       		neg.w	d0
00015CFE 0640 0080                  		addi.w	#$80,d0
00015D02                            
00015D02                            loc_15DD4:
00015D02 3228 0034                  		move.w	$34(a0),d1
00015D06 9240                       		sub.w	d0,d1
00015D08 3141 0008                  		move.w	d1,8(a0)
00015D0C 4E75                       		rts	
00015D0E                            ; ===========================================================================
00015D0E                            
00015D0E                            loc_15DE0:
00015D0E 5228 0028                  		addq.b	#1,$28(a0)
00015D12 317C 00B4 0036             		move.w	#$B4,$36(a0)
00015D18 4228 0038                  		clr.b	$38(a0)
00015D1C 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015D20 7000                       		moveq	#0,d0
00015D22 1028 0023                  		move.b	$23(a0),d0
00015D26 67C8                       		beq.s	loc_15DC2
00015D28 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015D2E 60C0                       		bra.s	loc_15DC2
00015D30                            ; ===========================================================================
00015D30                            
00015D30                            Obj6B_Type02:				; XREF: Obj6B_TypeIndex
00015D30 4A28 0038                  		tst.b	$38(a0)
00015D34 6600                       		bne.s	loc_15E14
00015D36 5368 0036                  		subq.w	#1,$36(a0)
00015D3A 6600                       		bne.s	loc_15E1E
00015D3C 117C 0001 0038             		move.b	#1,$38(a0)
00015D42                            
00015D42                            loc_15E14:
00015D42 4A68 003A                  		tst.w	$3A(a0)
00015D46 6700                       		beq.s	loc_15E3C
00015D48 5568 003A                  		subq.w	#2,$3A(a0)
00015D4C                            
00015D4C                            loc_15E1E:
00015D4C 3028 003A                  		move.w	$3A(a0),d0
00015D50 0828 0000 0022             		btst	#0,$22(a0)
00015D56 6700                       		beq.s	loc_15E30
00015D58 4440                       		neg.w	d0
00015D5A 0640 0080                  		addi.w	#$80,d0
00015D5E                            
00015D5E                            loc_15E30:
00015D5E 3228 0034                  		move.w	$34(a0),d1
00015D62 9240                       		sub.w	d0,d1
00015D64 3141 0008                  		move.w	d1,8(a0)
00015D68 4E75                       		rts	
00015D6A                            ; ===========================================================================
00015D6A                            
00015D6A                            loc_15E3C:
00015D6A 5328 0028                  		subq.b	#1,$28(a0)
00015D6E 4228 0038                  		clr.b	$38(a0)
00015D72 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015D76 7000                       		moveq	#0,d0
00015D78 1028 0023                  		move.b	$23(a0),d0
00015D7C 67CE                       		beq.s	loc_15E1E
00015D7E 08B2 0000 0002             		bclr	#0,2(a2,d0.w)
00015D84 60C6                       		bra.s	loc_15E1E
00015D86                            ; ===========================================================================
00015D86                            
00015D86                            Obj6B_Type03:				; XREF: Obj6B_TypeIndex
00015D86 4A28 0038                  		tst.b	$38(a0)
00015D8A 6600                       		bne.s	loc_15E7C
00015D8C 4A68 003A                  		tst.w	$3A(a0)
00015D90 6700                       		beq.s	loc_15E6A
00015D92 5368 003A                  		subq.w	#1,$3A(a0)
00015D96 6000                       		bra.s	loc_15E8E
00015D98                            ; ===========================================================================
00015D98                            
00015D98                            loc_15E6A:
00015D98 5368 0036                  		subq.w	#1,$36(a0)
00015D9C 6A00                       		bpl.s	loc_15E8E
00015D9E 317C 003C 0036             		move.w	#$3C,$36(a0)
00015DA4 117C 0001 0038             		move.b	#1,$38(a0)
00015DAA                            
00015DAA                            loc_15E7C:
00015DAA 5068 003A                  		addq.w	#8,$3A(a0)
00015DAE 3028 003A                  		move.w	$3A(a0),d0
00015DB2 B068 003C                  		cmp.w	$3C(a0),d0
00015DB6 6600                       		bne.s	loc_15E8E
00015DB8 4228 0038                  		clr.b	$38(a0)
00015DBC                            
00015DBC                            loc_15E8E:
00015DBC 3028 003A                  		move.w	$3A(a0),d0
00015DC0 0828 0000 0022             		btst	#0,$22(a0)
00015DC6 6700                       		beq.s	loc_15EA0
00015DC8 4440                       		neg.w	d0
00015DCA 0640 0038                  		addi.w	#$38,d0
00015DCE                            
00015DCE                            loc_15EA0:
00015DCE 3228 0030                  		move.w	$30(a0),d1
00015DD2 D240                       		add.w	d0,d1
00015DD4 3141 000C                  		move.w	d1,$C(a0)
00015DD8 4E75                       		rts	
00015DDA                            ; ===========================================================================
00015DDA                            
00015DDA                            Obj6B_Type04:				; XREF: Obj6B_TypeIndex
00015DDA 4A28 0038                  		tst.b	$38(a0)
00015DDE 6600                       		bne.s	loc_15ED0
00015DE0 4A68 003A                  		tst.w	$3A(a0)
00015DE4 6700                       		beq.s	loc_15EBE
00015DE6 5168 003A                  		subq.w	#8,$3A(a0)
00015DEA 6000                       		bra.s	loc_15EF0
00015DEC                            ; ===========================================================================
00015DEC                            
00015DEC                            loc_15EBE:
00015DEC 5368 0036                  		subq.w	#1,$36(a0)
00015DF0 6A00                       		bpl.s	loc_15EF0
00015DF2 317C 003C 0036             		move.w	#$3C,$36(a0)
00015DF8 117C 0001 0038             		move.b	#1,$38(a0)
00015DFE                            
00015DFE                            loc_15ED0:
00015DFE 3028 003A                  		move.w	$3A(a0),d0
00015E02 B068 003C                  		cmp.w	$3C(a0),d0
00015E06 6700                       		beq.s	loc_15EE0
00015E08 5068 003A                  		addq.w	#8,$3A(a0)
00015E0C 6000                       		bra.s	loc_15EF0
00015E0E                            ; ===========================================================================
00015E0E                            
00015E0E                            loc_15EE0:
00015E0E 5368 0036                  		subq.w	#1,$36(a0)
00015E12 6A00                       		bpl.s	loc_15EF0
00015E14 317C 003C 0036             		move.w	#$3C,$36(a0)
00015E1A 4228 0038                  		clr.b	$38(a0)
00015E1E                            
00015E1E                            loc_15EF0:
00015E1E 3028 003A                  		move.w	$3A(a0),d0
00015E22 0828 0000 0022             		btst	#0,$22(a0)
00015E28 6700                       		beq.s	loc_15F02
00015E2A 4440                       		neg.w	d0
00015E2C 0640 0038                  		addi.w	#$38,d0
00015E30                            
00015E30                            loc_15F02:
00015E30 3228 0030                  		move.w	$30(a0),d1
00015E34 D240                       		add.w	d0,d1
00015E36 3141 000C                  		move.w	d1,$C(a0)
00015E3A 4E75                       		rts	
00015E3C                            ; ===========================================================================
00015E3C                            
00015E3C                            Obj6B_Type05:				; XREF: Obj6B_TypeIndex
00015E3C 4A28 0038                  		tst.b	$38(a0)
00015E40 6600                       		bne.s	loc_15F3E
00015E42 45F8 F7E0                  		lea	($FFFFF7E0).w,a2
00015E46 7000                       		moveq	#0,d0
00015E48 1028 003E                  		move.b	$3E(a0),d0
00015E4C 0832 0000 0000             		btst	#0,(a2,d0.w)
00015E52 6700                       		beq.s	locret_15F5C
00015E54 117C 0001 0038             		move.b	#1,$38(a0)
00015E5A 45F8 FC00                  		lea	($FFFFFC00).w,a2
00015E5E 7000                       		moveq	#0,d0
00015E60 1028 0023                  		move.b	$23(a0),d0
00015E64 6700                       		beq.s	loc_15F3E
00015E66 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00015E6C                            
00015E6C                            loc_15F3E:
00015E6C 04A8 0001 0000 0008        		subi.l	#$10000,8(a0)
00015E74 06A8 0000 8000 000C        		addi.l	#$8000,$C(a0)
00015E7C 3168 0008 0034             		move.w	8(a0),$34(a0)
00015E82 0C68 0980 0008             		cmpi.w	#$980,8(a0)
00015E88 6700                       		beq.s	loc_15F5E
00015E8A                            
00015E8A                            locret_15F5C:
00015E8A 4E75                       		rts	
00015E8C                            ; ===========================================================================
00015E8C                            
00015E8C                            loc_15F5E:
00015E8C 4228 0028                  		clr.b	$28(a0)
00015E90 4228 0038                  		clr.b	$38(a0)
00015E94 4E75                       		rts	
00015E96                            ; ===========================================================================
00015E96                            ; ---------------------------------------------------------------------------
00015E96                            ; Sprite mappings - stomper and	platforms (SBZ)
00015E96                            ; ---------------------------------------------------------------------------
00015E96                            Map_obj6B:
00015E96                            	include "_maps\obj6B.asm"
00015E96                            ; ---------------------------------------------------------------------------
00015E96                            ; Sprite mappings - stomper and	platforms (SBZ)
00015E96                            ; ---------------------------------------------------------------------------
00015E96 0000 0000                  		dc.w byte_15F72-Map_obj6B, byte_15F87-Map_obj6B
00015E9A 0000 0000                  		dc.w byte_15F87-Map_obj6B, byte_15F87-Map_obj6B
00015E9E 0000                       		dc.w byte_15FB0-Map_obj6B
00015EA0 04                         byte_15F72:	dc.b 4
00015EA1 F40E 21AF C0               		dc.b $F4, $E, $21, $AF,	$C0
00015EA6 F40E 21B2 E0               		dc.b $F4, $E, $21, $B2,	$E0
00015EAB F40E 21B2 00               		dc.b $F4, $E, $21, $B2,	0
00015EB0 F40E 29AF 20               		dc.b $F4, $E, $29, $AF,	$20
00015EB5 08                         byte_15F87:	dc.b 8
00015EB6 E00C 000C E4               		dc.b $E0, $C, 0, $C, $E4
00015EBB E008 0010 04               		dc.b $E0, 8, 0,	$10, 4
00015EC0 E80E 2013 E4               		dc.b $E8, $E, $20, $13,	$E4
00015EC5 E80A 201F 04               		dc.b $E8, $A, $20, $1F,	4
00015ECA 000E 2013 E4               		dc.b 0,	$E, $20, $13, $E4
00015ECF 000A 201F 04               		dc.b 0,	$A, $20, $1F, 4
00015ED4 180C 000C E4               		dc.b $18, $C, 0, $C, $E4
00015ED9 1808 0010 04               		dc.b $18, 8, 0,	$10, 4
00015EDE 0E                         byte_15FB0:	dc.b $E
00015EDF C00F 0000 80               		dc.b $C0, $F, 0, 0, $80
00015EE4 C00F 0010 A0               		dc.b $C0, $F, 0, $10, $A0
00015EE9 C00F 0020 C0               		dc.b $C0, $F, 0, $20, $C0
00015EEE C00F 0010 E0               		dc.b $C0, $F, 0, $10, $E0
00015EF3 C00F 0020 00               		dc.b $C0, $F, 0, $20, 0
00015EF8 C00F 0010 20               		dc.b $C0, $F, 0, $10, $20
00015EFD C00F 0030 40               		dc.b $C0, $F, 0, $30, $40
00015F02 C00D 0040 60               		dc.b $C0, $D, 0, $40, $60
00015F07 E00F 0048 80               		dc.b $E0, $F, 0, $48, $80
00015F0C E00F 0048 C0               		dc.b $E0, $F, 0, $48, $C0
00015F11 E00F 0058 00               		dc.b $E0, $F, 0, $58, 0
00015F16 000F 0048 80               		dc.b 0,	$F, 0, $48, $80
00015F1B 000F 0058 C0               		dc.b 0,	$F, 0, $58, $C0
00015F20 200F 0058 80               		dc.b $20, $F, 0, $58, $80
00015F26 00                         		even
00015F26 00                         		even
00015F26                            
00015F26                            ; ===========================================================================
00015F26                            ; ---------------------------------------------------------------------------
00015F26                            ; Object 6C - vanishing	platforms (SBZ)
00015F26                            ; ---------------------------------------------------------------------------
00015F26                            
00015F26                            Obj6C:					; XREF: Obj_Index
00015F26 7000                       		moveq	#0,d0
00015F28 1028 0024                  		move.b	$24(a0),d0
00015F2C 323B 0000                  		move.w	Obj6C_Index(pc,d0.w),d1
00015F30 4EFB 1000                  		jmp	Obj6C_Index(pc,d1.w)
00015F34                            ; ===========================================================================
00015F34 0000                       Obj6C_Index:	dc.w Obj6C_Main-Obj6C_Index
00015F36 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00015F38 0000                       		dc.w Obj6C_Vanish-Obj6C_Index
00015F3A 0000                       		dc.w loc_16068-Obj6C_Index
00015F3C                            ; ===========================================================================
00015F3C                            
00015F3C                            Obj6C_Main:				; XREF: Obj6C_Index
00015F3C 5C28 0024                  		addq.b	#6,$24(a0)
00015F40 217C 0000 0000 0004        		move.l	#Map_obj6C,4(a0)
00015F48 317C 44C3 0002             		move.w	#$44C3,2(a0)
00015F4E 0028 0004 0001             		ori.b	#4,1(a0)
00015F54 117C 0010 0019             		move.b	#$10,$19(a0)
00015F5A 117C 0004 0018             		move.b	#4,$18(a0)
00015F60 7000                       		moveq	#0,d0
00015F62 1028 0028                  		move.b	$28(a0),d0	; get object type
00015F66 0240 000F                  		andi.w	#$F,d0		; read only the	2nd digit
00015F6A 5240                       		addq.w	#1,d0		; add 1
00015F6C EF48                       		lsl.w	#7,d0		; multiply by $80
00015F6E 3200                       		move.w	d0,d1
00015F70 5340                       		subq.w	#1,d0
00015F72 3140 0030                  		move.w	d0,$30(a0)
00015F76 3140 0032                  		move.w	d0,$32(a0)
00015F7A 7000                       		moveq	#0,d0
00015F7C 1028 0028                  		move.b	$28(a0),d0	; get object type
00015F80 0240 00F0                  		andi.w	#$F0,d0		; read only the	1st digit
00015F84 0641 0080                  		addi.w	#$80,d1
00015F88 C0C1                       		mulu.w	d1,d0
00015F8A E088                       		lsr.l	#8,d0
00015F8C 3140 0036                  		move.w	d0,$36(a0)
00015F90 5341                       		subq.w	#1,d1
00015F92 3141 0038                  		move.w	d1,$38(a0)
00015F96                            
00015F96                            loc_16068:				; XREF: Obj6C_Index
00015F96 3038 FE04                  		move.w	($FFFFFE04).w,d0
00015F9A 9068 0036                  		sub.w	$36(a0),d0
00015F9E C068 0038                  		and.w	$38(a0),d0
00015FA2 6600                       		bne.s	Obj6C_Animate
00015FA4 5928 0024                  		subq.b	#4,$24(a0)
00015FA8 6000                       		bra.s	Obj6C_Vanish
00015FAA                            ; ===========================================================================
00015FAA                            
00015FAA                            Obj6C_Animate:
00015FAA 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00015FB0 4EB9 0000 A6D8             		jsr	AnimateSprite
00015FB6 6000 968C                  		bra.w	MarkObjGone
00015FBA                            ; ===========================================================================
00015FBA                            
00015FBA                            Obj6C_Vanish:				; XREF: Obj6C_Index
00015FBA 5368 0030                  		subq.w	#1,$30(a0)
00015FBE 6A00                       		bpl.s	loc_160AA
00015FC0 317C 007F 0030             		move.w	#127,$30(a0)
00015FC6 4A28 001C                  		tst.b	$1C(a0)
00015FCA 6700                       		beq.s	loc_160A4
00015FCC 3168 0032 0030             		move.w	$32(a0),$30(a0)
00015FD2                            
00015FD2                            loc_160A4:
00015FD2 0868 0000 001C             		bchg	#0,$1C(a0)
00015FD8                            
00015FD8                            loc_160AA:
00015FD8 43F9 0000 0000             		lea	(Ani_obj6C).l,a1
00015FDE 4EB9 0000 A6D8             		jsr	AnimateSprite
00015FE4 0828 0001 001A             		btst	#1,$1A(a0)	; has platform vanished?
00015FEA 6600                       		bne.s	Obj6C_NotSolid	; if yes, branch
00015FEC 0C28 0002 0024             		cmpi.b	#2,$24(a0)
00015FF2 6600                       		bne.s	loc_160D6
00015FF4 7200                       		moveq	#0,d1
00015FF6 1228 0019                  		move.b	$19(a0),d1
00015FFA 4EB9 0000 7436             		jsr	(PlatformObject).l
00016000 6000 9642                  		bra.w	MarkObjGone
00016004                            ; ===========================================================================
00016004                            
00016004                            loc_160D6:
00016004 7200                       		moveq	#0,d1
00016006 1228 0019                  		move.b	$19(a0),d1
0001600A 4EB9 0000 75AA             		jsr	(ExitPlatform).l
00016010 3428 0008                  		move.w	8(a0),d2
00016014 4EB9 0000 7B14             		jsr	(MvSonicOnPtfm2).l
0001601A 6000 9628                  		bra.w	MarkObjGone
0001601E                            ; ===========================================================================
0001601E                            
0001601E                            Obj6C_NotSolid:				; XREF: Obj6C_Vanish
0001601E 0828 0003 0022             		btst	#3,$22(a0)
00016024 6700                       		beq.s	Obj6C_Display
00016026 43F8 D000                  		lea	($FFFFD000).w,a1
0001602A 08A9 0003 0022             		bclr	#3,$22(a1)
00016030 08A8 0003 0022             		bclr	#3,$22(a0)
00016036 117C 0002 0024             		move.b	#2,$24(a0)
0001603C 4228 0025                  		clr.b	$25(a0)
00016040                            
00016040                            Obj6C_Display:
00016040 6000 9602                  		bra.w	MarkObjGone
00016044                            ; ===========================================================================
00016044                            Ani_obj6C:
00016044                            	include "_anim\obj6C.asm"
00016044                            ; ---------------------------------------------------------------------------
00016044                            ; Animation script - vanishing platforms (SBZ)
00016044                            ; ---------------------------------------------------------------------------
00016044 0000                       		dc.w byte_1611A-Ani_obj6C
00016046 0000                       		dc.w byte_16122-Ani_obj6C
00016048 0700 0102 03FE 0100        byte_1611A:	dc.b 7,	0, 1, 2, 3, $FE, 1, 0
00016050 0703 0201 00FE 0100        byte_16122:	dc.b 7,	3, 2, 1, 0, $FE, 1, 0
00016058                            		even
00016058                            		even
00016058                            
00016058                            ; ---------------------------------------------------------------------------
00016058                            ; Sprite mappings - vanishing platforms	(SBZ)
00016058                            ; ---------------------------------------------------------------------------
00016058                            Map_obj6C:
00016058                            	include "_maps\obj6C.asm"
00016058                            ; ---------------------------------------------------------------------------
00016058                            ; Sprite mappings - vanishing platforms	(SBZ)
00016058                            ; ---------------------------------------------------------------------------
00016058 0000 0000                  		dc.w byte_16132-Map_obj6C, byte_16138-Map_obj6C
0001605C 0000 0000                  		dc.w byte_1613E-Map_obj6C, byte_16144-Map_obj6C
00016060 01                         byte_16132:	dc.b 1
00016061 F80F 0000 F0               		dc.b $F8, $F, 0, 0, $F0
00016066 01                         byte_16138:	dc.b 1
00016067 F807 0010 F8               		dc.b $F8, 7, 0,	$10, $F8
0001606C 01                         byte_1613E:	dc.b 1
0001606D F803 0018 FC               		dc.b $F8, 3, 0,	$18, $FC
00016072 00                         byte_16144:	dc.b 0
00016074 00                         		even
00016074 00                         		even
00016074                            
00016074                            ; ===========================================================================
00016074                            ; ---------------------------------------------------------------------------
00016074                            ; Object 6E - electrocution orbs (SBZ)
00016074                            ; ---------------------------------------------------------------------------
00016074                            
00016074                            Obj6E:					; XREF: Obj_Index
00016074 7000                       		moveq	#0,d0
00016076 1028 0024                  		move.b	$24(a0),d0
0001607A 323B 0000                  		move.w	Obj6E_Index(pc,d0.w),d1
0001607E 4EFB 1000                  		jmp	Obj6E_Index(pc,d1.w)
00016082                            ; ===========================================================================
00016082 0000                       Obj6E_Index:	dc.w Obj6E_Main-Obj6E_Index
00016084 0000                       		dc.w Obj6E_Shock-Obj6E_Index
00016086                            ; ===========================================================================
00016086                            
00016086                            Obj6E_Main:				; XREF: Obj6E_Index
00016086 5428 0024                  		addq.b	#2,$24(a0)
0001608A 217C 0000 0000 0004        		move.l	#Map_obj6E,4(a0)
00016092 317C 047E 0002             		move.w	#$47E,2(a0)
00016098 0028 0004 0001             		ori.b	#4,1(a0)
0001609E 117C 0028 0019             		move.b	#$28,$19(a0)
000160A4 7000                       		moveq	#0,d0
000160A6 1028 0028                  		move.b	$28(a0),d0	; read object type
000160AA E948                       		lsl.w	#4,d0		; multiply by $10
000160AC 5340                       		subq.w	#1,d0
000160AE 3140 0034                  		move.w	d0,$34(a0)
000160B2                            
000160B2                            Obj6E_Shock:				; XREF: Obj6E_Index
000160B2 3038 FE04                  		move.w	($FFFFFE04).w,d0
000160B6 C068 0034                  		and.w	$34(a0),d0
000160BA 6600                       		bne.s	Obj6E_Animate
000160BC 117C 0001 001C             		move.b	#1,$1C(a0)	; run "shocking" animation
000160C2 4A28 0001                  		tst.b	1(a0)
000160C6 6A00                       		bpl.s	Obj6E_Animate
000160C8 303C 00B1                  		move.w	#$B1,d0
000160CC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play electricity sound
000160D2                            
000160D2                            Obj6E_Animate:
000160D2 43F9 0000 0000             		lea	(Ani_obj6E).l,a1
000160D8 4EB9 0000 A6D8             		jsr	AnimateSprite
000160DE 117C 0000 0020             		move.b	#0,$20(a0)
000160E4 0C28 0004 001A             		cmpi.b	#4,$1A(a0)	; is frame number 4 displayed?
000160EA 6600                       		bne.s	Obj6E_Display	; if not, branch
000160EC 117C 00A4 0020             		move.b	#$A4,$20(a0)	; if yes, make object hurt Sonic
000160F2                            
000160F2                            Obj6E_Display:
000160F2 6000 9550                  		bra.w	MarkObjGone
000160F6                            ; ===========================================================================
000160F6                            Ani_obj6E:
000160F6                            	include "_anim\obj6E.asm"
000160F6                            ; ---------------------------------------------------------------------------
000160F6                            ; Animation script - electrocution orbs (SBZ)
000160F6                            ; ---------------------------------------------------------------------------
000160F6 0000                       		dc.w byte_161CC-Ani_obj6E
000160F8 0000                       		dc.w byte_161D0-Ani_obj6E
000160FA 0700 FF00                  byte_161CC:	dc.b 7,	0, $FF,	0
000160FE 0001 0101 0203 0304 0404+  byte_161D0:	dc.b 0,	1, 1, 1, 2, 3, 3, 4, 4,	4, 5, 5, 5, 0, $FD, 0
0001610E                            		even
0001610E                            		even
0001610E                            
0001610E                            ; ---------------------------------------------------------------------------
0001610E                            ; Sprite mappings - electrocution orbs (SBZ)
0001610E                            ; ---------------------------------------------------------------------------
0001610E                            Map_obj6E:
0001610E                            	include "_maps\obj6E.asm"
0001610E                            ; ---------------------------------------------------------------------------
0001610E                            ; Sprite mappings - electrocution orbs (SBZ)
0001610E                            ; ---------------------------------------------------------------------------
0001610E 0000 0000                  		dc.w byte_161EC-Map_obj6E, byte_161F7-Map_obj6E
00016112 0000 0000                  		dc.w byte_16207-Map_obj6E, byte_16221-Map_obj6E
00016116 0000 0000                  		dc.w byte_16236-Map_obj6E, byte_16255-Map_obj6E
0001611A 02                         byte_161EC:	dc.b 2
0001611B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016120 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016125 03                         byte_161F7:	dc.b 3
00016126 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001612B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016130 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016135 05                         byte_16207:	dc.b 5
00016136 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001613B F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016140 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
00016145 F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001614A F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
0001614F 04                         byte_16221:	dc.b 4
00016150 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016155 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001615A F60D 000C 08               		dc.b $F6, $D, 0, $C, 8
0001615F F60D 080C DC               		dc.b $F6, $D, 8, $C, $DC
00016164 06                         byte_16236:	dc.b 6
00016165 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
0001616A 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001616F F60D 100C 08               		dc.b $F6, $D, $10, $C, 8
00016174 F60D 180C DC               		dc.b $F6, $D, $18, $C, $DC
00016179 F60D 000C 24               		dc.b $F6, $D, 0, $C, $24
0001617E F60D 080C C0               		dc.b $F6, $D, 8, $C, $C0
00016183 04                         byte_16255:	dc.b 4
00016184 F804 6000 F8               		dc.b $F8, 4, $60, 0, $F8
00016189 0006 4002 F8               		dc.b 0,	6, $40,	2, $F8
0001618E F60D 100C 24               		dc.b $F6, $D, $10, $C, $24
00016193 F60D 180C C0               		dc.b $F6, $D, $18, $C, $C0
00016198                            		even
00016198                            		even
00016198                            
00016198                            ; ===========================================================================
00016198                            ; ---------------------------------------------------------------------------
00016198                            ; Object 6F - spinning platforms that move around a conveyor belt (SBZ)
00016198                            ; ---------------------------------------------------------------------------
00016198                            
00016198                            Obj6F:					; XREF: Obj_Index
00016198 7000                       		moveq	#0,d0
0001619A 1028 0024                  		move.b	$24(a0),d0
0001619E 323B 0000                  		move.w	Obj6F_Index(pc,d0.w),d1
000161A2 4EBB 1000                  		jsr	Obj6F_Index(pc,d1.w)
000161A6 3028 0030                  		move.w	$30(a0),d0
000161AA 0240 FF80                  		andi.w	#$FF80,d0
000161AE 3238 F700                  		move.w	($FFFFF700).w,d1
000161B2 0441 0080                  		subi.w	#$80,d1
000161B6 0241 FF80                  		andi.w	#$FF80,d1
000161BA 9041                       		sub.w	d1,d0
000161BC 0C40 0280                  		cmpi.w	#$280,d0
000161C0 6200                       		bhi.s	loc_1629A
000161C2                            
000161C2                            Obj6F_Display:
000161C2 4EF9 0000 D5AC             		jmp	DisplaySprite
000161C8                            ; ===========================================================================
000161C8                            
000161C8                            loc_1629A:
000161C8 0C38 0002 FE11             		cmpi.b	#2,($FFFFFE11).w ; check if act	is 3
000161CE 6600                       		bne.s	Obj6F_Act1or2	; if not, branch
000161D0 0C40 FF80                  		cmpi.w	#-$80,d0
000161D4 64EC                       		bcc.s	Obj6F_Display
000161D6                            
000161D6                            Obj6F_Act1or2:
000161D6 1028 002F                  		move.b	$2F(a0),d0
000161DA 6A00                       		bpl.s	Obj6F_Delete
000161DC 0240 007F                  		andi.w	#$7F,d0
000161E0 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000161E4 08B2 0000 0000             		bclr	#0,(a2,d0.w)
000161EA                            
000161EA                            Obj6F_Delete:
000161EA 4EF9 0000 D5E8             		jmp	DeleteObject
000161F0                            ; ===========================================================================
000161F0 0000                       Obj6F_Index:	dc.w Obj6F_Main-Obj6F_Index
000161F2 0000                       		dc.w loc_163D8-Obj6F_Index
000161F4                            ; ===========================================================================
000161F4                            
000161F4                            Obj6F_Main:				; XREF: Obj6F_Index
000161F4 1028 0028                  		move.b	$28(a0),d0
000161F8 6B00 0000                  		bmi.w	loc_16380
000161FC 5428 0024                  		addq.b	#2,$24(a0)
00016200 217C 0001 5868 0004        		move.l	#Map_obj69a,4(a0)
00016208 317C 04DF 0002             		move.w	#$4DF,2(a0)
0001620E 117C 0010 0019             		move.b	#$10,$19(a0)
00016214 0028 0004 0001             		ori.b	#4,1(a0)
0001621A 117C 0004 0018             		move.b	#4,$18(a0)
00016220 7000                       		moveq	#0,d0
00016222 1028 0028                  		move.b	$28(a0),d0
00016226 3200                       		move.w	d0,d1
00016228 E648                       		lsr.w	#3,d0
0001622A 0240 001E                  		andi.w	#$1E,d0
0001622E 45FA 0000                  		lea	off_164A6(pc),a2
00016232 D4F2 0000                  		adda.w	(a2,d0.w),a2
00016236 315A 0038                  		move.w	(a2)+,$38(a0)
0001623A 315A 0030                  		move.w	(a2)+,$30(a0)
0001623E 214A 003C                  		move.l	a2,$3C(a0)
00016242 0241 000F                  		andi.w	#$F,d1
00016246 E549                       		lsl.w	#2,d1
00016248 1141 0038                  		move.b	d1,$38(a0)
0001624C 117C 0004 003A             		move.b	#4,$3A(a0)
00016252 4A38 F7C0                  		tst.b	($FFFFF7C0).w
00016256 6700                       		beq.s	loc_16356
00016258 117C 0001 003B             		move.b	#1,$3B(a0)
0001625E 4428 003A                  		neg.b	$3A(a0)
00016262 7200                       		moveq	#0,d1
00016264 1228 0038                  		move.b	$38(a0),d1
00016268 D228 003A                  		add.b	$3A(a0),d1
0001626C B228 0039                  		cmp.b	$39(a0),d1
00016270 6500                       		bcs.s	loc_16352
00016272 1001                       		move.b	d1,d0
00016274 7200                       		moveq	#0,d1
00016276 4A00                       		tst.b	d0
00016278 6A00                       		bpl.s	loc_16352
0001627A 1228 0039                  		move.b	$39(a0),d1
0001627E 5901                       		subq.b	#4,d1
00016280                            
00016280                            loc_16352:
00016280 1141 0038                  		move.b	d1,$38(a0)
00016284                            
00016284                            loc_16356:
00016284 3172 1000 0034             		move.w	(a2,d1.w),$34(a0)
0001628A 3172 1002 0036             		move.w	2(a2,d1.w),$36(a0)
00016290 4A41                       		tst.w	d1
00016292 6600                       		bne.s	loc_1636C
00016294 117C 0001 001C             		move.b	#1,$1C(a0)
0001629A                            
0001629A                            loc_1636C:
0001629A 0C41 0008                  		cmpi.w	#8,d1
0001629E 6600                       		bne.s	loc_16378
000162A0 117C 0000 001C             		move.b	#0,$1C(a0)
000162A6                            
000162A6                            loc_16378:
000162A6 6100 C23C                  		bsr.w	Obj63_ChangeDir
000162AA 6000 0000                  		bra.w	loc_163D8
000162AE                            ; ===========================================================================
000162AE                            
000162AE                            loc_16380:				; XREF: Obj6F_Main
000162AE 1140 002F                  		move.b	d0,$2F(a0)
000162B2 0240 007F                  		andi.w	#$7F,d0
000162B6 45F8 F7C1                  		lea	($FFFFF7C1).w,a2
000162BA 08F2 0000 0000             		bset	#0,(a2,d0.w)
000162C0 6700                       		beq.s	loc_1639A
000162C2 4EF9 0000 D5E8             		jmp	DeleteObject
000162C8                            ; ===========================================================================
000162C8                            
000162C8                            loc_1639A:
000162C8 D040                       		add.w	d0,d0
000162CA 0240 001E                  		andi.w	#$1E,d0
000162CE 0640 0080                  		addi.w	#$80,d0
000162D2 45F9 0000 0000             		lea	(ObjPos_Index).l,a2
000162D8 D4F2 0000                  		adda.w	(a2,d0.w),a2
000162DC 321A                       		move.w	(a2)+,d1
000162DE 2248                       		movea.l	a0,a1
000162E0 6000                       		bra.s	Obj6F_LoadPform
000162E2                            ; ===========================================================================
000162E2                            
000162E2                            Obj6F_Loop:
000162E2 4EB9 0000 DA32             		jsr	SingleObjLoad
000162E8 6600                       		bne.s	loc_163D0
000162EA                            
000162EA                            Obj6F_LoadPform:			; XREF: loc_1639A
000162EA 12BC 006F                  		move.b	#$6F,0(a1)
000162EE 335A 0008                  		move.w	(a2)+,8(a1)
000162F2 335A 000C                  		move.w	(a2)+,$C(a1)
000162F6 301A                       		move.w	(a2)+,d0
000162F8 1340 0028                  		move.b	d0,$28(a1)
000162FC                            
000162FC                            loc_163D0:
000162FC 51C9 FFE4                  		dbf	d1,Obj6F_Loop
00016300                            
00016300 588F                       		addq.l	#4,sp
00016302 4E75                       		rts	
00016304                            ; ===========================================================================
00016304                            
00016304                            loc_163D8:				; XREF: Obj6F_Index
00016304 43F9 0000 0000             		lea	(Ani_obj6F).l,a1
0001630A 4EB9 0000 A6D8             		jsr	AnimateSprite
00016310 4A28 001A                  		tst.b	$1A(a0)
00016314 6600                       		bne.s	loc_16404
00016316 3F28 0008                  		move.w	8(a0),-(sp)
0001631A 6100 0000                  		bsr.w	loc_16424
0001631E 323C 001B                  		move.w	#$1B,d1
00016322 343C 0007                  		move.w	#7,d2
00016326 3602                       		move.w	d2,d3
00016328 5243                       		addq.w	#1,d3
0001632A 381F                       		move.w	(sp)+,d4
0001632C 6000 963E                  		bra.w	SolidObject
00016330                            ; ===========================================================================
00016330                            
00016330                            loc_16404:
00016330 0828 0003 0022             		btst	#3,$22(a0)
00016336 6700                       		beq.s	loc_16420
00016338 43F8 D000                  		lea	($FFFFD000).w,a1
0001633C 08A9 0003 0022             		bclr	#3,$22(a1)
00016342 08A8 0003 0022             		bclr	#3,$22(a0)
00016348 4228 0025                  		clr.b	$25(a0)
0001634C                            
0001634C                            loc_16420:
0001634C 6000 0002                  		bra.w	*+4
00016350                            
00016350                            loc_16424:
00016350 3028 0008                  		move.w	8(a0),d0
00016354 B068 0034                  		cmp.w	$34(a0),d0
00016358 6600                       		bne.s	loc_16484
0001635A 3028 000C                  		move.w	$C(a0),d0
0001635E B068 0036                  		cmp.w	$36(a0),d0
00016362 6600                       		bne.s	loc_16484
00016364 7200                       		moveq	#0,d1
00016366 1228 0038                  		move.b	$38(a0),d1
0001636A D228 003A                  		add.b	$3A(a0),d1
0001636E B228 0039                  		cmp.b	$39(a0),d1
00016372 6500                       		bcs.s	loc_16456
00016374 1001                       		move.b	d1,d0
00016376 7200                       		moveq	#0,d1
00016378 4A00                       		tst.b	d0
0001637A 6A00                       		bpl.s	loc_16456
0001637C 1228 0039                  		move.b	$39(a0),d1
00016380 5901                       		subq.b	#4,d1
00016382                            
00016382                            loc_16456:
00016382 1141 0038                  		move.b	d1,$38(a0)
00016386 2268 003C                  		movea.l	$3C(a0),a1
0001638A 3171 1000 0034             		move.w	(a1,d1.w),$34(a0)
00016390 3171 1002 0036             		move.w	2(a1,d1.w),$36(a0)
00016396 4A41                       		tst.w	d1
00016398 6600                       		bne.s	loc_16474
0001639A 117C 0001 001C             		move.b	#1,$1C(a0)
000163A0                            
000163A0                            loc_16474:
000163A0 0C41 0008                  		cmpi.w	#8,d1
000163A4 6600                       		bne.s	loc_16480
000163A6 117C 0000 001C             		move.b	#0,$1C(a0)
000163AC                            
000163AC                            loc_16480:
000163AC 6100 C136                  		bsr.w	Obj63_ChangeDir
000163B0                            
000163B0                            loc_16484:
000163B0 4EF9 0000 D586             		jmp	SpeedToPos
000163B6                            ; ===========================================================================
000163B6                            Ani_obj6F:
000163B6                            	include "_anim\obj6F.asm"
000163B6                            ; ---------------------------------------------------------------------------
000163B6                            ; Animation script - platform on conveyor belt (SBZ)
000163B6                            ; ---------------------------------------------------------------------------
000163B6 0000                       		dc.w byte_1648E-Ani_obj6F
000163B8 0000                       		dc.w byte_164A2-Ani_obj6F
000163BA 0000 0102 0304 4342 4140+  byte_1648E:	dc.b 0,	0, 1, 2, 3, 4, $43, $42, $41, $40, $61,	$62, $63
000163C7 6423 2221 00FF 00          		dc.b $64, $23, $22, $21, 0, $FF, 0
000163CE 0F00 FF                    byte_164A2:	dc.b $F, 0, $FF
000163D2 00                         		even
000163D2 00                         		even
000163D2                            
000163D2 0000 0000 0000             off_164A6:	dc.w word_164B2-off_164A6, word_164C6-off_164A6, word_164DA-off_164A6
000163D8 0000 0000 0000             		dc.w word_164EE-off_164A6, word_16502-off_164A6, word_16516-off_164A6
000163DE 0010 0E80 0E14 0370 0EEF+  word_164B2:	dc.w $10, $E80,	$E14, $370, $EEF, $302,	$EEF, $340, $E14, $3AE
000163F2 0010 0F80 0F14 02E0 0FEF+  word_164C6:	dc.w $10, $F80,	$F14, $2E0, $FEF, $272,	$FEF, $2B0, $F14, $31E
00016406 0010 1080 1014 0270 10EF+  word_164DA:	dc.w $10, $1080, $1014,	$270, $10EF, $202, $10EF, $240,	$1014, $2AE
0001641A 0010 0F80 0F14 0570 0FEF+  word_164EE:	dc.w $10, $F80,	$F14, $570, $FEF, $502,	$FEF, $540, $F14, $5AE
0001642E 0010 1B80 1B14 0670 1BEF+  word_16502:	dc.w $10, $1B80, $1B14,	$670, $1BEF, $602, $1BEF, $640,	$1B14, $6AE
00016442 0010 1C80 1C14 05E0 1CEF+  word_16516:	dc.w $10, $1C80, $1C14,	$5E0, $1CEF, $572, $1CEF, $5B0,	$1C14, $61E
00016456                            ; ===========================================================================
00016456                            ; ---------------------------------------------------------------------------
00016456                            ; Object 70 - large girder block (SBZ)
00016456                            ; ---------------------------------------------------------------------------
00016456                            
00016456                            Obj70:					; XREF: Obj_Index
00016456 7000                       		moveq	#0,d0
00016458 1028 0024                  		move.b	$24(a0),d0
0001645C 323B 0000                  		move.w	Obj70_Index(pc,d0.w),d1
00016460 4EFB 1000                  		jmp	Obj70_Index(pc,d1.w)
00016464                            ; ===========================================================================
00016464 0000                       Obj70_Index:	dc.w Obj70_Main-Obj70_Index
00016466 0000                       		dc.w Obj70_Action-Obj70_Index
00016468                            ; ===========================================================================
00016468                            
00016468                            Obj70_Main:				; XREF: Obj70_Index
00016468 5428 0024                  		addq.b	#2,$24(a0)
0001646C 217C 0000 0000 0004        		move.l	#Map_obj70,4(a0)
00016474 317C 42F0 0002             		move.w	#$42F0,2(a0)
0001647A 0028 0004 0001             		ori.b	#4,1(a0)
00016480 117C 0004 0018             		move.b	#4,$18(a0)
00016486 117C 0060 0019             		move.b	#$60,$19(a0)
0001648C 117C 0018 0016             		move.b	#$18,$16(a0)
00016492 3168 0008 0032             		move.w	8(a0),$32(a0)
00016498 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001649E 6100 0000                  		bsr.w	Obj70_Move2
000164A2                            
000164A2                            Obj70_Action:				; XREF: Obj70_Index
000164A2 3F28 0008                  		move.w	8(a0),-(sp)
000164A6 4A68 003A                  		tst.w	$3A(a0)
000164AA 6700                       		beq.s	Obj70_Move
000164AC 5368 003A                  		subq.w	#1,$3A(a0)
000164B0 6600                       		bne.s	Obj70_Solid
000164B2                            
000164B2                            Obj70_Move:
000164B2 4EB9 0000 D586             		jsr	SpeedToPos
000164B8 5368 0034                  		subq.w	#1,$34(a0)	; subtract 1 from movement duration
000164BC 6600                       		bne.s	Obj70_Solid	; if time remains, branch
000164BE 6100 0000                  		bsr.w	Obj70_Move2	; if time is zero, branch
000164C2                            
000164C2                            Obj70_Solid:
000164C2 381F                       		move.w	(sp)+,d4
000164C4 4A28 0001                  		tst.b	1(a0)
000164C8 6A00                       		bpl.s	Obj70_ChkDel
000164CA 7200                       		moveq	#0,d1
000164CC 1228 0019                  		move.b	$19(a0),d1
000164D0 0641 000B                  		addi.w	#$B,d1
000164D4 7400                       		moveq	#0,d2
000164D6 1428 0016                  		move.b	$16(a0),d2
000164DA 3602                       		move.w	d2,d3
000164DC 5243                       		addq.w	#1,d3
000164DE 6100 948C                  		bsr.w	SolidObject
000164E2                            
000164E2                            Obj70_ChkDel:
000164E2 3028 0032                  		move.w	$32(a0),d0
000164E6 0240 FF80                  		andi.w	#$FF80,d0
000164EA 3238 F700                  		move.w	($FFFFF700).w,d1
000164EE 0441 0080                  		subi.w	#$80,d1
000164F2 0241 FF80                  		andi.w	#$FF80,d1
000164F6 9041                       		sub.w	d1,d0
000164F8 0C40 0280                  		cmpi.w	#$280,d0
000164FC 6200                       		bhi.s	Obj70_Delete
000164FE 4EF9 0000 D5AC             		jmp	DisplaySprite
00016504                            ; ===========================================================================
00016504                            
00016504                            Obj70_Delete:
00016504 4EF9 0000 D5E8             		jmp	DeleteObject
0001650A                            ; ===========================================================================
0001650A                            
0001650A                            Obj70_Move2:				; XREF: Obj70_Main
0001650A 1028 0038                  		move.b	$38(a0),d0
0001650E 0240 0018                  		andi.w	#$18,d0
00016512 43F9 0000 0000             		lea	(Obj70_MoveData).l,a1
00016518 43F1 0000                  		lea	(a1,d0.w),a1
0001651C 3159 0010                  		move.w	(a1)+,$10(a0)
00016520 3159 0012                  		move.w	(a1)+,$12(a0)
00016524 3159 0034                  		move.w	(a1)+,$34(a0)
00016528 5028 0038                  		addq.b	#8,$38(a0)	; use next movedata set
0001652C 317C 0007 003A             		move.w	#7,$3A(a0)
00016532 4E75                       		rts	
00016534                            ; ===========================================================================
00016534 0100 0000 0060 0000        Obj70_MoveData:	dc.w   $100,	 0,   $60,     0 ; x-speed, y-speed, duration, blank
0001653C 0000 0100 0030 0000        		dc.w	  0,  $100,   $30,     0
00016544 FF00 FFC0 0060 0000        		dc.w  $FF00, $FFC0,   $60,     0
0001654C 0000 FF00 0018 0000        		dc.w	  0, $FF00,   $18,     0
00016554                            ; ---------------------------------------------------------------------------
00016554                            ; Sprite mappings - large girder block (SBZ)
00016554                            ; ---------------------------------------------------------------------------
00016554                            Map_obj70:
00016554                            	include "_maps\obj70.asm"
00016554                            ; ---------------------------------------------------------------------------
00016554                            ; Sprite mappings - large girder block (SBZ)
00016554                            ; ---------------------------------------------------------------------------
00016554 0000                       		dc.w byte_1662A-Map_obj70
00016556 0C                         byte_1662A:	dc.b $C
00016557 E80E 0000 A0               		dc.b $E8, $E, 0, 0, $A0
0001655C 000E 1000 A0               		dc.b 0,	$E, $10, 0, $A0
00016561 E80E 0006 C0               		dc.b $E8, $E, 0, 6, $C0
00016566 000E 1006 C0               		dc.b 0,	$E, $10, 6, $C0
0001656B E80E 0006 E0               		dc.b $E8, $E, 0, 6, $E0
00016570 000E 1006 E0               		dc.b 0,	$E, $10, 6, $E0
00016575 E80E 0006 00               		dc.b $E8, $E, 0, 6, 0
0001657A 000E 1006 00               		dc.b 0,	$E, $10, 6, 0
0001657F E80E 0006 20               		dc.b $E8, $E, 0, 6, $20
00016584 000E 1006 20               		dc.b 0,	$E, $10, 6, $20
00016589 E80E 0006 40               		dc.b $E8, $E, 0, 6, $40
0001658E 000E 1006 40               		dc.b 0,	$E, $10, 6, $40
00016594 00                         		even
00016594 00                         		even
00016594                            
00016594                            ; ===========================================================================
00016594                            ; ---------------------------------------------------------------------------
00016594                            ; Object 72 - teleporter (SBZ)
00016594                            ; ---------------------------------------------------------------------------
00016594                            
00016594                            Obj72:					; XREF: Obj_Index
00016594 7000                       		moveq	#0,d0
00016596 1028 0024                  		move.b	$24(a0),d0
0001659A 323B 0000                  		move.w	Obj72_Index(pc,d0.w),d1
0001659E 4EBB 1000                  		jsr	Obj72_Index(pc,d1.w)
000165A2 3028 0008                  		move.w	8(a0),d0
000165A6 0240 FF80                  		andi.w	#$FF80,d0
000165AA 3238 F700                  		move.w	($FFFFF700).w,d1
000165AE 0441 0080                  		subi.w	#$80,d1
000165B2 0241 FF80                  		andi.w	#$FF80,d1
000165B6 9041                       		sub.w	d1,d0
000165B8 0C40 0280                  		cmpi.w	#$280,d0
000165BC 6200                       		bhi.s	Obj72_Delete
000165BE 4E75                       		rts	
000165C0                            ; ===========================================================================
000165C0                            
000165C0                            Obj72_Delete:
000165C0 4EF9 0000 D5E8             		jmp	DeleteObject
000165C6                            ; ===========================================================================
000165C6 0000                       Obj72_Index:	dc.w Obj72_Main-Obj72_Index
000165C8 0000                       		dc.w loc_166C8-Obj72_Index
000165CA 0000                       		dc.w loc_1675E-Obj72_Index
000165CC 0000                       		dc.w loc_16798-Obj72_Index
000165CE                            ; ===========================================================================
000165CE                            
000165CE                            Obj72_Main:				; XREF: Obj72_Index
000165CE 5428 0024                  		addq.b	#2,$24(a0)
000165D2 1028 0028                  		move.b	$28(a0),d0
000165D6 D040                       		add.w	d0,d0
000165D8 0240 001E                  		andi.w	#$1E,d0
000165DC 45FA 0000                  		lea	Obj72_Data(pc),a2
000165E0 D4F2 0000                  		adda.w	(a2,d0.w),a2
000165E4 315A 003A                  		move.w	(a2)+,$3A(a0)
000165E8 214A 003C                  		move.l	a2,$3C(a0)
000165EC 315A 0036                  		move.w	(a2)+,$36(a0)
000165F0 315A 0038                  		move.w	(a2)+,$38(a0)
000165F4                            
000165F4                            loc_166C8:				; XREF: Obj72_Index
000165F4 43F8 D000                  		lea	($FFFFD000).w,a1
000165F8 3029 0008                  		move.w	8(a1),d0
000165FC 9068 0008                  		sub.w	8(a0),d0
00016600 0828 0000 0022             		btst	#0,$22(a0)
00016606 6700                       		beq.s	loc_166E0
00016608 0640 000F                  		addi.w	#$F,d0
0001660C                            
0001660C                            loc_166E0:
0001660C 0C40 0010                  		cmpi.w	#$10,d0
00016610 6400                       		bcc.s	locret_1675C
00016612 3229 000C                  		move.w	$C(a1),d1
00016616 9268 000C                  		sub.w	$C(a0),d1
0001661A 0641 0020                  		addi.w	#$20,d1
0001661E 0C41 0040                  		cmpi.w	#$40,d1
00016622 6400                       		bcc.s	locret_1675C
00016624 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016628 6600                       		bne.s	locret_1675C
0001662A 0C28 0007 0028             		cmpi.b	#7,$28(a0)
00016630 6600                       		bne.s	loc_1670E
00016632 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w
00016638 6500                       		bcs.s	locret_1675C
0001663A                            
0001663A                            loc_1670E:
0001663A 5428 0024                  		addq.b	#2,$24(a0)
0001663E 11FC 0081 F7C8             		move.b	#$81,($FFFFF7C8).w ; lock controls
00016644 137C 0002 001C             		move.b	#2,$1C(a1)	; use Sonic's rolling animation
0001664A 337C 0800 0014             		move.w	#$800,$14(a1)
00016650 337C 0000 0010             		move.w	#0,$10(a1)
00016656 337C 0000 0012             		move.w	#0,$12(a1)
0001665C 08A8 0005 0022             		bclr	#5,$22(a0)
00016662 08A9 0005 0022             		bclr	#5,$22(a1)
00016668 08E9 0001 0022             		bset	#1,$22(a1)
0001666E 3368 0008 0008             		move.w	8(a0),8(a1)
00016674 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001667A 4228 0032                  		clr.b	$32(a0)
0001667E 303C 00BE                  		move.w	#$BE,d0
00016682 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play Sonic rolling sound
00016688                            
00016688                            locret_1675C:
00016688 4E75                       		rts	
0001668A                            ; ===========================================================================
0001668A                            
0001668A                            loc_1675E:				; XREF: Obj72_Index
0001668A 43F8 D000                  		lea	($FFFFD000).w,a1
0001668E 1028 0032                  		move.b	$32(a0),d0
00016692 5428 0032                  		addq.b	#2,$32(a0)
00016696 4EB9 0000 29DA             		jsr	(CalcSine).l
0001669C EA40                       		asr.w	#5,d0
0001669E 3428 000C                  		move.w	$C(a0),d2
000166A2 9440                       		sub.w	d0,d2
000166A4 3342 000C                  		move.w	d2,$C(a1)
000166A8 0C28 0080 0032             		cmpi.b	#$80,$32(a0)
000166AE 6600                       		bne.s	locret_16796
000166B0 6100 0000                  		bsr.w	sub_1681C
000166B4 5428 0024                  		addq.b	#2,$24(a0)
000166B8 303C 00BC                  		move.w	#$BC,d0
000166BC 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play teleport sound
000166C2                            
000166C2                            locret_16796:
000166C2 4E75                       		rts	
000166C4                            ; ===========================================================================
000166C4                            
000166C4                            loc_16798:				; XREF: Obj72_Index
000166C4 588F                       		addq.l	#4,sp
000166C6 43F8 D000                  		lea	($FFFFD000).w,a1
000166CA 5328 002E                  		subq.b	#1,$2E(a0)
000166CE 6A00                       		bpl.s	loc_167DA
000166D0 3368 0036 0008             		move.w	$36(a0),8(a1)
000166D6 3368 0038 000C             		move.w	$38(a0),$C(a1)
000166DC 7200                       		moveq	#0,d1
000166DE 1228 003A                  		move.b	$3A(a0),d1
000166E2 5801                       		addq.b	#4,d1
000166E4 B228 003B                  		cmp.b	$3B(a0),d1
000166E8 6500                       		bcs.s	loc_167C2
000166EA 7200                       		moveq	#0,d1
000166EC 6000                       		bra.s	loc_16800
000166EE                            ; ===========================================================================
000166EE                            
000166EE                            loc_167C2:
000166EE 1141 003A                  		move.b	d1,$3A(a0)
000166F2 2468 003C                  		movea.l	$3C(a0),a2
000166F6 3172 1000 0036             		move.w	(a2,d1.w),$36(a0)
000166FC 3172 1002 0038             		move.w	2(a2,d1.w),$38(a0)
00016702 6000 0000                  		bra.w	sub_1681C
00016706                            ; ===========================================================================
00016706                            
00016706                            loc_167DA:
00016706 2429 0008                  		move.l	8(a1),d2
0001670A 2629 000C                  		move.l	$C(a1),d3
0001670E 3029 0010                  		move.w	$10(a1),d0
00016712 48C0                       		ext.l	d0
00016714 E180                       		asl.l	#8,d0
00016716 D480                       		add.l	d0,d2
00016718 3029 0012                  		move.w	$12(a1),d0
0001671C 48C0                       		ext.l	d0
0001671E E180                       		asl.l	#8,d0
00016720 D680                       		add.l	d0,d3
00016722 2342 0008                  		move.l	d2,8(a1)
00016726 2343 000C                  		move.l	d3,$C(a1)
0001672A 4E75                       		rts	
0001672C                            ; ===========================================================================
0001672C                            
0001672C                            loc_16800:
0001672C 0269 07FF 000C             		andi.w	#$7FF,$C(a1)
00016732 4228 0024                  		clr.b	$24(a0)
00016736 4238 F7C8                  		clr.b	($FFFFF7C8).w
0001673A 337C 0000 0010             		move.w	#0,$10(a1)
00016740 337C 0200 0012             		move.w	#$200,$12(a1)
00016746 4E75                       		rts	
00016748                            
00016748                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016748                            
00016748                            
00016748                            sub_1681C:
00016748 7000                       		moveq	#0,d0
0001674A 343C 1000                  		move.w	#$1000,d2
0001674E 3028 0036                  		move.w	$36(a0),d0
00016752 9069 0008                  		sub.w	8(a1),d0
00016756 6C00                       		bge.s	loc_16830
00016758 4440                       		neg.w	d0
0001675A 4442                       		neg.w	d2
0001675C                            
0001675C                            loc_16830:
0001675C 7200                       		moveq	#0,d1
0001675E 363C 1000                  		move.w	#$1000,d3
00016762 3228 0038                  		move.w	$38(a0),d1
00016766 9269 000C                  		sub.w	$C(a1),d1
0001676A 6C00                       		bge.s	loc_16844
0001676C 4441                       		neg.w	d1
0001676E 4443                       		neg.w	d3
00016770                            
00016770                            loc_16844:
00016770 B240                       		cmp.w	d0,d1
00016772 6500                       		bcs.s	loc_1687A
00016774 7200                       		moveq	#0,d1
00016776 3228 0038                  		move.w	$38(a0),d1
0001677A 9269 000C                  		sub.w	$C(a1),d1
0001677E 4841                       		swap	d1
00016780 83C3                       		divs.w	d3,d1
00016782 7000                       		moveq	#0,d0
00016784 3028 0036                  		move.w	$36(a0),d0
00016788 9069 0008                  		sub.w	8(a1),d0
0001678C 6700                       		beq.s	loc_16866
0001678E 4840                       		swap	d0
00016790 81C1                       		divs.w	d1,d0
00016792                            
00016792                            loc_16866:
00016792 3340 0010                  		move.w	d0,$10(a1)
00016796 3343 0012                  		move.w	d3,$12(a1)
0001679A 4A41                       		tst.w	d1
0001679C 6A00                       		bpl.s	loc_16874
0001679E 4441                       		neg.w	d1
000167A0                            
000167A0                            loc_16874:
000167A0 3141 002E                  		move.w	d1,$2E(a0)
000167A4 4E75                       		rts	
000167A6                            ; ===========================================================================
000167A6                            
000167A6                            loc_1687A:
000167A6 7000                       		moveq	#0,d0
000167A8 3028 0036                  		move.w	$36(a0),d0
000167AC 9069 0008                  		sub.w	8(a1),d0
000167B0 4840                       		swap	d0
000167B2 81C2                       		divs.w	d2,d0
000167B4 7200                       		moveq	#0,d1
000167B6 3228 0038                  		move.w	$38(a0),d1
000167BA 9269 000C                  		sub.w	$C(a1),d1
000167BE 6700                       		beq.s	loc_16898
000167C0 4841                       		swap	d1
000167C2 83C0                       		divs.w	d0,d1
000167C4                            
000167C4                            loc_16898:
000167C4 3341 0012                  		move.w	d1,$12(a1)
000167C8 3342 0010                  		move.w	d2,$10(a1)
000167CC 4A40                       		tst.w	d0
000167CE 6A00                       		bpl.s	loc_168A6
000167D0 4440                       		neg.w	d0
000167D2                            
000167D2                            loc_168A6:
000167D2 3140 002E                  		move.w	d0,$2E(a0)
000167D6 4E75                       		rts	
000167D8                            ; End of function sub_1681C
000167D8                            
000167D8                            ; ===========================================================================
000167D8 0000 0000 0000             Obj72_Data:	dc.w word_168BC-Obj72_Data, word_168C2-Obj72_Data, word_168C8-Obj72_Data
000167DE 0000 0000 0000             		dc.w word_168E6-Obj72_Data, word_168EC-Obj72_Data, word_1690A-Obj72_Data
000167E4 0000 0000                  		dc.w word_16910-Obj72_Data, word_1692E-Obj72_Data
000167E8 0004 0794 098C             word_168BC:	dc.w 4,	$794, $98C
000167EE 0004 0094 038C             word_168C2:	dc.w 4,	$94, $38C
000167F4 001C 0794 02E8             word_168C8:	dc.w $1C, $794,	$2E8
000167FA 07A4 02C0 07D0             		dc.w $7A4, $2C0, $7D0
00016800 02AC 0858 02AC             		dc.w $2AC, $858, $2AC
00016806 0884 0298 0894             		dc.w $884, $298, $894
0001680C 0270 0894 0190             		dc.w $270, $894, $190
00016812 0004 0894 0690             word_168E6:	dc.w 4,	$894, $690
00016818 001C 1194 0470             word_168EC:	dc.w $1C, $1194, $470
0001681E 1184 0498 1158             		dc.w $1184, $498, $1158
00016824 04AC 0FD0 04AC             		dc.w $4AC, $FD0, $4AC
0001682A 0FA4 04C0 0F94             		dc.w $FA4, $4C0, $F94
00016830 04E8 0F94 0590             		dc.w $4E8, $F94, $590
00016836 0004 1294 0490             word_1690A:	dc.w 4,	$1294, $490
0001683C 001C 1594 FFE8             word_16910:	dc.w $1C, $1594, $FFE8
00016842 1584 FFC0 1560             		dc.w $1584, $FFC0, $1560
00016848 FFAC 14D0 FFAC             		dc.w $FFAC, $14D0, $FFAC
0001684E 14A4 FF98 1494             		dc.w $14A4, $FF98, $1494
00016854 FF70 1494 FD90             		dc.w $FF70, $1494, $FD90
0001685A 0004 0894 0090             word_1692E:	dc.w 4,	$894, $90
00016860                            ; ===========================================================================
00016860                            ; ---------------------------------------------------------------------------
00016860                            ; Object 78 - Caterkiller enemy	(MZ, SBZ)
00016860                            ; ---------------------------------------------------------------------------
00016860                            
00016860                            Obj78:					; XREF: Obj_Index
00016860 7000                       		moveq	#0,d0
00016862 1028 0024                  		move.b	$24(a0),d0
00016866 323B 0000                  		move.w	Obj78_Index(pc,d0.w),d1
0001686A 4EFB 1000                  		jmp	Obj78_Index(pc,d1.w)
0001686E                            ; ===========================================================================
0001686E 0000                       Obj78_Index:	dc.w Obj78_Main-Obj78_Index
00016870 0000                       		dc.w Obj78_Action-Obj78_Index
00016872 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016874 0000                       		dc.w Obj78_BodySeg2-Obj78_Index
00016876 0000                       		dc.w Obj78_BodySeg1-Obj78_Index
00016878 0000                       		dc.w Obj78_Delete-Obj78_Index
0001687A 0000                       		dc.w loc_16CC0-Obj78_Index
0001687C                            ; ===========================================================================
0001687C                            
0001687C                            locret_16950:
0001687C 4E75                       		rts	
0001687E                            ; ===========================================================================
0001687E                            
0001687E                            Obj78_Main:				; XREF: Obj78_Index
0001687E 117C 0007 0016             		move.b	#7,$16(a0)
00016884 117C 0008 0017             		move.b	#8,$17(a0)
0001688A 4EB9 0000 D55A             		jsr	ObjectFall
00016890 4EBA E4B8                  		jsr	ObjHitFloor
00016894 4A41                       		tst.w	d1
00016896 6AE4                       		bpl.s	locret_16950
00016898 D368 000C                  		add.w	d1,$C(a0)
0001689C 4268 0012                  		clr.w	$12(a0)
000168A0 5428 0024                  		addq.b	#2,$24(a0)
000168A4 217C 0000 0000 0004        		move.l	#Map_obj78,4(a0)
000168AC 317C 22B0 0002             		move.w	#$22B0,2(a0)
000168B2 0C38 0005 FE10             		cmpi.b	#5,($FFFFFE10).w ; if level is SBZ, branch
000168B8 6700                       		beq.s	loc_16996
000168BA 317C 24FF 0002             		move.w	#$24FF,2(a0)	; MZ specific code
000168C0                            
000168C0                            loc_16996:
000168C0 0228 0003 0001             		andi.b	#3,1(a0)
000168C6 0028 0004 0001             		ori.b	#4,1(a0)
000168CC 1168 0001 0022             		move.b	1(a0),$22(a0)
000168D2 117C 0004 0018             		move.b	#4,$18(a0)
000168D8 117C 0008 0019             		move.b	#8,$19(a0)
000168DE 117C 000B 0020             		move.b	#$B,$20(a0)
000168E4 3428 0008                  		move.w	8(a0),d2
000168E8 7A0C                       		moveq	#$C,d5
000168EA 0828 0000 0022             		btst	#0,$22(a0)
000168F0 6700                       		beq.s	loc_169CA
000168F2 4445                       		neg.w	d5
000168F4                            
000168F4                            loc_169CA:
000168F4 1C3C 0004                  		move.b	#4,d6
000168F8 7600                       		moveq	#0,d3
000168FA 7804                       		moveq	#4,d4
000168FC 2448                       		movea.l	a0,a2
000168FE 7202                       		moveq	#2,d1
00016900                            
00016900                            Obj78_LoadBody:
00016900 4EB9 0000 DA48             		jsr	SingleObjLoad2
00016906 6600                       		bne.s	Obj78_QuitLoad
00016908 12BC 0078                  		move.b	#$78,0(a1)	; load body segment object
0001690C 1346 0024                  		move.b	d6,$24(a1)
00016910 5406                       		addq.b	#2,d6
00016912 2368 0004 0004             		move.l	4(a0),4(a1)
00016918 3368 0002 0002             		move.w	2(a0),2(a1)
0001691E 137C 0005 0018             		move.b	#5,$18(a1)
00016924 137C 0008 0019             		move.b	#8,$19(a1)
0001692A 137C 00CB 0020             		move.b	#$CB,$20(a1)
00016930 D445                       		add.w	d5,d2
00016932 3342 0008                  		move.w	d2,8(a1)
00016936 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001693C 1368 0022 0022             		move.b	$22(a0),$22(a1)
00016942 1368 0022 0001             		move.b	$22(a0),1(a1)
00016948 137C 0008 001A             		move.b	#8,$1A(a1)
0001694E 234A 003C                  		move.l	a2,$3C(a1)
00016952 1344 003C                  		move.b	d4,$3C(a1)
00016956 5804                       		addq.b	#4,d4
00016958 2449                       		movea.l	a1,a2
0001695A                            
0001695A                            Obj78_QuitLoad:
0001695A 51C9 FFA4                  		dbf	d1,Obj78_LoadBody ; repeat sequence 2 more times
0001695E                            
0001695E 117C 0007 002A             		move.b	#7,$2A(a0)
00016964 4228 003C                  		clr.b	$3C(a0)
00016968                            
00016968                            Obj78_Action:				; XREF: Obj78_Index
00016968 4A28 0022                  		tst.b	$22(a0)
0001696C 6B00 0000                  		bmi.w	loc_16C96
00016970 7000                       		moveq	#0,d0
00016972 1028 0025                  		move.b	$25(a0),d0
00016976 323B 0000                  		move.w	Obj78_Index2(pc,d0.w),d1
0001697A 4EBB 1000                  		jsr	Obj78_Index2(pc,d1.w)
0001697E 1228 002B                  		move.b	$2B(a0),d1
00016982 6A00                       		bpl.s	Obj78_Display
00016984 43F9 0000 0000             		lea	(Ani_obj78).l,a1
0001698A 1028 0026                  		move.b	$26(a0),d0
0001698E 0240 007F                  		andi.w	#$7F,d0
00016992 5828 0026                  		addq.b	#4,$26(a0)
00016996 1031 0000                  		move.b	(a1,d0.w),d0
0001699A 6A00                       		bpl.s	Obj78_AniHead
0001699C 08A8 0007 002B             		bclr	#7,$2B(a0)
000169A2 6000                       		bra.s	Obj78_Display
000169A4                            ; ===========================================================================
000169A4                            
000169A4                            Obj78_AniHead:
000169A4 0201 0010                  		andi.b	#$10,d1
000169A8 D001                       		add.b	d1,d0
000169AA 1140 001A                  		move.b	d0,$1A(a0)
000169AE                            
000169AE                            Obj78_Display:
000169AE 3028 0008                  		move.w	8(a0),d0
000169B2 0240 FF80                  		andi.w	#$FF80,d0
000169B6 3238 F700                  		move.w	($FFFFF700).w,d1
000169BA 0441 0080                  		subi.w	#$80,d1
000169BE 0241 FF80                  		andi.w	#$FF80,d1
000169C2 9041                       		sub.w	d1,d0
000169C4 0C40 0280                  		cmpi.w	#$280,d0
000169C8 6200 0000                  		bhi.w	Obj78_ChkGone
000169CC 4EF9 0000 D5AC             		jmp	DisplaySprite
000169D2                            ; ===========================================================================
000169D2                            
000169D2                            Obj78_ChkGone:
000169D2 45F8 FC00                  		lea	($FFFFFC00).w,a2
000169D6 7000                       		moveq	#0,d0
000169D8 1028 0023                  		move.b	$23(a0),d0
000169DC 6700                       		beq.s	loc_16ABC
000169DE 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
000169E4                            
000169E4                            loc_16ABC:
000169E4 117C 000A 0024             		move.b	#$A,$24(a0)	; run "Obj78_Delete" routine
000169EA 4E75                       		rts	
000169EC                            ; ===========================================================================
000169EC                            
000169EC                            Obj78_Delete:				; XREF: Obj78_Index
000169EC 4EF9 0000 D5E8             		jmp	DeleteObject
000169F2                            ; ===========================================================================
000169F2 0000                       Obj78_Index2:	dc.w Obj78_Move-Obj78_Index2
000169F4 0000                       		dc.w loc_16B02-Obj78_Index2
000169F6                            ; ===========================================================================
000169F6                            
000169F6                            Obj78_Move:				; XREF: Obj78_Index2
000169F6 5328 002A                  		subq.b	#1,$2A(a0)
000169FA 6B00                       		bmi.s	Obj78_Move2
000169FC 4E75                       		rts	
000169FE                            ; ===========================================================================
000169FE                            
000169FE                            Obj78_Move2:
000169FE 5428 0025                  		addq.b	#2,$25(a0)
00016A02 117C 0010 002A             		move.b	#$10,$2A(a0)
00016A08 317C FF40 0010             		move.w	#-$C0,$10(a0)
00016A0E 317C 0040 0014             		move.w	#$40,$14(a0)
00016A14 0868 0004 002B             		bchg	#4,$2B(a0)
00016A1A 6600                       		bne.s	loc_16AFC
00016A1C 4268 0010                  		clr.w	$10(a0)
00016A20 4468 0014                  		neg.w	$14(a0)
00016A24                            
00016A24                            loc_16AFC:
00016A24 08E8 0007 002B             		bset	#7,$2B(a0)
00016A2A                            
00016A2A                            loc_16B02:				; XREF: Obj78_Index2
00016A2A 5328 002A                  		subq.b	#1,$2A(a0)
00016A2E 6B00                       		bmi.s	loc_16B5E
00016A30 2F28 0008                  		move.l	8(a0),-(sp)
00016A34 2428 0008                  		move.l	8(a0),d2
00016A38 3028 0010                  		move.w	$10(a0),d0
00016A3C 0828 0000 0022             		btst	#0,$22(a0)
00016A42 6700                       		beq.s	loc_16B1E
00016A44 4440                       		neg.w	d0
00016A46                            
00016A46                            loc_16B1E:
00016A46 48C0                       		ext.l	d0
00016A48 E180                       		asl.l	#8,d0
00016A4A D480                       		add.l	d0,d2
00016A4C 2142 0008                  		move.l	d2,8(a0)
00016A50 4EBA E2F8                  		jsr	ObjHitFloor
00016A54 241F                       		move.l	(sp)+,d2
00016A56 0C41 FFF8                  		cmpi.w	#-8,d1
00016A5A 6D00                       		blt.s	loc_16B70
00016A5C 0C41 000C                  		cmpi.w	#$C,d1
00016A60 6C00                       		bge.s	loc_16B70
00016A62 D368 000C                  		add.w	d1,$C(a0)
00016A66 4842                       		swap	d2
00016A68 B468 0008                  		cmp.w	8(a0),d2
00016A6C 6700                       		beq.s	locret_16B5C
00016A6E 7000                       		moveq	#0,d0
00016A70 1028 003C                  		move.b	$3C(a0),d0
00016A74 5228 003C                  		addq.b	#1,$3C(a0)
00016A78 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016A7E 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016A82                            
00016A82                            locret_16B5C:
00016A82 4E75                       		rts	
00016A84                            ; ===========================================================================
00016A84                            
00016A84                            loc_16B5E:
00016A84 5528 0025                  		subq.b	#2,$25(a0)
00016A88 117C 0007 002A             		move.b	#7,$2A(a0)
00016A8E 317C 0000 0010             		move.w	#0,$10(a0)
00016A94 4E75                       		rts	
00016A96                            ; ===========================================================================
00016A96                            
00016A96                            loc_16B70:
00016A96 2142 0008                  		move.l	d2,8(a0)
00016A9A 0868 0000 0022             		bchg	#0,$22(a0)
00016AA0 1168 0022 0001             		move.b	$22(a0),1(a0)
00016AA6 7000                       		moveq	#0,d0
00016AA8 1028 003C                  		move.b	$3C(a0),d0
00016AAC 11BC 0080 002C             		move.b	#$80,$2C(a0,d0.w)
00016AB2 5228 003C                  		addq.b	#1,$3C(a0)
00016AB6 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016ABC 4E75                       		rts	
00016ABE                            ; ===========================================================================
00016ABE                            
00016ABE                            Obj78_BodySeg2:				; XREF: Obj78_Index
00016ABE 2268 003C                  		movea.l	$3C(a0),a1
00016AC2 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016AC8 6A00                       		bpl.s	Obj78_BodySeg1
00016ACA 43F9 0000 0000             		lea	(Ani_obj78).l,a1
00016AD0 1028 0026                  		move.b	$26(a0),d0
00016AD4 0240 007F                  		andi.w	#$7F,d0
00016AD8 5828 0026                  		addq.b	#4,$26(a0)
00016ADC 4A31 0004                  		tst.b	4(a1,d0.w)
00016AE0 6A00                       		bpl.s	Obj78_AniBody
00016AE2 5828 0026                  		addq.b	#4,$26(a0)
00016AE6                            
00016AE6                            Obj78_AniBody:
00016AE6 1031 0000                  		move.b	(a1,d0.w),d0
00016AEA 5000                       		addq.b	#8,d0
00016AEC 1140 001A                  		move.b	d0,$1A(a0)
00016AF0                            
00016AF0                            Obj78_BodySeg1:				; XREF: Obj78_Index
00016AF0 2268 003C                  		movea.l	$3C(a0),a1
00016AF4 4A28 0022                  		tst.b	$22(a0)
00016AF8 6B00 0000                  		bmi.w	loc_16C90
00016AFC 1169 002B 002B             		move.b	$2B(a1),$2B(a0)
00016B02 1169 0025 0025             		move.b	$25(a1),$25(a0)
00016B08 6700 0000                  		beq.w	loc_16C64
00016B0C 3169 0014 0014             		move.w	$14(a1),$14(a0)
00016B12 3029 0010                  		move.w	$10(a1),d0
00016B16 D069 0014                  		add.w	$14(a1),d0
00016B1A 3140 0010                  		move.w	d0,$10(a0)
00016B1E 2428 0008                  		move.l	8(a0),d2
00016B22 2602                       		move.l	d2,d3
00016B24 3028 0010                  		move.w	$10(a0),d0
00016B28 0828 0000 0022             		btst	#0,$22(a0)
00016B2E 6700                       		beq.s	loc_16C0C
00016B30 4440                       		neg.w	d0
00016B32                            
00016B32                            loc_16C0C:
00016B32 48C0                       		ext.l	d0
00016B34 E180                       		asl.l	#8,d0
00016B36 D480                       		add.l	d0,d2
00016B38 2142 0008                  		move.l	d2,8(a0)
00016B3C 4843                       		swap	d3
00016B3E B668 0008                  		cmp.w	8(a0),d3
00016B42 6700                       		beq.s	loc_16C64
00016B44 7000                       		moveq	#0,d0
00016B46 1028 003C                  		move.b	$3C(a0),d0
00016B4A 1231 002C                  		move.b	$2C(a1,d0.w),d1
00016B4E 0C01 0080                  		cmpi.b	#-$80,d1
00016B52 6600                       		bne.s	loc_16C50
00016B54 4843                       		swap	d3
00016B56 2143 0008                  		move.l	d3,8(a0)
00016B5A 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016B5E 0868 0000 0022             		bchg	#0,$22(a0)
00016B64 1168 0022 0001             		move.b	$22(a0),1(a0)
00016B6A 5228 003C                  		addq.b	#1,$3C(a0)
00016B6E 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016B74 6000                       		bra.s	loc_16C64
00016B76                            ; ===========================================================================
00016B76                            
00016B76                            loc_16C50:
00016B76 4881                       		ext.w	d1
00016B78 D368 000C                  		add.w	d1,$C(a0)
00016B7C 5228 003C                  		addq.b	#1,$3C(a0)
00016B80 0228 000F 003C             		andi.b	#$F,$3C(a0)
00016B86 1181 002C                  		move.b	d1,$2C(a0,d0.w)
00016B8A                            
00016B8A                            loc_16C64:
00016B8A 0C29 000C 0024             		cmpi.b	#$C,$24(a1)
00016B90 6700                       		beq.s	loc_16C90
00016B92 0C11 0027                  		cmpi.b	#$27,0(a1)
00016B96 6700                       		beq.s	loc_16C7C
00016B98 0C29 000A 0024             		cmpi.b	#$A,$24(a1)
00016B9E 6600                       		bne.s	loc_16C82
00016BA0                            
00016BA0                            loc_16C7C:
00016BA0 117C 000A 0024             		move.b	#$A,$24(a0)
00016BA6                            
00016BA6                            loc_16C82:
00016BA6 4EF9 0000 D5AC             		jmp	DisplaySprite
00016BAC                            
00016BAC                            ; ===========================================================================
00016BAC FE00 FE80 0180 0200        Obj78_FragSpeed:dc.w $FE00, $FE80, $180, $200
00016BB4                            ; ===========================================================================
00016BB4                            
00016BB4                            loc_16C90:
00016BB4 08E9 0007 0022             		bset	#7,$22(a1)
00016BBA                            
00016BBA                            loc_16C96:
00016BBA 7000                       		moveq	#0,d0
00016BBC 1028 0024                  		move.b	$24(a0),d0
00016BC0 303B 00E8                  		move.w	Obj78_FragSpeed-2(pc,d0.w),d0
00016BC4 0828 0000 0022             		btst	#0,$22(a0)
00016BCA 6700                       		beq.s	loc_16CAA
00016BCC 4440                       		neg.w	d0
00016BCE                            
00016BCE                            loc_16CAA:
00016BCE 3140 0010                  		move.w	d0,$10(a0)
00016BD2 317C FC00 0012             		move.w	#-$400,$12(a0)
00016BD8 117C 000C 0024             		move.b	#$C,$24(a0)
00016BDE 0228 00F8 001A             		andi.b	#-8,$1A(a0)
00016BE4                            
00016BE4                            loc_16CC0:				; XREF: Obj78_Index
00016BE4 4EB9 0000 D55A             		jsr	ObjectFall
00016BEA 4A68 0012                  		tst.w	$12(a0)
00016BEE 6B00                       		bmi.s	loc_16CE0
00016BF0 4EBA E158                  		jsr	ObjHitFloor
00016BF4 4A41                       		tst.w	d1
00016BF6 6A00                       		bpl.s	loc_16CE0
00016BF8 D368 000C                  		add.w	d1,$C(a0)
00016BFC 317C FC00 0012             		move.w	#-$400,$12(a0)
00016C02                            
00016C02                            loc_16CE0:
00016C02 4A28 0001                  		tst.b	1(a0)
00016C06 6A00 FDCA                  		bpl.w	Obj78_ChkGone
00016C0A 4EF9 0000 D5AC             		jmp	DisplaySprite
00016C10                            ; ===========================================================================
00016C10                            Ani_obj78:
00016C10                            	include "_anim\obj78.asm"
00016C10                            ; ---------------------------------------------------------------------------
00016C10                            ; Animation script - Caterkiller enemy (uses non-standard format)
00016C10                            ; ---------------------------------------------------------------------------
00016C10 0000 0000 0000 0000 0000+  	dc.b 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 1
00016C20 0101 0101 0101 0202 0202+  	dc.b 1,	1, 1, 1, 1, 1, 2, 2, 2,	2, 2, 3, 3, 3, 3, 3
00016C30 0404 0404 0404 0505 0505+  	dc.b 4,	4, 4, 4, 4, 4, 5, 5, 5,	5, 5, 6, 6, 6, 6, 6
00016C40 0606 0707 0707 0707 0707+  	dc.b 6,	6, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, $FF, 7, 7, $FF
00016C50 0707 0707 0707 0707 0707+  	dc.b 7,	7, 7, 7, 7, 7, 7, 7, 7,	7, 7, 7, 7, 7, 7, 6
00016C60 0606 0606 0606 0505 0505+  	dc.b 6,	6, 6, 6, 6, 6, 5, 5, 5,	5, 5, 4, 4, 4, 4, 4
00016C70 0403 0303 0303 0202 0202+  	dc.b 4,	3, 3, 3, 3, 3, 2, 2, 2,	2, 2, 1, 1, 1, 1, 1
00016C80 0101 0000 0000 0000 0000+  	dc.b 1,	1, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, $FF, 0, 0, $FF
00016C90                            	even
00016C90                            	even
00016C90                            
00016C90                            ; ---------------------------------------------------------------------------
00016C90                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016C90                            ; ---------------------------------------------------------------------------
00016C90                            Map_obj78:
00016C90                            	include "_maps\obj78.asm"
00016C90                            ; ---------------------------------------------------------------------------
00016C90                            ; Sprite mappings - Caterkiller	enemy (MZ, SBZ)
00016C90                            ; ---------------------------------------------------------------------------
00016C90 0000 0000                  		dc.w byte_16D9E-Map_obj78, byte_16DA4-Map_obj78
00016C94 0000 0000                  		dc.w byte_16DAA-Map_obj78, byte_16DB0-Map_obj78
00016C98 0000 0000                  		dc.w byte_16DB6-Map_obj78, byte_16DBC-Map_obj78
00016C9C 0000 0000                  		dc.w byte_16DC2-Map_obj78, byte_16DC8-Map_obj78
00016CA0 0000 0000                  		dc.w byte_16DCE-Map_obj78, byte_16DD4-Map_obj78
00016CA4 0000 0000                  		dc.w byte_16DDA-Map_obj78, byte_16DE0-Map_obj78
00016CA8 0000 0000                  		dc.w byte_16DE6-Map_obj78, byte_16DEC-Map_obj78
00016CAC 0000 0000                  		dc.w byte_16DF2-Map_obj78, byte_16DF8-Map_obj78
00016CB0 0000 0000                  		dc.w byte_16DFE-Map_obj78, byte_16E04-Map_obj78
00016CB4 0000 0000                  		dc.w byte_16E0A-Map_obj78, byte_16E10-Map_obj78
00016CB8 0000 0000                  		dc.w byte_16E16-Map_obj78, byte_16E1C-Map_obj78
00016CBC 0000 0000                  		dc.w byte_16E22-Map_obj78, byte_16E28-Map_obj78
00016CC0 01                         byte_16D9E:	dc.b 1
00016CC1 F206 0000 F8               		dc.b $F2, 6, 0,	0, $F8
00016CC6 01                         byte_16DA4:	dc.b 1
00016CC7 F106 0000 F8               		dc.b $F1, 6, 0,	0, $F8
00016CCC 01                         byte_16DAA:	dc.b 1
00016CCD F006 0000 F8               		dc.b $F0, 6, 0,	0, $F8
00016CD2 01                         byte_16DB0:	dc.b 1
00016CD3 EF06 0000 F8               		dc.b $EF, 6, 0,	0, $F8
00016CD8 01                         byte_16DB6:	dc.b 1
00016CD9 EE06 0000 F8               		dc.b $EE, 6, 0,	0, $F8
00016CDE 01                         byte_16DBC:	dc.b 1
00016CDF ED06 0000 F8               		dc.b $ED, 6, 0,	0, $F8
00016CE4 01                         byte_16DC2:	dc.b 1
00016CE5 EC06 0000 F8               		dc.b $EC, 6, 0,	0, $F8
00016CEA 01                         byte_16DC8:	dc.b 1
00016CEB EB06 0000 F8               		dc.b $EB, 6, 0,	0, $F8
00016CF0 01                         byte_16DCE:	dc.b 1
00016CF1 F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
00016CF6 01                         byte_16DD4:	dc.b 1
00016CF7 F705 000C F8               		dc.b $F7, 5, 0,	$C, $F8
00016CFC 01                         byte_16DDA:	dc.b 1
00016CFD F605 000C F8               		dc.b $F6, 5, 0,	$C, $F8
00016D02 01                         byte_16DE0:	dc.b 1
00016D03 F505 000C F8               		dc.b $F5, 5, 0,	$C, $F8
00016D08 01                         byte_16DE6:	dc.b 1
00016D09 F405 000C F8               		dc.b $F4, 5, 0,	$C, $F8
00016D0E 01                         byte_16DEC:	dc.b 1
00016D0F F305 000C F8               		dc.b $F3, 5, 0,	$C, $F8
00016D14 01                         byte_16DF2:	dc.b 1
00016D15 F205 000C F8               		dc.b $F2, 5, 0,	$C, $F8
00016D1A 01                         byte_16DF8:	dc.b 1
00016D1B F105 000C F8               		dc.b $F1, 5, 0,	$C, $F8
00016D20 01                         byte_16DFE:	dc.b 1
00016D21 F206 0006 F8               		dc.b $F2, 6, 0,	6, $F8
00016D26 01                         byte_16E04:	dc.b 1
00016D27 F106 0006 F8               		dc.b $F1, 6, 0,	6, $F8
00016D2C 01                         byte_16E0A:	dc.b 1
00016D2D F006 0006 F8               		dc.b $F0, 6, 0,	6, $F8
00016D32 01                         byte_16E10:	dc.b 1
00016D33 EF06 0006 F8               		dc.b $EF, 6, 0,	6, $F8
00016D38 01                         byte_16E16:	dc.b 1
00016D39 EE06 0006 F8               		dc.b $EE, 6, 0,	6, $F8
00016D3E 01                         byte_16E1C:	dc.b 1
00016D3F ED06 0006 F8               		dc.b $ED, 6, 0,	6, $F8
00016D44 01                         byte_16E22:	dc.b 1
00016D45 EC06 0006 F8               		dc.b $EC, 6, 0,	6, $F8
00016D4A 01                         byte_16E28:	dc.b 1
00016D4B EB06 0006 F8               		dc.b $EB, 6, 0,	6, $F8
00016D50                            		even
00016D50                            		even
00016D50                            
00016D50                            ; ===========================================================================
00016D50                            ; ---------------------------------------------------------------------------
00016D50                            ; Object 79 - lamppost
00016D50                            ; ---------------------------------------------------------------------------
00016D50                            
00016D50                            Obj79:					; XREF: Obj_Index
00016D50 7000                       		moveq	#0,d0
00016D52 1028 0024                  		move.b	$24(a0),d0
00016D56 323B 0000                  		move.w	Obj79_Index(pc,d0.w),d1
00016D5A 4EBB 1000                  		jsr	Obj79_Index(pc,d1.w)
00016D5E 4EFA 88E4                  		jmp	MarkObjGone
00016D62                            ; ===========================================================================
00016D62 0000                       Obj79_Index:	dc.w Obj79_Main-Obj79_Index
00016D64 0000                       		dc.w Obj79_BlueLamp-Obj79_Index
00016D66 0000                       		dc.w Obj79_AfterHit-Obj79_Index
00016D68 0000                       		dc.w Obj79_Twirl-Obj79_Index
00016D6A                            ; ===========================================================================
00016D6A                            
00016D6A                            Obj79_Main:				; XREF: Obj79_Index
00016D6A 5428 0024                  		addq.b	#2,$24(a0)
00016D6E 217C 0000 0000 0004        		move.l	#Map_obj79,4(a0)
00016D76 317C 07A0 0002             		move.w	#$7A0,2(a0)
00016D7C 117C 0004 0001             		move.b	#4,1(a0)
00016D82 117C 0008 0019             		move.b	#8,$19(a0)
00016D88 117C 0005 0018             		move.b	#5,$18(a0)
00016D8E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016D92 7000                       		moveq	#0,d0
00016D94 1028 0023                  		move.b	$23(a0),d0
00016D98 08B2 0007 0002             		bclr	#7,2(a2,d0.w)
00016D9E 0832 0000 0002             		btst	#0,2(a2,d0.w)
00016DA4 6600                       		bne.s	Obj79_RedLamp
00016DA6 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016DAA 0201 007F                  		andi.b	#$7F,d1
00016DAE 1428 0028                  		move.b	$28(a0),d2	; get lamppost number
00016DB2 0202 007F                  		andi.b	#$7F,d2
00016DB6 B202                       		cmp.b	d2,d1		; is lamppost number higher than the number hit?
00016DB8 6500                       		bcs.s	Obj79_BlueLamp	; if yes, branch
00016DBA                            
00016DBA                            Obj79_RedLamp:
00016DBA 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016DC0 117C 0004 0024             		move.b	#4,$24(a0)	; run "Obj79_AfterHit" routine
00016DC6 117C 0003 001A             		move.b	#3,$1A(a0)	; use red lamppost frame
00016DCC 4E75                       		rts	
00016DCE                            ; ===========================================================================
00016DCE                            
00016DCE                            Obj79_BlueLamp:				; XREF: Obj79_Index
00016DCE 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
00016DD2 6600 0000                  		bne.w	locret_16F90	; if yes, branch
00016DD6 4A38 F7C8                  		tst.b	($FFFFF7C8).w
00016DDA 6B00 0000                  		bmi.w	locret_16F90
00016DDE 1238 FE30                  		move.b	($FFFFFE30).w,d1
00016DE2 0201 007F                  		andi.b	#$7F,d1
00016DE6 1428 0028                  		move.b	$28(a0),d2
00016DEA 0202 007F                  		andi.b	#$7F,d2
00016DEE B202                       		cmp.b	d2,d1
00016DF0 6500                       		bcs.s	Obj79_HitLamp
00016DF2 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016DF6 7000                       		moveq	#0,d0
00016DF8 1028 0023                  		move.b	$23(a0),d0
00016DFC 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016E02 117C 0004 0024             		move.b	#4,$24(a0)
00016E08 117C 0003 001A             		move.b	#3,$1A(a0)
00016E0E 6000 0000                  		bra.w	locret_16F90
00016E12                            ; ===========================================================================
00016E12                            
00016E12                            Obj79_HitLamp:
00016E12 3038 D008                  		move.w	($FFFFD008).w,d0
00016E16 9068 0008                  		sub.w	8(a0),d0
00016E1A 5040                       		addq.w	#8,d0
00016E1C 0C40 0010                  		cmpi.w	#$10,d0
00016E20 6400 0000                  		bcc.w	locret_16F90
00016E24 3038 D00C                  		move.w	($FFFFD00C).w,d0
00016E28 9068 000C                  		sub.w	$C(a0),d0
00016E2C 0640 0040                  		addi.w	#$40,d0
00016E30 0C40 0068                  		cmpi.w	#$68,d0
00016E34 6400                       		bcc.s	locret_16F90
00016E36 303C 00A1                  		move.w	#$A1,d0
00016E3A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lamppost sound
00016E40 5428 0024                  		addq.b	#2,$24(a0)
00016E44 4EB9 0000 DA32             		jsr	SingleObjLoad
00016E4A 6600                       		bne.s	loc_16F76
00016E4C 12BC 0079                  		move.b	#$79,0(a1)	; load twirling	lamp object
00016E50 137C 0006 0024             		move.b	#6,$24(a1)	; use "Obj79_Twirl" routine
00016E56 3368 0008 0030             		move.w	8(a0),$30(a1)
00016E5C 3368 000C 0032             		move.w	$C(a0),$32(a1)
00016E62 0469 0018 0032             		subi.w	#$18,$32(a1)
00016E68 237C 0000 0000 0004        		move.l	#Map_obj79,4(a1)
00016E70 337C 07A0 0002             		move.w	#$7A0,2(a1)
00016E76 137C 0004 0001             		move.b	#4,1(a1)
00016E7C 137C 0008 0019             		move.b	#8,$19(a1)
00016E82 137C 0004 0018             		move.b	#4,$18(a1)
00016E88 137C 0002 001A             		move.b	#2,$1A(a1)
00016E8E 337C 0020 0036             		move.w	#$20,$36(a1)
00016E94                            
00016E94                            loc_16F76:
00016E94 117C 0001 001A             		move.b	#1,$1A(a0)	; use "post only" frame, with no lamp
00016E9A 6100 0000                  		bsr.w	Obj79_StoreInfo
00016E9E 45F8 FC00                  		lea	($FFFFFC00).w,a2
00016EA2 7000                       		moveq	#0,d0
00016EA4 1028 0023                  		move.b	$23(a0),d0
00016EA8 08F2 0000 0002             		bset	#0,2(a2,d0.w)
00016EAE                            
00016EAE                            locret_16F90:
00016EAE 4E75                       		rts	
00016EB0                            ; ===========================================================================
00016EB0                            
00016EB0                            Obj79_AfterHit:				; XREF: Obj79_Index
00016EB0 4E75                       		rts	
00016EB2                            ; ===========================================================================
00016EB2                            
00016EB2                            Obj79_Twirl:				; XREF: Obj79_Index
00016EB2 5368 0036                  		subq.w	#1,$36(a0)
00016EB6 6A00                       		bpl.s	loc_16FA0
00016EB8 117C 0004 0024             		move.b	#4,$24(a0)
00016EBE                            
00016EBE                            loc_16FA0:
00016EBE 1028 0026                  		move.b	$26(a0),d0
00016EC2 0428 0010 0026             		subi.b	#$10,$26(a0)
00016EC8 0400 0040                  		subi.b	#$40,d0
00016ECC 4EB9 0000 29DA             		jsr	(CalcSine).l
00016ED2 C3FC 0C00                  		muls.w	#$C00,d1
00016ED6 4841                       		swap	d1
00016ED8 D268 0030                  		add.w	$30(a0),d1
00016EDC 3141 0008                  		move.w	d1,8(a0)
00016EE0 C1FC 0C00                  		muls.w	#$C00,d0
00016EE4 4840                       		swap	d0
00016EE6 D068 0032                  		add.w	$32(a0),d0
00016EEA 3140 000C                  		move.w	d0,$C(a0)
00016EEE 4E75                       		rts	
00016EF0                            ; ===========================================================================
00016EF0                            ; ---------------------------------------------------------------------------
00016EF0                            ; Subroutine to	store information when you hit a lamppost
00016EF0                            ; ---------------------------------------------------------------------------
00016EF0                            
00016EF0                            Obj79_StoreInfo:			; XREF: Obj79_HitLamp
00016EF0 11E8 0028 FE30             		move.b	$28(a0),($FFFFFE30).w 		; lamppost number
00016EF6 11F8 FE30 FE31             		move.b	($FFFFFE30).w,($FFFFFE31).w
00016EFC 31E8 0008 FE32             		move.w	8(a0),($FFFFFE32).w		; x-position
00016F02 31E8 000C FE34             		move.w	$C(a0),($FFFFFE34).w		; y-position
00016F08 31F8 FE20 FE36             		move.w	($FFFFFE20).w,($FFFFFE36).w 	; rings
00016F0E 11F8 FE1B FE54             		move.b	($FFFFFE1B).w,($FFFFFE54).w 	; lives
00016F14 21F8 FE22 FE38             		move.l	($FFFFFE22).w,($FFFFFE38).w 	; time
00016F1A 11F8 F742 FE3C             		move.b	($FFFFF742).w,($FFFFFE3C).w 	; routine counter for dynamic level mod
00016F20 31F8 F72E FE3E             		move.w	($FFFFF72E).w,($FFFFFE3E).w 	; lower y-boundary of level
00016F26 31F8 F700 FE40             		move.w	($FFFFF700).w,($FFFFFE40).w 	; screen x-position
00016F2C 31F8 F704 FE42             		move.w	($FFFFF704).w,($FFFFFE42).w 	; screen y-position
00016F32 31F8 F708 FE44             		move.w	($FFFFF708).w,($FFFFFE44).w 	; bg position
00016F38 31F8 F70C FE46             		move.w	($FFFFF70C).w,($FFFFFE46).w 	; bg position
00016F3E 31F8 F710 FE48             		move.w	($FFFFF710).w,($FFFFFE48).w 	; bg position
00016F44 31F8 F714 FE4A             		move.w	($FFFFF714).w,($FFFFFE4A).w 	; bg position
00016F4A 31F8 F718 FE4C             		move.w	($FFFFF718).w,($FFFFFE4C).w 	; bg position
00016F50 31F8 F71C FE4E             		move.w	($FFFFF71C).w,($FFFFFE4E).w 	; bg position
00016F56 31F8 F648 FE50             		move.w	($FFFFF648).w,($FFFFFE50).w 	; water height
00016F5C 11F8 F64D FE52             		move.b	($FFFFF64D).w,($FFFFFE52).w 	; rountine counter for water
00016F62 11F8 F64E FE53             		move.b	($FFFFF64E).w,($FFFFFE53).w 	; water direction
00016F68 4E75                       		rts	
00016F6A                            
00016F6A                            ; ---------------------------------------------------------------------------
00016F6A                            ; Subroutine to	load stored info when you start	a level	from a lamppost
00016F6A                            ; ---------------------------------------------------------------------------
00016F6A                            
00016F6A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00016F6A                            
00016F6A                            
00016F6A                            Obj79_LoadInfo:				; XREF: LevelSizeLoad
00016F6A 11F8 FE31 FE30             		move.b	($FFFFFE31).w,($FFFFFE30).w
00016F70 31F8 FE32 D008             		move.w	($FFFFFE32).w,($FFFFD008).w
00016F76 31F8 FE34 D00C             		move.w	($FFFFFE34).w,($FFFFD00C).w
00016F7C 31F8 FE36 FE20             		move.w	($FFFFFE36).w,($FFFFFE20).w
00016F82 11F8 FE54 FE1B             		move.b	($FFFFFE54).w,($FFFFFE1B).w
00016F88 4278 FE20                  		clr.w	($FFFFFE20).w
00016F8C 4238 FE1B                  		clr.b	($FFFFFE1B).w
00016F90 21F8 FE38 FE22             		move.l	($FFFFFE38).w,($FFFFFE22).w
00016F96 11FC 003B FE25             		move.b	#59,($FFFFFE25).w
00016F9C 5338 FE24                  		subq.b	#1,($FFFFFE24).w
00016FA0 11F8 FE3C F742             		move.b	($FFFFFE3C).w,($FFFFF742).w
00016FA6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00016FAC 31F8 FE3E F72E             		move.w	($FFFFFE3E).w,($FFFFF72E).w
00016FB2 31F8 FE3E F726             		move.w	($FFFFFE3E).w,($FFFFF726).w
00016FB8 31F8 FE40 F700             		move.w	($FFFFFE40).w,($FFFFF700).w
00016FBE 31F8 FE42 F704             		move.w	($FFFFFE42).w,($FFFFF704).w
00016FC4 31F8 FE44 F708             		move.w	($FFFFFE44).w,($FFFFF708).w
00016FCA 31F8 FE46 F70C             		move.w	($FFFFFE46).w,($FFFFF70C).w
00016FD0 31F8 FE48 F710             		move.w	($FFFFFE48).w,($FFFFF710).w
00016FD6 31F8 FE4A F714             		move.w	($FFFFFE4A).w,($FFFFF714).w
00016FDC 31F8 FE4C F718             		move.w	($FFFFFE4C).w,($FFFFF718).w
00016FE2 31F8 FE4E F71C             		move.w	($FFFFFE4E).w,($FFFFF71C).w
00016FE8 0C38 0001 FE10             		cmpi.b	#1,($FFFFFE10).w
00016FEE 6600                       		bne.s	loc_170E4
00016FF0 31F8 FE50 F648             		move.w	($FFFFFE50).w,($FFFFF648).w
00016FF6 11F8 FE52 F64D             		move.b	($FFFFFE52).w,($FFFFF64D).w
00016FFC 11F8 FE53 F64E             		move.b	($FFFFFE53).w,($FFFFF64E).w
00017002                            
00017002                            loc_170E4:
00017002 4A38 FE30                  		tst.b	($FFFFFE30).w
00017006 6A00                       		bpl.s	locret_170F6
00017008 3038 FE32                  		move.w	($FFFFFE32).w,d0
0001700C 0440 00A0                  		subi.w	#$A0,d0
00017010 31C0 F728                  		move.w	d0,($FFFFF728).w
00017014                            
00017014                            locret_170F6:
00017014 4E75                       		rts	
00017016                            ; End of function Obj79_LoadInfo
00017016                            
00017016                            ; ===========================================================================
00017016                            ; ---------------------------------------------------------------------------
00017016                            ; Sprite mappings - lamppost
00017016                            ; ---------------------------------------------------------------------------
00017016                            Map_obj79:
00017016                            	include "_maps\obj79.asm"
00017016                            ; ---------------------------------------------------------------------------
00017016                            ; Sprite mappings - lamppost
00017016                            ; ---------------------------------------------------------------------------
00017016 0000 0000                  		dc.w byte_17100-Map_obj79, byte_1711F-Map_obj79
0001701A 0000 0000                  		dc.w byte_17134-Map_obj79, byte_1713F-Map_obj79
0001701E 06                         byte_17100:	dc.b 6
0001701F E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017024 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017029 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001702E F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017033 D401 0006 F8               		dc.b $D4, 1, 0,	6, $F8
00017038 D401 0806 00               		dc.b $D4, 1, 8,	6, 0
0001703D 04                         byte_1711F:	dc.b 4
0001703E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017043 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017048 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001704D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017052 02                         byte_17134:	dc.b 2
00017053 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00017058 F801 0808 00               		dc.b $F8, 1, 8,	8, 0
0001705D 06                         byte_1713F:	dc.b 6
0001705E E401 0000 F8               		dc.b $E4, 1, 0,	0, $F8
00017063 E401 0800 00               		dc.b $E4, 1, 8,	0, 0
00017068 F403 2002 F8               		dc.b $F4, 3, $20, 2, $F8
0001706D F403 2802 00               		dc.b $F4, 3, $28, 2, 0
00017072 D401 0008 F8               		dc.b $D4, 1, 0,	8, $F8
00017077 D401 0808 00               		dc.b $D4, 1, 8,	8, 0
0001707C                            		even
0001707C                            		even
0001707C                            
0001707C                            ; ===========================================================================
0001707C                            ; ---------------------------------------------------------------------------
0001707C                            ; Object 7D - hidden points at the end of a level
0001707C                            ; ---------------------------------------------------------------------------
0001707C                            
0001707C                            Obj7D:					; XREF: Obj_Index
0001707C 7000                       		moveq	#0,d0
0001707E 1028 0024                  		move.b	$24(a0),d0
00017082 323B 0000                  		move.w	Obj7D_Index(pc,d0.w),d1
00017086 4EFB 1000                  		jmp	Obj7D_Index(pc,d1.w)
0001708A                            ; ===========================================================================
0001708A 0000                       Obj7D_Index:	dc.w Obj7D_Main-Obj7D_Index
0001708C 0000                       		dc.w Obj7D_DelayDel-Obj7D_Index
0001708E                            ; ===========================================================================
0001708E                            
0001708E                            Obj7D_Main:				; XREF: Obj7D_Index
0001708E 7410                       		moveq	#$10,d2
00017090 3602                       		move.w	d2,d3
00017092 D643                       		add.w	d3,d3
00017094 43F8 D000                  		lea	($FFFFD000).w,a1
00017098 3029 0008                  		move.w	8(a1),d0
0001709C 9068 0008                  		sub.w	8(a0),d0
000170A0 D042                       		add.w	d2,d0
000170A2 B043                       		cmp.w	d3,d0
000170A4 6400                       		bcc.s	Obj7D_ChkDel
000170A6 3229 000C                  		move.w	$C(a1),d1
000170AA 9268 000C                  		sub.w	$C(a0),d1
000170AE D242                       		add.w	d2,d1
000170B0 B243                       		cmp.w	d3,d1
000170B2 6400                       		bcc.s	Obj7D_ChkDel
000170B4 4A78 FE08                  		tst.w	($FFFFFE08).w
000170B8 6600                       		bne.s	Obj7D_ChkDel
000170BA 4A38 F7CD                  		tst.b	($FFFFF7CD).w
000170BE 6600                       		bne.s	Obj7D_ChkDel
000170C0 5428 0024                  		addq.b	#2,$24(a0)
000170C4 217C 0000 0000 0004        		move.l	#Map_obj7D,4(a0)
000170CC 317C 84B6 0002             		move.w	#$84B6,2(a0)
000170D2 0028 0004 0001             		ori.b	#4,1(a0)
000170D8 117C 0000 0018             		move.b	#0,$18(a0)
000170DE 117C 0010 0019             		move.b	#$10,$19(a0)
000170E4 1168 0028 001A             		move.b	$28(a0),$1A(a0)
000170EA 317C 0077 0030             		move.w	#119,$30(a0)	; set display time to 2	seconds
000170F0 303C 00C9                  		move.w	#$C9,d0
000170F4 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play bonus sound
000170FA 7000                       		moveq	#0,d0
000170FC 1028 0028                  		move.b	$28(a0),d0
00017100 D040                       		add.w	d0,d0
00017102 303B 0000                  		move.w	Obj7D_Points(pc,d0.w),d0 ; load	bonus points array
00017106 4EB9 0000 0000             		jsr	AddPoints
0001710C                            
0001710C                            Obj7D_ChkDel:
0001710C 3028 0008                  		move.w	8(a0),d0
00017110 0240 FF80                  		andi.w	#$FF80,d0
00017114 3238 F700                  		move.w	($FFFFF700).w,d1
00017118 0441 0080                  		subi.w	#$80,d1
0001711C 0241 FF80                  		andi.w	#$FF80,d1
00017120 9041                       		sub.w	d1,d0
00017122 0C40 0280                  		cmpi.w	#$280,d0
00017126 6200                       		bhi.s	Obj7D_Delete
00017128 4E75                       		rts	
0001712A                            ; ===========================================================================
0001712A                            
0001712A                            Obj7D_Delete:
0001712A 4EF9 0000 D5E8             		jmp	DeleteObject
00017130                            ; ===========================================================================
00017130 0000                       Obj7D_Points:	dc.w 0			; Bonus	points array
00017132 03E8                       		dc.w 1000
00017134 0064                       		dc.w 100
00017136 0001                       		dc.w 1
00017138                            ; ===========================================================================
00017138                            
00017138                            Obj7D_DelayDel:				; XREF: Obj7D_Index
00017138 5368 0030                  		subq.w	#1,$30(a0)	; subtract 1 from display time
0001713C 6B00                       		bmi.s	Obj7D_Delete2	; if time is zero, branch
0001713E 3028 0008                  		move.w	8(a0),d0
00017142 0240 FF80                  		andi.w	#-$80,d0
00017146 3238 F700                  		move.w	($FFFFF700).w,d1
0001714A 0441 0080                  		subi.w	#$80,d1
0001714E 0241 FF80                  		andi.w	#-$80,d1
00017152 9041                       		sub.w	d1,d0
00017154 0C40 0280                  		cmpi.w	#$280,d0
00017158 6200                       		bhi.s	Obj7D_Delete2
0001715A 4EF9 0000 D5AC             		jmp	DisplaySprite
00017160                            ; ===========================================================================
00017160                            
00017160                            Obj7D_Delete2:
00017160 4EF9 0000 D5E8             		jmp	DeleteObject
00017166                            ; ===========================================================================
00017166                            ; ---------------------------------------------------------------------------
00017166                            ; Sprite mappings - hidden points at the end of	a level
00017166                            ; ---------------------------------------------------------------------------
00017166                            Map_obj7D:
00017166                            	include "_maps\obj7D.asm"
00017166                            ; ---------------------------------------------------------------------------
00017166                            ; Sprite mappings - hidden points at the end of	a level
00017166                            ; ---------------------------------------------------------------------------
00017166 0000 0000                  		dc.w byte_17250-Map_obj7D, byte_17251-Map_obj7D
0001716A 0000 0000                  		dc.w byte_17257-Map_obj7D, byte_1725D-Map_obj7D
0001716E 00                         byte_17250:	dc.b 0
0001716F 01                         byte_17251:	dc.b 1
00017170 F40E 0000 F0               		dc.b $F4, $E, 0, 0, $F0
00017175 01                         byte_17257:	dc.b 1
00017176 F40E 000C F0               		dc.b $F4, $E, 0, $C, $F0
0001717B 01                         byte_1725D:	dc.b 1
0001717C F40E 0018 F0               		dc.b $F4, $E, 0, $18, $F0
00017182 00                         		even
00017182 00                         		even
00017182                            
00017182                            ; ===========================================================================
00017182                            ; ---------------------------------------------------------------------------
00017182                            ; Object 8A - "SONIC TEAM PRESENTS" and	credits
00017182                            ; ---------------------------------------------------------------------------
00017182                            
00017182                            Obj8A:					; XREF: Obj_Index
00017182 7000                       		moveq	#0,d0
00017184 1028 0024                  		move.b	$24(a0),d0
00017188 323B 0000                  		move.w	Obj8A_Index(pc,d0.w),d1
0001718C 4EFB 1000                  		jmp	Obj8A_Index(pc,d1.w)
00017190                            ; ===========================================================================
00017190 0000                       Obj8A_Index:	dc.w Obj8A_Main-Obj8A_Index
00017192 0000                       		dc.w Obj8A_Display-Obj8A_Index
00017194                            ; ===========================================================================
00017194                            
00017194                            Obj8A_Main:				; XREF: Obj8A_Index
00017194 5428 0024                  		addq.b	#2,$24(a0)
00017198 317C 0120 0008             		move.w	#$120,8(a0)
0001719E 317C 00F0 000A             		move.w	#$F0,$A(a0)
000171A4 217C 0000 0000 0004        		move.l	#Map_obj8A,4(a0)
000171AC 317C 05A0 0002             		move.w	#$5A0,2(a0)
000171B2 3038 FFF4                  		move.w	($FFFFFFF4).w,d0 ; load	credits	index number
000171B6 1140 001A                  		move.b	d0,$1A(a0)	; display appropriate sprite
000171BA 117C 0000 0001             		move.b	#0,1(a0)
000171C0 117C 0000 0018             		move.b	#0,$18(a0)
000171C6 0C38 0004 F600             		cmpi.b	#4,($FFFFF600).w ; is the scene	number 04 (title screen)?
000171CC 6600                       		bne.s	Obj8A_Display	; if not, branch
000171CE 317C 00A6 0002             		move.w	#$A6,2(a0)
000171D4 117C 000A 001A             		move.b	#$A,$1A(a0)	; display "SONIC TEAM PRESENTS"
000171DA 4A38 FFE3                  		tst.b	($FFFFFFE3).w	; is hidden credits cheat on?
000171DE 6700                       		beq.s	Obj8A_Display	; if not, branch
000171E0 0C38 0072 F604             		cmpi.b	#$72,($FFFFF604).w ; is	Start+A+C+Down being pressed?
000171E6 6600                       		bne.s	Obj8A_Display	; if not, branch
000171E8 31FC 0EEE FBC0             		move.w	#$EEE,($FFFFFBC0).w ; 3rd pallet, 1st entry = white
000171EE 31FC 0880 FBC2             		move.w	#$880,($FFFFFBC2).w ; 3rd pallet, 2nd entry = cyan
000171F4 4EF9 0000 D5E8             		jmp	DeleteObject
000171FA                            ; ===========================================================================
000171FA                            
000171FA                            Obj8A_Display:				; XREF: Obj8A_Index
000171FA 4EF9 0000 D5AC             		jmp	DisplaySprite
00017200                            ; ===========================================================================
00017200                            ; ---------------------------------------------------------------------------
00017200                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017200                            ; ---------------------------------------------------------------------------
00017200                            Map_obj8A:
00017200                            	include "_maps\obj8A.asm"
00017200                            ; ---------------------------------------------------------------------------
00017200                            ; Sprite mappings - "SONIC TEAM	PRESENTS" and credits
00017200                            ; ---------------------------------------------------------------------------
00017200 0000 0000                  		dc.w byte_172F8-Map_obj8A, byte_1733F-Map_obj8A
00017204 0000 0000                  		dc.w byte_17390-Map_obj8A, byte_173C3-Map_obj8A
00017208 0000 0000                  		dc.w byte_1743C-Map_obj8A, byte_174A1-Map_obj8A
0001720C 0000 0000                  		dc.w byte_17524-Map_obj8A, byte_17598-Map_obj8A
00017210 0000 0000                  		dc.w byte_17634-Map_obj8A, byte_17680-Map_obj8A
00017214 0000                       		dc.w byte_176A9-Map_obj8A
00017216 0E                         byte_172F8:	dc.b $E			 ; SONIC TEAM STAFF
00017217 F805 002E 88               		dc.b $F8, 5, 0,	$2E, $88
0001721C F805 0026 98               		dc.b $F8, 5, 0,	$26, $98
00017221 F805 001A A8               		dc.b $F8, 5, 0,	$1A, $A8
00017226 F801 0046 B8               		dc.b $F8, 1, 0,	$46, $B8
0001722B F805 001E C0               		dc.b $F8, 5, 0,	$1E, $C0
00017230 F805 003E D8               		dc.b $F8, 5, 0,	$3E, $D8
00017235 F805 000E E8               		dc.b $F8, 5, 0,	$E, $E8
0001723A F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001723F F809 0008 08               		dc.b $F8, 9, 0,	8, 8
00017244 F805 002E 28               		dc.b $F8, 5, 0,	$2E, $28
00017249 F805 003E 38               		dc.b $F8, 5, 0,	$3E, $38
0001724E F805 0004 48               		dc.b $F8, 5, 0,	4, $48
00017253 F805 005C 58               		dc.b $F8, 5, 0,	$5C, $58
00017258 F805 005C 68               		dc.b $F8, 5, 0,	$5C, $68
0001725D 10                         byte_1733F:	dc.b $10		; GAME PLAN CAROL YAS
0001725E D805 0000 80               		dc.b $D8, 5, 0,	0, $80
00017263 D805 0004 90               		dc.b $D8, 5, 0,	4, $90
00017268 D809 0008 A0               		dc.b $D8, 9, 0,	8, $A0
0001726D D805 000E B4               		dc.b $D8, 5, 0,	$E, $B4
00017272 D805 0012 D0               		dc.b $D8, 5, 0,	$12, $D0
00017277 D805 0016 E0               		dc.b $D8, 5, 0,	$16, $E0
0001727C D805 0004 F0               		dc.b $D8, 5, 0,	4, $F0
00017281 D805 001A 00               		dc.b $D8, 5, 0,	$1A, 0
00017286 0805 001E C8               		dc.b 8,	5, 0, $1E, $C8
0001728B 0805 0004 D8               		dc.b 8,	5, 0, 4, $D8
00017290 0805 0022 E8               		dc.b 8,	5, 0, $22, $E8
00017295 0805 0026 F8               		dc.b 8,	5, 0, $26, $F8
0001729A 0805 0016 08               		dc.b 8,	5, 0, $16, 8
0001729F 0805 002A 20               		dc.b 8,	5, 0, $2A, $20
000172A4 0805 0004 30               		dc.b 8,	5, 0, 4, $30
000172A9 0805 002E 44               		dc.b 8,	5, 0, $2E, $44
000172AE 0A                         byte_17390:	dc.b $A			 ; PROGRAM YU 2
000172AF D805 0012 80               		dc.b $D8, 5, 0,	$12, $80
000172B4 D805 0022 90               		dc.b $D8, 5, 0,	$22, $90
000172B9 D805 0026 A0               		dc.b $D8, 5, 0,	$26, $A0
000172BE D805 0000 B0               		dc.b $D8, 5, 0,	0, $B0
000172C3 D805 0022 C0               		dc.b $D8, 5, 0,	$22, $C0
000172C8 D805 0004 D0               		dc.b $D8, 5, 0,	4, $D0
000172CD D809 0008 E0               		dc.b $D8, 9, 0,	8, $E0
000172D2 0805 002A E8               		dc.b 8,	5, 0, $2A, $E8
000172D7 0805 0032 F8               		dc.b 8,	5, 0, $32, $F8
000172DC 0805 0036 08               		dc.b 8,	5, 0, $36, 8
000172E1 18                         byte_173C3:	dc.b $18		 ; CHARACTER DESIGN BIGISLAND
000172E2 D805 001E 88               		dc.b $D8, 5, 0,	$1E, $88
000172E7 D805 003A 98               		dc.b $D8, 5, 0,	$3A, $98
000172EC D805 0004 A8               		dc.b $D8, 5, 0,	4, $A8
000172F1 D805 0022 B8               		dc.b $D8, 5, 0,	$22, $B8
000172F6 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000172FB D805 001E D8               		dc.b $D8, 5, 0,	$1E, $D8
00017300 D805 003E E8               		dc.b $D8, 5, 0,	$3E, $E8
00017305 D805 000E F8               		dc.b $D8, 5, 0,	$E, $F8
0001730A D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
0001730F D805 0042 20               		dc.b $D8, 5, 0,	$42, $20
00017314 D805 000E 30               		dc.b $D8, 5, 0,	$E, $30
00017319 D805 002E 40               		dc.b $D8, 5, 0,	$2E, $40
0001731E D801 0046 50               		dc.b $D8, 1, 0,	$46, $50
00017323 D805 0000 58               		dc.b $D8, 5, 0,	0, $58
00017328 D805 001A 68               		dc.b $D8, 5, 0,	$1A, $68
0001732D 0805 0048 C0               		dc.b 8,	5, 0, $48, $C0
00017332 0801 0046 D0               		dc.b 8,	1, 0, $46, $D0
00017337 0805 0000 D8               		dc.b 8,	5, 0, 0, $D8
0001733C 0801 0046 E8               		dc.b 8,	1, 0, $46, $E8
00017341 0805 002E F0               		dc.b 8,	5, 0, $2E, $F0
00017346 0805 0016 00               		dc.b 8,	5, 0, $16, 0
0001734B 0805 0004 10               		dc.b 8,	5, 0, 4, $10
00017350 0805 001A 20               		dc.b 8,	5, 0, $1A, $20
00017355 0805 0042 30               		dc.b 8,	5, 0, $42, $30
0001735A 14                         byte_1743C:	dc.b $14		 ; DESIGN JINYA	PHENIX RIE
0001735B D005 0042 A0               		dc.b $D0, 5, 0,	$42, $A0
00017360 D005 000E B0               		dc.b $D0, 5, 0,	$E, $B0
00017365 D005 002E C0               		dc.b $D0, 5, 0,	$2E, $C0
0001736A D001 0046 D0               		dc.b $D0, 1, 0,	$46, $D0
0001736F D005 0000 D8               		dc.b $D0, 5, 0,	0, $D8
00017374 D005 001A E8               		dc.b $D0, 5, 0,	$1A, $E8
00017379 0005 004C E8               		dc.b 0,	5, 0, $4C, $E8
0001737E 0001 0046 F8               		dc.b 0,	1, 0, $46, $F8
00017383 0005 001A 04               		dc.b 0,	5, 0, $1A, 4
00017388 0005 002A 14               		dc.b 0,	5, 0, $2A, $14
0001738D 0005 0004 24               		dc.b 0,	5, 0, 4, $24
00017392 2005 0012 D0               		dc.b $20, 5, 0,	$12, $D0
00017397 2005 003A E0               		dc.b $20, 5, 0,	$3A, $E0
0001739C 2005 000E F0               		dc.b $20, 5, 0,	$E, $F0
000173A1 2005 001A 00               		dc.b $20, 5, 0,	$1A, 0
000173A6 2001 0046 10               		dc.b $20, 1, 0,	$46, $10
000173AB 2005 0050 18               		dc.b $20, 5, 0,	$50, $18
000173B0 2005 0022 30               		dc.b $20, 5, 0,	$22, $30
000173B5 2001 0046 40               		dc.b $20, 1, 0,	$46, $40
000173BA 2005 000E 48               		dc.b $20, 5, 0,	$E, $48
000173BF 1A                         byte_174A1:	dc.b $1A		 ; SOUND PRODUCE MASATO	NAKAMURA
000173C0 D805 002E 98               		dc.b $D8, 5, 0,	$2E, $98
000173C5 D805 0026 A8               		dc.b $D8, 5, 0,	$26, $A8
000173CA D805 0032 B8               		dc.b $D8, 5, 0,	$32, $B8
000173CF D805 001A C8               		dc.b $D8, 5, 0,	$1A, $C8
000173D4 D805 0054 D8               		dc.b $D8, 5, 0,	$54, $D8
000173D9 D805 0012 F8               		dc.b $D8, 5, 0,	$12, $F8
000173DE D805 0022 08               		dc.b $D8, 5, 0,	$22, 8
000173E3 D805 0026 18               		dc.b $D8, 5, 0,	$26, $18
000173E8 D805 0042 28               		dc.b $D8, 5, 0,	$42, $28
000173ED D805 0032 38               		dc.b $D8, 5, 0,	$32, $38
000173F2 D805 001E 48               		dc.b $D8, 5, 0,	$1E, $48
000173F7 D805 000E 58               		dc.b $D8, 5, 0,	$E, $58
000173FC 0809 0008 88               		dc.b 8,	9, 0, 8, $88
00017401 0805 0004 9C               		dc.b 8,	5, 0, 4, $9C
00017406 0805 002E AC               		dc.b 8,	5, 0, $2E, $AC
0001740B 0805 0004 BC               		dc.b 8,	5, 0, 4, $BC
00017410 0805 003E CC               		dc.b 8,	5, 0, $3E, $CC
00017415 0805 0026 DC               		dc.b 8,	5, 0, $26, $DC
0001741A 0805 001A F8               		dc.b 8,	5, 0, $1A, $F8
0001741F 0805 0004 08               		dc.b 8,	5, 0, 4, 8
00017424 0805 0058 18               		dc.b 8,	5, 0, $58, $18
00017429 0805 0004 28               		dc.b 8,	5, 0, 4, $28
0001742E 0809 0008 38               		dc.b 8,	9, 0, 8, $38
00017433 0805 0032 4C               		dc.b 8,	5, 0, $32, $4C
00017438 0805 0022 5C               		dc.b 8,	5, 0, $22, $5C
0001743D 0805 0004 6C               		dc.b 8,	5, 0, 4, $6C
00017442 17                         byte_17524:	dc.b $17		 ; SOUND PROGRAM JIMITA	MACKY
00017443 D005 002E 98               		dc.b $D0, 5, 0,	$2E, $98
00017448 D005 0026 A8               		dc.b $D0, 5, 0,	$26, $A8
0001744D D005 0032 B8               		dc.b $D0, 5, 0,	$32, $B8
00017452 D005 001A C8               		dc.b $D0, 5, 0,	$1A, $C8
00017457 D005 0054 D8               		dc.b $D0, 5, 0,	$54, $D8
0001745C D005 0012 F8               		dc.b $D0, 5, 0,	$12, $F8
00017461 D005 0022 08               		dc.b $D0, 5, 0,	$22, 8
00017466 D005 0026 18               		dc.b $D0, 5, 0,	$26, $18
0001746B D005 0000 28               		dc.b $D0, 5, 0,	0, $28
00017470 D005 0022 38               		dc.b $D0, 5, 0,	$22, $38
00017475 D005 0004 48               		dc.b $D0, 5, 0,	4, $48
0001747A D009 0008 58               		dc.b $D0, 9, 0,	8, $58
0001747F 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017484 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
00017489 0009 0008 E8               		dc.b 0,	9, 0, 8, $E8
0001748E 0001 0046 FC               		dc.b 0,	1, 0, $46, $FC
00017493 0005 003E 04               		dc.b 0,	5, 0, $3E, 4
00017498 0005 0004 14               		dc.b 0,	5, 0, 4, $14
0001749D 2009 0008 D0               		dc.b $20, 9, 0,	8, $D0
000174A2 2005 0004 E4               		dc.b $20, 5, 0,	4, $E4
000174A7 2005 001E F4               		dc.b $20, 5, 0,	$1E, $F4
000174AC 2005 0058 04               		dc.b $20, 5, 0,	$58, 4
000174B1 2005 002A 14               		dc.b $20, 5, 0,	$2A, $14
000174B6 1F                         byte_17598:	dc.b $1F		 ; SPECIAL THANKS FUJIO	MINEGISHI PAPA
000174B7 D805 002E 80               		dc.b $D8, 5, 0,	$2E, $80
000174BC D805 0012 90               		dc.b $D8, 5, 0,	$12, $90
000174C1 D805 000E A0               		dc.b $D8, 5, 0,	$E, $A0
000174C6 D805 001E B0               		dc.b $D8, 5, 0,	$1E, $B0
000174CB D801 0046 C0               		dc.b $D8, 1, 0,	$46, $C0
000174D0 D805 0004 C8               		dc.b $D8, 5, 0,	4, $C8
000174D5 D805 0016 D8               		dc.b $D8, 5, 0,	$16, $D8
000174DA D805 003E F8               		dc.b $D8, 5, 0,	$3E, $F8
000174DF D805 003A 08               		dc.b $D8, 5, 0,	$3A, 8
000174E4 D805 0004 18               		dc.b $D8, 5, 0,	4, $18
000174E9 D805 001A 28               		dc.b $D8, 5, 0,	$1A, $28
000174EE D805 0058 38               		dc.b $D8, 5, 0,	$58, $38
000174F3 D805 002E 48               		dc.b $D8, 5, 0,	$2E, $48
000174F8 0005 005C B0               		dc.b 0,	5, 0, $5C, $B0
000174FD 0005 0032 C0               		dc.b 0,	5, 0, $32, $C0
00017502 0005 004C D0               		dc.b 0,	5, 0, $4C, $D0
00017507 0001 0046 E0               		dc.b 0,	1, 0, $46, $E0
0001750C 0005 0026 E8               		dc.b 0,	5, 0, $26, $E8
00017511 0009 0008 00               		dc.b 0,	9, 0, 8, 0
00017516 0001 0046 14               		dc.b 0,	1, 0, $46, $14
0001751B 0005 001A 1C               		dc.b 0,	5, 0, $1A, $1C
00017520 0005 000E 2C               		dc.b 0,	5, 0, $E, $2C
00017525 0005 0000 3C               		dc.b 0,	5, 0, 0, $3C
0001752A 0001 0046 4C               		dc.b 0,	1, 0, $46, $4C
0001752F 0005 002E 54               		dc.b 0,	5, 0, $2E, $54
00017534 0005 003A 64               		dc.b 0,	5, 0, $3A, $64
00017539 0001 0046 74               		dc.b 0,	1, 0, $46, $74
0001753E 2005 0012 F8               		dc.b $20, 5, 0,	$12, $F8
00017543 2005 0004 08               		dc.b $20, 5, 0,	4, 8
00017548 2005 0012 18               		dc.b $20, 5, 0,	$12, $18
0001754D 2005 0004 28               		dc.b $20, 5, 0,	4, $28
00017552 0F                         byte_17634:	dc.b $F			 ; PRESENTED BY	SEGA
00017553 F805 0012 80               		dc.b $F8, 5, 0,	$12, $80
00017558 F805 0022 90               		dc.b $F8, 5, 0,	$22, $90
0001755D F805 000E A0               		dc.b $F8, 5, 0,	$E, $A0
00017562 F805 002E B0               		dc.b $F8, 5, 0,	$2E, $B0
00017567 F805 000E C0               		dc.b $F8, 5, 0,	$E, $C0
0001756C F805 001A D0               		dc.b $F8, 5, 0,	$1A, $D0
00017571 F805 003E E0               		dc.b $F8, 5, 0,	$3E, $E0
00017576 F805 000E F0               		dc.b $F8, 5, 0,	$E, $F0
0001757B F805 0042 00               		dc.b $F8, 5, 0,	$42, 0
00017580 F805 0048 18               		dc.b $F8, 5, 0,	$48, $18
00017585 F805 002A 28               		dc.b $F8, 5, 0,	$2A, $28
0001758A F805 002E 40               		dc.b $F8, 5, 0,	$2E, $40
0001758F F805 000E 50               		dc.b $F8, 5, 0,	$E, $50
00017594 F805 0000 60               		dc.b $F8, 5, 0,	0, $60
00017599 F805 0004 70               		dc.b $F8, 5, 0,	4, $70
0001759E 08                         byte_17680:	dc.b 8			 ; TRY AGAIN
0001759F 3005 003E C0               		dc.b $30, 5, 0,	$3E, $C0
000175A4 3005 0022 D0               		dc.b $30, 5, 0,	$22, $D0
000175A9 3005 002A E0               		dc.b $30, 5, 0,	$2A, $E0
000175AE 3005 0004 F8               		dc.b $30, 5, 0,	4, $F8
000175B3 3005 0000 08               		dc.b $30, 5, 0,	0, 8
000175B8 3005 0004 18               		dc.b $30, 5, 0,	4, $18
000175BD 3001 0046 28               		dc.b $30, 1, 0,	$46, $28
000175C2 3005 001A 30               		dc.b $30, 5, 0,	$1A, $30
000175C7 11                         byte_176A9:	dc.b $11		 ; SONIC TEAM PRESENTS
000175C8 E805 002E B4               		dc.b $E8, 5, 0,	$2E, $B4
000175CD E805 0026 C4               		dc.b $E8, 5, 0,	$26, $C4
000175D2 E805 001A D4               		dc.b $E8, 5, 0,	$1A, $D4
000175D7 E801 0046 E4               		dc.b $E8, 1, 0,	$46, $E4
000175DC E805 001E EC               		dc.b $E8, 5, 0,	$1E, $EC
000175E1 E805 003E 04               		dc.b $E8, 5, 0,	$3E, 4
000175E6 E805 000E 14               		dc.b $E8, 5, 0,	$E, $14
000175EB E805 0004 24               		dc.b $E8, 5, 0,	4, $24
000175F0 E809 0008 34               		dc.b $E8, 9, 0,	8, $34
000175F5 0005 0012 C0               		dc.b 0,	5, 0, $12, $C0
000175FA 0005 0022 D0               		dc.b 0,	5, 0, $22, $D0
000175FF 0005 000E E0               		dc.b 0,	5, 0, $E, $E0
00017604 0005 002E F0               		dc.b 0,	5, 0, $2E, $F0
00017609 0005 000E 00               		dc.b 0,	5, 0, $E, 0
0001760E 0005 001A 10               		dc.b 0,	5, 0, $1A, $10
00017613 0005 003E 20               		dc.b 0,	5, 0, $3E, $20
00017618 0005 002E 30               		dc.b 0,	5, 0, $2E, $30
0001761E 00                         		even
0001761E 00                         		even
0001761E                            
0001761E                            ; ===========================================================================
0001761E                            ; ---------------------------------------------------------------------------
0001761E                            ; Object 3D - Eggman (GHZ)
0001761E                            ; ---------------------------------------------------------------------------
0001761E                            
0001761E                            Obj3D:					; XREF: Obj_Index
0001761E 7000                       		moveq	#0,d0
00017620 1028 0024                  		move.b	$24(a0),d0
00017624 323B 0000                  		move.w	Obj3D_Index(pc,d0.w),d1
00017628 4EFB 1000                  		jmp	Obj3D_Index(pc,d1.w)
0001762C                            ; ===========================================================================
0001762C 0000                       Obj3D_Index:	dc.w Obj3D_Main-Obj3D_Index
0001762E 0000                       		dc.w Obj3D_ShipMain-Obj3D_Index
00017630 0000                       		dc.w Obj3D_FaceMain-Obj3D_Index
00017632 0000                       		dc.w Obj3D_FlameMain-Obj3D_Index
00017634                            
00017634 0200                       Obj3D_ObjData:	dc.b 2,	0		; routine counter, animation
00017636 0401                       		dc.b 4,	1
00017638 0607                       		dc.b 6,	7
0001763A                            ; ===========================================================================
0001763A                            
0001763A                            Obj3D_Main:				; XREF: Obj3D_Index
0001763A 45F9 0001 7634             		lea	(Obj3D_ObjData).l,a2
00017640 2248                       		movea.l	a0,a1
00017642 7202                       		moveq	#2,d1
00017644 6000                       		bra.s	Obj3D_LoadBoss
00017646                            ; ===========================================================================
00017646                            
00017646                            Obj3D_Loop:
00017646 4EB9 0000 DA48             		jsr	SingleObjLoad2
0001764C 6600                       		bne.s	loc_17772
0001764E                            
0001764E                            Obj3D_LoadBoss:				; XREF: Obj3D_Main
0001764E 135A 0024                  		move.b	(a2)+,$24(a1)
00017652 12BC 003D                  		move.b	#$3D,0(a1)
00017656 3368 0008 0008             		move.w	8(a0),8(a1)
0001765C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017662 237C 0000 0000 0004        		move.l	#Map_Eggman,4(a1)
0001766A 337C 0400 0002             		move.w	#$400,2(a1)
00017670 137C 0004 0001             		move.b	#4,1(a1)
00017676 137C 0020 0019             		move.b	#$20,$19(a1)
0001767C 137C 0003 0018             		move.b	#3,$18(a1)
00017682 135A 001C                  		move.b	(a2)+,$1C(a1)
00017686 2348 0034                  		move.l	a0,$34(a1)
0001768A 51C9 FFBA                  		dbf	d1,Obj3D_Loop	; repeat sequence 2 more times
0001768E                            
0001768E                            loc_17772:
0001768E 3168 0008 0030             		move.w	8(a0),$30(a0)
00017694 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001769A 117C 000F 0020             		move.b	#$F,$20(a0)
000176A0 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
000176A6                            
000176A6                            Obj3D_ShipMain:				; XREF: Obj3D_Index
000176A6 7000                       		moveq	#0,d0
000176A8 1028 0025                  		move.b	$25(a0),d0
000176AC 323B 0000                  		move.w	Obj3D_ShipIndex(pc,d0.w),d1
000176B0 4EBB 1000                  		jsr	Obj3D_ShipIndex(pc,d1.w)
000176B4 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000176BA 4EB9 0000 A6D8             		jsr	AnimateSprite
000176C0 1028 0022                  		move.b	$22(a0),d0
000176C4 0200 0003                  		andi.b	#3,d0
000176C8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000176CE 8128 0001                  		or.b	d0,1(a0)
000176D2 4EF9 0000 D5AC             		jmp	DisplaySprite
000176D8                            ; ===========================================================================
000176D8 0000                       Obj3D_ShipIndex:dc.w Obj3D_ShipStart-Obj3D_ShipIndex
000176DA 0000                       		dc.w Obj3D_MakeBall-Obj3D_ShipIndex
000176DC 0000                       		dc.w Obj3D_ShipMove-Obj3D_ShipIndex
000176DE 0000                       		dc.w loc_17954-Obj3D_ShipIndex
000176E0 0000                       		dc.w loc_1797A-Obj3D_ShipIndex
000176E2 0000                       		dc.w loc_179AC-Obj3D_ShipIndex
000176E4 0000                       		dc.w loc_179F6-Obj3D_ShipIndex
000176E6                            ; ===========================================================================
000176E6                            
000176E6                            Obj3D_ShipStart:			; XREF: Obj3D_ShipIndex
000176E6 317C 0100 0012             		move.w	#$100,$12(a0)	; move ship down
000176EC 6100 0000                  		bsr.w	BossMove
000176F0 0C68 0338 0038             		cmpi.w	#$338,$38(a0)
000176F6 6600                       		bne.s	loc_177E6
000176F8 317C 0000 0012             		move.w	#0,$12(a0)	; stop ship
000176FE 5428 0025                  		addq.b	#2,$25(a0)	; goto next routine
00017702                            
00017702                            loc_177E6:
00017702 1028 003F                  		move.b	$3F(a0),d0
00017706 4EB9 0000 29DA             		jsr	(CalcSine).l
0001770C EC40                       		asr.w	#6,d0
0001770E D068 0038                  		add.w	$38(a0),d0
00017712 3140 000C                  		move.w	d0,$C(a0)
00017716 3168 0030 0008             		move.w	$30(a0),8(a0)
0001771C 5428 003F                  		addq.b	#2,$3F(a0)
00017720 0C28 0008 0025             		cmpi.b	#8,$25(a0)
00017726 6400                       		bcc.s	locret_1784A
00017728 4A28 0022                  		tst.b	$22(a0)
0001772C 6B00                       		bmi.s	loc_1784C
0001772E 4A28 0020                  		tst.b	$20(a0)
00017732 6600                       		bne.s	locret_1784A
00017734 4A28 003E                  		tst.b	$3E(a0)
00017738 6600                       		bne.s	Obj3D_ShipFlash
0001773A 117C 0020 003E             		move.b	#$20,$3E(a0)	; set number of	times for ship to flash
00017740 303C 00AC                  		move.w	#$AC,d0
00017744 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001774A                            
0001774A                            Obj3D_ShipFlash:
0001774A 43F8 FB22                  		lea	($FFFFFB22).w,a1 ; load	2nd pallet, 2nd	entry
0001774E 7000                       		moveq	#0,d0		; move 0 (black) to d0
00017750 4A51                       		tst.w	(a1)
00017752 6600                       		bne.s	loc_1783C
00017754 303C 0EEE                  		move.w	#$EEE,d0	; move 0EEE (white) to d0
00017758                            
00017758                            loc_1783C:
00017758 3280                       		move.w	d0,(a1)		; load colour stored in	d0
0001775A 5328 003E                  		subq.b	#1,$3E(a0)
0001775E 6600                       		bne.s	locret_1784A
00017760 117C 000F 0020             		move.b	#$F,$20(a0)
00017766                            
00017766                            locret_1784A:
00017766 4E75                       		rts	
00017768                            ; ===========================================================================
00017768                            
00017768                            loc_1784C:				; XREF: loc_177E6
00017768 7064                       		moveq	#100,d0
0001776A 6100 0000                  		bsr.w	AddPoints
0001776E 117C 0008 0025             		move.b	#8,$25(a0)
00017774 317C 00B3 003C             		move.w	#$B3,$3C(a0)
0001777A 4E75                       		rts	
0001777C                            
0001777C                            ; ---------------------------------------------------------------------------
0001777C                            ; Defeated boss	subroutine
0001777C                            ; ---------------------------------------------------------------------------
0001777C                            
0001777C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001777C                            
0001777C                            
0001777C                            BossDefeated:
0001777C 1038 FE0F                  		move.b	($FFFFFE0F).w,d0
00017780 0200 0007                  		andi.b	#7,d0
00017784 6600                       		bne.s	locret_178A2
00017786 4EB9 0000 DA32             		jsr	SingleObjLoad
0001778C 6600                       		bne.s	locret_178A2
0001778E 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
00017792 3368 0008 0008             		move.w	8(a0),8(a1)
00017798 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001779E 4EB9 0000 29B4             		jsr	(RandomNumber).l
000177A4 3200                       		move.w	d0,d1
000177A6 7200                       		moveq	#0,d1
000177A8 1200                       		move.b	d0,d1
000177AA E409                       		lsr.b	#2,d1
000177AC 0441 0020                  		subi.w	#$20,d1
000177B0 D369 0008                  		add.w	d1,8(a1)
000177B4 E048                       		lsr.w	#8,d0
000177B6 E608                       		lsr.b	#3,d0
000177B8 D169 000C                  		add.w	d0,$C(a1)
000177BC                            
000177BC                            locret_178A2:
000177BC 4E75                       		rts	
000177BE                            ; End of function BossDefeated
000177BE                            
000177BE                            ; ---------------------------------------------------------------------------
000177BE                            ; Subroutine to	move a boss
000177BE                            ; ---------------------------------------------------------------------------
000177BE                            
000177BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000177BE                            
000177BE                            
000177BE                            BossMove:
000177BE 2428 0030                  		move.l	$30(a0),d2
000177C2 2628 0038                  		move.l	$38(a0),d3
000177C6 3028 0010                  		move.w	$10(a0),d0
000177CA 48C0                       		ext.l	d0
000177CC E180                       		asl.l	#8,d0
000177CE D480                       		add.l	d0,d2
000177D0 3028 0012                  		move.w	$12(a0),d0
000177D4 48C0                       		ext.l	d0
000177D6 E180                       		asl.l	#8,d0
000177D8 D680                       		add.l	d0,d3
000177DA 2142 0030                  		move.l	d2,$30(a0)
000177DE 2143 0038                  		move.l	d3,$38(a0)
000177E2 4E75                       		rts	
000177E4                            ; End of function BossMove
000177E4                            
000177E4                            ; ===========================================================================
000177E4                            
000177E4                            Obj3D_MakeBall:				; XREF: Obj3D_ShipIndex
000177E4 317C FF00 0010             		move.w	#-$100,$10(a0)
000177EA 317C FFC0 0012             		move.w	#-$40,$12(a0)
000177F0 6100 FFCC                  		bsr.w	BossMove
000177F4 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
000177FA 6600                       		bne.s	loc_17916
000177FC 317C 0000 0010             		move.w	#0,$10(a0)
00017802 317C 0000 0012             		move.w	#0,$12(a0)
00017808 5428 0025                  		addq.b	#2,$25(a0)
0001780C 4EB9 0000 DA48             		jsr	SingleObjLoad2
00017812 6600                       		bne.s	loc_17910
00017814 12BC 0048                  		move.b	#$48,0(a1)	; load swinging	ball object
00017818 3368 0030 0008             		move.w	$30(a0),8(a1)
0001781E 3368 0038 000C             		move.w	$38(a0),$C(a1)
00017824 2348 0034                  		move.l	a0,$34(a1)
00017828                            
00017828                            loc_17910:
00017828 317C 0077 003C             		move.w	#$77,$3C(a0)
0001782E                            
0001782E                            loc_17916:
0001782E 6000 FED2                  		bra.w	loc_177E6
00017832                            ; ===========================================================================
00017832                            
00017832                            Obj3D_ShipMove:				; XREF: Obj3D_ShipIndex
00017832 5368 003C                  		subq.w	#1,$3C(a0)
00017836 6A00                       		bpl.s	Obj3D_Reverse
00017838 5428 0025                  		addq.b	#2,$25(a0)
0001783C 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017842 317C 0100 0010             		move.w	#$100,$10(a0)	; move the ship	sideways
00017848 0C68 2A00 0030             		cmpi.w	#$2A00,$30(a0)
0001784E 6600                       		bne.s	Obj3D_Reverse
00017850 317C 007F 003C             		move.w	#$7F,$3C(a0)
00017856 317C 0040 0010             		move.w	#$40,$10(a0)
0001785C                            
0001785C                            Obj3D_Reverse:
0001785C 0828 0000 0022             		btst	#0,$22(a0)
00017862 6600                       		bne.s	loc_17950
00017864 4468 0010                  		neg.w	$10(a0)		; reverse direction of the ship
00017868                            
00017868                            loc_17950:
00017868 6000 FE98                  		bra.w	loc_177E6
0001786C                            ; ===========================================================================
0001786C                            
0001786C                            loc_17954:				; XREF: Obj3D_ShipIndex
0001786C 5368 003C                  		subq.w	#1,$3C(a0)
00017870 6B00                       		bmi.s	loc_17960
00017872 6100 FF4A                  		bsr.w	BossMove
00017876 6000                       		bra.s	loc_17976
00017878                            ; ===========================================================================
00017878                            
00017878                            loc_17960:
00017878 0868 0000 0022             		bchg	#0,$22(a0)
0001787E 317C 003F 003C             		move.w	#$3F,$3C(a0)
00017884 5528 0025                  		subq.b	#2,$25(a0)
00017888 317C 0000 0010             		move.w	#0,$10(a0)
0001788E                            
0001788E                            loc_17976:
0001788E 6000 FE72                  		bra.w	loc_177E6
00017892                            ; ===========================================================================
00017892                            
00017892                            loc_1797A:				; XREF: Obj3D_ShipIndex
00017892 5368 003C                  		subq.w	#1,$3C(a0)
00017896 6B00                       		bmi.s	loc_17984
00017898 6000 FEE2                  		bra.w	BossDefeated
0001789C                            ; ===========================================================================
0001789C                            
0001789C                            loc_17984:
0001789C 08E8 0000 0022             		bset	#0,$22(a0)
000178A2 08A8 0007 0022             		bclr	#7,$22(a0)
000178A8 4268 0010                  		clr.w	$10(a0)
000178AC 5428 0025                  		addq.b	#2,$25(a0)
000178B0 317C FFDA 003C             		move.w	#-$26,$3C(a0)
000178B6 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000178BA 6600                       		bne.s	locret_179AA
000178BC 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000178C2                            
000178C2                            locret_179AA:
000178C2 4E75                       		rts	
000178C4                            ; ===========================================================================
000178C4                            
000178C4                            loc_179AC:				; XREF: Obj3D_ShipIndex
000178C4 5268 003C                  		addq.w	#1,$3C(a0)
000178C8 6700                       		beq.s	loc_179BC
000178CA 6A00                       		bpl.s	loc_179C2
000178CC 0668 0018 0012             		addi.w	#$18,$12(a0)
000178D2 6000                       		bra.s	loc_179EE
000178D4                            ; ===========================================================================
000178D4                            
000178D4                            loc_179BC:
000178D4 4268 0012                  		clr.w	$12(a0)
000178D8 6000                       		bra.s	loc_179EE
000178DA                            ; ===========================================================================
000178DA                            
000178DA                            loc_179C2:
000178DA 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
000178E0 6500                       		bcs.s	loc_179DA
000178E2 6700                       		beq.s	loc_179E0
000178E4 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
000178EA 6500                       		bcs.s	loc_179EE
000178EC 5428 0025                  		addq.b	#2,$25(a0)
000178F0 6000                       		bra.s	loc_179EE
000178F2                            ; ===========================================================================
000178F2                            
000178F2                            loc_179DA:
000178F2 5168 0012                  		subq.w	#8,$12(a0)
000178F6 6000                       		bra.s	loc_179EE
000178F8                            ; ===========================================================================
000178F8                            
000178F8                            loc_179E0:
000178F8 4268 0012                  		clr.w	$12(a0)
000178FC 303C 0081                  		move.w	#$81,d0
00017900 4EB9 0000 1396             		jsr	(PlaySound).l	; play GHZ music
00017906                            
00017906                            loc_179EE:
00017906 6100 FEB6                  		bsr.w	BossMove
0001790A 6000 FDF6                  		bra.w	loc_177E6
0001790E                            ; ===========================================================================
0001790E                            
0001790E                            loc_179F6:				; XREF: Obj3D_ShipIndex
0001790E 317C 0400 0010             		move.w	#$400,$10(a0)
00017914 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001791A 0C78 2AC0 F72A             		cmpi.w	#$2AC0,($FFFFF72A).w
00017920 6700                       		beq.s	loc_17A10
00017922 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00017926 6000                       		bra.s	loc_17A16
00017928                            ; ===========================================================================
00017928                            
00017928                            loc_17A10:
00017928 4A28 0001                  		tst.b	1(a0)
0001792C 6A00                       		bpl.s	Obj3D_ShipDel
0001792E                            
0001792E                            loc_17A16:
0001792E 6100 FE8E                  		bsr.w	BossMove
00017932 6000 FDCE                  		bra.w	loc_177E6
00017936                            ; ===========================================================================
00017936                            
00017936                            Obj3D_ShipDel:
00017936 4EF9 0000 D5E8             		jmp	DeleteObject
0001793C                            ; ===========================================================================
0001793C                            
0001793C                            Obj3D_FaceMain:				; XREF: Obj3D_Index
0001793C 7000                       		moveq	#0,d0
0001793E 7201                       		moveq	#1,d1
00017940 2268 0034                  		movea.l	$34(a0),a1
00017944 1029 0025                  		move.b	$25(a1),d0
00017948 5900                       		subq.b	#4,d0
0001794A 6600                       		bne.s	loc_17A3E
0001794C 0C69 2A00 0030             		cmpi.w	#$2A00,$30(a1)
00017952 6600                       		bne.s	loc_17A46
00017954 7204                       		moveq	#4,d1
00017956                            
00017956                            loc_17A3E:
00017956 5D00                       		subq.b	#6,d0
00017958 6B00                       		bmi.s	loc_17A46
0001795A 720A                       		moveq	#$A,d1
0001795C 6000                       		bra.s	loc_17A5A
0001795E                            ; ===========================================================================
0001795E                            
0001795E                            loc_17A46:
0001795E 4A29 0020                  		tst.b	$20(a1)
00017962 6600                       		bne.s	loc_17A50
00017964 7205                       		moveq	#5,d1
00017966 6000                       		bra.s	loc_17A5A
00017968                            ; ===========================================================================
00017968                            
00017968                            loc_17A50:
00017968 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001796E 6500                       		bcs.s	loc_17A5A
00017970 7204                       		moveq	#4,d1
00017972                            
00017972                            loc_17A5A:
00017972 1141 001C                  		move.b	d1,$1C(a0)
00017976 5500                       		subq.b	#2,d0
00017978 6600                       		bne.s	Obj3D_FaceDisp
0001797A 117C 0006 001C             		move.b	#6,$1C(a0)
00017980 4A28 0001                  		tst.b	1(a0)
00017984 6A00                       		bpl.s	Obj3D_FaceDel
00017986                            
00017986                            Obj3D_FaceDisp:
00017986 6000                       		bra.s	Obj3D_Display
00017988                            ; ===========================================================================
00017988                            
00017988                            Obj3D_FaceDel:
00017988 4EF9 0000 D5E8             		jmp	DeleteObject
0001798E                            ; ===========================================================================
0001798E                            
0001798E                            Obj3D_FlameMain:			; XREF: Obj3D_Index
0001798E 117C 0007 001C             		move.b	#7,$1C(a0)
00017994 2268 0034                  		movea.l	$34(a0),a1
00017998 0C29 000C 0025             		cmpi.b	#$C,$25(a1)
0001799E 6600                       		bne.s	loc_17A96
000179A0 117C 000B 001C             		move.b	#$B,$1C(a0)
000179A6 4A28 0001                  		tst.b	1(a0)
000179AA 6A00                       		bpl.s	Obj3D_FlameDel
000179AC 6000                       		bra.s	Obj3D_FlameDisp
000179AE                            ; ===========================================================================
000179AE                            
000179AE                            loc_17A96:
000179AE 3029 0010                  		move.w	$10(a1),d0
000179B2 6700                       		beq.s	Obj3D_FlameDisp
000179B4 117C 0008 001C             		move.b	#8,$1C(a0)
000179BA                            
000179BA                            Obj3D_FlameDisp:
000179BA 6000                       		bra.s	Obj3D_Display
000179BC                            ; ===========================================================================
000179BC                            
000179BC                            Obj3D_FlameDel:
000179BC 4EF9 0000 D5E8             		jmp	DeleteObject
000179C2                            ; ===========================================================================
000179C2                            
000179C2                            Obj3D_Display:				; XREF: Obj3D_FaceDisp; Obj3D_FlameDisp
000179C2 2268 0034                  		movea.l	$34(a0),a1
000179C6 3169 0008 0008             		move.w	8(a1),8(a0)
000179CC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000179D2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000179D8 43F9 0000 0000             		lea	(Ani_Eggman).l,a1
000179DE 4EB9 0000 A6D8             		jsr	AnimateSprite
000179E4 1028 0022                  		move.b	$22(a0),d0
000179E8 0200 0003                  		andi.b	#3,d0
000179EC 0228 00FC 0001             		andi.b	#$FC,1(a0)
000179F2 8128 0001                  		or.b	d0,1(a0)
000179F6 4EF9 0000 D5AC             		jmp	DisplaySprite
000179FC                            ; ===========================================================================
000179FC                            ; ---------------------------------------------------------------------------
000179FC                            ; Object 48 - ball on a	chain that Eggman swings (GHZ)
000179FC                            ; ---------------------------------------------------------------------------
000179FC                            
000179FC                            Obj48:					; XREF: Obj_Index
000179FC 7000                       		moveq	#0,d0
000179FE 1028 0024                  		move.b	$24(a0),d0
00017A02 323B 0000                  		move.w	Obj48_Index(pc,d0.w),d1
00017A06 4EFB 1000                  		jmp	Obj48_Index(pc,d1.w)
00017A0A                            ; ===========================================================================
00017A0A 0000                       Obj48_Index:	dc.w Obj48_Main-Obj48_Index
00017A0C 0000                       		dc.w Obj48_Base-Obj48_Index
00017A0E 0000                       		dc.w Obj48_Display2-Obj48_Index
00017A10 0000                       		dc.w loc_17C68-Obj48_Index
00017A12 0000                       		dc.w Obj48_ChkVanish-Obj48_Index
00017A14                            ; ===========================================================================
00017A14                            
00017A14                            Obj48_Main:				; XREF: Obj48_Index
00017A14 5428 0024                  		addq.b	#2,$24(a0)
00017A18 317C 4080 0026             		move.w	#$4080,$26(a0)
00017A1E 317C FE00 003E             		move.w	#-$200,$3E(a0)
00017A24 217C 0000 0000 0004        		move.l	#Map_BossItems,4(a0)
00017A2C 317C 046C 0002             		move.w	#$46C,2(a0)
00017A32 45E8 0028                  		lea	$28(a0),a2
00017A36 14FC 0000                  		move.b	#0,(a2)+
00017A3A 7205                       		moveq	#5,d1
00017A3C 2248                       		movea.l	a0,a1
00017A3E 6000                       		bra.s	loc_17B60
00017A40                            ; ===========================================================================
00017A40                            
00017A40                            Obj48_MakeLinks:
00017A40 4EB9 0000 DA48             		jsr	SingleObjLoad2
00017A46 6600                       		bne.s	Obj48_MakeBall
00017A48 3368 0008 0008             		move.w	8(a0),8(a1)
00017A4E 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017A54 12BC 0048                  		move.b	#$48,0(a1)	; load chain link object
00017A58 137C 0006 0024             		move.b	#6,$24(a1)
00017A5E 237C 0000 7C2E 0004        		move.l	#Map_obj15,4(a1)
00017A66 337C 0380 0002             		move.w	#$380,2(a1)
00017A6C 137C 0001 001A             		move.b	#1,$1A(a1)
00017A72 5228 0028                  		addq.b	#1,$28(a0)
00017A76                            
00017A76                            loc_17B60:				; XREF: Obj48_Main
00017A76 3A09                       		move.w	a1,d5
00017A78 0445 D000                  		subi.w	#$D000,d5
00017A7C EC4D                       		lsr.w	#6,d5
00017A7E 0245 007F                  		andi.w	#$7F,d5
00017A82 14C5                       		move.b	d5,(a2)+
00017A84 137C 0004 0001             		move.b	#4,1(a1)
00017A8A 137C 0008 0019             		move.b	#8,$19(a1)
00017A90 137C 0006 0018             		move.b	#6,$18(a1)
00017A96 2368 0034 0034             		move.l	$34(a0),$34(a1)
00017A9C 51C9 FFA2                  		dbf	d1,Obj48_MakeLinks ; repeat sequence 5 more times
00017AA0                            
00017AA0                            Obj48_MakeBall:
00017AA0 137C 0008 0024             		move.b	#8,$24(a1)
00017AA6 237C 0000 818C 0004        		move.l	#Map_obj48,4(a1) ; load	different mappings for final link
00017AAE 337C 43AA 0002             		move.w	#$43AA,2(a1)	; use different	graphics
00017AB4 137C 0001 001A             		move.b	#1,$1A(a1)
00017ABA 137C 0005 0018             		move.b	#5,$18(a1)
00017AC0 137C 0081 0020             		move.b	#$81,$20(a1)	; make object hurt Sonic
00017AC6 4E75                       		rts	
00017AC8                            ; ===========================================================================
00017AC8                            
00017AC8 0010 2030 4060             Obj48_PosData:	dc.b 0,	$10, $20, $30, $40, $60	; y-position data for links and	giant ball
00017ACE                            
00017ACE                            ; ===========================================================================
00017ACE                            
00017ACE                            Obj48_Base:				; XREF: Obj48_Index
00017ACE 47F9 0001 7AC8             		lea	(Obj48_PosData).l,a3
00017AD4 45E8 0028                  		lea	$28(a0),a2
00017AD8 7C00                       		moveq	#0,d6
00017ADA 1C1A                       		move.b	(a2)+,d6
00017ADC                            
00017ADC                            loc_17BC6:
00017ADC 7800                       		moveq	#0,d4
00017ADE 181A                       		move.b	(a2)+,d4
00017AE0 ED4C                       		lsl.w	#6,d4
00017AE2 0684 00FF D000             		addi.l	#$FFD000,d4
00017AE8 2244                       		movea.l	d4,a1
00017AEA 101B                       		move.b	(a3)+,d0
00017AEC B029 003C                  		cmp.b	$3C(a1),d0
00017AF0 6700                       		beq.s	loc_17BE0
00017AF2 5229 003C                  		addq.b	#1,$3C(a1)
00017AF6                            
00017AF6                            loc_17BE0:
00017AF6 51CE FFE4                  		dbf	d6,loc_17BC6
00017AFA                            
00017AFA B029 003C                  		cmp.b	$3C(a1),d0
00017AFE 6600                       		bne.s	loc_17BFA
00017B00 2268 0034                  		movea.l	$34(a0),a1
00017B04 0C29 0006 0025             		cmpi.b	#6,$25(a1)
00017B0A 6600                       		bne.s	loc_17BFA
00017B0C 5428 0024                  		addq.b	#2,$24(a0)
00017B10                            
00017B10                            loc_17BFA:
00017B10 0C68 0020 0032             		cmpi.w	#$20,$32(a0)
00017B16 6700                       		beq.s	Obj48_Display
00017B18 5268 0032                  		addq.w	#1,$32(a0)
00017B1C                            
00017B1C                            Obj48_Display:
00017B1C 6100 0000                  		bsr.w	sub_17C2A
00017B20 1028 0026                  		move.b	$26(a0),d0
00017B24 4EB9 0000 7BA0             		jsr	(Obj15_Move2).l
00017B2A 4EF9 0000 D5AC             		jmp	DisplaySprite
00017B30                            ; ===========================================================================
00017B30                            
00017B30                            Obj48_Display2:				; XREF: Obj48_Index
00017B30 6100 0000                  		bsr.w	sub_17C2A
00017B34 4EB9 0000 7B60             		jsr	(Obj48_Move).l
00017B3A 4EF9 0000 D5AC             		jmp	DisplaySprite
00017B40                            
00017B40                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00017B40                            
00017B40                            
00017B40                            sub_17C2A:				; XREF: Obj48_Display; Obj48_Display2
00017B40 2268 0034                  		movea.l	$34(a0),a1
00017B44 0628 0020 001B             		addi.b	#$20,$1B(a0)
00017B4A 6400                       		bcc.s	loc_17C3C
00017B4C 0868 0000 001A             		bchg	#0,$1A(a0)
00017B52                            
00017B52                            loc_17C3C:
00017B52 3169 0008 003A             		move.w	8(a1),$3A(a0)
00017B58 3029 000C                  		move.w	$C(a1),d0
00017B5C D068 0032                  		add.w	$32(a0),d0
00017B60 3140 0038                  		move.w	d0,$38(a0)
00017B64 1169 0022 0022             		move.b	$22(a1),$22(a0)
00017B6A 4A29 0022                  		tst.b	$22(a1)
00017B6E 6A00                       		bpl.s	locret_17C66
00017B70 10BC 003F                  		move.b	#$3F,0(a0)
00017B74 117C 0000 0024             		move.b	#0,$24(a0)
00017B7A                            
00017B7A                            locret_17C66:
00017B7A 4E75                       		rts	
00017B7C                            ; End of function sub_17C2A
00017B7C                            
00017B7C                            ; ===========================================================================
00017B7C                            
00017B7C                            loc_17C68:				; XREF: Obj48_Index
00017B7C 2268 0034                  		movea.l	$34(a0),a1
00017B80 4A29 0022                  		tst.b	$22(a1)
00017B84 6A00                       		bpl.s	Obj48_Display3
00017B86 10BC 003F                  		move.b	#$3F,0(a0)
00017B8A 117C 0000 0024             		move.b	#0,$24(a0)
00017B90                            
00017B90                            Obj48_Display3:
00017B90 4EF9 0000 D5AC             		jmp	DisplaySprite
00017B96                            ; ===========================================================================
00017B96                            
00017B96                            Obj48_ChkVanish:			; XREF: Obj48_Index
00017B96 7000                       		moveq	#0,d0
00017B98 4A28 001A                  		tst.b	$1A(a0)
00017B9C 6600                       		bne.s	Obj48_Vanish
00017B9E 5200                       		addq.b	#1,d0
00017BA0                            
00017BA0                            Obj48_Vanish:
00017BA0 1140 001A                  		move.b	d0,$1A(a0)
00017BA4 2268 0034                  		movea.l	$34(a0),a1
00017BA8 4A29 0022                  		tst.b	$22(a1)
00017BAC 6A00                       		bpl.s	Obj48_Display4
00017BAE 117C 0000 0020             		move.b	#0,$20(a0)
00017BB4 6100 FBC6                  		bsr.w	BossDefeated
00017BB8 5328 003C                  		subq.b	#1,$3C(a0)
00017BBC 6A00                       		bpl.s	Obj48_Display4
00017BBE 10BC 003F                  		move.b	#$3F,(a0)
00017BC2 117C 0000 0024             		move.b	#0,$24(a0)
00017BC8                            
00017BC8                            Obj48_Display4:
00017BC8 4EF9 0000 D5AC             		jmp	DisplaySprite
00017BCE                            ; ===========================================================================
00017BCE                            Ani_Eggman:
00017BCE                            	include "_anim\Eggman.asm"
00017BCE                            ; ---------------------------------------------------------------------------
00017BCE                            ; Animation script - Eggman (bosses)
00017BCE                            ; ---------------------------------------------------------------------------
00017BCE 0000                       		dc.w byte_17CD4-Ani_Eggman
00017BD0 0000                       		dc.w byte_17CD8-Ani_Eggman
00017BD2 0000                       		dc.w byte_17CDC-Ani_Eggman
00017BD4 0000                       		dc.w byte_17CE0-Ani_Eggman
00017BD6 0000                       		dc.w byte_17CE4-Ani_Eggman
00017BD8 0000                       		dc.w byte_17CE8-Ani_Eggman
00017BDA 0000                       		dc.w byte_17CEC-Ani_Eggman
00017BDC 0000                       		dc.w byte_17CF0-Ani_Eggman
00017BDE 0000                       		dc.w byte_17CF4-Ani_Eggman
00017BE0 0000                       		dc.w byte_17CF8-Ani_Eggman
00017BE2 0000                       		dc.w byte_17CFC-Ani_Eggman
00017BE4 0000                       		dc.w byte_17D00-Ani_Eggman
00017BE6 0F00 FF00                  byte_17CD4:	dc.b $F, 0, $FF, 0
00017BEA 0501 02FF                  byte_17CD8:	dc.b 5,	1, 2, $FF
00017BEE 0301 02FF                  byte_17CDC:	dc.b 3,	1, 2, $FF
00017BF2 0101 02FF                  byte_17CE0:	dc.b 1,	1, 2, $FF
00017BF6 0403 04FF                  byte_17CE4:	dc.b 4,	3, 4, $FF
00017BFA 1F05 01FF                  byte_17CE8:	dc.b $1F, 5, 1,	$FF
00017BFE 0306 01FF                  byte_17CEC:	dc.b 3,	6, 1, $FF
00017C02 0F0A FF00                  byte_17CF0:	dc.b $F, $A, $FF, 0
00017C06 0308 09FF                  byte_17CF4:	dc.b 3,	8, 9, $FF
00017C0A 0108 09FF                  byte_17CF8:	dc.b 1,	8, 9, $FF
00017C0E 0F07 FF00                  byte_17CFC:	dc.b $F, 7, $FF, 0
00017C12 0209 080B 0C0B 0C09 08FE+  byte_17D00:	dc.b 2,	9, 8, $B, $C, $B, $C, 9, 8, $FE, 2, 0
00017C1E                            		even
00017C1E                            		even
00017C1E                            
00017C1E                            ; ---------------------------------------------------------------------------
00017C1E                            ; Sprite mappings - Eggman (boss levels)
00017C1E                            ; ---------------------------------------------------------------------------
00017C1E                            Map_Eggman:
00017C1E                            	include "_maps\Eggman.asm"
00017C1E                            ; ---------------------------------------------------------------------------
00017C1E                            ; Sprite mappings - Eggman (boss levels)
00017C1E                            ; ---------------------------------------------------------------------------
00017C1E 0000 0000                  		dc.w byte_17D26-Map_Eggman, byte_17D45-Map_Eggman
00017C22 0000 0000                  		dc.w byte_17D50-Map_Eggman, byte_17D5B-Map_Eggman
00017C26 0000 0000                  		dc.w byte_17D6B-Map_Eggman, byte_17D7B-Map_Eggman
00017C2A 0000 0000                  		dc.w byte_17D8B-Map_Eggman, byte_17D9B-Map_Eggman
00017C2E 0000 0000                  		dc.w byte_17DB0-Map_Eggman, byte_17DB6-Map_Eggman
00017C32 0000 0000                  		dc.w byte_17DBC-Map_Eggman, byte_17DBD-Map_Eggman
00017C36 0000                       		dc.w byte_17DC8-Map_Eggman
00017C38 06                         byte_17D26:	dc.b 6
00017C39 EC01 000A E4               		dc.b $EC, 1, 0,	$A, $E4
00017C3E EC05 000C 0C               		dc.b $EC, 5, 0,	$C, $C
00017C43 FC0E 2010 E4               		dc.b $FC, $E, $20, $10,	$E4
00017C48 FC0E 201C 04               		dc.b $FC, $E, $20, $1C,	4
00017C4D 140C 2028 EC               		dc.b $14, $C, $20, $28,	$EC
00017C52 1400 202C 0C               		dc.b $14, 0, $20, $2C, $C
00017C57 02                         byte_17D45:	dc.b 2
00017C58 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017C5D EC0D 0002 EC               		dc.b $EC, $D, 0, 2, $EC
00017C62 02                         byte_17D50:	dc.b 2
00017C63 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017C68 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00017C6D 03                         byte_17D5B:	dc.b 3
00017C6E E408 003D F4               		dc.b $E4, 8, 0,	$3D, $F4
00017C73 EC09 0040 EC               		dc.b $EC, 9, 0,	$40, $EC
00017C78 EC05 0046 04               		dc.b $EC, 5, 0,	$46, 4
00017C7D 03                         byte_17D6B:	dc.b 3
00017C7E E408 004A F4               		dc.b $E4, 8, 0,	$4A, $F4
00017C83 EC09 004D EC               		dc.b $EC, 9, 0,	$4D, $EC
00017C88 EC05 0053 04               		dc.b $EC, 5, 0,	$53, 4
00017C8D 03                         byte_17D7B:	dc.b 3
00017C8E E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00017C93 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00017C98 EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00017C9D 03                         byte_17D8B:	dc.b 3
00017C9E E404 0064 04               		dc.b $E4, 4, 0,	$64, 4
00017CA3 E404 0000 F4               		dc.b $E4, 4, 0,	0, $F4
00017CA8 EC0D 0035 EC               		dc.b $EC, $D, 0, $35, $EC
00017CAD 04                         byte_17D9B:	dc.b 4
00017CAE E409 0066 F4               		dc.b $E4, 9, 0,	$66, $F4
00017CB3 E408 0057 F4               		dc.b $E4, 8, 0,	$57, $F4
00017CB8 EC09 005A EC               		dc.b $EC, 9, 0,	$5A, $EC
00017CBD EC05 0060 04               		dc.b $EC, 5, 0,	$60, 4
00017CC2 01                         byte_17DB0:	dc.b 1
00017CC3 0405 002D 22               		dc.b 4,	5, 0, $2D, $22
00017CC8 01                         byte_17DB6:	dc.b 1
00017CC9 0405 0031 22               		dc.b 4,	5, 0, $31, $22
00017CCE 00                         byte_17DBC:	dc.b 0
00017CCF 02                         byte_17DBD:	dc.b 2
00017CD0 0008 012A 22               		dc.b 0,	8, 1, $2A, $22
00017CD5 0808 112A 22               		dc.b 8,	8, $11,	$2A, $22
00017CDA 02                         byte_17DC8:	dc.b 2
00017CDB F80B 012D 22               		dc.b $F8, $B, 1, $2D, $22
00017CE0 0001 0139 3A               		dc.b 0,	1, 1, $39, $3A
00017CE6 00                         		even
00017CE6 00                         		even
00017CE6                            
00017CE6                            ; ---------------------------------------------------------------------------
00017CE6                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017CE6                            ; ---------------------------------------------------------------------------
00017CE6                            Map_BossItems:
00017CE6                            	include "_maps\Boss items.asm"
00017CE6                            ; ---------------------------------------------------------------------------
00017CE6                            ; Sprite mappings - extra boss items (e.g. swinging ball on a chain in GHZ)
00017CE6                            ; ---------------------------------------------------------------------------
00017CE6 0000 0000                  		dc.w byte_17DE4-Map_BossItems, byte_17DEA-Map_BossItems
00017CEA 0000 0000                  		dc.w byte_17DF6-Map_BossItems, byte_17DFC-Map_BossItems
00017CEE 0000 0000                  		dc.w byte_17E02-Map_BossItems, byte_17E08-Map_BossItems
00017CF2 0000 0000                  		dc.w byte_17E1E-Map_BossItems, byte_17E2A-Map_BossItems
00017CF6 01                         byte_17DE4:	dc.b 1
00017CF7 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017CFC 02                         byte_17DEA:	dc.b 2
00017CFD FC04 0004 F8               		dc.b $FC, 4, 0,	4, $F8
00017D02 F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
00017D07 00                         		dc.b 0
00017D08 01                         byte_17DF6:	dc.b 1
00017D09 FC00 0006 FC               		dc.b $FC, 0, 0,	6, $FC
00017D0E 01                         byte_17DFC:	dc.b 1
00017D0F 1409 0007 F4               		dc.b $14, 9, 0,	7, $F4
00017D14 01                         byte_17E02:	dc.b 1
00017D15 1405 000D F8               		dc.b $14, 5, 0,	$D, $F8
00017D1A 04                         byte_17E08:	dc.b 4
00017D1B F004 0011 F8               		dc.b $F0, 4, 0,	$11, $F8
00017D20 F801 0013 F8               		dc.b $F8, 1, 0,	$13, $F8
00017D25 F801 0813 00               		dc.b $F8, 1, 8,	$13, 0
00017D2A 0804 0015 F8               		dc.b 8,	4, 0, $15, $F8
00017D2F 00                         		dc.b 0
00017D30 02                         byte_17E1E:	dc.b 2
00017D31 0005 0017 00               		dc.b 0,	5, 0, $17, 0
00017D36 0000 001B 10               		dc.b 0,	0, 0, $1B, $10
00017D3B 00                         		dc.b 0
00017D3C 02                         byte_17E2A:	dc.b 2
00017D3D 1804 001C 00               		dc.b $18, 4, 0,	$1C, 0
00017D42 000B 001E 10               		dc.b 0,	$B, 0, $1E, $10
00017D48 00                         		even
00017D48 00                         		even
00017D48                            
00017D48                            ; ===========================================================================
00017D48                            ; ---------------------------------------------------------------------------
00017D48                            ; Object 77 - Eggman (LZ)
00017D48                            ; ---------------------------------------------------------------------------
00017D48                            
00017D48                            Obj77:					; XREF: Obj_Index
00017D48 7000                       		moveq	#0,d0
00017D4A 1028 0024                  		move.b	$24(a0),d0
00017D4E 323B 0000                  		move.w	Obj77_Index(pc,d0.w),d1
00017D52 4EFB 1000                  		jmp	Obj77_Index(pc,d1.w)
00017D56                            ; ===========================================================================
00017D56 0000                       Obj77_Index:	dc.w Obj77_Main-Obj77_Index
00017D58 0000                       		dc.w Obj77_ShipMain-Obj77_Index
00017D5A 0000                       		dc.w Obj77_FaceMain-Obj77_Index
00017D5C 0000                       		dc.w Obj77_FlameMain-Obj77_Index
00017D5E                            
00017D5E 0200                       Obj77_ObjData:	dc.b 2,	0		; routine number, animation
00017D60 0401                       		dc.b 4,	1
00017D62 0607                       		dc.b 6,	7
00017D64                            ; ===========================================================================
00017D64                            
00017D64                            Obj77_Main:				; XREF: Obj77_Index
00017D64 317C 1E10 0008             		move.w	#$1E10,8(a0)
00017D6A 317C 05C0 000C             		move.w	#$5C0,$C(a0)
00017D70 3168 0008 0030             		move.w	8(a0),$30(a0)
00017D76 3168 000C 0038             		move.w	$C(a0),$38(a0)
00017D7C 117C 000F 0020             		move.b	#$F,$20(a0)
00017D82 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00017D88 117C 0004 0018             		move.b	#4,$18(a0)
00017D8E 45FA FFCE                  		lea	Obj77_ObjData(pc),a2
00017D92 2248                       		movea.l	a0,a1
00017D94 7202                       		moveq	#2,d1
00017D96 6000                       		bra.s	Obj77_LoadBoss
00017D98                            ; ===========================================================================
00017D98                            
00017D98                            Obj77_Loop:
00017D98 4EB9 0000 DA48             		jsr	SingleObjLoad2
00017D9E 6600                       		bne.s	Obj77_ShipMain
00017DA0 12BC 0077                  		move.b	#$77,0(a1)
00017DA4 3368 0008 0008             		move.w	8(a0),8(a1)
00017DAA 3368 000C 000C             		move.w	$C(a0),$C(a1)
00017DB0                            
00017DB0                            Obj77_LoadBoss:				; XREF: Obj77_Main
00017DB0 08A8 0000 0022             		bclr	#0,$22(a0)
00017DB6 4229 0025                  		clr.b	$25(a1)
00017DBA 135A 0024                  		move.b	(a2)+,$24(a1)
00017DBE 135A 001C                  		move.b	(a2)+,$1C(a1)
00017DC2 1368 0018 0018             		move.b	$18(a0),$18(a1)
00017DC8 237C 0001 7C1E 0004        		move.l	#Map_Eggman,4(a1)
00017DD0 337C 0400 0002             		move.w	#$400,2(a1)
00017DD6 137C 0004 0001             		move.b	#4,1(a1)
00017DDC 137C 0020 0019             		move.b	#$20,$19(a1)
00017DE2 2348 0034                  		move.l	a0,$34(a1)
00017DE6 51C9 FFB0                  		dbf	d1,Obj77_Loop
00017DEA                            
00017DEA                            Obj77_ShipMain:
00017DEA 43F8 D000                  		lea	($FFFFD000).w,a1
00017DEE 7000                       		moveq	#0,d0
00017DF0 1028 0025                  		move.b	$25(a0),d0
00017DF4 323B 0000                  		move.w	Obj77_ShipIndex(pc,d0.w),d1
00017DF8 4EBB 1000                  		jsr	Obj77_ShipIndex(pc,d1.w)
00017DFC 43F9 0001 7BCE             		lea	(Ani_Eggman).l,a1
00017E02 4EB9 0000 A6D8             		jsr	AnimateSprite
00017E08 7003                       		moveq	#3,d0
00017E0A C028 0022                  		and.b	$22(a0),d0
00017E0E 0228 00FC 0001             		andi.b	#$FC,1(a0)
00017E14 8128 0001                  		or.b	d0,1(a0)
00017E18 4EF9 0000 D5AC             		jmp	DisplaySprite
00017E1E                            ; ===========================================================================
00017E1E 0000 0000                  Obj77_ShipIndex:dc.w loc_17F1E-Obj77_ShipIndex,	loc_17FA0-Obj77_ShipIndex
00017E22 0000 0000                  		dc.w loc_17FE0-Obj77_ShipIndex,	loc_1801E-Obj77_ShipIndex
00017E26 0000 0000                  		dc.w loc_180BC-Obj77_ShipIndex,	loc_180F6-Obj77_ShipIndex
00017E2A 0000 0000                  		dc.w loc_1812A-Obj77_ShipIndex,	loc_18152-Obj77_ShipIndex
00017E2E                            ; ===========================================================================
00017E2E                            
00017E2E                            loc_17F1E:				; XREF: Obj77_ShipIndex
00017E2E 3029 0008                  		move.w	8(a1),d0
00017E32 0C40 1DA0                  		cmpi.w	#$1DA0,d0
00017E36 6500                       		bcs.s	loc_17F38
00017E38 317C FE80 0012             		move.w	#-$180,$12(a0)
00017E3E 317C 0060 0010             		move.w	#$60,$10(a0)
00017E44 5428 0025                  		addq.b	#2,$25(a0)
00017E48                            
00017E48                            loc_17F38:
00017E48 6100 F974                  		bsr.w	BossMove
00017E4C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00017E52 3168 0030 0008             		move.w	$30(a0),8(a0)
00017E58                            
00017E58                            loc_17F48:
00017E58 4A28 003D                  		tst.b	$3D(a0)
00017E5C 6600                       		bne.s	loc_17F8E
00017E5E 4A28 0022                  		tst.b	$22(a0)
00017E62 6B00                       		bmi.s	loc_17F92
00017E64 4A28 0020                  		tst.b	$20(a0)
00017E68 6600                       		bne.s	locret_17F8C
00017E6A 4A28 003E                  		tst.b	$3E(a0)
00017E6E 6600                       		bne.s	loc_17F70
00017E70 117C 0020 003E             		move.b	#$20,$3E(a0)
00017E76 303C 00AC                  		move.w	#$AC,d0
00017E7A 4EB9 0000 139C             		jsr	(PlaySound_Special).l
00017E80                            
00017E80                            loc_17F70:
00017E80 43F8 FB22                  		lea	($FFFFFB22).w,a1
00017E84 7000                       		moveq	#0,d0
00017E86 4A51                       		tst.w	(a1)
00017E88 6600                       		bne.s	loc_17F7E
00017E8A 303C 0EEE                  		move.w	#$EEE,d0
00017E8E                            
00017E8E                            loc_17F7E:
00017E8E 3280                       		move.w	d0,(a1)
00017E90 5328 003E                  		subq.b	#1,$3E(a0)
00017E94 6600                       		bne.s	locret_17F8C
00017E96 117C 000F 0020             		move.b	#$F,$20(a0)
00017E9C                            
00017E9C                            locret_17F8C:
00017E9C 4E75                       		rts	
00017E9E                            ; ===========================================================================
00017E9E                            
00017E9E                            loc_17F8E:				; XREF: loc_17F48
00017E9E 6000 F8DC                  		bra.w	BossDefeated
00017EA2                            ; ===========================================================================
00017EA2                            
00017EA2                            loc_17F92:				; XREF: loc_17F48
00017EA2 7064                       		moveq	#100,d0
00017EA4 6100 0000                  		bsr.w	AddPoints
00017EA8 117C 00FF 003D             		move.b	#-1,$3D(a0)
00017EAE 4E75                       		rts	
00017EB0                            ; ===========================================================================
00017EB0                            
00017EB0                            loc_17FA0:				; XREF: Obj77_ShipIndex
00017EB0 70FE                       		moveq	#-2,d0
00017EB2 0C68 1E48 0030             		cmpi.w	#$1E48,$30(a0)
00017EB8 6500                       		bcs.s	loc_17FB6
00017EBA 317C 1E48 0030             		move.w	#$1E48,$30(a0)
00017EC0 4268 0010                  		clr.w	$10(a0)
00017EC4 5240                       		addq.w	#1,d0
00017EC6                            
00017EC6                            loc_17FB6:
00017EC6 0C68 0500 0038             		cmpi.w	#$500,$38(a0)
00017ECC 6E00                       		bgt.s	loc_17FCA
00017ECE 317C 0500 0038             		move.w	#$500,$38(a0)
00017ED4 4268 0012                  		clr.w	$12(a0)
00017ED8 5240                       		addq.w	#1,d0
00017EDA                            
00017EDA                            loc_17FCA:
00017EDA 6600                       		bne.s	loc_17FDC
00017EDC 317C 0140 0010             		move.w	#$140,$10(a0)
00017EE2 317C FE00 0012             		move.w	#-$200,$12(a0)
00017EE8 5428 0025                  		addq.b	#2,$25(a0)
00017EEC                            
00017EEC                            loc_17FDC:
00017EEC 6000 FF5A                  		bra.w	loc_17F38
00017EF0                            ; ===========================================================================
00017EF0                            
00017EF0                            loc_17FE0:				; XREF: Obj77_ShipIndex
00017EF0 70FE                       		moveq	#-2,d0
00017EF2 0C68 1E70 0030             		cmpi.w	#$1E70,$30(a0)
00017EF8 6500                       		bcs.s	loc_17FF6
00017EFA 317C 1E70 0030             		move.w	#$1E70,$30(a0)
00017F00 4268 0010                  		clr.w	$10(a0)
00017F04 5240                       		addq.w	#1,d0
00017F06                            
00017F06                            loc_17FF6:
00017F06 0C68 04C0 0038             		cmpi.w	#$4C0,$38(a0)
00017F0C 6E00                       		bgt.s	loc_1800A
00017F0E 317C 04C0 0038             		move.w	#$4C0,$38(a0)
00017F14 4268 0012                  		clr.w	$12(a0)
00017F18 5240                       		addq.w	#1,d0
00017F1A                            
00017F1A                            loc_1800A:
00017F1A 6600                       		bne.s	loc_1801A
00017F1C 317C FE80 0012             		move.w	#-$180,$12(a0)
00017F22 5428 0025                  		addq.b	#2,$25(a0)
00017F26 4228 003F                  		clr.b	$3F(a0)
00017F2A                            
00017F2A                            loc_1801A:
00017F2A 6000 FF1C                  		bra.w	loc_17F38
00017F2E                            ; ===========================================================================
00017F2E                            
00017F2E                            loc_1801E:				; XREF: Obj77_ShipIndex
00017F2E 0C68 0100 0038             		cmpi.w	#$100,$38(a0)
00017F34 6E00                       		bgt.s	loc_1804E
00017F36 317C 0100 0038             		move.w	#$100,$38(a0)
00017F3C 317C 0140 0010             		move.w	#$140,$10(a0)
00017F42 317C FF80 0012             		move.w	#-$80,$12(a0)
00017F48 4A28 003D                  		tst.b	$3D(a0)
00017F4C 6700                       		beq.s	loc_18046
00017F4E E1E8 0010                  		asl	$10(a0)
00017F52 E1E8 0012                  		asl	$12(a0)
00017F56                            
00017F56                            loc_18046:
00017F56 5428 0025                  		addq.b	#2,$25(a0)
00017F5A 6000 FEEC                  		bra.w	loc_17F38
00017F5E                            ; ===========================================================================
00017F5E                            
00017F5E                            loc_1804E:
00017F5E 08E8 0000 0022             		bset	#0,$22(a0)
00017F64 5428 003F                  		addq.b	#2,$3F(a0)
00017F68 1028 003F                  		move.b	$3F(a0),d0
00017F6C 4EB9 0000 29DA             		jsr	(CalcSine).l
00017F72 4A41                       		tst.w	d1
00017F74 6A00                       		bpl.s	loc_1806C
00017F76 08A8 0000 0022             		bclr	#0,$22(a0)
00017F7C                            
00017F7C                            loc_1806C:
00017F7C E840                       		asr.w	#4,d0
00017F7E 4840                       		swap	d0
00017F80 4240                       		clr.w	d0
00017F82 D0A8 0030                  		add.l	$30(a0),d0
00017F86 4840                       		swap	d0
00017F88 3140 0008                  		move.w	d0,8(a0)
00017F8C 3028 0012                  		move.w	$12(a0),d0
00017F90 3238 D00C                  		move.w	($FFFFD00C).w,d1
00017F94 9268 000C                  		sub.w	$C(a0),d1
00017F98 6500                       		bcs.s	loc_180A2
00017F9A 0441 0048                  		subi.w	#$48,d1
00017F9E 6500                       		bcs.s	loc_180A2
00017FA0 E240                       		asr.w	#1,d0
00017FA2 0441 0028                  		subi.w	#$28,d1
00017FA6 6500                       		bcs.s	loc_180A2
00017FA8 E240                       		asr.w	#1,d0
00017FAA 0441 0028                  		subi.w	#$28,d1
00017FAE 6500                       		bcs.s	loc_180A2
00017FB0 7000                       		moveq	#0,d0
00017FB2                            
00017FB2                            loc_180A2:
00017FB2 48C0                       		ext.l	d0
00017FB4 E180                       		asl.l	#8,d0
00017FB6 4A28 003D                  		tst.b	$3D(a0)
00017FBA 6700                       		beq.s	loc_180AE
00017FBC D080                       		add.l	d0,d0
00017FBE                            
00017FBE                            loc_180AE:
00017FBE D1A8 0038                  		add.l	d0,$38(a0)
00017FC2 3168 0038 000C             		move.w	$38(a0),$C(a0)
00017FC8 6000 FE8E                  		bra.w	loc_17F48
00017FCC                            ; ===========================================================================
00017FCC                            
00017FCC                            loc_180BC:				; XREF: Obj77_ShipIndex
00017FCC 70FE                       		moveq	#-2,d0
00017FCE 0C68 1F4C 0030             		cmpi.w	#$1F4C,$30(a0)
00017FD4 6500                       		bcs.s	loc_180D2
00017FD6 317C 1F4C 0030             		move.w	#$1F4C,$30(a0)
00017FDC 4268 0010                  		clr.w	$10(a0)
00017FE0 5240                       		addq.w	#1,d0
00017FE2                            
00017FE2                            loc_180D2:
00017FE2 0C68 00C0 0038             		cmpi.w	#$C0,$38(a0)
00017FE8 6E00                       		bgt.s	loc_180E6
00017FEA 317C 00C0 0038             		move.w	#$C0,$38(a0)
00017FF0 4268 0012                  		clr.w	$12(a0)
00017FF4 5240                       		addq.w	#1,d0
00017FF6                            
00017FF6                            loc_180E6:
00017FF6 6600                       		bne.s	loc_180F2
00017FF8 5428 0025                  		addq.b	#2,$25(a0)
00017FFC 08A8 0000 0022             		bclr	#0,$22(a0)
00018002                            
00018002                            loc_180F2:
00018002 6000 FE44                  		bra.w	loc_17F38
00018006                            ; ===========================================================================
00018006                            
00018006                            loc_180F6:				; XREF: Obj77_ShipIndex
00018006 4A28 003D                  		tst.b	$3D(a0)
0001800A 6600                       		bne.s	loc_18112
0001800C 0C69 1EC8 0008             		cmpi.w	#$1EC8,8(a1)
00018012 6D00                       		blt.s	loc_18126
00018014 0C69 00F0 000C             		cmpi.w	#$F0,$C(a1)
0001801A 6E00                       		bgt.s	loc_18126
0001801C 117C 0032 003C             		move.b	#$32,$3C(a0)
00018022                            
00018022                            loc_18112:
00018022 303C 0082                  		move.w	#$82,d0
00018026 4EB9 0000 1396             		jsr	(PlaySound).l	; play LZ music
0001802C 08E8 0000 0022             		bset	#0,$22(a0)
00018032 5428 0025                  		addq.b	#2,$25(a0)
00018036                            
00018036                            loc_18126:
00018036 6000 FE10                  		bra.w	loc_17F38
0001803A                            ; ===========================================================================
0001803A                            
0001803A                            loc_1812A:				; XREF: Obj77_ShipIndex
0001803A 4A28 003D                  		tst.b	$3D(a0)
0001803E 6600                       		bne.s	loc_18136
00018040 5328 003C                  		subq.b	#1,$3C(a0)
00018044 6600                       		bne.s	loc_1814E
00018046                            
00018046                            loc_18136:
00018046 4228 003C                  		clr.b	$3C(a0)
0001804A 317C 0400 0010             		move.w	#$400,$10(a0)
00018050 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018056 4228 003D                  		clr.b	$3D(a0)
0001805A 5428 0025                  		addq.b	#2,$25(a0)
0001805E                            
0001805E                            loc_1814E:
0001805E 6000 FDE8                  		bra.w	loc_17F38
00018062                            ; ===========================================================================
00018062                            
00018062                            loc_18152:				; XREF: Obj77_ShipIndex
00018062 0C78 2030 F72A             		cmpi.w	#$2030,($FFFFF72A).w
00018068 6400                       		bcc.s	loc_18160
0001806A 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001806E 6000                       		bra.s	loc_18166
00018070                            ; ===========================================================================
00018070                            
00018070                            loc_18160:
00018070 4A28 0001                  		tst.b	1(a0)
00018074 6A00                       		bpl.s	Obj77_ShipDel
00018076                            
00018076                            loc_18166:
00018076 6000 FDD0                  		bra.w	loc_17F38
0001807A                            ; ===========================================================================
0001807A                            
0001807A                            Obj77_ShipDel:
0001807A 4EF9 0000 D5E8             		jmp	DeleteObject
00018080                            ; ===========================================================================
00018080                            
00018080                            Obj77_FaceMain:				; XREF: Obj77_Index
00018080 2268 0034                  		movea.l	$34(a0),a1
00018084 1011                       		move.b	(a1),d0
00018086 B010                       		cmp.b	(a0),d0
00018088 6600                       		bne.s	Obj77_FaceDel
0001808A 7000                       		moveq	#0,d0
0001808C 1029 0025                  		move.b	$25(a1),d0
00018090 7201                       		moveq	#1,d1
00018092 4A28 003D                  		tst.b	$3D(a0)
00018096 6700                       		beq.s	loc_1818C
00018098 720A                       		moveq	#$A,d1
0001809A 6000                       		bra.s	loc_181A0
0001809C                            ; ===========================================================================
0001809C                            
0001809C                            loc_1818C:
0001809C 4A29 0020                  		tst.b	$20(a1)
000180A0 6600                       		bne.s	loc_18196
000180A2 7205                       		moveq	#5,d1
000180A4 6000                       		bra.s	loc_181A0
000180A6                            ; ===========================================================================
000180A6                            
000180A6                            loc_18196:
000180A6 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000180AC 6500                       		bcs.s	loc_181A0
000180AE 7204                       		moveq	#4,d1
000180B0                            
000180B0                            loc_181A0:
000180B0 1141 001C                  		move.b	d1,$1C(a0)
000180B4 0C00 000E                  		cmpi.b	#$E,d0
000180B8 6600                       		bne.s	loc_181B6
000180BA 117C 0006 001C             		move.b	#6,$1C(a0)
000180C0 4A28 0001                  		tst.b	1(a0)
000180C4 6A00                       		bpl.s	Obj77_FaceDel
000180C6                            
000180C6                            loc_181B6:
000180C6 6000                       		bra.s	Obj77_Display
000180C8                            ; ===========================================================================
000180C8                            
000180C8                            Obj77_FaceDel:
000180C8 4EF9 0000 D5E8             		jmp	DeleteObject
000180CE                            ; ===========================================================================
000180CE                            
000180CE                            Obj77_FlameMain:			; XREF: Obj77_Index
000180CE 117C 0007 001C             		move.b	#7,$1C(a0)
000180D4 2268 0034                  		movea.l	$34(a0),a1
000180D8 1011                       		move.b	(a1),d0
000180DA B010                       		cmp.b	(a0),d0
000180DC 6600                       		bne.s	Obj77_FlameDel
000180DE 0C29 000E 0025             		cmpi.b	#$E,$25(a1)
000180E4 6600                       		bne.s	loc_181F0
000180E6 117C 000B 001C             		move.b	#$B,$1C(a0)
000180EC 4A28 0001                  		tst.b	1(a0)
000180F0 6A00                       		bpl.s	Obj77_FlameDel
000180F2 6000                       		bra.s	loc_181F0
000180F4                            ; ===========================================================================
000180F4 4A69 0010                  		tst.w	$10(a1)
000180F8 6700                       		beq.s	loc_181F0
000180FA 117C 0008 001C             		move.b	#8,$1C(a0)
00018100                            
00018100                            loc_181F0:
00018100 6000                       		bra.s	Obj77_Display
00018102                            ; ===========================================================================
00018102                            
00018102                            Obj77_FlameDel:				; XREF: Obj77_FlameMain
00018102 4EF9 0000 D5E8             		jmp	DeleteObject
00018108                            ; ===========================================================================
00018108                            
00018108                            Obj77_Display:
00018108 43F9 0001 7BCE             		lea	(Ani_Eggman).l,a1
0001810E 4EB9 0000 A6D8             		jsr	AnimateSprite
00018114 2268 0034                  		movea.l	$34(a0),a1
00018118 3169 0008 0008             		move.w	8(a1),8(a0)
0001811E 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018124 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001812A 7003                       		moveq	#3,d0
0001812C C028 0022                  		and.b	$22(a0),d0
00018130 0228 00FC 0001             		andi.b	#-4,1(a0)
00018136 8128 0001                  		or.b	d0,1(a0)
0001813A 4EF9 0000 D5AC             		jmp	DisplaySprite
00018140                            ; ===========================================================================
00018140                            ; ---------------------------------------------------------------------------
00018140                            ; Object 73 - Eggman (MZ)
00018140                            ; ---------------------------------------------------------------------------
00018140                            
00018140                            Obj73:					; XREF: Obj_Index
00018140 7000                       		moveq	#0,d0
00018142 1028 0024                  		move.b	$24(a0),d0
00018146 323B 0000                  		move.w	Obj73_Index(pc,d0.w),d1
0001814A 4EFB 1000                  		jmp	Obj73_Index(pc,d1.w)
0001814E                            ; ===========================================================================
0001814E 0000                       Obj73_Index:	dc.w Obj73_Main-Obj73_Index
00018150 0000                       		dc.w Obj73_ShipMain-Obj73_Index
00018152 0000                       		dc.w Obj73_FaceMain-Obj73_Index
00018154 0000                       		dc.w Obj73_FlameMain-Obj73_Index
00018156 0000                       		dc.w Obj73_TubeMain-Obj73_Index
00018158                            
00018158 0200 04                    Obj73_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
0001815B 0401 04                    		dc.b 4,	1, 4
0001815E 0607 04                    		dc.b 6,	7, 4
00018161 0800 03                    		dc.b 8,	0, 3
00018164                            ; ===========================================================================
00018164                            
00018164                            Obj73_Main:				; XREF: Obj73_Index
00018164 3168 0008 0030             		move.w	8(a0),$30(a0)
0001816A 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018170 117C 000F 0020             		move.b	#$F,$20(a0)
00018176 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001817C 45FA FFDA                  		lea	Obj73_ObjData(pc),a2
00018180 2248                       		movea.l	a0,a1
00018182 7203                       		moveq	#3,d1
00018184 6000                       		bra.s	Obj73_LoadBoss
00018186                            ; ===========================================================================
00018186                            
00018186                            Obj73_Loop:
00018186 4EB9 0000 DA48             		jsr	SingleObjLoad2
0001818C 6600                       		bne.s	Obj73_ShipMain
0001818E 12BC 0073                  		move.b	#$73,0(a1)
00018192 3368 0008 0008             		move.w	8(a0),8(a1)
00018198 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001819E                            
0001819E                            Obj73_LoadBoss:				; XREF: Obj73_Main
0001819E 08A8 0000 0022             		bclr	#0,$22(a0)
000181A4 4229 0025                  		clr.b	$25(a1)
000181A8 135A 0024                  		move.b	(a2)+,$24(a1)
000181AC 135A 001C                  		move.b	(a2)+,$1C(a1)
000181B0 135A 0018                  		move.b	(a2)+,$18(a1)
000181B4 237C 0001 7C1E 0004        		move.l	#Map_Eggman,4(a1)
000181BC 337C 0400 0002             		move.w	#$400,2(a1)
000181C2 137C 0004 0001             		move.b	#4,1(a1)
000181C8 137C 0020 0019             		move.b	#$20,$19(a1)
000181CE 2348 0034                  		move.l	a0,$34(a1)
000181D2 51C9 FFB2                  		dbf	d1,Obj73_Loop	; repeat sequence 3 more times
000181D6                            
000181D6                            Obj73_ShipMain:
000181D6 7000                       		moveq	#0,d0
000181D8 1028 0025                  		move.b	$25(a0),d0
000181DC 323B 0000                  		move.w	Obj73_ShipIndex(pc,d0.w),d1
000181E0 4EBB 1000                  		jsr	Obj73_ShipIndex(pc,d1.w)
000181E4 43F9 0001 7BCE             		lea	(Ani_Eggman).l,a1
000181EA 4EB9 0000 A6D8             		jsr	AnimateSprite
000181F0 7003                       		moveq	#3,d0
000181F2 C028 0022                  		and.b	$22(a0),d0
000181F6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000181FC 8128 0001                  		or.b	d0,1(a0)
00018200 4EF9 0000 D5AC             		jmp	DisplaySprite
00018206                            ; ===========================================================================
00018206 0000                       Obj73_ShipIndex:dc.w loc_18302-Obj73_ShipIndex
00018208 0000                       		dc.w loc_183AA-Obj73_ShipIndex
0001820A 0000                       		dc.w loc_184F6-Obj73_ShipIndex
0001820C 0000                       		dc.w loc_1852C-Obj73_ShipIndex
0001820E 0000                       		dc.w loc_18582-Obj73_ShipIndex
00018210                            ; ===========================================================================
00018210                            
00018210                            loc_18302:				; XREF: Obj73_ShipIndex
00018210 1028 003F                  		move.b	$3F(a0),d0
00018214 5428 003F                  		addq.b	#2,$3F(a0)
00018218 4EB9 0000 29DA             		jsr	(CalcSine).l
0001821E E440                       		asr.w	#2,d0
00018220 3140 0012                  		move.w	d0,$12(a0)
00018224 317C FF00 0010             		move.w	#-$100,$10(a0)
0001822A 6100 F592                  		bsr.w	BossMove
0001822E 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018234 6600                       		bne.s	loc_18334
00018236 5428 0025                  		addq.b	#2,$25(a0)
0001823A 4228 0028                  		clr.b	$28(a0)
0001823E 42A8 0010                  		clr.l	$10(a0)
00018242                            
00018242                            loc_18334:
00018242 4EB9 0000 29B4             		jsr	(RandomNumber).l
00018248 1140 0034                  		move.b	d0,$34(a0)
0001824C                            
0001824C                            loc_1833E:
0001824C 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018252 3168 0030 0008             		move.w	$30(a0),8(a0)
00018258 0C28 0004 0025             		cmpi.b	#4,$25(a0)
0001825E 6400                       		bcc.s	locret_18390
00018260 4A28 0022                  		tst.b	$22(a0)
00018264 6B00                       		bmi.s	loc_18392
00018266 4A28 0020                  		tst.b	$20(a0)
0001826A 6600                       		bne.s	locret_18390
0001826C 4A28 003E                  		tst.b	$3E(a0)
00018270 6600                       		bne.s	loc_18374
00018272 117C 0028 003E             		move.b	#$28,$3E(a0)
00018278 303C 00AC                  		move.w	#$AC,d0
0001827C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018282                            
00018282                            loc_18374:
00018282 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018286 7000                       		moveq	#0,d0
00018288 4A51                       		tst.w	(a1)
0001828A 6600                       		bne.s	loc_18382
0001828C 303C 0EEE                  		move.w	#$EEE,d0
00018290                            
00018290                            loc_18382:
00018290 3280                       		move.w	d0,(a1)
00018292 5328 003E                  		subq.b	#1,$3E(a0)
00018296 6600                       		bne.s	locret_18390
00018298 117C 000F 0020             		move.b	#$F,$20(a0)
0001829E                            
0001829E                            locret_18390:
0001829E 4E75                       		rts	
000182A0                            ; ===========================================================================
000182A0                            
000182A0                            loc_18392:				; XREF: loc_1833E
000182A0 7064                       		moveq	#100,d0
000182A2 6100 0000                  		bsr.w	AddPoints
000182A6 117C 0004 0025             		move.b	#4,$25(a0)
000182AC 317C 00B4 003C             		move.w	#$B4,$3C(a0)
000182B2 4268 0010                  		clr.w	$10(a0)
000182B6 4E75                       		rts	
000182B8                            ; ===========================================================================
000182B8                            
000182B8                            loc_183AA:				; XREF: Obj73_ShipIndex
000182B8 7000                       		moveq	#0,d0
000182BA 1028 0028                  		move.b	$28(a0),d0
000182BE 303B 0000                  		move.w	off_183C2(pc,d0.w),d0
000182C2 4EBB 0000                  		jsr	off_183C2(pc,d0.w)
000182C6 0228 0006 0028             		andi.b	#6,$28(a0)
000182CC 6000 FF7E                  		bra.w	loc_1833E
000182D0                            ; ===========================================================================
000182D0 0000                       off_183C2:	dc.w loc_183CA-off_183C2
000182D2 0000                       		dc.w Obj73_MakeLava2-off_183C2
000182D4 0000                       		dc.w loc_183CA-off_183C2
000182D6 0000                       		dc.w Obj73_MakeLava2-off_183C2
000182D8                            ; ===========================================================================
000182D8                            
000182D8                            loc_183CA:				; XREF: off_183C2
000182D8 4A68 0010                  		tst.w	$10(a0)
000182DC 6600                       		bne.s	loc_183FE
000182DE 7040                       		moveq	#$40,d0
000182E0 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
000182E6 6700                       		beq.s	loc_183E6
000182E8 6500                       		bcs.s	loc_183DE
000182EA 4440                       		neg.w	d0
000182EC                            
000182EC                            loc_183DE:
000182EC 3140 0012                  		move.w	d0,$12(a0)
000182F0 6000 F4CC                  		bra.w	BossMove
000182F4                            ; ===========================================================================
000182F4                            
000182F4                            loc_183E6:
000182F4 317C 0200 0010             		move.w	#$200,$10(a0)
000182FA 317C 0100 0012             		move.w	#$100,$12(a0)
00018300 0828 0000 0022             		btst	#0,$22(a0)
00018306 6600                       		bne.s	loc_183FE
00018308 4468 0010                  		neg.w	$10(a0)
0001830C                            
0001830C                            loc_183FE:
0001830C 0C28 0018 003E             		cmpi.b	#$18,$3E(a0)
00018312 6400                       		bcc.s	Obj73_MakeLava
00018314 6100 F4A8                  		bsr.w	BossMove
00018318 5968 0012                  		subq.w	#4,$12(a0)
0001831C                            
0001831C                            Obj73_MakeLava:
0001831C 5328 0034                  		subq.b	#1,$34(a0)
00018320 6400                       		bcc.s	loc_1845C
00018322 4EB9 0000 DA32             		jsr	SingleObjLoad
00018328 6600                       		bne.s	loc_1844A
0001832A 12BC 0014                  		move.b	#$14,0(a1)	; load lava ball object
0001832E 337C 02E8 000C             		move.w	#$2E8,$C(a1)	; set Y	position
00018334 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001833A 0280 0000 FFFF             		andi.l	#$FFFF,d0
00018340 80FC 0050                  		divu.w	#$50,d0
00018344 4840                       		swap	d0
00018346 0640 1878                  		addi.w	#$1878,d0
0001834A 3340 0008                  		move.w	d0,8(a1)
0001834E EE09                       		lsr.b	#7,d1
00018350 337C 00FF 0028             		move.w	#$FF,$28(a1)
00018356                            
00018356                            loc_1844A:
00018356 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001835C 0200 001F                  		andi.b	#$1F,d0
00018360 0600 0040                  		addi.b	#$40,d0
00018364 1140 0034                  		move.b	d0,$34(a0)
00018368                            
00018368                            loc_1845C:
00018368 0828 0000 0022             		btst	#0,$22(a0)
0001836E 6700                       		beq.s	loc_18474
00018370 0C68 1910 0030             		cmpi.w	#$1910,$30(a0)
00018376 6D00                       		blt.s	locret_1849C
00018378 317C 1910 0030             		move.w	#$1910,$30(a0)
0001837E 6000                       		bra.s	loc_18482
00018380                            ; ===========================================================================
00018380                            
00018380                            loc_18474:
00018380 0C68 1830 0030             		cmpi.w	#$1830,$30(a0)
00018386 6E00                       		bgt.s	locret_1849C
00018388 317C 1830 0030             		move.w	#$1830,$30(a0)
0001838E                            
0001838E                            loc_18482:
0001838E 4268 0010                  		clr.w	$10(a0)
00018392 317C FE80 0012             		move.w	#-$180,$12(a0)
00018398 0C68 022C 0038             		cmpi.w	#$22C,$38(a0)
0001839E 6400                       		bcc.s	loc_18498
000183A0 4468 0012                  		neg.w	$12(a0)
000183A4                            
000183A4                            loc_18498:
000183A4 5428 0028                  		addq.b	#2,$28(a0)
000183A8                            
000183A8                            locret_1849C:
000183A8 4E75                       		rts	
000183AA                            ; ===========================================================================
000183AA                            
000183AA                            Obj73_MakeLava2:			; XREF: off_183C2
000183AA 6100 F412                  		bsr.w	BossMove
000183AE 3028 0038                  		move.w	$38(a0),d0
000183B2 0440 022C                  		subi.w	#$22C,d0
000183B6 6E00                       		bgt.s	locret_184F4
000183B8 303C 022C                  		move.w	#$22C,d0
000183BC 4A68 0012                  		tst.w	$12(a0)
000183C0 6700                       		beq.s	loc_184EA
000183C2 4268 0012                  		clr.w	$12(a0)
000183C6 317C 0050 003C             		move.w	#$50,$3C(a0)
000183CC 0868 0000 0022             		bchg	#0,$22(a0)
000183D2 4EB9 0000 DA32             		jsr	SingleObjLoad
000183D8 6600                       		bne.s	loc_184EA
000183DA 3368 0030 0008             		move.w	$30(a0),8(a1)
000183E0 3368 0038 000C             		move.w	$38(a0),$C(a1)
000183E6 0669 0018 000C             		addi.w	#$18,$C(a1)
000183EC 12BC 0074                  		move.b	#$74,(a1)	; load lava ball object
000183F0 137C 0001 0028             		move.b	#1,$28(a1)
000183F6                            
000183F6                            loc_184EA:
000183F6 5368 003C                  		subq.w	#1,$3C(a0)
000183FA 6600                       		bne.s	locret_184F4
000183FC 5428 0028                  		addq.b	#2,$28(a0)
00018400                            
00018400                            locret_184F4:
00018400 4E75                       		rts	
00018402                            ; ===========================================================================
00018402                            
00018402                            loc_184F6:				; XREF: Obj73_ShipIndex
00018402 5368 003C                  		subq.w	#1,$3C(a0)
00018406 6B00                       		bmi.s	loc_18500
00018408 6000 F372                  		bra.w	BossDefeated
0001840C                            ; ===========================================================================
0001840C                            
0001840C                            loc_18500:
0001840C 08E8 0000 0022             		bset	#0,$22(a0)
00018412 08A8 0007 0022             		bclr	#7,$22(a0)
00018418 4268 0010                  		clr.w	$10(a0)
0001841C 5428 0025                  		addq.b	#2,$25(a0)
00018420 317C FFDA 003C             		move.w	#-$26,$3C(a0)
00018426 4A38 F7A7                  		tst.b	($FFFFF7A7).w
0001842A 6600                       		bne.s	locret_1852A
0001842C 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018432 4268 0012                  		clr.w	$12(a0)
00018436                            
00018436                            locret_1852A:
00018436 4E75                       		rts	
00018438                            ; ===========================================================================
00018438                            
00018438                            loc_1852C:				; XREF: Obj73_ShipIndex
00018438 5268 003C                  		addq.w	#1,$3C(a0)
0001843C 6700                       		beq.s	loc_18544
0001843E 6A00                       		bpl.s	loc_1854E
00018440 0C68 0270 0038             		cmpi.w	#$270,$38(a0)
00018446 6400                       		bcc.s	loc_18544
00018448 0668 0018 0012             		addi.w	#$18,$12(a0)
0001844E 6000                       		bra.s	loc_1857A
00018450                            ; ===========================================================================
00018450                            
00018450                            loc_18544:
00018450 4268 0012                  		clr.w	$12(a0)
00018454 4268 003C                  		clr.w	$3C(a0)
00018458 6000                       		bra.s	loc_1857A
0001845A                            ; ===========================================================================
0001845A                            
0001845A                            loc_1854E:
0001845A 0C68 0030 003C             		cmpi.w	#$30,$3C(a0)
00018460 6500                       		bcs.s	loc_18566
00018462 6700                       		beq.s	loc_1856C
00018464 0C68 0038 003C             		cmpi.w	#$38,$3C(a0)
0001846A 6500                       		bcs.s	loc_1857A
0001846C 5428 0025                  		addq.b	#2,$25(a0)
00018470 6000                       		bra.s	loc_1857A
00018472                            ; ===========================================================================
00018472                            
00018472                            loc_18566:
00018472 5168 0012                  		subq.w	#8,$12(a0)
00018476 6000                       		bra.s	loc_1857A
00018478                            ; ===========================================================================
00018478                            
00018478                            loc_1856C:
00018478 4268 0012                  		clr.w	$12(a0)
0001847C 303C 0083                  		move.w	#$83,d0
00018480 4EB9 0000 1396             		jsr	(PlaySound).l	; play MZ music
00018486                            
00018486                            loc_1857A:
00018486 6100 F336                  		bsr.w	BossMove
0001848A 6000 FDC0                  		bra.w	loc_1833E
0001848E                            ; ===========================================================================
0001848E                            
0001848E                            loc_18582:				; XREF: Obj73_ShipIndex
0001848E 317C 0500 0010             		move.w	#$500,$10(a0)
00018494 317C FFC0 0012             		move.w	#-$40,$12(a0)
0001849A 0C78 1960 F72A             		cmpi.w	#$1960,($FFFFF72A).w
000184A0 6400                       		bcc.s	loc_1859C
000184A2 5478 F72A                  		addq.w	#2,($FFFFF72A).w
000184A6 6000                       		bra.s	loc_185A2
000184A8                            ; ===========================================================================
000184A8                            
000184A8                            loc_1859C:
000184A8 4A28 0001                  		tst.b	1(a0)
000184AC 6A00                       		bpl.s	Obj73_ShipDel
000184AE                            
000184AE                            loc_185A2:
000184AE 6100 F30E                  		bsr.w	BossMove
000184B2 6000 FD98                  		bra.w	loc_1833E
000184B6                            ; ===========================================================================
000184B6                            
000184B6                            Obj73_ShipDel:
000184B6 4EF9 0000 D5E8             		jmp	DeleteObject
000184BC                            ; ===========================================================================
000184BC                            
000184BC                            Obj73_FaceMain:				; XREF: Obj73_Index
000184BC 7000                       		moveq	#0,d0
000184BE 7201                       		moveq	#1,d1
000184C0 2268 0034                  		movea.l	$34(a0),a1
000184C4 1029 0025                  		move.b	$25(a1),d0
000184C8 5540                       		subq.w	#2,d0
000184CA 6600                       		bne.s	loc_185D2
000184CC 0829 0001 0028             		btst	#1,$28(a1)
000184D2 6700                       		beq.s	loc_185DA
000184D4 4A69 0012                  		tst.w	$12(a1)
000184D8 6600                       		bne.s	loc_185DA
000184DA 7204                       		moveq	#4,d1
000184DC 6000                       		bra.s	loc_185EE
000184DE                            ; ===========================================================================
000184DE                            
000184DE                            loc_185D2:
000184DE 5500                       		subq.b	#2,d0
000184E0 6B00                       		bmi.s	loc_185DA
000184E2 720A                       		moveq	#$A,d1
000184E4 6000                       		bra.s	loc_185EE
000184E6                            ; ===========================================================================
000184E6                            
000184E6                            loc_185DA:
000184E6 4A29 0020                  		tst.b	$20(a1)
000184EA 6600                       		bne.s	loc_185E4
000184EC 7205                       		moveq	#5,d1
000184EE 6000                       		bra.s	loc_185EE
000184F0                            ; ===========================================================================
000184F0                            
000184F0                            loc_185E4:
000184F0 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
000184F6 6500                       		bcs.s	loc_185EE
000184F8 7204                       		moveq	#4,d1
000184FA                            
000184FA                            loc_185EE:
000184FA 1141 001C                  		move.b	d1,$1C(a0)
000184FE 5900                       		subq.b	#4,d0
00018500 6600                       		bne.s	loc_18602
00018502 117C 0006 001C             		move.b	#6,$1C(a0)
00018508 4A28 0001                  		tst.b	1(a0)
0001850C 6A00                       		bpl.s	Obj73_FaceDel
0001850E                            
0001850E                            loc_18602:
0001850E 6000                       		bra.s	Obj73_Display
00018510                            ; ===========================================================================
00018510                            
00018510                            Obj73_FaceDel:
00018510 4EF9 0000 D5E8             		jmp	DeleteObject
00018516                            ; ===========================================================================
00018516                            
00018516                            Obj73_FlameMain:			; XREF: Obj73_Index
00018516 117C 0007 001C             		move.b	#7,$1C(a0)
0001851C 2268 0034                  		movea.l	$34(a0),a1
00018520 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018526 6D00                       		blt.s	loc_1862A
00018528 117C 000B 001C             		move.b	#$B,$1C(a0)
0001852E 4A28 0001                  		tst.b	1(a0)
00018532 6A00                       		bpl.s	Obj73_FlameDel
00018534 6000                       		bra.s	loc_18636
00018536                            ; ===========================================================================
00018536                            
00018536                            loc_1862A:
00018536 4A69 0010                  		tst.w	$10(a1)
0001853A 6700                       		beq.s	loc_18636
0001853C 117C 0008 001C             		move.b	#8,$1C(a0)
00018542                            
00018542                            loc_18636:
00018542 6000                       		bra.s	Obj73_Display
00018544                            ; ===========================================================================
00018544                            
00018544                            Obj73_FlameDel:				; XREF: Obj73_FlameMain
00018544 4EF9 0000 D5E8             		jmp	DeleteObject
0001854A                            ; ===========================================================================
0001854A                            
0001854A                            Obj73_Display:
0001854A 43F9 0001 7BCE             		lea	(Ani_Eggman).l,a1
00018550 4EB9 0000 A6D8             		jsr	AnimateSprite
00018556                            
00018556                            loc_1864A:
00018556 2268 0034                  		movea.l	$34(a0),a1
0001855A 3169 0008 0008             		move.w	8(a1),8(a0)
00018560 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018566 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001856C 7003                       		moveq	#3,d0
0001856E C028 0022                  		and.b	$22(a0),d0
00018572 0228 00FC 0001             		andi.b	#-4,1(a0)
00018578 8128 0001                  		or.b	d0,1(a0)
0001857C 4EF9 0000 D5AC             		jmp	DisplaySprite
00018582                            ; ===========================================================================
00018582                            
00018582                            Obj73_TubeMain:				; XREF: Obj73_Index
00018582 2268 0034                  		movea.l	$34(a0),a1
00018586 0C29 0008 0025             		cmpi.b	#8,$25(a1)
0001858C 6600                       		bne.s	loc_18688
0001858E 4A28 0001                  		tst.b	1(a0)
00018592 6A00                       		bpl.s	Obj73_TubeDel
00018594                            
00018594                            loc_18688:
00018594 217C 0001 7CE6 0004        		move.l	#Map_BossItems,4(a0)
0001859C 317C 246C 0002             		move.w	#$246C,2(a0)
000185A2 117C 0004 001A             		move.b	#4,$1A(a0)
000185A8 60AC                       		bra.s	loc_1864A
000185AA                            ; ===========================================================================
000185AA                            
000185AA                            Obj73_TubeDel:
000185AA 4EF9 0000 D5E8             		jmp	DeleteObject
000185B0                            ; ===========================================================================
000185B0                            ; ---------------------------------------------------------------------------
000185B0                            ; Object 74 - lava that	Eggman drops (MZ)
000185B0                            ; ---------------------------------------------------------------------------
000185B0                            
000185B0                            Obj74:					; XREF: Obj_Index
000185B0 7000                       		moveq	#0,d0
000185B2 1028 0024                  		move.b	$24(a0),d0
000185B6 303B 0000                  		move.w	Obj74_Index(pc,d0.w),d0
000185BA 4EBB 0000                  		jsr	Obj74_Index(pc,d0.w)
000185BE 4EF9 0000 D5AC             		jmp	DisplaySprite
000185C4                            ; ===========================================================================
000185C4 0000                       Obj74_Index:	dc.w Obj74_Main-Obj74_Index
000185C6 0000                       		dc.w Obj74_Action-Obj74_Index
000185C8 0000                       		dc.w loc_18886-Obj74_Index
000185CA 0000                       		dc.w Obj74_Delete3-Obj74_Index
000185CC                            ; ===========================================================================
000185CC                            
000185CC                            Obj74_Main:				; XREF: Obj74_Index
000185CC 117C 0008 0016             		move.b	#8,$16(a0)
000185D2 117C 0008 0017             		move.b	#8,$17(a0)
000185D8 217C 0000 B32A 0004        		move.l	#Map_obj14,4(a0)
000185E0 317C 0345 0002             		move.w	#$345,2(a0)
000185E6 117C 0004 0001             		move.b	#4,1(a0)
000185EC 117C 0005 0018             		move.b	#5,$18(a0)
000185F2 3168 000C 0038             		move.w	$C(a0),$38(a0)
000185F8 117C 0008 0019             		move.b	#8,$19(a0)
000185FE 5428 0024                  		addq.b	#2,$24(a0)
00018602 4A28 0028                  		tst.b	$28(a0)
00018606 6600                       		bne.s	loc_1870A
00018608 117C 008B 0020             		move.b	#$8B,$20(a0)
0001860E 5428 0024                  		addq.b	#2,$24(a0)
00018612 6000 0000                  		bra.w	loc_18886
00018616                            ; ===========================================================================
00018616                            
00018616                            loc_1870A:
00018616 117C 001E 0029             		move.b	#$1E,$29(a0)
0001861C 303C 00AE                  		move.w	#$AE,d0
00018620 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play lava sound
00018626                            
00018626                            Obj74_Action:				; XREF: Obj74_Index
00018626 7000                       		moveq	#0,d0
00018628 1028 0025                  		move.b	$25(a0),d0
0001862C 303B 0000                  		move.w	Obj74_Index2(pc,d0.w),d0
00018630 4EBB 0000                  		jsr	Obj74_Index2(pc,d0.w)
00018634 4EB9 0000 D586             		jsr	SpeedToPos
0001863A 43F9 0000 E466             		lea	(Ani_obj14).l,a1
00018640 4EB9 0000 A6D8             		jsr	AnimateSprite
00018646 0C68 02E8 000C             		cmpi.w	#$2E8,$C(a0)
0001864C 6200                       		bhi.s	Obj74_Delete
0001864E 4E75                       		rts	
00018650                            ; ===========================================================================
00018650                            
00018650                            Obj74_Delete:
00018650 4EF9 0000 D5E8             		jmp	DeleteObject
00018656                            ; ===========================================================================
00018656 0000                       Obj74_Index2:	dc.w Obj74_Drop-Obj74_Index2
00018658 0000                       		dc.w Obj74_MakeFlame-Obj74_Index2
0001865A 0000                       		dc.w Obj74_Duplicate-Obj74_Index2
0001865C 0000                       		dc.w Obj74_FallEdge-Obj74_Index2
0001865E                            ; ===========================================================================
0001865E                            
0001865E                            Obj74_Drop:				; XREF: Obj74_Index2
0001865E 08E8 0001 0022             		bset	#1,$22(a0)
00018664 5328 0029                  		subq.b	#1,$29(a0)
00018668 6A00                       		bpl.s	locret_18780
0001866A 117C 008B 0020             		move.b	#$8B,$20(a0)
00018670 4228 0028                  		clr.b	$28(a0)
00018674 0668 0018 0012             		addi.w	#$18,$12(a0)
0001867A 08A8 0001 0022             		bclr	#1,$22(a0)
00018680 6100 C6C8                  		bsr.w	ObjHitFloor
00018684 4A41                       		tst.w	d1
00018686 6A00                       		bpl.s	locret_18780
00018688 5428 0025                  		addq.b	#2,$25(a0)
0001868C                            
0001868C                            locret_18780:
0001868C 4E75                       		rts	
0001868E                            ; ===========================================================================
0001868E                            
0001868E                            Obj74_MakeFlame:			; XREF: Obj74_Index2
0001868E 5568 000C                  		subq.w	#2,$C(a0)
00018692 08E8 0007 0002             		bset	#7,2(a0)
00018698 317C 00A0 0010             		move.w	#$A0,$10(a0)
0001869E 4268 0012                  		clr.w	$12(a0)
000186A2 3168 0008 0030             		move.w	8(a0),$30(a0)
000186A8 3168 000C 0038             		move.w	$C(a0),$38(a0)
000186AE 117C 0003 0029             		move.b	#3,$29(a0)
000186B4 4EB9 0000 DA48             		jsr	SingleObjLoad2
000186BA 6600                       		bne.s	loc_187CA
000186BC 47D1                       		lea	(a1),a3
000186BE 45D0                       		lea	(a0),a2
000186C0 7003                       		moveq	#3,d0
000186C2                            
000186C2                            Obj74_Loop:
000186C2 26DA                       		move.l	(a2)+,(a3)+
000186C4 26DA                       		move.l	(a2)+,(a3)+
000186C6 26DA                       		move.l	(a2)+,(a3)+
000186C8 26DA                       		move.l	(a2)+,(a3)+
000186CA 51C8 FFF6                  		dbf	d0,Obj74_Loop
000186CE                            
000186CE 4469 0010                  		neg.w	$10(a1)
000186D2 5429 0025                  		addq.b	#2,$25(a1)
000186D6                            
000186D6                            loc_187CA:
000186D6 5428 0025                  		addq.b	#2,$25(a0)
000186DA 4E75                       		rts	
000186DC                            
000186DC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000186DC                            
000186DC                            
000186DC                            Obj74_Duplicate2:			; XREF: Obj74_Duplicate
000186DC 4EB9 0000 DA48             		jsr	SingleObjLoad2
000186E2 6600                       		bne.s	locret_187EE
000186E4 3368 0008 0008             		move.w	8(a0),8(a1)
000186EA 3368 000C 000C             		move.w	$C(a0),$C(a1)
000186F0 12BC 0074                  		move.b	#$74,(a1)
000186F4 337C 0067 0028             		move.w	#$67,$28(a1)
000186FA                            
000186FA                            locret_187EE:
000186FA 4E75                       		rts	
000186FC                            ; End of function Obj74_Duplicate2
000186FC                            
000186FC                            ; ===========================================================================
000186FC                            
000186FC                            Obj74_Duplicate:			; XREF: Obj74_Index2
000186FC 6100 C64C                  		bsr.w	ObjHitFloor
00018700 4A41                       		tst.w	d1
00018702 6A00                       		bpl.s	loc_18826
00018704 3028 0008                  		move.w	8(a0),d0
00018708 0C40 1940                  		cmpi.w	#$1940,d0
0001870C 6E00                       		bgt.s	loc_1882C
0001870E 3228 0030                  		move.w	$30(a0),d1
00018712 B240                       		cmp.w	d0,d1
00018714 6700                       		beq.s	loc_1881E
00018716 0240 0010                  		andi.w	#$10,d0
0001871A 0241 0010                  		andi.w	#$10,d1
0001871E B240                       		cmp.w	d0,d1
00018720 6700                       		beq.s	loc_1881E
00018722 61B8                       		bsr.s	Obj74_Duplicate2
00018724 3168 0008 0032             		move.w	8(a0),$32(a0)
0001872A                            
0001872A                            loc_1881E:
0001872A 3168 0008 0030             		move.w	8(a0),$30(a0)
00018730 4E75                       		rts	
00018732                            ; ===========================================================================
00018732                            
00018732                            loc_18826:
00018732 5428 0025                  		addq.b	#2,$25(a0)
00018736 4E75                       		rts	
00018738                            ; ===========================================================================
00018738                            
00018738                            loc_1882C:
00018738 5428 0024                  		addq.b	#2,$24(a0)
0001873C 4E75                       		rts	
0001873E                            ; ===========================================================================
0001873E                            
0001873E                            Obj74_FallEdge:				; XREF: Obj74_Index2
0001873E 08A8 0001 0022             		bclr	#1,$22(a0)
00018744 0668 0024 0012             		addi.w	#$24,$12(a0)	; make flame fall
0001874A 3028 0008                  		move.w	8(a0),d0
0001874E 9068 0032                  		sub.w	$32(a0),d0
00018752 6A00                       		bpl.s	loc_1884A
00018754 4440                       		neg.w	d0
00018756                            
00018756                            loc_1884A:
00018756 0C40 0012                  		cmpi.w	#$12,d0
0001875A 6600                       		bne.s	loc_18856
0001875C 08A8 0007 0002             		bclr	#7,2(a0)
00018762                            
00018762                            loc_18856:
00018762 6100 C5E6                  		bsr.w	ObjHitFloor
00018766 4A41                       		tst.w	d1
00018768 6A00                       		bpl.s	locret_1887E
0001876A 5328 0029                  		subq.b	#1,$29(a0)
0001876E 6700                       		beq.s	Obj74_Delete2
00018770 4268 0012                  		clr.w	$12(a0)
00018774 3168 0032 0008             		move.w	$32(a0),8(a0)
0001877A 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018780 08E8 0007 0002             		bset	#7,2(a0)
00018786 5528 0025                  		subq.b	#2,$25(a0)
0001878A                            
0001878A                            locret_1887E:
0001878A 4E75                       		rts	
0001878C                            ; ===========================================================================
0001878C                            
0001878C                            Obj74_Delete2:
0001878C 4EF9 0000 D5E8             		jmp	DeleteObject
00018792                            ; ===========================================================================
00018792                            
00018792                            loc_18886:				; XREF: Obj74_Index
00018792 08E8 0007 0002             		bset	#7,2(a0)
00018798 5328 0029                  		subq.b	#1,$29(a0)
0001879C 6600                       		bne.s	Obj74_Animate
0001879E 117C 0001 001C             		move.b	#1,$1C(a0)
000187A4 5968 000C                  		subq.w	#4,$C(a0)
000187A8 4228 0020                  		clr.b	$20(a0)
000187AC                            
000187AC                            Obj74_Animate:
000187AC 43F9 0000 E466             		lea	(Ani_obj14).l,a1
000187B2 4EF9 0000 A6D8             		jmp	AnimateSprite
000187B8                            ; ===========================================================================
000187B8                            
000187B8                            Obj74_Delete3:				; XREF: Obj74_Index
000187B8 4EF9 0000 D5E8             		jmp	DeleteObject
000187BE                            ; ===========================================================================
000187BE                            
000187BE                            Obj7A_Delete:
000187BE 4EF9 0000 D5E8             		jmp	DeleteObject
000187C4                            ; ===========================================================================
000187C4                            ; ---------------------------------------------------------------------------
000187C4                            ; Object 7A - Eggman (SLZ)
000187C4                            ; ---------------------------------------------------------------------------
000187C4                            
000187C4                            Obj7A:					; XREF: Obj_Index
000187C4 7000                       		moveq	#0,d0
000187C6 1028 0024                  		move.b	$24(a0),d0
000187CA 323B 0000                  		move.w	Obj7A_Index(pc,d0.w),d1
000187CE 4EFB 1000                  		jmp	Obj7A_Index(pc,d1.w)
000187D2                            ; ===========================================================================
000187D2 0000                       Obj7A_Index:	dc.w Obj7A_Main-Obj7A_Index
000187D4 0000                       		dc.w Obj7A_ShipMain-Obj7A_Index
000187D6 0000                       		dc.w Obj7A_FaceMain-Obj7A_Index
000187D8 0000                       		dc.w Obj7A_FlameMain-Obj7A_Index
000187DA 0000                       		dc.w Obj7A_TubeMain-Obj7A_Index
000187DC                            
000187DC 0200 04                    Obj7A_ObjData:	dc.b 2,	0, 4		; routine number, animation, priority
000187DF 0401 04                    		dc.b 4,	1, 4
000187E2 0607 04                    		dc.b 6,	7, 4
000187E5 0800 03                    		dc.b 8,	0, 3
000187E8                            ; ===========================================================================
000187E8                            
000187E8                            Obj7A_Main:				; XREF: Obj7A_Index
000187E8 317C 2188 0008             		move.w	#$2188,8(a0)
000187EE 317C 0228 000C             		move.w	#$228,$C(a0)
000187F4 3168 0008 0030             		move.w	8(a0),$30(a0)
000187FA 3168 000C 0038             		move.w	$C(a0),$38(a0)
00018800 117C 000F 0020             		move.b	#$F,$20(a0)
00018806 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001880C 45FA FFCE                  		lea	Obj7A_ObjData(pc),a2
00018810 2248                       		movea.l	a0,a1
00018812 7203                       		moveq	#3,d1
00018814 6000                       		bra.s	Obj7A_LoadBoss
00018816                            ; ===========================================================================
00018816                            
00018816                            Obj7A_Loop:
00018816 4EB9 0000 DA48             		jsr	SingleObjLoad2
0001881C 6600                       		bne.s	loc_1895C
0001881E 12BC 007A                  		move.b	#$7A,0(a1)
00018822 3368 0008 0008             		move.w	8(a0),8(a1)
00018828 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001882E                            
0001882E                            Obj7A_LoadBoss:				; XREF: Obj7A_Main
0001882E 08A8 0000 0022             		bclr	#0,$22(a0)
00018834 4229 0025                  		clr.b	$25(a1)
00018838 135A 0024                  		move.b	(a2)+,$24(a1)
0001883C 135A 001C                  		move.b	(a2)+,$1C(a1)
00018840 135A 0018                  		move.b	(a2)+,$18(a1)
00018844 237C 0001 7C1E 0004        		move.l	#Map_Eggman,4(a1)
0001884C 337C 0400 0002             		move.w	#$400,2(a1)
00018852 137C 0004 0001             		move.b	#4,1(a1)
00018858 137C 0020 0019             		move.b	#$20,$19(a1)
0001885E 2348 0034                  		move.l	a0,$34(a1)
00018862 51C9 FFB2                  		dbf	d1,Obj7A_Loop	; repeat sequence 3 more times
00018866                            
00018866                            loc_1895C:
00018866 43F8 D040                  		lea	($FFFFD040).w,a1
0001886A 45E8 002A                  		lea	$2A(a0),a2
0001886E 705E                       		moveq	#$5E,d0
00018870 723E                       		moveq	#$3E,d1
00018872                            
00018872                            loc_18968:
00018872 B011                       		cmp.b	(a1),d0
00018874 6600                       		bne.s	loc_18974
00018876 4A29 0028                  		tst.b	$28(a1)
0001887A 6700                       		beq.s	loc_18974
0001887C 34C9                       		move.w	a1,(a2)+
0001887E                            
0001887E                            loc_18974:
0001887E D2FC 0040                  		adda.w	#$40,a1
00018882 51C9 FFEE                  		dbf	d1,loc_18968
00018886                            
00018886                            Obj7A_ShipMain:				; XREF: Obj7A_Index
00018886 7000                       		moveq	#0,d0
00018888 1028 0025                  		move.b	$25(a0),d0
0001888C 303B 0000                  		move.w	Obj7A_ShipIndex(pc,d0.w),d0
00018890 4EBB 0000                  		jsr	Obj7A_ShipIndex(pc,d0.w)
00018894 43F9 0001 7BCE             		lea	(Ani_Eggman).l,a1
0001889A 4EB9 0000 A6D8             		jsr	AnimateSprite
000188A0 7003                       		moveq	#3,d0
000188A2 C028 0022                  		and.b	$22(a0),d0
000188A6 0228 00FC 0001             		andi.b	#$FC,1(a0)
000188AC 8128 0001                  		or.b	d0,1(a0)
000188B0 4EF9 0000 D5AC             		jmp	DisplaySprite
000188B6                            ; ===========================================================================
000188B6 0000                       Obj7A_ShipIndex:dc.w loc_189B8-Obj7A_ShipIndex
000188B8 0000                       		dc.w loc_18A5E-Obj7A_ShipIndex
000188BA 0000                       		dc.w Obj7A_MakeBall-Obj7A_ShipIndex
000188BC 0000                       		dc.w loc_18B48-Obj7A_ShipIndex
000188BE 0000                       		dc.w loc_18B80-Obj7A_ShipIndex
000188C0 0000                       		dc.w loc_18BC6-Obj7A_ShipIndex
000188C2                            ; ===========================================================================
000188C2                            
000188C2                            loc_189B8:				; XREF: Obj7A_ShipIndex
000188C2 317C FF00 0010             		move.w	#-$100,$10(a0)
000188C8 0C68 2120 0030             		cmpi.w	#$2120,$30(a0)
000188CE 6400                       		bcc.s	loc_189CA
000188D0 5428 0025                  		addq.b	#2,$25(a0)
000188D4                            
000188D4                            loc_189CA:
000188D4 6100 EEE8                  		bsr.w	BossMove
000188D8 1028 003F                  		move.b	$3F(a0),d0
000188DC 5428 003F                  		addq.b	#2,$3F(a0)
000188E0 4EB9 0000 29DA             		jsr	(CalcSine).l
000188E6 EC40                       		asr.w	#6,d0
000188E8 D068 0038                  		add.w	$38(a0),d0
000188EC 3140 000C                  		move.w	d0,$C(a0)
000188F0 3168 0030 0008             		move.w	$30(a0),8(a0)
000188F6 6000                       		bra.s	loc_189FE
000188F8                            ; ===========================================================================
000188F8                            
000188F8                            loc_189EE:
000188F8 6100 EEC4                  		bsr.w	BossMove
000188FC 3168 0038 000C             		move.w	$38(a0),$C(a0)
00018902 3168 0030 0008             		move.w	$30(a0),8(a0)
00018908                            
00018908                            loc_189FE:
00018908 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001890E 6400                       		bcc.s	locret_18A44
00018910 4A28 0022                  		tst.b	$22(a0)
00018914 6B00                       		bmi.s	loc_18A46
00018916 4A28 0020                  		tst.b	$20(a0)
0001891A 6600                       		bne.s	locret_18A44
0001891C 4A28 003E                  		tst.b	$3E(a0)
00018920 6600                       		bne.s	loc_18A28
00018922 117C 0020 003E             		move.b	#$20,$3E(a0)
00018928 303C 00AC                  		move.w	#$AC,d0
0001892C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00018932                            
00018932                            loc_18A28:
00018932 43F8 FB22                  		lea	($FFFFFB22).w,a1
00018936 7000                       		moveq	#0,d0
00018938 4A51                       		tst.w	(a1)
0001893A 6600                       		bne.s	loc_18A36
0001893C 303C 0EEE                  		move.w	#$EEE,d0
00018940                            
00018940                            loc_18A36:
00018940 3280                       		move.w	d0,(a1)
00018942 5328 003E                  		subq.b	#1,$3E(a0)
00018946 6600                       		bne.s	locret_18A44
00018948 117C 000F 0020             		move.b	#$F,$20(a0)
0001894E                            
0001894E                            locret_18A44:
0001894E 4E75                       		rts	
00018950                            ; ===========================================================================
00018950                            
00018950                            loc_18A46:
00018950 7064                       		moveq	#100,d0
00018952 6100 0000                  		bsr.w	AddPoints
00018956 117C 0006 0025             		move.b	#6,$25(a0)
0001895C 117C 0078 003C             		move.b	#$78,$3C(a0)
00018962 4268 0010                  		clr.w	$10(a0)
00018966 4E75                       		rts	
00018968                            ; ===========================================================================
00018968                            
00018968                            loc_18A5E:				; XREF: Obj7A_ShipIndex
00018968 3028 0030                  		move.w	$30(a0),d0
0001896C 317C 0200 0010             		move.w	#$200,$10(a0)
00018972 0828 0000 0022             		btst	#0,$22(a0)
00018978 6600                       		bne.s	loc_18A7C
0001897A 4468 0010                  		neg.w	$10(a0)
0001897E 0C40 2008                  		cmpi.w	#$2008,d0
00018982 6E00                       		bgt.s	loc_18A88
00018984 6000                       		bra.s	loc_18A82
00018986                            ; ===========================================================================
00018986                            
00018986                            loc_18A7C:
00018986 0C40 2138                  		cmpi.w	#$2138,d0
0001898A 6D00                       		blt.s	loc_18A88
0001898C                            
0001898C                            loc_18A82:
0001898C 0868 0000 0022             		bchg	#0,$22(a0)
00018992                            
00018992                            loc_18A88:
00018992 3028 0008                  		move.w	8(a0),d0
00018996 72FF                       		moveq	#-1,d1
00018998 7402                       		moveq	#2,d2
0001899A 45E8 002A                  		lea	$2A(a0),a2
0001899E 7828                       		moveq	#$28,d4
000189A0 4A68 0010                  		tst.w	$10(a0)
000189A4 6A00                       		bpl.s	loc_18A9E
000189A6 4444                       		neg.w	d4
000189A8                            
000189A8                            loc_18A9E:
000189A8 321A                       		move.w	(a2)+,d1
000189AA 2641                       		movea.l	d1,a3
000189AC 082B 0003 0022             		btst	#3,$22(a3)
000189B2 6600                       		bne.s	loc_18AB4
000189B4 362B 0008                  		move.w	8(a3),d3
000189B8 D644                       		add.w	d4,d3
000189BA 9640                       		sub.w	d0,d3
000189BC 6700                       		beq.s	loc_18AC0
000189BE                            
000189BE                            loc_18AB4:
000189BE 51CA FFE8                  		dbf	d2,loc_18A9E
000189C2                            
000189C2 1142 0028                  		move.b	d2,$28(a0)
000189C6 6000 FF0C                  		bra.w	loc_189CA
000189CA                            ; ===========================================================================
000189CA                            
000189CA                            loc_18AC0:
000189CA 1142 0028                  		move.b	d2,$28(a0)
000189CE 5428 0025                  		addq.b	#2,$25(a0)
000189D2 117C 0028 003C             		move.b	#$28,$3C(a0)
000189D8 6000 FEFA                  		bra.w	loc_189CA
000189DC                            ; ===========================================================================
000189DC                            
000189DC                            Obj7A_MakeBall:				; XREF: Obj7A_ShipIndex
000189DC 0C28 0028 003C             		cmpi.b	#$28,$3C(a0)
000189E2 6600                       		bne.s	loc_18B36
000189E4 70FF                       		moveq	#-1,d0
000189E6 1028 0028                  		move.b	$28(a0),d0
000189EA 4880                       		ext.w	d0
000189EC 6B00                       		bmi.s	loc_18B40
000189EE 5540                       		subq.w	#2,d0
000189F0 4440                       		neg.w	d0
000189F2 D040                       		add.w	d0,d0
000189F4 43E8 002A                  		lea	$2A(a0),a1
000189F8 3031 0000                  		move.w	(a1,d0.w),d0
000189FC 2440                       		movea.l	d0,a2
000189FE 43F8 D040                  		lea	($FFFFD040).w,a1
00018A02 723E                       		moveq	#$3E,d1
00018A04                            
00018A04                            loc_18AFA:
00018A04 B0A9 003C                  		cmp.l	$3C(a1),d0
00018A08 6700                       		beq.s	loc_18B40
00018A0A D2FC 0040                  		adda.w	#$40,a1
00018A0E 51C9 FFF4                  		dbf	d1,loc_18AFA
00018A12                            
00018A12 2F08                       		move.l	a0,-(sp)
00018A14 41D2                       		lea	(a2),a0
00018A16 4EB9 0000 DA48             		jsr	SingleObjLoad2
00018A1C 205F                       		movea.l	(sp)+,a0
00018A1E 6600                       		bne.s	loc_18B40
00018A20 12BC 007B                  		move.b	#$7B,(a1)	; load spiked ball object
00018A24 3368 0008 0008             		move.w	8(a0),8(a1)
00018A2A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018A30 0669 0020 000C             		addi.w	#$20,$C(a1)
00018A36 136A 0022 0022             		move.b	$22(a2),$22(a1)
00018A3C 234A 003C                  		move.l	a2,$3C(a1)
00018A40                            
00018A40                            loc_18B36:
00018A40 5328 003C                  		subq.b	#1,$3C(a0)
00018A44 6700                       		beq.s	loc_18B40
00018A46 6000 FEC0                  		bra.w	loc_189FE
00018A4A                            ; ===========================================================================
00018A4A                            
00018A4A                            loc_18B40:
00018A4A 5528 0025                  		subq.b	#2,$25(a0)
00018A4E 6000 FE84                  		bra.w	loc_189CA
00018A52                            ; ===========================================================================
00018A52                            
00018A52                            loc_18B48:				; XREF: Obj7A_ShipIndex
00018A52 5328 003C                  		subq.b	#1,$3C(a0)
00018A56 6B00                       		bmi.s	loc_18B52
00018A58 6000 ED22                  		bra.w	BossDefeated
00018A5C                            ; ===========================================================================
00018A5C                            
00018A5C                            loc_18B52:
00018A5C 5428 0025                  		addq.b	#2,$25(a0)
00018A60 4268 0012                  		clr.w	$12(a0)
00018A64 08E8 0000 0022             		bset	#0,$22(a0)
00018A6A 08A8 0007 0022             		bclr	#7,$22(a0)
00018A70 4268 0010                  		clr.w	$10(a0)
00018A74 117C 00E8 003C             		move.b	#-$18,$3C(a0)
00018A7A 4A38 F7A7                  		tst.b	($FFFFF7A7).w
00018A7E 6600                       		bne.s	loc_18B7C
00018A80 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
00018A86                            
00018A86                            loc_18B7C:
00018A86 6000 FE80                  		bra.w	loc_189FE
00018A8A                            ; ===========================================================================
00018A8A                            
00018A8A                            loc_18B80:				; XREF: Obj7A_ShipIndex
00018A8A 5228 003C                  		addq.b	#1,$3C(a0)
00018A8E 6700                       		beq.s	loc_18B90
00018A90 6A00                       		bpl.s	loc_18B96
00018A92 0668 0018 0012             		addi.w	#$18,$12(a0)
00018A98 6000                       		bra.s	loc_18BC2
00018A9A                            ; ===========================================================================
00018A9A                            
00018A9A                            loc_18B90:
00018A9A 4268 0012                  		clr.w	$12(a0)
00018A9E 6000                       		bra.s	loc_18BC2
00018AA0                            ; ===========================================================================
00018AA0                            
00018AA0                            loc_18B96:
00018AA0 0C28 0020 003C             		cmpi.b	#$20,$3C(a0)
00018AA6 6500                       		bcs.s	loc_18BAE
00018AA8 6700                       		beq.s	loc_18BB4
00018AAA 0C28 002A 003C             		cmpi.b	#$2A,$3C(a0)
00018AB0 6500                       		bcs.s	loc_18BC2
00018AB2 5428 0025                  		addq.b	#2,$25(a0)
00018AB6 6000                       		bra.s	loc_18BC2
00018AB8                            ; ===========================================================================
00018AB8                            
00018AB8                            loc_18BAE:
00018AB8 5168 0012                  		subq.w	#8,$12(a0)
00018ABC 6000                       		bra.s	loc_18BC2
00018ABE                            ; ===========================================================================
00018ABE                            
00018ABE                            loc_18BB4:
00018ABE 4268 0012                  		clr.w	$12(a0)
00018AC2 303C 0084                  		move.w	#$84,d0
00018AC6 4EB9 0000 1396             		jsr	(PlaySound).l	; play SLZ music
00018ACC                            
00018ACC                            loc_18BC2:
00018ACC 6000 FE2A                  		bra.w	loc_189EE
00018AD0                            ; ===========================================================================
00018AD0                            
00018AD0                            loc_18BC6:				; XREF: Obj7A_ShipIndex
00018AD0 317C 0400 0010             		move.w	#$400,$10(a0)
00018AD6 317C FFC0 0012             		move.w	#-$40,$12(a0)
00018ADC 0C78 2160 F72A             		cmpi.w	#$2160,($FFFFF72A).w
00018AE2 6400                       		bcc.s	loc_18BE0
00018AE4 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00018AE8 6000                       		bra.s	loc_18BE8
00018AEA                            ; ===========================================================================
00018AEA                            
00018AEA                            loc_18BE0:
00018AEA 4A28 0001                  		tst.b	1(a0)
00018AEE 6A00 FCCE                  		bpl.w	Obj7A_Delete
00018AF2                            
00018AF2                            loc_18BE8:
00018AF2 6100 ECCA                  		bsr.w	BossMove
00018AF6 6000 FDDC                  		bra.w	loc_189CA
00018AFA                            ; ===========================================================================
00018AFA                            
00018AFA                            Obj7A_FaceMain:				; XREF: Obj7A_Index
00018AFA 7000                       		moveq	#0,d0
00018AFC 7201                       		moveq	#1,d1
00018AFE 2268 0034                  		movea.l	$34(a0),a1
00018B02 1029 0025                  		move.b	$25(a1),d0
00018B06 0C00 0006                  		cmpi.b	#6,d0
00018B0A 6B00                       		bmi.s	loc_18C06
00018B0C 720A                       		moveq	#$A,d1
00018B0E 6000                       		bra.s	loc_18C1A
00018B10                            ; ===========================================================================
00018B10                            
00018B10                            loc_18C06:
00018B10 4A29 0020                  		tst.b	$20(a1)
00018B14 6600                       		bne.s	loc_18C10
00018B16 7205                       		moveq	#5,d1
00018B18 6000                       		bra.s	loc_18C1A
00018B1A                            ; ===========================================================================
00018B1A                            
00018B1A                            loc_18C10:
00018B1A 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
00018B20 6500                       		bcs.s	loc_18C1A
00018B22 7204                       		moveq	#4,d1
00018B24                            
00018B24                            loc_18C1A:
00018B24 1141 001C                  		move.b	d1,$1C(a0)
00018B28 0C00 000A                  		cmpi.b	#$A,d0
00018B2C 6600                       		bne.s	loc_18C32
00018B2E 117C 0006 001C             		move.b	#6,$1C(a0)
00018B34 4A28 0001                  		tst.b	1(a0)
00018B38 6A00 FC84                  		bpl.w	Obj7A_Delete
00018B3C                            
00018B3C                            loc_18C32:
00018B3C 6000                       		bra.s	loc_18C6C
00018B3E                            ; ===========================================================================
00018B3E                            
00018B3E                            Obj7A_FlameMain:			; XREF: Obj7A_Index
00018B3E 117C 0008 001C             		move.b	#8,$1C(a0)
00018B44 2268 0034                  		movea.l	$34(a0),a1
00018B48 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018B4E 6600                       		bne.s	loc_18C56
00018B50 4A28 0001                  		tst.b	1(a0)
00018B54 6A00 FC68                  		bpl.w	Obj7A_Delete
00018B58 117C 000B 001C             		move.b	#$B,$1C(a0)
00018B5E 6000                       		bra.s	loc_18C6C
00018B60                            ; ===========================================================================
00018B60                            
00018B60                            loc_18C56:
00018B60 0C29 0008 0025             		cmpi.b	#8,$25(a1)
00018B66 6E00                       		bgt.s	loc_18C6C
00018B68 0C29 0004 0025             		cmpi.b	#4,$25(a1)
00018B6E 6D00                       		blt.s	loc_18C6C
00018B70 117C 0007 001C             		move.b	#7,$1C(a0)
00018B76                            
00018B76                            loc_18C6C:
00018B76 43F9 0001 7BCE             		lea	(Ani_Eggman).l,a1
00018B7C 4EB9 0000 A6D8             		jsr	AnimateSprite
00018B82                            
00018B82                            loc_18C78:
00018B82 2268 0034                  		movea.l	$34(a0),a1
00018B86 3169 0008 0008             		move.w	8(a1),8(a0)
00018B8C 3169 000C 000C             		move.w	$C(a1),$C(a0)
00018B92 1169 0022 0022             		move.b	$22(a1),$22(a0)
00018B98 7003                       		moveq	#3,d0
00018B9A C028 0022                  		and.b	$22(a0),d0
00018B9E 0228 00FC 0001             		andi.b	#-4,1(a0)
00018BA4 8128 0001                  		or.b	d0,1(a0)
00018BA8 4EF9 0000 D5AC             		jmp	DisplaySprite
00018BAE                            ; ===========================================================================
00018BAE                            
00018BAE                            Obj7A_TubeMain:				; XREF: Obj7A_Index
00018BAE 2268 0034                  		movea.l	$34(a0),a1
00018BB2 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
00018BB8 6600                       		bne.s	loc_18CB8
00018BBA 4A28 0001                  		tst.b	1(a0)
00018BBE 6A00 FBFE                  		bpl.w	Obj7A_Delete
00018BC2                            
00018BC2                            loc_18CB8:
00018BC2 217C 0001 7CE6 0004        		move.l	#Map_BossItems,4(a0)
00018BCA 317C 246C 0002             		move.w	#$246C,2(a0)
00018BD0 117C 0003 001A             		move.b	#3,$1A(a0)
00018BD6 60AA                       		bra.s	loc_18C78
00018BD8                            ; ===========================================================================
00018BD8                            ; ---------------------------------------------------------------------------
00018BD8                            ; Object 7B - exploding	spikeys	that Eggman drops (SLZ)
00018BD8                            ; ---------------------------------------------------------------------------
00018BD8                            
00018BD8                            Obj7B:					; XREF: Obj_Index
00018BD8 7000                       		moveq	#0,d0
00018BDA 1028 0024                  		move.b	$24(a0),d0
00018BDE 303B 0000                  		move.w	Obj7B_Index(pc,d0.w),d0
00018BE2 4EBB 0000                  		jsr	Obj7B_Index(pc,d0.w)
00018BE6 3028 0030                  		move.w	$30(a0),d0
00018BEA 0240 FF80                  		andi.w	#$FF80,d0
00018BEE 3238 F700                  		move.w	($FFFFF700).w,d1
00018BF2 0441 0080                  		subi.w	#$80,d1
00018BF6 0241 FF80                  		andi.w	#$FF80,d1
00018BFA 9041                       		sub.w	d1,d0
00018BFC 6B00 FBC0                  		bmi.w	Obj7A_Delete
00018C00 0C40 0280                  		cmpi.w	#$280,d0
00018C04 6200 FBB8                  		bhi.w	Obj7A_Delete
00018C08 4EF9 0000 D5AC             		jmp	DisplaySprite
00018C0E                            ; ===========================================================================
00018C0E 0000                       Obj7B_Index:	dc.w Obj7B_Main-Obj7B_Index
00018C10 0000                       		dc.w Obj7B_Fall-Obj7B_Index
00018C12 0000                       		dc.w loc_18DC6-Obj7B_Index
00018C14 0000                       		dc.w loc_18EAA-Obj7B_Index
00018C16 0000                       		dc.w Obj7B_Explode-Obj7B_Index
00018C18 0000                       		dc.w Obj7B_MoveFrag-Obj7B_Index
00018C1A                            ; ===========================================================================
00018C1A                            
00018C1A                            Obj7B_Main:				; XREF: Obj7B_Index
00018C1A 217C 0001 196A 0004        		move.l	#Map_obj5Ea,4(a0)
00018C22 317C 0518 0002             		move.w	#$518,2(a0)
00018C28 117C 0001 001A             		move.b	#1,$1A(a0)
00018C2E 0028 0004 0001             		ori.b	#4,1(a0)
00018C34 117C 0004 0018             		move.b	#4,$18(a0)
00018C3A 117C 008B 0020             		move.b	#$8B,$20(a0)
00018C40 117C 000C 0019             		move.b	#$C,$19(a0)
00018C46 2268 003C                  		movea.l	$3C(a0),a1
00018C4A 3169 0008 0030             		move.w	8(a1),$30(a0)
00018C50 3169 000C 0034             		move.w	$C(a1),$34(a0)
00018C56 08E8 0000 0022             		bset	#0,$22(a0)
00018C5C 3028 0008                  		move.w	8(a0),d0
00018C60 B069 0008                  		cmp.w	8(a1),d0
00018C64 6E00                       		bgt.s	loc_18D68
00018C66 08A8 0000 0022             		bclr	#0,$22(a0)
00018C6C 117C 0002 003A             		move.b	#2,$3A(a0)
00018C72                            
00018C72                            loc_18D68:
00018C72 5428 0024                  		addq.b	#2,$24(a0)
00018C76                            
00018C76                            Obj7B_Fall:				; XREF: Obj7B_Index
00018C76 4EB9 0000 D55A             		jsr	ObjectFall
00018C7C 2268 003C                  		movea.l	$3C(a0),a1
00018C80 45F9 0000 0000             		lea	(word_19018).l,a2
00018C86 7000                       		moveq	#0,d0
00018C88 1029 001A                  		move.b	$1A(a1),d0
00018C8C 3228 0008                  		move.w	8(a0),d1
00018C90 9268 0030                  		sub.w	$30(a0),d1
00018C94 6400                       		bcc.s	loc_18D8E
00018C96 5440                       		addq.w	#2,d0
00018C98                            
00018C98                            loc_18D8E:
00018C98 D040                       		add.w	d0,d0
00018C9A 3228 0034                  		move.w	$34(a0),d1
00018C9E D272 0000                  		add.w	(a2,d0.w),d1
00018CA2 B268 000C                  		cmp.w	$C(a0),d1
00018CA6 6E00                       		bgt.s	locret_18DC4
00018CA8 2268 003C                  		movea.l	$3C(a0),a1
00018CAC 7202                       		moveq	#2,d1
00018CAE 0828 0000 0022             		btst	#0,$22(a0)
00018CB4 6700                       		beq.s	loc_18DAE
00018CB6 7200                       		moveq	#0,d1
00018CB8                            
00018CB8                            loc_18DAE:
00018CB8 317C 00F0 0028             		move.w	#$F0,$28(a0)
00018CBE 117C 000A 001F             		move.b	#10,$1F(a0)	; set frame duration to	10 frames
00018CC4 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018CCA 6000 0000                  		bra.w	loc_18FA2
00018CCE                            ; ===========================================================================
00018CCE                            
00018CCE                            locret_18DC4:
00018CCE 4E75                       		rts	
00018CD0                            ; ===========================================================================
00018CD0                            
00018CD0                            loc_18DC6:				; XREF: Obj7B_Index
00018CD0 2268 003C                  		movea.l	$3C(a0),a1
00018CD4 7000                       		moveq	#0,d0
00018CD6 1028 003A                  		move.b	$3A(a0),d0
00018CDA 9029 003A                  		sub.b	$3A(a1),d0
00018CDE 6700                       		beq.s	loc_18E2A
00018CE0 6400                       		bcc.s	loc_18DDA
00018CE2 4400                       		neg.b	d0
00018CE4                            
00018CE4                            loc_18DDA:
00018CE4 323C F7E8                  		move.w	#-$818,d1
00018CE8 343C FEEC                  		move.w	#-$114,d2
00018CEC 0C00 0001                  		cmpi.b	#1,d0
00018CF0 6700                       		beq.s	loc_18E00
00018CF2 323C F6A0                  		move.w	#-$960,d1
00018CF6 343C FF0C                  		move.w	#-$F4,d2
00018CFA 0C69 09C0 0038             		cmpi.w	#$9C0,$38(a1)
00018D00 6D00                       		blt.s	loc_18E00
00018D02 323C F5E0                  		move.w	#-$A20,d1
00018D06 343C FF80                  		move.w	#-$80,d2
00018D0A                            
00018D0A                            loc_18E00:
00018D0A 3141 0012                  		move.w	d1,$12(a0)
00018D0E 3142 0010                  		move.w	d2,$10(a0)
00018D12 3028 0008                  		move.w	8(a0),d0
00018D16 9068 0030                  		sub.w	$30(a0),d0
00018D1A 6400                       		bcc.s	loc_18E16
00018D1C 4468 0010                  		neg.w	$10(a0)
00018D20                            
00018D20                            loc_18E16:
00018D20 117C 0001 001A             		move.b	#1,$1A(a0)
00018D26 317C 0020 0028             		move.w	#$20,$28(a0)
00018D2C 5428 0024                  		addq.b	#2,$24(a0)
00018D30 6000 0000                  		bra.w	loc_18EAA
00018D34                            ; ===========================================================================
00018D34                            
00018D34                            loc_18E2A:				; XREF: loc_18DC6
00018D34 45F9 0000 0000             		lea	(word_19018).l,a2
00018D3A 7000                       		moveq	#0,d0
00018D3C 1029 001A                  		move.b	$1A(a1),d0
00018D40 343C 0028                  		move.w	#$28,d2
00018D44 3228 0008                  		move.w	8(a0),d1
00018D48 9268 0030                  		sub.w	$30(a0),d1
00018D4C 6400                       		bcc.s	loc_18E48
00018D4E 4442                       		neg.w	d2
00018D50 5440                       		addq.w	#2,d0
00018D52                            
00018D52                            loc_18E48:
00018D52 D040                       		add.w	d0,d0
00018D54 3228 0034                  		move.w	$34(a0),d1
00018D58 D272 0000                  		add.w	(a2,d0.w),d1
00018D5C 3141 000C                  		move.w	d1,$C(a0)
00018D60 D468 0030                  		add.w	$30(a0),d2
00018D64 3142 0008                  		move.w	d2,8(a0)
00018D68 4268 000E                  		clr.w	$E(a0)
00018D6C 4268 000A                  		clr.w	$A(a0)
00018D70 5368 0028                  		subq.w	#1,$28(a0)
00018D74 6600                       		bne.s	loc_18E7A
00018D76 317C 0020 0028             		move.w	#$20,$28(a0)
00018D7C 117C 0008 0024             		move.b	#8,$24(a0)
00018D82 4E75                       		rts	
00018D84                            ; ===========================================================================
00018D84                            
00018D84                            loc_18E7A:
00018D84 0C68 0078 0028             		cmpi.w	#$78,$28(a0)
00018D8A 6600                       		bne.s	loc_18E88
00018D8C 117C 0005 001F             		move.b	#5,$1F(a0)
00018D92                            
00018D92                            loc_18E88:
00018D92 0C68 003C 0028             		cmpi.w	#$3C,$28(a0)
00018D98 6600                       		bne.s	loc_18E96
00018D9A 117C 0002 001F             		move.b	#2,$1F(a0)
00018DA0                            
00018DA0                            loc_18E96:
00018DA0 5328 001E                  		subq.b	#1,$1E(a0)
00018DA4 6E00                       		bgt.s	locret_18EA8
00018DA6 0868 0000 001A             		bchg	#0,$1A(a0)
00018DAC 1168 001F 001E             		move.b	$1F(a0),$1E(a0)
00018DB2                            
00018DB2                            locret_18EA8:
00018DB2 4E75                       		rts	
00018DB4                            ; ===========================================================================
00018DB4                            
00018DB4                            loc_18EAA:				; XREF: Obj7B_Index
00018DB4 43F8 D040                  		lea	($FFFFD040).w,a1
00018DB8 707A                       		moveq	#$7A,d0
00018DBA 7240                       		moveq	#$40,d1
00018DBC 743E                       		moveq	#$3E,d2
00018DBE                            
00018DBE                            loc_18EB4:
00018DBE B011                       		cmp.b	(a1),d0
00018DC0 6700                       		beq.s	loc_18EC0
00018DC2 D2C1                       		adda.w	d1,a1
00018DC4 51CA FFF8                  		dbf	d2,loc_18EB4
00018DC8                            
00018DC8 6000                       		bra.s	loc_18F38
00018DCA                            ; ===========================================================================
00018DCA                            
00018DCA                            loc_18EC0:
00018DCA 3029 0008                  		move.w	8(a1),d0
00018DCE 3229 000C                  		move.w	$C(a1),d1
00018DD2 3428 0008                  		move.w	8(a0),d2
00018DD6 3628 000C                  		move.w	$C(a0),d3
00018DDA 45FA 0000                  		lea	byte_19022(pc),a2
00018DDE 47FA 0000                  		lea	byte_19026(pc),a3
00018DE2 181A                       		move.b	(a2)+,d4
00018DE4 4884                       		ext.w	d4
00018DE6 D044                       		add.w	d4,d0
00018DE8 181B                       		move.b	(a3)+,d4
00018DEA 4884                       		ext.w	d4
00018DEC D444                       		add.w	d4,d2
00018DEE B440                       		cmp.w	d0,d2
00018DF0 6500                       		bcs.s	loc_18F38
00018DF2 181A                       		move.b	(a2)+,d4
00018DF4 4884                       		ext.w	d4
00018DF6 D044                       		add.w	d4,d0
00018DF8 181B                       		move.b	(a3)+,d4
00018DFA 4884                       		ext.w	d4
00018DFC D444                       		add.w	d4,d2
00018DFE B042                       		cmp.w	d2,d0
00018E00 6500                       		bcs.s	loc_18F38
00018E02 181A                       		move.b	(a2)+,d4
00018E04 4884                       		ext.w	d4
00018E06 D244                       		add.w	d4,d1
00018E08 181B                       		move.b	(a3)+,d4
00018E0A 4884                       		ext.w	d4
00018E0C D644                       		add.w	d4,d3
00018E0E B641                       		cmp.w	d1,d3
00018E10 6500                       		bcs.s	loc_18F38
00018E12 181A                       		move.b	(a2)+,d4
00018E14 4884                       		ext.w	d4
00018E16 D244                       		add.w	d4,d1
00018E18 181B                       		move.b	(a3)+,d4
00018E1A 4884                       		ext.w	d4
00018E1C D644                       		add.w	d4,d3
00018E1E B243                       		cmp.w	d3,d1
00018E20 6500                       		bcs.s	loc_18F38
00018E22 5428 0024                  		addq.b	#2,$24(a0)
00018E26 4268 0028                  		clr.w	$28(a0)
00018E2A 4229 0020                  		clr.b	$20(a1)
00018E2E 5329 0021                  		subq.b	#1,$21(a1)
00018E32 6600                       		bne.s	loc_18F38
00018E34 08E9 0007 0022             		bset	#7,$22(a1)
00018E3A 4268 0010                  		clr.w	$10(a0)
00018E3E 4268 0012                  		clr.w	$12(a0)
00018E42                            
00018E42                            loc_18F38:
00018E42 4A68 0012                  		tst.w	$12(a0)
00018E46 6A00                       		bpl.s	loc_18F5C
00018E48 4EB9 0000 D55A             		jsr	ObjectFall
00018E4E 3028 0034                  		move.w	$34(a0),d0
00018E52 0440 002F                  		subi.w	#$2F,d0
00018E56 B068 000C                  		cmp.w	$C(a0),d0
00018E5A 6E00                       		bgt.s	loc_18F58
00018E5C 4EB9 0000 D55A             		jsr	ObjectFall
00018E62                            
00018E62                            loc_18F58:
00018E62 6000 FF20                  		bra.w	loc_18E7A
00018E66                            ; ===========================================================================
00018E66                            
00018E66                            loc_18F5C:
00018E66 4EB9 0000 D55A             		jsr	ObjectFall
00018E6C 2268 003C                  		movea.l	$3C(a0),a1
00018E70 45F9 0000 0000             		lea	(word_19018).l,a2
00018E76 7000                       		moveq	#0,d0
00018E78 1029 001A                  		move.b	$1A(a1),d0
00018E7C 3228 0008                  		move.w	8(a0),d1
00018E80 9268 0030                  		sub.w	$30(a0),d1
00018E84 6400                       		bcc.s	loc_18F7E
00018E86 5440                       		addq.w	#2,d0
00018E88                            
00018E88                            loc_18F7E:
00018E88 D040                       		add.w	d0,d0
00018E8A 3228 0034                  		move.w	$34(a0),d1
00018E8E D272 0000                  		add.w	(a2,d0.w),d1
00018E92 B268 000C                  		cmp.w	$C(a0),d1
00018E96 6ECA                       		bgt.s	loc_18F58
00018E98 2268 003C                  		movea.l	$3C(a0),a1
00018E9C 7202                       		moveq	#2,d1
00018E9E 4A68 0010                  		tst.w	$10(a0)
00018EA2 6B00                       		bmi.s	loc_18F9C
00018EA4 7200                       		moveq	#0,d1
00018EA6                            
00018EA6                            loc_18F9C:
00018EA6 317C 0000 0028             		move.w	#0,$28(a0)
00018EAC                            
00018EAC                            loc_18FA2:
00018EAC 1341 003A                  		move.b	d1,$3A(a1)
00018EB0 1141 003A                  		move.b	d1,$3A(a0)
00018EB4 B229 001A                  		cmp.b	$1A(a1),d1
00018EB8 6700                       		beq.s	loc_19008
00018EBA 08A9 0003 0022             		bclr	#3,$22(a1)
00018EC0 6700                       		beq.s	loc_19008
00018EC2 4229 0025                  		clr.b	$25(a1)
00018EC6 137C 0002 0024             		move.b	#2,$24(a1)
00018ECC 45F8 D000                  		lea	($FFFFD000).w,a2
00018ED0 3568 0012 0012             		move.w	$12(a0),$12(a2)
00018ED6 446A 0012                  		neg.w	$12(a2)
00018EDA 0C29 0001 001A             		cmpi.b	#1,$1A(a1)
00018EE0 6600                       		bne.s	loc_18FDC
00018EE2 E0EA 0012                  		asr	$12(a2)
00018EE6                            
00018EE6                            loc_18FDC:
00018EE6 08EA 0001 0022             		bset	#1,$22(a2)
00018EEC 08AA 0003 0022             		bclr	#3,$22(a2)
00018EF2 422A 003C                  		clr.b	$3C(a2)
00018EF6 2F08                       		move.l	a0,-(sp)
00018EF8 41D2                       		lea	(a2),a0
00018EFA 4EBA A40E                  		jsr	Obj01_ChkRoll
00018EFE 205F                       		movea.l	(sp)+,a0
00018F00 157C 0002 0024             		move.b	#2,$24(a2)
00018F06 303C 00CC                  		move.w	#$CC,d0
00018F0A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "spring" sound
00018F10                            
00018F10                            loc_19008:
00018F10 4268 0010                  		clr.w	$10(a0)
00018F14 4268 0012                  		clr.w	$12(a0)
00018F18 5428 0024                  		addq.b	#2,$24(a0)
00018F1C 6000 FE66                  		bra.w	loc_18E7A
00018F20                            ; ===========================================================================
00018F20 FFF8 FFE4 FFD1 FFE4 FFF8   word_19018:	dc.w $FFF8, $FFE4, $FFD1, $FFE4, $FFF8
00018F2A                            		even
00018F2A E830 E830                  byte_19022:	dc.b $E8, $30, $E8, $30
00018F2E                            		even
00018F2E 08F0 08F0                  byte_19026:	dc.b 8,	$F0, 8,	$F0
00018F32                            		even
00018F32                            ; ===========================================================================
00018F32                            
00018F32                            Obj7B_Explode:				; XREF: Obj7B_Index
00018F32 10BC 003F                  		move.b	#$3F,(a0)
00018F36 4228 0024                  		clr.b	$24(a0)
00018F3A 0C68 0020 0028             		cmpi.w	#$20,$28(a0)
00018F40 6700                       		beq.s	Obj7B_MakeFrag
00018F42 4E75                       		rts	
00018F44                            ; ===========================================================================
00018F44                            
00018F44                            Obj7B_MakeFrag:
00018F44 3168 0034 000C             		move.w	$34(a0),$C(a0)
00018F4A 7203                       		moveq	#3,d1
00018F4C 45FA 0000                  		lea	Obj7B_FragSpeed(pc),a2
00018F50                            
00018F50                            Obj7B_Loop:
00018F50 4EB9 0000 DA32             		jsr	SingleObjLoad
00018F56 6600                       		bne.s	loc_1909A
00018F58 12BC 007B                  		move.b	#$7B,(a1)	; load shrapnel	object
00018F5C 137C 000A 0024             		move.b	#$A,$24(a1)
00018F62 237C 0000 0000 0004        		move.l	#Map_obj7B,4(a1)
00018F6A 137C 0003 0018             		move.b	#3,$18(a1)
00018F70 337C 0518 0002             		move.w	#$518,2(a1)
00018F76 3368 0008 0008             		move.w	8(a0),8(a1)
00018F7C 3368 000C 000C             		move.w	$C(a0),$C(a1)
00018F82 335A 0010                  		move.w	(a2)+,$10(a1)
00018F86 335A 0012                  		move.w	(a2)+,$12(a1)
00018F8A 137C 0098 0020             		move.b	#$98,$20(a1)
00018F90 0029 0004 0001             		ori.b	#4,1(a1)
00018F96 08E9 0007 0001             		bset	#7,1(a1)
00018F9C 137C 000C 0019             		move.b	#$C,$19(a1)
00018FA2                            
00018FA2                            loc_1909A:
00018FA2 51C9 FFAC                  		dbf	d1,Obj7B_Loop	; repeat sequence 3 more times
00018FA6                            
00018FA6 4E75                       		rts	
00018FA8                            ; ===========================================================================
00018FA8 FF00 FCC0                  Obj7B_FragSpeed:dc.w $FF00, $FCC0	; horizontal, vertical
00018FAC FF60 FDC0                  		dc.w $FF60, $FDC0
00018FB0 0100 FCC0                  		dc.w $100, $FCC0
00018FB4 00A0 FDC0                  		dc.w $A0, $FDC0
00018FB8                            ; ===========================================================================
00018FB8                            
00018FB8                            Obj7B_MoveFrag:				; XREF: Obj7B_Index
00018FB8 4EB9 0000 D586             		jsr	SpeedToPos
00018FBE 3168 0008 0030             		move.w	8(a0),$30(a0)
00018FC4 3168 000C 0034             		move.w	$C(a0),$34(a0)
00018FCA 0668 0018 0012             		addi.w	#$18,$12(a0)
00018FD0 7004                       		moveq	#4,d0
00018FD2 C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00018FD6 E448                       		lsr.w	#2,d0
00018FD8 1140 001A                  		move.b	d0,$1A(a0)
00018FDC 4A28 0001                  		tst.b	1(a0)
00018FE0 6A00 F7DC                  		bpl.w	Obj7A_Delete
00018FE4 4E75                       		rts	
00018FE6                            ; ===========================================================================
00018FE6                            ; ---------------------------------------------------------------------------
00018FE6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00018FE6                            ; ---------------------------------------------------------------------------
00018FE6                            Map_obj7B:
00018FE6                            	include "_maps\obj7B.asm"
00018FE6                            ; ---------------------------------------------------------------------------
00018FE6                            ; Sprite mappings - exploding spikeys that the SLZ boss	drops
00018FE6                            ; ---------------------------------------------------------------------------
00018FE6 0000                       		dc.w byte_190E2-Map_obj7B
00018FE8 0000                       		dc.w byte_190E8-Map_obj7B
00018FEA 01                         byte_190E2:	dc.b 1
00018FEB FC00 0027 FC               		dc.b $FC, 0, 0,	$27, $FC
00018FF0 01                         byte_190E8:	dc.b 1
00018FF1 FC00 0028 FC               		dc.b $FC, 0, 0,	$28, $FC
00018FF6                            		even
00018FF6                            		even
00018FF6                            
00018FF6                            ; ===========================================================================
00018FF6                            ; ---------------------------------------------------------------------------
00018FF6                            ; Object 75 - Eggman (SYZ)
00018FF6                            ; ---------------------------------------------------------------------------
00018FF6                            
00018FF6                            Obj75:					; XREF: Obj_Index
00018FF6 7000                       		moveq	#0,d0
00018FF8 1028 0024                  		move.b	$24(a0),d0
00018FFC 323B 0000                  		move.w	Obj75_Index(pc,d0.w),d1
00019000 4EFB 1000                  		jmp	Obj75_Index(pc,d1.w)
00019004                            ; ===========================================================================
00019004 0000                       Obj75_Index:	dc.w Obj75_Main-Obj75_Index
00019006 0000                       		dc.w Obj75_ShipMain-Obj75_Index
00019008 0000                       		dc.w Obj75_FaceMain-Obj75_Index
0001900A 0000                       		dc.w Obj75_FlameMain-Obj75_Index
0001900C 0000                       		dc.w Obj75_SpikeMain-Obj75_Index
0001900E                            
0001900E 0200 05                    Obj75_ObjData:	dc.b 2,	0, 5		; routine number, animation, priority
00019011 0401 05                    		dc.b 4,	1, 5
00019014 0607 05                    		dc.b 6,	7, 5
00019017 0800 05                    		dc.b 8,	0, 5
0001901A                            ; ===========================================================================
0001901A                            
0001901A                            Obj75_Main:				; XREF: Obj75_Index
0001901A 317C 2DB0 0008             		move.w	#$2DB0,8(a0)
00019020 317C 04DA 000C             		move.w	#$4DA,$C(a0)
00019026 3168 0008 0030             		move.w	8(a0),$30(a0)
0001902C 3168 000C 0038             		move.w	$C(a0),$38(a0)
00019032 117C 000F 0020             		move.b	#$F,$20(a0)
00019038 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
0001903E 45FA FFCE                  		lea	Obj75_ObjData(pc),a2
00019042 2248                       		movea.l	a0,a1
00019044 7203                       		moveq	#3,d1
00019046 6000                       		bra.s	Obj75_LoadBoss
00019048                            ; ===========================================================================
00019048                            
00019048                            Obj75_Loop:
00019048 4EB9 0000 DA48             		jsr	SingleObjLoad2
0001904E 6600                       		bne.s	Obj75_ShipMain
00019050 12BC 0075                  		move.b	#$75,(a1)
00019054 3368 0008 0008             		move.w	8(a0),8(a1)
0001905A 3368 000C 000C             		move.w	$C(a0),$C(a1)
00019060                            
00019060                            Obj75_LoadBoss:				; XREF: Obj75_Main
00019060 08A8 0000 0022             		bclr	#0,$22(a0)
00019066 4229 0025                  		clr.b	$25(a1)
0001906A 135A 0024                  		move.b	(a2)+,$24(a1)
0001906E 135A 001C                  		move.b	(a2)+,$1C(a1)
00019072 135A 0018                  		move.b	(a2)+,$18(a1)
00019076 237C 0001 7C1E 0004        		move.l	#Map_Eggman,4(a1)
0001907E 337C 0400 0002             		move.w	#$400,2(a1)
00019084 137C 0004 0001             		move.b	#4,1(a1)
0001908A 137C 0020 0019             		move.b	#$20,$19(a1)
00019090 2348 0034                  		move.l	a0,$34(a1)
00019094 51C9 FFB2                  		dbf	d1,Obj75_Loop	; repeat sequence 3 more times
00019098                            
00019098                            Obj75_ShipMain:				; XREF: Obj75_Index
00019098 7000                       		moveq	#0,d0
0001909A 1028 0025                  		move.b	$25(a0),d0
0001909E 323B 0000                  		move.w	Obj75_ShipIndex(pc,d0.w),d1
000190A2 4EBB 1000                  		jsr	Obj75_ShipIndex(pc,d1.w)
000190A6 43F9 0001 7BCE             		lea	(Ani_Eggman).l,a1
000190AC 4EB9 0000 A6D8             		jsr	AnimateSprite
000190B2 7003                       		moveq	#3,d0
000190B4 C028 0022                  		and.b	$22(a0),d0
000190B8 0228 00FC 0001             		andi.b	#$FC,1(a0)
000190BE 8128 0001                  		or.b	d0,1(a0)
000190C2 4EF9 0000 D5AC             		jmp	DisplaySprite
000190C8                            ; ===========================================================================
000190C8 0000 0000                  Obj75_ShipIndex:dc.w loc_191CC-Obj75_ShipIndex,	loc_19270-Obj75_ShipIndex
000190CC 0000 0000                  		dc.w loc_192EC-Obj75_ShipIndex,	loc_19474-Obj75_ShipIndex
000190D0 0000 0000                  		dc.w loc_194AC-Obj75_ShipIndex,	loc_194F2-Obj75_ShipIndex
000190D4                            ; ===========================================================================
000190D4                            
000190D4                            loc_191CC:				; XREF: Obj75_ShipIndex
000190D4 317C FF00 0010             		move.w	#-$100,$10(a0)
000190DA 0C68 2D38 0030             		cmpi.w	#$2D38,$30(a0)
000190E0 6400                       		bcc.s	loc_191DE
000190E2 5428 0025                  		addq.b	#2,$25(a0)
000190E6                            
000190E6                            loc_191DE:
000190E6 1028 003F                  		move.b	$3F(a0),d0
000190EA 5428 003F                  		addq.b	#2,$3F(a0)
000190EE 4EB9 0000 29DA             		jsr	(CalcSine).l
000190F4 E440                       		asr.w	#2,d0
000190F6 3140 0012                  		move.w	d0,$12(a0)
000190FA                            
000190FA                            loc_191F2:
000190FA 6100 E6C2                  		bsr.w	BossMove
000190FE 3168 0038 000C             		move.w	$38(a0),$C(a0)
00019104 3168 0030 0008             		move.w	$30(a0),8(a0)
0001910A                            
0001910A                            loc_19202:
0001910A 3028 0008                  		move.w	8(a0),d0
0001910E 0440 2C00                  		subi.w	#$2C00,d0
00019112 EA48                       		lsr.w	#5,d0
00019114 1140 0034                  		move.b	d0,$34(a0)
00019118 0C28 0006 0025             		cmpi.b	#6,$25(a0)
0001911E 6400                       		bcc.s	locret_19256
00019120 4A28 0022                  		tst.b	$22(a0)
00019124 6B00                       		bmi.s	loc_19258
00019126 4A28 0020                  		tst.b	$20(a0)
0001912A 6600                       		bne.s	locret_19256
0001912C 4A28 003E                  		tst.b	$3E(a0)
00019130 6600                       		bne.s	loc_1923A
00019132 117C 0020 003E             		move.b	#$20,$3E(a0)
00019138 303C 00AC                  		move.w	#$AC,d0
0001913C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019142                            
00019142                            loc_1923A:
00019142 43F8 FB22                  		lea	($FFFFFB22).w,a1
00019146 7000                       		moveq	#0,d0
00019148 4A51                       		tst.w	(a1)
0001914A 6600                       		bne.s	loc_19248
0001914C 303C 0EEE                  		move.w	#$EEE,d0
00019150                            
00019150                            loc_19248:
00019150 3280                       		move.w	d0,(a1)
00019152 5328 003E                  		subq.b	#1,$3E(a0)
00019156 6600                       		bne.s	locret_19256
00019158 117C 000F 0020             		move.b	#$F,$20(a0)
0001915E                            
0001915E                            locret_19256:
0001915E 4E75                       		rts	
00019160                            ; ===========================================================================
00019160                            
00019160                            loc_19258:				; XREF: loc_19202
00019160 7064                       		moveq	#100,d0
00019162 6100 0000                  		bsr.w	AddPoints
00019166 117C 0006 0025             		move.b	#6,$25(a0)
0001916C 317C 00B4 003C             		move.w	#$B4,$3C(a0)
00019172 4268 0010                  		clr.w	$10(a0)
00019176 4E75                       		rts	
00019178                            ; ===========================================================================
00019178                            
00019178                            loc_19270:				; XREF: Obj75_ShipIndex
00019178 3028 0030                  		move.w	$30(a0),d0
0001917C 317C 0140 0010             		move.w	#$140,$10(a0)
00019182 0828 0000 0022             		btst	#0,$22(a0)
00019188 6600                       		bne.s	loc_1928E
0001918A 4468 0010                  		neg.w	$10(a0)
0001918E 0C40 2C08                  		cmpi.w	#$2C08,d0
00019192 6E00                       		bgt.s	loc_1929E
00019194 6000                       		bra.s	loc_19294
00019196                            ; ===========================================================================
00019196                            
00019196                            loc_1928E:
00019196 0C40 2D38                  		cmpi.w	#$2D38,d0
0001919A 6D00                       		blt.s	loc_1929E
0001919C                            
0001919C                            loc_19294:
0001919C 0868 0000 0022             		bchg	#0,$22(a0)
000191A2 4228 003D                  		clr.b	$3D(a0)
000191A6                            
000191A6                            loc_1929E:
000191A6 0440 2C10                  		subi.w	#$2C10,d0
000191AA 0240 001F                  		andi.w	#$1F,d0
000191AE 0440 001F                  		subi.w	#$1F,d0
000191B2 6A00                       		bpl.s	loc_192AE
000191B4 4440                       		neg.w	d0
000191B6                            
000191B6                            loc_192AE:
000191B6 5340                       		subq.w	#1,d0
000191B8 6E00                       		bgt.s	loc_192E8
000191BA 4A28 003D                  		tst.b	$3D(a0)
000191BE 6600                       		bne.s	loc_192E8
000191C0 3238 D008                  		move.w	($FFFFD008).w,d1
000191C4 0441 2C00                  		subi.w	#$2C00,d1
000191C8 EA41                       		asr.w	#5,d1
000191CA B228 0034                  		cmp.b	$34(a0),d1
000191CE 6600                       		bne.s	loc_192E8
000191D0 7000                       		moveq	#0,d0
000191D2 1028 0034                  		move.b	$34(a0),d0
000191D6 EB40                       		asl.w	#5,d0
000191D8 0640 2C10                  		addi.w	#$2C10,d0
000191DC 3140 0030                  		move.w	d0,$30(a0)
000191E0 6100 0000                  		bsr.w	Obj75_FindBlocks
000191E4 5428 0025                  		addq.b	#2,$25(a0)
000191E8 4268 0028                  		clr.w	$28(a0)
000191EC 4268 0010                  		clr.w	$10(a0)
000191F0                            
000191F0                            loc_192E8:
000191F0 6000 FEF4                  		bra.w	loc_191DE
000191F4                            ; ===========================================================================
000191F4                            
000191F4                            loc_192EC:				; XREF: Obj75_ShipIndex
000191F4 7000                       		moveq	#0,d0
000191F6 1028 0028                  		move.b	$28(a0),d0
000191FA 303B 0000                  		move.w	off_192FA(pc,d0.w),d0
000191FE 4EFB 0000                  		jmp	off_192FA(pc,d0.w)
00019202                            ; ===========================================================================
00019202 0000                       off_192FA:	dc.w loc_19302-off_192FA
00019204 0000                       		dc.w loc_19348-off_192FA
00019206 0000                       		dc.w loc_1938E-off_192FA
00019208 0000                       		dc.w loc_193D0-off_192FA
0001920A                            ; ===========================================================================
0001920A                            
0001920A                            loc_19302:				; XREF: off_192FA
0001920A 317C 0180 0012             		move.w	#$180,$12(a0)
00019210 3028 0038                  		move.w	$38(a0),d0
00019214 0C40 0556                  		cmpi.w	#$556,d0
00019218 6500                       		bcs.s	loc_19344
0001921A 317C 0556 0038             		move.w	#$556,$38(a0)
00019220 4268 003C                  		clr.w	$3C(a0)
00019224 70FF                       		moveq	#-1,d0
00019226 3028 0036                  		move.w	$36(a0),d0
0001922A 6700                       		beq.s	loc_1933C
0001922C 2240                       		movea.l	d0,a1
0001922E 137C 00FF 0029             		move.b	#-1,$29(a1)
00019234 117C 00FF 0029             		move.b	#-1,$29(a0)
0001923A 2348 0034                  		move.l	a0,$34(a1)
0001923E 317C 0032 003C             		move.w	#$32,$3C(a0)
00019244                            
00019244                            loc_1933C:
00019244 4268 0012                  		clr.w	$12(a0)
00019248 5428 0028                  		addq.b	#2,$28(a0)
0001924C                            
0001924C                            loc_19344:
0001924C 6000 FEAC                  		bra.w	loc_191F2
00019250                            ; ===========================================================================
00019250                            
00019250                            loc_19348:				; XREF: off_192FA
00019250 5368 003C                  		subq.w	#1,$3C(a0)
00019254 6A00                       		bpl.s	loc_19366
00019256 5428 0028                  		addq.b	#2,$28(a0)
0001925A 317C F800 0012             		move.w	#-$800,$12(a0)
00019260 4A68 0036                  		tst.w	$36(a0)
00019264 6600                       		bne.s	loc_19362
00019266 E0E8 0012                  		asr	$12(a0)
0001926A                            
0001926A                            loc_19362:
0001926A 7000                       		moveq	#0,d0
0001926C 6000                       		bra.s	loc_1937C
0001926E                            ; ===========================================================================
0001926E                            
0001926E                            loc_19366:
0001926E 7000                       		moveq	#0,d0
00019270 0C68 001E 003C             		cmpi.w	#$1E,$3C(a0)
00019276 6E00                       		bgt.s	loc_1937C
00019278 7002                       		moveq	#2,d0
0001927A 0828 0001 003D             		btst	#1,$3D(a0)
00019280 6700                       		beq.s	loc_1937C
00019282 4440                       		neg.w	d0
00019284                            
00019284                            loc_1937C:
00019284 D068 0038                  		add.w	$38(a0),d0
00019288 3140 000C                  		move.w	d0,$C(a0)
0001928C 3168 0030 0008             		move.w	$30(a0),8(a0)
00019292 6000 FE76                  		bra.w	loc_19202
00019296                            ; ===========================================================================
00019296                            
00019296                            loc_1938E:				; XREF: off_192FA
00019296 303C 04DA                  		move.w	#$4DA,d0
0001929A 4A68 0036                  		tst.w	$36(a0)
0001929E 6700                       		beq.s	loc_1939C
000192A0 0440 0018                  		subi.w	#$18,d0
000192A4                            
000192A4                            loc_1939C:
000192A4 B068 0038                  		cmp.w	$38(a0),d0
000192A8 6D00                       		blt.s	loc_193BE
000192AA 317C 0008 003C             		move.w	#8,$3C(a0)
000192B0 4A68 0036                  		tst.w	$36(a0)
000192B4 6700                       		beq.s	loc_193B4
000192B6 317C 002D 003C             		move.w	#$2D,$3C(a0)
000192BC                            
000192BC                            loc_193B4:
000192BC 5428 0028                  		addq.b	#2,$28(a0)
000192C0 4268 0012                  		clr.w	$12(a0)
000192C4 6000                       		bra.s	loc_193CC
000192C6                            ; ===========================================================================
000192C6                            
000192C6                            loc_193BE:
000192C6 0C68 FFC0 0012             		cmpi.w	#-$40,$12(a0)
000192CC 6C00                       		bge.s	loc_193CC
000192CE 0668 000C 0012             		addi.w	#$C,$12(a0)
000192D4                            
000192D4                            loc_193CC:
000192D4 6000 FE24                  		bra.w	loc_191F2
000192D8                            ; ===========================================================================
000192D8                            
000192D8                            loc_193D0:				; XREF: off_192FA
000192D8 5368 003C                  		subq.w	#1,$3C(a0)
000192DC 6E00                       		bgt.s	loc_19406
000192DE 6B00                       		bmi.s	loc_193EE
000192E0 70FF                       		moveq	#-1,d0
000192E2 3028 0036                  		move.w	$36(a0),d0
000192E6 6700                       		beq.s	loc_193E8
000192E8 2240                       		movea.l	d0,a1
000192EA 137C 000A 0029             		move.b	#$A,$29(a1)
000192F0                            
000192F0                            loc_193E8:
000192F0 4268 0036                  		clr.w	$36(a0)
000192F4 6000                       		bra.s	loc_19406
000192F6                            ; ===========================================================================
000192F6                            
000192F6                            loc_193EE:
000192F6 0C68 FFE2 003C             		cmpi.w	#-$1E,$3C(a0)
000192FC 6600                       		bne.s	loc_19406
000192FE 4228 0029                  		clr.b	$29(a0)
00019302 5528 0025                  		subq.b	#2,$25(a0)
00019306 117C 00FF 003D             		move.b	#-1,$3D(a0)
0001930C 6000                       		bra.s	loc_19446
0001930E                            ; ===========================================================================
0001930E                            
0001930E                            loc_19406:
0001930E 7001                       		moveq	#1,d0
00019310 4A68 0036                  		tst.w	$36(a0)
00019314 6700                       		beq.s	loc_19410
00019316 7002                       		moveq	#2,d0
00019318                            
00019318                            loc_19410:
00019318 0C68 04DA 0038             		cmpi.w	#$4DA,$38(a0)
0001931E 6700                       		beq.s	loc_19424
00019320 6D00                       		blt.s	loc_1941C
00019322 4440                       		neg.w	d0
00019324                            
00019324                            loc_1941C:
00019324 4A68 0036                  		tst.w	$36(a0)
00019328 D168 0038                  		add.w	d0,$38(a0)
0001932C                            
0001932C                            loc_19424:
0001932C 7000                       		moveq	#0,d0
0001932E 4A68 0036                  		tst.w	$36(a0)
00019332 6700                       		beq.s	loc_19438
00019334 7002                       		moveq	#2,d0
00019336 0828 0000 003D             		btst	#0,$3D(a0)
0001933C 6700                       		beq.s	loc_19438
0001933E 4440                       		neg.w	d0
00019340                            
00019340                            loc_19438:
00019340 D068 0038                  		add.w	$38(a0),d0
00019344 3140 000C                  		move.w	d0,$C(a0)
00019348 3168 0030 0008             		move.w	$30(a0),8(a0)
0001934E                            
0001934E                            loc_19446:
0001934E 6000 FDBA                  		bra.w	loc_19202
00019352                            
00019352                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019352                            
00019352                            
00019352                            Obj75_FindBlocks:			; XREF: loc_192AE
00019352 4268 0036                  		clr.w	$36(a0)
00019356 43F8 D040                  		lea	($FFFFD040).w,a1
0001935A 703E                       		moveq	#$3E,d0
0001935C 7276                       		moveq	#$76,d1
0001935E 1428 0034                  		move.b	$34(a0),d2
00019362                            
00019362                            Obj75_FindLoop:
00019362 B211                       		cmp.b	(a1),d1		; is object a SYZ boss block?
00019364 6600                       		bne.s	loc_1946A	; if not, branch
00019366 B429 0028                  		cmp.b	$28(a1),d2
0001936A 6600                       		bne.s	loc_1946A
0001936C 3149 0036                  		move.w	a1,$36(a0)
00019370 6000                       		bra.s	locret_19472
00019372                            ; ===========================================================================
00019372                            
00019372                            loc_1946A:
00019372 43E9 0040                  		lea	$40(a1),a1	; next object RAM entry
00019376 51C8 FFEA                  		dbf	d0,Obj75_FindLoop
0001937A                            
0001937A                            locret_19472:
0001937A 4E75                       		rts	
0001937C                            ; End of function Obj75_FindBlocks
0001937C                            
0001937C                            ; ===========================================================================
0001937C                            
0001937C                            loc_19474:				; XREF: Obj75_ShipIndex
0001937C 5368 003C                  		subq.w	#1,$3C(a0)
00019380 6B00                       		bmi.s	loc_1947E
00019382 6000 E3F8                  		bra.w	BossDefeated
00019386                            ; ===========================================================================
00019386                            
00019386                            loc_1947E:
00019386 5428 0025                  		addq.b	#2,$25(a0)
0001938A 4268 0012                  		clr.w	$12(a0)
0001938E 08E8 0000 0022             		bset	#0,$22(a0)
00019394 08A8 0007 0022             		bclr	#7,$22(a0)
0001939A 4268 0010                  		clr.w	$10(a0)
0001939E 317C FFFF 003C             		move.w	#-1,$3C(a0)
000193A4 4A38 F7A7                  		tst.b	($FFFFF7A7).w
000193A8 6600                       		bne.s	loc_194A8
000193AA 11FC 0001 F7A7             		move.b	#1,($FFFFF7A7).w
000193B0                            
000193B0                            loc_194A8:
000193B0 6000 FD58                  		bra.w	loc_19202
000193B4                            ; ===========================================================================
000193B4                            
000193B4                            loc_194AC:				; XREF: Obj75_ShipIndex
000193B4 5268 003C                  		addq.w	#1,$3C(a0)
000193B8 6700                       		beq.s	loc_194BC
000193BA 6A00                       		bpl.s	loc_194C2
000193BC 0668 0018 0012             		addi.w	#$18,$12(a0)
000193C2 6000                       		bra.s	loc_194EE
000193C4                            ; ===========================================================================
000193C4                            
000193C4                            loc_194BC:
000193C4 4268 0012                  		clr.w	$12(a0)
000193C8 6000                       		bra.s	loc_194EE
000193CA                            ; ===========================================================================
000193CA                            
000193CA                            loc_194C2:
000193CA 0C68 0020 003C             		cmpi.w	#$20,$3C(a0)
000193D0 6500                       		bcs.s	loc_194DA
000193D2 6700                       		beq.s	loc_194E0
000193D4 0C68 002A 003C             		cmpi.w	#$2A,$3C(a0)
000193DA 6500                       		bcs.s	loc_194EE
000193DC 5428 0025                  		addq.b	#2,$25(a0)
000193E0 6000                       		bra.s	loc_194EE
000193E2                            ; ===========================================================================
000193E2                            
000193E2                            loc_194DA:
000193E2 5168 0012                  		subq.w	#8,$12(a0)
000193E6 6000                       		bra.s	loc_194EE
000193E8                            ; ===========================================================================
000193E8                            
000193E8                            loc_194E0:
000193E8 4268 0012                  		clr.w	$12(a0)
000193EC 303C 0085                  		move.w	#$85,d0
000193F0 4EB9 0000 1396             		jsr	(PlaySound).l	; play SYZ music
000193F6                            
000193F6                            loc_194EE:
000193F6 6000 FD02                  		bra.w	loc_191F2
000193FA                            ; ===========================================================================
000193FA                            
000193FA                            loc_194F2:				; XREF: Obj75_ShipIndex
000193FA 317C 0400 0010             		move.w	#$400,$10(a0)
00019400 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019406 0C78 2D40 F72A             		cmpi.w	#$2D40,($FFFFF72A).w
0001940C 6400                       		bcc.s	loc_1950C
0001940E 5478 F72A                  		addq.w	#2,($FFFFF72A).w
00019412 6000                       		bra.s	loc_19512
00019414                            ; ===========================================================================
00019414                            
00019414                            loc_1950C:
00019414 4A28 0001                  		tst.b	1(a0)
00019418 6A00                       		bpl.s	Obj75_ShipDelete
0001941A                            
0001941A                            loc_19512:
0001941A 6100 E3A2                  		bsr.w	BossMove
0001941E 6000 FCC6                  		bra.w	loc_191DE
00019422                            ; ===========================================================================
00019422                            
00019422                            Obj75_ShipDelete:
00019422 4EF9 0000 D5E8             		jmp	DeleteObject
00019428                            ; ===========================================================================
00019428                            
00019428                            Obj75_FaceMain:				; XREF: Obj75_Index
00019428 7201                       		moveq	#1,d1
0001942A 2268 0034                  		movea.l	$34(a0),a1
0001942E 7000                       		moveq	#0,d0
00019430 1029 0025                  		move.b	$25(a1),d0
00019434 303B 0000                  		move.w	off_19546(pc,d0.w),d0
00019438 4EBB 0000                  		jsr	off_19546(pc,d0.w)
0001943C 1141 001C                  		move.b	d1,$1C(a0)
00019440 1010                       		move.b	(a0),d0
00019442 B011                       		cmp.b	(a1),d0
00019444 6600                       		bne.s	Obj75_FaceDelete
00019446 6000                       		bra.s	loc_195BE
00019448                            ; ===========================================================================
00019448                            
00019448                            Obj75_FaceDelete:
00019448 4EF9 0000 D5E8             		jmp	DeleteObject
0001944E                            ; ===========================================================================
0001944E 0000 0000                  off_19546:	dc.w loc_19574-off_19546, loc_19574-off_19546
00019452 0000 0000                  		dc.w loc_1955A-off_19546, loc_19552-off_19546
00019456 0000 0000                  		dc.w loc_19552-off_19546, loc_19556-off_19546
0001945A                            ; ===========================================================================
0001945A                            
0001945A                            loc_19552:				; XREF: off_19546
0001945A 720A                       		moveq	#$A,d1
0001945C 4E75                       		rts	
0001945E                            ; ===========================================================================
0001945E                            
0001945E                            loc_19556:				; XREF: off_19546
0001945E 7206                       		moveq	#6,d1
00019460 4E75                       		rts	
00019462                            ; ===========================================================================
00019462                            
00019462                            loc_1955A:				; XREF: off_19546
00019462 7000                       		moveq	#0,d0
00019464 1029 0028                  		move.b	$28(a1),d0
00019468 303B 0000                  		move.w	off_19568(pc,d0.w),d0
0001946C 4EFB 0000                  		jmp	off_19568(pc,d0.w)
00019470                            ; ===========================================================================
00019470 0000 0000                  off_19568:	dc.w loc_19570-off_19568, loc_19572-off_19568
00019474 0000 0000                  		dc.w loc_19570-off_19568, loc_19570-off_19568
00019478                            ; ===========================================================================
00019478                            
00019478                            loc_19570:				; XREF: off_19568
00019478 6000                       		bra.s	loc_19574
0001947A                            ; ===========================================================================
0001947A                            
0001947A                            loc_19572:				; XREF: off_19568
0001947A 7206                       		moveq	#6,d1
0001947C                            
0001947C                            loc_19574:				; XREF: off_19546
0001947C 4A29 0020                  		tst.b	$20(a1)
00019480 6600                       		bne.s	loc_1957E
00019482 7205                       		moveq	#5,d1
00019484 4E75                       		rts	
00019486                            ; ===========================================================================
00019486                            
00019486                            loc_1957E:
00019486 0C38 0004 D024             		cmpi.b	#4,($FFFFD024).w
0001948C 6500                       		bcs.s	locret_19588
0001948E 7204                       		moveq	#4,d1
00019490                            
00019490                            locret_19588:
00019490 4E75                       		rts	
00019492                            ; ===========================================================================
00019492                            
00019492                            Obj75_FlameMain:			; XREF: Obj75_Index
00019492 117C 0007 001C             		move.b	#7,$1C(a0)
00019498 2268 0034                  		movea.l	$34(a0),a1
0001949C 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
000194A2 6600                       		bne.s	loc_195AA
000194A4 117C 000B 001C             		move.b	#$B,$1C(a0)
000194AA 4A28 0001                  		tst.b	1(a0)
000194AE 6A00                       		bpl.s	Obj75_FlameDelete
000194B0 6000                       		bra.s	loc_195B6
000194B2                            ; ===========================================================================
000194B2                            
000194B2                            loc_195AA:
000194B2 4A69 0010                  		tst.w	$10(a1)
000194B6 6700                       		beq.s	loc_195B6
000194B8 117C 0008 001C             		move.b	#8,$1C(a0)
000194BE                            
000194BE                            loc_195B6:
000194BE 6000                       		bra.s	loc_195BE
000194C0                            ; ===========================================================================
000194C0                            
000194C0                            Obj75_FlameDelete:
000194C0 4EF9 0000 D5E8             		jmp	DeleteObject
000194C6                            ; ===========================================================================
000194C6                            
000194C6                            loc_195BE:
000194C6 43F9 0001 7BCE             		lea	(Ani_Eggman).l,a1
000194CC 4EB9 0000 A6D8             		jsr	AnimateSprite
000194D2 2268 0034                  		movea.l	$34(a0),a1
000194D6 3169 0008 0008             		move.w	8(a1),8(a0)
000194DC 3169 000C 000C             		move.w	$C(a1),$C(a0)
000194E2                            
000194E2                            loc_195DA:
000194E2 1169 0022 0022             		move.b	$22(a1),$22(a0)
000194E8 7003                       		moveq	#3,d0
000194EA C028 0022                  		and.b	$22(a0),d0
000194EE 0228 00FC 0001             		andi.b	#$FC,1(a0)
000194F4 8128 0001                  		or.b	d0,1(a0)
000194F8 4EF9 0000 D5AC             		jmp	DisplaySprite
000194FE                            ; ===========================================================================
000194FE                            
000194FE                            Obj75_SpikeMain:			; XREF: Obj75_Index
000194FE 217C 0001 7CE6 0004        		move.l	#Map_BossItems,4(a0)
00019506 317C 246C 0002             		move.w	#$246C,2(a0)
0001950C 117C 0005 001A             		move.b	#5,$1A(a0)
00019512 2268 0034                  		movea.l	$34(a0),a1
00019516 0C29 000A 0025             		cmpi.b	#$A,$25(a1)
0001951C 6600                       		bne.s	loc_1961C
0001951E 4A28 0001                  		tst.b	1(a0)
00019522 6A00                       		bpl.s	Obj75_SpikeDelete
00019524                            
00019524                            loc_1961C:
00019524 3169 0008 0008             		move.w	8(a1),8(a0)
0001952A 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019530 3028 003C                  		move.w	$3C(a0),d0
00019534 0C29 0004 0025             		cmpi.b	#4,$25(a1)
0001953A 6600                       		bne.s	loc_19652
0001953C 0C29 0006 0028             		cmpi.b	#6,$28(a1)
00019542 6700                       		beq.s	loc_1964C
00019544 4A29 0028                  		tst.b	$28(a1)
00019548 6600                       		bne.s	loc_19658
0001954A 0C40 0094                  		cmpi.w	#$94,d0
0001954E 6C00                       		bge.s	loc_19658
00019550 5E40                       		addq.w	#7,d0
00019552 6000                       		bra.s	loc_19658
00019554                            ; ===========================================================================
00019554                            
00019554                            loc_1964C:
00019554 4A69 003C                  		tst.w	$3C(a1)
00019558 6A00                       		bpl.s	loc_19658
0001955A                            
0001955A                            loc_19652:
0001955A 4A40                       		tst.w	d0
0001955C 6F00                       		ble.s	loc_19658
0001955E 5B40                       		subq.w	#5,d0
00019560                            
00019560                            loc_19658:
00019560 3140 003C                  		move.w	d0,$3C(a0)
00019564 E440                       		asr.w	#2,d0
00019566 D168 000C                  		add.w	d0,$C(a0)
0001956A 117C 0008 0019             		move.b	#8,$19(a0)
00019570 117C 000C 0016             		move.b	#$C,$16(a0)
00019576 4228 0020                  		clr.b	$20(a0)
0001957A 2268 0034                  		movea.l	$34(a0),a1
0001957E 4A29 0020                  		tst.b	$20(a1)
00019582 6700                       		beq.s	loc_19688
00019584 4A29 0029                  		tst.b	$29(a1)
00019588 6600                       		bne.s	loc_19688
0001958A 117C 0084 0020             		move.b	#$84,$20(a0)
00019590                            
00019590                            loc_19688:
00019590 6000 FF50                  		bra.w	loc_195DA
00019594                            ; ===========================================================================
00019594                            
00019594                            Obj75_SpikeDelete:
00019594 4EF9 0000 D5E8             		jmp	DeleteObject
0001959A                            ; ===========================================================================
0001959A                            ; ---------------------------------------------------------------------------
0001959A                            ; Object 76 - blocks that Eggman picks up (SYZ)
0001959A                            ; ---------------------------------------------------------------------------
0001959A                            
0001959A                            Obj76:					; XREF: Obj_Index
0001959A 7000                       		moveq	#0,d0
0001959C 1028 0024                  		move.b	$24(a0),d0
000195A0 323B 0000                  		move.w	Obj76_Index(pc,d0.w),d1
000195A4 4EFB 1000                  		jmp	Obj76_Index(pc,d1.w)
000195A8                            ; ===========================================================================
000195A8 0000                       Obj76_Index:	dc.w Obj76_Main-Obj76_Index
000195AA 0000                       		dc.w Obj76_Action-Obj76_Index
000195AC 0000                       		dc.w loc_19762-Obj76_Index
000195AE                            ; ===========================================================================
000195AE                            
000195AE                            Obj76_Main:				; XREF: Obj76_Index
000195AE 7800                       		moveq	#0,d4
000195B0 3A3C 2C10                  		move.w	#$2C10,d5
000195B4 7C09                       		moveq	#9,d6
000195B6 43D0                       		lea	(a0),a1
000195B8 6000                       		bra.s	Obj76_MakeBlock
000195BA                            ; ===========================================================================
000195BA                            
000195BA                            Obj76_Loop:
000195BA 4EB9 0000 DA32             		jsr	SingleObjLoad
000195C0 6600                       		bne.s	Obj76_ExitLoop
000195C2                            
000195C2                            Obj76_MakeBlock:			; XREF: Obj76_Main
000195C2 12BC 0076                  		move.b	#$76,(a1)
000195C6 237C 0000 0000 0004        		move.l	#Map_obj76,4(a1)
000195CE 337C 4000 0002             		move.w	#$4000,2(a1)
000195D4 137C 0004 0001             		move.b	#4,1(a1)
000195DA 137C 0010 0019             		move.b	#$10,$19(a1)
000195E0 137C 0010 0016             		move.b	#$10,$16(a1)
000195E6 137C 0003 0018             		move.b	#3,$18(a1)
000195EC 3345 0008                  		move.w	d5,8(a1)	; set x-position
000195F0 337C 0582 000C             		move.w	#$582,$C(a1)
000195F6 3344 0028                  		move.w	d4,$28(a1)
000195FA 0644 0101                  		addi.w	#$101,d4
000195FE 0645 0020                  		addi.w	#$20,d5		; add $20 to next x-position
00019602 5429 0024                  		addq.b	#2,$24(a1)
00019606 51CE FFB2                  		dbf	d6,Obj76_Loop	; repeat sequence 9 more times
0001960A                            
0001960A                            Obj76_ExitLoop:
0001960A 4E75                       		rts	
0001960C                            ; ===========================================================================
0001960C                            
0001960C                            Obj76_Action:				; XREF: Obj76_Index
0001960C 1028 0029                  		move.b	$29(a0),d0
00019610 B028 0028                  		cmp.b	$28(a0),d0
00019614 6700                       		beq.s	Obj76_Solid
00019616 4A00                       		tst.b	d0
00019618 6B00                       		bmi.s	loc_19718
0001961A                            
0001961A                            loc_19712:
0001961A 6100 0000                  		bsr.w	Obj76_Break
0001961E 6000                       		bra.s	Obj76_Display
00019620                            ; ===========================================================================
00019620                            
00019620                            loc_19718:
00019620 2268 0034                  		movea.l	$34(a0),a1
00019624 4A29 0021                  		tst.b	$21(a1)
00019628 67F0                       		beq.s	loc_19712
0001962A 3169 0008 0008             		move.w	8(a1),8(a0)
00019630 3169 000C 000C             		move.w	$C(a1),$C(a0)
00019636 0668 002C 000C             		addi.w	#$2C,$C(a0)
0001963C B2C8                       		cmpa.w	a0,a1
0001963E 6500                       		bcs.s	Obj76_Display
00019640 3029 0012                  		move.w	$12(a1),d0
00019644 48C0                       		ext.l	d0
00019646 E080                       		asr.l	#8,d0
00019648 D168 000C                  		add.w	d0,$C(a0)
0001964C 6000                       		bra.s	Obj76_Display
0001964E                            ; ===========================================================================
0001964E                            
0001964E                            Obj76_Solid:				; XREF: Obj76_Action
0001964E 323C 001B                  		move.w	#$1B,d1
00019652 343C 0010                  		move.w	#$10,d2
00019656 363C 0011                  		move.w	#$11,d3
0001965A 3828 0008                  		move.w	8(a0),d4
0001965E 4EB9 0000 F96C             		jsr	SolidObject
00019664                            
00019664                            Obj76_Display:				; XREF: Obj76_Action
00019664 4EF9 0000 D5AC             		jmp	DisplaySprite
0001966A                            ; ===========================================================================
0001966A                            
0001966A                            loc_19762:				; XREF: Obj76_Index
0001966A 4A28 0001                  		tst.b	1(a0)
0001966E 6A00                       		bpl.s	Obj76_Delete
00019670 4EB9 0000 D55A             		jsr	ObjectFall
00019676 4EF9 0000 D5AC             		jmp	DisplaySprite
0001967C                            ; ===========================================================================
0001967C                            
0001967C                            Obj76_Delete:
0001967C 4EF9 0000 D5E8             		jmp	DeleteObject
00019682                            
00019682                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00019682                            
00019682                            
00019682                            Obj76_Break:				; XREF: Obj76_Action
00019682 49FA 0000                  		lea	Obj76_FragSpeed(pc),a4
00019686 4BFA 0000                  		lea	Obj76_FragPos(pc),a5
0001968A 7801                       		moveq	#1,d4
0001968C 7203                       		moveq	#3,d1
0001968E 7438                       		moveq	#$38,d2
00019690 5428 0024                  		addq.b	#2,$24(a0)
00019694 117C 0008 0019             		move.b	#8,$19(a0)
0001969A 117C 0008 0016             		move.b	#8,$16(a0)
000196A0 43D0                       		lea	(a0),a1
000196A2 6000                       		bra.s	Obj76_MakeFrag
000196A4                            ; ===========================================================================
000196A4                            
000196A4                            Obj76_LoopFrag:
000196A4 4EB9 0000 DA48             		jsr	SingleObjLoad2
000196AA 6600                       		bne.s	loc_197D4
000196AC                            
000196AC                            Obj76_MakeFrag:
000196AC 45D0                       		lea	(a0),a2
000196AE 47D1                       		lea	(a1),a3
000196B0 7603                       		moveq	#3,d3
000196B2                            
000196B2                            loc_197AA:
000196B2 26DA                       		move.l	(a2)+,(a3)+
000196B4 26DA                       		move.l	(a2)+,(a3)+
000196B6 26DA                       		move.l	(a2)+,(a3)+
000196B8 26DA                       		move.l	(a2)+,(a3)+
000196BA 51CB FFF6                  		dbf	d3,loc_197AA
000196BE                            
000196BE 335C 0010                  		move.w	(a4)+,$10(a1)
000196C2 335C 0012                  		move.w	(a4)+,$12(a1)
000196C6 361D                       		move.w	(a5)+,d3
000196C8 D769 0008                  		add.w	d3,8(a1)
000196CC 361D                       		move.w	(a5)+,d3
000196CE D769 000C                  		add.w	d3,$C(a1)
000196D2 1344 001A                  		move.b	d4,$1A(a1)
000196D6 5244                       		addq.w	#1,d4
000196D8 51C9 FFCA                  		dbf	d1,Obj76_LoopFrag ; repeat sequence 3 more times
000196DC                            
000196DC                            loc_197D4:
000196DC 303C 00CB                  		move.w	#$CB,d0
000196E0 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play smashing sound
000196E6                            ; End of function Obj76_Break
000196E6                            
000196E6                            ; ===========================================================================
000196E6 FE80 FE00                  Obj76_FragSpeed:dc.w $FE80, $FE00
000196EA 0180 FE00                  		dc.w $180, $FE00
000196EE FF00 FF00                  		dc.w $FF00, $FF00
000196F2 0100 FF00                  		dc.w $100, $FF00
000196F6 FFF8 FFF8                  Obj76_FragPos:	dc.w $FFF8, $FFF8
000196FA 0010 0000                  		dc.w $10, 0
000196FE 0000 0010                  		dc.w 0,	$10
00019702 0010 0010                  		dc.w $10, $10
00019706                            ; ---------------------------------------------------------------------------
00019706                            ; Sprite mappings - blocks that	Eggman picks up (SYZ)
00019706                            ; ---------------------------------------------------------------------------
00019706                            Map_obj76:
00019706                            	include "_maps\obj76.asm"
00019706                            ; ---------------------------------------------------------------------------
00019706                            ; Sprite mappings - blocks that	Robotnik picks up (SYZ)
00019706                            ; ---------------------------------------------------------------------------
00019706 0000 0000                  		dc.w byte_19808-Map_obj76, byte_19814-Map_obj76
0001970A 0000 0000                  		dc.w byte_1981A-Map_obj76, byte_19820-Map_obj76
0001970E 0000                       		dc.w byte_19826-Map_obj76
00019710 02                         byte_19808:	dc.b 2
00019711 F00D 0071 F0               		dc.b $F0, $D, 0, $71, $F0
00019716 000D 0079 F0               		dc.b 0,	$D, 0, $79, $F0
0001971B 00                         		dc.b 0
0001971C 01                         byte_19814:	dc.b 1
0001971D F805 0071 F8               		dc.b $F8, 5, 0,	$71, $F8
00019722 01                         byte_1981A:	dc.b 1
00019723 F805 0075 F8               		dc.b $F8, 5, 0,	$75, $F8
00019728 01                         byte_19820:	dc.b 1
00019729 F805 0079 F8               		dc.b $F8, 5, 0,	$79, $F8
0001972E 01                         byte_19826:	dc.b 1
0001972F F805 007D F8               		dc.b $F8, 5, 0,	$7D, $F8
00019734                            		even
00019734                            		even
00019734                            
00019734                            ; ===========================================================================
00019734                            
00019734                            loc_1982C:				; XREF: loc_19C62; loc_19C80
00019734 4EF9 0000 D5E8             		jmp	DeleteObject
0001973A                            ; ===========================================================================
0001973A                            ; ---------------------------------------------------------------------------
0001973A                            ; Object 82 - Eggman (SBZ2)
0001973A                            ; ---------------------------------------------------------------------------
0001973A                            
0001973A                            Obj82:					; XREF: Obj_Index
0001973A 7000                       		moveq	#0,d0
0001973C 1028 0024                  		move.b	$24(a0),d0
00019740 323B 0000                  		move.w	Obj82_Index(pc,d0.w),d1
00019744 4EFB 1000                  		jmp	Obj82_Index(pc,d1.w)
00019748                            ; ===========================================================================
00019748 0000                       Obj82_Index:	dc.w Obj82_Main-Obj82_Index
0001974A 0000                       		dc.w Obj82_Eggman-Obj82_Index
0001974C 0000                       		dc.w Obj82_Switch-Obj82_Index
0001974E                            
0001974E 0200 03                    Obj82_ObjData:	dc.b 2,	0, 3		; routine number, animation, priority
00019751 0400 03                    		dc.b 4,	0, 3
00019754                            ; ===========================================================================
00019754                            
00019754                            Obj82_Main:				; XREF: Obj82_Index
00019754 45FA FFF8                  		lea	Obj82_ObjData(pc),a2
00019758 317C 2160 0008             		move.w	#$2160,8(a0)
0001975E 317C 05A4 000C             		move.w	#$5A4,$C(a0)
00019764 117C 000F 0020             		move.b	#$F,$20(a0)
0001976A 117C 0010 0021             		move.b	#$10,$21(a0)
00019770 08A8 0000 0022             		bclr	#0,$22(a0)
00019776 4228 0025                  		clr.b	$25(a0)
0001977A 115A 0024                  		move.b	(a2)+,$24(a0)
0001977E 115A 001C                  		move.b	(a2)+,$1C(a0)
00019782 115A 0018                  		move.b	(a2)+,$18(a0)
00019786 217C 0000 0000 0004        		move.l	#Map_obj82,4(a0)
0001978E 317C 0400 0002             		move.w	#$400,2(a0)
00019794 117C 0004 0001             		move.b	#4,1(a0)
0001979A 08E8 0007 0001             		bset	#7,1(a0)
000197A0 117C 0020 0019             		move.b	#$20,$19(a0)
000197A6 4EB9 0000 DA48             		jsr	SingleObjLoad2
000197AC 6600                       		bne.s	Obj82_Eggman
000197AE 2348 0034                  		move.l	a0,$34(a1)
000197B2 12BC 0082                  		move.b	#$82,(a1)	; load switch object
000197B6 337C 2130 0008             		move.w	#$2130,8(a1)
000197BC 337C 05BC 000C             		move.w	#$5BC,$C(a1)
000197C2 4228 0025                  		clr.b	$25(a0)
000197C6 135A 0024                  		move.b	(a2)+,$24(a1)
000197CA 135A 001C                  		move.b	(a2)+,$1C(a1)
000197CE 135A 0018                  		move.b	(a2)+,$18(a1)
000197D2 237C 0000 BE5A 0004        		move.l	#Map_obj32,4(a1)
000197DA 337C 04A4 0002             		move.w	#$4A4,2(a1)
000197E0 137C 0004 0001             		move.b	#4,1(a1)
000197E6 08E9 0007 0001             		bset	#7,1(a1)
000197EC 137C 0010 0019             		move.b	#$10,$19(a1)
000197F2 137C 0000 001A             		move.b	#0,$1A(a1)
000197F8                            
000197F8                            Obj82_Eggman:				; XREF: Obj82_Index
000197F8 7000                       		moveq	#0,d0
000197FA 1028 0025                  		move.b	$25(a0),d0
000197FE 323B 0000                  		move.w	Obj82_EggIndex(pc,d0.w),d1
00019802 4EBB 1000                  		jsr	Obj82_EggIndex(pc,d1.w)
00019806 43FA 0000                  		lea	Ani_obj82(pc),a1
0001980A 4EB9 0000 A6D8             		jsr	AnimateSprite
00019810 4EF9 0000 D5AC             		jmp	DisplaySprite
00019816                            ; ===========================================================================
00019816 0000                       Obj82_EggIndex:	dc.w Obj82_ChkSonic-Obj82_EggIndex
00019818 0000                       		dc.w Obj82_PreLeap-Obj82_EggIndex
0001981A 0000                       		dc.w Obj82_Leap-Obj82_EggIndex
0001981C 0000                       		dc.w loc_19934-Obj82_EggIndex
0001981E                            ; ===========================================================================
0001981E                            
0001981E                            Obj82_ChkSonic:				; XREF: Obj82_EggIndex
0001981E 3028 0008                  		move.w	8(a0),d0
00019822 9078 D008                  		sub.w	($FFFFD008).w,d0
00019826 0C40 0080                  		cmpi.w	#128,d0		; is Sonic within 128 pixels of	Eggman?
0001982A 6400                       		bcc.s	loc_19934	; if not, branch
0001982C 5428 0025                  		addq.b	#2,$25(a0)
00019830 317C 00B4 003C             		move.w	#180,$3C(a0)	; set delay to 3 seconds
00019836 117C 0001 001C             		move.b	#1,$1C(a0)
0001983C                            
0001983C                            loc_19934:				; XREF: Obj82_EggIndex
0001983C 4EF9 0000 D586             		jmp	SpeedToPos
00019842                            ; ===========================================================================
00019842                            
00019842                            Obj82_PreLeap:				; XREF: Obj82_EggIndex
00019842 5368 003C                  		subq.w	#1,$3C(a0)	; subtract 1 from time delay
00019846 6600                       		bne.s	loc_19954	; if time remains, branch
00019848 5428 0025                  		addq.b	#2,$25(a0)
0001984C 117C 0002 001C             		move.b	#2,$1C(a0)
00019852 5868 000C                  		addq.w	#4,$C(a0)
00019856 317C 000F 003C             		move.w	#15,$3C(a0)
0001985C                            
0001985C                            loc_19954:
0001985C 60DE                       		bra.s	loc_19934
0001985E                            ; ===========================================================================
0001985E                            
0001985E                            Obj82_Leap:				; XREF: Obj82_EggIndex
0001985E 5368 003C                  		subq.w	#1,$3C(a0)
00019862 6E00                       		bgt.s	loc_199D0
00019864 6600                       		bne.s	loc_1996A
00019866 317C FF04 0010             		move.w	#-$FC,$10(a0)	; make Eggman leap
0001986C 317C FC40 0012             		move.w	#-$3C0,$12(a0)
00019872                            
00019872                            loc_1996A:
00019872 0C68 2132 0008             		cmpi.w	#$2132,8(a0)
00019878 6E00                       		bgt.s	loc_19976
0001987A 4268 0010                  		clr.w	$10(a0)
0001987E                            
0001987E                            loc_19976:
0001987E 0668 0024 0012             		addi.w	#$24,$12(a0)
00019884 4A68 0012                  		tst.w	$12(a0)
00019888 6B00                       		bmi.s	Obj82_FindBlocks
0001988A 0C68 0595 000C             		cmpi.w	#$595,$C(a0)
00019890 6500                       		bcs.s	Obj82_FindBlocks
00019892 317C 5357 0028             		move.w	#$5357,$28(a0)
00019898 0C68 059B 000C             		cmpi.w	#$59B,$C(a0)
0001989E 6500                       		bcs.s	Obj82_FindBlocks
000198A0 317C 059B 000C             		move.w	#$59B,$C(a0)
000198A6 4268 0012                  		clr.w	$12(a0)
000198AA                            
000198AA                            Obj82_FindBlocks:
000198AA 3028 0010                  		move.w	$10(a0),d0
000198AE 8068 0012                  		or.w	$12(a0),d0
000198B2 6600                       		bne.s	loc_199D0
000198B4 43F8 D000                  		lea	($FFFFD000).w,a1 ; start at the	first object RAM
000198B8 703E                       		moveq	#$3E,d0
000198BA 7240                       		moveq	#$40,d1
000198BC                            
000198BC                            Obj82_FindLoop:	
000198BC D2C1                       		adda.w	d1,a1		; jump to next object RAM
000198BE 0C11 0083                  		cmpi.b	#$83,(a1)	; is object a block? (object $83)
000198C2 57C8 FFF8                  		dbeq	d0,Obj82_FindLoop ; if not, repeat (max	$3E times)
000198C6                            
000198C6 6600                       		bne.s	loc_199D0
000198C8 337C 474F 0028             		move.w	#$474F,$28(a1)	; set block to disintegrate
000198CE 5428 0025                  		addq.b	#2,$25(a0)
000198D2 117C 0001 001C             		move.b	#1,$1C(a0)
000198D8                            
000198D8                            loc_199D0:
000198D8 6000 FF62                  		bra.w	loc_19934
000198DC                            ; ===========================================================================
000198DC                            
000198DC                            Obj82_Switch:				; XREF: Obj82_Index
000198DC 7000                       		moveq	#0,d0
000198DE 1028 0025                  		move.b	$25(a0),d0
000198E2 303B 0000                  		move.w	Obj82_SwIndex(pc,d0.w),d0
000198E6 4EFB 0000                  		jmp	Obj82_SwIndex(pc,d0.w)
000198EA                            ; ===========================================================================
000198EA 0000                       Obj82_SwIndex:	dc.w loc_199E6-Obj82_SwIndex
000198EC 0000                       		dc.w Obj82_SwDisplay-Obj82_SwIndex
000198EE                            ; ===========================================================================
000198EE                            
000198EE                            loc_199E6:				; XREF: Obj82_SwIndex
000198EE 2268 0034                  		movea.l	$34(a0),a1
000198F2 0C69 5357 0028             		cmpi.w	#$5357,$28(a1)
000198F8 6600                       		bne.s	Obj82_SwDisplay
000198FA 117C 0001 001A             		move.b	#1,$1A(a0)
00019900 5428 0025                  		addq.b	#2,$25(a0)
00019904                            
00019904                            Obj82_SwDisplay:			; XREF: Obj82_SwIndex
00019904 4EF9 0000 D5AC             		jmp	DisplaySprite
0001990A                            ; ===========================================================================
0001990A                            Ani_obj82:
0001990A                            	include "_anim\obj82.asm"
0001990A                            ; ---------------------------------------------------------------------------
0001990A                            ; Animation script - Eggman (SBZ2)
0001990A                            ; ---------------------------------------------------------------------------
0001990A 0000                       		dc.w byte_19A10-Ani_obj82
0001990C 0000                       		dc.w byte_19A14-Ani_obj82
0001990E 0000                       		dc.w byte_19A18-Ani_obj82
00019910 0000                       		dc.w byte_19A20-Ani_obj82
00019912 0000                       		dc.w byte_19A24-Ani_obj82
00019914 0000                       		dc.w byte_19A2A-Ani_obj82
00019916 0000                       		dc.w byte_19A30-Ani_obj82
00019918 7E00 FF00                  byte_19A10:	dc.b $7E, 0, $FF, 0
0001991C 0601 02FF                  byte_19A14:	dc.b 6,	1, 2, $FF
00019920 0E03 0404 0000 00FF        byte_19A18:	dc.b $E, 3, 4, 4, 0, 0,	0, $FF
00019928 0005 09FF                  byte_19A20:	dc.b 0,	5, 9, $FF
0001992C 0607 0408 04FF             byte_19A24:	dc.b 6,	7, 4, 8, 4, $FF
00019932 0F04 0303 FF00             byte_19A2A:	dc.b $F, 4, 3, 3, $FF, 0
00019938 7E06 FF00                  byte_19A30:	dc.b $7E, 6, $FF, 0
0001993C                            		even
0001993C                            		even
0001993C                            
0001993C                            ; ---------------------------------------------------------------------------
0001993C                            ; Sprite mappings - Eggman (SBZ2)
0001993C                            ; ---------------------------------------------------------------------------
0001993C                            Map_obj82:
0001993C                            	include "_maps\obj82.asm"
0001993C                            ; ---------------------------------------------------------------------------
0001993C                            ; Sprite mappings - Eggman (SBZ2)
0001993C                            ; ---------------------------------------------------------------------------
0001993C 0000 0000                  		dc.w byte_19A4A-Map_obj82, byte_19A5A-Map_obj82
00019940 0000 0000                  		dc.w byte_19A70-Map_obj82, byte_19A86-Map_obj82
00019944 0000 0000                  		dc.w byte_19A9C-Map_obj82, byte_19AB2-Map_obj82
00019948 0000 0000                  		dc.w byte_19AC8-Map_obj82, byte_19AEC-Map_obj82
0001994C 0000 0000                  		dc.w byte_19B06-Map_obj82, byte_19B26-Map_obj82
00019950 0000                       		dc.w byte_19B4F-Map_obj82
00019952 03                         byte_19A4A:	dc.b 3
00019953 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019958 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001995D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019962 04                         byte_19A5A:	dc.b 4
00019963 E80D 000E F0               		dc.b $E8, $D, 0, $E, $F0
00019968 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
0001996D 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019972 FC00 008F E8               		dc.b $FC, 0, 0,	$8F, $E8
00019977 00                         		dc.b 0
00019978 04                         byte_19A70:	dc.b 4
00019979 E90D 000E F0               		dc.b $E9, $D, 0, $E, $F0
0001997E E90E 0000 F0               		dc.b $E9, $E, 0, 0, $F0
00019983 010F 007F F0               		dc.b 1,	$F, 0, $7F, $F0
00019988 FD00 008F E8               		dc.b $FD, 0, 0,	$8F, $E8
0001998D 00                         		dc.b 0
0001998E 04                         byte_19A86:	dc.b 4
0001998F F40F 0820 F0               		dc.b $F4, $F, 8, $20, $F0
00019994 F504 0830 10               		dc.b $F5, 4, 8,	$30, $10
00019999 0809 084E F0               		dc.b 8,	9, 8, $4E, $F0
0001999E EC0E 0000 F0               		dc.b $EC, $E, 0, 0, $F0
000199A3 00                         		dc.b 0
000199A4 04                         byte_19A9C:	dc.b 4
000199A5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000199AA F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
000199AF 0806 083E F8               		dc.b 8,	6, 8, $3E, $F8
000199B4 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000199B9 00                         		dc.b 0
000199BA 04                         byte_19AB2:	dc.b 4
000199BB E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
000199C0 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
000199C5 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
000199CA 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
000199CF 00                         		dc.b 0
000199D0 07                         byte_19AC8:	dc.b 7
000199D1 E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
000199D6 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
000199DB 0409 0834 00               		dc.b 4,	9, 8, $34, 0
000199E0 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
000199E5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000199EA F104 0854 10               		dc.b $F1, 4, 8,	$54, $10
000199EF F104 0054 E0               		dc.b $F1, 4, 0,	$54, $E0
000199F4 05                         byte_19AEC:	dc.b 5
000199F5 F00F 0820 F0               		dc.b $F0, $F, 8, $20, $F0
000199FA F104 0830 10               		dc.b $F1, 4, 8,	$30, $10
000199FF 0409 0834 00               		dc.b 4,	9, 8, $34, 0
00019A04 0405 083A E8               		dc.b 4,	5, 8, $3A, $E8
00019A09 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019A0E 06                         byte_19B06:	dc.b 6
00019A0F EE0F 0820 F0               		dc.b $EE, $F, 8, $20, $F0
00019A14 EF04 0830 10               		dc.b $EF, 4, 8,	$30, $10
00019A19 0905 0844 00               		dc.b 9,	5, 8, $44, 0
00019A1E 0301 0848 F8               		dc.b 3,	1, 8, $48, $F8
00019A23 0B05 084A E8               		dc.b $B, 5, 8, $4A, $E8
00019A28 E60E 0000 F0               		dc.b $E6, $E, 0, 0, $F0
00019A2D 00                         		dc.b 0
00019A2E 08                         byte_19B26:	dc.b 8
00019A2F E80D 0016 EC               		dc.b $E8, $D, 0, $16, $EC
00019A34 E801 001E 0C               		dc.b $E8, 1, 0,	$1E, $C
00019A39 E80E 0000 F0               		dc.b $E8, $E, 0, 0, $F0
00019A3E 000F 006F F0               		dc.b 0,	$F, 0, $6F, $F0
00019A43 E00D 3EF0 F0               		dc.b $E0, $D, $3E, $F0,	$F0
00019A48 F00D 3EF0 F0               		dc.b $F0, $D, $3E, $F0,	$F0
00019A4D 000D 3EF0 F0               		dc.b 0,	$D, $3E, $F0, $F0
00019A52 100D 3EF0 F0               		dc.b $10, $D, $3E, $F0,	$F0
00019A57 03                         byte_19B4F:	dc.b 3
00019A58 EC0D 0056 E4               		dc.b $EC, $D, 0, $56, $E4
00019A5D F408 005E 04               		dc.b $F4, 8, 0,	$5E, 4
00019A62 EC0D 0061 FC               		dc.b $EC, $D, 0, $61, $FC
00019A68 00                         		even
00019A68 00                         		even
00019A68                            
00019A68                            ; ===========================================================================
00019A68                            ; ---------------------------------------------------------------------------
00019A68                            ; Object 83 - blocks that disintegrate Eggman	presses	a switch (SBZ2)
00019A68                            ; ---------------------------------------------------------------------------
00019A68                            
00019A68                            Obj83:					; XREF: Obj_Index
00019A68 7000                       		moveq	#0,d0
00019A6A 1028 0024                  		move.b	$24(a0),d0
00019A6E 323B 0000                  		move.w	Obj83_Index(pc,d0.w),d1
00019A72 4EFB 1000                  		jmp	Obj83_Index(pc,d1.w)
00019A76                            ; ===========================================================================
00019A76 0000                       Obj83_Index:	dc.w Obj83_Main-Obj83_Index
00019A78 0000                       		dc.w Obj83_ChkBreak-Obj83_Index
00019A7A 0000                       		dc.w loc_19C36-Obj83_Index
00019A7C 0000                       		dc.w loc_19C62-Obj83_Index
00019A7E 0000                       		dc.w loc_19C72-Obj83_Index
00019A80 0000                       		dc.w loc_19C80-Obj83_Index
00019A82                            ; ===========================================================================
00019A82                            
00019A82                            Obj83_Main:				; XREF: Obj83_Index
00019A82 317C 2080 0008             		move.w	#$2080,8(a0)
00019A88 317C 05D0 000C             		move.w	#$5D0,$C(a0)
00019A8E 117C 0080 0019             		move.b	#$80,$19(a0)
00019A94 117C 0010 0016             		move.b	#$10,$16(a0)
00019A9A 117C 0004 0001             		move.b	#4,1(a0)
00019AA0 08E8 0007 0001             		bset	#7,1(a0)
00019AA6 7800                       		moveq	#0,d4
00019AA8 3A3C 2010                  		move.w	#$2010,d5
00019AAC 7C07                       		moveq	#7,d6
00019AAE 45E8 0030                  		lea	$30(a0),a2
00019AB2                            
00019AB2                            Obj83_MakeBlock:
00019AB2 4EB9 0000 DA32             		jsr	SingleObjLoad
00019AB8 6600                       		bne.s	Obj83_ExitMake
00019ABA 34C9                       		move.w	a1,(a2)+
00019ABC 12BC 0083                  		move.b	#$83,(a1)	; load block object
00019AC0 237C 0000 0000 0004        		move.l	#Map_obj83,4(a1)
00019AC8 337C 4518 0002             		move.w	#$4518,2(a1)
00019ACE 137C 0004 0001             		move.b	#4,1(a1)
00019AD4 137C 0010 0019             		move.b	#$10,$19(a1)
00019ADA 137C 0010 0016             		move.b	#$10,$16(a1)
00019AE0 137C 0003 0018             		move.b	#3,$18(a1)
00019AE6 3345 0008                  		move.w	d5,8(a1)	; set X	position
00019AEA 337C 05D0 000C             		move.w	#$5D0,$C(a1)
00019AF0 0645 0020                  		addi.w	#$20,d5		; add $20 for next X position
00019AF4 137C 0008 0024             		move.b	#8,$24(a1)
00019AFA 51CE FFB6                  		dbf	d6,Obj83_MakeBlock ; repeat sequence 7 more times
00019AFE                            
00019AFE                            Obj83_ExitMake:
00019AFE 5428 0024                  		addq.b	#2,$24(a0)
00019B02 4E75                       		rts	
00019B04                            ; ===========================================================================
00019B04                            
00019B04                            Obj83_ChkBreak:				; XREF: Obj83_Index
00019B04 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019B0A 6600                       		bne.s	Obj83_Solid	; if not, branch
00019B0C 4228 001A                  		clr.b	$1A(a0)
00019B10 5428 0024                  		addq.b	#2,$24(a0)	; next subroutine
00019B14                            
00019B14                            Obj83_Solid:
00019B14 7000                       		moveq	#0,d0
00019B16 1028 001A                  		move.b	$1A(a0),d0
00019B1A 4400                       		neg.b	d0
00019B1C 4880                       		ext.w	d0
00019B1E 5040                       		addq.w	#8,d0
00019B20 E940                       		asl.w	#4,d0
00019B22 383C 2100                  		move.w	#$2100,d4
00019B26 9840                       		sub.w	d0,d4
00019B28 1140 0019                  		move.b	d0,$19(a0)
00019B2C 3144 0008                  		move.w	d4,8(a0)
00019B30 720B                       		moveq	#$B,d1
00019B32 D240                       		add.w	d0,d1
00019B34 7410                       		moveq	#$10,d2
00019B36 7611                       		moveq	#$11,d3
00019B38 4EF9 0000 F96C             		jmp	SolidObject
00019B3E                            ; ===========================================================================
00019B3E                            
00019B3E                            loc_19C36:				; XREF: Obj83_Index
00019B3E 0428 000E 001E             		subi.b	#$E,$1E(a0)
00019B44 6400                       		bcc.s	Obj83_Solid2
00019B46 70FF                       		moveq	#-1,d0
00019B48 1028 001A                  		move.b	$1A(a0),d0
00019B4C 4880                       		ext.w	d0
00019B4E D040                       		add.w	d0,d0
00019B50 3030 0030                  		move.w	$30(a0,d0.w),d0
00019B54 2240                       		movea.l	d0,a1
00019B56 337C 474F 0028             		move.w	#$474F,$28(a1)
00019B5C 5228 001A                  		addq.b	#1,$1A(a0)
00019B60 0C28 0008 001A             		cmpi.b	#8,$1A(a0)
00019B66 6700                       		beq.s	loc_19C62
00019B68                            
00019B68                            Obj83_Solid2:
00019B68 60AA                       		bra.s	Obj83_Solid
00019B6A                            ; ===========================================================================
00019B6A                            
00019B6A                            loc_19C62:				; XREF: Obj83_Index
00019B6A 08A8 0003 0022             		bclr	#3,$22(a0)
00019B70 08B8 0003 D022             		bclr	#3,($FFFFD022).w
00019B76 6000 FBBC                  		bra.w	loc_1982C
00019B7A                            ; ===========================================================================
00019B7A                            
00019B7A                            loc_19C72:				; XREF: Obj83_Index
00019B7A 0C68 474F 0028             		cmpi.w	#$474F,$28(a0)	; is object set	to disintegrate?
00019B80 6700                       		beq.s	Obj83_Break	; if yes, branch
00019B82 4EF9 0000 D5AC             		jmp	DisplaySprite
00019B88                            ; ===========================================================================
00019B88                            
00019B88                            loc_19C80:				; XREF: Obj83_Index
00019B88 4A28 0001                  		tst.b	1(a0)
00019B8C 6A00 FBA6                  		bpl.w	loc_1982C
00019B90 4EB9 0000 D55A             		jsr	ObjectFall
00019B96 4EF9 0000 D5AC             		jmp	DisplaySprite
00019B9C                            ; ===========================================================================
00019B9C                            
00019B9C                            Obj83_Break:				; XREF: loc_19C72
00019B9C 49FA 0000                  		lea	Obj83_FragSpeed(pc),a4
00019BA0 4BFA 0000                  		lea	Obj83_FragPos(pc),a5
00019BA4 7801                       		moveq	#1,d4
00019BA6 7203                       		moveq	#3,d1
00019BA8 7438                       		moveq	#$38,d2
00019BAA 5428 0024                  		addq.b	#2,$24(a0)
00019BAE 117C 0008 0019             		move.b	#8,$19(a0)
00019BB4 117C 0008 0016             		move.b	#8,$16(a0)
00019BBA 43D0                       		lea	(a0),a1
00019BBC 6000                       		bra.s	Obj83_MakeFrag
00019BBE                            ; ===========================================================================
00019BBE                            
00019BBE                            Obj83_LoopFrag:
00019BBE 4EB9 0000 DA48             		jsr	SingleObjLoad2
00019BC4 6600                       		bne.s	Obj83_BreakSnd
00019BC6                            
00019BC6                            Obj83_MakeFrag:				; XREF: Obj83_Break
00019BC6 45D0                       		lea	(a0),a2
00019BC8 47D1                       		lea	(a1),a3
00019BCA 7603                       		moveq	#3,d3
00019BCC                            
00019BCC                            loc_19CC4:
00019BCC 26DA                       		move.l	(a2)+,(a3)+
00019BCE 26DA                       		move.l	(a2)+,(a3)+
00019BD0 26DA                       		move.l	(a2)+,(a3)+
00019BD2 26DA                       		move.l	(a2)+,(a3)+
00019BD4 51CB FFF6                  		dbf	d3,loc_19CC4
00019BD8                            
00019BD8 335C 0012                  		move.w	(a4)+,$12(a1)
00019BDC 361D                       		move.w	(a5)+,d3
00019BDE D769 0008                  		add.w	d3,8(a1)
00019BE2 361D                       		move.w	(a5)+,d3
00019BE4 D769 000C                  		add.w	d3,$C(a1)
00019BE8 1344 001A                  		move.b	d4,$1A(a1)
00019BEC 5244                       		addq.w	#1,d4
00019BEE 51C9 FFCE                  		dbf	d1,Obj83_LoopFrag ; repeat sequence 3 more times
00019BF2                            
00019BF2                            Obj83_BreakSnd:
00019BF2 303C 00CB                  		move.w	#$CB,d0
00019BF6 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play smashing sound
00019BFC 4EF9 0000 D5AC             		jmp	DisplaySprite
00019C02                            ; ===========================================================================
00019C02 0080 0000                  Obj83_FragSpeed:dc.w $80, 0
00019C06 0120 00C0                  		dc.w $120, $C0
00019C0A FFF8 FFF8                  Obj83_FragPos:	dc.w $FFF8, $FFF8
00019C0E 0010 0000                  		dc.w $10, 0
00019C12 0000 0010                  		dc.w 0,	$10
00019C16 0010 0010                  		dc.w $10, $10
00019C1A                            ; ---------------------------------------------------------------------------
00019C1A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019C1A                            ; ---------------------------------------------------------------------------
00019C1A                            Map_obj83:
00019C1A                            	include "_maps\obj83.asm"
00019C1A                            ; ---------------------------------------------------------------------------
00019C1A                            ; Sprite mappings - blocks that	disintegrate when Eggman presses a switch
00019C1A                            ; ---------------------------------------------------------------------------
00019C1A 0000 0000                  		dc.w byte_19D1C-Map_obj83, byte_19D22-Map_obj83
00019C1E 0000 0000                  		dc.w byte_19D2E-Map_obj83, byte_19D3A-Map_obj83
00019C22 0000                       		dc.w byte_19D46-Map_obj83
00019C24 01                         byte_19D1C:	dc.b 1
00019C25 F00F 0000 F0               		dc.b $F0, $F, 0, 0, $F0
00019C2A 02                         byte_19D22:	dc.b 2
00019C2B F801 0000 F8               		dc.b $F8, 1, 0,	0, $F8
00019C30 F801 0004 00               		dc.b $F8, 1, 0,	4, 0
00019C35 00                         		dc.b 0
00019C36 02                         byte_19D2E:	dc.b 2
00019C37 F801 0008 F8               		dc.b $F8, 1, 0,	8, $F8
00019C3C F801 000C 00               		dc.b $F8, 1, 0,	$C, 0
00019C41 00                         		dc.b 0
00019C42 02                         byte_19D3A:	dc.b 2
00019C43 F801 0002 F8               		dc.b $F8, 1, 0,	2, $F8
00019C48 F801 0006 00               		dc.b $F8, 1, 0,	6, 0
00019C4D 00                         		dc.b 0
00019C4E 02                         byte_19D46:	dc.b 2
00019C4F F801 000A F8               		dc.b $F8, 1, 0,	$A, $F8
00019C54 F801 000E 00               		dc.b $F8, 1, 0,	$E, 0
00019C5A 00                         		even
00019C5A 00                         		even
00019C5A                            
00019C5A                            ; ===========================================================================
00019C5A                            ; ---------------------------------------------------------------------------
00019C5A                            ; Object 85 - Eggman (FZ)
00019C5A                            ; ---------------------------------------------------------------------------
00019C5A                            
00019C5A                            Obj85_Delete:
00019C5A 4EF9 0000 D5E8             		jmp	DeleteObject
00019C60                            ; ===========================================================================
00019C60                            
00019C60                            Obj85:					; XREF: Obj_Index
00019C60 7000                       		moveq	#0,d0
00019C62 1028 0024                  		move.b	$24(a0),d0
00019C66 303B 0000                  		move.w	Obj85_Index(pc,d0.w),d0
00019C6A 4EFB 0000                  		jmp	Obj85_Index(pc,d0.w)
00019C6E                            ; ===========================================================================
00019C6E 0000                       Obj85_Index:	dc.w Obj85_Main-Obj85_Index
00019C70 0000                       		dc.w Obj85_Eggman-Obj85_Index
00019C72 0000                       		dc.w loc_1A38E-Obj85_Index
00019C74 0000                       		dc.w loc_1A346-Obj85_Index
00019C76 0000                       		dc.w loc_1A2C6-Obj85_Index
00019C78 0000                       		dc.w loc_1A3AC-Obj85_Index
00019C7A 0000                       		dc.w loc_1A264-Obj85_Index
00019C7C                            
00019C7C 0100 0100 0470             Obj85_ObjData:	dc.w $100, $100, $470	; X pos, Y pos,	VRAM setting
00019C82 0001 993C                  		dc.l Map_obj82		; mappings pointer
00019C86 25B0 0590 0300             		dc.w $25B0, $590, $300
00019C8C 0000 0000                  		dc.l Map_obj84
00019C90 26E0 0596 03A0             		dc.w $26E0, $596, $3A0
00019C96 0000 0000                  		dc.l Map_FZBoss
00019C9A 26E0 0596 0470             		dc.w $26E0, $596, $470
00019CA0 0001 993C                  		dc.l Map_obj82
00019CA4 26E0 0596 0400             		dc.w $26E0, $596, $400
00019CAA 0001 7C1E                  		dc.l Map_Eggman
00019CAE 26E0 0596 0400             		dc.w $26E0, $596, $400
00019CB4 0001 7C1E                  		dc.l Map_Eggman
00019CB8                            
00019CB8 0200 0420 19               Obj85_ObjData2:	dc.b 2,	0, 4, $20, $19	; routine num, animation, sprite priority, width, height
00019CBD 0400 0112 08               		dc.b 4,	0, 1, $12, 8
00019CC2 0600 0300 00               		dc.b 6,	0, 3, 0, 0
00019CC7 0800 0300 00               		dc.b 8,	0, 3, 0, 0
00019CCC 0A00 0320 20               		dc.b $A, 0, 3, $20, $20
00019CD1 0C00 0300 00               		dc.b $C, 0, 3, 0, 0
00019CD6                            ; ===========================================================================
00019CD6                            
00019CD6                            Obj85_Main:				; XREF: Obj85_Index
00019CD6 45FA FFA4                  		lea	Obj85_ObjData(pc),a2
00019CDA 47FA FFDC                  		lea	Obj85_ObjData2(pc),a3
00019CDE 2248                       		movea.l	a0,a1
00019CE0 7205                       		moveq	#5,d1
00019CE2 6000                       		bra.s	Obj85_LoadBoss
00019CE4                            ; ===========================================================================
00019CE4                            
00019CE4                            Obj85_Loop:
00019CE4 4EB9 0000 DA48             		jsr	SingleObjLoad2
00019CEA 6600                       		bne.s	loc_19E20
00019CEC                            
00019CEC                            Obj85_LoadBoss:				; XREF: Obj85_Main
00019CEC 12BC 0085                  		move.b	#$85,(a1)
00019CF0 335A 0008                  		move.w	(a2)+,8(a1)
00019CF4 335A 000C                  		move.w	(a2)+,$C(a1)
00019CF8 335A 0002                  		move.w	(a2)+,2(a1)
00019CFC 235A 0004                  		move.l	(a2)+,4(a1)
00019D00 135B 0024                  		move.b	(a3)+,$24(a1)
00019D04 135B 001C                  		move.b	(a3)+,$1C(a1)
00019D08 135B 0018                  		move.b	(a3)+,$18(a1)
00019D0C 135B 0017                  		move.b	(a3)+,$17(a1)
00019D10 135B 0016                  		move.b	(a3)+,$16(a1)
00019D14 137C 0004 0001             		move.b	#4,1(a1)
00019D1A 08E8 0007 0001             		bset	#7,1(a0)
00019D20 2348 0034                  		move.l	a0,$34(a1)
00019D24 51C9 FFBE                  		dbf	d1,Obj85_Loop
00019D28                            
00019D28                            loc_19E20:
00019D28 45E8 0036                  		lea	$36(a0),a2
00019D2C 4EB9 0000 DA32             		jsr	SingleObjLoad
00019D32 6600                       		bne.s	loc_19E5A
00019D34 12BC 0086                  		move.b	#$86,(a1)	; load energy ball object
00019D38 3489                       		move.w	a1,(a2)
00019D3A 2348 0034                  		move.l	a0,$34(a1)
00019D3E 45E8 0038                  		lea	$38(a0),a2
00019D42 7400                       		moveq	#0,d2
00019D44 7203                       		moveq	#3,d1
00019D46                            
00019D46                            loc_19E3E:
00019D46 4EB9 0000 DA48             		jsr	SingleObjLoad2
00019D4C 6600                       		bne.s	loc_19E5A
00019D4E 34C9                       		move.w	a1,(a2)+
00019D50 12BC 0084                  		move.b	#$84,(a1)	; load crushing	cylinder object
00019D54 2348 0034                  		move.l	a0,$34(a1)
00019D58 1342 0028                  		move.b	d2,$28(a1)
00019D5C 5442                       		addq.w	#2,d2
00019D5E 51C9 FFE6                  		dbf	d1,loc_19E3E
00019D62                            
00019D62                            loc_19E5A:
00019D62 317C 0000 0034             		move.w	#0,$34(a0)
00019D68 117C 0008 0021             		move.b	#8,$21(a0)	; set number of	hits to	8
00019D6E 317C FFFF 0030             		move.w	#-1,$30(a0)
00019D74                            
00019D74                            Obj85_Eggman:				; XREF: Obj85_Index
00019D74 7000                       		moveq	#0,d0
00019D76 1028 0034                  		move.b	$34(a0),d0
00019D7A 303B 0000                  		move.w	off_19E80(pc,d0.w),d0
00019D7E 4EBB 0000                  		jsr	off_19E80(pc,d0.w)
00019D82 4EF9 0000 D5AC             		jmp	DisplaySprite
00019D88                            ; ===========================================================================
00019D88 0000 0000                  off_19E80:	dc.w loc_19E90-off_19E80, loc_19EA8-off_19E80
00019D8C 0000 0000                  		dc.w loc_19FE6-off_19E80, loc_1A02A-off_19E80
00019D90 0000 0000                  		dc.w loc_1A074-off_19E80, loc_1A112-off_19E80
00019D94 0000 0000                  		dc.w loc_1A192-off_19E80, loc_1A1D4-off_19E80
00019D98                            ; ===========================================================================
00019D98                            
00019D98                            loc_19E90:				; XREF: off_19E80
00019D98 4AB8 F680                  		tst.l	($FFFFF680).w
00019D9C 6600                       		bne.s	loc_19EA2
00019D9E 0C78 2450 F700             		cmpi.w	#$2450,($FFFFF700).w
00019DA4 6500                       		bcs.s	loc_19EA2
00019DA6 5428 0034                  		addq.b	#2,$34(a0)
00019DAA                            
00019DAA                            loc_19EA2:
00019DAA 52B8 F636                  		addq.l	#1,($FFFFF636).w
00019DAE 4E75                       		rts	
00019DB0                            ; ===========================================================================
00019DB0                            
00019DB0                            loc_19EA8:				; XREF: off_19E80
00019DB0 4A68 0030                  		tst.w	$30(a0)
00019DB4 6A00                       		bpl.s	loc_19F10
00019DB6 4268 0030                  		clr.w	$30(a0)
00019DBA 4EB9 0000 29B4             		jsr	(RandomNumber).l
00019DC0 0240 000C                  		andi.w	#$C,d0
00019DC4 3200                       		move.w	d0,d1
00019DC6 5441                       		addq.w	#2,d1
00019DC8 4A80                       		tst.l	d0
00019DCA 6A00                       		bpl.s	loc_19EC6
00019DCC C141                       		exg	d1,d0
00019DCE                            
00019DCE                            loc_19EC6:
00019DCE 43FA 0000                  		lea	word_19FD6(pc),a1
00019DD2 3031 0000                  		move.w	(a1,d0.w),d0
00019DD6 3231 1000                  		move.w	(a1,d1.w),d1
00019DDA 3140 0030                  		move.w	d0,$30(a0)
00019DDE 74FF                       		moveq	#-1,d2
00019DE0 3430 0038                  		move.w	$38(a0,d0.w),d2
00019DE4 2242                       		movea.l	d2,a1
00019DE6 137C 00FF 0029             		move.b	#-1,$29(a1)
00019DEC 337C FFFF 0030             		move.w	#-1,$30(a1)
00019DF2 3430 1038                  		move.w	$38(a0,d1.w),d2
00019DF6 2242                       		movea.l	d2,a1
00019DF8 137C 0001 0029             		move.b	#1,$29(a1)
00019DFE 337C 0000 0030             		move.w	#0,$30(a1)
00019E04 317C 0001 0032             		move.w	#1,$32(a0)
00019E0A 4228 0035                  		clr.b	$35(a0)
00019E0E 303C 00B7                  		move.w	#$B7,d0
00019E12 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play rumbling sound
00019E18                            
00019E18                            loc_19F10:
00019E18 4A68 0032                  		tst.w	$32(a0)
00019E1C 6B00 0000                  		bmi.w	loc_19FA6
00019E20 08A8 0000 0022             		bclr	#0,$22(a0)
00019E26 3038 D008                  		move.w	($FFFFD008).w,d0
00019E2A 9068 0008                  		sub.w	8(a0),d0
00019E2E 6500                       		bcs.s	loc_19F2E
00019E30 08E8 0000 0022             		bset	#0,$22(a0)
00019E36                            
00019E36                            loc_19F2E:
00019E36 323C 002B                  		move.w	#$2B,d1
00019E3A 343C 0014                  		move.w	#$14,d2
00019E3E 363C 0014                  		move.w	#$14,d3
00019E42 3828 0008                  		move.w	8(a0),d4
00019E46 4EB9 0000 F96C             		jsr	SolidObject
00019E4C 4A44                       		tst.w	d4
00019E4E 6E00                       		bgt.s	loc_19F50
00019E50                            
00019E50                            loc_19F48:
00019E50 4A28 0035                  		tst.b	$35(a0)
00019E54 6600                       		bne.s	loc_19F88
00019E56 6000                       		bra.s	loc_19F96
00019E58                            ; ===========================================================================
00019E58                            
00019E58                            loc_19F50:
00019E58 5E78 F636                  		addq.w	#7,($FFFFF636).w
00019E5C 0C38 0002 D01C             		cmpi.b	#2,($FFFFD01C).w
00019E62 66EC                       		bne.s	loc_19F48
00019E64 303C 0300                  		move.w	#$300,d0
00019E68 0828 0000 0022             		btst	#0,$22(a0)
00019E6E 6600                       		bne.s	loc_19F6A
00019E70 4440                       		neg.w	d0
00019E72                            
00019E72                            loc_19F6A:
00019E72 31C0 D010                  		move.w	d0,($FFFFD010).w
00019E76 4A28 0035                  		tst.b	$35(a0)
00019E7A 6600                       		bne.s	loc_19F88
00019E7C 5328 0021                  		subq.b	#1,$21(a0)
00019E80 117C 0064 0035             		move.b	#$64,$35(a0)
00019E86 303C 00AC                  		move.w	#$AC,d0
00019E8A 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
00019E90                            
00019E90                            loc_19F88:
00019E90 5328 0035                  		subq.b	#1,$35(a0)
00019E94 6700                       		beq.s	loc_19F96
00019E96 117C 0003 001C             		move.b	#3,$1C(a0)
00019E9C 6000                       		bra.s	loc_19F9C
00019E9E                            ; ===========================================================================
00019E9E                            
00019E9E                            loc_19F96:
00019E9E 117C 0001 001C             		move.b	#1,$1C(a0)
00019EA4                            
00019EA4                            loc_19F9C:
00019EA4 43FA FA64                  		lea	Ani_obj82(pc),a1
00019EA8 4EF9 0000 A6D8             		jmp	AnimateSprite
00019EAE                            ; ===========================================================================
00019EAE                            
00019EAE                            loc_19FA6:
00019EAE 4A28 0021                  		tst.b	$21(a0)
00019EB2 6700                       		beq.s	loc_19FBC
00019EB4 5428 0034                  		addq.b	#2,$34(a0)
00019EB8 317C FFFF 0030             		move.w	#-1,$30(a0)
00019EBE 4268 0032                  		clr.w	$32(a0)
00019EC2 4E75                       		rts	
00019EC4                            ; ===========================================================================
00019EC4                            
00019EC4                            loc_19FBC:
00019EC4 117C 0006 0034             		move.b	#6,$34(a0)
00019ECA 317C 25C0 0008             		move.w	#$25C0,8(a0)
00019ED0 317C 053C 000C             		move.w	#$53C,$C(a0)
00019ED6 117C 0014 0016             		move.b	#$14,$16(a0)
00019EDC 4E75                       		rts	
00019EDE                            ; ===========================================================================
00019EDE 0000 0002 0002 0004 0004+  word_19FD6:	dc.w 0,	2, 2, 4, 4, 6, 6, 0
00019EEE                            ; ===========================================================================
00019EEE                            
00019EEE                            loc_19FE6:				; XREF: off_19E80
00019EEE 70FF                       		moveq	#-1,d0
00019EF0 3028 0036                  		move.w	$36(a0),d0
00019EF4 2240                       		movea.l	d0,a1
00019EF6 4A68 0030                  		tst.w	$30(a0)
00019EFA 6A00                       		bpl.s	loc_1A000
00019EFC 4268 0030                  		clr.w	$30(a0)
00019F00 137C 00FF 0029             		move.b	#-1,$29(a1)
00019F06 6100                       		bsr.s	loc_1A020
00019F08                            
00019F08                            loc_1A000:
00019F08 700F                       		moveq	#$F,d0
00019F0A C078 FE0E                  		and.w	($FFFFFE0E).w,d0
00019F0E 6600                       		bne.s	loc_1A00A
00019F10 6100                       		bsr.s	loc_1A020
00019F12                            
00019F12                            loc_1A00A:
00019F12 4A68 0032                  		tst.w	$32(a0)
00019F16 6700                       		beq.s	locret_1A01E
00019F18 5528 0034                  		subq.b	#2,$34(a0)
00019F1C 317C FFFF 0030             		move.w	#-1,$30(a0)
00019F22 4268 0032                  		clr.w	$32(a0)
00019F26                            
00019F26                            locret_1A01E:
00019F26 4E75                       		rts	
00019F28                            ; ===========================================================================
00019F28                            
00019F28                            loc_1A020:
00019F28 303C 00B1                  		move.w	#$B1,d0
00019F2C 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play electricity sound
00019F32                            ; ===========================================================================
00019F32                            
00019F32                            loc_1A02A:				; XREF: off_19E80
00019F32 117C 0030 0017             		move.b	#$30,$17(a0)
00019F38 08E8 0000 0022             		bset	#0,$22(a0)
00019F3E 4EB9 0000 D586             		jsr	SpeedToPos
00019F44 117C 0006 001A             		move.b	#6,$1A(a0)
00019F4A 0668 0010 0012             		addi.w	#$10,$12(a0)
00019F50 0C68 059C 000C             		cmpi.w	#$59C,$C(a0)
00019F56 6500                       		bcs.s	loc_1A070
00019F58 317C 059C 000C             		move.w	#$59C,$C(a0)
00019F5E 5428 0034                  		addq.b	#2,$34(a0)
00019F62 117C 0020 0017             		move.b	#$20,$17(a0)
00019F68 317C 0100 0010             		move.w	#$100,$10(a0)
00019F6E 317C FF00 0012             		move.w	#-$100,$12(a0)
00019F74 5438 F742                  		addq.b	#2,($FFFFF742).w
00019F78                            
00019F78                            loc_1A070:
00019F78 6000 0000                  		bra.w	loc_1A166
00019F7C                            ; ===========================================================================
00019F7C                            
00019F7C                            loc_1A074:				; XREF: off_19E80
00019F7C 08E8 0000 0022             		bset	#0,$22(a0)
00019F82 117C 0004 001C             		move.b	#4,$1C(a0)
00019F88 4EB9 0000 D586             		jsr	SpeedToPos
00019F8E 0668 0010 0012             		addi.w	#$10,$12(a0)
00019F94 0C68 05A3 000C             		cmpi.w	#$5A3,$C(a0)
00019F9A 6500                       		bcs.s	loc_1A09A
00019F9C 317C FFC0 0012             		move.w	#-$40,$12(a0)
00019FA2                            
00019FA2                            loc_1A09A:
00019FA2 317C 0400 0010             		move.w	#$400,$10(a0)
00019FA8 3028 0008                  		move.w	8(a0),d0
00019FAC 9078 D008                  		sub.w	($FFFFD008).w,d0
00019FB0 6A00                       		bpl.s	loc_1A0B4
00019FB2 317C 0500 0010             		move.w	#$500,$10(a0)
00019FB8 6000 0000                  		bra.w	loc_1A0F2
00019FBC                            ; ===========================================================================
00019FBC                            
00019FBC                            loc_1A0B4:
00019FBC 0440 0070                  		subi.w	#$70,d0
00019FC0 6500                       		bcs.s	loc_1A0F2
00019FC2 0468 0100 0010             		subi.w	#$100,$10(a0)
00019FC8 5140                       		subq.w	#8,d0
00019FCA 6500                       		bcs.s	loc_1A0F2
00019FCC 0468 0100 0010             		subi.w	#$100,$10(a0)
00019FD2 5140                       		subq.w	#8,d0
00019FD4 6500                       		bcs.s	loc_1A0F2
00019FD6 0468 0080 0010             		subi.w	#$80,$10(a0)
00019FDC 5140                       		subq.w	#8,d0
00019FDE 6500                       		bcs.s	loc_1A0F2
00019FE0 0468 0080 0010             		subi.w	#$80,$10(a0)
00019FE6 5140                       		subq.w	#8,d0
00019FE8 6500                       		bcs.s	loc_1A0F2
00019FEA 0468 0080 0010             		subi.w	#$80,$10(a0)
00019FF0 0440 0038                  		subi.w	#$38,d0
00019FF4 6500                       		bcs.s	loc_1A0F2
00019FF6 4268 0010                  		clr.w	$10(a0)
00019FFA                            
00019FFA                            loc_1A0F2:
00019FFA 0C68 26A0 0008             		cmpi.w	#$26A0,8(a0)
0001A000 6500                       		bcs.s	loc_1A110
0001A002 317C 26A0 0008             		move.w	#$26A0,8(a0)
0001A008 317C 0240 0010             		move.w	#$240,$10(a0)
0001A00E 317C FB40 0012             		move.w	#-$4C0,$12(a0)
0001A014 5428 0034                  		addq.b	#2,$34(a0)
0001A018                            
0001A018                            loc_1A110:
0001A018 6000                       		bra.s	loc_1A15C
0001A01A                            ; ===========================================================================
0001A01A                            
0001A01A                            loc_1A112:				; XREF: off_19E80
0001A01A 4EB9 0000 D586             		jsr	SpeedToPos
0001A020 0C68 26E0 0008             		cmpi.w	#$26E0,8(a0)
0001A026 6500                       		bcs.s	loc_1A124
0001A028 4268 0010                  		clr.w	$10(a0)
0001A02C                            
0001A02C                            loc_1A124:
0001A02C 0668 0034 0012             		addi.w	#$34,$12(a0)
0001A032 4A68 0012                  		tst.w	$12(a0)
0001A036 6B00                       		bmi.s	loc_1A142
0001A038 0C68 0592 000C             		cmpi.w	#$592,$C(a0)
0001A03E 6500                       		bcs.s	loc_1A142
0001A040 317C 0592 000C             		move.w	#$592,$C(a0)
0001A046 4268 0012                  		clr.w	$12(a0)
0001A04A                            
0001A04A                            loc_1A142:
0001A04A 3028 0010                  		move.w	$10(a0),d0
0001A04E 8068 0012                  		or.w	$12(a0),d0
0001A052 6600                       		bne.s	loc_1A15C
0001A054 5428 0034                  		addq.b	#2,$34(a0)
0001A058 317C FE80 0012             		move.w	#-$180,$12(a0)
0001A05E 117C 0001 0021             		move.b	#1,$21(a0)
0001A064                            
0001A064                            loc_1A15C:
0001A064 43FA F8A4                  		lea	Ani_obj82(pc),a1
0001A068 4EB9 0000 A6D8             		jsr	AnimateSprite
0001A06E                            
0001A06E                            loc_1A166:
0001A06E 0C78 2700 F72A             		cmpi.w	#$2700,($FFFFF72A).w
0001A074 6C00                       		bge.s	loc_1A172
0001A076 5478 F72A                  		addq.w	#2,($FFFFF72A).w
0001A07A                            
0001A07A                            loc_1A172:
0001A07A 0C28 000C 0034             		cmpi.b	#$C,$34(a0)
0001A080 6C00                       		bge.s	locret_1A190
0001A082 323C 001B                  		move.w	#$1B,d1
0001A086 343C 0070                  		move.w	#$70,d2
0001A08A 363C 0071                  		move.w	#$71,d3
0001A08E 3828 0008                  		move.w	8(a0),d4
0001A092 4EF9 0000 F96C             		jmp	SolidObject
0001A098                            ; ===========================================================================
0001A098                            
0001A098                            locret_1A190:
0001A098 4E75                       		rts	
0001A09A                            ; ===========================================================================
0001A09A                            
0001A09A                            loc_1A192:				; XREF: off_19E80
0001A09A 217C 0001 7C1E 0004        		move.l	#Map_Eggman,4(a0)
0001A0A2 317C 0400 0002             		move.w	#$400,2(a0)
0001A0A8 117C 0000 001C             		move.b	#0,$1C(a0)
0001A0AE 08E8 0000 0022             		bset	#0,$22(a0)
0001A0B4 4EB9 0000 D586             		jsr	SpeedToPos
0001A0BA 0C68 0544 000C             		cmpi.w	#$544,$C(a0)
0001A0C0 6400                       		bcc.s	loc_1A1D0
0001A0C2 317C 0180 0010             		move.w	#$180,$10(a0)
0001A0C8 317C FFE8 0012             		move.w	#-$18,$12(a0)
0001A0CE 117C 000F 0020             		move.b	#$F,$20(a0)
0001A0D4 5428 0034                  		addq.b	#2,$34(a0)
0001A0D8                            
0001A0D8                            loc_1A1D0:
0001A0D8 6000 FF8A                  		bra.w	loc_1A15C
0001A0DC                            ; ===========================================================================
0001A0DC                            
0001A0DC                            loc_1A1D4:				; XREF: off_19E80
0001A0DC 08E8 0000 0022             		bset	#0,$22(a0)
0001A0E2 4EB9 0000 D586             		jsr	SpeedToPos
0001A0E8 4A68 0030                  		tst.w	$30(a0)
0001A0EC 6600                       		bne.s	loc_1A1FC
0001A0EE 4A28 0020                  		tst.b	$20(a0)
0001A0F2 6600                       		bne.s	loc_1A216
0001A0F4 317C 001E 0030             		move.w	#$1E,$30(a0)
0001A0FA 303C 00AC                  		move.w	#$AC,d0
0001A0FE 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play boss damage sound
0001A104                            
0001A104                            loc_1A1FC:
0001A104 5368 0030                  		subq.w	#1,$30(a0)
0001A108 6600                       		bne.s	loc_1A216
0001A10A 4A28 0022                  		tst.b	$22(a0)
0001A10E 6A00                       		bpl.s	loc_1A210
0001A110 317C 0060 0012             		move.w	#$60,$12(a0)
0001A116 6000                       		bra.s	loc_1A216
0001A118                            ; ===========================================================================
0001A118                            
0001A118                            loc_1A210:
0001A118 117C 000F 0020             		move.b	#$F,$20(a0)
0001A11E                            
0001A11E                            loc_1A216:
0001A11E 0C78 2790 D008             		cmpi.w	#$2790,($FFFFD008).w
0001A124 6D00                       		blt.s	loc_1A23A
0001A126 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w
0001A12C 31FC 0000 F602             		move.w	#0,($FFFFF602).w
0001A132 4278 D014                  		clr.w	($FFFFD014).w
0001A136 4A68 0012                  		tst.w	$12(a0)
0001A13A 6A00                       		bpl.s	loc_1A248
0001A13C 31FC 0100 F602             		move.w	#$100,($FFFFF602).w
0001A142                            
0001A142                            loc_1A23A:
0001A142 0C78 27E0 D008             		cmpi.w	#$27E0,($FFFFD008).w
0001A148 6D00                       		blt.s	loc_1A248
0001A14A 31FC 27E0 D008             		move.w	#$27E0,($FFFFD008).w
0001A150                            
0001A150                            loc_1A248:
0001A150 0C68 2900 0008             		cmpi.w	#$2900,8(a0)
0001A156 6500                       		bcs.s	loc_1A260
0001A158 4A28 0001                  		tst.b	1(a0)
0001A15C 6B00                       		bmi.s	loc_1A260
0001A15E 11FC 0018 F600             		move.b	#$18,($FFFFF600).w
0001A164 6000 FAF4                  		bra.w	Obj85_Delete
0001A168                            ; ===========================================================================
0001A168                            
0001A168                            loc_1A260:
0001A168 6000 FEFA                  		bra.w	loc_1A15C
0001A16C                            ; ===========================================================================
0001A16C                            
0001A16C                            loc_1A264:				; XREF: Obj85_Index
0001A16C 2268 0034                  		movea.l	$34(a0),a1
0001A170 1011                       		move.b	(a1),d0
0001A172 B010                       		cmp.b	(a0),d0
0001A174 6600 FAE4                  		bne.w	Obj85_Delete
0001A178 117C 0007 001C             		move.b	#7,$1C(a0)
0001A17E 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A184 6C00                       		bge.s	loc_1A280
0001A186 6000                       		bra.s	loc_1A2A6
0001A188                            ; ===========================================================================
0001A188                            
0001A188                            loc_1A280:
0001A188 4A69 0010                  		tst.w	$10(a1)
0001A18C 6700                       		beq.s	loc_1A28C
0001A18E 117C 000B 001C             		move.b	#$B,$1C(a0)
0001A194                            
0001A194                            loc_1A28C:
0001A194 43FA DA38                  		lea	Ani_Eggman(pc),a1
0001A198 4EB9 0000 A6D8             		jsr	AnimateSprite
0001A19E                            
0001A19E                            loc_1A296:
0001A19E 2268 0034                  		movea.l	$34(a0),a1
0001A1A2 3169 0008 0008             		move.w	8(a1),8(a0)
0001A1A8 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A1AE                            
0001A1AE                            loc_1A2A6:
0001A1AE 2268 0034                  		movea.l	$34(a0),a1
0001A1B2 1169 0022 0022             		move.b	$22(a1),$22(a0)
0001A1B8 7003                       		moveq	#3,d0
0001A1BA C028 0022                  		and.b	$22(a0),d0
0001A1BE 0228 00FC 0001             		andi.b	#-4,1(a0)
0001A1C4 8128 0001                  		or.b	d0,1(a0)
0001A1C8 4EF9 0000 D5AC             		jmp	DisplaySprite
0001A1CE                            ; ===========================================================================
0001A1CE                            
0001A1CE                            loc_1A2C6:				; XREF: Obj85_Index
0001A1CE 2268 0034                  		movea.l	$34(a0),a1
0001A1D2 1011                       		move.b	(a1),d0
0001A1D4 B010                       		cmp.b	(a0),d0
0001A1D6 6600 FA82                  		bne.w	Obj85_Delete
0001A1DA 0CA9 0001 7C1E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A1E2 6700                       		beq.s	loc_1A2E4
0001A1E4 117C 000A 001A             		move.b	#$A,$1A(a0)
0001A1EA 60C2                       		bra.s	loc_1A2A6
0001A1EC                            ; ===========================================================================
0001A1EC                            
0001A1EC                            loc_1A2E4:
0001A1EC 117C 0001 001C             		move.b	#1,$1C(a0)
0001A1F2 4A29 0021                  		tst.b	$21(a1)
0001A1F6 6F00                       		ble.s	loc_1A312
0001A1F8 117C 0006 001C             		move.b	#6,$1C(a0)
0001A1FE 217C 0001 7C1E 0004        		move.l	#Map_Eggman,4(a0)
0001A206 317C 0400 0002             		move.w	#$400,2(a0)
0001A20C 43FA D9C0                  		lea	Ani_Eggman(pc),a1
0001A210 4EB9 0000 A6D8             		jsr	AnimateSprite
0001A216 6000 FF86                  		bra.w	loc_1A296
0001A21A                            ; ===========================================================================
0001A21A                            
0001A21A                            loc_1A312:
0001A21A 4A28 0001                  		tst.b	1(a0)
0001A21E 6A00 FA3A                  		bpl.w	Obj85_Delete
0001A222 6100 D558                  		bsr.w	BossDefeated
0001A226 117C 0002 0018             		move.b	#2,$18(a0)
0001A22C 117C 0000 001C             		move.b	#0,$1C(a0)
0001A232 217C 0000 0000 0004        		move.l	#Map_Eggman2,4(a0)
0001A23A 317C 03A0 0002             		move.w	#$3A0,2(a0)
0001A240 43FA 0000                  		lea	Ani_obj85(pc),a1
0001A244 4EB9 0000 A6D8             		jsr	AnimateSprite
0001A24A 6000 FF52                  		bra.w	loc_1A296
0001A24E                            ; ===========================================================================
0001A24E                            
0001A24E                            loc_1A346:				; XREF: Obj85_Index
0001A24E 08E8 0000 0022             		bset	#0,$22(a0)
0001A254 2268 0034                  		movea.l	$34(a0),a1
0001A258 0CA9 0001 7C1E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A260 6700                       		beq.s	loc_1A35E
0001A262 6000 FF4A                  		bra.w	loc_1A2A6
0001A266                            ; ===========================================================================
0001A266                            
0001A266                            loc_1A35E:
0001A266 3169 0008 0008             		move.w	8(a1),8(a0)
0001A26C 3169 000C 000C             		move.w	$C(a1),$C(a0)
0001A272 4A28 001E                  		tst.b	$1E(a0)
0001A276 6600                       		bne.s	loc_1A376
0001A278 117C 0014 001E             		move.b	#$14,$1E(a0)
0001A27E                            
0001A27E                            loc_1A376:
0001A27E 5328 001E                  		subq.b	#1,$1E(a0)
0001A282 6E00                       		bgt.s	loc_1A38A
0001A284 5228 001A                  		addq.b	#1,$1A(a0)
0001A288 0C28 0002 001A             		cmpi.b	#2,$1A(a0)
0001A28E 6E00 F9CA                  		bgt.w	Obj85_Delete
0001A292                            
0001A292                            loc_1A38A:
0001A292 6000 FF0A                  		bra.w	loc_1A296
0001A296                            ; ===========================================================================
0001A296                            
0001A296                            loc_1A38E:				; XREF: Obj85_Index
0001A296 117C 000B 001A             		move.b	#$B,$1A(a0)
0001A29C 3038 D008                  		move.w	($FFFFD008).w,d0
0001A2A0 9068 0008                  		sub.w	8(a0),d0
0001A2A4 6500                       		bcs.s	loc_1A3A6
0001A2A6 4A28 0001                  		tst.b	1(a0)
0001A2AA 6A00 F9AE                  		bpl.w	Obj85_Delete
0001A2AE                            
0001A2AE                            loc_1A3A6:
0001A2AE 4EF9 0000 D5AC             		jmp	DisplaySprite
0001A2B4                            ; ===========================================================================
0001A2B4                            
0001A2B4                            loc_1A3AC:				; XREF: Obj85_Index
0001A2B4 117C 0000 001A             		move.b	#0,$1A(a0)
0001A2BA 08E8 0000 0022             		bset	#0,$22(a0)
0001A2C0 2268 0034                  		movea.l	$34(a0),a1
0001A2C4 0C29 000C 0034             		cmpi.b	#$C,$34(a1)
0001A2CA 6600                       		bne.s	loc_1A3D0
0001A2CC 0CA9 0001 7C1E 0004        		cmpi.l	#Map_Eggman,4(a1)
0001A2D4 6700 F984                  		beq.w	Obj85_Delete
0001A2D8                            
0001A2D8                            loc_1A3D0:
0001A2D8 6000 FED4                  		bra.w	loc_1A2A6
0001A2DC                            ; ===========================================================================
0001A2DC                            Ani_obj85:
0001A2DC                            	include "_anim\obj85.asm"
0001A2DC                            ; ---------------------------------------------------------------------------
0001A2DC                            ; Animation script - Eggman (FZ)
0001A2DC                            ; ---------------------------------------------------------------------------
0001A2DC 0000                       		dc.w byte_1A3D6-Ani_obj85
0001A2DE 0300 01FF                  byte_1A3D6:	dc.b 3,	0, 1, $FF
0001A2E2                            		even
0001A2E2                            		even
0001A2E2                            
0001A2E2                            Map_Eggman2:
0001A2E2                            	include "_maps\Eggman2.asm"
0001A2E2                            ; ---------------------------------------------------------------------------
0001A2E2                            ; Sprite mappings - Eggman (FZ)
0001A2E2                            ; ---------------------------------------------------------------------------
0001A2E2 0000                       		dc.w byte_1A3DE-Map_Eggman2
0001A2E4 0000                       		dc.w byte_1A3FD-Map_Eggman2
0001A2E6 06                         byte_1A3DE:	dc.b 6
0001A2E7 E408 0020 F4               		dc.b $E4, 8, 0,	$20, $F4
0001A2EC EC0D 0023 E4               		dc.b $EC, $D, 0, $23, $E4
0001A2F1 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A2F6 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A2FB FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A300 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A305 06                         byte_1A3FD:	dc.b 6
0001A306 E40A 0031 F4               		dc.b $E4, $A, 0, $31, $F4
0001A30B EC05 0023 E4               		dc.b $EC, 5, 0,	$23, $E4
0001A310 EC09 002B 04               		dc.b $EC, 9, 0,	$2B, 4
0001A315 FC05 203A E4               		dc.b $FC, 5, $20, $3A, $E4
0001A31A FC0E 203E 04               		dc.b $FC, $E, $20, $3E,	4
0001A31F 1404 204A 04               		dc.b $14, 4, $20, $4A, 4
0001A324                            		even
0001A324                            		even
0001A324                            
0001A324                            Map_FZBoss:
0001A324                            	include "_maps\FZ boss.asm"
0001A324                            ; ---------------------------------------------------------------------------
0001A324                            ; Sprite mappings - boss (FZ)
0001A324                            ; ---------------------------------------------------------------------------
0001A324 0000                       		dc.w byte_1A422-Map_FZBoss
0001A326 0000                       		dc.w byte_1A42D-Map_FZBoss
0001A328 0000                       		dc.w byte_1A43D-Map_FZBoss
0001A32A 02                         byte_1A422:	dc.b 2
0001A32B 140E 2800 F4               		dc.b $14, $E, $28, 0, $F4
0001A330 2400 280C EC               		dc.b $24, 0, $28, $C, $EC
0001A335 03                         byte_1A42D:	dc.b 3
0001A336 0C05 280D 0C               		dc.b $C, 5, $28, $D, $C
0001A33B 1C00 2811 0C               		dc.b $1C, 0, $28, $11, $C
0001A340 140D 2812 EC               		dc.b $14, $D, $28, $12,	$EC
0001A345 02                         byte_1A43D:	dc.b 2
0001A346 0C01 281A 0C               		dc.b $C, 1, $28, $1A, $C
0001A34B 140C 281C EC               		dc.b $14, $C, $28, $1C,	$EC
0001A350                            		even
0001A350                            		even
0001A350                            
0001A350                            ; ===========================================================================
0001A350                            
0001A350                            Obj84_Delete:
0001A350 4EF9 0000 D5E8             		jmp	DeleteObject
0001A356                            ; ===========================================================================
0001A356                            ; ---------------------------------------------------------------------------
0001A356                            ; Object 84 - cylinder Eggman	hides in (FZ)
0001A356                            ; ---------------------------------------------------------------------------
0001A356                            
0001A356                            Obj84:					; XREF: Obj_Index
0001A356 7000                       		moveq	#0,d0
0001A358 1028 0024                  		move.b	$24(a0),d0
0001A35C 303B 0000                  		move.w	Obj84_Index(pc,d0.w),d0
0001A360 4EFB 0000                  		jmp	Obj84_Index(pc,d0.w)
0001A364                            ; ===========================================================================
0001A364 0000                       Obj84_Index:	dc.w Obj84_Main-Obj84_Index
0001A366 0000                       		dc.w loc_1A4CE-Obj84_Index
0001A368 0000                       		dc.w loc_1A57E-Obj84_Index
0001A36A                            
0001A36A 24D0 0620                  Obj84_PosData:	dc.w $24D0, $620
0001A36E 2550 0620                  		dc.w $2550, $620
0001A372 2490 04C0                  		dc.w $2490, $4C0
0001A376 2510 04C0                  		dc.w $2510, $4C0
0001A37A                            ; ===========================================================================
0001A37A                            
0001A37A                            Obj84_Main:				; XREF: Obj84_Index
0001A37A 43FA FFEE                  		lea	Obj84_PosData(pc),a1
0001A37E 7000                       		moveq	#0,d0
0001A380 1028 0028                  		move.b	$28(a0),d0
0001A384 D040                       		add.w	d0,d0
0001A386 D2C0                       		adda.w	d0,a1
0001A388 117C 0004 0001             		move.b	#4,1(a0)
0001A38E 08E8 0007 0001             		bset	#7,1(a0)
0001A394 08E8 0004 0001             		bset	#4,1(a0)
0001A39A 317C 0300 0002             		move.w	#$300,2(a0)
0001A3A0 217C 0000 0000 0004        		move.l	#Map_obj84,4(a0)
0001A3A8 3159 0008                  		move.w	(a1)+,8(a0)
0001A3AC 3151 000C                  		move.w	(a1),$C(a0)
0001A3B0 3159 0038                  		move.w	(a1)+,$38(a0)
0001A3B4 117C 0020 0016             		move.b	#$20,$16(a0)
0001A3BA 117C 0060 0017             		move.b	#$60,$17(a0)
0001A3C0 117C 0020 0019             		move.b	#$20,$19(a0)
0001A3C6 117C 0060 0016             		move.b	#$60,$16(a0)
0001A3CC 117C 0003 0018             		move.b	#3,$18(a0)
0001A3D2 5428 0024                  		addq.b	#2,$24(a0)
0001A3D6                            
0001A3D6                            loc_1A4CE:				; XREF: Obj84_Index
0001A3D6 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A3DC 6F00                       		ble.s	loc_1A4DC
0001A3DE 08E8 0001 0001             		bset	#1,1(a0)
0001A3E4                            
0001A3E4                            loc_1A4DC:
0001A3E4 42A8 003C                  		clr.l	$3C(a0)
0001A3E8 4A28 0029                  		tst.b	$29(a0)
0001A3EC 6700                       		beq.s	loc_1A4EA
0001A3EE 5428 0024                  		addq.b	#2,$24(a0)
0001A3F2                            
0001A3F2                            loc_1A4EA:
0001A3F2 2028 003C                  		move.l	$3C(a0),d0
0001A3F6 2228 0038                  		move.l	$38(a0),d1
0001A3FA D280                       		add.l	d0,d1
0001A3FC 4841                       		swap	d1
0001A3FE 3141 000C                  		move.w	d1,$C(a0)
0001A402 0C28 0004 0024             		cmpi.b	#4,$24(a0)
0001A408 6600                       		bne.s	loc_1A524
0001A40A 4A68 0030                  		tst.w	$30(a0)
0001A40E 6A00                       		bpl.s	loc_1A524
0001A410 70F6                       		moveq	#-$A,d0
0001A412 0C28 0002 0028             		cmpi.b	#2,$28(a0)
0001A418 6F00                       		ble.s	loc_1A514
0001A41A 700E                       		moveq	#$E,d0
0001A41C                            
0001A41C                            loc_1A514:
0001A41C D240                       		add.w	d0,d1
0001A41E 2268 0034                  		movea.l	$34(a0),a1
0001A422 3341 000C                  		move.w	d1,$C(a1)
0001A426 3368 0008 0008             		move.w	8(a0),8(a1)
0001A42C                            
0001A42C                            loc_1A524:
0001A42C 323C 002B                  		move.w	#$2B,d1
0001A430 343C 0060                  		move.w	#$60,d2
0001A434 363C 0061                  		move.w	#$61,d3
0001A438 3828 0008                  		move.w	8(a0),d4
0001A43C 4EB9 0000 F96C             		jsr	SolidObject
0001A442 7000                       		moveq	#0,d0
0001A444 3228 003C                  		move.w	$3C(a0),d1
0001A448 6A00                       		bpl.s	loc_1A550
0001A44A 4441                       		neg.w	d1
0001A44C 5141                       		subq.w	#8,d1
0001A44E 6500                       		bcs.s	loc_1A55C
0001A450 5200                       		addq.b	#1,d0
0001A452 E841                       		asr.w	#4,d1
0001A454 D041                       		add.w	d1,d0
0001A456 6000                       		bra.s	loc_1A55C
0001A458                            ; ===========================================================================
0001A458                            
0001A458                            loc_1A550:
0001A458 0441 0027                  		subi.w	#$27,d1
0001A45C 6500                       		bcs.s	loc_1A55C
0001A45E 5200                       		addq.b	#1,d0
0001A460 E841                       		asr.w	#4,d1
0001A462 D041                       		add.w	d1,d0
0001A464                            
0001A464                            loc_1A55C:
0001A464 1140 001A                  		move.b	d0,$1A(a0)
0001A468 3038 D008                  		move.w	($FFFFD008).w,d0
0001A46C 9068 0008                  		sub.w	8(a0),d0
0001A470 6B00                       		bmi.s	loc_1A578
0001A472 0440 0140                  		subi.w	#$140,d0
0001A476 6B00                       		bmi.s	loc_1A578
0001A478 4A28 0001                  		tst.b	1(a0)
0001A47C 6A00 FED2                  		bpl.w	Obj84_Delete
0001A480                            
0001A480                            loc_1A578:
0001A480 4EF9 0000 D5AC             		jmp	DisplaySprite
0001A486                            ; ===========================================================================
0001A486                            
0001A486                            loc_1A57E:				; XREF: Obj84_Index
0001A486 7000                       		moveq	#0,d0
0001A488 1028 0028                  		move.b	$28(a0),d0
0001A48C 303B 0000                  		move.w	off_1A590(pc,d0.w),d0
0001A490 4EBB 0000                  		jsr	off_1A590(pc,d0.w)
0001A494 6000 FF5C                  		bra.w	loc_1A4EA
0001A498                            ; ===========================================================================
0001A498 0000                       off_1A590:	dc.w loc_1A598-off_1A590
0001A49A 0000                       		dc.w loc_1A598-off_1A590
0001A49C 0000                       		dc.w loc_1A604-off_1A590
0001A49E 0000                       		dc.w loc_1A604-off_1A590
0001A4A0                            ; ===========================================================================
0001A4A0                            
0001A4A0                            loc_1A598:				; XREF: off_1A590
0001A4A0 4A28 0029                  		tst.b	$29(a0)
0001A4A4 6600                       		bne.s	loc_1A5D4
0001A4A6 2268 0034                  		movea.l	$34(a0),a1
0001A4AA 4A29 0021                  		tst.b	$21(a1)
0001A4AE 6600                       		bne.s	loc_1A5B4
0001A4B0 6100 D2CA                  		bsr.w	BossDefeated
0001A4B4 04A8 0001 0000 003C        		subi.l	#$10000,$3C(a0)
0001A4BC                            
0001A4BC                            loc_1A5B4:
0001A4BC 06A8 0002 0000 003C        		addi.l	#$20000,$3C(a0)
0001A4C4 6400                       		bcc.s	locret_1A602
0001A4C6 42A8 003C                  		clr.l	$3C(a0)
0001A4CA 2268 0034                  		movea.l	$34(a0),a1
0001A4CE 5369 0032                  		subq.w	#1,$32(a1)
0001A4D2 4269 0030                  		clr.w	$30(a1)
0001A4D6 5528 0024                  		subq.b	#2,$24(a0)
0001A4DA 4E75                       		rts	
0001A4DC                            ; ===========================================================================
0001A4DC                            
0001A4DC                            loc_1A5D4:
0001A4DC 0C68 FFF0 003C             		cmpi.w	#-$10,$3C(a0)
0001A4E2 6C00                       		bge.s	loc_1A5E4
0001A4E4 04A8 0002 8000 003C        		subi.l	#$28000,$3C(a0)
0001A4EC                            
0001A4EC                            loc_1A5E4:
0001A4EC 04A8 0000 8000 003C        		subi.l	#$8000,$3C(a0)
0001A4F4 0C68 FF60 003C             		cmpi.w	#-$A0,$3C(a0)
0001A4FA 6E00                       		bgt.s	locret_1A602
0001A4FC 4268 003E                  		clr.w	$3E(a0)
0001A500 317C FF60 003C             		move.w	#-$A0,$3C(a0)
0001A506 4228 0029                  		clr.b	$29(a0)
0001A50A                            
0001A50A                            locret_1A602:
0001A50A 4E75                       		rts	
0001A50C                            ; ===========================================================================
0001A50C                            
0001A50C                            loc_1A604:				; XREF: off_1A590
0001A50C 08E8 0001 0001             		bset	#1,1(a0)
0001A512 4A28 0029                  		tst.b	$29(a0)
0001A516 6600                       		bne.s	loc_1A646
0001A518 2268 0034                  		movea.l	$34(a0),a1
0001A51C 4A29 0021                  		tst.b	$21(a1)
0001A520 6600                       		bne.s	loc_1A626
0001A522 6100 D258                  		bsr.w	BossDefeated
0001A526 06A8 0001 0000 003C        		addi.l	#$10000,$3C(a0)
0001A52E                            
0001A52E                            loc_1A626:
0001A52E 04A8 0002 0000 003C        		subi.l	#$20000,$3C(a0)
0001A536 6400                       		bcc.s	locret_1A674
0001A538 42A8 003C                  		clr.l	$3C(a0)
0001A53C 2268 0034                  		movea.l	$34(a0),a1
0001A540 5369 0032                  		subq.w	#1,$32(a1)
0001A544 4269 0030                  		clr.w	$30(a1)
0001A548 5528 0024                  		subq.b	#2,$24(a0)
0001A54C 4E75                       		rts	
0001A54E                            ; ===========================================================================
0001A54E                            
0001A54E                            loc_1A646:
0001A54E 0C68 0010 003C             		cmpi.w	#$10,$3C(a0)
0001A554 6D00                       		blt.s	loc_1A656
0001A556 06A8 0002 8000 003C        		addi.l	#$28000,$3C(a0)
0001A55E                            
0001A55E                            loc_1A656:
0001A55E 06A8 0000 8000 003C        		addi.l	#$8000,$3C(a0)
0001A566 0C68 00A0 003C             		cmpi.w	#$A0,$3C(a0)
0001A56C 6D00                       		blt.s	locret_1A674
0001A56E 4268 003E                  		clr.w	$3E(a0)
0001A572 317C 00A0 003C             		move.w	#$A0,$3C(a0)
0001A578 4228 0029                  		clr.b	$29(a0)
0001A57C                            
0001A57C                            locret_1A674:
0001A57C 4E75                       		rts	
0001A57E                            ; ===========================================================================
0001A57E                            ; ---------------------------------------------------------------------------
0001A57E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A57E                            ; ---------------------------------------------------------------------------
0001A57E                            Map_obj84:
0001A57E                            	include "_maps\obj84.asm"
0001A57E                            ; ---------------------------------------------------------------------------
0001A57E                            ; Sprite mappings - cylinders Eggman hides in (FZ)
0001A57E                            ; ---------------------------------------------------------------------------
0001A57E 0000 0000                  		dc.w byte_1A68E-Map_obj84, byte_1A6AD-Map_obj84
0001A582 0000 0000                  		dc.w byte_1A6D6-Map_obj84, byte_1A709-Map_obj84
0001A586 0000 0000                  		dc.w byte_1A746-Map_obj84, byte_1A788-Map_obj84
0001A58A 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A58E 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A788-Map_obj84
0001A592 0000 0000                  		dc.w byte_1A788-Map_obj84, byte_1A7CF-Map_obj84
0001A596 06                         byte_1A68E:	dc.b 6
0001A597 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A59C A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A5A1 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A5A6 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A5AB B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A5B0 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A5B5 08                         byte_1A6AD:	dc.b 8
0001A5B6 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A5BB A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A5C0 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A5C5 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A5CA B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A5CF B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A5D4 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A5D9 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A5DE 0A                         byte_1A6D6:	dc.b $A
0001A5DF A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A5E4 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A5E9 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A5EE B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A5F3 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A5F8 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A5FD D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A602 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A607 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A60C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A611 0C                         byte_1A709:	dc.b $C
0001A612 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A617 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A61C B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A621 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A626 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A62B B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A630 D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A635 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A63A F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A63F F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A644 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A649 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A64E 0D                         byte_1A746:	dc.b $D
0001A64F A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A654 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A659 B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A65E B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A663 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A668 B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A66D D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A672 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A677 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A67C F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A681 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A686 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A68B 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A690 0E                         byte_1A788:	dc.b $E
0001A691 A00D 4000 E0               		dc.b $A0, $D, $40, 0, $E0
0001A696 A00D 4800 00               		dc.b $A0, $D, $48, 0, 0
0001A69B B00C 2008 E0               		dc.b $B0, $C, $20, 8, $E0
0001A6A0 B00C 200C 00               		dc.b $B0, $C, $20, $C, 0
0001A6A5 B80F 4010 E0               		dc.b $B8, $F, $40, $10,	$E0
0001A6AA B80F 4810 00               		dc.b $B8, $F, $48, $10,	0
0001A6AF D80F 4020 E0               		dc.b $D8, $F, $40, $20,	$E0
0001A6B4 D80F 4820 00               		dc.b $D8, $F, $48, $20,	0
0001A6B9 F80F 4030 E0               		dc.b $F8, $F, $40, $30,	$E0
0001A6BE F80F 4830 00               		dc.b $F8, $F, $48, $30,	0
0001A6C3 180F 4040 E0               		dc.b $18, $F, $40, $40,	$E0
0001A6C8 180F 4840 00               		dc.b $18, $F, $48, $40,	0
0001A6CD 380F 4050 F0               		dc.b $38, $F, $40, $50,	$F0
0001A6D2 580F 4050 F0               		dc.b $58, $F, $40, $50,	$F0
0001A6D7 02                         byte_1A7CF:	dc.b 2
0001A6D8 F804 0068 F0               		dc.b $F8, 4, 0,	$68, $F0
0001A6DD 000C 006A F0               		dc.b 0,	$C, 0, $6A, $F0
0001A6E2                            		even
0001A6E2                            		even
0001A6E2                            
0001A6E2                            ; ===========================================================================
0001A6E2                            ; ---------------------------------------------------------------------------
0001A6E2                            ; Object 86 - energy balls (FZ)
0001A6E2                            ; ---------------------------------------------------------------------------
0001A6E2                            
0001A6E2                            Obj86:					; XREF: Obj_Index
0001A6E2 7000                       		moveq	#0,d0
0001A6E4 1028 0024                  		move.b	$24(a0),d0
0001A6E8 303B 0000                  		move.w	Obj86_Index(pc,d0.w),d0
0001A6EC 4EFB 0000                  		jmp	Obj86_Index(pc,d0.w)
0001A6F0                            ; ===========================================================================
0001A6F0 0000                       Obj86_Index:	dc.w Obj86_Main-Obj86_Index
0001A6F2 0000                       		dc.w Obj86_Generator-Obj86_Index
0001A6F4 0000                       		dc.w Obj86_MakeBalls-Obj86_Index
0001A6F6 0000                       		dc.w loc_1A962-Obj86_Index
0001A6F8 0000                       		dc.w loc_1A982-Obj86_Index
0001A6FA                            ; ===========================================================================
0001A6FA                            
0001A6FA                            Obj86_Main:				; XREF: Obj86_Index
0001A6FA 317C 2588 0008             		move.w	#$2588,8(a0)
0001A700 317C 053C 000C             		move.w	#$53C,$C(a0)
0001A706 317C 0300 0002             		move.w	#$300,2(a0)
0001A70C 217C 0000 0000 0004        		move.l	#Map_obj86,4(a0)
0001A714 117C 0000 001C             		move.b	#0,$1C(a0)
0001A71A 117C 0003 0018             		move.b	#3,$18(a0)
0001A720 117C 0008 0017             		move.b	#8,$17(a0)
0001A726 117C 0008 0016             		move.b	#8,$16(a0)
0001A72C 117C 0004 0001             		move.b	#4,1(a0)
0001A732 08E8 0007 0001             		bset	#7,1(a0)
0001A738 5428 0024                  		addq.b	#2,$24(a0)
0001A73C                            
0001A73C                            Obj86_Generator:			; XREF: Obj86_Index
0001A73C 2268 0034                  		movea.l	$34(a0),a1
0001A740 0C29 0006 0034             		cmpi.b	#6,$34(a1)
0001A746 6600                       		bne.s	loc_1A850
0001A748 10BC 003F                  		move.b	#$3F,(a0)
0001A74C 117C 0000 0024             		move.b	#0,$24(a0)
0001A752 4EF9 0000 D5AC             		jmp	DisplaySprite
0001A758                            ; ===========================================================================
0001A758                            
0001A758                            loc_1A850:
0001A758 117C 0000 001C             		move.b	#0,$1C(a0)
0001A75E 4A28 0029                  		tst.b	$29(a0)
0001A762 6700                       		beq.s	loc_1A86C
0001A764 5428 0024                  		addq.b	#2,$24(a0)
0001A768 117C 0001 001C             		move.b	#1,$1C(a0)
0001A76E 117C 003E 0028             		move.b	#$3E,$28(a0)
0001A774                            
0001A774                            loc_1A86C:
0001A774 323C 0013                  		move.w	#$13,d1
0001A778 343C 0008                  		move.w	#8,d2
0001A77C 363C 0011                  		move.w	#$11,d3
0001A780 3828 0008                  		move.w	8(a0),d4
0001A784 4EB9 0000 F96C             		jsr	SolidObject
0001A78A 3038 D008                  		move.w	($FFFFD008).w,d0
0001A78E 9068 0008                  		sub.w	8(a0),d0
0001A792 6B00                       		bmi.s	loc_1A89A
0001A794 0440 0140                  		subi.w	#$140,d0
0001A798 6B00                       		bmi.s	loc_1A89A
0001A79A 4A28 0001                  		tst.b	1(a0)
0001A79E 6A00 FBB0                  		bpl.w	Obj84_Delete
0001A7A2                            
0001A7A2                            loc_1A89A:
0001A7A2 43FA 0000                  		lea	Ani_obj86(pc),a1
0001A7A6 4EB9 0000 A6D8             		jsr	AnimateSprite
0001A7AC 4EF9 0000 D5AC             		jmp	DisplaySprite
0001A7B2                            ; ===========================================================================
0001A7B2                            
0001A7B2                            Obj86_MakeBalls:			; XREF: Obj86_Index
0001A7B2 4A28 0029                  		tst.b	$29(a0)
0001A7B6 6700 0000                  		beq.w	loc_1A954
0001A7BA 4228 0029                  		clr.b	$29(a0)
0001A7BE D068 0030                  		add.w	$30(a0),d0
0001A7C2 0240 001E                  		andi.w	#$1E,d0
0001A7C6 D4C0                       		adda.w	d0,a2
0001A7C8 5868 0030                  		addq.w	#4,$30(a0)
0001A7CC 4268 0032                  		clr.w	$32(a0)
0001A7D0 7403                       		moveq	#3,d2
0001A7D2                            
0001A7D2                            Obj86_Loop:
0001A7D2 4EB9 0000 DA48             		jsr	SingleObjLoad2
0001A7D8 6600 0000                  		bne.w	loc_1A954
0001A7DC 12BC 0086                  		move.b	#$86,(a1)
0001A7E0 3368 0008 0008             		move.w	8(a0),8(a1)
0001A7E6 337C 053C 000C             		move.w	#$53C,$C(a1)
0001A7EC 137C 0008 0024             		move.b	#8,$24(a1)
0001A7F2 337C 2300 0002             		move.w	#$2300,2(a1)
0001A7F8 237C 0000 0000 0004        		move.l	#Map_obj86a,4(a1)
0001A800 137C 000C 0016             		move.b	#$C,$16(a1)
0001A806 137C 000C 0017             		move.b	#$C,$17(a1)
0001A80C 137C 0000 0020             		move.b	#0,$20(a1)
0001A812 137C 0003 0018             		move.b	#3,$18(a1)
0001A818 337C 003E 0028             		move.w	#$3E,$28(a1)
0001A81E 137C 0004 0001             		move.b	#4,1(a1)
0001A824 08E9 0007 0001             		bset	#7,1(a1)
0001A82A 2348 0034                  		move.l	a0,$34(a1)
0001A82E 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001A834 3228 0032                  		move.w	$32(a0),d1
0001A838 C3FC FFB1                  		muls.w	#-$4F,d1
0001A83C 0641 2578                  		addi.w	#$2578,d1
0001A840 0240 001F                  		andi.w	#$1F,d0
0001A844 0440 0010                  		subi.w	#$10,d0
0001A848 D041                       		add.w	d1,d0
0001A84A 3340 0030                  		move.w	d0,$30(a1)
0001A84E 5268 0032                  		addq.w	#1,$32(a0)
0001A852 3168 0032 0038             		move.w	$32(a0),$38(a0)
0001A858 51CA FF78                  		dbf	d2,Obj86_Loop	; repeat sequence 3 more times
0001A85C                            
0001A85C                            loc_1A954:
0001A85C 4A68 0032                  		tst.w	$32(a0)
0001A860 6600                       		bne.s	loc_1A95E
0001A862 5428 0024                  		addq.b	#2,$24(a0)
0001A866                            
0001A866                            loc_1A95E:
0001A866 6000 FF0C                  		bra.w	loc_1A86C
0001A86A                            ; ===========================================================================
0001A86A                            
0001A86A                            loc_1A962:				; XREF: Obj86_Index
0001A86A 117C 0002 001C             		move.b	#2,$1C(a0)
0001A870 4A68 0038                  		tst.w	$38(a0)
0001A874 6600                       		bne.s	loc_1A97E
0001A876 117C 0002 0024             		move.b	#2,$24(a0)
0001A87C 2268 0034                  		movea.l	$34(a0),a1
0001A880 337C FFFF 0032             		move.w	#-1,$32(a1)
0001A886                            
0001A886                            loc_1A97E:
0001A886 6000 FEEC                  		bra.w	loc_1A86C
0001A88A                            ; ===========================================================================
0001A88A                            
0001A88A                            loc_1A982:				; XREF: Obj86_Index
0001A88A 7000                       		moveq	#0,d0
0001A88C 1028 0025                  		move.b	$25(a0),d0
0001A890 303B 0000                  		move.w	Obj86_Index2(pc,d0.w),d0
0001A894 4EBB 0000                  		jsr	Obj86_Index2(pc,d0.w)
0001A898 43FA 0000                  		lea	Ani_obj86a(pc),a1
0001A89C 4EB9 0000 A6D8             		jsr	AnimateSprite
0001A8A2 4EF9 0000 D5AC             		jmp	DisplaySprite
0001A8A8                            ; ===========================================================================
0001A8A8 0000                       Obj86_Index2:	dc.w loc_1A9A6-Obj86_Index2
0001A8AA 0000                       		dc.w loc_1A9C0-Obj86_Index2
0001A8AC 0000                       		dc.w loc_1AA1E-Obj86_Index2
0001A8AE                            ; ===========================================================================
0001A8AE                            
0001A8AE                            loc_1A9A6:				; XREF: Obj86_Index2
0001A8AE 3028 0030                  		move.w	$30(a0),d0
0001A8B2 9068 0008                  		sub.w	8(a0),d0
0001A8B6 E940                       		asl.w	#4,d0
0001A8B8 3140 0010                  		move.w	d0,$10(a0)
0001A8BC 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001A8C2 5428 0025                  		addq.b	#2,$25(a0)
0001A8C6 4E75                       		rts	
0001A8C8                            ; ===========================================================================
0001A8C8                            
0001A8C8                            loc_1A9C0:				; XREF: Obj86_Index2
0001A8C8 4A68 0010                  		tst.w	$10(a0)
0001A8CC 6700                       		beq.s	loc_1A9E6
0001A8CE 4EB9 0000 D586             		jsr	SpeedToPos
0001A8D4 3028 0008                  		move.w	8(a0),d0
0001A8D8 9068 0030                  		sub.w	$30(a0),d0
0001A8DC 6400                       		bcc.s	loc_1A9E6
0001A8DE 4268 0010                  		clr.w	$10(a0)
0001A8E2 D168 0008                  		add.w	d0,8(a0)
0001A8E6 2268 0034                  		movea.l	$34(a0),a1
0001A8EA 5369 0032                  		subq.w	#1,$32(a1)
0001A8EE                            
0001A8EE                            loc_1A9E6:
0001A8EE 117C 0000 001C             		move.b	#0,$1C(a0)
0001A8F4 5368 0028                  		subq.w	#1,$28(a0)
0001A8F8 6600                       		bne.s	locret_1AA1C
0001A8FA 5428 0025                  		addq.b	#2,$25(a0)
0001A8FE 117C 0001 001C             		move.b	#1,$1C(a0)
0001A904 117C 009A 0020             		move.b	#$9A,$20(a0)
0001A90A 317C 00B4 0028             		move.w	#$B4,$28(a0)
0001A910 7000                       		moveq	#0,d0
0001A912 3038 D008                  		move.w	($FFFFD008).w,d0
0001A916 9068 0008                  		sub.w	8(a0),d0
0001A91A 3140 0010                  		move.w	d0,$10(a0)
0001A91E 317C 0140 0012             		move.w	#$140,$12(a0)
0001A924                            
0001A924                            locret_1AA1C:
0001A924 4E75                       		rts	
0001A926                            ; ===========================================================================
0001A926                            
0001A926                            loc_1AA1E:				; XREF: Obj86_Index2
0001A926 4EB9 0000 D586             		jsr	SpeedToPos
0001A92C 0C68 05E0 000C             		cmpi.w	#$5E0,$C(a0)
0001A932 6400                       		bcc.s	loc_1AA34
0001A934 5368 0028                  		subq.w	#1,$28(a0)
0001A938 6700                       		beq.s	loc_1AA34
0001A93A 4E75                       		rts	
0001A93C                            ; ===========================================================================
0001A93C                            
0001A93C                            loc_1AA34:
0001A93C 2268 0034                  		movea.l	$34(a0),a1
0001A940 5369 0038                  		subq.w	#1,$38(a1)
0001A944 6000 FA0A                  		bra.w	Obj84_Delete
0001A948                            ; ===========================================================================
0001A948                            Ani_obj86:
0001A948                            	include "_anim\obj86.asm"
0001A948                            ; ---------------------------------------------------------------------------
0001A948                            ; Animation script - energy ball launcher (FZ)
0001A948                            ; ---------------------------------------------------------------------------
0001A948 0000                       		dc.w byte_1AA46-Ani_obj86
0001A94A 0000                       		dc.w byte_1AA4A-Ani_obj86
0001A94C 0000                       		dc.w byte_1AA50-Ani_obj86
0001A94E 7E00 FF00                  byte_1AA46:	dc.b $7E, 0, $FF, 0
0001A952 0100 0200 03FF             byte_1AA4A:	dc.b 1,	0, 2, 0, 3, $FF
0001A958 0101 0201 03FF             byte_1AA50:	dc.b 1,	1, 2, 1, 3, $FF
0001A95E                            		even
0001A95E                            		even
0001A95E                            
0001A95E                            ; ---------------------------------------------------------------------------
0001A95E                            ; Sprite mappings - energy ball	launcher (FZ)
0001A95E                            ; ---------------------------------------------------------------------------
0001A95E                            Map_obj86:
0001A95E                            	include "_maps\obj86.asm"
0001A95E                            ; ---------------------------------------------------------------------------
0001A95E                            ; Sprite mappings - energy ball	launcher (FZ)
0001A95E                            ; ---------------------------------------------------------------------------
0001A95E 0000 0000                  		dc.w byte_1AA5E-Map_obj86, byte_1AA64-Map_obj86
0001A962 0000 0000                  		dc.w byte_1AA6A-Map_obj86, byte_1AA70-Map_obj86
0001A966 01                         byte_1AA5E:	dc.b 1
0001A967 F805 006E F8               		dc.b $F8, 5, 0,	$6E, $F8
0001A96C 01                         byte_1AA64:	dc.b 1
0001A96D F805 0076 F8               		dc.b $F8, 5, 0,	$76, $F8
0001A972 01                         byte_1AA6A:	dc.b 1
0001A973 F805 0072 F8               		dc.b $F8, 5, 0,	$72, $F8
0001A978 01                         byte_1AA70:	dc.b 1
0001A979 F805 1072 F8               		dc.b $F8, 5, $10, $72, $F8
0001A97E                            		even
0001A97E                            		even
0001A97E                            
0001A97E                            Ani_obj86a:
0001A97E                            	include "_anim\obj86a.asm"
0001A97E                            ; ---------------------------------------------------------------------------
0001A97E                            ; Animation script - energy balls (FZ)
0001A97E                            ; ---------------------------------------------------------------------------
0001A97E 0000                       		dc.w byte_1AA7A-Ani_obj86a
0001A980 0000                       		dc.w byte_1AA9C-Ani_obj86a
0001A982 0100 0A08 0A01 0A09 0A06+  byte_1AA7A:	dc.b 1,	0, $A, 8, $A, 1, $A, 9,	$A, 6, $A, 7, $A, 0, $A
0001A991 080A 010A 090A 060A 070A+  		dc.b 8,	$A, 1, $A, 9, $A, 6, $A, 7, $A,	2, $A, 3, $A, 4
0001A9A0 0A05 FF00                  		dc.b $A, 5, $FF, 0
0001A9A4 0006 0501 0507 0501 05FF   byte_1AA9C:	dc.b 0,	6, 5, 1, 5, 7, 5, 1, 5,	$FF
0001A9AE                            		even
0001A9AE                            		even
0001A9AE                            
0001A9AE                            ; ---------------------------------------------------------------------------
0001A9AE                            ; Sprite mappings - energy balls (FZ)
0001A9AE                            ; ---------------------------------------------------------------------------
0001A9AE                            Map_obj86a:
0001A9AE                            	include "_maps\obj86a.asm"
0001A9AE                            ; ---------------------------------------------------------------------------
0001A9AE                            ; Sprite mappings - energy balls (FZ)
0001A9AE                            ; ---------------------------------------------------------------------------
0001A9AE 0000 0000                  		dc.w byte_1AABC-Map_obj86a, byte_1AAC7-Map_obj86a
0001A9B2 0000 0000                  		dc.w byte_1AAD2-Map_obj86a, byte_1AADD-Map_obj86a
0001A9B6 0000 0000                  		dc.w byte_1AAE8-Map_obj86a, byte_1AAF3-Map_obj86a
0001A9BA 0000 0000                  		dc.w byte_1AAFE-Map_obj86a, byte_1AB04-Map_obj86a
0001A9BE 0000 0000                  		dc.w byte_1AB0A-Map_obj86a, byte_1AB15-Map_obj86a
0001A9C2 0000                       		dc.w byte_1AB20-Map_obj86a
0001A9C4 02                         byte_1AABC:	dc.b 2
0001A9C5 F00D 007A F0               		dc.b $F0, $D, 0, $7A, $F0
0001A9CA 000D 187A F0               		dc.b 0,	$D, $18, $7A, $F0
0001A9CF 02                         byte_1AAC7:	dc.b 2
0001A9D0 F406 0082 F4               		dc.b $F4, 6, 0,	$82, $F4
0001A9D5 F402 1882 04               		dc.b $F4, 2, $18, $82, 4
0001A9DA 02                         byte_1AAD2:	dc.b 2
0001A9DB F804 0088 F8               		dc.b $F8, 4, 0,	$88, $F8
0001A9E0 0004 1088 F8               		dc.b 0,	4, $10,	$88, $F8
0001A9E5 02                         byte_1AADD:	dc.b 2
0001A9E6 F804 008A F8               		dc.b $F8, 4, 0,	$8A, $F8
0001A9EB 0004 108A F8               		dc.b 0,	4, $10,	$8A, $F8
0001A9F0 02                         byte_1AAE8:	dc.b 2
0001A9F1 F804 008C F8               		dc.b $F8, 4, 0,	$8C, $F8
0001A9F6 0004 108C F8               		dc.b 0,	4, $10,	$8C, $F8
0001A9FB 02                         byte_1AAF3:	dc.b 2
0001A9FC F406 008E F4               		dc.b $F4, 6, 0,	$8E, $F4
0001AA01 F402 188E 04               		dc.b $F4, 2, $18, $8E, 4
0001AA06 01                         byte_1AAFE:	dc.b 1
0001AA07 F805 0094 F8               		dc.b $F8, 5, 0,	$94, $F8
0001AA0C 01                         byte_1AB04:	dc.b 1
0001AA0D F805 0098 F8               		dc.b $F8, 5, 0,	$98, $F8
0001AA12 02                         byte_1AB0A:	dc.b 2
0001AA13 F00D 087A F0               		dc.b $F0, $D, 8, $7A, $F0
0001AA18 000D 107A F0               		dc.b 0,	$D, $10, $7A, $F0
0001AA1D 02                         byte_1AB15:	dc.b 2
0001AA1E F406 1082 F4               		dc.b $F4, 6, $10, $82, $F4
0001AA23 F402 0882 04               		dc.b $F4, 2, 8,	$82, 4
0001AA28 00                         byte_1AB20:	dc.b 0
0001AA2A 00                         		even
0001AA2A 00                         		even
0001AA2A                            
0001AA2A                            ; ===========================================================================
0001AA2A                            ; ---------------------------------------------------------------------------
0001AA2A                            ; Object 3E - prison capsule
0001AA2A                            ; ---------------------------------------------------------------------------
0001AA2A                            
0001AA2A                            Obj3E:					; XREF: Obj_Index
0001AA2A 7000                       		moveq	#0,d0
0001AA2C 1028 0024                  		move.b	$24(a0),d0
0001AA30 323B 0000                  		move.w	Obj3E_Index(pc,d0.w),d1
0001AA34 4EBB 1000                  		jsr	Obj3E_Index(pc,d1.w)
0001AA38 3028 0008                  		move.w	8(a0),d0
0001AA3C 0240 FF80                  		andi.w	#$FF80,d0
0001AA40 3238 F700                  		move.w	($FFFFF700).w,d1
0001AA44 0441 0080                  		subi.w	#$80,d1
0001AA48 0241 FF80                  		andi.w	#$FF80,d1
0001AA4C 9041                       		sub.w	d1,d0
0001AA4E 0C40 0280                  		cmpi.w	#$280,d0
0001AA52 6200                       		bhi.s	Obj3E_Delete
0001AA54 4EF9 0000 D5AC             		jmp	DisplaySprite
0001AA5A                            ; ===========================================================================
0001AA5A                            
0001AA5A                            Obj3E_Delete:
0001AA5A 4EF9 0000 D5E8             		jmp	DeleteObject
0001AA60                            ; ===========================================================================
0001AA60 0000                       Obj3E_Index:	dc.w Obj3E_Main-Obj3E_Index
0001AA62 0000                       		dc.w Obj3E_BodyMain-Obj3E_Index
0001AA64 0000                       		dc.w Obj3E_Switched-Obj3E_Index
0001AA66 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AA68 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AA6A 0000                       		dc.w Obj3E_Explosion-Obj3E_Index
0001AA6C 0000                       		dc.w Obj3E_Animals-Obj3E_Index
0001AA6E 0000                       		dc.w Obj3E_EndAct-Obj3E_Index
0001AA70                            
0001AA70 0220 0400                  Obj3E_Var:	dc.b 2,	$20, 4,	0	; routine, width, priority, frame
0001AA74 040C 0501                  		dc.b 4,	$C, 5, 1
0001AA78 0610 0403                  		dc.b 6,	$10, 4,	3
0001AA7C 0810 0305                  		dc.b 8,	$10, 3,	5
0001AA80                            ; ===========================================================================
0001AA80                            
0001AA80                            Obj3E_Main:				; XREF: Obj3E_Index
0001AA80 217C 0000 0000 0004        		move.l	#Map_obj3E,4(a0)
0001AA88 317C 049D 0002             		move.w	#$49D,2(a0)
0001AA8E 117C 0004 0001             		move.b	#4,1(a0)
0001AA94 3168 000C 0030             		move.w	$C(a0),$30(a0)
0001AA9A 7000                       		moveq	#0,d0
0001AA9C 1028 0028                  		move.b	$28(a0),d0
0001AAA0 E548                       		lsl.w	#2,d0
0001AAA2 43FB 00CC                  		lea	Obj3E_Var(pc,d0.w),a1
0001AAA6 1159 0024                  		move.b	(a1)+,$24(a0)
0001AAAA 1159 0019                  		move.b	(a1)+,$19(a0)
0001AAAE 1159 0018                  		move.b	(a1)+,$18(a0)
0001AAB2 1159 001A                  		move.b	(a1)+,$1A(a0)
0001AAB6 0C40 0008                  		cmpi.w	#8,d0		; is object type number	02?
0001AABA 6600                       		bne.s	Obj3E_Not02	; if not, branch
0001AABC 117C 0006 0020             		move.b	#6,$20(a0)
0001AAC2 117C 0008 0021             		move.b	#8,$21(a0)
0001AAC8                            
0001AAC8                            Obj3E_Not02:
0001AAC8 4E75                       		rts	
0001AACA                            ; ===========================================================================
0001AACA                            
0001AACA                            Obj3E_BodyMain:				; XREF: Obj3E_Index
0001AACA 0C38 0002 F7A7             		cmpi.b	#2,($FFFFF7A7).w
0001AAD0 6700                       		beq.s	Obj3E_ChkOpened
0001AAD2 323C 002B                  		move.w	#$2B,d1
0001AAD6 343C 0018                  		move.w	#$18,d2
0001AADA 363C 0018                  		move.w	#$18,d3
0001AADE 3828 0008                  		move.w	8(a0),d4
0001AAE2 4EF9 0000 F96C             		jmp	SolidObject
0001AAE8                            ; ===========================================================================
0001AAE8                            
0001AAE8                            Obj3E_ChkOpened:
0001AAE8 4A28 0025                  		tst.b	$25(a0)		; has the prison been opened?
0001AAEC 6700                       		beq.s	Obj3E_DoOpen	; if yes, branch
0001AAEE 4228 0025                  		clr.b	$25(a0)
0001AAF2 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AAF8 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AAFE                            
0001AAFE                            Obj3E_DoOpen:
0001AAFE 117C 0002 001A             		move.b	#2,$1A(a0)	; use frame number 2 (destroyed	prison)
0001AB04 4E75                       		rts	
0001AB06                            ; ===========================================================================
0001AB06                            
0001AB06                            Obj3E_Switched:				; XREF: Obj3E_Index
0001AB06 323C 0017                  		move.w	#$17,d1
0001AB0A 343C 0008                  		move.w	#8,d2
0001AB0E 363C 0008                  		move.w	#8,d3
0001AB12 3828 0008                  		move.w	8(a0),d4
0001AB16 4EB9 0000 F96C             		jsr	SolidObject
0001AB1C 43F9 0000 0000             		lea	(Ani_obj3E).l,a1
0001AB22 4EB9 0000 A6D8             		jsr	AnimateSprite
0001AB28 3168 0030 000C             		move.w	$30(a0),$C(a0)
0001AB2E 4A28 0025                  		tst.b	$25(a0)
0001AB32 6700                       		beq.s	locret_1AC60
0001AB34 5068 000C                  		addq.w	#8,$C(a0)
0001AB38 117C 000A 0024             		move.b	#$A,$24(a0)
0001AB3E 317C 003C 001E             		move.w	#$3C,$1E(a0)
0001AB44 4238 FE1E                  		clr.b	($FFFFFE1E).w	; stop time counter
0001AB48 4238 F7AA                  		clr.b	($FFFFF7AA).w	; lock screen position
0001AB4C 11FC 0001 F7CC             		move.b	#1,($FFFFF7CC).w ; lock	controls
0001AB52 31FC 0800 F602             		move.w	#$800,($FFFFF602).w ; make Sonic run to	the right
0001AB58 4228 0025                  		clr.b	$25(a0)
0001AB5C 08B8 0003 D022             		bclr	#3,($FFFFD022).w
0001AB62 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001AB68                            
0001AB68                            locret_1AC60:
0001AB68 4E75                       		rts	
0001AB6A                            ; ===========================================================================
0001AB6A                            
0001AB6A                            Obj3E_Explosion:			; XREF: Obj3E_Index
0001AB6A 7007                       		moveq	#7,d0
0001AB6C C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AB70 6600                       		bne.s	loc_1ACA0
0001AB72 4EB9 0000 DA32             		jsr	SingleObjLoad
0001AB78 6600                       		bne.s	loc_1ACA0
0001AB7A 12BC 003F                  		move.b	#$3F,0(a1)	; load explosion object
0001AB7E 3368 0008 0008             		move.w	8(a0),8(a1)
0001AB84 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AB8A 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AB90 7200                       		moveq	#0,d1
0001AB92 1200                       		move.b	d0,d1
0001AB94 E409                       		lsr.b	#2,d1
0001AB96 0441 0020                  		subi.w	#$20,d1
0001AB9A D369 0008                  		add.w	d1,8(a1)
0001AB9E E048                       		lsr.w	#8,d0
0001ABA0 E608                       		lsr.b	#3,d0
0001ABA2 D169 000C                  		add.w	d0,$C(a1)
0001ABA6                            
0001ABA6                            loc_1ACA0:
0001ABA6 5368 001E                  		subq.w	#1,$1E(a0)
0001ABAA 6700                       		beq.s	Obj3E_MakeAnimal
0001ABAC 4E75                       		rts	
0001ABAE                            ; ===========================================================================
0001ABAE                            
0001ABAE                            Obj3E_MakeAnimal:
0001ABAE 11FC 0002 F7A7             		move.b	#2,($FFFFF7A7).w
0001ABB4 117C 000C 0024             		move.b	#$C,$24(a0)	; replace explosions with animals
0001ABBA 117C 0006 001A             		move.b	#6,$1A(a0)
0001ABC0 317C 0096 001E             		move.w	#$96,$1E(a0)
0001ABC6 0668 0020 000C             		addi.w	#$20,$C(a0)
0001ABCC 7C07                       		moveq	#7,d6
0001ABCE 3A3C 009A                  		move.w	#$9A,d5
0001ABD2 78E4                       		moveq	#-$1C,d4
0001ABD4                            
0001ABD4                            Obj3E_Loop:
0001ABD4 4EB9 0000 DA32             		jsr	SingleObjLoad
0001ABDA 6600                       		bne.s	locret_1ACF8
0001ABDC 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001ABE0 3368 0008 0008             		move.w	8(a0),8(a1)
0001ABE6 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001ABEC D969 0008                  		add.w	d4,8(a1)
0001ABF0 5E44                       		addq.w	#7,d4
0001ABF2 3345 0036                  		move.w	d5,$36(a1)
0001ABF6 5145                       		subq.w	#8,d5
0001ABF8 51CE FFDA                  		dbf	d6,Obj3E_Loop	; repeat 7 more	times
0001ABFC                            
0001ABFC                            locret_1ACF8:
0001ABFC 4E75                       		rts	
0001ABFE                            ; ===========================================================================
0001ABFE                            
0001ABFE                            Obj3E_Animals:				; XREF: Obj3E_Index
0001ABFE 7007                       		moveq	#7,d0
0001AC00 C038 FE0F                  		and.b	($FFFFFE0F).w,d0
0001AC04 6600                       		bne.s	loc_1AD38
0001AC06 4EB9 0000 DA32             		jsr	SingleObjLoad
0001AC0C 6600                       		bne.s	loc_1AD38
0001AC0E 12BC 0028                  		move.b	#$28,0(a1)	; load animal object
0001AC12 3368 0008 0008             		move.w	8(a0),8(a1)
0001AC18 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AC1E 4EB9 0000 29B4             		jsr	(RandomNumber).l
0001AC24 0240 001F                  		andi.w	#$1F,d0
0001AC28 5D40                       		subq.w	#6,d0
0001AC2A 4A41                       		tst.w	d1
0001AC2C 6A00                       		bpl.s	loc_1AD2E
0001AC2E 4440                       		neg.w	d0
0001AC30                            
0001AC30                            loc_1AD2E:
0001AC30 D169 0008                  		add.w	d0,8(a1)
0001AC34 337C 000C 0036             		move.w	#$C,$36(a1)
0001AC3A                            
0001AC3A                            loc_1AD38:
0001AC3A 5368 001E                  		subq.w	#1,$1E(a0)
0001AC3E 6600                       		bne.s	locret_1AD48
0001AC40 5428 0024                  		addq.b	#2,$24(a0)
0001AC44 317C 00B4 001E             		move.w	#180,$1E(a0)
0001AC4A                            
0001AC4A                            locret_1AD48:
0001AC4A 4E75                       		rts	
0001AC4C                            ; ===========================================================================
0001AC4C                            
0001AC4C                            Obj3E_EndAct:				; XREF: Obj3E_Index
0001AC4C 703E                       		moveq	#$3E,d0
0001AC4E 7228                       		moveq	#$28,d1
0001AC50 7440                       		moveq	#$40,d2
0001AC52 43F8 D040                  		lea	($FFFFD040).w,a1 ; load	object RAM
0001AC56                            
0001AC56                            Obj3E_FindObj28:
0001AC56 B211                       		cmp.b	(a1),d1		; is object $28	(animal) loaded?
0001AC58 6700                       		beq.s	Obj3E_Obj28Found ; if yes, branch
0001AC5A D2C2                       		adda.w	d2,a1		; next object RAM
0001AC5C 51C8 FFF8                  		dbf	d0,Obj3E_FindObj28 ; repeat $3E	times
0001AC60                            
0001AC60 4EB9 0000 EC28             		jsr	GotThroughAct
0001AC66 4EF9 0000 D5E8             		jmp	DeleteObject
0001AC6C                            ; ===========================================================================
0001AC6C                            
0001AC6C                            Obj3E_Obj28Found:
0001AC6C 4E75                       		rts	
0001AC6E                            ; ===========================================================================
0001AC6E                            Ani_obj3E:
0001AC6E                            	include "_anim\obj3E.asm"
0001AC6E                            ; ---------------------------------------------------------------------------
0001AC6E                            ; Animation script - prison capsule
0001AC6E                            ; ---------------------------------------------------------------------------
0001AC6E 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AC70 0000                       		dc.w byte_1AD70-Ani_obj3E
0001AC72 0201 03FF                  byte_1AD70:	dc.b 2,	1, 3, $FF
0001AC76                            		even
0001AC76                            		even
0001AC76                            
0001AC76                            ; ---------------------------------------------------------------------------
0001AC76                            ; Sprite mappings - prison capsule
0001AC76                            ; ---------------------------------------------------------------------------
0001AC76                            Map_obj3E:
0001AC76                            	include "_maps\obj3E.asm"
0001AC76                            ; ---------------------------------------------------------------------------
0001AC76                            ; Sprite mappings - prison capsule
0001AC76                            ; ---------------------------------------------------------------------------
0001AC76 0000 0000                  		dc.w byte_1AD82-Map_obj3E, byte_1ADA6-Map_obj3E
0001AC7A 0000 0000                  		dc.w byte_1ADAC-Map_obj3E, byte_1ADCB-Map_obj3E
0001AC7E 0000 0000                  		dc.w byte_1ADD1-Map_obj3E, byte_1ADDC-Map_obj3E
0001AC82 0000                       		dc.w byte_1ADE2-Map_obj3E
0001AC84 07                         byte_1AD82:	dc.b 7
0001AC85 E00C 2000 F0               		dc.b $E0, $C, $20, 0, $F0
0001AC8A E80D 2004 E0               		dc.b $E8, $D, $20, 4, $E0
0001AC8F E80D 200C 00               		dc.b $E8, $D, $20, $C, 0
0001AC94 F80E 2014 E0               		dc.b $F8, $E, $20, $14,	$E0
0001AC99 F80E 2020 00               		dc.b $F8, $E, $20, $20,	0
0001AC9E 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001ACA3 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001ACA8 01                         byte_1ADA6:	dc.b 1
0001ACA9 F809 003C F4               		dc.b $F8, 9, 0,	$3C, $F4
0001ACAE 06                         byte_1ADAC:	dc.b 6
0001ACAF 0008 2042 E0               		dc.b 0,	8, $20,	$42, $E0
0001ACB4 080C 2045 E0               		dc.b 8,	$C, $20, $45, $E0
0001ACB9 0004 2049 10               		dc.b 0,	4, $20,	$49, $10
0001ACBE 080C 204B 00               		dc.b 8,	$C, $20, $4B, 0
0001ACC3 100D 202C E0               		dc.b $10, $D, $20, $2C,	$E0
0001ACC8 100D 2034 00               		dc.b $10, $D, $20, $34,	0
0001ACCD 01                         byte_1ADCB:	dc.b 1
0001ACCE F809 004F F4               		dc.b $F8, 9, 0,	$4F, $F4
0001ACD3 02                         byte_1ADD1:	dc.b 2
0001ACD4 E80E 2055 F0               		dc.b $E8, $E, $20, $55,	$F0
0001ACD9 000E 2061 F0               		dc.b 0,	$E, $20, $61, $F0
0001ACDE 01                         byte_1ADDC:	dc.b 1
0001ACDF F007 206D F8               		dc.b $F0, 7, $20, $6D, $F8
0001ACE4 00                         byte_1ADE2:	dc.b 0
0001ACE6 00                         		even
0001ACE6 00                         		even
0001ACE6                            
0001ACE6                            ; ---------------------------------------------------------------------------
0001ACE6                            ; Object touch response	subroutine - $20(a0) in	the object RAM
0001ACE6                            ; ---------------------------------------------------------------------------
0001ACE6                            
0001ACE6                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001ACE6                            
0001ACE6                            
0001ACE6                            TouchResponse:				; XREF: Obj01
0001ACE6 4E71                       		nop	
0001ACE8 3428 0008                  		move.w	8(a0),d2	; load Sonic's x-axis value
0001ACEC 3628 000C                  		move.w	$C(a0),d3	; load Sonic's y-axis value
0001ACF0 5142                       		subq.w	#8,d2
0001ACF2 7A00                       		moveq	#0,d5
0001ACF4 1A28 0016                  		move.b	$16(a0),d5	; load Sonic's height
0001ACF8 5705                       		subq.b	#3,d5
0001ACFA 9645                       		sub.w	d5,d3
0001ACFC 0C28 0039 001A             		cmpi.b	#$39,$1A(a0)	; is Sonic ducking?
0001AD02 6600                       		bne.s	Touch_NoDuck	; if not, branch
0001AD04 0643 000C                  		addi.w	#$C,d3
0001AD08 7A0A                       		moveq	#$A,d5
0001AD0A                            
0001AD0A                            Touch_NoDuck:
0001AD0A 383C 0010                  		move.w	#$10,d4
0001AD0E DA45                       		add.w	d5,d5
0001AD10 43F8 D800                  		lea	($FFFFD800).w,a1 ; begin checking the object RAM
0001AD14 3C3C 005F                  		move.w	#$5F,d6
0001AD18                            
0001AD18                            Touch_Loop:
0001AD18 4A29 0001                  		tst.b	1(a1)
0001AD1C 6A00                       		bpl.s	Touch_NextObj
0001AD1E 1029 0020                  		move.b	$20(a1),d0	; load touch response number
0001AD22 6600                       		bne.s	Touch_Height	; if touch response is not 0, branch
0001AD24                            
0001AD24                            Touch_NextObj:
0001AD24 43E9 0040                  		lea	$40(a1),a1	; next object RAM
0001AD28 51CE FFEE                  		dbf	d6,Touch_Loop	; repeat $5F more times
0001AD2C                            
0001AD2C 7000                       		moveq	#0,d0
0001AD2E 4E75                       		rts	
0001AD30                            ; ===========================================================================
0001AD30 1414                       Touch_Sizes:	dc.b  $14, $14		; width, height
0001AD32 0C14                       		dc.b   $C, $14
0001AD34 140C                       		dc.b  $14,  $C
0001AD36 0410                       		dc.b	4, $10
0001AD38 0C12                       		dc.b   $C, $12
0001AD3A 1010                       		dc.b  $10, $10
0001AD3C 0606                       		dc.b	6,   6
0001AD3E 180C                       		dc.b  $18,  $C
0001AD40 0C10                       		dc.b   $C, $10
0001AD42 100C                       		dc.b  $10,  $C
0001AD44 0808                       		dc.b	8,   8
0001AD46 1410                       		dc.b  $14, $10
0001AD48 1408                       		dc.b  $14,   8
0001AD4A 0E0E                       		dc.b   $E,  $E
0001AD4C 1818                       		dc.b  $18, $18
0001AD4E 2810                       		dc.b  $28, $10
0001AD50 1018                       		dc.b  $10, $18
0001AD52 0810                       		dc.b	8, $10
0001AD54 2070                       		dc.b  $20, $70
0001AD56 4020                       		dc.b  $40, $20
0001AD58 8020                       		dc.b  $80, $20
0001AD5A 2020                       		dc.b  $20, $20
0001AD5C 0808                       		dc.b	8,   8
0001AD5E 0404                       		dc.b	4,   4
0001AD60 2008                       		dc.b  $20,   8
0001AD62 0C0C                       		dc.b   $C,  $C
0001AD64 0804                       		dc.b	8,   4
0001AD66 1804                       		dc.b  $18,   4
0001AD68 2804                       		dc.b  $28,   4
0001AD6A 0408                       		dc.b	4,   8
0001AD6C 0418                       		dc.b	4, $18
0001AD6E 0428                       		dc.b	4, $28
0001AD70 0420                       		dc.b	4, $20
0001AD72 1818                       		dc.b  $18, $18
0001AD74 0C18                       		dc.b   $C, $18
0001AD76 4808                       		dc.b  $48,   8
0001AD78                            ; ===========================================================================
0001AD78                            
0001AD78                            Touch_Height:				; XREF: TouchResponse
0001AD78 0240 003F                  		andi.w	#$3F,d0
0001AD7C D040                       		add.w	d0,d0
0001AD7E 45FB 00AE                  		lea	Touch_Sizes-2(pc,d0.w),a2
0001AD82 7200                       		moveq	#0,d1
0001AD84 121A                       		move.b	(a2)+,d1
0001AD86 3029 0008                  		move.w	8(a1),d0
0001AD8A 9041                       		sub.w	d1,d0
0001AD8C 9042                       		sub.w	d2,d0
0001AD8E 6400                       		bcc.s	loc_1AE98
0001AD90 D241                       		add.w	d1,d1
0001AD92 D041                       		add.w	d1,d0
0001AD94 6500                       		bcs.s	Touch_Width
0001AD96 6000 FF8C                  		bra.w	Touch_NextObj
0001AD9A                            ; ===========================================================================
0001AD9A                            
0001AD9A                            loc_1AE98:
0001AD9A B044                       		cmp.w	d4,d0
0001AD9C 6200 FF86                  		bhi.w	Touch_NextObj
0001ADA0                            
0001ADA0                            Touch_Width:
0001ADA0 7200                       		moveq	#0,d1
0001ADA2 121A                       		move.b	(a2)+,d1
0001ADA4 3029 000C                  		move.w	$C(a1),d0
0001ADA8 9041                       		sub.w	d1,d0
0001ADAA 9043                       		sub.w	d3,d0
0001ADAC 6400                       		bcc.s	loc_1AEB6
0001ADAE D241                       		add.w	d1,d1
0001ADB0 D240                       		add.w	d0,d1
0001ADB2 6500                       		bcs.s	Touch_ChkValue
0001ADB4 6000 FF6E                  		bra.w	Touch_NextObj
0001ADB8                            ; ===========================================================================
0001ADB8                            
0001ADB8                            loc_1AEB6:
0001ADB8 B045                       		cmp.w	d5,d0
0001ADBA 6200 FF68                  		bhi.w	Touch_NextObj
0001ADBE                            
0001ADBE                            Touch_ChkValue:
0001ADBE 1229 0020                  		move.b	$20(a1),d1	; load touch response number
0001ADC2 0201 00C0                  		andi.b	#$C0,d1		; is touch response $40	or higher?
0001ADC6 6700 0000                  		beq.w	Touch_Enemy	; if not, branch
0001ADCA 0C01 00C0                  		cmpi.b	#$C0,d1		; is touch response $C0	or higher?
0001ADCE 6700 0000                  		beq.w	Touch_Special	; if yes, branch
0001ADD2 4A01                       		tst.b	d1		; is touch response $80-$BF ?
0001ADD4 6B00 0000                  		bmi.w	Touch_ChkHurt	; if yes, branch
0001ADD8                            
0001ADD8                            ; touch	response is $40-$7F
0001ADD8                            
0001ADD8 1029 0020                  		move.b	$20(a1),d0
0001ADDC 0200 003F                  		andi.b	#$3F,d0
0001ADE0 0C00 0006                  		cmpi.b	#6,d0		; is touch response $46	?
0001ADE4 6700                       		beq.s	Touch_Monitor	; if yes, branch
0001ADE6 0C68 005A 0030             		cmpi.w	#$5A,$30(a0)
0001ADEC 6400 0000                  		bcc.w	locret_1AEF2
0001ADF0 5429 0024                  		addq.b	#2,$24(a1)	; advance the object's routine counter
0001ADF4                            
0001ADF4                            locret_1AEF2:
0001ADF4 4E75                       		rts	
0001ADF6                            ; ===========================================================================
0001ADF6                            
0001ADF6                            Touch_Monitor:
0001ADF6 4A68 0012                  		tst.w	$12(a0)		; is Sonic moving upwards?
0001ADFA 6A00                       		bpl.s	loc_1AF1E	; if not, branch
0001ADFC 3028 000C                  		move.w	$C(a0),d0
0001AE00 0440 0010                  		subi.w	#$10,d0
0001AE04 B069 000C                  		cmp.w	$C(a1),d0
0001AE08 6500                       		bcs.s	locret_1AF2E
0001AE0A 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001AE0E 337C FE80 0012             		move.w	#-$180,$12(a1)
0001AE14 4A29 0025                  		tst.b	$25(a1)
0001AE18 6600                       		bne.s	locret_1AF2E
0001AE1A 5829 0025                  		addq.b	#4,$25(a1)	; advance the monitor's routine counter
0001AE1E 4E75                       		rts	
0001AE20                            ; ===========================================================================
0001AE20                            
0001AE20                            loc_1AF1E:
0001AE20 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling/jumping?
0001AE26 6600                       		bne.s	locret_1AF2E
0001AE28 4468 0012                  		neg.w	$12(a0)		; reverse Sonic's y-motion
0001AE2C 5429 0024                  		addq.b	#2,$24(a1)	; advance the monitor's routine counter
0001AE30                            
0001AE30                            locret_1AF2E:
0001AE30 4E75                       		rts	
0001AE32                            ; ===========================================================================
0001AE32                            
0001AE32                            Touch_Enemy:				; XREF: Touch_ChkValue
0001AE32 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001AE36 6600                       		bne.s	loc_1AF40	; if yes, branch
0001AE38 0C28 0002 001C             		cmpi.b	#2,$1C(a0)	; is Sonic rolling?
0001AE3E 6600 0000                  		bne.w	Touch_ChkHurt	; if not, branch
0001AE42                            
0001AE42                            loc_1AF40:
0001AE42 4A29 0021                  		tst.b	$21(a1)
0001AE46 6700                       		beq.s	Touch_KillEnemy
0001AE48 4468 0010                  		neg.w	$10(a0)
0001AE4C 4468 0012                  		neg.w	$12(a0)
0001AE50 E0E8 0010                  		asr	$10(a0)
0001AE54 E0E8 0012                  		asr	$12(a0)
0001AE58 137C 0000 0020             		move.b	#0,$20(a1)
0001AE5E 5329 0021                  		subq.b	#1,$21(a1)
0001AE62 6600                       		bne.s	locret_1AF68
0001AE64 08E9 0007 0022             		bset	#7,$22(a1)
0001AE6A                            
0001AE6A                            locret_1AF68:
0001AE6A 4E75                       		rts	
0001AE6C                            ; ===========================================================================
0001AE6C                            
0001AE6C                            Touch_KillEnemy:
0001AE6C 08E9 0007 0022             		bset	#7,$22(a1)
0001AE72 7000                       		moveq	#0,d0
0001AE74 3038 F7D0                  		move.w	($FFFFF7D0).w,d0
0001AE78 5478 F7D0                  		addq.w	#2,($FFFFF7D0).w ; add 2 to item bonus counter
0001AE7C 0C40 0006                  		cmpi.w	#6,d0
0001AE80 6500                       		bcs.s	loc_1AF82
0001AE82 7006                       		moveq	#6,d0
0001AE84                            
0001AE84                            loc_1AF82:
0001AE84 3340 003E                  		move.w	d0,$3E(a1)
0001AE88 303B 0000                  		move.w	Enemy_Points(pc,d0.w),d0
0001AE8C 0C78 0020 F7D0             		cmpi.w	#$20,($FFFFF7D0).w ; have 16 enemies been destroyed?
0001AE92 6500                       		bcs.s	loc_1AF9C	; if not, branch
0001AE94 303C 03E8                  		move.w	#1000,d0	; fix bonus to 10000
0001AE98 337C 000A 003E             		move.w	#$A,$3E(a1)
0001AE9E                            
0001AE9E                            loc_1AF9C:
0001AE9E 6100 0000                  		bsr.w	AddPoints
0001AEA2 12BC 0027                  		move.b	#$27,0(a1)	; change object	to points
0001AEA6 137C 0000 0024             		move.b	#0,$24(a1)
0001AEAC 4A68 0012                  		tst.w	$12(a0)
0001AEB0 6B00                       		bmi.s	loc_1AFC2
0001AEB2 3028 000C                  		move.w	$C(a0),d0
0001AEB6 B069 000C                  		cmp.w	$C(a1),d0
0001AEBA 6400                       		bcc.s	loc_1AFCA
0001AEBC 4468 0012                  		neg.w	$12(a0)
0001AEC0 4E75                       		rts	
0001AEC2                            ; ===========================================================================
0001AEC2                            
0001AEC2                            loc_1AFC2:
0001AEC2 0668 0100 0012             		addi.w	#$100,$12(a0)
0001AEC8 4E75                       		rts	
0001AECA                            ; ===========================================================================
0001AECA                            
0001AECA                            loc_1AFCA:
0001AECA 0468 0100 0012             		subi.w	#$100,$12(a0)
0001AED0 4E75                       		rts	
0001AED2                            ; ===========================================================================
0001AED2 000A 0014 0032 0064        Enemy_Points:	dc.w 10, 20, 50, 100
0001AEDA                            ; ===========================================================================
0001AEDA                            
0001AEDA                            loc_1AFDA:				; XREF: Touch_CatKiller
0001AEDA 08E9 0007 0022             		bset	#7,$22(a1)
0001AEE0                            
0001AEE0                            Touch_ChkHurt:				; XREF: Touch_ChkValue
0001AEE0 4A38 FE2D                  		tst.b	($FFFFFE2D).w	; is Sonic invincible?
0001AEE4 6700                       		beq.s	Touch_Hurt	; if not, branch
0001AEE6                            
0001AEE6                            loc_1AFE6:				; XREF: Touch_Hurt
0001AEE6 70FF                       		moveq	#-1,d0
0001AEE8 4E75                       		rts	
0001AEEA                            ; ===========================================================================
0001AEEA                            
0001AEEA                            Touch_Hurt:				; XREF: Touch_ChkHurt
0001AEEA 4E71                       		nop	
0001AEEC 4A68 0030                  		tst.w	$30(a0)
0001AEF0 66F4                       		bne.s	loc_1AFE6
0001AEF2 2449                       		movea.l	a1,a2
0001AEF4                            
0001AEF4                            ; End of function TouchResponse
0001AEF4                            ; continue straight to HurtSonic
0001AEF4                            
0001AEF4                            ; ---------------------------------------------------------------------------
0001AEF4                            ; Hurting Sonic	subroutine
0001AEF4                            ; ---------------------------------------------------------------------------
0001AEF4                            
0001AEF4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AEF4                            
0001AEF4                            
0001AEF4                            HurtSonic:
0001AEF4 4A38 FE2C                  		tst.b	($FFFFFE2C).w	; does Sonic have a shield?
0001AEF8 6600                       		bne.s	Hurt_Shield	; if yes, branch
0001AEFA 4A78 FE20                  		tst.w	($FFFFFE20).w	; does Sonic have any rings?
0001AEFE 6700 0000                  		beq.w	Hurt_NoRings	; if not, branch
0001AF02 4EB9 0000 DA32             		jsr	SingleObjLoad
0001AF08 6600                       		bne.s	Hurt_Shield
0001AF0A 12BC 0037                  		move.b	#$37,0(a1)	; load bouncing	multi rings object
0001AF0E 3368 0008 0008             		move.w	8(a0),8(a1)
0001AF14 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001AF1A                            
0001AF1A                            Hurt_Shield:
0001AF1A 11FC 0000 FE2C             		move.b	#0,($FFFFFE2C).w ; remove shield
0001AF20 117C 0004 0024             		move.b	#4,$24(a0)
0001AF26 6100 87D6                  		bsr.w	Sonic_ResetOnFloor
0001AF2A 08E8 0001 0022             		bset	#1,$22(a0)
0001AF30 317C FC00 0012             		move.w	#-$400,$12(a0)	; make Sonic bounce away from the object
0001AF36 317C FE00 0010             		move.w	#-$200,$10(a0)
0001AF3C 0828 0006 0022             		btst	#6,$22(a0)
0001AF42 6700                       		beq.s	Hurt_Reverse
0001AF44 317C FE00 0012             		move.w	#-$200,$12(a0)
0001AF4A 317C FF00 0010             		move.w	#-$100,$10(a0)
0001AF50                            
0001AF50                            Hurt_Reverse:
0001AF50 3028 0008                  		move.w	8(a0),d0
0001AF54 B06A 0008                  		cmp.w	8(a2),d0
0001AF58 6500                       		bcs.s	Hurt_ChkSpikes	; if Sonic is left of the object, branch
0001AF5A 4468 0010                  		neg.w	$10(a0)		; if Sonic is right of the object, reverse
0001AF5E                            
0001AF5E                            Hurt_ChkSpikes:
0001AF5E 317C 0000 0014             		move.w	#0,$14(a0)
0001AF64 117C 001A 001C             		move.b	#$1A,$1C(a0)
0001AF6A 317C 0078 0030             		move.w	#$78,$30(a0)
0001AF70 303C 00A3                  		move.w	#$A3,d0		; load normal damage sound
0001AF74 0C12 0036                  		cmpi.b	#$36,(a2)	; was damage caused by spikes?
0001AF78 6600                       		bne.s	Hurt_Sound	; if not, branch
0001AF7A 0C12 0016                  		cmpi.b	#$16,(a2)	; was damage caused by LZ harpoon?
0001AF7E 6600                       		bne.s	Hurt_Sound	; if not, branch
0001AF80 303C 00A6                  		move.w	#$A6,d0		; load spikes damage sound
0001AF84                            
0001AF84                            Hurt_Sound:
0001AF84 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001AF8A 70FF                       		moveq	#-1,d0
0001AF8C 4E75                       		rts	
0001AF8E                            ; ===========================================================================
0001AF8E                            
0001AF8E                            Hurt_NoRings:
0001AF8E 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat on?
0001AF92 6600 FF86                  		bne.w	Hurt_Shield	; if yes, branch
0001AF96                            ; End of function HurtSonic
0001AF96                            
0001AF96                            ; ---------------------------------------------------------------------------
0001AF96                            ; Subroutine to	kill Sonic
0001AF96                            ; ---------------------------------------------------------------------------
0001AF96                            
0001AF96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AF96                            
0001AF96                            
0001AF96                            KillSonic:
0001AF96 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	active?
0001AF9A 6600                       		bne.s	Kill_NoDeath	; if yes, branch
0001AF9C 11FC 0000 FE2D             		move.b	#0,($FFFFFE2D).w ; remove invincibility
0001AFA2 117C 0006 0024             		move.b	#6,$24(a0)
0001AFA8 6100 8754                  		bsr.w	Sonic_ResetOnFloor
0001AFAC 08E8 0001 0022             		bset	#1,$22(a0)
0001AFB2 317C F900 0012             		move.w	#-$700,$12(a0)
0001AFB8 317C 0000 0010             		move.w	#0,$10(a0)
0001AFBE 317C 0000 0014             		move.w	#0,$14(a0)
0001AFC4 3168 000C 0038             		move.w	$C(a0),$38(a0)
0001AFCA 117C 0018 001C             		move.b	#$18,$1C(a0)
0001AFD0 08E8 0007 0002             		bset	#7,2(a0)
0001AFD6 303C 00A3                  		move.w	#$A3,d0		; play normal death sound
0001AFDA 0C12 0036                  		cmpi.b	#$36,(a2)	; check	if you were killed by spikes
0001AFDE 6600                       		bne.s	Kill_Sound
0001AFE0 303C 00A6                  		move.w	#$A6,d0		; play spikes death sound
0001AFE4                            
0001AFE4                            Kill_Sound:
0001AFE4 4EB9 0000 139C             		jsr	(PlaySound_Special).l
0001AFEA                            
0001AFEA                            Kill_NoDeath:
0001AFEA 70FF                       		moveq	#-1,d0
0001AFEC 4E75                       		rts	
0001AFEE                            ; End of function KillSonic
0001AFEE                            
0001AFEE                            
0001AFEE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001AFEE                            
0001AFEE                            
0001AFEE                            Touch_Special:				; XREF: Touch_ChkValue
0001AFEE 1229 0020                  		move.b	$20(a1),d1
0001AFF2 0201 003F                  		andi.b	#$3F,d1
0001AFF6 0C01 000B                  		cmpi.b	#$B,d1		; is touch response $CB	?
0001AFFA 6700                       		beq.s	Touch_CatKiller	; if yes, branch
0001AFFC 0C01 000C                  		cmpi.b	#$C,d1		; is touch response $CC	?
0001B000 6700                       		beq.s	Touch_Yadrin	; if yes, branch
0001B002 0C01 0017                  		cmpi.b	#$17,d1		; is touch response $D7	?
0001B006 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B008 0C01 0021                  		cmpi.b	#$21,d1		; is touch response $E1	?
0001B00C 6700                       		beq.s	Touch_D7orE1	; if yes, branch
0001B00E 4E75                       		rts	
0001B010                            ; ===========================================================================
0001B010                            
0001B010                            Touch_CatKiller:			; XREF: Touch_Special
0001B010 6000 FEC8                  		bra.w	loc_1AFDA
0001B014                            ; ===========================================================================
0001B014                            
0001B014                            Touch_Yadrin:				; XREF: Touch_Special
0001B014 9A40                       		sub.w	d0,d5
0001B016 0C45 0008                  		cmpi.w	#8,d5
0001B01A 6400                       		bcc.s	loc_1B144
0001B01C 3029 0008                  		move.w	8(a1),d0
0001B020 5940                       		subq.w	#4,d0
0001B022 0829 0000 0022             		btst	#0,$22(a1)
0001B028 6700                       		beq.s	loc_1B130
0001B02A 0440 0010                  		subi.w	#$10,d0
0001B02E                            
0001B02E                            loc_1B130:
0001B02E 9042                       		sub.w	d2,d0
0001B030 6400                       		bcc.s	loc_1B13C
0001B032 0640 0018                  		addi.w	#$18,d0
0001B036 6500                       		bcs.s	loc_1B140
0001B038 6000                       		bra.s	loc_1B144
0001B03A                            ; ===========================================================================
0001B03A                            
0001B03A                            loc_1B13C:
0001B03A B044                       		cmp.w	d4,d0
0001B03C 6200                       		bhi.s	loc_1B144
0001B03E                            
0001B03E                            loc_1B140:
0001B03E 6000 FEA0                  		bra.w	Touch_ChkHurt
0001B042                            ; ===========================================================================
0001B042                            
0001B042                            loc_1B144:
0001B042 6000 FDEE                  		bra.w	Touch_Enemy
0001B046                            ; ===========================================================================
0001B046                            
0001B046                            Touch_D7orE1:				; XREF: Touch_Special
0001B046 5229 0021                  		addq.b	#1,$21(a1)
0001B04A 4E75                       		rts	
0001B04C                            ; End of function Touch_Special
0001B04C                            
0001B04C                            ; ---------------------------------------------------------------------------
0001B04C                            ; Subroutine to	show the special stage layout
0001B04C                            ; ---------------------------------------------------------------------------
0001B04C                            
0001B04C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B04C                            
0001B04C                            
0001B04C                            SS_ShowLayout:				; XREF: SpecialStage
0001B04C 6100 0000                  		bsr.w	SS_AniWallsRings
0001B050 6100 0000                  		bsr.w	SS_AniItems
0001B054 3F05                       		move.w	d5,-(sp)
0001B056 43F8 8000                  		lea	($FFFF8000).w,a1
0001B05A 1038 F780                  		move.b	($FFFFF780).w,d0
0001B05E 0200 00FC                  		andi.b	#$FC,d0
0001B062 4EB9 0000 29DA             		jsr	(CalcSine).l
0001B068 3800                       		move.w	d0,d4
0001B06A 3A01                       		move.w	d1,d5
0001B06C C9FC 0018                  		muls.w	#$18,d4
0001B070 CBFC 0018                  		muls.w	#$18,d5
0001B074 7400                       		moveq	#0,d2
0001B076 3438 F700                  		move.w	($FFFFF700).w,d2
0001B07A 84FC 0018                  		divu.w	#$18,d2
0001B07E 4842                       		swap	d2
0001B080 4442                       		neg.w	d2
0001B082 0642 FF4C                  		addi.w	#-$B4,d2
0001B086 7600                       		moveq	#0,d3
0001B088 3638 F704                  		move.w	($FFFFF704).w,d3
0001B08C 86FC 0018                  		divu.w	#$18,d3
0001B090 4843                       		swap	d3
0001B092 4443                       		neg.w	d3
0001B094 0643 FF4C                  		addi.w	#-$B4,d3
0001B098 3E3C 000F                  		move.w	#$F,d7
0001B09C                            
0001B09C                            loc_1B19E:
0001B09C 48A7 E000                  		movem.w	d0-d2,-(sp)
0001B0A0 48A7 C000                  		movem.w	d0-d1,-(sp)
0001B0A4 4440                       		neg.w	d0
0001B0A6 C3C2                       		muls.w	d2,d1
0001B0A8 C1C3                       		muls.w	d3,d0
0001B0AA 2C00                       		move.l	d0,d6
0001B0AC DC81                       		add.l	d1,d6
0001B0AE 4C9F 0003                  		movem.w	(sp)+,d0-d1
0001B0B2 C1C2                       		muls.w	d2,d0
0001B0B4 C3C3                       		muls.w	d3,d1
0001B0B6 D280                       		add.l	d0,d1
0001B0B8 2406                       		move.l	d6,d2
0001B0BA 3C3C 000F                  		move.w	#$F,d6
0001B0BE                            
0001B0BE                            loc_1B1C0:
0001B0BE 2002                       		move.l	d2,d0
0001B0C0 E080                       		asr.l	#8,d0
0001B0C2 32C0                       		move.w	d0,(a1)+
0001B0C4 2001                       		move.l	d1,d0
0001B0C6 E080                       		asr.l	#8,d0
0001B0C8 32C0                       		move.w	d0,(a1)+
0001B0CA D485                       		add.l	d5,d2
0001B0CC D284                       		add.l	d4,d1
0001B0CE 51CE FFEE                  		dbf	d6,loc_1B1C0
0001B0D2                            
0001B0D2 4C9F 0007                  		movem.w	(sp)+,d0-d2
0001B0D6 0643 0018                  		addi.w	#$18,d3
0001B0DA 51CF FFC0                  		dbf	d7,loc_1B19E
0001B0DE                            
0001B0DE 3A1F                       		move.w	(sp)+,d5
0001B0E0 41F9 00FF 0000             		lea	($FF0000).l,a0
0001B0E6 7000                       		moveq	#0,d0
0001B0E8 3038 F704                  		move.w	($FFFFF704).w,d0
0001B0EC 80FC 0018                  		divu.w	#$18,d0
0001B0F0 C0FC 0080                  		mulu.w	#$80,d0
0001B0F4 D1C0                       		adda.l	d0,a0
0001B0F6 7000                       		moveq	#0,d0
0001B0F8 3038 F700                  		move.w	($FFFFF700).w,d0
0001B0FC 80FC 0018                  		divu.w	#$18,d0
0001B100 D0C0                       		adda.w	d0,a0
0001B102 49F8 8000                  		lea	($FFFF8000).w,a4
0001B106 3E3C 000F                  		move.w	#$F,d7
0001B10A                            
0001B10A                            loc_1B20C:
0001B10A 3C3C 000F                  		move.w	#$F,d6
0001B10E                            
0001B10E                            loc_1B210:
0001B10E 7000                       		moveq	#0,d0
0001B110 1018                       		move.b	(a0)+,d0
0001B112 6700                       		beq.s	loc_1B268
0001B114 0C00 004E                  		cmpi.b	#$4E,d0
0001B118 6200                       		bhi.s	loc_1B268
0001B11A 3614                       		move.w	(a4),d3
0001B11C 0643 0120                  		addi.w	#$120,d3
0001B120 0C43 0070                  		cmpi.w	#$70,d3
0001B124 6500                       		bcs.s	loc_1B268
0001B126 0C43 01D0                  		cmpi.w	#$1D0,d3
0001B12A 6400                       		bcc.s	loc_1B268
0001B12C 342C 0002                  		move.w	2(a4),d2
0001B130 0642 00F0                  		addi.w	#$F0,d2
0001B134 0C42 0070                  		cmpi.w	#$70,d2
0001B138 6500                       		bcs.s	loc_1B268
0001B13A 0C42 0170                  		cmpi.w	#$170,d2
0001B13E 6400                       		bcc.s	loc_1B268
0001B140 4BF9 00FF 4000             		lea	($FF4000).l,a5
0001B146 E748                       		lsl.w	#3,d0
0001B148 4BF5 0000                  		lea	(a5,d0.w),a5
0001B14C 225D                       		movea.l	(a5)+,a1
0001B14E 321D                       		move.w	(a5)+,d1
0001B150 D241                       		add.w	d1,d1
0001B152 D2F1 1000                  		adda.w	(a1,d1.w),a1
0001B156 365D                       		movea.w	(a5)+,a3
0001B158 7200                       		moveq	#0,d1
0001B15A 1219                       		move.b	(a1)+,d1
0001B15C 5301                       		subq.b	#1,d1
0001B15E 6B00                       		bmi.s	loc_1B268
0001B160 4EB9 0000 D70A             		jsr	sub_D762
0001B166                            
0001B166                            loc_1B268:
0001B166 584C                       		addq.w	#4,a4
0001B168 51CE FFA4                  		dbf	d6,loc_1B210
0001B16C                            
0001B16C 41E8 0070                  		lea	$70(a0),a0
0001B170 51CF FF98                  		dbf	d7,loc_1B20C
0001B174                            
0001B174 11C5 F62C                  		move.b	d5,($FFFFF62C).w
0001B178 0C05 0050                  		cmpi.b	#$50,d5
0001B17C 6700                       		beq.s	loc_1B288
0001B17E 24BC 0000 0000             		move.l	#0,(a2)
0001B184 4E75                       		rts	
0001B186                            ; ===========================================================================
0001B186                            
0001B186                            loc_1B288:
0001B186 157C 0000 FFFB             		move.b	#0,-5(a2)
0001B18C 4E75                       		rts	
0001B18E                            ; End of function SS_ShowLayout
0001B18E                            
0001B18E                            ; ---------------------------------------------------------------------------
0001B18E                            ; Subroutine to	animate	walls and rings	in the special stage
0001B18E                            ; ---------------------------------------------------------------------------
0001B18E                            
0001B18E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B18E                            
0001B18E                            
0001B18E                            SS_AniWallsRings:			; XREF: SS_ShowLayout
0001B18E 43F9 00FF 400C             		lea	($FF400C).l,a1
0001B194 7000                       		moveq	#0,d0
0001B196 1038 F780                  		move.b	($FFFFF780).w,d0
0001B19A E408                       		lsr.b	#2,d0
0001B19C 0240 000F                  		andi.w	#$F,d0
0001B1A0 7223                       		moveq	#$23,d1
0001B1A2                            
0001B1A2                            loc_1B2A4:
0001B1A2 3280                       		move.w	d0,(a1)
0001B1A4 5049                       		addq.w	#8,a1
0001B1A6 51C9 FFFA                  		dbf	d1,loc_1B2A4
0001B1AA                            
0001B1AA 43F9 00FF 4005             		lea	($FF4005).l,a1
0001B1B0 5338 FEC2                  		subq.b	#1,($FFFFFEC2).w
0001B1B4 6A00                       		bpl.s	loc_1B2C8
0001B1B6 11FC 0007 FEC2             		move.b	#7,($FFFFFEC2).w
0001B1BC 5238 FEC3                  		addq.b	#1,($FFFFFEC3).w
0001B1C0 0238 0003 FEC3             		andi.b	#3,($FFFFFEC3).w
0001B1C6                            
0001B1C6                            loc_1B2C8:
0001B1C6 1378 FEC3 01D0             		move.b	($FFFFFEC3).w,$1D0(a1)
0001B1CC 5338 FEC4                  		subq.b	#1,($FFFFFEC4).w
0001B1D0 6A00                       		bpl.s	loc_1B2E4
0001B1D2 11FC 0007 FEC4             		move.b	#7,($FFFFFEC4).w
0001B1D8 5238 FEC5                  		addq.b	#1,($FFFFFEC5).w
0001B1DC 0238 0001 FEC5             		andi.b	#1,($FFFFFEC5).w
0001B1E2                            
0001B1E2                            loc_1B2E4:
0001B1E2 1038 FEC5                  		move.b	($FFFFFEC5).w,d0
0001B1E6 1340 0138                  		move.b	d0,$138(a1)
0001B1EA 1340 0160                  		move.b	d0,$160(a1)
0001B1EE 1340 0148                  		move.b	d0,$148(a1)
0001B1F2 1340 0150                  		move.b	d0,$150(a1)
0001B1F6 1340 01D8                  		move.b	d0,$1D8(a1)
0001B1FA 1340 01E0                  		move.b	d0,$1E0(a1)
0001B1FE 1340 01E8                  		move.b	d0,$1E8(a1)
0001B202 1340 01F0                  		move.b	d0,$1F0(a1)
0001B206 1340 01F8                  		move.b	d0,$1F8(a1)
0001B20A 1340 0200                  		move.b	d0,$200(a1)
0001B20E 5338 FEC6                  		subq.b	#1,($FFFFFEC6).w
0001B212 6A00                       		bpl.s	loc_1B326
0001B214 11FC 0004 FEC6             		move.b	#4,($FFFFFEC6).w
0001B21A 5238 FEC7                  		addq.b	#1,($FFFFFEC7).w
0001B21E 0238 0003 FEC7             		andi.b	#3,($FFFFFEC7).w
0001B224                            
0001B224                            loc_1B326:
0001B224 1038 FEC7                  		move.b	($FFFFFEC7).w,d0
0001B228 1340 0168                  		move.b	d0,$168(a1)
0001B22C 1340 0170                  		move.b	d0,$170(a1)
0001B230 1340 0178                  		move.b	d0,$178(a1)
0001B234 1340 0180                  		move.b	d0,$180(a1)
0001B238 5338 FEC0                  		subq.b	#1,($FFFFFEC0).w
0001B23C 6A00                       		bpl.s	loc_1B350
0001B23E 11FC 0007 FEC0             		move.b	#7,($FFFFFEC0).w
0001B244 5338 FEC1                  		subq.b	#1,($FFFFFEC1).w
0001B248 0238 0007 FEC1             		andi.b	#7,($FFFFFEC1).w
0001B24E                            
0001B24E                            loc_1B350:
0001B24E 43F9 00FF 4016             		lea	($FF4016).l,a1
0001B254 41F9 0000 0000             		lea	(SS_WaRiVramSet).l,a0
0001B25A 7000                       		moveq	#0,d0
0001B25C 1038 FEC1                  		move.b	($FFFFFEC1).w,d0
0001B260 D040                       		add.w	d0,d0
0001B262 41F0 0000                  		lea	(a0,d0.w),a0
0001B266 3290                       		move.w	(a0),(a1)
0001B268 3368 0002 0008             		move.w	2(a0),8(a1)
0001B26E 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B274 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B27A 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B280 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B286 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B28C 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B292 D0FC 0020                  		adda.w	#$20,a0
0001B296 D2FC 0048                  		adda.w	#$48,a1
0001B29A 3290                       		move.w	(a0),(a1)
0001B29C 3368 0002 0008             		move.w	2(a0),8(a1)
0001B2A2 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B2A8 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B2AE 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B2B4 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B2BA 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B2C0 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B2C6 D0FC 0020                  		adda.w	#$20,a0
0001B2CA D2FC 0048                  		adda.w	#$48,a1
0001B2CE 3290                       		move.w	(a0),(a1)
0001B2D0 3368 0002 0008             		move.w	2(a0),8(a1)
0001B2D6 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B2DC 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B2E2 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B2E8 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B2EE 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B2F4 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B2FA D0FC 0020                  		adda.w	#$20,a0
0001B2FE D2FC 0048                  		adda.w	#$48,a1
0001B302 3290                       		move.w	(a0),(a1)
0001B304 3368 0002 0008             		move.w	2(a0),8(a1)
0001B30A 3368 0004 0010             		move.w	4(a0),$10(a1)
0001B310 3368 0006 0018             		move.w	6(a0),$18(a1)
0001B316 3368 0008 0020             		move.w	8(a0),$20(a1)
0001B31C 3368 000A 0028             		move.w	$A(a0),$28(a1)
0001B322 3368 000C 0030             		move.w	$C(a0),$30(a1)
0001B328 3368 000E 0038             		move.w	$E(a0),$38(a1)
0001B32E D0FC 0020                  		adda.w	#$20,a0
0001B332 D2FC 0048                  		adda.w	#$48,a1
0001B336 4E75                       		rts	
0001B338                            ; End of function SS_AniWallsRings
0001B338                            
0001B338                            ; ===========================================================================
0001B338 0142 6142 0142 0142 0142+  SS_WaRiVramSet:	dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B348 0142 6142 0142 0142 0142+  		dc.w $142, $6142, $142,	$142, $142, $142, $142,	$6142
0001B358 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B368 2142 0142 2142 2142 2142+  		dc.w $2142, $142, $2142, $2142,	$2142, $2142, $2142, $142
0001B378 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B388 4142 2142 4142 4142 4142+  		dc.w $4142, $2142, $4142, $4142, $4142,	$4142, $4142, $2142
0001B398 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B3A8 6142 4142 6142 6142 6142+  		dc.w $6142, $4142, $6142, $6142, $6142,	$6142, $6142, $4142
0001B3B8                            ; ---------------------------------------------------------------------------
0001B3B8                            ; Subroutine to	remove items when you collect them in the special stage
0001B3B8                            ; ---------------------------------------------------------------------------
0001B3B8                            
0001B3B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3B8                            
0001B3B8                            
0001B3B8                            SS_RemoveCollectedItem:			; XREF: Obj09_ChkItems
0001B3B8 45F9 00FF 4400             		lea	($FF4400).l,a2
0001B3BE 303C 001F                  		move.w	#$1F,d0
0001B3C2                            
0001B3C2                            loc_1B4C4:
0001B3C2 4A12                       		tst.b	(a2)
0001B3C4 6700                       		beq.s	locret_1B4CE
0001B3C6 504A                       		addq.w	#8,a2
0001B3C8 51C8 FFF8                  		dbf	d0,loc_1B4C4
0001B3CC                            
0001B3CC                            locret_1B4CE:
0001B3CC 4E75                       		rts	
0001B3CE                            ; End of function SS_RemoveCollectedItem
0001B3CE                            
0001B3CE                            ; ---------------------------------------------------------------------------
0001B3CE                            ; Subroutine to	animate	special	stage items when you touch them
0001B3CE                            ; ---------------------------------------------------------------------------
0001B3CE                            
0001B3CE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B3CE                            
0001B3CE                            
0001B3CE                            SS_AniItems:				; XREF: SS_ShowLayout
0001B3CE 41F9 00FF 4400             		lea	($FF4400).l,a0
0001B3D4 3E3C 001F                  		move.w	#$1F,d7
0001B3D8                            
0001B3D8                            loc_1B4DA:
0001B3D8 7000                       		moveq	#0,d0
0001B3DA 1010                       		move.b	(a0),d0
0001B3DC 6700                       		beq.s	loc_1B4E8
0001B3DE E548                       		lsl.w	#2,d0
0001B3E0 227B 0000                  		movea.l	SS_AniIndex-4(pc,d0.w),a1
0001B3E4 4E91                       		jsr	(a1)
0001B3E6                            
0001B3E6                            loc_1B4E8:
0001B3E6 5048                       		addq.w	#8,a0
0001B3E8                            
0001B3E8                            loc_1B4EA:
0001B3E8 51CF FFEE                  		dbf	d7,loc_1B4DA
0001B3EC                            
0001B3EC 4E75                       		rts	
0001B3EE                            ; End of function SS_AniItems
0001B3EE                            
0001B3EE                            ; ===========================================================================
0001B3EE 0000 0000                  SS_AniIndex:	dc.l SS_AniRingSparks
0001B3F2 0000 0000                  		dc.l SS_AniBumper
0001B3F6 0000 0000                  		dc.l SS_Ani1Up
0001B3FA 0000 0000                  		dc.l SS_AniReverse
0001B3FE 0000 0000                  		dc.l SS_AniEmeraldSparks
0001B402 0000 0000                  		dc.l SS_AniGlassBlock
0001B406                            ; ===========================================================================
0001B406                            
0001B406                            SS_AniRingSparks:			; XREF: SS_AniIndex
0001B406 5328 0002                  		subq.b	#1,2(a0)
0001B40A 6A00                       		bpl.s	locret_1B530
0001B40C 117C 0005 0002             		move.b	#5,2(a0)
0001B412 7000                       		moveq	#0,d0
0001B414 1028 0003                  		move.b	3(a0),d0
0001B418 5228 0003                  		addq.b	#1,3(a0)
0001B41C 2268 0004                  		movea.l	4(a0),a1
0001B420 103B 0000                  		move.b	SS_AniRingData(pc,d0.w),d0
0001B424 1280                       		move.b	d0,(a1)
0001B426 6600                       		bne.s	locret_1B530
0001B428 4290                       		clr.l	(a0)
0001B42A 42A8 0004                  		clr.l	4(a0)
0001B42E                            
0001B42E                            locret_1B530:
0001B42E 4E75                       		rts	
0001B430                            ; ===========================================================================
0001B430 4243 4445 0000             SS_AniRingData:	dc.b $42, $43, $44, $45, 0, 0
0001B436                            ; ===========================================================================
0001B436                            
0001B436                            SS_AniBumper:				; XREF: SS_AniIndex
0001B436 5328 0002                  		subq.b	#1,2(a0)
0001B43A 6A00                       		bpl.s	locret_1B566
0001B43C 117C 0007 0002             		move.b	#7,2(a0)
0001B442 7000                       		moveq	#0,d0
0001B444 1028 0003                  		move.b	3(a0),d0
0001B448 5228 0003                  		addq.b	#1,3(a0)
0001B44C 2268 0004                  		movea.l	4(a0),a1
0001B450 103B 0000                  		move.b	SS_AniBumpData(pc,d0.w),d0
0001B454 6600                       		bne.s	loc_1B564
0001B456 4290                       		clr.l	(a0)
0001B458 42A8 0004                  		clr.l	4(a0)
0001B45C 12BC 0025                  		move.b	#$25,(a1)
0001B460 4E75                       		rts	
0001B462                            ; ===========================================================================
0001B462                            
0001B462                            loc_1B564:
0001B462 1280                       		move.b	d0,(a1)
0001B464                            
0001B464                            locret_1B566:
0001B464 4E75                       		rts	
0001B466                            ; ===========================================================================
0001B466 3233 3233 0000             SS_AniBumpData:	dc.b $32, $33, $32, $33, 0, 0
0001B46C                            ; ===========================================================================
0001B46C                            
0001B46C                            SS_Ani1Up:				; XREF: SS_AniIndex
0001B46C 5328 0002                  		subq.b	#1,2(a0)
0001B470 6A00                       		bpl.s	locret_1B596
0001B472 117C 0005 0002             		move.b	#5,2(a0)
0001B478 7000                       		moveq	#0,d0
0001B47A 1028 0003                  		move.b	3(a0),d0
0001B47E 5228 0003                  		addq.b	#1,3(a0)
0001B482 2268 0004                  		movea.l	4(a0),a1
0001B486 103B 0000                  		move.b	SS_Ani1UpData(pc,d0.w),d0
0001B48A 1280                       		move.b	d0,(a1)
0001B48C 6600                       		bne.s	locret_1B596
0001B48E 4290                       		clr.l	(a0)
0001B490 42A8 0004                  		clr.l	4(a0)
0001B494                            
0001B494                            locret_1B596:
0001B494 4E75                       		rts	
0001B496                            ; ===========================================================================
0001B496 4647 4849 0000             SS_Ani1UpData:	dc.b $46, $47, $48, $49, 0, 0
0001B49C                            ; ===========================================================================
0001B49C                            
0001B49C                            SS_AniReverse:				; XREF: SS_AniIndex
0001B49C 5328 0002                  		subq.b	#1,2(a0)
0001B4A0 6A00                       		bpl.s	locret_1B5CC
0001B4A2 117C 0007 0002             		move.b	#7,2(a0)
0001B4A8 7000                       		moveq	#0,d0
0001B4AA 1028 0003                  		move.b	3(a0),d0
0001B4AE 5228 0003                  		addq.b	#1,3(a0)
0001B4B2 2268 0004                  		movea.l	4(a0),a1
0001B4B6 103B 0000                  		move.b	SS_AniRevData(pc,d0.w),d0
0001B4BA 6600                       		bne.s	loc_1B5CA
0001B4BC 4290                       		clr.l	(a0)
0001B4BE 42A8 0004                  		clr.l	4(a0)
0001B4C2 12BC 002B                  		move.b	#$2B,(a1)
0001B4C6 4E75                       		rts	
0001B4C8                            ; ===========================================================================
0001B4C8                            
0001B4C8                            loc_1B5CA:
0001B4C8 1280                       		move.b	d0,(a1)
0001B4CA                            
0001B4CA                            locret_1B5CC:
0001B4CA 4E75                       		rts	
0001B4CC                            ; ===========================================================================
0001B4CC 2B31 2B31 0000             SS_AniRevData:	dc.b $2B, $31, $2B, $31, 0, 0
0001B4D2                            ; ===========================================================================
0001B4D2                            
0001B4D2                            SS_AniEmeraldSparks:			; XREF: SS_AniIndex
0001B4D2 5328 0002                  		subq.b	#1,2(a0)
0001B4D6 6A00                       		bpl.s	locret_1B60C
0001B4D8 117C 0005 0002             		move.b	#5,2(a0)
0001B4DE 7000                       		moveq	#0,d0
0001B4E0 1028 0003                  		move.b	3(a0),d0
0001B4E4 5228 0003                  		addq.b	#1,3(a0)
0001B4E8 2268 0004                  		movea.l	4(a0),a1
0001B4EC 103B 0000                  		move.b	SS_AniEmerData(pc,d0.w),d0
0001B4F0 1280                       		move.b	d0,(a1)
0001B4F2 6600                       		bne.s	locret_1B60C
0001B4F4 4290                       		clr.l	(a0)
0001B4F6 42A8 0004                  		clr.l	4(a0)
0001B4FA 11FC 0004 D024             		move.b	#4,($FFFFD024).w
0001B500 303C 00A8                  		move.w	#$A8,d0
0001B504 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play special stage GOAL	sound
0001B50A                            
0001B50A                            locret_1B60C:
0001B50A 4E75                       		rts	
0001B50C                            ; ===========================================================================
0001B50C 4647 4849 0000             SS_AniEmerData:	dc.b $46, $47, $48, $49, 0, 0
0001B512                            ; ===========================================================================
0001B512                            
0001B512                            SS_AniGlassBlock:			; XREF: SS_AniIndex
0001B512 5328 0002                  		subq.b	#1,2(a0)
0001B516 6A00                       		bpl.s	locret_1B640
0001B518 117C 0001 0002             		move.b	#1,2(a0)
0001B51E 7000                       		moveq	#0,d0
0001B520 1028 0003                  		move.b	3(a0),d0
0001B524 5228 0003                  		addq.b	#1,3(a0)
0001B528 2268 0004                  		movea.l	4(a0),a1
0001B52C 103B 0000                  		move.b	SS_AniGlassData(pc,d0.w),d0
0001B530 1280                       		move.b	d0,(a1)
0001B532 6600                       		bne.s	locret_1B640
0001B534 12A8 0004                  		move.b	4(a0),(a1)
0001B538 4290                       		clr.l	(a0)
0001B53A 42A8 0004                  		clr.l	4(a0)
0001B53E                            
0001B53E                            locret_1B640:
0001B53E 4E75                       		rts	
0001B540                            ; ===========================================================================
0001B540 4B4C 4D4E 4B4C 4D4E 0000   SS_AniGlassData:dc.b $4B, $4C, $4D, $4E, $4B, $4C, $4D,	$4E, 0,	0
0001B54A                            ; ---------------------------------------------------------------------------
0001B54A                            ; Special stage	layout pointers
0001B54A                            ; ---------------------------------------------------------------------------
0001B54A                            SS_LayoutIndex:
0001B54A                            	include "_inc\Special stage layout pointers.asm"
0001B54A                            ; ---------------------------------------------------------------------------
0001B54A                            ; Special stage	layout pointers
0001B54A                            ; ---------------------------------------------------------------------------
0001B54A 0000 0000                  	dc.l SS_1
0001B54E 0000 0000                  	dc.l SS_2
0001B552 0000 0000                  	dc.l SS_3
0001B556 0000 0000                  	dc.l SS_4
0001B55A 0000 0000                  	dc.l SS_5
0001B55E 0000 0000                  	dc.l SS_6
0001B562                            	even
0001B562                            	even
0001B562                            
0001B562                            ; ---------------------------------------------------------------------------
0001B562                            ; Special stage	start locations
0001B562                            ; ---------------------------------------------------------------------------
0001B562                            SS_StartLoc:	incbin	misc\sloc_ss.bin
0001B57A                            		even
0001B57A                            
0001B57A                            ; ---------------------------------------------------------------------------
0001B57A                            ; Subroutine to	load special stage layout
0001B57A                            ; ---------------------------------------------------------------------------
0001B57A                            
0001B57A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B57A                            
0001B57A                            
0001B57A                            SS_Load:				; XREF: SpecialStage
0001B57A 7000                       		moveq	#0,d0
0001B57C 1038 FE16                  		move.b	($FFFFFE16).w,d0 ; load	number of last special stage entered
0001B580 5238 FE16                  		addq.b	#1,($FFFFFE16).w
0001B584 0C38 0006 FE16             		cmpi.b	#6,($FFFFFE16).w
0001B58A 6500                       		bcs.s	SS_ChkEmldNum
0001B58C 11FC 0000 FE16             		move.b	#0,($FFFFFE16).w ; reset if higher than	6
0001B592                            
0001B592                            SS_ChkEmldNum:
0001B592 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all emeralds?
0001B598 6700                       		beq.s	SS_LoadData	; if yes, branch
0001B59A 7200                       		moveq	#0,d1
0001B59C 1238 FE57                  		move.b	($FFFFFE57).w,d1
0001B5A0 5301                       		subq.b	#1,d1
0001B5A2 6500                       		bcs.s	SS_LoadData
0001B5A4 47F8 FE58                  		lea	($FFFFFE58).w,a3 ; check which emeralds	you have
0001B5A8                            
0001B5A8                            SS_ChkEmldLoop:	
0001B5A8 B033 1000                  		cmp.b	(a3,d1.w),d0
0001B5AC 6600                       		bne.s	SS_ChkEmldRepeat
0001B5AE 60CA                       		bra.s	SS_Load
0001B5B0                            ; ===========================================================================
0001B5B0                            
0001B5B0                            SS_ChkEmldRepeat:
0001B5B0 51C9 FFF6                  		dbf	d1,SS_ChkEmldLoop
0001B5B4                            
0001B5B4                            SS_LoadData:
0001B5B4 E548                       		lsl.w	#2,d0
0001B5B6 43FB 00AA                  		lea	SS_StartLoc(pc,d0.w),a1
0001B5BA 31D9 D008                  		move.w	(a1)+,($FFFFD008).w
0001B5BE 31D9 D00C                  		move.w	(a1)+,($FFFFD00C).w
0001B5C2 207B 0086                  		movea.l	SS_LayoutIndex(pc,d0.w),a0
0001B5C6 43F9 00FF 4000             		lea	($FF4000).l,a1
0001B5CC 303C 0000                  		move.w	#0,d0
0001B5D0 4EB9 0000 171E             		jsr	(EniDec).l
0001B5D6 43F9 00FF 0000             		lea	($FF0000).l,a1
0001B5DC 303C 0FFF                  		move.w	#$FFF,d0
0001B5E0                            
0001B5E0                            SS_ClrRAM3:
0001B5E0 4299                       		clr.l	(a1)+
0001B5E2 51C8 FFFC                  		dbf	d0,SS_ClrRAM3
0001B5E6                            
0001B5E6 43F9 00FF 1020             		lea	($FF1020).l,a1
0001B5EC 41F9 00FF 4000             		lea	($FF4000).l,a0
0001B5F2 723F                       		moveq	#$3F,d1
0001B5F4                            
0001B5F4                            loc_1B6F6:
0001B5F4 743F                       		moveq	#$3F,d2
0001B5F6                            
0001B5F6                            loc_1B6F8:
0001B5F6 12D8                       		move.b	(a0)+,(a1)+
0001B5F8 51CA FFFC                  		dbf	d2,loc_1B6F8
0001B5FC                            
0001B5FC 43E9 0040                  		lea	$40(a1),a1
0001B600 51C9 FFF2                  		dbf	d1,loc_1B6F6
0001B604                            
0001B604 43F9 00FF 4008             		lea	($FF4008).l,a1
0001B60A 41F9 0000 0000             		lea	(SS_MapIndex).l,a0
0001B610 724D                       		moveq	#$4D,d1
0001B612                            
0001B612                            loc_1B714:
0001B612 22D8                       		move.l	(a0)+,(a1)+
0001B614 32FC 0000                  		move.w	#0,(a1)+
0001B618 1368 FFFC FFFF             		move.b	-4(a0),-1(a1)
0001B61E 32D8                       		move.w	(a0)+,(a1)+
0001B620 51C9 FFF0                  		dbf	d1,loc_1B714
0001B624                            
0001B624 43F9 00FF 4400             		lea	($FF4400).l,a1
0001B62A 323C 003F                  		move.w	#$3F,d1
0001B62E                            
0001B62E                            loc_1B730:
0001B62E                            
0001B62E 4299                       		clr.l	(a1)+
0001B630 51C9 FFFC                  		dbf	d1,loc_1B730
0001B634                            
0001B634 4E75                       		rts	
0001B636                            ; End of function SS_Load
0001B636                            
0001B636                            ; ===========================================================================
0001B636                            ; ---------------------------------------------------------------------------
0001B636                            ; Special stage	mappings and VRAM pointers
0001B636                            ; ---------------------------------------------------------------------------
0001B636                            SS_MapIndex:
0001B636                            	include "_inc\Special stage mappings and VRAM pointers.asm"
0001B636                            ; ---------------------------------------------------------------------------
0001B636                            ; Special stage	mappings and VRAM pointers
0001B636                            ; ---------------------------------------------------------------------------
0001B636 0000 0000                  	dc.l Map_SSWalls	; address of mappings
0001B63A 0142                       	dc.w $142		; VRAM setting
0001B63C 0000 0000                  	dc.l Map_SSWalls
0001B640 0142                       	dc.w $142
0001B642 0000 0000                  	dc.l Map_SSWalls
0001B646 0142                       	dc.w $142
0001B648 0000 0000                  	dc.l Map_SSWalls
0001B64C 0142                       	dc.w $142
0001B64E 0000 0000                  	dc.l Map_SSWalls
0001B652 0142                       	dc.w $142
0001B654 0000 0000                  	dc.l Map_SSWalls
0001B658 0142                       	dc.w $142
0001B65A 0000 0000                  	dc.l Map_SSWalls
0001B65E 0142                       	dc.w $142
0001B660 0000 0000                  	dc.l Map_SSWalls
0001B664 0142                       	dc.w $142
0001B666 0000 0000                  	dc.l Map_SSWalls
0001B66A 0142                       	dc.w $142
0001B66C 0000 0000                  	dc.l Map_SSWalls
0001B670 2142                       	dc.w $2142
0001B672 0000 0000                  	dc.l Map_SSWalls
0001B676 2142                       	dc.w $2142
0001B678 0000 0000                  	dc.l Map_SSWalls
0001B67C 2142                       	dc.w $2142
0001B67E 0000 0000                  	dc.l Map_SSWalls
0001B682 2142                       	dc.w $2142
0001B684 0000 0000                  	dc.l Map_SSWalls
0001B688 2142                       	dc.w $2142
0001B68A 0000 0000                  	dc.l Map_SSWalls
0001B68E 2142                       	dc.w $2142
0001B690 0000 0000                  	dc.l Map_SSWalls
0001B694 2142                       	dc.w $2142
0001B696 0000 0000                  	dc.l Map_SSWalls
0001B69A 2142                       	dc.w $2142
0001B69C 0000 0000                  	dc.l Map_SSWalls
0001B6A0 2142                       	dc.w $2142
0001B6A2 0000 0000                  	dc.l Map_SSWalls
0001B6A6 4142                       	dc.w $4142
0001B6A8 0000 0000                  	dc.l Map_SSWalls
0001B6AC 4142                       	dc.w $4142
0001B6AE 0000 0000                  	dc.l Map_SSWalls
0001B6B2 4142                       	dc.w $4142
0001B6B4 0000 0000                  	dc.l Map_SSWalls
0001B6B8 4142                       	dc.w $4142
0001B6BA 0000 0000                  	dc.l Map_SSWalls
0001B6BE 4142                       	dc.w $4142
0001B6C0 0000 0000                  	dc.l Map_SSWalls
0001B6C4 4142                       	dc.w $4142
0001B6C6 0000 0000                  	dc.l Map_SSWalls
0001B6CA 4142                       	dc.w $4142
0001B6CC 0000 0000                  	dc.l Map_SSWalls
0001B6D0 4142                       	dc.w $4142
0001B6D2 0000 0000                  	dc.l Map_SSWalls
0001B6D6 4142                       	dc.w $4142
0001B6D8 0000 0000                  	dc.l Map_SSWalls
0001B6DC 6142                       	dc.w $6142
0001B6DE 0000 0000                  	dc.l Map_SSWalls
0001B6E2 6142                       	dc.w $6142
0001B6E4 0000 0000                  	dc.l Map_SSWalls
0001B6E8 6142                       	dc.w $6142
0001B6EA 0000 0000                  	dc.l Map_SSWalls
0001B6EE 6142                       	dc.w $6142
0001B6F0 0000 0000                  	dc.l Map_SSWalls
0001B6F4 6142                       	dc.w $6142
0001B6F6 0000 0000                  	dc.l Map_SSWalls
0001B6FA 6142                       	dc.w $6142
0001B6FC 0000 0000                  	dc.l Map_SSWalls
0001B700 6142                       	dc.w $6142
0001B702 0000 0000                  	dc.l Map_SSWalls
0001B706 6142                       	dc.w $6142
0001B708 0000 0000                  	dc.l Map_SSWalls
0001B70C 6142                       	dc.w $6142
0001B70E 0000 EAA0                  	dc.l Map_obj47
0001B712 023B                       	dc.w $23B
0001B714 0000 0000                  	dc.l Map_SS_R
0001B718 0570                       	dc.w $570
0001B71A 0000 0000                  	dc.l Map_SS_R
0001B71E 0251                       	dc.w $251
0001B720 0000 0000                  	dc.l Map_SS_R
0001B724 0370                       	dc.w $370
0001B726 0000 0000                  	dc.l Map_SS_Up
0001B72A 0263                       	dc.w $263
0001B72C 0000 0000                  	dc.l Map_SS_Down
0001B730 0263                       	dc.w $263
0001B732 0000 0000                  	dc.l Map_SS_R
0001B736 22F0                       	dc.w $22F0
0001B738 0000 0000                  	dc.l Map_SS_Glass
0001B73C 0470                       	dc.w $470
0001B73E 0000 0000                  	dc.l Map_SS_Glass
0001B742 05F0                       	dc.w $5F0
0001B744 0000 0000                  	dc.l Map_SS_Glass
0001B748 65F0                       	dc.w $65F0
0001B74A 0000 0000                  	dc.l Map_SS_Glass
0001B74E 25F0                       	dc.w $25F0
0001B750 0000 0000                  	dc.l Map_SS_Glass
0001B754 45F0                       	dc.w $45F0
0001B756 0000 0000                  	dc.l Map_SS_R
0001B75A 02F0                       	dc.w $2F0
0001B75C 0100 EAA0                  	dc.l Map_obj47+$1000000	; add frame no.	* $1000000
0001B760 023B                       	dc.w $23B
0001B762 0200 EAA0                  	dc.l Map_obj47+$2000000
0001B766 023B                       	dc.w $23B
0001B768 0000 0000                  	dc.l Map_SS_R
0001B76C 0797                       	dc.w $797
0001B76E 0000 0000                  	dc.l Map_SS_R
0001B772 07A0                       	dc.w $7A0
0001B774 0000 0000                  	dc.l Map_SS_R
0001B778 07A9                       	dc.w $7A9
0001B77A 0000 0000                  	dc.l Map_SS_R
0001B77E 0797                       	dc.w $797
0001B780 0000 0000                  	dc.l Map_SS_R
0001B784 07A0                       	dc.w $7A0
0001B786 0000 0000                  	dc.l Map_SS_R
0001B78A 07A9                       	dc.w $7A9
0001B78C 0000 9F56                  	dc.l Map_obj25
0001B790 27B2                       	dc.w $27B2
0001B792 0000 0000                  	dc.l Map_SS_Chaos3
0001B796 0770                       	dc.w $770
0001B798 0000 0000                  	dc.l Map_SS_Chaos3
0001B79C 2770                       	dc.w $2770
0001B79E 0000 0000                  	dc.l Map_SS_Chaos3
0001B7A2 4770                       	dc.w $4770
0001B7A4 0000 0000                  	dc.l Map_SS_Chaos3
0001B7A8 6770                       	dc.w $6770
0001B7AA 0000 0000                  	dc.l Map_SS_Chaos1
0001B7AE 0770                       	dc.w $770
0001B7B0 0000 0000                  	dc.l Map_SS_Chaos2
0001B7B4 0770                       	dc.w $770
0001B7B6 0000 0000                  	dc.l Map_SS_R
0001B7BA 04F0                       	dc.w $4F0
0001B7BC 0400 9F56                  	dc.l Map_obj25+$4000000
0001B7C0 27B2                       	dc.w $27B2
0001B7C2 0500 9F56                  	dc.l Map_obj25+$5000000
0001B7C6 27B2                       	dc.w $27B2
0001B7C8 0600 9F56                  	dc.l Map_obj25+$6000000
0001B7CC 27B2                       	dc.w $27B2
0001B7CE 0700 9F56                  	dc.l Map_obj25+$7000000
0001B7D2 27B2                       	dc.w $27B2
0001B7D4 0000 0000                  	dc.l Map_SS_Glass
0001B7D8 23F0                       	dc.w $23F0
0001B7DA 0000 0000                  	dc.l Map_SS_Glass+$1000000
0001B7DE 23F0                       	dc.w $23F0
0001B7E0 0000 0000                  	dc.l Map_SS_Glass+$2000000
0001B7E4 23F0                       	dc.w $23F0
0001B7E6 0000 0000                  	dc.l Map_SS_Glass+$3000000
0001B7EA 23F0                       	dc.w $23F0
0001B7EC 0000 0000                  	dc.l Map_SS_R+$2000000
0001B7F0 04F0                       	dc.w $4F0
0001B7F2 0000 0000                  	dc.l Map_SS_Glass
0001B7F6 05F0                       	dc.w $5F0
0001B7F8 0000 0000                  	dc.l Map_SS_Glass
0001B7FC 65F0                       	dc.w $65F0
0001B7FE 0000 0000                  	dc.l Map_SS_Glass
0001B802 25F0                       	dc.w $25F0
0001B804 0000 0000                  	dc.l Map_SS_Glass
0001B808 45F0                       	dc.w $45F0
0001B808 45F0                       	dc.w $45F0
0001B80A                            
0001B80A                            ; ---------------------------------------------------------------------------
0001B80A                            ; Sprite mappings - special stage "R" block
0001B80A                            ; ---------------------------------------------------------------------------
0001B80A                            Map_SS_R:
0001B80A                            	include "_maps\SSRblock.asm"
0001B80A                            ; ---------------------------------------------------------------------------
0001B80A                            ; Sprite mappings - special stage "R" block
0001B80A                            ; ---------------------------------------------------------------------------
0001B80A 0000 0000                  		dc.w byte_1B912-Map_SS_R, byte_1B918-Map_SS_R
0001B80E 0000                       		dc.w byte_1B91E-Map_SS_R
0001B810 01                         byte_1B912:	dc.b 1
0001B811 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B816 01                         byte_1B918:	dc.b 1
0001B817 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B81C 00                         byte_1B91E:	dc.b 0
0001B81E 00                         		even
0001B81E 00                         		even
0001B81E                            
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E                            Map_SS_Glass:
0001B81E                            	include "_maps\SSglassblock.asm"
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E                            ; Sprite mappings - special stage breakable glass blocks and red-white blocks
0001B81E                            ; ---------------------------------------------------------------------------
0001B81E 0000 0000                  		dc.w byte_1B928-Map_SS_Glass, byte_1B92E-Map_SS_Glass
0001B822 0000 0000                  		dc.w byte_1B934-Map_SS_Glass, byte_1B93A-Map_SS_Glass
0001B826 01                         byte_1B928:	dc.b 1
0001B827 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B82C 01                         byte_1B92E:	dc.b 1
0001B82D F40A 0800 F4               		dc.b $F4, $A, 8, 0, $F4
0001B832 01                         byte_1B934:	dc.b 1
0001B833 F40A 1800 F4               		dc.b $F4, $A, $18, 0, $F4
0001B838 01                         byte_1B93A:	dc.b 1
0001B839 F40A 1000 F4               		dc.b $F4, $A, $10, 0, $F4
0001B83E                            		even
0001B83E                            		even
0001B83E                            
0001B83E                            ; ---------------------------------------------------------------------------
0001B83E                            ; Sprite mappings - special stage "UP" block
0001B83E                            ; ---------------------------------------------------------------------------
0001B83E                            Map_SS_Up:
0001B83E                            	include "_maps\SSUPblock.asm"
0001B83E                            ; ---------------------------------------------------------------------------
0001B83E                            ; Sprite mappings - special stage "UP" block
0001B83E                            ; ---------------------------------------------------------------------------
0001B83E 0000                       		dc.w byte_1B944-Map_SS_Up
0001B840 0000                       		dc.w byte_1B94A-Map_SS_Up
0001B842 01                         byte_1B944:	dc.b 1
0001B843 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0001B848 01                         byte_1B94A:	dc.b 1
0001B849 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B84E                            		even
0001B84E                            		even
0001B84E                            
0001B84E                            ; ---------------------------------------------------------------------------
0001B84E                            ; Sprite mappings - special stage "DOWN" block
0001B84E                            ; ---------------------------------------------------------------------------
0001B84E                            Map_SS_Down:
0001B84E                            	include "_maps\SSDOWNblock.asm"
0001B84E                            ; ---------------------------------------------------------------------------
0001B84E                            ; Sprite mappings - special stage "DOWN" block
0001B84E                            ; ---------------------------------------------------------------------------
0001B84E 0000                       		dc.w byte_1B954-Map_SS_Down
0001B850 0000                       		dc.w byte_1B95A-Map_SS_Down
0001B852 01                         byte_1B954:	dc.b 1
0001B853 F40A 0009 F4               		dc.b $F4, $A, 0, 9, $F4
0001B858 01                         byte_1B95A:	dc.b 1
0001B859 F40A 0012 F4               		dc.b $F4, $A, 0, $12, $F4
0001B85E                            		even
0001B85E                            		even
0001B85E                            
0001B85E                            ; ---------------------------------------------------------------------------
0001B85E                            ; Sprite mappings - special stage chaos	emeralds
0001B85E                            ; ---------------------------------------------------------------------------
0001B85E 0000                       Map_SS_Chaos1:	dc.w byte_1B96C-Map_SS_Chaos1
0001B860 0000                       		dc.w byte_1B97E-Map_SS_Chaos1
0001B862 0000                       Map_SS_Chaos2:	dc.w byte_1B972-Map_SS_Chaos2
0001B864 0000                       		dc.w byte_1B97E-Map_SS_Chaos2
0001B866 0000                       Map_SS_Chaos3:	dc.w byte_1B978-Map_SS_Chaos3
0001B868 0000                       		dc.w byte_1B97E-Map_SS_Chaos3
0001B86A 01                         byte_1B96C:	dc.b 1
0001B86B F805 0000 F8               		dc.b $F8, 5, 0,	0, $F8
0001B870 01                         byte_1B972:	dc.b 1
0001B871 F805 0004 F8               		dc.b $F8, 5, 0,	4, $F8
0001B876 01                         byte_1B978:	dc.b 1
0001B877 F805 0008 F8               		dc.b $F8, 5, 0,	8, $F8
0001B87C 01                         byte_1B97E:	dc.b 1
0001B87D F805 000C F8               		dc.b $F8, 5, 0,	$C, $F8
0001B882                            		even
0001B882                            ; ===========================================================================
0001B882                            ; ---------------------------------------------------------------------------
0001B882                            ; Object 09 - Sonic (special stage)
0001B882                            ; ---------------------------------------------------------------------------
0001B882                            
0001B882                            Obj09:					; XREF: Obj_Index
0001B882 4A78 FE08                  		tst.w	($FFFFFE08).w	; is debug mode	being used?
0001B886 6700                       		beq.s	Obj09_Normal	; if not, branch
0001B888 6100 0000                  		bsr.w	SS_FixCamera
0001B88C 6000 0000                  		bra.w	DebugMode
0001B890                            ; ===========================================================================
0001B890                            
0001B890                            Obj09_Normal:
0001B890 7000                       		moveq	#0,d0
0001B892 1028 0024                  		move.b	$24(a0),d0
0001B896 323B 0000                  		move.w	Obj09_Index(pc,d0.w),d1
0001B89A 4EFB 1000                  		jmp	Obj09_Index(pc,d1.w)
0001B89E                            ; ===========================================================================
0001B89E 0000                       Obj09_Index:	dc.w Obj09_Main-Obj09_Index
0001B8A0 0000                       		dc.w Obj09_ChkDebug-Obj09_Index
0001B8A2 0000                       		dc.w Obj09_ExitStage-Obj09_Index
0001B8A4 0000                       		dc.w Obj09_Exit2-Obj09_Index
0001B8A6                            ; ===========================================================================
0001B8A6                            
0001B8A6                            Obj09_Main:				; XREF: Obj09_Index
0001B8A6 5428 0024                  		addq.b	#2,$24(a0)
0001B8AA 117C 000E 0016             		move.b	#$E,$16(a0)
0001B8B0 117C 0007 0017             		move.b	#7,$17(a0)
0001B8B6 217C 0000 0000 0004        		move.l	#Map_Sonic,4(a0)
0001B8BE 317C 0780 0002             		move.w	#$780,2(a0)
0001B8C4 117C 0004 0001             		move.b	#4,1(a0)
0001B8CA 117C 0000 0018             		move.b	#0,$18(a0)
0001B8D0 117C 0002 001C             		move.b	#2,$1C(a0)
0001B8D6 08E8 0002 0022             		bset	#2,$22(a0)
0001B8DC 08E8 0001 0022             		bset	#1,$22(a0)
0001B8E2                            
0001B8E2                            Obj09_ChkDebug:				; XREF: Obj09_Index
0001B8E2 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	cheat enabled?
0001B8E6 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001B8E8 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001B8EE 6700                       		beq.s	Obj09_NoDebug	; if not, branch
0001B8F0 31FC 0001 FE08             		move.w	#1,($FFFFFE08).w ; change Sonic	into a ring
0001B8F6                            
0001B8F6                            Obj09_NoDebug:
0001B8F6 117C 0000 0030             		move.b	#0,$30(a0)
0001B8FC 7000                       		moveq	#0,d0
0001B8FE 1028 0022                  		move.b	$22(a0),d0
0001B902 0240 0002                  		andi.w	#2,d0
0001B906 323B 0000                  		move.w	Obj09_Modes(pc,d0.w),d1
0001B90A 4EBB 1000                  		jsr	Obj09_Modes(pc,d1.w)
0001B90E 4EBA 8284                  		jsr	LoadSonicDynPLC
0001B912 4EF9 0000 D5AC             		jmp	DisplaySprite
0001B918                            ; ===========================================================================
0001B918 0000                       Obj09_Modes:	dc.w Obj09_OnWall-Obj09_Modes
0001B91A 0000                       		dc.w Obj09_InAir-Obj09_Modes
0001B91C                            ; ===========================================================================
0001B91C                            
0001B91C                            Obj09_OnWall:				; XREF: Obj09_Modes
0001B91C 6100 0000                  		bsr.w	Obj09_Jump
0001B920 6100 0000                  		bsr.w	Obj09_Move
0001B924 6100 0000                  		bsr.w	Obj09_Fall
0001B928 6000                       		bra.s	Obj09_Display
0001B92A                            ; ===========================================================================
0001B92A                            
0001B92A                            Obj09_InAir:				; XREF: Obj09_Modes
0001B92A 6100 0000                  		bsr.w	nullsub_2
0001B92E 6100 0000                  		bsr.w	Obj09_Move
0001B932 6100 0000                  		bsr.w	Obj09_Fall
0001B936                            
0001B936                            Obj09_Display:				; XREF: Obj09_OnWall
0001B936 6100 0000                  		bsr.w	Obj09_ChkItems
0001B93A 6100 0000                  		bsr.w	Obj09_ChkItems2
0001B93E 4EB9 0000 D586             		jsr	SpeedToPos
0001B944 6100 0000                  		bsr.w	SS_FixCamera
0001B948 3038 F780                  		move.w	($FFFFF780).w,d0
0001B94C D078 F782                  		add.w	($FFFFF782).w,d0
0001B950 31C0 F780                  		move.w	d0,($FFFFF780).w
0001B954 4EB9 0001 391A             		jsr	Sonic_Animate
0001B95A 4E75                       		rts	
0001B95C                            
0001B95C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B95C                            
0001B95C                            
0001B95C                            Obj09_Move:				; XREF: Obj09_OnWall; Obj09_InAir
0001B95C 0838 0002 F602             		btst	#2,($FFFFF602).w ; is left being pressed?
0001B962 6700                       		beq.s	Obj09_ChkRight	; if not, branch
0001B964 6100 0000                  		bsr.w	Obj09_MoveLeft
0001B968                            
0001B968                            Obj09_ChkRight:
0001B968 0838 0003 F602             		btst	#3,($FFFFF602).w ; is right being pressed?
0001B96E 6700                       		beq.s	loc_1BA78	; if not, branch
0001B970 6100 0000                  		bsr.w	Obj09_MoveRight
0001B974                            
0001B974                            loc_1BA78:
0001B974 1038 F602                  		move.b	($FFFFF602).w,d0
0001B978 0200 000C                  		andi.b	#$C,d0
0001B97C 6600                       		bne.s	loc_1BAA8
0001B97E 3028 0014                  		move.w	$14(a0),d0
0001B982 6700                       		beq.s	loc_1BAA8
0001B984 6B00                       		bmi.s	loc_1BA9A
0001B986 0440 000C                  		subi.w	#$C,d0
0001B98A 6400                       		bcc.s	loc_1BA94
0001B98C 303C 0000                  		move.w	#0,d0
0001B990                            
0001B990                            loc_1BA94:
0001B990 3140 0014                  		move.w	d0,$14(a0)
0001B994 6000                       		bra.s	loc_1BAA8
0001B996                            ; ===========================================================================
0001B996                            
0001B996                            loc_1BA9A:
0001B996 0640 000C                  		addi.w	#$C,d0
0001B99A 6400                       		bcc.s	loc_1BAA4
0001B99C 303C 0000                  		move.w	#0,d0
0001B9A0                            
0001B9A0                            loc_1BAA4:
0001B9A0 3140 0014                  		move.w	d0,$14(a0)
0001B9A4                            
0001B9A4                            loc_1BAA8:
0001B9A4 1038 F780                  		move.b	($FFFFF780).w,d0
0001B9A8 0600 0020                  		addi.b	#$20,d0
0001B9AC 0200 00C0                  		andi.b	#$C0,d0
0001B9B0 4400                       		neg.b	d0
0001B9B2 4EB9 0000 29DA             		jsr	(CalcSine).l
0001B9B8 C3E8 0014                  		muls.w	$14(a0),d1
0001B9BC D3A8 0008                  		add.l	d1,8(a0)
0001B9C0 C1E8 0014                  		muls.w	$14(a0),d0
0001B9C4 D1A8 000C                  		add.l	d0,$C(a0)
0001B9C8 48E7 C000                  		movem.l	d0-d1,-(sp)
0001B9CC 2428 000C                  		move.l	$C(a0),d2
0001B9D0 2628 0008                  		move.l	8(a0),d3
0001B9D4 6100 0000                  		bsr.w	sub_1BCE8
0001B9D8 6700                       		beq.s	loc_1BAF2
0001B9DA 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001B9DE 93A8 0008                  		sub.l	d1,8(a0)
0001B9E2 91A8 000C                  		sub.l	d0,$C(a0)
0001B9E6 317C 0000 0014             		move.w	#0,$14(a0)
0001B9EC 4E75                       		rts	
0001B9EE                            ; ===========================================================================
0001B9EE                            
0001B9EE                            loc_1BAF2:
0001B9EE 4CDF 0003                  		movem.l	(sp)+,d0-d1
0001B9F2 4E75                       		rts	
0001B9F4                            ; End of function Obj09_Move
0001B9F4                            
0001B9F4                            
0001B9F4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001B9F4                            
0001B9F4                            
0001B9F4                            Obj09_MoveLeft:				; XREF: Obj09_Move
0001B9F4 08E8 0000 0022             		bset	#0,$22(a0)
0001B9FA 3028 0014                  		move.w	$14(a0),d0
0001B9FE 6700                       		beq.s	loc_1BB06
0001BA00 6A00                       		bpl.s	loc_1BB1A
0001BA02                            
0001BA02                            loc_1BB06:
0001BA02 0440 000C                  		subi.w	#$C,d0
0001BA06 0C40 F800                  		cmpi.w	#-$800,d0
0001BA0A 6E00                       		bgt.s	loc_1BB14
0001BA0C 303C F800                  		move.w	#-$800,d0
0001BA10                            
0001BA10                            loc_1BB14:
0001BA10 3140 0014                  		move.w	d0,$14(a0)
0001BA14 4E75                       		rts	
0001BA16                            ; ===========================================================================
0001BA16                            
0001BA16                            loc_1BB1A:
0001BA16 0440 0040                  		subi.w	#$40,d0
0001BA1A 6400                       		bcc.s	loc_1BB22
0001BA1C 4E71                       		nop	
0001BA1E                            
0001BA1E                            loc_1BB22:
0001BA1E 3140 0014                  		move.w	d0,$14(a0)
0001BA22 4E75                       		rts	
0001BA24                            ; End of function Obj09_MoveLeft
0001BA24                            
0001BA24                            
0001BA24                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA24                            
0001BA24                            
0001BA24                            Obj09_MoveRight:			; XREF: Obj09_Move
0001BA24 08A8 0000 0022             		bclr	#0,$22(a0)
0001BA2A 3028 0014                  		move.w	$14(a0),d0
0001BA2E 6B00                       		bmi.s	loc_1BB48
0001BA30 0640 000C                  		addi.w	#$C,d0
0001BA34 0C40 0800                  		cmpi.w	#$800,d0
0001BA38 6D00                       		blt.s	loc_1BB42
0001BA3A 303C 0800                  		move.w	#$800,d0
0001BA3E                            
0001BA3E                            loc_1BB42:
0001BA3E 3140 0014                  		move.w	d0,$14(a0)
0001BA42 6000                       		bra.s	locret_1BB54
0001BA44                            ; ===========================================================================
0001BA44                            
0001BA44                            loc_1BB48:
0001BA44 0640 0040                  		addi.w	#$40,d0
0001BA48 6400                       		bcc.s	loc_1BB50
0001BA4A 4E71                       		nop	
0001BA4C                            
0001BA4C                            loc_1BB50:
0001BA4C 3140 0014                  		move.w	d0,$14(a0)
0001BA50                            
0001BA50                            locret_1BB54:
0001BA50 4E75                       		rts	
0001BA52                            ; End of function Obj09_MoveRight
0001BA52                            
0001BA52                            
0001BA52                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA52                            
0001BA52                            
0001BA52                            Obj09_Jump:				; XREF: Obj09_OnWall
0001BA52 1038 F603                  		move.b	($FFFFF603).w,d0
0001BA56 0200 0070                  		andi.b	#$70,d0		; is A,	B or C pressed?
0001BA5A 6700                       		beq.s	Obj09_NoJump	; if not, branch
0001BA5C 1038 F780                  		move.b	($FFFFF780).w,d0
0001BA60 0200 00FC                  		andi.b	#$FC,d0
0001BA64 4400                       		neg.b	d0
0001BA66 0400 0040                  		subi.b	#$40,d0
0001BA6A 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BA70 C3FC 0680                  		muls.w	#$680,d1
0001BA74 E081                       		asr.l	#8,d1
0001BA76 3141 0010                  		move.w	d1,$10(a0)
0001BA7A C1FC 0680                  		muls.w	#$680,d0
0001BA7E E080                       		asr.l	#8,d0
0001BA80 3140 0012                  		move.w	d0,$12(a0)
0001BA84 08E8 0001 0022             		bset	#1,$22(a0)
0001BA8A 303C 00A0                  		move.w	#$A0,d0
0001BA8E 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play jumping sound
0001BA94                            
0001BA94                            Obj09_NoJump:
0001BA94 4E75                       		rts	
0001BA96                            ; End of function Obj09_Jump
0001BA96                            
0001BA96                            
0001BA96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BA96                            
0001BA96                            
0001BA96                            nullsub_2:				; XREF: Obj09_InAir
0001BA96 4E75                       		rts	
0001BA98                            ; End of function nullsub_2
0001BA98                            
0001BA98                            ; ===========================================================================
0001BA98                            ; ---------------------------------------------------------------------------
0001BA98                            ; unused subroutine to limit Sonic's upward vertical speed
0001BA98                            ; ---------------------------------------------------------------------------
0001BA98 323C FC00                  		move.w	#-$400,d1
0001BA9C B268 0012                  		cmp.w	$12(a0),d1
0001BAA0 6F00                       		ble.s	locret_1BBB4
0001BAA2 1038 F602                  		move.b	($FFFFF602).w,d0
0001BAA6 0200 0070                  		andi.b	#$70,d0
0001BAAA 6600                       		bne.s	locret_1BBB4
0001BAAC 3141 0012                  		move.w	d1,$12(a0)
0001BAB0                            
0001BAB0                            locret_1BBB4:
0001BAB0 4E75                       		rts	
0001BAB2                            ; ---------------------------------------------------------------------------
0001BAB2                            ; Subroutine to	fix the	camera on Sonic's position (special stage)
0001BAB2                            ; ---------------------------------------------------------------------------
0001BAB2                            
0001BAB2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BAB2                            
0001BAB2                            
0001BAB2                            SS_FixCamera:				; XREF: Obj09
0001BAB2 3428 000C                  		move.w	$C(a0),d2
0001BAB6 3628 0008                  		move.w	8(a0),d3
0001BABA 3038 F700                  		move.w	($FFFFF700).w,d0
0001BABE 0443 00A0                  		subi.w	#$A0,d3
0001BAC2 6500                       		bcs.s	loc_1BBCE
0001BAC4 9043                       		sub.w	d3,d0
0001BAC6 9178 F700                  		sub.w	d0,($FFFFF700).w
0001BACA                            
0001BACA                            loc_1BBCE:
0001BACA 3038 F704                  		move.w	($FFFFF704).w,d0
0001BACE 0442 0070                  		subi.w	#$70,d2
0001BAD2 6500                       		bcs.s	locret_1BBDE
0001BAD4 9042                       		sub.w	d2,d0
0001BAD6 9178 F704                  		sub.w	d0,($FFFFF704).w
0001BADA                            
0001BADA                            locret_1BBDE:
0001BADA 4E75                       		rts	
0001BADC                            ; End of function SS_FixCamera
0001BADC                            
0001BADC                            ; ===========================================================================
0001BADC                            
0001BADC                            Obj09_ExitStage:			; XREF: Obj09_Index
0001BADC 0678 0040 F782             		addi.w	#$40,($FFFFF782).w
0001BAE2 0C78 1800 F782             		cmpi.w	#$1800,($FFFFF782).w
0001BAE8 6600                       		bne.s	loc_1BBF4
0001BAEA 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BAF0                            
0001BAF0                            loc_1BBF4:
0001BAF0 0C78 3000 F782             		cmpi.w	#$3000,($FFFFF782).w
0001BAF6 6D00                       		blt.s	loc_1BC12
0001BAF8 31FC 0000 F782             		move.w	#0,($FFFFF782).w
0001BAFE 31FC 4000 F780             		move.w	#$4000,($FFFFF780).w
0001BB04 5428 0024                  		addq.b	#2,$24(a0)
0001BB08 317C 003C 0038             		move.w	#$3C,$38(a0)
0001BB0E                            
0001BB0E                            loc_1BC12:
0001BB0E 3038 F780                  		move.w	($FFFFF780).w,d0
0001BB12 D078 F782                  		add.w	($FFFFF782).w,d0
0001BB16 31C0 F780                  		move.w	d0,($FFFFF780).w
0001BB1A 4EB9 0001 391A             		jsr	Sonic_Animate
0001BB20 4EBA 8072                  		jsr	LoadSonicDynPLC
0001BB24 6100 FF8C                  		bsr.w	SS_FixCamera
0001BB28 4EF9 0000 D5AC             		jmp	DisplaySprite
0001BB2E                            ; ===========================================================================
0001BB2E                            
0001BB2E                            Obj09_Exit2:				; XREF: Obj09_Index
0001BB2E 5368 0038                  		subq.w	#1,$38(a0)
0001BB32 6600                       		bne.s	loc_1BC40
0001BB34 11FC 000C F600             		move.b	#$C,($FFFFF600).w
0001BB3A                            
0001BB3A                            loc_1BC40:
0001BB3A 4EB9 0001 391A             		jsr	Sonic_Animate
0001BB40 4EBA 8052                  		jsr	LoadSonicDynPLC
0001BB44 6100 FF6C                  		bsr.w	SS_FixCamera
0001BB48 4EF9 0000 D5AC             		jmp	DisplaySprite
0001BB4E                            
0001BB4E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BB4E                            
0001BB4E                            
0001BB4E                            Obj09_Fall:				; XREF: Obj09_OnWall; Obj09_InAir
0001BB4E 2428 000C                  		move.l	$C(a0),d2
0001BB52 2628 0008                  		move.l	8(a0),d3
0001BB56 1038 F780                  		move.b	($FFFFF780).w,d0
0001BB5A 0200 00FC                  		andi.b	#$FC,d0
0001BB5E 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BB64 3828 0010                  		move.w	$10(a0),d4
0001BB68 48C4                       		ext.l	d4
0001BB6A E184                       		asl.l	#8,d4
0001BB6C C1FC 002A                  		muls.w	#$2A,d0
0001BB70 D084                       		add.l	d4,d0
0001BB72 3828 0012                  		move.w	$12(a0),d4
0001BB76 48C4                       		ext.l	d4
0001BB78 E184                       		asl.l	#8,d4
0001BB7A C3FC 002A                  		muls.w	#$2A,d1
0001BB7E D284                       		add.l	d4,d1
0001BB80 D680                       		add.l	d0,d3
0001BB82 6100 0000                  		bsr.w	sub_1BCE8
0001BB86 6700                       		beq.s	loc_1BCB0
0001BB88 9680                       		sub.l	d0,d3
0001BB8A 7000                       		moveq	#0,d0
0001BB8C 3140 0010                  		move.w	d0,$10(a0)
0001BB90 08A8 0001 0022             		bclr	#1,$22(a0)
0001BB96 D481                       		add.l	d1,d2
0001BB98 6100 0000                  		bsr.w	sub_1BCE8
0001BB9C 6700                       		beq.s	loc_1BCC6
0001BB9E 9481                       		sub.l	d1,d2
0001BBA0 7200                       		moveq	#0,d1
0001BBA2 3141 0012                  		move.w	d1,$12(a0)
0001BBA6 4E75                       		rts	
0001BBA8                            ; ===========================================================================
0001BBA8                            
0001BBA8                            loc_1BCB0:
0001BBA8 D481                       		add.l	d1,d2
0001BBAA 6100 0000                  		bsr.w	sub_1BCE8
0001BBAE 6700                       		beq.s	loc_1BCD4
0001BBB0 9481                       		sub.l	d1,d2
0001BBB2 7200                       		moveq	#0,d1
0001BBB4 3141 0012                  		move.w	d1,$12(a0)
0001BBB8 08A8 0001 0022             		bclr	#1,$22(a0)
0001BBBE                            
0001BBBE                            loc_1BCC6:
0001BBBE E080                       		asr.l	#8,d0
0001BBC0 E081                       		asr.l	#8,d1
0001BBC2 3140 0010                  		move.w	d0,$10(a0)
0001BBC6 3141 0012                  		move.w	d1,$12(a0)
0001BBCA 4E75                       		rts	
0001BBCC                            ; ===========================================================================
0001BBCC                            
0001BBCC                            loc_1BCD4:
0001BBCC E080                       		asr.l	#8,d0
0001BBCE E081                       		asr.l	#8,d1
0001BBD0 3140 0010                  		move.w	d0,$10(a0)
0001BBD4 3141 0012                  		move.w	d1,$12(a0)
0001BBD8 08E8 0001 0022             		bset	#1,$22(a0)
0001BBDE 4E75                       		rts	
0001BBE0                            ; End of function Obj09_Fall
0001BBE0                            
0001BBE0                            
0001BBE0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BBE0                            
0001BBE0                            
0001BBE0                            sub_1BCE8:				; XREF: Obj09_Move; Obj09_Fall
0001BBE0 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BBE6 7800                       		moveq	#0,d4
0001BBE8 4842                       		swap	d2
0001BBEA 3802                       		move.w	d2,d4
0001BBEC 4842                       		swap	d2
0001BBEE 0644 0044                  		addi.w	#$44,d4
0001BBF2 88FC 0018                  		divu.w	#$18,d4
0001BBF6 C8FC 0080                  		mulu.w	#$80,d4
0001BBFA D3C4                       		adda.l	d4,a1
0001BBFC 7800                       		moveq	#0,d4
0001BBFE 4843                       		swap	d3
0001BC00 3803                       		move.w	d3,d4
0001BC02 4843                       		swap	d3
0001BC04 0644 0014                  		addi.w	#$14,d4
0001BC08 88FC 0018                  		divu.w	#$18,d4
0001BC0C D2C4                       		adda.w	d4,a1
0001BC0E 7A00                       		moveq	#0,d5
0001BC10 1819                       		move.b	(a1)+,d4
0001BC12 6100                       		bsr.s	sub_1BD30
0001BC14 1819                       		move.b	(a1)+,d4
0001BC16 6100                       		bsr.s	sub_1BD30
0001BC18 D2FC 007E                  		adda.w	#$7E,a1
0001BC1C 1819                       		move.b	(a1)+,d4
0001BC1E 6100                       		bsr.s	sub_1BD30
0001BC20 1819                       		move.b	(a1)+,d4
0001BC22 6100                       		bsr.s	sub_1BD30
0001BC24 4A05                       		tst.b	d5
0001BC26 4E75                       		rts	
0001BC28                            ; End of function sub_1BCE8
0001BC28                            
0001BC28                            
0001BC28                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC28                            
0001BC28                            
0001BC28                            sub_1BD30:				; XREF: sub_1BCE8
0001BC28 6700                       		beq.s	locret_1BD44
0001BC2A 0C04 0028                  		cmpi.b	#$28,d4
0001BC2E 6700                       		beq.s	locret_1BD44
0001BC30 0C04 003A                  		cmpi.b	#$3A,d4
0001BC34 6500                       		bcs.s	loc_1BD46
0001BC36 0C04 004B                  		cmpi.b	#$4B,d4
0001BC3A 6400                       		bcc.s	loc_1BD46
0001BC3C                            
0001BC3C                            locret_1BD44:
0001BC3C 4E75                       		rts	
0001BC3E                            ; ===========================================================================
0001BC3E                            
0001BC3E                            loc_1BD46:
0001BC3E 1144 0030                  		move.b	d4,$30(a0)
0001BC42 2149 0032                  		move.l	a1,$32(a0)
0001BC46 7AFF                       		moveq	#-1,d5
0001BC48 4E75                       		rts	
0001BC4A                            ; End of function sub_1BD30
0001BC4A                            
0001BC4A                            
0001BC4A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BC4A                            
0001BC4A                            
0001BC4A                            Obj09_ChkItems:				; XREF: Obj09_Display
0001BC4A 43F9 00FF 0000             		lea	($FF0000).l,a1
0001BC50 7800                       		moveq	#0,d4
0001BC52 3828 000C                  		move.w	$C(a0),d4
0001BC56 0644 0050                  		addi.w	#$50,d4
0001BC5A 88FC 0018                  		divu.w	#$18,d4
0001BC5E C8FC 0080                  		mulu.w	#$80,d4
0001BC62 D3C4                       		adda.l	d4,a1
0001BC64 7800                       		moveq	#0,d4
0001BC66 3828 0008                  		move.w	8(a0),d4
0001BC6A 0644 0020                  		addi.w	#$20,d4
0001BC6E 88FC 0018                  		divu.w	#$18,d4
0001BC72 D2C4                       		adda.w	d4,a1
0001BC74 1811                       		move.b	(a1),d4
0001BC76 6600                       		bne.s	Obj09_ChkCont
0001BC78 4A28 003A                  		tst.b	$3A(a0)
0001BC7C 6600 0000                  		bne.w	Obj09_MakeGhostSolid
0001BC80 7800                       		moveq	#0,d4
0001BC82 4E75                       		rts	
0001BC84                            ; ===========================================================================
0001BC84                            
0001BC84                            Obj09_ChkCont:
0001BC84 0C04 003A                  		cmpi.b	#$3A,d4		; is the item a	ring?
0001BC88 6600                       		bne.s	Obj09_Chk1Up
0001BC8A 6100 F72C                  		bsr.w	SS_RemoveCollectedItem
0001BC8E 6600                       		bne.s	Obj09_GetCont
0001BC90 14BC 0001                  		move.b	#1,(a2)
0001BC94 2549 0004                  		move.l	a1,4(a2)
0001BC98                            
0001BC98                            Obj09_GetCont:
0001BC98 4EB9 0000 9C3E             		jsr	CollectRing
0001BC9E 0C78 0032 FE20             		cmpi.w	#50,($FFFFFE20).w ; check if you have 50 rings
0001BCA4 6500                       		bcs.s	Obj09_NoCont
0001BCA6 08F8 0000 FE1B             		bset	#0,($FFFFFE1B).w
0001BCAC 6600                       		bne.s	Obj09_NoCont
0001BCAE 5238 FE18                  		addq.b	#1,($FFFFFE18).w ; add 1 to number of continues
0001BCB2 303C 00BF                  		move.w	#$BF,d0
0001BCB6 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra continue sound
0001BCBC                            
0001BCBC                            Obj09_NoCont:
0001BCBC 7800                       		moveq	#0,d4
0001BCBE 4E75                       		rts	
0001BCC0                            ; ===========================================================================
0001BCC0                            
0001BCC0                            Obj09_Chk1Up:
0001BCC0 0C04 0028                  		cmpi.b	#$28,d4		; is the item an extra life?
0001BCC4 6600                       		bne.s	Obj09_ChkEmer
0001BCC6 6100 F6F0                  		bsr.w	SS_RemoveCollectedItem
0001BCCA 6600                       		bne.s	Obj09_Get1Up
0001BCCC 14BC 0003                  		move.b	#3,(a2)
0001BCD0 2549 0004                  		move.l	a1,4(a2)
0001BCD4                            
0001BCD4                            Obj09_Get1Up:
0001BCD4 5238 FE12                  		addq.b	#1,($FFFFFE12).w ; add 1 to number of lives
0001BCD8 5238 FE1C                  		addq.b	#1,($FFFFFE1C).w ; add 1 to lives counter
0001BCDC 303C 0088                  		move.w	#$88,d0
0001BCE0 4EB9 0000 1396             		jsr	(PlaySound).l	; play extra life music
0001BCE6 7800                       		moveq	#0,d4
0001BCE8 4E75                       		rts	
0001BCEA                            ; ===========================================================================
0001BCEA                            
0001BCEA                            Obj09_ChkEmer:
0001BCEA 0C04 003B                  		cmpi.b	#$3B,d4		; is the item an emerald?
0001BCEE 6500                       		bcs.s	Obj09_ChkGhost
0001BCF0 0C04 0040                  		cmpi.b	#$40,d4
0001BCF4 6200                       		bhi.s	Obj09_ChkGhost
0001BCF6 6100 F6C0                  		bsr.w	SS_RemoveCollectedItem
0001BCFA 6600                       		bne.s	Obj09_GetEmer
0001BCFC 14BC 0005                  		move.b	#5,(a2)
0001BD00 2549 0004                  		move.l	a1,4(a2)
0001BD04                            
0001BD04                            Obj09_GetEmer:
0001BD04 0C38 0006 FE57             		cmpi.b	#6,($FFFFFE57).w ; do you have all the emeralds?
0001BD0A 6700                       		beq.s	Obj09_NoEmer	; if yes, branch
0001BD0C 0404 003B                  		subi.b	#$3B,d4
0001BD10 7000                       		moveq	#0,d0
0001BD12 1038 FE57                  		move.b	($FFFFFE57).w,d0
0001BD16 45F8 FE58                  		lea	($FFFFFE58).w,a2
0001BD1A 1584 0000                  		move.b	d4,(a2,d0.w)
0001BD1E 5238 FE57                  		addq.b	#1,($FFFFFE57).w ; add 1 to number of emeralds
0001BD22                            
0001BD22                            Obj09_NoEmer:
0001BD22 303C 0093                  		move.w	#$93,d0
0001BD26 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play emerald music
0001BD2C 7800                       		moveq	#0,d4
0001BD2E 4E75                       		rts	
0001BD30                            ; ===========================================================================
0001BD30                            
0001BD30                            Obj09_ChkGhost:
0001BD30 0C04 0041                  		cmpi.b	#$41,d4		; is the item a	ghost block?
0001BD34 6600                       		bne.s	Obj09_ChkGhostTag
0001BD36 117C 0001 003A             		move.b	#1,$3A(a0)	; mark the ghost block as "passed"
0001BD3C                            
0001BD3C                            Obj09_ChkGhostTag:
0001BD3C 0C04 004A                  		cmpi.b	#$4A,d4		; is the item a	switch for ghost blocks?
0001BD40 6600                       		bne.s	Obj09_NoGhost
0001BD42 0C28 0001 003A             		cmpi.b	#1,$3A(a0)	; have the ghost blocks	been passed?
0001BD48 6600                       		bne.s	Obj09_NoGhost	; if not, branch
0001BD4A 117C 0002 003A             		move.b	#2,$3A(a0)	; mark the ghost blocks	as "solid"
0001BD50                            
0001BD50                            Obj09_NoGhost:
0001BD50 78FF                       		moveq	#-1,d4
0001BD52 4E75                       		rts	
0001BD54                            ; ===========================================================================
0001BD54                            
0001BD54                            Obj09_MakeGhostSolid:
0001BD54 0C28 0002 003A             		cmpi.b	#2,$3A(a0)	; is the ghost marked as "solid"?
0001BD5A 6600                       		bne.s	Obj09_GhostNotSolid ; if not, branch
0001BD5C 43F9 00FF 1020             		lea	($FF1020).l,a1
0001BD62 723F                       		moveq	#$3F,d1
0001BD64                            
0001BD64                            Obj09_GhostLoop2:
0001BD64 743F                       		moveq	#$3F,d2
0001BD66                            
0001BD66                            Obj09_GhostLoop:
0001BD66 0C11 0041                  		cmpi.b	#$41,(a1)	; is the item a	ghost block?
0001BD6A 6600                       		bne.s	Obj09_NoReplace	; if not, branch
0001BD6C 12BC 002C                  		move.b	#$2C,(a1)	; replace ghost	block with a solid block
0001BD70                            
0001BD70                            Obj09_NoReplace:
0001BD70 5249                       		addq.w	#1,a1
0001BD72 51CA FFF2                  		dbf	d2,Obj09_GhostLoop
0001BD76 43E9 0040                  		lea	$40(a1),a1
0001BD7A 51C9 FFE8                  		dbf	d1,Obj09_GhostLoop2
0001BD7E                            
0001BD7E                            Obj09_GhostNotSolid:
0001BD7E 4228 003A                  		clr.b	$3A(a0)
0001BD82 7800                       		moveq	#0,d4
0001BD84 4E75                       		rts	
0001BD86                            ; End of function Obj09_ChkItems
0001BD86                            
0001BD86                            
0001BD86                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BD86                            
0001BD86                            
0001BD86                            Obj09_ChkItems2:			; XREF: Obj09_Display
0001BD86 1028 0030                  		move.b	$30(a0),d0
0001BD8A 6600                       		bne.s	Obj09_ChkBumper
0001BD8C 5328 0036                  		subq.b	#1,$36(a0)
0001BD90 6A00                       		bpl.s	loc_1BEA0
0001BD92 117C 0000 0036             		move.b	#0,$36(a0)
0001BD98                            
0001BD98                            loc_1BEA0:
0001BD98 5328 0037                  		subq.b	#1,$37(a0)
0001BD9C 6A00                       		bpl.s	locret_1BEAC
0001BD9E 117C 0000 0037             		move.b	#0,$37(a0)
0001BDA4                            
0001BDA4                            locret_1BEAC:
0001BDA4 4E75                       		rts	
0001BDA6                            ; ===========================================================================
0001BDA6                            
0001BDA6                            Obj09_ChkBumper:
0001BDA6 0C00 0025                  		cmpi.b	#$25,d0		; is the item a	bumper?
0001BDAA 6600                       		bne.s	Obj09_GOAL
0001BDAC 2228 0032                  		move.l	$32(a0),d1
0001BDB0 0481 00FF 0001             		subi.l	#$FF0001,d1
0001BDB6 3401                       		move.w	d1,d2
0001BDB8 0241 007F                  		andi.w	#$7F,d1
0001BDBC C2FC 0018                  		mulu.w	#$18,d1
0001BDC0 0441 0014                  		subi.w	#$14,d1
0001BDC4 EE4A                       		lsr.w	#7,d2
0001BDC6 0242 007F                  		andi.w	#$7F,d2
0001BDCA C4FC 0018                  		mulu.w	#$18,d2
0001BDCE 0442 0044                  		subi.w	#$44,d2
0001BDD2 9268 0008                  		sub.w	8(a0),d1
0001BDD6 9468 000C                  		sub.w	$C(a0),d2
0001BDDA 4EB9 0000 2CA8             		jsr	(CalcAngle).l
0001BDE0 4EB9 0000 29DA             		jsr	(CalcSine).l
0001BDE6 C3FC F900                  		muls.w	#-$700,d1
0001BDEA E081                       		asr.l	#8,d1
0001BDEC 3141 0010                  		move.w	d1,$10(a0)
0001BDF0 C1FC F900                  		muls.w	#-$700,d0
0001BDF4 E080                       		asr.l	#8,d0
0001BDF6 3140 0012                  		move.w	d0,$12(a0)
0001BDFA 08E8 0001 0022             		bset	#1,$22(a0)
0001BE00 6100 F5B6                  		bsr.w	SS_RemoveCollectedItem
0001BE04 6600                       		bne.s	Obj09_BumpSnd
0001BE06 14BC 0002                  		move.b	#2,(a2)
0001BE0A 2028 0032                  		move.l	$32(a0),d0
0001BE0E 5380                       		subq.l	#1,d0
0001BE10 2540 0004                  		move.l	d0,4(a2)
0001BE14                            
0001BE14                            Obj09_BumpSnd:
0001BE14 303C 00B4                  		move.w	#$B4,d0
0001BE18 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play bumper sound
0001BE1E                            ; ===========================================================================
0001BE1E                            
0001BE1E                            Obj09_GOAL:
0001BE1E 0C00 0027                  		cmpi.b	#$27,d0		; is the item a	"GOAL"?
0001BE22 6600                       		bne.s	Obj09_UPblock
0001BE24 5428 0024                  		addq.b	#2,$24(a0)	; run routine "Obj09_ExitStage"
0001BE28 303C 00A8                  		move.w	#$A8,d0		; change item
0001BE2C 4EB9 0000 139C             		jsr	(PlaySound_Special).l ;	play "GOAL" sound
0001BE32 4E75                       		rts	
0001BE34                            ; ===========================================================================
0001BE34                            
0001BE34                            Obj09_UPblock:
0001BE34 0C00 0029                  		cmpi.b	#$29,d0		; is the item an "UP" block?
0001BE38 6600                       		bne.s	Obj09_DOWNblock
0001BE3A 4A28 0036                  		tst.b	$36(a0)
0001BE3E 6600 0000                  		bne.w	Obj09_NoGlass
0001BE42 117C 001E 0036             		move.b	#$1E,$36(a0)
0001BE48 0838 0006 F783             		btst	#6,($FFFFF783).w
0001BE4E 6700                       		beq.s	Obj09_UPsnd
0001BE50 E1F8 F782                  		asl	($FFFFF782).w	; increase stage rotation speed
0001BE54 2268 0032                  		movea.l	$32(a0),a1
0001BE58 5389                       		subq.l	#1,a1
0001BE5A 12BC 002A                  		move.b	#$2A,(a1)	; change item to a "DOWN" block
0001BE5E                            
0001BE5E                            Obj09_UPsnd:
0001BE5E 303C 00A9                  		move.w	#$A9,d0
0001BE62 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001BE68                            ; ===========================================================================
0001BE68                            
0001BE68                            Obj09_DOWNblock:
0001BE68 0C00 002A                  		cmpi.b	#$2A,d0		; is the item a	"DOWN" block?
0001BE6C 6600                       		bne.s	Obj09_Rblock
0001BE6E 4A28 0036                  		tst.b	$36(a0)
0001BE72 6600 0000                  		bne.w	Obj09_NoGlass
0001BE76 117C 001E 0036             		move.b	#$1E,$36(a0)
0001BE7C 0838 0006 F783             		btst	#6,($FFFFF783).w
0001BE82 6600                       		bne.s	Obj09_DOWNsnd
0001BE84 E0F8 F782                  		asr	($FFFFF782).w	; reduce stage rotation	speed
0001BE88 2268 0032                  		movea.l	$32(a0),a1
0001BE8C 5389                       		subq.l	#1,a1
0001BE8E 12BC 0029                  		move.b	#$29,(a1)	; change item to an "UP" block
0001BE92                            
0001BE92                            Obj09_DOWNsnd:
0001BE92 303C 00A9                  		move.w	#$A9,d0
0001BE96 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play up/down sound
0001BE9C                            ; ===========================================================================
0001BE9C                            
0001BE9C                            Obj09_Rblock:
0001BE9C 0C00 002B                  		cmpi.b	#$2B,d0		; is the item an "R" block?
0001BEA0 6600                       		bne.s	Obj09_ChkGlass
0001BEA2 4A28 0037                  		tst.b	$37(a0)
0001BEA6 6600 0000                  		bne.w	Obj09_NoGlass
0001BEAA 117C 001E 0037             		move.b	#$1E,$37(a0)
0001BEB0 6100 F506                  		bsr.w	SS_RemoveCollectedItem
0001BEB4 6600                       		bne.s	Obj09_RevStage
0001BEB6 14BC 0004                  		move.b	#4,(a2)
0001BEBA 2028 0032                  		move.l	$32(a0),d0
0001BEBE 5380                       		subq.l	#1,d0
0001BEC0 2540 0004                  		move.l	d0,4(a2)
0001BEC4                            
0001BEC4                            Obj09_RevStage:
0001BEC4 4478 F782                  		neg.w	($FFFFF782).w	; reverse stage	rotation
0001BEC8 303C 00A9                  		move.w	#$A9,d0
0001BECC 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play sound
0001BED2                            ; ===========================================================================
0001BED2                            
0001BED2                            Obj09_ChkGlass:
0001BED2 0C00 002D                  		cmpi.b	#$2D,d0		; is the item a	glass block?
0001BED6 6700                       		beq.s	Obj09_Glass	; if yes, branch
0001BED8 0C00 002E                  		cmpi.b	#$2E,d0
0001BEDC 6700                       		beq.s	Obj09_Glass
0001BEDE 0C00 002F                  		cmpi.b	#$2F,d0
0001BEE2 6700                       		beq.s	Obj09_Glass
0001BEE4 0C00 0030                  		cmpi.b	#$30,d0
0001BEE8 6600                       		bne.s	Obj09_NoGlass	; if not, branch
0001BEEA                            
0001BEEA                            Obj09_Glass:
0001BEEA 6100 F4CC                  		bsr.w	SS_RemoveCollectedItem
0001BEEE 6600                       		bne.s	Obj09_GlassSnd
0001BEF0 14BC 0006                  		move.b	#6,(a2)
0001BEF4 2268 0032                  		movea.l	$32(a0),a1
0001BEF8 5389                       		subq.l	#1,a1
0001BEFA 2549 0004                  		move.l	a1,4(a2)
0001BEFE 1011                       		move.b	(a1),d0
0001BF00 5200                       		addq.b	#1,d0		; change glass type when touched
0001BF02 0C00 0030                  		cmpi.b	#$30,d0
0001BF06 6300                       		bls.s	Obj09_GlassUpdate ; if glass is	still there, branch
0001BF08 4200                       		clr.b	d0		; remove the glass block when it's destroyed
0001BF0A                            
0001BF0A                            Obj09_GlassUpdate:
0001BF0A 1540 0004                  		move.b	d0,4(a2)	; update the stage layout
0001BF0E                            
0001BF0E                            Obj09_GlassSnd:
0001BF0E 303C 00BA                  		move.w	#$BA,d0
0001BF12 4EF9 0000 139C             		jmp	(PlaySound_Special).l ;	play glass block sound
0001BF18                            ; ===========================================================================
0001BF18                            
0001BF18                            Obj09_NoGlass:
0001BF18 4E75                       		rts	
0001BF1A                            ; End of function Obj09_ChkItems2
0001BF1A                            
0001BF1A                            ; ===========================================================================
0001BF1A                            ; ---------------------------------------------------------------------------
0001BF1A                            ; Object 10 - blank
0001BF1A                            ; ---------------------------------------------------------------------------
0001BF1A                            
0001BF1A                            Obj10:					; XREF: Obj_Index
0001BF1A 4E75                       		rts	
0001BF1C                            ; ---------------------------------------------------------------------------
0001BF1C                            ; Subroutine to	animate	level graphics
0001BF1C                            ; ---------------------------------------------------------------------------
0001BF1C                            
0001BF1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001BF1C                            
0001BF1C                            
0001BF1C                            AniArt_Load:				; XREF: Demo_Time; loc_F54
0001BF1C 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001BF20 6600                       		bne.s	AniArt_Pause	; if yes, branch
0001BF22 4DF9 00C0 0000             		lea	($C00000).l,a6
0001BF28 6100 0000                  		bsr.w	AniArt_GiantRing
0001BF2C 7000                       		moveq	#0,d0
0001BF2E 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001BF32 D040                       		add.w	d0,d0
0001BF34 303B 0000                  		move.w	AniArt_Index(pc,d0.w),d0
0001BF38 4EFB 0000                  		jmp	AniArt_Index(pc,d0.w)
0001BF3C                            ; ===========================================================================
0001BF3C                            
0001BF3C                            AniArt_Pause:
0001BF3C 4E75                       		rts	
0001BF3E                            ; End of function AniArt_Load
0001BF3E                            
0001BF3E                            ; ===========================================================================
0001BF3E 0000 0000                  AniArt_Index:	dc.w AniArt_GHZ-AniArt_Index, AniArt_none-AniArt_Index
0001BF42 0000 0000                  		dc.w AniArt_MZ-AniArt_Index, AniArt_none-AniArt_Index
0001BF46 0000 0000                  		dc.w AniArt_none-AniArt_Index, AniArt_SBZ-AniArt_Index
0001BF4A 0000                       		dc.w AniArt_Ending-AniArt_Index
0001BF4C                            ; ===========================================================================
0001BF4C                            ; ---------------------------------------------------------------------------
0001BF4C                            ; Animated pattern routine - Green Hill
0001BF4C                            ; ---------------------------------------------------------------------------
0001BF4C                            
0001BF4C                            AniArt_GHZ:				; XREF: AniArt_Index
0001BF4C 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001BF50 6A00                       		bpl.s	loc_1C08A
0001BF52 11FC 0005 F7B1             		move.b	#5,($FFFFF7B1).w ; time	to display each	frame for
0001BF58 43F9 0000 0000             		lea	(Art_GhzWater).l,a1 ; load waterfall patterns
0001BF5E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001BF62 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001BF66 0240 0001                  		andi.w	#1,d0
0001BF6A 6700                       		beq.s	loc_1C078
0001BF6C 43E9 0100                  		lea	$100(a1),a1	; load next frame
0001BF70                            
0001BF70                            loc_1C078:
0001BF70 23FC 6F00 0001 00C0 0004   		move.l	#$6F000001,($C00004).l ; VRAM address
0001BF7A 323C 0007                  		move.w	#7,d1		; number of 8x8	tiles
0001BF7E 6000 0000                  		bra.w	LoadTiles
0001BF82                            ; ===========================================================================
0001BF82                            
0001BF82                            loc_1C08A:
0001BF82 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001BF86 6A00                       		bpl.s	loc_1C0C0
0001BF88 11FC 000F F7B3             		move.b	#$F,($FFFFF7B3).w
0001BF8E 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001BF94 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001BF98 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001BF9C 0240 0001                  		andi.w	#1,d0
0001BFA0 6700                       		beq.s	loc_1C0AE
0001BFA2 43E9 0200                  		lea	$200(a1),a1
0001BFA6                            
0001BFA6                            loc_1C0AE:
0001BFA6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001BFB0 323C 000F                  		move.w	#$F,d1
0001BFB4 6000 0000                  		bra.w	LoadTiles
0001BFB8                            ; ===========================================================================
0001BFB8                            
0001BFB8                            loc_1C0C0:
0001BFB8 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001BFBC 6A00                       		bpl.s	locret_1C10C
0001BFBE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001BFC4 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001BFC8 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001BFCC 0240 0003                  		andi.w	#3,d0
0001BFD0 103B 0000                  		move.b	byte_1C10E(pc,d0.w),d0
0001BFD4 0800 0000                  		btst	#0,d0
0001BFD8 6600                       		bne.s	loc_1C0E8
0001BFDA 11FC 007F F7B5             		move.b	#$7F,($FFFFF7B5).w
0001BFE0                            
0001BFE0                            loc_1C0E8:
0001BFE0 EF48                       		lsl.w	#7,d0
0001BFE2 3200                       		move.w	d0,d1
0001BFE4 D040                       		add.w	d0,d0
0001BFE6 D041                       		add.w	d1,d0
0001BFE8 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001BFF2 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001BFF8 43F1 0000                  		lea	(a1,d0.w),a1
0001BFFC 323C 000B                  		move.w	#$B,d1
0001C000 6100 0000                  		bsr.w	LoadTiles
0001C004                            
0001C004                            locret_1C10C:
0001C004 4E75                       		rts	
0001C006                            ; ===========================================================================
0001C006 0001 0201                  byte_1C10E:	dc.b 0,	1, 2, 1
0001C00A                            ; ===========================================================================
0001C00A                            ; ---------------------------------------------------------------------------
0001C00A                            ; Animated pattern routine - Marble
0001C00A                            ; ---------------------------------------------------------------------------
0001C00A                            
0001C00A                            AniArt_MZ:				; XREF: AniArt_Index
0001C00A 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C00E 6A00                       		bpl.s	loc_1C150
0001C010 11FC 0013 F7B1             		move.b	#$13,($FFFFF7B1).w
0001C016 43F9 0000 0000             		lea	(Art_MzLava1).l,a1 ; load lava surface patterns
0001C01C 7000                       		moveq	#0,d0
0001C01E 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C022 5200                       		addq.b	#1,d0
0001C024 0C00 0003                  		cmpi.b	#3,d0
0001C028 6600                       		bne.s	loc_1C134
0001C02A 7000                       		moveq	#0,d0
0001C02C                            
0001C02C                            loc_1C134:
0001C02C 11C0 F7B0                  		move.b	d0,($FFFFF7B0).w
0001C030 C0FC 0100                  		mulu.w	#$100,d0
0001C034 D2C0                       		adda.w	d0,a1
0001C036 23FC 5C40 0001 00C0 0004   		move.l	#$5C400001,($C00004).l
0001C040 323C 0007                  		move.w	#7,d1
0001C044 6100 0000                  		bsr.w	LoadTiles
0001C048                            
0001C048                            loc_1C150:
0001C048 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C04C 6A00                       		bpl.s	loc_1C1AE
0001C04E 11FC 0001 F7B3             		move.b	#1,($FFFFF7B3).w
0001C054 7000                       		moveq	#0,d0
0001C056 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C05A 49F9 0000 0000             		lea	(Art_MzLava2).l,a4 ; load lava patterns
0001C060 EE58                       		ror.w	#7,d0
0001C062 D8C0                       		adda.w	d0,a4
0001C064 23FC 5A40 0001 00C0 0004   		move.l	#$5A400001,($C00004).l
0001C06E 7600                       		moveq	#0,d3
0001C070 1638 F7B2                  		move.b	($FFFFF7B2).w,d3
0001C074 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C078 1638 FE68                  		move.b	($FFFFFE68).w,d3
0001C07C 343C 0003                  		move.w	#3,d2
0001C080                            
0001C080                            loc_1C188:
0001C080 3003                       		move.w	d3,d0
0001C082 D040                       		add.w	d0,d0
0001C084 0240 001E                  		andi.w	#$1E,d0
0001C088 47F9 0000 0000             		lea	(AniArt_MZextra).l,a3
0001C08E 3033 0000                  		move.w	(a3,d0.w),d0
0001C092 47F3 0000                  		lea	(a3,d0.w),a3
0001C096 224C                       		movea.l	a4,a1
0001C098 323C 001F                  		move.w	#$1F,d1
0001C09C 4E93                       		jsr	(a3)
0001C09E 5843                       		addq.w	#4,d3
0001C0A0 51CA FFDE                  		dbf	d2,loc_1C188
0001C0A4 4E75                       		rts	
0001C0A6                            ; ===========================================================================
0001C0A6                            
0001C0A6                            loc_1C1AE:
0001C0A6 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C0AA 6A00 0000                  		bpl.w	locret_1C1EA
0001C0AE 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C0B4 43F9 0000 0000             		lea	(Art_MzTorch).l,a1 ; load torch	patterns
0001C0BA 7000                       		moveq	#0,d0
0001C0BC 1038 F7B6                  		move.b	($FFFFF7B6).w,d0
0001C0C0 5238 F7B6                  		addq.b	#1,($FFFFF7B6).w
0001C0C4 0238 0003 F7B6             		andi.b	#3,($FFFFF7B6).w
0001C0CA C0FC 00C0                  		mulu.w	#$C0,d0
0001C0CE D2C0                       		adda.w	d0,a1
0001C0D0 23FC 5E40 0001 00C0 0004   		move.l	#$5E400001,($C00004).l
0001C0DA 323C 0005                  		move.w	#5,d1
0001C0DE 6000 0000                  		bra.w	LoadTiles
0001C0E2                            ; ===========================================================================
0001C0E2                            
0001C0E2                            locret_1C1EA:
0001C0E2 4E75                       		rts	
0001C0E4                            ; ===========================================================================
0001C0E4                            ; ---------------------------------------------------------------------------
0001C0E4                            ; Animated pattern routine - Scrap Brain
0001C0E4                            ; ---------------------------------------------------------------------------
0001C0E4                            
0001C0E4                            AniArt_SBZ:				; XREF: AniArt_Index
0001C0E4 4A38 F7B4                  		tst.b	($FFFFF7B4).w
0001C0E8 6700                       		beq.s	loc_1C1F8
0001C0EA 5338 F7B4                  		subq.b	#1,($FFFFF7B4).w
0001C0EE 6000                       		bra.s	loc_1C250
0001C0F0                            ; ===========================================================================
0001C0F0                            
0001C0F0                            loc_1C1F8:
0001C0F0 5338 F7B1                  		subq.b	#1,($FFFFF7B1).w
0001C0F4 6A00                       		bpl.s	loc_1C250
0001C0F6 11FC 0007 F7B1             		move.b	#7,($FFFFF7B1).w
0001C0FC 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1 ; load smoke patterns
0001C102 23FC 4900 0002 00C0 0004   		move.l	#$49000002,($C00004).l
0001C10C 1038 F7B0                  		move.b	($FFFFF7B0).w,d0
0001C110 5238 F7B0                  		addq.b	#1,($FFFFF7B0).w
0001C114 0240 0007                  		andi.w	#7,d0
0001C118 6700                       		beq.s	loc_1C234
0001C11A 5340                       		subq.w	#1,d0
0001C11C C0FC 0180                  		mulu.w	#$180,d0
0001C120 43F1 0000                  		lea	(a1,d0.w),a1
0001C124 323C 000B                  		move.w	#$B,d1
0001C128 6000 0000                  		bra.w	LoadTiles
0001C12C                            ; ===========================================================================
0001C12C                            
0001C12C                            loc_1C234:
0001C12C 11FC 00B4 F7B4             		move.b	#$B4,($FFFFF7B4).w
0001C132                            
0001C132                            loc_1C23A:
0001C132 323C 0005                  		move.w	#5,d1
0001C136 6100 0000                  		bsr.w	LoadTiles
0001C13A 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C140 323C 0005                  		move.w	#5,d1
0001C144 6000 0000                  		bra.w	LoadTiles
0001C148                            ; ===========================================================================
0001C148                            
0001C148                            loc_1C250:
0001C148 4A38 F7B5                  		tst.b	($FFFFF7B5).w
0001C14C 6700                       		beq.s	loc_1C25C
0001C14E 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C152 6000                       		bra.s	locret_1C2A0
0001C154                            ; ===========================================================================
0001C154                            
0001C154                            loc_1C25C:
0001C154 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C158 6A00                       		bpl.s	locret_1C2A0
0001C15A 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C160 43F9 0000 0000             		lea	(Art_SbzSmoke).l,a1
0001C166 23FC 4A80 0002 00C0 0004   		move.l	#$4A800002,($C00004).l
0001C170 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C174 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C178 0240 0007                  		andi.w	#7,d0
0001C17C 6700                       		beq.s	loc_1C298
0001C17E 5340                       		subq.w	#1,d0
0001C180 C0FC 0180                  		mulu.w	#$180,d0
0001C184 43F1 0000                  		lea	(a1,d0.w),a1
0001C188 323C 000B                  		move.w	#$B,d1
0001C18C 6000 0000                  		bra.w	LoadTiles
0001C190                            ; ===========================================================================
0001C190                            
0001C190                            loc_1C298:
0001C190 11FC 0078 F7B5             		move.b	#$78,($FFFFF7B5).w
0001C196 609A                       		bra.s	loc_1C23A
0001C198                            ; ===========================================================================
0001C198                            
0001C198                            locret_1C2A0:
0001C198 4E75                       		rts	
0001C19A                            ; ===========================================================================
0001C19A                            ; ---------------------------------------------------------------------------
0001C19A                            ; Animated pattern routine - ending sequence
0001C19A                            ; ---------------------------------------------------------------------------
0001C19A                            
0001C19A                            AniArt_Ending:				; XREF: AniArt_Index
0001C19A 5338 F7B3                  		subq.b	#1,($FFFFF7B3).w
0001C19E 6A00                       		bpl.s	loc_1C2F4
0001C1A0 11FC 0007 F7B3             		move.b	#7,($FFFFF7B3).w
0001C1A6 43F9 0000 0000             		lea	(Art_GhzFlower1).l,a1 ;	load big flower	patterns
0001C1AC 45F8 9400                  		lea	($FFFF9400).w,a2
0001C1B0 1038 F7B2                  		move.b	($FFFFF7B2).w,d0
0001C1B4 5238 F7B2                  		addq.b	#1,($FFFFF7B2).w
0001C1B8 0240 0001                  		andi.w	#1,d0
0001C1BC 6700                       		beq.s	loc_1C2CE
0001C1BE 43E9 0200                  		lea	$200(a1),a1
0001C1C2 45EA 0200                  		lea	$200(a2),a2
0001C1C6                            
0001C1C6                            loc_1C2CE:
0001C1C6 23FC 6B80 0001 00C0 0004   		move.l	#$6B800001,($C00004).l
0001C1D0 323C 000F                  		move.w	#$F,d1
0001C1D4 6100 0000                  		bsr.w	LoadTiles
0001C1D8 224A                       		movea.l	a2,a1
0001C1DA 23FC 7200 0001 00C0 0004   		move.l	#$72000001,($C00004).l
0001C1E4 323C 000F                  		move.w	#$F,d1
0001C1E8 6000 0000                  		bra.w	LoadTiles
0001C1EC                            ; ===========================================================================
0001C1EC                            
0001C1EC                            loc_1C2F4:
0001C1EC 5338 F7B5                  		subq.b	#1,($FFFFF7B5).w
0001C1F0 6A00                       		bpl.s	loc_1C33C
0001C1F2 11FC 0007 F7B5             		move.b	#7,($FFFFF7B5).w
0001C1F8 1038 F7B4                  		move.b	($FFFFF7B4).w,d0
0001C1FC 5238 F7B4                  		addq.b	#1,($FFFFF7B4).w
0001C200 0240 0007                  		andi.w	#7,d0
0001C204 103B 0000                  		move.b	byte_1C334(pc,d0.w),d0
0001C208 EF48                       		lsl.w	#7,d0
0001C20A 3200                       		move.w	d0,d1
0001C20C D040                       		add.w	d0,d0
0001C20E D041                       		add.w	d1,d0
0001C210 23FC 6D80 0001 00C0 0004   		move.l	#$6D800001,($C00004).l
0001C21A 43F9 0000 0000             		lea	(Art_GhzFlower2).l,a1 ;	load small flower patterns
0001C220 43F1 0000                  		lea	(a1,d0.w),a1
0001C224 323C 000B                  		move.w	#$B,d1
0001C228 6000 0000                  		bra.w	LoadTiles
0001C22C                            ; ===========================================================================
0001C22C 0000 0001 0202 0201        byte_1C334:	dc.b 0,	0, 0, 1, 2, 2, 2, 1
0001C234                            ; ===========================================================================
0001C234                            
0001C234                            loc_1C33C:
0001C234 5338 F7B9                  		subq.b	#1,($FFFFF7B9).w
0001C238 6A00                       		bpl.s	loc_1C37A
0001C23A 11FC 000E F7B9             		move.b	#$E,($FFFFF7B9).w
0001C240 1038 F7B8                  		move.b	($FFFFF7B8).w,d0
0001C244 5238 F7B8                  		addq.b	#1,($FFFFF7B8).w
0001C248 0240 0003                  		andi.w	#3,d0
0001C24C 103B 0000                  		move.b	byte_1C376(pc,d0.w),d0
0001C250 E148                       		lsl.w	#8,d0
0001C252 D040                       		add.w	d0,d0
0001C254 23FC 7000 0001 00C0 0004   		move.l	#$70000001,($C00004).l
0001C25E 43F8 9800                  		lea	($FFFF9800).w,a1 ; load	special	flower patterns	(from RAM)
0001C262 43F1 0000                  		lea	(a1,d0.w),a1
0001C266 323C 000F                  		move.w	#$F,d1
0001C26A 6000 0000                  		bra.w	LoadTiles
0001C26E                            ; ===========================================================================
0001C26E 0001 0201                  byte_1C376:	dc.b 0,	1, 2, 1
0001C272                            ; ===========================================================================
0001C272                            
0001C272                            loc_1C37A:
0001C272 5338 F7BB                  		subq.b	#1,($FFFFF7BB).w
0001C276 6A00                       		bpl.s	locret_1C3B4
0001C278 11FC 000B F7BB             		move.b	#$B,($FFFFF7BB).w
0001C27E 1038 F7BA                  		move.b	($FFFFF7BA).w,d0
0001C282 5238 F7BA                  		addq.b	#1,($FFFFF7BA).w
0001C286 0240 0003                  		andi.w	#3,d0
0001C28A 103B 00E2                  		move.b	byte_1C376(pc,d0.w),d0
0001C28E E148                       		lsl.w	#8,d0
0001C290 D040                       		add.w	d0,d0
0001C292 23FC 6800 0001 00C0 0004   		move.l	#$68000001,($C00004).l
0001C29C 43F8 9E00                  		lea	($FFFF9E00).w,a1 ; load	special	flower patterns	(from RAM)
0001C2A0 43F1 0000                  		lea	(a1,d0.w),a1
0001C2A4 323C 000F                  		move.w	#$F,d1
0001C2A8 6000 0000                  		bra.w	LoadTiles
0001C2AC                            ; ===========================================================================
0001C2AC                            
0001C2AC                            locret_1C3B4:
0001C2AC 4E75                       		rts	
0001C2AE                            ; ===========================================================================
0001C2AE                            
0001C2AE                            AniArt_none:				; XREF: AniArt_Index
0001C2AE 4E75                       		rts	
0001C2B0                            
0001C2B0                            ; ---------------------------------------------------------------------------
0001C2B0                            ; Subroutine to	load (d1 - 1) 8x8 tiles
0001C2B0                            ; ---------------------------------------------------------------------------
0001C2B0                            
0001C2B0                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C2B0                            
0001C2B0                            
0001C2B0                            LoadTiles:
0001C2B0 2C99                       		move.l	(a1)+,(a6)
0001C2B2 2C99                       		move.l	(a1)+,(a6)
0001C2B4 2C99                       		move.l	(a1)+,(a6)
0001C2B6 2C99                       		move.l	(a1)+,(a6)
0001C2B8 2C99                       		move.l	(a1)+,(a6)
0001C2BA 2C99                       		move.l	(a1)+,(a6)
0001C2BC 2C99                       		move.l	(a1)+,(a6)
0001C2BE 2C99                       		move.l	(a1)+,(a6)
0001C2C0 51C9 FFEE                  		dbf	d1,LoadTiles
0001C2C4 4E75                       		rts	
0001C2C6                            ; End of function LoadTiles
0001C2C6                            
0001C2C6                            ; ===========================================================================
0001C2C6                            ; ---------------------------------------------------------------------------
0001C2C6                            ; Animated pattern routine - more Marble Zone
0001C2C6                            ; ---------------------------------------------------------------------------
0001C2C6 0000 0000                  AniArt_MZextra:	dc.w loc_1C3EE-AniArt_MZextra, loc_1C3FA-AniArt_MZextra
0001C2CA 0000 0000                  		dc.w loc_1C410-AniArt_MZextra, loc_1C41E-AniArt_MZextra
0001C2CE 0000 0000                  		dc.w loc_1C434-AniArt_MZextra, loc_1C442-AniArt_MZextra
0001C2D2 0000 0000                  		dc.w loc_1C458-AniArt_MZextra, loc_1C466-AniArt_MZextra
0001C2D6 0000 0000                  		dc.w loc_1C47C-AniArt_MZextra, loc_1C48A-AniArt_MZextra
0001C2DA 0000 0000                  		dc.w loc_1C4A0-AniArt_MZextra, loc_1C4AE-AniArt_MZextra
0001C2DE 0000 0000                  		dc.w loc_1C4C4-AniArt_MZextra, loc_1C4D2-AniArt_MZextra
0001C2E2 0000 0000                  		dc.w loc_1C4E8-AniArt_MZextra, loc_1C4FA-AniArt_MZextra
0001C2E6                            ; ===========================================================================
0001C2E6                            
0001C2E6                            loc_1C3EE:				; XREF: AniArt_MZextra
0001C2E6 2C91                       		move.l	(a1),(a6)
0001C2E8 43E9 0010                  		lea	$10(a1),a1
0001C2EC 51C9 FFF8                  		dbf	d1,loc_1C3EE
0001C2F0 4E75                       		rts	
0001C2F2                            ; ===========================================================================
0001C2F2                            
0001C2F2                            loc_1C3FA:				; XREF: AniArt_MZextra
0001C2F2 2029 0002                  		move.l	2(a1),d0
0001C2F6 1029 0001                  		move.b	1(a1),d0
0001C2FA E098                       		ror.l	#8,d0
0001C2FC 2C80                       		move.l	d0,(a6)
0001C2FE 43E9 0010                  		lea	$10(a1),a1
0001C302 51C9 FFEE                  		dbf	d1,loc_1C3FA
0001C306 4E75                       		rts	
0001C308                            ; ===========================================================================
0001C308                            
0001C308                            loc_1C410:				; XREF: AniArt_MZextra
0001C308 2CA9 0002                  		move.l	2(a1),(a6)
0001C30C 43E9 0010                  		lea	$10(a1),a1
0001C310 51C9 FFF6                  		dbf	d1,loc_1C410
0001C314 4E75                       		rts	
0001C316                            ; ===========================================================================
0001C316                            
0001C316                            loc_1C41E:				; XREF: AniArt_MZextra
0001C316 2029 0004                  		move.l	4(a1),d0
0001C31A 1029 0003                  		move.b	3(a1),d0
0001C31E E098                       		ror.l	#8,d0
0001C320 2C80                       		move.l	d0,(a6)
0001C322 43E9 0010                  		lea	$10(a1),a1
0001C326 51C9 FFEE                  		dbf	d1,loc_1C41E
0001C32A 4E75                       		rts	
0001C32C                            ; ===========================================================================
0001C32C                            
0001C32C                            loc_1C434:				; XREF: AniArt_MZextra
0001C32C 2CA9 0004                  		move.l	4(a1),(a6)
0001C330 43E9 0010                  		lea	$10(a1),a1
0001C334 51C9 FFF6                  		dbf	d1,loc_1C434
0001C338 4E75                       		rts	
0001C33A                            ; ===========================================================================
0001C33A                            
0001C33A                            loc_1C442:				; XREF: AniArt_MZextra
0001C33A 2029 0006                  		move.l	6(a1),d0
0001C33E 1029 0005                  		move.b	5(a1),d0
0001C342 E098                       		ror.l	#8,d0
0001C344 2C80                       		move.l	d0,(a6)
0001C346 43E9 0010                  		lea	$10(a1),a1
0001C34A 51C9 FFEE                  		dbf	d1,loc_1C442
0001C34E 4E75                       		rts	
0001C350                            ; ===========================================================================
0001C350                            
0001C350                            loc_1C458:				; XREF: AniArt_MZextra
0001C350 2CA9 0006                  		move.l	6(a1),(a6)
0001C354 43E9 0010                  		lea	$10(a1),a1
0001C358 51C9 FFF6                  		dbf	d1,loc_1C458
0001C35C 4E75                       		rts	
0001C35E                            ; ===========================================================================
0001C35E                            
0001C35E                            loc_1C466:				; XREF: AniArt_MZextra
0001C35E 2029 0008                  		move.l	8(a1),d0
0001C362 1029 0007                  		move.b	7(a1),d0
0001C366 E098                       		ror.l	#8,d0
0001C368 2C80                       		move.l	d0,(a6)
0001C36A 43E9 0010                  		lea	$10(a1),a1
0001C36E 51C9 FFEE                  		dbf	d1,loc_1C466
0001C372 4E75                       		rts	
0001C374                            ; ===========================================================================
0001C374                            
0001C374                            loc_1C47C:				; XREF: AniArt_MZextra
0001C374 2CA9 0008                  		move.l	8(a1),(a6)
0001C378 43E9 0010                  		lea	$10(a1),a1
0001C37C 51C9 FFF6                  		dbf	d1,loc_1C47C
0001C380 4E75                       		rts	
0001C382                            ; ===========================================================================
0001C382                            
0001C382                            loc_1C48A:				; XREF: AniArt_MZextra
0001C382 2029 000A                  		move.l	$A(a1),d0
0001C386 1029 0009                  		move.b	9(a1),d0
0001C38A E098                       		ror.l	#8,d0
0001C38C 2C80                       		move.l	d0,(a6)
0001C38E 43E9 0010                  		lea	$10(a1),a1
0001C392 51C9 FFEE                  		dbf	d1,loc_1C48A
0001C396 4E75                       		rts	
0001C398                            ; ===========================================================================
0001C398                            
0001C398                            loc_1C4A0:				; XREF: AniArt_MZextra
0001C398 2CA9 000A                  		move.l	$A(a1),(a6)
0001C39C 43E9 0010                  		lea	$10(a1),a1
0001C3A0 51C9 FFF6                  		dbf	d1,loc_1C4A0
0001C3A4 4E75                       		rts	
0001C3A6                            ; ===========================================================================
0001C3A6                            
0001C3A6                            loc_1C4AE:				; XREF: AniArt_MZextra
0001C3A6 2029 000C                  		move.l	$C(a1),d0
0001C3AA 1029 000B                  		move.b	$B(a1),d0
0001C3AE E098                       		ror.l	#8,d0
0001C3B0 2C80                       		move.l	d0,(a6)
0001C3B2 43E9 0010                  		lea	$10(a1),a1
0001C3B6 51C9 FFEE                  		dbf	d1,loc_1C4AE
0001C3BA 4E75                       		rts	
0001C3BC                            ; ===========================================================================
0001C3BC                            
0001C3BC                            loc_1C4C4:				; XREF: AniArt_MZextra
0001C3BC 2CA9 000C                  		move.l	$C(a1),(a6)
0001C3C0 43E9 0010                  		lea	$10(a1),a1
0001C3C4 51C9 FFF6                  		dbf	d1,loc_1C4C4
0001C3C8 4E75                       		rts	
0001C3CA                            ; ===========================================================================
0001C3CA                            
0001C3CA                            loc_1C4D2:				; XREF: AniArt_MZextra
0001C3CA 2029 000C                  		move.l	$C(a1),d0
0001C3CE E198                       		rol.l	#8,d0
0001C3D0 1011                       		move.b	0(a1),d0
0001C3D2 2C80                       		move.l	d0,(a6)
0001C3D4 43E9 0010                  		lea	$10(a1),a1
0001C3D8 51C9 FFF0                  		dbf	d1,loc_1C4D2
0001C3DC 4E75                       		rts	
0001C3DE                            ; ===========================================================================
0001C3DE                            
0001C3DE                            loc_1C4E8:				; XREF: AniArt_MZextra
0001C3DE 3CA9 000E                  		move.w	$E(a1),(a6)
0001C3E2 3C91                       		move.w	0(a1),(a6)
0001C3E4 43E9 0010                  		lea	$10(a1),a1
0001C3E8 51C9 FFF4                  		dbf	d1,loc_1C4E8
0001C3EC 4E75                       		rts	
0001C3EE                            ; ===========================================================================
0001C3EE                            
0001C3EE                            loc_1C4FA:				; XREF: AniArt_MZextra
0001C3EE 2011                       		move.l	0(a1),d0
0001C3F0 1029 000F                  		move.b	$F(a1),d0
0001C3F4 E098                       		ror.l	#8,d0
0001C3F6 2C80                       		move.l	d0,(a6)
0001C3F8 43E9 0010                  		lea	$10(a1),a1
0001C3FC 51C9 FFF0                  		dbf	d1,loc_1C4FA
0001C400 4E75                       		rts	
0001C402                            
0001C402                            ; ---------------------------------------------------------------------------
0001C402                            ; Animated pattern routine - giant ring
0001C402                            ; ---------------------------------------------------------------------------
0001C402                            
0001C402                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C402                            
0001C402                            
0001C402                            AniArt_GiantRing:			; XREF: AniArt_Load
0001C402 4A78 F7BE                  		tst.w	($FFFFF7BE).w
0001C406 6600                       		bne.s	loc_1C518
0001C408 4E75                       		rts	
0001C40A                            ; ===========================================================================
0001C40A                            
0001C40A                            loc_1C518:
0001C40A 0478 01C0 F7BE             		subi.w	#$1C0,($FFFFF7BE).w
0001C410 43F9 0000 0000             		lea	(Art_BigRing).l,a1 ; load giant	ring patterns
0001C416 7000                       		moveq	#0,d0
0001C418 3038 F7BE                  		move.w	($FFFFF7BE).w,d0
0001C41C 43F1 0000                  		lea	(a1,d0.w),a1
0001C420 0640 8000                  		addi.w	#$8000,d0
0001C424 E588                       		lsl.l	#2,d0
0001C426 E448                       		lsr.w	#2,d0
0001C428 0040 4000                  		ori.w	#$4000,d0
0001C42C 4840                       		swap	d0
0001C42E 2D40 0004                  		move.l	d0,4(a6)
0001C432 323C 000D                  		move.w	#$D,d1
0001C436 6000 FE78                  		bra.w	LoadTiles
0001C43A                            ; End of function AniArt_GiantRing
0001C43A                            
0001C43A                            ; ===========================================================================
0001C43A                            ; ---------------------------------------------------------------------------
0001C43A                            ; Object 21 - SCORE, TIME, RINGS
0001C43A                            ; ---------------------------------------------------------------------------
0001C43A                            
0001C43A                            Obj21:					; XREF: Obj_Index
0001C43A 7000                       		moveq	#0,d0
0001C43C 1028 0024                  		move.b	$24(a0),d0
0001C440 323B 0000                  		move.w	Obj21_Index(pc,d0.w),d1
0001C444 4EFB 1000                  		jmp	Obj21_Index(pc,d1.w)
0001C448                            ; ===========================================================================
0001C448 0000                       Obj21_Index:	dc.w Obj21_Main-Obj21_Index
0001C44A 0000                       		dc.w Obj21_Flash-Obj21_Index
0001C44C                            ; ===========================================================================
0001C44C                            
0001C44C                            Obj21_Main:				; XREF: Obj21_Main
0001C44C 5428 0024                  		addq.b	#2,$24(a0)
0001C450 317C 0090 0008             		move.w	#$90,8(a0)
0001C456 317C 0108 000A             		move.w	#$108,$A(a0)
0001C45C 217C 0000 0000 0004        		move.l	#Map_obj21,4(a0)
0001C464 317C 06CA 0002             		move.w	#$6CA,2(a0)
0001C46A 117C 0000 0001             		move.b	#0,1(a0)
0001C470 117C 0000 0018             		move.b	#0,$18(a0)
0001C476                            
0001C476                            Obj21_Flash:				; XREF: Obj21_Main
0001C476 4A78 FE20                  		tst.w	($FFFFFE20).w	; do you have any rings?
0001C47A 6700                       		beq.s	Obj21_Flash2	; if not, branch
0001C47C 4228 001A                  		clr.b	$1A(a0)		; make all counters yellow
0001C480 4EF9 0000 D5AC             		jmp	DisplaySprite
0001C486                            ; ===========================================================================
0001C486                            
0001C486                            Obj21_Flash2:
0001C486 7000                       		moveq	#0,d0
0001C488 0838 0003 FE05             		btst	#3,($FFFFFE05).w
0001C48E 6600                       		bne.s	Obj21_Display
0001C490 5240                       		addq.w	#1,d0		; make ring counter flash red
0001C492 0C38 0009 FE23             		cmpi.b	#9,($FFFFFE23).w ; have	9 minutes elapsed?
0001C498 6600                       		bne.s	Obj21_Display	; if not, branch
0001C49A 5440                       		addq.w	#2,d0		; make time counter flash red
0001C49C                            
0001C49C                            Obj21_Display:
0001C49C 1140 001A                  		move.b	d0,$1A(a0)
0001C4A0 4EF9 0000 D5AC             		jmp	DisplaySprite
0001C4A6                            ; ===========================================================================
0001C4A6                            ; ---------------------------------------------------------------------------
0001C4A6                            ; Sprite mappings - SCORE, TIME, RINGS
0001C4A6                            ; ---------------------------------------------------------------------------
0001C4A6                            Map_obj21:
0001C4A6                            	include "_maps\obj21.asm"
0001C4A6                            ; ---------------------------------------------------------------------------
0001C4A6                            ; Sprite mappings - SCORE, TIME, RINGS
0001C4A6                            ; ---------------------------------------------------------------------------
0001C4A6 0000 0000                  		dc.w byte_1C5BC-Map_obj21, byte_1C5F0-Map_obj21
0001C4AA 0000 0000                  		dc.w byte_1C624-Map_obj21, byte_1C658-Map_obj21
0001C4AE 0A                         byte_1C5BC:	dc.b $A
0001C4AF 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C4B4 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C4B9 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C4BE 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C4C3 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C4C8 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C4CD A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C4D2 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C4D7 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C4DC 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C4E1 00                         		dc.b 0
0001C4E2 0A                         byte_1C5F0:	dc.b $A
0001C4E3 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C4E8 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C4ED 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C4F2 900D 8010 00               		dc.b $90, $D, $80, $10,	0
0001C4F7 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C4FC A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C501 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C506 A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C50B 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C510 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C515 00                         		dc.b 0
0001C516 0A                         byte_1C624:	dc.b $A
0001C517 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C51C 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C521 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C526 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C52B 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C530 A00D 8008 00               		dc.b $A0, $D, $80, 8, 0
0001C535 A001 8000 20               		dc.b $A0, 1, $80, 0, $20
0001C53A A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C53F 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C544 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C549 00                         		dc.b 0
0001C54A 0A                         byte_1C658:	dc.b $A
0001C54B 800D 8000 00               		dc.b $80, $D, $80, 0, 0
0001C550 800D 8018 20               		dc.b $80, $D, $80, $18,	$20
0001C555 800D 8020 40               		dc.b $80, $D, $80, $20,	$40
0001C55A 900D A010 00               		dc.b $90, $D, $A0, $10,	0
0001C55F 900D 8028 28               		dc.b $90, $D, $80, $28,	$28
0001C564 A00D A008 00               		dc.b $A0, $D, $A0, 8, 0
0001C569 A001 A000 20               		dc.b $A0, 1, $A0, 0, $20
0001C56E A009 8030 30               		dc.b $A0, 9, $80, $30, $30
0001C573 4005 810A 00               		dc.b $40, 5, $81, $A, 0
0001C578 400D 810E 10               		dc.b $40, $D, $81, $E, $10
0001C57E 00                         		even
0001C57E 00                         		even
0001C57E                            
0001C57E                            ; ---------------------------------------------------------------------------
0001C57E                            ; Add points subroutine
0001C57E                            ; ---------------------------------------------------------------------------
0001C57E                            
0001C57E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C57E                            
0001C57E                            
0001C57E                            AddPoints:
0001C57E 11FC 0001 FE1F             		move.b	#1,($FFFFFE1F).w ; set score counter to	update
0001C584 45F8 FFC0                  		lea	($FFFFFFC0).w,a2
0001C588 47F8 FE26                  		lea	($FFFFFE26).w,a3
0001C58C D193                       		add.l	d0,(a3)		; add d0*10 to the score
0001C58E 223C 000F 423F             		move.l	#999999,d1
0001C594 B293                       		cmp.l	(a3),d1		; is #999999 higher than the score?
0001C596 6200 0000                  		bhi.w	loc_1C6AC	; if yes, branch
0001C59A 2681                       		move.l	d1,(a3)		; reset	score to #999999
0001C59C 2481                       		move.l	d1,(a2)
0001C59E                            
0001C59E                            loc_1C6AC:
0001C59E 2013                       		move.l	(a3),d0
0001C5A0 B092                       		cmp.l	(a2),d0
0001C5A2 6500 0000                  		bcs.w	locret_1C6B6
0001C5A6 2480                       		move.l	d0,(a2)
0001C5A8                            
0001C5A8                            locret_1C6B6:
0001C5A8 4E75                       		rts	
0001C5AA                            ; End of function AddPoints
0001C5AA                            
0001C5AA                            ; ---------------------------------------------------------------------------
0001C5AA                            ; Subroutine to	update the HUD
0001C5AA                            ; ---------------------------------------------------------------------------
0001C5AA                            
0001C5AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C5AA                            
0001C5AA                            
0001C5AA                            HudUpdate:
0001C5AA 4A78 FFFA                  		tst.w	($FFFFFFFA).w	; is debug mode	on?
0001C5AE 6600 0000                  		bne.w	HudDebug	; if yes, branch
0001C5B2 4A38 FE1F                  		tst.b	($FFFFFE1F).w	; does the score need updating?
0001C5B6 6700                       		beq.s	Hud_ChkRings	; if not, branch
0001C5B8 4238 FE1F                  		clr.b	($FFFFFE1F).w
0001C5BC 203C 5C80 0003             		move.l	#$5C800003,d0	; set VRAM address
0001C5C2 2238 FE26                  		move.l	($FFFFFE26).w,d1 ; load	score
0001C5C6 6100 0000                  		bsr.w	Hud_Score
0001C5CA                            
0001C5CA                            Hud_ChkRings:
0001C5CA 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C5CE 6700                       		beq.s	Hud_ChkTime	; if not, branch
0001C5D0 6A00                       		bpl.s	loc_1C6E4
0001C5D2 6100 0000                  		bsr.w	Hud_LoadZero
0001C5D6                            
0001C5D6                            loc_1C6E4:
0001C5D6 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C5DA 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C5E0 7200                       		moveq	#0,d1
0001C5E2 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C5E6 6100 0000                  		bsr.w	Hud_Rings
0001C5EA                            
0001C5EA                            Hud_ChkTime:
0001C5EA 4A38 FE1E                  		tst.b	($FFFFFE1E).w	; does the time	need updating?
0001C5EE 6700                       		beq.s	Hud_ChkLives	; if not, branch
0001C5F0 4A78 F63A                  		tst.w	($FFFFF63A).w	; is the game paused?
0001C5F4 6600                       		bne.s	Hud_ChkLives	; if yes, branch
0001C5F6 43F8 FE22                  		lea	($FFFFFE22).w,a1
0001C5FA 0C99 0009 3B3B             		cmpi.l	#$93B3B,(a1)+	; is the time 9.59?
0001C600 6700                       		beq.s	TimeOver	; if yes, branch
0001C602 5221                       		addq.b	#1,-(a1)
0001C604 0C11 003C                  		cmpi.b	#60,(a1)
0001C608 6500                       		bcs.s	Hud_ChkLives
0001C60A 12BC 0000                  		move.b	#0,(a1)
0001C60E 5221                       		addq.b	#1,-(a1)
0001C610 0C11 003C                  		cmpi.b	#60,(a1)
0001C614 6500                       		bcs.s	loc_1C734
0001C616 12BC 0000                  		move.b	#0,(a1)
0001C61A 5221                       		addq.b	#1,-(a1)
0001C61C 0C11 0009                  		cmpi.b	#9,(a1)
0001C620 6500                       		bcs.s	loc_1C734
0001C622 12BC 0009                  		move.b	#9,(a1)
0001C626                            
0001C626                            loc_1C734:
0001C626 203C 5E40 0003             		move.l	#$5E400003,d0
0001C62C 7200                       		moveq	#0,d1
0001C62E 1238 FE23                  		move.b	($FFFFFE23).w,d1 ; load	minutes
0001C632 6100 0000                  		bsr.w	Hud_Mins
0001C636 203C 5EC0 0003             		move.l	#$5EC00003,d0
0001C63C 7200                       		moveq	#0,d1
0001C63E 1238 FE24                  		move.b	($FFFFFE24).w,d1 ; load	seconds
0001C642 6100 0000                  		bsr.w	Hud_Secs
0001C646                            
0001C646                            Hud_ChkLives:
0001C646 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C64A 6700                       		beq.s	Hud_ChkBonus	; if not, branch
0001C64C 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C650 6100 0000                  		bsr.w	Hud_Lives
0001C654                            
0001C654                            Hud_ChkBonus:
0001C654 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; do time/ring bonus counters need updating?
0001C658 6700                       		beq.s	Hud_End		; if not, branch
0001C65A 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C65E 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l
0001C668 7200                       		moveq	#0,d1
0001C66A 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C66E 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C672 7200                       		moveq	#0,d1
0001C674 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C678 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C67C                            
0001C67C                            Hud_End:
0001C67C 4E75                       		rts	
0001C67E                            ; ===========================================================================
0001C67E                            
0001C67E                            TimeOver:				; XREF: Hud_ChkTime
0001C67E 4238 FE1E                  		clr.b	($FFFFFE1E).w
0001C682 41F8 D000                  		lea	($FFFFD000).w,a0
0001C686 2448                       		movea.l	a0,a2
0001C688 6100 E90C                  		bsr.w	KillSonic
0001C68C 11FC 0001 FE1A             		move.b	#1,($FFFFFE1A).w
0001C692 4E75                       		rts	
0001C694                            ; ===========================================================================
0001C694                            
0001C694                            HudDebug:				; XREF: HudUpdate
0001C694 6100 0000                  		bsr.w	HudDb_XY
0001C698 4A38 FE1D                  		tst.b	($FFFFFE1D).w	; does the ring	counter	need updating?
0001C69C 6700                       		beq.s	HudDb_ObjCount	; if not, branch
0001C69E 6A00                       		bpl.s	HudDb_Rings
0001C6A0 6100 0000                  		bsr.w	Hud_LoadZero
0001C6A4                            
0001C6A4                            HudDb_Rings:
0001C6A4 4238 FE1D                  		clr.b	($FFFFFE1D).w
0001C6A8 203C 5F40 0003             		move.l	#$5F400003,d0	; set VRAM address
0001C6AE 7200                       		moveq	#0,d1
0001C6B0 3238 FE20                  		move.w	($FFFFFE20).w,d1 ; load	number of rings
0001C6B4 6100 0000                  		bsr.w	Hud_Rings
0001C6B8                            
0001C6B8                            HudDb_ObjCount:
0001C6B8 203C 5EC0 0003             		move.l	#$5EC00003,d0	; set VRAM address
0001C6BE 7200                       		moveq	#0,d1
0001C6C0 1238 F62C                  		move.b	($FFFFF62C).w,d1 ; load	"number	of objects" counter
0001C6C4 6100 0000                  		bsr.w	Hud_Secs
0001C6C8 4A38 FE1C                  		tst.b	($FFFFFE1C).w	; does the lives counter need updating?
0001C6CC 6700                       		beq.s	HudDb_ChkBonus	; if not, branch
0001C6CE 4238 FE1C                  		clr.b	($FFFFFE1C).w
0001C6D2 6100 0000                  		bsr.w	Hud_Lives
0001C6D6                            
0001C6D6                            HudDb_ChkBonus:
0001C6D6 4A38 F7D6                  		tst.b	($FFFFF7D6).w	; does the ring/time bonus counter need	updating?
0001C6DA 6700                       		beq.s	HudDb_End	; if not, branch
0001C6DC 4238 F7D6                  		clr.b	($FFFFF7D6).w
0001C6E0 23FC 6E00 0002 00C0 0004   		move.l	#$6E000002,($C00004).l ; set VRAM address
0001C6EA 7200                       		moveq	#0,d1
0001C6EC 3238 F7D2                  		move.w	($FFFFF7D2).w,d1 ; load	time bonus
0001C6F0 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C6F4 7200                       		moveq	#0,d1
0001C6F6 3238 F7D4                  		move.w	($FFFFF7D4).w,d1 ; load	ring bonus
0001C6FA 6100 0000                  		bsr.w	Hud_TimeRingBonus
0001C6FE                            
0001C6FE                            HudDb_End:
0001C6FE 4E75                       		rts	
0001C700                            ; End of function HudUpdate
0001C700                            
0001C700                            ; ---------------------------------------------------------------------------
0001C700                            ; Subroutine to	load "0" on the	HUD
0001C700                            ; ---------------------------------------------------------------------------
0001C700                            
0001C700                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C700                            
0001C700                            
0001C700                            Hud_LoadZero:				; XREF: HudUpdate
0001C700 23FC 5F40 0003 00C0 0004   		move.l	#$5F400003,($C00004).l
0001C70A 45FA 0000                  		lea	Hud_TilesZero(pc),a2
0001C70E 343C 0002                  		move.w	#2,d2
0001C712 6000                       		bra.s	loc_1C83E
0001C714                            ; End of function Hud_LoadZero
0001C714                            
0001C714                            ; ---------------------------------------------------------------------------
0001C714                            ; Subroutine to	load uncompressed HUD patterns ("E", "0", colon)
0001C714                            ; ---------------------------------------------------------------------------
0001C714                            
0001C714                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C714                            
0001C714                            
0001C714                            Hud_Base:				; XREF: Level; SS_EndLoop; EndingSequence
0001C714 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C71A 6100 0000                  		bsr.w	Hud_Lives
0001C71E 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l
0001C728 45FA 0000                  		lea	Hud_TilesBase(pc),a2
0001C72C 343C 000E                  		move.w	#$E,d2
0001C730                            
0001C730                            loc_1C83E:				; XREF: Hud_LoadZero
0001C730 43FA 0000                  		lea	Art_Hud(pc),a1
0001C734                            
0001C734                            loc_1C842:
0001C734 323C 000F                  		move.w	#$F,d1
0001C738 101A                       		move.b	(a2)+,d0
0001C73A 6B00                       		bmi.s	loc_1C85E
0001C73C 4880                       		ext.w	d0
0001C73E EB48                       		lsl.w	#5,d0
0001C740 47F1 0000                  		lea	(a1,d0.w),a3
0001C744                            
0001C744                            loc_1C852:
0001C744 2C9B                       		move.l	(a3)+,(a6)
0001C746 51C9 FFFC                  		dbf	d1,loc_1C852
0001C74A                            
0001C74A                            loc_1C858:
0001C74A 51CA FFE8                  		dbf	d2,loc_1C842
0001C74E                            
0001C74E 4E75                       		rts	
0001C750                            ; ===========================================================================
0001C750                            
0001C750                            loc_1C85E:
0001C750 2CBC 0000 0000             		move.l	#0,(a6)
0001C756 51C9 FFF8                  		dbf	d1,loc_1C85E
0001C75A                            
0001C75A 60EE                       		bra.s	loc_1C858
0001C75C                            ; End of function Hud_Base
0001C75C                            
0001C75C                            ; ===========================================================================
0001C75C 16FF FFFF FFFF FF00 0014+  Hud_TilesBase:	dc.b $16, $FF, $FF, $FF, $FF, $FF, $FF,	0, 0, $14, 0, 0
0001C768 FFFF 0000                  Hud_TilesZero:	dc.b $FF, $FF, 0, 0
0001C76C                            ; ---------------------------------------------------------------------------
0001C76C                            ; Subroutine to	load debug mode	numbers	patterns
0001C76C                            ; ---------------------------------------------------------------------------
0001C76C                            
0001C76C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C76C                            
0001C76C                            
0001C76C                            HudDb_XY:				; XREF: HudDebug
0001C76C 23FC 5C40 0003 00C0 0004   		move.l	#$5C400003,($C00004).l ; set VRAM address
0001C776 3238 F700                  		move.w	($FFFFF700).w,d1 ; load	camera x-position
0001C77A 4841                       		swap	d1
0001C77C 3238 D008                  		move.w	($FFFFD008).w,d1 ; load	Sonic's x-position
0001C780 6100                       		bsr.s	HudDb_XY2
0001C782 3238 F704                  		move.w	($FFFFF704).w,d1 ; load	camera y-position
0001C786 4841                       		swap	d1
0001C788 3238 D00C                  		move.w	($FFFFD00C).w,d1 ; load	Sonic's y-position
0001C78C                            ; End of function HudDb_XY
0001C78C                            
0001C78C                            
0001C78C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C78C                            
0001C78C                            
0001C78C                            HudDb_XY2:
0001C78C 7C07                       		moveq	#7,d6
0001C78E 43F9 0000 05F0             		lea	(Art_Text).l,a1
0001C794                            
0001C794                            HudDb_XYLoop:
0001C794 E959                       		rol.w	#4,d1
0001C796 3401                       		move.w	d1,d2
0001C798 0242 000F                  		andi.w	#$F,d2
0001C79C 0C42 000A                  		cmpi.w	#$A,d2
0001C7A0 6500                       		bcs.s	loc_1C8B2
0001C7A2 5E42                       		addq.w	#7,d2
0001C7A4                            
0001C7A4                            loc_1C8B2:
0001C7A4 EB4A                       		lsl.w	#5,d2
0001C7A6 47F1 2000                  		lea	(a1,d2.w),a3
0001C7AA 2C9B                       		move.l	(a3)+,(a6)
0001C7AC 2C9B                       		move.l	(a3)+,(a6)
0001C7AE 2C9B                       		move.l	(a3)+,(a6)
0001C7B0 2C9B                       		move.l	(a3)+,(a6)
0001C7B2 2C9B                       		move.l	(a3)+,(a6)
0001C7B4 2C9B                       		move.l	(a3)+,(a6)
0001C7B6 2C9B                       		move.l	(a3)+,(a6)
0001C7B8 2C9B                       		move.l	(a3)+,(a6)
0001C7BA 4841                       		swap	d1
0001C7BC 51CE FFD6                  		dbf	d6,HudDb_XYLoop	; repeat 7 more	times
0001C7C0                            
0001C7C0 4E75                       		rts	
0001C7C2                            ; End of function HudDb_XY2
0001C7C2                            
0001C7C2                            ; ---------------------------------------------------------------------------
0001C7C2                            ; Subroutine to	load rings numbers patterns
0001C7C2                            ; ---------------------------------------------------------------------------
0001C7C2                            
0001C7C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7C2                            
0001C7C2                            
0001C7C2                            Hud_Rings:				; XREF: HudUpdate
0001C7C2 45F9 0000 0000             		lea	(Hud_100).l,a2
0001C7C8 7C02                       		moveq	#2,d6
0001C7CA 6000                       		bra.s	Hud_LoadArt
0001C7CC                            ; End of function Hud_Rings
0001C7CC                            
0001C7CC                            ; ---------------------------------------------------------------------------
0001C7CC                            ; Subroutine to	load score numbers patterns
0001C7CC                            ; ---------------------------------------------------------------------------
0001C7CC                            
0001C7CC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C7CC                            
0001C7CC                            
0001C7CC                            Hud_Score:				; XREF: HudUpdate
0001C7CC 45F9 0000 0000             		lea	(Hud_100000).l,a2
0001C7D2 7C05                       		moveq	#5,d6
0001C7D4                            
0001C7D4                            Hud_LoadArt:
0001C7D4 7800                       		moveq	#0,d4
0001C7D6 43FA 0000                  		lea	Art_Hud(pc),a1
0001C7DA                            
0001C7DA                            Hud_ScoreLoop:
0001C7DA 7400                       		moveq	#0,d2
0001C7DC 261A                       		move.l	(a2)+,d3
0001C7DE                            
0001C7DE                            loc_1C8EC:
0001C7DE 9283                       		sub.l	d3,d1
0001C7E0 6500                       		bcs.s	loc_1C8F4
0001C7E2 5242                       		addq.w	#1,d2
0001C7E4 60F8                       		bra.s	loc_1C8EC
0001C7E6                            ; ===========================================================================
0001C7E6                            
0001C7E6                            loc_1C8F4:
0001C7E6 D283                       		add.l	d3,d1
0001C7E8 4A42                       		tst.w	d2
0001C7EA 6700                       		beq.s	loc_1C8FE
0001C7EC 383C 0001                  		move.w	#1,d4
0001C7F0                            
0001C7F0                            loc_1C8FE:
0001C7F0 4A44                       		tst.w	d4
0001C7F2 6700                       		beq.s	loc_1C92C
0001C7F4 ED4A                       		lsl.w	#6,d2
0001C7F6 2D40 0004                  		move.l	d0,4(a6)
0001C7FA 47F1 2000                  		lea	(a1,d2.w),a3
0001C7FE 2C9B                       		move.l	(a3)+,(a6)
0001C800 2C9B                       		move.l	(a3)+,(a6)
0001C802 2C9B                       		move.l	(a3)+,(a6)
0001C804 2C9B                       		move.l	(a3)+,(a6)
0001C806 2C9B                       		move.l	(a3)+,(a6)
0001C808 2C9B                       		move.l	(a3)+,(a6)
0001C80A 2C9B                       		move.l	(a3)+,(a6)
0001C80C 2C9B                       		move.l	(a3)+,(a6)
0001C80E 2C9B                       		move.l	(a3)+,(a6)
0001C810 2C9B                       		move.l	(a3)+,(a6)
0001C812 2C9B                       		move.l	(a3)+,(a6)
0001C814 2C9B                       		move.l	(a3)+,(a6)
0001C816 2C9B                       		move.l	(a3)+,(a6)
0001C818 2C9B                       		move.l	(a3)+,(a6)
0001C81A 2C9B                       		move.l	(a3)+,(a6)
0001C81C 2C9B                       		move.l	(a3)+,(a6)
0001C81E                            
0001C81E                            loc_1C92C:
0001C81E 0680 0040 0000             		addi.l	#$400000,d0
0001C824 51CE FFB4                  		dbf	d6,Hud_ScoreLoop
0001C828                            
0001C828 4E75                       		rts	
0001C82A                            ; End of function Hud_Score
0001C82A                            
0001C82A                            ; ---------------------------------------------------------------------------
0001C82A                            ; Subroutine to	load countdown numbers on the continue screen
0001C82A                            ; ---------------------------------------------------------------------------
0001C82A                            
0001C82A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C82A                            
0001C82A                            
0001C82A                            ContScrCounter:				; XREF: ContinueScreen
0001C82A 23FC 5F80 0003 00C0 0004   		move.l	#$5F800003,($C00004).l ; set VRAM address
0001C834 4DF9 00C0 0000             		lea	($C00000).l,a6
0001C83A 45F9 0000 0000             		lea	(Hud_10).l,a2
0001C840 7C01                       		moveq	#1,d6
0001C842 7800                       		moveq	#0,d4
0001C844 43FA 0000                  		lea	Art_Hud(pc),a1 ; load numbers patterns
0001C848                            
0001C848                            ContScr_Loop:
0001C848 7400                       		moveq	#0,d2
0001C84A 261A                       		move.l	(a2)+,d3
0001C84C                            
0001C84C                            loc_1C95A:
0001C84C 9283                       		sub.l	d3,d1
0001C84E 6500                       		bcs.s	loc_1C962
0001C850 5242                       		addq.w	#1,d2
0001C852 60F8                       		bra.s	loc_1C95A
0001C854                            ; ===========================================================================
0001C854                            
0001C854                            loc_1C962:
0001C854 D283                       		add.l	d3,d1
0001C856 ED4A                       		lsl.w	#6,d2
0001C858 47F1 2000                  		lea	(a1,d2.w),a3
0001C85C 2C9B                       		move.l	(a3)+,(a6)
0001C85E 2C9B                       		move.l	(a3)+,(a6)
0001C860 2C9B                       		move.l	(a3)+,(a6)
0001C862 2C9B                       		move.l	(a3)+,(a6)
0001C864 2C9B                       		move.l	(a3)+,(a6)
0001C866 2C9B                       		move.l	(a3)+,(a6)
0001C868 2C9B                       		move.l	(a3)+,(a6)
0001C86A 2C9B                       		move.l	(a3)+,(a6)
0001C86C 2C9B                       		move.l	(a3)+,(a6)
0001C86E 2C9B                       		move.l	(a3)+,(a6)
0001C870 2C9B                       		move.l	(a3)+,(a6)
0001C872 2C9B                       		move.l	(a3)+,(a6)
0001C874 2C9B                       		move.l	(a3)+,(a6)
0001C876 2C9B                       		move.l	(a3)+,(a6)
0001C878 2C9B                       		move.l	(a3)+,(a6)
0001C87A 2C9B                       		move.l	(a3)+,(a6)
0001C87C 51CE FFCA                  		dbf	d6,ContScr_Loop	; repeat 1 more	time
0001C880                            
0001C880 4E75                       		rts	
0001C882                            ; End of function ContScrCounter
0001C882                            
0001C882                            ; ===========================================================================
0001C882                            ; ---------------------------------------------------------------------------
0001C882                            ; HUD counter sizes
0001C882                            ; ---------------------------------------------------------------------------
0001C882 0001 86A0                  Hud_100000:	dc.l 100000		; XREF: Hud_Score
0001C886 0000 2710                  Hud_10000:	dc.l 10000
0001C88A 0000 03E8                  Hud_1000:	dc.l 1000		; XREF: Hud_TimeRingBonus
0001C88E 0000 0064                  Hud_100:	dc.l 100		; XREF: Hud_Rings
0001C892 0000 000A                  Hud_10:		dc.l 10			; XREF: ContScrCounter; Hud_Secs; Hud_Lives
0001C896 0000 0001                  Hud_1:		dc.l 1			; XREF: Hud_Mins
0001C89A                            
0001C89A                            ; ---------------------------------------------------------------------------
0001C89A                            ; Subroutine to	load time numbers patterns
0001C89A                            ; ---------------------------------------------------------------------------
0001C89A                            
0001C89A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C89A                            
0001C89A                            
0001C89A                            Hud_Mins:				; XREF: Hud_ChkTime
0001C89A 45F9 0001 C896             		lea	(Hud_1).l,a2
0001C8A0 7C00                       		moveq	#0,d6
0001C8A2 6000                       		bra.s	loc_1C9BA
0001C8A4                            ; End of function Hud_Mins
0001C8A4                            
0001C8A4                            
0001C8A4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8A4                            
0001C8A4                            
0001C8A4                            Hud_Secs:				; XREF: Hud_ChkTime
0001C8A4 45F9 0001 C892             		lea	(Hud_10).l,a2
0001C8AA 7C01                       		moveq	#1,d6
0001C8AC                            
0001C8AC                            loc_1C9BA:
0001C8AC 7800                       		moveq	#0,d4
0001C8AE 43FA 0000                  		lea	Art_Hud(pc),a1
0001C8B2                            
0001C8B2                            Hud_TimeLoop:
0001C8B2 7400                       		moveq	#0,d2
0001C8B4 261A                       		move.l	(a2)+,d3
0001C8B6                            
0001C8B6                            loc_1C9C4:
0001C8B6 9283                       		sub.l	d3,d1
0001C8B8 6500                       		bcs.s	loc_1C9CC
0001C8BA 5242                       		addq.w	#1,d2
0001C8BC 60F8                       		bra.s	loc_1C9C4
0001C8BE                            ; ===========================================================================
0001C8BE                            
0001C8BE                            loc_1C9CC:
0001C8BE D283                       		add.l	d3,d1
0001C8C0 4A42                       		tst.w	d2
0001C8C2 6700                       		beq.s	loc_1C9D6
0001C8C4 383C 0001                  		move.w	#1,d4
0001C8C8                            
0001C8C8                            loc_1C9D6:
0001C8C8 ED4A                       		lsl.w	#6,d2
0001C8CA 2D40 0004                  		move.l	d0,4(a6)
0001C8CE 47F1 2000                  		lea	(a1,d2.w),a3
0001C8D2 2C9B                       		move.l	(a3)+,(a6)
0001C8D4 2C9B                       		move.l	(a3)+,(a6)
0001C8D6 2C9B                       		move.l	(a3)+,(a6)
0001C8D8 2C9B                       		move.l	(a3)+,(a6)
0001C8DA 2C9B                       		move.l	(a3)+,(a6)
0001C8DC 2C9B                       		move.l	(a3)+,(a6)
0001C8DE 2C9B                       		move.l	(a3)+,(a6)
0001C8E0 2C9B                       		move.l	(a3)+,(a6)
0001C8E2 2C9B                       		move.l	(a3)+,(a6)
0001C8E4 2C9B                       		move.l	(a3)+,(a6)
0001C8E6 2C9B                       		move.l	(a3)+,(a6)
0001C8E8 2C9B                       		move.l	(a3)+,(a6)
0001C8EA 2C9B                       		move.l	(a3)+,(a6)
0001C8EC 2C9B                       		move.l	(a3)+,(a6)
0001C8EE 2C9B                       		move.l	(a3)+,(a6)
0001C8F0 2C9B                       		move.l	(a3)+,(a6)
0001C8F2 0680 0040 0000             		addi.l	#$400000,d0
0001C8F8 51CE FFB8                  		dbf	d6,Hud_TimeLoop
0001C8FC                            
0001C8FC 4E75                       		rts	
0001C8FE                            ; End of function Hud_Secs
0001C8FE                            
0001C8FE                            ; ---------------------------------------------------------------------------
0001C8FE                            ; Subroutine to	load time/ring bonus numbers patterns
0001C8FE                            ; ---------------------------------------------------------------------------
0001C8FE                            
0001C8FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C8FE                            
0001C8FE                            
0001C8FE                            Hud_TimeRingBonus:			; XREF: Hud_ChkBonus
0001C8FE 45F9 0001 C88A             		lea	(Hud_1000).l,a2
0001C904 7C03                       		moveq	#3,d6
0001C906 7800                       		moveq	#0,d4
0001C908 43FA 0000                  		lea	Art_Hud(pc),a1
0001C90C                            
0001C90C                            Hud_BonusLoop:
0001C90C 7400                       		moveq	#0,d2
0001C90E 261A                       		move.l	(a2)+,d3
0001C910                            
0001C910                            loc_1CA1E:
0001C910 9283                       		sub.l	d3,d1
0001C912 6500                       		bcs.s	loc_1CA26
0001C914 5242                       		addq.w	#1,d2
0001C916 60F8                       		bra.s	loc_1CA1E
0001C918                            ; ===========================================================================
0001C918                            
0001C918                            loc_1CA26:
0001C918 D283                       		add.l	d3,d1
0001C91A 4A42                       		tst.w	d2
0001C91C 6700                       		beq.s	loc_1CA30
0001C91E 383C 0001                  		move.w	#1,d4
0001C922                            
0001C922                            loc_1CA30:
0001C922 4A44                       		tst.w	d4
0001C924 6700                       		beq.s	Hud_ClrBonus
0001C926 ED4A                       		lsl.w	#6,d2
0001C928 47F1 2000                  		lea	(a1,d2.w),a3
0001C92C 2C9B                       		move.l	(a3)+,(a6)
0001C92E 2C9B                       		move.l	(a3)+,(a6)
0001C930 2C9B                       		move.l	(a3)+,(a6)
0001C932 2C9B                       		move.l	(a3)+,(a6)
0001C934 2C9B                       		move.l	(a3)+,(a6)
0001C936 2C9B                       		move.l	(a3)+,(a6)
0001C938 2C9B                       		move.l	(a3)+,(a6)
0001C93A 2C9B                       		move.l	(a3)+,(a6)
0001C93C 2C9B                       		move.l	(a3)+,(a6)
0001C93E 2C9B                       		move.l	(a3)+,(a6)
0001C940 2C9B                       		move.l	(a3)+,(a6)
0001C942 2C9B                       		move.l	(a3)+,(a6)
0001C944 2C9B                       		move.l	(a3)+,(a6)
0001C946 2C9B                       		move.l	(a3)+,(a6)
0001C948 2C9B                       		move.l	(a3)+,(a6)
0001C94A 2C9B                       		move.l	(a3)+,(a6)
0001C94C                            
0001C94C                            loc_1CA5A:
0001C94C 51CE FFBE                  		dbf	d6,Hud_BonusLoop ; repeat 3 more times
0001C950                            
0001C950 4E75                       		rts	
0001C952                            ; ===========================================================================
0001C952                            
0001C952                            Hud_ClrBonus:
0001C952 7A0F                       		moveq	#$F,d5
0001C954                            
0001C954                            Hud_ClrBonusLoop:
0001C954 2CBC 0000 0000             		move.l	#0,(a6)
0001C95A 51CD FFF8                  		dbf	d5,Hud_ClrBonusLoop
0001C95E                            
0001C95E 60EC                       		bra.s	loc_1CA5A
0001C960                            ; End of function Hud_TimeRingBonus
0001C960                            
0001C960                            ; ---------------------------------------------------------------------------
0001C960                            ; Subroutine to	load uncompressed lives	counter	patterns
0001C960                            ; ---------------------------------------------------------------------------
0001C960                            
0001C960                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001C960                            
0001C960                            
0001C960                            Hud_Lives:				; XREF: Hud_ChkLives
0001C960 203C 7BA0 0003             		move.l	#$7BA00003,d0	; set VRAM address
0001C966 7200                       		moveq	#0,d1
0001C968 1238 FE12                  		move.b	($FFFFFE12).w,d1 ; load	number of lives
0001C96C 45F9 0001 C892             		lea	(Hud_10).l,a2
0001C972 7C01                       		moveq	#1,d6
0001C974 7800                       		moveq	#0,d4
0001C976 43FA 0000                  		lea	Art_LivesNums(pc),a1
0001C97A                            
0001C97A                            Hud_LivesLoop:
0001C97A 2D40 0004                  		move.l	d0,4(a6)
0001C97E 7400                       		moveq	#0,d2
0001C980 261A                       		move.l	(a2)+,d3
0001C982                            
0001C982                            loc_1CA90:
0001C982 9283                       		sub.l	d3,d1
0001C984 6500                       		bcs.s	loc_1CA98
0001C986 5242                       		addq.w	#1,d2
0001C988 60F8                       		bra.s	loc_1CA90
0001C98A                            ; ===========================================================================
0001C98A                            
0001C98A                            loc_1CA98:
0001C98A D283                       		add.l	d3,d1
0001C98C 4A42                       		tst.w	d2
0001C98E 6700                       		beq.s	loc_1CAA2
0001C990 383C 0001                  		move.w	#1,d4
0001C994                            
0001C994                            loc_1CAA2:
0001C994 4A44                       		tst.w	d4
0001C996 6700                       		beq.s	Hud_ClrLives
0001C998                            
0001C998                            loc_1CAA6:
0001C998 EB4A                       		lsl.w	#5,d2
0001C99A 47F1 2000                  		lea	(a1,d2.w),a3
0001C99E 2C9B                       		move.l	(a3)+,(a6)
0001C9A0 2C9B                       		move.l	(a3)+,(a6)
0001C9A2 2C9B                       		move.l	(a3)+,(a6)
0001C9A4 2C9B                       		move.l	(a3)+,(a6)
0001C9A6 2C9B                       		move.l	(a3)+,(a6)
0001C9A8 2C9B                       		move.l	(a3)+,(a6)
0001C9AA 2C9B                       		move.l	(a3)+,(a6)
0001C9AC 2C9B                       		move.l	(a3)+,(a6)
0001C9AE                            
0001C9AE                            loc_1CABC:
0001C9AE 0680 0040 0000             		addi.l	#$400000,d0
0001C9B4 51CE FFC4                  		dbf	d6,Hud_LivesLoop ; repeat 1 more time
0001C9B8                            
0001C9B8 4E75                       		rts	
0001C9BA                            ; ===========================================================================
0001C9BA                            
0001C9BA                            Hud_ClrLives:
0001C9BA 4A46                       		tst.w	d6
0001C9BC 67DA                       		beq.s	loc_1CAA6
0001C9BE 7A07                       		moveq	#7,d5
0001C9C0                            
0001C9C0                            Hud_ClrLivesLoop:
0001C9C0 2CBC 0000 0000             		move.l	#0,(a6)
0001C9C6 51CD FFF8                  		dbf	d5,Hud_ClrLivesLoop
0001C9CA 60E2                       		bra.s	loc_1CABC
0001C9CC                            ; End of function Hud_Lives
0001C9CC                            
0001C9CC                            ; ===========================================================================
0001C9CC                            Art_Hud:	incbin	artunc\HUD.bin		; 8x16 pixel numbers on HUD
0001CCCC                            		even
0001CCCC                            Art_LivesNums:	incbin	artunc\livescnt.bin	; 8x8 pixel numbers on lives counter
0001CE0C                            		even
0001CE0C                            ; ===========================================================================
0001CE0C                            ; ---------------------------------------------------------------------------
0001CE0C                            ; When debug mode is currently in use
0001CE0C                            ; ---------------------------------------------------------------------------
0001CE0C                            
0001CE0C                            DebugMode:				; XREF: Obj01; Obj09
0001CE0C 7000                       		moveq	#0,d0
0001CE0E 1038 FE08                  		move.b	($FFFFFE08).w,d0
0001CE12 323B 0000                  		move.w	Debug_Index(pc,d0.w),d1
0001CE16 4EFB 1000                  		jmp	Debug_Index(pc,d1.w)
0001CE1A                            ; ===========================================================================
0001CE1A 0000                       Debug_Index:	dc.w Debug_Main-Debug_Index
0001CE1C 0000                       		dc.w Debug_Skip-Debug_Index
0001CE1E                            ; ===========================================================================
0001CE1E                            
0001CE1E                            Debug_Main:				; XREF: Debug_Index
0001CE1E 5438 FE08                  		addq.b	#2,($FFFFFE08).w
0001CE22 31F8 F72C FEF0             		move.w	($FFFFF72C).w,($FFFFFEF0).w ; buffer level x-boundary
0001CE28 31F8 F726 FEF2             		move.w	($FFFFF726).w,($FFFFFEF2).w ; buffer level y-boundary
0001CE2E 31FC 0000 F72C             		move.w	#0,($FFFFF72C).w
0001CE34 31FC 0720 F726             		move.w	#$720,($FFFFF726).w
0001CE3A 0278 07FF D00C             		andi.w	#$7FF,($FFFFD00C).w
0001CE40 0278 07FF F704             		andi.w	#$7FF,($FFFFF704).w
0001CE46 0278 03FF F70C             		andi.w	#$3FF,($FFFFF70C).w
0001CE4C 117C 0000 001A             		move.b	#0,$1A(a0)
0001CE52 117C 0000 001C             		move.b	#0,$1C(a0)
0001CE58 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; is	game mode = $10	(special stage)?
0001CE5E 6600                       		bne.s	Debug_Zone	; if not, branch
0001CE60 31FC 0000 F782             		move.w	#0,($FFFFF782).w ; stop	special	stage rotating
0001CE66 31FC 0000 F780             		move.w	#0,($FFFFF780).w ; make	special	stage "upright"
0001CE6C 7006                       		moveq	#6,d0		; use 6th debug	item list
0001CE6E 6000                       		bra.s	Debug_UseList
0001CE70                            ; ===========================================================================
0001CE70                            
0001CE70                            Debug_Zone:
0001CE70 7000                       		moveq	#0,d0
0001CE72 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CE76                            
0001CE76                            Debug_UseList:
0001CE76 45F9 0000 0000             		lea	(DebugList).l,a2
0001CE7C D040                       		add.w	d0,d0
0001CE7E D4F2 0000                  		adda.w	(a2,d0.w),a2
0001CE82 3C1A                       		move.w	(a2)+,d6
0001CE84 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001CE88 6200                       		bhi.s	loc_1CF9E
0001CE8A 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w
0001CE90                            
0001CE90                            loc_1CF9E:
0001CE90 6100 0000                  		bsr.w	Debug_ShowItem
0001CE94 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001CE9A 11FC 0001 FE0B             		move.b	#1,($FFFFFE0B).w
0001CEA0                            
0001CEA0                            Debug_Skip:				; XREF: Debug_Index
0001CEA0 7006                       		moveq	#6,d0
0001CEA2 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w
0001CEA8 6700                       		beq.s	loc_1CFBE
0001CEAA 7000                       		moveq	#0,d0
0001CEAC 1038 FE10                  		move.b	($FFFFFE10).w,d0
0001CEB0                            
0001CEB0                            loc_1CFBE:
0001CEB0 45F9 0000 0000             		lea	(DebugList).l,a2
0001CEB6 D040                       		add.w	d0,d0
0001CEB8 D4F2 0000                  		adda.w	(a2,d0.w),a2
0001CEBC 3C1A                       		move.w	(a2)+,d6
0001CEBE 6100 0000                  		bsr.w	Debug_Control
0001CEC2 4EF9 0000 D5AC             		jmp	DisplaySprite
0001CEC8                            
0001CEC8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001CEC8                            
0001CEC8                            
0001CEC8                            Debug_Control:
0001CEC8 7800                       		moveq	#0,d4
0001CECA 323C 0001                  		move.w	#1,d1
0001CECE 1838 F605                  		move.b	($FFFFF605).w,d4
0001CED2 0244 000F                  		andi.w	#$F,d4		; is up/down/left/right	pressed?
0001CED6 6600                       		bne.s	loc_1D018	; if yes, branch
0001CED8 1038 F604                  		move.b	($FFFFF604).w,d0
0001CEDC 0240 000F                  		andi.w	#$F,d0
0001CEE0 6600                       		bne.s	loc_1D000
0001CEE2 11FC 000C FE0A             		move.b	#$C,($FFFFFE0A).w
0001CEE8 11FC 000F FE0B             		move.b	#$F,($FFFFFE0B).w
0001CEEE 6000 0000                  		bra.w	Debug_BackItem
0001CEF2                            ; ===========================================================================
0001CEF2                            
0001CEF2                            loc_1D000:
0001CEF2 5338 FE0A                  		subq.b	#1,($FFFFFE0A).w
0001CEF6 6600                       		bne.s	loc_1D01C
0001CEF8 11FC 0001 FE0A             		move.b	#1,($FFFFFE0A).w
0001CEFE 5238 FE0B                  		addq.b	#1,($FFFFFE0B).w
0001CF02 6600                       		bne.s	loc_1D018
0001CF04 11FC 00FF FE0B             		move.b	#-1,($FFFFFE0B).w
0001CF0A                            
0001CF0A                            loc_1D018:
0001CF0A 1838 F604                  		move.b	($FFFFF604).w,d4
0001CF0E                            
0001CF0E                            loc_1D01C:
0001CF0E 7200                       		moveq	#0,d1
0001CF10 1238 FE0B                  		move.b	($FFFFFE0B).w,d1
0001CF14 5241                       		addq.w	#1,d1
0001CF16 4841                       		swap	d1
0001CF18 E881                       		asr.l	#4,d1
0001CF1A 2428 000C                  		move.l	$C(a0),d2
0001CF1E 2628 0008                  		move.l	8(a0),d3
0001CF22 0804 0000                  		btst	#0,d4		; is up	being pressed?
0001CF26 6700                       		beq.s	loc_1D03C	; if not, branch
0001CF28 9481                       		sub.l	d1,d2
0001CF2A 6400                       		bcc.s	loc_1D03C
0001CF2C 7400                       		moveq	#0,d2
0001CF2E                            
0001CF2E                            loc_1D03C:
0001CF2E 0804 0001                  		btst	#1,d4		; is down being	pressed?
0001CF32 6700                       		beq.s	loc_1D052	; if not, branch
0001CF34 D481                       		add.l	d1,d2
0001CF36 0C82 07FF 0000             		cmpi.l	#$7FF0000,d2
0001CF3C 6500                       		bcs.s	loc_1D052
0001CF3E 243C 07FF 0000             		move.l	#$7FF0000,d2
0001CF44                            
0001CF44                            loc_1D052:
0001CF44 0804 0002                  		btst	#2,d4
0001CF48 6700                       		beq.s	loc_1D05E
0001CF4A 9681                       		sub.l	d1,d3
0001CF4C 6400                       		bcc.s	loc_1D05E
0001CF4E 7600                       		moveq	#0,d3
0001CF50                            
0001CF50                            loc_1D05E:
0001CF50 0804 0003                  		btst	#3,d4
0001CF54 6700                       		beq.s	loc_1D066
0001CF56 D681                       		add.l	d1,d3
0001CF58                            
0001CF58                            loc_1D066:
0001CF58 2142 000C                  		move.l	d2,$C(a0)
0001CF5C 2143 0008                  		move.l	d3,8(a0)
0001CF60                            
0001CF60                            Debug_BackItem:
0001CF60 0838 0006 F604             		btst	#6,($FFFFF604).w ; is button A pressed?
0001CF66 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001CF68 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001CF6E 6700                       		beq.s	Debug_NextItem	; if not, branch
0001CF70 5338 FE06                  		subq.b	#1,($FFFFFE06).w ; go back 1 item
0001CF74 6400                       		bcc.s	Debug_NoLoop
0001CF76 DD38 FE06                  		add.b	d6,($FFFFFE06).w
0001CF7A 6000                       		bra.s	Debug_NoLoop
0001CF7C                            ; ===========================================================================
0001CF7C                            
0001CF7C                            Debug_NextItem:
0001CF7C 0838 0006 F605             		btst	#6,($FFFFF605).w ; is button A pressed?
0001CF82 6700                       		beq.s	Debug_MakeItem	; if not, branch
0001CF84 5238 FE06                  		addq.b	#1,($FFFFFE06).w ; go forwards 1 item
0001CF88 BC38 FE06                  		cmp.b	($FFFFFE06).w,d6
0001CF8C 6200                       		bhi.s	Debug_NoLoop
0001CF8E 11FC 0000 FE06             		move.b	#0,($FFFFFE06).w ; loop	back to	first item
0001CF94                            
0001CF94                            Debug_NoLoop:
0001CF94 6000 0000                  		bra.w	Debug_ShowItem
0001CF98                            ; ===========================================================================
0001CF98                            
0001CF98                            Debug_MakeItem:
0001CF98 0838 0005 F605             		btst	#5,($FFFFF605).w ; is button C pressed?
0001CF9E 6700                       		beq.s	Debug_Exit	; if not, branch
0001CFA0 4EB9 0000 DA32             		jsr	SingleObjLoad
0001CFA6 6600                       		bne.s	Debug_Exit
0001CFA8 3368 0008 0008             		move.w	8(a0),8(a1)
0001CFAE 3368 000C 000C             		move.w	$C(a0),$C(a1)
0001CFB4 12A8 0004                  		move.b	4(a0),0(a1)	; create object
0001CFB8 1368 0001 0001             		move.b	1(a0),1(a1)
0001CFBE 1368 0001 0022             		move.b	1(a0),$22(a1)
0001CFC4 0229 007F 0022             		andi.b	#$7F,$22(a1)
0001CFCA 7000                       		moveq	#0,d0
0001CFCC 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001CFD0 E748                       		lsl.w	#3,d0
0001CFD2 1372 0004 0028             		move.b	4(a2,d0.w),$28(a1)
0001CFD8 4E75                       		rts	
0001CFDA                            ; ===========================================================================
0001CFDA                            
0001CFDA                            Debug_Exit:
0001CFDA 0838 0004 F605             		btst	#4,($FFFFF605).w ; is button B pressed?
0001CFE0 6700                       		beq.s	Debug_DoNothing	; if not, branch
0001CFE2 7000                       		moveq	#0,d0
0001CFE4 31C0 FE08                  		move.w	d0,($FFFFFE08).w ; deactivate debug mode
0001CFE8 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001CFF0 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001CFF6 11C0 D01C                  		move.b	d0,($FFFFD01C).w
0001CFFA 3140 000A                  		move.w	d0,$A(a0)
0001CFFE 3140 000E                  		move.w	d0,$E(a0)
0001D002 31F8 FEF0 F72C             		move.w	($FFFFFEF0).w,($FFFFF72C).w ; restore level boundaries
0001D008 31F8 FEF2 F726             		move.w	($FFFFFEF2).w,($FFFFF726).w
0001D00E 0C38 0010 F600             		cmpi.b	#$10,($FFFFF600).w ; are you in	the special stage?
0001D014 6600                       		bne.s	Debug_DoNothing	; if not, branch
0001D016 4278 F780                  		clr.w	($FFFFF780).w
0001D01A 31FC 0040 F782             		move.w	#$40,($FFFFF782).w ; set new level rotation speed
0001D020 21FC 0000 0000 D004        		move.l	#Map_Sonic,($FFFFD004).w
0001D028 31FC 0780 D002             		move.w	#$780,($FFFFD002).w
0001D02E 11FC 0002 D01C             		move.b	#2,($FFFFD01C).w
0001D034 08F8 0002 D022             		bset	#2,($FFFFD022).w
0001D03A 08F8 0001 D022             		bset	#1,($FFFFD022).w
0001D040                            
0001D040                            Debug_DoNothing:
0001D040 4E75                       		rts	
0001D042                            ; End of function Debug_Control
0001D042                            
0001D042                            
0001D042                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0001D042                            
0001D042                            
0001D042                            Debug_ShowItem:				; XREF: Debug_Main
0001D042 7000                       		moveq	#0,d0
0001D044 1038 FE06                  		move.b	($FFFFFE06).w,d0
0001D048 E748                       		lsl.w	#3,d0
0001D04A 2172 0000 0004             		move.l	(a2,d0.w),4(a0)	; load mappings	for item
0001D050 3172 0006 0002             		move.w	6(a2,d0.w),2(a0) ; load	VRAM setting for item
0001D056 1172 0005 001A             		move.b	5(a2,d0.w),$1A(a0) ; load frame	number for item
0001D05C 4E75                       		rts	
0001D05E                            ; End of function Debug_ShowItem
0001D05E                            
0001D05E                            ; ===========================================================================
0001D05E                            ; ---------------------------------------------------------------------------
0001D05E                            ; Debug	list pointers
0001D05E                            ; ---------------------------------------------------------------------------
0001D05E                            DebugList:
0001D05E                            	include "_inc\Debug list pointers.asm"
0001D05E                            ; ---------------------------------------------------------------------------
0001D05E                            ; Debug	list pointers
0001D05E                            ; ---------------------------------------------------------------------------
0001D05E 0000                       	dc.w Debug_GHZ-DebugList
0001D060 0000                       	dc.w Debug_LZ-DebugList
0001D062 0000                       	dc.w Debug_MZ-DebugList
0001D064 0000                       	dc.w Debug_SLZ-DebugList
0001D066 0000                       	dc.w Debug_SYZ-DebugList
0001D068 0000                       	dc.w Debug_SBZ-DebugList
0001D06A 0000                       	dc.w Debug_Ending-DebugList
0001D06A 0000                       	dc.w Debug_Ending-DebugList
0001D06C                            
0001D06C                            ; ---------------------------------------------------------------------------
0001D06C                            ; Debug	list - Green Hill
0001D06C                            ; ---------------------------------------------------------------------------
0001D06C                            Debug_GHZ:
0001D06C                            	include "_inc\Debug list - GHZ.asm"
0001D06C                            ; ---------------------------------------------------------------------------
0001D06C                            ; Debug	list - Green Hill
0001D06C                            ; ---------------------------------------------------------------------------
0001D06C 0010                       	dc.w $10			; number of items in list
0001D06E 2500 9F56                  	dc.l Map_obj25+$25000000	; mappings pointer, object type * 10^6
0001D072 0000 27B2                  	dc.b 0,	0, $27,	$B2		; subtype, frame, VRAM setting (2 bytes)
0001D076 2600 A54A                  	dc.l Map_obj26+$26000000
0001D07A 0000 0680                  	dc.b 0,	0, 6, $80
0001D07E 1F00 9720                  	dc.l Map_obj1F+$1F000000
0001D082 0000 0400                  	dc.b 0,	0, 4, 0
0001D086 2200 9A00                  	dc.l Map_obj22+$22000000
0001D08A 0000 0444                  	dc.b 0,	0, 4, $44
0001D08E 2B00 AB8A                  	dc.l Map_obj2B+$2B000000
0001D092 0000 047B                  	dc.b 0,	0, 4, $7B
0001D096 3600 CF94                  	dc.l Map_obj36+$36000000
0001D09A 0000 051B                  	dc.b 0,	0, 5, $1B
0001D09E 1800 811E                  	dc.l Map_obj18+$18000000
0001D0A2 0000 4000                  	dc.b 0,	0, $40,	0
0001D0A6 3B00 D0BA                  	dc.l Map_obj3B+$3B000000
0001D0AA 0000 63D0                  	dc.b 0,	0, $63,	$D0
0001D0AE 4000 F736                  	dc.l Map_obj40+$40000000
0001D0B2 0000 04F0                  	dc.b 0,	0, 4, $F0
0001D0B6 4100 DCC0                  	dc.l Map_obj41+$41000000
0001D0BA 0000 0523                  	dc.b 0,	0, 5, $23
0001D0BE 4200 DEE6                  	dc.l Map_obj42+$42000000
0001D0C2 0000 249B                  	dc.b 0,	0, $24,	$9B
0001D0C6 4400 E1F4                  	dc.l Map_obj44+$44000000
0001D0CA 0000 434C                  	dc.b 0,	0, $43,	$4C
0001D0CE 1900 818C                  	dc.l Map_obj48+$19000000
0001D0D2 0000 43AA                  	dc.b 0,	0, $43,	$AA
0001D0D6 7901 7016                  	dc.l Map_obj79+$79000000
0001D0DA 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D0DE 4B00 9F96                  	dc.l Map_obj4B+$4B000000
0001D0E2 0000 2400                  	dc.b 0,	0, $24,	0
0001D0E6 7D01 7166                  	dc.l Map_obj7D+$7D000000
0001D0EA 0101 84B6                  	dc.b 1,	1, $84,	$B6
0001D0EE                            	even
0001D0EE                            	even
0001D0EE                            
0001D0EE                            ; ---------------------------------------------------------------------------
0001D0EE                            ; Debug	list - Labyrinth
0001D0EE                            ; ---------------------------------------------------------------------------
0001D0EE                            Debug_LZ:
0001D0EE                            	include "_inc\Debug list - LZ.asm"
0001D0EE                            ; ---------------------------------------------------------------------------
0001D0EE                            ; Debug	list - Labyrinth
0001D0EE                            ; ---------------------------------------------------------------------------
0001D0EE 0019                       	dc.w $19
0001D0F0 2500 9F56                  	dc.l Map_obj25+$25000000
0001D0F4 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D0F8 2600 A54A                  	dc.l Map_obj26+$26000000
0001D0FC 0000 0680                  	dc.b 0,	0, 6, $80
0001D100 4100 DCC0                  	dc.l Map_obj41+$41000000
0001D104 0000 0523                  	dc.b 0,	0, 5, $23
0001D108 2C00 AC30                  	dc.l Map_obj2C+$2C000000
0001D10C 0800 2486                  	dc.b 8,	0, $24,	$86
0001D110 2D00 AE1C                  	dc.l Map_obj2D+$2D000000
0001D114 0002 84A6                  	dc.b 0,	2, $84,	$A6
0001D118 1601 1F12                  	dc.l Map_obj16+$16000000
0001D11C 0000 03CC                  	dc.b 0,	0, 3, $CC
0001D120 1601 1F12                  	dc.l Map_obj16+$16000000
0001D124 0203 03CC                  	dc.b 2,	3, 3, $CC
0001D128 3300 C29A                  	dc.l Map_obj33+$33000000
0001D12C 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D130 3200 BE5A                  	dc.l Map_obj32+$32000000
0001D134 0000 0513                  	dc.b 0,	0, 5, $13
0001D138 3600 CF94                  	dc.l Map_obj36+$36000000
0001D13C 0000 051B                  	dc.b 0,	0, 5, $1B
0001D140 5201 0034                  	dc.l Map_obj52a+$52000000
0001D144 0400 43BC                  	dc.b 4,	0, $43,	$BC
0001D148 6101 213A                  	dc.l Map_obj61+$61000000
0001D14C 0100 43E6                  	dc.b 1,	0, $43,	$E6
0001D150 6101 213A                  	dc.l Map_obj61+$61000000
0001D154 1301 43E6                  	dc.b $13, 1, $43, $E6
0001D158 6101 213A                  	dc.l Map_obj61+$61000000
0001D15C 0500 43E6                  	dc.b 5,	0, $43,	$E6
0001D160 6201 228E                  	dc.l Map_obj62+$62000000
0001D164 0000 443E                  	dc.b 0,	0, $44,	$3E
0001D168 6101 213A                  	dc.l Map_obj61+$61000000
0001D16C 2702 43E6                  	dc.b $27, 2, $43, $E6
0001D170 6101 213A                  	dc.l Map_obj61+$61000000
0001D174 3003 43E6                  	dc.b $30, 3, $43, $E6
0001D178 6301 25F0                  	dc.l Map_obj63+$63000000
0001D17C 7F00 03F6                  	dc.b $7F, 0, 3,	$F6
0001D180 6001 1E5C                  	dc.l Map_obj60+$60000000
0001D184 0000 0467                  	dc.b 0,	0, 4, $67
0001D188 6401 2934                  	dc.l Map_obj64+$64000000
0001D18C 8413 8348                  	dc.b $84, $13, $83, $48
0001D190 6501 2ABC                  	dc.l Map_obj65+$65000000
0001D194 0202 C259                  	dc.b 2,	2, $C2,	$59
0001D198 6501 2ABC                  	dc.l Map_obj65+$65000000
0001D19C 0909 C259                  	dc.b 9,	9, $C2,	$59
0001D1A0 0B01 12AC                  	dc.l Map_obj0B+$B000000
0001D1A4 0000 43DE                  	dc.b 0,	0, $43,	$DE
0001D1A8 0C01 137C                  	dc.l Map_obj0C+$C000000
0001D1AC 0200 4328                  	dc.b 2,	0, $43,	$28
0001D1B0 7901 7016                  	dc.l Map_obj79+$79000000
0001D1B4 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D1B8                            	even
0001D1B8                            	even
0001D1B8                            
0001D1B8                            ; ---------------------------------------------------------------------------
0001D1B8                            ; Debug	list - Marble
0001D1B8                            ; ---------------------------------------------------------------------------
0001D1B8                            Debug_MZ:
0001D1B8                            	include "_inc\Debug list - MZ.asm"
0001D1B8                            ; ---------------------------------------------------------------------------
0001D1B8                            ; Debug	list - Marble
0001D1B8                            ; ---------------------------------------------------------------------------
0001D1B8 0012                       	dc.w $12
0001D1BA 2500 9F56                  	dc.l Map_obj25+$25000000
0001D1BE 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D1C2 2600 A54A                  	dc.l Map_obj26+$26000000
0001D1C6 0000 0680                  	dc.b 0,	0, 6, $80
0001D1CA 2200 9A00                  	dc.l Map_obj22+$22000000
0001D1CE 0000 0444                  	dc.b 0,	0, 4, $44
0001D1D2 3600 CF94                  	dc.l Map_obj36+$36000000
0001D1D6 0000 051B                  	dc.b 0,	0, 5, $1B
0001D1DA 4100 DCC0                  	dc.l Map_obj41+$41000000
0001D1DE 0000 0523                  	dc.b 0,	0, 5, $23
0001D1E2 1300 B32A                  	dc.l Map_obj14+$13000000
0001D1E6 0000 0345                  	dc.b 0,	0, 3, $45
0001D1EA 4600 E8A6                  	dc.l Map_obj46+$46000000
0001D1EE 0000 4000                  	dc.b 0,	0, $40,	0
0001D1F2 4C00 F1E2                  	dc.l Map_obj4C+$4C000000
0001D1F6 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D1FA 4E00 F4C6                  	dc.l Map_obj4E+$4E000000
0001D1FE 0000 63A8                  	dc.b 0,	0, $63,	$A8
0001D202 3300 C29A                  	dc.l Map_obj33+$33000000
0001D206 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D20A 5000 F8C4                  	dc.l Map_obj50+$50000000
0001D20E 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D212 5100 FD68                  	dc.l Map_obj51+$51000000
0001D216 0000 42B8                  	dc.b 0,	0, $42,	$B8
0001D21A 5200 FFDE                  	dc.l Map_obj52+$52000000
0001D21E 0000 02B8                  	dc.b 0,	0, 2, $B8
0001D222 5300 8724                  	dc.l Map_obj53+$53000000
0001D226 0000 62B8                  	dc.b 0,	0, $62,	$B8
0001D22A 5400 F1A8                  	dc.l Map_obj54+$54000000
0001D22E 0000 8680                  	dc.b 0,	0, $86,	$80
0001D232 5501 01D2                  	dc.l Map_obj55+$55000000
0001D236 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D23A 7801 6C90                  	dc.l Map_obj78+$78000000
0001D23E 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D242 7901 7016                  	dc.l Map_obj79+$79000000
0001D246 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D24A                            	even
0001D24A                            	even
0001D24A                            
0001D24A                            ; ---------------------------------------------------------------------------
0001D24A                            ; Debug	list - Star Light
0001D24A                            ; ---------------------------------------------------------------------------
0001D24A                            Debug_SLZ:
0001D24A                            	include "_inc\Debug list - SLZ.asm"
0001D24A                            ; ---------------------------------------------------------------------------
0001D24A                            ; Debug	list - Star Light
0001D24A                            ; ---------------------------------------------------------------------------
0001D24A 000F                       	dc.w $F
0001D24C 2500 9F56                  	dc.l Map_obj25+$25000000
0001D250 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D254 2600 A54A                  	dc.l Map_obj26+$26000000
0001D258 0000 0680                  	dc.b 0,	0, 6, $80
0001D25C 5901 0CD4                  	dc.l Map_obj59+$59000000
0001D260 0000 4000                  	dc.b 0,	0, $40,	0
0001D264 5300 8724                  	dc.l Map_obj53+$53000000
0001D268 0002 44E0                  	dc.b 0,	2, $44,	$E0
0001D26C 1800 817C                  	dc.l Map_obj18b+$18000000
0001D270 0000 4000                  	dc.b 0,	0, $40,	0
0001D274 5A01 0E0E                  	dc.l Map_obj5A+$5A000000
0001D278 0000 4000                  	dc.b 0,	0, $40,	0
0001D27C 5B01 0FC6                  	dc.l Map_obj5B+$5B000000
0001D280 0000 4000                  	dc.b 0,	0, $40,	0
0001D284 5D01 1596                  	dc.l Map_obj5D+$5D000000
0001D288 0000 43A0                  	dc.b 0,	0, $43,	$A0
0001D28C 5E01 1928                  	dc.l Map_obj5E+$5E000000
0001D290 0000 0374                  	dc.b 0,	0, 3, $74
0001D294 4100 DCC0                  	dc.l Map_obj41+$41000000
0001D298 0000 0523                  	dc.b 0,	0, 5, $23
0001D29C 1300 B32A                  	dc.l Map_obj14+$13000000
0001D2A0 0000 0480                  	dc.b 0,	0, 4, $80
0001D2A4 1C00 8834                  	dc.l Map_obj1C+$1C000000
0001D2A8 0000 44D8                  	dc.b 0,	0, $44,	$D8
0001D2AC 5F01 1BA6                  	dc.l Map_obj5F+$5F000000
0001D2B0 0000 0400                  	dc.b 0,	0, 4, 0
0001D2B4 6001 1E5C                  	dc.l Map_obj60+$60000000
0001D2B8 0000 2429                  	dc.b 0,	0, $24,	$29
0001D2BC 7901 7016                  	dc.l Map_obj79+$79000000
0001D2C0 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D2C4                            	even
0001D2C4                            	even
0001D2C4                            
0001D2C4                            ; ---------------------------------------------------------------------------
0001D2C4                            ; Debug	list - Spring Yard
0001D2C4                            ; ---------------------------------------------------------------------------
0001D2C4                            Debug_SYZ:
0001D2C4                            	include "_inc\Debug list - SYZ.asm"
0001D2C4                            ; ---------------------------------------------------------------------------
0001D2C4                            ; Debug	list - Spring Yard
0001D2C4                            ; ---------------------------------------------------------------------------
0001D2C4 000F                       	dc.w $F
0001D2C6 2500 9F56                  	dc.l Map_obj25+$25000000
0001D2CA 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D2CE 2600 A54A                  	dc.l Map_obj26+$26000000
0001D2D2 0000 0680                  	dc.b 0,	0, 6, $80
0001D2D6 3600 CF94                  	dc.l Map_obj36+$36000000
0001D2DA 0000 051B                  	dc.b 0,	0, 5, $1B
0001D2DE 4100 DCC0                  	dc.l Map_obj41+$41000000
0001D2E2 0000 0523                  	dc.b 0,	0, 5, $23
0001D2E6 4300 E146                  	dc.l Map_obj43+$43000000
0001D2EA 0000 04B8                  	dc.b 0,	0, 4, $B8
0001D2EE 1200 E924                  	dc.l Map_obj12+$12000000
0001D2F2 0000 0000                  	dc.b 0,	0, 0, 0
0001D2F6 4700 EAA0                  	dc.l Map_obj47+$47000000
0001D2FA 0000 0380                  	dc.b 0,	0, 3, $80
0001D2FE 1F00 9720                  	dc.l Map_obj1F+$1F000000
0001D302 0000 0400                  	dc.b 0,	0, 4, 0
0001D306 2200 9A00                  	dc.l Map_obj22+$22000000
0001D30A 0000 0444                  	dc.b 0,	0, 4, $44
0001D30E 5000 F8C4                  	dc.l Map_obj50+$50000000
0001D312 0000 247B                  	dc.b 0,	0, $24,	$7B
0001D316 1800 816A                  	dc.l Map_obj18a+$18000000
0001D31A 0000 4000                  	dc.b 0,	0, $40,	0
0001D31E 5601 0694                  	dc.l Map_obj56+$56000000
0001D322 0000 4000                  	dc.b 0,	0, $40,	0
0001D326 3200 BE5A                  	dc.l Map_obj32+$32000000
0001D32A 0000 0513                  	dc.b 0,	0, 5, $13
0001D32E 7801 6C90                  	dc.l Map_obj78+$78000000
0001D332 0000 24FF                  	dc.b 0,	0, $24,	$FF
0001D336 7901 7016                  	dc.l Map_obj79+$79000000
0001D33A 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D33E                            	even
0001D33E                            	even
0001D33E                            
0001D33E                            ; ---------------------------------------------------------------------------
0001D33E                            ; Debug	list - Scrap Brain
0001D33E                            ; ---------------------------------------------------------------------------
0001D33E                            Debug_SBZ:
0001D33E                            	include "_inc\Debug list - SBZ.asm"
0001D33E                            ; ---------------------------------------------------------------------------
0001D33E                            ; Debug	list - Scrap Brain
0001D33E                            ; ---------------------------------------------------------------------------
0001D33E 001D                       	dc.w $1D
0001D340 2500 9F56                  	dc.l Map_obj25+$25000000
0001D344 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D348 2600 A54A                  	dc.l Map_obj26+$26000000
0001D34C 0000 0680                  	dc.b 0,	0, 6, $80
0001D350 5F01 1BA6                  	dc.l Map_obj5F+$5F000000
0001D354 0000 0400                  	dc.b 0,	0, 4, 0
0001D358 6001 1E5C                  	dc.l Map_obj60+$60000000
0001D35C 0000 0429                  	dc.b 0,	0, 4, $29
0001D360 7801 6C90                  	dc.l Map_obj78+$78000000
0001D364 0000 22B0                  	dc.b 0,	0, $22,	$B0
0001D368 1501 0A30                  	dc.l Map_obj15b+$15000000
0001D36C 0702 4391                  	dc.b 7,	2, $43,	$91
0001D370 6701 55B4                  	dc.l Map_obj67+$67000000
0001D374 E000 C344                  	dc.b $E0, 0, $C3, $44
0001D378 5200 FFDE                  	dc.l Map_obj52+$52000000
0001D37C 2802 22C0                  	dc.b $28, 2, $22, $C0
0001D380 3200 BE5A                  	dc.l Map_obj32+$32000000
0001D384 0000 0513                  	dc.b 0,	0, 5, $13
0001D388 6901 580E                  	dc.l Map_obj69+$69000000
0001D38C 0300 4492                  	dc.b 3,	0, $44,	$92
0001D390 6901 5868                  	dc.l Map_obj69a+$69000000
0001D394 8300 04DF                  	dc.b $83, 0, 4,	$DF
0001D398 6A01 5AC6                  	dc.l Map_obj6A+$6A000000
0001D39C 0200 43B5                  	dc.b 2,	0, $43,	$B5
0001D3A0 5300 8724                  	dc.l Map_obj53+$53000000
0001D3A4 0000 43F5                  	dc.b 0,	0, $43,	$F5
0001D3A8 5200 FFDE                  	dc.l Map_obj52+$52000000
0001D3AC 3903 4460                  	dc.b $39, 3, $44, $60
0001D3B0 6B01 5E96                  	dc.l Map_obj6B+$6B000000
0001D3B4 0000 22C0                  	dc.b 0,	0, $22,	$C0
0001D3B8 2A00 89CA                  	dc.l Map_obj2A+$2A000000
0001D3BC 0000 42E8                  	dc.b 0,	0, $42,	$E8
0001D3C0 6B01 5E96                  	dc.l Map_obj6B+$6B000000
0001D3C4 1301 22C0                  	dc.b $13, 1, $22, $C0
0001D3C8 6A01 5AC6                  	dc.l Map_obj6A+$6A000000
0001D3CC 0100 43B5                  	dc.b 1,	0, $43,	$B5
0001D3D0 6B01 5E96                  	dc.l Map_obj6B+$6B000000
0001D3D4 2401 22C0                  	dc.b $24, 1, $22, $C0
0001D3D8 6A01 5AC6                  	dc.l Map_obj6A+$6A000000
0001D3DC 0402 43B5                  	dc.b 4,	2, $43,	$B5
0001D3E0 6B01 5E96                  	dc.l Map_obj6B+$6B000000
0001D3E4 3401 22C0                  	dc.b $34, 1, $22, $C0
0001D3E8 6C01 6058                  	dc.l Map_obj6C+$6C000000
0001D3EC 0000 44C3                  	dc.b 0,	0, $44,	$C3
0001D3F0 6D00 E596                  	dc.l Map_obj6D+$6D000000
0001D3F4 6400 83D9                  	dc.b $64, 0, $83, $D9
0001D3F8 6D00 E596                  	dc.l Map_obj6D+$6D000000
0001D3FC 640B 83D9                  	dc.b $64, $B, $83, $D9
0001D400 6E01 610E                  	dc.l Map_obj6E+$6E000000
0001D404 0400 047E                  	dc.b 4,	0, 4, $7E
0001D408 7001 6554                  	dc.l Map_obj70+$70000000
0001D40C 0000 42F0                  	dc.b 0,	0, $42,	$F0
0001D410 7101 143C                  	dc.l Map_obj71+$71000000
0001D414 1100 8680                  	dc.b $11, 0, $86, $80
0001D418 1E00 8E38                  	dc.l Map_obj1E+$1E000000
0001D41C 0400 2302                  	dc.b 4,	0, $23,	2
0001D420 7901 7016                  	dc.l Map_obj79+$79000000
0001D424 0100 07A0                  	dc.b 1,	0, 7, $A0
0001D428                            	even
0001D428                            	even
0001D428                            
0001D428                            ; ---------------------------------------------------------------------------
0001D428                            ; Debug	list - ending sequence / special stage
0001D428                            ; ---------------------------------------------------------------------------
0001D428                            Debug_Ending:
0001D428                            	include "_inc\Debug list - Ending and SS.asm"
0001D428                            ; ---------------------------------------------------------------------------
0001D428                            ; Debug	list - ending sequence / special stage
0001D428                            ; ---------------------------------------------------------------------------
0001D428 000D                       	dc.w $D
0001D42A 2500 9F56                  	dc.l Map_obj25+$25000000
0001D42E 0000 27B2                  	dc.b 0,	0, $27,	$B2
0001D432 4700 EAA0                  	dc.l Map_obj47+$47000000
0001D436 0000 0380                  	dc.b 0,	0, 3, $80
0001D43A 2800 9452                  	dc.l Map_obj28a+$28000000
0001D43E 0A00 05A0                  	dc.b $A, 0, 5, $A0
0001D442 2800 9452                  	dc.l Map_obj28a+$28000000
0001D446 0B00 05A0                  	dc.b $B, 0, 5, $A0
0001D44A 2800 9452                  	dc.l Map_obj28a+$28000000
0001D44E 0C00 05A0                  	dc.b $C, 0, 5, $A0
0001D452 2800 943A                  	dc.l Map_obj28+$28000000
0001D456 0D00 0553                  	dc.b $D, 0, 5, $53
0001D45A 2800 943A                  	dc.l Map_obj28+$28000000
0001D45E 0E00 0553                  	dc.b $E, 0, 5, $53
0001D462 2800 943A                  	dc.l Map_obj28+$28000000
0001D466 0F00 0573                  	dc.b $F, 0, 5, $73
0001D46A 2800 943A                  	dc.l Map_obj28+$28000000
0001D46E 1000 0573                  	dc.b $10, 0, 5,	$73
0001D472 2800 9452                  	dc.l Map_obj28a+$28000000
0001D476 1100 0585                  	dc.b $11, 0, 5,	$85
0001D47A 2800 946A                  	dc.l Map_obj28b+$28000000
0001D47E 1200 0593                  	dc.b $12, 0, 5,	$93
0001D482 2800 9452                  	dc.l Map_obj28a+$28000000
0001D486 1300 0565                  	dc.b $13, 0, 5,	$65
0001D48A 2800 946A                  	dc.l Map_obj28b+$28000000
0001D48E 1400 05B3                  	dc.b $14, 0, 5,	$B3
0001D492                            	even
0001D492                            	even
0001D492                            
0001D492                            ; ---------------------------------------------------------------------------
0001D492                            ; Main level load blocks
0001D492                            ; ---------------------------------------------------------------------------
0001D492                            MainLoadBlocks:
0001D492                            	include "_inc\Main level load blocks.asm"
0001D492                            ; ---------------------------------------------------------------------------
0001D492                            ; Main level load blocks
0001D492                            ;
0001D492                            ; ===FORMAT===
0001D492                            ; level	patterns + (1st	PLC num	* 10^6)
0001D492                            ; 16x16	mappings + (2nd	PLC num	* 10^6)
0001D492                            ; 256x256 mappings
0001D492                            ; blank, music (unused), pal index (unused), pal index
0001D492                            ; ---------------------------------------------------------------------------
0001D492 0000 0000                  	dc.l Nem_GHZ_2nd+$4000000
0001D496 0000 0000                  	dc.l Blk16_GHZ+$5000000
0001D49A 0000 0000                  	dc.l Blk256_GHZ
0001D49E 0081 0404                  	dc.b 0,	$81, 4,	4
0001D4A2 0000 0000                  	dc.l Nem_LZ+$6000000
0001D4A6 0000 0000                  	dc.l Blk16_LZ+$7000000
0001D4AA 0000 0000                  	dc.l Blk256_LZ
0001D4AE 0082 0505                  	dc.b 0,	$82, 5,	5
0001D4B2 0000 0000                  	dc.l Nem_MZ+$8000000
0001D4B6 0000 0000                  	dc.l Blk16_MZ+$9000000
0001D4BA 0000 0000                  	dc.l Blk256_MZ
0001D4BE 0083 0606                  	dc.b 0,	$83, 6,	6
0001D4C2 0000 0000                  	dc.l Nem_SLZ+$A000000
0001D4C6 0000 0000                  	dc.l Blk16_SLZ+$B000000
0001D4CA 0000 0000                  	dc.l Blk256_SLZ
0001D4CE 0084 0707                  	dc.b 0,	$84, 7,	7
0001D4D2 0000 0000                  	dc.l Nem_SYZ+$C000000
0001D4D6 0000 0000                  	dc.l Blk16_SYZ+$D000000
0001D4DA 0000 0000                  	dc.l Blk256_SYZ
0001D4DE 0085 0808                  	dc.b 0,	$85, 8,	8
0001D4E2 0000 0000                  	dc.l Nem_SBZ+$E000000
0001D4E6 0000 0000                  	dc.l Blk16_SBZ+$F000000
0001D4EA 0000 0000                  	dc.l Blk256_SBZ
0001D4EE 0086 0909                  	dc.b 0,	$86, 9,	9
0001D4F2 0000 0000                  	dc.l Nem_GHZ_2nd	; main load block for ending
0001D4F6 0000 0000                  	dc.l Blk16_GHZ
0001D4FA 0000 0000                  	dc.l Blk256_GHZ
0001D4FE 0086 1313                  	dc.b 0,	$86, $13, $13
0001D502                            	even
0001D502                            	even
0001D502                            
0001D502                            ; ---------------------------------------------------------------------------
0001D502                            ; Pattern load cues
0001D502                            ; ---------------------------------------------------------------------------
0001D502                            ArtLoadCues:
0001D502                            	include "_inc\Pattern load cues.asm"
0001D502                            ; ---------------------------------------------------------------------------
0001D502                            ; Pattern load cues - index
0001D502                            ; ---------------------------------------------------------------------------
0001D502 0000 0000                  	dc.w PLC_Main-ArtLoadCues, PLC_Main2-ArtLoadCues
0001D506 0000 0000                  	dc.w PLC_Explode-ArtLoadCues, PLC_GameOver-ArtLoadCues
0001D50A 0000 0000                  	dc.w PLC_GHZ-ArtLoadCues, PLC_GHZ2-ArtLoadCues
0001D50E 0000 0000                  	dc.w PLC_LZ-ArtLoadCues, PLC_LZ2-ArtLoadCues
0001D512 0000 0000                  	dc.w PLC_MZ-ArtLoadCues, PLC_MZ2-ArtLoadCues
0001D516 0000 0000                  	dc.w PLC_SLZ-ArtLoadCues, PLC_SLZ2-ArtLoadCues
0001D51A 0000 0000                  	dc.w PLC_SYZ-ArtLoadCues, PLC_SYZ2-ArtLoadCues
0001D51E 0000 0000                  	dc.w PLC_SBZ-ArtLoadCues, PLC_SBZ2-ArtLoadCues
0001D522 0000 0000                  	dc.w PLC_TitleCard-ArtLoadCues,	PLC_Boss-ArtLoadCues
0001D526 0000 0000                  	dc.w PLC_Signpost-ArtLoadCues, PLC_Warp-ArtLoadCues
0001D52A 0000 0000                  	dc.w PLC_SpeStage-ArtLoadCues, PLC_GHZAnimals-ArtLoadCues
0001D52E 0000 0000                  	dc.w PLC_LZAnimals-ArtLoadCues,	PLC_MZAnimals-ArtLoadCues
0001D532 0000 0000                  	dc.w PLC_SLZAnimals-ArtLoadCues, PLC_SYZAnimals-ArtLoadCues
0001D536 0000 0000                  	dc.w PLC_SBZAnimals-ArtLoadCues, PLC_SpeStResult-ArtLoadCues
0001D53A 0000 0000                  	dc.w PLC_Ending-ArtLoadCues, PLC_TryAgain-ArtLoadCues
0001D53E 0000 0000                  	dc.w PLC_EggmanSBZ2-ArtLoadCues, PLC_FZBoss-ArtLoadCues
0001D542                            ; ---------------------------------------------------------------------------
0001D542                            ; Pattern load cues - standard block 1
0001D542                            ; ---------------------------------------------------------------------------
0001D542 0004                       PLC_Main:	dc.w 4
0001D544 0000 0000                  		dc.l Nem_Lamp		; lamppost
0001D548 F400                       		dc.w $F400
0001D54A 0000 0000                  		dc.l Nem_Hud		; HUD
0001D54E D940                       		dc.w $D940
0001D550 0000 0000                  		dc.l Nem_Lives		; lives	counter
0001D554 FA80                       		dc.w $FA80
0001D556 0000 0000                  		dc.l Nem_Ring		; rings
0001D55A F640                       		dc.w $F640
0001D55C 0000 0000                  		dc.l Nem_Points		; points from enemy
0001D560 F2E0                       		dc.w $F2E0
0001D562                            ; ---------------------------------------------------------------------------
0001D562                            ; Pattern load cues - standard block 2
0001D562                            ; ---------------------------------------------------------------------------
0001D562 0002                       PLC_Main2:	dc.w 2
0001D564 0000 0000                  		dc.l Nem_Monitors	; monitors
0001D568 D000                       		dc.w $D000
0001D56A 0000 0000                  		dc.l Nem_Shield		; shield
0001D56E A820                       		dc.w $A820
0001D570 0000 0000                  		dc.l Nem_Stars		; invincibility	stars
0001D574 AB80                       		dc.w $AB80
0001D576                            ; ---------------------------------------------------------------------------
0001D576                            ; Pattern load cues - explosion
0001D576                            ; ---------------------------------------------------------------------------
0001D576 0000                       PLC_Explode:	dc.w 0
0001D578 0000 0000                  		dc.l Nem_Explode	; explosion
0001D57C B400                       		dc.w $B400
0001D57E                            ; ---------------------------------------------------------------------------
0001D57E                            ; Pattern load cues - game/time	over
0001D57E                            ; ---------------------------------------------------------------------------
0001D57E 0000                       PLC_GameOver:	dc.w 0
0001D580 0000 0000                  		dc.l Nem_GameOver	; game/time over
0001D584 ABC0                       		dc.w $ABC0
0001D586                            ; ---------------------------------------------------------------------------
0001D586                            ; Pattern load cues - Green Hill
0001D586                            ; ---------------------------------------------------------------------------
0001D586 000B                       PLC_GHZ:	dc.w $B
0001D588 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D58C 0000                       		dc.w 0
0001D58E 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D592 39A0                       		dc.w $39A0
0001D594 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D598 6B00                       		dc.w $6B00
0001D59A 0000 0000                  		dc.l Nem_PplRock	; purple rock
0001D59E 7A00                       		dc.w $7A00
0001D5A0 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D5A4 8000                       		dc.w $8000
0001D5A6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D5AA 8880                       		dc.w $8880
0001D5AC 0000 0000                  		dc.l Nem_Chopper	; chopper enemy
0001D5B0 8F60                       		dc.w $8F60
0001D5B2 0000 0000                  		dc.l Nem_Newtron	; newtron enemy
0001D5B6 9360                       		dc.w $9360
0001D5B8 0000 0000                  		dc.l Nem_Motobug	; motobug enemy
0001D5BC 9E00                       		dc.w $9E00
0001D5BE 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D5C2 A360                       		dc.w $A360
0001D5C4 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D5C8 A460                       		dc.w $A460
0001D5CA 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D5CE A660                       		dc.w $A660
0001D5D0 0005                       PLC_GHZ2:	dc.w 5
0001D5D2 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D5D6 7000                       		dc.w $7000
0001D5D8 0000 0000                  		dc.l Nem_Bridge		; bridge
0001D5DC 71C0                       		dc.w $71C0
0001D5DE 0000 0000                  		dc.l Nem_SpikePole	; spiked pole
0001D5E2 7300                       		dc.w $7300
0001D5E4 0000 0000                  		dc.l Nem_Ball		; giant	ball
0001D5E8 7540                       		dc.w $7540
0001D5EA 0000 0000                  		dc.l Nem_GhzWall1	; breakable wall
0001D5EE A1E0                       		dc.w $A1E0
0001D5F0 0000 0000                  		dc.l Nem_GhzWall2	; normal wall
0001D5F4 6980                       		dc.w $6980
0001D5F6                            ; ---------------------------------------------------------------------------
0001D5F6                            ; Pattern load cues - Labyrinth
0001D5F6                            ; ---------------------------------------------------------------------------
0001D5F6 000B                       PLC_LZ:		dc.w $B
0001D5F8 0000 0000                  		dc.l Nem_LZ		; LZ main patterns
0001D5FC 0000                       		dc.w 0
0001D5FE 0000 0000                  		dc.l Nem_LzBlock1	; block
0001D602 3C00                       		dc.w $3C00
0001D604 0000 0000                  		dc.l Nem_LzBlock2	; blocks
0001D608 3E00                       		dc.w $3E00
0001D60A 0000 0000                  		dc.l Nem_Splash		; waterfalls and splash
0001D60E 4B20                       		dc.w $4B20
0001D610 0000 0000                  		dc.l Nem_Water		; water	surface
0001D614 6000                       		dc.w $6000
0001D616 0000 0000                  		dc.l Nem_LzSpikeBall	; spiked ball
0001D61A 6200                       		dc.w $6200
0001D61C 0000 0000                  		dc.l Nem_FlapDoor	; flapping door
0001D620 6500                       		dc.w $6500
0001D622 0000 0000                  		dc.l Nem_Bubbles	; bubbles and numbers
0001D626 6900                       		dc.w $6900
0001D628 0000 0000                  		dc.l Nem_LzBlock3	; block
0001D62C 7780                       		dc.w $7780
0001D62E 0000 0000                  		dc.l Nem_LzDoor1	; vertical door
0001D632 7880                       		dc.w $7880
0001D634 0000 0000                  		dc.l Nem_Harpoon	; harpoon
0001D638 7980                       		dc.w $7980
0001D63A 0000 0000                  		dc.l Nem_Burrobot	; burrobot enemy
0001D63E 94C0                       		dc.w $94C0
0001D640 000C                       PLC_LZ2:	dc.w $C
0001D642 0000 0000                  		dc.l Nem_LzPole		; pole that breaks
0001D646 7BC0                       		dc.w $7BC0
0001D648 0000 0000                  		dc.l Nem_LzDoor2	; large	horizontal door
0001D64C 7CC0                       		dc.w $7CC0
0001D64E 0000 0000                  		dc.l Nem_LzWheel	; wheel
0001D652 7EC0                       		dc.w $7EC0
0001D654 0000 0000                  		dc.l Nem_Gargoyle	; gargoyle head
0001D658 5D20                       		dc.w $5D20
0001D65A 0000 0000                  		dc.l Nem_LzSonic	; Sonic	holding	his breath
0001D65E 8800                       		dc.w $8800
0001D660 0000 0000                  		dc.l Nem_LzPlatfm	; rising platform
0001D664 89E0                       		dc.w $89E0
0001D666 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D66A 8CE0                       		dc.w $8CE0
0001D66C 0000 0000                  		dc.l Nem_Jaws		; jaws enemy
0001D670 90C0                       		dc.w $90C0
0001D672 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D676 A1E0                       		dc.w $A1E0
0001D678 0000 0000                  		dc.l Nem_Cork		; cork block
0001D67C A000                       		dc.w $A000
0001D67E 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D682 A360                       		dc.w $A360
0001D684 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D688 A460                       		dc.w $A460
0001D68A 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D68E A660                       		dc.w $A660
0001D690                            ; ---------------------------------------------------------------------------
0001D690                            ; Pattern load cues - Marble
0001D690                            ; ---------------------------------------------------------------------------
0001D690 0009                       PLC_MZ:		dc.w 9
0001D692 0000 0000                  		dc.l Nem_MZ		; MZ main patterns
0001D696 0000                       		dc.w 0
0001D698 0000 0000                  		dc.l Nem_MzMetal	; metal	blocks
0001D69C 6000                       		dc.w $6000
0001D69E 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D6A2 68A0                       		dc.w $68A0
0001D6A4 0000 0000                  		dc.l Nem_Swing		; swinging platform
0001D6A8 7000                       		dc.w $7000
0001D6AA 0000 0000                  		dc.l Nem_MzGlass	; green	glassy block
0001D6AE 71C0                       		dc.w $71C0
0001D6B0 0000 0000                  		dc.l Nem_Lava		; lava
0001D6B4 7500                       		dc.w $7500
0001D6B6 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D6BA 8880                       		dc.w $8880
0001D6BC 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D6C0 8F60                       		dc.w $8F60
0001D6C2 0000 0000                  		dc.l Nem_Basaran	; basaran enemy
0001D6C6 9700                       		dc.w $9700
0001D6C8 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D6CC 9FE0                       		dc.w $9FE0
0001D6CE 0004                       PLC_MZ2:	dc.w 4
0001D6D0 0000 0000                  		dc.l Nem_MzSwitch	; switch
0001D6D4 A260                       		dc.w $A260
0001D6D6 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D6DA A360                       		dc.w $A360
0001D6DC 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D6E0 A460                       		dc.w $A460
0001D6E2 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D6E6 A660                       		dc.w $A660
0001D6E8 0000 0000                  		dc.l Nem_MzBlock	; green	stone block
0001D6EC 5700                       		dc.w $5700
0001D6EE                            ; ---------------------------------------------------------------------------
0001D6EE                            ; Pattern load cues - Star Light
0001D6EE                            ; ---------------------------------------------------------------------------
0001D6EE 0008                       PLC_SLZ:	dc.w 8
0001D6F0 0000 0000                  		dc.l Nem_SLZ		; SLZ main patterns
0001D6F4 0000                       		dc.w 0
0001D6F6 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D6FA 8000                       		dc.w $8000
0001D6FC 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D700 8520                       		dc.w $8520
0001D702 0000 0000                  		dc.l Nem_MzFire		; fireballs
0001D706 9000                       		dc.w $9000
0001D708 0000 0000                  		dc.l Nem_SlzBlock	; block
0001D70C 9C00                       		dc.w $9C00
0001D70E 0000 0000                  		dc.l Nem_SlzWall	; breakable wall
0001D712 A260                       		dc.w $A260
0001D714 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D718 A360                       		dc.w $A360
0001D71A 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D71E A460                       		dc.w $A460
0001D720 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D724 A660                       		dc.w $A660
0001D726 0005                       PLC_SLZ2:	dc.w 5
0001D728 0000 0000                  		dc.l Nem_Seesaw		; seesaw
0001D72C 6E80                       		dc.w $6E80
0001D72E 0000 0000                  		dc.l Nem_Fan		; fan
0001D732 7400                       		dc.w $7400
0001D734 0000 0000                  		dc.l Nem_Pylon		; foreground pylon
0001D738 7980                       		dc.w $7980
0001D73A 0000 0000                  		dc.l Nem_SlzSwing	; swinging platform
0001D73E 7B80                       		dc.w $7B80
0001D740 0000 0000                  		dc.l Nem_SlzCannon	; fireball launcher
0001D744 9B00                       		dc.w $9B00
0001D746 0000 0000                  		dc.l Nem_SlzSpike	; spikeball
0001D74A 9E00                       		dc.w $9E00
0001D74C                            ; ---------------------------------------------------------------------------
0001D74C                            ; Pattern load cues - Spring Yard
0001D74C                            ; ---------------------------------------------------------------------------
0001D74C 0004                       PLC_SYZ:	dc.w 4
0001D74E 0000 0000                  		dc.l Nem_SYZ		; SYZ main patterns
0001D752 0000                       		dc.w 0
0001D754 0000 0000                  		dc.l Nem_Crabmeat	; crabmeat enemy
0001D758 8000                       		dc.w $8000
0001D75A 0000 0000                  		dc.l Nem_Buzz		; buzz bomber enemy
0001D75E 8880                       		dc.w $8880
0001D760 0000 0000                  		dc.l Nem_Yadrin		; yadrin enemy
0001D764 8F60                       		dc.w $8F60
0001D766 0000 0000                  		dc.l Nem_Roller		; roller enemy
0001D76A 9700                       		dc.w $9700
0001D76C 0007                       PLC_SYZ2:	dc.w 7
0001D76E 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D772 7000                       		dc.w $7000
0001D774 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D778 72C0                       		dc.w $72C0
0001D77A 0000 0000                  		dc.l Nem_SyzSpike2	; small	spikeball
0001D77E 7740                       		dc.w $7740
0001D780 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D784 9FE0                       		dc.w $9FE0
0001D786 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D78A A1E0                       		dc.w $A1E0
0001D78C 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D790 A360                       		dc.w $A360
0001D792 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D796 A460                       		dc.w $A460
0001D798 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D79C A660                       		dc.w $A660
0001D79E                            ; ---------------------------------------------------------------------------
0001D79E                            ; Pattern load cues - Scrap Brain
0001D79E                            ; ---------------------------------------------------------------------------
0001D79E 000B                       PLC_SBZ:	dc.w $B
0001D7A0 0000 0000                  		dc.l Nem_SBZ		; SBZ main patterns
0001D7A4 0000                       		dc.w 0
0001D7A6 0000 0000                  		dc.l Nem_Stomper	; moving platform and stomper
0001D7AA 5800                       		dc.w $5800
0001D7AC 0000 0000                  		dc.l Nem_SbzDoor1	; door
0001D7B0 5D00                       		dc.w $5D00
0001D7B2 0000 0000                  		dc.l Nem_Girder		; girder
0001D7B6 5E00                       		dc.w $5E00
0001D7B8 0000 0000                  		dc.l Nem_BallHog	; ball hog enemy
0001D7BC 6040                       		dc.w $6040
0001D7BE 0000 0000                  		dc.l Nem_SbzWheel1	; spot on large	wheel
0001D7C2 6880                       		dc.w $6880
0001D7C4 0000 0000                  		dc.l Nem_SbzWheel2	; wheel	that grabs Sonic
0001D7C8 6900                       		dc.w $6900
0001D7CA 0000 0000                  		dc.l Nem_SyzSpike1	; large	spikeball
0001D7CE 7220                       		dc.w $7220
0001D7D0 0000 0000                  		dc.l Nem_Cutter		; pizza	cutter
0001D7D4 76A0                       		dc.w $76A0
0001D7D6 0000 0000                  		dc.l Nem_FlamePipe	; flaming pipe
0001D7DA 7B20                       		dc.w $7B20
0001D7DC 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D7E0 7EA0                       		dc.w $7EA0
0001D7E2 0000 0000                  		dc.l Nem_SbzBlock	; vanishing block
0001D7E6 9860                       		dc.w $9860
0001D7E8 000C                       PLC_SBZ2:	dc.w $C
0001D7EA 0000 0000                  		dc.l Nem_Cater		; caterkiller enemy
0001D7EE 5600                       		dc.w $5600
0001D7F0 0000 0000                  		dc.l Nem_Bomb		; bomb enemy
0001D7F4 8000                       		dc.w $8000
0001D7F6 0000 0000                  		dc.l Nem_Orbinaut	; orbinaut enemy
0001D7FA 8520                       		dc.w $8520
0001D7FC 0000 0000                  		dc.l Nem_SlideFloor	; floor	that slides away
0001D800 8C00                       		dc.w $8C00
0001D802 0000 0000                  		dc.l Nem_SbzDoor2	; horizontal door
0001D806 8DE0                       		dc.w $8DE0
0001D808 0000 0000                  		dc.l Nem_Electric	; electric orb
0001D80C 8FC0                       		dc.w $8FC0
0001D80E 0000 0000                  		dc.l Nem_TrapDoor	; trapdoor
0001D812 9240                       		dc.w $9240
0001D814 0000 0000                  		dc.l Nem_SbzFloor	; collapsing floor
0001D818 7F20                       		dc.w $7F20
0001D81A 0000 0000                  		dc.l Nem_SpinPform	; small	spinning platform
0001D81E 9BE0                       		dc.w $9BE0
0001D820 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D824 A1E0                       		dc.w $A1E0
0001D826 0000 0000                  		dc.l Nem_Spikes		; spikes
0001D82A A360                       		dc.w $A360
0001D82C 0000 0000                  		dc.l Nem_HSpring	; horizontal spring
0001D830 A460                       		dc.w $A460
0001D832 0000 0000                  		dc.l Nem_VSpring	; vertical spring
0001D836 A660                       		dc.w $A660
0001D838                            ; ---------------------------------------------------------------------------
0001D838                            ; Pattern load cues - title card
0001D838                            ; ---------------------------------------------------------------------------
0001D838 0000                       PLC_TitleCard:	dc.w 0
0001D83A 0000 0000                  		dc.l Nem_TitleCard
0001D83E B000                       		dc.w $B000
0001D840                            ; ---------------------------------------------------------------------------
0001D840                            ; Pattern load cues - act 3 boss
0001D840                            ; ---------------------------------------------------------------------------
0001D840 0005                       PLC_Boss:	dc.w 5
0001D842 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001D846 8000                       		dc.w $8000
0001D848 0000 0000                  		dc.l Nem_Weapons	; Eggman's weapons
0001D84C 8D80                       		dc.w $8D80
0001D84E 0000 0000                  		dc.l Nem_Prison		; prison capsule
0001D852 93A0                       		dc.w $93A0
0001D854 0000 0000                  		dc.l Nem_Bomb		; bomb enemy (gets overwritten)
0001D858 A300                       		dc.w $A300
0001D85A 0000 0000                  		dc.l Nem_SlzSpike	; spikeball (SLZ boss)
0001D85E A300                       		dc.w $A300
0001D860 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001D864 A540                       		dc.w $A540
0001D866                            ; ---------------------------------------------------------------------------
0001D866                            ; Pattern load cues - act 1/2 signpost
0001D866                            ; ---------------------------------------------------------------------------
0001D866 0002                       PLC_Signpost:	dc.w 2
0001D868 0000 0000                  		dc.l Nem_SignPost	; signpost
0001D86C D000                       		dc.w $D000
0001D86E 0000 0000                  		dc.l Nem_Bonus		; hidden bonus points
0001D872 96C0                       		dc.w $96C0
0001D874 0000 0000                  		dc.l Nem_BigFlash	; giant	ring flash effect
0001D878 8C40                       		dc.w $8C40
0001D87A                            ; ---------------------------------------------------------------------------
0001D87A                            ; Pattern load cues - beta special stage warp effect
0001D87A                            ; ---------------------------------------------------------------------------
0001D87A 0000                       PLC_Warp:	dc.w 0
0001D87C 0000 0000                  		dc.l Nem_Warp
0001D880 A820                       		dc.w $A820
0001D882                            ; ---------------------------------------------------------------------------
0001D882                            ; Pattern load cues - special stage
0001D882                            ; ---------------------------------------------------------------------------
0001D882 0010                       PLC_SpeStage:	dc.w $10
0001D884 0000 0000                  		dc.l Nem_SSBgCloud	; bubble and cloud background
0001D888 0000                       		dc.w 0
0001D88A 0000 0000                  		dc.l Nem_SSBgFish	; bird and fish	background
0001D88E 0A20                       		dc.w $A20
0001D890 0000 0000                  		dc.l Nem_SSWalls	; walls
0001D894 2840                       		dc.w $2840
0001D896 0000 0000                  		dc.l Nem_Bumper		; bumper
0001D89A 4760                       		dc.w $4760
0001D89C 0000 0000                  		dc.l Nem_SSGOAL		; GOAL block
0001D8A0 4A20                       		dc.w $4A20
0001D8A2 0000 0000                  		dc.l Nem_SSUpDown	; UP and DOWN blocks
0001D8A6 4C60                       		dc.w $4C60
0001D8A8 0000 0000                  		dc.l Nem_SSRBlock	; R block
0001D8AC 5E00                       		dc.w $5E00
0001D8AE 0000 0000                  		dc.l Nem_SS1UpBlock	; 1UP block
0001D8B2 6E00                       		dc.w $6E00
0001D8B4 0000 0000                  		dc.l Nem_SSEmStars	; emerald collection stars
0001D8B8 7E00                       		dc.w $7E00
0001D8BA 0000 0000                  		dc.l Nem_SSRedWhite	; red and white	block
0001D8BE 8E00                       		dc.w $8E00
0001D8C0 0000 0000                  		dc.l Nem_SSGhost	; ghost	block
0001D8C4 9E00                       		dc.w $9E00
0001D8C6 0000 0000                  		dc.l Nem_SSWBlock	; W block
0001D8CA AE00                       		dc.w $AE00
0001D8CC 0000 0000                  		dc.l Nem_SSGlass	; glass	block
0001D8D0 BE00                       		dc.w $BE00
0001D8D2 0000 0000                  		dc.l Nem_SSEmerald	; emeralds
0001D8D6 EE00                       		dc.w $EE00
0001D8D8 0000 0000                  		dc.l Nem_SSZone1	; ZONE 1 block
0001D8DC F2E0                       		dc.w $F2E0
0001D8DE 0000 0000                  		dc.l Nem_SSZone2	; ZONE 2 block
0001D8E2 F400                       		dc.w $F400
0001D8E4 0000 0000                  		dc.l Nem_SSZone3	; ZONE 3 block
0001D8E8 F520                       		dc.w $F520
0001D8EA 0000 0000                  		dc.l Nem_SSZone4	; ZONE 4 block
0001D8EE F2E0                       		dc.w $F2E0
0001D8F0 0000 0000                  		dc.l Nem_SSZone5	; ZONE 5 block
0001D8F4 F400                       		dc.w $F400
0001D8F6 0000 0000                  		dc.l Nem_SSZone6	; ZONE 6 block
0001D8FA F520                       		dc.w $F520
0001D8FC                            ; ---------------------------------------------------------------------------
0001D8FC                            ; Pattern load cues - GHZ animals
0001D8FC                            ; ---------------------------------------------------------------------------
0001D8FC 0001                       PLC_GHZAnimals:	dc.w 1
0001D8FE 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001D902 B000                       		dc.w $B000
0001D904 0000 0000                  		dc.l Nem_Flicky		; flicky
0001D908 B240                       		dc.w $B240
0001D90A                            ; ---------------------------------------------------------------------------
0001D90A                            ; Pattern load cues - LZ animals
0001D90A                            ; ---------------------------------------------------------------------------
0001D90A 0001                       PLC_LZAnimals:	dc.w 1
0001D90C 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001D910 B000                       		dc.w $B000
0001D912 0000 0000                  		dc.l Nem_Seal		; seal
0001D916 B240                       		dc.w $B240
0001D918                            ; ---------------------------------------------------------------------------
0001D918                            ; Pattern load cues - MZ animals
0001D918                            ; ---------------------------------------------------------------------------
0001D918 0001                       PLC_MZAnimals:	dc.w 1
0001D91A 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001D91E B000                       		dc.w $B000
0001D920 0000 0000                  		dc.l Nem_Seal		; seal
0001D924 B240                       		dc.w $B240
0001D926                            ; ---------------------------------------------------------------------------
0001D926                            ; Pattern load cues - SLZ animals
0001D926                            ; ---------------------------------------------------------------------------
0001D926 0001                       PLC_SLZAnimals:	dc.w 1
0001D928 0000 0000                  		dc.l Nem_Pig		; pig
0001D92C B000                       		dc.w $B000
0001D92E 0000 0000                  		dc.l Nem_Flicky		; flicky
0001D932 B240                       		dc.w $B240
0001D934                            ; ---------------------------------------------------------------------------
0001D934                            ; Pattern load cues - SYZ animals
0001D934                            ; ---------------------------------------------------------------------------
0001D934 0001                       PLC_SYZAnimals:	dc.w 1
0001D936 0000 0000                  		dc.l Nem_Pig		; pig
0001D93A B000                       		dc.w $B000
0001D93C 0000 0000                  		dc.l Nem_Chicken	; chicken
0001D940 B240                       		dc.w $B240
0001D942                            ; ---------------------------------------------------------------------------
0001D942                            ; Pattern load cues - SBZ animals
0001D942                            ; ---------------------------------------------------------------------------
0001D942 0001                       PLC_SBZAnimals:	dc.w 1
0001D944 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001D948 B000                       		dc.w $B000
0001D94A 0000 0000                  		dc.l Nem_Chicken	; chicken
0001D94E B240                       		dc.w $B240
0001D950                            ; ---------------------------------------------------------------------------
0001D950                            ; Pattern load cues - special stage results screen
0001D950                            ; ---------------------------------------------------------------------------
0001D950 0001                       PLC_SpeStResult:dc.w 1
0001D952 0000 0000                  		dc.l Nem_ResultEm	; emeralds
0001D956 A820                       		dc.w $A820
0001D958 0000 0000                  		dc.l Nem_MiniSonic	; mini Sonic
0001D95C AA20                       		dc.w $AA20
0001D95E                            ; ---------------------------------------------------------------------------
0001D95E                            ; Pattern load cues - ending sequence
0001D95E                            ; ---------------------------------------------------------------------------
0001D95E 000E                       PLC_Ending:	dc.w $E
0001D960 0000 0000                  		dc.l Nem_GHZ_1st	; GHZ main patterns
0001D964 0000                       		dc.w 0
0001D966 0000 0000                  		dc.l Nem_GHZ_2nd	; GHZ secondary	patterns
0001D96A 39A0                       		dc.w $39A0
0001D96C 0000 0000                  		dc.l Nem_Stalk		; flower stalk
0001D970 6B00                       		dc.w $6B00
0001D972 0000 0000                  		dc.l Nem_EndFlower	; flowers
0001D976 7400                       		dc.w $7400
0001D978 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001D97C 78A0                       		dc.w $78A0
0001D97E 0000 0000                  		dc.l Nem_EndSonic	; Sonic
0001D982 7C20                       		dc.w $7C20
0001D984 0000 0000                  		dc.l Nem_EndEggman	; Eggman's death (unused)
0001D988 A480                       		dc.w $A480
0001D98A 0000 0000                  		dc.l Nem_Rabbit		; rabbit
0001D98E AA60                       		dc.w $AA60
0001D990 0000 0000                  		dc.l Nem_Chicken	; chicken
0001D994 ACA0                       		dc.w $ACA0
0001D996 0000 0000                  		dc.l Nem_BlackBird	; blackbird
0001D99A AE60                       		dc.w $AE60
0001D99C 0000 0000                  		dc.l Nem_Seal		; seal
0001D9A0 B0A0                       		dc.w $B0A0
0001D9A2 0000 0000                  		dc.l Nem_Pig		; pig
0001D9A6 B260                       		dc.w $B260
0001D9A8 0000 0000                  		dc.l Nem_Flicky		; flicky
0001D9AC B4A0                       		dc.w $B4A0
0001D9AE 0000 0000                  		dc.l Nem_Squirrel	; squirrel
0001D9B2 B660                       		dc.w $B660
0001D9B4 0000 0000                  		dc.l Nem_EndStH		; "SONIC THE HEDGEHOG"
0001D9B8 B8A0                       		dc.w $B8A0
0001D9BA                            ; ---------------------------------------------------------------------------
0001D9BA                            ; Pattern load cues - "TRY AGAIN" and "END" screens
0001D9BA                            ; ---------------------------------------------------------------------------
0001D9BA 0002                       PLC_TryAgain:	dc.w 2
0001D9BC 0000 0000                  		dc.l Nem_EndEm		; emeralds
0001D9C0 78A0                       		dc.w $78A0
0001D9C2 0000 0000                  		dc.l Nem_TryAgain	; Eggman
0001D9C6 7C20                       		dc.w $7C20
0001D9C8 0000 0000                  		dc.l Nem_CreditText	; credits alphabet
0001D9CC B400                       		dc.w $B400
0001D9CE                            ; ---------------------------------------------------------------------------
0001D9CE                            ; Pattern load cues - Eggman on SBZ 2
0001D9CE                            ; ---------------------------------------------------------------------------
0001D9CE 0002                       PLC_EggmanSBZ2:	dc.w 2
0001D9D0 0000 0000                  		dc.l Nem_SbzBlock	; block
0001D9D4 A300                       		dc.w $A300
0001D9D6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman
0001D9DA 8000                       		dc.w $8000
0001D9DC 0000 0000                  		dc.l Nem_LzSwitch	; switch
0001D9E0 9400                       		dc.w $9400
0001D9E2                            ; ---------------------------------------------------------------------------
0001D9E2                            ; Pattern load cues - final boss
0001D9E2                            ; ---------------------------------------------------------------------------
0001D9E2 0004                       PLC_FZBoss:	dc.w 4
0001D9E4 0000 0000                  		dc.l Nem_FzEggman	; Eggman after boss
0001D9E8 7400                       		dc.w $7400
0001D9EA 0000 0000                  		dc.l Nem_FzBoss		; FZ boss
0001D9EE 6000                       		dc.w $6000
0001D9F0 0000 0000                  		dc.l Nem_Eggman		; Eggman main patterns
0001D9F4 8000                       		dc.w $8000
0001D9F6 0000 0000                  		dc.l Nem_Sbz2Eggman	; Eggman without ship
0001D9FA 8E00                       		dc.w $8E00
0001D9FC 0000 0000                  		dc.l Nem_Exhaust	; exhaust flame
0001DA00 A540                       		dc.w $A540
0001DA02                            		even
0001DA02                            		even
0001DA02                            
0001DA02                            		incbin	misc\padding.bin
0001DAF0                            		even
0001DAF0                            Nem_SegaLogo:	incbin	artnem\segalogo.bin	; large Sega logo
0001DF52                            		even
0001DF52                            Eni_SegaLogo:	incbin	mapeni\segalogo.bin	; large Sega logo (mappings)
0001E04A                            		even
0001E04A                            Eni_Title:	incbin	mapeni\titlescr.bin	; title screen foreground (mappings)
0001E15E                            		even
0001E15E                            Nem_TitleFg:	incbin	artnem\titlefor.bin	; title screen foreground
0001F16A                            		even
0001F16A                            Nem_TitleSonic:	incbin	artnem\titleson.bin	; Sonic on title screen
00020B38                            		even
00020B38                            Nem_TitleTM:	incbin	artnem\titletm.bin	; TM on title screen
00020B6C                            		even
00020B6C                            Eni_JapNames:	incbin	mapeni\japcreds.bin	; Japanese credits (mappings)
00020C2A                            		even
00020C2A                            Nem_JapNames:	incbin	artnem\japcreds.bin	; Japanese credits
000210D2                            		even
000210D2                            ; ---------------------------------------------------------------------------
000210D2                            ; Sprite mappings - Sonic
000210D2                            ; ---------------------------------------------------------------------------
000210D2                            Map_Sonic:
000210D2                            	include "_maps\Sonic.asm"
000210D2                            Map_9339:
000210D2 0000                       Map_9339_0: 	dc.w Map_9339_B0-Map_9339
000210D4 0000                       Map_9339_2: 	dc.w Map_9339_B1-Map_9339
000210D6 0000                       Map_9339_4: 	dc.w Map_9339_BC-Map_9339
000210D8 0000                       Map_9339_6: 	dc.w Map_9339_CC-Map_9339
000210DA 0000                       Map_9339_8: 	dc.w Map_9339_DC-Map_9339
000210DC 0000                       Map_9339_A: 	dc.w Map_9339_EC-Map_9339
000210DE 0000                       Map_9339_C: 	dc.w Map_9339_FC-Map_9339
000210E0 0000                       Map_9339_E: 	dc.w Map_9339_111-Map_9339
000210E2 0000                       Map_9339_10: 	dc.w Map_9339_11C-Map_9339
000210E4 0000                       Map_9339_12: 	dc.w Map_9339_127-Map_9339
000210E6 0000                       Map_9339_14: 	dc.w Map_9339_13C-Map_9339
000210E8 0000                       Map_9339_16: 	dc.w Map_9339_147-Map_9339
000210EA 0000                       Map_9339_18: 	dc.w Map_9339_157-Map_9339
000210EC 0000                       Map_9339_1A: 	dc.w Map_9339_171-Map_9339
000210EE 0000                       Map_9339_1C: 	dc.w Map_9339_190-Map_9339
000210F0 0000                       Map_9339_1E: 	dc.w Map_9339_1A5-Map_9339
000210F2 0000                       Map_9339_20: 	dc.w Map_9339_1BF-Map_9339
000210F4 0000                       Map_9339_22: 	dc.w Map_9339_1D4-Map_9339
000210F6 0000                       Map_9339_24: 	dc.w Map_9339_1EE-Map_9339
000210F8 0000                       Map_9339_26: 	dc.w Map_9339_203-Map_9339
000210FA 0000                       Map_9339_28: 	dc.w Map_9339_20E-Map_9339
000210FC 0000                       Map_9339_2A: 	dc.w Map_9339_219-Map_9339
000210FE 0000                       Map_9339_2C: 	dc.w Map_9339_22E-Map_9339
00021100 0000                       Map_9339_2E: 	dc.w Map_9339_239-Map_9339
00021102 0000                       Map_9339_30: 	dc.w Map_9339_249-Map_9339
00021104 0000                       Map_9339_32: 	dc.w Map_9339_268-Map_9339
00021106 0000                       Map_9339_34: 	dc.w Map_9339_287-Map_9339
00021108 0000                       Map_9339_36: 	dc.w Map_9339_29C-Map_9339
0002110A 0000                       Map_9339_38: 	dc.w Map_9339_2B6-Map_9339
0002110C 0000                       Map_9339_3A: 	dc.w Map_9339_2CB-Map_9339
0002110E 0000                       Map_9339_3C: 	dc.w Map_9339_2E5-Map_9339
00021110 0000                       Map_9339_3E: 	dc.w Map_9339_2F0-Map_9339
00021112 0000                       Map_9339_40: 	dc.w Map_9339_2FB-Map_9339
00021114 0000                       Map_9339_42: 	dc.w Map_9339_306-Map_9339
00021116 0000                       Map_9339_44: 	dc.w Map_9339_311-Map_9339
00021118 0000                       Map_9339_46: 	dc.w Map_9339_326-Map_9339
0002111A 0000                       Map_9339_48: 	dc.w Map_9339_336-Map_9339
0002111C 0000                       Map_9339_4A: 	dc.w Map_9339_34B-Map_9339
0002111E 0000                       Map_9339_4C: 	dc.w Map_9339_35B-Map_9339
00021120 0000                       Map_9339_4E: 	dc.w Map_9339_366-Map_9339
00021122 0000                       Map_9339_50: 	dc.w Map_9339_371-Map_9339
00021124 0000                       Map_9339_52: 	dc.w Map_9339_37C-Map_9339
00021126 0000                       Map_9339_54: 	dc.w Map_9339_387-Map_9339
00021128 0000                       Map_9339_56: 	dc.w Map_9339_39C-Map_9339
0002112A 0000                       Map_9339_58: 	dc.w Map_9339_3A7-Map_9339
0002112C 0000                       Map_9339_5A: 	dc.w Map_9339_3BC-Map_9339
0002112E 0000                       Map_9339_5C: 	dc.w Map_9339_3C7-Map_9339
00021130 0000                       Map_9339_5E: 	dc.w Map_9339_3CD-Map_9339
00021132 0000                       Map_9339_60: 	dc.w Map_9339_3D3-Map_9339
00021134 0000                       Map_9339_62: 	dc.w Map_9339_3D9-Map_9339
00021136 0000                       Map_9339_64: 	dc.w Map_9339_3DF-Map_9339
00021138 0000                       Map_9339_66: 	dc.w Map_9339_3E5-Map_9339
0002113A 0000                       Map_9339_68: 	dc.w Map_9339_3F0-Map_9339
0002113C 0000                       Map_9339_6A: 	dc.w Map_9339_3F6-Map_9339
0002113E 0000                       Map_9339_6C: 	dc.w Map_9339_401-Map_9339
00021140 0000                       Map_9339_6E: 	dc.w Map_9339_407-Map_9339
00021142 0000                       Map_9339_70: 	dc.w Map_9339_412-Map_9339
00021144 0000                       Map_9339_72: 	dc.w Map_9339_427-Map_9339
00021146 0000                       Map_9339_74: 	dc.w Map_9339_43C-Map_9339
00021148 0000                       Map_9339_76: 	dc.w Map_9339_44C-Map_9339
0002114A 0000                       Map_9339_78: 	dc.w Map_9339_45C-Map_9339
0002114C 0000                       Map_9339_7A: 	dc.w Map_9339_46C-Map_9339
0002114E 0000                       Map_9339_7C: 	dc.w Map_9339_477-Map_9339
00021150 0000                       Map_9339_7E: 	dc.w Map_9339_487-Map_9339
00021152 0000                       Map_9339_80: 	dc.w Map_9339_497-Map_9339
00021154 0000                       Map_9339_82: 	dc.w Map_9339_4A7-Map_9339
00021156 0000                       Map_9339_84: 	dc.w Map_9339_4BC-Map_9339
00021158 0000                       Map_9339_86: 	dc.w Map_9339_4D1-Map_9339
0002115A 0000                       Map_9339_88: 	dc.w Map_9339_4EB-Map_9339
0002115C 0000                       Map_9339_8A: 	dc.w Map_9339_505-Map_9339
0002115E 0000                       Map_9339_8C: 	dc.w Map_9339_510-Map_9339
00021160 0000                       Map_9339_8E: 	dc.w Map_9339_520-Map_9339
00021162 0000                       Map_9339_90: 	dc.w Map_9339_52B-Map_9339
00021164 0000                       Map_9339_92: 	dc.w Map_9339_53B-Map_9339
00021166 0000                       Map_9339_94: 	dc.w Map_9339_546-Map_9339
00021168 0000                       Map_9339_96: 	dc.w Map_9339_556-Map_9339
0002116A 0000                       Map_9339_98: 	dc.w Map_9339_566-Map_9339
0002116C 0000                       Map_9339_9A: 	dc.w Map_9339_580-Map_9339
0002116E 0000                       Map_9339_9C: 	dc.w Map_9339_59A-Map_9339
00021170 0000                       Map_9339_9E: 	dc.w Map_9339_5A5-Map_9339
00021172 0000                       Map_9339_A0: 	dc.w Map_9339_5B5-Map_9339
00021174 0000                       Map_9339_A2: 	dc.w Map_9339_5BB-Map_9339
00021176 0000                       Map_9339_A4: 	dc.w Map_9339_5C1-Map_9339
00021178 0000                       Map_9339_A6: 	dc.w Map_9339_5C7-Map_9339
0002117A 0000                       Map_9339_A8: 	dc.w Map_9339_5D7-Map_9339
0002117C 0000                       Map_9339_AA: 	dc.w Map_9339_5E7-Map_9339
0002117E 0000                       Map_9339_AC: 	dc.w Map_9339_5F7-Map_9339
00021180 0000                       Map_9339_AE: 	dc.w Map_9339_607-Map_9339
00021182 00                         Map_9339_B0: 	dc.b $0
00021183 02                         Map_9339_B1: 	dc.b $2
00021184 ED0E 0000 ED               	dc.b $ED, $E, $0, $0, $ED
00021189 0509 000C F5               	dc.b $5, $9, $0, $C, $F5
0002118E 03                         Map_9339_BC: 	dc.b $3
0002118F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021194 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
00021199 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
0002119E 03                         Map_9339_CC: 	dc.b $3
0002119F EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000211A4 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000211A9 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000211AE 03                         Map_9339_DC: 	dc.b $3
000211AF EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
000211B4 FC09 0006 F0               	dc.b $FC, $9, $0, $6, $F0
000211B9 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000211BE 03                         Map_9339_EC: 	dc.b $3
000211BF EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
000211C4 0408 0009 F0               	dc.b $4, $8, $0, $9, $F0
000211C9 0C08 000C F8               	dc.b $C, $8, $0, $C, $F8
000211CE 04                         Map_9339_FC: 	dc.b $4
000211CF EB0D 0000 EC               	dc.b $EB, $D, $0, $0, $EC
000211D4 FB09 0008 EC               	dc.b $FB, $9, $0, $8, $EC
000211D9 FB06 000E 04               	dc.b $FB, $6, $0, $E, $4
000211DE 0B04 0014 EC               	dc.b $B, $4, $0, $14, $EC
000211E3 02                         Map_9339_111: 	dc.b $2
000211E4 EC0D 0000 ED               	dc.b $EC, $D, $0, $0, $ED
000211E9 FC0E 0008 F5               	dc.b $FC, $E, $0, $8, $F5
000211EE 02                         Map_9339_11C: 	dc.b $2
000211EF ED09 0000 F3               	dc.b $ED, $9, $0, $0, $F3
000211F4 FD0A 0006 F3               	dc.b $FD, $A, $0, $6, $F3
000211F9 04                         Map_9339_127: 	dc.b $4
000211FA EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000211FF FB09 0006 EC               	dc.b $FB, $9, $0, $6, $EC
00021204 FB06 000C 04               	dc.b $FB, $6, $0, $C, $4
00021209 0B04 0012 EC               	dc.b $B, $4, $0, $12, $EC
0002120E 02                         Map_9339_13C: 	dc.b $2
0002120F EC09 0000 F3               	dc.b $EC, $9, $0, $0, $F3
00021214 FC0E 0006 EB               	dc.b $FC, $E, $0, $6, $EB
00021219 03                         Map_9339_147: 	dc.b $3
0002121A ED0D 0000 EC               	dc.b $ED, $D, $0, $0, $EC
0002121F FD0C 0008 F4               	dc.b $FD, $C, $0, $8, $F4
00021224 0509 000C F4               	dc.b $5, $9, $0, $C, $F4
00021229 05                         Map_9339_157: 	dc.b $5
0002122A EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002122F EB06 0006 03               	dc.b $EB, $6, $0, $6, $3
00021234 FB08 000C EB               	dc.b $FB, $8, $0, $C, $EB
00021239 0309 000F F3               	dc.b $3, $9, $0, $F, $F3
0002123E 1300 0015 FB               	dc.b $13, $0, $0, $15, $FB
00021243 06                         Map_9339_171: 	dc.b $6
00021244 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00021249 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002124E FC0C 0008 EC               	dc.b $FC, $C, $0, $8, $EC
00021253 0409 000C F4               	dc.b $4, $9, $0, $C, $F4
00021258 FC05 0012 0C               	dc.b $FC, $5, $0, $12, $C
0002125D F400 0016 14               	dc.b $F4, $0, $0, $16, $14
00021262 04                         Map_9339_190: 	dc.b $4
00021263 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
00021268 ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
0002126D FD0D 0008 F5               	dc.b $FD, $D, $0, $8, $F5
00021272 0D08 0010 FD               	dc.b $D, $8, $0, $10, $FD
00021277 05                         Map_9339_1A5: 	dc.b $5
00021278 EB09 0000 EB               	dc.b $EB, $9, $0, $0, $EB
0002127D EB05 0006 03               	dc.b $EB, $5, $0, $6, $3
00021282 FB0D 000A F3               	dc.b $FB, $D, $0, $A, $F3
00021287 0B08 0012 F3               	dc.b $B, $8, $0, $12, $F3
0002128C 1304 0015 FB               	dc.b $13, $4, $0, $15, $FB
00021291 04                         Map_9339_1BF: 	dc.b $4
00021292 EC09 0000 EC               	dc.b $EC, $9, $0, $0, $EC
00021297 EC01 0006 04               	dc.b $EC, $1, $0, $6, $4
0002129C FC0D 0008 F4               	dc.b $FC, $D, $0, $8, $F4
000212A1 0C08 0010 FC               	dc.b $C, $8, $0, $10, $FC
000212A6 05                         Map_9339_1D4: 	dc.b $5
000212A7 ED09 0000 ED               	dc.b $ED, $9, $0, $0, $ED
000212AC ED01 0006 05               	dc.b $ED, $1, $0, $6, $5
000212B1 FD00 0008 ED               	dc.b $FD, $0, $0, $8, $ED
000212B6 FD0D 0009 F5               	dc.b $FD, $D, $0, $9, $F5
000212BB 0D08 0011 FD               	dc.b $D, $8, $0, $11, $FD
000212C0 04                         Map_9339_1EE: 	dc.b $4
000212C1 F407 0000 EB               	dc.b $F4, $7, $0, $0, $EB
000212C6 EC09 0008 FB               	dc.b $EC, $9, $0, $8, $FB
000212CB FC04 000E FB               	dc.b $FC, $4, $0, $E, $FB
000212D0 0409 0010 FB               	dc.b $4, $9, $0, $10, $FB
000212D5 02                         Map_9339_203: 	dc.b $2
000212D6 F407 0000 EC               	dc.b $F4, $7, $0, $0, $EC
000212DB EC0B 0008 FC               	dc.b $EC, $B, $0, $8, $FC
000212E0 02                         Map_9339_20E: 	dc.b $2
000212E1 F406 0000 ED               	dc.b $F4, $6, $0, $0, $ED
000212E6 F40A 0006 FD               	dc.b $F4, $A, $0, $6, $FD
000212EB 04                         Map_9339_219: 	dc.b $4
000212EC F406 0000 EB               	dc.b $F4, $6, $0, $0, $EB
000212F1 EC09 0006 FB               	dc.b $EC, $9, $0, $6, $FB
000212F6 FC04 000C FB               	dc.b $FC, $4, $0, $C, $FB
000212FB 0409 000E FB               	dc.b $4, $9, $0, $E, $FB
00021300 02                         Map_9339_22E: 	dc.b $2
00021301 F406 0000 EC               	dc.b $F4, $6, $0, $0, $EC
00021306 F40B 0006 FC               	dc.b $F4, $B, $0, $6, $FC
0002130B 03                         Map_9339_239: 	dc.b $3
0002130C F407 0000 ED               	dc.b $F4, $7, $0, $0, $ED
00021311 EC00 0008 FD               	dc.b $EC, $0, $0, $8, $FD
00021316 F40A 0009 FD               	dc.b $F4, $A, $0, $9, $FD
0002131B 06                         Map_9339_249: 	dc.b $6
0002131C FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00021321 ED04 0006 F3               	dc.b $ED, $4, $0, $6, $F3
00021326 F504 0008 EB               	dc.b $F5, $4, $0, $8, $EB
0002132B F50A 000A FB               	dc.b $F5, $A, $0, $A, $FB
00021330 0D00 0013 FB               	dc.b $D, $0, $0, $13, $FB
00021335 FD00 0014 13               	dc.b $FD, $0, $0, $14, $13
0002133A 06                         Map_9339_268: 	dc.b $6
0002133B FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
00021340 E408 0006 F4               	dc.b $E4, $8, $0, $6, $F4
00021345 EC04 0009 FC               	dc.b $EC, $4, $0, $9, $FC
0002134A F404 000B EC               	dc.b $F4, $4, $0, $B, $EC
0002134F F40A 000D FC               	dc.b $F4, $A, $0, $D, $FC
00021354 0C00 0016 FC               	dc.b $C, $0, $0, $16, $FC
00021359 04                         Map_9339_287: 	dc.b $4
0002135A FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
0002135F F304 0006 ED               	dc.b $F3, $4, $0, $6, $ED
00021364 EB0A 0008 FD               	dc.b $EB, $A, $0, $8, $FD
00021369 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
0002136E 05                         Map_9339_29C: 	dc.b $5
0002136F FD06 0000 EB               	dc.b $FD, $6, $0, $0, $EB
00021374 ED08 0006 F3               	dc.b $ED, $8, $0, $6, $F3
00021379 F504 0009 EB               	dc.b $F5, $4, $0, $9, $EB
0002137E F50D 000B FB               	dc.b $F5, $D, $0, $B, $FB
00021383 0508 0013 FB               	dc.b $5, $8, $0, $13, $FB
00021388 04                         Map_9339_2B6: 	dc.b $4
00021389 FC06 0000 EC               	dc.b $FC, $6, $0, $0, $EC
0002138E F404 0006 EC               	dc.b $F4, $4, $0, $6, $EC
00021393 EC0A 0008 FC               	dc.b $EC, $A, $0, $8, $FC
00021398 0404 0011 FC               	dc.b $4, $4, $0, $11, $FC
0002139D 05                         Map_9339_2CB: 	dc.b $5
0002139E FB06 0000 ED               	dc.b $FB, $6, $0, $0, $ED
000213A3 EB0A 0006 FD               	dc.b $EB, $A, $0, $6, $FD
000213A8 F304 000F ED               	dc.b $F3, $4, $0, $F, $ED
000213AD 0304 0011 FD               	dc.b $3, $4, $0, $11, $FD
000213B2 0B00 0013 FD               	dc.b $B, $0, $0, $13, $FD
000213B7 02                         Map_9339_2E5: 	dc.b $2
000213B8 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000213BD FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000213C2 02                         Map_9339_2F0: 	dc.b $2
000213C3 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000213C8 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000213CD 02                         Map_9339_2FB: 	dc.b $2
000213CE EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000213D3 FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000213D8 02                         Map_9339_306: 	dc.b $2
000213D9 EE09 0000 F4               	dc.b $EE, $9, $0, $0, $F4
000213DE FE0E 0006 EC               	dc.b $FE, $E, $0, $6, $EC
000213E3 04                         Map_9339_311: 	dc.b $4
000213E4 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000213E9 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
000213EE FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
000213F3 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
000213F8 03                         Map_9339_326: 	dc.b $3
000213F9 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
000213FE EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021403 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021408 04                         Map_9339_336: 	dc.b $4
00021409 EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
0002140E EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021413 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
00021418 FE00 0014 EE               	dc.b $FE, $0, $0, $14, $EE
0002141D 03                         Map_9339_34B: 	dc.b $3
0002141E EE09 0000 EE               	dc.b $EE, $9, $0, $0, $EE
00021423 EE01 0006 06               	dc.b $EE, $1, $0, $6, $6
00021428 FE0E 0008 F6               	dc.b $FE, $E, $0, $8, $F6
0002142D 02                         Map_9339_35B: 	dc.b $2
0002142E F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021433 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021438 02                         Map_9339_366: 	dc.b $2
00021439 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
0002143E F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021443 02                         Map_9339_371: 	dc.b $2
00021444 F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021449 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
0002144E 02                         Map_9339_37C: 	dc.b $2
0002144F F406 0000 EE               	dc.b $F4, $6, $0, $0, $EE
00021454 F40B 0006 FE               	dc.b $F4, $B, $0, $6, $FE
00021459 04                         Map_9339_387: 	dc.b $4
0002145A FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002145F F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00021464 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021469 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002146E 02                         Map_9339_39C: 	dc.b $2
0002146F F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00021474 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021479 04                         Map_9339_3A7: 	dc.b $4
0002147A FA06 0000 EE               	dc.b $FA, $6, $0, $0, $EE
0002147F F204 0006 EE               	dc.b $F2, $4, $0, $6, $EE
00021484 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021489 0A00 0014 FE               	dc.b $A, $0, $0, $14, $FE
0002148E 02                         Map_9339_3BC: 	dc.b $2
0002148F F207 0000 EE               	dc.b $F2, $7, $0, $0, $EE
00021494 EA0B 0008 FE               	dc.b $EA, $B, $0, $8, $FE
00021499 01                         Map_9339_3C7: 	dc.b $1
0002149A F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
0002149F 01                         Map_9339_3CD: 	dc.b $1
000214A0 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000214A5 01                         Map_9339_3D3: 	dc.b $1
000214A6 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000214AB 01                         Map_9339_3D9: 	dc.b $1
000214AC F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000214B1 01                         Map_9339_3DF: 	dc.b $1
000214B2 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000214B7 02                         Map_9339_3E5: 	dc.b $2
000214B8 F40E 0000 EC               	dc.b $F4, $E, $0, $0, $EC
000214BD F402 000C 0C               	dc.b $F4, $2, $0, $C, $C
000214C2 01                         Map_9339_3F0: 	dc.b $1
000214C3 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000214C8 02                         Map_9339_3F6: 	dc.b $2
000214C9 EC0B 0000 F4               	dc.b $EC, $B, $0, $0, $F4
000214CE 0C08 000C F4               	dc.b $C, $8, $0, $C, $F4
000214D3 01                         Map_9339_401: 	dc.b $1
000214D4 F00F 0000 F0               	dc.b $F0, $F, $0, $0, $F0
000214D9 02                         Map_9339_407: 	dc.b $2
000214DA ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000214DF FD0E 0006 F0               	dc.b $FD, $E, $0, $6, $F0
000214E4 04                         Map_9339_412: 	dc.b $4
000214E5 ED09 0000 F0               	dc.b $ED, $9, $0, $0, $F0
000214EA FD0D 0006 F0               	dc.b $FD, $D, $0, $6, $F0
000214EF 0D04 000E 00               	dc.b $D, $4, $0, $E, $0
000214F4 0500 0010 E8               	dc.b $5, $0, $0, $10, $E8
000214F9 04                         Map_9339_427: 	dc.b $4
000214FA F404 0000 FC               	dc.b $F4, $4, $0, $0, $FC
000214FF FC0D 0002 F4               	dc.b $FC, $D, $0, $2, $F4
00021504 0C08 000A F4               	dc.b $C, $8, $0, $A, $F4
00021509 0400 000D EC               	dc.b $4, $0, $0, $D, $EC
0002150E 03                         Map_9339_43C: 	dc.b $3
0002150F EC08 0800 E8               	dc.b $EC, $8, $8, $0, $E8
00021514 F402 0803 00               	dc.b $F4, $2, $8, $3, $0
00021519 F40F 0806 E0               	dc.b $F4, $F, $8, $6, $E0
0002151E 03                         Map_9339_44C: 	dc.b $3
0002151F EC0E 0800 E8               	dc.b $EC, $E, $8, $0, $E8
00021524 040D 080C E0               	dc.b $4, $D, $8, $C, $E0
00021529 0C00 1814 00               	dc.b $C, $0, $18, $14, $0
0002152E 03                         Map_9339_45C: 	dc.b $3
0002152F F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
00021534 FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00021539 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
0002153E 02                         Map_9339_46C: 	dc.b $2
0002153F F40A 0000 E8               	dc.b $F4, $A, $0, $0, $E8
00021544 F40A 0800 00               	dc.b $F4, $A, $8, $0, $0
00021549 03                         Map_9339_477: 	dc.b $3
0002154A F40D 0000 E4               	dc.b $F4, $D, $0, $0, $E4
0002154F FC00 0008 04               	dc.b $FC, $0, $0, $8, $4
00021554 040C 0009 EC               	dc.b $4, $C, $0, $9, $EC
00021559 03                         Map_9339_487: 	dc.b $3
0002155A F40D 0000 FC               	dc.b $F4, $D, $0, $0, $FC
0002155F FC05 0008 EC               	dc.b $FC, $5, $0, $8, $EC
00021564 0408 000C FC               	dc.b $4, $8, $0, $C, $FC
00021569 03                         Map_9339_497: 	dc.b $3
0002156A E80B 0000 F0               	dc.b $E8, $B, $0, $0, $F0
0002156F 0804 000C F8               	dc.b $8, $4, $0, $C, $F8
00021574 1000 000E F8               	dc.b $10, $0, $0, $E, $F8
00021579 04                         Map_9339_4A7: 	dc.b $4
0002157A F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
0002157F 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00021584 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
00021589 F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
0002158E 04                         Map_9339_4BC: 	dc.b $4
0002158F F80E 0000 E8               	dc.b $F8, $E, $0, $0, $E8
00021594 0005 000C 08               	dc.b $0, $5, $0, $C, $8
00021599 F800 0010 08               	dc.b $F8, $0, $0, $10, $8
0002159E F000 0011 F8               	dc.b $F0, $0, $0, $11, $F8
000215A3 05                         Map_9339_4D1: 	dc.b $5
000215A4 E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000215A9 F001 0009 0C               	dc.b $F0, $1, $0, $9, $C
000215AE 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000215B3 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000215B8 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000215BD 05                         Map_9339_4EB: 	dc.b $5
000215BE E80A 0000 F4               	dc.b $E8, $A, $0, $0, $F4
000215C3 E801 0009 0C               	dc.b $E8, $1, $0, $9, $C
000215C8 0009 000B F4               	dc.b $0, $9, $0, $B, $F4
000215CD 1004 0011 F4               	dc.b $10, $4, $0, $11, $F4
000215D2 0000 0013 EC               	dc.b $0, $0, $0, $13, $EC
000215D7 02                         Map_9339_505: 	dc.b $2
000215D8 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000215DD 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000215E2 03                         Map_9339_510: 	dc.b $3
000215E3 EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
000215E8 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
000215ED 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
000215F2 02                         Map_9339_520: 	dc.b $2
000215F3 ED0A 0000 F3               	dc.b $ED, $A, $0, $0, $F3
000215F8 050D 0009 EB               	dc.b $5, $D, $0, $9, $EB
000215FD 03                         Map_9339_52B: 	dc.b $3
000215FE EC0A 0000 F3               	dc.b $EC, $A, $0, $0, $F3
00021603 0408 0009 F3               	dc.b $4, $8, $0, $9, $F3
00021608 0C04 000C F3               	dc.b $C, $4, $0, $C, $F3
0002160D 02                         Map_9339_53B: 	dc.b $2
0002160E EC09 0000 F0               	dc.b $EC, $9, $0, $0, $F0
00021613 FC0E 0006 F0               	dc.b $FC, $E, $0, $6, $F0
00021618 03                         Map_9339_546: 	dc.b $3
00021619 EC0A 0000 F0               	dc.b $EC, $A, $0, $0, $F0
0002161E 0405 0009 F8               	dc.b $4, $5, $0, $9, $F8
00021623 E400 000D F8               	dc.b $E4, $0, $0, $D, $F8
00021628 03                         Map_9339_556: 	dc.b $3
00021629 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002162E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00021633 F80B 000A F4               	dc.b $F8, $B, $0, $A, $F4
00021638 05                         Map_9339_566: 	dc.b $5
00021639 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
0002163E E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
00021643 F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00021648 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
0002164D 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
00021652 05                         Map_9339_580: 	dc.b $5
00021653 E80D 0000 EC               	dc.b $E8, $D, $0, $0, $EC
00021658 E801 0008 0C               	dc.b $E8, $1, $0, $8, $C
0002165D F809 000A F4               	dc.b $F8, $9, $0, $A, $F4
00021662 080C 0010 F4               	dc.b $8, $C, $0, $10, $F4
00021667 1000 0014 F4               	dc.b $10, $0, $0, $14, $F4
0002166C 02                         Map_9339_59A: 	dc.b $2
0002166D EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
00021672 F40F 0003 F0               	dc.b $F4, $F, $0, $3, $F0
00021677 03                         Map_9339_5A5: 	dc.b $3
00021678 EC08 0000 F0               	dc.b $EC, $8, $0, $0, $F0
0002167D F40E 0003 F0               	dc.b $F4, $E, $0, $3, $F0
00021682 0C08 000F F8               	dc.b $C, $8, $0, $F, $F8
00021687 01                         Map_9339_5B5: 	dc.b $1
00021688 F00B 0000 F4               	dc.b $F0, $B, $0, $0, $F4
0002168D 01                         Map_9339_5BB: 	dc.b $1
0002168E F406 0000 F8               	dc.b $F4, $6, $0, $0, $F8
00021693 01                         Map_9339_5C1: 	dc.b $1
00021694 F801 0000 FC               	dc.b $F8, $1, $0, $0, $FC
00021699 03                         Map_9339_5C7: 	dc.b $3
0002169A F40D 0800 E4               	dc.b $F4, $D, $8, $0, $E4
0002169F FC05 0808 04               	dc.b $FC, $5, $8, $8, $4
000216A4 0408 080C EC               	dc.b $4, $8, $8, $C, $EC
000216A9 03                         Map_9339_5D7: 	dc.b $3
000216AA F40D 0800 FC               	dc.b $F4, $D, $8, $0, $FC
000216AF FC00 0808 F4               	dc.b $FC, $0, $8, $8, $F4
000216B4 040C 0809 F4               	dc.b $4, $C, $8, $9, $F4
000216B9 03                         Map_9339_5E7: 	dc.b $3
000216BA F00E 0000 EC               	dc.b $F0, $E, $0, $0, $EC
000216BF F801 000C 0C               	dc.b $F8, $1, $0, $C, $C
000216C4 080C 000E F4               	dc.b $8, $C, $0, $E, $F4
000216C9 03                         Map_9339_5F7: 	dc.b $3
000216CA EB09 0000 F4               	dc.b $EB, $9, $0, $0, $F4
000216CF FB0E 0006 EC               	dc.b $FB, $E, $0, $6, $EC
000216D4 0301 0012 0C               	dc.b $3, $1, $0, $12, $C
000216D9 02                         Map_9339_607: 	dc.b $2
000216DA F00F 0000 EC               	dc.b $F0, $F, $0, $0, $EC
000216DF F802 0010 0C               	dc.b $F8, $2, $0, $10, $C
000216E4                            	even
000216E4                            	even
000216E4                            
000216E4                            ; ---------------------------------------------------------------------------
000216E4                            ; Uncompressed graphics	loading	array for Sonic
000216E4                            ; ---------------------------------------------------------------------------
000216E4                            SonicDynPLC:
000216E4                            	include "_inc\Sonic dynamic pattern load cues.asm"
000216E4                            DPLC_3959:
000216E4 0000                       DPLC_3959_0: 	dc.w DPLC_3959_B0-DPLC_3959
000216E6 0000                       DPLC_3959_2: 	dc.w DPLC_3959_B1-DPLC_3959
000216E8 0000                       DPLC_3959_4: 	dc.w DPLC_3959_B6-DPLC_3959
000216EA 0000                       DPLC_3959_6: 	dc.w DPLC_3959_BD-DPLC_3959
000216EC 0000                       DPLC_3959_8: 	dc.w DPLC_3959_C4-DPLC_3959
000216EE 0000                       DPLC_3959_A: 	dc.w DPLC_3959_CB-DPLC_3959
000216F0 0000                       DPLC_3959_C: 	dc.w DPLC_3959_D2-DPLC_3959
000216F2 0000                       DPLC_3959_E: 	dc.w DPLC_3959_DB-DPLC_3959
000216F4 0000                       DPLC_3959_10: 	dc.w DPLC_3959_E0-DPLC_3959
000216F6 0000                       DPLC_3959_12: 	dc.w DPLC_3959_E5-DPLC_3959
000216F8 0000                       DPLC_3959_14: 	dc.w DPLC_3959_EE-DPLC_3959
000216FA 0000                       DPLC_3959_16: 	dc.w DPLC_3959_F3-DPLC_3959
000216FC 0000                       DPLC_3959_18: 	dc.w DPLC_3959_FA-DPLC_3959
000216FE 0000                       DPLC_3959_1A: 	dc.w DPLC_3959_105-DPLC_3959
00021700 0000                       DPLC_3959_1C: 	dc.w DPLC_3959_112-DPLC_3959
00021702 0000                       DPLC_3959_1E: 	dc.w DPLC_3959_11B-DPLC_3959
00021704 0000                       DPLC_3959_20: 	dc.w DPLC_3959_126-DPLC_3959
00021706 0000                       DPLC_3959_22: 	dc.w DPLC_3959_12F-DPLC_3959
00021708 0000                       DPLC_3959_24: 	dc.w DPLC_3959_13A-DPLC_3959
0002170A 0000                       DPLC_3959_26: 	dc.w DPLC_3959_143-DPLC_3959
0002170C 0000                       DPLC_3959_28: 	dc.w DPLC_3959_148-DPLC_3959
0002170E 0000                       DPLC_3959_2A: 	dc.w DPLC_3959_14D-DPLC_3959
00021710 0000                       DPLC_3959_2C: 	dc.w DPLC_3959_156-DPLC_3959
00021712 0000                       DPLC_3959_2E: 	dc.w DPLC_3959_15B-DPLC_3959
00021714 0000                       DPLC_3959_30: 	dc.w DPLC_3959_162-DPLC_3959
00021716 0000                       DPLC_3959_32: 	dc.w DPLC_3959_16F-DPLC_3959
00021718 0000                       DPLC_3959_34: 	dc.w DPLC_3959_17C-DPLC_3959
0002171A 0000                       DPLC_3959_36: 	dc.w DPLC_3959_185-DPLC_3959
0002171C 0000                       DPLC_3959_38: 	dc.w DPLC_3959_190-DPLC_3959
0002171E 0000                       DPLC_3959_3A: 	dc.w DPLC_3959_199-DPLC_3959
00021720 0000                       DPLC_3959_3C: 	dc.w DPLC_3959_1A4-DPLC_3959
00021722 0000                       DPLC_3959_3E: 	dc.w DPLC_3959_1A9-DPLC_3959
00021724 0000                       DPLC_3959_40: 	dc.w DPLC_3959_1AE-DPLC_3959
00021726 0000                       DPLC_3959_42: 	dc.w DPLC_3959_1B3-DPLC_3959
00021728 0000                       DPLC_3959_44: 	dc.w DPLC_3959_1B8-DPLC_3959
0002172A 0000                       DPLC_3959_46: 	dc.w DPLC_3959_1C1-DPLC_3959
0002172C 0000                       DPLC_3959_48: 	dc.w DPLC_3959_1C8-DPLC_3959
0002172E 0000                       DPLC_3959_4A: 	dc.w DPLC_3959_1D1-DPLC_3959
00021730 0000                       DPLC_3959_4C: 	dc.w DPLC_3959_1D8-DPLC_3959
00021732 0000                       DPLC_3959_4E: 	dc.w DPLC_3959_1DD-DPLC_3959
00021734 0000                       DPLC_3959_50: 	dc.w DPLC_3959_1E2-DPLC_3959
00021736 0000                       DPLC_3959_52: 	dc.w DPLC_3959_1E7-DPLC_3959
00021738 0000                       DPLC_3959_54: 	dc.w DPLC_3959_1EC-DPLC_3959
0002173A 0000                       DPLC_3959_56: 	dc.w DPLC_3959_1F5-DPLC_3959
0002173C 0000                       DPLC_3959_58: 	dc.w DPLC_3959_1FA-DPLC_3959
0002173E 0000                       DPLC_3959_5A: 	dc.w DPLC_3959_203-DPLC_3959
00021740 0000                       DPLC_3959_5C: 	dc.w DPLC_3959_208-DPLC_3959
00021742 0000                       DPLC_3959_5E: 	dc.w DPLC_3959_20B-DPLC_3959
00021744 0000                       DPLC_3959_60: 	dc.w DPLC_3959_20E-DPLC_3959
00021746 0000                       DPLC_3959_62: 	dc.w DPLC_3959_211-DPLC_3959
00021748 0000                       DPLC_3959_64: 	dc.w DPLC_3959_214-DPLC_3959
0002174A 0000                       DPLC_3959_66: 	dc.w DPLC_3959_217-DPLC_3959
0002174C 0000                       DPLC_3959_68: 	dc.w DPLC_3959_21C-DPLC_3959
0002174E 0000                       DPLC_3959_6A: 	dc.w DPLC_3959_21F-DPLC_3959
00021750 0000                       DPLC_3959_6C: 	dc.w DPLC_3959_224-DPLC_3959
00021752 0000                       DPLC_3959_6E: 	dc.w DPLC_3959_227-DPLC_3959
00021754 0000                       DPLC_3959_70: 	dc.w DPLC_3959_22C-DPLC_3959
00021756 0000                       DPLC_3959_72: 	dc.w DPLC_3959_235-DPLC_3959
00021758 0000                       DPLC_3959_74: 	dc.w DPLC_3959_23E-DPLC_3959
0002175A 0000                       DPLC_3959_76: 	dc.w DPLC_3959_245-DPLC_3959
0002175C 0000                       DPLC_3959_78: 	dc.w DPLC_3959_24C-DPLC_3959
0002175E 0000                       DPLC_3959_7A: 	dc.w DPLC_3959_253-DPLC_3959
00021760 0000                       DPLC_3959_7C: 	dc.w DPLC_3959_256-DPLC_3959
00021762 0000                       DPLC_3959_7E: 	dc.w DPLC_3959_25D-DPLC_3959
00021764 0000                       DPLC_3959_80: 	dc.w DPLC_3959_264-DPLC_3959
00021766 0000                       DPLC_3959_82: 	dc.w DPLC_3959_26B-DPLC_3959
00021768 0000                       DPLC_3959_84: 	dc.w DPLC_3959_274-DPLC_3959
0002176A 0000                       DPLC_3959_86: 	dc.w DPLC_3959_27D-DPLC_3959
0002176C 0000                       DPLC_3959_88: 	dc.w DPLC_3959_288-DPLC_3959
0002176E 0000                       DPLC_3959_8A: 	dc.w DPLC_3959_293-DPLC_3959
00021770 0000                       DPLC_3959_8C: 	dc.w DPLC_3959_298-DPLC_3959
00021772 0000                       DPLC_3959_8E: 	dc.w DPLC_3959_29F-DPLC_3959
00021774 0000                       DPLC_3959_90: 	dc.w DPLC_3959_2A4-DPLC_3959
00021776 0000                       DPLC_3959_92: 	dc.w DPLC_3959_2AB-DPLC_3959
00021778 0000                       DPLC_3959_94: 	dc.w DPLC_3959_2B0-DPLC_3959
0002177A 0000                       DPLC_3959_96: 	dc.w DPLC_3959_2B7-DPLC_3959
0002177C 0000                       DPLC_3959_98: 	dc.w DPLC_3959_2BE-DPLC_3959
0002177E 0000                       DPLC_3959_9A: 	dc.w DPLC_3959_2C9-DPLC_3959
00021780 0000                       DPLC_3959_9C: 	dc.w DPLC_3959_2D4-DPLC_3959
00021782 0000                       DPLC_3959_9E: 	dc.w DPLC_3959_2D9-DPLC_3959
00021784 0000                       DPLC_3959_A0: 	dc.w DPLC_3959_2E0-DPLC_3959
00021786 0000                       DPLC_3959_A2: 	dc.w DPLC_3959_2E3-DPLC_3959
00021788 0000                       DPLC_3959_A4: 	dc.w DPLC_3959_2E6-DPLC_3959
0002178A 0000                       DPLC_3959_A6: 	dc.w DPLC_3959_2E9-DPLC_3959
0002178C 0000                       DPLC_3959_A8: 	dc.w DPLC_3959_2F0-DPLC_3959
0002178E 0000                       DPLC_3959_AA: 	dc.w DPLC_3959_2F7-DPLC_3959
00021790 0000                       DPLC_3959_AC: 	dc.w DPLC_3959_2FE-DPLC_3959
00021792 0000                       DPLC_3959_AE: 	dc.w DPLC_3959_305-DPLC_3959
00021794 00                         DPLC_3959_B0: 	dc.b $0
00021795 02                         DPLC_3959_B1: 	dc.b $2
00021796 F000                       	dc.b $F0, $0
00021798 1010                       	dc.b $10, $10
0002179A 03                         DPLC_3959_B6: 	dc.b $3
0002179B 5012                       	dc.b $50, $12
0002179D 5018                       	dc.b $50, $18
0002179F 201E                       	dc.b $20, $1E
000217A1 03                         DPLC_3959_BD: 	dc.b $3
000217A2 5021                       	dc.b $50, $21
000217A4 5018                       	dc.b $50, $18
000217A6 201E                       	dc.b $20, $1E
000217A8 03                         DPLC_3959_C4: 	dc.b $3
000217A9 5021                       	dc.b $50, $21
000217AB 5018                       	dc.b $50, $18
000217AD 2027                       	dc.b $20, $27
000217AF 03                         DPLC_3959_CB: 	dc.b $3
000217B0 802A                       	dc.b $80, $2A
000217B2 2033                       	dc.b $20, $33
000217B4 2036                       	dc.b $20, $36
000217B6 04                         DPLC_3959_D2: 	dc.b $4
000217B7 7039                       	dc.b $70, $39
000217B9 5041                       	dc.b $50, $41
000217BB 5047                       	dc.b $50, $47
000217BD 104D                       	dc.b $10, $4D
000217BF 02                         DPLC_3959_DB: 	dc.b $2
000217C0 7039                       	dc.b $70, $39
000217C2 B04F                       	dc.b $B0, $4F
000217C4 02                         DPLC_3959_E0: 	dc.b $2
000217C5 505B                       	dc.b $50, $5B
000217C7 8061                       	dc.b $80, $61
000217C9 04                         DPLC_3959_E5: 	dc.b $4
000217CA 505B                       	dc.b $50, $5B
000217CC 506A                       	dc.b $50, $6A
000217CE 5070                       	dc.b $50, $70
000217D0 1076                       	dc.b $10, $76
000217D2 02                         DPLC_3959_EE: 	dc.b $2
000217D3 505B                       	dc.b $50, $5B
000217D5 B078                       	dc.b $B0, $78
000217D7 03                         DPLC_3959_F3: 	dc.b $3
000217D8 7039                       	dc.b $70, $39
000217DA 3084                       	dc.b $30, $84
000217DC 5088                       	dc.b $50, $88
000217DE 05                         DPLC_3959_FA: 	dc.b $5
000217DF 508E                       	dc.b $50, $8E
000217E1 5094                       	dc.b $50, $94
000217E3 209A                       	dc.b $20, $9A
000217E5 509D                       	dc.b $50, $9D
000217E7 00A3                       	dc.b $0, $A3
000217E9 06                         DPLC_3959_105: 	dc.b $6
000217EA 508E                       	dc.b $50, $8E
000217EC 10A4                       	dc.b $10, $A4
000217EE 30A6                       	dc.b $30, $A6
000217F0 50AA                       	dc.b $50, $AA
000217F2 30B0                       	dc.b $30, $B0
000217F4 00B4                       	dc.b $0, $B4
000217F6 04                         DPLC_3959_112: 	dc.b $4
000217F7 50B5                       	dc.b $50, $B5
000217F9 10BB                       	dc.b $10, $BB
000217FB 70BD                       	dc.b $70, $BD
000217FD 20C5                       	dc.b $20, $C5
000217FF 05                         DPLC_3959_11B: 	dc.b $5
00021800 50C8                       	dc.b $50, $C8
00021802 30CE                       	dc.b $30, $CE
00021804 70D2                       	dc.b $70, $D2
00021806 20DA                       	dc.b $20, $DA
00021808 10DD                       	dc.b $10, $DD
0002180A 04                         DPLC_3959_126: 	dc.b $4
0002180B 50C8                       	dc.b $50, $C8
0002180D 10DF                       	dc.b $10, $DF
0002180F 70E1                       	dc.b $70, $E1
00021811 20E9                       	dc.b $20, $E9
00021813 05                         DPLC_3959_12F: 	dc.b $5
00021814 508E                       	dc.b $50, $8E
00021816 10A4                       	dc.b $10, $A4
00021818 009A                       	dc.b $0, $9A
0002181A 70EC                       	dc.b $70, $EC
0002181C 20F4                       	dc.b $20, $F4
0002181E 04                         DPLC_3959_13A: 	dc.b $4
0002181F 70F7                       	dc.b $70, $F7
00021821 50FF                       	dc.b $50, $FF
00021823 1105                       	dc.b $11, $5
00021825 5107                       	dc.b $51, $7
00021827 02                         DPLC_3959_143: 	dc.b $2
00021828 70F7                       	dc.b $70, $F7
0002182A B10D                       	dc.b $B1, $D
0002182C 02                         DPLC_3959_148: 	dc.b $2
0002182D 5119                       	dc.b $51, $19
0002182F 811F                       	dc.b $81, $1F
00021831 04                         DPLC_3959_14D: 	dc.b $4
00021832 5119                       	dc.b $51, $19
00021834 5128                       	dc.b $51, $28
00021836 112E                       	dc.b $11, $2E
00021838 5130                       	dc.b $51, $30
0002183A 02                         DPLC_3959_156: 	dc.b $2
0002183B 5119                       	dc.b $51, $19
0002183D B136                       	dc.b $B1, $36
0002183F 03                         DPLC_3959_15B: 	dc.b $3
00021840 70F7                       	dc.b $70, $F7
00021842 010D                       	dc.b $1, $D
00021844 8142                       	dc.b $81, $42
00021846 06                         DPLC_3959_162: 	dc.b $6
00021847 514B                       	dc.b $51, $4B
00021849 1151                       	dc.b $11, $51
0002184B 1153                       	dc.b $11, $53
0002184D 8155                       	dc.b $81, $55
0002184F 015E                       	dc.b $1, $5E
00021851 015F                       	dc.b $1, $5F
00021853 06                         DPLC_3959_16F: 	dc.b $6
00021854 514B                       	dc.b $51, $4B
00021856 2160                       	dc.b $21, $60
00021858 1163                       	dc.b $11, $63
0002185A 1165                       	dc.b $11, $65
0002185C 8167                       	dc.b $81, $67
0002185E 015E                       	dc.b $1, $5E
00021860 04                         DPLC_3959_17C: 	dc.b $4
00021861 5170                       	dc.b $51, $70
00021863 1176                       	dc.b $11, $76
00021865 8178                       	dc.b $81, $78
00021867 1181                       	dc.b $11, $81
00021869 05                         DPLC_3959_185: 	dc.b $5
0002186A 5183                       	dc.b $51, $83
0002186C 2189                       	dc.b $21, $89
0002186E 118C                       	dc.b $11, $8C
00021870 718E                       	dc.b $71, $8E
00021872 2196                       	dc.b $21, $96
00021874 04                         DPLC_3959_190: 	dc.b $4
00021875 5183                       	dc.b $51, $83
00021877 1199                       	dc.b $11, $99
00021879 819B                       	dc.b $81, $9B
0002187B 11A4                       	dc.b $11, $A4
0002187D 05                         DPLC_3959_199: 	dc.b $5
0002187E 514B                       	dc.b $51, $4B
00021880 81A6                       	dc.b $81, $A6
00021882 1165                       	dc.b $11, $65
00021884 11AF                       	dc.b $11, $AF
00021886 015E                       	dc.b $1, $5E
00021888 02                         DPLC_3959_1A4: 	dc.b $2
00021889 51B1                       	dc.b $51, $B1
0002188B B1B7                       	dc.b $B1, $B7
0002188D 02                         DPLC_3959_1A9: 	dc.b $2
0002188E 505B                       	dc.b $50, $5B
00021890 B1C3                       	dc.b $B1, $C3
00021892 02                         DPLC_3959_1AE: 	dc.b $2
00021893 51B1                       	dc.b $51, $B1
00021895 B1CF                       	dc.b $B1, $CF
00021897 02                         DPLC_3959_1B3: 	dc.b $2
00021898 505B                       	dc.b $50, $5B
0002189A B1DB                       	dc.b $B1, $DB
0002189C 04                         DPLC_3959_1B8: 	dc.b $4
0002189D 51E7                       	dc.b $51, $E7
0002189F 11ED                       	dc.b $11, $ED
000218A1 B1EF                       	dc.b $B1, $EF
000218A3 01FB                       	dc.b $1, $FB
000218A5 03                         DPLC_3959_1C1: 	dc.b $3
000218A6 51FC                       	dc.b $51, $FC
000218A8 1202                       	dc.b $12, $2
000218AA B204                       	dc.b $B2, $4
000218AC 04                         DPLC_3959_1C8: 	dc.b $4
000218AD 51E7                       	dc.b $51, $E7
000218AF 1210                       	dc.b $12, $10
000218B1 B212                       	dc.b $B2, $12
000218B3 01FB                       	dc.b $1, $FB
000218B5 03                         DPLC_3959_1D1: 	dc.b $3
000218B6 51FC                       	dc.b $51, $FC
000218B8 1202                       	dc.b $12, $2
000218BA B21E                       	dc.b $B2, $1E
000218BC 02                         DPLC_3959_1D8: 	dc.b $2
000218BD 522A                       	dc.b $52, $2A
000218BF B230                       	dc.b $B2, $30
000218C1 02                         DPLC_3959_1DD: 	dc.b $2
000218C2 5119                       	dc.b $51, $19
000218C4 B23C                       	dc.b $B2, $3C
000218C6 02                         DPLC_3959_1E2: 	dc.b $2
000218C7 522A                       	dc.b $52, $2A
000218C9 B248                       	dc.b $B2, $48
000218CB 02                         DPLC_3959_1E7: 	dc.b $2
000218CC 5119                       	dc.b $51, $19
000218CE B254                       	dc.b $B2, $54
000218D0 04                         DPLC_3959_1EC: 	dc.b $4
000218D1 5260                       	dc.b $52, $60
000218D3 1266                       	dc.b $12, $66
000218D5 B268                       	dc.b $B2, $68
000218D7 0274                       	dc.b $2, $74
000218D9 02                         DPLC_3959_1F5: 	dc.b $2
000218DA 7275                       	dc.b $72, $75
000218DC B27D                       	dc.b $B2, $7D
000218DE 04                         DPLC_3959_1FA: 	dc.b $4
000218DF 5260                       	dc.b $52, $60
000218E1 1289                       	dc.b $12, $89
000218E3 B28B                       	dc.b $B2, $8B
000218E5 0274                       	dc.b $2, $74
000218E7 02                         DPLC_3959_203: 	dc.b $2
000218E8 7275                       	dc.b $72, $75
000218EA B297                       	dc.b $B2, $97
000218EC 01                         DPLC_3959_208: 	dc.b $1
000218ED F2A3                       	dc.b $F2, $A3
000218EF 01                         DPLC_3959_20B: 	dc.b $1
000218F0 F2B3                       	dc.b $F2, $B3
000218F2 01                         DPLC_3959_20E: 	dc.b $1
000218F3 F2C3                       	dc.b $F2, $C3
000218F5 01                         DPLC_3959_211: 	dc.b $1
000218F6 F2D3                       	dc.b $F2, $D3
000218F8 01                         DPLC_3959_214: 	dc.b $1
000218F9 F2E3                       	dc.b $F2, $E3
000218FB 02                         DPLC_3959_217: 	dc.b $2
000218FC B2F3                       	dc.b $B2, $F3
000218FE 22FF                       	dc.b $22, $FF
00021900 01                         DPLC_3959_21C: 	dc.b $1
00021901 F302                       	dc.b $F3, $2
00021903 02                         DPLC_3959_21F: 	dc.b $2
00021904 B312                       	dc.b $B3, $12
00021906 231E                       	dc.b $23, $1E
00021908 01                         DPLC_3959_224: 	dc.b $1
00021909 F321                       	dc.b $F3, $21
0002190B 02                         DPLC_3959_227: 	dc.b $2
0002190C 5331                       	dc.b $53, $31
0002190E B337                       	dc.b $B3, $37
00021910 04                         DPLC_3959_22C: 	dc.b $4
00021911 5343                       	dc.b $53, $43
00021913 7349                       	dc.b $73, $49
00021915 1351                       	dc.b $13, $51
00021917 0353                       	dc.b $3, $53
00021919 04                         DPLC_3959_235: 	dc.b $4
0002191A 1354                       	dc.b $13, $54
0002191C 7356                       	dc.b $73, $56
0002191E 235E                       	dc.b $23, $5E
00021920 0361                       	dc.b $3, $61
00021922 03                         DPLC_3959_23E: 	dc.b $3
00021923 2362                       	dc.b $23, $62
00021925 2365                       	dc.b $23, $65
00021927 F368                       	dc.b $F3, $68
00021929 03                         DPLC_3959_245: 	dc.b $3
0002192A B378                       	dc.b $B3, $78
0002192C 7384                       	dc.b $73, $84
0002192E 0078                       	dc.b $0, $78
00021930 03                         DPLC_3959_24C: 	dc.b $3
00021931 738C                       	dc.b $73, $8C
00021933 3394                       	dc.b $33, $94
00021935 2398                       	dc.b $23, $98
00021937 01                         DPLC_3959_253: 	dc.b $1
00021938 839B                       	dc.b $83, $9B
0002193A 03                         DPLC_3959_256: 	dc.b $3
0002193B 73A4                       	dc.b $73, $A4
0002193D 03AC                       	dc.b $3, $AC
0002193F 33AD                       	dc.b $33, $AD
00021941 03                         DPLC_3959_25D: 	dc.b $3
00021942 73B1                       	dc.b $73, $B1
00021944 33B9                       	dc.b $33, $B9
00021946 23BD                       	dc.b $23, $BD
00021948 03                         DPLC_3959_264: 	dc.b $3
00021949 B3C0                       	dc.b $B3, $C0
0002194B 13CC                       	dc.b $13, $CC
0002194D 03CE                       	dc.b $3, $CE
0002194F 04                         DPLC_3959_26B: 	dc.b $4
00021950 B3CF                       	dc.b $B3, $CF
00021952 33DB                       	dc.b $33, $DB
00021954 03DF                       	dc.b $3, $DF
00021956 03E0                       	dc.b $3, $E0
00021958 04                         DPLC_3959_274: 	dc.b $4
00021959 B3E1                       	dc.b $B3, $E1
0002195B 33ED                       	dc.b $33, $ED
0002195D 03F1                       	dc.b $3, $F1
0002195F 03F2                       	dc.b $3, $F2
00021961 05                         DPLC_3959_27D: 	dc.b $5
00021962 83F3                       	dc.b $83, $F3
00021964 13FC                       	dc.b $13, $FC
00021966 53FE                       	dc.b $53, $FE
00021968 1404                       	dc.b $14, $4
0002196A 0406                       	dc.b $4, $6
0002196C 05                         DPLC_3959_288: 	dc.b $5
0002196D 8407                       	dc.b $84, $7
0002196F 1410                       	dc.b $14, $10
00021971 53FE                       	dc.b $53, $FE
00021973 1404                       	dc.b $14, $4
00021975 0406                       	dc.b $4, $6
00021977 02                         DPLC_3959_293: 	dc.b $2
00021978 8412                       	dc.b $84, $12
0002197A 741B                       	dc.b $74, $1B
0002197C 03                         DPLC_3959_298: 	dc.b $3
0002197D 8423                       	dc.b $84, $23
0002197F 242C                       	dc.b $24, $2C
00021981 142F                       	dc.b $14, $2F
00021983 02                         DPLC_3959_29F: 	dc.b $2
00021984 8431                       	dc.b $84, $31
00021986 743A                       	dc.b $74, $3A
00021988 03                         DPLC_3959_2A4: 	dc.b $3
00021989 8423                       	dc.b $84, $23
0002198B 2442                       	dc.b $24, $42
0002198D 1445                       	dc.b $14, $45
0002198F 02                         DPLC_3959_2AB: 	dc.b $2
00021990 5447                       	dc.b $54, $47
00021992 B44D                       	dc.b $B4, $4D
00021994 03                         DPLC_3959_2B0: 	dc.b $3
00021995 8459                       	dc.b $84, $59
00021997 3462                       	dc.b $34, $62
00021999 0466                       	dc.b $4, $66
0002199B 03                         DPLC_3959_2B7: 	dc.b $3
0002199C 7467                       	dc.b $74, $67
0002199E 146F                       	dc.b $14, $6F
000219A0 B471                       	dc.b $B4, $71
000219A2 05                         DPLC_3959_2BE: 	dc.b $5
000219A3 747D                       	dc.b $74, $7D
000219A5 1485                       	dc.b $14, $85
000219A7 5487                       	dc.b $54, $87
000219A9 348D                       	dc.b $34, $8D
000219AB 0491                       	dc.b $4, $91
000219AD 05                         DPLC_3959_2C9: 	dc.b $5
000219AE 7492                       	dc.b $74, $92
000219B0 1485                       	dc.b $14, $85
000219B2 549A                       	dc.b $54, $9A
000219B4 348D                       	dc.b $34, $8D
000219B6 0491                       	dc.b $4, $91
000219B8 02                         DPLC_3959_2D4: 	dc.b $2
000219B9 24A0                       	dc.b $24, $A0
000219BB F4A3                       	dc.b $F4, $A3
000219BD 03                         DPLC_3959_2D9: 	dc.b $3
000219BE 24B3                       	dc.b $24, $B3
000219C0 B4B6                       	dc.b $B4, $B6
000219C2 24C2                       	dc.b $24, $C2
000219C4 01                         DPLC_3959_2E0: 	dc.b $1
000219C5 B4C5                       	dc.b $B4, $C5
000219C7 01                         DPLC_3959_2E3: 	dc.b $1
000219C8 54D1                       	dc.b $54, $D1
000219CA 01                         DPLC_3959_2E6: 	dc.b $1
000219CB 14D7                       	dc.b $14, $D7
000219CD 03                         DPLC_3959_2E9: 	dc.b $3
000219CE 738C                       	dc.b $73, $8C
000219D0 3394                       	dc.b $33, $94
000219D2 2398                       	dc.b $23, $98
000219D4 03                         DPLC_3959_2F0: 	dc.b $3
000219D5 73A4                       	dc.b $73, $A4
000219D7 03AC                       	dc.b $3, $AC
000219D9 33AD                       	dc.b $33, $AD
000219DB 03                         DPLC_3959_2F7: 	dc.b $3
000219DC B4D9                       	dc.b $B4, $D9
000219DE 14E5                       	dc.b $14, $E5
000219E0 34E7                       	dc.b $34, $E7
000219E2 03                         DPLC_3959_2FE: 	dc.b $3
000219E3 54EB                       	dc.b $54, $EB
000219E5 B4F1                       	dc.b $B4, $F1
000219E7 1074                       	dc.b $10, $74
000219E9 02                         DPLC_3959_305: 	dc.b $2
000219EA F4FD                       	dc.b $F4, $FD
000219EC 250D                       	dc.b $25, $D
000219EE                            	even
000219EE                            	even
000219EE                            
000219EE                            ; ---------------------------------------------------------------------------
000219EE                            ; Uncompressed graphics	- Sonic
000219EE                            ; ---------------------------------------------------------------------------
000219EE                            Art_Sonic:	incbin	artunc\sonic.bin	; Sonic
0002BBEE                            		even
0002BBEE                            ; ---------------------------------------------------------------------------
0002BBEE                            ; Compressed graphics - various
0002BBEE                            ; ---------------------------------------------------------------------------
0002BBEE                            Nem_Smoke:	incbin	artnem\xxxsmoke.bin	; unused smoke
0002BCF2                            		even
0002BCF2                            Nem_SyzSparkle:	incbin	artnem\xxxstars.bin	; unused stars
0002BD2C                            		even
0002BD2C                            Nem_Shield:	incbin	artnem\shield.bin	; shield
0002BEC2                            		even
0002BEC2                            Nem_Stars:	incbin	artnem\invstars.bin	; invincibility stars
0002C00A                            		even
0002C00A                            Nem_LzSonic:	incbin	artnem\xxxlzson.bin	; unused LZ Sonic holding his breath
0002C114                            		even
0002C114                            Nem_UnkFire:	incbin	artnem\xxxfire.bin	; unused fireball
0002C166                            		even
0002C166                            Nem_Warp:	incbin	artnem\xxxflash.bin	; unused entry to special stage flash
0002C3AE                            		even
0002C3AE                            Nem_Goggle:	incbin	artnem\xxxgoggl.bin	; unused goggles
0002C534                            		even
0002C534                            ; ---------------------------------------------------------------------------
0002C534                            ; Sprite mappings - walls of the special stage
0002C534                            ; ---------------------------------------------------------------------------
0002C534                            Map_SSWalls:
0002C534                            	include "_maps\SSwalls.asm"
0002C534                            ; ---------------------------------------------------------------------------
0002C534                            ; Sprite mappings - walls of the special stage
0002C534                            ; ---------------------------------------------------------------------------
0002C534 0000 0000                  		dc.w byte_2C584-Map_SSWalls, byte_2C58A-Map_SSWalls
0002C538 0000 0000                  		dc.w byte_2C590-Map_SSWalls, byte_2C596-Map_SSWalls
0002C53C 0000 0000                  		dc.w byte_2C59C-Map_SSWalls, byte_2C5A2-Map_SSWalls
0002C540 0000 0000                  		dc.w byte_2C5A8-Map_SSWalls, byte_2C5AE-Map_SSWalls
0002C544 0000 0000                  		dc.w byte_2C5B4-Map_SSWalls, byte_2C5BA-Map_SSWalls
0002C548 0000 0000                  		dc.w byte_2C5C0-Map_SSWalls, byte_2C5C6-Map_SSWalls
0002C54C 0000 0000                  		dc.w byte_2C5CC-Map_SSWalls, byte_2C5D2-Map_SSWalls
0002C550 0000 0000                  		dc.w byte_2C5D8-Map_SSWalls, byte_2C5DE-Map_SSWalls
0002C554 01                         byte_2C584:	dc.b 1
0002C555 F40A 0000 F4               		dc.b $F4, $A, 0, 0, $F4
0002C55A 01                         byte_2C58A:	dc.b 1
0002C55B F00F 0009 F0               		dc.b $F0, $F, 0, 9, $F0
0002C560 01                         byte_2C590:	dc.b 1
0002C561 F00F 0019 F0               		dc.b $F0, $F, 0, $19, $F0
0002C566 01                         byte_2C596:	dc.b 1
0002C567 F00F 0029 F0               		dc.b $F0, $F, 0, $29, $F0
0002C56C 01                         byte_2C59C:	dc.b 1
0002C56D F00F 0039 F0               		dc.b $F0, $F, 0, $39, $F0
0002C572 01                         byte_2C5A2:	dc.b 1
0002C573 F00F 0049 F0               		dc.b $F0, $F, 0, $49, $F0
0002C578 01                         byte_2C5A8:	dc.b 1
0002C579 F00F 0059 F0               		dc.b $F0, $F, 0, $59, $F0
0002C57E 01                         byte_2C5AE:	dc.b 1
0002C57F F00F 0069 F0               		dc.b $F0, $F, 0, $69, $F0
0002C584 01                         byte_2C5B4:	dc.b 1
0002C585 F00F 0079 F0               		dc.b $F0, $F, 0, $79, $F0
0002C58A 01                         byte_2C5BA:	dc.b 1
0002C58B F00F 0089 F0               		dc.b $F0, $F, 0, $89, $F0
0002C590 01                         byte_2C5C0:	dc.b 1
0002C591 F00F 0099 F0               		dc.b $F0, $F, 0, $99, $F0
0002C596 01                         byte_2C5C6:	dc.b 1
0002C597 F00F 00A9 F0               		dc.b $F0, $F, 0, $A9, $F0
0002C59C 01                         byte_2C5CC:	dc.b 1
0002C59D F00F 00B9 F0               		dc.b $F0, $F, 0, $B9, $F0
0002C5A2 01                         byte_2C5D2:	dc.b 1
0002C5A3 F00F 00C9 F0               		dc.b $F0, $F, 0, $C9, $F0
0002C5A8 01                         byte_2C5D8:	dc.b 1
0002C5A9 F00F 00D9 F0               		dc.b $F0, $F, 0, $D9, $F0
0002C5AE 01                         byte_2C5DE:	dc.b 1
0002C5AF F00F 00E9 F0               		dc.b $F0, $F, 0, $E9, $F0
0002C5B4                            		even
0002C5B4                            		even
0002C5B4                            ; ---------------------------------------------------------------------------
0002C5B4                            ; Compressed graphics - special stage
0002C5B4                            ; ---------------------------------------------------------------------------
0002C5B4                            Nem_SSWalls:	incbin	artnem\sswalls.bin	; special stage walls
0002CEEC                            		even
0002CEEC                            Eni_SSBg1:	incbin	mapeni\ssbg1.bin	; special stage background (mappings)
0002D020                            		even
0002D020                            Nem_SSBgFish:	incbin	artnem\ssbg1.bin	; special stage birds and fish background
0002DCB0                            		even
0002DCB0                            Eni_SSBg2:	incbin	mapeni\ssbg2.bin	; special stage background (mappings)
0002DFB0                            		even
0002DFB0                            Nem_SSBgCloud:	incbin	artnem\ssbg2.bin	; special stage clouds background
0002E4A4                            		even
0002E4A4                            Nem_SSGOAL:	incbin	artnem\ssgoal.bin	; special stage GOAL block
0002E592                            		even
0002E592                            Nem_SSRBlock:	incbin	artnem\ssr.bin		; special stage R block
0002E662                            		even
0002E662                            Nem_SS1UpBlock:	incbin	artnem\ss1up.bin	; special stage 1UP block
0002E758                            		even
0002E758                            Nem_SSEmStars:	incbin	artnem\ssemstar.bin	; special stage stars from a collected emerald
0002E7B6                            		even
0002E7B6                            Nem_SSRedWhite:	incbin	artnem\ssredwhi.bin	; special stage red/white block
0002E848                            		even
0002E848                            Nem_SSZone1:	incbin	artnem\sszone1.bin	; special stage ZONE1 block
0002E90A                            		even
0002E90A                            Nem_SSZone2:	incbin	artnem\sszone2.bin	; ZONE2 block
0002E9D8                            		even
0002E9D8                            Nem_SSZone3:	incbin	artnem\sszone3.bin	; ZONE3 block
0002EAA4                            		even
0002EAA4                            Nem_SSZone4:	incbin	artnem\sszone4.bin	; ZONE4 block
0002EB6C                            		even
0002EB6C                            Nem_SSZone5:	incbin	artnem\sszone5.bin	; ZONE5 block
0002EC36                            		even
0002EC36                            Nem_SSZone6:	incbin	artnem\sszone6.bin	; ZONE6 block
0002ED06                            		even
0002ED06                            Nem_SSUpDown:	incbin	artnem\ssupdown.bin	; special stage UP/DOWN block
0002EEFA                            		even
0002EEFA                            Nem_SSEmerald:	incbin	artnem\ssemeral.bin	; special stage chaos emeralds
0002F062                            		even
0002F062                            Nem_SSGhost:	incbin	artnem\ssghost.bin	; special stage ghost block
0002F112                            		even
0002F112                            Nem_SSWBlock:	incbin	artnem\ssw.bin		; special stage W block
0002F1EC                            		even
0002F1EC                            Nem_SSGlass:	incbin	artnem\ssglass.bin	; special stage destroyable glass block
0002F270                            		even
0002F270                            Nem_ResultEm:	incbin	artnem\ssresems.bin	; chaos emeralds on special stage results screen
0002F3EE                            		even
0002F3EE                            ; ---------------------------------------------------------------------------
0002F3EE                            ; Compressed graphics - GHZ stuff
0002F3EE                            ; ---------------------------------------------------------------------------
0002F3EE                            Nem_Stalk:	incbin	artnem\ghzstalk.bin	; GHZ flower stalk
0002F438                            		even
0002F438                            Nem_Swing:	incbin	artnem\ghzswing.bin	; GHZ swinging platform
0002F552                            		even
0002F552                            Nem_Bridge:	incbin	artnem\ghzbridg.bin	; GHZ bridge
0002F63E                            		even
0002F63E                            Nem_GhzUnkBlock:incbin	artnem\xxxghzbl.bin	; unused GHZ block
0002F686                            		even
0002F686                            Nem_Ball:	incbin	artnem\ghzball.bin	; GHZ giant ball
0002F824                            		even
0002F824                            Nem_Spikes:	incbin	artnem\spikes.bin	; spikes
0002F8A0                            		even
0002F8A0                            Nem_GhzLog:	incbin	artnem\xxxghzlo.bin	; unused GHZ log
0002FAB4                            		even
0002FAB4                            Nem_SpikePole:	incbin	artnem\ghzlog.bin	; GHZ spiked log
0002FBE0                            		even
0002FBE0                            Nem_PplRock:	incbin	artnem\ghzrock.bin	; GHZ purple rock
0002FD0E                            		even
0002FD0E                            Nem_GhzWall1:	incbin	artnem\ghzwall1.bin	; GHZ destroyable wall
0002FDAC                            		even
0002FDAC                            Nem_GhzWall2:	incbin	artnem\ghzwall2.bin	; GHZ normal wall
0002FE0C                            		even
0002FE0C                            ; ---------------------------------------------------------------------------
0002FE0C                            ; Compressed graphics - LZ stuff
0002FE0C                            ; ---------------------------------------------------------------------------
0002FE0C                            Nem_Water:	incbin	artnem\lzwater.bin	; LZ water surface
0002FF30                            		even
0002FF30                            Nem_Splash:	incbin	artnem\lzsplash.bin	; LZ waterfalls and splashes
00030724                            		even
00030724                            Nem_LzSpikeBall:incbin	artnem\lzspball.bin	; LZ spiked ball on chain
000308A4                            		even
000308A4                            Nem_FlapDoor:	incbin	artnem\lzflapdo.bin	; LZ flapping door
00030A0E                            		even
00030A0E                            Nem_Bubbles:	incbin	artnem\lzbubble.bin	; LZ bubbles and countdown numbers
00031064                            		even
00031064                            Nem_LzBlock3:	incbin	artnem\lzblock3.bin	; LZ 32x16 block
0003111A                            		even
0003111A                            Nem_LzDoor1:	incbin	artnem\lzvdoor.bin	; LZ vertical door
000311BC                            		even
000311BC                            Nem_Harpoon:	incbin	artnem\lzharpoo.bin	; LZ harpoon
00031318                            		even
00031318                            Nem_LzPole:	incbin	artnem\lzpole.bin	; LZ pole that breaks
0003137C                            		even
0003137C                            Nem_LzDoor2:	incbin	artnem\lzhdoor.bin	; LZ large horizontal door
000314CE                            		even
000314CE                            Nem_LzWheel:	incbin	artnem\lzwheel.bin	; LZ wheel from corner of conveyor belt
000319B0                            		even
000319B0                            Nem_Gargoyle:	incbin	artnem\lzgargoy.bin	; LZ gargoyle head and spitting fire
00031B20                            		even
00031B20                            Nem_LzBlock2:	incbin	artnem\lzblock2.bin	; LZ blocks
00031DD8                            		even
00031DD8                            Nem_LzPlatfm:	incbin	artnem\lzptform.bin	; LZ rising platforms
00031F10                            		even
00031F10                            Nem_Cork:	incbin	artnem\lzcork.bin	; LZ cork block
0003203A                            		even
0003203A                            Nem_LzBlock1:	incbin	artnem\lzblock1.bin	; LZ 32x32 block
0003214A                            		even
0003214A                            ; ---------------------------------------------------------------------------
0003214A                            ; Compressed graphics - MZ stuff
0003214A                            ; ---------------------------------------------------------------------------
0003214A                            Nem_MzMetal:	incbin	artnem\mzmetal.bin	; MZ metal blocks
000323D8                            		even
000323D8                            Nem_MzSwitch:	incbin	artnem\mzswitch.bin	; MZ switch
00032496                            		even
00032496                            Nem_MzGlass:	incbin	artnem\mzglassy.bin	; MZ green glassy block
0003254E                            		even
0003254E                            Nem_GhzGrass:	incbin	artnem\xxxgrass.bin	; unused grass (GHZ or MZ?)
000325A2                            		even
000325A2                            Nem_MzFire:	incbin	artnem\mzfire.bin	; MZ fireballs
00032880                            		even
00032880                            Nem_Lava:	incbin	artnem\mzlava.bin	; MZ lava
00033196                            		even
00033196                            Nem_MzBlock:	incbin	artnem\mzblock.bin	; MZ green pushable block
000332FA                            		even
000332FA                            Nem_MzUnkBlock:	incbin	artnem\xxxmzblo.bin	; MZ unused background block
00033382                            		even
00033382                            ; ---------------------------------------------------------------------------
00033382                            ; Compressed graphics - SLZ stuff
00033382                            ; ---------------------------------------------------------------------------
00033382                            Nem_Seesaw:	incbin	artnem\slzseesa.bin	; SLZ seesaw
000335BE                            		even
000335BE                            Nem_SlzSpike:	incbin	artnem\slzspike.bin	; SLZ spikeball that sits on a seesaw
00033704                            		even
00033704                            Nem_Fan:	incbin	artnem\slzfan.bin	; SLZ fan
00033948                            		even
00033948                            Nem_SlzWall:	incbin	artnem\slzwall.bin	; SLZ smashable wall
000339AA                            		even
000339AA                            Nem_Pylon:	incbin	artnem\slzpylon.bin	; SLZ foreground pylon
00033A8C                            		even
00033A8C                            Nem_SlzSwing:	incbin	artnem\slzswing.bin	; SLZ swinging platform
00033C6E                            		even
00033C6E                            Nem_SlzBlock:	incbin	artnem\slzblock.bin	; SLZ 32x32 block
00033D7A                            		even
00033D7A                            Nem_SlzCannon:	incbin	artnem\slzcanno.bin	; SLZ fireball launcher cannon
00033E1E                            		even
00033E1E                            ; ---------------------------------------------------------------------------
00033E1E                            ; Compressed graphics - SYZ stuff
00033E1E                            ; ---------------------------------------------------------------------------
00033E1E                            Nem_Bumper:	incbin	artnem\syzbumpe.bin	; SYZ bumper
00033F88                            		even
00033F88                            Nem_SyzSpike2:	incbin	artnem\syzsspik.bin	; SYZ small spikeball
00033FEA                            		even
00033FEA                            Nem_LzSwitch:	incbin	artnem\switch.bin	; LZ/SYZ/SBZ switch
000340CC                            		even
000340CC                            Nem_SyzSpike1:	incbin	artnem\syzlspik.bin	; SYZ/SBZ large spikeball
0003435A                            		even
0003435A                            ; ---------------------------------------------------------------------------
0003435A                            ; Compressed graphics - SBZ stuff
0003435A                            ; ---------------------------------------------------------------------------
0003435A                            Nem_SbzWheel1:	incbin	artnem\sbzwhee1.bin	; SBZ spot on rotating wheel that Sonic runs around
000343AE                            		even
000343AE                            Nem_SbzWheel2:	incbin	artnem\sbzwhee2.bin	; SBZ wheel that grabs Sonic
0003464A                            		even
0003464A                            Nem_Cutter:	incbin	artnem\sbzcutte.bin	; SBZ pizza cutter
0003484E                            		even
0003484E                            Nem_Stomper:	incbin	artnem\sbzstomp.bin	; SBZ stomper
000349EC                            		even
000349EC                            Nem_SpinPform:	incbin	artnem\sbzpform.bin	; SBZ spinning platform
00034D1C                            		even
00034D1C                            Nem_TrapDoor:	incbin	artnem\sbztrapd.bin	; SBZ trapdoor
00034EFA                            		even
00034EFA                            Nem_SbzFloor:	incbin	artnem\sbzfloor.bin	; SBZ collapsing floor
00034F52                            		even
00034F52                            Nem_Electric:	incbin	artnem\sbzshock.bin	; SBZ electric shock orb
000350D2                            		even
000350D2                            Nem_SbzBlock:	incbin	artnem\sbzvanis.bin	; SBZ vanishing block
000351D0                            		even
000351D0                            Nem_FlamePipe:	incbin	artnem\sbzflame.bin	; SBZ flaming pipe
0003535C                            		even
0003535C                            Nem_SbzDoor1:	incbin	artnem\sbzvdoor.bin	; SBZ small vertical door
000353AC                            		even
000353AC                            Nem_SlideFloor:	incbin	artnem\sbzslide.bin	; SBZ floor that slides away
00035404                            		even
00035404                            Nem_SbzDoor2:	incbin	artnem\sbzhdoor.bin	; SBZ large horizontal door
00035500                            		even
00035500                            Nem_Girder:	incbin	artnem\sbzgirde.bin	; SBZ crushing girder
00035616                            		even
00035616                            ; ---------------------------------------------------------------------------
00035616                            ; Compressed graphics - enemies
00035616                            ; ---------------------------------------------------------------------------
00035616                            Nem_BallHog:	incbin	artnem\ballhog.bin	; ball hog
000359D6                            		even
000359D6                            Nem_Crabmeat:	incbin	artnem\crabmeat.bin	; crabmeat
00035EC4                            		even
00035EC4                            Nem_Buzz:	incbin	artnem\buzzbomb.bin	; buzz bomber
0003626A                            		even
0003626A                            Nem_UnkExplode:	incbin	artnem\xxxexplo.bin	; unused explosion
00036452                            		even
00036452                            Nem_Burrobot:	incbin	artnem\burrobot.bin	; burrobot
00036B3C                            		even
00036B3C                            Nem_Chopper:	incbin	artnem\chopper.bin	; chopper
00036DA4                            		even
00036DA4                            Nem_Jaws:	incbin	artnem\jaws.bin		; jaws
0003702E                            		even
0003702E                            Nem_Roller:	incbin	artnem\roller.bin	; roller
00037552                            		even
00037552                            Nem_Motobug:	incbin	artnem\motobug.bin	; moto bug
000377DC                            		even
000377DC                            Nem_Newtron:	incbin	artnem\newtron.bin	; newtron
00037DFA                            		even
00037DFA                            Nem_Yadrin:	incbin	artnem\yadrin.bin	; yadrin
000381E2                            		even
000381E2                            Nem_Basaran:	incbin	artnem\basaran.bin	; basaran
000384DE                            		even
000384DE                            Nem_Splats:	incbin	artnem\splats.bin	; splats
00038726                            		even
00038726                            Nem_Bomb:	incbin	artnem\bomb.bin		; bomb
000389BE                            		even
000389BE                            Nem_Orbinaut:	incbin	artnem\orbinaut.bin	; orbinaut
00038B9C                            		even
00038B9C                            Nem_Cater:	incbin	artnem\caterkil.bin	; caterkiller
00038D2A                            		even
00038D2A                            ; ---------------------------------------------------------------------------
00038D2A                            ; Compressed graphics - various
00038D2A                            ; ---------------------------------------------------------------------------
00038D2A                            Nem_TitleCard:	incbin	artnem\ttlcards.bin	; title cards
00039338                            		even
00039338                            Nem_Hud:	incbin	artnem\hud.bin		; HUD (rings, time, score)
0003942E                            		even
0003942E                            Nem_Lives:	incbin	artnem\lifeicon.bin	; life counter icon
00039534                            		even
00039534                            Nem_Ring:	incbin	artnem\rings.bin	; rings
00039628                            		even
00039628                            Nem_Monitors:	incbin	artnem\monitors.bin	; monitors
00039A88                            		even
00039A88                            Nem_Explode:	incbin	artnem\explosio.bin	; explosion
0003A0EE                            		even
0003A0EE                            Nem_Points:	incbin	artnem\points.bin	; points from destroyed enemy or object
0003A19E                            		even
0003A19E                            Nem_GameOver:	incbin	artnem\gameover.bin	; game over / time over
0003A330                            		even
0003A330                            Nem_HSpring:	incbin	artnem\springh.bin	; horizontal spring
0003A432                            		even
0003A432                            Nem_VSpring:	incbin	artnem\springv.bin	; vertical spring
0003A50E                            		even
0003A50E                            Nem_SignPost:	incbin	artnem\signpost.bin	; end of level signpost
0003A98A                            		even
0003A98A                            Nem_Lamp:	incbin	artnem\lamppost.bin	; lamppost
0003AA4A                            		even
0003AA4A                            Nem_BigFlash:	incbin	artnem\rngflash.bin	; flash from giant ring
0003ABBE                            		even
0003ABBE                            Nem_Bonus:	incbin	artnem\bonus.bin	; hidden bonuses at end of a level
0003AEC0                            		even
0003AEC0                            ; ---------------------------------------------------------------------------
0003AEC0                            ; Compressed graphics - continue screen
0003AEC0                            ; ---------------------------------------------------------------------------
0003AEC0                            Nem_ContSonic:	incbin	artnem\cntsonic.bin	; Sonic on continue screen
0003B170                            		even
0003B170                            Nem_MiniSonic:	incbin	artnem\cntother.bin	; mini Sonic and text on continue screen
0003B3AA                            		even
0003B3AA                            ; ---------------------------------------------------------------------------
0003B3AA                            ; Compressed graphics - animals
0003B3AA                            ; ---------------------------------------------------------------------------
0003B3AA                            Nem_Rabbit:	incbin	artnem\rabbit.bin	; rabbit
0003B502                            		even
0003B502                            Nem_Chicken:	incbin	artnem\chicken.bin	; chicken
0003B65E                            		even
0003B65E                            Nem_BlackBird:	incbin	artnem\blackbrd.bin	; blackbird
0003B7DA                            		even
0003B7DA                            Nem_Seal:	incbin	artnem\seal.bin		; seal
0003B8F6                            		even
0003B8F6                            Nem_Pig:	incbin	artnem\pig.bin		; pig
0003BA2C                            		even
0003BA2C                            Nem_Flicky:	incbin	artnem\flicky.bin	; flicky
0003BB66                            		even
0003BB66                            Nem_Squirrel:	incbin	artnem\squirrel.bin	; squirrel
0003BCC2                            		even
0003BCC2                            ; ---------------------------------------------------------------------------
0003BCC2                            ; Compressed graphics - primary patterns and block mappings
0003BCC2                            ; ---------------------------------------------------------------------------
0003BCC2                            Blk16_GHZ:	incbin	map16\ghz.bin
0003C662                            		even
0003C662                            Nem_GHZ_1st:	incbin	artnem\8x8ghz1.bin	; GHZ primary patterns
0003DCC2                            		even
0003DCC2                            Nem_GHZ_2nd:	incbin	artnem\8x8ghz2.bin	; GHZ secondary patterns
0003F06A                            		even
0003F06A                            Blk256_GHZ:	incbin	map256\ghz.bin
0004117A                            		even
0004117A                            Blk16_LZ:	incbin	map16\lz.bin
000414A4                            		even
000414A4                            Nem_LZ:		incbin	artnem\8x8lz.bin	; LZ primary patterns
00042FEC                            		even
00042FEC                            Blk256_LZ:	incbin	map256\lz.bin
000457DC                            		even
000457DC                            Blk16_MZ:	incbin	map16\mz.bin
00045FE6                            		even
00045FE6                            Nem_MZ:		incbin	artnem\8x8mz.bin	; MZ primary patterns
0004882A                            		even
0004882A                            Blk256_MZ:	incbin	map256\mz.bin
00049FEA                            		even
00049FEA                            Blk16_SLZ:	incbin	map16\slz.bin
0004A7CE                            		even
0004A7CE                            Nem_SLZ:	incbin	artnem\8x8slz.bin	; SLZ primary patterns
0004E322                            		even
0004E322                            Blk256_SLZ:	incbin	map256\slz.bin
00050752                            		even
00050752                            Blk16_SYZ:	incbin	map16\syz.bin
000510C0                            		even
000510C0                            Nem_SYZ:	incbin	artnem\8x8syz.bin	; SYZ primary patterns
000547EC                            		even
000547EC                            Blk256_SYZ:	incbin	map256\syz.bin
00056B9C                            		even
00056B9C                            Blk16_SBZ:	incbin	map16\sbz.bin
00057A36                            		even
00057A36                            Nem_SBZ:	incbin	artnem\8x8sbz.bin	; SBZ primary patterns
0005A1E2                            		even
0005A1E2                            Blk256_SBZ:	incbin	map256\sbz.bin
0005CC32                            		even
0005CC32                            ; ---------------------------------------------------------------------------
0005CC32                            ; Compressed graphics - bosses and ending sequence
0005CC32                            ; ---------------------------------------------------------------------------
0005CC32                            Nem_Eggman:	incbin	artnem\bossmain.bin	; boss main patterns
0005D496                            		even
0005D496                            Nem_Weapons:	incbin	artnem\bossxtra.bin	; boss add-ons and weapons
0005D780                            		even
0005D780                            Nem_Prison:	incbin	artnem\prison.bin	; prison capsule
0005E004                            		even
0005E004                            Nem_Sbz2Eggman:	incbin	artnem\sbz2boss.bin	; Eggman in SBZ2 and FZ
0005E830                            		even
0005E830                            Nem_FzBoss:	incbin	artnem\fzboss.bin	; FZ boss
0005EF98                            		even
0005EF98                            Nem_FzEggman:	incbin	artnem\fzboss2.bin	; Eggman after the FZ boss
0005F518                            		even
0005F518                            Nem_Exhaust:	incbin	artnem\bossflam.bin	; boss exhaust flame
0005F638                            		even
0005F638                            Nem_EndEm:	incbin	artnem\endemera.bin	; ending sequence chaos emeralds
0005F836                            		even
0005F836                            Nem_EndSonic:	incbin	artnem\endsonic.bin	; ending sequence Sonic
00060A14                            		even
00060A14                            Nem_TryAgain:	incbin	artnem\tryagain.bin	; ending "try again" screen
00061358                            		even
00061358                            Nem_EndEggman:	incbin	artnem\xxxend.bin	; unused boss sequence on ending
0006172E                            		even
0006172E                            Kos_EndFlowers:	incbin	artkos\flowers.bin	; ending sequence animated flowers
00061CBE                            		even
00061CBE                            Nem_EndFlower:	incbin	artnem\endflowe.bin	; ending sequence flowers
00061F46                            		even
00061F46                            Nem_CreditText:	incbin	artnem\credits.bin	; credits alphabet
00062544                            		even
00062544                            Nem_EndStH:	incbin	artnem\endtext.bin	; ending sequence "Sonic the Hedgehog" text
000627CC                            		even
000627CC                            		incbin	misc\padding2.bin
000628D0                            		even
000628D0                            ; ---------------------------------------------------------------------------
000628D0                            ; Collision data
000628D0                            ; ---------------------------------------------------------------------------
000628D0                            AngleMap:	incbin	collide\anglemap.bin	; floor angle map
000629D0                            		even
000629D0                            CollArray1:	incbin	collide\carray_n.bin	; normal collision array
000639D0                            		even
000639D0                            CollArray2:	incbin	collide\carray_r.bin	; rotated collision array
000649D0                            		even
000649D0                            Col_GHZ:	incbin	collide\ghz.bin		; GHZ index
00064B6A                            		even
00064B6A                            Col_LZ:		incbin	collide\lz.bin		; LZ index
00064C32                            		even
00064C32                            Col_MZ:		incbin	collide\mz.bin		; MZ index
00064DC2                            		even
00064DC2                            Col_SLZ:	incbin	collide\slz.bin		; SLZ index
00064FB6                            		even
00064FB6                            Col_SYZ:	incbin	collide\syz.bin		; SYZ index
000651AA                            		even
000651AA                            Col_SBZ:	incbin	collide\sbz.bin		; SBZ index
00065402                            		even
00065402                            ; ---------------------------------------------------------------------------
00065402                            ; Special layouts
00065402                            ; ---------------------------------------------------------------------------
00065402                            SS_1:		incbin	sslayout\1.bin
0006567C                            		even
0006567C                            SS_2:		incbin	sslayout\2.bin
00065A8E                            		even
00065A8E                            SS_3:		incbin	sslayout\3.bin
00065DEA                            		even
00065DEA                            SS_4:		incbin	sslayout\4.bin
000662C4                            		even
000662C4                            SS_5:		incbin	sslayout\5.bin
00066796                            		even
00066796                            SS_6:		incbin	sslayout\6.bin
00066AA6                            		even
00066AA6                            ; ---------------------------------------------------------------------------
00066AA6                            ; Animated uncompressed graphics
00066AA6                            ; ---------------------------------------------------------------------------
00066AA6                            Art_GhzWater:	incbin	artunc\ghzwater.bin	; GHZ waterfall
00066CA6                            		even
00066CA6                            Art_GhzFlower1:	incbin	artunc\ghzflowl.bin	; GHZ large flower
000670A6                            		even
000670A6                            Art_GhzFlower2:	incbin	artunc\ghzflows.bin	; GHZ small flower
00067526                            		even
00067526                            Art_MzLava1:	incbin	artunc\mzlava1.bin	; MZ lava surface
00067826                            		even
00067826                            Art_MzLava2:	incbin	artunc\mzlava2.bin	; MZ lava
00067E26                            		even
00067E26                            Art_MzTorch:	incbin	artunc\mztorch.bin	; MZ torch in background
00068126                            		even
00068126                            Art_SbzSmoke:	incbin	artunc\sbzsmoke.bin	; SBZ smoke in background
00068BA6                            		even
00068BA6                            
00068BA6                            ; ---------------------------------------------------------------------------
00068BA6                            ; Level	layout index
00068BA6                            ; ---------------------------------------------------------------------------
00068BA6 0000 0000 0000             Level_Index:	dc.w Level_GHZ1-Level_Index, Level_GHZbg-Level_Index, byte_68D70-Level_Index
00068BAC 0000 0000 0000             		dc.w Level_GHZ2-Level_Index, Level_GHZbg-Level_Index, byte_68E3C-Level_Index
00068BB2 0000 0000 0000             		dc.w Level_GHZ3-Level_Index, Level_GHZbg-Level_Index, byte_68F84-Level_Index
00068BB8 0000 0000 0000             		dc.w byte_68F88-Level_Index, byte_68F88-Level_Index, byte_68F88-Level_Index
00068BBE 0000 0000 0000             		dc.w Level_LZ1-Level_Index, Level_LZbg-Level_Index, byte_69190-Level_Index
00068BC4 0000 0000 0000             		dc.w Level_LZ2-Level_Index, Level_LZbg-Level_Index, byte_6922E-Level_Index
00068BCA 0000 0000 0000             		dc.w Level_LZ3-Level_Index, Level_LZbg-Level_Index, byte_6934C-Level_Index
00068BD0 0000 0000 0000             		dc.w Level_SBZ3-Level_Index, Level_LZbg-Level_Index, byte_6940A-Level_Index
00068BD6 0000 0000 0000             		dc.w Level_MZ1-Level_Index, Level_MZ1bg-Level_Index, Level_MZ1-Level_Index
00068BDC 0000 0000 0000             		dc.w Level_MZ2-Level_Index, Level_MZ2bg-Level_Index, byte_6965C-Level_Index
00068BE2 0000 0000 0000             		dc.w Level_MZ3-Level_Index, Level_MZ3bg-Level_Index, byte_697E6-Level_Index
00068BE8 0000 0000 0000             		dc.w byte_697EA-Level_Index, byte_697EA-Level_Index, byte_697EA-Level_Index
00068BEE 0000 0000 0000             		dc.w Level_SLZ1-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068BF4 0000 0000 0000             		dc.w Level_SLZ2-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068BFA 0000 0000 0000             		dc.w Level_SLZ3-Level_Index, Level_SLZbg-Level_Index, byte_69B84-Level_Index
00068C00 0000 0000 0000             		dc.w byte_69B84-Level_Index, byte_69B84-Level_Index, byte_69B84-Level_Index
00068C06 0000 0000 0000             		dc.w Level_SYZ1-Level_Index, Level_SYZbg-Level_Index, byte_69C7E-Level_Index
00068C0C 0000 0000 0000             		dc.w Level_SYZ2-Level_Index, Level_SYZbg-Level_Index, byte_69D86-Level_Index
00068C12 0000 0000 0000             		dc.w Level_SYZ3-Level_Index, Level_SYZbg-Level_Index, byte_69EE4-Level_Index
00068C18 0000 0000 0000             		dc.w byte_69EE8-Level_Index, byte_69EE8-Level_Index, byte_69EE8-Level_Index
00068C1E 0000 0000 0000             		dc.w Level_SBZ1-Level_Index, Level_SBZ1bg-Level_Index, Level_SBZ1bg-Level_Index
00068C24 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, Level_SBZ2bg-Level_Index
00068C2A 0000 0000 0000             		dc.w Level_SBZ2-Level_Index, Level_SBZ2bg-Level_Index, byte_6A2F8-Level_Index
00068C30 0000 0000 0000             		dc.w byte_6A2FC-Level_Index, byte_6A2FC-Level_Index, byte_6A2FC-Level_Index
00068C36 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00068C3C 0000 0000 0000             		dc.w Level_End-Level_Index, Level_GHZbg-Level_Index, byte_6A320-Level_Index
00068C42 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00068C48 0000 0000 0000             		dc.w byte_6A320-Level_Index, byte_6A320-Level_Index, byte_6A320-Level_Index
00068C4E                            
00068C4E                            Level_GHZ1:	incbin	levels\ghz1.bin
00068D40                            		even
00068D40 0000 0000                  byte_68D70:	dc.b 0,	0, 0, 0
00068D44                            Level_GHZ2:	incbin	levels\ghz2.bin
00068E0C                            		even
00068E0C 0000 0000                  byte_68E3C:	dc.b 0,	0, 0, 0
00068E10                            Level_GHZ3:	incbin	levels\ghz3.bin
00068F32                            		even
00068F32                            Level_GHZbg:	incbin	levels\ghzbg.bin
00068F54                            		even
00068F54 0000 0000                  byte_68F84:	dc.b 0,	0, 0, 0
00068F58 0000 0000                  byte_68F88:	dc.b 0,	0, 0, 0
00068F5C                            
00068F5C                            Level_LZ1:	incbin	levels\lz1.bin
0006905E                            		even
0006905E                            Level_LZbg:	incbin	levels\lzbg.bin
00069160                            		even
00069160 0000 0000                  byte_69190:	dc.b 0,	0, 0, 0
00069164                            Level_LZ2:	incbin	levels\lz2.bin
000691FE                            		even
000691FE 0000 0000                  byte_6922E:	dc.b 0,	0, 0, 0
00069202                            Level_LZ3:	incbin	levels\lz3.bin
0006931C                            		even
0006931C 0000 0000                  byte_6934C:	dc.b 0,	0, 0, 0
00069320                            Level_SBZ3:	incbin	levels\sbz3.bin
000693DA                            		even
000693DA 0000 0000                  byte_6940A:	dc.b 0,	0, 0, 0
000693DE                            
000693DE                            Level_MZ1:	incbin	levels\mz1.bin
0006947C                            		even
0006947C                            Level_MZ1bg:	incbin	levels\mz1bg.bin
000694F6                            		even
000694F6                            Level_MZ2:	incbin	levels\mz2.bin
0006959A                            		even
0006959A                            Level_MZ2bg:	incbin	levels\mz2bg.bin
0006962C                            		even
0006962C 0000 0000                  byte_6965C:	dc.b 0,	0, 0, 0
00069630                            Level_MZ3:	incbin	levels\mz3.bin
00069712                            		even
00069712                            Level_MZ3bg:	incbin	levels\mz3bg.bin
000697B6                            		even
000697B6 0000 0000                  byte_697E6:	dc.b 0,	0, 0, 0
000697BA 0000 0000                  byte_697EA:	dc.b 0,	0, 0, 0
000697BE                            
000697BE                            Level_SLZ1:	incbin	levels\slz1.bin
000698D0                            		even
000698D0                            Level_SLZbg:	incbin	levels\slzbg.bin
0006994A                            		even
0006994A                            Level_SLZ2:	incbin	levels\slz2.bin
00069A3A                            		even
00069A3A                            Level_SLZ3:	incbin	levels\slz3.bin
00069B54                            		even
00069B54 0000 0000                  byte_69B84:	dc.b 0,	0, 0, 0
00069B58                            
00069B58                            Level_SYZ1:	incbin	levels\syz1.bin
00069C14                            		even
00069C14                            Level_SYZbg:	incbin	levels\syzbg.bin
00069C4E                            		even
00069C4E 0000 0000                  byte_69C7E:	dc.b 0,	0, 0, 0
00069C52                            Level_SYZ2:	incbin	levels\syz2.bin
00069D56                            		even
00069D56 0000 0000                  byte_69D86:	dc.b 0,	0, 0, 0
00069D5A                            Level_SYZ3:	incbin	levels\syz3.bin
00069EB4                            		even
00069EB4 0000 0000                  byte_69EE4:	dc.b 0,	0, 0, 0
00069EB8 0000 0000                  byte_69EE8:	dc.b 0,	0, 0, 0
00069EBC                            
00069EBC                            Level_SBZ1:	incbin	levels\sbz1.bin
00069FDE                            		even
00069FDE                            Level_SBZ1bg:	incbin	levels\sbz1bg.bin
0006A01C                            		even
0006A01C                            Level_SBZ2:	incbin	levels\sbz2.bin
0006A15E                            		even
0006A15E                            Level_SBZ2bg:	incbin	levels\sbz2bg.bin
0006A2C8                            		even
0006A2C8 0000 0000                  byte_6A2F8:	dc.b 0,	0, 0, 0
0006A2CC 0000 0000                  byte_6A2FC:	dc.b 0,	0, 0, 0
0006A2D0                            Level_End:	incbin	levels\ending.bin
0006A2F0                            		even
0006A2F0 0000 0000                  byte_6A320:	dc.b 0,	0, 0, 0
0006A2F4                            
0006A2F4                            ; ---------------------------------------------------------------------------
0006A2F4                            ; Animated uncompressed giant ring graphics
0006A2F4                            ; ---------------------------------------------------------------------------
0006A2F4                            Art_BigRing:	incbin	artunc\bigring.bin
0006AF34                            		even
0006AF34                            
0006AF34                            		incbin	misc\padding3.bin
0006AFD0                            		even
0006AFD0                            
0006AFD0                            ; ---------------------------------------------------------------------------
0006AFD0                            ; Sprite locations index
0006AFD0                            ; ---------------------------------------------------------------------------
0006AFD0 0000 0000                  ObjPos_Index:	dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFD4 0000 0000                  		dc.w ObjPos_GHZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFD8 0000 0000                  		dc.w ObjPos_GHZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFDC 0000 0000                  		dc.w ObjPos_GHZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFE0 0000 0000                  		dc.w ObjPos_LZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFE4 0000 0000                  		dc.w ObjPos_LZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFE8 0000 0000                  		dc.w ObjPos_LZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFEC 0000 0000                  		dc.w ObjPos_SBZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFF0 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFF4 0000 0000                  		dc.w ObjPos_MZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFF8 0000 0000                  		dc.w ObjPos_MZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006AFFC 0000 0000                  		dc.w ObjPos_MZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B000 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B004 0000 0000                  		dc.w ObjPos_SLZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B008 0000 0000                  		dc.w ObjPos_SLZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B00C 0000 0000                  		dc.w ObjPos_SLZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B010 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B014 0000 0000                  		dc.w ObjPos_SYZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B018 0000 0000                  		dc.w ObjPos_SYZ3-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B01C 0000 0000                  		dc.w ObjPos_SYZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B020 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B024 0000 0000                  		dc.w ObjPos_SBZ2-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B028 0000 0000                  		dc.w ObjPos_FZ-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B02C 0000 0000                  		dc.w ObjPos_SBZ1-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B030 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B034 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B038 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B03C 0000 0000                  		dc.w ObjPos_End-ObjPos_Index, ObjPos_Null-ObjPos_Index
0006B040 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006B044 0000 0000                  		dc.w ObjPos_LZ2pf1-ObjPos_Index, ObjPos_LZ2pf2-ObjPos_Index
0006B048 0000 0000                  		dc.w ObjPos_LZ3pf1-ObjPos_Index, ObjPos_LZ3pf2-ObjPos_Index
0006B04C 0000 0000                  		dc.w ObjPos_LZ1pf1-ObjPos_Index, ObjPos_LZ1pf2-ObjPos_Index
0006B050 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006B054 0000 0000                  		dc.w ObjPos_SBZ1pf3-ObjPos_Index, ObjPos_SBZ1pf4-ObjPos_Index
0006B058 0000 0000                  		dc.w ObjPos_SBZ1pf5-ObjPos_Index, ObjPos_SBZ1pf6-ObjPos_Index
0006B05C 0000 0000                  		dc.w ObjPos_SBZ1pf1-ObjPos_Index, ObjPos_SBZ1pf2-ObjPos_Index
0006B060 FFFF 0000 0000             		dc.b $FF, $FF, 0, 0, 0,	0
0006B066                            ObjPos_GHZ1:	incbin	objpos\ghz1.bin
0006B570                            		even
0006B570                            ObjPos_GHZ2:	incbin	objpos\ghz2.bin
0006BB2E                            		even
0006BB2E                            ObjPos_GHZ3:	incbin	objpos\ghz3.bin
0006C1E8                            		even
0006C1E8                            ObjPos_LZ1:	incbin	objpos\lz1.bin
0006C656                            		even
0006C656                            ObjPos_LZ2:	incbin	objpos\lz2.bin
0006C998                            		even
0006C998                            ObjPos_LZ3:	incbin	objpos\lz3.bin
0006CF7A                            		even
0006CF7A                            ObjPos_SBZ3:	incbin	objpos\sbz3.bin
0006D412                            		even
0006D412                            ObjPos_LZ1pf1:	incbin	objpos\lz1pf1.bin
0006D444                            		even
0006D444                            ObjPos_LZ1pf2:	incbin	objpos\lz1pf2.bin
0006D476                            		even
0006D476                            ObjPos_LZ2pf1:	incbin	objpos\lz2pf1.bin
0006D4A8                            		even
0006D4A8                            ObjPos_LZ2pf2:	incbin	objpos\lz2pf2.bin
0006D4DA                            		even
0006D4DA                            ObjPos_LZ3pf1:	incbin	objpos\lz3pf1.bin
0006D524                            		even
0006D524                            ObjPos_LZ3pf2:	incbin	objpos\lz3pf2.bin
0006D562                            		even
0006D562                            ObjPos_MZ1:	incbin	objpos\mz1.bin
0006D8CE                            		even
0006D8CE                            ObjPos_MZ2:	incbin	objpos\mz2.bin
0006DD78                            		even
0006DD78                            ObjPos_MZ3:	incbin	objpos\mz3.bin
0006E2EE                            		even
0006E2EE                            ObjPos_SLZ1:	incbin	objpos\slz1.bin
0006E82E                            		even
0006E82E                            ObjPos_SLZ2:	incbin	objpos\slz2.bin
0006EC96                            		even
0006EC96                            ObjPos_SLZ3:	incbin	objpos\slz3.bin
0006F278                            		even
0006F278                            ObjPos_SYZ1:	incbin	objpos\syz1.bin
0006F704                            		even
0006F704                            ObjPos_SYZ2:	incbin	objpos\syz2.bin
0006FC6E                            		even
0006FC6E                            ObjPos_SYZ3:	incbin	objpos\syz3.bin
00070274                            		even
00070274                            ObjPos_SBZ1:	incbin	objpos\sbz1.bin
000709B2                            		even
000709B2                            ObjPos_SBZ2:	incbin	objpos\sbz2.bin
00071090                            		even
00071090                            ObjPos_FZ:	incbin	objpos\fz.bin
000710A2                            		even
000710A2                            ObjPos_SBZ1pf1:	incbin	objpos\sbz1pf1.bin
000710D4                            		even
000710D4                            ObjPos_SBZ1pf2:	incbin	objpos\sbz1pf2.bin
00071106                            		even
00071106                            ObjPos_SBZ1pf3:	incbin	objpos\sbz1pf3.bin
00071138                            		even
00071138                            ObjPos_SBZ1pf4:	incbin	objpos\sbz1pf4.bin
0007116A                            		even
0007116A                            ObjPos_SBZ1pf5:	incbin	objpos\sbz1pf5.bin
0007119C                            		even
0007119C                            ObjPos_SBZ1pf6:	incbin	objpos\sbz1pf6.bin
000711D4                            		even
000711D4                            ObjPos_End:	incbin	objpos\ending.bin
00071330                            		even
00071330 FFFF 0000 0000             ObjPos_Null:	dc.b $FF, $FF, 0, 0, 0,	0
00071336                            ; ---------------------------------------------------------------------------
00071336                            		incbin	misc\padding4.bin
00071960                            		even
00071960                            
00071960 0000 0000                  Go_SoundTypes:	dc.l SoundTypes		; XREF: Sound_Play
00071964 0000 0000                  Go_SoundD0:	dc.l SoundD0Index	; XREF: Sound_D0toDF
00071968 0000 0000                  Go_MusicIndex:	dc.l MusicIndex		; XREF: Sound_81to9F
0007196C 0000 0000                  Go_SoundIndex:	dc.l SoundIndex		; XREF: Sound_A0toCF
00071970 0000 0000                  off_719A0:	dc.l byte_71A94		; XREF: Sound_81to9F
00071974 0000 0000                  Go_PSGIndex:	dc.l PSG_Index		; XREF: sub_72926
00071978                            ; ---------------------------------------------------------------------------
00071978                            ; PSG instruments used in music
00071978                            ; ---------------------------------------------------------------------------
00071978 0000 0000 0000 0000 0000+  PSG_Index:	dc.l PSG1, PSG2, PSG3
00071984 0000 0000 0000 0000 0000+  		dc.l PSG4, PSG5, PSG6
00071990 0000 0000 0000 0000 0000+  		dc.l PSG7, PSG8, PSG9
0007199C                            PSG1:		incbin	sound\psg1.bin
000719B3                            PSG2:		incbin	sound\psg2.bin
000719BA                            PSG3:		incbin	sound\psg3.bin
000719CB                            PSG4:		incbin	sound\psg4.bin
000719D6                            PSG6:		incbin	sound\psg6.bin
000719E5                            PSG5:		incbin	sound\psg5.bin
00071A0F                            PSG7:		incbin	sound\psg7.bin
00071A2B                            PSG8:		incbin	sound\psg8.bin
00071A53                            PSG9:		incbin	sound\psg9.bin
00071A64                            
00071A64 0772 7326 1508 FF05        byte_71A94:	dc.b 7,	$72, $73, $26, $15, 8, $FF, 5
00071A6C                            ; ---------------------------------------------------------------------------
00071A6C                            ; Music	Pointers
00071A6C                            ; ---------------------------------------------------------------------------
00071A6C 0000 0000 0000 0000        MusicIndex:	dc.l Music81, Music82
00071A74 0000 0000 0000 0000        		dc.l Music83, Music84
00071A7C 0000 0000 0000 0000        		dc.l Music85, Music86
00071A84 0000 0000 0000 0000        		dc.l Music87, Music88
00071A8C 0000 0000 0000 0000        		dc.l Music89, Music8A
00071A94 0000 0000 0000 0000        		dc.l Music8B, Music8C
00071A9C 0000 0000 0000 0000        		dc.l Music8D, Music8E
00071AA4 0000 0000 0000 0000        		dc.l Music8F, Music90
00071AAC 0000 0000 0000 0000        		dc.l Music91, Music92
00071AB4 0000 0000                  		dc.l Music93
00071AB8                            ; ---------------------------------------------------------------------------
00071AB8                            ; Type of sound	being played ($90 = music; $70 = normal	sound effect)
00071AB8                            ; ---------------------------------------------------------------------------
00071AB8 9090 9090 9090 9090 9090+  SoundTypes:	dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$90
00071AC8 9090 9090 9090 9090 9090+  		dc.b $90, $90, $90, $90, $90, $90, $90,	$90, $90, $90, $90, $90, $90, $90, $90,	$80
00071AD8 7070 7070 7070 7070 7068+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $68, $70, $70, $70, $60, $70,	$70
00071AE8 6070 6070 7070 7070 7070+  		dc.b $60, $70, $60, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $7F,	$60
00071AF8 7070 7070 7070 7070 7070+  		dc.b $70, $70, $70, $70, $70, $70, $70,	$70, $70, $70, $70, $70, $70, $70, $70,	$80
00071B08 8080 8080 8080 8080 8080+  		dc.b $80, $80, $80, $80, $80, $80, $80,	$80, $80, $80, $80, $80, $80, $80, $80,	$90
00071B18 9090 9090                  		dc.b $90, $90, $90, $90
00071B1C                            
00071B1C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071B1C                            
00071B1C                            
00071B1C                            sub_71B4C:				; XREF: loc_B10; PalToCRAM
00071B1C 33FC 0100 00A1 1100        		move.w	#$100,($A11100).l ; stop the Z80
00071B24 4E71                       		nop	
00071B26 4E71                       		nop	
00071B28 4E71                       		nop	
00071B2A                            
00071B2A                            loc_71B5A:
00071B2A 0839 0000 00A1 1100        		btst	#0,($A11100).l
00071B32 66F6                       		bne.s	loc_71B5A
00071B34                            
00071B34 0839 0007 00A0 1FFD        		btst	#7,($A01FFD).l
00071B3C 6700                       		beq.s	loc_71B82
00071B3E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071B46 4E71                       		nop	
00071B48 4E71                       		nop	
00071B4A 4E71                       		nop	
00071B4C 4E71                       		nop	
00071B4E 4E71                       		nop	
00071B50 60CA                       		bra.s	sub_71B4C
00071B52                            ; ===========================================================================
00071B52                            
00071B52                            loc_71B82:
00071B52 4DF9 00FF F000             		lea	($FFF000).l,a6
00071B58 422E 000E                  		clr.b	$E(a6)
00071B5C 4A2E 0003                  		tst.b	3(a6)		; is music paused?
00071B60 6600 0000                  		bne.w	loc_71E50	; if yes, branch
00071B64 532E 0001                  		subq.b	#1,1(a6)
00071B68 6600                       		bne.s	loc_71B9E
00071B6A 4EBA 0000                  		jsr	sub_7260C(pc)
00071B6E                            
00071B6E                            loc_71B9E:
00071B6E 102E 0004                  		move.b	4(a6),d0
00071B72 6700                       		beq.s	loc_71BA8
00071B74 4EBA 0000                  		jsr	sub_72504(pc)
00071B78                            
00071B78                            loc_71BA8:
00071B78 4A2E 0024                  		tst.b	$24(a6)
00071B7C 6700                       		beq.s	loc_71BB2
00071B7E 4EBA 0000                  		jsr	sub_7267C(pc)
00071B82                            
00071B82                            loc_71BB2:
00071B82 4A6E 000A                  		tst.w	$A(a6)		; is music or sound being played?
00071B86 6700                       		beq.s	loc_71BBC	; if not, branch
00071B88 4EBA 0000                  		jsr	Sound_Play(pc)
00071B8C                            
00071B8C                            loc_71BBC:
00071B8C 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00071B92 6700                       		beq.s	loc_71BC8
00071B94 4EBA 0000                  		jsr	Sound_ChkValue(pc)
00071B98                            
00071B98                            loc_71BC8:
00071B98 4BEE 0040                  		lea	$40(a6),a5
00071B9C 4A15                       		tst.b	(a5)
00071B9E 6A00                       		bpl.s	loc_71BD4
00071BA0 4EBA 0000                  		jsr	sub_71C4E(pc)
00071BA4                            
00071BA4                            loc_71BD4:
00071BA4 422E 0008                  		clr.b	8(a6)
00071BA8 7E05                       		moveq	#5,d7
00071BAA                            
00071BAA                            loc_71BDA:
00071BAA DAFC 0030                  		adda.w	#$30,a5
00071BAE 4A15                       		tst.b	(a5)
00071BB0 6A00                       		bpl.s	loc_71BE6
00071BB2 4EBA 0000                  		jsr	sub_71CCA(pc)
00071BB6                            
00071BB6                            loc_71BE6:
00071BB6 51CF FFF2                  		dbf	d7,loc_71BDA
00071BBA                            
00071BBA 7E02                       		moveq	#2,d7
00071BBC                            
00071BBC                            loc_71BEC:
00071BBC DAFC 0030                  		adda.w	#$30,a5
00071BC0 4A15                       		tst.b	(a5)
00071BC2 6A00                       		bpl.s	loc_71BF8
00071BC4 4EBA 0000                  		jsr	sub_72850(pc)
00071BC8                            
00071BC8                            loc_71BF8:
00071BC8 51CF FFF2                  		dbf	d7,loc_71BEC
00071BCC                            
00071BCC 1D7C 0080 000E             		move.b	#$80,$E(a6)
00071BD2 7E02                       		moveq	#2,d7
00071BD4                            
00071BD4                            loc_71C04:
00071BD4 DAFC 0030                  		adda.w	#$30,a5
00071BD8 4A15                       		tst.b	(a5)
00071BDA 6A00                       		bpl.s	loc_71C10
00071BDC 4EBA 0000                  		jsr	sub_71CCA(pc)
00071BE0                            
00071BE0                            loc_71C10:
00071BE0 51CF FFF2                  		dbf	d7,loc_71C04
00071BE4                            
00071BE4 7E02                       		moveq	#2,d7
00071BE6                            
00071BE6                            loc_71C16:
00071BE6 DAFC 0030                  		adda.w	#$30,a5
00071BEA 4A15                       		tst.b	(a5)
00071BEC 6A00                       		bpl.s	loc_71C22
00071BEE 4EBA 0000                  		jsr	sub_72850(pc)
00071BF2                            
00071BF2                            loc_71C22:
00071BF2 51CF FFF2                  		dbf	d7,loc_71C16
00071BF6 1D7C 0040 000E             		move.b	#$40,$E(a6)
00071BFC DAFC 0030                  		adda.w	#$30,a5
00071C00 4A15                       		tst.b	(a5)
00071C02 6A00                       		bpl.s	loc_71C38
00071C04 4EBA 0000                  		jsr	sub_71CCA(pc)
00071C08                            
00071C08                            loc_71C38:
00071C08 DAFC 0030                  		adda.w	#$30,a5
00071C0C 4A15                       		tst.b	(a5)
00071C0E 6A00                       		bpl.s	loc_71C44
00071C10 4EBA 0000                  		jsr	sub_72850(pc)
00071C14                            
00071C14                            loc_71C44:
00071C14 33FC 0000 00A1 1100        		move.w	#0,($A11100).l	; start	the Z80
00071C1C 4E75                       		rts	
00071C1E                            ; End of function sub_71B4C
00071C1E                            
00071C1E                            
00071C1E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C1E                            
00071C1E                            
00071C1E                            sub_71C4E:				; XREF: sub_71B4C
00071C1E 532D 000E                  		subq.b	#1,$E(a5)
00071C22 6600                       		bne.s	locret_71CAA
00071C24 1D7C 0080 0008             		move.b	#$80,8(a6)
00071C2A 286D 0004                  		movea.l	4(a5),a4
00071C2E                            
00071C2E                            loc_71C5E:
00071C2E 7A00                       		moveq	#0,d5
00071C30 1A1C                       		move.b	(a4)+,d5
00071C32 0C05 00E0                  		cmpi.b	#-$20,d5
00071C36 6500                       		bcs.s	loc_71C6E
00071C38 4EBA 0000                  		jsr	sub_72A5A(pc)
00071C3C 60F0                       		bra.s	loc_71C5E
00071C3E                            ; ===========================================================================
00071C3E                            
00071C3E                            loc_71C6E:
00071C3E 4A05                       		tst.b	d5
00071C40 6A00                       		bpl.s	loc_71C84
00071C42 1B45 0010                  		move.b	d5,$10(a5)
00071C46 1A1C                       		move.b	(a4)+,d5
00071C48 6A00                       		bpl.s	loc_71C84
00071C4A 534C                       		subq.w	#1,a4
00071C4C 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00071C52 6000                       		bra.s	loc_71C88
00071C54                            ; ===========================================================================
00071C54                            
00071C54                            loc_71C84:
00071C54 4EBA 0000                  		jsr	sub_71D40(pc)
00071C58                            
00071C58                            loc_71C88:
00071C58 2B4C 0004                  		move.l	a4,4(a5)
00071C5C 0815 0002                  		btst	#2,(a5)
00071C60 6600                       		bne.s	locret_71CAA
00071C62 7000                       		moveq	#0,d0
00071C64 102D 0010                  		move.b	$10(a5),d0
00071C68 0C00 0080                  		cmpi.b	#$80,d0
00071C6C 6700                       		beq.s	locret_71CAA
00071C6E 0800 0003                  		btst	#3,d0
00071C72 6600                       		bne.s	loc_71CAC
00071C74 13C0 00A0 1FFF             		move.b	d0,($A01FFF).l
00071C7A                            
00071C7A                            locret_71CAA:
00071C7A 4E75                       		rts	
00071C7C                            ; ===========================================================================
00071C7C                            
00071C7C                            loc_71CAC:
00071C7C 0400 0088                  		subi.b	#$88,d0
00071C80 103B 0000                  		move.b	byte_71CC4(pc,d0.w),d0
00071C84 13C0 00A0 00EA             		move.b	d0,($A000EA).l
00071C8A 13FC 0083 00A0 1FFF        		move.b	#$83,($A01FFF).l
00071C92 4E75                       		rts	
00071C94                            ; End of function sub_71C4E
00071C94                            
00071C94                            ; ===========================================================================
00071C94 1215 1C1D FFFF             byte_71CC4:	dc.b $12, $15, $1C, $1D, $FF, $FF
00071C9A                            
00071C9A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071C9A                            
00071C9A                            
00071C9A                            sub_71CCA:				; XREF: sub_71B4C
00071C9A 532D 000E                  		subq.b	#1,$E(a5)
00071C9E 6600                       		bne.s	loc_71CE0
00071CA0 0895 0004                  		bclr	#4,(a5)
00071CA4 4EBA 0000                  		jsr	sub_71CEC(pc)
00071CA8 4EBA 0000                  		jsr	sub_71E18(pc)
00071CAC 6000 0000                  		bra.w	loc_726E2
00071CB0                            ; ===========================================================================
00071CB0                            
00071CB0                            loc_71CE0:
00071CB0 4EBA 0000                  		jsr	sub_71D9E(pc)
00071CB4 4EBA 0000                  		jsr	sub_71DC6(pc)
00071CB8 6000 0000                  		bra.w	loc_71E24
00071CBC                            ; End of function sub_71CCA
00071CBC                            
00071CBC                            
00071CBC                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071CBC                            
00071CBC                            
00071CBC                            sub_71CEC:				; XREF: sub_71CCA
00071CBC 286D 0004                  		movea.l	4(a5),a4
00071CC0 0895 0001                  		bclr	#1,(a5)
00071CC4                            
00071CC4                            loc_71CF4:
00071CC4 7A00                       		moveq	#0,d5
00071CC6 1A1C                       		move.b	(a4)+,d5
00071CC8 0C05 00E0                  		cmpi.b	#-$20,d5
00071CCC 6500                       		bcs.s	loc_71D04
00071CCE 4EBA 0000                  		jsr	sub_72A5A(pc)
00071CD2 60F0                       		bra.s	loc_71CF4
00071CD4                            ; ===========================================================================
00071CD4                            
00071CD4                            loc_71D04:
00071CD4 4EBA 0000                  		jsr	sub_726FE(pc)
00071CD8 4A05                       		tst.b	d5
00071CDA 6A00                       		bpl.s	loc_71D1A
00071CDC 4EBA 0000                  		jsr	sub_71D22(pc)
00071CE0 1A1C                       		move.b	(a4)+,d5
00071CE2 6A00                       		bpl.s	loc_71D1A
00071CE4 534C                       		subq.w	#1,a4
00071CE6 6000 0000                  		bra.w	sub_71D60
00071CEA                            ; ===========================================================================
00071CEA                            
00071CEA                            loc_71D1A:
00071CEA 4EBA 0000                  		jsr	sub_71D40(pc)
00071CEE 6000 0000                  		bra.w	sub_71D60
00071CF2                            ; End of function sub_71CEC
00071CF2                            
00071CF2                            
00071CF2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071CF2                            
00071CF2                            
00071CF2                            sub_71D22:				; XREF: sub_71CEC
00071CF2 0405 0080                  		subi.b	#$80,d5
00071CF6 6700                       		beq.s	loc_71D58
00071CF8 DA2D 0008                  		add.b	8(a5),d5
00071CFC 0245 007F                  		andi.w	#$7F,d5
00071D00 E34D                       		lsl.w	#1,d5
00071D02 41FA 0000                  		lea	word_72790(pc),a0
00071D06 3C30 5000                  		move.w	(a0,d5.w),d6
00071D0A 3B46 0010                  		move.w	d6,$10(a5)
00071D0E 4E75                       		rts	
00071D10                            ; End of function sub_71D22
00071D10                            
00071D10                            
00071D10                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D10                            
00071D10                            
00071D10                            sub_71D40:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00071D10 1005                       		move.b	d5,d0
00071D12 122D 0002                  		move.b	2(a5),d1
00071D16                            
00071D16                            loc_71D46:
00071D16 5301                       		subq.b	#1,d1
00071D18 6700                       		beq.s	loc_71D4E
00071D1A D005                       		add.b	d5,d0
00071D1C 60F8                       		bra.s	loc_71D46
00071D1E                            ; ===========================================================================
00071D1E                            
00071D1E                            loc_71D4E:
00071D1E 1B40 000F                  		move.b	d0,$F(a5)
00071D22 1B40 000E                  		move.b	d0,$E(a5)
00071D26 4E75                       		rts	
00071D28                            ; End of function sub_71D40
00071D28                            
00071D28                            ; ===========================================================================
00071D28                            
00071D28                            loc_71D58:				; XREF: sub_71D22
00071D28 08D5 0001                  		bset	#1,(a5)
00071D2C 426D 0010                  		clr.w	$10(a5)
00071D30                            
00071D30                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D30                            
00071D30                            
00071D30                            sub_71D60:				; XREF: sub_71CEC; sub_72878; sub_728AC
00071D30 2B4C 0004                  		move.l	a4,4(a5)
00071D34 1B6D 000F 000E             		move.b	$F(a5),$E(a5)
00071D3A 0815 0004                  		btst	#4,(a5)
00071D3E 6600                       		bne.s	locret_71D9C
00071D40 1B6D 0013 0012             		move.b	$13(a5),$12(a5)
00071D46 422D 000C                  		clr.b	$C(a5)
00071D4A 0815 0003                  		btst	#3,(a5)
00071D4E 6700                       		beq.s	locret_71D9C
00071D50 206D 0014                  		movea.l	$14(a5),a0
00071D54 1B58 0018                  		move.b	(a0)+,$18(a5)
00071D58 1B58 0019                  		move.b	(a0)+,$19(a5)
00071D5C 1B58 001A                  		move.b	(a0)+,$1A(a5)
00071D60 1018                       		move.b	(a0)+,d0
00071D62 E208                       		lsr.b	#1,d0
00071D64 1B40 001B                  		move.b	d0,$1B(a5)
00071D68 426D 001C                  		clr.w	$1C(a5)
00071D6C                            
00071D6C                            locret_71D9C:
00071D6C 4E75                       		rts	
00071D6E                            ; End of function sub_71D60
00071D6E                            
00071D6E                            
00071D6E                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D6E                            
00071D6E                            
00071D6E                            sub_71D9E:				; XREF: sub_71CCA; sub_72850
00071D6E 4A2D 0012                  		tst.b	$12(a5)
00071D72 6700                       		beq.s	locret_71DC4
00071D74 532D 0012                  		subq.b	#1,$12(a5)
00071D78 6600                       		bne.s	locret_71DC4
00071D7A 08D5 0001                  		bset	#1,(a5)
00071D7E 4A2D 0001                  		tst.b	1(a5)
00071D82 6B00 0000                  		bmi.w	loc_71DBE
00071D86 4EBA 0000                  		jsr	sub_726FE(pc)
00071D8A 584F                       		addq.w	#4,sp
00071D8C 4E75                       		rts	
00071D8E                            ; ===========================================================================
00071D8E                            
00071D8E                            loc_71DBE:
00071D8E 4EBA 0000                  		jsr	sub_729A0(pc)
00071D92 584F                       		addq.w	#4,sp
00071D94                            
00071D94                            locret_71DC4:
00071D94 4E75                       		rts	
00071D96                            ; End of function sub_71D9E
00071D96                            
00071D96                            
00071D96                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071D96                            
00071D96                            
00071D96                            sub_71DC6:				; XREF: sub_71CCA; sub_72850
00071D96 584F                       		addq.w	#4,sp
00071D98 0815 0003                  		btst	#3,(a5)
00071D9C 6700                       		beq.s	locret_71E16
00071D9E 4A2D 0018                  		tst.b	$18(a5)
00071DA2 6700                       		beq.s	loc_71DDA
00071DA4 532D 0018                  		subq.b	#1,$18(a5)
00071DA8 4E75                       		rts	
00071DAA                            ; ===========================================================================
00071DAA                            
00071DAA                            loc_71DDA:
00071DAA 532D 0019                  		subq.b	#1,$19(a5)
00071DAE 6700                       		beq.s	loc_71DE2
00071DB0 4E75                       		rts	
00071DB2                            ; ===========================================================================
00071DB2                            
00071DB2                            loc_71DE2:
00071DB2 206D 0014                  		movea.l	$14(a5),a0
00071DB6 1B68 0001 0019             		move.b	1(a0),$19(a5)
00071DBC 4A2D 001B                  		tst.b	$1B(a5)
00071DC0 6600                       		bne.s	loc_71DFE
00071DC2 1B68 0003 001B             		move.b	3(a0),$1B(a5)
00071DC8 442D 001A                  		neg.b	$1A(a5)
00071DCC 4E75                       		rts	
00071DCE                            ; ===========================================================================
00071DCE                            
00071DCE                            loc_71DFE:
00071DCE 532D 001B                  		subq.b	#1,$1B(a5)
00071DD2 1C2D 001A                  		move.b	$1A(a5),d6
00071DD6 4886                       		ext.w	d6
00071DD8 DC6D 001C                  		add.w	$1C(a5),d6
00071DDC 3B46 001C                  		move.w	d6,$1C(a5)
00071DE0 DC6D 0010                  		add.w	$10(a5),d6
00071DE4 594F                       		subq.w	#4,sp
00071DE6                            
00071DE6                            locret_71E16:
00071DE6 4E75                       		rts	
00071DE8                            ; End of function sub_71DC6
00071DE8                            
00071DE8                            
00071DE8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071DE8                            
00071DE8                            
00071DE8                            sub_71E18:				; XREF: sub_71CCA
00071DE8 0815 0001                  		btst	#1,(a5)
00071DEC 6600                       		bne.s	locret_71E48
00071DEE 3C2D 0010                  		move.w	$10(a5),d6
00071DF2 6700                       		beq.s	loc_71E4A
00071DF4                            
00071DF4                            loc_71E24:				; XREF: sub_71CCA
00071DF4 102D 001E                  		move.b	$1E(a5),d0
00071DF8 4880                       		ext.w	d0
00071DFA DC40                       		add.w	d0,d6
00071DFC 0815 0002                  		btst	#2,(a5)
00071E00 6600                       		bne.s	locret_71E48
00071E02 3206                       		move.w	d6,d1
00071E04 E049                       		lsr.w	#8,d1
00071E06 103C 00A4                  		move.b	#-$5C,d0
00071E0A 4EBA 0000                  		jsr	sub_72722(pc)
00071E0E 1206                       		move.b	d6,d1
00071E10 103C 00A0                  		move.b	#-$60,d0
00071E14 4EBA 0000                  		jsr	sub_72722(pc)
00071E18                            
00071E18                            locret_71E48:
00071E18 4E75                       		rts	
00071E1A                            ; ===========================================================================
00071E1A                            
00071E1A                            loc_71E4A:
00071E1A 08D5 0001                  		bset	#1,(a5)
00071E1E 4E75                       		rts	
00071E20                            ; End of function sub_71E18
00071E20                            
00071E20                            ; ===========================================================================
00071E20                            
00071E20                            loc_71E50:				; XREF: sub_71B4C
00071E20 6B00                       		bmi.s	loc_71E94
00071E22 0C2E 0002 0003             		cmpi.b	#2,3(a6)
00071E28 6700 0000                  		beq.w	loc_71EFE
00071E2C 1D7C 0002 0003             		move.b	#2,3(a6)
00071E32 7602                       		moveq	#2,d3
00071E34 103C 00B4                  		move.b	#-$4C,d0
00071E38 7200                       		moveq	#0,d1
00071E3A                            
00071E3A                            loc_71E6A:
00071E3A 4EBA 0000                  		jsr	sub_7272E(pc)
00071E3E 4EBA 0000                  		jsr	sub_72764(pc)
00071E42 5200                       		addq.b	#1,d0
00071E44 51CB FFF4                  		dbf	d3,loc_71E6A
00071E48                            
00071E48 7602                       		moveq	#2,d3
00071E4A 7028                       		moveq	#$28,d0
00071E4C                            
00071E4C                            loc_71E7C:
00071E4C 1203                       		move.b	d3,d1
00071E4E 4EBA 0000                  		jsr	sub_7272E(pc)
00071E52 5801                       		addq.b	#4,d1
00071E54 4EBA 0000                  		jsr	sub_7272E(pc)
00071E58 51CB FFF2                  		dbf	d3,loc_71E7C
00071E5C                            
00071E5C 4EBA 0000                  		jsr	sub_729B6(pc)
00071E60 6000 FDB2                  		bra.w	loc_71C44
00071E64                            ; ===========================================================================
00071E64                            
00071E64                            loc_71E94:				; XREF: loc_71E50
00071E64 422E 0003                  		clr.b	3(a6)
00071E68 7630                       		moveq	#$30,d3
00071E6A 4BEE 0040                  		lea	$40(a6),a5
00071E6E 7806                       		moveq	#6,d4
00071E70                            
00071E70                            loc_71EA0:
00071E70 0815 0007                  		btst	#7,(a5)
00071E74 6700                       		beq.s	loc_71EB8
00071E76 0815 0002                  		btst	#2,(a5)
00071E7A 6600                       		bne.s	loc_71EB8
00071E7C 103C 00B4                  		move.b	#-$4C,d0
00071E80 122D 000A                  		move.b	$A(a5),d1
00071E84 4EBA 0000                  		jsr	sub_72722(pc)
00071E88                            
00071E88                            loc_71EB8:
00071E88 DAC3                       		adda.w	d3,a5
00071E8A 51CC FFE4                  		dbf	d4,loc_71EA0
00071E8E                            
00071E8E 4BEE 0220                  		lea	$220(a6),a5
00071E92 7802                       		moveq	#2,d4
00071E94                            
00071E94                            loc_71EC4:
00071E94 0815 0007                  		btst	#7,(a5)
00071E98 6700                       		beq.s	loc_71EDC
00071E9A 0815 0002                  		btst	#2,(a5)
00071E9E 6600                       		bne.s	loc_71EDC
00071EA0 103C 00B4                  		move.b	#-$4C,d0
00071EA4 122D 000A                  		move.b	$A(a5),d1
00071EA8 4EBA 0000                  		jsr	sub_72722(pc)
00071EAC                            
00071EAC                            loc_71EDC:
00071EAC DAC3                       		adda.w	d3,a5
00071EAE 51CC FFE4                  		dbf	d4,loc_71EC4
00071EB2                            
00071EB2 4BEE 0340                  		lea	$340(a6),a5
00071EB6 0815 0007                  		btst	#7,(a5)
00071EBA 6700                       		beq.s	loc_71EFE
00071EBC 0815 0002                  		btst	#2,(a5)
00071EC0 6600                       		bne.s	loc_71EFE
00071EC2 103C 00B4                  		move.b	#-$4C,d0
00071EC6 122D 000A                  		move.b	$A(a5),d1
00071ECA 4EBA 0000                  		jsr	sub_72722(pc)
00071ECE                            
00071ECE                            loc_71EFE:
00071ECE 6000 FD44                  		bra.w	loc_71C44
00071ED2                            
00071ED2                            ; ---------------------------------------------------------------------------
00071ED2                            ; Subroutine to	play a sound or	music track
00071ED2                            ; ---------------------------------------------------------------------------
00071ED2                            
00071ED2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071ED2                            
00071ED2                            
00071ED2                            Sound_Play:				; XREF: sub_71B4C
00071ED2 2079 0007 1960             		movea.l	(Go_SoundTypes).l,a0
00071ED8 43EE 000A                  		lea	$A(a6),a1	; load music track number
00071EDC 1616                       		move.b	0(a6),d3
00071EDE 7802                       		moveq	#2,d4
00071EE0                            
00071EE0                            loc_71F12:
00071EE0 1011                       		move.b	(a1),d0		; move track number to d0
00071EE2 1200                       		move.b	d0,d1
00071EE4 4219                       		clr.b	(a1)+
00071EE6 0400 0081                  		subi.b	#$81,d0
00071EEA 6500                       		bcs.s	loc_71F3E
00071EEC 0C2E 0080 0009             		cmpi.b	#$80,9(a6)
00071EF2 6700                       		beq.s	loc_71F2C
00071EF4 1D41 000A                  		move.b	d1,$A(a6)
00071EF8 6000                       		bra.s	loc_71F3E
00071EFA                            ; ===========================================================================
00071EFA                            
00071EFA                            loc_71F2C:
00071EFA 0240 007F                  		andi.w	#$7F,d0
00071EFE 1430 0000                  		move.b	(a0,d0.w),d2
00071F02 B403                       		cmp.b	d3,d2
00071F04 6500                       		bcs.s	loc_71F3E
00071F06 1602                       		move.b	d2,d3
00071F08 1D41 0009                  		move.b	d1,9(a6)	; set music flag
00071F0C                            
00071F0C                            loc_71F3E:
00071F0C 51CC FFD2                  		dbf	d4,loc_71F12
00071F10                            
00071F10 4A03                       		tst.b	d3
00071F12 6B00                       		bmi.s	locret_71F4A
00071F14 1C83                       		move.b	d3,0(a6)
00071F16                            
00071F16                            locret_71F4A:
00071F16 4E75                       		rts	
00071F18                            ; End of function Sound_Play
00071F18                            
00071F18                            
00071F18                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00071F18                            
00071F18                            
00071F18                            Sound_ChkValue:				; XREF: sub_71B4C
00071F18 7E00                       		moveq	#0,d7
00071F1A 1E2E 0009                  		move.b	9(a6),d7
00071F1E 6700 0000                  		beq.w	Sound_E4
00071F22 6A00                       		bpl.s	locret_71F8C
00071F24 1D7C 0080 0009             		move.b	#$80,9(a6)	; reset	music flag
00071F2A 0C07 009F                  		cmpi.b	#$9F,d7
00071F2E 6300 0000                  		bls.w	Sound_81to9F	; music	$81-$9F
00071F32 0C07 00A0                  		cmpi.b	#$A0,d7
00071F36 6500 0000                  		bcs.w	locret_71F8C
00071F3A 0C07 00CF                  		cmpi.b	#$CF,d7
00071F3E 6300 0000                  		bls.w	Sound_A0toCF	; sound	$A0-$CF
00071F42 0C07 00D0                  		cmpi.b	#$D0,d7
00071F46 6500 0000                  		bcs.w	locret_71F8C
00071F4A 0C07 00E0                  		cmpi.b	#$E0,d7
00071F4E 6500 0000                  		bcs.w	Sound_D0toDF	; sound	$D0-$DF
00071F52 0C07 00E4                  		cmpi.b	#$E4,d7
00071F56 6300                       		bls.s	Sound_E0toE4	; sound	$E0-$E4
00071F58                            
00071F58                            locret_71F8C:
00071F58 4E75                       		rts	
00071F5A                            ; ===========================================================================
00071F5A                            
00071F5A                            Sound_E0toE4:				; XREF: Sound_ChkValue
00071F5A 0407 00E0                  		subi.b	#$E0,d7
00071F5E E54F                       		lsl.w	#2,d7
00071F60 4EFB 7000                  		jmp	Sound_ExIndex(pc,d7.w)
00071F64                            ; ===========================================================================
00071F64                            
00071F64                            Sound_ExIndex:
00071F64 6000 0000                  		bra.w	Sound_E0
00071F68                            ; ===========================================================================
00071F68 6000 0000                  		bra.w	Sound_E1
00071F6C                            ; ===========================================================================
00071F6C 6000 0000                  		bra.w	Sound_E2
00071F70                            ; ===========================================================================
00071F70 6000 0000                  		bra.w	Sound_E3
00071F74                            ; ===========================================================================
00071F74 6000 0000                  		bra.w	Sound_E4
00071F78                            ; ===========================================================================
00071F78                            ; ---------------------------------------------------------------------------
00071F78                            ; Play "Say-gaa" PCM sound
00071F78                            ; ---------------------------------------------------------------------------
00071F78                            
00071F78                            Sound_E1:				  
00071F78 45F9 0000 0000             		lea	(SegaPCM).l,a2			; Load the SEGA PCM sample into a2. It's important that we use a2 since a0 and a1 are going to be used up ahead when reading the joypad ports 
00071F7E 263C 0000 0000             		move.l	#(SegaPCM_End-SegaPCM),d3			; Load the size of the SEGA PCM sample into d3 
00071F84 13FC 002A 00A0 4000        		move.b	#$2A,($A04000).l		; $A04000 = $2A -> Write to DAC channel	  
00071F8C                            PlayPCM_Loop:	  
00071F8C 13DA 00A0 4001             		move.b	(a2)+,($A04001).l		; Write the PCM data (contained in a2) to $A04001 (YM2612 register D0) 
00071F92 303C 0014                  		move.w	#$14,d0				; Write the pitch ($14 in this case) to d0 
00071F96 51C8 FFFE                  		dbf	d0,*				; Decrement d0; jump to itself if not 0. (for pitch control, avoids playing the sample too fast)  
00071F9A 5383                       		sub.l	#1,d3				; Subtract 1 from the PCM sample size 
00071F9C 6700                       		beq.s	return_PlayPCM			; If d3 = 0, we finished playing the PCM sample, so stop playing, leave this loop, and unfreeze the 68K 
00071F9E 41F8 F604                  		lea	($FFFFF604).w,a0		; address where JoyPad states are written 
00071FA2 43F9 00A1 0003             		lea	($A10003).l,a1			; address where JoyPad states are read from 
00071FA8 4EB8 11F4                  		jsr	(Joypad_Read).w			; Read only the first joypad port. It's important that we do NOT do the two ports, we don't have the cycles for that 
00071FAC 0838 0007 F604             		btst	#7,($FFFFF604).w		; Check for Start button 
00071FB2 6600                       		bne.s	return_PlayPCM			; If start is pressed, stop playing, leave this loop, and unfreeze the 68K 
00071FB4 60D6                       		bra.s	PlayPCM_Loop			; Otherwise, continue playing PCM sample 
00071FB6                            return_PlayPCM: 
00071FB6 584F                       		addq.w	#4,sp 
00071FB8 4E75                       		rts
00071FBA                            ; ===========================================================================
00071FBA                            ; ---------------------------------------------------------------------------
00071FBA                            ; Play music track $81-$9F
00071FBA                            ; ---------------------------------------------------------------------------
00071FBA                            
00071FBA                            Sound_81to9F:				; XREF: Sound_ChkValue
00071FBA 0C07 0088                  		cmpi.b	#$88,d7		; is "extra life" music	played?
00071FBE 6600                       		bne.s	loc_72024	; if not, branch
00071FC0 4A2E 0027                  		tst.b	$27(a6)
00071FC4 6600 0000                  		bne.w	loc_721B6
00071FC8 4BEE 0040                  		lea	$40(a6),a5
00071FCC 7009                       		moveq	#9,d0
00071FCE                            
00071FCE                            loc_71FE6:
00071FCE 0895 0002                  		bclr	#2,(a5)
00071FD2 DAFC 0030                  		adda.w	#$30,a5
00071FD6 51C8 FFF6                  		dbf	d0,loc_71FE6
00071FDA                            
00071FDA 4BEE 0220                  		lea	$220(a6),a5
00071FDE 7005                       		moveq	#5,d0
00071FE0                            
00071FE0                            loc_71FF8:
00071FE0 0895 0007                  		bclr	#7,(a5)
00071FE4 DAFC 0030                  		adda.w	#$30,a5
00071FE8 51C8 FFF6                  		dbf	d0,loc_71FF8
00071FEC 4216                       		clr.b	0(a6)
00071FEE 204E                       		movea.l	a6,a0
00071FF0 43EE 03A0                  		lea	$3A0(a6),a1
00071FF4 303C 0087                  		move.w	#$87,d0
00071FF8                            
00071FF8                            loc_72012:
00071FF8 22D8                       		move.l	(a0)+,(a1)+
00071FFA 51C8 FFFC                  		dbf	d0,loc_72012
00071FFE                            
00071FFE 1D7C 0080 0027             		move.b	#$80,$27(a6)
00072004 4216                       		clr.b	0(a6)
00072006 6000                       		bra.s	loc_7202C
00072008                            ; ===========================================================================
00072008                            
00072008                            loc_72024:
00072008 422E 0027                  		clr.b	$27(a6)
0007200C 422E 0026                  		clr.b	$26(a6)
00072010                            
00072010                            loc_7202C:
00072010 4EBA 0000                  		jsr	sub_725CA(pc)
00072014 2879 0007 1970             		movea.l	(off_719A0).l,a4
0007201A 0407 0081                  		subi.b	#$81,d7
0007201E 1D74 7000 0029             		move.b	(a4,d7.w),$29(a6)
00072024 2879 0007 1968             		movea.l	(Go_MusicIndex).l,a4
0007202A E54F                       		lsl.w	#2,d7
0007202C 2874 7000                  		movea.l	(a4,d7.w),a4
00072030 7000                       		moveq	#0,d0
00072032 3014                       		move.w	(a4),d0
00072034 D08C                       		add.l	a4,d0
00072036 2D40 0018                  		move.l	d0,$18(a6)
0007203A 102C 0005                  		move.b	5(a4),d0
0007203E 1D40 0028                  		move.b	d0,$28(a6)
00072042 4A2E 002A                  		tst.b	$2A(a6)
00072046 6700                       		beq.s	loc_72068
00072048 102E 0029                  		move.b	$29(a6),d0
0007204C                            
0007204C                            loc_72068:
0007204C 1D40 0002                  		move.b	d0,2(a6)
00072050 1D40 0001                  		move.b	d0,1(a6)
00072054 7200                       		moveq	#0,d1
00072056 264C                       		movea.l	a4,a3
00072058 5C4C                       		addq.w	#6,a4
0007205A 7E00                       		moveq	#0,d7
0007205C 1E2B 0002                  		move.b	2(a3),d7
00072060 6700 0000                  		beq.w	loc_72114
00072064 5307                       		subq.b	#1,d7
00072066 123C 00C0                  		move.b	#-$40,d1
0007206A 182B 0004                  		move.b	4(a3),d4
0007206E 7C30                       		moveq	#$30,d6
00072070 1A3C 0001                  		move.b	#1,d5
00072074 43EE 0040                  		lea	$40(a6),a1
00072078 45FA 0000                  		lea	byte_721BA(pc),a2
0007207C                            
0007207C                            loc_72098:
0007207C 08D1 0007                  		bset	#7,(a1)
00072080 135A 0001                  		move.b	(a2)+,1(a1)
00072084 1344 0002                  		move.b	d4,2(a1)
00072088 1346 000D                  		move.b	d6,$D(a1)
0007208C 1341 000A                  		move.b	d1,$A(a1)
00072090 1345 000E                  		move.b	d5,$E(a1)
00072094 7000                       		moveq	#0,d0
00072096 301C                       		move.w	(a4)+,d0
00072098 D08B                       		add.l	a3,d0
0007209A 2340 0004                  		move.l	d0,4(a1)
0007209E 335C 0008                  		move.w	(a4)+,8(a1)
000720A2 D2C6                       		adda.w	d6,a1
000720A4 51CF FFD6                  		dbf	d7,loc_72098
000720A8 0C2B 0007 0002             		cmpi.b	#7,2(a3)
000720AE 6600                       		bne.s	loc_720D8
000720B0 702B                       		moveq	#$2B,d0
000720B2 7200                       		moveq	#0,d1
000720B4 4EBA 0000                  		jsr	sub_7272E(pc)
000720B8 6000 0000                  		bra.w	loc_72114
000720BC                            ; ===========================================================================
000720BC                            
000720BC                            loc_720D8:
000720BC 7028                       		moveq	#$28,d0
000720BE 7206                       		moveq	#6,d1
000720C0 4EBA 0000                  		jsr	sub_7272E(pc)
000720C4 103C 0042                  		move.b	#$42,d0
000720C8 727F                       		moveq	#$7F,d1
000720CA 4EBA 0000                  		jsr	sub_72764(pc)
000720CE 103C 004A                  		move.b	#$4A,d0
000720D2 727F                       		moveq	#$7F,d1
000720D4 4EBA 0000                  		jsr	sub_72764(pc)
000720D8 103C 0046                  		move.b	#$46,d0
000720DC 727F                       		moveq	#$7F,d1
000720DE 4EBA 0000                  		jsr	sub_72764(pc)
000720E2 103C 004E                  		move.b	#$4E,d0
000720E6 727F                       		moveq	#$7F,d1
000720E8 4EBA 0000                  		jsr	sub_72764(pc)
000720EC 103C 00B6                  		move.b	#-$4A,d0
000720F0 123C 00C0                  		move.b	#-$40,d1
000720F4 4EBA 0000                  		jsr	sub_72764(pc)
000720F8                            
000720F8                            loc_72114:
000720F8 7E00                       		moveq	#0,d7
000720FA 1E2B 0003                  		move.b	3(a3),d7
000720FE 6700                       		beq.s	loc_72154
00072100 5307                       		subq.b	#1,d7
00072102 43EE 0190                  		lea	$190(a6),a1
00072106 45FA 0000                  		lea	byte_721C2(pc),a2
0007210A                            
0007210A                            loc_72126:
0007210A 08D1 0007                  		bset	#7,(a1)
0007210E 135A 0001                  		move.b	(a2)+,1(a1)
00072112 1344 0002                  		move.b	d4,2(a1)
00072116 1346 000D                  		move.b	d6,$D(a1)
0007211A 1345 000E                  		move.b	d5,$E(a1)
0007211E 7000                       		moveq	#0,d0
00072120 301C                       		move.w	(a4)+,d0
00072122 D08B                       		add.l	a3,d0
00072124 2340 0004                  		move.l	d0,4(a1)
00072128 335C 0008                  		move.w	(a4)+,8(a1)
0007212C 101C                       		move.b	(a4)+,d0
0007212E 135C 000B                  		move.b	(a4)+,$B(a1)
00072132 D2C6                       		adda.w	d6,a1
00072134 51CF FFD4                  		dbf	d7,loc_72126
00072138                            
00072138                            loc_72154:
00072138 43EE 0220                  		lea	$220(a6),a1
0007213C 7E05                       		moveq	#5,d7
0007213E                            
0007213E                            loc_7215A:
0007213E 4A11                       		tst.b	(a1)
00072140 6A00 0000                  		bpl.w	loc_7217C
00072144 7000                       		moveq	#0,d0
00072146 1029 0001                  		move.b	1(a1),d0
0007214A 6B00                       		bmi.s	loc_7216E
0007214C 5500                       		subq.b	#2,d0
0007214E E508                       		lsl.b	#2,d0
00072150 6000                       		bra.s	loc_72170
00072152                            ; ===========================================================================
00072152                            
00072152                            loc_7216E:
00072152 E608                       		lsr.b	#3,d0
00072154                            
00072154                            loc_72170:
00072154 41FA 0000                  		lea	dword_722CC(pc),a0
00072158 2070 0000                  		movea.l	(a0,d0.w),a0
0007215C 08D0 0002                  		bset	#2,(a0)
00072160                            
00072160                            loc_7217C:
00072160 D2C6                       		adda.w	d6,a1
00072162 51CF FFDA                  		dbf	d7,loc_7215A
00072166                            
00072166 4A6E 0340                  		tst.w	$340(a6)
0007216A 6A00                       		bpl.s	loc_7218E
0007216C 08EE 0002 0100             		bset	#2,$100(a6)
00072172                            
00072172                            loc_7218E:
00072172 4A6E 0370                  		tst.w	$370(a6)
00072176 6A00                       		bpl.s	loc_7219A
00072178 08EE 0002 01F0             		bset	#2,$1F0(a6)
0007217E                            
0007217E                            loc_7219A:
0007217E 4BEE 0070                  		lea	$70(a6),a5
00072182 7805                       		moveq	#5,d4
00072184                            
00072184                            loc_721A0:
00072184 4EBA 0000                  		jsr	sub_726FE(pc)
00072188 DAC6                       		adda.w	d6,a5
0007218A 51CC FFF8                  		dbf	d4,loc_721A0
0007218E 7802                       		moveq	#2,d4
00072190                            
00072190                            loc_721AC:
00072190 4EBA 0000                  		jsr	sub_729A0(pc)
00072194 DAC6                       		adda.w	d6,a5
00072196 51CC FFF8                  		dbf	d4,loc_721AC
0007219A                            
0007219A                            loc_721B6:
0007219A 584F                       		addq.w	#4,sp
0007219C 4E75                       		rts	
0007219E                            ; ===========================================================================
0007219E 0600 0102 0405 0600        byte_721BA:	dc.b 6,	0, 1, 2, 4, 5, 6, 0
000721A6                            		even
000721A6 80A0 C000                  byte_721C2:	dc.b $80, $A0, $C0, 0
000721AA                            		even
000721AA                            ; ===========================================================================
000721AA                            ; ---------------------------------------------------------------------------
000721AA                            ; Play normal sound effect
000721AA                            ; ---------------------------------------------------------------------------
000721AA                            
000721AA                            Sound_A0toCF:				; XREF: Sound_ChkValue
000721AA 4A2E 0027                  		tst.b	$27(a6)
000721AE 6600 0000                  		bne.w	loc_722C6
000721B2 4A2E 0004                  		tst.b	4(a6)
000721B6 6600 0000                  		bne.w	loc_722C6
000721BA 4A2E 0024                  		tst.b	$24(a6)
000721BE 6600 0000                  		bne.w	loc_722C6
000721C2 0C07 00B5                  		cmpi.b	#$B5,d7		; is ring sound	effect played?
000721C6 6600                       		bne.s	Sound_notB5	; if not, branch
000721C8 4A2E 002B                  		tst.b	$2B(a6)
000721CC 6600                       		bne.s	loc_721EE
000721CE 1E3C 00CE                  		move.b	#$CE,d7		; play ring sound in left speaker
000721D2                            
000721D2                            loc_721EE:
000721D2 086E 0000 002B             		bchg	#0,$2B(a6)	; change speaker
000721D8                            
000721D8                            Sound_notB5:
000721D8 0C07 00A7                  		cmpi.b	#$A7,d7		; is "pushing" sound played?
000721DC 6600                       		bne.s	Sound_notA7	; if not, branch
000721DE 4A2E 002C                  		tst.b	$2C(a6)
000721E2 6600 0000                  		bne.w	locret_722C4
000721E6 1D7C 0080 002C             		move.b	#$80,$2C(a6)
000721EC                            
000721EC                            Sound_notA7:
000721EC 2079 0007 196C             		movea.l	(Go_SoundIndex).l,a0
000721F2 0407 00A0                  		subi.b	#$A0,d7
000721F6 E54F                       		lsl.w	#2,d7
000721F8 2670 7000                  		movea.l	(a0,d7.w),a3
000721FC 224B                       		movea.l	a3,a1
000721FE 7200                       		moveq	#0,d1
00072200 3219                       		move.w	(a1)+,d1
00072202 D28B                       		add.l	a3,d1
00072204 1A19                       		move.b	(a1)+,d5
00072206 1E19                       		move.b	(a1)+,d7
00072208 5307                       		subq.b	#1,d7
0007220A 7C30                       		moveq	#$30,d6
0007220C                            
0007220C                            loc_72228:
0007220C 7600                       		moveq	#0,d3
0007220E 1629 0001                  		move.b	1(a1),d3
00072212 1803                       		move.b	d3,d4
00072214 6B00                       		bmi.s	loc_72244
00072216 5543                       		subq.w	#2,d3
00072218 E54B                       		lsl.w	#2,d3
0007221A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007221E 2A75 3000                  		movea.l	(a5,d3.w),a5
00072222 08D5 0002                  		bset	#2,(a5)
00072226 6000                       		bra.s	loc_7226E
00072228                            ; ===========================================================================
00072228                            
00072228                            loc_72244:
00072228 E64B                       		lsr.w	#3,d3
0007222A 4BFA 0000                  		lea	dword_722CC(pc),a5
0007222E 2A75 3000                  		movea.l	(a5,d3.w),a5
00072232 08D5 0002                  		bset	#2,(a5)
00072236 0C04 00C0                  		cmpi.b	#$C0,d4
0007223A 6600                       		bne.s	loc_7226E
0007223C 1004                       		move.b	d4,d0
0007223E 0000 001F                  		ori.b	#$1F,d0
00072242 13C0 00C0 0011             		move.b	d0,($C00011).l
00072248 0840 0005                  		bchg	#5,d0
0007224C 13C0 00C0 0011             		move.b	d0,($C00011).l
00072252                            
00072252                            loc_7226E:
00072252 2A7B 3000                  		movea.l	dword_722EC(pc,d3.w),a5
00072256 244D                       		movea.l	a5,a2
00072258 700B                       		moveq	#$B,d0
0007225A                            
0007225A                            loc_72276:
0007225A 429A                       		clr.l	(a2)+
0007225C 51C8 FFFC                  		dbf	d0,loc_72276
00072260                            
00072260 3A99                       		move.w	(a1)+,(a5)
00072262 1B45 0002                  		move.b	d5,2(a5)
00072266 7000                       		moveq	#0,d0
00072268 3019                       		move.w	(a1)+,d0
0007226A D08B                       		add.l	a3,d0
0007226C 2B40 0004                  		move.l	d0,4(a5)
00072270 3B59 0008                  		move.w	(a1)+,8(a5)
00072274 1B7C 0001 000E             		move.b	#1,$E(a5)
0007227A 1B46 000D                  		move.b	d6,$D(a5)
0007227E 4A04                       		tst.b	d4
00072280 6B00                       		bmi.s	loc_722A8
00072282 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00072288 2B41 0020                  		move.l	d1,$20(a5)
0007228C                            
0007228C                            loc_722A8:
0007228C 51CF FF7E                  		dbf	d7,loc_72228
00072290                            
00072290 4A2E 0250                  		tst.b	$250(a6)
00072294 6A00                       		bpl.s	loc_722B8
00072296 08EE 0002 0340             		bset	#2,$340(a6)
0007229C                            
0007229C                            loc_722B8:
0007229C 4A2E 0310                  		tst.b	$310(a6)
000722A0 6A00                       		bpl.s	locret_722C4
000722A2 08EE 0002 0370             		bset	#2,$370(a6)
000722A8                            
000722A8                            locret_722C4:
000722A8 4E75                       		rts	
000722AA                            ; ===========================================================================
000722AA                            
000722AA                            loc_722C6:
000722AA 4216                       		clr.b	0(a6)
000722AC 4E75                       		rts	
000722AE                            ; ===========================================================================
000722AE 00FF F0D0                  dword_722CC:	dc.l $FFF0D0
000722B2 0000 0000                  		dc.l 0
000722B6 00FF F100                  		dc.l $FFF100
000722BA 00FF F130                  		dc.l $FFF130
000722BE 00FF F190                  		dc.l $FFF190
000722C2 00FF F1C0                  		dc.l $FFF1C0
000722C6 00FF F1F0                  		dc.l $FFF1F0
000722CA 00FF F1F0                  		dc.l $FFF1F0
000722CE 00FF F220                  dword_722EC:	dc.l $FFF220
000722D2 0000 0000                  		dc.l 0
000722D6 00FF F250                  		dc.l $FFF250
000722DA 00FF F280                  		dc.l $FFF280
000722DE 00FF F2B0                  		dc.l $FFF2B0
000722E2 00FF F2E0                  		dc.l $FFF2E0
000722E6 00FF F310                  		dc.l $FFF310
000722EA 00FF F310                  		dc.l $FFF310
000722EE                            ; ===========================================================================
000722EE                            ; ---------------------------------------------------------------------------
000722EE                            ; Play GHZ waterfall sound
000722EE                            ; ---------------------------------------------------------------------------
000722EE                            
000722EE                            Sound_D0toDF:				; XREF: Sound_ChkValue
000722EE 4A2E 0027                  		tst.b	$27(a6)
000722F2 6600 0000                  		bne.w	locret_723C6
000722F6 4A2E 0004                  		tst.b	4(a6)
000722FA 6600 0000                  		bne.w	locret_723C6
000722FE 4A2E 0024                  		tst.b	$24(a6)
00072302 6600 0000                  		bne.w	locret_723C6
00072306 2079 0007 1964             		movea.l	(Go_SoundD0).l,a0
0007230C 0407 00D0                  		subi.b	#$D0,d7
00072310 E54F                       		lsl.w	#2,d7
00072312 2670 7000                  		movea.l	(a0,d7.w),a3
00072316 224B                       		movea.l	a3,a1
00072318 7000                       		moveq	#0,d0
0007231A 3019                       		move.w	(a1)+,d0
0007231C D08B                       		add.l	a3,d0
0007231E 2D40 0020                  		move.l	d0,$20(a6)
00072322 1A19                       		move.b	(a1)+,d5
00072324 1E19                       		move.b	(a1)+,d7
00072326 5307                       		subq.b	#1,d7
00072328 7C30                       		moveq	#$30,d6
0007232A                            
0007232A                            loc_72348:
0007232A 1829 0001                  		move.b	1(a1),d4
0007232E 6B00                       		bmi.s	loc_7235A
00072330 08EE 0002 0100             		bset	#2,$100(a6)
00072336 4BEE 0340                  		lea	$340(a6),a5
0007233A 6000                       		bra.s	loc_72364
0007233C                            ; ===========================================================================
0007233C                            
0007233C                            loc_7235A:
0007233C 08EE 0002 01F0             		bset	#2,$1F0(a6)
00072342 4BEE 0370                  		lea	$370(a6),a5
00072346                            
00072346                            loc_72364:
00072346 244D                       		movea.l	a5,a2
00072348 700B                       		moveq	#$B,d0
0007234A                            
0007234A                            loc_72368:
0007234A 429A                       		clr.l	(a2)+
0007234C 51C8 FFFC                  		dbf	d0,loc_72368
00072350                            
00072350 3A99                       		move.w	(a1)+,(a5)
00072352 1B45 0002                  		move.b	d5,2(a5)
00072356 7000                       		moveq	#0,d0
00072358 3019                       		move.w	(a1)+,d0
0007235A D08B                       		add.l	a3,d0
0007235C 2B40 0004                  		move.l	d0,4(a5)
00072360 3B59 0008                  		move.w	(a1)+,8(a5)
00072364 1B7C 0001 000E             		move.b	#1,$E(a5)
0007236A 1B46 000D                  		move.b	d6,$D(a5)
0007236E 4A04                       		tst.b	d4
00072370 6B00                       		bmi.s	loc_72396
00072372 1B7C 00C0 000A             		move.b	#$C0,$A(a5)
00072378                            
00072378                            loc_72396:
00072378 51CF FFB0                  		dbf	d7,loc_72348
0007237C                            
0007237C 4A2E 0250                  		tst.b	$250(a6)
00072380 6A00                       		bpl.s	loc_723A6
00072382 08EE 0002 0340             		bset	#2,$340(a6)
00072388                            
00072388                            loc_723A6:
00072388 4A2E 0310                  		tst.b	$310(a6)
0007238C 6A00                       		bpl.s	locret_723C6
0007238E 08EE 0002 0370             		bset	#2,$370(a6)
00072394 0004 001F                  		ori.b	#$1F,d4
00072398 13C4 00C0 0011             		move.b	d4,($C00011).l
0007239E 0844 0005                  		bchg	#5,d4
000723A2 13C4 00C0 0011             		move.b	d4,($C00011).l
000723A8                            
000723A8                            locret_723C6:
000723A8 4E75                       		rts	
000723AA                            ; End of function Sound_ChkValue
000723AA                            
000723AA                            ; ===========================================================================
000723AA 00FF F100                  		dc.l $FFF100
000723AE 00FF F1F0                  		dc.l $FFF1F0
000723B2 00FF F250                  		dc.l $FFF250
000723B6 00FF F310                  		dc.l $FFF310
000723BA 00FF F340                  		dc.l $FFF340
000723BE 00FF F370                  		dc.l $FFF370
000723C2                            
000723C2                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000723C2                            
000723C2                            
000723C2                            Snd_FadeOut1:				; XREF: Sound_E0
000723C2 4216                       		clr.b	0(a6)
000723C4 4BEE 0220                  		lea	$220(a6),a5
000723C8 7E05                       		moveq	#5,d7
000723CA                            
000723CA                            loc_723EA:
000723CA 4A15                       		tst.b	(a5)
000723CC 6A00 0000                  		bpl.w	loc_72472
000723D0 0895 0007                  		bclr	#7,(a5)
000723D4 7600                       		moveq	#0,d3
000723D6 162D 0001                  		move.b	1(a5),d3
000723DA 6B00                       		bmi.s	loc_7243C
000723DC 4EBA 0000                  		jsr	sub_726FE(pc)
000723E0 0C03 0004                  		cmpi.b	#4,d3
000723E4 6600                       		bne.s	loc_72416
000723E6 4A2E 0340                  		tst.b	$340(a6)
000723EA 6A00                       		bpl.s	loc_72416
000723EC 4BEE 0340                  		lea	$340(a6),a5
000723F0 226E 0020                  		movea.l	$20(a6),a1
000723F4 6000                       		bra.s	loc_72428
000723F6                            ; ===========================================================================
000723F6                            
000723F6                            loc_72416:
000723F6 5503                       		subq.b	#2,d3
000723F8 E50B                       		lsl.b	#2,d3
000723FA 41FA FEB2                  		lea	dword_722CC(pc),a0
000723FE 264D                       		movea.l	a5,a3
00072400 2A70 3000                  		movea.l	(a0,d3.w),a5
00072404 226E 0018                  		movea.l	$18(a6),a1
00072408                            
00072408                            loc_72428:
00072408 0895 0002                  		bclr	#2,(a5)
0007240C 08D5 0001                  		bset	#1,(a5)
00072410 102D 000B                  		move.b	$B(a5),d0
00072414 4EBA 0000                  		jsr	sub_72C4E(pc)
00072418 2A4B                       		movea.l	a3,a5
0007241A 6000                       		bra.s	loc_72472
0007241C                            ; ===========================================================================
0007241C                            
0007241C                            loc_7243C:
0007241C 4EBA 0000                  		jsr	sub_729A0(pc)
00072420 41EE 0370                  		lea	$370(a6),a0
00072424 0C03 00E0                  		cmpi.b	#$E0,d3
00072428 6700                       		beq.s	loc_7245A
0007242A 0C03 00C0                  		cmpi.b	#$C0,d3
0007242E 6700                       		beq.s	loc_7245A
00072430 E60B                       		lsr.b	#3,d3
00072432 41FA FE7A                  		lea	dword_722CC(pc),a0
00072436 2070 3000                  		movea.l	(a0,d3.w),a0
0007243A                            
0007243A                            loc_7245A:
0007243A 0890 0002                  		bclr	#2,(a0)
0007243E 08D0 0001                  		bset	#1,(a0)
00072442 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00072448 6600                       		bne.s	loc_72472
0007244A 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00072452                            
00072452                            loc_72472:
00072452 DAFC 0030                  		adda.w	#$30,a5
00072456 51CF FF72                  		dbf	d7,loc_723EA
0007245A                            
0007245A 4E75                       		rts	
0007245C                            ; End of function Snd_FadeOut1
0007245C                            
0007245C                            
0007245C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007245C                            
0007245C                            
0007245C                            Snd_FadeOut2:				; XREF: Sound_E0
0007245C 4BEE 0340                  		lea	$340(a6),a5
00072460 4A15                       		tst.b	(a5)
00072462 6A00                       		bpl.s	loc_724AE
00072464 0895 0007                  		bclr	#7,(a5)
00072468 0815 0002                  		btst	#2,(a5)
0007246C 6600                       		bne.s	loc_724AE
0007246E 4EBA 0000                  		jsr	loc_7270A(pc)
00072472 4BEE 0100                  		lea	$100(a6),a5
00072476 0895 0002                  		bclr	#2,(a5)
0007247A 08D5 0001                  		bset	#1,(a5)
0007247E 4A15                       		tst.b	(a5)
00072480 6A00                       		bpl.s	loc_724AE
00072482 226E 0018                  		movea.l	$18(a6),a1
00072486 102D 000B                  		move.b	$B(a5),d0
0007248A 4EBA 0000                  		jsr	sub_72C4E(pc)
0007248E                            
0007248E                            loc_724AE:
0007248E 4BEE 0370                  		lea	$370(a6),a5
00072492 4A15                       		tst.b	(a5)
00072494 6A00                       		bpl.s	locret_724E4
00072496 0895 0007                  		bclr	#7,(a5)
0007249A 0815 0002                  		btst	#2,(a5)
0007249E 6600                       		bne.s	locret_724E4
000724A0 4EBA 0000                  		jsr	loc_729A6(pc)
000724A4 4BEE 01F0                  		lea	$1F0(a6),a5
000724A8 0895 0002                  		bclr	#2,(a5)
000724AC 08D5 0001                  		bset	#1,(a5)
000724B0 4A15                       		tst.b	(a5)
000724B2 6A00                       		bpl.s	locret_724E4
000724B4 0C2D 00E0 0001             		cmpi.b	#-$20,1(a5)
000724BA 6600                       		bne.s	locret_724E4
000724BC 13ED 001F 00C0 0011        		move.b	$1F(a5),($C00011).l
000724C4                            
000724C4                            locret_724E4:
000724C4 4E75                       		rts	
000724C6                            ; End of function Snd_FadeOut2
000724C6                            
000724C6                            ; ===========================================================================
000724C6                            ; ---------------------------------------------------------------------------
000724C6                            ; Fade out music
000724C6                            ; ---------------------------------------------------------------------------
000724C6                            
000724C6                            Sound_E0:				; XREF: Sound_ExIndex
000724C6 4EBA FEFA                  		jsr	Snd_FadeOut1(pc)
000724CA 4EBA FF90                  		jsr	Snd_FadeOut2(pc)
000724CE 1D7C 0003 0006             		move.b	#3,6(a6)
000724D4 1D7C 0028 0004             		move.b	#$28,4(a6)
000724DA 422E 0040                  		clr.b	$40(a6)
000724DE 422E 002A                  		clr.b	$2A(a6)
000724E2 4E75                       		rts	
000724E4                            
000724E4                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000724E4                            
000724E4                            
000724E4                            sub_72504:				; XREF: sub_71B4C
000724E4 102E 0006                  		move.b	6(a6),d0
000724E8 6700                       		beq.s	loc_72510
000724EA 532E 0006                  		subq.b	#1,6(a6)
000724EE 4E75                       		rts	
000724F0                            ; ===========================================================================
000724F0                            
000724F0                            loc_72510:
000724F0 532E 0004                  		subq.b	#1,4(a6)
000724F4 6700 0000                  		beq.w	Sound_E4
000724F8 1D7C 0003 0006             		move.b	#3,6(a6)
000724FE 4BEE 0070                  		lea	$70(a6),a5
00072502 7E05                       		moveq	#5,d7
00072504                            
00072504                            loc_72524:
00072504 4A15                       		tst.b	(a5)
00072506 6A00                       		bpl.s	loc_72538
00072508 522D 0009                  		addq.b	#1,9(a5)
0007250C 6A00                       		bpl.s	loc_72534
0007250E 0895 0007                  		bclr	#7,(a5)
00072512 6000                       		bra.s	loc_72538
00072514                            ; ===========================================================================
00072514                            
00072514                            loc_72534:
00072514 4EBA 0000                  		jsr	sub_72CB4(pc)
00072518                            
00072518                            loc_72538:
00072518 DAFC 0030                  		adda.w	#$30,a5
0007251C 51CF FFE6                  		dbf	d7,loc_72524
00072520                            
00072520 7E02                       		moveq	#2,d7
00072522                            
00072522                            loc_72542:
00072522 4A15                       		tst.b	(a5)
00072524 6A00                       		bpl.s	loc_72560
00072526 522D 0009                  		addq.b	#1,9(a5)
0007252A 0C2D 0010 0009             		cmpi.b	#$10,9(a5)
00072530 6500                       		bcs.s	loc_72558
00072532 0895 0007                  		bclr	#7,(a5)
00072536 6000                       		bra.s	loc_72560
00072538                            ; ===========================================================================
00072538                            
00072538                            loc_72558:
00072538 1C2D 0009                  		move.b	9(a5),d6
0007253C 4EBA 0000                  		jsr	sub_7296A(pc)
00072540                            
00072540                            loc_72560:
00072540 DAFC 0030                  		adda.w	#$30,a5
00072544 51CF FFDC                  		dbf	d7,loc_72542
00072548                            
00072548 4E75                       		rts	
0007254A                            ; End of function sub_72504
0007254A                            
0007254A                            
0007254A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007254A                            
0007254A                            
0007254A                            sub_7256A:				; XREF: Sound_E4; sub_725CA
0007254A 7602                       		moveq	#2,d3
0007254C 7028                       		moveq	#$28,d0
0007254E                            
0007254E                            loc_7256E:
0007254E 1203                       		move.b	d3,d1
00072550 4EBA 0000                  		jsr	sub_7272E(pc)
00072554 5801                       		addq.b	#4,d1
00072556 4EBA 0000                  		jsr	sub_7272E(pc)
0007255A 51CB FFF2                  		dbf	d3,loc_7256E
0007255E                            
0007255E 7040                       		moveq	#$40,d0
00072560 727F                       		moveq	#$7F,d1
00072562 7802                       		moveq	#2,d4
00072564                            
00072564                            loc_72584:
00072564 7603                       		moveq	#3,d3
00072566                            
00072566                            loc_72586:
00072566 4EBA 0000                  		jsr	sub_7272E(pc)
0007256A 4EBA 0000                  		jsr	sub_72764(pc)
0007256E 5840                       		addq.w	#4,d0
00072570 51CB FFF4                  		dbf	d3,loc_72586
00072574                            
00072574 0400 000F                  		subi.b	#$F,d0
00072578 51CC FFEA                  		dbf	d4,loc_72584
0007257C                            
0007257C 4E75                       		rts	
0007257E                            ; End of function sub_7256A
0007257E                            
0007257E                            ; ===========================================================================
0007257E                            ; ---------------------------------------------------------------------------
0007257E                            ; Stop music
0007257E                            ; ---------------------------------------------------------------------------
0007257E                            
0007257E                            Sound_E4:				; XREF: Sound_ChkValue; Sound_ExIndex; sub_72504
0007257E 702B                       		moveq	#$2B,d0
00072580 123C 0080                  		move.b	#$80,d1
00072584 4EBA 0000                  		jsr	sub_7272E(pc)
00072588 7027                       		moveq	#$27,d0
0007258A 7200                       		moveq	#0,d1
0007258C 4EBA 0000                  		jsr	sub_7272E(pc)
00072590 204E                       		movea.l	a6,a0
00072592 303C 00E3                  		move.w	#$E3,d0
00072596                            
00072596                            loc_725B6:
00072596 4298                       		clr.l	(a0)+
00072598 51C8 FFFC                  		dbf	d0,loc_725B6
0007259C                            
0007259C 1D7C 0080 0009             		move.b	#$80,9(a6)	; set music to $80 (silence)
000725A2 4EBA FFA6                  		jsr	sub_7256A(pc)
000725A6 6000 0000                  		bra.w	sub_729B6
000725AA                            
000725AA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000725AA                            
000725AA                            
000725AA                            sub_725CA:				; XREF: Sound_ChkValue
000725AA 204E                       		movea.l	a6,a0
000725AC 1216                       		move.b	0(a6),d1
000725AE 142E 0027                  		move.b	$27(a6),d2
000725B2 162E 002A                  		move.b	$2A(a6),d3
000725B6 182E 0026                  		move.b	$26(a6),d4
000725BA 3A2E 000A                  		move.w	$A(a6),d5
000725BE 303C 0087                  		move.w	#$87,d0
000725C2                            
000725C2                            loc_725E4:
000725C2 4298                       		clr.l	(a0)+
000725C4 51C8 FFFC                  		dbf	d0,loc_725E4
000725C8                            
000725C8 1C81                       		move.b	d1,0(a6)
000725CA 1D42 0027                  		move.b	d2,$27(a6)
000725CE 1D43 002A                  		move.b	d3,$2A(a6)
000725D2 1D44 0026                  		move.b	d4,$26(a6)
000725D6 3D45 000A                  		move.w	d5,$A(a6)
000725DA 1D7C 0080 0009             		move.b	#$80,9(a6)
000725E0 4EBA FF68                  		jsr	sub_7256A(pc)
000725E4 6000 0000                  		bra.w	sub_729B6
000725E8                            ; End of function sub_725CA
000725E8                            
000725E8                            
000725E8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000725E8                            
000725E8                            
000725E8                            sub_7260C:				; XREF: sub_71B4C
000725E8 1D6E 0002 0001             		move.b	2(a6),1(a6)
000725EE 41EE 004E                  		lea	$4E(a6),a0
000725F2 7030                       		moveq	#$30,d0
000725F4 7209                       		moveq	#9,d1
000725F6                            
000725F6                            loc_7261A:
000725F6 5210                       		addq.b	#1,(a0)
000725F8 D0C0                       		adda.w	d0,a0
000725FA 51C9 FFFA                  		dbf	d1,loc_7261A
000725FE                            
000725FE 4E75                       		rts	
00072600                            ; End of function sub_7260C
00072600                            
00072600                            ; ===========================================================================
00072600                            ; ---------------------------------------------------------------------------
00072600                            ; Speed	up music
00072600                            ; ---------------------------------------------------------------------------
00072600                            
00072600                            Sound_E2:				; XREF: Sound_ExIndex
00072600 4A2E 0027                  		tst.b	$27(a6)
00072604 6600                       		bne.s	loc_7263E
00072606 1D6E 0029 0002             		move.b	$29(a6),2(a6)
0007260C 1D6E 0029 0001             		move.b	$29(a6),1(a6)
00072612 1D7C 0080 002A             		move.b	#$80,$2A(a6)
00072618 4E75                       		rts	
0007261A                            ; ===========================================================================
0007261A                            
0007261A                            loc_7263E:
0007261A 1D6E 03C9 03A2             		move.b	$3C9(a6),$3A2(a6)
00072620 1D6E 03C9 03A1             		move.b	$3C9(a6),$3A1(a6)
00072626 1D7C 0080 03CA             		move.b	#$80,$3CA(a6)
0007262C 4E75                       		rts	
0007262E                            ; ===========================================================================
0007262E                            ; ---------------------------------------------------------------------------
0007262E                            ; Change music back to normal speed
0007262E                            ; ---------------------------------------------------------------------------
0007262E                            
0007262E                            Sound_E3:				; XREF: Sound_ExIndex
0007262E 4A2E 0027                  		tst.b	$27(a6)
00072632 6600                       		bne.s	loc_7266A
00072634 1D6E 0028 0002             		move.b	$28(a6),2(a6)
0007263A 1D6E 0028 0001             		move.b	$28(a6),1(a6)
00072640 422E 002A                  		clr.b	$2A(a6)
00072644 4E75                       		rts	
00072646                            ; ===========================================================================
00072646                            
00072646                            loc_7266A:
00072646 1D6E 03C8 03A2             		move.b	$3C8(a6),$3A2(a6)
0007264C 1D6E 03C8 03A1             		move.b	$3C8(a6),$3A1(a6)
00072652 422E 03CA                  		clr.b	$3CA(a6)
00072656 4E75                       		rts	
00072658                            
00072658                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072658                            
00072658                            
00072658                            sub_7267C:				; XREF: sub_71B4C
00072658 4A2E 0025                  		tst.b	$25(a6)
0007265C 6700                       		beq.s	loc_72688
0007265E 532E 0025                  		subq.b	#1,$25(a6)
00072662 4E75                       		rts	
00072664                            ; ===========================================================================
00072664                            
00072664                            loc_72688:
00072664 4A2E 0026                  		tst.b	$26(a6)
00072668 6700                       		beq.s	loc_726D6
0007266A 532E 0026                  		subq.b	#1,$26(a6)
0007266E 1D7C 0002 0025             		move.b	#2,$25(a6)
00072674 4BEE 0070                  		lea	$70(a6),a5
00072678 7E05                       		moveq	#5,d7
0007267A                            
0007267A                            loc_7269E:
0007267A 4A15                       		tst.b	(a5)
0007267C 6A00                       		bpl.s	loc_726AA
0007267E 532D 0009                  		subq.b	#1,9(a5)
00072682 4EBA 0000                  		jsr	sub_72CB4(pc)
00072686                            
00072686                            loc_726AA:
00072686 DAFC 0030                  		adda.w	#$30,a5
0007268A 51CF FFEE                  		dbf	d7,loc_7269E
0007268E 7E02                       		moveq	#2,d7
00072690                            
00072690                            loc_726B4:
00072690 4A15                       		tst.b	(a5)
00072692 6A00                       		bpl.s	loc_726CC
00072694 532D 0009                  		subq.b	#1,9(a5)
00072698 1C2D 0009                  		move.b	9(a5),d6
0007269C 0C06 0010                  		cmpi.b	#$10,d6
000726A0 6500                       		bcs.s	loc_726C8
000726A2 7C0F                       		moveq	#$F,d6
000726A4                            
000726A4                            loc_726C8:
000726A4 4EBA 0000                  		jsr	sub_7296A(pc)
000726A8                            
000726A8                            loc_726CC:
000726A8 DAFC 0030                  		adda.w	#$30,a5
000726AC 51CF FFE2                  		dbf	d7,loc_726B4
000726B0 4E75                       		rts	
000726B2                            ; ===========================================================================
000726B2                            
000726B2                            loc_726D6:
000726B2 08AE 0002 0040             		bclr	#2,$40(a6)
000726B8 422E 0024                  		clr.b	$24(a6)
000726BC 4E75                       		rts	
000726BE                            ; End of function sub_7267C
000726BE                            
000726BE                            ; ===========================================================================
000726BE                            
000726BE                            loc_726E2:				; XREF: sub_71CCA
000726BE 0815 0001                  		btst	#1,(a5)
000726C2 6600                       		bne.s	locret_726FC
000726C4 0815 0002                  		btst	#2,(a5)
000726C8 6600                       		bne.s	locret_726FC
000726CA 7028                       		moveq	#$28,d0
000726CC 122D 0001                  		move.b	1(a5),d1
000726D0 0001 00F0                  		ori.b	#-$10,d1
000726D4 6000 0000                  		bra.w	sub_7272E
000726D8                            ; ===========================================================================
000726D8                            
000726D8                            locret_726FC:
000726D8 4E75                       		rts	
000726DA                            
000726DA                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000726DA                            
000726DA                            
000726DA                            sub_726FE:				; XREF: sub_71CEC; sub_71D9E; Sound_ChkValue; Snd_FadeOut1
000726DA 0815 0004                  		btst	#4,(a5)
000726DE 6600                       		bne.s	locret_72714
000726E0 0815 0002                  		btst	#2,(a5)
000726E4 6600                       		bne.s	locret_72714
000726E6                            
000726E6                            loc_7270A:				; XREF: Snd_FadeOut2
000726E6 7028                       		moveq	#$28,d0
000726E8 122D 0001                  		move.b	1(a5),d1
000726EC 6000 0000                  		bra.w	sub_7272E
000726F0                            ; ===========================================================================
000726F0                            
000726F0                            locret_72714:
000726F0 4E75                       		rts	
000726F2                            ; End of function sub_726FE
000726F2                            
000726F2                            ; ===========================================================================
000726F2                            
000726F2                            loc_72716:				; XREF: sub_72A5A
000726F2 0815 0002                  		btst	#2,(a5)
000726F6 6600                       		bne.s	locret_72720
000726F8 6000 0000                  		bra.w	sub_72722
000726FC                            ; ===========================================================================
000726FC                            
000726FC                            locret_72720:
000726FC 4E75                       		rts	
000726FE                            
000726FE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000726FE                            
000726FE                            
000726FE                            sub_72722:				; XREF: sub_71E18; sub_72C4E; sub_72CB4
000726FE 082D 0002 0001             		btst	#2,1(a5)
00072704 6600                       		bne.s	loc_7275A
00072706 D02D 0001                  		add.b	1(a5),d0
0007270A                            ; End of function sub_72722
0007270A                            
0007270A                            
0007270A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007270A                            
0007270A                            
0007270A                            sub_7272E:				; XREF: loc_71E6A
0007270A 1439 00A0 4000             		move.b	($A04000).l,d2
00072710 0802 0007                  		btst	#7,d2
00072714 66F4                       		bne.s	sub_7272E
00072716 13C0 00A0 4000             		move.b	d0,($A04000).l
0007271C 4E71                       		nop	
0007271E 4E71                       		nop	
00072720 4E71                       		nop	
00072722                            
00072722                            loc_72746:
00072722 1439 00A0 4000             		move.b	($A04000).l,d2
00072728 0802 0007                  		btst	#7,d2
0007272C 66F4                       		bne.s	loc_72746
0007272E                            
0007272E 13C1 00A0 4001             		move.b	d1,($A04001).l
00072734 4E75                       		rts	
00072736                            ; End of function sub_7272E
00072736                            
00072736                            ; ===========================================================================
00072736                            
00072736                            loc_7275A:				; XREF: sub_72722
00072736 142D 0001                  		move.b	1(a5),d2
0007273A 0882 0002                  		bclr	#2,d2
0007273E D002                       		add.b	d2,d0
00072740                            
00072740                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072740                            
00072740                            
00072740                            sub_72764:				; XREF: loc_71E6A; Sound_ChkValue; sub_7256A; sub_72764
00072740 1439 00A0 4000             		move.b	($A04000).l,d2
00072746 0802 0007                  		btst	#7,d2
0007274A 66F4                       		bne.s	sub_72764
0007274C 13C0 00A0 4002             		move.b	d0,($A04002).l
00072752 4E71                       		nop	
00072754 4E71                       		nop	
00072756 4E71                       		nop	
00072758                            
00072758                            loc_7277C:
00072758 1439 00A0 4000             		move.b	($A04000).l,d2
0007275E 0802 0007                  		btst	#7,d2
00072762 66F4                       		bne.s	loc_7277C
00072764                            
00072764 13C1 00A0 4003             		move.b	d1,($A04003).l
0007276A 4E75                       		rts	
0007276C                            ; End of function sub_72764
0007276C                            
0007276C                            ; ===========================================================================
0007276C 025E 0284 02AB 02D3 02FE+  word_72790:	dc.w $25E, $284, $2AB, $2D3, $2FE, $32D, $35C, $38F, $3C5
0007277E 03FF 043C 047C 0A5E 0A84+  		dc.w $3FF, $43C, $47C, $A5E, $A84, $AAB, $AD3, $AFE, $B2D
00072790 0B5C 0B8F 0BC5 0BFF 0C3C+  		dc.w $B5C, $B8F, $BC5, $BFF, $C3C, $C7C, $125E,	$1284
000727A0 12AB 12D3 12FE 132D 135C+  		dc.w $12AB, $12D3, $12FE, $132D, $135C,	$138F, $13C5, $13FF
000727B0 143C 147C 1A5E 1A84 1AAB+  		dc.w $143C, $147C, $1A5E, $1A84, $1AAB,	$1AD3, $1AFE, $1B2D
000727C0 1B5C 1B8F 1BC5 1BFF 1C3C+  		dc.w $1B5C, $1B8F, $1BC5, $1BFF, $1C3C,	$1C7C, $225E, $2284
000727D0 22AB 22D3 22FE 232D 235C+  		dc.w $22AB, $22D3, $22FE, $232D, $235C,	$238F, $23C5, $23FF
000727E0 243C 247C 2A5E 2A84 2AAB+  		dc.w $243C, $247C, $2A5E, $2A84, $2AAB,	$2AD3, $2AFE, $2B2D
000727F0 2B5C 2B8F 2BC5 2BFF 2C3C+  		dc.w $2B5C, $2B8F, $2BC5, $2BFF, $2C3C,	$2C7C, $325E, $3284
00072800 32AB 32D3 32FE 332D 335C+  		dc.w $32AB, $32D3, $32FE, $332D, $335C,	$338F, $33C5, $33FF
00072810 343C 347C 3A5E 3A84 3AAB+  		dc.w $343C, $347C, $3A5E, $3A84, $3AAB,	$3AD3, $3AFE, $3B2D
00072820 3B5C 3B8F 3BC5 3BFF 3C3C+  		dc.w $3B5C, $3B8F, $3BC5, $3BFF, $3C3C,	$3C7C
0007282C                            
0007282C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007282C                            
0007282C                            
0007282C                            sub_72850:				; XREF: sub_71B4C
0007282C 532D 000E                  		subq.b	#1,$E(a5)
00072830 6600                       		bne.s	loc_72866
00072832 0895 0004                  		bclr	#4,(a5)
00072836 4EBA 0000                  		jsr	sub_72878(pc)
0007283A 4EBA 0000                  		jsr	sub_728DC(pc)
0007283E 6000 0000                  		bra.w	loc_7292E
00072842                            ; ===========================================================================
00072842                            
00072842                            loc_72866:
00072842 4EBA F52A                  		jsr	sub_71D9E(pc)
00072846 4EBA 0000                  		jsr	sub_72926(pc)
0007284A 4EBA F54A                  		jsr	sub_71DC6(pc)
0007284E 4EBA 0000                  		jsr	sub_728E2(pc)
00072852 4E75                       		rts	
00072854                            ; End of function sub_72850
00072854                            
00072854                            
00072854                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072854                            
00072854                            
00072854                            sub_72878:				; XREF: sub_72850
00072854 0895 0001                  		bclr	#1,(a5)
00072858 286D 0004                  		movea.l	4(a5),a4
0007285C                            
0007285C                            loc_72880:
0007285C 7A00                       		moveq	#0,d5
0007285E 1A1C                       		move.b	(a4)+,d5
00072860 0C05 00E0                  		cmpi.b	#$E0,d5
00072864 6500                       		bcs.s	loc_72890
00072866 4EBA 0000                  		jsr	sub_72A5A(pc)
0007286A 60F0                       		bra.s	loc_72880
0007286C                            ; ===========================================================================
0007286C                            
0007286C                            loc_72890:
0007286C 4A05                       		tst.b	d5
0007286E 6A00                       		bpl.s	loc_728A4
00072870 4EBA 0000                  		jsr	sub_728AC(pc)
00072874 1A1C                       		move.b	(a4)+,d5
00072876 4A05                       		tst.b	d5
00072878 6A00                       		bpl.s	loc_728A4
0007287A 534C                       		subq.w	#1,a4
0007287C 6000 F4B2                  		bra.w	sub_71D60
00072880                            ; ===========================================================================
00072880                            
00072880                            loc_728A4:
00072880 4EBA F48E                  		jsr	sub_71D40(pc)
00072884 6000 F4AA                  		bra.w	sub_71D60
00072888                            ; End of function sub_72878
00072888                            
00072888                            
00072888                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072888                            
00072888                            
00072888                            sub_728AC:				; XREF: sub_72878
00072888 0405 0081                  		subi.b	#$81,d5
0007288C 6500                       		bcs.s	loc_728CA
0007288E DA2D 0008                  		add.b	8(a5),d5
00072892 0245 007F                  		andi.w	#$7F,d5
00072896 E34D                       		lsl.w	#1,d5
00072898 41FA 0000                  		lea	word_729CE(pc),a0
0007289C 3B70 5000 0010             		move.w	(a0,d5.w),$10(a5)
000728A2 6000 F48C                  		bra.w	sub_71D60
000728A6                            ; ===========================================================================
000728A6                            
000728A6                            loc_728CA:
000728A6 08D5 0001                  		bset	#1,(a5)
000728AA 3B7C FFFF 0010             		move.w	#-1,$10(a5)
000728B0 4EBA F47E                  		jsr	sub_71D60(pc)
000728B4 6000 0000                  		bra.w	sub_729A0
000728B8                            ; End of function sub_728AC
000728B8                            
000728B8                            
000728B8                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000728B8                            
000728B8                            
000728B8                            sub_728DC:				; XREF: sub_72850
000728B8 3C2D 0010                  		move.w	$10(a5),d6
000728BC 6B00                       		bmi.s	loc_72920
000728BE                            ; End of function sub_728DC
000728BE                            
000728BE                            
000728BE                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
000728BE                            
000728BE                            
000728BE                            sub_728E2:				; XREF: sub_72850
000728BE 102D 001E                  		move.b	$1E(a5),d0
000728C2 4880                       		ext.w	d0
000728C4 DC40                       		add.w	d0,d6
000728C6 0815 0002                  		btst	#2,(a5)
000728CA 6600                       		bne.s	locret_7291E
000728CC 0815 0001                  		btst	#1,(a5)
000728D0 6600                       		bne.s	locret_7291E
000728D2 102D 0001                  		move.b	1(a5),d0
000728D6 0C00 00E0                  		cmpi.b	#$E0,d0
000728DA 6600                       		bne.s	loc_72904
000728DC 103C 00C0                  		move.b	#$C0,d0
000728E0                            
000728E0                            loc_72904:
000728E0 3206                       		move.w	d6,d1
000728E2 0201 000F                  		andi.b	#$F,d1
000728E6 8001                       		or.b	d1,d0
000728E8 E84E                       		lsr.w	#4,d6
000728EA 0206 003F                  		andi.b	#$3F,d6
000728EE 13C0 00C0 0011             		move.b	d0,($C00011).l
000728F4 13C6 00C0 0011             		move.b	d6,($C00011).l
000728FA                            
000728FA                            locret_7291E:
000728FA 4E75                       		rts	
000728FC                            ; End of function sub_728E2
000728FC                            
000728FC                            ; ===========================================================================
000728FC                            
000728FC                            loc_72920:				; XREF: sub_728DC
000728FC 08D5 0001                  		bset	#1,(a5)
00072900 4E75                       		rts	
00072902                            
00072902                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072902                            
00072902                            
00072902                            sub_72926:				; XREF: sub_72850
00072902 4A2D 000B                  		tst.b	$B(a5)
00072906 6700 0000                  		beq.w	locret_7298A
0007290A                            
0007290A                            loc_7292E:				; XREF: sub_72850
0007290A 1C2D 0009                  		move.b	9(a5),d6
0007290E 7000                       		moveq	#0,d0
00072910 102D 000B                  		move.b	$B(a5),d0
00072914 6700                       		beq.s	sub_7296A
00072916 2079 0007 1974             		movea.l	(Go_PSGIndex).l,a0
0007291C 5340                       		subq.w	#1,d0
0007291E E548                       		lsl.w	#2,d0
00072920 2070 0000                  		movea.l	(a0,d0.w),a0
00072924 102D 000C                  		move.b	$C(a5),d0
00072928 1030 0000                  		move.b	(a0,d0.w),d0
0007292C 522D 000C                  		addq.b	#1,$C(a5)
00072930 0800 0007                  		btst	#7,d0
00072934 6700                       		beq.s	loc_72960
00072936 0C00 0080                  		cmpi.b	#$80,d0
0007293A 6700                       		beq.s	loc_7299A
0007293C                            
0007293C                            loc_72960:
0007293C DC40                       		add.w	d0,d6
0007293E 0C06 0010                  		cmpi.b	#$10,d6
00072942 6500                       		bcs.s	sub_7296A
00072944 7C0F                       		moveq	#$F,d6
00072946                            ; End of function sub_72926
00072946                            
00072946                            
00072946                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072946                            
00072946                            
00072946                            sub_7296A:				; XREF: sub_72504; sub_7267C; sub_72926
00072946 0815 0001                  		btst	#1,(a5)
0007294A 6600                       		bne.s	locret_7298A
0007294C 0815 0002                  		btst	#2,(a5)
00072950 6600                       		bne.s	locret_7298A
00072952 0815 0004                  		btst	#4,(a5)
00072956 6600                       		bne.s	loc_7298C
00072958                            
00072958                            loc_7297C:
00072958 8C2D 0001                  		or.b	1(a5),d6
0007295C 0606 0010                  		addi.b	#$10,d6
00072960 13C6 00C0 0011             		move.b	d6,($C00011).l
00072966                            
00072966                            locret_7298A:
00072966 4E75                       		rts	
00072968                            ; ===========================================================================
00072968                            
00072968                            loc_7298C:
00072968 4A2D 0013                  		tst.b	$13(a5)
0007296C 67EA                       		beq.s	loc_7297C
0007296E 4A2D 0012                  		tst.b	$12(a5)
00072972 66E4                       		bne.s	loc_7297C
00072974 4E75                       		rts	
00072976                            ; End of function sub_7296A
00072976                            
00072976                            ; ===========================================================================
00072976                            
00072976                            loc_7299A:				; XREF: sub_72926
00072976 532D 000C                  		subq.b	#1,$C(a5)
0007297A 4E75                       		rts	
0007297C                            
0007297C                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
0007297C                            
0007297C                            
0007297C                            sub_729A0:				; XREF: sub_71D9E; Sound_ChkValue; Snd_FadeOut1; sub_728AC
0007297C 0815 0002                  		btst	#2,(a5)
00072980 6600                       		bne.s	locret_729B4
00072982                            
00072982                            loc_729A6:				; XREF: Snd_FadeOut2
00072982 102D 0001                  		move.b	1(a5),d0
00072986 0000 001F                  		ori.b	#$1F,d0
0007298A 13C0 00C0 0011             		move.b	d0,($C00011).l
00072990                            
00072990                            locret_729B4:
00072990 4E75                       		rts	
00072992                            ; End of function sub_729A0
00072992                            
00072992                            
00072992                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072992                            
00072992                            
00072992                            sub_729B6:				; XREF: loc_71E7C
00072992 41F9 00C0 0011             		lea	($C00011).l,a0
00072998 10BC 009F                  		move.b	#$9F,(a0)
0007299C 10BC 00BF                  		move.b	#$BF,(a0)
000729A0 10BC 00DF                  		move.b	#$DF,(a0)
000729A4 10BC 00FF                  		move.b	#$FF,(a0)
000729A8 4E75                       		rts	
000729AA                            ; End of function sub_729B6
000729AA                            
000729AA                            ; ===========================================================================
000729AA 0356 0326 02F9 02CE 02A5+  word_729CE:	dc.w $356, $326, $2F9, $2CE, $2A5, $280, $25C, $23A, $21A
000729BC 01FB 01DF 01C4 01AB 0193+  		dc.w $1FB, $1DF, $1C4, $1AB, $193, $17D, $167, $153, $140
000729CE 012E 011D 010D 00FE 00EF+  		dc.w $12E, $11D, $10D, $FE, $EF, $E2, $D6, $C9,	$BE, $B4
000729E2 00A9 00A0 0097 008F 0087+  		dc.w $A9, $A0, $97, $8F, $87, $7F, $78,	$71, $6B, $65
000729F6 005F 005A 0055 0050 004B+  		dc.w $5F, $5A, $55, $50, $4B, $47, $43,	$40, $3C, $39
00072A0A 0036 0033 0030 002D 002B+  		dc.w $36, $33, $30, $2D, $2B, $28, $26,	$24, $22, $20
00072A1E 001F 001D 001B 001A 0018+  		dc.w $1F, $1D, $1B, $1A, $18, $17, $16,	$15, $13, $12
00072A32 0011 0000                  		dc.w $11, 0
00072A36                            
00072A36                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072A36                            
00072A36                            
00072A36                            sub_72A5A:				; XREF: sub_71C4E; sub_71CEC; sub_72878
00072A36 0445 00E0                  		subi.w	#$E0,d5
00072A3A E54D                       		lsl.w	#2,d5
00072A3C 4EFB 5000                  		jmp	loc_72A64(pc,d5.w)
00072A40                            ; End of function sub_72A5A
00072A40                            
00072A40                            ; ===========================================================================
00072A40                            
00072A40                            loc_72A64:
00072A40 6000 0000                  		bra.w	loc_72ACC
00072A44                            ; ===========================================================================
00072A44 6000 0000                  		bra.w	loc_72AEC
00072A48                            ; ===========================================================================
00072A48 6000 0000                  		bra.w	loc_72AF2
00072A4C                            ; ===========================================================================
00072A4C 6000 0000                  		bra.w	loc_72AF8
00072A50                            ; ===========================================================================
00072A50 6000 0000                  		bra.w	loc_72B14
00072A54                            ; ===========================================================================
00072A54 6000 0000                  		bra.w	loc_72B9E
00072A58                            ; ===========================================================================
00072A58 6000 0000                  		bra.w	loc_72BA4
00072A5C                            ; ===========================================================================
00072A5C 6000 0000                  		bra.w	loc_72BAE
00072A60                            ; ===========================================================================
00072A60 6000 0000                  		bra.w	loc_72BB4
00072A64                            ; ===========================================================================
00072A64 6000 0000                  		bra.w	loc_72BBE
00072A68                            ; ===========================================================================
00072A68 6000 0000                  		bra.w	loc_72BC6
00072A6C                            ; ===========================================================================
00072A6C 6000 0000                  		bra.w	loc_72BD0
00072A70                            ; ===========================================================================
00072A70 6000 0000                  		bra.w	loc_72BE6
00072A74                            ; ===========================================================================
00072A74 6000 0000                  		bra.w	loc_72BEE
00072A78                            ; ===========================================================================
00072A78 6000 0000                  		bra.w	loc_72BF4
00072A7C                            ; ===========================================================================
00072A7C 6000 0000                  		bra.w	loc_72C26
00072A80                            ; ===========================================================================
00072A80 6000 0000                  		bra.w	loc_72D30
00072A84                            ; ===========================================================================
00072A84 6000 0000                  		bra.w	loc_72D52
00072A88                            ; ===========================================================================
00072A88 6000 0000                  		bra.w	loc_72D58
00072A8C                            ; ===========================================================================
00072A8C 6000 0000                  		bra.w	loc_72E06
00072A90                            ; ===========================================================================
00072A90 6000 0000                  		bra.w	loc_72E20
00072A94                            ; ===========================================================================
00072A94 6000 0000                  		bra.w	loc_72E26
00072A98                            ; ===========================================================================
00072A98 6000 0000                  		bra.w	loc_72E2C
00072A9C                            ; ===========================================================================
00072A9C 6000 0000                  		bra.w	loc_72E38
00072AA0                            ; ===========================================================================
00072AA0 6000 0000                  		bra.w	loc_72E52
00072AA4                            ; ===========================================================================
00072AA4 6000 0000                  		bra.w	loc_72E64
00072AA8                            ; ===========================================================================
00072AA8                            
00072AA8                            loc_72ACC:				; XREF: loc_72A64
00072AA8 121C                       		move.b	(a4)+,d1
00072AAA 4A2D 0001                  		tst.b	1(a5)
00072AAE 6B00                       		bmi.s	locret_72AEA
00072AB0 102D 000A                  		move.b	$A(a5),d0
00072AB4 0200 0037                  		andi.b	#$37,d0
00072AB8 8200                       		or.b	d0,d1
00072ABA 1B41 000A                  		move.b	d1,$A(a5)
00072ABE 103C 00B4                  		move.b	#$B4,d0
00072AC2 6000 FC2E                  		bra.w	loc_72716
00072AC6                            ; ===========================================================================
00072AC6                            
00072AC6                            locret_72AEA:
00072AC6 4E75                       		rts	
00072AC8                            ; ===========================================================================
00072AC8                            
00072AC8                            loc_72AEC:				; XREF: loc_72A64
00072AC8 1B5C 001E                  		move.b	(a4)+,$1E(a5)
00072ACC 4E75                       		rts	
00072ACE                            ; ===========================================================================
00072ACE                            
00072ACE                            loc_72AF2:				; XREF: loc_72A64
00072ACE 1D5C 0007                  		move.b	(a4)+,7(a6)
00072AD2 4E75                       		rts	
00072AD4                            ; ===========================================================================
00072AD4                            
00072AD4                            loc_72AF8:				; XREF: loc_72A64
00072AD4 7000                       		moveq	#0,d0
00072AD6 102D 000D                  		move.b	$D(a5),d0
00072ADA 2875 0000                  		movea.l	(a5,d0.w),a4
00072ADE 2BBC 0000 0000 0000        		move.l	#0,(a5,d0.w)
00072AE6 544C                       		addq.w	#2,a4
00072AE8 5800                       		addq.b	#4,d0
00072AEA 1B40 000D                  		move.b	d0,$D(a5)
00072AEE 4E75                       		rts	
00072AF0                            ; ===========================================================================
00072AF0                            
00072AF0                            loc_72B14:				; XREF: loc_72A64
00072AF0 204E                       		movea.l	a6,a0
00072AF2 43EE 03A0                  		lea	$3A0(a6),a1
00072AF6 303C 0087                  		move.w	#$87,d0
00072AFA                            
00072AFA                            loc_72B1E:
00072AFA 20D9                       		move.l	(a1)+,(a0)+
00072AFC 51C8 FFFC                  		dbf	d0,loc_72B1E
00072B00                            
00072B00 08EE 0002 0040             		bset	#2,$40(a6)
00072B06 264D                       		movea.l	a5,a3
00072B08 1C3C 0028                  		move.b	#$28,d6
00072B0C 9C2E 0026                  		sub.b	$26(a6),d6
00072B10 7E05                       		moveq	#5,d7
00072B12 4BEE 0070                  		lea	$70(a6),a5
00072B16                            
00072B16                            loc_72B3A:
00072B16 0815 0007                  		btst	#7,(a5)
00072B1A 6700                       		beq.s	loc_72B5C
00072B1C 08D5 0001                  		bset	#1,(a5)
00072B20 DD2D 0009                  		add.b	d6,9(a5)
00072B24 0815 0002                  		btst	#2,(a5)
00072B28 6600                       		bne.s	loc_72B5C
00072B2A 7000                       		moveq	#0,d0
00072B2C 102D 000B                  		move.b	$B(a5),d0
00072B30 226E 0018                  		movea.l	$18(a6),a1
00072B34 4EBA 0000                  		jsr	sub_72C4E(pc)
00072B38                            
00072B38                            loc_72B5C:
00072B38 DAFC 0030                  		adda.w	#$30,a5
00072B3C 51CF FFD8                  		dbf	d7,loc_72B3A
00072B40                            
00072B40 7E02                       		moveq	#2,d7
00072B42                            
00072B42                            loc_72B66:
00072B42 0815 0007                  		btst	#7,(a5)
00072B46 6700                       		beq.s	loc_72B78
00072B48 08D5 0001                  		bset	#1,(a5)
00072B4C 4EBA FE2E                  		jsr	sub_729A0(pc)
00072B50 DD2D 0009                  		add.b	d6,9(a5)
00072B54                            
00072B54                            loc_72B78:
00072B54 DAFC 0030                  		adda.w	#$30,a5
00072B58 51CF FFE8                  		dbf	d7,loc_72B66
00072B5C 2A4B                       		movea.l	a3,a5
00072B5E 1D7C 0080 0024             		move.b	#$80,$24(a6)
00072B64 1D7C 0028 0026             		move.b	#$28,$26(a6)
00072B6A 422E 0027                  		clr.b	$27(a6)
00072B6E 33FC 0000 00A1 1100        		move.w	#0,($A11100).l
00072B76 504F                       		addq.w	#8,sp
00072B78 4E75                       		rts	
00072B7A                            ; ===========================================================================
00072B7A                            
00072B7A                            loc_72B9E:				; XREF: loc_72A64
00072B7A 1B5C 0002                  		move.b	(a4)+,2(a5)
00072B7E 4E75                       		rts	
00072B80                            ; ===========================================================================
00072B80                            
00072B80                            loc_72BA4:				; XREF: loc_72A64
00072B80 101C                       		move.b	(a4)+,d0
00072B82 D12D 0009                  		add.b	d0,9(a5)
00072B86 6000 0000                  		bra.w	sub_72CB4
00072B8A                            ; ===========================================================================
00072B8A                            
00072B8A                            loc_72BAE:				; XREF: loc_72A64
00072B8A 08D5 0004                  		bset	#4,(a5)
00072B8E 4E75                       		rts	
00072B90                            ; ===========================================================================
00072B90                            
00072B90                            loc_72BB4:				; XREF: loc_72A64
00072B90 1B54 0012                  		move.b	(a4),$12(a5)
00072B94 1B5C 0013                  		move.b	(a4)+,$13(a5)
00072B98 4E75                       		rts	
00072B9A                            ; ===========================================================================
00072B9A                            
00072B9A                            loc_72BBE:				; XREF: loc_72A64
00072B9A 101C                       		move.b	(a4)+,d0
00072B9C D12D 0008                  		add.b	d0,8(a5)
00072BA0 4E75                       		rts	
00072BA2                            ; ===========================================================================
00072BA2                            
00072BA2                            loc_72BC6:				; XREF: loc_72A64
00072BA2 1D54 0002                  		move.b	(a4),2(a6)
00072BA6 1D5C 0001                  		move.b	(a4)+,1(a6)
00072BAA 4E75                       		rts	
00072BAC                            ; ===========================================================================
00072BAC                            
00072BAC                            loc_72BD0:				; XREF: loc_72A64
00072BAC 41EE 0040                  		lea	$40(a6),a0
00072BB0 101C                       		move.b	(a4)+,d0
00072BB2 7230                       		moveq	#$30,d1
00072BB4 7409                       		moveq	#9,d2
00072BB6                            
00072BB6                            loc_72BDA:
00072BB6 1140 0002                  		move.b	d0,2(a0)
00072BBA D0C1                       		adda.w	d1,a0
00072BBC 51CA FFF8                  		dbf	d2,loc_72BDA
00072BC0                            
00072BC0 4E75                       		rts	
00072BC2                            ; ===========================================================================
00072BC2                            
00072BC2                            loc_72BE6:				; XREF: loc_72A64
00072BC2 101C                       		move.b	(a4)+,d0
00072BC4 D12D 0009                  		add.b	d0,9(a5)
00072BC8 4E75                       		rts	
00072BCA                            ; ===========================================================================
00072BCA                            
00072BCA                            loc_72BEE:				; XREF: loc_72A64
00072BCA 422E 002C                  		clr.b	$2C(a6)
00072BCE 4E75                       		rts	
00072BD0                            ; ===========================================================================
00072BD0                            
00072BD0                            loc_72BF4:				; XREF: loc_72A64
00072BD0 0895 0007                  		bclr	#7,(a5)
00072BD4 0895 0004                  		bclr	#4,(a5)
00072BD8 4EBA FB00                  		jsr	sub_726FE(pc)
00072BDC 4A2E 0250                  		tst.b	$250(a6)
00072BE0 6B00                       		bmi.s	loc_72C22
00072BE2 264D                       		movea.l	a5,a3
00072BE4 4BEE 0100                  		lea	$100(a6),a5
00072BE8 226E 0018                  		movea.l	$18(a6),a1
00072BEC 0895 0002                  		bclr	#2,(a5)
00072BF0 08D5 0001                  		bset	#1,(a5)
00072BF4 102D 000B                  		move.b	$B(a5),d0
00072BF8 4EBA 0000                  		jsr	sub_72C4E(pc)
00072BFC 2A4B                       		movea.l	a3,a5
00072BFE                            
00072BFE                            loc_72C22:
00072BFE 504F                       		addq.w	#8,sp
00072C00 4E75                       		rts	
00072C02                            ; ===========================================================================
00072C02                            
00072C02                            loc_72C26:				; XREF: loc_72A64
00072C02 7000                       		moveq	#0,d0
00072C04 101C                       		move.b	(a4)+,d0
00072C06 1B40 000B                  		move.b	d0,$B(a5)
00072C0A 0815 0002                  		btst	#2,(a5)
00072C0E 6600 0000                  		bne.w	locret_72CAA
00072C12 226E 0018                  		movea.l	$18(a6),a1
00072C16 4A2E 000E                  		tst.b	$E(a6)
00072C1A 6700                       		beq.s	sub_72C4E
00072C1C 226D 0020                  		movea.l	$20(a5),a1
00072C20 4A2E 000E                  		tst.b	$E(a6)
00072C24 6B00                       		bmi.s	sub_72C4E
00072C26 226E 0020                  		movea.l	$20(a6),a1
00072C2A                            
00072C2A                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072C2A                            
00072C2A                            
00072C2A                            sub_72C4E:				; XREF: Snd_FadeOut1; et al
00072C2A 5340                       		subq.w	#1,d0
00072C2C 6B00                       		bmi.s	loc_72C5C
00072C2E 323C 0019                  		move.w	#$19,d1
00072C32                            
00072C32                            loc_72C56:
00072C32 D2C1                       		adda.w	d1,a1
00072C34 51C8 FFFC                  		dbf	d0,loc_72C56
00072C38                            
00072C38                            loc_72C5C:
00072C38 1219                       		move.b	(a1)+,d1
00072C3A 1B41 001F                  		move.b	d1,$1F(a5)
00072C3E 1801                       		move.b	d1,d4
00072C40 103C 00B0                  		move.b	#$B0,d0
00072C44 4EBA FAB8                  		jsr	sub_72722(pc)
00072C48 45FA 0000                  		lea	byte_72D18(pc),a2
00072C4C 7613                       		moveq	#$13,d3
00072C4E                            
00072C4E                            loc_72C72:
00072C4E 101A                       		move.b	(a2)+,d0
00072C50 1219                       		move.b	(a1)+,d1
00072C52 4EBA FAAA                  		jsr	sub_72722(pc)
00072C56 51CB FFF6                  		dbf	d3,loc_72C72
00072C5A 7A03                       		moveq	#3,d5
00072C5C 0244 0007                  		andi.w	#7,d4
00072C60 183B 4000                  		move.b	byte_72CAC(pc,d4.w),d4
00072C64 162D 0009                  		move.b	9(a5),d3
00072C68                            
00072C68                            loc_72C8C:
00072C68 101A                       		move.b	(a2)+,d0
00072C6A 1219                       		move.b	(a1)+,d1
00072C6C E20C                       		lsr.b	#1,d4
00072C6E 6400                       		bcc.s	loc_72C96
00072C70 D203                       		add.b	d3,d1
00072C72                            
00072C72                            loc_72C96:
00072C72 4EBA FA8A                  		jsr	sub_72722(pc)
00072C76 51CD FFF0                  		dbf	d5,loc_72C8C
00072C7A 103C 00B4                  		move.b	#$B4,d0
00072C7E 122D 000A                  		move.b	$A(a5),d1
00072C82 4EBA FA7A                  		jsr	sub_72722(pc)
00072C86                            
00072C86                            locret_72CAA:
00072C86 4E75                       		rts	
00072C88                            ; End of function sub_72C4E
00072C88                            
00072C88                            ; ===========================================================================
00072C88 0808 0808 0A0E 0E0F        byte_72CAC:	dc.b 8,	8, 8, 8, $A, $E, $E, $F
00072C90                            
00072C90                            ; ||||||||||||||| S U B	R O U T	I N E |||||||||||||||||||||||||||||||||||||||
00072C90                            
00072C90                            
00072C90                            sub_72CB4:				; XREF: sub_72504; sub_7267C; loc_72BA4
00072C90 0815 0002                  		btst	#2,(a5)
00072C94 6600                       		bne.s	locret_72D16
00072C96 7000                       		moveq	#0,d0
00072C98 102D 000B                  		move.b	$B(a5),d0
00072C9C 226E 0018                  		movea.l	$18(a6),a1
00072CA0 4A2E 000E                  		tst.b	$E(a6)
00072CA4 6700                       		beq.s	loc_72CD8
00072CA6 226E 0020                  		movea.l	$20(a6),a1
00072CAA 4A2E 000E                  		tst.b	$E(a6)
00072CAE 6B00                       		bmi.s	loc_72CD8
00072CB0 226E 0020                  		movea.l	$20(a6),a1
00072CB4                            
00072CB4                            loc_72CD8:
00072CB4 5340                       		subq.w	#1,d0
00072CB6 6B00                       		bmi.s	loc_72CE6
00072CB8 323C 0019                  		move.w	#$19,d1
00072CBC                            
00072CBC                            loc_72CE0:
00072CBC D2C1                       		adda.w	d1,a1
00072CBE 51C8 FFFC                  		dbf	d0,loc_72CE0
00072CC2                            
00072CC2                            loc_72CE6:
00072CC2 D2FC 0015                  		adda.w	#$15,a1
00072CC6 45FA 0000                  		lea	byte_72D2C(pc),a2
00072CCA 102D 001F                  		move.b	$1F(a5),d0
00072CCE 0240 0007                  		andi.w	#7,d0
00072CD2 183B 00B4                  		move.b	byte_72CAC(pc,d0.w),d4
00072CD6 162D 0009                  		move.b	9(a5),d3
00072CDA 6B00                       		bmi.s	locret_72D16
00072CDC 7A03                       		moveq	#3,d5
00072CDE                            
00072CDE                            loc_72D02:
00072CDE 101A                       		move.b	(a2)+,d0
00072CE0 1219                       		move.b	(a1)+,d1
00072CE2 E20C                       		lsr.b	#1,d4
00072CE4 6400                       		bcc.s	loc_72D12
00072CE6 D203                       		add.b	d3,d1
00072CE8 6500                       		bcs.s	loc_72D12
00072CEA 4EBA FA12                  		jsr	sub_72722(pc)
00072CEE                            
00072CEE                            loc_72D12:
00072CEE 51CD FFEE                  		dbf	d5,loc_72D02
00072CF2                            
00072CF2                            locret_72D16:
00072CF2 4E75                       		rts	
00072CF4                            ; End of function sub_72CB4
00072CF4                            
00072CF4                            ; ===========================================================================
00072CF4 3038 343C 5058 545C 6068   byte_72D18:	dc.b $30, $38, $34, $3C, $50, $58, $54,	$5C, $60, $68
00072CFE 646C 7078 747C 8088 848C   		dc.b $64, $6C, $70, $78, $74, $7C, $80,	$88, $84, $8C
00072D08 4048 444C                  byte_72D2C:	dc.b $40, $48, $44, $4C
00072D0C                            ; ===========================================================================
00072D0C                            
00072D0C                            loc_72D30:				; XREF: loc_72A64
00072D0C 08D5 0003                  		bset	#3,(a5)
00072D10 2B4C 0014                  		move.l	a4,$14(a5)
00072D14 1B5C 0018                  		move.b	(a4)+,$18(a5)
00072D18 1B5C 0019                  		move.b	(a4)+,$19(a5)
00072D1C 1B5C 001A                  		move.b	(a4)+,$1A(a5)
00072D20 101C                       		move.b	(a4)+,d0
00072D22 E208                       		lsr.b	#1,d0
00072D24 1B40 001B                  		move.b	d0,$1B(a5)
00072D28 426D 001C                  		clr.w	$1C(a5)
00072D2C 4E75                       		rts	
00072D2E                            ; ===========================================================================
00072D2E                            
00072D2E                            loc_72D52:				; XREF: loc_72A64
00072D2E 08D5 0003                  		bset	#3,(a5)
00072D32 4E75                       		rts	
00072D34                            ; ===========================================================================
00072D34                            
00072D34                            loc_72D58:				; XREF: loc_72A64
00072D34 0895 0007                  		bclr	#7,(a5)
00072D38 0895 0004                  		bclr	#4,(a5)
00072D3C 4A2D 0001                  		tst.b	1(a5)
00072D40 6B00                       		bmi.s	loc_72D74
00072D42 4A2E 0008                  		tst.b	8(a6)
00072D46 6B00 0000                  		bmi.w	loc_72E02
00072D4A 4EBA F98E                  		jsr	sub_726FE(pc)
00072D4E 6000                       		bra.s	loc_72D78
00072D50                            ; ===========================================================================
00072D50                            
00072D50                            loc_72D74:
00072D50 4EBA FC2A                  		jsr	sub_729A0(pc)
00072D54                            
00072D54                            loc_72D78:
00072D54 4A2E 000E                  		tst.b	$E(a6)
00072D58 6A00 0000                  		bpl.w	loc_72E02
00072D5C 4216                       		clr.b	0(a6)
00072D5E 7000                       		moveq	#0,d0
00072D60 102D 0001                  		move.b	1(a5),d0
00072D64 6B00                       		bmi.s	loc_72DCC
00072D66 41FA F546                  		lea	dword_722CC(pc),a0
00072D6A 264D                       		movea.l	a5,a3
00072D6C 0C00 0004                  		cmpi.b	#4,d0
00072D70 6600                       		bne.s	loc_72DA8
00072D72 4A2E 0340                  		tst.b	$340(a6)
00072D76 6A00                       		bpl.s	loc_72DA8
00072D78 4BEE 0340                  		lea	$340(a6),a5
00072D7C 226E 0020                  		movea.l	$20(a6),a1
00072D80 6000                       		bra.s	loc_72DB8
00072D82                            ; ===========================================================================
00072D82                            
00072D82                            loc_72DA8:
00072D82 5500                       		subq.b	#2,d0
00072D84 E508                       		lsl.b	#2,d0
00072D86 2A70 0000                  		movea.l	(a0,d0.w),a5
00072D8A 4A15                       		tst.b	(a5)
00072D8C 6A00                       		bpl.s	loc_72DC8
00072D8E 226E 0018                  		movea.l	$18(a6),a1
00072D92                            
00072D92                            loc_72DB8:
00072D92 0895 0002                  		bclr	#2,(a5)
00072D96 08D5 0001                  		bset	#1,(a5)
00072D9A 102D 000B                  		move.b	$B(a5),d0
00072D9E 4EBA FE8A                  		jsr	sub_72C4E(pc)
00072DA2                            
00072DA2                            loc_72DC8:
00072DA2 2A4B                       		movea.l	a3,a5
00072DA4 6000                       		bra.s	loc_72E02
00072DA6                            ; ===========================================================================
00072DA6                            
00072DA6                            loc_72DCC:
00072DA6 41EE 0370                  		lea	$370(a6),a0
00072DAA 4A10                       		tst.b	(a0)
00072DAC 6A00                       		bpl.s	loc_72DE0
00072DAE 0C00 00E0                  		cmpi.b	#$E0,d0
00072DB2 6700                       		beq.s	loc_72DEA
00072DB4 0C00 00C0                  		cmpi.b	#$C0,d0
00072DB8 6700                       		beq.s	loc_72DEA
00072DBA                            
00072DBA                            loc_72DE0:
00072DBA 41FA F4F2                  		lea	dword_722CC(pc),a0
00072DBE E608                       		lsr.b	#3,d0
00072DC0 2070 0000                  		movea.l	(a0,d0.w),a0
00072DC4                            
00072DC4                            loc_72DEA:
00072DC4 0890 0002                  		bclr	#2,(a0)
00072DC8 08D0 0001                  		bset	#1,(a0)
00072DCC 0C28 00E0 0001             		cmpi.b	#$E0,1(a0)
00072DD2 6600                       		bne.s	loc_72E02
00072DD4 13E8 001F 00C0 0011        		move.b	$1F(a0),($C00011).l
00072DDC                            
00072DDC                            loc_72E02:
00072DDC 504F                       		addq.w	#8,sp
00072DDE 4E75                       		rts	
00072DE0                            ; ===========================================================================
00072DE0                            
00072DE0                            loc_72E06:				; XREF: loc_72A64
00072DE0 1B7C 00E0 0001             		move.b	#$E0,1(a5)
00072DE6 1B5C 001F                  		move.b	(a4)+,$1F(a5)
00072DEA 0815 0002                  		btst	#2,(a5)
00072DEE 6600                       		bne.s	locret_72E1E
00072DF0 13EC FFFF 00C0 0011        		move.b	-1(a4),($C00011).l
00072DF8                            
00072DF8                            locret_72E1E:
00072DF8 4E75                       		rts	
00072DFA                            ; ===========================================================================
00072DFA                            
00072DFA                            loc_72E20:				; XREF: loc_72A64
00072DFA 0895 0003                  		bclr	#3,(a5)
00072DFE 4E75                       		rts	
00072E00                            ; ===========================================================================
00072E00                            
00072E00                            loc_72E26:				; XREF: loc_72A64
00072E00 1B5C 000B                  		move.b	(a4)+,$B(a5)
00072E04 4E75                       		rts	
00072E06                            ; ===========================================================================
00072E06                            
00072E06                            loc_72E2C:				; XREF: loc_72A64
00072E06 101C                       		move.b	(a4)+,d0
00072E08 E148                       		lsl.w	#8,d0
00072E0A 101C                       		move.b	(a4)+,d0
00072E0C D8C0                       		adda.w	d0,a4
00072E0E 534C                       		subq.w	#1,a4
00072E10 4E75                       		rts	
00072E12                            ; ===========================================================================
00072E12                            
00072E12                            loc_72E38:				; XREF: loc_72A64
00072E12 7000                       		moveq	#0,d0
00072E14 101C                       		move.b	(a4)+,d0
00072E16 121C                       		move.b	(a4)+,d1
00072E18 4A35 0024                  		tst.b	$24(a5,d0.w)
00072E1C 6600                       		bne.s	loc_72E48
00072E1E 1B81 0024                  		move.b	d1,$24(a5,d0.w)
00072E22                            
00072E22                            loc_72E48:
00072E22 5335 0024                  		subq.b	#1,$24(a5,d0.w)
00072E26 66DE                       		bne.s	loc_72E2C
00072E28 544C                       		addq.w	#2,a4
00072E2A 4E75                       		rts	
00072E2C                            ; ===========================================================================
00072E2C                            
00072E2C                            loc_72E52:				; XREF: loc_72A64
00072E2C 7000                       		moveq	#0,d0
00072E2E 102D 000D                  		move.b	$D(a5),d0
00072E32 5900                       		subq.b	#4,d0
00072E34 2B8C 0000                  		move.l	a4,(a5,d0.w)
00072E38 1B40 000D                  		move.b	d0,$D(a5)
00072E3C 60C8                       		bra.s	loc_72E2C
00072E3E                            ; ===========================================================================
00072E3E                            
00072E3E                            loc_72E64:				; XREF: loc_72A64
00072E3E 103C 0088                  		move.b	#$88,d0
00072E42 123C 000F                  		move.b	#$F,d1
00072E46 4EBA F8C2                  		jsr	sub_7272E(pc)
00072E4A 103C 008C                  		move.b	#$8C,d0
00072E4E 123C 000F                  		move.b	#$F,d1
00072E52 6000 F8B6                  		bra.w	sub_7272E
00072E56                            ; ===========================================================================
00072E56                            Kos_Z80:	incbin	sound\z80_1.bin
00072F06 0000                       		dc.w ((SegaPCM&$FF)<<8)+((SegaPCM&$FF00)>>8)
00072F08 21                         		dc.b $21
00072F09 0000                       		dc.w (((EndOfRom-SegaPCM)&$FF)<<8)+(((EndOfRom-SegaPCM)&$FF00)>>8)
00072F0B                            		incbin	sound\z80_2.bin
000745B6                            		even
000745B6                            Music81:	incbin	sound\music81.bin
00074D1E                            		even
00074D1E                            Music82:	incbin	sound\music82.bin
0007516E                            		even
0007516E                            Music83:	incbin	sound\music83.bin
000755CC                            		even
000755CC                            Music84:	incbin	sound\music84.bin
00075A3A                            		even
00075A3A                            Music85:	incbin	sound\music85.bin
00075E86                            		even
00075E86                            Music86:	incbin	sound\music86.bin
000763D6                            		even
000763D6                            Music87:	incbin	sound\music87.bin
000765BC                            		even
000765BC                            Music88:	incbin	sound\music88.bin
000766AA                            		even
000766AA                            Music89:	incbin	sound\music89.bin
000769D6                            		even
000769D6                            Music8A:	incbin	sound\music8A.bin
00076B82                            		even
00076B82                            Music8B:	incbin	sound\music8B.bin
00076E1C                            		even
00076E1C                            Music8C:	incbin	sound\music8C.bin
00077038                            		even
00077038                            Music8D:	incbin	sound\music8D.bin
00077254                            		even
00077254                            Music8E:	incbin	sound\music8E.bin
000773AA                            		even
000773AA                            Music8F:	incbin	sound\music8F.bin
000774FA                            		even
000774FA                            Music90:	incbin	sound\music90.bin
00077658                            		even
00077658                            Music91:	incbin	sound\music91.bin
00078926                            		even
00078926                            Music92:	incbin	sound\music92.bin
00078A50                            		even
00078A50                            Music93:	incbin	sound\music93.bin
00078B1E                            		even
00078B1E                            ; ---------------------------------------------------------------------------
00078B1E                            ; Sound	effect pointers
00078B1E                            ; ---------------------------------------------------------------------------
00078B1E 0000 0000 0000 0000 0000+  SoundIndex:	dc.l SoundA0, SoundA1, SoundA2
00078B2A 0000 0000 0000 0000 0000+  		dc.l SoundA3, SoundA4, SoundA5
00078B36 0000 0000 0000 0000 0000+  		dc.l SoundA6, SoundA7, SoundA8
00078B42 0000 0000 0000 0000 0000+  		dc.l SoundA9, SoundAA, SoundAB
00078B4E 0000 0000 0000 0000 0000+  		dc.l SoundAC, SoundAD, SoundAE
00078B5A 0000 0000 0000 0000 0000+  		dc.l SoundAF, SoundB0, SoundB1
00078B66 0000 0000 0000 0000 0000+  		dc.l SoundB2, SoundB3, SoundB4
00078B72 0000 0000 0000 0000 0000+  		dc.l SoundB5, SoundB6, SoundB7
00078B7E 0000 0000 0000 0000 0000+  		dc.l SoundB8, SoundB9, SoundBA
00078B8A 0000 0000 0000 0000 0000+  		dc.l SoundBB, SoundBC, SoundBD
00078B96 0000 0000 0000 0000 0000+  		dc.l SoundBE, SoundBF, SoundC0
00078BA2 0000 0000 0000 0000 0000+  		dc.l SoundC1, SoundC2, SoundC3
00078BAE 0000 0000 0000 0000 0000+  		dc.l SoundC4, SoundC5, SoundC6
00078BBA 0000 0000 0000 0000 0000+  		dc.l SoundC7, SoundC8, SoundC9
00078BC6 0000 0000 0000 0000 0000+  		dc.l SoundCA, SoundCB, SoundCC
00078BD2 0000 0000 0000 0000 0000+  		dc.l SoundCD, SoundCE, SoundCF
00078BDE 0000 0000                  SoundD0Index:	dc.l SoundD0
00078BE2                            SoundA0:	incbin	sound\soundA0.bin
00078BF8                            		even
00078BF8                            SoundA1:	incbin	sound\soundA1.bin
00078C22                            		even
00078C22                            SoundA2:	incbin	sound\soundA2.bin
00078C42                            		even
00078C42                            SoundA3:	incbin	sound\soundA3.bin
00078C74                            		even
00078C74                            SoundA4:	incbin	sound\soundA4.bin
00078CAA                            		even
00078CAA                            SoundA5:	incbin	sound\soundA5.bin
00078CD6                            		even
00078CD6                            SoundA6:	incbin	sound\soundA6.bin
00078D06                            		even
00078D06                            SoundA7:	incbin	sound\soundA7.bin
00078D36                            		even
00078D36                            SoundA8:	incbin	sound\soundA8.bin
00078D6A                            		even
00078D6A                            SoundA9:	incbin	sound\soundA9.bin
00078D7C                            		even
00078D7C                            SoundAA:	incbin	sound\soundAA.bin
00078DBE                            		even
00078DBE                            SoundAB:	incbin	sound\soundAB.bin
00078DDE                            		even
00078DDE                            SoundAC:	incbin	sound\soundAC.bin
00078E12                            		even
00078E12                            SoundAD:	incbin	sound\soundAD.bin
00078E48                            		even
00078E48                            SoundAE:	incbin	sound\soundAE.bin
00078E92                            		even
00078E92                            SoundAF:	incbin	sound\soundAF.bin
00078EC0                            		even
00078EC0                            SoundB0:	incbin	sound\soundB0.bin
00078EF2                            		even
00078EF2                            SoundB1:	incbin	sound\soundB1.bin
00078F1E                            		even
00078F1E                            SoundB2:	incbin	sound\soundB2.bin
00078F6E                            		even
00078F6E                            SoundB3:	incbin	sound\soundB3.bin
00078FB8                            		even
00078FB8                            SoundB4:	incbin	sound\soundB4.bin
00079014                            		even
00079014                            SoundB5:	incbin	sound\soundB5.bin
00079042                            		even
00079042                            SoundB6:	incbin	sound\soundB6.bin
00079060                            		even
00079060                            SoundB7:	incbin	sound\soundB7.bin
0007909C                            		even
0007909C                            SoundB8:	incbin	sound\soundB8.bin
000790BA                            		even
000790BA                            SoundB9:	incbin	sound\soundB9.bin
0007911E                            		even
0007911E                            SoundBA:	incbin	sound\soundBA.bin
00079146                            		even
00079146                            SoundBB:	incbin	sound\soundBB.bin
00079172                            		even
00079172                            SoundBC:	incbin	sound\soundBC.bin
000791B4                            		even
000791B4                            SoundBD:	incbin	sound\soundBD.bin
00079208                            		even
00079208                            SoundBE:	incbin	sound\soundBE.bin
00079242                            		even
00079242                            SoundBF:	incbin	sound\soundBF.bin
000792B4                            		even
000792B4                            SoundC0:	incbin	sound\soundC0.bin
000792E2                            		even
000792E2                            SoundC1:	incbin	sound\soundC1.bin
0007931C                            		even
0007931C                            SoundC2:	incbin	sound\soundC2.bin
00079346                            		even
00079346                            SoundC3:	incbin	sound\soundC3.bin
000793C0                            		even
000793C0                            SoundC4:	incbin	sound\soundC4.bin
000793E8                            		even
000793E8                            SoundC5:	incbin	sound\soundC5.bin
00079450                            		even
00079450                            SoundC6:	incbin	sound\soundC6.bin
00079492                            		even
00079492                            SoundC7:	incbin	sound\soundC7.bin
000794C0                            		even
000794C0                            SoundC8:	incbin	sound\soundC8.bin
000794D2                            		even
000794D2                            SoundC9:	incbin	sound\soundC9.bin
00079500                            		even
00079500                            SoundCA:	incbin	sound\soundCA.bin
0007952E                            		even
0007952E                            SoundCB:	incbin	sound\soundCB.bin
0007957A                            		even
0007957A                            SoundCC:	incbin	sound\soundCC.bin
000795B4                            		even
000795B4                            SoundCD:	incbin	sound\soundCD.bin
000795C2                            		even
000795C2                            SoundCE:	incbin	sound\soundCE.bin
000795F0                            		even
000795F0                            SoundCF:	incbin	sound\soundCF.bin
00079628                            		even
00079628                            SoundD0:	incbin	sound\soundD0.bin
00079662                            		even
00079662                            SegaPCM:	incbin	sound\segapcm.bin
0007FFDA                            SegaPCM_end:	even
0007FFDA                            
0007FFDA                            ; end of 'ROM'
0007FFDA                            EndOfRom:
0007FFDA                            
0007FFDA                            
